_DWORD *agxps_gpu_create(int a1, int a2, int a3)
{
  _DWORD *result;
  result = operator new(0x28uLL);
  *result = a1;
  result[1] = a2;
  result[2] = a3;
  *((void *)result + 3) = 0LL;
  *((void *)result + 4) = 0LL;
  *((void *)result + 2) = 0LL;
  return result;
}

BOOL agxps_gpu_is_valid(uint64_t a1)
{
  return a1 != 0;
}

uint64_t agxps_gpu_get_gen(unsigned int *a1)
{
  return *a1;
}

uint64_t agxps_gpu_get_variant(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t agxps_gpu_get_rev(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_2120()
{
}

void sub_2134(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_2184(exception, a1);
}

void sub_2170(_Unwind_Exception *a1)
{
}

std::logic_error *sub_2184(std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  return result;
}

void *sub_21A8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_21DC();
  }
  return operator new(8 * a2);
}

void sub_21DC()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

uint64_t sub_2204(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v3 -= 80LL;
        sub_4F54(v3);
      }

      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }

    *(void *)(a1 + 16) = v2;
    operator delete(v4);
  }

  return a1;
}

uint64_t sub_2294( uint64_t (**a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6 = *a1;
  if (*a1) {
    return v6(a2, a3, a4, a5, a6);
  }
  v6 = a1[1];
  if (v6) {
    return v6(a2, a3, a4, a5, a6);
  }
  else {
    return sub_98F4();
  }
}

uint64_t sub_22C0(uint64_t a1, char *__s1, const char *a3, int a4)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 16) = a4;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  if ((a4 & 1) != 0)
  {
    if (__s1)
    {
      size_t v7 = strnlen(__s1, 0x4000uLL);
      v8 = (char *)operator new[](v7 + 1);
      v9 = strncpy(v8, __s1, v7);
      v9[v7] = 0;
    }

    else
    {
      v9 = 0LL;
    }

    *(void *)a1 = v9;
    if (a3)
    {
      size_t v10 = strnlen(a3, 0x4000uLL);
      v11 = (char *)operator new[](v10 + 1);
      v12 = strncpy(v11, a3, v10);
      v12[v10] = 0;
      a3 = v12;
    }
  }

  else
  {
    *(void *)a1 = __s1;
  }

  *(void *)(a1 + 8) = a3;
  return a1;
}

void sub_23A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void **sub_23C0(void **a1)
{
  uint64_t v3 = a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v3);
  return a1;
}

uint64_t sub_23F8(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    uint64_t v2 = *(void **)a1;
    if (*(void *)a1) {
      operator delete[](v2);
    }
    uint64_t v3 = *(void **)(a1 + 8);
    if (v3) {
      operator delete[](v3);
    }
  }

  v5 = (void **)(a1 + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v5);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a1 + 24);
  return a1;
}

void __clang_call_terminate(void *a1)
{
}

uint64_t sub_246C(uint64_t a1, int a2, int a3, uint64_t a4)
{
  unsigned int v8 = a3 | (a2 << 16);
  v9 = (int *)&v8;
  v6 = sub_7768(a1 + 24, &v8, (uint64_t)algn_313722, &v9);
  v6[3] = a4;
  v6[4] = 0LL;
  return a1;
}

uint64_t sub_24C8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = 0x500000011LL;
  while (1)
  {
    unint64_t v8 = sub_4FCC(v8, HIDWORD(v8));
    if (!v9) {
      break;
    }
    if (v9 != 1) {
      sub_508C();
    }
  }

  unint64_t v10 = a2 | (unint64_t)(a3 << 32);
  do
  {
    unsigned int v14 = HIDWORD(v10) | ((_DWORD)v10 << 16);
    v15 = (int *)&v14;
    v11 = sub_7768(a1 + 24, &v14, (uint64_t)algn_313722, &v15);
    v11[3] = a4;
    v11[4] = 0LL;
    unint64_t v10 = sub_4FCC(v10, HIDWORD(v10));
  }

  while (v12 == 1LL);
  return a1;
}

uint64_t sub_25B8(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8 = a2 | (unint64_t)(a3 << 32);
  unint64_t v9 = sub_4FCC(a4, a5);
  uint64_t v11 = v10;
  do
  {
    if (v11 && v8 == v9) {
      break;
    }
    unsigned int v15 = HIDWORD(v8) | ((_DWORD)v8 << 16);
    v16 = (int *)&v15;
    char v12 = sub_7768(a1 + 24, &v15, (uint64_t)algn_313722, &v16);
    v12[3] = a6;
    v12[4] = 0LL;
    unint64_t v8 = sub_4FCC(v8, HIDWORD(v8));
  }

  while (v13 == 1LL);
  return a1;
}

uint64_t *sub_2684(uint64_t *a1, char *a2)
{
  unint64_t v3 = a1[10];
  unint64_t v4 = a1[9];
  if (v4 >= v3)
  {
    uint64_t v6 = a1[8];
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v6) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_2120();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555LL) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    v19[4] = a1 + 10;
    if (v10) {
      uint64_t v11 = (char *)sub_6C2C((uint64_t)(a1 + 10), v10);
    }
    else {
      uint64_t v11 = 0LL;
    }
    char v12 = &v11[24 * v7];
    v19[0] = v11;
    v19[1] = v12;
    v19[3] = &v11[24 * v10];
    __int128 v13 = *(_OWORD *)__p;
    *((void *)v12 + 2) = v18;
    *(_OWORD *)char v12 = v13;
    __p[1] = 0LL;
    uint64_t v18 = 0LL;
    __p[0] = 0LL;
    v19[2] = v12 + 24;
    sub_798C(a1 + 8, v19);
    uint64_t v14 = a1[9];
    sub_7B14((uint64_t)v19);
    int v15 = SHIBYTE(v18);
    a1[9] = v14;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    __int128 v5 = *(_OWORD *)__p;
    *(void *)(v4 + 16) = v18;
    *(_OWORD *)unint64_t v4 = v5;
    a1[9] = v4 + 24;
  }

  return a1;
}

void sub_27C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_27F0(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_WORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  return result;
}

uint64_t sub_282C(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  uint64_t v4 = a1 + 48;
  sub_7B9C(a1 + 8, (uint64_t)(a2 + 1));
  sub_8264(v4, (uint64_t)(a2 + 6));
  *(_WORD *)(a1 + 88) = 257;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  sub_28F4(a1);
  return a1;
}

void sub_28C0(_Unwind_Exception *a1)
{
}

uint64_t sub_28F4(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_BYTE *)(result + 88))
  {
    *(_BYTE *)(result + 88) = 0;
    double result = (uint64_t)std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::clear((void *)(result + 96));
    for (i = *(uint64_t **)(v1 + 24); i; i = (uint64_t *)*i)
    {
      uint64_t v3 = i + 5;
      uint64_t v4 = i + 2;
      uint64_t v5 = *((unsigned __int8 *)i + 39);
      if ((v5 & 0x80u) != 0LL)
      {
        uint64_t v4 = (uint64_t *)i[2];
        uint64_t v5 = i[3];
      }

      *(void *)&__int128 v10 = v4;
      *((void *)&v10 + 1) = v5;
      *(void *)&__int128 v11 = v3;
      double result = sub_8FF4((void *)(v1 + 96), (uint64_t)&v10);
    }
  }

  if (*(_BYTE *)(v1 + 89))
  {
    *(_BYTE *)(v1 + 89) = 0;
    uint64_t v6 = v1 + 136;
    double result = (uint64_t)std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::clear((void *)(v1 + 136));
    for (j = *(uint64_t **)(v1 + 64); j; j = (uint64_t *)*j)
    {
      uint64_t v8 = *((unsigned __int8 *)j + 39);
      if ((v8 & 0x80u) == 0LL) {
        unint64_t v9 = j + 2;
      }
      else {
        unint64_t v9 = (uint64_t *)j[2];
      }
      if ((v8 & 0x80u) != 0LL) {
        uint64_t v8 = j[3];
      }
      *(void *)&__int128 v10 = v9;
      *((void *)&v10 + 1) = v8;
      __int128 v11 = *(_OWORD *)(j + 5);
      double result = (uint64_t)sub_94F8(v6, (uint64_t)&v10, &v10);
    }
  }

  return result;
}

uint64_t sub_29F8(uint64_t a1)
{
  return a1;
}

uint64_t sub_2A38(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  unint64_t v7 = 0LL;
  uint64_t v8 = &v5;
  char v9 = 0;
  uint64_t v5 = (char *)operator new(0x30uLL);
  uint64_t v6 = v5;
  unint64_t v7 = (__int128 *)(v5 + 48);
  uint64_t v6 = sub_85FC((uint64_t)&v7, (__int128 *)__dst, &v14, v5);
  sub_2B58(a1, (__int128 **)&v5);
  uint64_t v8 = &v5;
  sub_87F8((void ***)&v8);
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v11 < 0) {
    operator delete(__dst[0]);
  }
  return a1;
}

void sub_2B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  sub_87F8((void ***)va);
  sub_2C04((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2B58(uint64_t a1, __int128 **a2)
{
  *(_BYTE *)(a1 + 88) = 1;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = (char *)v4 + 24;
      sub_51F4((char *)v8, v4, (__int128 *)((char *)v4 + 24));
      sub_887C((void *)(a1 + 8), (uint64_t)v8);
      if (v11 < 0) {
        operator delete(__p);
      }
      if (v9 < 0) {
        operator delete(v8[0]);
      }
      uint64_t v4 = (__int128 *)(v6 + 24);
    }

    while (v6 + 24 != (char *)v5);
  }

  return a1;
}

void sub_2BF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2C04(uint64_t a1)
{
  return a1;
}

uint64_t sub_2C44(uint64_t a1, uint64_t a2, double a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_5154(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
  }

  double v13 = a3;
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v6 = 0LL;
  char v9 = &v6;
  char v10 = 0;
  uint64_t v6 = (__int128 *)operator new(0x20uLL);
  uint64_t v7 = v6;
  uint64_t v8 = v6 + 2;
  uint64_t v7 = (__int128 *)sub_89A8((uint64_t)&v8, (__int128 *)__p, &v14, v6);
  sub_2D94(a1, &v6);
  char v9 = &v6;
  sub_8AE8((void ***)&v9);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_2D50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

uint64_t sub_2D94(uint64_t a1, __int128 **a2)
{
  *(_BYTE *)(a1 + 89) = 1;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      uint64_t v5 = *((void *)v3 + 3);
      if (*((char *)v3 + 23) < 0)
      {
        sub_5154(__p, *(void **)v3, *((void *)v3 + 1));
      }

      else
      {
        __int128 v6 = *v3;
        uint64_t v9 = *((void *)v3 + 2);
        *(_OWORD *)__p = v6;
      }

      int v10 = 0;
      uint64_t v11 = v5;
      sub_8B74(a1 + 48, (unsigned __int8 *)__p, (uint64_t)__p);
      if (SHIBYTE(v9) < 0) {
        operator delete(__p[0]);
      }
      v3 += 2;
    }

    while (v3 != v4);
  }

  return a1;
}

void sub_2E44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2E60(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_2E84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a2 + 64);
  if (v4)
  {
    while (1)
    {
      if (*((char *)v4 + 39) < 0)
      {
        sub_5154(__p, (void *)v4[2], v4[3]);
      }

      else
      {
        *(_OWORD *)__p = *((_OWORD *)v4 + 1);
        uint64_t v12 = v4[4];
      }

      __int128 v13 = *(_OWORD *)(v4 + 5);
      uint64_t v5 = sub_7470((void *)(a1 + 48), (unsigned __int8 *)__p);
      if (v5) {
        int v6 = sub_9AC8(*((void *)v5 + 5), *((void *)v5 + 6), v13, *((uint64_t *)&v13 + 1));
      }
      else {
        int v6 = 3;
      }
      if (SHIBYTE(v12) < 0) {
        operator delete(__p[0]);
      }
      if (v6 != 3 && v6) {
        return 0LL;
      }
      uint64_t v4 = (uint64_t *)*v4;
      if (!v4) {
        goto LABEL_13;
      }
    }
  }

  else
  {
LABEL_13:
    for (i = *(__int128 **)(a2 + 24); i; i = *(__int128 **)i)
    {
      sub_5288((char *)__p, i + 1);
      *(_BYTE *)(a1 + 88) = 1;
      sub_8E98((void *)(a1 + 8), (__int128 *)__p);
      if (v14 < 0) {
        operator delete((void *)v13);
      }
      if (SHIBYTE(v12) < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v8 = *(uint64_t **)(a2 + 64);
    uint64_t v9 = 1LL;
    if (v8)
    {
      do
      {
        if (*((char *)v8 + 39) < 0)
        {
          sub_5154(__p, (void *)v8[2], v8[3]);
        }

        else
        {
          *(_OWORD *)__p = *((_OWORD *)v8 + 1);
          uint64_t v12 = v8[4];
        }

        __int128 v13 = *(_OWORD *)(v8 + 5);
        *(_BYTE *)(a1 + 89) = 1;
        sub_82D8(a1 + 48, (unsigned __int8 *)__p, (uint64_t)__p);
        if (SHIBYTE(v12) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = (uint64_t *)*v8;
      }

      while (v8);
      return 1LL;
    }
  }

  return v9;
}

void sub_3030( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_3060(unsigned int *a1)
{
  int gen = agxps_gpu_get_gen(a1);
  unsigned int v5 = agxps_gpu_get_variant((uint64_t)a1) | (gen << 16);
  if ((byte_5B8B28 & 1) == 0) {
    return 0LL;
  }
  uint64_t v4 = sub_531C(&qword_5B8B48, &v5);
  if (v4) {
    return v4 + 3;
  }
  else {
    return 0LL;
  }
}

uint64_t *sub_30D8(unint64_t a1)
{
  if (0xCCCCCCCCCCCCCCCDLL * ((qword_5B8B38 - qword_5B8B30) >> 4) > a1
    && (uint64_t v1 = *(void *)(qword_5B8B30 + 80 * a1 + 72)) != 0)
  {
    return (uint64_t *)(v1 + 8);
  }

  else
  {
    return &qword_5B9DA8;
  }
}

BOOL agxps_counter_is_valid(unint64_t a1)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((qword_5B8B38 - qword_5B8B30) >> 4) > a1;
}

BOOL agxps_counter_is_derived(unint64_t a1)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((qword_5B8B38 - qword_5B8B30) >> 4) > a1
      && *(void *)(qword_5B8B30 + 80 * a1 + 72) != 0LL;
}

void agxps_initialize()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&byte_5B8B28);
  if ((v0 & 1) != 0)
  {
    unsigned __int8 v1 = atomic_load((unsigned __int8 *)&byte_5B8B28);
    if ((v1 & 1) != 0)
    {
      uint64_t v2 = qword_5B8B30;
      for (uint64_t i = qword_5B8B38; i != v2; sub_4F54(i))
        i -= 80LL;
      qword_5B8B38 = v2;
      sub_53D0((uint64_t)&qword_5B8B48);
      sub_5424((uint64_t)qword_5B8B70);
      sub_5478((uint64_t)&xmmword_5B8B98);
      atomic_store(0, (unsigned __int8 *)&byte_5B8B28);
    }
  }

  __asm { BR              X9 }

void sub_3778( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, void *a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, void *__p, uint64_t a47, int a48, __int16 a49, char a50,char a51,uint64_t a52)
{
  *(void *)(v52 - 128) = &a34;
  sub_981C((void ***)(v52 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_386C(unsigned int a1, uint64_t a2)
{
  unsigned int v62 = a1;
  if ((byte_5B8B28 & 1) != 0) {
    return -1LL;
  }
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((qword_5B8B38 - qword_5B8B30) >> 4);
  v63 = &v62;
  uint64_t v4 = sub_54CC((uint64_t)qword_5B8B70, &v62, (uint64_t)algn_313722, &v63);
  v63 = (unsigned int *)a2;
  *((void *)sub_59B4((uint64_t)(v4 + 3), (unsigned __int8 *)a2, (uint64_t)algn_313722, (__int128 **)&v63) + 5) = v3;
  if (*(void *)(a2 + 72))
  {
    v63 = &v62;
    unsigned int v5 = sub_6288((uint64_t)&xmmword_5B8B98, &v62, (uint64_t)algn_313722, &v63);
    int v6 = v5;
    uint64_t v7 = (unint64_t *)v5[4];
    uint64_t v8 = (uint64_t)(v5 + 5);
    unint64_t v9 = v5[5];
    if ((unint64_t)v7 >= v9)
    {
      uint64_t v11 = (unint64_t *)v5[3];
      uint64_t v12 = v7 - v11;
      if ((unint64_t)(v12 + 1) >> 61) {
LABEL_59:
      }
        sub_2120();
      unint64_t v13 = v9 - (void)v11;
      unint64_t v14 = (uint64_t)(v9 - (void)v11) >> 2;
      if (v14 <= v12 + 1) {
        unint64_t v14 = v12 + 1;
      }
      if (v13 >= 0x7FFFFFFFFFFFFFF8LL) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15)
      {
        v16 = (char *)sub_21A8(v8, v15);
        uint64_t v11 = (unint64_t *)v6[3];
        uint64_t v7 = (unint64_t *)v6[4];
      }

      else
      {
        v16 = 0LL;
      }

      v17 = (unint64_t *)&v16[8 * v12];
      uint64_t v18 = &v16[8 * v15];
      unint64_t *v17 = v3;
      int v10 = v17 + 1;
      while (v7 != v11)
      {
        unint64_t v19 = *--v7;
        *--v17 = v19;
      }

      v6[3] = v17;
      v6[4] = v10;
      v6[5] = v18;
      if (v11) {
        operator delete(v11);
      }
    }

    else
    {
      *uint64_t v7 = v3;
      int v10 = v7 + 1;
    }

    v6[4] = v10;
    v63 = &v62;
    v20 = sub_6528((uint64_t)&unk_5B8BC0, &v62, (uint64_t)algn_313722, &v63);
    v21 = sub_4878(a2);
    v22 = (__int128 *)*v21;
    v23 = (__int128 *)v21[1];
    if ((__int128 *)*v21 != v23)
    {
      uint64_t v24 = (uint64_t)(v20 + 3);
      do
      {
        v63 = (unsigned int *)v22;
        v25 = sub_67DC(v24, (unsigned __int8 *)v22, (uint64_t)algn_313722, (__int128 **)&v63);
        v26 = v25;
        v27 = (unint64_t *)*((void *)v25 + 6);
        uint64_t v28 = (uint64_t)(v25 + 56);
        unint64_t v29 = *((void *)v25 + 7);
        if ((unint64_t)v27 >= v29)
        {
          v31 = (unint64_t *)*((void *)v25 + 5);
          uint64_t v32 = v27 - v31;
          unint64_t v33 = v29 - (void)v31;
          unint64_t v34 = (uint64_t)(v29 - (void)v31) >> 2;
          if (v34 <= v32 + 1) {
            unint64_t v34 = v32 + 1;
          }
          if (v33 >= 0x7FFFFFFFFFFFFFF8LL) {
            unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v34;
          }
          if (v35)
          {
            v36 = (char *)sub_21A8(v28, v35);
            v31 = (unint64_t *)*((void *)v26 + 5);
            v27 = (unint64_t *)*((void *)v26 + 6);
          }

          else
          {
            v36 = 0LL;
          }

          v37 = (unint64_t *)&v36[8 * v32];
          unint64_t *v37 = v3;
          v30 = v37 + 1;
          while (v27 != v31)
          {
            unint64_t v38 = *--v27;
            *--v37 = v38;
          }

          *((void *)v26 + 5) = v37;
          *((void *)v26 + 6) = v30;
          *((void *)v26 + 7) = &v36[8 * v35];
          if (v31) {
            operator delete(v31);
          }
        }

        else
        {
          unint64_t *v27 = v3;
          v30 = v27 + 1;
        }

        *((void *)v26 + 6) = v30;
        v22 = (__int128 *)((char *)v22 + 24);
      }

      while (v22 != v23);
    }
  }

  uint64_t v39 = qword_5B8B38;
  if (qword_5B8B38 >= (unint64_t)qword_5B8B40)
  {
    unint64_t v45 = 0xCCCCCCCCCCCCCCCDLL * ((qword_5B8B38 - qword_5B8B30) >> 4);
    unint64_t v46 = v45 + 1;
    if (v45 + 1 > 0x333333333333333LL) {
      sub_2120();
    }
    if (0x999999999999999ALL * ((qword_5B8B40 - qword_5B8B30) >> 4) > v46) {
      unint64_t v46 = 0x999999999999999ALL * ((qword_5B8B40 - qword_5B8B30) >> 4);
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((qword_5B8B40 - qword_5B8B30) >> 4) >= 0x199999999999999LL) {
      unint64_t v47 = 0x333333333333333LL;
    }
    else {
      unint64_t v47 = v46;
    }
    if (v47 > 0x333333333333333LL) {
      sub_21DC();
    }
    v48 = (char *)operator new(80 * v47);
    v49 = &v48[80 * v45];
    *(_OWORD *)v49 = *(_OWORD *)a2;
    *((void *)v49 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(_OWORD *)(v49 + 24) = *(_OWORD *)(a2 + 24);
    *((void *)v49 + 5) = *(void *)(a2 + 40);
    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + 24) = 0LL;
    *(void *)(a2 + 32) = 0LL;
    *(void *)(a2 + 40) = 0LL;
    __int128 v50 = *(_OWORD *)(a2 + 48);
    *(void *)(a2 + 48) = 0LL;
    *(void *)(a2 + 56) = 0LL;
    uint64_t v51 = *(void *)(a2 + 64);
    uint64_t v52 = *(void *)(a2 + 72);
    *(void *)(a2 + 64) = 0LL;
    *(void *)(a2 + 72) = 0LL;
    *((_OWORD *)v49 + 3) = v50;
    *((void *)v49 + 8) = v51;
    *((void *)v49 + 9) = v52;
    uint64_t v53 = qword_5B8B30;
    v54 = (char *)qword_5B8B38;
    if (qword_5B8B38 == qword_5B8B30)
    {
      uint64_t v44 = (uint64_t)(v49 + 80);
      qword_5B8B30 = (uint64_t)&v48[80 * v45];
      qword_5B8B38 = (uint64_t)(v49 + 80);
      qword_5B8B40 = (uint64_t)&v48[80 * v47];
    }

    else
    {
      uint64_t v55 = (uint64_t)&v48[80 * v45];
      do
      {
        __int128 v56 = *((_OWORD *)v54 - 5);
        *(void *)(v55 - 64) = *((void *)v54 - 8);
        *(_OWORD *)(v55 - 80) = v56;
        *((void *)v54 - 9) = 0LL;
        *((void *)v54 - 8) = 0LL;
        *((void *)v54 - 10) = 0LL;
        __int128 v57 = *(_OWORD *)(v54 - 56);
        *(void *)(v55 - 40) = *((void *)v54 - 5);
        *(_OWORD *)(v55 - 56) = v57;
        *((void *)v54 - 6) = 0LL;
        *((void *)v54 - 5) = 0LL;
        *((void *)v54 - 7) = 0LL;
        __int128 v58 = *((_OWORD *)v54 - 2);
        *(void *)(v55 - 16) = *((void *)v54 - 2);
        *(_OWORD *)(v55 - 32) = v58;
        *((void *)v54 - 4) = 0LL;
        *((void *)v54 - 3) = 0LL;
        uint64_t v59 = *((void *)v54 - 1);
        *((void *)v54 - 2) = 0LL;
        *((void *)v54 - 1) = 0LL;
        *(void *)(v55 - 8) = v59;
        v55 -= 80LL;
        v54 -= 80;
      }

      while (v54 != (char *)v53);
      v54 = (char *)qword_5B8B30;
      uint64_t v60 = qword_5B8B38;
      uint64_t v44 = (uint64_t)(v49 + 80);
      qword_5B8B30 = v55;
      qword_5B8B38 = (uint64_t)(v49 + 80);
      qword_5B8B40 = (uint64_t)&v48[80 * v47];
      while ((char *)v60 != v54)
      {
        v60 -= 80LL;
        sub_4F54(v60);
      }
    }

    if (v54) {
      operator delete(v54);
    }
  }

  else
  {
    __int128 v40 = *(_OWORD *)a2;
    *(void *)(qword_5B8B38 + 16) = *(void *)(a2 + 16);
    *(_OWORD *)uint64_t v39 = v40;
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
    *(void *)a2 = 0LL;
    __int128 v41 = *(_OWORD *)(a2 + 24);
    *(void *)(v39 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(v39 + 24) = v41;
    *(void *)(a2 + 32) = 0LL;
    *(void *)(a2 + 40) = 0LL;
    *(void *)(a2 + 24) = 0LL;
    __int128 v42 = *(_OWORD *)(a2 + 48);
    *(void *)(v39 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(v39 + 48) = v42;
    *(void *)(a2 + 48) = 0LL;
    *(void *)(a2 + 56) = 0LL;
    uint64_t v43 = *(void *)(a2 + 72);
    *(void *)(a2 + 64) = 0LL;
    *(void *)(a2 + 72) = 0LL;
    *(void *)(v39 + 72) = v43;
    uint64_t v44 = v39 + 80;
  }

  qword_5B8B38 = v44;
  return v3;
}

uint64_t sub_3D44(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 72);
  *(void *)(a1 + 72) = 0LL;
  if (v2)
  {
    uint64_t v4 = v2 + 3;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v4);
    operator delete(v2);
  }

  return a1;
}

void sub_3DC0(_BYTE **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (**a1)
  {
    if (*(void *)(a2 + 48))
    {
      uint64_t v4 = (uint64_t *)(a2 + 40);
      while (1)
      {
        uint64_t v4 = (uint64_t *)*v4;
        if (!v4) {
          break;
        }
        unsigned int v5 = *((_DWORD *)v4 + 4);
        sub_76B8(v17, *(char **)a2);
        sub_76B8(v15, *(char **)(a2 + 8));
        int v6 = *(_DWORD *)(a2 + 16);
        uint64_t v14 = 0LL;
        __int128 v13 = 0uLL;
        sub_6B58( (char *)&v13,  *(__int128 **)(a2 + 64),  *(__int128 **)(a2 + 72),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3));
        *(_OWORD *)unint64_t v19 = *(_OWORD *)v17;
        uint64_t v20 = v18;
        v17[1] = 0LL;
        uint64_t v18 = 0LL;
        __int128 v21 = *(_OWORD *)v15;
        uint64_t v22 = v16;
        v15[0] = 0LL;
        v15[1] = 0LL;
        uint64_t v16 = 0LL;
        v17[0] = 0LL;
        uint64_t v24 = 0LL;
        uint64_t v25 = 0LL;
        __p = 0LL;
        uint64_t v7 = (char *)operator new(0x30uLL);
        uint64_t v8 = v14;
        __int128 v9 = v13;
        uint64_t v14 = 0LL;
        __int128 v13 = 0uLL;
        *(_DWORD *)uint64_t v7 = v6;
        *(_OWORD *)(v7 + 8) = *(_OWORD *)(v4 + 3);
        *(_OWORD *)(v7 + 24) = v9;
        *((void *)v7 + 5) = v8;
        memset(v27, 0, sizeof(v27));
        v26 = (void **)v7;
        uint64_t v28 = v27;
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v28);
        unint64_t v10 = sub_386C(v5, (uint64_t)v19);
        uint64_t v11 = v26;
        v26 = 0LL;
        if (v11)
        {
          v27[0] = v11 + 3;
          std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v27);
          operator delete(v11);
        }

        if (SHIBYTE(v25) < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v22) < 0) {
          operator delete((void *)v21);
        }
        if (SHIBYTE(v20) < 0) {
          operator delete(v19[0]);
        }
        v27[0] = (void **)&v13;
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v27);
        if (SHIBYTE(v16) < 0) {
          operator delete(v15[0]);
        }
        if (SHIBYTE(v18) < 0) {
          operator delete(v17[0]);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((qword_5B8B38 - qword_5B8B30) >> 4) <= v10)
        {
          uint64_t v2 = *a1;
          goto LABEL_19;
        }
      }
    }

    else
    {
LABEL_19:
      *uint64_t v2 = 0;
    }
  }

void sub_3FC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
  *(void *)(v38 - 120) = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)(v38 - 120));
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

_BYTE **sub_4040(_BYTE **result, uint64_t a2)
{
  if (**result && (byte_5B8B28 & 1) == 0)
  {
    int v10 = *(_DWORD *)(a2 + 4) | (*(_DWORD *)a2 << 16);
    unint64_t v3 = sub_531C(&qword_5B8B48, (unsigned int *)&v10);
    if (v3)
    {
      return (_BYTE **)sub_2E84((uint64_t)(v3 + 3), a2);
    }

    else
    {
      int v4 = v10;
      sub_282C((uint64_t)&v5, (void *)a2);
      sub_6E30((uint64_t)&qword_5B8B48, (unsigned int *)&v4, (uint64_t)&v4);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v9);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v8);
      sub_4E2C((uint64_t)&v7);
      return (_BYTE **)sub_4B28((uint64_t)&v6);
    }
  }

  return result;
}

void sub_40F8(_Unwind_Exception *a1)
{
}

uint64_t agxps_load_counter_obfuscation_map(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", a1);
  }

  else
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSBundle bundleWithIdentifier:]( &OBJC_CLASS___NSBundle,  "bundleWithIdentifier:",  @"com.apple.gpusw.AGXProfilingSupport"));
    uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 pathForResource:@"RawCountersMapping" ofType:@"csv"]);

    uint64_t v1 = (NSString *)v3;
  }

  v30 = v1;
  if (v1
    && (unint64_t v29 = -[NSString initWithContentsOfFile:encoding:error:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithContentsOfFile:encoding:error:",  v1,  4LL,  0LL)) != 0LL)
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet newlineCharacterSet](&OBJC_CLASS___NSCharacterSet, "newlineCharacterSet"));
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSString componentsSeparatedByCharactersInSet:](v29, "componentsSeparatedByCharactersInSet:", v4));

    sub_7134((uint64_t)&xmmword_5B8BE8);
    id v6 = [v5 count];
    sub_573C((uint64_t)&xmmword_5B8BE8, vcvtps_u32_f32((float)(unint64_t)v6 / *(float *)&dword_5B8C08));
    sub_7134((uint64_t)&unk_5B8C10);
    id v7 = [v5 count];
    sub_573C((uint64_t)&unk_5B8C10, vcvtps_u32_f32((float)(unint64_t)v7 / *(float *)&dword_5B8C30));
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    id obj = v5;
    id v8 = [obj countByEnumeratingWithState:&v32 objects:v42 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v33;
      do
      {
        int v10 = 0LL;
        do
        {
          if (*(void *)v33 != v9) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)v10);
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet whitespaceAndNewlineCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "whitespaceAndNewlineCharacterSet"));
          __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v11 stringByTrimmingCharactersInSet:v12]);
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 componentsSeparatedByString:@","]);

          if ([v14 count] == (char *)&dword_0 + 2)
          {
            unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 firstObject]);
            uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v14 lastObject]);
            id v17 = v15;
            uint64_t v18 = (const std::string::value_type *)[v17 UTF8String];
            id v19 = v16;
            sub_76B8(__p, (char *)[v19 UTF8String]);
            v36 = (__int128 *)__p;
            uint64_t v20 = sub_7188((uint64_t)&xmmword_5B8BE8, __p, (uint64_t)algn_313722, &v36);
            std::string::assign((std::string *)(v20 + 40), v18);
            if (SBYTE3(v41) < 0) {
              operator delete(*(void **)__p);
            }
            id v21 = v19;
            uint64_t v22 = (const std::string::value_type *)[v21 UTF8String];
            id v23 = v17;
            sub_76B8(__p, (char *)[v23 UTF8String]);
            v36 = (__int128 *)__p;
            uint64_t v24 = sub_7188((uint64_t)&unk_5B8C10, __p, (uint64_t)algn_313722, &v36);
            std::string::assign((std::string *)(v24 + 40), v22);
            if (SBYTE3(v41) < 0) {
              operator delete(*(void **)__p);
            }
          }

          else
          {
            uint64_t v25 = sub_56CA0();
            id v23 = (id)objc_claimAutoreleasedReturnValue(v25);
            if (os_log_type_enabled((os_log_t)v23, OS_LOG_TYPE_ERROR))
            {
              id v26 = [v11 UTF8String];
              *(_DWORD *)__p = 136315650;
              *(void *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport"
                                   "/AGXProfilingSupport/AGXPSCounters.mm";
              __int16 v38 = 1024;
              int v39 = 422;
              __int16 v40 = 2080;
              id v41 = v26;
              _os_log_error_impl( &dword_0,  (os_log_t)v23,  OS_LOG_TYPE_ERROR,  "%s:%u: WARNING: Skipping invalid raw counter mapping: '%s'",  __p,  0x1Cu);
            }
          }

          int v10 = (char *)v10 + 1;
        }

        while (v8 != v10);
        id v8 = [obj countByEnumeratingWithState:&v32 objects:v42 count:16];
      }

      while (v8);
    }

    uint64_t v27 = 1LL;
  }

  else
  {
    uint64_t v27 = 0LL;
  }

  return v27;
}

void sub_4554( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *__p, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
}

char *agxps_counter_deobfuscate_name(char *__s)
{
  uint64_t v1 = __s;
  if (__s)
  {
    sub_76B8(__p, __s);
    uint64_t v2 = sub_7470(&xmmword_5B8BE8, (unsigned __int8 *)__p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    if (v2)
    {
      uint64_t v1 = (char *)(v2 + 40);
    }
  }

  return v1;
}

void sub_46B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t agxps_counter_get_ident(unsigned int *a1, char *a2)
{
  int gen = agxps_gpu_get_gen(a1);
  unsigned int v5 = agxps_gpu_get_variant((uint64_t)a1) | (gen << 16);
  sub_76B8(__p, a2);
  unsigned int v12 = v5;
  id v6 = sub_531C(qword_5B8B70, &v12);
  if (v6 && (id v7 = sub_7570(v6 + 3, (unsigned __int8 *)__p)) != 0LL)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((qword_5B8B38 - qword_5B8B30) >> 4) <= *((void *)v7 + 5)) {
      uint64_t v8 = -1LL;
    }
    else {
      uint64_t v8 = *((void *)v7 + 5);
    }
  }

  else
  {
    uint64_t v8 = -1LL;
  }

  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return v8;
}

void sub_47A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *agxps_counter_get_name(unint64_t a1)
{
  if (0xCCCCCCCCCCCCCCCDLL * ((qword_5B8B38 - qword_5B8B30) >> 4) <= a1) {
    return 0LL;
  }
  double result = (char *)(qword_5B8B30 + 80 * a1);
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

uint64_t agxps_counter_get_grc_enable_str(unint64_t a1)
{
  if (0xCCCCCCCCCCCCCCCDLL * ((qword_5B8B38 - qword_5B8B30) >> 4) <= a1 || *(void *)(qword_5B8B30 + 80 * a1 + 72)) {
    return 0LL;
  }
  uint64_t v2 = qword_5B8B30 + 80 * a1;
  uint64_t result = v2 + 48;
  return result;
}

uint64_t *sub_4878(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_5B8C58);
  if ((v1 & 1) == 0)
  {
    uint64_t v5 = a1;
    int v4 = __cxa_guard_acquire(&qword_5B8C58);
    a1 = v5;
    if (v4)
    {
      qword_5B8C40 = 0LL;
      *(void *)algn_5B8C48 = 0LL;
      qword_5B8C50 = 0LL;
      __cxa_atexit((void (*)(void *))sub_23C0, &qword_5B8C40, &dword_0);
      __cxa_guard_release(&qword_5B8C58);
      a1 = v5;
    }
  }

  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    return (uint64_t *)(v2 + 24);
  }
  else {
    return &qword_5B8C40;
  }
}

uint64_t agxps_counter_group_get_derived_counters(unsigned int *a1, char *a2, void *a3, void *a4)
{
  BOOL is_valid = agxps_gpu_is_valid((uint64_t)a1);
  uint64_t result = 0LL;
  if (a4 && a3 && a2 && is_valid)
  {
    sub_76B8(__p, a2);
    unsigned __int8 v10 = atomic_load((unsigned __int8 *)&qword_5B8C68);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_5B8C68))
    {
      qword_5B8C70 = 0LL;
      *(void *)algn_5B8C78 = 0LL;
      qword_5B8C80 = 0LL;
      __cxa_atexit((void (*)(void *))sub_4D0C, &qword_5B8C70, &dword_0);
      qword_5B8C60 = (uint64_t)&qword_5B8C70;
      __cxa_guard_release(&qword_5B8C68);
    }

    if ((byte_5B8B28 & 1) != 0
      && (int gen = agxps_gpu_get_gen(a1),
          unsigned int v27 = agxps_gpu_get_variant((uint64_t)a1) | (gen << 16),
          (unsigned int v12 = sub_531C(qword_5B8BC0, &v27)) != 0LL)
      && (__int128 v13 = sub_7570(v12 + 3, (unsigned __int8 *)__p)) != 0LL)
    {
      uint64_t v14 = (uint64_t)(v13 + 40);
    }

    else
    {
      uint64_t v14 = qword_5B8C60;
    }

    if (v26 < 0) {
      operator delete(__p[0]);
    }
    unint64_t v15 = *(void **)v14;
    uint64_t v16 = *(void **)(v14 + 8);
    if (v15 == v16) {
      return 0LL;
    }
    uint64_t v17 = 0LL;
    uint64_t v18 = v15;
    do
    {
      id v19 = *(_DWORD **)(qword_5B8B30 + 80LL * *v18 + 72);
      if (v19) {
        uint64_t v20 = (*v19 & 8) == 0;
      }
      else {
        uint64_t v20 = 1LL;
      }
      v17 += v20;
      ++v18;
    }

    while (v18 != v16);
    if (!v17)
    {
      return 0LL;
    }

    else
    {
      id v21 = malloc(8 * v17);
      uint64_t v22 = qword_5B8B30;
      id v23 = v21;
      do
      {
        uint64_t v24 = *(_BYTE **)(v22 + 80LL * *v15 + 72);
        if (!v24 || (*v24 & 8) == 0) {
          *v23++ = *v15;
        }
        ++v15;
      }

      while (v15 != v16);
      *a4 = v17;
      *a3 = v21;
      return 1LL;
    }
  }

  return result;
}

void sub_4B0C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4B28(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_4B60(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
}

uint64_t sub_4BE0(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_4C18(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_4C54((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

uint64_t sub_4C54(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_4C8C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_4CC8((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void sub_4CC8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }

uint64_t sub_4D0C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_4D3C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_4D74(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      int v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }

      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

uint64_t sub_4DB8(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_4DF0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_4E2C((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

uint64_t sub_4E2C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_4E64(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

uint64_t sub_4EA8(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_4EE0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_4F1C((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

uint64_t sub_4F1C(uint64_t a1)
{
  return sub_4B28(a1 + 16);
}

void sub_4F54(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 72);
  *(void *)(a1 + 72) = 0LL;
  if (v2)
  {
    uint64_t v3 = v2 + 3;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v3);
    operator delete(v2);
  }

unint64_t sub_4FCC(unint64_t result, uint64_t a2)
{
  switch((int)a2)
  {
    case 1:
      a2 = 2LL;
      break;
    case 2:
      a2 = 3LL;
      break;
    case 3:
      a2 = 4LL;
      break;
    case 4:
      a2 = 5LL;
      break;
    case 5:
      a2 = 6LL;
      break;
    case 6:
      int v2 = result - 10;
      uint64_t result = 0LL;
      switch(v2)
      {
        case 0:
          LODWORD(result) = 11;
          goto LABEL_15;
        case 1:
          LODWORD(result) = 12;
          goto LABEL_15;
        case 2:
          LODWORD(result) = 13;
          goto LABEL_15;
        case 3:
          LODWORD(result) = 14;
          goto LABEL_15;
        case 4:
          LODWORD(result) = 15;
          goto LABEL_15;
        case 5:
          LODWORD(result) = 16;
          goto LABEL_15;
        case 6:
          LODWORD(result) = 17;
          goto LABEL_15;
        case 7:
          return result;
        default:
LABEL_15:
          a2 = 1LL;
          break;
      }

      break;
    default:
      return result | (unint64_t)(a2 << 32);
  }

  return result | (unint64_t)(a2 << 32);
}

void sub_508C()
{
  exception = __cxa_allocate_exception(8uLL);
}

char *sub_50C0(char *__dst, __int128 *a2, __int128 *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_5154(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }

  id v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_5154(v6, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v7 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)id v6 = v7;
  }

  return __dst;
}

void sub_5138(_Unwind_Exception *exception_object)
{
}

void *sub_5154(_BYTE *__dst, void *__src, unint64_t a3)
{
  __int128 v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8LL) {
      sub_51E0();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000LL;
    *__int128 v5 = v8;
    __int128 v5 = v8;
  }

  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

void sub_51E0()
{
}

char *sub_51F4(char *__dst, __int128 *a2, __int128 *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_5154(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }

  uint64_t v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_5154(v6, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v7 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v6 = v7;
  }

  return __dst;
}

void sub_526C(_Unwind_Exception *exception_object)
{
}

char *sub_5288(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_5154(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }

  __int128 v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_5154(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v6 = *(__int128 *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)__int128 v5 = v6;
  }

  return __dst;
}

void sub_5300(_Unwind_Exception *exception_object)
{
}

uint64_t *sub_531C(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }

  __int128 v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0LL;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3) {
        return result;
      }
    }

    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }

      else
      {
        v8 &= *(void *)&v2 - 1LL;
      }

      if (v8 != v5) {
        return 0LL;
      }
    }
  }

  return result;
}

void sub_53D0(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_4EE0(a1, *(void **)(a1 + 16));
    *(void *)(a1 + sub_4B28(v1 + 16) = 0LL;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0LL;
    }

    *(void *)(a1 + 24) = 0LL;
  }

void sub_5424(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_4DF0(a1, *(void **)(a1 + 16));
    *(void *)(a1 + sub_4B28(v1 + 16) = 0LL;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0LL;
    }

    *(void *)(a1 + 24) = 0LL;
  }

void sub_5478(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_4D74(a1, *(void **)(a1 + 16));
    *(void *)(a1 + sub_4B28(v1 + 16) = 0LL;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0LL;
    }

    *(void *)(a1 + 24) = 0LL;
  }

uint64_t *sub_54CC(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }

    unsigned __int8 v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7) {
            return i;
          }
        }

        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }

          else
          {
            v12 &= v8 - 1;
          }

          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }

  uint64_t v13 = a1 + 16;
  uint64_t v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)uint64_t v14 = 0LL;
  *((void *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1LL;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_573C(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }
  }

  id v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }

  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + sub_4B28(v1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8LL);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }

      else
      {
        v22 &= v8 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }

  uint64_t i = (uint64_t *)v24[0];
  v24[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_5970((uint64_t)v24, 0LL);
  return i;
}

void sub_5724(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_573C(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }

    else
    {
      uint64_t v7 = 1LL << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }

    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4) {
LABEL_16:
    }
      sub_5818(a1, prime);
  }

void sub_5818(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_21DC();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0LL;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }

      else
      {
        v8 &= a2 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      char v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }

          else
          {
            v12 &= a2 - 1;
          }

          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }

            *uint64_t v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            char v11 = v7;
          }

          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          char v11 = (void *)*v11;
          unint64_t v8 = v12;
        }

        while (v11);
      }
    }
  }

  else
  {
    unsigned __int8 v10 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0LL;
  }

void sub_5970(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_4E2C((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }

unsigned __int8 *sub_59B4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_5CF0(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }

    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if ((sub_6198(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }

          else
          {
            v16 &= v11 - 1;
          }

          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }

  sub_5C48(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1LL;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_573C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }

  id v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }

  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + sub_4B28(v1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8LL);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }

      else
      {
        v24 &= v11 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_5C24( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    sub_623C((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_5C48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + sub_4B28(v1 + 16) = 0;
  void *v8 = 0LL;
  v8[1] = a2;
  uint64_t result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    uint64_t result = sub_5154(result, *(void **)v10, *((void *)v10 + 1));
  }

  else
  {
    __int128 v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)uint64_t result = v11;
  }

  v8[5] = 0LL;
  *(_BYTE *)(a4 + sub_4B28(v1 + 16) = 1;
  return result;
}

void sub_5CD4(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_623C(v3, v2);
  _Unwind_Resume(a1);
}

unint64_t sub_5CF0(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }

  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }

  return sub_5D2C((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t sub_5D2C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69LL
          * (v6 ^ ((0x9DDFEA08EB382D69LL * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69LL * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69LL * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297LL * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      size_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0LL);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273LL * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273LL * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64LL;
      }

      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297LL
          * ((0x9DDFEA08EB382D69LL
            * (v21 ^ ((0x9DDFEA08EB382D69LL * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69LL * (v21 ^ ((0x9DDFEA08EB382D69LL * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69LL
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297LL
                  * ((0x9DDFEA08EB382D69LL
                    * (v20 ^ ((0x9DDFEA08EB382D69LL * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69LL * (v20 ^ ((0x9DDFEA08EB382D69LL * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69LL
           * ((0x9DDFEA08EB382D69LL * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69LL * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }

    else
    {
      return sub_60D8(a2, a3);
    }
  }

  else if (a3 > 0x10)
  {
    return sub_602C(a2, a3);
  }

  else
  {
    return sub_5F34(a2, a3);
  }

unint64_t sub_5F34(_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557LL * (a2 + 4LL * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }

    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69LL * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69LL
           * ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }

  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69LL
          * ((0x9DDFEA08EB382D69LL
            * (v4 ^ ((0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69LL * (v4 ^ ((0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }

  return result;
}

unint64_t sub_602C(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273LL * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557LL, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69LL * (v5 ^ (v4 - 0x3C5A37A36834CED9LL * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69LL
       * ((0x9DDFEA08EB382D69LL * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69LL * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_60D8(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9LL * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9LL * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127LL * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1LL
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9LL * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9LL * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t sub_6198(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0LL) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0LL) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0LL;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1LL;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }

  while (v9 == v11 && v14);
  return result;
}

void sub_623C(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *sub_6288(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }

    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7) {
              return v11;
            }
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v4) {
              break;
            }
          }

          int v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  unint64_t v13 = (void *)(a1 + 16);
  int v11 = operator new(0x30uLL);
  void *v11 = 0LL;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0LL;
  v11[5] = 0LL;
  v11[3] = 0LL;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1LL;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_573C(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }
  }

  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *v11 = *v21;
LABEL_38:
    void *v21 = v11;
    goto LABEL_39;
  }

  void *v11 = *v13;
  *unint64_t v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }

    else
    {
      v22 &= v8 - 1;
    }

    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

  ++*(void *)(a1 + 24);
  return v11;
}

  ++*(void *)(a1 + 24);
  return v10;
}

  ++*v7;
  return i;
}

  ++*(void *)(a1 + 24);
  return i;
}

  ++*(void *)(a1 + 24);
}

  ++*(void *)(a1 + 24);
}

  ++*(void *)(a1 + 24);
}

  ++*(void *)(a1 + 24);
  return v10;
}

  ++*(void *)(a1 + 24);
  return v10;
}

  ++*(void *)(a1 + 24);
}

  ++*(void *)(a1 + 24);
  return v9 + 24;
}

  ++*(void *)(a1 + 24);
  return v9 + 24;
}

  ++*(void *)(a1 + 24);
  return v10;
}

  ++*(void *)(a1 + 24);
  return i;
}

  ++*(void *)(a1 + 24);
}

  ++*(void *)(a1 + 24);
  return i;
}

  ++*(void *)(a1 + 24);
  return v10;
}

  ++*(void *)(a1 + 24);
  return v10;
}

    apr_pool_create_ex(newpool, 0LL, 0LL, v22);
    p = newpool[0];
    uint64_t v34 = apr_hash_make(newpool[0]);
    uint64_t v35 = v146[1];
    uint64_t v36 = objc_alloc_init(&OBJC_CLASS___MTLBufferDescriptor);
    if (*(int *)(v35 + 12) >= 1)
    {
      uint64_t v37 = 0LL;
      do
      {
        unint64_t v38 = *(void *)(*(void *)(v35 + 24) + 8 * v37);
        if ((dword_5B9DE4 & 0x200000) != 0
          && *(void *)(v38 + 144)
          && (entry = find_entry((uint64_t)v34, (_BYTE *)(v38 + 112), 8uLL, 0LL), *entry)
          && (unint64_t v40 = *(void *)(*entry + 32LL)) != 0)
        {
          unint64_t v41 = (id)objc_claimAutoreleasedReturnValue([v12 bufferForKey:*(void *)(v40 + 8)]);
        }

        else
        {
          unint64_t v41 = 0LL;
        }

        if (!*(void *)(v38 + 48))
        {
          if (v41
            || ([v36 setPinnedGPUAddress:*(void *)(v38 + 112)],
                [v36 setParentGPUAddress:*(void *)(v38 + 128)],
                [v36 setParentGPUSize:*(void *)(v38 + 136)],
                [v36 setResourceOptions:*(unsigned __int16 *)(v38 + 96)],
                [v36 setLength:*(void *)(v38 + 104)],
                (unint64_t v41 = [v23 newBufferWithDescriptor:v36]) != 0))
          {
            [v12 setBuffer:v41 forKey:*(void *)(v38 + 8)];
            if ((dword_5B9DE4 & 0x200000) != 0 && *(void *)(v38 + 144)) {
              apr_hash_set(v34, (const void *)(v38 + 112), 8LL, (const void *)v38);
            }
          }

          else
          {
            GTMTLReplay_handleError( 101,  (uint64_t)"Buffer creation failed",  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_argumentBuffers.m",  (uint64_t)"GTMTLReplayController_allocateBuffersAndHeaps",  232LL,  1LL);
          }
        }

        ++v37;
      }

      while (v37 < *(int *)(v35 + 12));
    }

    apr_pool_destroy(p);
    __int128 v42 = v146[9];
    if (*(int *)(v42 + 12) >= 1)
    {
      uint64_t v43 = 0LL;
      while (1)
      {
        uint64_t v44 = *(void *)(*(void *)(v42 + 24) + 8 * v43);
        if (*(void *)(v44 + 144)
          || *(void *)(v44 + 48)
          || (GT_SUPPORT_0 & 0x100000) != 0 && *(void *)(v44 + 152)
          || !*(void *)(v44 + 160))
        {
          goto LABEL_59;
        }

        objc_msgSend(v36, "setPinnedGPUAddress:");
        [v36 setParentGPUAddress:*(void *)(v44 + 168)];
        [v36 setParentGPUSize:*(void *)(v44 + 176)];
        [v36 setResourceOptions:*(unsigned __int16 *)(v44 + 96)];
        [v36 setLength:*(void *)(v44 + 192)];
        unint64_t v45 = [v23 newBufferWithDescriptor:v36];
        if (!v45) {
          break;
        }
        unint64_t v46 = v45;
        unint64_t v47 = [v23 newAccelerationStructureWithBuffer:v45 offset:*(void *)(v44 + 200)];

        if (!v47)
        {
          v48 = "Acceleration structure creation failed";
          v49 = 287LL;
          goto LABEL_69;
        }

        [v12 setAccelerationStructure:v47 forKey:*(void *)(v44 + 8)];

LABEL_59:
      }

      v48 = "Acceleration structure buffer creation failed";
      v49 = 270LL;
LABEL_69:
      GTMTLReplay_handleError( 101,  (uint64_t)v48,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_argumentBuffers.m",  (uint64_t)"GTMTLReplayController_allocateBuffersAndHeaps",  v49,  1LL);
      goto LABEL_59;
    }

  v67.location = CompareObjectIdRange(a2[17], a2[18], a2[19]);
  v67.length = v38;
  if (v38)
  {
    bzero(v68, 0x400uLL);
    unint64_t v39 = 0LL;
    do
    {
      unint64_t v40 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "textureForKey:", *(void *)(a2[18]
                                                                                           + 8 * (v39 + v67.location))));
      unint64_t v41 = (void *)*((void *)v68 + v39);
      *((void *)v68 + v39) = v40;

      ++v39;
    }

    while (v39 < v67.length);
    v66 = v68;
    __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v5 methodSignatureForSelector:a2[35]]);
    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSInvocation invocationWithMethodSignature:]( &OBJC_CLASS___NSInvocation,  "invocationWithMethodSignature:",  v42));

    [v43 setSelector:a2[35]];
    [v43 setTarget:v5];
    [v43 setArgument:&v66 atIndex:2];
    [v43 setArgument:&v67 atIndex:3];
    [v43 invoke];

    for (uint64_t i = 1016LL; i != -8; i -= 8LL)
  }

  unint64_t v45 = CompareObjectIdRange(a2[20], a2[21], a2[22]);
  unint64_t v47 = v46;
  v67.location = v45;
  v67.length = v46;
  v48 = CompareFloatRange(a2[23], a2[25], a2[27]);
  v50.length = v49;
  if (v47) {
    uint64_t v51 = v45;
  }
  else {
    uint64_t v51 = v48;
  }
  if (v49) {
    v50.location = v48;
  }
  else {
    v50.location = v51;
  }
  v70.location = v51;
  v70.length = v47;
  uint64_t v52 = NSUnionRange(v70, v50);
  v67 = v52;
  uint64_t v53 = CompareFloatRange(a2[24], a2[26], a2[27]);
  v55.length = v54;
  if (v52.length) {
    __int128 v56 = v52.location;
  }
  else {
    __int128 v56 = v53;
  }
  if (v54) {
    v55.location = v53;
  }
  else {
    v55.location = v56;
  }
  v71.location = v56;
  v71.length = v52.length;
  v67 = NSUnionRange(v71, v55);
  if (v67.length)
  {
    __int128 v57 = 0LL;
    memset(v68, 0, 128);
    do
    {
      __int128 v58 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "samplerStateForKey:", *(void *)(a2[21]
                                                                                                + 8
                                                                                                * (v57 + v67.location))));
      uint64_t v59 = (void *)*((void *)v68 + v57);
      *((void *)v68 + v57) = v58;

      ++v57;
    }

    while (v57 < v67.length);
    uint64_t v60 = a2[26];
    v65 = a2[25] + 4 * v67.location;
    v66 = v68;
    v64 = v60 + 4 * v67.location;
    v61 = (void *)objc_claimAutoreleasedReturnValue([v5 methodSignatureForSelector:a2[36]]);
    unsigned int v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSInvocation invocationWithMethodSignature:]( &OBJC_CLASS___NSInvocation,  "invocationWithMethodSignature:",  v61));

    [v62 setSelector:a2[36]];
    [v62 setTarget:v5];
    [v62 setArgument:&v66 atIndex:2];
    [v62 setArgument:&v65 atIndex:3];
    [v62 setArgument:&v64 atIndex:4];
    [v62 setArgument:&v67 atIndex:5];
    [v62 invoke];

    for (j = 120LL; j != -8; j -= 8LL)
  }
}

  ++*(void *)(a1 + 24);
  return v10;
}

  ++*(void *)(a1 + 24);
}

  ++*(void *)(a1 + 24);
  return i;
}

  ++*(void *)(a1 + 24);
  return v10;
}

  ++*(void *)(a1 + 24);
  return i;
}

  ++*(void *)(a1 + 24);
  return i;
}

      std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v63[48]);
      std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)&v63[8]);

      unint64_t v18 = *(void **)v63;
      goto LABEL_40;
    }

    GTMTLSMRenderPipelineState_fragmentFunction(var5, v22);
    uint64_t v52 = std::unordered_map<unsigned long long,-[GTShaderProfilerHelper _calculatePerSampleActiveShaders:withShaderProfilerResult:forWorkloadInfo:]::EncoderRangeInfo>::find[abi:nn180100]( *(void *)a4,  *(void *)(a4 + 8),  v22[1]);
    if (v52)
    {
      uint64_t v53 = *((unsigned int *)v52 + 6);
      v54 = *(_DWORD *)(a4 + 256);
      if (v54 > 15)
      {
        if (v54 == 16)
        {
          [v59 setObjectBuffer:*(void *)(a4 + 240) offset:0 atIndex:v53];
        }

        else
        {
          if (v54 != 32) {
            goto LABEL_55;
          }
          [v59 setMeshBuffer:*(void *)(a4 + 240) offset:0 atIndex:v53];
        }
      }

      else
      {
        if (v54 != 1)
        {
          if (v54 == 2)
          {
            [v59 setFragmentBuffer:*(void *)(a4 + 240) offset:0 atIndex:v53];
            goto LABEL_30;
          }

          goto LABEL_55;
        }

        [v59 setVertexBuffer:*(void *)(a4 + 240) offset:0 atIndex:v53];
      }
      }

      unint64_t v39 = [v14 countByEnumeratingWithState:&v41 objects:v48 count:16];
      if (!v39)
      {
        unint64_t v13 = v46;
        uint8x8_t v9 = v35;
        break;
      }
    }
  }

  return v13;
}

  ++*(void *)(a1 + 24);
  return v12;
}

  ++*(void *)(a1 + 24);
}

  ++*(void *)(a1 + 24);
}

    if ((*((_BYTE *)v8 + 33) & 0x20) != 0) {
      goto LABEL_42;
    }
  }

  if (v13 == -12272)
  {
    float v14 = *v8 - 36;
    float v15 = (uint64_t)v8;
    BOOL v16 = a4;
    goto LABEL_13;
  }

  v49 = *a4;
  *(_OWORD *)__s = 0u;
  v54 = 0u;
  newpool = (apr_pool_t *)(v49 | 0x1F400000000LL);
  uint64_t v52 = "header->fenum == kDYFEInternalData";
  GTError_addError(a4, (uint64_t)&newpool);
  if (!a3) {
    goto LABEL_55;
  }
LABEL_43:
  if (v10)
  {
    apr_pool_create_ex(&newpool, 0LL, 0LL, (apr_allocator_t *)a4);
    uint64_t v31 = v10;
    uint64_t v32 = apr_palloc(newpool, 16LL * v10);
    uint64_t v33 = v50;
    uint64_t v34 = v50;
    uint64_t v35 = v32;
    uint64_t v36 = v10;
    do
    {
      uint64_t v37 = *v34;
      v34 += 2;
      *v35++ = v37;
      --v36;
    }

    while (v36);
    unint64_t v38 = &v32[v10];
    unint64_t v39 = v10;
    do
    {
      unint64_t v40 = *v11;
      v11 += 2;
      *v38++ = v40;
      --v39;
    }

    while (v39);
    unint64_t v41 = v32;
    __int128 v42 = v50;
    uint64_t v43 = v10;
    do
    {
      uint64_t v44 = *v41++;
      *v42++ = v44;
      --v43;
    }

    while (v43);
    int v11 = &v50[v10];
    unint64_t v45 = &v32[v10];
    unint64_t v46 = v11;
    do
    {
      unint64_t v47 = *v45++;
      *v46++ = v47;
      --v31;
    }

    while (v31);
    apr_pool_destroy(newpool);
  }

  else
  {
    uint64_t v33 = v50;
  }

  v48 = a2[7];
  *(void *)v48 = v12;
  *(void *)(v48 + 8) = v33;
  *(void *)(v48 + sub_4B28(v1 + 16) = v11;
  *(_WORD *)(v48 + 24) = v10;
  *(_DWORD *)(v48 + 26) = v55;
  *(_WORD *)(v48 + 30) = v56;
LABEL_55:
  a2[7] += 32LL;
}

  if (v10 <= 0x12)
  {
    uint64_t v43 = 0;
    unint64_t v46 = 0;
    uint64_t v44 = *((double *)v33 + 10);
    unint64_t v45 = (unsigned __int16 *)(v33 + 14);
    if (v8) {
      goto LABEL_46;
    }
  }

  else
  {
    uint64_t v43 = *((_BYTE *)v33 + 80);
    uint64_t v44 = *((double *)v33 + 11);
    if (v10 < 0x27)
    {
      unint64_t v46 = 0;
      unint64_t v45 = (unsigned __int16 *)(v33 + 15);
      if (!v8) {
        goto LABEL_55;
      }
    }

    else
    {
      unint64_t v45 = (unsigned __int16 *)(v33 + 16);
      unint64_t v46 = *((_BYTE *)v33 + 120);
      if (!v8) {
        goto LABEL_55;
      }
    }

void sub_64C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void sub_64DC(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t *sub_6528(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }

    int v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7) {
            return i;
          }
        }

        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }

          else
          {
            v12 &= v8 - 1;
          }

          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }

  uint64_t v13 = a1 + 16;
  float v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)float v14 = 0LL;
  *((void *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1LL;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_573C(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }
  }

  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }

  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + sub_4B28(v1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8LL);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }

      else
      {
        v22 &= v8 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }

  uint64_t i = (uint64_t *)v24[0];
  v24[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_6798((uint64_t)v24, 0LL);
  return i;
}

void sub_6780(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_6798(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_4C54((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }

unsigned __int8 *sub_67DC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_5CF0(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }

    float v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if ((sub_6198(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }

          else
          {
            v16 &= v11 - 1;
          }

          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }

  sub_6A74(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1LL;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_573C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }

  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }

  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + sub_4B28(v1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8LL);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }

      else
      {
        v24 &= v11 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0LL;
  ++*v8;
  sub_6B14((uint64_t)v26, 0LL);
  return i;
}

void sub_6A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

_BYTE *sub_6A74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + sub_4B28(v1 + 16) = 0;
  void *v8 = 0LL;
  v8[1] = a2;
  uint64_t result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    uint64_t result = sub_5154(result, *(void **)v10, *((void *)v10 + 1));
  }

  else
  {
    __int128 v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)uint64_t result = v11;
  }

  v8[5] = 0LL;
  v8[6] = 0LL;
  v8[7] = 0LL;
  *(_BYTE *)(a4 + sub_4B28(v1 + 16) = 1;
  return result;
}

void sub_6AFC(_Unwind_Exception *a1)
{
}

void sub_6B14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_4CC8((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }

char *sub_6B58(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_6BDC(result, a4);
    uint64_t result = sub_6C70((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }

  return result;
}

void sub_6BBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

char *sub_6BDC(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_2120();
  }
  uint64_t result = (char *)sub_6C2C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_6C2C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_21DC();
  }
  return operator new(24 * a2);
}

char *sub_6C70(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  uint64_t v4 = __dst;
  __int128 v11 = __dst;
  uint8x8_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_5154(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }

      else
      {
        __int128 v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }

      uint64_t v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      uint8x8_t v12 = v4;
    }

    while (v6 != a3);
  }

  char v10 = 1;
  sub_6D2C((uint64_t)v9);
  return v4;
}

void sub_6D18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_6D2C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_6D60(a1);
  }
  return a1;
}

void sub_6D60(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 24LL;
  }

void std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }

void std::vector<std::string>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24LL)
  {
  }

  a1[1] = v2;
}

uint64_t *sub_6E30(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v6 - 1) & v5;
    }

    unint64_t v8 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      for (uint64_t i = *v8; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v10 = i[1];
        if (v10 == v5)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v5) {
            return i;
          }
        }

        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
          }

          else
          {
            v10 &= v6 - 1;
          }

          if (v10 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_7078(a1, *a2, a3, (uint64_t)v20);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1LL;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    sub_573C(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v6 - 1) & v5;
    }
  }

  float v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *(void *)v20[0] = *v17;
    void *v17 = v20[0];
  }

  else
  {
    *(void *)v20[0] = *(void *)(a1 + 16);
    *(void *)(a1 + sub_4B28(v1 + 16) = v20[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v20[0])
    {
      unint64_t v18 = *(void *)(*(void *)v20[0] + 8LL);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }

      else
      {
        v18 &= v6 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v18) = v20[0];
    }
  }

  uint64_t i = (uint64_t *)v20[0];
  v20[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_70F0((uint64_t)v20, 0LL);
  return i;
}

void sub_7060(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_7078@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0xC8uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + sub_4B28(v1 + 16) = 0;
  void *v8 = 0LL;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = *(_DWORD *)a3;
  uint64_t result = sub_282C((uint64_t)(v8 + 3), (void *)(a3 + 8));
  *(_BYTE *)(a4 + sub_4B28(v1 + 16) = 1;
  return result;
}

void sub_70D8(_Unwind_Exception *a1)
{
}

void sub_70F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_4F1C((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }

void sub_7134(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_4B60(a1, *(void **)(a1 + 16));
    *(void *)(a1 + sub_4B28(v1 + 16) = 0LL;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0LL;
    }

    *(void *)(a1 + 24) = 0LL;
  }

unsigned __int8 *sub_7188(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_5CF0(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }

    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if ((sub_6198(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }

          else
          {
            v16 &= v11 - 1;
          }

          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }

  float v17 = operator new(0x40uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  void *v17 = 0LL;
  v17[1] = v10;
  unint64_t v18 = *a4;
  __int128 v19 = **a4;
  v17[4] = *((void *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((void *)v18 + 1) = 0LL;
  *((void *)v18 + 2) = 0LL;
  *(void *)unint64_t v18 = 0LL;
  v17[6] = 0LL;
  v17[7] = 0LL;
  v17[5] = 0LL;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1LL;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_573C(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }

  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    void *v26 = v29[0];
  }

  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + sub_4B28(v1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8LL);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11) {
          v27 %= v11;
        }
      }

      else
      {
        v27 &= v11 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0LL;
  ++*v8;
  sub_742C((uint64_t)v29, 0LL);
  return i;
}

void sub_7414(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_742C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }

unsigned __int8 *sub_7470(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_5CF0((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0LL;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }

  else
  {
    unint64_t v9 = (*(void *)&v5 - 1LL) & v4;
  }

  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0LL;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if ((sub_6198(v12, v11 + 16, a2) & 1) != 0) {
          return v11;
        }
      }

      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }

        else
        {
          v13 &= *(void *)&v5 - 1LL;
        }

        if (v13 != v9) {
          return 0LL;
        }
      }

      unint64_t v11 = *(unsigned __int8 **)v11;
    }

    while (v11);
  }

  return v11;
}

unsigned __int8 *sub_7570(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_5CF0((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0LL;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }

  else
  {
    unint64_t v9 = (*(void *)&v5 - 1LL) & v4;
  }

  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0LL;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if ((sub_6198(v12, v11 + 16, a2) & 1) != 0) {
          return v11;
        }
      }

      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }

        else
        {
          v13 &= *(void *)&v5 - 1LL;
        }

        if (v13 != v9) {
          return 0LL;
        }
      }

      unint64_t v11 = *(unsigned __int8 **)v11;
    }

    while (v11);
  }

  return v11;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table( uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *sub_76B8(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_51E0();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000LL;
    *a1 = v6;
  }

  else
  {
    *((_BYTE *)a1 + 23) = v4;
    unint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }

  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void *sub_7768(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }

    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7) {
              return v11;
            }
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v4) {
              break;
            }
          }

          unint64_t v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  unint64_t v11 = operator new(0x28uLL);
  void *v11 = 0LL;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0LL;
  v11[4] = 0LL;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1LL;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_573C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }
  }

  uint64_t v19 = *(void *)a1;
  float v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }

  void *v11 = *(void *)(a1 + 16);
  *(void *)(a1 + sub_4B28(v1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }

    else
    {
      v21 &= v8 - 1;
    }

    float v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }

void sub_7978(_Unwind_Exception *a1)
{
}

uint64_t sub_798C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_7A00((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_7A00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + 1) = a7;
  __int128 v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      __int128 v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24LL;
      *(void *)(a3 - sub_4B28(v1 + 16) = 0LL;
      *(void *)(a3 - 8) = 0LL;
      *(void *)(a3 - 24) = 0LL;
      v7 -= 24LL;
      a3 -= 24LL;
    }

    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }

  char v13 = 1;
  sub_7A9C((uint64_t)v12);
  return a6;
}

uint64_t sub_7A9C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_7AD0(a1);
  }
  return a1;
}

void sub_7AD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    v1 += 24LL;
  }

uint64_t sub_7B14(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_7B48(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + sub_4B28(v1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }

      uint64_t v2 = v5;
    }

    while (v5 != a2);
  }

uint64_t sub_7B9C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + sub_4B28(v1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_7C0C(a1, *(void *)(a2 + 8));
  return a1;
}

void sub_7BF4(_Unwind_Exception *a1)
{
}

void sub_7C0C(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }

    else
    {
      uint64_t v7 = 1LL << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }

    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4) {
LABEL_16:
    }
      sub_7CE8(a1, prime);
  }

void sub_7CE8(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_21DC();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0LL;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
    while (a2 != v6);
    uint64_t v7 = *(unsigned __int8 ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }

      else
      {
        v8 &= a2 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v12 = *v7;
      if (*v7)
      {
        unint64_t v18 = v9.u32[0];
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v10 > 1)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }

          else
          {
            v13 &= a2 - 1;
          }

          if (v13 == v8)
          {
            uint64_t v7 = (unsigned __int8 **)v12;
          }

          else if (*(void *)(*(void *)a1 + 8 * v13))
          {
            __int128 v14 = *(unsigned __int8 **)v12;
            if (*(void *)v12)
            {
              __int128 v15 = v12;
              while (1)
              {
                int v16 = sub_6198(a1 + 32, v12 + 16, v14 + 16);
                unint64_t v17 = *(unsigned __int8 **)v15;
                if (!v16) {
                  break;
                }
                __int128 v14 = *(unsigned __int8 **)v17;
                __int128 v15 = *(unsigned __int8 **)v15;
                if (!*(void *)v17) {
                  goto LABEL_32;
                }
              }

              __int128 v14 = *(unsigned __int8 **)v15;
              unint64_t v17 = v15;
LABEL_32:
              unint64_t v10 = v18;
            }

            else
            {
              unint64_t v17 = v12;
            }

            *uint64_t v7 = v14;
            *(void *)unint64_t v17 = **(void **)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = v12;
          }

          else
          {
            *(void *)(*(void *)a1 + 8 * v13) = v7;
            uint64_t v7 = (unsigned __int8 **)v12;
            unint64_t v8 = v13;
          }

          unint64_t v12 = *v7;
        }

        while (*v7);
      }
    }
  }

  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0LL;
  }

void *sub_7EB4(void *a1, __int128 *a2)
{
  unint64_t v3 = sub_7FAC(a1, v5[0]);
  v5[0] = 0LL;
  sub_742C((uint64_t)v5, 0LL);
  return v3;
}

void sub_7F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

unint64_t sub_7F1C@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = operator new(0x40uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + sub_4B28(v1 + 16) = 0;
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  sub_5288((char *)v7 + 16, a2);
  *(_BYTE *)(a3 + sub_4B28(v1 + 16) = 1;
  unint64_t result = sub_5CF0(a1 + 24, (uint64_t)v7 + 16);
  *((void *)v7 + 1) = result;
  return result;
}

void sub_7F94(_Unwind_Exception *a1)
{
}

void *sub_7FAC(void *a1, void *a2)
{
  int8x8_t v4 = (unsigned __int8 *)(a2 + 2);
  unint64_t v5 = sub_5CF0((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  a2[1] = v5;
  uint64_t v6 = sub_800C((uint64_t)a1, v5, v4);
  sub_817C(a1, a2, v6);
  return a2;
}

unsigned __int8 *sub_800C(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6 = a1 + 32;
  float v7 = *(float *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 8);
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    BOOL v10 = 1LL;
    if (v8 >= 3) {
      BOOL v10 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v11 = v10 | (2 * v8);
    unint64_t v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    sub_7C0C(a1, v13);
    unint64_t v8 = *(void *)(a1 + 8);
  }

  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  unint64_t v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v16 = a2;
    if (v8 <= a2) {
      unint64_t v16 = a2 % v8;
    }
  }

  else
  {
    unint64_t v16 = (v8 - 1) & a2;
  }

  unint64_t v17 = *(unsigned __int8 **)(*(void *)a1 + 8 * v16);
  if (v17)
  {
    unint64_t v18 = *(unsigned __int8 **)v17;
    if (*(void *)v17)
    {
      int v19 = 0;
      do
      {
        unint64_t v20 = *((void *)v18 + 1);
        if (v15 > 1)
        {
          unint64_t v21 = *((void *)v18 + 1);
          if (v20 >= v8) {
            unint64_t v21 = v20 % v8;
          }
        }

        else
        {
          unint64_t v21 = v20 & (v8 - 1);
        }

        if (v21 != v16) {
          break;
        }
        int v22 = v20 == a2 ? sub_6198(v6, v18 + 16, a3) : 0;
        if ((v19 & (v22 ^ 1) & 1) != 0) {
          break;
        }
        v19 |= v22;
        unint64_t v17 = *(unsigned __int8 **)v17;
        unint64_t v18 = *(unsigned __int8 **)v17;
      }

      while (*(void *)v17);
    }
  }

  return v17;
}

void *sub_817C(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }

  else
  {
    v4 &= *(void *)&v3 - 1LL;
  }

  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8LL);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }

    else
    {
      v6 &= *(void *)&v3 - 1LL;
    }

LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }

  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8LL);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }

    else
    {
      v6 &= *(void *)&v3 - 1LL;
    }

    if (v6 != v4) {
      goto LABEL_18;
    }
  }

  size_t v13 = 1;
LABEL_19:
  self->_gpuGeneration = v13;
  metalPluginName = self->_metalPluginName;
  self->_metalPluginName = (NSString *)v5;
}

        unint64_t result = (apr_array_header_t *)dispatch_group_wait((dispatch_group_t)a1[2816], 0xFFFFFFFFFFFFFFFFLL);
        a1[2813]->nelts = 0;
        if (*((int *)a1 + 5644) >= 1)
        {
          uint64_t v35 = 0LL;
          uint64_t v36 = *(apr_pool_t **)v8;
          do
          {
            uint64_t v37 = &a1[3 * v35];
            unint64_t v38 = v37[2825];
            v38->elts = 0LL;
            v38[1].pool = 0LL;
            p_nalloc = (apr_hash_index_t *)&v38->nalloc;
            *(void *)&v38->nalloc = v38;
            v38[1].elt_size = 0;
            while (1)
            {
              unint64_t v40 = apr_hash_next(p_nalloc);
              unint64_t v41 = v40;
              if (!v40) {
                break;
              }
              __int128 v42 = *((void *)v40 + 1);
              uint64_t v44 = *(const void **)(v42 + 16);
              uint64_t v43 = *(void *)(v42 + 24);
              if (v44)
              {
                unint64_t v45 = apr_palloc(v36, *(void *)(v42 + 24));
                memcpy(v45, v44, v43);
                __int128 v42 = *((void *)v41 + 1);
              }

              else
              {
                unint64_t v45 = 0LL;
              }

              unint64_t v46 = apr_array_copy(v36, *(const apr_array_header_t **)(v42 + 32));
              apr_hash_set(v8, v45, v43, v46);
              p_nalloc = v41;
            }

            unint64_t v47 = v38->pool;
            apr_pool_clear(v38->pool);
            unint64_t result = (apr_array_header_t *)apr_hash_make(v47);
            v37[2825] = result;
            ++v35;
          }

          while (v35 < *((int *)a1 + 5644));
        }
      }
    }
  }

  return result;
}

LABEL_19:
  ++result[3];
  return result;
}

          unint64_t v27 = 3LL;
          goto LABEL_46;
        }

        goto LABEL_42;
      }
    }

  unint64_t v23 = *((void *)self + 37);
  for (uint64_t i = *((void *)self + 38); v23 != i; v23 += 40LL)
  {
    for (j = *(uint64_t **)(v23 + 16); j; j = (uint64_t *)*j)
    {
      uint64_t v26 = *((_DWORD *)j + 4);
      if (v26 != -1)
      {
        unint64_t v27 = 0LL;
        uint64_t v28 = 0LL;
        uint64_t v29 = v26 % v4;
        char v30 = *((void *)self + 40);
        do
        {
          uint64_t v31 = (double *)(v30 + 56LL * v29 + 8 * v28);
          v31[3] = *(double *)&j[v27 + 6] + v31[3];
          unint64_t *v31 = *(double *)&j[v27 + 3] + *v31;
          ++v28;
          ++v27;
        }

        while (v27 != 3);
        ++*(_DWORD *)(v30 + 56LL * v29 + 48);
      }
    }
  }

  v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", v5));
  uint64_t v32 = 0LL;
  uint64_t v33 = 0LL;
  if (v4 <= 1) {
    uint64_t v34 = 1LL;
  }
  else {
    uint64_t v34 = v4;
  }
  do
  {
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", 3LL));
    for (k = 0LL; k != 24; k += 8LL)
    {
      uint64_t v37 = *((void *)self + 40);
      unint64_t v38 = *(_DWORD *)(v37 + 56 * v33 + 48);
      if (v38)
      {
        unint64_t v39 = (double *)(v37 + v32 + k);
        unint64_t v40 = v39[3] / (double)v38;
        v39[3] = v40;
        *unint64_t v39 = *v39 / (double)v38;
      }

      else
      {
        unint64_t v40 = *(double *)(v37 + v32 + k + 24);
      }

      unint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v40));
      [v35 addObject:v41];
    }

    [v76 addObject:v35];

    ++v33;
    v32 += 56LL;
  }

  while (v33 != v34);
  [*((id *)self + 20) setEffectiveKickTimes:v76];
  __int128 v42 = v75;
  uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", v75));
  uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", v75));
  unint64_t v45 = 0LL;
  p_superclass = &OBJC_METACLASS___GTMTLReplayActivityCollectCounters.superclass;
  v74 = 8 * v75;
  while (v45 < (unint64_t)objc_msgSend(*((id *)self + 23), "count", v74))
  {
    unint64_t v47 = p_superclass;
    v48 = *((void *)self + 31);
    v78 = *((void *)self + 34);
    v49 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,unsigned int>>>(v42);
    bzero(v49, v74);
    v77 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,unsigned int>>>(v42);
    bzero(v77, v74);
    uint64_t v51 = *(double ****)(v48 + 24 * v45);
    uint64_t v52 = *(double ****)(v48 + 24 * v45 + 8);
    uint64_t v53 = v49;
    for (p_superclass = v47; v51 != v52; ++v51)
    {
      v54 = **v51;
      uint64_t v55 = (char *)(*v51)[1] - (char *)v54;
      if (v55)
      {
        __int128 v56 = v55 >> 3;
        if (v56 <= 1) {
          __int128 v56 = 1LL;
        }
        __int128 v57 = (double *)v49;
        do
        {
          __int128 v58 = *v54++;
          *__int128 v57 = v58 + *v57;
          ++v57;
          --v56;
        }

        while (v56);
      }
    }

    uint64_t v59 = *(double ****)(v78 + 24 * v45);
    for (m = *(double ****)(v78 + 24 * v45 + 8); v59 != m; ++v59)
    {
      v61 = **v59;
      unsigned int v62 = (char *)(*v59)[1] - (char *)v61;
      if (v62)
      {
        v63 = v62 >> 3;
        if (v63 <= 1) {
          v63 = 1LL;
        }
        v64 = (double *)v77;
        do
        {
          v65 = *v61++;
          *v64 = v65 + *v64;
          ++v64;
          --v63;
        }

        while (v63);
      }
    }

    for (n = 0LL; n != v34; ++n)
    {
      if (!v45)
      {
        v67 = (void *)objc_opt_new(v47 + 54, v50);
        [v43 addObject:v67];
      }

      v68 = (void *)objc_claimAutoreleasedReturnValue([v43 objectAtIndexedSubscript:n]);
      v69 = v68;
      if (v68)
      {
        [v68 timing];
        [v69 timing];
      }
    }

    for (iuint64_t i = 0LL; ii != v34; ++ii)
    {
      if (!v45)
      {
        v71 = (void *)objc_opt_new(v47 + 54, v50);
        [v44 addObject:v71];
      }

      v72 = (void *)objc_claimAutoreleasedReturnValue([v44 objectAtIndexedSubscript:ii]);
      v73 = v72;
      if (v72)
      {
        [v72 timing];
        [v73 timing];
      }
    }

    if (v77) {
      operator delete(v77);
    }
    if (v53) {
      operator delete(v53);
    }
    ++v45;
    __int128 v42 = v75;
  }

  [*((id *)self + 20) setLoadActionTimes:v43];
  [*((id *)self + 20) setStoreActionTimes:v44];
}

  unint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "getBreadcrumbSummary", (void)v23));
  if ([v17 count]) {
    -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v17, @"GTErrorKeyReplayerContext");
  }
  unint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v13 getBreadcrumbsAsJSON]);
  if (v18) {
    -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v18, @"GTErrorKeyReplayerBreadcrumbs");
  }
  int v19 = (void *)objc_claimAutoreleasedReturnValue([v13 gputracePath]);
  if (v19) {
    -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v19, @"GTErrorKeyGputracePath");
  }

LABEL_26:
  unint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.gputools.MTLReplayer",  a1,  v4,  (void)v23));

  return v20;
}

      unint64_t v15 = 0LL;
      goto LABEL_20;
    }

  unsigned __int8 *v12 = &v9[v17];
  return result;
}

uint64_t sub_8264(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + sub_4B28(v1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_573C(a1, *(void *)(a2 + 8));
  return a1;
}

void sub_82C0(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_82D8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  float v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_5CF0(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    size_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_6198(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_8554(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_573C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + sub_4B28(v1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_8530( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_623C((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_8554@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(_BYTE *)(a4 + sub_4B28(v1 + 16) = 0;
  *(void *)unint64_t v8 = 0LL;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = v8 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_5154(v9, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)unint64_t v9 = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }

  __n128 result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v8 + 40) = result;
  *(_BYTE *)(a4 + sub_4B28(v1 + 16) = 1;
  return result;
}

void sub_85E0(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_623C(v3, v2);
  _Unwind_Resume(a1);
}

char *sub_85FC(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  unint64_t v4 = __dst;
  unint64_t v10 = __dst;
  uint8x8_t v11 = __dst;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      sub_869C(v4, v6);
      v6 += 3;
      unint64_t v4 = v11 + 48;
      v11 += 48;
    }

    while (v6 != a3);
  }

  char v9 = 1;
  sub_8730((uint64_t)v8);
  return v4;
}

void sub_8688( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_869C(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_5154(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }

  uint8x8_t v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_5154(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v6 = *(__int128 *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)uint8x8_t v5 = v6;
  }

  return __dst;
}

void sub_8714(_Unwind_Exception *exception_object)
{
}

uint64_t sub_8730(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_8764((uint64_t *)a1);
  }
  return a1;
}

void sub_8764(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 48LL;
      sub_87B4(v5, v3);
    }

    while (v3 != v4);
  }

void sub_87B4(uint64_t a1, uint64_t a2)
{
}

void sub_87F8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48LL;
        sub_87B4((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void *sub_887C(void *a1, uint64_t a2)
{
  uint64_t v3 = sub_7FAC(a1, v5[0]);
  v5[0] = 0LL;
  sub_742C((uint64_t)v5, 0LL);
  return v3;
}

void sub_88CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

unint64_t sub_88E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = (char *)operator new(0x40uLL);
  unint64_t v8 = v7;
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + sub_4B28(v1 + 16) = 0;
  char v9 = v7 + 16;
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_5154(v7 + 16, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    _OWORD *v9 = *(_OWORD *)a2;
    *((void *)v7 + 4) = *(void *)(a2 + 16);
  }

  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 24);
  *((void *)v8 + 7) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_BYTE *)(a3 + sub_4B28(v1 + 16) = 1;
  unint64_t result = sub_5CF0(a1 + 24, (uint64_t)v9);
  *((void *)v8 + 1) = result;
  return result;
}

void sub_8990(_Unwind_Exception *a1)
{
}

void *sub_89A8(uint64_t a1, __int128 *a2, __int128 *a3, void *__dst)
{
  uint64_t v4 = __dst;
  unint64_t v12 = __dst;
  size_t v13 = __dst;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_5154(v4, *(void **)v6, *((void *)v6 + 1));
        unint64_t v8 = v13;
      }

      else
      {
        __int128 v7 = *v6;
        v4[2] = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
        unint64_t v8 = v4;
      }

      v4[3] = *((void *)v6 + 3);
      v6 += 2;
      uint64_t v4 = v8 + 4;
      size_t v13 = v8 + 4;
    }

    while (v6 != a3);
  }

  char v11 = 1;
  sub_8A70((uint64_t)v10);
  return v4;
}

void sub_8A5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_8A70(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_8AA4(a1);
  }
  return a1;
}

void sub_8AA4(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 32LL;
  }

void sub_8AE8(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_8B28((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_8B28(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32LL)
  {
  }

  a1[1] = v2;
}

unsigned __int8 *sub_8B74(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  __int128 v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_5CF0(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    size_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_6198(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_8DF0(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_573C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + sub_4B28(v1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_8DCC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_623C((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_8DF0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(_BYTE *)(a4 + sub_4B28(v1 + 16) = 0;
  *(void *)unint64_t v8 = 0LL;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = v8 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_5154(v9, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)unint64_t v9 = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }

  __n128 result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v8 + 40) = result;
  *(_BYTE *)(a4 + sub_4B28(v1 + 16) = 1;
  return result;
}

void sub_8E7C(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_623C(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_8E98(void *a1, __int128 *a2)
{
  uint64_t v3 = sub_7FAC(a1, v5[0]);
  v5[0] = 0LL;
  sub_742C((uint64_t)v5, 0LL);
  return v3;
}

void sub_8EE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

unint64_t sub_8F00@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = operator new(0x40uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + sub_4B28(v1 + 16) = 0;
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  sub_5288((char *)v7 + 16, a2);
  *(_BYTE *)(a3 + sub_4B28(v1 + 16) = 1;
  unint64_t result = sub_5CF0(a1 + 24, (uint64_t)v7 + 16);
  *((void *)v7 + 1) = result;
  return result;
}

void sub_8F78(_Unwind_Exception *a1)
{
}

void *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::clear( void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    unint64_t result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        unint64_t result = v2;
      }

      while (v2);
    }

    v1[2] = 0LL;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0LL; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0LL;
    }

    v1[3] = 0LL;
  }

  return result;
}

uint64_t sub_8FF4(void *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x28uLL);
  *(void *)uint64_t v4 = 0LL;
  *((_OWORD *)v4 + 1) = *(_OWORD *)a2;
  *((void *)v4 + 4) = *(void *)(a2 + 16);
  *((void *)v4 + 1) = sub_90D0((uint64_t)(a1 + 3), *((uint64_t **)v4 + 2), *((void *)v4 + 3));
  return sub_906C(a1, (uint64_t)v4);
}

void sub_9058(_Unwind_Exception *a1)
{
}

uint64_t sub_906C(void *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 16;
  unint64_t v5 = sub_90D0((uint64_t)(a1 + 3), *(uint64_t **)(a2 + 16), *(void *)(a2 + 24));
  *(void *)(a2 + 8) = v5;
  uint64_t v6 = sub_90F4((uint64_t)a1, v5, v4);
  sub_817C(a1, (void *)a2, v6);
  return a2;
}

unint64_t sub_90D0(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  return sub_5D2C((uint64_t)&v4, a2, a3);
}

uint64_t *sub_90F4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1LL;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v10;
    }
    sub_927C(a1, v12);
    unint64_t v6 = *(void *)(a1 + 8);
  }

  uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v13.i16[0] = vaddlv_u8(v13);
  unint64_t v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }

  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }

  float v16 = *(uint64_t **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0LL;
  }
  int v17 = 0;
  unint64_t v19 = *(const void **)a3;
  size_t v18 = *(void *)(a3 + 8);
  do
  {
    unint64_t v20 = v16;
    float v16 = (uint64_t *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v21 = v16[1];
    if (v14 > 1)
    {
      unint64_t v22 = v16[1];
      if (v21 >= v6) {
        unint64_t v22 = v21 % v6;
      }
    }

    else
    {
      unint64_t v22 = v21 & (v6 - 1);
    }

    if (v22 != v15) {
      break;
    }
    BOOL v23 = v21 == a2 && v16[3] == v18 && memcmp((const void *)v16[2], v19, v18) == 0;
    int v24 = v17 & !v23;
    v17 |= v23;
  }

  while (v24 != 1);
  return v20;
}

void sub_927C(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }

    else
    {
      uint64_t v7 = 1LL << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }

    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4) {
LABEL_16:
    }
      sub_9358(a1, prime);
  }

void sub_9358(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_21DC();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0LL;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
    while (a2 != v6);
    uint64_t v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }

      else
      {
        v8 &= a2 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = *v7; *v7; uint64_t i = *v7)
      {
        unint64_t v13 = i[1];
        if (v10 > 1)
        {
          if (v13 >= a2) {
            v13 %= a2;
          }
        }

        else
        {
          v13 &= a2 - 1;
        }

        if (v13 == v8)
        {
          uint64_t v7 = (uint64_t **)i;
        }

        else
        {
          unint64_t v14 = i;
          if (*(void *)(*(void *)a1 + 8 * v13))
          {
            do
            {
              unint64_t v15 = v14;
              unint64_t v14 = (uint64_t *)*v14;
              if (!v14) {
                break;
              }
              size_t v16 = i[3];
              if (v16 != v14[3]) {
                break;
              }
            }

            while (!memcmp((const void *)i[2], (const void *)v14[2], v16));
            *uint64_t v7 = v14;
            void *v15 = **(void **)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = i;
          }

          else
          {
            *(void *)(*(void *)a1 + 8 * v13) = v7;
            uint64_t v7 = (uint64_t **)i;
            unint64_t v8 = v13;
          }
        }
      }
    }
  }

  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0LL;
  }

void *sub_94F8(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_90D0(a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        uint64_t v17 = a2;
        unint64_t v15 = *(uint64_t **)a2;
        size_t v16 = *(void *)(v17 + 8);
        do
        {
          unint64_t v18 = *((void *)v14 + 1);
          if (v18 == v9)
          {
          }

          else
          {
            if (v12 > 1)
            {
              if (v18 >= v10) {
                v18 %= v10;
              }
            }

            else
            {
              v18 &= v10 - 1;
            }

            if (v18 != v3) {
              break;
            }
          }

          unint64_t v14 = *(void **)v14;
        }

        while (v14);
      }
    }
  }

  unint64_t v14 = operator new(0x30uLL);
  *(void *)unint64_t v14 = 0LL;
  *((void *)v14 + 1) = v9;
  __int128 v19 = a3[1];
  *((_OWORD *)v14 + 1) = *a3;
  *((_OWORD *)v14 + 2) = v19;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    BOOL v22 = 1LL;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_573C(a1, v25);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  uint64_t v26 = *(void *)a1;
  unint64_t v27 = *(void **)(*(void *)a1 + 8 * v3);
  if (v27)
  {
    *(void *)unint64_t v14 = *v27;
LABEL_40:
    void *v27 = v14;
    goto LABEL_41;
  }

  *(void *)unint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + sub_4B28(v1 + 16) = v14;
  *(void *)(v26 + 8 * v3) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v28 = *(void *)(*(void *)v14 + 8LL);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10) {
        v28 %= v10;
      }
    }

    else
    {
      v28 &= v10 - 1;
    }

    unint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_40;
  }

LABEL_41:
  ++*v7;
  return v14;
}

LABEL_43:
          if (v30)
          {
            v80[0] = *(void *)(v15 + 8);
            uint64_t v37 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::piecewise_construct_t const&<>>( v73,  v80[0],  v80);
            objc_storeStrong(v37 + 3, v30);
            [*(id *)(a2 + 8) setVisibleFunctionTable:v30 forKey:*(void *)(v15 + 8)];
          }

          goto LABEL_46;
        }
      }
    }

    else if (*(void *)(v15 + 120))
    {
      uint64_t v34 = std::unordered_map<unsigned long long,-[GTShaderProfilerHelper _calculatePerSampleActiveShaders:withShaderProfilerResult:forWorkloadInfo:]::EncoderRangeInfo>::find[abi:nn180100]( *(void *)(a3 + 120),  *(void *)(a3 + 128),  a5[1]);
      if (v34)
      {
        uint64_t v35 = (id)v34[3];
        if (v35)
        {
          v67 = v35;
          uint64_t v36 = [v35 newVisibleFunctionTableWithDescriptor:v26];
          char v30 = v36;
          if (v36) {
            SetupInstrumentedFunctionTable(v36, *(uint64_t **)(v11 + 40), a3 + 200, (uint64_t)v80, a5[1], v76);
          }
          goto LABEL_41;
        }
      }
    }

    char v30 = 0LL;
    goto LABEL_43;
  }

        v68 = (v54 >> 23);
        if (v68 != v64)
        {
          if (v49 >= v48)
          {
            v69 = (v49 - v46) >> 4;
            v70 = v69 + 1;
            __p = v46;
            if ((v48 - v46) >> 3 > v70) {
              v70 = (v48 - v46) >> 3;
            }
            else {
              v71 = v70;
            }
            if (v71 >> 60) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            v72 = (char *)operator new(16 * v71);
            v73 = &v72[16 * v69];
            *(void *)v73 = v63;
            *((_DWORD *)v73 + 2) = v68 | ((_DWORD)v55 << 16);
            if (v47 == __p)
            {
              v76 = &v72[16 * v69];
              __int128 v42 = v388;
              v75 = __p;
            }

            else
            {
              v74 = &v72[16 * v69];
              __int128 v42 = v388;
              v75 = __p;
              do
              {
                v76 = v74 - 16;
                *((_OWORD *)v74 - 1) = *((_OWORD *)v47 - 1);
                v47 -= 16;
                v74 -= 16;
              }

              while (v47 != __p);
            }

            v48 = &v72[16 * v71];
            unint64_t v47 = v73 + 16;
            if (v75)
            {
              v77 = &v72[16 * v71];
              operator delete(v75);
              v48 = v77;
            }

            unint64_t v46 = v76;
            uint64_t v52 = v397;
          }

          else
          {
            *(void *)v49 = v63;
            *((_DWORD *)v49 + 2) = v68 | ((_DWORD)v55 << 16);
            unint64_t v47 = v49 + 16;
          }

          *((_DWORD *)v449 + v55) = v68;
          v49 = v47;
        }

        unint64_t v18 = v399;
        *((void *)v448 + v55) = v57;
      }

      else
      {
        __int128 v56 = v50 + 1;
      }

      __int128 v50 = v56;
    }

    while (v56 < v51);
    v78 = (__int128 *)objc_msgSend(*(id *)(v18 + 336), "bytes", v48);
    v79 = [*(id *)(v18 + 336) bytes];
    v80 = (unint64_t)[*(id *)(v18 + 336) length];
    memset(v432, 0, sizeof(v432));
    std::vector<std::pair<unsigned long long,unsigned long long>>::__init_with_size[abi:nn180100]<std::pair<unsigned long long,unsigned long long>*,std::pair<unsigned long long,unsigned long long>*>( v432,  v78,  (__int128 *)&v79[v80 & 0xFFFFFFFFFFFFFFF0LL],  (&v79[v80 & 0xFFFFFFFFFFFFFFF0LL] - (_BYTE *)v78) >> 4);
    v81 = (char *)v432[0];
    if (v432[0] == v432[1])
    {
      v166 = 0;
      uint64_t v35 = v385;
      v140 = v387;
      goto LABEL_189;
    }

    v82 = (char *)v432[1] - (char *)v432[0];
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *,false>( (unint64_t)v432[0],  (unint64_t *)v432[1],  126 - 2 * __clz(((char *)v432[1] - (char *)v432[0]) >> 4),  1);
    v83 = v47 - v46;
    v84 = ((v47 - v46) & 0xFFFFFFFF0LL) == 0;
    __pa = v46;
    v85 = 0LL;
    v86 = 0LL;
    v87 = 0LL;
    if (!v84)
    {
      v88 = 0LL;
      if (((v83 >> 4) & 0xFFFFFFFE) != 0) {
        v89 = (v83 >> 4);
      }
      else {
        v89 = 1LL;
      }
      do
      {
        v90 = &v46[16 * v88];
        v91 = *((_DWORD *)v90 + 2) >> 31;
        if (v86 >= (unint64_t)v87)
        {
          v92 = (uint64_t)(v86 - (void)v85) >> 4;
          v93 = v92 + 1;
          else {
            v94 = v93;
          }
          v95 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned long long,unsigned long long>>>(v94);
          v97 = &v95[16 * v92];
          *(void *)v97 = *(void *)v90;
          *((_DWORD *)v97 + 2) = v91 | (4 * v88);
          if ((unsigned int *)v86 == v85)
          {
            v99 = (unsigned int *)&v95[16 * v92];
            unint64_t v46 = __pa;
          }

          else
          {
            v98 = &v95[16 * v92];
            unint64_t v46 = __pa;
            do
            {
              v99 = (unsigned int *)(v98 - 16);
              *((_OWORD *)v98 - 1) = *(_OWORD *)(v86 - 16);
              v86 -= 16LL;
              v98 -= 16;
            }

            while ((unsigned int *)v86 != v85);
          }

          v87 = &v95[16 * v96];
          v86 = (unint64_t)(v97 + 16);
          if (v85) {
            operator delete(v85);
          }
          v85 = v99;
        }

        else
        {
          *(void *)v86 = *(void *)v90;
          *(_DWORD *)(v86 + 8) = v91 | (4 * v88);
          v86 += 16LL;
          unint64_t v46 = __pa;
        }

        std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::less<GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement> &,std::__wrap_iter<GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement*>>( (BOOL)v85,  v86,  (uint64_t)(v86 - (void)v85) >> 4);
        ++v88;
      }

      while (v88 != v89);
      v81 = (char *)v432[0];
      v82 = (char *)v432[1] - (char *)v432[0];
    }

    if ((v82 & 0xFFFFFFFF0LL) != 0)
    {
      v100 = 0LL;
      do
      {
        v101 = &v81[16 * v100];
        if (v86 >= (unint64_t)v87)
        {
          v103 = (uint64_t)(v86 - (void)v85) >> 4;
          v104 = v103 + 1;
          else {
            v105 = v104;
          }
          v106 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned long long,unsigned long long>>>(v105);
          v108 = &v106[16 * v103];
          *(void *)v108 = *(void *)v101;
          *((_DWORD *)v108 + 2) = (4 * v100) | 2;
          if ((unsigned int *)v86 == v85)
          {
            v110 = (unsigned int *)&v106[16 * v103];
          }

          else
          {
            v109 = &v106[16 * v103];
            do
            {
              v110 = (unsigned int *)(v109 - 16);
              *((_OWORD *)v109 - 1) = *(_OWORD *)(v86 - 16);
              v86 -= 16LL;
              v109 -= 16;
            }

            while ((unsigned int *)v86 != v85);
          }

          v87 = &v106[16 * v107];
          v102 = (unint64_t)(v108 + 16);
          if (v85) {
            operator delete(v85);
          }
          v85 = v110;
        }

        else
        {
          *(void *)v86 = *(void *)v101;
          *(_DWORD *)(v86 + 8) = (4 * v100) | 2;
          v102 = v86 + 16;
        }

        v111 = (uint64_t)(v102 - (void)v85) >> 4;
        std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::less<GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement> &,std::__wrap_iter<GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement*>>( (BOOL)v85,  v102,  v111);
        v112 = &v81[16 * v100 + 8];
        if (v102 >= (unint64_t)v87)
        {
          v113 = v111 + 1;
          else {
            v114 = v113;
          }
          v115 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned long long,unsigned long long>>>(v114);
          v117 = &v115[16 * v111];
          *(void *)v117 = *(void *)v112;
          *((_DWORD *)v117 + 2) = (4 * v100) | 3;
          if ((unsigned int *)v102 == v85)
          {
            v119 = (unsigned int *)&v115[16 * v111];
          }

          else
          {
            v118 = &v115[16 * v111];
            do
            {
              v119 = (unsigned int *)(v118 - 16);
              *((_OWORD *)v118 - 1) = *(_OWORD *)(v102 - 16);
              v102 -= 16LL;
              v118 -= 16;
            }

            while ((unsigned int *)v102 != v85);
          }

          v87 = &v115[16 * v116];
          v86 = (unint64_t)(v117 + 16);
          if (v85) {
            operator delete(v85);
          }
          v85 = v119;
        }

        else
        {
          *(void *)v102 = *(void *)v112;
          *(_DWORD *)(v102 + 8) = (4 * v100) | 3;
          v86 = v102 + 16;
        }

        std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::less<GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement> &,std::__wrap_iter<GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement*>>( (BOOL)v85,  v86,  (uint64_t)(v86 - (void)v85) >> 4);
        ++v100;
        v81 = (char *)v432[0];
      }

      while (v100 < ((unint64_t)((char *)v432[1] - (char *)v432[0]) >> 4));
    }

    v456 = 0u;
    v457 = 0u;
    v454 = 0u;
    v455 = 0u;
    v452 = 0u;
    v453 = 0u;
    *(_OWORD *)buf = 0u;
    v451 = 0u;
    v446 = 0u;
    v447 = 0u;
    v444 = 0u;
    v445 = 0u;
    v442 = 0u;
    v443 = 0u;
    v440 = 0u;
    v441 = 0u;
    if (v85 == (unsigned int *)v86)
    {
      v139 = 0;
      v166 = 0;
      uint64_t v35 = v385;
      v140 = v387;
      if (!v85)
      {
LABEL_189:
        if (v81)
        {
          v432[1] = v81;
          operator delete(v81);
        }

        unint64_t v18 = v399;
        if (v46) {
          operator delete(v46);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v434);
        if (v388) {
          operator delete(v388);
        }

        uint64_t v36 = v386;
        if (v166) {
          goto LABEL_197;
        }
        goto LABEL_196;
      }
    }

    else
    {
      v120 = 0LL;
      v121 = 0;
      v390 = 0;
      v391 = 0;
      v389 = *(void *)v85;
      do
      {
        v122 = *(void *)v85;
        v123 = v85[2];
        v124 = v86 - (void)v85;
        if ((uint64_t)(v86 - (void)v85) >= 17)
        {
          v392 = *(void *)v85;
          v395 = v121;
          v398 = v120;
          v125 = 0LL;
          v126 = v124 >> 4;
          v433 = *(_OWORD *)v85;
          v127 = __OFSUB__(v124 >> 4, 2LL);
          v128 = (v124 >> 4) - 2;
          if (v128 < 0 != v127) {
            v128 = v126 - 1;
          }
          v129 = v128 >> 1;
          v130 = v85;
          do
          {
            v131 = &v130[4 * v125 + 4];
            v132 = (2 * v125) | 1;
            v133 = 2 * v125 + 2;
            if (v133 < v126)
            {
              v134 = GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement::operator<( (uint64_t)&v130[4 * v125 + 4],  *(void *)&v130[4 * v125 + 8],  v130[4 * v125 + 10]);
              if (v134) {
                v131 += 4;
              }
              __int128 v19 = context;
              if (v134) {
                v132 = v133;
              }
            }

            *(_OWORD *)v130 = *(_OWORD *)v131;
            v130 = v131;
            v125 = v132;
          }

          while (v132 <= v129);
          v135 = (_OWORD *)(v86 - 16);
          if ((unsigned int *)(v86 - 16) == v131)
          {
            *(_OWORD *)v131 = v433;
          }

          else
          {
            *(_OWORD *)v131 = *v135;
            *v135 = v433;
            std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::less<GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement> &,std::__wrap_iter<GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement*>>( (BOOL)v85,  (uint64_t)(v131 + 4),  ((char *)(v131 + 4) - (char *)v85) >> 4);
          }

          unint64_t v46 = __pa;
          v122 = v392;
          v120 = v398;
          v121 = v395;
        }

        if (v121 >= 1)
        {
          *(void *)&buf[8 * v390] += v122 - v389;
          v120 += v122 - v389;
          *((void *)&v440 + v391) += v122 - v389;
        }

        if ((v123 & 2) != 0)
        {
          if ((v123 & 1) != 0) {
            --v121;
          }
          else {
            ++v121;
          }
        }

        else
        {
          v136 = HIWORD(*(_DWORD *)&v46[((4 * v123) & 0x3FFFFFFF0LL) + 8]) & 0x7FFF;
          if (v136 == 1)
          {
            v138 = (unsigned __int16)*(_DWORD *)&v46[((4 * v123) & 0x3FFFFFFF0LL) + 8];
            if (v138 >= 0xF) {
              v138 = 15;
            }
            v391 = v138;
          }

          else if (v136 == 2)
          {
            v137 = (unsigned __int16)*(_DWORD *)&v46[((4 * v123) & 0x3FFFFFFF0LL) + 8];
            if (v137 >= 0xF) {
              v137 = 15;
            }
            v390 = v137;
          }
        }

        v86 -= 16LL;
      }

      while (v85 != (unsigned int *)v86);
      v139 = 0;
      if (v384 > 0x10)
      {
        uint64_t v35 = v385;
        v140 = v387;
      }

      else
      {
        uint64_t v35 = v385;
        v140 = v387;
        if (v120)
        {
          v141 = 0uLL;
          for (k = 16LL; k != 128; k += 16LL)
            v141 = vaddq_s64(*(int64x2_t *)&buf[k], v141);
          v143 = (double)(unint64_t)vaddvq_s64(v141) * 100.0 / (double)v120 > 5.0;
          v139 = (1.0 - (double)(unint64_t)(*((void *)&v440 + v384) + v440) / (double)v120) * 100.0 > 5.0
              && v143;
        }
      }
    }

    operator delete(v85);
    v81 = (char *)v432[0];
    v166 = v139;
    goto LABEL_189;
  }

  v144 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v413,  "objectForKeyedSubscript:",  @"usc sampling address data"));
  v145 = v144 == 0LL;

  if (!v145)
  {
    v146 = objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v413,  "objectForKeyedSubscript:",  @"usc sampling address data"));
    v147 = (void *)*((void *)v414 + 5);
    *((void *)v414 + 5) = v146;

    [*((id *)v414 + 6) addOperation:*((void *)v414 + 9)];
    [*((id *)v414 + 9) waitUntilFinished];
    v431[0] = _NSConcreteStackBlock;
    v431[1] = 3221225472LL;
    v431[2] = ___ZN31MTLGRCStreamingSampleHelperImpl19ProcessStreamedDataEP12NSDictionaryS1__block_invoke;
    v431[3] = &__block_descriptor_48_e5_v8__0l;
    v431[4] = v414;
    v431[5] = v5;
    uint8x8_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSBlockOperation blockOperationWithBlock:]( &OBJC_CLASS___NSBlockOperation,  "blockOperationWithBlock:",  v431));
    [*((id *)v414 + 10) addDependency:v11];
    [*((id *)v414 + 6) addOperation:v11];
    [*((id *)v414 + 6) addOperation:*((void *)v414 + 10)];
    goto LABEL_238;
  }

  v154 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v413,  "objectForKeyedSubscript:",  @"ShaderProfilerData"));
  v155 = v154 == 0LL;

  if (v155)
  {
    v158 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v413,  "objectForKeyedSubscript:",  @"Frame Time Data"));
    v159 = v158 == 0LL;

    if (!v159)
    {
      v160 = (id *)operator new(0x10uLL);
      v161 = v413;
      *v160 = v161;
      v160[1] = 0LL;
      *(void *)buf = 0LL;
      std::unique_ptr<GRCSplitBlitTimeData>::reset[abi:nn180100]((id **)v414 + 2, v160);
      std::unique_ptr<GRCSplitBlitTimeData>::reset[abi:nn180100]((id **)buf, 0LL);
      v427[0] = _NSConcreteStackBlock;
      v427[1] = 3221225472LL;
      v427[2] = ___ZN31MTLGRCStreamingSampleHelperImpl19ProcessStreamedDataEP12NSDictionaryS1__block_invoke_211;
      v427[3] = &unk_58FA50;
      v429 = v414;
      v428 = v161;
      v430 = v5;
      v162 = (void *)objc_claimAutoreleasedReturnValue( +[NSBlockOperation blockOperationWithBlock:]( &OBJC_CLASS___NSBlockOperation,  "blockOperationWithBlock:",  v427));
      [*((id *)v414 + 6) addOperation:v162];
      [*((id *)v414 + 8) addDependency:v162];

      uint8x8_t v11 = (os_log_s *)v428;
      goto LABEL_238;
    }

    v163 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v413,  "objectForKeyedSubscript:",  @"Blit Encoder Frame Data"));
    v164 = v163 == 0LL;

    if (!v164)
    {
      std::make_unique[abi:nn180100]<GRCSplitBlitTimeData,NSDictionary * {__strong}&>(buf, v413);
      v165 = *(id **)buf;
      *(void *)buf = 0LL;
      std::unique_ptr<GRCSplitBlitTimeData>::reset[abi:nn180100]((id **)v414 + 3, v165);
      std::unique_ptr<GRCSplitBlitTimeData>::reset[abi:nn180100]((id **)buf, 0LL);
      v426[0] = _NSConcreteStackBlock;
      v426[1] = 3221225472LL;
      v426[2] = ___ZN31MTLGRCStreamingSampleHelperImpl19ProcessStreamedDataEP12NSDictionaryS1__block_invoke_216;
      v426[3] = &__block_descriptor_48_e5_v8__0l;
      v426[4] = v414;
      v426[5] = v5;
      uint8x8_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSBlockOperation blockOperationWithBlock:]( &OBJC_CLASS___NSBlockOperation,  "blockOperationWithBlock:",  v426));
      [*((id *)v414 + 6) addOperation:v11];
      [*((id *)v414 + 8) addDependency:v11];
      [*((id *)v414 + 6) addOperation:*((void *)v414 + 8)];
      goto LABEL_238;
    }

    v167 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v413,  "objectForKeyedSubscript:",  @"Derived Counter Sample Data"));
    v168 = v167 == 0LL;

    if (!v168)
    {
      v169 = -[NSDictionary copy](v413, "copy");
      v170 = v414;
      v171 = (void *)objc_claimAutoreleasedReturnValue([0 objectForKeyedSubscript:@"Kick Times"]);
      v172 = v171;
      if (!v171) {
        v172 = (void *)*((void *)v414 + 11);
      }
      v173 = v172;
      v421[0] = _NSConcreteStackBlock;
      v421[1] = 3221225472LL;
      v421[2] = ___ZN31MTLGRCStreamingSampleHelperImpl19ProcessStreamedDataEP12NSDictionaryS1__block_invoke_221;
      v421[3] = &unk_58FA78;
      v424 = v414;
      uint8x8_t v11 = (os_log_s *)v169;
      v422 = v11;
      v174 = v173;
      v423 = v174;
      v425 = spid;
      v175 = (void *)objc_claimAutoreleasedReturnValue( +[NSBlockOperation blockOperationWithBlock:]( &OBJC_CLASS___NSBlockOperation,  "blockOperationWithBlock:",  v421));
      [*((id *)v414 + 16) addDependency:v175];
      v176 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v413,  "objectForKeyedSubscript:",  @"Batch Filtered Counters"));
      if (v176)
      {

        v170 = v414;
      }

      else if (*((_DWORD *)v414 + 34) != 1)
      {
        [v175 addDependency:*((void *)v414 + 10)];
      }

      [*((id *)v170 + 6) addOperation:v175];
      if (*((_DWORD *)v170 + 34) == 1)
      {
        [*((id *)v170 + 9) addDependency:v175];
        [*((id *)v170 + 6) addOperation:*((void *)v170 + 9)];
        v373 = objc_opt_new(&OBJC_CLASS___NSOperation, v372);
        v374 = (void *)*((void *)v170 + 9);
        *((void *)v170 + 9) = v373;
      }

      else
      {
        [*((id *)v170 + 7) addDependency:v175];
      }

      goto LABEL_238;
    }

    v177 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v413,  "objectForKeyedSubscript:",  @"Havested Binaries"));
    v178 = v177 == 0LL;

    if (v178)
    {
      v375 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v413, "objectForKeyedSubscript:", @"Kick Times"));
      v376 = v375 == 0LL;

      if (v376)
      {
        v380 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v413,  "objectForKeyedSubscript:",  @"End Batch ID Streaming Data"));
        v381 = v380 == 0LL;

        if (!v381)
        {
          v417[0] = _NSConcreteStackBlock;
          v417[1] = 3221225472LL;
          v417[2] = ___ZN31MTLGRCStreamingSampleHelperImpl19ProcessStreamedDataEP12NSDictionaryS1__block_invoke_229;
          v417[3] = &unk_58FA50;
          v419 = v414;
          uint8x8_t v11 = (os_log_s *)-[NSDictionary copy](v413, "copy");
          v418 = v11;
          v420 = v5;
          v382 = (void *)objc_claimAutoreleasedReturnValue( +[NSBlockOperation blockOperationWithBlock:]( &OBJC_CLASS___NSBlockOperation,  "blockOperationWithBlock:",  v417));
          [*((id *)v414 + 6) addOperation:*((void *)v414 + 16)];
          [v382 addDependency:*((void *)v414 + 16)];
          [*((id *)v414 + 6) addOperation:v382];
          [*((id *)v414 + 7) addDependency:v382];

          goto LABEL_238;
        }

        v383 = g_signpostLog;
        uint8x8_t v11 = (os_log_s *)v383;
        if (v410 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled((os_log_t)v383)) {
          goto LABEL_238;
        }
        *(_WORD *)buf = 0;
        unint64_t v13 = (const char *)&unk_3189BB;
      }

      else
      {
        v377 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v413, "objectForKeyedSubscript:", @"Kick Times"));
        v378 = (void *)*((void *)v414 + 11);
        *((void *)v414 + 11) = v377;

        v379 = g_signpostLog;
        uint8x8_t v11 = (os_log_s *)v379;
        if (v410 >= 0xFFFFFFFFFFFFFFFELL || !os_signpost_enabled((os_log_t)v379)) {
          goto LABEL_238;
        }
        *(_WORD *)buf = 0;
        unint64_t v13 = "Kick Times";
      }
    }

    else
    {
      v179 = atomic_load((unsigned __int8 *)v414 + 140);
      if ((v179 & 1) == 0) {
        v180 = (id)(*(uint64_t (**)(void))(*((void *)v414 + 14) + 16LL))();
      }
      v181 = g_signpostLog;
      uint8x8_t v11 = (os_log_s *)v181;
      if (v410 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled((os_log_t)v181)) {
        goto LABEL_238;
      }
      *(_WORD *)buf = 0;
      unint64_t v13 = "Havested Binaries";
    }

      if ((*((_BYTE *)v8 + 33) & 0x20) != 0) {
        goto LABEL_44;
      }
    }

    float v20 = 0LL;
    unint64_t v27 = (char *)a2[23];
LABEL_37:
    unint64_t v12 = 0LL;
    goto LABEL_38;
  }

void sub_974C(_Unwind_Exception *a1)
{
}

void sub_9760(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 176LL;
        sub_97E4((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_97E4(uint64_t a1, uint64_t a2)
{
  return sub_4B28(a2 + 8);
}

void sub_981C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_23F8(v4 - 88);
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void *agxps_timeseries_create(int a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = operator new(0x28uLL);
  sub_98FC((uint64_t)v4, a1, a2);
  return v4;
}

void sub_98E0(_Unwind_Exception *a1)
{
}

uint64_t sub_98F4()
{
  return 0LL;
}

uint64_t sub_98FC(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + sub_4B28(v1 + 16) = 0LL;
  uint64_t v4 = (void **)(a1 + 16);
  *(void *)(a1 + 24) = 0LL;
  *(_BYTE *)(a1 + 32) = 0;
  if (a2 == 2) {
    goto LABEL_7;
  }
  unint64_t v5 = -1LL;
  if (!a2) {
    unint64_t v5 = 7LL;
  }
  if (a2 == 1) {
    unint64_t v5 = 7LL;
  }
  unsigned int v6 = __clz(v5);
  if (v6 >= 0x3E) {
LABEL_7:
  }
    size_t v7 = 8LL;
  else {
    size_t v7 = (1 << -(char)v6);
  }
  char v8 = 3;
  if (a2 == 2) {
    char v8 = 0;
  }
  posix_memalign(&__memptr, v7, a3 << v8);
  unint64_t v9 = *v4;
  void *v4 = __memptr;
  if (v9) {
    sub_29E90((void (**)(void *))(a1 + 24), v9);
  }
  *(void *)(a1 + 24) = &_free;
  return a1;
}

void sub_99C0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = v2;
  unint64_t v5 = *v3;
  *unint64_t v3 = 0LL;
  if (v5) {
    sub_29E90((void (**)(void *))(v1 + 24), v5);
  }
  _Unwind_Resume(exception_object);
}

void **agxps_timeseries_copy(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v2 = (void **)operator new(0x28uLL);
  sub_98FC((uint64_t)v2, *(_DWORD *)a1, *(void *)(a1 + 8));
  char v3 = 3;
  if (*(_DWORD *)a1 == 2) {
    char v3 = 0;
  }
  memcpy(v2[2], *(const void **)(a1 + 16), *(void *)(a1 + 8) << v3);
  return v2;
}

void sub_9A48(_Unwind_Exception *a1)
{
}

void agxps_timeseries_destroy(void *__p)
{
  if (__p)
  {
    uint64_t v2 = (void *)*((void *)__p + 2);
    *((void *)__p + 2) = 0LL;
    if (v2) {
      sub_29E90((void (**)(void *))__p + 3, v2);
    }
    operator delete(__p);
  }

uint64_t agxps_timeseries_get_data(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t agxps_timeseries_get_length(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

unsigned int *agxps_timeseries_get_datatype(unsigned int *result)
{
  if (result) {
    return (unsigned int *)*result;
  }
  return result;
}

uint64_t sub_9ABC()
{
  return 0LL;
}

BOOL sub_9AC8(int a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a1 == a3)
  {
    BOOL v4 = a4 == a2;
    BOOL v5 = a2 == a4;
    BOOL v6 = *(double *)&a2 == *(double *)&a4;
    if (a1) {
      BOOL v6 = a4 == a2;
    }
    if (a1 != 1) {
      BOOL v5 = v6;
    }
    if (a1 != 2) {
      return v5;
    }
  }

  else
  {
    return 0;
  }

  return v4;
}

uint64_t sub_9B1C(unsigned int a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3 = a3 - 3;
  if (a1 - 3 > 0xFFFFFFFD)
  {
    unsigned int v4 = a3;
    if (v3 < 0xFFFFFFFE) {
      goto LABEL_13;
    }
  }

  else
  {
    unsigned int v4 = a1;
    if (v3 >= 0xFFFFFFFE)
    {
      if (!a1) {
        goto LABEL_21;
      }
LABEL_13:
      if (a1 == 2)
      {
        if (a3 == 2)
        {
          if (v4 != 2)
          {
            if (v4 != 1) {
              return v4;
            }
            return 1;
          }
        }

        else if (a3 == 1)
        {
          if (v4 != 2)
          {
            if (v4 != 1) {
              return v4;
            }
            return 1;
          }
        }

        else
        {
          if (a3) {
            return v4;
          }
          if (v4 != 2)
          {
            if (v4 != 1) {
              return v4;
            }
            return 1;
          }
        }
      }

      else
      {
        if (a1 != 1) {
          return v4;
        }
        if (a3 == 2)
        {
          if (v4 != 2)
          {
            if (v4 != 1) {
              return v4;
            }
            return 1;
          }
        }

        else if (a3 == 1)
        {
          if (v4 != 2)
          {
            if (v4 != 1) {
              return v4;
            }
            return 1;
          }
        }

        else
        {
          if (a3) {
            return v4;
          }
          if (v4 != 2)
          {
            if (v4 != 1) {
              return v4;
            }
            return 1;
          }
        }
      }

      return 2;
    }
  }

  if (a3 != 2 || a1 == 2) {
    unsigned int v4 = a3;
  }
  else {
    unsigned int v4 = a1;
  }
  if (a1) {
    goto LABEL_13;
  }
LABEL_21:
  if (a3 == 2)
  {
    if (v4 != 2)
    {
      if (v4 != 1) {
        return v4;
      }
      return 1;
    }

    return 2;
  }

  if (a3 == 1)
  {
    if (v4 != 2)
    {
      if (v4 != 1) {
        return v4;
      }
      return 1;
    }

    return 2;
  }

  if (a3) {
    return v4;
  }
  switch(v4)
  {
    case 2u:
      return 2;
    case 1u:
      return 1;
    case 0u:
      return 0;
  }

  return v4;
}

uint64_t sub_9D9C(unsigned int a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3 = a3 - 3;
  if (a1 - 3 > 0xFFFFFFFD)
  {
    unsigned int v4 = a3;
    if (v3 < 0xFFFFFFFE) {
      goto LABEL_13;
    }
  }

  else
  {
    unsigned int v4 = a1;
    if (v3 >= 0xFFFFFFFE)
    {
      if (!a1) {
        goto LABEL_21;
      }
LABEL_13:
      if (a1 == 2)
      {
        if (a3 == 2)
        {
          if (v4 == 2) {
            return 2;
          }
          if (v4 != 1) {
            return v4;
          }
        }

        else if (a3 == 1)
        {
          if (v4 == 2) {
            return 2;
          }
          if (v4 != 1) {
            return v4;
          }
        }

        else
        {
          if (a3) {
            return v4;
          }
          if (v4 == 2) {
            return 2;
          }
          if (v4 != 1) {
            return v4;
          }
        }
      }

      else
      {
        if (a1 != 1) {
          return v4;
        }
        if (a3 == 2)
        {
          if (v4 == 2) {
            return 2;
          }
          if (v4 != 1) {
            return v4;
          }
        }

        else
        {
          if (a3 != 1)
          {
            if (a3) {
              return v4;
            }
            if (v4 != 2)
            {
              if (v4 != 1) {
                return v4;
              }
              return 1;
            }

            return 2;
          }

          if (v4 == 2) {
            return 2;
          }
          if (v4 != 1) {
            return v4;
          }
        }
      }

      return 1;
    }
  }

  if (a3 != 2 || a1 == 2) {
    unsigned int v4 = a3;
  }
  else {
    unsigned int v4 = a1;
  }
  if (a1) {
    goto LABEL_13;
  }
LABEL_21:
  if (a3 == 2)
  {
    if (v4 == 2) {
      return 2;
    }
    if (v4 != 1) {
      return v4;
    }
    return 1;
  }

  if (a3 == 1)
  {
    if (v4 == 2) {
      return 2;
    }
    if (v4 != 1) {
      return v4;
    }
    return 1;
  }

  if (a3) {
    return v4;
  }
  if (v4 != 2)
  {
    if (v4 != 1) {
      return v4;
    }
    return 1;
  }

  return 2;
}

void sub_A050(uint64_t a1)
{
  uint64_t v6 = a1;
  off_5B7A40();
  if (!*v3)
  {
    *(_BYTE *)v2(v1) = 1;
    off_5B7A28();
    *BOOL v5 = 0u;
    v5[1] = 0u;
    v5[2] = 0u;
    _tlv_atexit((void (__cdecl *)(void *))std::deque<ProfileEvent>::~deque[abi:nn180100], v5);
  }

  off_5B7A28();
  sub_29EC0(v4, &v6);
}

uint64_t sub_A0F0()
{
  if (!*v2)
  {
    *(_BYTE *)v1(v0) = 1;
    off_5B7A28();
    *BOOL v5 = 0u;
    v5[1] = 0u;
    v5[2] = 0u;
    _tlv_atexit((void (__cdecl *)(void *))std::deque<ProfileEvent>::~deque[abi:nn180100], v5);
  }

  off_5B7A28();
  --v3[5];
  return sub_2A6B4(v3, 1);
}

int *sub_A18C(int *a1, int *a2)
{
  unsigned int v4 = (int *)sub_AE60((uint64_t)a1, a2);
  return agxps_timeseries_add_tt(a1, a2, v4, 1);
}

int *agxps_timeseries_add_tt(int *a1, int *a2, int *a3, int a4)
{
  uint64_t v4 = 0LL;
  if (a1 && a2 && a3)
  {
    if (!*((_BYTE *)a3 + 32) && (uint64_t v5 = *((void *)a1 + 1), v5 == *((void *)a2 + 1)) && v5 == *((void *)a3 + 1))
    {
      int v6 = *a1;
      int v7 = *a2;
      int v8 = *a3;
      if (*a1 == 2)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v275 = (char *)*((void *)a1 + 2);
                    v276 = (char *)*((void *)a2 + 2);
                    v277 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      char v279 = *v275++;
                      char v278 = v279;
                      char v280 = *v276++;
                      *v277++ = v280 + v278;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v119 = (char *)*((void *)a1 + 2);
                  v120 = (char *)*((void *)a2 + 2);
                  v121 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    char v123 = *v119++;
                    char v122 = v123;
                    char v124 = *v120++;
                    *v121++ = v124 + v122;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v281 = (unsigned __int8 *)*((void *)a1 + 2);
                    v282 = (unsigned __int8 *)*((void *)a2 + 2);
                    v283 = (void *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v285 = *v281++;
                      uint64_t v284 = v285;
                      unsigned int v286 = *v282++;
                      *v283++ = v286 + v284;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v125 = (unsigned __int8 *)*((void *)a1 + 2);
                  v126 = (unsigned __int8 *)*((void *)a2 + 2);
                  v127 = (void *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v129 = *v125++;
                    uint64_t v128 = v129;
                    unsigned int v130 = *v126++;
                    *v127++ = v130 + v128;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v195 = (unsigned __int8 *)*((void *)a1 + 2);
                    v196 = (unsigned __int8 *)*((void *)a2 + 2);
                    v197 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v198 = *v195++;
                      double v199 = (double)v198;
                      unsigned int v200 = *v196++;
                      *v197++ = v199 + (double)v200;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v39 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v40 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v41 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v42 = *v39++;
                    double v43 = (double)v42;
                    unsigned int v44 = *v40++;
                    *v41++ = v43 + (double)v44;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v287 = (char *)*((void *)a1 + 2);
                    v288 = (char *)*((void *)a2 + 2);
                    v289 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      char v291 = *v287++;
                      char v290 = v291;
                      char v292 = *v288;
                      v288 += 8;
                      *v289++ = v290 + v292;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v131 = (char *)*((void *)a1 + 2);
                  v132 = (char *)*((void *)a2 + 2);
                  v133 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    char v135 = *v131++;
                    char v134 = v135;
                    char v136 = *v132;
                    v132 += 8;
                    *v133++ = v134 + v136;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v293 = (unsigned __int8 *)*((void *)a1 + 2);
                    v294 = (uint64_t *)*((void *)a2 + 2);
                    v295 = (void *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v297 = *v293++;
                      uint64_t v296 = v297;
                      uint64_t v298 = *v294++;
                      *v295++ = v298 + v296;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v137 = (unsigned __int8 *)*((void *)a1 + 2);
                  v138 = (uint64_t *)*((void *)a2 + 2);
                  v139 = (void *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v141 = *v137++;
                    uint64_t v140 = v141;
                    uint64_t v142 = *v138++;
                    *v139++ = v142 + v140;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v201 = (unsigned __int8 *)*((void *)a1 + 2);
                    v202 = (unint64_t *)*((void *)a2 + 2);
                    v203 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v204 = *v201++;
                      double v205 = (double)v204;
                      unint64_t v206 = *v202++;
                      *v203++ = v205 + (double)v206;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v45 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v46 = (unint64_t *)*((void *)a2 + 2);
                  unint64_t v47 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v48 = *v45++;
                    double v49 = (double)v48;
                    unint64_t v50 = *v46++;
                    *v47++ = v49 + (double)v50;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v230 = (char *)*((void *)a1 + 2);
                    v231 = (double *)*((void *)a2 + 2);
                    v232 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      char v234 = *v230++;
                      char v233 = v234;
                      double v235 = *v231++;
                      *v232++ = v233 + (int)v235;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v74 = (char *)*((void *)a1 + 2);
                  v75 = (double *)*((void *)a2 + 2);
                  v76 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    char v78 = *v74++;
                    char v77 = v78;
                    double v79 = *v75++;
                    *v76++ = v77 + (int)v79;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v236 = (unsigned __int8 *)*((void *)a1 + 2);
                    v237 = (double *)*((void *)a2 + 2);
                    v238 = (void *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v240 = *v236++;
                      uint64_t v239 = v240;
                      double v241 = *v237++;
                      *v238++ = (unint64_t)v241 + v239;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v80 = (unsigned __int8 *)*((void *)a1 + 2);
                  v81 = (double *)*((void *)a2 + 2);
                  v82 = (void *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v84 = *v80++;
                    uint64_t v83 = v84;
                    double v85 = *v81++;
                    *v82++ = (unint64_t)v85 + v83;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v172 = (unsigned __int8 *)*((void *)a1 + 2);
                    v173 = (double *)*((void *)a2 + 2);
                    v174 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v175 = *v172++;
                      double v176 = (double)v175;
                      double v177 = *v173++;
                      *v174++ = v177 + v176;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  size_t v16 = (unsigned __int8 *)*((void *)a1 + 2);
                  uint64_t v17 = (double *)*((void *)a2 + 2);
                  unint64_t v18 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v19 = *v16++;
                    double v20 = (double)v19;
                    double v21 = *v17++;
                    *v18++ = v21 + v20;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
        }
      }

      else if (v6 == 1)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v299 = (char *)*((void *)a1 + 2);
                    v300 = (char *)*((void *)a2 + 2);
                    v301 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      char v303 = *v299;
                      v299 += 8;
                      char v302 = v303;
                      char v304 = *v300++;
                      *v301++ = v304 + v302;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v143 = (char *)*((void *)a1 + 2);
                  v144 = (char *)*((void *)a2 + 2);
                  v145 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    char v147 = *v143;
                    v143 += 8;
                    char v146 = v147;
                    char v148 = *v144++;
                    *v145++ = v148 + v146;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v305 = (uint64_t *)*((void *)a1 + 2);
                    v306 = (unsigned __int8 *)*((void *)a2 + 2);
                    v307 = (void *)*((void *)a3 + 2);
                    do
                    {
                      uint64_t v309 = *v305++;
                      uint64_t v308 = v309;
                      LODWORD(v309) = *v306++;
                      *v307++ = v308 + v309;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v149 = (uint64_t *)*((void *)a1 + 2);
                  v150 = (unsigned __int8 *)*((void *)a2 + 2);
                  v151 = (void *)*((void *)a3 + 2);
                  do
                  {
                    uint64_t v153 = *v149++;
                    uint64_t v152 = v153;
                    LODWORD(v153) = *v150++;
                    *v151++ = v152 + v153;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v207 = (unint64_t *)*((void *)a1 + 2);
                    v208 = (unsigned __int8 *)*((void *)a2 + 2);
                    v209 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v210 = *v207++;
                      double v211 = (double)v210;
                      LODWORD(v210) = *v208++;
                      *v209++ = v211 + (double)v210;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  uint64_t v51 = (unint64_t *)*((void *)a1 + 2);
                  uint64_t v52 = (unsigned __int8 *)*((void *)a2 + 2);
                  uint64_t v53 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v54 = *v51++;
                    double v55 = (double)v54;
                    LODWORD(v54) = *v52++;
                    *v53++ = v55 + (double)v54;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v310 = (char *)*((void *)a1 + 2);
                    v311 = (char *)*((void *)a2 + 2);
                    v312 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      char v314 = *v310;
                      v310 += 8;
                      char v313 = v314;
                      char v315 = *v311;
                      v311 += 8;
                      *v312++ = v315 + v313;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v154 = (char *)*((void *)a1 + 2);
                  v155 = (char *)*((void *)a2 + 2);
                  v156 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    char v158 = *v154;
                    v154 += 8;
                    char v157 = v158;
                    char v159 = *v155;
                    v155 += 8;
                    *v156++ = v159 + v157;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v316 = (uint64_t *)*((void *)a1 + 2);
                    v317 = (uint64_t *)*((void *)a2 + 2);
                    v318 = (void *)*((void *)a3 + 2);
                    do
                    {
                      uint64_t v320 = *v316++;
                      uint64_t v319 = v320;
                      uint64_t v321 = *v317++;
                      *v318++ = v321 + v319;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v160 = (uint64_t *)*((void *)a1 + 2);
                  v161 = (uint64_t *)*((void *)a2 + 2);
                  v162 = (void *)*((void *)a3 + 2);
                  do
                  {
                    uint64_t v164 = *v160++;
                    uint64_t v163 = v164;
                    uint64_t v165 = *v161++;
                    *v162++ = v165 + v163;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v212 = (unint64_t *)*((void *)a1 + 2);
                    v213 = (unint64_t *)*((void *)a2 + 2);
                    v214 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v215 = *v212++;
                      unint64_t v216 = v215;
                      unint64_t v217 = *v213++;
                      *v214++ = (double)v216 + (double)v217;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  __int128 v56 = (unint64_t *)*((void *)a1 + 2);
                  __int128 v57 = (unint64_t *)*((void *)a2 + 2);
                  __int128 v58 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v59 = *v56++;
                    unint64_t v60 = v59;
                    unint64_t v61 = *v57++;
                    *v58++ = (double)v60 + (double)v61;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v242 = (char *)*((void *)a1 + 2);
                    v243 = (double *)*((void *)a2 + 2);
                    v244 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      char v246 = *v242;
                      v242 += 8;
                      char v245 = v246;
                      double v247 = *v243++;
                      *v244++ = (int)v247 + v245;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v86 = (char *)*((void *)a1 + 2);
                  v87 = (double *)*((void *)a2 + 2);
                  v88 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    char v90 = *v86;
                    v86 += 8;
                    char v89 = v90;
                    double v91 = *v87++;
                    *v88++ = (int)v91 + v89;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v248 = (uint64_t *)*((void *)a1 + 2);
                    v249 = (double *)*((void *)a2 + 2);
                    v250 = (void *)*((void *)a3 + 2);
                    do
                    {
                      uint64_t v252 = *v248++;
                      uint64_t v251 = v252;
                      double v253 = *v249++;
                      *v250++ = v251 + (unint64_t)v253;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v92 = (uint64_t *)*((void *)a1 + 2);
                  v93 = (double *)*((void *)a2 + 2);
                  v94 = (void *)*((void *)a3 + 2);
                  do
                  {
                    uint64_t v96 = *v92++;
                    uint64_t v95 = v96;
                    double v97 = *v93++;
                    *v94++ = v95 + (unint64_t)v97;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v178 = (unint64_t *)*((void *)a1 + 2);
                    v179 = (double *)*((void *)a2 + 2);
                    v180 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v181 = *v178++;
                      double v182 = (double)v181;
                      double v183 = *v179++;
                      *v180++ = v183 + v182;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  BOOL v22 = (unint64_t *)*((void *)a1 + 2);
                  unint64_t v23 = (double *)*((void *)a2 + 2);
                  unint64_t v24 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v25 = *v22++;
                    double v26 = (double)v25;
                    double v27 = *v23++;
                    *v24++ = v27 + v26;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
        }
      }

      else if (!v6)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v254 = (double *)*((void *)a1 + 2);
                    v255 = (_BYTE *)*((void *)a2 + 2);
                    v256 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      double v257 = *v254++;
                      int v258 = (int)v257;
                      LOBYTE(v257) = *v255++;
                      *v256++ = LOBYTE(v257) + v258;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v98 = (double *)*((void *)a1 + 2);
                  v99 = (_BYTE *)*((void *)a2 + 2);
                  v100 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    double v101 = *v98++;
                    int v102 = (int)v101;
                    LOBYTE(v101) = *v99++;
                    *v100++ = LOBYTE(v101) + v102;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v259 = (double *)*((void *)a1 + 2);
                    v260 = (unsigned __int8 *)*((void *)a2 + 2);
                    v261 = (void *)*((void *)a3 + 2);
                    do
                    {
                      double v262 = *v259++;
                      unint64_t v263 = (unint64_t)v262;
                      LODWORD(v262) = *v260++;
                      *v261++ = LODWORD(v262) + v263;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v103 = (double *)*((void *)a1 + 2);
                  v104 = (unsigned __int8 *)*((void *)a2 + 2);
                  v105 = (void *)*((void *)a3 + 2);
                  do
                  {
                    double v106 = *v103++;
                    unint64_t v107 = (unint64_t)v106;
                    LODWORD(v106) = *v104++;
                    *v105++ = LODWORD(v106) + v107;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v184 = (double *)*((void *)a1 + 2);
                    v185 = (unsigned __int8 *)*((void *)a2 + 2);
                    v186 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v187 = *v184++;
                      double v188 = v187;
                      LODWORD(v187) = *v185++;
                      *v186++ = v188 + (double)LODWORD(v187);
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v28 = (double *)*((void *)a1 + 2);
                  uint64_t v29 = (unsigned __int8 *)*((void *)a2 + 2);
                  char v30 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v31 = *v28++;
                    double v32 = v31;
                    LODWORD(v31) = *v29++;
                    *v30++ = v32 + (double)LODWORD(v31);
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v264 = (double *)*((void *)a1 + 2);
                    v265 = (_BYTE *)*((void *)a2 + 2);
                    v266 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      double v267 = *v264++;
                      int v268 = (int)v267;
                      LOBYTE(v267) = *v265;
                      v265 += 8;
                      *v266++ = LOBYTE(v267) + v268;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v108 = (double *)*((void *)a1 + 2);
                  v109 = (_BYTE *)*((void *)a2 + 2);
                  v110 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    double v111 = *v108++;
                    int v112 = (int)v111;
                    LOBYTE(v111) = *v109;
                    v109 += 8;
                    *v110++ = LOBYTE(v111) + v112;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v269 = (double *)*((void *)a1 + 2);
                    v270 = (uint64_t *)*((void *)a2 + 2);
                    v271 = (void *)*((void *)a3 + 2);
                    do
                    {
                      double v272 = *v269++;
                      unint64_t v273 = (unint64_t)v272;
                      uint64_t v274 = *v270++;
                      *v271++ = v274 + v273;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v113 = (double *)*((void *)a1 + 2);
                  v114 = (uint64_t *)*((void *)a2 + 2);
                  v115 = (void *)*((void *)a3 + 2);
                  do
                  {
                    double v116 = *v113++;
                    unint64_t v117 = (unint64_t)v116;
                    uint64_t v118 = *v114++;
                    *v115++ = v118 + v117;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v189 = (double *)*((void *)a1 + 2);
                    v190 = (unint64_t *)*((void *)a2 + 2);
                    v191 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v192 = *v189++;
                      double v193 = v192;
                      unint64_t v194 = *v190++;
                      *v191++ = v193 + (double)v194;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  uint64_t v33 = (double *)*((void *)a1 + 2);
                  uint64_t v34 = (unint64_t *)*((void *)a2 + 2);
                  uint64_t v35 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v36 = *v33++;
                    double v37 = v36;
                    unint64_t v38 = *v34++;
                    *v35++ = v37 + (double)v38;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v218 = (double *)*((void *)a1 + 2);
                    v219 = (double *)*((void *)a2 + 2);
                    v220 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      double v221 = *v218++;
                      int v222 = (int)v221;
                      double v223 = *v219++;
                      *v220++ = (int)v223 + v222;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unsigned int v62 = (double *)*((void *)a1 + 2);
                  v63 = (double *)*((void *)a2 + 2);
                  v64 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    double v65 = *v62++;
                    int v66 = (int)v65;
                    double v67 = *v63++;
                    *v64++ = (int)v67 + v66;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v224 = (double *)*((void *)a1 + 2);
                    v225 = (double *)*((void *)a2 + 2);
                    v226 = (void *)*((void *)a3 + 2);
                    do
                    {
                      double v227 = *v224++;
                      unint64_t v228 = (unint64_t)v227;
                      double v229 = *v225++;
                      *v226++ = (unint64_t)v229 + v228;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v68 = (double *)*((void *)a1 + 2);
                  v69 = (double *)*((void *)a2 + 2);
                  v70 = (void *)*((void *)a3 + 2);
                  do
                  {
                    double v71 = *v68++;
                    unint64_t v72 = (unint64_t)v71;
                    double v73 = *v69++;
                    *v70++ = (unint64_t)v73 + v72;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v166 = (double *)*((void *)a1 + 2);
                    v167 = (double *)*((void *)a2 + 2);
                    v168 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v169 = *v166++;
                      double v170 = v169;
                      double v171 = *v167++;
                      *v168++ = v170 + v171;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v9 = (double *)*((void *)a1 + 2);
                  unint64_t v10 = (double *)*((void *)a2 + 2);
                  uint8x8_t v11 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v12 = *v9++;
                    double v13 = v12;
                    double v14 = *v10++;
                    *v11++ = v13 + v14;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
        }
      }

      return a3;
    }

    else
    {
      return 0LL;
    }
  }

  return (int *)v4;
}

void *sub_AE60(uint64_t a1, int *a2)
{
  if (a1)
  {
    int v2 = *(_DWORD *)a1;
    if (a2)
    {
LABEL_3:
      int v3 = *a2;
      goto LABEL_6;
    }
  }

  else
  {
    int v2 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }

  int v3 = 0;
LABEL_6:
  unsigned int v4 = v3 - 3;
  if ((v2 - 3) > 0xFFFFFFFD)
  {
    if (v4 < 0xFFFFFFFE) {
      goto LABEL_15;
    }
  }

  else if (v4 >= 0xFFFFFFFE)
  {
    int v3 = v2;
    goto LABEL_15;
  }

  if (v3 == 2 && v2 != 2) {
    int v3 = v2;
  }
LABEL_15:
  if (a1) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  else {
    uint64_t v6 = 0LL;
  }
  off_5B7A40();
  if (!*v9)
  {
    *(_BYTE *)v8(v7) = 1;
    off_5B7A28();
    *double v13 = 0u;
    v13[1] = 0u;
    v13[2] = 0u;
    _tlv_atexit((void (__cdecl *)(void *))std::deque<ProfileEvent>::~deque[abi:nn180100], v13);
  }

  off_5B7A28();
  unint64_t v11 = v10[5] + v10[4] - 1LL;
  return sub_57000(*(void *)(*(void *)(v10[1] + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v11 & 0x1FF)), v3, v6);
}

void *sub_AF84(uint64_t a1, int a2)
{
  if (a1)
  {
    int v2 = *(_DWORD *)a1;
    unsigned int v3 = a2 - 3;
    if ((*(_DWORD *)a1 - 3) > 0xFFFFFFFD)
    {
      if (v3 < 0xFFFFFFFE)
      {
        int v2 = a2;
LABEL_15:
        uint64_t v4 = *(void *)(a1 + 8);
        goto LABEL_16;
      }
    }

    else if (v3 >= 0xFFFFFFFE)
    {
      goto LABEL_15;
    }

    if (v2 == 2 || a2 != 2) {
      int v2 = a2;
    }
    goto LABEL_15;
  }

  uint64_t v4 = 0LL;
  else {
    int v2 = a2;
  }
LABEL_16:
  off_5B7A40();
  if (!*v8)
  {
    *(_BYTE *)v7(v6) = 1;
    off_5B7A28();
    _OWORD *v12 = 0u;
    v12[1] = 0u;
    v12[2] = 0u;
    _tlv_atexit((void (__cdecl *)(void *))std::deque<ProfileEvent>::~deque[abi:nn180100], v12);
  }

  off_5B7A28();
  unint64_t v10 = v9[5] + v9[4] - 1LL;
  return sub_57000(*(void *)(*(void *)(v9[1] + ((v10 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v10 & 0x1FF)), v2, v4);
}

int *sub_B09C(int *a1, int *a2)
{
  uint64_t v4 = (int *)sub_AE60((uint64_t)a1, a2);
  return agxps_timeseries_sub_tt(a1, a2, v4, 1);
}

int *agxps_timeseries_sub_tt(int *a1, int *a2, int *a3, int a4)
{
  uint64_t v4 = 0LL;
  if (a1 && a2 && a3)
  {
    if (!*((_BYTE *)a3 + 32) && (uint64_t v5 = *((void *)a1 + 1), v5 == *((void *)a2 + 1)) && v5 == *((void *)a3 + 1))
    {
      int v6 = *a1;
      int v7 = *a2;
      int v8 = *a3;
      if (*a1 == 2)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v304 = (unsigned __int8 *)*((void *)a1 + 2);
                    v305 = (unsigned __int8 *)*((void *)a2 + 2);
                    v306 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v308 = *v304++;
                      unsigned int v307 = v308;
                      unsigned int v309 = *v305++;
                      BOOL v68 = v307 >= v309;
                      char v310 = v307 - v309;
                      if (!v68) {
                        char v310 = 0;
                      }
                      *v306++ = v310;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unsigned int v130 = (unsigned __int8 *)*((void *)a1 + 2);
                  v131 = (unsigned __int8 *)*((void *)a2 + 2);
                  v132 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v134 = *v130++;
                    unsigned int v133 = v134;
                    unsigned int v135 = *v131++;
                    BOOL v68 = v133 >= v135;
                    char v136 = v133 - v135;
                    if (!v68) {
                      char v136 = 0;
                    }
                    *v132++ = v136;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v311 = (unsigned __int8 *)*((void *)a1 + 2);
                    v312 = (unsigned __int8 *)*((void *)a2 + 2);
                    char v313 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v315 = *v311++;
                      unint64_t v314 = v315;
                      unsigned int v316 = *v312++;
                      BOOL v68 = v314 >= v316;
                      unint64_t v317 = v314 - v316;
                      if (!v68) {
                        unint64_t v317 = 0LL;
                      }
                      *v313++ = v317;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v137 = (unsigned __int8 *)*((void *)a1 + 2);
                  v138 = (unsigned __int8 *)*((void *)a2 + 2);
                  v139 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v141 = *v137++;
                    unint64_t v140 = v141;
                    unsigned int v142 = *v138++;
                    BOOL v68 = v140 >= v142;
                    unint64_t v143 = v140 - v142;
                    if (!v68) {
                      unint64_t v143 = 0LL;
                    }
                    *v139++ = v143;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v214 = (unsigned __int8 *)*((void *)a1 + 2);
                    unint64_t v215 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v216 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v217 = *v214++;
                      double v218 = (double)v217;
                      unsigned int v219 = *v215++;
                      *v216++ = v218 - (double)v219;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v39 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v40 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v41 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v42 = *v39++;
                    double v43 = (double)v42;
                    unsigned int v44 = *v40++;
                    *v41++ = v43 - (double)v44;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v318 = (unsigned __int8 *)*((void *)a1 + 2);
                    uint64_t v319 = (unsigned __int8 *)*((void *)a2 + 2);
                    uint64_t v320 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v322 = *v318++;
                      unsigned int v321 = v322;
                      unsigned int v323 = *v319;
                      v319 += 8;
                      BOOL v68 = v321 >= v323;
                      char v324 = v321 - v323;
                      if (!v68) {
                        char v324 = 0;
                      }
                      *v320++ = v324;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v144 = (unsigned __int8 *)*((void *)a1 + 2);
                  v145 = (unsigned __int8 *)*((void *)a2 + 2);
                  char v146 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v148 = *v144++;
                    unsigned int v147 = v148;
                    unsigned int v149 = *v145;
                    v145 += 8;
                    BOOL v68 = v147 >= v149;
                    char v150 = v147 - v149;
                    if (!v68) {
                      char v150 = 0;
                    }
                    *v146++ = v150;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v325 = (unsigned __int8 *)*((void *)a1 + 2);
                    v326 = (unint64_t *)*((void *)a2 + 2);
                    v327 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v329 = *v325++;
                      unint64_t v328 = v329;
                      unint64_t v330 = *v326++;
                      BOOL v68 = v328 >= v330;
                      unint64_t v331 = v328 - v330;
                      if (!v68) {
                        unint64_t v331 = 0LL;
                      }
                      *v327++ = v331;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v151 = (unsigned __int8 *)*((void *)a1 + 2);
                  uint64_t v152 = (unint64_t *)*((void *)a2 + 2);
                  uint64_t v153 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v155 = *v151++;
                    unint64_t v154 = v155;
                    unint64_t v156 = *v152++;
                    BOOL v68 = v154 >= v156;
                    unint64_t v157 = v154 - v156;
                    if (!v68) {
                      unint64_t v157 = 0LL;
                    }
                    *v153++ = v157;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v220 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v221 = (unint64_t *)*((void *)a2 + 2);
                    int v222 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v223 = *v220++;
                      double v224 = (double)v223;
                      unint64_t v225 = *v221++;
                      *v222++ = v224 - (double)v225;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v45 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v46 = (unint64_t *)*((void *)a2 + 2);
                  unint64_t v47 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v48 = *v45++;
                    double v49 = (double)v48;
                    unint64_t v50 = *v46++;
                    *v47++ = v49 - (double)v50;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    uint64_t v251 = (unsigned __int8 *)*((void *)a1 + 2);
                    uint64_t v252 = (double *)*((void *)a2 + 2);
                    double v253 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v255 = *v251++;
                      unsigned int v254 = v255;
                      double v256 = *v252++;
                      BOOL v68 = v254 >= (int)v256;
                      unsigned int v257 = v254 - (int)v256;
                      if (!v68) {
                        LOBYTE(v257) = 0;
                      }
                      *v253++ = v257;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  char v77 = (unsigned __int8 *)*((void *)a1 + 2);
                  char v78 = (double *)*((void *)a2 + 2);
                  double v79 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v81 = *v77++;
                    unsigned int v80 = v81;
                    double v82 = *v78++;
                    BOOL v68 = v80 >= (int)v82;
                    unsigned int v83 = v80 - (int)v82;
                    if (!v68) {
                      LOBYTE(v83) = 0;
                    }
                    *v79++ = v83;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    int v258 = (unsigned __int8 *)*((void *)a1 + 2);
                    v259 = (double *)*((void *)a2 + 2);
                    v260 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v262 = *v258++;
                      unint64_t v261 = v262;
                      double v263 = *v259++;
                      BOOL v68 = v261 >= (unint64_t)v263;
                      unint64_t v264 = v261 - (unint64_t)v263;
                      if (!v68) {
                        unint64_t v264 = 0LL;
                      }
                      *v260++ = v264;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unsigned int v84 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v85 = (double *)*((void *)a2 + 2);
                  v86 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v88 = *v84++;
                    unint64_t v87 = v88;
                    double v89 = *v85++;
                    BOOL v68 = v87 >= (unint64_t)v89;
                    unint64_t v90 = v87 - (unint64_t)v89;
                    if (!v68) {
                      unint64_t v90 = 0LL;
                    }
                    *v86++ = v90;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v191 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v192 = (double *)*((void *)a2 + 2);
                    double v193 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v194 = *v191++;
                      double v195 = (double)v194;
                      double v196 = *v192++;
                      *v193++ = v195 - v196;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  size_t v16 = (unsigned __int8 *)*((void *)a1 + 2);
                  uint64_t v17 = (double *)*((void *)a2 + 2);
                  unint64_t v18 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v19 = *v16++;
                    double v20 = (double)v19;
                    double v21 = *v17++;
                    *v18++ = v20 - v21;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
        }
      }

      else if (v6 == 1)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v332 = (unsigned __int8 *)*((void *)a1 + 2);
                    v333 = (unsigned __int8 *)*((void *)a2 + 2);
                    v334 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v336 = *v332;
                      v332 += 8;
                      unsigned int v335 = v336;
                      unsigned int v337 = *v333++;
                      BOOL v68 = v335 >= v337;
                      char v338 = v335 - v337;
                      if (!v68) {
                        char v338 = 0;
                      }
                      *v334++ = v338;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  char v158 = (unsigned __int8 *)*((void *)a1 + 2);
                  char v159 = (unsigned __int8 *)*((void *)a2 + 2);
                  v160 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v162 = *v158;
                    v158 += 8;
                    unsigned int v161 = v162;
                    unsigned int v163 = *v159++;
                    BOOL v68 = v161 >= v163;
                    char v164 = v161 - v163;
                    if (!v68) {
                      char v164 = 0;
                    }
                    *v160++ = v164;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v339 = (unint64_t *)*((void *)a1 + 2);
                    v340 = (unsigned __int8 *)*((void *)a2 + 2);
                    v341 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v343 = *v339++;
                      unint64_t v342 = v343;
                      LODWORD(v343) = *v340++;
                      BOOL v68 = v342 >= v343;
                      unint64_t v344 = v342 - v343;
                      if (!v68) {
                        unint64_t v344 = 0LL;
                      }
                      *v341++ = v344;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  uint64_t v165 = (unint64_t *)*((void *)a1 + 2);
                  v166 = (unsigned __int8 *)*((void *)a2 + 2);
                  v167 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v169 = *v165++;
                    unint64_t v168 = v169;
                    LODWORD(v169) = *v166++;
                    BOOL v68 = v168 >= v169;
                    unint64_t v170 = v168 - v169;
                    if (!v68) {
                      unint64_t v170 = 0LL;
                    }
                    *v167++ = v170;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v226 = (unint64_t *)*((void *)a1 + 2);
                    double v227 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v228 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v229 = *v226++;
                      double v230 = (double)v229;
                      LODWORD(v229) = *v227++;
                      *v228++ = v230 - (double)v229;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  uint64_t v51 = (unint64_t *)*((void *)a1 + 2);
                  uint64_t v52 = (unsigned __int8 *)*((void *)a2 + 2);
                  uint64_t v53 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v54 = *v51++;
                    double v55 = (double)v54;
                    LODWORD(v54) = *v52++;
                    *v53++ = v55 - (double)v54;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v345 = (unsigned __int8 *)*((void *)a1 + 2);
                    v346 = (unsigned __int8 *)*((void *)a2 + 2);
                    v347 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v349 = *v345;
                      v345 += 8;
                      unsigned int v348 = v349;
                      unsigned int v350 = *v346;
                      v346 += 8;
                      BOOL v68 = v348 >= v350;
                      char v351 = v348 - v350;
                      if (!v68) {
                        char v351 = 0;
                      }
                      *v347++ = v351;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v171 = (unsigned __int8 *)*((void *)a1 + 2);
                  v172 = (unsigned __int8 *)*((void *)a2 + 2);
                  v173 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v175 = *v171;
                    v171 += 8;
                    unsigned int v174 = v175;
                    unsigned int v176 = *v172;
                    v172 += 8;
                    BOOL v68 = v174 >= v176;
                    char v177 = v174 - v176;
                    if (!v68) {
                      char v177 = 0;
                    }
                    *v173++ = v177;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v352 = (unint64_t *)*((void *)a1 + 2);
                    v353 = (unint64_t *)*((void *)a2 + 2);
                    v354 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v356 = *v352++;
                      unint64_t v355 = v356;
                      unint64_t v357 = *v353++;
                      BOOL v68 = v355 >= v357;
                      unint64_t v358 = v355 - v357;
                      if (!v68) {
                        unint64_t v358 = 0LL;
                      }
                      *v354++ = v358;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v178 = (unint64_t *)*((void *)a1 + 2);
                  v179 = (unint64_t *)*((void *)a2 + 2);
                  v180 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v182 = *v178++;
                    unint64_t v181 = v182;
                    unint64_t v183 = *v179++;
                    BOOL v68 = v181 >= v183;
                    unint64_t v184 = v181 - v183;
                    if (!v68) {
                      unint64_t v184 = 0LL;
                    }
                    *v180++ = v184;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v231 = (unint64_t *)*((void *)a1 + 2);
                    v232 = (unint64_t *)*((void *)a2 + 2);
                    char v233 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v234 = *v231++;
                      unint64_t v235 = v234;
                      unint64_t v236 = *v232++;
                      *v233++ = (double)v235 - (double)v236;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  __int128 v56 = (unint64_t *)*((void *)a1 + 2);
                  __int128 v57 = (unint64_t *)*((void *)a2 + 2);
                  __int128 v58 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v59 = *v56++;
                    unint64_t v60 = v59;
                    unint64_t v61 = *v57++;
                    *v58++ = (double)v60 - (double)v61;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v265 = (unsigned __int8 *)*((void *)a1 + 2);
                    v266 = (double *)*((void *)a2 + 2);
                    double v267 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v269 = *v265;
                      v265 += 8;
                      unsigned int v268 = v269;
                      double v270 = *v266++;
                      BOOL v68 = v268 >= (int)v270;
                      unsigned int v271 = v268 - (int)v270;
                      if (!v68) {
                        LOBYTE(v271) = 0;
                      }
                      *v267++ = v271;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v91 = (unsigned __int8 *)*((void *)a1 + 2);
                  v92 = (double *)*((void *)a2 + 2);
                  v93 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v95 = *v91;
                    v91 += 8;
                    unsigned int v94 = v95;
                    double v96 = *v92++;
                    BOOL v68 = v94 >= (int)v96;
                    unsigned int v97 = v94 - (int)v96;
                    if (!v68) {
                      LOBYTE(v97) = 0;
                    }
                    *v93++ = v97;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v272 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v273 = (double *)*((void *)a2 + 2);
                    uint64_t v274 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v276 = *v272++;
                      unint64_t v275 = v276;
                      double v277 = *v273++;
                      BOOL v68 = v275 >= (unint64_t)v277;
                      unint64_t v278 = v275 - (unint64_t)v277;
                      if (!v68) {
                        unint64_t v278 = 0LL;
                      }
                      *v274++ = v278;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v98 = (unint64_t *)*((void *)a1 + 2);
                  v99 = (double *)*((void *)a2 + 2);
                  v100 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v102 = *v98++;
                    unint64_t v101 = v102;
                    double v103 = *v99++;
                    BOOL v68 = v101 >= (unint64_t)v103;
                    unint64_t v104 = v101 - (unint64_t)v103;
                    if (!v68) {
                      unint64_t v104 = 0LL;
                    }
                    *v100++ = v104;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v197 = (unint64_t *)*((void *)a1 + 2);
                    unsigned int v198 = (double *)*((void *)a2 + 2);
                    double v199 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v200 = *v197++;
                      double v201 = (double)v200;
                      double v202 = *v198++;
                      *v199++ = v201 - v202;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  BOOL v22 = (unint64_t *)*((void *)a1 + 2);
                  unint64_t v23 = (double *)*((void *)a2 + 2);
                  unint64_t v24 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v25 = *v22++;
                    double v26 = (double)v25;
                    double v27 = *v23++;
                    *v24++ = v26 - v27;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
        }
      }

      else if (!v6)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v279 = (double *)*((void *)a1 + 2);
                    char v280 = (unsigned __int8 *)*((void *)a2 + 2);
                    v281 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      double v282 = *v279++;
                      unsigned int v283 = (int)v282;
                      LODWORD(v282) = *v280++;
                      BOOL v68 = v283 >= LODWORD(v282);
                      char v284 = v283 - LOBYTE(v282);
                      if (!v68) {
                        char v284 = 0;
                      }
                      *v281++ = v284;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v105 = (double *)*((void *)a1 + 2);
                  double v106 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v107 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    double v108 = *v105++;
                    unsigned int v109 = (int)v108;
                    LODWORD(v108) = *v106++;
                    BOOL v68 = v109 >= LODWORD(v108);
                    char v110 = v109 - LOBYTE(v108);
                    if (!v68) {
                      char v110 = 0;
                    }
                    *v107++ = v110;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v285 = (double *)*((void *)a1 + 2);
                    unsigned int v286 = (unsigned __int8 *)*((void *)a2 + 2);
                    v287 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      double v288 = *v285++;
                      unint64_t v289 = (unint64_t)v288;
                      LODWORD(v288) = *v286++;
                      BOOL v68 = v289 >= LODWORD(v288);
                      unint64_t v290 = v289 - LODWORD(v288);
                      if (!v68) {
                        unint64_t v290 = 0LL;
                      }
                      *v287++ = v290;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v111 = (double *)*((void *)a1 + 2);
                  int v112 = (unsigned __int8 *)*((void *)a2 + 2);
                  v113 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    double v114 = *v111++;
                    unint64_t v115 = (unint64_t)v114;
                    LODWORD(v114) = *v112++;
                    BOOL v68 = v115 >= LODWORD(v114);
                    unint64_t v116 = v115 - LODWORD(v114);
                    if (!v68) {
                      unint64_t v116 = 0LL;
                    }
                    *v113++ = v116;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v203 = (double *)*((void *)a1 + 2);
                    unsigned int v204 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v205 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v206 = *v203++;
                      double v207 = v206;
                      LODWORD(v206) = *v204++;
                      *v205++ = v207 - (double)LODWORD(v206);
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v28 = (double *)*((void *)a1 + 2);
                  uint64_t v29 = (unsigned __int8 *)*((void *)a2 + 2);
                  char v30 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v31 = *v28++;
                    double v32 = v31;
                    LODWORD(v31) = *v29++;
                    *v30++ = v32 - (double)LODWORD(v31);
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v291 = (double *)*((void *)a1 + 2);
                    char v292 = (unsigned __int8 *)*((void *)a2 + 2);
                    v293 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      double v294 = *v291++;
                      unsigned int v295 = (int)v294;
                      LODWORD(v294) = *v292;
                      v292 += 8;
                      BOOL v68 = v295 >= LODWORD(v294);
                      char v296 = v295 - LOBYTE(v294);
                      if (!v68) {
                        char v296 = 0;
                      }
                      *v293++ = v296;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v117 = (double *)*((void *)a1 + 2);
                  uint64_t v118 = (unsigned __int8 *)*((void *)a2 + 2);
                  v119 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    double v120 = *v117++;
                    unsigned int v121 = (int)v120;
                    LODWORD(v120) = *v118;
                    v118 += 8;
                    BOOL v68 = v121 >= LODWORD(v120);
                    char v122 = v121 - LOBYTE(v120);
                    if (!v68) {
                      char v122 = 0;
                    }
                    *v119++ = v122;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v297 = (double *)*((void *)a1 + 2);
                    uint64_t v298 = (unint64_t *)*((void *)a2 + 2);
                    v299 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      double v300 = *v297++;
                      unint64_t v301 = (unint64_t)v300;
                      unint64_t v302 = *v298++;
                      BOOL v68 = v301 >= v302;
                      unint64_t v303 = v301 - v302;
                      if (!v68) {
                        unint64_t v303 = 0LL;
                      }
                      *v299++ = v303;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  char v123 = (double *)*((void *)a1 + 2);
                  char v124 = (unint64_t *)*((void *)a2 + 2);
                  v125 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    double v126 = *v123++;
                    unint64_t v127 = (unint64_t)v126;
                    unint64_t v128 = *v124++;
                    BOOL v68 = v127 >= v128;
                    unint64_t v129 = v127 - v128;
                    if (!v68) {
                      unint64_t v129 = 0LL;
                    }
                    *v125++ = v129;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v208 = (double *)*((void *)a1 + 2);
                    v209 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v210 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v211 = *v208++;
                      double v212 = v211;
                      unint64_t v213 = *v209++;
                      *v210++ = v212 - (double)v213;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  uint64_t v33 = (double *)*((void *)a1 + 2);
                  uint64_t v34 = (unint64_t *)*((void *)a2 + 2);
                  uint64_t v35 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v36 = *v33++;
                    double v37 = v36;
                    unint64_t v38 = *v34++;
                    *v35++ = v37 - (double)v38;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v237 = (double *)*((void *)a1 + 2);
                    v238 = (double *)*((void *)a2 + 2);
                    uint64_t v239 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      double v240 = *v237++;
                      unsigned int v241 = (int)v240;
                      double v242 = *v238++;
                      BOOL v68 = v241 >= (int)v242;
                      unsigned int v243 = v241 - (int)v242;
                      if (!v68) {
                        LOBYTE(v243) = 0;
                      }
                      *v239++ = v243;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unsigned int v62 = (double *)*((void *)a1 + 2);
                  v63 = (double *)*((void *)a2 + 2);
                  v64 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    double v65 = *v62++;
                    unsigned int v66 = (int)v65;
                    double v67 = *v63++;
                    BOOL v68 = v66 >= (int)v67;
                    unsigned int v69 = v66 - (int)v67;
                    if (!v68) {
                      LOBYTE(v69) = 0;
                    }
                    *v64++ = v69;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v244 = (double *)*((void *)a1 + 2);
                    char v245 = (double *)*((void *)a2 + 2);
                    char v246 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      double v247 = *v244++;
                      unint64_t v248 = (unint64_t)v247;
                      double v249 = *v245++;
                      BOOL v68 = v248 >= (unint64_t)v249;
                      unint64_t v250 = v248 - (unint64_t)v249;
                      if (!v68) {
                        unint64_t v250 = 0LL;
                      }
                      *v246++ = v250;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v70 = (double *)*((void *)a1 + 2);
                  double v71 = (double *)*((void *)a2 + 2);
                  unint64_t v72 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    double v73 = *v70++;
                    unint64_t v74 = (unint64_t)v73;
                    double v75 = *v71++;
                    BOOL v68 = v74 >= (unint64_t)v75;
                    unint64_t v76 = v74 - (unint64_t)v75;
                    if (!v68) {
                      unint64_t v76 = 0LL;
                    }
                    *v72++ = v76;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v185 = (double *)*((void *)a1 + 2);
                    v186 = (double *)*((void *)a2 + 2);
                    double v187 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v188 = *v185++;
                      double v189 = v188;
                      double v190 = *v186++;
                      *v187++ = v189 - v190;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v9 = (double *)*((void *)a1 + 2);
                  unint64_t v10 = (double *)*((void *)a2 + 2);
                  unint64_t v11 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v12 = *v9++;
                    double v13 = v12;
                    double v14 = *v10++;
                    *v11++ = v13 - v14;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
        }
      }

      return a3;
    }

    else
    {
      return 0LL;
    }
  }

  return (int *)v4;
}

int *agxps_timeseries_sub_st(int a1, unint64_t a2, int *a3, int *a4, int a5)
{
  unint64_t result = 0LL;
  if (a3 && a4)
  {
    if (*((_BYTE *)a4 + 32)) {
      return 0LL;
    }
    uint64_t v7 = *((void *)a3 + 1);
    if (v7 != *((void *)a4 + 1))
    {
      return 0LL;
    }

    else
    {
      int v8 = *a3;
      int v9 = *a4;
      switch(a1)
      {
        case 2:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v188 = (unsigned __int8 *)*((void *)a3 + 2);
                      double v189 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v190 = *v188++;
                        char v191 = a2 - v190;
                        *v189++ = v191;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unsigned int v83 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v84 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v85 = *v83++;
                      char v86 = a2 - v85;
                      *v84++ = v86;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v192 = (unsigned __int8 *)*((void *)a3 + 2);
                      double v193 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v194 = *v192++;
                        unint64_t v195 = a2 - (unint64_t)v194;
                        *v193++ = v195;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v87 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v88 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v89 = *v87++;
                      unint64_t v90 = a2 - (unint64_t)v89;
                      *v88++ = v90;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v130 = (unsigned __int8 *)*((void *)a3 + 2);
                      v131 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v132 = *v130++;
                        *v131++ = (double)a2 - (double)v132;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v25 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v26 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v27 = *v25++;
                      *v26++ = (double)a2 - (double)v27;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v196 = (unsigned __int8 *)*((void *)a3 + 2);
                      v197 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v198 = *v196;
                        v196 += 8;
                        char v199 = a2 - v198;
                        *v197++ = v199;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v91 = (unsigned __int8 *)*((void *)a3 + 2);
                    v92 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v93 = *v91;
                      v91 += 8;
                      char v94 = a2 - v93;
                      *v92++ = v94;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v200 = (unint64_t *)*((void *)a3 + 2);
                      double v201 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v202 = *v200++;
                        unint64_t v203 = a2 - v202;
                        *v201++ = v203;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unsigned int v95 = (unint64_t *)*((void *)a3 + 2);
                    double v96 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v97 = *v95++;
                      unint64_t v98 = a2 - v97;
                      *v96++ = v98;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v133 = (unint64_t *)*((void *)a3 + 2);
                      unsigned int v134 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v135 = *v133++;
                        *v134++ = (double)a2 - (double)v135;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v28 = (unint64_t *)*((void *)a3 + 2);
                    uint64_t v29 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v30 = *v28++;
                      *v29++ = (double)a2 - (double)v30;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      uint64_t v152 = (double *)*((void *)a3 + 2);
                      uint64_t v153 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        double v154 = *v152++;
                        int v155 = a2 - (int)v154;
                        *v153++ = v155;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v47 = (double *)*((void *)a3 + 2);
                    unsigned int v48 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      double v49 = *v47++;
                      int v50 = a2 - (int)v49;
                      *v48++ = v50;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v156 = (double *)*((void *)a3 + 2);
                      unint64_t v157 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        double v158 = *v156++;
                        unint64_t v159 = a2 - (unint64_t)v158;
                        *v157++ = v159;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    uint64_t v51 = (double *)*((void *)a3 + 2);
                    uint64_t v52 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v53 = *v51++;
                      unint64_t v54 = a2 - (unint64_t)v53;
                      *v52++ = v54;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      uint64_t v118 = (double *)*((void *)a3 + 2);
                      v119 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v120 = *v118++;
                        *v119++ = (double)a2 - v120;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v13 = (double *)*((void *)a3 + 2);
                    double v14 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v15 = *v13++;
                      *v14++ = (double)a2 - v15;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
          }

          break;
        case 1:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v204 = (unsigned __int8 *)*((void *)a3 + 2);
                      double v205 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v206 = *v204++;
                        char v207 = a2 - v206;
                        *v205++ = v207;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    v99 = (unsigned __int8 *)*((void *)a3 + 2);
                    v100 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v101 = *v99++;
                      char v102 = a2 - v101;
                      *v100++ = v102;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v208 = (unsigned __int8 *)*((void *)a3 + 2);
                      v209 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v210 = *v208++;
                        unint64_t v211 = a2 - v210;
                        if (a2 < v210) {
                          unint64_t v211 = 0LL;
                        }
                        *v209++ = v211;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v103 = (unsigned __int8 *)*((void *)a3 + 2);
                    unint64_t v104 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v105 = *v103++;
                      unint64_t v106 = a2 - v105;
                      if (a2 < v105) {
                        unint64_t v106 = 0LL;
                      }
                      *v104++ = v106;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v136 = (unsigned __int8 *)*((void *)a3 + 2);
                      v137 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v138 = *v136++;
                        *v137++ = (double)a2 - (double)v138;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v31 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v32 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v33 = *v31++;
                      *v32++ = (double)a2 - (double)v33;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v212 = (unsigned __int8 *)*((void *)a3 + 2);
                      unint64_t v213 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v214 = *v212;
                        v212 += 8;
                        char v215 = a2 - v214;
                        *v213++ = v215;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v107 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v108 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v109 = *v107;
                      v107 += 8;
                      char v110 = a2 - v109;
                      *v108++ = v110;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v216 = (unint64_t *)*((void *)a3 + 2);
                      unsigned int v217 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v218 = *v216++;
                        uint64_t v219 = a2 - v218;
                        if (a2 < v218) {
                          uint64_t v219 = 0LL;
                        }
                        *v217++ = v219;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v111 = (unint64_t *)*((void *)a3 + 2);
                    int v112 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v113 = *v111++;
                      uint64_t v114 = a2 - v113;
                      if (a2 < v113) {
                        uint64_t v114 = 0LL;
                      }
                      *v112++ = v114;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v139 = (unint64_t *)*((void *)a3 + 2);
                      unint64_t v140 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v141 = *v139++;
                        *v140++ = (double)a2 - (double)v141;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    uint64_t v34 = (unint64_t *)*((void *)a3 + 2);
                    uint64_t v35 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v36 = *v34++;
                      *v35++ = (double)a2 - (double)v36;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v160 = (double *)*((void *)a3 + 2);
                      unsigned int v161 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        double v162 = *v160++;
                        int v163 = a2 - (int)v162;
                        *v161++ = v163;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v55 = (double *)*((void *)a3 + 2);
                    __int128 v56 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      double v57 = *v55++;
                      int v58 = a2 - (int)v57;
                      *v56++ = v58;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v164 = (double *)*((void *)a3 + 2);
                      uint64_t v165 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        double v166 = *v164++;
                        unint64_t v167 = a2 - (unint64_t)v166;
                        *v165++ = v167;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v59 = (double *)*((void *)a3 + 2);
                    unint64_t v60 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v61 = *v59++;
                      unint64_t v62 = a2 - (unint64_t)v61;
                      *v60++ = v62;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v121 = (double *)*((void *)a3 + 2);
                      char v122 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v123 = *v121++;
                        *v122++ = (double)a2 - v123;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    size_t v16 = (double *)*((void *)a3 + 2);
                    uint64_t v17 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v18 = *v16++;
                      *v17++ = (double)a2 - v18;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
          }

          break;
        case 0:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v168 = (unsigned __int8 *)*((void *)a3 + 2);
                      unint64_t v169 = (_BYTE *)*((void *)a4 + 2);
                      unsigned int v170 = (int)*(double *)&a2;
                      do
                      {
                        unsigned int v171 = *v168++;
                        char v172 = v170 - v171;
                        if (v170 < v171) {
                          char v172 = 0;
                        }
                        *v169++ = v172;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    v63 = (unsigned __int8 *)*((void *)a3 + 2);
                    v64 = (_BYTE *)*((void *)a4 + 2);
                    unsigned int v65 = (int)*(double *)&a2;
                    do
                    {
                      unsigned int v66 = *v63++;
                      char v67 = v65 - v66;
                      if (v65 < v66) {
                        char v67 = 0;
                      }
                      *v64++ = v67;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v173 = (unsigned __int8 *)*((void *)a3 + 2);
                      unsigned int v174 = (unint64_t *)*((void *)a4 + 2);
                      unint64_t v175 = (unint64_t)*(double *)&a2;
                      do
                      {
                        unsigned int v176 = *v173++;
                        unint64_t v177 = v175 - v176;
                        if (v175 < v176) {
                          unint64_t v177 = 0LL;
                        }
                        *v174++ = v177;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    BOOL v68 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v69 = (unint64_t *)*((void *)a4 + 2);
                    unint64_t v70 = (unint64_t)*(double *)&a2;
                    do
                    {
                      unsigned int v71 = *v68++;
                      unint64_t v72 = v70 - v71;
                      if (v70 < v71) {
                        unint64_t v72 = 0LL;
                      }
                      *v69++ = v72;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v124 = (unsigned __int8 *)*((void *)a3 + 2);
                      v125 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v126 = *v124++;
                        *v125++ = *(double *)&a2 - (double)v126;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unsigned int v19 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v20 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v21 = *v19++;
                      *v20++ = *(double *)&a2 - (double)v21;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v178 = (unsigned __int8 *)*((void *)a3 + 2);
                      v179 = (_BYTE *)*((void *)a4 + 2);
                      unsigned int v180 = (int)*(double *)&a2;
                      do
                      {
                        unsigned int v181 = *v178;
                        v178 += 8;
                        char v182 = v180 - v181;
                        if (v180 < v181) {
                          char v182 = 0;
                        }
                        *v179++ = v182;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v73 = (unsigned __int8 *)*((void *)a3 + 2);
                    unint64_t v74 = (_BYTE *)*((void *)a4 + 2);
                    unsigned int v75 = (int)*(double *)&a2;
                    do
                    {
                      unsigned int v76 = *v73;
                      v73 += 8;
                      char v77 = v75 - v76;
                      if (v75 < v76) {
                        char v77 = 0;
                      }
                      *v74++ = v77;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v183 = (unint64_t *)*((void *)a3 + 2);
                      unint64_t v184 = (void *)*((void *)a4 + 2);
                      unint64_t v185 = (unint64_t)*(double *)&a2;
                      do
                      {
                        unint64_t v186 = *v183++;
                        uint64_t v187 = v185 - v186;
                        if (v185 < v186) {
                          uint64_t v187 = 0LL;
                        }
                        *v184++ = v187;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    char v78 = (unint64_t *)*((void *)a3 + 2);
                    double v79 = (void *)*((void *)a4 + 2);
                    unint64_t v80 = (unint64_t)*(double *)&a2;
                    do
                    {
                      unint64_t v81 = *v78++;
                      uint64_t v82 = v80 - v81;
                      if (v80 < v81) {
                        uint64_t v82 = 0LL;
                      }
                      *v79++ = v82;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v127 = (unint64_t *)*((void *)a3 + 2);
                      unint64_t v128 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v129 = *v127++;
                        *v128++ = *(double *)&a2 - (double)v129;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    BOOL v22 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v23 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v24 = *v22++;
                      *v23++ = *(double *)&a2 - (double)v24;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v142 = (double *)*((void *)a3 + 2);
                      unint64_t v143 = (_BYTE *)*((void *)a4 + 2);
                      unsigned int v144 = (int)*(double *)&a2;
                      do
                      {
                        double v145 = *v142++;
                        unsigned int v146 = v144 - (int)v145;
                        *v143++ = v146;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v37 = (double *)*((void *)a3 + 2);
                    unint64_t v38 = (_BYTE *)*((void *)a4 + 2);
                    unsigned int v39 = (int)*(double *)&a2;
                    do
                    {
                      double v40 = *v37++;
                      unsigned int v41 = v39 - (int)v40;
                      *v38++ = v41;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v147 = (double *)*((void *)a3 + 2);
                      unsigned int v148 = (unint64_t *)*((void *)a4 + 2);
                      unint64_t v149 = (unint64_t)*(double *)&a2;
                      do
                      {
                        double v150 = *v147++;
                        unint64_t v151 = v149 - (unint64_t)v150;
                        *v148++ = v151;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unsigned int v42 = (double *)*((void *)a3 + 2);
                    double v43 = (unint64_t *)*((void *)a4 + 2);
                    unint64_t v44 = (unint64_t)*(double *)&a2;
                    do
                    {
                      double v45 = *v42++;
                      unint64_t v46 = v44 - (unint64_t)v45;
                      *v43++ = v46;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v115 = (double *)*((void *)a3 + 2);
                      unint64_t v116 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v117 = *v115++;
                        *v116++ = *(double *)&a2 - v117;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v10 = (double *)*((void *)a3 + 2);
                    unint64_t v11 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v12 = *v10++;
                      *v11++ = *(double *)&a2 - v12;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
          }

          break;
      }

      return a4;
    }
  }

  return result;
}

int *agxps_timeseries_mul_tt(int *a1, int *a2, int *a3, int a4)
{
  uint64_t v4 = 0LL;
  if (a1 && a2 && a3)
  {
    if (!*((_BYTE *)a3 + 32) && (uint64_t v5 = *((void *)a1 + 1), v5 == *((void *)a2 + 1)) && v5 == *((void *)a3 + 1))
    {
      int v6 = *a1;
      int v7 = *a2;
      int v8 = *a3;
      if (*a1 == 2)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v275 = (char *)*((void *)a1 + 2);
                    unint64_t v276 = (char *)*((void *)a2 + 2);
                    double v277 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      char v279 = *v275++;
                      char v278 = v279;
                      char v280 = *v276++;
                      *v277++ = v280 * v278;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v119 = (char *)*((void *)a1 + 2);
                  double v120 = (char *)*((void *)a2 + 2);
                  unsigned int v121 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    char v123 = *v119++;
                    char v122 = v123;
                    char v124 = *v120++;
                    *v121++ = v124 * v122;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v281 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v282 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v283 = (void *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v285 = *v281++;
                      unsigned int v284 = v285;
                      unsigned int v286 = *v282++;
                      *v283++ = v286 * (unint64_t)v284;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v125 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v126 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v127 = (void *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v129 = *v125++;
                    unsigned int v128 = v129;
                    unsigned int v130 = *v126++;
                    *v127++ = v130 * (unint64_t)v128;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v195 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v196 = (unsigned __int8 *)*((void *)a2 + 2);
                    v197 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v198 = *v195++;
                      double v199 = (double)v198;
                      unsigned int v200 = *v196++;
                      *v197++ = v199 * (double)v200;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unsigned int v39 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v40 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v41 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v42 = *v39++;
                    double v43 = (double)v42;
                    unsigned int v44 = *v40++;
                    *v41++ = v43 * (double)v44;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v287 = (char *)*((void *)a1 + 2);
                    double v288 = (char *)*((void *)a2 + 2);
                    unint64_t v289 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      char v291 = *v287++;
                      char v290 = v291;
                      char v292 = *v288;
                      v288 += 8;
                      *v289++ = v290 * v292;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v131 = (char *)*((void *)a1 + 2);
                  unsigned int v132 = (char *)*((void *)a2 + 2);
                  unsigned int v133 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    char v135 = *v131++;
                    char v134 = v135;
                    char v136 = *v132;
                    v132 += 8;
                    *v133++ = v134 * v136;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v293 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v294 = (uint64_t *)*((void *)a2 + 2);
                    unsigned int v295 = (void *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v297 = *v293++;
                      uint64_t v296 = v297;
                      uint64_t v298 = *v294++;
                      *v295++ = v298 * v296;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v137 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v138 = (uint64_t *)*((void *)a2 + 2);
                  v139 = (void *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v141 = *v137++;
                    uint64_t v140 = v141;
                    uint64_t v142 = *v138++;
                    *v139++ = v142 * v140;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v201 = (unsigned __int8 *)*((void *)a1 + 2);
                    unint64_t v202 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v203 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v204 = *v201++;
                      double v205 = (double)v204;
                      unint64_t v206 = *v202++;
                      *v203++ = v205 * (double)v206;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v45 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v46 = (unint64_t *)*((void *)a2 + 2);
                  unint64_t v47 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v48 = *v45++;
                    double v49 = (double)v48;
                    unint64_t v50 = *v46++;
                    *v47++ = v49 * (double)v50;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v230 = (char *)*((void *)a1 + 2);
                    v231 = (double *)*((void *)a2 + 2);
                    v232 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      char v234 = *v230++;
                      char v233 = v234;
                      double v235 = *v231++;
                      *v232++ = v233 * (int)v235;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v74 = (char *)*((void *)a1 + 2);
                  unsigned int v75 = (double *)*((void *)a2 + 2);
                  unsigned int v76 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    char v78 = *v74++;
                    char v77 = v78;
                    double v79 = *v75++;
                    *v76++ = v77 * (int)v79;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v236 = (unsigned __int8 *)*((void *)a1 + 2);
                    v237 = (double *)*((void *)a2 + 2);
                    v238 = (void *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v240 = *v236++;
                      uint64_t v239 = v240;
                      double v241 = *v237++;
                      *v238++ = (unint64_t)v241 * v239;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v80 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v81 = (double *)*((void *)a2 + 2);
                  uint64_t v82 = (void *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v84 = *v80++;
                    uint64_t v83 = v84;
                    double v85 = *v81++;
                    *v82++ = (unint64_t)v85 * v83;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v172 = (unsigned __int8 *)*((void *)a1 + 2);
                    v173 = (double *)*((void *)a2 + 2);
                    unsigned int v174 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v175 = *v172++;
                      double v176 = (double)v175;
                      double v177 = *v173++;
                      *v174++ = v177 * v176;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  size_t v16 = (unsigned __int8 *)*((void *)a1 + 2);
                  uint64_t v17 = (double *)*((void *)a2 + 2);
                  double v18 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v19 = *v16++;
                    double v20 = (double)v19;
                    double v21 = *v17++;
                    *v18++ = v21 * v20;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
        }
      }

      else if (v6 == 1)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v299 = (char *)*((void *)a1 + 2);
                    double v300 = (char *)*((void *)a2 + 2);
                    unint64_t v301 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      char v303 = *v299;
                      v299 += 8;
                      char v302 = v303;
                      char v304 = *v300++;
                      *v301++ = v304 * v302;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v143 = (char *)*((void *)a1 + 2);
                  unsigned int v144 = (char *)*((void *)a2 + 2);
                  double v145 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    char v147 = *v143;
                    v143 += 8;
                    char v146 = v147;
                    char v148 = *v144++;
                    *v145++ = v148 * v146;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v305 = (uint64_t *)*((void *)a1 + 2);
                    v306 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v307 = (void *)*((void *)a3 + 2);
                    do
                    {
                      uint64_t v309 = *v305++;
                      uint64_t v308 = v309;
                      LODWORD(v309) = *v306++;
                      *v307++ = v308 * v309;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v149 = (uint64_t *)*((void *)a1 + 2);
                  double v150 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v151 = (void *)*((void *)a3 + 2);
                  do
                  {
                    uint64_t v153 = *v149++;
                    uint64_t v152 = v153;
                    LODWORD(v153) = *v150++;
                    *v151++ = v152 * v153;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v207 = (unint64_t *)*((void *)a1 + 2);
                    v208 = (unsigned __int8 *)*((void *)a2 + 2);
                    v209 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v210 = *v207++;
                      double v211 = (double)v210;
                      LODWORD(v210) = *v208++;
                      *v209++ = v211 * (double)v210;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  uint64_t v51 = (unint64_t *)*((void *)a1 + 2);
                  uint64_t v52 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v53 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v54 = *v51++;
                    double v55 = (double)v54;
                    LODWORD(v54) = *v52++;
                    *v53++ = v55 * (double)v54;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v310 = (char *)*((void *)a1 + 2);
                    v311 = (char *)*((void *)a2 + 2);
                    v312 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      char v314 = *v310;
                      v310 += 8;
                      char v313 = v314;
                      char v315 = *v311;
                      v311 += 8;
                      *v312++ = v315 * v313;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v154 = (char *)*((void *)a1 + 2);
                  int v155 = (char *)*((void *)a2 + 2);
                  unint64_t v156 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    char v158 = *v154;
                    v154 += 8;
                    char v157 = v158;
                    char v159 = *v155;
                    v155 += 8;
                    *v156++ = v159 * v157;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v316 = (uint64_t *)*((void *)a1 + 2);
                    unint64_t v317 = (uint64_t *)*((void *)a2 + 2);
                    v318 = (void *)*((void *)a3 + 2);
                    do
                    {
                      uint64_t v320 = *v316++;
                      uint64_t v319 = v320;
                      uint64_t v321 = *v317++;
                      *v318++ = v321 * v319;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v160 = (uint64_t *)*((void *)a1 + 2);
                  unsigned int v161 = (uint64_t *)*((void *)a2 + 2);
                  double v162 = (void *)*((void *)a3 + 2);
                  do
                  {
                    uint64_t v164 = *v160++;
                    uint64_t v163 = v164;
                    uint64_t v165 = *v161++;
                    *v162++ = v165 * v163;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v212 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v213 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v214 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v215 = *v212++;
                      unint64_t v216 = v215;
                      unint64_t v217 = *v213++;
                      *v214++ = (double)v216 * (double)v217;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  __int128 v56 = (unint64_t *)*((void *)a1 + 2);
                  double v57 = (unint64_t *)*((void *)a2 + 2);
                  int v58 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v59 = *v56++;
                    unint64_t v60 = v59;
                    unint64_t v61 = *v57++;
                    *v58++ = (double)v60 * (double)v61;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v242 = (char *)*((void *)a1 + 2);
                    unsigned int v243 = (double *)*((void *)a2 + 2);
                    v244 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      char v246 = *v242;
                      v242 += 8;
                      char v245 = v246;
                      double v247 = *v243++;
                      *v244++ = (int)v247 * v245;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  char v86 = (char *)*((void *)a1 + 2);
                  unint64_t v87 = (double *)*((void *)a2 + 2);
                  unsigned int v88 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    char v90 = *v86;
                    v86 += 8;
                    char v89 = v90;
                    double v91 = *v87++;
                    *v88++ = (int)v91 * v89;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v248 = (uint64_t *)*((void *)a1 + 2);
                    double v249 = (double *)*((void *)a2 + 2);
                    unint64_t v250 = (void *)*((void *)a3 + 2);
                    do
                    {
                      uint64_t v252 = *v248++;
                      uint64_t v251 = v252;
                      double v253 = *v249++;
                      *v250++ = v251 * (unint64_t)v253;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v92 = (uint64_t *)*((void *)a1 + 2);
                  unsigned int v93 = (double *)*((void *)a2 + 2);
                  char v94 = (void *)*((void *)a3 + 2);
                  do
                  {
                    uint64_t v96 = *v92++;
                    uint64_t v95 = v96;
                    double v97 = *v93++;
                    *v94++ = v95 * (unint64_t)v97;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v178 = (unint64_t *)*((void *)a1 + 2);
                    v179 = (double *)*((void *)a2 + 2);
                    unsigned int v180 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v181 = *v178++;
                      double v182 = (double)v181;
                      double v183 = *v179++;
                      *v180++ = v183 * v182;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  BOOL v22 = (unint64_t *)*((void *)a1 + 2);
                  unint64_t v23 = (double *)*((void *)a2 + 2);
                  unint64_t v24 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v25 = *v22++;
                    double v26 = (double)v25;
                    double v27 = *v23++;
                    *v24++ = v27 * v26;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
        }
      }

      else if (!v6)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v254 = (double *)*((void *)a1 + 2);
                    unsigned int v255 = (_BYTE *)*((void *)a2 + 2);
                    double v256 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      double v257 = *v254++;
                      int v258 = (int)v257;
                      LOBYTE(v257) = *v255++;
                      *v256++ = LOBYTE(v257) * v258;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v98 = (double *)*((void *)a1 + 2);
                  v99 = (_BYTE *)*((void *)a2 + 2);
                  v100 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    double v101 = *v98++;
                    int v102 = (int)v101;
                    LOBYTE(v101) = *v99++;
                    *v100++ = LOBYTE(v101) * v102;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v259 = (double *)*((void *)a1 + 2);
                    v260 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v261 = (void *)*((void *)a3 + 2);
                    do
                    {
                      double v262 = *v259++;
                      unint64_t v263 = (unint64_t)v262;
                      LODWORD(v262) = *v260++;
                      *v261++ = LODWORD(v262) * v263;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v103 = (double *)*((void *)a1 + 2);
                  unint64_t v104 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v105 = (void *)*((void *)a3 + 2);
                  do
                  {
                    double v106 = *v103++;
                    unint64_t v107 = (unint64_t)v106;
                    LODWORD(v106) = *v104++;
                    *v105++ = LODWORD(v106) * v107;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v184 = (double *)*((void *)a1 + 2);
                    unint64_t v185 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v186 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v187 = *v184++;
                      double v188 = v187;
                      LODWORD(v187) = *v185++;
                      *v186++ = v188 * (double)LODWORD(v187);
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v28 = (double *)*((void *)a1 + 2);
                  uint64_t v29 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v30 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v31 = *v28++;
                    double v32 = v31;
                    LODWORD(v31) = *v29++;
                    *v30++ = v32 * (double)LODWORD(v31);
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v264 = (double *)*((void *)a1 + 2);
                    v265 = (_BYTE *)*((void *)a2 + 2);
                    v266 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      double v267 = *v264++;
                      int v268 = (int)v267;
                      LOBYTE(v267) = *v265;
                      v265 += 8;
                      *v266++ = LOBYTE(v267) * v268;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v108 = (double *)*((void *)a1 + 2);
                  unsigned int v109 = (_BYTE *)*((void *)a2 + 2);
                  char v110 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    double v111 = *v108++;
                    int v112 = (int)v111;
                    LOBYTE(v111) = *v109;
                    v109 += 8;
                    *v110++ = LOBYTE(v111) * v112;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v269 = (double *)*((void *)a1 + 2);
                    double v270 = (uint64_t *)*((void *)a2 + 2);
                    unsigned int v271 = (void *)*((void *)a3 + 2);
                    do
                    {
                      double v272 = *v269++;
                      unint64_t v273 = (unint64_t)v272;
                      uint64_t v274 = *v270++;
                      *v271++ = v274 * v273;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v113 = (double *)*((void *)a1 + 2);
                  uint64_t v114 = (uint64_t *)*((void *)a2 + 2);
                  unint64_t v115 = (void *)*((void *)a3 + 2);
                  do
                  {
                    double v116 = *v113++;
                    unint64_t v117 = (unint64_t)v116;
                    uint64_t v118 = *v114++;
                    *v115++ = v118 * v117;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v189 = (double *)*((void *)a1 + 2);
                    unsigned int v190 = (unint64_t *)*((void *)a2 + 2);
                    char v191 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v192 = *v189++;
                      double v193 = v192;
                      unint64_t v194 = *v190++;
                      *v191++ = v193 * (double)v194;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unsigned int v33 = (double *)*((void *)a1 + 2);
                  uint64_t v34 = (unint64_t *)*((void *)a2 + 2);
                  uint64_t v35 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v36 = *v33++;
                    double v37 = v36;
                    unint64_t v38 = *v34++;
                    *v35++ = v37 * (double)v38;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v218 = (double *)*((void *)a1 + 2);
                    uint64_t v219 = (double *)*((void *)a2 + 2);
                    v220 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      double v221 = *v218++;
                      int v222 = (int)v221;
                      double v223 = *v219++;
                      *v220++ = (int)v223 * v222;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v62 = (double *)*((void *)a1 + 2);
                  v63 = (double *)*((void *)a2 + 2);
                  v64 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    double v65 = *v62++;
                    int v66 = (int)v65;
                    double v67 = *v63++;
                    *v64++ = (int)v67 * v66;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v224 = (double *)*((void *)a1 + 2);
                    unint64_t v225 = (double *)*((void *)a2 + 2);
                    v226 = (void *)*((void *)a3 + 2);
                    do
                    {
                      double v227 = *v224++;
                      unint64_t v228 = (unint64_t)v227;
                      double v229 = *v225++;
                      *v226++ = (unint64_t)v229 * v228;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  BOOL v68 = (double *)*((void *)a1 + 2);
                  unsigned int v69 = (double *)*((void *)a2 + 2);
                  unint64_t v70 = (void *)*((void *)a3 + 2);
                  do
                  {
                    double v71 = *v68++;
                    unint64_t v72 = (unint64_t)v71;
                    double v73 = *v69++;
                    *v70++ = (unint64_t)v73 * v72;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v166 = (double *)*((void *)a1 + 2);
                    unint64_t v167 = (double *)*((void *)a2 + 2);
                    unint64_t v168 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v169 = *v166++;
                      double v170 = v169;
                      double v171 = *v167++;
                      *v168++ = v170 * v171;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  int v9 = (double *)*((void *)a1 + 2);
                  unint64_t v10 = (double *)*((void *)a2 + 2);
                  unint64_t v11 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v12 = *v9++;
                    double v13 = v12;
                    double v14 = *v10++;
                    *v11++ = v13 * v14;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
        }
      }

      return a3;
    }

    else
    {
      return 0LL;
    }
  }

  return (int *)v4;
}

int *sub_D670(int a1, unint64_t a2, int *a3)
{
  int v6 = (int *)sub_AF84((uint64_t)a3, a1);
  return agxps_timeseries_mul_st(a1, a2, a3, v6, 1);
}

int *agxps_timeseries_mul_st(int a1, unint64_t a2, int *a3, int *a4, int a5)
{
  unint64_t result = 0LL;
  if (a3 && a4)
  {
    if (*((_BYTE *)a4 + 32)) {
      return 0LL;
    }
    uint64_t v7 = *((void *)a3 + 1);
    if (v7 != *((void *)a4 + 1))
    {
      return 0LL;
    }

    else
    {
      int v8 = *a3;
      int v9 = *a4;
      switch(a1)
      {
        case 2:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v148 = (char *)*((void *)a3 + 2);
                      unint64_t v149 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        char v150 = *v148++;
                        *v149++ = v150 * a2;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v67 = (char *)*((void *)a3 + 2);
                    BOOL v68 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      char v69 = *v67++;
                      *v68++ = v69 * a2;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v151 = (unsigned __int8 *)*((void *)a3 + 2);
                      uint64_t v152 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v153 = *v151++;
                        *v152++ = a2 * (unint64_t)v153;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v70 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v71 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v72 = *v70++;
                      *v71++ = a2 * (unint64_t)v72;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v106 = (unsigned __int8 *)*((void *)a3 + 2);
                      unint64_t v107 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v108 = *v106++;
                        *v107++ = (double)a2 * (double)v108;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v25 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v26 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v27 = *v25++;
                      *v26++ = (double)a2 * (double)v27;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v154 = (char *)*((void *)a3 + 2);
                      int v155 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        char v156 = *v154;
                        v154 += 8;
                        *v155++ = v156 * a2;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v73 = (char *)*((void *)a3 + 2);
                    unint64_t v74 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      char v75 = *v73;
                      v73 += 8;
                      *v74++ = v75 * a2;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v157 = (uint64_t *)*((void *)a3 + 2);
                      char v158 = (void *)*((void *)a4 + 2);
                      do
                      {
                        uint64_t v159 = *v157++;
                        *v158++ = v159 * a2;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unsigned int v76 = (uint64_t *)*((void *)a3 + 2);
                    char v77 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v78 = *v76++;
                      *v77++ = v78 * a2;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v109 = (unint64_t *)*((void *)a3 + 2);
                      char v110 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v111 = *v109++;
                        *v110++ = (double)a2 * (double)v111;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v28 = (unint64_t *)*((void *)a3 + 2);
                    uint64_t v29 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v30 = *v28++;
                      *v29++ = (double)a2 * (double)v30;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v124 = (double *)*((void *)a3 + 2);
                      v125 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        double v126 = *v124++;
                        *v125++ = (int)v126 * a2;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v43 = (double *)*((void *)a3 + 2);
                    unsigned int v44 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      double v45 = *v43++;
                      *v44++ = (int)v45 * a2;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v127 = (double *)*((void *)a3 + 2);
                      unsigned int v128 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v129 = *v127++;
                        *v128++ = a2 * (unint64_t)v129;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v46 = (double *)*((void *)a3 + 2);
                    unint64_t v47 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v48 = *v46++;
                      *v47++ = a2 * (unint64_t)v48;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v94 = (double *)*((void *)a3 + 2);
                      uint64_t v95 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v96 = *v94++;
                        *v95++ = v96 * (double)a2;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v13 = (double *)*((void *)a3 + 2);
                    double v14 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v15 = *v13++;
                      *v14++ = v15 * (double)a2;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
          }

          break;
        case 1:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v160 = (char *)*((void *)a3 + 2);
                      unsigned int v161 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        char v162 = *v160++;
                        *v161++ = v162 * a2;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v79 = (char *)*((void *)a3 + 2);
                    unint64_t v80 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      char v81 = *v79++;
                      *v80++ = v81 * a2;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      uint64_t v163 = (unsigned __int8 *)*((void *)a3 + 2);
                      uint64_t v164 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v165 = *v163++;
                        *v164++ = a2 * v165;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    uint64_t v82 = (unsigned __int8 *)*((void *)a3 + 2);
                    uint64_t v83 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v84 = *v82++;
                      *v83++ = a2 * v84;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      int v112 = (unsigned __int8 *)*((void *)a3 + 2);
                      unint64_t v113 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v114 = *v112++;
                        *v113++ = (double)a2 * (double)v114;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v31 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v32 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v33 = *v31++;
                      *v32++ = (double)a2 * (double)v33;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v166 = (char *)*((void *)a3 + 2);
                      unint64_t v167 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        char v168 = *v166;
                        v166 += 8;
                        *v167++ = v168 * a2;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v85 = (char *)*((void *)a3 + 2);
                    char v86 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      char v87 = *v85;
                      v85 += 8;
                      *v86++ = v87 * a2;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v169 = (uint64_t *)*((void *)a3 + 2);
                      double v170 = (void *)*((void *)a4 + 2);
                      do
                      {
                        uint64_t v171 = *v169++;
                        *v170++ = v171 * a2;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unsigned int v88 = (uint64_t *)*((void *)a3 + 2);
                    char v89 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v90 = *v88++;
                      *v89++ = v90 * a2;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v115 = (unint64_t *)*((void *)a3 + 2);
                      double v116 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v117 = *v115++;
                        *v116++ = (double)a2 * (double)v117;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    uint64_t v34 = (unint64_t *)*((void *)a3 + 2);
                    uint64_t v35 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v36 = *v34++;
                      *v35++ = (double)a2 * (double)v36;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v130 = (double *)*((void *)a3 + 2);
                      v131 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        double v132 = *v130++;
                        *v131++ = (int)v132 * a2;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v49 = (double *)*((void *)a3 + 2);
                    unint64_t v50 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      double v51 = *v49++;
                      *v50++ = (int)v51 * a2;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v133 = (double *)*((void *)a3 + 2);
                      char v134 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v135 = *v133++;
                        *v134++ = a2 * (unint64_t)v135;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    uint64_t v52 = (double *)*((void *)a3 + 2);
                    double v53 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v54 = *v52++;
                      *v53++ = a2 * (unint64_t)v54;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v97 = (double *)*((void *)a3 + 2);
                      unint64_t v98 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v99 = *v97++;
                        *v98++ = v99 * (double)a2;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    size_t v16 = (double *)*((void *)a3 + 2);
                    uint64_t v17 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v18 = *v16++;
                      *v17++ = v18 * (double)a2;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
          }

          break;
        case 0:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v136 = (char *)*((void *)a3 + 2);
                      v137 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        char v138 = *v136++;
                        *v137++ = v138 * (int)*(double *)&a2;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v55 = (char *)*((void *)a3 + 2);
                    __int128 v56 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      char v57 = *v55++;
                      *v56++ = v57 * (int)*(double *)&a2;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v139 = (unsigned __int8 *)*((void *)a3 + 2);
                      uint64_t v140 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v141 = *v139++;
                        *v140++ = v141 * (unint64_t)*(double *)&a2;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    int v58 = (unsigned __int8 *)*((void *)a3 + 2);
                    unint64_t v59 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v60 = *v58++;
                      *v59++ = v60 * (unint64_t)*(double *)&a2;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v100 = (unsigned __int8 *)*((void *)a3 + 2);
                      double v101 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v102 = *v100++;
                        *v101++ = *(double *)&a2 * (double)v102;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unsigned int v19 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v20 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v21 = *v19++;
                      *v20++ = *(double *)&a2 * (double)v21;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      uint64_t v142 = (char *)*((void *)a3 + 2);
                      unint64_t v143 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        char v144 = *v142;
                        v142 += 8;
                        *v143++ = v144 * (int)*(double *)&a2;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v61 = (char *)*((void *)a3 + 2);
                    unint64_t v62 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      char v63 = *v61;
                      v61 += 8;
                      *v62++ = v63 * (int)*(double *)&a2;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v145 = (uint64_t *)*((void *)a3 + 2);
                      char v146 = (void *)*((void *)a4 + 2);
                      do
                      {
                        uint64_t v147 = *v145++;
                        *v146++ = v147 * (unint64_t)*(double *)&a2;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    v64 = (uint64_t *)*((void *)a3 + 2);
                    double v65 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v66 = *v64++;
                      *v65++ = v66 * (unint64_t)*(double *)&a2;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v103 = (unint64_t *)*((void *)a3 + 2);
                      unint64_t v104 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v105 = *v103++;
                        *v104++ = *(double *)&a2 * (double)v105;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    BOOL v22 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v23 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v24 = *v22++;
                      *v23++ = *(double *)&a2 * (double)v24;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      uint64_t v118 = (double *)*((void *)a3 + 2);
                      v119 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        double v120 = *v118++;
                        *v119++ = (int)v120 * (int)*(double *)&a2;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v37 = (double *)*((void *)a3 + 2);
                    unint64_t v38 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      double v39 = *v37++;
                      *v38++ = (int)v39 * (int)*(double *)&a2;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v121 = (double *)*((void *)a3 + 2);
                      char v122 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v123 = *v121++;
                        *v122++ = (unint64_t)v123 * (unint64_t)*(double *)&a2;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v40 = (double *)*((void *)a3 + 2);
                    unsigned int v41 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v42 = *v40++;
                      *v41++ = (unint64_t)v42 * (unint64_t)*(double *)&a2;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v91 = (double *)*((void *)a3 + 2);
                      v92 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v93 = *v91++;
                        *v92++ = v93 * *(double *)&a2;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v10 = (double *)*((void *)a3 + 2);
                    unint64_t v11 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v12 = *v10++;
                      *v11++ = v12 * *(double *)&a2;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
          }

          break;
      }

      return a4;
    }
  }

  return result;
}

int *sub_E1D0(int *a1, int a2, unint64_t a3)
{
  int v6 = (int *)sub_AF84((uint64_t)a1, a2);
  return agxps_timeseries_mul_ts(a1, a2, a3, v6, 1);
}

int *agxps_timeseries_mul_ts(int *a1, int a2, unint64_t a3, int *a4, int a5)
{
  uint64_t v5 = 0LL;
  if (a1 && a4)
  {
    if (*((_BYTE *)a4 + 32)) {
      return 0LL;
    }
    uint64_t v6 = *((void *)a1 + 1);
    if (v6 != *((void *)a4 + 1))
    {
      return 0LL;
    }

    else
    {
      int v7 = *a1;
      int v8 = *a4;
      if (*a1 == 2)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v148 = (char *)*((void *)a1 + 2);
                    unint64_t v149 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      char v150 = *v148++;
                      *v149++ = v150 * a3;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v67 = (char *)*((void *)a1 + 2);
                  BOOL v68 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    char v69 = *v67++;
                    *v68++ = v69 * a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v151 = (unsigned __int8 *)*((void *)a1 + 2);
                    uint64_t v152 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v153 = *v151++;
                      *v152++ = a3 * (unint64_t)v153;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v70 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v71 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v72 = *v70++;
                    *v71++ = a3 * (unint64_t)v72;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v106 = (unsigned __int8 *)*((void *)a1 + 2);
                    unint64_t v107 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v108 = *v106++;
                      *v107++ = (double)a3 * (double)v108;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v25 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v26 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v27 = *v25++;
                    *v26++ = (double)a3 * (double)v27;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v154 = (char *)*((void *)a1 + 2);
                    int v155 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      char v156 = *v154++;
                      *v155++ = v156 * a3;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v73 = (char *)*((void *)a1 + 2);
                  unint64_t v74 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    char v75 = *v73++;
                    *v74++ = v75 * a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v157 = (unsigned __int8 *)*((void *)a1 + 2);
                    char v158 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v159 = *v157++;
                      *v158++ = a3 * v159;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unsigned int v76 = (unsigned __int8 *)*((void *)a1 + 2);
                  char v77 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v78 = *v76++;
                    *v77++ = a3 * v78;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v109 = (unsigned __int8 *)*((void *)a1 + 2);
                    char v110 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v111 = *v109++;
                      *v110++ = (double)a3 * (double)v111;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v28 = (unsigned __int8 *)*((void *)a1 + 2);
                  uint64_t v29 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v30 = *v28++;
                    *v29++ = (double)a3 * (double)v30;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v124 = (char *)*((void *)a1 + 2);
                    v125 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      char v126 = *v124++;
                      *v125++ = v126 * (int)*(double *)&a3;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v43 = (char *)*((void *)a1 + 2);
                  unsigned int v44 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    char v45 = *v43++;
                    *v44++ = v45 * (int)*(double *)&a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v127 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v128 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v129 = *v127++;
                      *v128++ = v129 * (unint64_t)*(double *)&a3;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v46 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v47 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v48 = *v46++;
                    *v47++ = v48 * (unint64_t)*(double *)&a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v94 = (unsigned __int8 *)*((void *)a1 + 2);
                    uint64_t v95 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v96 = *v94++;
                      *v95++ = *(double *)&a3 * (double)v96;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v13 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v14 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v15 = *v13++;
                    *v14++ = *(double *)&a3 * (double)v15;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
        }
      }

      else if (v7 == 1)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v160 = (char *)*((void *)a1 + 2);
                    unsigned int v161 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      char v162 = *v160;
                      v160 += 8;
                      *v161++ = v162 * a3;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v79 = (char *)*((void *)a1 + 2);
                  unint64_t v80 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    char v81 = *v79;
                    v79 += 8;
                    *v80++ = v81 * a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    uint64_t v163 = (uint64_t *)*((void *)a1 + 2);
                    uint64_t v164 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v165 = *v163++;
                      *v164++ = v165 * a3;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  uint64_t v82 = (uint64_t *)*((void *)a1 + 2);
                  uint64_t v83 = (void *)*((void *)a4 + 2);
                  do
                  {
                    uint64_t v84 = *v82++;
                    *v83++ = v84 * a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    int v112 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v113 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v114 = *v112++;
                      *v113++ = (double)a3 * (double)v114;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v31 = (unint64_t *)*((void *)a1 + 2);
                  double v32 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v33 = *v31++;
                    *v32++ = (double)a3 * (double)v33;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v166 = (char *)*((void *)a1 + 2);
                    unint64_t v167 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      char v168 = *v166;
                      v166 += 8;
                      *v167++ = v168 * a3;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v85 = (char *)*((void *)a1 + 2);
                  char v86 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    char v87 = *v85;
                    v85 += 8;
                    *v86++ = v87 * a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v169 = (uint64_t *)*((void *)a1 + 2);
                    double v170 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v171 = *v169++;
                      *v170++ = v171 * a3;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unsigned int v88 = (uint64_t *)*((void *)a1 + 2);
                  char v89 = (void *)*((void *)a4 + 2);
                  do
                  {
                    uint64_t v90 = *v88++;
                    *v89++ = v90 * a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v115 = (unint64_t *)*((void *)a1 + 2);
                    double v116 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v117 = *v115++;
                      *v116++ = (double)a3 * (double)v117;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  uint64_t v34 = (unint64_t *)*((void *)a1 + 2);
                  uint64_t v35 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v36 = *v34++;
                    *v35++ = (double)a3 * (double)v36;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v130 = (char *)*((void *)a1 + 2);
                    v131 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      char v132 = *v130;
                      v130 += 8;
                      *v131++ = v132 * (int)*(double *)&a3;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v49 = (char *)*((void *)a1 + 2);
                  unint64_t v50 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    char v51 = *v49;
                    v49 += 8;
                    *v50++ = v51 * (int)*(double *)&a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v133 = (uint64_t *)*((void *)a1 + 2);
                    char v134 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v135 = *v133++;
                      *v134++ = v135 * (unint64_t)*(double *)&a3;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  uint64_t v52 = (uint64_t *)*((void *)a1 + 2);
                  double v53 = (void *)*((void *)a4 + 2);
                  do
                  {
                    uint64_t v54 = *v52++;
                    *v53++ = v54 * (unint64_t)*(double *)&a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v97 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v98 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v99 = *v97++;
                      *v98++ = *(double *)&a3 * (double)v99;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  size_t v16 = (unint64_t *)*((void *)a1 + 2);
                  uint64_t v17 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v18 = *v16++;
                    *v17++ = *(double *)&a3 * (double)v18;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
        }
      }

      else if (!v7)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v136 = (double *)*((void *)a1 + 2);
                    v137 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      double v138 = *v136++;
                      *v137++ = (int)v138 * a3;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v55 = (double *)*((void *)a1 + 2);
                  __int128 v56 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    double v57 = *v55++;
                    *v56++ = (int)v57 * a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v139 = (double *)*((void *)a1 + 2);
                    uint64_t v140 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v141 = *v139++;
                      *v140++ = a3 * (unint64_t)v141;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  int v58 = (double *)*((void *)a1 + 2);
                  unint64_t v59 = (void *)*((void *)a4 + 2);
                  do
                  {
                    double v60 = *v58++;
                    *v59++ = a3 * (unint64_t)v60;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v100 = (double *)*((void *)a1 + 2);
                    double v101 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v102 = *v100++;
                      *v101++ = v102 * (double)a3;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unsigned int v19 = (double *)*((void *)a1 + 2);
                  double v20 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v21 = *v19++;
                    *v20++ = v21 * (double)a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    uint64_t v142 = (double *)*((void *)a1 + 2);
                    unint64_t v143 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      double v144 = *v142++;
                      *v143++ = (int)v144 * a3;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v61 = (double *)*((void *)a1 + 2);
                  unint64_t v62 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    double v63 = *v61++;
                    *v62++ = (int)v63 * a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v145 = (double *)*((void *)a1 + 2);
                    char v146 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v147 = *v145++;
                      *v146++ = a3 * (unint64_t)v147;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  v64 = (double *)*((void *)a1 + 2);
                  double v65 = (void *)*((void *)a4 + 2);
                  do
                  {
                    double v66 = *v64++;
                    *v65++ = a3 * (unint64_t)v66;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v103 = (double *)*((void *)a1 + 2);
                    unint64_t v104 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v105 = *v103++;
                      *v104++ = v105 * (double)a3;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  BOOL v22 = (double *)*((void *)a1 + 2);
                  unint64_t v23 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v24 = *v22++;
                    *v23++ = v24 * (double)a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    uint64_t v118 = (double *)*((void *)a1 + 2);
                    v119 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      double v120 = *v118++;
                      *v119++ = (int)v120 * (int)*(double *)&a3;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v37 = (double *)*((void *)a1 + 2);
                  unint64_t v38 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    double v39 = *v37++;
                    *v38++ = (int)v39 * (int)*(double *)&a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v121 = (double *)*((void *)a1 + 2);
                    char v122 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v123 = *v121++;
                      *v122++ = (unint64_t)v123 * (unint64_t)*(double *)&a3;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v40 = (double *)*((void *)a1 + 2);
                  unsigned int v41 = (void *)*((void *)a4 + 2);
                  do
                  {
                    double v42 = *v40++;
                    *v41++ = (unint64_t)v42 * (unint64_t)*(double *)&a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v91 = (double *)*((void *)a1 + 2);
                    v92 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v93 = *v91++;
                      *v92++ = v93 * *(double *)&a3;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  int v9 = (double *)*((void *)a1 + 2);
                  unint64_t v10 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v11 = *v9++;
                    *v10++ = v11 * *(double *)&a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
        }
      }

      return a4;
    }
  }

  return (int *)v5;
}

int *sub_ED24(int *a1, int *a2)
{
  uint64_t v4 = (int *)sub_AE60((uint64_t)a1, a2);
  return agxps_timeseries_div_tt(a1, a2, v4, 1);
}

int *agxps_timeseries_div_tt(int *a1, int *a2, int *a3, int a4)
{
  uint64_t v4 = 0LL;
  if (a1 && a2 && a3)
  {
    if (!*((_BYTE *)a3 + 32) && (uint64_t v5 = *((void *)a1 + 1), v5 == *((void *)a2 + 1)) && v5 == *((void *)a3 + 1))
    {
      int v6 = *a1;
      int v7 = *a2;
      int v8 = *a3;
      if (*a1 == 2)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v269 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v270 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v271 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v273 = *v270++;
                      unsigned int v272 = v273;
                      if (v273) {
                        unsigned int v272 = *v269 / v272;
                      }
                      *v271++ = v272;
                      ++v269;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v116 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v117 = (unsigned __int8 *)*((void *)a2 + 2);
                  uint64_t v118 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v120 = *v117++;
                    unsigned int v119 = v120;
                    if (v120) {
                      unsigned int v121 = *v116 / v119;
                    }
                    else {
                      LOBYTE(v121) = -1;
                    }
                    *v118++ = v121;
                    ++v116;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    uint64_t v274 = (unsigned __int8 *)*((void *)a1 + 2);
                    unint64_t v275 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v276 = (void *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v278 = *v275++;
                      unsigned int v277 = v278;
                      if (v278) {
                        uint64_t v279 = *v274 / v277;
                      }
                      else {
                        uint64_t v279 = 0LL;
                      }
                      *v276++ = v279;
                      ++v274;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  char v122 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v123 = (unsigned __int8 *)*((void *)a2 + 2);
                  char v124 = (uint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v126 = *v123++;
                    unsigned int v125 = v126;
                    if (v126) {
                      uint64_t v127 = *v122 / v125;
                    }
                    else {
                      uint64_t v127 = -1LL;
                    }
                    *v124++ = v127;
                    ++v122;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v198 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v199 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v200 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v201 = *v198++;
                      double v202 = (double)v201;
                      unsigned int v203 = *v199++;
                      double v204 = v202 / (double)v203;
                      if (!v203) {
                        double v204 = 0.0;
                      }
                      *v200++ = v204;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v39 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v40 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v41 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v42 = *v39++;
                    double v43 = (double)v42;
                    unsigned int v44 = *v40++;
                    *v41++ = v43 / (double)v44;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v280 = (unsigned __int8 *)*((void *)a1 + 2);
                    v281 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v282 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v284 = *v281;
                      v281 += 8;
                      unsigned int v283 = v284;
                      if (v284) {
                        unsigned int v283 = *v280 / v283;
                      }
                      *v282++ = v283;
                      ++v280;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unsigned int v128 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v129 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v130 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v132 = *v129;
                    v129 += 8;
                    unsigned int v131 = v132;
                    if (v132) {
                      unsigned int v133 = *v128 / v131;
                    }
                    else {
                      LOBYTE(v133) = -1;
                    }
                    *v130++ = v133;
                    ++v128;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v285 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v286 = (unint64_t *)*((void *)a2 + 2);
                    v287 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v289 = *v286++;
                      unint64_t v288 = v289;
                      if (v289) {
                        unint64_t v288 = *v285 / v288;
                      }
                      *v287++ = v288;
                      ++v285;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  char v134 = (unsigned __int8 *)*((void *)a1 + 2);
                  uint64_t v135 = (unint64_t *)*((void *)a2 + 2);
                  char v136 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v138 = *v135++;
                    unint64_t v137 = v138;
                    if (v138) {
                      unint64_t v139 = *v134 / v137;
                    }
                    else {
                      unint64_t v139 = -1LL;
                    }
                    *v136++ = v139;
                    ++v134;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v205 = (unsigned __int8 *)*((void *)a1 + 2);
                    unint64_t v206 = (unint64_t *)*((void *)a2 + 2);
                    char v207 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v208 = *v205++;
                      double v209 = (double)v208;
                      unint64_t v210 = *v206++;
                      double v211 = v209 / (double)v210;
                      if (!v210) {
                        double v211 = 0.0;
                      }
                      *v207++ = v211;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  char v45 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v46 = (unint64_t *)*((void *)a2 + 2);
                  unint64_t v47 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v48 = *v45++;
                    double v49 = (double)v48;
                    unint64_t v50 = *v46++;
                    *v47++ = v49 / (double)v50;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v233 = (unsigned __int8 *)*((void *)a1 + 2);
                    char v234 = (double *)*((void *)a2 + 2);
                    double v235 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v236 = (int)*v234;
                      if (v236) {
                        unsigned int v236 = *v233 / v236;
                      }
                      *v235++ = v236;
                      ++v233;
                      ++v234;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unsigned int v72 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v73 = (double *)*((void *)a2 + 2);
                  unint64_t v74 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v75 = (int)*v73;
                    if (v75) {
                      unsigned int v76 = *v72 / v75;
                    }
                    else {
                      LOBYTE(v76) = -1;
                    }
                    *v74++ = v76;
                    ++v72;
                    ++v73;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v237 = (unsigned __int8 *)*((void *)a1 + 2);
                    v238 = (double *)*((void *)a2 + 2);
                    uint64_t v239 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v240 = (unint64_t)*v238;
                      if (v240) {
                        unint64_t v240 = *v237 / v240;
                      }
                      *v239++ = v240;
                      ++v237;
                      ++v238;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  char v77 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v78 = (double *)*((void *)a2 + 2);
                  double v79 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v80 = (unint64_t)*v78;
                    if (v80) {
                      unint64_t v81 = *v77 / v80;
                    }
                    else {
                      unint64_t v81 = -1LL;
                    }
                    *v79++ = v81;
                    ++v77;
                    ++v78;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    uint64_t v171 = (unsigned __int8 *)*((void *)a1 + 2);
                    char v172 = (double *)*((void *)a2 + 2);
                    v173 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v174 = *v171++;
                      double v175 = (double)v174;
                      double v176 = *v172++;
                      double v177 = v175 / v176;
                      if (v176 == 0.0) {
                        double v177 = 0.0;
                      }
                      *v173++ = v177;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  size_t v16 = (unsigned __int8 *)*((void *)a1 + 2);
                  uint64_t v17 = (double *)*((void *)a2 + 2);
                  unint64_t v18 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v19 = *v16++;
                    double v20 = (double)v19;
                    double v21 = *v17++;
                    *v18++ = v20 / v21;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
        }
      }

      else if (v6 == 1)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v290 = (unsigned __int8 *)*((void *)a1 + 2);
                    char v291 = (unsigned __int8 *)*((void *)a2 + 2);
                    char v292 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v294 = *v291++;
                      unsigned int v293 = v294;
                      if (v294) {
                        unsigned int v293 = *v290 / v293;
                      }
                      *v292++ = v293;
                      v290 += 8;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  uint64_t v140 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v141 = (unsigned __int8 *)*((void *)a2 + 2);
                  uint64_t v142 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v144 = *v141++;
                    unsigned int v143 = v144;
                    if (v144) {
                      unsigned int v145 = *v140 / v143;
                    }
                    else {
                      LOBYTE(v145) = -1;
                    }
                    *v142++ = v145;
                    v140 += 8;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v295 = (void *)*((void *)a1 + 2);
                    uint64_t v296 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v297 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v299 = *v296++;
                      unint64_t v298 = v299;
                      if (v299) {
                        unint64_t v298 = *v295 / v298;
                      }
                      *v297++ = v298;
                      ++v295;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  char v146 = (void *)*((void *)a1 + 2);
                  double v147 = (unsigned __int8 *)*((void *)a2 + 2);
                  char v148 = (uint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v150 = *v147++;
                    unint64_t v149 = v150;
                    if (v150) {
                      uint64_t v151 = *v146 / v149;
                    }
                    else {
                      uint64_t v151 = -1LL;
                    }
                    *v148++ = v151;
                    ++v146;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v212 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v213 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v214 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v215 = *v212++;
                      double v216 = (double)v215;
                      LODWORD(v215) = *v213++;
                      double v217 = v216 / (double)v215;
                      if (!(_DWORD)v215) {
                        double v217 = 0.0;
                      }
                      *v214++ = v217;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  char v51 = (unint64_t *)*((void *)a1 + 2);
                  uint64_t v52 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v53 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v54 = *v51++;
                    double v55 = (double)v54;
                    LODWORD(v54) = *v52++;
                    *v53++ = v55 / (double)v54;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v300 = (unsigned __int8 *)*((void *)a1 + 2);
                    unint64_t v301 = (unsigned __int8 *)*((void *)a2 + 2);
                    char v302 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v304 = *v301;
                      v301 += 8;
                      unsigned int v303 = v304;
                      if (v304) {
                        unsigned int v303 = *v300 / v303;
                      }
                      *v302++ = v303;
                      v300 += 8;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  uint64_t v152 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v153 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v154 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v156 = *v153;
                    v153 += 8;
                    unsigned int v155 = v156;
                    if (v156) {
                      unsigned int v157 = *v152 / v155;
                    }
                    else {
                      LOBYTE(v157) = -1;
                    }
                    *v154++ = v157;
                    v152 += 8;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v305 = (void *)*((void *)a1 + 2);
                    v306 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v307 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v309 = *v306++;
                      unint64_t v308 = v309;
                      if (v309) {
                        unint64_t v308 = *v305 / v308;
                      }
                      *v307++ = v308;
                      ++v305;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  char v158 = (void *)*((void *)a1 + 2);
                  unsigned int v159 = (unint64_t *)*((void *)a2 + 2);
                  v160 = (uint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v162 = *v159++;
                    unint64_t v161 = v162;
                    if (v162) {
                      uint64_t v163 = *v158 / v161;
                    }
                    else {
                      uint64_t v163 = -1LL;
                    }
                    *v160++ = v163;
                    ++v158;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v218 = (unint64_t *)*((void *)a1 + 2);
                    uint64_t v219 = (unint64_t *)*((void *)a2 + 2);
                    v220 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v221 = *v218++;
                      double v222 = (double)v221;
                      unint64_t v223 = *v219++;
                      double v224 = v222 / (double)v223;
                      if (!v223) {
                        double v224 = 0.0;
                      }
                      *v220++ = v224;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  __int128 v56 = (unint64_t *)*((void *)a1 + 2);
                  double v57 = (unint64_t *)*((void *)a2 + 2);
                  int v58 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v59 = *v56++;
                    unint64_t v60 = v59;
                    unint64_t v61 = *v57++;
                    *v58++ = (double)v60 / (double)v61;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v241 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v242 = (double *)*((void *)a2 + 2);
                    unsigned int v243 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v244 = (int)*v242;
                      if (v244) {
                        unsigned int v244 = *v241 / v244;
                      }
                      *v243++ = v244;
                      v241 += 8;
                      ++v242;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  uint64_t v82 = (unsigned __int8 *)*((void *)a1 + 2);
                  uint64_t v83 = (double *)*((void *)a2 + 2);
                  uint64_t v84 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v85 = (int)*v83;
                    if (v85) {
                      unsigned int v86 = *v82 / v85;
                    }
                    else {
                      LOBYTE(v86) = -1;
                    }
                    *v84++ = v86;
                    v82 += 8;
                    ++v83;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v245 = (void *)*((void *)a1 + 2);
                    char v246 = (double *)*((void *)a2 + 2);
                    double v247 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v248 = (unint64_t)*v246;
                      if (v248) {
                        unint64_t v248 = *v245 / v248;
                      }
                      *v247++ = v248;
                      ++v245;
                      ++v246;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  char v87 = (void *)*((void *)a1 + 2);
                  unsigned int v88 = (double *)*((void *)a2 + 2);
                  char v89 = (uint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v90 = (unint64_t)*v88;
                    if (v90) {
                      uint64_t v91 = *v87 / v90;
                    }
                    else {
                      uint64_t v91 = -1LL;
                    }
                    *v89++ = v91;
                    ++v87;
                    ++v88;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v178 = (unint64_t *)*((void *)a1 + 2);
                    v179 = (double *)*((void *)a2 + 2);
                    unsigned int v180 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v181 = *v178++;
                      double v182 = (double)v181;
                      double v183 = *v179++;
                      double v184 = v182 / v183;
                      if (v183 == 0.0) {
                        double v184 = 0.0;
                      }
                      *v180++ = v184;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  BOOL v22 = (unint64_t *)*((void *)a1 + 2);
                  unint64_t v23 = (double *)*((void *)a2 + 2);
                  double v24 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v25 = *v22++;
                    double v26 = (double)v25;
                    double v27 = *v23++;
                    *v24++ = v26 / v27;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
        }
      }

      else if (!v6)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v249 = (double *)*((void *)a1 + 2);
                    unint64_t v250 = (unsigned __int8 *)*((void *)a2 + 2);
                    uint64_t v251 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v253 = *v250++;
                      unsigned int v252 = v253;
                      if (v253) {
                        unsigned int v252 = (int)*v249 / v252;
                      }
                      *v251++ = v252;
                      ++v249;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  v92 = (double *)*((void *)a1 + 2);
                  double v93 = (unsigned __int8 *)*((void *)a2 + 2);
                  char v94 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v96 = *v93++;
                    unsigned int v95 = v96;
                    if (v96) {
                      unsigned int v97 = (int)*v92 / v95;
                    }
                    else {
                      LOBYTE(v97) = -1;
                    }
                    *v94++ = v97;
                    ++v92;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v254 = (double *)*((void *)a1 + 2);
                    unsigned int v255 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v256 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v258 = *v255++;
                      unint64_t v257 = v258;
                      if (v258) {
                        unint64_t v257 = (unint64_t)*v254 / v257;
                      }
                      *v256++ = v257;
                      ++v254;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v98 = (double *)*((void *)a1 + 2);
                  unint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
                  v100 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v102 = *v99++;
                    unint64_t v101 = v102;
                    if (v102) {
                      unint64_t v103 = (unint64_t)*v98 / v101;
                    }
                    else {
                      unint64_t v103 = -1LL;
                    }
                    *v100++ = v103;
                    ++v98;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v185 = (double *)*((void *)a1 + 2);
                    unint64_t v186 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v187 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v188 = *v185++;
                      double v189 = v188;
                      LODWORD(v188) = *v186++;
                      double v190 = v189 / (double)LODWORD(v188);
                      if (!LODWORD(v188)) {
                        double v190 = 0.0;
                      }
                      *v187++ = v190;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v28 = (double *)*((void *)a1 + 2);
                  uint64_t v29 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v30 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v31 = *v28++;
                    double v32 = v31;
                    LODWORD(v31) = *v29++;
                    *v30++ = v32 / (double)LODWORD(v31);
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v259 = (double *)*((void *)a1 + 2);
                    v260 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v261 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v263 = *v260;
                      v260 += 8;
                      unsigned int v262 = v263;
                      if (v263) {
                        unsigned int v262 = (int)*v259 / v262;
                      }
                      *v261++ = v262;
                      ++v259;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v104 = (double *)*((void *)a1 + 2);
                  double v105 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v106 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v108 = *v105;
                    v105 += 8;
                    unsigned int v107 = v108;
                    if (v108) {
                      unsigned int v109 = (int)*v104 / v107;
                    }
                    else {
                      LOBYTE(v109) = -1;
                    }
                    *v106++ = v109;
                    ++v104;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v264 = (double *)*((void *)a1 + 2);
                    v265 = (unint64_t *)*((void *)a2 + 2);
                    v266 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v268 = *v265++;
                      unint64_t v267 = v268;
                      if (v268) {
                        unint64_t v267 = (unint64_t)*v264 / v267;
                      }
                      *v266++ = v267;
                      ++v264;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  char v110 = (double *)*((void *)a1 + 2);
                  unsigned int v111 = (uint64_t *)*((void *)a2 + 2);
                  int v112 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v114 = *v111++;
                    unint64_t v113 = v114;
                    if (v114) {
                      unint64_t v115 = (unint64_t)*v110 / v113;
                    }
                    else {
                      unint64_t v115 = -1LL;
                    }
                    *v112++ = v115;
                    ++v110;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    char v191 = (double *)*((void *)a1 + 2);
                    double v192 = (unint64_t *)*((void *)a2 + 2);
                    double v193 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v194 = *v191++;
                      double v195 = v194;
                      unint64_t v196 = *v192++;
                      double v197 = v195 / (double)v196;
                      if (!v196) {
                        double v197 = 0.0;
                      }
                      *v193++ = v197;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v33 = (double *)*((void *)a1 + 2);
                  uint64_t v34 = (unint64_t *)*((void *)a2 + 2);
                  uint64_t v35 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v36 = *v33++;
                    double v37 = v36;
                    unint64_t v38 = *v34++;
                    *v35++ = v37 / (double)v38;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v225 = (double *)*((void *)a1 + 2);
                    v226 = (double *)*((void *)a2 + 2);
                    double v227 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v228 = (int)*v226;
                      if (v228) {
                        unsigned int v228 = (int)*v225 / v228;
                      }
                      *v227++ = v228;
                      ++v225;
                      ++v226;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v62 = (double *)*((void *)a1 + 2);
                  double v63 = (double *)*((void *)a2 + 2);
                  v64 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v65 = (int)*v63;
                    if (v65) {
                      unsigned int v66 = (int)*v62 / v65;
                    }
                    else {
                      LOBYTE(v66) = -1;
                    }
                    *v64++ = v66;
                    ++v62;
                    ++v63;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v229 = (double *)*((void *)a1 + 2);
                    double v230 = (double *)*((void *)a2 + 2);
                    v231 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v232 = (unint64_t)*v230;
                      if (v232) {
                        unint64_t v232 = (unint64_t)*v229 / v232;
                      }
                      *v231++ = v232;
                      ++v229;
                      ++v230;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v67 = (double *)*((void *)a1 + 2);
                  BOOL v68 = (double *)*((void *)a2 + 2);
                  char v69 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v70 = (unint64_t)*v68;
                    if (v70) {
                      unint64_t v71 = (unint64_t)*v67 / v70;
                    }
                    else {
                      unint64_t v71 = -1LL;
                    }
                    *v69++ = v71;
                    ++v67;
                    ++v68;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    uint64_t v164 = (double *)*((void *)a1 + 2);
                    uint64_t v165 = (double *)*((void *)a2 + 2);
                    double v166 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v167 = *v164++;
                      double v168 = v167;
                      double v169 = *v165++;
                      double v170 = v168 / v169;
                      if (v169 == 0.0) {
                        double v170 = 0.0;
                      }
                      *v166++ = v170;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  int v9 = (double *)*((void *)a1 + 2);
                  unint64_t v10 = (double *)*((void *)a2 + 2);
                  double v11 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v12 = *v9++;
                    double v13 = v12;
                    double v14 = *v10++;
                    *v11++ = v13 / v14;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
        }
      }

      return a3;
    }

    else
    {
      return 0LL;
    }
  }

  return (int *)v4;
}

int *sub_FC4C(int *a1, int a2, unint64_t a3)
{
  int v6 = (int *)sub_AF84((uint64_t)a1, a2);
  return agxps_timeseries_div_ts(a1, a2, a3, v6, 1);
}

int *agxps_timeseries_div_ts(int *a1, int a2, unint64_t a3, int *a4, int a5)
{
  uint64_t v5 = 0LL;
  if (a1 && a4)
  {
    if (*((_BYTE *)a4 + 32)) {
      return 0LL;
    }
    uint64_t v6 = *((void *)a1 + 1);
    if (v6 != *((void *)a4 + 1))
    {
      return 0LL;
    }

    else
    {
      int v7 = *a1;
      int v8 = *a4;
      if (*a1 == 2)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v169 = (_BYTE *)*((void *)a1 + 2);
                    double v170 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3) {
                        char v171 = *v169 / a3;
                      }
                      else {
                        char v171 = 0;
                      }
                      *v170++ = v171;
                      ++v169;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v73 = (_BYTE *)*((void *)a1 + 2);
                  unint64_t v74 = (char *)*((void *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3) {
                      char v75 = *v73 / a3;
                    }
                    else {
                      char v75 = -1;
                    }
                    *v74++ = v75;
                    ++v73;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v172 = (unsigned __int8 *)*((void *)a1 + 2);
                    v173 = (void *)*((void *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3) {
                        uint64_t v174 = *v172 / a3;
                      }
                      else {
                        uint64_t v174 = 0LL;
                      }
                      *v173++ = v174;
                      ++v172;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unsigned int v76 = (unsigned __int8 *)*((void *)a1 + 2);
                  char v77 = (uint64_t *)*((void *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3) {
                      uint64_t v78 = *v76 / a3;
                    }
                    else {
                      uint64_t v78 = -1LL;
                    }
                    *v77++ = v78;
                    ++v76;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v117 = (unsigned __int8 *)*((void *)a1 + 2);
                    uint64_t v118 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v119 = *v117++;
                      double v120 = (double)v119 / (double)a3;
                      if (!(_BYTE)a3) {
                        double v120 = 0.0;
                      }
                      *v118++ = v120;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v25 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v26 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v27 = *v25++;
                    *v26++ = (double)v27 / (double)a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v175 = (_BYTE *)*((void *)a1 + 2);
                    double v176 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3) {
                        char v177 = *v175 / a3;
                      }
                      else {
                        char v177 = 0;
                      }
                      *v176++ = v177;
                      ++v175;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v79 = (_BYTE *)*((void *)a1 + 2);
                  unint64_t v80 = (char *)*((void *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3) {
                      char v81 = *v79 / a3;
                    }
                    else {
                      char v81 = -1;
                    }
                    *v80++ = v81;
                    ++v79;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v178 = (unsigned __int8 *)*((void *)a1 + 2);
                    v179 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      else {
                        unint64_t v180 = *v178 / a3;
                      }
                      *v179++ = v180;
                      ++v178;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  uint64_t v82 = (unsigned __int8 *)*((void *)a1 + 2);
                  uint64_t v83 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    else {
                      unint64_t v84 = *v82 / a3;
                    }
                    *v83++ = v84;
                    ++v82;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v121 = (unsigned __int8 *)*((void *)a1 + 2);
                    char v122 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v123 = *v121++;
                      double v124 = (double)v123 / (double)a3;
                      *v122++ = v124;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v28 = (unsigned __int8 *)*((void *)a1 + 2);
                  uint64_t v29 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v30 = *v28++;
                    *v29++ = (double)v30 / (double)a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v141 = (unsigned __int8 *)*((void *)a1 + 2);
                    uint64_t v142 = (_BYTE *)*((void *)a4 + 2);
                    unsigned int v143 = (int)*(double *)&a3;
                    do
                    {
                      if (v143) {
                        unsigned int v144 = *v141 / v143;
                      }
                      else {
                        LOBYTE(vstd::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v1 + 144) = 0;
                      }
                      *v142++ = v144;
                      ++v141;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  char v45 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v46 = (_BYTE *)*((void *)a4 + 2);
                  unsigned int v47 = (int)*(double *)&a3;
                  do
                  {
                    if (v47) {
                      unsigned int v48 = *v45 / v47;
                    }
                    else {
                      LOBYTE(v48) = -1;
                    }
                    *v46++ = v48;
                    ++v45;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v145 = (unsigned __int8 *)*((void *)a1 + 2);
                    char v146 = (unint64_t *)*((void *)a4 + 2);
                    unint64_t v147 = (unint64_t)*(double *)&a3;
                    do
                    {
                      if (v147) {
                        unint64_t v148 = *v145 / v147;
                      }
                      else {
                        unint64_t v148 = 0LL;
                      }
                      *v146++ = v148;
                      ++v145;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v49 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v50 = (unint64_t *)*((void *)a4 + 2);
                  unint64_t v51 = (unint64_t)*(double *)&a3;
                  do
                  {
                    if (v51) {
                      unint64_t v52 = *v49 / v51;
                    }
                    else {
                      unint64_t v52 = -1LL;
                    }
                    *v50++ = v52;
                    ++v49;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v101 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v102 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v103 = *v101++;
                      double v104 = (double)v103 / *(double *)&a3;
                      *v102++ = v104;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v13 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v14 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v15 = *v13++;
                    *v14++ = (double)v15 / *(double *)&a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
        }
      }

      else if (v7 == 1)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v181 = (_BYTE *)*((void *)a1 + 2);
                    double v182 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3) {
                        char v183 = *v181 / a3;
                      }
                      else {
                        char v183 = 0;
                      }
                      *v182++ = v183;
                      v181 += 8;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unsigned int v85 = (_BYTE *)*((void *)a1 + 2);
                  unsigned int v86 = (char *)*((void *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3) {
                      char v87 = *v85 / a3;
                    }
                    else {
                      char v87 = -1;
                    }
                    *v86++ = v87;
                    v85 += 8;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v184 = (void *)*((void *)a1 + 2);
                    unint64_t v185 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3) {
                        unint64_t v186 = *v184 / (unint64_t)a3;
                      }
                      else {
                        unint64_t v186 = 0LL;
                      }
                      *v185++ = v186;
                      ++v184;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unsigned int v88 = (void *)*((void *)a1 + 2);
                  char v89 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3) {
                      unint64_t v90 = *v88 / (unint64_t)a3;
                    }
                    else {
                      unint64_t v90 = -1LL;
                    }
                    *v89++ = v90;
                    ++v88;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v125 = (unint64_t *)*((void *)a1 + 2);
                    unsigned int v126 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v127 = *v125++;
                      double v128 = (double)v127 / (double)a3;
                      if (!(_BYTE)a3) {
                        double v128 = 0.0;
                      }
                      *v126++ = v128;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v31 = (unint64_t *)*((void *)a1 + 2);
                  double v32 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v33 = *v31++;
                    *v32++ = (double)v33 / (double)a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v187 = (_BYTE *)*((void *)a1 + 2);
                    double v188 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3) {
                        char v189 = *v187 / a3;
                      }
                      else {
                        char v189 = 0;
                      }
                      *v188++ = v189;
                      v187 += 8;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  uint64_t v91 = (_BYTE *)*((void *)a1 + 2);
                  v92 = (char *)*((void *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3) {
                      char v93 = *v91 / a3;
                    }
                    else {
                      char v93 = -1;
                    }
                    *v92++ = v93;
                    v91 += 8;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v190 = (void *)*((void *)a1 + 2);
                    char v191 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      else {
                        unint64_t v192 = *v190 / a3;
                      }
                      *v191++ = v192;
                      ++v190;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  char v94 = (void *)*((void *)a1 + 2);
                  unsigned int v95 = (uint64_t *)*((void *)a4 + 2);
                  do
                  {
                    else {
                      uint64_t v96 = *v94 / a3;
                    }
                    *v95++ = v96;
                    ++v94;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v129 = (unint64_t *)*((void *)a1 + 2);
                    unsigned int v130 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v131 = *v129++;
                      double v132 = (double)v131 / (double)a3;
                      *v130++ = v132;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  uint64_t v34 = (unint64_t *)*((void *)a1 + 2);
                  uint64_t v35 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v36 = *v34++;
                    *v35++ = (double)v36 / (double)a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v149 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v150 = (_BYTE *)*((void *)a4 + 2);
                    unsigned int v151 = (int)*(double *)&a3;
                    do
                    {
                      if (v151) {
                        unsigned int v152 = *v149 / v151;
                      }
                      else {
                        LOBYTE(v152) = 0;
                      }
                      *v150++ = v152;
                      v149 += 8;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v53 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v54 = (_BYTE *)*((void *)a4 + 2);
                  unsigned int v55 = (int)*(double *)&a3;
                  do
                  {
                    if (v55) {
                      unsigned int v56 = *v53 / v55;
                    }
                    else {
                      LOBYTE(vsub_4E2C(v1 + 56) = -1;
                    }
                    *v54++ = v56;
                    v53 += 8;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v153 = (void *)*((void *)a1 + 2);
                    double v154 = (unint64_t *)*((void *)a4 + 2);
                    unint64_t v155 = (unint64_t)*(double *)&a3;
                    do
                    {
                      if (v155) {
                        unint64_t v156 = *v153 / v155;
                      }
                      else {
                        unint64_t v156 = 0LL;
                      }
                      *v154++ = v156;
                      ++v153;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v57 = (void *)*((void *)a1 + 2);
                  int v58 = (uint64_t *)*((void *)a4 + 2);
                  unint64_t v59 = (unint64_t)*(double *)&a3;
                  do
                  {
                    if (v59) {
                      uint64_t v60 = *v57 / v59;
                    }
                    else {
                      uint64_t v60 = -1LL;
                    }
                    *v58++ = v60;
                    ++v57;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v105 = (unint64_t *)*((void *)a1 + 2);
                    double v106 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v107 = *v105++;
                      double v108 = (double)v107 / *(double *)&a3;
                      *v106++ = v108;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  size_t v16 = (unint64_t *)*((void *)a1 + 2);
                  uint64_t v17 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v18 = *v16++;
                    *v17++ = (double)v18 / *(double *)&a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
        }
      }

      else if (!v7)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v157 = (double *)*((void *)a1 + 2);
                    char v158 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3) {
                        unsigned int v159 = (int)*v157 / a3;
                      }
                      else {
                        LOBYTE(v159) = 0;
                      }
                      *v158++ = v159;
                      ++v157;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v61 = (double *)*((void *)a1 + 2);
                  unint64_t v62 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3) {
                      unsigned int v63 = (int)*v61 / a3;
                    }
                    else {
                      LOBYTE(v63) = -1;
                    }
                    *v62++ = v63;
                    ++v61;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v160 = (double *)*((void *)a1 + 2);
                    unint64_t v161 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3) {
                        unint64_t v162 = (unint64_t)*v160 / a3;
                      }
                      else {
                        unint64_t v162 = 0LL;
                      }
                      *v161++ = v162;
                      ++v160;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  v64 = (double *)*((void *)a1 + 2);
                  unsigned int v65 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3) {
                      unint64_t v66 = (unint64_t)*v64 / a3;
                    }
                    else {
                      unint64_t v66 = -1LL;
                    }
                    *v65++ = v66;
                    ++v64;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v109 = (double *)*((void *)a1 + 2);
                    char v110 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v111 = *v109++;
                      double v112 = v111 / (double)a3;
                      if (!(_BYTE)a3) {
                        double v112 = 0.0;
                      }
                      *v110++ = v112;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unsigned int v19 = (double *)*((void *)a1 + 2);
                  double v20 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v21 = *v19++;
                    *v20++ = v21 / (double)a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    uint64_t v163 = (double *)*((void *)a1 + 2);
                    uint64_t v164 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3) {
                        unsigned int v165 = (int)*v163 / a3;
                      }
                      else {
                        LOBYTE(v165) = 0;
                      }
                      *v164++ = v165;
                      ++v163;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v67 = (double *)*((void *)a1 + 2);
                  BOOL v68 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3) {
                      unsigned int v69 = (int)*v67 / a3;
                    }
                    else {
                      LOBYTE(v69) = -1;
                    }
                    *v68++ = v69;
                    ++v67;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v166 = (double *)*((void *)a1 + 2);
                    double v167 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      else {
                        unint64_t v168 = (unint64_t)*v166 / a3;
                      }
                      *v167++ = v168;
                      ++v166;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v70 = (double *)*((void *)a1 + 2);
                  unint64_t v71 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    else {
                      unint64_t v72 = (unint64_t)*v70 / a3;
                    }
                    *v71++ = v72;
                    ++v70;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v113 = (double *)*((void *)a1 + 2);
                    unint64_t v114 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v115 = *v113++;
                      double v116 = v115 / (double)a3;
                      *v114++ = v116;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  BOOL v22 = (double *)*((void *)a1 + 2);
                  unint64_t v23 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v24 = *v22++;
                    *v23++ = v24 / (double)a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v133 = (double *)*((void *)a1 + 2);
                    char v134 = (_BYTE *)*((void *)a4 + 2);
                    unsigned int v135 = (int)*(double *)&a3;
                    do
                    {
                      if (v135) {
                        unsigned int v136 = (int)*v133 / v135;
                      }
                      else {
                        LOBYTE(v136) = 0;
                      }
                      *v134++ = v136;
                      ++v133;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v37 = (double *)*((void *)a1 + 2);
                  unint64_t v38 = (_BYTE *)*((void *)a4 + 2);
                  unsigned int v39 = (int)*(double *)&a3;
                  do
                  {
                    if (v39) {
                      unsigned int v40 = (int)*v37 / v39;
                    }
                    else {
                      LOBYTE(v40) = -1;
                    }
                    *v38++ = v40;
                    ++v37;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v137 = (double *)*((void *)a1 + 2);
                    unint64_t v138 = (unint64_t *)*((void *)a4 + 2);
                    unint64_t v139 = (unint64_t)*(double *)&a3;
                    do
                    {
                      if (v139) {
                        unint64_t v140 = (unint64_t)*v137 / v139;
                      }
                      else {
                        unint64_t v140 = 0LL;
                      }
                      *v138++ = v140;
                      ++v137;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unsigned int v41 = (double *)*((void *)a1 + 2);
                  unsigned int v42 = (unint64_t *)*((void *)a4 + 2);
                  unint64_t v43 = (unint64_t)*(double *)&a3;
                  do
                  {
                    if (v43) {
                      unint64_t v44 = (unint64_t)*v41 / v43;
                    }
                    else {
                      unint64_t v44 = -1LL;
                    }
                    *v42++ = v44;
                    ++v41;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v97 = (double *)*((void *)a1 + 2);
                    unint64_t v98 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v99 = *v97++;
                      double v100 = v99 / *(double *)&a3;
                      *v98++ = v100;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  int v9 = (double *)*((void *)a1 + 2);
                  unint64_t v10 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v11 = *v9++;
                    *v10++ = v11 / *(double *)&a3;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
        }
      }

      return a4;
    }
  }

  return (int *)v5;
}

int *sub_10A94(int *a1, int *a2)
{
  uint64_t v4 = (int *)sub_AE60((uint64_t)a1, a2);
  return agxps_timeseries_min_tt(a1, a2, v4, 1);
}

int *agxps_timeseries_min_tt(int *a1, int *a2, int *a3, int a4)
{
  uint64_t v4 = 0LL;
  if (a1 && a2 && a3)
  {
    if (!*((_BYTE *)a3 + 32) && (uint64_t v5 = *((void *)a1 + 1), v5 == *((void *)a2 + 1)) && v5 == *((void *)a3 + 1))
    {
      int v6 = *a1;
      int v7 = *a2;
      int v8 = *a3;
      if (*a1 == 2)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v325 = (unsigned __int8 *)*((void *)a1 + 2);
                    v326 = (unsigned __int8 *)*((void *)a2 + 2);
                    v327 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v329 = *v325++;
                      unsigned int v328 = v329;
                      unsigned int v331 = *v326++;
                      char v330 = v331;
                      if (v328 >= v331) {
                        LOBYTE(v328) = v330;
                      }
                      *v327++ = v328;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v140 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v141 = (unsigned __int8 *)*((void *)a2 + 2);
                  uint64_t v142 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v144 = *v140++;
                    unsigned int v143 = v144;
                    unsigned int v146 = *v141++;
                    char v145 = v146;
                    if (v143 >= v146) {
                      LOBYTE(v143) = v145;
                    }
                    *v142++ = v143;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v332 = (unsigned __int8 *)*((void *)a1 + 2);
                    v333 = (unsigned __int8 *)*((void *)a2 + 2);
                    v334 = (void *)*((void *)a3 + 2);
                    do
                    {
                      int v336 = *v332++;
                      LODWORD(v335) = v336;
                      unsigned int v338 = *v333++;
                      unsigned int v337 = v338;
                      else {
                        uint64_t v335 = v335;
                      }
                      *v334++ = v335;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v147 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v148 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v149 = (void *)*((void *)a3 + 2);
                  do
                  {
                    int v151 = *v147++;
                    LODWORD(v150) = v151;
                    unsigned int v153 = *v148++;
                    unsigned int v152 = v153;
                    else {
                      uint64_t v150 = v150;
                    }
                    *v149++ = v150;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v230 = (unsigned __int8 *)*((void *)a1 + 2);
                    v231 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v232 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v233 = *v230++;
                      double v234 = (double)v233;
                      unsigned int v235 = *v231++;
                      double v236 = (double)v235;
                      *v232++ = v234;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  char v45 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v46 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v47 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v48 = *v45++;
                    double v49 = (double)v48;
                    unsigned int v50 = *v46++;
                    double v51 = (double)v50;
                    *v47++ = v49;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v339 = (unsigned __int8 *)*((void *)a1 + 2);
                    v340 = (unsigned __int8 *)*((void *)a2 + 2);
                    v341 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v343 = *v339++;
                      unsigned int v342 = v343;
                      unsigned int v345 = *v340;
                      v340 += 8;
                      char v344 = v345;
                      if (v342 >= v345) {
                        LOBYTE(v342) = v344;
                      }
                      *v341++ = v342;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v154 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v155 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v156 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v158 = *v154++;
                    unsigned int v157 = v158;
                    unsigned int v160 = *v155;
                    v155 += 8;
                    char v159 = v160;
                    if (v157 >= v160) {
                      LOBYTE(v157) = v159;
                    }
                    *v156++ = v157;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v346 = (unsigned __int8 *)*((void *)a1 + 2);
                    v347 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v348 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v350 = *v346++;
                      unint64_t v349 = v350;
                      unint64_t v352 = *v347++;
                      unint64_t v351 = v352;
                      if (v349 >= v352) {
                        unint64_t v349 = v351;
                      }
                      *v348++ = v349;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v161 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v162 = (unint64_t *)*((void *)a2 + 2);
                  uint64_t v163 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v165 = *v161++;
                    unint64_t v164 = v165;
                    unint64_t v167 = *v162++;
                    unint64_t v166 = v167;
                    if (v164 >= v167) {
                      unint64_t v164 = v166;
                    }
                    *v163++ = v164;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v237 = (unsigned __int8 *)*((void *)a1 + 2);
                    v238 = (unint64_t *)*((void *)a2 + 2);
                    uint64_t v239 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v240 = *v237++;
                      double v241 = (double)v240;
                      unint64_t v242 = *v238++;
                      double v243 = (double)v242;
                      *v239++ = v241;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v52 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v53 = (unint64_t *)*((void *)a2 + 2);
                  unint64_t v54 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v55 = *v52++;
                    double v56 = (double)v55;
                    unint64_t v57 = *v53++;
                    double v58 = (double)v57;
                    *v54++ = v56;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v272 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v273 = (double *)*((void *)a2 + 2);
                    uint64_t v274 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v276 = *v272++;
                      unsigned int v275 = v276;
                      double v277 = *v273++;
                      int v278 = (int)v277;
                      *v274++ = v275;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  char v87 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v88 = (double *)*((void *)a2 + 2);
                  char v89 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v91 = *v87++;
                    unsigned int v90 = v91;
                    double v92 = *v88++;
                    int v93 = (int)v92;
                    *v89++ = v90;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    uint64_t v279 = (unsigned __int8 *)*((void *)a1 + 2);
                    char v280 = (double *)*((void *)a2 + 2);
                    v281 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v283 = *v279++;
                      unint64_t v282 = v283;
                      double v284 = *v280++;
                      unint64_t v285 = (unint64_t)v284;
                      *v281++ = v282;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  char v94 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v95 = (double *)*((void *)a2 + 2);
                  uint64_t v96 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v98 = *v94++;
                    unint64_t v97 = v98;
                    double v99 = *v95++;
                    unint64_t v100 = (unint64_t)v99;
                    *v96++ = v97;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v202 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v203 = (double *)*((void *)a2 + 2);
                    double v204 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v205 = *v202++;
                      double v206 = (double)v205;
                      double v207 = *v203++;
                      double v208 = v207;
                      if (v207 <= v206) {
                        double v206 = v208;
                      }
                      *v204++ = v206;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  uint64_t v17 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v18 = (double *)*((void *)a2 + 2);
                  unsigned int v19 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v20 = *v17++;
                    double v21 = (double)v20;
                    double v22 = *v18++;
                    double v23 = v22;
                    if (v22 <= v21) {
                      double v21 = v23;
                    }
                    *v19++ = v21;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
        }
      }

      else if (v6 == 1)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v353 = (unsigned __int8 *)*((void *)a1 + 2);
                    v354 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v355 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v357 = *v353;
                      v353 += 8;
                      unsigned int v356 = v357;
                      unsigned int v359 = *v354++;
                      char v358 = v359;
                      if (v356 >= v359) {
                        LOBYTE(v3sub_4E2C(v1 + 56) = v358;
                      }
                      *v355++ = v356;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v168 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v169 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v170 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v172 = *v168;
                    v168 += 8;
                    unsigned int v171 = v172;
                    unsigned int v174 = *v169++;
                    char v173 = v174;
                    if (v171 >= v174) {
                      LOBYTE(v171) = v173;
                    }
                    *v170++ = v171;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v360 = (unint64_t *)*((void *)a1 + 2);
                    v361 = (unsigned __int8 *)*((void *)a2 + 2);
                    v362 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v364 = *v360++;
                      unint64_t v363 = v364;
                      LODWORD(v364) = *v361++;
                      unint64_t v365 = v364;
                      *v362++ = v363;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v175 = (unint64_t *)*((void *)a1 + 2);
                  double v176 = (unsigned __int8 *)*((void *)a2 + 2);
                  char v177 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v179 = *v175++;
                    unint64_t v178 = v179;
                    LODWORD(v179) = *v176++;
                    unint64_t v180 = v179;
                    *v177++ = v178;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v244 = (unint64_t *)*((void *)a1 + 2);
                    char v245 = (unsigned __int8 *)*((void *)a2 + 2);
                    char v246 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v247 = *v244++;
                      unint64_t v248 = v247;
                      LODWORD(v247) = *v245++;
                      double v249 = (double)v247;
                      double v250 = (double)v248;
                      *v246++ = v250;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v59 = (unint64_t *)*((void *)a1 + 2);
                  uint64_t v60 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v61 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v62 = *v59++;
                    unint64_t v63 = v62;
                    LODWORD(v62) = *v60++;
                    double v64 = (double)v62;
                    double v65 = (double)v63;
                    *v61++ = v65;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v366 = (unsigned __int8 *)*((void *)a1 + 2);
                    v367 = (unsigned __int8 *)*((void *)a2 + 2);
                    v368 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v370 = *v366;
                      v366 += 8;
                      unsigned int v369 = v370;
                      unsigned int v372 = *v367;
                      v367 += 8;
                      char v371 = v372;
                      if (v369 >= v372) {
                        LOBYTE(v369) = v371;
                      }
                      *v368++ = v369;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v181 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v182 = (unsigned __int8 *)*((void *)a2 + 2);
                  char v183 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v185 = *v181;
                    v181 += 8;
                    unsigned int v184 = v185;
                    unsigned int v187 = *v182;
                    v182 += 8;
                    char v186 = v187;
                    if (v184 >= v187) {
                      LOBYTE(v184) = v186;
                    }
                    *v183++ = v184;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v373 = (unint64_t *)*((void *)a1 + 2);
                    v374 = (unint64_t *)*((void *)a2 + 2);
                    v375 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v377 = *v373++;
                      unint64_t v376 = v377;
                      unint64_t v379 = *v374++;
                      unint64_t v378 = v379;
                      if (v376 >= v379) {
                        unint64_t v376 = v378;
                      }
                      *v375++ = v376;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v188 = (unint64_t *)*((void *)a1 + 2);
                  char v189 = (unint64_t *)*((void *)a2 + 2);
                  double v190 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v192 = *v188++;
                    unint64_t v191 = v192;
                    unint64_t v194 = *v189++;
                    unint64_t v193 = v194;
                    if (v191 >= v194) {
                      unint64_t v191 = v193;
                    }
                    *v190++ = v191;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    uint64_t v251 = (unint64_t *)*((void *)a1 + 2);
                    unsigned int v252 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v253 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v254 = *v251++;
                      double v255 = (double)v254;
                      unint64_t v256 = *v252++;
                      double v257 = (double)v256;
                      *v253++ = v255;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v66 = (unint64_t *)*((void *)a1 + 2);
                  double v67 = (unint64_t *)*((void *)a2 + 2);
                  BOOL v68 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v69 = *v66++;
                    double v70 = (double)v69;
                    unint64_t v71 = *v67++;
                    double v72 = (double)v71;
                    *v68++ = v70;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v286 = (unsigned __int8 *)*((void *)a1 + 2);
                    v287 = (double *)*((void *)a2 + 2);
                    unint64_t v288 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v290 = *v286;
                      v286 += 8;
                      unsigned int v289 = v290;
                      double v291 = *v287++;
                      int v292 = (int)v291;
                      *v288++ = v289;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v101 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v102 = (double *)*((void *)a2 + 2);
                  unsigned int v103 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v105 = *v101;
                    v101 += 8;
                    unsigned int v104 = v105;
                    double v106 = *v102++;
                    int v107 = (int)v106;
                    *v103++ = v104;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v293 = (unint64_t *)*((void *)a1 + 2);
                    unsigned int v294 = (double *)*((void *)a2 + 2);
                    unsigned int v295 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v297 = *v293++;
                      unint64_t v296 = v297;
                      double v298 = *v294++;
                      unint64_t v299 = (unint64_t)v298;
                      *v295++ = v296;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v108 = (unint64_t *)*((void *)a1 + 2);
                  unsigned int v109 = (double *)*((void *)a2 + 2);
                  char v110 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v112 = *v108++;
                    unint64_t v111 = v112;
                    double v113 = *v109++;
                    unint64_t v114 = (unint64_t)v113;
                    *v110++ = v111;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v209 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v210 = (double *)*((void *)a2 + 2);
                    double v211 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v212 = *v209++;
                      unint64_t v213 = v212;
                      double v214 = *v210++;
                      double v215 = v214;
                      double v216 = (double)v213;
                      if (v214 <= v216) {
                        double v216 = v215;
                      }
                      *v211++ = v216;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v24 = (unint64_t *)*((void *)a1 + 2);
                  unint64_t v25 = (double *)*((void *)a2 + 2);
                  double v26 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v27 = *v24++;
                    unint64_t v28 = v27;
                    double v29 = *v25++;
                    double v30 = v29;
                    double v31 = (double)v28;
                    if (v29 <= v31) {
                      double v31 = v30;
                    }
                    *v26++ = v31;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
        }
      }

      else if (!v6)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v300 = (double *)*((void *)a1 + 2);
                    unint64_t v301 = (unsigned __int8 *)*((void *)a2 + 2);
                    char v302 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      double v303 = *v300++;
                      unsigned int v304 = (int)v303;
                      LODWORD(v303) = *v301++;
                      char v305 = LOBYTE(v303);
                      if (v304 >= LODWORD(v303)) {
                        LOBYTE(v304) = v305;
                      }
                      *v302++ = v304;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v115 = (double *)*((void *)a1 + 2);
                  double v116 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v117 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    double v118 = *v115++;
                    unsigned int v119 = (int)v118;
                    LODWORD(v118) = *v116++;
                    char v120 = LOBYTE(v118);
                    if (v119 >= LODWORD(v118)) {
                      LOBYTE(v119) = v120;
                    }
                    *v117++ = v119;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v306 = (double *)*((void *)a1 + 2);
                    unsigned int v307 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v308 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      double v309 = *v306++;
                      unint64_t v310 = (unint64_t)v309;
                      LODWORD(v309) = *v307++;
                      unint64_t v311 = LODWORD(v309);
                      if (v310 >= LODWORD(v309)) {
                        unint64_t v310 = v311;
                      }
                      *v308++ = v310;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unsigned int v121 = (double *)*((void *)a1 + 2);
                  char v122 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v123 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    double v124 = *v121++;
                    unint64_t v125 = (unint64_t)v124;
                    LODWORD(v124) = *v122++;
                    unint64_t v126 = LODWORD(v124);
                    if (v125 >= LODWORD(v124)) {
                      unint64_t v125 = v126;
                    }
                    *v123++ = v125;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v217 = (double *)*((void *)a1 + 2);
                    unint64_t v218 = (unsigned __int8 *)*((void *)a2 + 2);
                    uint64_t v219 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v220 = *v217++;
                      double v221 = v220;
                      LODWORD(v220) = *v218++;
                      double v222 = (double)LODWORD(v220);
                      *v219++ = v221;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v32 = (double *)*((void *)a1 + 2);
                  unint64_t v33 = (unsigned __int8 *)*((void *)a2 + 2);
                  uint64_t v34 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v35 = *v32++;
                    double v36 = v35;
                    LODWORD(v35) = *v33++;
                    double v37 = (double)LODWORD(v35);
                    *v34++ = v36;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v312 = (double *)*((void *)a1 + 2);
                    char v313 = (unsigned __int8 *)*((void *)a2 + 2);
                    char v314 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      double v315 = *v312++;
                      unsigned int v316 = (int)v315;
                      LODWORD(v315) = *v313;
                      v313 += 8;
                      char v317 = LOBYTE(v315);
                      if (v316 >= LODWORD(v315)) {
                        LOBYTE(v3sub_4B28(v1 + 16) = v317;
                      }
                      *v314++ = v316;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v127 = (double *)*((void *)a1 + 2);
                  double v128 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v129 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    double v130 = *v127++;
                    unsigned int v131 = (int)v130;
                    LODWORD(v130) = *v128;
                    v128 += 8;
                    char v132 = LOBYTE(v130);
                    if (v131 >= LODWORD(v130)) {
                      LOBYTE(v131) = v132;
                    }
                    *v129++ = v131;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v318 = (double *)*((void *)a1 + 2);
                    uint64_t v319 = (unint64_t *)*((void *)a2 + 2);
                    uint64_t v320 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      double v321 = *v318++;
                      unint64_t v322 = (unint64_t)v321;
                      unint64_t v324 = *v319++;
                      unint64_t v323 = v324;
                      if (v322 >= v324) {
                        unint64_t v322 = v323;
                      }
                      *v320++ = v322;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unsigned int v133 = (double *)*((void *)a1 + 2);
                  char v134 = (unint64_t *)*((void *)a2 + 2);
                  unsigned int v135 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    double v136 = *v133++;
                    unint64_t v137 = (unint64_t)v136;
                    unint64_t v139 = *v134++;
                    unint64_t v138 = v139;
                    if (v137 >= v139) {
                      unint64_t v137 = v138;
                    }
                    *v135++ = v137;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v223 = (double *)*((void *)a1 + 2);
                    double v224 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v225 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v226 = *v223++;
                      double v227 = v226;
                      unint64_t v228 = *v224++;
                      double v229 = (double)v228;
                      *v225++ = v227;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v38 = (double *)*((void *)a1 + 2);
                  unsigned int v39 = (unint64_t *)*((void *)a2 + 2);
                  unsigned int v40 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v41 = *v38++;
                    double v42 = v41;
                    unint64_t v43 = *v39++;
                    double v44 = (double)v43;
                    *v40++ = v42;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v258 = (double *)*((void *)a1 + 2);
                    v259 = (double *)*((void *)a2 + 2);
                    v260 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      double v261 = *v258++;
                      unsigned int v262 = (int)v261;
                      double v263 = *v259++;
                      int v264 = (int)v263;
                      *v260++ = v262;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v73 = (double *)*((void *)a1 + 2);
                  unint64_t v74 = (double *)*((void *)a2 + 2);
                  char v75 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    double v76 = *v73++;
                    unsigned int v77 = (int)v76;
                    double v78 = *v74++;
                    int v79 = (int)v78;
                    *v75++ = v77;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v265 = (double *)*((void *)a1 + 2);
                    v266 = (double *)*((void *)a2 + 2);
                    unint64_t v267 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      double v268 = *v265++;
                      unint64_t v269 = (unint64_t)v268;
                      double v270 = *v266++;
                      unint64_t v271 = (unint64_t)v270;
                      *v267++ = v269;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v80 = (double *)*((void *)a1 + 2);
                  char v81 = (double *)*((void *)a2 + 2);
                  uint64_t v82 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    double v83 = *v80++;
                    unint64_t v84 = (unint64_t)v83;
                    double v85 = *v81++;
                    unint64_t v86 = (unint64_t)v85;
                    *v82++ = v84;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v195 = (double *)*((void *)a1 + 2);
                    unint64_t v196 = (double *)*((void *)a2 + 2);
                    double v197 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v198 = *v195++;
                      double v199 = v198;
                      double v200 = *v196++;
                      double v201 = v200;
                      if (v199 >= v200) {
                        double v199 = v201;
                      }
                      *v197++ = v199;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  int v9 = (double *)*((void *)a1 + 2);
                  unint64_t v10 = (double *)*((void *)a2 + 2);
                  double v11 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v12 = *v9++;
                    double v13 = v12;
                    double v14 = *v10++;
                    double v15 = v14;
                    if (v13 >= v14) {
                      double v13 = v15;
                    }
                    *v11++ = v13;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
        }
      }

      return a3;
    }

    else
    {
      return 0LL;
    }
  }

  return (int *)v4;
}

int *sub_11840(int *a1, int a2, unint64_t a3)
{
  int v6 = (int *)sub_AF84((uint64_t)a1, a2);
  return agxps_timeseries_min_ts(a1, a2, a3, v6, 1);
}

int *agxps_timeseries_min_ts(int *a1, int a2, unint64_t a3, int *a4, int a5)
{
  uint64_t v5 = 0LL;
  if (a1 && a4)
  {
    if (*((_BYTE *)a4 + 32)) {
      return 0LL;
    }
    uint64_t v6 = *((void *)a1 + 1);
    if (v6 != *((void *)a4 + 1))
    {
      return 0LL;
    }

    else
    {
      int v7 = *a1;
      int v8 = *a4;
      if (*a1 == 2)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v194 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v195 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v197 = *v194++;
                      char v196 = v197;
                      *v195++ = v196;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v86 = (unsigned __int8 *)*((void *)a1 + 2);
                  char v87 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v89 = *v86++;
                    char v88 = v89;
                    *v87++ = v88;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v198 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v199 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v201 = *v198++;
                      uint64_t v200 = v201;
                      *v199++ = v200;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unsigned int v90 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v91 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v93 = *v90++;
                    uint64_t v92 = v93;
                    *v91++ = v92;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v138 = (unsigned __int8 *)*((void *)a1 + 2);
                    unint64_t v139 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v140 = *v138++;
                      double v141 = (double)v140;
                      *v139++ = v141;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v30 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v31 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v32 = *v30++;
                    double v33 = (double)v32;
                    *v31++ = v33;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v202 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v203 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v205 = *v202++;
                      char v204 = v205;
                      *v203++ = v204;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  char v94 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v95 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v97 = *v94++;
                    char v96 = v97;
                    *v95++ = v96;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v206 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v207 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v209 = *v206++;
                      unint64_t v208 = v209;
                      if (v209 >= a3) {
                        unint64_t v208 = a3;
                      }
                      *v207++ = v208;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unsigned int v98 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v99 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v101 = *v98++;
                    unint64_t v100 = v101;
                    if (v101 >= a3) {
                      unint64_t v100 = a3;
                    }
                    *v99++ = v100;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    uint64_t v142 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v143 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v144 = *v142++;
                      double v145 = (double)v144;
                      *v143++ = v145;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  uint64_t v34 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v35 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v36 = *v34++;
                    double v37 = (double)v36;
                    *v35++ = v37;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v162 = (unsigned __int8 *)*((void *)a1 + 2);
                    uint64_t v163 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v165 = *v162++;
                      char v164 = v165;
                      *v163++ = v164;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v54 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v55 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v57 = *v54++;
                    char v56 = v57;
                    *v55++ = v56;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v166 = (unsigned __int8 *)*((void *)a1 + 2);
                    unint64_t v167 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v169 = *v166++;
                      unint64_t v168 = v169;
                      *v167++ = v168;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v58 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v59 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v61 = *v58++;
                    unint64_t v60 = v61;
                    *v59++ = v60;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v122 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v123 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v124 = *v122++;
                      double v125 = (double)v124;
                      *v123++ = v125;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v14 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v15 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v16 = *v14++;
                    double v17 = (double)v16;
                    *v15++ = v17;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
        }
      }

      else if (v7 == 1)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v210 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v211 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v213 = *v210;
                      v210 += 8;
                      char v212 = v213;
                      *v211++ = v212;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unsigned int v102 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v103 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v105 = *v102;
                    v102 += 8;
                    char v104 = v105;
                    *v103++ = v104;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v214 = (unint64_t *)*((void *)a1 + 2);
                    double v215 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v217 = *v214++;
                      unint64_t v216 = v217;
                      *v215++ = v216;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v106 = (unint64_t *)*((void *)a1 + 2);
                  int v107 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v109 = *v106++;
                    unint64_t v108 = v109;
                    *v107++ = v108;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v146 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v147 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v148 = *v146++;
                      double v149 = (double)v148;
                      *v147++ = v149;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v38 = (unint64_t *)*((void *)a1 + 2);
                  unsigned int v39 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v40 = *v38++;
                    double v41 = (double)v40;
                    *v39++ = v41;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v218 = (unsigned __int8 *)*((void *)a1 + 2);
                    uint64_t v219 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v221 = *v218;
                      v218 += 8;
                      char v220 = v221;
                      *v219++ = v220;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  char v110 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v111 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v113 = *v110;
                    v110 += 8;
                    char v112 = v113;
                    *v111++ = v112;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v222 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v223 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v225 = *v222++;
                      unint64_t v224 = v225;
                      if (v225 >= a3) {
                        unint64_t v224 = a3;
                      }
                      *v223++ = v224;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v114 = (unint64_t *)*((void *)a1 + 2);
                  double v115 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v117 = *v114++;
                    unint64_t v116 = v117;
                    if (v117 >= a3) {
                      unint64_t v116 = a3;
                    }
                    *v115++ = v116;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    uint64_t v150 = (unint64_t *)*((void *)a1 + 2);
                    int v151 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v152 = *v150++;
                      double v153 = (double)v152;
                      *v151++ = v153;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v42 = (unint64_t *)*((void *)a1 + 2);
                  unint64_t v43 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v44 = *v42++;
                    double v45 = (double)v44;
                    *v43++ = v45;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v170 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v171 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v173 = *v170;
                      v170 += 8;
                      char v172 = v173;
                      *v171++ = v172;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v62 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v63 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v65 = *v62;
                    v62 += 8;
                    char v64 = v65;
                    *v63++ = v64;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v174 = (unint64_t *)*((void *)a1 + 2);
                    double v175 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v177 = *v174++;
                      unint64_t v176 = v177;
                      *v175++ = v176;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v66 = (unint64_t *)*((void *)a1 + 2);
                  double v67 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v69 = *v66++;
                    unint64_t v68 = v69;
                    *v67++ = v68;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v126 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v127 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v128 = *v126++;
                      double v129 = (double)v128;
                      *v127++ = v129;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v18 = (unint64_t *)*((void *)a1 + 2);
                  unsigned int v19 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v20 = *v18++;
                    double v21 = (double)v20;
                    *v19++ = v21;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
        }
      }

      else if (!v7)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v178 = (double *)*((void *)a1 + 2);
                    unint64_t v179 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      double v180 = *v178++;
                      int v181 = (int)v180;
                      *v179++ = v181;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v70 = (double *)*((void *)a1 + 2);
                  unint64_t v71 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    double v72 = *v70++;
                    int v73 = (int)v72;
                    *v71++ = v73;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v182 = (double *)*((void *)a1 + 2);
                    char v183 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v184 = *v182++;
                      unint64_t v185 = (unint64_t)v184;
                      *v183++ = v185;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v74 = (double *)*((void *)a1 + 2);
                  char v75 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    double v76 = *v74++;
                    unint64_t v77 = (unint64_t)v76;
                    *v75++ = v77;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v130 = (double *)*((void *)a1 + 2);
                    unsigned int v131 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v132 = *v130++;
                      double v133 = v132;
                      *v131++ = v133;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v22 = (double *)*((void *)a1 + 2);
                  double v23 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v24 = *v22++;
                    double v25 = v24;
                    *v23++ = v25;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v186 = (double *)*((void *)a1 + 2);
                    unsigned int v187 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      double v188 = *v186++;
                      int v189 = (int)v188;
                      *v187++ = v189;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v78 = (double *)*((void *)a1 + 2);
                  int v79 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    double v80 = *v78++;
                    int v81 = (int)v80;
                    *v79++ = v81;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v190 = (double *)*((void *)a1 + 2);
                    unint64_t v191 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v192 = *v190++;
                      unint64_t v193 = (unint64_t)v192;
                      *v191++ = v193;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  uint64_t v82 = (double *)*((void *)a1 + 2);
                  double v83 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    double v84 = *v82++;
                    unint64_t v85 = (unint64_t)v84;
                    *v83++ = v85;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v134 = (double *)*((void *)a1 + 2);
                    unsigned int v135 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v136 = *v134++;
                      double v137 = v136;
                      *v135++ = v137;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v26 = (double *)*((void *)a1 + 2);
                  unint64_t v27 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v28 = *v26++;
                    double v29 = v28;
                    *v27++ = v29;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v154 = (double *)*((void *)a1 + 2);
                    unint64_t v155 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      double v156 = *v154++;
                      int v157 = (int)v156;
                      *v155++ = v157;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v46 = (double *)*((void *)a1 + 2);
                  unsigned int v47 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    double v48 = *v46++;
                    int v49 = (int)v48;
                    *v47++ = v49;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v158 = (double *)*((void *)a1 + 2);
                    char v159 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v160 = *v158++;
                      unint64_t v161 = (unint64_t)v160;
                      *v159++ = v161;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unsigned int v50 = (double *)*((void *)a1 + 2);
                  double v51 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    double v52 = *v50++;
                    unint64_t v53 = (unint64_t)v52;
                    *v51++ = v53;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v118 = (double *)*((void *)a1 + 2);
                    unsigned int v119 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v120 = *v118++;
                      double v121 = v120;
                      *v119++ = v121;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  int v9 = (double *)*((void *)a1 + 2);
                  unint64_t v10 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v11 = *v9++;
                    double v12 = v11;
                    *v10++ = v12;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
        }
      }

      return a4;
    }
  }

  return (int *)v5;
}

int *sub_1249C(int *a1, int *a2)
{
  uint64_t v4 = (int *)sub_AE60((uint64_t)a1, a2);
  return agxps_timeseries_max_tt(a1, a2, v4, 1);
}

int *agxps_timeseries_max_tt(int *a1, int *a2, int *a3, int a4)
{
  uint64_t v4 = 0LL;
  if (a1 && a2 && a3)
  {
    if (!*((_BYTE *)a3 + 32) && (uint64_t v5 = *((void *)a1 + 1), v5 == *((void *)a2 + 1)) && v5 == *((void *)a3 + 1))
    {
      int v6 = *a1;
      int v7 = *a2;
      int v8 = *a3;
      if (*a1 == 2)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v325 = (unsigned __int8 *)*((void *)a1 + 2);
                    v326 = (unsigned __int8 *)*((void *)a2 + 2);
                    v327 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v329 = *v325++;
                      unsigned int v328 = v329;
                      unsigned int v331 = *v326++;
                      char v330 = v331;
                      if (v328 <= v331) {
                        LOBYTE(v328) = v330;
                      }
                      *v327++ = v328;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unsigned int v140 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v141 = (unsigned __int8 *)*((void *)a2 + 2);
                  uint64_t v142 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v144 = *v140++;
                    unsigned int v143 = v144;
                    unsigned int v146 = *v141++;
                    char v145 = v146;
                    if (v143 <= v146) {
                      LOBYTE(v143) = v145;
                    }
                    *v142++ = v143;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v332 = (unsigned __int8 *)*((void *)a1 + 2);
                    v333 = (unsigned __int8 *)*((void *)a2 + 2);
                    v334 = (void *)*((void *)a3 + 2);
                    do
                    {
                      int v336 = *v332++;
                      LODWORD(v335) = v336;
                      unsigned int v338 = *v333++;
                      unsigned int v337 = v338;
                      else {
                        uint64_t v335 = v335;
                      }
                      *v334++ = v335;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v147 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v148 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v149 = (void *)*((void *)a3 + 2);
                  do
                  {
                    int v151 = *v147++;
                    LODWORD(v150) = v151;
                    unsigned int v153 = *v148++;
                    unsigned int v152 = v153;
                    else {
                      uint64_t v150 = v150;
                    }
                    *v149++ = v150;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v230 = (unsigned __int8 *)*((void *)a1 + 2);
                    v231 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v232 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v233 = *v230++;
                      double v234 = (double)v233;
                      unsigned int v235 = *v231++;
                      double v236 = (double)v235;
                      *v232++ = v234;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v45 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v46 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v47 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v48 = *v45++;
                    double v49 = (double)v48;
                    unsigned int v50 = *v46++;
                    double v51 = (double)v50;
                    *v47++ = v49;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v339 = (unsigned __int8 *)*((void *)a1 + 2);
                    v340 = (unsigned __int8 *)*((void *)a2 + 2);
                    v341 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v343 = *v339++;
                      unsigned int v342 = v343;
                      unsigned int v345 = *v340;
                      v340 += 8;
                      char v344 = v345;
                      if (v342 <= v345) {
                        LOBYTE(v342) = v344;
                      }
                      *v341++ = v342;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v154 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v155 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v156 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v158 = *v154++;
                    unsigned int v157 = v158;
                    unsigned int v160 = *v155;
                    v155 += 8;
                    char v159 = v160;
                    if (v157 <= v160) {
                      LOBYTE(v157) = v159;
                    }
                    *v156++ = v157;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v346 = (unsigned __int8 *)*((void *)a1 + 2);
                    v347 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v348 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v350 = *v346++;
                      unint64_t v349 = v350;
                      unint64_t v352 = *v347++;
                      unint64_t v351 = v352;
                      if (v349 <= v352) {
                        unint64_t v349 = v351;
                      }
                      *v348++ = v349;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v161 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v162 = (unint64_t *)*((void *)a2 + 2);
                  uint64_t v163 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v165 = *v161++;
                    unint64_t v164 = v165;
                    unint64_t v167 = *v162++;
                    unint64_t v166 = v167;
                    if (v164 <= v167) {
                      unint64_t v164 = v166;
                    }
                    *v163++ = v164;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v237 = (unsigned __int8 *)*((void *)a1 + 2);
                    v238 = (unint64_t *)*((void *)a2 + 2);
                    uint64_t v239 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v240 = *v237++;
                      double v241 = (double)v240;
                      unint64_t v242 = *v238++;
                      double v243 = (double)v242;
                      *v239++ = v241;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v52 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v53 = (unint64_t *)*((void *)a2 + 2);
                  unint64_t v54 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v55 = *v52++;
                    double v56 = (double)v55;
                    unint64_t v57 = *v53++;
                    double v58 = (double)v57;
                    *v54++ = v56;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v272 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v273 = (double *)*((void *)a2 + 2);
                    uint64_t v274 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v276 = *v272++;
                      unsigned int v275 = v276;
                      double v277 = *v273++;
                      int v278 = (int)v277;
                      *v274++ = v275;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  char v87 = (unsigned __int8 *)*((void *)a1 + 2);
                  char v88 = (double *)*((void *)a2 + 2);
                  unsigned int v89 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v91 = *v87++;
                    unsigned int v90 = v91;
                    double v92 = *v88++;
                    int v93 = (int)v92;
                    *v89++ = v90;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    uint64_t v279 = (unsigned __int8 *)*((void *)a1 + 2);
                    char v280 = (double *)*((void *)a2 + 2);
                    v281 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v283 = *v279++;
                      unint64_t v282 = v283;
                      double v284 = *v280++;
                      unint64_t v285 = (unint64_t)v284;
                      *v281++ = v282;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  char v94 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v95 = (double *)*((void *)a2 + 2);
                  char v96 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v98 = *v94++;
                    unint64_t v97 = v98;
                    double v99 = *v95++;
                    unint64_t v100 = (unint64_t)v99;
                    *v96++ = v97;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v202 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v203 = (double *)*((void *)a2 + 2);
                    char v204 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v205 = *v202++;
                      double v206 = (double)v205;
                      double v207 = *v203++;
                      double v208 = v207;
                      if (v207 >= v206) {
                        double v206 = v208;
                      }
                      *v204++ = v206;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v17 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v18 = (double *)*((void *)a2 + 2);
                  unsigned int v19 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v20 = *v17++;
                    double v21 = (double)v20;
                    double v22 = *v18++;
                    double v23 = v22;
                    if (v22 >= v21) {
                      double v21 = v23;
                    }
                    *v19++ = v21;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
        }
      }

      else if (v6 == 1)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v353 = (unsigned __int8 *)*((void *)a1 + 2);
                    v354 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v355 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v357 = *v353;
                      v353 += 8;
                      unsigned int v356 = v357;
                      unsigned int v359 = *v354++;
                      char v358 = v359;
                      if (v356 <= v359) {
                        LOBYTE(v3sub_4E2C(v1 + 56) = v358;
                      }
                      *v355++ = v356;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v168 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v169 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v170 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v172 = *v168;
                    v168 += 8;
                    unsigned int v171 = v172;
                    unsigned int v174 = *v169++;
                    char v173 = v174;
                    if (v171 <= v174) {
                      LOBYTE(v171) = v173;
                    }
                    *v170++ = v171;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v360 = (unint64_t *)*((void *)a1 + 2);
                    v361 = (unsigned __int8 *)*((void *)a2 + 2);
                    v362 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v364 = *v360++;
                      unint64_t v363 = v364;
                      LODWORD(v364) = *v361++;
                      unint64_t v365 = v364;
                      *v362++ = v363;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v175 = (unint64_t *)*((void *)a1 + 2);
                  unint64_t v176 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v177 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v179 = *v175++;
                    unint64_t v178 = v179;
                    LODWORD(v179) = *v176++;
                    unint64_t v180 = v179;
                    *v177++ = v178;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v244 = (unint64_t *)*((void *)a1 + 2);
                    char v245 = (unsigned __int8 *)*((void *)a2 + 2);
                    char v246 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v247 = *v244++;
                      unint64_t v248 = v247;
                      LODWORD(v247) = *v245++;
                      double v249 = (double)v247;
                      double v250 = (double)v248;
                      *v246++ = v250;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v59 = (unint64_t *)*((void *)a1 + 2);
                  unint64_t v60 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v61 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v62 = *v59++;
                    unint64_t v63 = v62;
                    LODWORD(v62) = *v60++;
                    double v64 = (double)v62;
                    double v65 = (double)v63;
                    *v61++ = v65;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v366 = (unsigned __int8 *)*((void *)a1 + 2);
                    v367 = (unsigned __int8 *)*((void *)a2 + 2);
                    v368 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v370 = *v366;
                      v366 += 8;
                      unsigned int v369 = v370;
                      unsigned int v372 = *v367;
                      v367 += 8;
                      char v371 = v372;
                      if (v369 <= v372) {
                        LOBYTE(v369) = v371;
                      }
                      *v368++ = v369;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  int v181 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v182 = (unsigned __int8 *)*((void *)a2 + 2);
                  char v183 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v185 = *v181;
                    v181 += 8;
                    unsigned int v184 = v185;
                    unsigned int v187 = *v182;
                    v182 += 8;
                    char v186 = v187;
                    if (v184 <= v187) {
                      LOBYTE(v184) = v186;
                    }
                    *v183++ = v184;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v373 = (unint64_t *)*((void *)a1 + 2);
                    v374 = (unint64_t *)*((void *)a2 + 2);
                    v375 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v377 = *v373++;
                      unint64_t v376 = v377;
                      unint64_t v379 = *v374++;
                      unint64_t v378 = v379;
                      if (v376 <= v379) {
                        unint64_t v376 = v378;
                      }
                      *v375++ = v376;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v188 = (unint64_t *)*((void *)a1 + 2);
                  int v189 = (unint64_t *)*((void *)a2 + 2);
                  double v190 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v192 = *v188++;
                    unint64_t v191 = v192;
                    unint64_t v194 = *v189++;
                    unint64_t v193 = v194;
                    if (v191 <= v194) {
                      unint64_t v191 = v193;
                    }
                    *v190++ = v191;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    uint64_t v251 = (unint64_t *)*((void *)a1 + 2);
                    unsigned int v252 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v253 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v254 = *v251++;
                      double v255 = (double)v254;
                      unint64_t v256 = *v252++;
                      double v257 = (double)v256;
                      *v253++ = v255;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v66 = (unint64_t *)*((void *)a1 + 2);
                  double v67 = (unint64_t *)*((void *)a2 + 2);
                  unint64_t v68 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v69 = *v66++;
                    double v70 = (double)v69;
                    unint64_t v71 = *v67++;
                    double v72 = (double)v71;
                    *v68++ = v70;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v286 = (unsigned __int8 *)*((void *)a1 + 2);
                    v287 = (double *)*((void *)a2 + 2);
                    unint64_t v288 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      unsigned int v290 = *v286;
                      v286 += 8;
                      unsigned int v289 = v290;
                      double v291 = *v287++;
                      int v292 = (int)v291;
                      *v288++ = v289;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unsigned int v101 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v102 = (double *)*((void *)a2 + 2);
                  unsigned int v103 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    unsigned int v105 = *v101;
                    v101 += 8;
                    unsigned int v104 = v105;
                    double v106 = *v102++;
                    int v107 = (int)v106;
                    *v103++ = v104;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v293 = (unint64_t *)*((void *)a1 + 2);
                    unsigned int v294 = (double *)*((void *)a2 + 2);
                    unsigned int v295 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v297 = *v293++;
                      unint64_t v296 = v297;
                      double v298 = *v294++;
                      unint64_t v299 = (unint64_t)v298;
                      *v295++ = v296;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v108 = (unint64_t *)*((void *)a1 + 2);
                  unint64_t v109 = (double *)*((void *)a2 + 2);
                  char v110 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v112 = *v108++;
                    unint64_t v111 = v112;
                    double v113 = *v109++;
                    unint64_t v114 = (unint64_t)v113;
                    *v110++ = v111;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v209 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v210 = (double *)*((void *)a2 + 2);
                    double v211 = (double *)*((void *)a3 + 2);
                    do
                    {
                      unint64_t v212 = *v209++;
                      unint64_t v213 = v212;
                      double v214 = *v210++;
                      double v215 = v214;
                      double v216 = (double)v213;
                      if (v214 >= v216) {
                        double v216 = v215;
                      }
                      *v211++ = v216;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v24 = (unint64_t *)*((void *)a1 + 2);
                  double v25 = (double *)*((void *)a2 + 2);
                  double v26 = (double *)*((void *)a3 + 2);
                  do
                  {
                    unint64_t v27 = *v24++;
                    unint64_t v28 = v27;
                    double v29 = *v25++;
                    double v30 = v29;
                    double v31 = (double)v28;
                    if (v29 >= v31) {
                      double v31 = v30;
                    }
                    *v26++ = v31;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
        }
      }

      else if (!v6)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v300 = (double *)*((void *)a1 + 2);
                    unint64_t v301 = (unsigned __int8 *)*((void *)a2 + 2);
                    char v302 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      double v303 = *v300++;
                      unsigned int v304 = (int)v303;
                      LODWORD(v303) = *v301++;
                      char v305 = LOBYTE(v303);
                      if (v304 <= LODWORD(v303)) {
                        LOBYTE(v304) = v305;
                      }
                      *v302++ = v304;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v115 = (double *)*((void *)a1 + 2);
                  unint64_t v116 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v117 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    double v118 = *v115++;
                    unsigned int v119 = (int)v118;
                    LODWORD(v118) = *v116++;
                    char v120 = LOBYTE(v118);
                    if (v119 <= LODWORD(v118)) {
                      LOBYTE(v119) = v120;
                    }
                    *v117++ = v119;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v306 = (double *)*((void *)a1 + 2);
                    unsigned int v307 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v308 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      double v309 = *v306++;
                      unint64_t v310 = (unint64_t)v309;
                      LODWORD(v309) = *v307++;
                      unint64_t v311 = LODWORD(v309);
                      if (v310 <= LODWORD(v309)) {
                        unint64_t v310 = v311;
                      }
                      *v308++ = v310;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v121 = (double *)*((void *)a1 + 2);
                  char v122 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v123 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    double v124 = *v121++;
                    unint64_t v125 = (unint64_t)v124;
                    LODWORD(v124) = *v122++;
                    unint64_t v126 = LODWORD(v124);
                    if (v125 <= LODWORD(v124)) {
                      unint64_t v125 = v126;
                    }
                    *v123++ = v125;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v217 = (double *)*((void *)a1 + 2);
                    unint64_t v218 = (unsigned __int8 *)*((void *)a2 + 2);
                    uint64_t v219 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v220 = *v217++;
                      double v221 = v220;
                      LODWORD(v220) = *v218++;
                      double v222 = (double)LODWORD(v220);
                      *v219++ = v221;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unsigned int v32 = (double *)*((void *)a1 + 2);
                  double v33 = (unsigned __int8 *)*((void *)a2 + 2);
                  uint64_t v34 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v35 = *v32++;
                    double v36 = v35;
                    LODWORD(v35) = *v33++;
                    double v37 = (double)LODWORD(v35);
                    *v34++ = v36;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v312 = (double *)*((void *)a1 + 2);
                    char v313 = (unsigned __int8 *)*((void *)a2 + 2);
                    char v314 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      double v315 = *v312++;
                      unsigned int v316 = (int)v315;
                      LODWORD(v315) = *v313;
                      v313 += 8;
                      char v317 = LOBYTE(v315);
                      if (v316 <= LODWORD(v315)) {
                        LOBYTE(v3sub_4B28(v1 + 16) = v317;
                      }
                      *v314++ = v316;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v127 = (double *)*((void *)a1 + 2);
                  unint64_t v128 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v129 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    double v130 = *v127++;
                    unsigned int v131 = (int)v130;
                    LODWORD(v130) = *v128;
                    v128 += 8;
                    char v132 = LOBYTE(v130);
                    if (v131 <= LODWORD(v130)) {
                      LOBYTE(v131) = v132;
                    }
                    *v129++ = v131;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v318 = (double *)*((void *)a1 + 2);
                    uint64_t v319 = (unint64_t *)*((void *)a2 + 2);
                    uint64_t v320 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      double v321 = *v318++;
                      unint64_t v322 = (unint64_t)v321;
                      unint64_t v324 = *v319++;
                      unint64_t v323 = v324;
                      if (v322 <= v324) {
                        unint64_t v322 = v323;
                      }
                      *v320++ = v322;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v133 = (double *)*((void *)a1 + 2);
                  char v134 = (unint64_t *)*((void *)a2 + 2);
                  unsigned int v135 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    double v136 = *v133++;
                    unint64_t v137 = (unint64_t)v136;
                    unint64_t v139 = *v134++;
                    unint64_t v138 = v139;
                    if (v137 <= v139) {
                      unint64_t v137 = v138;
                    }
                    *v135++ = v137;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unint64_t v223 = (double *)*((void *)a1 + 2);
                    unint64_t v224 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v225 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v226 = *v223++;
                      double v227 = v226;
                      unint64_t v228 = *v224++;
                      double v229 = (double)v228;
                      *v225++ = v227;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  unint64_t v38 = (double *)*((void *)a1 + 2);
                  unsigned int v39 = (unint64_t *)*((void *)a2 + 2);
                  unint64_t v40 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v41 = *v38++;
                    double v42 = v41;
                    unint64_t v43 = *v39++;
                    double v44 = (double)v43;
                    *v40++ = v42;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    unsigned int v258 = (double *)*((void *)a1 + 2);
                    v259 = (double *)*((void *)a2 + 2);
                    v260 = (_BYTE *)*((void *)a3 + 2);
                    do
                    {
                      double v261 = *v258++;
                      unsigned int v262 = (int)v261;
                      double v263 = *v259++;
                      int v264 = (int)v263;
                      *v260++ = v262;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  int v73 = (double *)*((void *)a1 + 2);
                  unint64_t v74 = (double *)*((void *)a2 + 2);
                  char v75 = (_BYTE *)*((void *)a3 + 2);
                  do
                  {
                    double v76 = *v73++;
                    unsigned int v77 = (int)v76;
                    double v78 = *v74++;
                    int v79 = (int)v78;
                    *v75++ = v77;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v265 = (double *)*((void *)a1 + 2);
                    v266 = (double *)*((void *)a2 + 2);
                    unint64_t v267 = (unint64_t *)*((void *)a3 + 2);
                    do
                    {
                      double v268 = *v265++;
                      unint64_t v269 = (unint64_t)v268;
                      double v270 = *v266++;
                      unint64_t v271 = (unint64_t)v270;
                      *v267++ = v269;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  double v80 = (double *)*((void *)a1 + 2);
                  int v81 = (double *)*((void *)a2 + 2);
                  uint64_t v82 = (unint64_t *)*((void *)a3 + 2);
                  do
                  {
                    double v83 = *v80++;
                    unint64_t v84 = (unint64_t)v83;
                    double v85 = *v81++;
                    unint64_t v86 = (unint64_t)v85;
                    *v82++ = v84;
                    --v5;
                  }

                  while (v5);
                }

                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    double v195 = (double *)*((void *)a1 + 2);
                    char v196 = (double *)*((void *)a2 + 2);
                    unsigned int v197 = (double *)*((void *)a3 + 2);
                    do
                    {
                      double v198 = *v195++;
                      double v199 = v198;
                      double v200 = *v196++;
                      double v201 = v200;
                      if (v199 <= v200) {
                        double v199 = v201;
                      }
                      *v197++ = v199;
                      --v5;
                    }

                    while (v5);
                  }
                }

                else if (!a4 && v5)
                {
                  int v9 = (double *)*((void *)a1 + 2);
                  unint64_t v10 = (double *)*((void *)a2 + 2);
                  double v11 = (double *)*((void *)a3 + 2);
                  do
                  {
                    double v12 = *v9++;
                    double v13 = v12;
                    double v14 = *v10++;
                    double v15 = v14;
                    if (v13 <= v14) {
                      double v13 = v15;
                    }
                    *v11++ = v13;
                    --v5;
                  }

                  while (v5);
                }

                break;
            }

            break;
        }
      }

      return a3;
    }

    else
    {
      return 0LL;
    }
  }

  return (int *)v4;
}

int *sub_13248(int a1, unint64_t a2, int *a3)
{
  int v6 = (int *)sub_AF84((uint64_t)a3, a1);
  return agxps_timeseries_max_st(a1, a2, a3, v6, 1);
}

int *agxps_timeseries_max_st(int a1, unint64_t a2, int *a3, int *a4, int a5)
{
  unint64_t result = 0LL;
  if (a3 && a4)
  {
    if (*((_BYTE *)a4 + 32)) {
      return 0LL;
    }
    uint64_t v7 = *((void *)a3 + 1);
    if (v7 != *((void *)a4 + 1))
    {
      return 0LL;
    }

    else
    {
      int v8 = *a3;
      int v9 = *a4;
      switch(a1)
      {
        case 2:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v194 = (unsigned __int8 *)*((void *)a3 + 2);
                      double v195 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v197 = *v194++;
                        char v196 = v197;
                        *v195++ = v196;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v86 = (unsigned __int8 *)*((void *)a3 + 2);
                    char v87 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v89 = *v86++;
                      char v88 = v89;
                      *v87++ = v88;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v198 = (unsigned __int8 *)*((void *)a3 + 2);
                      double v199 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v201 = *v198++;
                        uint64_t v200 = v201;
                        *v199++ = v200;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unsigned int v90 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v91 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v93 = *v90++;
                      uint64_t v92 = v93;
                      *v91++ = v92;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v138 = (unsigned __int8 *)*((void *)a3 + 2);
                      unint64_t v139 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v140 = *v138++;
                        double v141 = (double)v140;
                        *v139++ = v141;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v30 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v31 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v32 = *v30++;
                      double v33 = (double)v32;
                      *v31++ = v33;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v202 = (unsigned __int8 *)*((void *)a3 + 2);
                      unsigned int v203 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v205 = *v202;
                        v202 += 8;
                        char v204 = v205;
                        *v203++ = v204;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    char v94 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v95 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v97 = *v94;
                      v94 += 8;
                      char v96 = v97;
                      *v95++ = v96;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v206 = (unint64_t *)*((void *)a3 + 2);
                      double v207 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v209 = *v206++;
                        unint64_t v208 = v209;
                        *v207++ = v208;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unsigned int v98 = (unint64_t *)*((void *)a3 + 2);
                    double v99 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v101 = *v98++;
                      unint64_t v100 = v101;
                      *v99++ = v100;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      uint64_t v142 = (unint64_t *)*((void *)a3 + 2);
                      unsigned int v143 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v144 = *v142++;
                        double v145 = (double)v144;
                        *v143++ = v145;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    uint64_t v34 = (unint64_t *)*((void *)a3 + 2);
                    double v35 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v36 = *v34++;
                      double v37 = (double)v36;
                      *v35++ = v37;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v162 = (double *)*((void *)a3 + 2);
                      uint64_t v163 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        double v164 = *v162++;
                        int v165 = (int)v164;
                        *v163++ = v165;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v54 = (double *)*((void *)a3 + 2);
                    unsigned int v55 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      double v56 = *v54++;
                      int v57 = (int)v56;
                      *v55++ = v57;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v166 = (double *)*((void *)a3 + 2);
                      unint64_t v167 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        double v168 = *v166++;
                        unint64_t v169 = (unint64_t)v168;
                        *v167++ = v169;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v58 = (double *)*((void *)a3 + 2);
                    unint64_t v59 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v60 = *v58++;
                      unint64_t v61 = (unint64_t)v60;
                      *v59++ = v61;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v122 = (double *)*((void *)a3 + 2);
                      unsigned int v123 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v124 = *v122++;
                        double v125 = v124;
                        *v123++ = v125;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v14 = (double *)*((void *)a3 + 2);
                    double v15 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v16 = *v14++;
                      double v17 = v16;
                      *v15++ = v17;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
          }

          break;
        case 1:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v210 = (unsigned __int8 *)*((void *)a3 + 2);
                      double v211 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v213 = *v210++;
                        char v212 = v213;
                        *v211++ = v212;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unsigned int v102 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v103 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v105 = *v102++;
                      char v104 = v105;
                      *v103++ = v104;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v214 = (unsigned __int8 *)*((void *)a3 + 2);
                      double v215 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v217 = *v214++;
                        unint64_t v216 = v217;
                        if (a2 > v217) {
                          unint64_t v216 = a2;
                        }
                        *v215++ = v216;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v106 = (unsigned __int8 *)*((void *)a3 + 2);
                    int v107 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v109 = *v106++;
                      unint64_t v108 = v109;
                      if (a2 > v109) {
                        unint64_t v108 = a2;
                      }
                      *v107++ = v108;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v146 = (unsigned __int8 *)*((void *)a3 + 2);
                      unint64_t v147 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v148 = *v146++;
                        double v149 = (double)v148;
                        *v147++ = v149;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v38 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v39 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v40 = *v38++;
                      double v41 = (double)v40;
                      *v39++ = v41;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v218 = (unsigned __int8 *)*((void *)a3 + 2);
                      uint64_t v219 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v221 = *v218;
                        v218 += 8;
                        char v220 = v221;
                        *v219++ = v220;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    char v110 = (unsigned __int8 *)*((void *)a3 + 2);
                    unint64_t v111 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v113 = *v110;
                      v110 += 8;
                      char v112 = v113;
                      *v111++ = v112;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v222 = (unint64_t *)*((void *)a3 + 2);
                      unint64_t v223 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v225 = *v222++;
                        unint64_t v224 = v225;
                        if (a2 > v225) {
                          unint64_t v224 = a2;
                        }
                        *v223++ = v224;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v114 = (unint64_t *)*((void *)a3 + 2);
                    double v115 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v117 = *v114++;
                      unint64_t v116 = v117;
                      if (a2 > v117) {
                        unint64_t v116 = a2;
                      }
                      *v115++ = v116;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      uint64_t v150 = (unint64_t *)*((void *)a3 + 2);
                      int v151 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v152 = *v150++;
                        double v153 = (double)v152;
                        *v151++ = v153;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v42 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v43 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v44 = *v42++;
                      double v45 = (double)v44;
                      *v43++ = v45;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v170 = (double *)*((void *)a3 + 2);
                      unsigned int v171 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        double v172 = *v170++;
                        int v173 = (int)v172;
                        *v171++ = v173;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v62 = (double *)*((void *)a3 + 2);
                    unint64_t v63 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      double v64 = *v62++;
                      int v65 = (int)v64;
                      *v63++ = v65;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v174 = (double *)*((void *)a3 + 2);
                      double v175 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        double v176 = *v174++;
                        unint64_t v177 = (unint64_t)v176;
                        *v175++ = v177;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v66 = (double *)*((void *)a3 + 2);
                    double v67 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v68 = *v66++;
                      unint64_t v69 = (unint64_t)v68;
                      *v67++ = v69;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v126 = (double *)*((void *)a3 + 2);
                      unint64_t v127 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v128 = *v126++;
                        double v129 = v128;
                        *v127++ = v129;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v18 = (double *)*((void *)a3 + 2);
                    unsigned int v19 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v20 = *v18++;
                      double v21 = v20;
                      *v19++ = v21;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
          }

          break;
        case 0:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unint64_t v178 = (unsigned __int8 *)*((void *)a3 + 2);
                      unint64_t v179 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v181 = *v178++;
                        char v180 = v181;
                        *v179++ = v180;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v70 = (unsigned __int8 *)*((void *)a3 + 2);
                    unint64_t v71 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v73 = *v70++;
                      char v72 = v73;
                      *v71++ = v72;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v182 = (unsigned __int8 *)*((void *)a3 + 2);
                      char v183 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v185 = *v182++;
                        unint64_t v184 = v185;
                        *v183++ = v184;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v74 = (unsigned __int8 *)*((void *)a3 + 2);
                    char v75 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v77 = *v74++;
                      unint64_t v76 = v77;
                      *v75++ = v76;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v130 = (unsigned __int8 *)*((void *)a3 + 2);
                      unsigned int v131 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v132 = *v130++;
                        double v133 = (double)v132;
                        *v131++ = v133;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v22 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v23 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v24 = *v22++;
                      double v25 = (double)v24;
                      *v23++ = v25;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v186 = (unsigned __int8 *)*((void *)a3 + 2);
                      unsigned int v187 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v189 = *v186;
                        v186 += 8;
                        char v188 = v189;
                        *v187++ = v188;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v78 = (unsigned __int8 *)*((void *)a3 + 2);
                    int v79 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v81 = *v78;
                      v78 += 8;
                      char v80 = v81;
                      *v79++ = v80;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v190 = (unint64_t *)*((void *)a3 + 2);
                      unint64_t v191 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v193 = *v190++;
                        unint64_t v192 = v193;
                        *v191++ = v192;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    uint64_t v82 = (unint64_t *)*((void *)a3 + 2);
                    double v83 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v85 = *v82++;
                      unint64_t v84 = v85;
                      *v83++ = v84;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      char v134 = (unint64_t *)*((void *)a3 + 2);
                      unsigned int v135 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v136 = *v134++;
                        double v137 = (double)v136;
                        *v135++ = v137;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    double v26 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v27 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v28 = *v26++;
                      double v29 = (double)v28;
                      *v27++ = v29;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v154 = (double *)*((void *)a3 + 2);
                      unint64_t v155 = (_BYTE *)*((void *)a4 + 2);
                      do
                      {
                        double v156 = *v154++;
                        int v157 = (int)v156;
                        *v155++ = v157;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v46 = (double *)*((void *)a3 + 2);
                    unsigned int v47 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      double v48 = *v46++;
                      int v49 = (int)v48;
                      *v47++ = v49;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      unsigned int v158 = (double *)*((void *)a3 + 2);
                      char v159 = (unint64_t *)*((void *)a4 + 2);
                      do
                      {
                        double v160 = *v158++;
                        unint64_t v161 = (unint64_t)v160;
                        *v159++ = v161;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unsigned int v50 = (double *)*((void *)a3 + 2);
                    double v51 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v52 = *v50++;
                      unint64_t v53 = (unint64_t)v52;
                      *v51++ = v53;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      double v118 = (double *)*((void *)a3 + 2);
                      unsigned int v119 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v120 = *v118++;
                        double v121 = v120;
                        *v119++ = v121;
                        --v7;
                      }

                      while (v7);
                    }
                  }

                  else if (!a5 && v7)
                  {
                    unint64_t v10 = (double *)*((void *)a3 + 2);
                    double v11 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v12 = *v10++;
                      double v13 = v12;
                      *v11++ = v13;
                      --v7;
                    }

                    while (v7);
                  }

                  break;
              }

              break;
          }

          break;
      }

      return a4;
    }
  }

  return result;
}

int *sub_13EB0(int *a1, int a2, unint64_t a3)
{
  int v6 = (int *)sub_AF84((uint64_t)a1, a2);
  return agxps_timeseries_max_ts(a1, a2, a3, v6, 1);
}

int *agxps_timeseries_max_ts(int *a1, int a2, unint64_t a3, int *a4, int a5)
{
  uint64_t v5 = 0LL;
  if (a1 && a4)
  {
    if (*((_BYTE *)a4 + 32)) {
      return 0LL;
    }
    uint64_t v6 = *((void *)a1 + 1);
    if (v6 != *((void *)a4 + 1))
    {
      return 0LL;
    }

    else
    {
      int v7 = *a1;
      int v8 = *a4;
      if (*a1 == 2)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v194 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v195 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v197 = *v194++;
                      char v196 = v197;
                      *v195++ = v196;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v86 = (unsigned __int8 *)*((void *)a1 + 2);
                  char v87 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v89 = *v86++;
                    char v88 = v89;
                    *v87++ = v88;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v198 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v199 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v201 = *v198++;
                      uint64_t v200 = v201;
                      *v199++ = v200;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unsigned int v90 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v91 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v93 = *v90++;
                    uint64_t v92 = v93;
                    *v91++ = v92;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v138 = (unsigned __int8 *)*((void *)a1 + 2);
                    unint64_t v139 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v140 = *v138++;
                      double v141 = (double)v140;
                      *v139++ = v141;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v30 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v31 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v32 = *v30++;
                    double v33 = (double)v32;
                    *v31++ = v33;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v202 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v203 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v205 = *v202++;
                      char v204 = v205;
                      *v203++ = v204;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  char v94 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v95 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v97 = *v94++;
                    char v96 = v97;
                    *v95++ = v96;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v206 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v207 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v209 = *v206++;
                      unint64_t v208 = v209;
                      if (v209 <= a3) {
                        unint64_t v208 = a3;
                      }
                      *v207++ = v208;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unsigned int v98 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v99 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v101 = *v98++;
                    unint64_t v100 = v101;
                    if (v101 <= a3) {
                      unint64_t v100 = a3;
                    }
                    *v99++ = v100;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    uint64_t v142 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v143 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v144 = *v142++;
                      double v145 = (double)v144;
                      *v143++ = v145;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  uint64_t v34 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v35 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v36 = *v34++;
                    double v37 = (double)v36;
                    *v35++ = v37;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v162 = (unsigned __int8 *)*((void *)a1 + 2);
                    uint64_t v163 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v165 = *v162++;
                      char v164 = v165;
                      *v163++ = v164;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v54 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v55 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v57 = *v54++;
                    char v56 = v57;
                    *v55++ = v56;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v166 = (unsigned __int8 *)*((void *)a1 + 2);
                    unint64_t v167 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v169 = *v166++;
                      unint64_t v168 = v169;
                      *v167++ = v168;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v58 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v59 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v61 = *v58++;
                    unint64_t v60 = v61;
                    *v59++ = v60;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v122 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v123 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v124 = *v122++;
                      double v125 = (double)v124;
                      *v123++ = v125;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v14 = (unsigned __int8 *)*((void *)a1 + 2);
                  double v15 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v16 = *v14++;
                    double v17 = (double)v16;
                    *v15++ = v17;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
        }
      }

      else if (v7 == 1)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v210 = (unsigned __int8 *)*((void *)a1 + 2);
                    double v211 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v213 = *v210;
                      v210 += 8;
                      char v212 = v213;
                      *v211++ = v212;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unsigned int v102 = (unsigned __int8 *)*((void *)a1 + 2);
                  unsigned int v103 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v105 = *v102;
                    v102 += 8;
                    char v104 = v105;
                    *v103++ = v104;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v214 = (unint64_t *)*((void *)a1 + 2);
                    double v215 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v217 = *v214++;
                      unint64_t v216 = v217;
                      *v215++ = v216;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v106 = (unint64_t *)*((void *)a1 + 2);
                  int v107 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v109 = *v106++;
                    unint64_t v108 = v109;
                    *v107++ = v108;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v146 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v147 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v148 = *v146++;
                      double v149 = (double)v148;
                      *v147++ = v149;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v38 = (unint64_t *)*((void *)a1 + 2);
                  unsigned int v39 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v40 = *v38++;
                    double v41 = (double)v40;
                    *v39++ = v41;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v218 = (unsigned __int8 *)*((void *)a1 + 2);
                    uint64_t v219 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v221 = *v218;
                      v218 += 8;
                      char v220 = v221;
                      *v219++ = v220;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  char v110 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v111 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v113 = *v110;
                    v110 += 8;
                    char v112 = v113;
                    *v111++ = v112;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v222 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v223 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v225 = *v222++;
                      unint64_t v224 = v225;
                      if (v225 <= a3) {
                        unint64_t v224 = a3;
                      }
                      *v223++ = v224;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v114 = (unint64_t *)*((void *)a1 + 2);
                  double v115 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v117 = *v114++;
                    unint64_t v116 = v117;
                    if (v117 <= a3) {
                      unint64_t v116 = a3;
                    }
                    *v115++ = v116;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    uint64_t v150 = (unint64_t *)*((void *)a1 + 2);
                    int v151 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v152 = *v150++;
                      double v153 = (double)v152;
                      *v151++ = v153;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v42 = (unint64_t *)*((void *)a1 + 2);
                  unint64_t v43 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v44 = *v42++;
                    double v45 = (double)v44;
                    *v43++ = v45;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v170 = (unsigned __int8 *)*((void *)a1 + 2);
                    unsigned int v171 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v173 = *v170;
                      v170 += 8;
                      char v172 = v173;
                      *v171++ = v172;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v62 = (unsigned __int8 *)*((void *)a1 + 2);
                  unint64_t v63 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v65 = *v62;
                    v62 += 8;
                    char v64 = v65;
                    *v63++ = v64;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v174 = (unint64_t *)*((void *)a1 + 2);
                    double v175 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v177 = *v174++;
                      unint64_t v176 = v177;
                      *v175++ = v176;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v66 = (unint64_t *)*((void *)a1 + 2);
                  double v67 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v69 = *v66++;
                    unint64_t v68 = v69;
                    *v67++ = v68;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v126 = (unint64_t *)*((void *)a1 + 2);
                    unint64_t v127 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v128 = *v126++;
                      double v129 = (double)v128;
                      *v127++ = v129;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v18 = (unint64_t *)*((void *)a1 + 2);
                  unsigned int v19 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v20 = *v18++;
                    double v21 = (double)v20;
                    *v19++ = v21;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
        }
      }

      else if (!v7)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unint64_t v178 = (double *)*((void *)a1 + 2);
                    unint64_t v179 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      double v180 = *v178++;
                      int v181 = (int)v180;
                      *v179++ = v181;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v70 = (double *)*((void *)a1 + 2);
                  unint64_t v71 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    double v72 = *v70++;
                    int v73 = (int)v72;
                    *v71++ = v73;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v182 = (double *)*((void *)a1 + 2);
                    char v183 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v184 = *v182++;
                      unint64_t v185 = (unint64_t)v184;
                      *v183++ = v185;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v74 = (double *)*((void *)a1 + 2);
                  char v75 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    double v76 = *v74++;
                    unint64_t v77 = (unint64_t)v76;
                    *v75++ = v77;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v130 = (double *)*((void *)a1 + 2);
                    unsigned int v131 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v132 = *v130++;
                      double v133 = v132;
                      *v131++ = v133;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v22 = (double *)*((void *)a1 + 2);
                  double v23 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v24 = *v22++;
                    double v25 = v24;
                    *v23++ = v25;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v186 = (double *)*((void *)a1 + 2);
                    unsigned int v187 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      double v188 = *v186++;
                      int v189 = (int)v188;
                      *v187++ = v189;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v78 = (double *)*((void *)a1 + 2);
                  int v79 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    double v80 = *v78++;
                    int v81 = (int)v80;
                    *v79++ = v81;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v190 = (double *)*((void *)a1 + 2);
                    unint64_t v191 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v192 = *v190++;
                      unint64_t v193 = (unint64_t)v192;
                      *v191++ = v193;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  uint64_t v82 = (double *)*((void *)a1 + 2);
                  double v83 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    double v84 = *v82++;
                    unint64_t v85 = (unint64_t)v84;
                    *v83++ = v85;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    char v134 = (double *)*((void *)a1 + 2);
                    unsigned int v135 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v136 = *v134++;
                      double v137 = v136;
                      *v135++ = v137;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  double v26 = (double *)*((void *)a1 + 2);
                  unint64_t v27 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v28 = *v26++;
                    double v29 = v28;
                    *v27++ = v29;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v154 = (double *)*((void *)a1 + 2);
                    unint64_t v155 = (_BYTE *)*((void *)a4 + 2);
                    do
                    {
                      double v156 = *v154++;
                      int v157 = (int)v156;
                      *v155++ = v157;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unint64_t v46 = (double *)*((void *)a1 + 2);
                  unsigned int v47 = (_BYTE *)*((void *)a4 + 2);
                  do
                  {
                    double v48 = *v46++;
                    int v49 = (int)v48;
                    *v47++ = v49;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    unsigned int v158 = (double *)*((void *)a1 + 2);
                    char v159 = (unint64_t *)*((void *)a4 + 2);
                    do
                    {
                      double v160 = *v158++;
                      unint64_t v161 = (unint64_t)v160;
                      *v159++ = v161;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  unsigned int v50 = (double *)*((void *)a1 + 2);
                  double v51 = (unint64_t *)*((void *)a4 + 2);
                  do
                  {
                    double v52 = *v50++;
                    unint64_t v53 = (unint64_t)v52;
                    *v51++ = v53;
                    --v6;
                  }

                  while (v6);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    double v118 = (double *)*((void *)a1 + 2);
                    unsigned int v119 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v120 = *v118++;
                      double v121 = v120;
                      *v119++ = v121;
                      --v6;
                    }

                    while (v6);
                  }
                }

                else if (!a5 && v6)
                {
                  int v9 = (double *)*((void *)a1 + 2);
                  unint64_t v10 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v11 = *v9++;
                    double v12 = v11;
                    *v10++ = v12;
                    --v6;
                  }

                  while (v6);
                }

                break;
            }

            break;
        }
      }

      return a4;
    }
  }

  return (int *)v5;
}

int *sub_14B10(int *result, int *a2, int *a3, int *a4, int a5)
{
  switch((int)result)
  {
    case 0:
      unint64_t result = 0LL;
      if (a2 && a3 && a4)
      {
        if (*((_BYTE *)a4 + 32)) {
          return 0LL;
        }
        uint64_t v5 = *((void *)a2 + 1);
        if (v5 != *((void *)a3 + 1) || v5 != *((void *)a4 + 1)) {
          return 0LL;
        }
        int v6 = *a2;
        int v7 = *a3;
        int v8 = *a4;
        if (*a2 == 2)
        {
          switch(v7)
          {
            case 2:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1727 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1728 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1729 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1731 = *v1727++;
                        int v1730 = v1731;
                        int v1732 = *v1728++;
                        *v1729++ = v1730 == v1732;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    v737 = (unsigned __int8 *)*((void *)a2 + 2);
                    v738 = (unsigned __int8 *)*((void *)a3 + 2);
                    v739 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v741 = *v737++;
                      int v740 = v741;
                      int v742 = *v738++;
                      *v739++ = v740 == v742;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1733 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1734 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1735 = (void *)*((void *)a4 + 2);
                      do
                      {
                        int v1737 = *v1733++;
                        int v1736 = v1737;
                        int v1738 = *v1734++;
                        *v1735++ = v1736 == v1738;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    v743 = (unsigned __int8 *)*((void *)a2 + 2);
                    v744 = (unsigned __int8 *)*((void *)a3 + 2);
                    v745 = (void *)*((void *)a4 + 2);
                    do
                    {
                      int v747 = *v743++;
                      int v746 = v747;
                      int v748 = *v744++;
                      *v745++ = v746 == v748;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1223 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1224 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1225 = (double *)*((void *)a4 + 2);
                      do
                      {
                        int v1227 = *v1223++;
                        int v1226 = v1227;
                        int v1228 = *v1224++;
                        if (v1226 == v1228) {
                          double v1229 = 1.0;
                        }
                        else {
                          double v1229 = 0.0;
                        }
                        *v1225++ = v1229;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    unsigned int v233 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v234 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v235 = (double *)*((void *)a4 + 2);
                    do
                    {
                      int v237 = *v233++;
                      int v236 = v237;
                      int v238 = *v234++;
                      if (v236 == v238) {
                        double v239 = 1.0;
                      }
                      else {
                        double v239 = 0.0;
                      }
                      *v235++ = v239;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
              }

              break;
            case 1:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1739 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1740 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1741 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1743 = *v1739++;
                        int v1742 = v1743;
                        int v1744 = *v1740;
                        v1740 += 8;
                        *v1741++ = v1742 == v1744;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    v749 = (unsigned __int8 *)*((void *)a2 + 2);
                    v750 = (unsigned __int8 *)*((void *)a3 + 2);
                    v751 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v753 = *v749++;
                      int v752 = v753;
                      int v754 = *v750;
                      v750 += 8;
                      *v751++ = v752 == v754;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1745 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1746 = (uint64_t *)*((void *)a3 + 2);
                      v1747 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1749 = *v1745++;
                        uint64_t v1748 = v1749;
                        uint64_t v1750 = *v1746++;
                        *v1747++ = v1750 == v1748;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    v755 = (unsigned __int8 *)*((void *)a2 + 2);
                    v756 = (uint64_t *)*((void *)a3 + 2);
                    v757 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v759 = *v755++;
                      uint64_t v758 = v759;
                      uint64_t v760 = *v756++;
                      *v757++ = v760 == v758;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1230 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1231 = (unint64_t *)*((void *)a3 + 2);
                      v1232 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1233 = *v1230++;
                        double v1234 = (double)v1233;
                        unint64_t v1235 = *v1231++;
                        else {
                          double v1236 = 0.0;
                        }
                        *v1232++ = v1236;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    unsigned int v240 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v241 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v242 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v243 = *v240++;
                      double v244 = (double)v243;
                      unint64_t v245 = *v241++;
                      else {
                        double v246 = 0.0;
                      }
                      *v242++ = v246;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
              }

              break;
            case 0:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1457 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1458 = (double *)*((void *)a3 + 2);
                      v1459 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1461 = *v1457++;
                        int v1460 = v1461;
                        double v1462 = *v1458++;
                        *v1459++ = v1460 == (int)v1462;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    v467 = (unsigned __int8 *)*((void *)a2 + 2);
                    v468 = (double *)*((void *)a3 + 2);
                    v469 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v471 = *v467++;
                      int v470 = v471;
                      double v472 = *v468++;
                      *v469++ = v470 == (int)v472;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1463 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1464 = (double *)*((void *)a3 + 2);
                      v1465 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1467 = *v1463++;
                        uint64_t v1466 = v1467;
                        double v1468 = *v1464++;
                        *v1465++ = v1466 == (unint64_t)v1468;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    v473 = (unsigned __int8 *)*((void *)a2 + 2);
                    v474 = (double *)*((void *)a3 + 2);
                    v475 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v477 = *v473++;
                      uint64_t v476 = v477;
                      double v478 = *v474++;
                      *v475++ = v476 == (unint64_t)v478;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1061 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1062 = (double *)*((void *)a3 + 2);
                      v1063 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1064 = *v1061++;
                        double v1065 = (double)v1064;
                        double v1066 = *v1062++;
                        if (v1066 == v1065) {
                          double v1067 = 1.0;
                        }
                        else {
                          double v1067 = 0.0;
                        }
                        *v1063++ = v1067;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    unint64_t v71 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v72 = (double *)*((void *)a3 + 2);
                    int v73 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v74 = *v71++;
                      double v75 = (double)v74;
                      double v76 = *v72++;
                      if (v76 == v75) {
                        double v77 = 1.0;
                      }
                      else {
                        double v77 = 0.0;
                      }
                      *v73++ = v77;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
              }

              break;
          }
        }

        else if (v6 == 1)
        {
          switch(v7)
          {
            case 2:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1751 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1752 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1753 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1755 = *v1751;
                        v1751 += 8;
                        int v1754 = v1755;
                        int v1756 = *v1752++;
                        *v1753++ = v1756 == v1754;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    v761 = (unsigned __int8 *)*((void *)a2 + 2);
                    v762 = (unsigned __int8 *)*((void *)a3 + 2);
                    v763 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v765 = *v761;
                      v761 += 8;
                      int v764 = v765;
                      int v766 = *v762++;
                      *v763++ = v766 == v764;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1757 = (uint64_t *)*((void *)a2 + 2);
                      v1758 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1759 = (void *)*((void *)a4 + 2);
                      do
                      {
                        uint64_t v1761 = *v1757++;
                        uint64_t v1760 = v1761;
                        LODWORD(v1761) = *v1758++;
                        *v1759++ = v1760 == v1761;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    v767 = (uint64_t *)*((void *)a2 + 2);
                    v768 = (unsigned __int8 *)*((void *)a3 + 2);
                    v769 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v771 = *v767++;
                      uint64_t v770 = v771;
                      LODWORD(v771) = *v768++;
                      *v769++ = v770 == v771;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1237 = (unint64_t *)*((void *)a2 + 2);
                      v1238 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1239 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1240 = *v1237++;
                        unint64_t v1241 = v1240;
                        LODWORD(v1240) = *v1238++;
                        else {
                          double v1242 = 0.0;
                        }
                        *v1239++ = v1242;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    unint64_t v247 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v248 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v249 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v250 = *v247++;
                      unint64_t v251 = v250;
                      LODWORD(v250) = *v248++;
                      else {
                        double v252 = 0.0;
                      }
                      *v249++ = v252;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
              }

              break;
            case 1:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1762 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1763 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1764 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1766 = *v1762;
                        v1762 += 8;
                        int v1765 = v1766;
                        int v1767 = *v1763;
                        v1763 += 8;
                        *v1764++ = v1765 == v1767;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    v772 = (unsigned __int8 *)*((void *)a2 + 2);
                    v773 = (unsigned __int8 *)*((void *)a3 + 2);
                    v774 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v776 = *v772;
                      v772 += 8;
                      int v775 = v776;
                      int v777 = *v773;
                      v773 += 8;
                      *v774++ = v775 == v777;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1768 = (uint64_t *)*((void *)a2 + 2);
                      v1769 = (uint64_t *)*((void *)a3 + 2);
                      v1770 = (void *)*((void *)a4 + 2);
                      do
                      {
                        uint64_t v1772 = *v1768++;
                        uint64_t v1771 = v1772;
                        uint64_t v1773 = *v1769++;
                        *v1770++ = v1771 == v1773;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    v778 = (uint64_t *)*((void *)a2 + 2);
                    v779 = (uint64_t *)*((void *)a3 + 2);
                    v780 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v782 = *v778++;
                      uint64_t v781 = v782;
                      uint64_t v783 = *v779++;
                      *v780++ = v781 == v783;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1243 = (unint64_t *)*((void *)a2 + 2);
                      v1244 = (unint64_t *)*((void *)a3 + 2);
                      v1245 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1246 = *v1243++;
                        double v1247 = (double)v1246;
                        unint64_t v1248 = *v1244++;
                        else {
                          double v1249 = 0.0;
                        }
                        *v1245++ = v1249;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    unsigned int v253 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v254 = (unint64_t *)*((void *)a3 + 2);
                    double v255 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v256 = *v253++;
                      double v257 = (double)v256;
                      unint64_t v258 = *v254++;
                      else {
                        double v259 = 0.0;
                      }
                      *v255++ = v259;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
              }

              break;
            case 0:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1469 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1470 = (double *)*((void *)a3 + 2);
                      v1471 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1473 = *v1469;
                        v1469 += 8;
                        int v1472 = v1473;
                        double v1474 = *v1470++;
                        *v1471++ = v1472 == (int)v1474;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    v479 = (unsigned __int8 *)*((void *)a2 + 2);
                    v480 = (double *)*((void *)a3 + 2);
                    v481 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v483 = *v479;
                      v479 += 8;
                      int v482 = v483;
                      double v484 = *v480++;
                      *v481++ = v482 == (int)v484;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1475 = (uint64_t *)*((void *)a2 + 2);
                      v1476 = (double *)*((void *)a3 + 2);
                      v1477 = (void *)*((void *)a4 + 2);
                      do
                      {
                        uint64_t v1479 = *v1475++;
                        uint64_t v1478 = v1479;
                        double v1480 = *v1476++;
                        *v1477++ = v1478 == (unint64_t)v1480;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    v485 = (uint64_t *)*((void *)a2 + 2);
                    v486 = (double *)*((void *)a3 + 2);
                    v487 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v489 = *v485++;
                      uint64_t v488 = v489;
                      double v490 = *v486++;
                      *v487++ = v488 == (unint64_t)v490;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1068 = (unint64_t *)*((void *)a2 + 2);
                      v1069 = (double *)*((void *)a3 + 2);
                      v1070 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1071 = *v1068++;
                        unint64_t v1072 = v1071;
                        double v1073 = *v1069++;
                        else {
                          double v1074 = 0.0;
                        }
                        *v1070++ = v1074;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    double v78 = (unint64_t *)*((void *)a2 + 2);
                    int v79 = (double *)*((void *)a3 + 2);
                    double v80 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v81 = *v78++;
                      unint64_t v82 = v81;
                      double v83 = *v79++;
                      else {
                        double v84 = 0.0;
                      }
                      *v80++ = v84;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
              }

              break;
          }
        }

        else if (!v6)
        {
          switch(v7)
          {
            case 2:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1601 = (double *)*((void *)a2 + 2);
                      v1602 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1603 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1604 = *v1601++;
                        int v1605 = (int)v1604;
                        LODWORD(v1604) = *v1602++;
                        *v1603++ = LODWORD(v1604) == v1605;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    v611 = (double *)*((void *)a2 + 2);
                    v612 = (unsigned __int8 *)*((void *)a3 + 2);
                    v613 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v614 = *v611++;
                      int v615 = (int)v614;
                      LODWORD(v614) = *v612++;
                      *v613++ = LODWORD(v614) == v615;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1606 = (double *)*((void *)a2 + 2);
                      v1607 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1608 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1609 = *v1606++;
                        unint64_t v1610 = (unint64_t)v1609;
                        LODWORD(v1609) = *v1607++;
                        *v1608++ = v1610 == LODWORD(v1609);
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    v616 = (double *)*((void *)a2 + 2);
                    v617 = (unsigned __int8 *)*((void *)a3 + 2);
                    v618 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v619 = *v616++;
                      unint64_t v620 = (unint64_t)v619;
                      LODWORD(v619) = *v617++;
                      *v618++ = v620 == LODWORD(v619);
                      --v5;
                    }

                    while (v5);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1145 = (double *)*((void *)a2 + 2);
                      v1146 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1147 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1148 = *v1145++;
                        double v1149 = v1148;
                        LODWORD(v1148) = *v1146++;
                        else {
                          double v1150 = 0.0;
                        }
                        *v1147++ = v1150;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    unint64_t v155 = (double *)*((void *)a2 + 2);
                    double v156 = (unsigned __int8 *)*((void *)a3 + 2);
                    int v157 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v158 = *v155++;
                      double v159 = v158;
                      LODWORD(v158) = *v156++;
                      else {
                        double v160 = 0.0;
                      }
                      *v157++ = v160;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
              }

              break;
            case 1:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1611 = (double *)*((void *)a2 + 2);
                      v1612 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1613 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1614 = *v1611++;
                        int v1615 = (int)v1614;
                        LODWORD(v1614) = *v1612;
                        v1612 += 8;
                        *v1613++ = v1615 == LODWORD(v1614);
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    v621 = (double *)*((void *)a2 + 2);
                    v622 = (unsigned __int8 *)*((void *)a3 + 2);
                    v623 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v624 = *v621++;
                      int v625 = (int)v624;
                      LODWORD(v624) = *v622;
                      v622 += 8;
                      *v623++ = v625 == LODWORD(v624);
                      --v5;
                    }

                    while (v5);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1616 = (double *)*((void *)a2 + 2);
                      v1617 = (uint64_t *)*((void *)a3 + 2);
                      v1618 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1619 = *v1616++;
                        unint64_t v1620 = (unint64_t)v1619;
                        uint64_t v1621 = *v1617++;
                        *v1618++ = v1621 == v1620;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    v626 = (double *)*((void *)a2 + 2);
                    v627 = (uint64_t *)*((void *)a3 + 2);
                    v628 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v629 = *v626++;
                      unint64_t v630 = (unint64_t)v629;
                      uint64_t v631 = *v627++;
                      *v628++ = v631 == v630;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1151 = (double *)*((void *)a2 + 2);
                      v1152 = (unint64_t *)*((void *)a3 + 2);
                      v1153 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1154 = *v1151++;
                        double v1155 = v1154;
                        unint64_t v1156 = *v1152++;
                        else {
                          double v1157 = 0.0;
                        }
                        *v1153++ = v1157;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    unint64_t v161 = (double *)*((void *)a2 + 2);
                    unint64_t v162 = (unint64_t *)*((void *)a3 + 2);
                    uint64_t v163 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v164 = *v161++;
                      double v165 = v164;
                      unint64_t v166 = *v162++;
                      else {
                        double v167 = 0.0;
                      }
                      *v163++ = v167;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
              }

              break;
            case 0:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1385 = (double *)*((void *)a2 + 2);
                      v1386 = (double *)*((void *)a3 + 2);
                      v1387 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1388 = *v1385++;
                        int v1389 = (int)v1388;
                        double v1390 = *v1386++;
                        *v1387++ = v1389 == (int)v1390;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    v395 = (double *)*((void *)a2 + 2);
                    v396 = (double *)*((void *)a3 + 2);
                    v397 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v398 = *v395++;
                      int v399 = (int)v398;
                      double v400 = *v396++;
                      *v397++ = v399 == (int)v400;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1391 = (double *)*((void *)a2 + 2);
                      v1392 = (double *)*((void *)a3 + 2);
                      v1393 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1394 = *v1391++;
                        unint64_t v1395 = (unint64_t)v1394;
                        double v1396 = *v1392++;
                        *v1393++ = v1395 == (unint64_t)v1396;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    v401 = (double *)*((void *)a2 + 2);
                    v402 = (double *)*((void *)a3 + 2);
                    v403 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v404 = *v401++;
                      unint64_t v405 = (unint64_t)v404;
                      double v406 = *v402++;
                      *v403++ = v405 == (unint64_t)v406;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1019 = (double *)*((void *)a2 + 2);
                      v1020 = (double *)*((void *)a3 + 2);
                      v1021 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1022 = *v1019++;
                        double v1023 = v1022;
                        double v1024 = *v1020++;
                        if (v1023 == v1024) {
                          double v1025 = 1.0;
                        }
                        else {
                          double v1025 = 0.0;
                        }
                        *v1021++ = v1025;
                        --v5;
                      }

                      while (v5);
                    }
                  }

                  else if (!a5 && v5)
                  {
                    int v9 = (double *)*((void *)a2 + 2);
                    unint64_t v10 = (double *)*((void *)a3 + 2);
                    double v11 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v12 = *v9++;
                      double v13 = v12;
                      double v14 = *v10++;
                      if (v13 == v14) {
                        double v15 = 1.0;
                      }
                      else {
                        double v15 = 0.0;
                      }
                      *v11++ = v15;
                      --v5;
                    }

                    while (v5);
                  }

                  break;
              }

              break;
          }
        }

        return a4;
      }

      return result;
    case 1:
      unint64_t result = 0LL;
      if (a2 && a3 && a4)
      {
        if (*((_BYTE *)a4 + 32)) {
          return 0LL;
        }
        uint64_t v16 = *((void *)a2 + 1);
        if (v16 != *((void *)a3 + 1) || v16 != *((void *)a4 + 1)) {
          return 0LL;
        }
        int v17 = *a2;
        int v18 = *a3;
        int v19 = *a4;
        if (*a2 == 2)
        {
          switch(v18)
          {
            case 2:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1774 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1775 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1776 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1778 = *v1774++;
                        int v1777 = v1778;
                        int v1779 = *v1775++;
                        *v1776++ = v1777 != v1779;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    v784 = (unsigned __int8 *)*((void *)a2 + 2);
                    v785 = (unsigned __int8 *)*((void *)a3 + 2);
                    v786 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v788 = *v784++;
                      int v787 = v788;
                      int v789 = *v785++;
                      *v786++ = v787 != v789;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1780 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1781 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1782 = (void *)*((void *)a4 + 2);
                      do
                      {
                        int v1784 = *v1780++;
                        int v1783 = v1784;
                        int v1785 = *v1781++;
                        *v1782++ = v1783 != v1785;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    v790 = (unsigned __int8 *)*((void *)a2 + 2);
                    v791 = (unsigned __int8 *)*((void *)a3 + 2);
                    v792 = (void *)*((void *)a4 + 2);
                    do
                    {
                      int v794 = *v790++;
                      int v793 = v794;
                      int v795 = *v791++;
                      *v792++ = v793 != v795;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1250 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1251 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1252 = (double *)*((void *)a4 + 2);
                      do
                      {
                        int v1254 = *v1250++;
                        int v1253 = v1254;
                        int v1255 = *v1251++;
                        if (v1253 == v1255) {
                          double v1256 = 0.0;
                        }
                        else {
                          double v1256 = 1.0;
                        }
                        *v1252++ = v1256;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    v260 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v261 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v262 = (double *)*((void *)a4 + 2);
                    do
                    {
                      int v264 = *v260++;
                      int v263 = v264;
                      int v265 = *v261++;
                      if (v263 == v265) {
                        double v266 = 0.0;
                      }
                      else {
                        double v266 = 1.0;
                      }
                      *v262++ = v266;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
              }

              break;
            case 1:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1786 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1787 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1788 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1790 = *v1786++;
                        int v1789 = v1790;
                        int v1791 = *v1787;
                        v1787 += 8;
                        *v1788++ = v1789 != v1791;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    v796 = (unsigned __int8 *)*((void *)a2 + 2);
                    v797 = (unsigned __int8 *)*((void *)a3 + 2);
                    v798 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v800 = *v796++;
                      int v799 = v800;
                      int v801 = *v797;
                      v797 += 8;
                      *v798++ = v799 != v801;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1792 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1793 = (uint64_t *)*((void *)a3 + 2);
                      v1794 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1796 = *v1792++;
                        uint64_t v1795 = v1796;
                        uint64_t v1797 = *v1793++;
                        *v1794++ = v1797 != v1795;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    v802 = (unsigned __int8 *)*((void *)a2 + 2);
                    v803 = (uint64_t *)*((void *)a3 + 2);
                    v804 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v806 = *v802++;
                      uint64_t v805 = v806;
                      uint64_t v807 = *v803++;
                      *v804++ = v807 != v805;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1257 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1258 = (unint64_t *)*((void *)a3 + 2);
                      v1259 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1260 = *v1257++;
                        double v1261 = (double)v1260;
                        unint64_t v1262 = *v1258++;
                        else {
                          double v1263 = 1.0;
                        }
                        *v1259++ = v1263;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    unint64_t v267 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v268 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v269 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v270 = *v267++;
                      double v271 = (double)v270;
                      unint64_t v272 = *v268++;
                      else {
                        double v273 = 1.0;
                      }
                      *v269++ = v273;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
              }

              break;
            case 0:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1481 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1482 = (double *)*((void *)a3 + 2);
                      v1483 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1485 = *v1481++;
                        int v1484 = v1485;
                        double v1486 = *v1482++;
                        *v1483++ = v1484 != (int)v1486;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    v491 = (unsigned __int8 *)*((void *)a2 + 2);
                    v492 = (double *)*((void *)a3 + 2);
                    v493 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v495 = *v491++;
                      int v494 = v495;
                      double v496 = *v492++;
                      *v493++ = v494 != (int)v496;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1487 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1488 = (double *)*((void *)a3 + 2);
                      v1489 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1491 = *v1487++;
                        uint64_t v1490 = v1491;
                        double v1492 = *v1488++;
                        *v1489++ = v1490 != (unint64_t)v1492;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    v497 = (unsigned __int8 *)*((void *)a2 + 2);
                    v498 = (double *)*((void *)a3 + 2);
                    v499 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v501 = *v497++;
                      uint64_t v500 = v501;
                      double v502 = *v498++;
                      *v499++ = v500 != (unint64_t)v502;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1075 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1076 = (double *)*((void *)a3 + 2);
                      v1077 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1078 = *v1075++;
                        double v1079 = (double)v1078;
                        double v1080 = *v1076++;
                        if (v1080 == v1079) {
                          double v1081 = 0.0;
                        }
                        else {
                          double v1081 = 1.0;
                        }
                        *v1077++ = v1081;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    unint64_t v85 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v86 = (double *)*((void *)a3 + 2);
                    char v87 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v88 = *v85++;
                      double v89 = (double)v88;
                      double v90 = *v86++;
                      if (v90 == v89) {
                        double v91 = 0.0;
                      }
                      else {
                        double v91 = 1.0;
                      }
                      *v87++ = v91;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
              }

              break;
          }
        }

        else if (v17 == 1)
        {
          switch(v18)
          {
            case 2:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1798 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1799 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1800 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1802 = *v1798;
                        v1798 += 8;
                        int v1801 = v1802;
                        int v1803 = *v1799++;
                        *v1800++ = v1803 != v1801;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    v808 = (unsigned __int8 *)*((void *)a2 + 2);
                    v809 = (unsigned __int8 *)*((void *)a3 + 2);
                    v810 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v812 = *v808;
                      v808 += 8;
                      int v811 = v812;
                      int v813 = *v809++;
                      *v810++ = v813 != v811;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1804 = (uint64_t *)*((void *)a2 + 2);
                      v1805 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1806 = (void *)*((void *)a4 + 2);
                      do
                      {
                        uint64_t v1808 = *v1804++;
                        uint64_t v1807 = v1808;
                        LODWORD(v1808) = *v1805++;
                        *v1806++ = v1807 != v1808;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    v814 = (uint64_t *)*((void *)a2 + 2);
                    v815 = (unsigned __int8 *)*((void *)a3 + 2);
                    v816 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v818 = *v814++;
                      uint64_t v817 = v818;
                      LODWORD(v818) = *v815++;
                      *v816++ = v817 != v818;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1264 = (unint64_t *)*((void *)a2 + 2);
                      v1265 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1266 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1267 = *v1264++;
                        unint64_t v1268 = v1267;
                        LODWORD(v1267) = *v1265++;
                        else {
                          double v1269 = 1.0;
                        }
                        *v1266++ = v1269;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    uint64_t v274 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v275 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v276 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v277 = *v274++;
                      unint64_t v278 = v277;
                      LODWORD(v277) = *v275++;
                      else {
                        double v279 = 1.0;
                      }
                      *v276++ = v279;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
              }

              break;
            case 1:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1809 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1810 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1811 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1813 = *v1809;
                        v1809 += 8;
                        int v1812 = v1813;
                        int v1814 = *v1810;
                        v1810 += 8;
                        *v1811++ = v1812 != v1814;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    v819 = (unsigned __int8 *)*((void *)a2 + 2);
                    v820 = (unsigned __int8 *)*((void *)a3 + 2);
                    v821 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v823 = *v819;
                      v819 += 8;
                      int v822 = v823;
                      int v824 = *v820;
                      v820 += 8;
                      *v821++ = v822 != v824;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1815 = (uint64_t *)*((void *)a2 + 2);
                      v1816 = (uint64_t *)*((void *)a3 + 2);
                      v1817 = (void *)*((void *)a4 + 2);
                      do
                      {
                        uint64_t v1819 = *v1815++;
                        uint64_t v1818 = v1819;
                        uint64_t v1820 = *v1816++;
                        *v1817++ = v1818 != v1820;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    v825 = (uint64_t *)*((void *)a2 + 2);
                    v826 = (uint64_t *)*((void *)a3 + 2);
                    v827 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v829 = *v825++;
                      uint64_t v828 = v829;
                      uint64_t v830 = *v826++;
                      *v827++ = v828 != v830;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1270 = (unint64_t *)*((void *)a2 + 2);
                      v1271 = (unint64_t *)*((void *)a3 + 2);
                      v1272 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1273 = *v1270++;
                        double v1274 = (double)v1273;
                        unint64_t v1275 = *v1271++;
                        else {
                          double v1276 = 1.0;
                        }
                        *v1272++ = v1276;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    char v280 = (unint64_t *)*((void *)a2 + 2);
                    v281 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v282 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v283 = *v280++;
                      double v284 = (double)v283;
                      unint64_t v285 = *v281++;
                      else {
                        double v286 = 1.0;
                      }
                      *v282++ = v286;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
              }

              break;
            case 0:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1493 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1494 = (double *)*((void *)a3 + 2);
                      v1495 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        int v1497 = *v1493;
                        v1493 += 8;
                        int v1496 = v1497;
                        double v1498 = *v1494++;
                        *v1495++ = v1496 != (int)v1498;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    v503 = (unsigned __int8 *)*((void *)a2 + 2);
                    v504 = (double *)*((void *)a3 + 2);
                    v505 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      int v507 = *v503;
                      v503 += 8;
                      int v506 = v507;
                      double v508 = *v504++;
                      *v505++ = v506 != (int)v508;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1499 = (uint64_t *)*((void *)a2 + 2);
                      v1500 = (double *)*((void *)a3 + 2);
                      v1501 = (void *)*((void *)a4 + 2);
                      do
                      {
                        uint64_t v1503 = *v1499++;
                        uint64_t v1502 = v1503;
                        double v1504 = *v1500++;
                        *v1501++ = v1502 != (unint64_t)v1504;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    v509 = (uint64_t *)*((void *)a2 + 2);
                    v510 = (double *)*((void *)a3 + 2);
                    v511 = (void *)*((void *)a4 + 2);
                    do
                    {
                      uint64_t v513 = *v509++;
                      uint64_t v512 = v513;
                      double v514 = *v510++;
                      *v511++ = v512 != (unint64_t)v514;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1082 = (unint64_t *)*((void *)a2 + 2);
                      v1083 = (double *)*((void *)a3 + 2);
                      v1084 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1085 = *v1082++;
                        unint64_t v1086 = v1085;
                        double v1087 = *v1083++;
                        else {
                          double v1088 = 1.0;
                        }
                        *v1084++ = v1088;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    uint64_t v92 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v93 = (double *)*((void *)a3 + 2);
                    char v94 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v95 = *v92++;
                      unint64_t v96 = v95;
                      double v97 = *v93++;
                      else {
                        double v98 = 1.0;
                      }
                      *v94++ = v98;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
              }

              break;
          }
        }

        else if (!v17)
        {
          switch(v18)
          {
            case 2:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1622 = (double *)*((void *)a2 + 2);
                      v1623 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1624 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1625 = *v1622++;
                        int v1626 = (int)v1625;
                        LODWORD(v1625) = *v1623++;
                        *v1624++ = LODWORD(v1625) != v1626;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    v632 = (double *)*((void *)a2 + 2);
                    v633 = (unsigned __int8 *)*((void *)a3 + 2);
                    v634 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v635 = *v632++;
                      int v636 = (int)v635;
                      LODWORD(v635) = *v633++;
                      *v634++ = LODWORD(v635) != v636;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1627 = (double *)*((void *)a2 + 2);
                      v1628 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1629 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1630 = *v1627++;
                        unint64_t v1631 = (unint64_t)v1630;
                        LODWORD(v1630) = *v1628++;
                        *v1629++ = v1631 != LODWORD(v1630);
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    v637 = (double *)*((void *)a2 + 2);
                    v638 = (unsigned __int8 *)*((void *)a3 + 2);
                    v639 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v640 = *v637++;
                      unint64_t v641 = (unint64_t)v640;
                      LODWORD(v640) = *v638++;
                      *v639++ = v641 != LODWORD(v640);
                      --v16;
                    }

                    while (v16);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1158 = (double *)*((void *)a2 + 2);
                      v1159 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1160 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1161 = *v1158++;
                        double v1162 = v1161;
                        LODWORD(v1161) = *v1159++;
                        else {
                          double v1163 = 1.0;
                        }
                        *v1160++ = v1163;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    unint64_t v168 = (double *)*((void *)a2 + 2);
                    unsigned int v169 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v170 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v171 = *v168++;
                      double v172 = v171;
                      LODWORD(v171) = *v169++;
                      else {
                        double v173 = 1.0;
                      }
                      *v170++ = v173;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
              }

              break;
            case 1:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1632 = (double *)*((void *)a2 + 2);
                      v1633 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1634 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1635 = *v1632++;
                        int v1636 = (int)v1635;
                        LODWORD(v1635) = *v1633;
                        v1633 += 8;
                        *v1634++ = v1636 != LODWORD(v1635);
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    v642 = (double *)*((void *)a2 + 2);
                    v643 = (unsigned __int8 *)*((void *)a3 + 2);
                    v644 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v645 = *v642++;
                      int v646 = (int)v645;
                      LODWORD(v645) = *v643;
                      v643 += 8;
                      *v644++ = v646 != LODWORD(v645);
                      --v16;
                    }

                    while (v16);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1637 = (double *)*((void *)a2 + 2);
                      v1638 = (uint64_t *)*((void *)a3 + 2);
                      v1639 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1640 = *v1637++;
                        unint64_t v1641 = (unint64_t)v1640;
                        uint64_t v1642 = *v1638++;
                        *v1639++ = v1642 != v1641;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    v647 = (double *)*((void *)a2 + 2);
                    v648 = (uint64_t *)*((void *)a3 + 2);
                    v649 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v650 = *v647++;
                      unint64_t v651 = (unint64_t)v650;
                      uint64_t v652 = *v648++;
                      *v649++ = v652 != v651;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1164 = (double *)*((void *)a2 + 2);
                      v1165 = (unint64_t *)*((void *)a3 + 2);
                      v1166 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1167 = *v1164++;
                        double v1168 = v1167;
                        unint64_t v1169 = *v1165++;
                        else {
                          double v1170 = 1.0;
                        }
                        *v1166++ = v1170;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    unsigned int v174 = (double *)*((void *)a2 + 2);
                    double v175 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v176 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v177 = *v174++;
                      double v178 = v177;
                      unint64_t v179 = *v175++;
                      else {
                        double v180 = 1.0;
                      }
                      *v176++ = v180;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
              }

              break;
            case 0:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1397 = (double *)*((void *)a2 + 2);
                      v1398 = (double *)*((void *)a3 + 2);
                      v1399 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1400 = *v1397++;
                        int v1401 = (int)v1400;
                        double v1402 = *v1398++;
                        *v1399++ = v1401 != (int)v1402;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    v407 = (double *)*((void *)a2 + 2);
                    v408 = (double *)*((void *)a3 + 2);
                    v409 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v410 = *v407++;
                      int v411 = (int)v410;
                      double v412 = *v408++;
                      *v409++ = v411 != (int)v412;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1403 = (double *)*((void *)a2 + 2);
                      v1404 = (double *)*((void *)a3 + 2);
                      v1405 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1406 = *v1403++;
                        unint64_t v1407 = (unint64_t)v1406;
                        double v1408 = *v1404++;
                        *v1405++ = v1407 != (unint64_t)v1408;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    v413 = (double *)*((void *)a2 + 2);
                    v414 = (double *)*((void *)a3 + 2);
                    v415 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v416 = *v413++;
                      unint64_t v417 = (unint64_t)v416;
                      double v418 = *v414++;
                      *v415++ = v417 != (unint64_t)v418;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1026 = (double *)*((void *)a2 + 2);
                      v1027 = (double *)*((void *)a3 + 2);
                      v1028 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1029 = *v1026++;
                        double v1030 = v1029;
                        double v1031 = *v1027++;
                        if (v1030 == v1031) {
                          double v1032 = 0.0;
                        }
                        else {
                          double v1032 = 1.0;
                        }
                        *v1028++ = v1032;
                        --v16;
                      }

                      while (v16);
                    }
                  }

                  else if (!a5 && v16)
                  {
                    unint64_t v20 = (double *)*((void *)a2 + 2);
                    double v21 = (double *)*((void *)a3 + 2);
                    double v22 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v23 = *v20++;
                      double v24 = v23;
                      double v25 = *v21++;
                      if (v24 == v25) {
                        double v26 = 0.0;
                      }
                      else {
                        double v26 = 1.0;
                      }
                      *v22++ = v26;
                      --v16;
                    }

                    while (v16);
                  }

                  break;
              }

              break;
          }
        }

        return a4;
      }

      return result;
    case 2:
      unint64_t result = 0LL;
      if (a2 && a3 && a4)
      {
        if (*((_BYTE *)a4 + 32)) {
          return 0LL;
        }
        uint64_t v27 = *((void *)a2 + 1);
        if (v27 != *((void *)a3 + 1) || v27 != *((void *)a4 + 1)) {
          return 0LL;
        }
        int v28 = *a2;
        int v29 = *a3;
        int v30 = *a4;
        if (*a2 == 2)
        {
          switch(v29)
          {
            case 2:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1821 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1822 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1823 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1825 = *v1821++;
                        unsigned int v1824 = v1825;
                        unsigned int v1826 = *v1822++;
                        *v1823++ = v1824 < v1826;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    v831 = (unsigned __int8 *)*((void *)a2 + 2);
                    v832 = (unsigned __int8 *)*((void *)a3 + 2);
                    v833 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v835 = *v831++;
                      unsigned int v834 = v835;
                      unsigned int v836 = *v832++;
                      *v833++ = v834 < v836;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1827 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1828 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1829 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1831 = *v1827++;
                        unsigned int v1830 = v1831;
                        unsigned int v1832 = *v1828++;
                        *v1829++ = v1830 < v1832;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    v837 = (unsigned __int8 *)*((void *)a2 + 2);
                    v838 = (unsigned __int8 *)*((void *)a3 + 2);
                    v839 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v841 = *v837++;
                      unsigned int v840 = v841;
                      unsigned int v842 = *v838++;
                      *v839++ = v840 < v842;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1277 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1278 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1279 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1281 = *v1277++;
                        unsigned int v1280 = v1281;
                        unsigned int v1282 = *v1278++;
                        if (v1280 >= v1282) {
                          double v1283 = 0.0;
                        }
                        else {
                          double v1283 = 1.0;
                        }
                        *v1279++ = v1283;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    v287 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v288 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v289 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v291 = *v287++;
                      unsigned int v290 = v291;
                      unsigned int v292 = *v288++;
                      if (v290 >= v292) {
                        double v293 = 0.0;
                      }
                      else {
                        double v293 = 1.0;
                      }
                      *v289++ = v293;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
              }

              break;
            case 1:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1833 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1834 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1835 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1837 = *v1833++;
                        unsigned int v1836 = v1837;
                        unsigned int v1838 = *v1834;
                        v1834 += 8;
                        *v1835++ = v1836 < v1838;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    v843 = (unsigned __int8 *)*((void *)a2 + 2);
                    v844 = (unsigned __int8 *)*((void *)a3 + 2);
                    v845 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v847 = *v843++;
                      unsigned int v846 = v847;
                      unsigned int v848 = *v844;
                      v844 += 8;
                      *v845++ = v846 < v848;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1839 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1840 = (unint64_t *)*((void *)a3 + 2);
                      v1841 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1843 = *v1839++;
                        unint64_t v1842 = v1843;
                        unint64_t v1844 = *v1840++;
                        *v1841++ = v1844 > v1842;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    v849 = (unsigned __int8 *)*((void *)a2 + 2);
                    v850 = (unint64_t *)*((void *)a3 + 2);
                    v851 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v853 = *v849++;
                      unint64_t v852 = v853;
                      unint64_t v854 = *v850++;
                      *v851++ = v854 > v852;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1284 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1285 = (unint64_t *)*((void *)a3 + 2);
                      v1286 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1287 = *v1284++;
                        double v1288 = (double)v1287;
                        unint64_t v1289 = *v1285++;
                        else {
                          double v1290 = 1.0;
                        }
                        *v1286++ = v1290;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    unsigned int v294 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v295 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v296 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v297 = *v294++;
                      double v298 = (double)v297;
                      unint64_t v299 = *v295++;
                      else {
                        double v300 = 1.0;
                      }
                      *v296++ = v300;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
              }

              break;
            case 0:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1505 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1506 = (double *)*((void *)a3 + 2);
                      v1507 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1509 = *v1505++;
                        unsigned int v1508 = v1509;
                        double v1510 = *v1506++;
                        *v1507++ = v1508 < (int)v1510;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    v515 = (unsigned __int8 *)*((void *)a2 + 2);
                    v516 = (double *)*((void *)a3 + 2);
                    v517 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v519 = *v515++;
                      unsigned int v518 = v519;
                      double v520 = *v516++;
                      *v517++ = v518 < (int)v520;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1511 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1512 = (double *)*((void *)a3 + 2);
                      v1513 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1515 = *v1511++;
                        unint64_t v1514 = v1515;
                        double v1516 = *v1512++;
                        *v1513++ = v1514 < (unint64_t)v1516;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    v521 = (unsigned __int8 *)*((void *)a2 + 2);
                    v522 = (double *)*((void *)a3 + 2);
                    v523 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v525 = *v521++;
                      unint64_t v524 = v525;
                      double v526 = *v522++;
                      *v523++ = v524 < (unint64_t)v526;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1089 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1090 = (double *)*((void *)a3 + 2);
                      v1091 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1092 = *v1089++;
                        double v1093 = (double)v1092;
                        double v1094 = *v1090++;
                        if (v1094 <= v1093) {
                          double v1095 = 0.0;
                        }
                        else {
                          double v1095 = 1.0;
                        }
                        *v1091++ = v1095;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    double v99 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v100 = (double *)*((void *)a3 + 2);
                    unsigned int v101 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v102 = *v99++;
                      double v103 = (double)v102;
                      double v104 = *v100++;
                      if (v104 <= v103) {
                        double v105 = 0.0;
                      }
                      else {
                        double v105 = 1.0;
                      }
                      *v101++ = v105;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
              }

              break;
          }
        }

        else if (v28 == 1)
        {
          switch(v29)
          {
            case 2:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1845 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1846 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1847 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1849 = *v1845;
                        v1845 += 8;
                        unsigned int v1848 = v1849;
                        unsigned int v1850 = *v1846++;
                        *v1847++ = v1850 > v1848;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    v855 = (unsigned __int8 *)*((void *)a2 + 2);
                    v856 = (unsigned __int8 *)*((void *)a3 + 2);
                    v857 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v859 = *v855;
                      v855 += 8;
                      unsigned int v858 = v859;
                      unsigned int v860 = *v856++;
                      *v857++ = v860 > v858;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1851 = (unint64_t *)*((void *)a2 + 2);
                      v1852 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1853 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1855 = *v1851++;
                        unint64_t v1854 = v1855;
                        LODWORD(v1855) = *v1852++;
                        *v1853++ = v1854 < v1855;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    v861 = (unint64_t *)*((void *)a2 + 2);
                    v862 = (unsigned __int8 *)*((void *)a3 + 2);
                    v863 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v865 = *v861++;
                      unint64_t v864 = v865;
                      LODWORD(v865) = *v862++;
                      *v863++ = v864 < v865;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1291 = (unint64_t *)*((void *)a2 + 2);
                      v1292 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1293 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1294 = *v1291++;
                        unint64_t v1295 = v1294;
                        LODWORD(v1294) = *v1292++;
                        else {
                          double v1296 = 1.0;
                        }
                        *v1293++ = v1296;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    unint64_t v301 = (unint64_t *)*((void *)a2 + 2);
                    char v302 = (unsigned __int8 *)*((void *)a3 + 2);
                    double v303 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v304 = *v301++;
                      unint64_t v305 = v304;
                      LODWORD(v304) = *v302++;
                      else {
                        double v306 = 1.0;
                      }
                      *v303++ = v306;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
              }

              break;
            case 1:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1856 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1857 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1858 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1860 = *v1856;
                        v1856 += 8;
                        unsigned int v1859 = v1860;
                        unsigned int v1861 = *v1857;
                        v1857 += 8;
                        *v1858++ = v1859 < v1861;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    v866 = (unsigned __int8 *)*((void *)a2 + 2);
                    v867 = (unsigned __int8 *)*((void *)a3 + 2);
                    v868 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v870 = *v866;
                      v866 += 8;
                      unsigned int v869 = v870;
                      unsigned int v871 = *v867;
                      v867 += 8;
                      *v868++ = v869 < v871;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1862 = (unint64_t *)*((void *)a2 + 2);
                      v1863 = (unint64_t *)*((void *)a3 + 2);
                      v1864 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1866 = *v1862++;
                        unint64_t v1865 = v1866;
                        unint64_t v1867 = *v1863++;
                        *v1864++ = v1865 < v1867;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    v872 = (unint64_t *)*((void *)a2 + 2);
                    v873 = (unint64_t *)*((void *)a3 + 2);
                    v874 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v876 = *v872++;
                      unint64_t v875 = v876;
                      unint64_t v877 = *v873++;
                      *v874++ = v875 < v877;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1297 = (unint64_t *)*((void *)a2 + 2);
                      v1298 = (unint64_t *)*((void *)a3 + 2);
                      v1299 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1300 = *v1297++;
                        double v1301 = (double)v1300;
                        unint64_t v1302 = *v1298++;
                        else {
                          double v1303 = 1.0;
                        }
                        *v1299++ = v1303;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    unsigned int v307 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v308 = (unint64_t *)*((void *)a3 + 2);
                    double v309 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v310 = *v307++;
                      double v311 = (double)v310;
                      unint64_t v312 = *v308++;
                      else {
                        double v313 = 1.0;
                      }
                      *v309++ = v313;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
              }

              break;
            case 0:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1517 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1518 = (double *)*((void *)a3 + 2);
                      v1519 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1521 = *v1517;
                        v1517 += 8;
                        unsigned int v1520 = v1521;
                        double v1522 = *v1518++;
                        *v1519++ = v1520 < (int)v1522;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    v527 = (unsigned __int8 *)*((void *)a2 + 2);
                    v528 = (double *)*((void *)a3 + 2);
                    v529 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v531 = *v527;
                      v527 += 8;
                      unsigned int v530 = v531;
                      double v532 = *v528++;
                      *v529++ = v530 < (int)v532;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1523 = (unint64_t *)*((void *)a2 + 2);
                      v1524 = (double *)*((void *)a3 + 2);
                      v1525 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1527 = *v1523++;
                        unint64_t v1526 = v1527;
                        double v1528 = *v1524++;
                        *v1525++ = v1526 < (unint64_t)v1528;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    v533 = (unint64_t *)*((void *)a2 + 2);
                    v534 = (double *)*((void *)a3 + 2);
                    v535 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v537 = *v533++;
                      unint64_t v536 = v537;
                      double v538 = *v534++;
                      *v535++ = v536 < (unint64_t)v538;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1096 = (unint64_t *)*((void *)a2 + 2);
                      v1097 = (double *)*((void *)a3 + 2);
                      v1098 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1099 = *v1096++;
                        unint64_t v1100 = v1099;
                        double v1101 = *v1097++;
                        else {
                          double v1102 = 1.0;
                        }
                        *v1098++ = v1102;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    double v106 = (unint64_t *)*((void *)a2 + 2);
                    int v107 = (double *)*((void *)a3 + 2);
                    unint64_t v108 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v109 = *v106++;
                      unint64_t v110 = v109;
                      double v111 = *v107++;
                      else {
                        double v112 = 1.0;
                      }
                      *v108++ = v112;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
              }

              break;
          }
        }

        else if (!v28)
        {
          switch(v29)
          {
            case 2:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1643 = (double *)*((void *)a2 + 2);
                      v1644 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1645 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1646 = *v1643++;
                        unsigned int v1647 = (int)v1646;
                        LODWORD(v1646) = *v1644++;
                        *v1645++ = LODWORD(v1646) > v1647;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    v653 = (double *)*((void *)a2 + 2);
                    v654 = (unsigned __int8 *)*((void *)a3 + 2);
                    v655 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v656 = *v653++;
                      unsigned int v657 = (int)v656;
                      LODWORD(v6sub_4E2C(v1 + 56) = *v654++;
                      *v655++ = LODWORD(v656) > v657;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1648 = (double *)*((void *)a2 + 2);
                      v1649 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1650 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1651 = *v1648++;
                        unint64_t v1652 = (unint64_t)v1651;
                        LODWORD(v1651) = *v1649++;
                        *v1650++ = v1652 < LODWORD(v1651);
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    v658 = (double *)*((void *)a2 + 2);
                    v659 = (unsigned __int8 *)*((void *)a3 + 2);
                    v660 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v661 = *v658++;
                      unint64_t v662 = (unint64_t)v661;
                      LODWORD(v661) = *v659++;
                      *v660++ = v662 < LODWORD(v661);
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1171 = (double *)*((void *)a2 + 2);
                      v1172 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1173 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1174 = *v1171++;
                        double v1175 = v1174;
                        LODWORD(v1174) = *v1172++;
                        else {
                          double v1176 = 1.0;
                        }
                        *v1173++ = v1176;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    int v181 = (double *)*((void *)a2 + 2);
                    double v182 = (unsigned __int8 *)*((void *)a3 + 2);
                    char v183 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v184 = *v181++;
                      double v185 = v184;
                      LODWORD(v184) = *v182++;
                      else {
                        double v186 = 1.0;
                      }
                      *v183++ = v186;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
              }

              break;
            case 1:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1653 = (double *)*((void *)a2 + 2);
                      v1654 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1655 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1656 = *v1653++;
                        unsigned int v1657 = (int)v1656;
                        LODWORD(v16sub_4E2C(v1 + 56) = *v1654;
                        v1654 += 8;
                        *v1655++ = v1657 < LODWORD(v1656);
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    v663 = (double *)*((void *)a2 + 2);
                    v664 = (unsigned __int8 *)*((void *)a3 + 2);
                    v665 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v666 = *v663++;
                      unsigned int v667 = (int)v666;
                      LODWORD(v666) = *v664;
                      v664 += 8;
                      *v665++ = v667 < LODWORD(v666);
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1658 = (double *)*((void *)a2 + 2);
                      v1659 = (unint64_t *)*((void *)a3 + 2);
                      v1660 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1661 = *v1658++;
                        unint64_t v1662 = (unint64_t)v1661;
                        unint64_t v1663 = *v1659++;
                        *v1660++ = v1663 > v1662;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    v668 = (double *)*((void *)a2 + 2);
                    v669 = (unint64_t *)*((void *)a3 + 2);
                    v670 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v671 = *v668++;
                      unint64_t v672 = (unint64_t)v671;
                      unint64_t v673 = *v669++;
                      *v670++ = v673 > v672;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1177 = (double *)*((void *)a2 + 2);
                      v1178 = (unint64_t *)*((void *)a3 + 2);
                      v1179 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1180 = *v1177++;
                        double v1181 = v1180;
                        unint64_t v1182 = *v1178++;
                        else {
                          double v1183 = 1.0;
                        }
                        *v1179++ = v1183;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    unsigned int v187 = (double *)*((void *)a2 + 2);
                    double v188 = (unint64_t *)*((void *)a3 + 2);
                    int v189 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v190 = *v187++;
                      double v191 = v190;
                      unint64_t v192 = *v188++;
                      else {
                        double v193 = 1.0;
                      }
                      *v189++ = v193;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
              }

              break;
            case 0:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1409 = (double *)*((void *)a2 + 2);
                      v1410 = (double *)*((void *)a3 + 2);
                      v1411 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1412 = *v1409++;
                        unsigned int v1413 = (int)v1412;
                        double v1414 = *v1410++;
                        *v1411++ = v1413 < (int)v1414;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    v419 = (double *)*((void *)a2 + 2);
                    v420 = (double *)*((void *)a3 + 2);
                    v421 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v422 = *v419++;
                      unsigned int v423 = (int)v422;
                      double v424 = *v420++;
                      *v421++ = v423 < (int)v424;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1415 = (double *)*((void *)a2 + 2);
                      v1416 = (double *)*((void *)a3 + 2);
                      v1417 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1418 = *v1415++;
                        unint64_t v1419 = (unint64_t)v1418;
                        double v1420 = *v1416++;
                        *v1417++ = v1419 < (unint64_t)v1420;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    v425 = (double *)*((void *)a2 + 2);
                    v426 = (double *)*((void *)a3 + 2);
                    v427 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v428 = *v425++;
                      unint64_t v429 = (unint64_t)v428;
                      double v430 = *v426++;
                      *v427++ = v429 < (unint64_t)v430;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1033 = (double *)*((void *)a2 + 2);
                      v1034 = (double *)*((void *)a3 + 2);
                      v1035 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1036 = *v1033++;
                        double v1037 = v1036;
                        double v1038 = *v1034++;
                        if (v1037 >= v1038) {
                          double v1039 = 0.0;
                        }
                        else {
                          double v1039 = 1.0;
                        }
                        *v1035++ = v1039;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a5 && v27)
                  {
                    double v31 = (double *)*((void *)a2 + 2);
                    unsigned int v32 = (double *)*((void *)a3 + 2);
                    double v33 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v34 = *v31++;
                      double v35 = v34;
                      double v36 = *v32++;
                      if (v35 >= v36) {
                        double v37 = 0.0;
                      }
                      else {
                        double v37 = 1.0;
                      }
                      *v33++ = v37;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
              }

              break;
          }
        }

        return a4;
      }

      return result;
    case 3:
      unint64_t result = 0LL;
      if (a2 && a3 && a4)
      {
        if (*((_BYTE *)a4 + 32)) {
          return 0LL;
        }
        uint64_t v38 = *((void *)a2 + 1);
        if (v38 != *((void *)a3 + 1) || v38 != *((void *)a4 + 1)) {
          return 0LL;
        }
        int v39 = *a2;
        int v40 = *a3;
        int v41 = *a4;
        if (*a2 == 2)
        {
          switch(v40)
          {
            case 2:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1868 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1869 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1870 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1872 = *v1868++;
                        unsigned int v1871 = v1872;
                        unsigned int v1873 = *v1869++;
                        *v1870++ = v1871 > v1873;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    v878 = (unsigned __int8 *)*((void *)a2 + 2);
                    v879 = (unsigned __int8 *)*((void *)a3 + 2);
                    v880 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v882 = *v878++;
                      unsigned int v881 = v882;
                      unsigned int v883 = *v879++;
                      *v880++ = v881 > v883;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1874 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1875 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1876 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1878 = *v1874++;
                        unsigned int v1877 = v1878;
                        unsigned int v1879 = *v1875++;
                        *v1876++ = v1877 > v1879;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    v884 = (unsigned __int8 *)*((void *)a2 + 2);
                    v885 = (unsigned __int8 *)*((void *)a3 + 2);
                    v886 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v888 = *v884++;
                      unsigned int v887 = v888;
                      unsigned int v889 = *v885++;
                      *v886++ = v887 > v889;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1304 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1305 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1306 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1308 = *v1304++;
                        unsigned int v1307 = v1308;
                        unsigned int v1309 = *v1305++;
                        if (v1307 <= v1309) {
                          double v1310 = 0.0;
                        }
                        else {
                          double v1310 = 1.0;
                        }
                        *v1306++ = v1310;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    char v314 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v315 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v316 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v318 = *v314++;
                      unsigned int v317 = v318;
                      unsigned int v319 = *v315++;
                      if (v317 <= v319) {
                        double v320 = 0.0;
                      }
                      else {
                        double v320 = 1.0;
                      }
                      *v316++ = v320;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
              }

              break;
            case 1:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1880 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1881 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1882 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1884 = *v1880++;
                        unsigned int v1883 = v1884;
                        unsigned int v1885 = *v1881;
                        v1881 += 8;
                        *v1882++ = v1883 > v1885;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    v890 = (unsigned __int8 *)*((void *)a2 + 2);
                    v891 = (unsigned __int8 *)*((void *)a3 + 2);
                    v892 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v894 = *v890++;
                      unsigned int v893 = v894;
                      unsigned int v895 = *v891;
                      v891 += 8;
                      *v892++ = v893 > v895;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1886 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1887 = (unint64_t *)*((void *)a3 + 2);
                      v1888 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1890 = *v1886++;
                        unint64_t v1889 = v1890;
                        unint64_t v1891 = *v1887++;
                        *v1888++ = v1891 < v1889;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    v896 = (unsigned __int8 *)*((void *)a2 + 2);
                    v897 = (unint64_t *)*((void *)a3 + 2);
                    v898 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v900 = *v896++;
                      unint64_t v899 = v900;
                      unint64_t v901 = *v897++;
                      *v898++ = v901 < v899;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1311 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1312 = (unint64_t *)*((void *)a3 + 2);
                      v1313 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1314 = *v1311++;
                        double v1315 = (double)v1314;
                        unint64_t v1316 = *v1312++;
                        else {
                          double v1317 = 1.0;
                        }
                        *v1313++ = v1317;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    double v321 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v322 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v323 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v324 = *v321++;
                      double v325 = (double)v324;
                      unint64_t v326 = *v322++;
                      else {
                        double v327 = 1.0;
                      }
                      *v323++ = v327;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
              }

              break;
            case 0:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1529 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1530 = (double *)*((void *)a3 + 2);
                      v1531 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1533 = *v1529++;
                        unsigned int v1532 = v1533;
                        double v1534 = *v1530++;
                        *v1531++ = v1532 > (int)v1534;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    v539 = (unsigned __int8 *)*((void *)a2 + 2);
                    v540 = (double *)*((void *)a3 + 2);
                    v541 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v543 = *v539++;
                      unsigned int v542 = v543;
                      double v544 = *v540++;
                      *v541++ = v542 > (int)v544;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1535 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1536 = (double *)*((void *)a3 + 2);
                      v1537 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1539 = *v1535++;
                        unint64_t v1538 = v1539;
                        double v1540 = *v1536++;
                        *v1537++ = v1538 > (unint64_t)v1540;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    v545 = (unsigned __int8 *)*((void *)a2 + 2);
                    v546 = (double *)*((void *)a3 + 2);
                    v547 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v549 = *v545++;
                      unint64_t v548 = v549;
                      double v550 = *v546++;
                      *v547++ = v548 > (unint64_t)v550;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1103 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1104 = (double *)*((void *)a3 + 2);
                      v1105 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1106 = *v1103++;
                        double v1107 = (double)v1106;
                        double v1108 = *v1104++;
                        if (v1108 >= v1107) {
                          double v1109 = 0.0;
                        }
                        else {
                          double v1109 = 1.0;
                        }
                        *v1105++ = v1109;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    unsigned int v113 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v114 = (double *)*((void *)a3 + 2);
                    double v115 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v116 = *v113++;
                      double v117 = (double)v116;
                      double v118 = *v114++;
                      if (v118 >= v117) {
                        double v119 = 0.0;
                      }
                      else {
                        double v119 = 1.0;
                      }
                      *v115++ = v119;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
              }

              break;
          }
        }

        else if (v39 == 1)
        {
          switch(v40)
          {
            case 2:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1892 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1893 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1894 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1896 = *v1892;
                        v1892 += 8;
                        unsigned int v1895 = v1896;
                        unsigned int v1897 = *v1893++;
                        *v1894++ = v1897 < v1895;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    v902 = (unsigned __int8 *)*((void *)a2 + 2);
                    v903 = (unsigned __int8 *)*((void *)a3 + 2);
                    v904 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v906 = *v902;
                      v902 += 8;
                      unsigned int v905 = v906;
                      unsigned int v907 = *v903++;
                      *v904++ = v907 < v905;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1898 = (unint64_t *)*((void *)a2 + 2);
                      v1899 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1900 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1902 = *v1898++;
                        unint64_t v1901 = v1902;
                        LODWORD(v1902) = *v1899++;
                        *v1900++ = v1901 > v1902;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    v908 = (unint64_t *)*((void *)a2 + 2);
                    v909 = (unsigned __int8 *)*((void *)a3 + 2);
                    v910 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v912 = *v908++;
                      unint64_t v911 = v912;
                      LODWORD(v912) = *v909++;
                      *v910++ = v911 > v912;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1318 = (unint64_t *)*((void *)a2 + 2);
                      v1319 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1320 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1321 = *v1318++;
                        unint64_t v1322 = v1321;
                        LODWORD(v1321) = *v1319++;
                        else {
                          double v1323 = 1.0;
                        }
                        *v1320++ = v1323;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    unsigned int v328 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v329 = (unsigned __int8 *)*((void *)a3 + 2);
                    char v330 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v331 = *v328++;
                      unint64_t v332 = v331;
                      LODWORD(v331) = *v329++;
                      else {
                        double v333 = 1.0;
                      }
                      *v330++ = v333;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
              }

              break;
            case 1:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1903 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1904 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1905 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1907 = *v1903;
                        v1903 += 8;
                        unsigned int v1906 = v1907;
                        unsigned int v1908 = *v1904;
                        v1904 += 8;
                        *v1905++ = v1906 > v1908;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    v913 = (unsigned __int8 *)*((void *)a2 + 2);
                    v914 = (unsigned __int8 *)*((void *)a3 + 2);
                    v915 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v917 = *v913;
                      v913 += 8;
                      unsigned int v916 = v917;
                      unsigned int v918 = *v914;
                      v914 += 8;
                      *v915++ = v916 > v918;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1909 = (unint64_t *)*((void *)a2 + 2);
                      v1910 = (unint64_t *)*((void *)a3 + 2);
                      v1911 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1913 = *v1909++;
                        unint64_t v1912 = v1913;
                        unint64_t v1914 = *v1910++;
                        *v1911++ = v1912 > v1914;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    v919 = (unint64_t *)*((void *)a2 + 2);
                    v920 = (unint64_t *)*((void *)a3 + 2);
                    v921 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v923 = *v919++;
                      unint64_t v922 = v923;
                      unint64_t v924 = *v920++;
                      *v921++ = v922 > v924;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1324 = (unint64_t *)*((void *)a2 + 2);
                      v1325 = (unint64_t *)*((void *)a3 + 2);
                      v1326 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1327 = *v1324++;
                        double v1328 = (double)v1327;
                        unint64_t v1329 = *v1325++;
                        else {
                          double v1330 = 1.0;
                        }
                        *v1326++ = v1330;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    v334 = (unint64_t *)*((void *)a2 + 2);
                    uint64_t v335 = (unint64_t *)*((void *)a3 + 2);
                    int v336 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v337 = *v334++;
                      double v338 = (double)v337;
                      unint64_t v339 = *v335++;
                      else {
                        double v340 = 1.0;
                      }
                      *v336++ = v340;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
              }

              break;
            case 0:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1541 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1542 = (double *)*((void *)a3 + 2);
                      v1543 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1545 = *v1541;
                        v1541 += 8;
                        unsigned int v1544 = v1545;
                        double v1546 = *v1542++;
                        *v1543++ = v1544 > (int)v1546;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    v551 = (unsigned __int8 *)*((void *)a2 + 2);
                    v552 = (double *)*((void *)a3 + 2);
                    v553 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v555 = *v551;
                      v551 += 8;
                      unsigned int v554 = v555;
                      double v556 = *v552++;
                      *v553++ = v554 > (int)v556;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1547 = (unint64_t *)*((void *)a2 + 2);
                      v1548 = (double *)*((void *)a3 + 2);
                      v1549 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1551 = *v1547++;
                        unint64_t v1550 = v1551;
                        double v1552 = *v1548++;
                        *v1549++ = v1550 > (unint64_t)v1552;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    v557 = (unint64_t *)*((void *)a2 + 2);
                    v558 = (double *)*((void *)a3 + 2);
                    v559 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v561 = *v557++;
                      unint64_t v560 = v561;
                      double v562 = *v558++;
                      *v559++ = v560 > (unint64_t)v562;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1110 = (unint64_t *)*((void *)a2 + 2);
                      v1111 = (double *)*((void *)a3 + 2);
                      v1112 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1113 = *v1110++;
                        unint64_t v1114 = v1113;
                        double v1115 = *v1111++;
                        else {
                          double v1116 = 1.0;
                        }
                        *v1112++ = v1116;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    double v120 = (unint64_t *)*((void *)a2 + 2);
                    double v121 = (double *)*((void *)a3 + 2);
                    char v122 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v123 = *v120++;
                      unint64_t v124 = v123;
                      double v125 = *v121++;
                      else {
                        double v126 = 1.0;
                      }
                      *v122++ = v126;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
              }

              break;
          }
        }

        else if (!v39)
        {
          switch(v40)
          {
            case 2:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1664 = (double *)*((void *)a2 + 2);
                      v1665 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1666 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1667 = *v1664++;
                        unsigned int v1668 = (int)v1667;
                        LODWORD(v1667) = *v1665++;
                        *v1666++ = LODWORD(v1667) < v1668;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    v674 = (double *)*((void *)a2 + 2);
                    v675 = (unsigned __int8 *)*((void *)a3 + 2);
                    v676 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v677 = *v674++;
                      unsigned int v678 = (int)v677;
                      LODWORD(v677) = *v675++;
                      *v676++ = LODWORD(v677) < v678;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1669 = (double *)*((void *)a2 + 2);
                      v1670 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1671 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1672 = *v1669++;
                        unint64_t v1673 = (unint64_t)v1672;
                        LODWORD(v1672) = *v1670++;
                        *v1671++ = v1673 > LODWORD(v1672);
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    v679 = (double *)*((void *)a2 + 2);
                    v680 = (unsigned __int8 *)*((void *)a3 + 2);
                    v681 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v682 = *v679++;
                      unint64_t v683 = (unint64_t)v682;
                      LODWORD(v682) = *v680++;
                      *v681++ = v683 > LODWORD(v682);
                      --v38;
                    }

                    while (v38);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1184 = (double *)*((void *)a2 + 2);
                      v1185 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1186 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1187 = *v1184++;
                        double v1188 = v1187;
                        LODWORD(v1187) = *v1185++;
                        else {
                          double v1189 = 1.0;
                        }
                        *v1186++ = v1189;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    unint64_t v194 = (double *)*((void *)a2 + 2);
                    double v195 = (unsigned __int8 *)*((void *)a3 + 2);
                    char v196 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v197 = *v194++;
                      double v198 = v197;
                      LODWORD(v197) = *v195++;
                      else {
                        double v199 = 1.0;
                      }
                      *v196++ = v199;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
              }

              break;
            case 1:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1674 = (double *)*((void *)a2 + 2);
                      v1675 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1676 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1677 = *v1674++;
                        unsigned int v1678 = (int)v1677;
                        LODWORD(v1677) = *v1675;
                        v1675 += 8;
                        *v1676++ = v1678 > LODWORD(v1677);
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    v684 = (double *)*((void *)a2 + 2);
                    v685 = (unsigned __int8 *)*((void *)a3 + 2);
                    v686 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v687 = *v684++;
                      unsigned int v688 = (int)v687;
                      LODWORD(v687) = *v685;
                      v685 += 8;
                      *v686++ = v688 > LODWORD(v687);
                      --v38;
                    }

                    while (v38);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1679 = (double *)*((void *)a2 + 2);
                      v1680 = (unint64_t *)*((void *)a3 + 2);
                      v1681 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1682 = *v1679++;
                        unint64_t v1683 = (unint64_t)v1682;
                        unint64_t v1684 = *v1680++;
                        *v1681++ = v1684 < v1683;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    v689 = (double *)*((void *)a2 + 2);
                    v690 = (unint64_t *)*((void *)a3 + 2);
                    v691 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v692 = *v689++;
                      unint64_t v693 = (unint64_t)v692;
                      unint64_t v694 = *v690++;
                      *v691++ = v694 < v693;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1190 = (double *)*((void *)a2 + 2);
                      v1191 = (unint64_t *)*((void *)a3 + 2);
                      v1192 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1193 = *v1190++;
                        double v1194 = v1193;
                        unint64_t v1195 = *v1191++;
                        else {
                          double v1196 = 1.0;
                        }
                        *v1192++ = v1196;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    uint64_t v200 = (double *)*((void *)a2 + 2);
                    unsigned int v201 = (unint64_t *)*((void *)a3 + 2);
                    double v202 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v203 = *v200++;
                      double v204 = v203;
                      unint64_t v205 = *v201++;
                      else {
                        double v206 = 1.0;
                      }
                      *v202++ = v206;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
              }

              break;
            case 0:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1421 = (double *)*((void *)a2 + 2);
                      v1422 = (double *)*((void *)a3 + 2);
                      v1423 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1424 = *v1421++;
                        unsigned int v1425 = (int)v1424;
                        double v1426 = *v1422++;
                        *v1423++ = v1425 > (int)v1426;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    v431 = (double *)*((void *)a2 + 2);
                    v432 = (double *)*((void *)a3 + 2);
                    v433 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v434 = *v431++;
                      unsigned int v435 = (int)v434;
                      double v436 = *v432++;
                      *v433++ = v435 > (int)v436;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1427 = (double *)*((void *)a2 + 2);
                      v1428 = (double *)*((void *)a3 + 2);
                      v1429 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1430 = *v1427++;
                        unint64_t v1431 = (unint64_t)v1430;
                        double v1432 = *v1428++;
                        *v1429++ = v1431 > (unint64_t)v1432;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    v437 = (double *)*((void *)a2 + 2);
                    v438 = (double *)*((void *)a3 + 2);
                    v439 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v440 = *v437++;
                      unint64_t v441 = (unint64_t)v440;
                      double v442 = *v438++;
                      *v439++ = v441 > (unint64_t)v442;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1040 = (double *)*((void *)a2 + 2);
                      v1041 = (double *)*((void *)a3 + 2);
                      v1042 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1043 = *v1040++;
                        double v1044 = v1043;
                        double v1045 = *v1041++;
                        if (v1044 <= v1045) {
                          double v1046 = 0.0;
                        }
                        else {
                          double v1046 = 1.0;
                        }
                        *v1042++ = v1046;
                        --v38;
                      }

                      while (v38);
                    }
                  }

                  else if (!a5 && v38)
                  {
                    double v42 = (double *)*((void *)a2 + 2);
                    unint64_t v43 = (double *)*((void *)a3 + 2);
                    unint64_t v44 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v45 = *v42++;
                      double v46 = v45;
                      double v47 = *v43++;
                      if (v46 <= v47) {
                        double v48 = 0.0;
                      }
                      else {
                        double v48 = 1.0;
                      }
                      *v44++ = v48;
                      --v38;
                    }

                    while (v38);
                  }

                  break;
              }

              break;
          }
        }

        return a4;
      }

      return result;
    case 4:
      unint64_t result = 0LL;
      if (a2 && a3 && a4)
      {
        if (*((_BYTE *)a4 + 32)) {
          return 0LL;
        }
        uint64_t v49 = *((void *)a2 + 1);
        if (v49 != *((void *)a3 + 1) || v49 != *((void *)a4 + 1)) {
          return 0LL;
        }
        int v50 = *a2;
        int v51 = *a3;
        int v52 = *a4;
        if (*a2 == 2)
        {
          switch(v51)
          {
            case 2:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1915 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1916 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1917 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1919 = *v1915++;
                        unsigned int v1918 = v1919;
                        unsigned int v1920 = *v1916++;
                        *v1917++ = v1918 <= v1920;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    v925 = (unsigned __int8 *)*((void *)a2 + 2);
                    v926 = (unsigned __int8 *)*((void *)a3 + 2);
                    v927 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v929 = *v925++;
                      unsigned int v928 = v929;
                      unsigned int v930 = *v926++;
                      *v927++ = v928 <= v930;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1921 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1922 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1923 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1925 = *v1921++;
                        unsigned int v1924 = v1925;
                        unsigned int v1926 = *v1922++;
                        *v1923++ = v1924 <= v1926;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    v931 = (unsigned __int8 *)*((void *)a2 + 2);
                    v932 = (unsigned __int8 *)*((void *)a3 + 2);
                    v933 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v935 = *v931++;
                      unsigned int v934 = v935;
                      unsigned int v936 = *v932++;
                      *v933++ = v934 <= v936;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1331 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1332 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1333 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1335 = *v1331++;
                        unsigned int v1334 = v1335;
                        unsigned int v1336 = *v1332++;
                        if (v1334 > v1336) {
                          double v1337 = 0.0;
                        }
                        else {
                          double v1337 = 1.0;
                        }
                        *v1333++ = v1337;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    v341 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v342 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v343 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v345 = *v341++;
                      unsigned int v344 = v345;
                      unsigned int v346 = *v342++;
                      if (v344 > v346) {
                        double v347 = 0.0;
                      }
                      else {
                        double v347 = 1.0;
                      }
                      *v343++ = v347;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
              }

              break;
            case 1:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1927 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1928 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1929 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1931 = *v1927++;
                        unsigned int v1930 = v1931;
                        unsigned int v1932 = *v1928;
                        v1928 += 8;
                        *v1929++ = v1930 <= v1932;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    v937 = (unsigned __int8 *)*((void *)a2 + 2);
                    v938 = (unsigned __int8 *)*((void *)a3 + 2);
                    v939 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v941 = *v937++;
                      unsigned int v940 = v941;
                      unsigned int v942 = *v938;
                      v938 += 8;
                      *v939++ = v940 <= v942;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1933 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1934 = (unint64_t *)*((void *)a3 + 2);
                      v1935 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1937 = *v1933++;
                        unint64_t v1936 = v1937;
                        unint64_t v1938 = *v1934++;
                        *v1935++ = v1938 >= v1936;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    v943 = (unsigned __int8 *)*((void *)a2 + 2);
                    v944 = (unint64_t *)*((void *)a3 + 2);
                    v945 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v947 = *v943++;
                      unint64_t v946 = v947;
                      unint64_t v948 = *v944++;
                      *v945++ = v948 >= v946;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1338 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1339 = (unint64_t *)*((void *)a3 + 2);
                      v1340 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1341 = *v1338++;
                        double v1342 = (double)v1341;
                        unint64_t v1343 = *v1339++;
                        else {
                          double v1344 = 1.0;
                        }
                        *v1340++ = v1344;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    unsigned int v348 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v349 = (unint64_t *)*((void *)a3 + 2);
                    unsigned int v350 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v351 = *v348++;
                      double v352 = (double)v351;
                      unint64_t v353 = *v349++;
                      else {
                        double v354 = 1.0;
                      }
                      *v350++ = v354;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
              }

              break;
            case 0:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1553 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1554 = (double *)*((void *)a3 + 2);
                      v1555 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1557 = *v1553++;
                        unsigned int v1556 = v1557;
                        double v1558 = *v1554++;
                        *v1555++ = v1556 <= (int)v1558;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    v563 = (unsigned __int8 *)*((void *)a2 + 2);
                    v564 = (double *)*((void *)a3 + 2);
                    v565 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v567 = *v563++;
                      unsigned int v566 = v567;
                      double v568 = *v564++;
                      *v565++ = v566 <= (int)v568;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1559 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1560 = (double *)*((void *)a3 + 2);
                      v1561 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1563 = *v1559++;
                        unint64_t v1562 = v1563;
                        double v1564 = *v1560++;
                        *v1561++ = v1562 <= (unint64_t)v1564;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    v569 = (unsigned __int8 *)*((void *)a2 + 2);
                    v570 = (double *)*((void *)a3 + 2);
                    v571 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v573 = *v569++;
                      unint64_t v572 = v573;
                      double v574 = *v570++;
                      *v571++ = v572 <= (unint64_t)v574;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1117 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1118 = (double *)*((void *)a3 + 2);
                      v1119 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1120 = *v1117++;
                        double v1121 = (double)v1120;
                        double v1122 = *v1118++;
                        if (v1122 < v1121) {
                          double v1123 = 0.0;
                        }
                        else {
                          double v1123 = 1.0;
                        }
                        *v1119++ = v1123;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    unint64_t v127 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v128 = (double *)*((void *)a3 + 2);
                    double v129 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v130 = *v127++;
                      double v131 = (double)v130;
                      double v132 = *v128++;
                      if (v132 < v131) {
                        double v133 = 0.0;
                      }
                      else {
                        double v133 = 1.0;
                      }
                      *v129++ = v133;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
              }

              break;
          }
        }

        else if (v50 == 1)
        {
          switch(v51)
          {
            case 2:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1939 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1940 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1941 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1943 = *v1939;
                        v1939 += 8;
                        unsigned int v1942 = v1943;
                        unsigned int v1944 = *v1940++;
                        *v1941++ = v1944 >= v1942;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    v949 = (unsigned __int8 *)*((void *)a2 + 2);
                    v950 = (unsigned __int8 *)*((void *)a3 + 2);
                    v951 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v953 = *v949;
                      v949 += 8;
                      unsigned int v952 = v953;
                      unsigned int v954 = *v950++;
                      *v951++ = v954 >= v952;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1945 = (unint64_t *)*((void *)a2 + 2);
                      v1946 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1947 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1949 = *v1945++;
                        unint64_t v1948 = v1949;
                        LODWORD(v1949) = *v1946++;
                        *v1947++ = v1948 <= v1949;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    v955 = (unint64_t *)*((void *)a2 + 2);
                    v956 = (unsigned __int8 *)*((void *)a3 + 2);
                    v957 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v959 = *v955++;
                      unint64_t v958 = v959;
                      LODWORD(v959) = *v956++;
                      *v957++ = v958 <= v959;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1345 = (unint64_t *)*((void *)a2 + 2);
                      v1346 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1347 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1348 = *v1345++;
                        unint64_t v1349 = v1348;
                        LODWORD(v1348) = *v1346++;
                        else {
                          double v1350 = 1.0;
                        }
                        *v1347++ = v1350;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    unint64_t v355 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v356 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v357 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v358 = *v355++;
                      unint64_t v359 = v358;
                      LODWORD(v358) = *v356++;
                      else {
                        double v360 = 1.0;
                      }
                      *v357++ = v360;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
              }

              break;
            case 1:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1950 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1951 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1952 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1954 = *v1950;
                        v1950 += 8;
                        unsigned int v1953 = v1954;
                        unsigned int v1955 = *v1951;
                        v1951 += 8;
                        *v1952++ = v1953 <= v1955;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    v960 = (unsigned __int8 *)*((void *)a2 + 2);
                    v961 = (unsigned __int8 *)*((void *)a3 + 2);
                    v962 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v964 = *v960;
                      v960 += 8;
                      unsigned int v963 = v964;
                      unsigned int v965 = *v961;
                      v961 += 8;
                      *v962++ = v963 <= v965;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1956 = (unint64_t *)*((void *)a2 + 2);
                      v1957 = (unint64_t *)*((void *)a3 + 2);
                      v1958 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1960 = *v1956++;
                        unint64_t v1959 = v1960;
                        unint64_t v1961 = *v1957++;
                        *v1958++ = v1959 <= v1961;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    v966 = (unint64_t *)*((void *)a2 + 2);
                    v967 = (unint64_t *)*((void *)a3 + 2);
                    v968 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v970 = *v966++;
                      unint64_t v969 = v970;
                      unint64_t v971 = *v967++;
                      *v968++ = v969 <= v971;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1351 = (unint64_t *)*((void *)a2 + 2);
                      v1352 = (unint64_t *)*((void *)a3 + 2);
                      v1353 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1354 = *v1351++;
                        double v1355 = (double)v1354;
                        unint64_t v1356 = *v1352++;
                        else {
                          double v1357 = 1.0;
                        }
                        *v1353++ = v1357;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    v361 = (unint64_t *)*((void *)a2 + 2);
                    v362 = (unint64_t *)*((void *)a3 + 2);
                    unint64_t v363 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v364 = *v361++;
                      double v365 = (double)v364;
                      unint64_t v366 = *v362++;
                      else {
                        double v367 = 1.0;
                      }
                      *v363++ = v367;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
              }

              break;
            case 0:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1565 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1566 = (double *)*((void *)a3 + 2);
                      v1567 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        unsigned int v1569 = *v1565;
                        v1565 += 8;
                        unsigned int v1568 = v1569;
                        double v1570 = *v1566++;
                        *v1567++ = v1568 <= (int)v1570;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    v575 = (unsigned __int8 *)*((void *)a2 + 2);
                    v576 = (double *)*((void *)a3 + 2);
                    v577 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v579 = *v575;
                      v575 += 8;
                      unsigned int v578 = v579;
                      double v580 = *v576++;
                      *v577++ = v578 <= (int)v580;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1571 = (unint64_t *)*((void *)a2 + 2);
                      v1572 = (double *)*((void *)a3 + 2);
                      v1573 = (void *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1575 = *v1571++;
                        unint64_t v1574 = v1575;
                        double v1576 = *v1572++;
                        *v1573++ = v1574 <= (unint64_t)v1576;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    v581 = (unint64_t *)*((void *)a2 + 2);
                    v582 = (double *)*((void *)a3 + 2);
                    v583 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v585 = *v581++;
                      unint64_t v584 = v585;
                      double v586 = *v582++;
                      *v583++ = v584 <= (unint64_t)v586;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1124 = (unint64_t *)*((void *)a2 + 2);
                      v1125 = (double *)*((void *)a3 + 2);
                      v1126 = (double *)*((void *)a4 + 2);
                      do
                      {
                        unint64_t v1127 = *v1124++;
                        unint64_t v1128 = v1127;
                        double v1129 = *v1125++;
                        else {
                          double v1130 = 1.0;
                        }
                        *v1126++ = v1130;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    char v134 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v135 = (double *)*((void *)a3 + 2);
                    double v136 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v137 = *v134++;
                      unint64_t v138 = v137;
                      double v139 = *v135++;
                      else {
                        double v140 = 1.0;
                      }
                      *v136++ = v140;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
              }

              break;
          }
        }

        else if (!v50)
        {
          switch(v51)
          {
            case 2:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1685 = (double *)*((void *)a2 + 2);
                      v1686 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1687 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1688 = *v1685++;
                        unsigned int v1689 = (int)v1688;
                        LODWORD(v1688) = *v1686++;
                        *v1687++ = LODWORD(v1688) >= v1689;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    v695 = (double *)*((void *)a2 + 2);
                    v696 = (unsigned __int8 *)*((void *)a3 + 2);
                    v697 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v698 = *v695++;
                      unsigned int v699 = (int)v698;
                      LODWORD(v698) = *v696++;
                      *v697++ = LODWORD(v698) >= v699;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1690 = (double *)*((void *)a2 + 2);
                      v1691 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1692 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1693 = *v1690++;
                        unint64_t v1694 = (unint64_t)v1693;
                        LODWORD(v1693) = *v1691++;
                        *v1692++ = v1694 <= LODWORD(v1693);
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    v700 = (double *)*((void *)a2 + 2);
                    v701 = (unsigned __int8 *)*((void *)a3 + 2);
                    v702 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v703 = *v700++;
                      unint64_t v704 = (unint64_t)v703;
                      LODWORD(v703) = *v701++;
                      *v702++ = v704 <= LODWORD(v703);
                      --v49;
                    }

                    while (v49);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1197 = (double *)*((void *)a2 + 2);
                      v1198 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1199 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1200 = *v1197++;
                        double v1201 = v1200;
                        LODWORD(v1200) = *v1198++;
                        else {
                          double v1202 = 1.0;
                        }
                        *v1199++ = v1202;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    double v207 = (double *)*((void *)a2 + 2);
                    unint64_t v208 = (unsigned __int8 *)*((void *)a3 + 2);
                    unsigned int v209 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v210 = *v207++;
                      double v211 = v210;
                      LODWORD(v210) = *v208++;
                      else {
                        double v212 = 1.0;
                      }
                      *v209++ = v212;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
              }

              break;
            case 1:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1695 = (double *)*((void *)a2 + 2);
                      v1696 = (unsigned __int8 *)*((void *)a3 + 2);
                      v1697 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1698 = *v1695++;
                        unsigned int v1699 = (int)v1698;
                        LODWORD(v1698) = *v1696;
                        v1696 += 8;
                        *v1697++ = v1699 <= LODWORD(v1698);
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    v705 = (double *)*((void *)a2 + 2);
                    v706 = (unsigned __int8 *)*((void *)a3 + 2);
                    v707 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v708 = *v705++;
                      unsigned int v709 = (int)v708;
                      LODWORD(v708) = *v706;
                      v706 += 8;
                      *v707++ = v709 <= LODWORD(v708);
                      --v49;
                    }

                    while (v49);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1700 = (double *)*((void *)a2 + 2);
                      v1701 = (unint64_t *)*((void *)a3 + 2);
                      v1702 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1703 = *v1700++;
                        unint64_t v1704 = (unint64_t)v1703;
                        unint64_t v1705 = *v1701++;
                        *v1702++ = v1705 >= v1704;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    v710 = (double *)*((void *)a2 + 2);
                    v711 = (unint64_t *)*((void *)a3 + 2);
                    v712 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v713 = *v710++;
                      unint64_t v714 = (unint64_t)v713;
                      unint64_t v715 = *v711++;
                      *v712++ = v715 >= v714;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1203 = (double *)*((void *)a2 + 2);
                      v1204 = (unint64_t *)*((void *)a3 + 2);
                      v1205 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1206 = *v1203++;
                        double v1207 = v1206;
                        unint64_t v1208 = *v1204++;
                        else {
                          double v1209 = 1.0;
                        }
                        *v1205++ = v1209;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    unsigned int v213 = (double *)*((void *)a2 + 2);
                    double v214 = (unint64_t *)*((void *)a3 + 2);
                    double v215 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v216 = *v213++;
                      double v217 = v216;
                      unint64_t v218 = *v214++;
                      else {
                        double v219 = 1.0;
                      }
                      *v215++ = v219;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
              }

              break;
            case 0:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1433 = (double *)*((void *)a2 + 2);
                      v1434 = (double *)*((void *)a3 + 2);
                      v1435 = (BOOL *)*((void *)a4 + 2);
                      do
                      {
                        double v1436 = *v1433++;
                        unsigned int v1437 = (int)v1436;
                        double v1438 = *v1434++;
                        *v1435++ = v1437 <= (int)v1438;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    v443 = (double *)*((void *)a2 + 2);
                    v444 = (double *)*((void *)a3 + 2);
                    v445 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v446 = *v443++;
                      unsigned int v447 = (int)v446;
                      double v448 = *v444++;
                      *v445++ = v447 <= (int)v448;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1439 = (double *)*((void *)a2 + 2);
                      v1440 = (double *)*((void *)a3 + 2);
                      v1441 = (void *)*((void *)a4 + 2);
                      do
                      {
                        double v1442 = *v1439++;
                        unint64_t v1443 = (unint64_t)v1442;
                        double v1444 = *v1440++;
                        *v1441++ = v1443 <= (unint64_t)v1444;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    v449 = (double *)*((void *)a2 + 2);
                    v450 = (double *)*((void *)a3 + 2);
                    v451 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v452 = *v449++;
                      unint64_t v453 = (unint64_t)v452;
                      double v454 = *v450++;
                      *v451++ = v453 <= (unint64_t)v454;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1047 = (double *)*((void *)a2 + 2);
                      v1048 = (double *)*((void *)a3 + 2);
                      v1049 = (double *)*((void *)a4 + 2);
                      do
                      {
                        double v1050 = *v1047++;
                        double v1051 = v1050;
                        double v1052 = *v1048++;
                        if (v1051 > v1052) {
                          double v1053 = 0.0;
                        }
                        else {
                          double v1053 = 1.0;
                        }
                        *v1049++ = v1053;
                        --v49;
                      }

                      while (v49);
                    }
                  }

                  else if (!a5 && v49)
                  {
                    unint64_t v53 = (double *)*((void *)a2 + 2);
                    unint64_t v54 = (double *)*((void *)a3 + 2);
                    unsigned int v55 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v56 = *v53++;
                      double v57 = v56;
                      double v58 = *v54++;
                      if (v57 > v58) {
                        double v59 = 0.0;
                      }
                      else {
                        double v59 = 1.0;
                      }
                      *v55++ = v59;
                      --v49;
                    }

                    while (v49);
                  }

                  break;
              }

              break;
          }
        }

        return a4;
      }

      return result;
    case 5:
      unint64_t result = 0LL;
      if (!a2 || !a3 || !a4) {
        return result;
      }
      if (*((_BYTE *)a4 + 32)) {
        return 0LL;
      }
      uint64_t v60 = *((void *)a2 + 1);
      if (v60 != *((void *)a3 + 1) || v60 != *((void *)a4 + 1)) {
        return 0LL;
      }
      int v61 = *a2;
      int v62 = *a3;
      int v63 = *a4;
      if (*a2 == 2)
      {
        switch(v62)
        {
          case 2:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1962 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1963 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1964 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1966 = *v1962++;
                      unsigned int v1965 = v1966;
                      unsigned int v1967 = *v1963++;
                      *v1964++ = v1965 >= v1967;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  v972 = (unsigned __int8 *)*((void *)a2 + 2);
                  v973 = (unsigned __int8 *)*((void *)a3 + 2);
                  v974 = (BOOL *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v976 = *v972++;
                    unsigned int v975 = v976;
                    unsigned int v977 = *v973++;
                    *v974++ = v975 >= v977;
                    --v60;
                  }

                  while (v60);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1968 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1969 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1970 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1972 = *v1968++;
                      unsigned int v1971 = v1972;
                      unsigned int v1973 = *v1969++;
                      *v1970++ = v1971 >= v1973;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  v978 = (unsigned __int8 *)*((void *)a2 + 2);
                  v979 = (unsigned __int8 *)*((void *)a3 + 2);
                  v980 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v982 = *v978++;
                    unsigned int v981 = v982;
                    unsigned int v983 = *v979++;
                    *v980++ = v981 >= v983;
                    --v60;
                  }

                  while (v60);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1358 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1359 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1360 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1362 = *v1358++;
                      unsigned int v1361 = v1362;
                      unsigned int v1363 = *v1359++;
                      if (v1361 < v1363) {
                        double v1364 = 0.0;
                      }
                      else {
                        double v1364 = 1.0;
                      }
                      *v1360++ = v1364;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  v368 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v369 = (unsigned __int8 *)*((void *)a3 + 2);
                  unsigned int v370 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v372 = *v368++;
                    unsigned int v371 = v372;
                    unsigned int v373 = *v369++;
                    if (v371 < v373) {
                      double v374 = 0.0;
                    }
                    else {
                      double v374 = 1.0;
                    }
                    *v370++ = v374;
                    --v60;
                  }

                  while (v60);
                }

                break;
            }

            break;
          case 1:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1974 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1975 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1976 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1978 = *v1974++;
                      unsigned int v1977 = v1978;
                      unsigned int v1979 = *v1975;
                      v1975 += 8;
                      *v1976++ = v1977 >= v1979;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  v984 = (unsigned __int8 *)*((void *)a2 + 2);
                  v985 = (unsigned __int8 *)*((void *)a3 + 2);
                  v986 = (BOOL *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v988 = *v984++;
                    unsigned int v987 = v988;
                    unsigned int v989 = *v985;
                    v985 += 8;
                    *v986++ = v987 >= v989;
                    --v60;
                  }

                  while (v60);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1980 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1981 = (unint64_t *)*((void *)a3 + 2);
                    v1982 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1984 = *v1980++;
                      unint64_t v1983 = v1984;
                      unint64_t v1985 = *v1981++;
                      *v1982++ = v1985 <= v1983;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  v990 = (unsigned __int8 *)*((void *)a2 + 2);
                  v991 = (unint64_t *)*((void *)a3 + 2);
                  v992 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v994 = *v990++;
                    unint64_t v993 = v994;
                    unint64_t v995 = *v991++;
                    *v992++ = v995 <= v993;
                    --v60;
                  }

                  while (v60);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1365 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1366 = (unint64_t *)*((void *)a3 + 2);
                    v1367 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1368 = *v1365++;
                      double v1369 = (double)v1368;
                      unint64_t v1370 = *v1366++;
                      else {
                        double v1371 = 1.0;
                      }
                      *v1367++ = v1371;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  v375 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v376 = (unint64_t *)*((void *)a3 + 2);
                  unint64_t v377 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v378 = *v375++;
                    double v379 = (double)v378;
                    unint64_t v380 = *v376++;
                    else {
                      double v381 = 1.0;
                    }
                    *v377++ = v381;
                    --v60;
                  }

                  while (v60);
                }

                break;
            }

            break;
          case 0:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1577 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1578 = (double *)*((void *)a3 + 2);
                    v1579 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1581 = *v1577++;
                      unsigned int v1580 = v1581;
                      double v1582 = *v1578++;
                      *v1579++ = v1580 >= (int)v1582;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  v587 = (unsigned __int8 *)*((void *)a2 + 2);
                  v588 = (double *)*((void *)a3 + 2);
                  v589 = (BOOL *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v591 = *v587++;
                    unsigned int v590 = v591;
                    double v592 = *v588++;
                    *v589++ = v590 >= (int)v592;
                    --v60;
                  }

                  while (v60);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1583 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1584 = (double *)*((void *)a3 + 2);
                    v1585 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1587 = *v1583++;
                      unint64_t v1586 = v1587;
                      double v1588 = *v1584++;
                      *v1585++ = v1586 >= (unint64_t)v1588;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  v593 = (unsigned __int8 *)*((void *)a2 + 2);
                  v594 = (double *)*((void *)a3 + 2);
                  v595 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v597 = *v593++;
                    unint64_t v596 = v597;
                    double v598 = *v594++;
                    *v595++ = v596 >= (unint64_t)v598;
                    --v60;
                  }

                  while (v60);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1131 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1132 = (double *)*((void *)a3 + 2);
                    v1133 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1134 = *v1131++;
                      double v1135 = (double)v1134;
                      double v1136 = *v1132++;
                      if (v1136 > v1135) {
                        double v1137 = 0.0;
                      }
                      else {
                        double v1137 = 1.0;
                      }
                      *v1133++ = v1137;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  double v141 = (unsigned __int8 *)*((void *)a2 + 2);
                  uint64_t v142 = (double *)*((void *)a3 + 2);
                  unsigned int v143 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v144 = *v141++;
                    double v145 = (double)v144;
                    double v146 = *v142++;
                    if (v146 > v145) {
                      double v147 = 0.0;
                    }
                    else {
                      double v147 = 1.0;
                    }
                    *v143++ = v147;
                    --v60;
                  }

                  while (v60);
                }

                break;
            }

            break;
        }
      }

      else if (v61 == 1)
      {
        switch(v62)
        {
          case 2:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1986 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1987 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1988 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1990 = *v1986;
                      v1986 += 8;
                      unsigned int v1989 = v1990;
                      unsigned int v1991 = *v1987++;
                      *v1988++ = v1991 <= v1989;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  v996 = (unsigned __int8 *)*((void *)a2 + 2);
                  v997 = (unsigned __int8 *)*((void *)a3 + 2);
                  v998 = (BOOL *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v1000 = *v996;
                    v996 += 8;
                    unsigned int v999 = v1000;
                    unsigned int v1001 = *v997++;
                    *v998++ = v1001 <= v999;
                    --v60;
                  }

                  while (v60);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1992 = (unint64_t *)*((void *)a2 + 2);
                    v1993 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1994 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v1996 = *v1992++;
                      unint64_t v1995 = v1996;
                      LODWORD(v1996) = *v1993++;
                      *v1994++ = v1995 >= v1996;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  v1002 = (unint64_t *)*((void *)a2 + 2);
                  v1003 = (unsigned __int8 *)*((void *)a3 + 2);
                  v1004 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v1006 = *v1002++;
                    unint64_t v1005 = v1006;
                    LODWORD(v1006) = *v1003++;
                    *v1004++ = v1005 >= v1006;
                    --v60;
                  }

                  while (v60);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1372 = (unint64_t *)*((void *)a2 + 2);
                    v1373 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1374 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v1375 = *v1372++;
                      unint64_t v1376 = v1375;
                      LODWORD(v1375) = *v1373++;
                      else {
                        double v1377 = 1.0;
                      }
                      *v1374++ = v1377;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  v382 = (unint64_t *)*((void *)a2 + 2);
                  v383 = (unsigned __int8 *)*((void *)a3 + 2);
                  v384 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v385 = *v382++;
                    unint64_t v386 = v385;
                    LODWORD(v385) = *v383++;
                    else {
                      double v387 = 1.0;
                    }
                    *v384++ = v387;
                    --v60;
                  }

                  while (v60);
                }

                break;
            }

            break;
          case 1:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1997 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1998 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1999 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v2001 = *v1997;
                      v1997 += 8;
                      unsigned int v2000 = v2001;
                      unsigned int v2002 = *v1998;
                      v1998 += 8;
                      *v1999++ = v2000 >= v2002;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  v1007 = (unsigned __int8 *)*((void *)a2 + 2);
                  v1008 = (unsigned __int8 *)*((void *)a3 + 2);
                  v1009 = (BOOL *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v1011 = *v1007;
                    v1007 += 8;
                    unsigned int v1010 = v1011;
                    unsigned int v1012 = *v1008;
                    v1008 += 8;
                    *v1009++ = v1010 >= v1012;
                    --v60;
                  }

                  while (v60);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v2003 = (unint64_t *)*((void *)a2 + 2);
                    v2004 = (unint64_t *)*((void *)a3 + 2);
                    v2005 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v2007 = *v2003++;
                      unint64_t v2006 = v2007;
                      unint64_t v2008 = *v2004++;
                      *v2005++ = v2006 >= v2008;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  v1013 = (unint64_t *)*((void *)a2 + 2);
                  v1014 = (unint64_t *)*((void *)a3 + 2);
                  v1015 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v1017 = *v1013++;
                    unint64_t v1016 = v1017;
                    unint64_t v1018 = *v1014++;
                    *v1015++ = v1016 >= v1018;
                    --v60;
                  }

                  while (v60);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1378 = (unint64_t *)*((void *)a2 + 2);
                    v1379 = (unint64_t *)*((void *)a3 + 2);
                    v1380 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v1381 = *v1378++;
                      double v1382 = (double)v1381;
                      unint64_t v1383 = *v1379++;
                      else {
                        double v1384 = 1.0;
                      }
                      *v1380++ = v1384;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  v388 = (unint64_t *)*((void *)a2 + 2);
                  v389 = (unint64_t *)*((void *)a3 + 2);
                  v390 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v391 = *v388++;
                    double v392 = (double)v391;
                    unint64_t v393 = *v389++;
                    else {
                      double v394 = 1.0;
                    }
                    *v390++ = v394;
                    --v60;
                  }

                  while (v60);
                }

                break;
            }

            break;
          case 0:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1589 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1590 = (double *)*((void *)a3 + 2);
                    v1591 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      unsigned int v1593 = *v1589;
                      v1589 += 8;
                      unsigned int v1592 = v1593;
                      double v1594 = *v1590++;
                      *v1591++ = v1592 >= (int)v1594;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  v599 = (unsigned __int8 *)*((void *)a2 + 2);
                  v600 = (double *)*((void *)a3 + 2);
                  v601 = (BOOL *)*((void *)a4 + 2);
                  do
                  {
                    unsigned int v603 = *v599;
                    v599 += 8;
                    unsigned int v602 = v603;
                    double v604 = *v600++;
                    *v601++ = v602 >= (int)v604;
                    --v60;
                  }

                  while (v60);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1595 = (unint64_t *)*((void *)a2 + 2);
                    v1596 = (double *)*((void *)a3 + 2);
                    v1597 = (void *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v1599 = *v1595++;
                      unint64_t v1598 = v1599;
                      double v1600 = *v1596++;
                      *v1597++ = v1598 >= (unint64_t)v1600;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  v605 = (unint64_t *)*((void *)a2 + 2);
                  v606 = (double *)*((void *)a3 + 2);
                  v607 = (void *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v609 = *v605++;
                    unint64_t v608 = v609;
                    double v610 = *v606++;
                    *v607++ = v608 >= (unint64_t)v610;
                    --v60;
                  }

                  while (v60);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1138 = (unint64_t *)*((void *)a2 + 2);
                    v1139 = (double *)*((void *)a3 + 2);
                    v1140 = (double *)*((void *)a4 + 2);
                    do
                    {
                      unint64_t v1141 = *v1138++;
                      unint64_t v1142 = v1141;
                      double v1143 = *v1139++;
                      else {
                        double v1144 = 1.0;
                      }
                      *v1140++ = v1144;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  unint64_t v148 = (unint64_t *)*((void *)a2 + 2);
                  double v149 = (double *)*((void *)a3 + 2);
                  uint64_t v150 = (double *)*((void *)a4 + 2);
                  do
                  {
                    unint64_t v151 = *v148++;
                    unint64_t v152 = v151;
                    double v153 = *v149++;
                    else {
                      double v154 = 1.0;
                    }
                    *v150++ = v154;
                    --v60;
                  }

                  while (v60);
                }

                break;
            }

            break;
        }
      }

      else if (!v61)
      {
        switch(v62)
        {
          case 2:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1706 = (double *)*((void *)a2 + 2);
                    v1707 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1708 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v1709 = *v1706++;
                      unsigned int v1710 = (int)v1709;
                      LODWORD(v1709) = *v1707++;
                      *v1708++ = LODWORD(v1709) <= v1710;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  v716 = (double *)*((void *)a2 + 2);
                  v717 = (unsigned __int8 *)*((void *)a3 + 2);
                  v718 = (BOOL *)*((void *)a4 + 2);
                  do
                  {
                    double v719 = *v716++;
                    unsigned int v720 = (int)v719;
                    LODWORD(v719) = *v717++;
                    *v718++ = LODWORD(v719) <= v720;
                    --v60;
                  }

                  while (v60);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1711 = (double *)*((void *)a2 + 2);
                    v1712 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1713 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v1714 = *v1711++;
                      unint64_t v1715 = (unint64_t)v1714;
                      LODWORD(v1714) = *v1712++;
                      *v1713++ = v1715 >= LODWORD(v1714);
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  v721 = (double *)*((void *)a2 + 2);
                  v722 = (unsigned __int8 *)*((void *)a3 + 2);
                  v723 = (void *)*((void *)a4 + 2);
                  do
                  {
                    double v724 = *v721++;
                    unint64_t v725 = (unint64_t)v724;
                    LODWORD(v724) = *v722++;
                    *v723++ = v725 >= LODWORD(v724);
                    --v60;
                  }

                  while (v60);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1210 = (double *)*((void *)a2 + 2);
                    v1211 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1212 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v1213 = *v1210++;
                      double v1214 = v1213;
                      LODWORD(v1213) = *v1211++;
                      else {
                        double v1215 = 1.0;
                      }
                      *v1212++ = v1215;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  char v220 = (double *)*((void *)a2 + 2);
                  unsigned int v221 = (unsigned __int8 *)*((void *)a3 + 2);
                  double v222 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v223 = *v220++;
                    double v224 = v223;
                    LODWORD(v223) = *v221++;
                    else {
                      double v225 = 1.0;
                    }
                    *v222++ = v225;
                    --v60;
                  }

                  while (v60);
                }

                break;
            }

            break;
          case 1:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1716 = (double *)*((void *)a2 + 2);
                    v1717 = (unsigned __int8 *)*((void *)a3 + 2);
                    v1718 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v1719 = *v1716++;
                      unsigned int v1720 = (int)v1719;
                      LODWORD(v1719) = *v1717;
                      v1717 += 8;
                      *v1718++ = v1720 >= LODWORD(v1719);
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  v726 = (double *)*((void *)a2 + 2);
                  v727 = (unsigned __int8 *)*((void *)a3 + 2);
                  v728 = (BOOL *)*((void *)a4 + 2);
                  do
                  {
                    double v729 = *v726++;
                    unsigned int v730 = (int)v729;
                    LODWORD(v729) = *v727;
                    v727 += 8;
                    *v728++ = v730 >= LODWORD(v729);
                    --v60;
                  }

                  while (v60);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1721 = (double *)*((void *)a2 + 2);
                    v1722 = (unint64_t *)*((void *)a3 + 2);
                    v1723 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v1724 = *v1721++;
                      unint64_t v1725 = (unint64_t)v1724;
                      unint64_t v1726 = *v1722++;
                      *v1723++ = v1726 <= v1725;
                      --v60;
                    }

                    while (v60);
                  }

                  return a4;
                }

                if (!a5)
                {
                  if (v60)
                  {
                    v731 = (double *)*((void *)a2 + 2);
                    v732 = (unint64_t *)*((void *)a3 + 2);
                    v733 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v734 = *v731++;
                      unint64_t v735 = (unint64_t)v734;
                      unint64_t v736 = *v732++;
                      *v733++ = v736 <= v735;
                      --v60;
                    }

                    while (v60);
                  }

                  return a4;
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1216 = (double *)*((void *)a2 + 2);
                    v1217 = (unint64_t *)*((void *)a3 + 2);
                    v1218 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v1219 = *v1216++;
                      double v1220 = v1219;
                      unint64_t v1221 = *v1217++;
                      else {
                        double v1222 = 1.0;
                      }
                      *v1218++ = v1222;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  double v226 = (double *)*((void *)a2 + 2);
                  double v227 = (unint64_t *)*((void *)a3 + 2);
                  unint64_t v228 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v229 = *v226++;
                    double v230 = v229;
                    unint64_t v231 = *v227++;
                    else {
                      double v232 = 1.0;
                    }
                    *v228++ = v232;
                    --v60;
                  }

                  while (v60);
                }

                return a4;
            }

            break;
          case 0:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1445 = (double *)*((void *)a2 + 2);
                    v1446 = (double *)*((void *)a3 + 2);
                    v1447 = (BOOL *)*((void *)a4 + 2);
                    do
                    {
                      double v1448 = *v1445++;
                      unsigned int v1449 = (int)v1448;
                      double v1450 = *v1446++;
                      *v1447++ = v1449 >= (int)v1450;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  v455 = (double *)*((void *)a2 + 2);
                  v456 = (double *)*((void *)a3 + 2);
                  v457 = (BOOL *)*((void *)a4 + 2);
                  do
                  {
                    double v458 = *v455++;
                    unsigned int v459 = (int)v458;
                    double v460 = *v456++;
                    *v457++ = v459 >= (int)v460;
                    --v60;
                  }

                  while (v60);
                }

                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1451 = (double *)*((void *)a2 + 2);
                    v1452 = (double *)*((void *)a3 + 2);
                    v1453 = (void *)*((void *)a4 + 2);
                    do
                    {
                      double v1454 = *v1451++;
                      unint64_t v1455 = (unint64_t)v1454;
                      double v1456 = *v1452++;
                      *v1453++ = v1455 >= (unint64_t)v1456;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  v461 = (double *)*((void *)a2 + 2);
                  v462 = (double *)*((void *)a3 + 2);
                  v463 = (void *)*((void *)a4 + 2);
                  do
                  {
                    double v464 = *v461++;
                    unint64_t v465 = (unint64_t)v464;
                    double v466 = *v462++;
                    *v463++ = v465 >= (unint64_t)v466;
                    --v60;
                  }

                  while (v60);
                }

                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1054 = (double *)*((void *)a2 + 2);
                    v1055 = (double *)*((void *)a3 + 2);
                    v1056 = (double *)*((void *)a4 + 2);
                    do
                    {
                      double v1057 = *v1054++;
                      double v1058 = v1057;
                      double v1059 = *v1055++;
                      if (v1058 < v1059) {
                        double v1060 = 0.0;
                      }
                      else {
                        double v1060 = 1.0;
                      }
                      *v1056++ = v1060;
                      --v60;
                    }

                    while (v60);
                  }
                }

                else if (!a5 && v60)
                {
                  char v64 = (double *)*((void *)a2 + 2);
                  unsigned int v65 = (double *)*((void *)a3 + 2);
                  unint64_t v66 = (double *)*((void *)a4 + 2);
                  do
                  {
                    double v67 = *v64++;
                    double v68 = v67;
                    double v69 = *v65++;
                    if (v68 < v69) {
                      double v70 = 0.0;
                    }
                    else {
                      double v70 = 1.0;
                    }
                    *v66++ = v70;
                    --v60;
                  }

                  while (v60);
                }

                break;
            }

            return a4;
        }
      }

      return a4;
    default:
      return result;
  }

int *sub_19EBC(int *result, int a2, unint64_t a3, int *a4, int *a5, int a6)
{
  switch((int)result)
  {
    case 0:
      unint64_t result = 0LL;
      if (a4 && a5)
      {
        if (*((_BYTE *)a5 + 32)) {
          return 0LL;
        }
        uint64_t v6 = *((void *)a4 + 1);
        if (v6 != *((void *)a5 + 1)) {
          return 0LL;
        }
        int v7 = *a4;
        int v8 = *a5;
        switch(a2)
        {
          case 2:
            switch(v7)
            {
              case 2:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v960 = (unsigned __int8 *)*((void *)a4 + 2);
                        v961 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v962 = *v960++;
                          *v961++ = v962 == a3;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      v420 = (unsigned __int8 *)*((void *)a4 + 2);
                      v421 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v422 = *v420++;
                        *v421++ = v422 == a3;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        unsigned int v963 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v964 = (void *)*((void *)a5 + 2);
                        do
                        {
                          int v965 = *v963++;
                          *v964++ = v965 == a3;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      unsigned int v423 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v424 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v425 = *v423++;
                        *v424++ = v425 == a3;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v684 = (unsigned __int8 *)*((void *)a4 + 2);
                        v685 = (double *)*((void *)a5 + 2);
                        do
                        {
                          int v686 = *v684++;
                          else {
                            double v687 = 0.0;
                          }
                          *v685++ = v687;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      unsigned int v144 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v145 = (double *)*((void *)a5 + 2);
                      do
                      {
                        int v146 = *v144++;
                        else {
                          double v147 = 0.0;
                        }
                        *v145++ = v147;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                }

                break;
              case 1:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v966 = (unsigned __int8 *)*((void *)a4 + 2);
                        v967 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v968 = *v966;
                          v966 += 8;
                          *v967++ = a3 == v968;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      v426 = (unsigned __int8 *)*((void *)a4 + 2);
                      v427 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v428 = *v426;
                        v426 += 8;
                        *v427++ = a3 == v428;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        unint64_t v969 = (uint64_t *)*((void *)a4 + 2);
                        unint64_t v970 = (void *)*((void *)a5 + 2);
                        do
                        {
                          uint64_t v971 = *v969++;
                          *v970++ = a3 == v971;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      unint64_t v429 = (uint64_t *)*((void *)a4 + 2);
                      double v430 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v431 = *v429++;
                        *v430++ = a3 == v431;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        unsigned int v688 = (unint64_t *)*((void *)a4 + 2);
                        v689 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v690 = *v688++;
                          else {
                            double v691 = 0.0;
                          }
                          *v689++ = v691;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      unint64_t v148 = (unint64_t *)*((void *)a4 + 2);
                      double v149 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v150 = *v148++;
                        else {
                          double v151 = 0.0;
                        }
                        *v149++ = v151;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                }

                break;
              case 0:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v816 = (double *)*((void *)a4 + 2);
                        uint64_t v817 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v818 = *v816++;
                          *v817++ = (int)v818 == a3;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      unsigned int v276 = (double *)*((void *)a4 + 2);
                      unint64_t v277 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v278 = *v276++;
                        *v277++ = (int)v278 == a3;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v819 = (double *)*((void *)a4 + 2);
                        v820 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v821 = *v819++;
                          *v820++ = a3 == (unint64_t)v821;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      double v279 = (double *)*((void *)a4 + 2);
                      char v280 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v281 = *v279++;
                        *v280++ = a3 == (unint64_t)v281;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v588 = (double *)*((void *)a4 + 2);
                        v589 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v590 = *v588++;
                          else {
                            double v591 = 0.0;
                          }
                          *v589++ = v591;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      double v48 = (double *)*((void *)a4 + 2);
                      uint64_t v49 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v50 = *v48++;
                        else {
                          double v51 = 0.0;
                        }
                        *v49++ = v51;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                }

                break;
            }

            break;
          case 1:
            switch(v7)
            {
              case 2:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v972 = (unsigned __int8 *)*((void *)a4 + 2);
                        v973 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v974 = *v972++;
                          *v973++ = v974 == a3;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      v432 = (unsigned __int8 *)*((void *)a4 + 2);
                      v433 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v434 = *v432++;
                        *v433++ = v434 == a3;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        unsigned int v975 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v976 = (void *)*((void *)a5 + 2);
                        do
                        {
                          int v977 = *v975++;
                          *v976++ = a3 == v977;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      unsigned int v435 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v436 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v437 = *v435++;
                        *v436++ = a3 == v437;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        double v692 = (unsigned __int8 *)*((void *)a4 + 2);
                        unint64_t v693 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v694 = *v692++;
                          else {
                            double v695 = 0.0;
                          }
                          *v693++ = v695;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      unint64_t v152 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v153 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v154 = *v152++;
                        else {
                          double v155 = 0.0;
                        }
                        *v153++ = v155;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                }

                break;
              case 1:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v978 = (unsigned __int8 *)*((void *)a4 + 2);
                        v979 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v980 = *v978;
                          v978 += 8;
                          *v979++ = a3 == v980;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      v438 = (unsigned __int8 *)*((void *)a4 + 2);
                      v439 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v440 = *v438;
                        v438 += 8;
                        *v439++ = a3 == v440;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        unsigned int v981 = (uint64_t *)*((void *)a4 + 2);
                        unsigned int v982 = (void *)*((void *)a5 + 2);
                        do
                        {
                          uint64_t v983 = *v981++;
                          *v982++ = v983 == a3;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      unint64_t v441 = (uint64_t *)*((void *)a4 + 2);
                      double v442 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v443 = *v441++;
                        *v442++ = v443 == a3;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v696 = (unint64_t *)*((void *)a4 + 2);
                        v697 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v698 = *v696++;
                          else {
                            double v699 = 0.0;
                          }
                          *v697++ = v699;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      double v156 = (unint64_t *)*((void *)a4 + 2);
                      int v157 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v158 = *v156++;
                        else {
                          double v159 = 0.0;
                        }
                        *v157++ = v159;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                }

                break;
              case 0:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        int v822 = (double *)*((void *)a4 + 2);
                        int v823 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v824 = *v822++;
                          *v823++ = (int)v824 == a3;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      unint64_t v282 = (double *)*((void *)a4 + 2);
                      unint64_t v283 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v284 = *v282++;
                        *v283++ = (int)v284 == a3;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v825 = (double *)*((void *)a4 + 2);
                        v826 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v827 = *v825++;
                          *v826++ = a3 == (unint64_t)v827;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      unint64_t v285 = (double *)*((void *)a4 + 2);
                      double v286 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v287 = *v285++;
                        *v286++ = a3 == (unint64_t)v287;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        double v592 = (double *)*((void *)a4 + 2);
                        v593 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v594 = *v592++;
                          else {
                            double v595 = 0.0;
                          }
                          *v593++ = v595;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      int v52 = (double *)*((void *)a4 + 2);
                      unint64_t v53 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v54 = *v52++;
                        else {
                          double v55 = 0.0;
                        }
                        *v53++ = v55;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                }

                break;
            }

            break;
          case 0:
            switch(v7)
            {
              case 2:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        unsigned int v888 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v889 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v890 = *v888++;
                          *v889++ = v890 == (int)*(double *)&a3;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      unsigned int v348 = (unsigned __int8 *)*((void *)a4 + 2);
                      unint64_t v349 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v350 = *v348++;
                        *v349++ = v350 == (int)*(double *)&a3;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v891 = (unsigned __int8 *)*((void *)a4 + 2);
                        v892 = (void *)*((void *)a5 + 2);
                        do
                        {
                          int v893 = *v891++;
                          *v892++ = (unint64_t)*(double *)&a3 == v893;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      unsigned int v351 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v352 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v353 = *v351++;
                        *v352++ = (unint64_t)*(double *)&a3 == v353;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        int v636 = (unsigned __int8 *)*((void *)a4 + 2);
                        v637 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v638 = *v636++;
                          else {
                            double v639 = 0.0;
                          }
                          *v637++ = v639;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      unint64_t v96 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v97 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v98 = *v96++;
                        else {
                          double v99 = 0.0;
                        }
                        *v97++ = v99;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                }

                break;
              case 1:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        unsigned int v894 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v895 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v896 = *v894;
                          v894 += 8;
                          *v895++ = (int)*(double *)&a3 == v896;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      double v354 = (unsigned __int8 *)*((void *)a4 + 2);
                      unint64_t v355 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v356 = *v354;
                        v354 += 8;
                        *v355++ = (int)*(double *)&a3 == v356;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v897 = (uint64_t *)*((void *)a4 + 2);
                        v898 = (void *)*((void *)a5 + 2);
                        do
                        {
                          uint64_t v899 = *v897++;
                          *v898++ = v899 == (unint64_t)*(double *)&a3;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      unsigned int v357 = (uint64_t *)*((void *)a4 + 2);
                      unint64_t v358 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v359 = *v357++;
                        *v358++ = v359 == (unint64_t)*(double *)&a3;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        double v640 = (unint64_t *)*((void *)a4 + 2);
                        unint64_t v641 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v642 = *v640++;
                          else {
                            double v643 = 0.0;
                          }
                          *v641++ = v643;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      unint64_t v100 = (unint64_t *)*((void *)a4 + 2);
                      unsigned int v101 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v102 = *v100++;
                        else {
                          double v103 = 0.0;
                        }
                        *v101++ = v103;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                }

                break;
              case 0:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v780 = (double *)*((void *)a4 + 2);
                        uint64_t v781 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v782 = *v780++;
                          *v781++ = (int)*(double *)&a3 == (int)v782;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      unsigned int v240 = (double *)*((void *)a4 + 2);
                      double v241 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v242 = *v240++;
                        *v241++ = (int)*(double *)&a3 == (int)v242;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        uint64_t v783 = (double *)*((void *)a4 + 2);
                        v784 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v785 = *v783++;
                          *v784++ = a3 == *(uint64_t *)&v785;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      unsigned int v243 = (double *)*((void *)a4 + 2);
                      double v244 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v245 = *v243++;
                        *v244++ = a3 == *(uint64_t *)&v245;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v564 = (double *)*((void *)a4 + 2);
                        v565 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v566 = *v564++;
                          else {
                            double v567 = 0.0;
                          }
                          *v565++ = v567;
                          --v6;
                        }

                        while (v6);
                      }
                    }

                    else if (!a6 && v6)
                    {
                      int v9 = (double *)*((void *)a4 + 2);
                      unint64_t v10 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v11 = *v9++;
                        else {
                          double v12 = 0.0;
                        }
                        *v10++ = v12;
                        --v6;
                      }

                      while (v6);
                    }

                    break;
                }

                break;
            }

            break;
        }

        return a5;
      }

      return result;
    case 1:
      unint64_t result = 0LL;
      if (a4 && a5)
      {
        if (*((_BYTE *)a5 + 32)) {
          return 0LL;
        }
        uint64_t v13 = *((void *)a4 + 1);
        if (v13 != *((void *)a5 + 1)) {
          return 0LL;
        }
        int v14 = *a4;
        int v15 = *a5;
        switch(a2)
        {
          case 2:
            switch(v14)
            {
              case 2:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v984 = (unsigned __int8 *)*((void *)a4 + 2);
                        v985 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v986 = *v984++;
                          *v985++ = v986 != a3;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      v444 = (unsigned __int8 *)*((void *)a4 + 2);
                      v445 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v446 = *v444++;
                        *v445++ = v446 != a3;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        unsigned int v987 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v988 = (void *)*((void *)a5 + 2);
                        do
                        {
                          int v989 = *v987++;
                          *v988++ = v989 != a3;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      unsigned int v447 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v448 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v449 = *v447++;
                        *v448++ = v449 != a3;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v700 = (unsigned __int8 *)*((void *)a4 + 2);
                        v701 = (double *)*((void *)a5 + 2);
                        do
                        {
                          int v702 = *v700++;
                          else {
                            double v703 = 1.0;
                          }
                          *v701++ = v703;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      double v160 = (unsigned __int8 *)*((void *)a4 + 2);
                      unint64_t v161 = (double *)*((void *)a5 + 2);
                      do
                      {
                        int v162 = *v160++;
                        else {
                          double v163 = 1.0;
                        }
                        *v161++ = v163;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                }

                break;
              case 1:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v990 = (unsigned __int8 *)*((void *)a4 + 2);
                        v991 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v992 = *v990;
                          v990 += 8;
                          *v991++ = a3 != v992;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      v450 = (unsigned __int8 *)*((void *)a4 + 2);
                      v451 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v452 = *v450;
                        v450 += 8;
                        *v451++ = a3 != v452;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        unint64_t v993 = (uint64_t *)*((void *)a4 + 2);
                        unsigned int v994 = (void *)*((void *)a5 + 2);
                        do
                        {
                          uint64_t v995 = *v993++;
                          *v994++ = a3 != v995;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      unint64_t v453 = (uint64_t *)*((void *)a4 + 2);
                      double v454 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v455 = *v453++;
                        *v454++ = a3 != v455;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        unint64_t v704 = (unint64_t *)*((void *)a4 + 2);
                        v705 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v706 = *v704++;
                          else {
                            double v707 = 1.0;
                          }
                          *v705++ = v707;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      double v164 = (unint64_t *)*((void *)a4 + 2);
                      double v165 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v166 = *v164++;
                        else {
                          double v167 = 1.0;
                        }
                        *v165++ = v167;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                }

                break;
              case 0:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        uint64_t v828 = (double *)*((void *)a4 + 2);
                        uint64_t v829 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v830 = *v828++;
                          *v829++ = (int)v830 != a3;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      unint64_t v288 = (double *)*((void *)a4 + 2);
                      unsigned int v289 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v290 = *v288++;
                        *v289++ = (int)v290 != a3;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v831 = (double *)*((void *)a4 + 2);
                        v832 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v833 = *v831++;
                          *v832++ = a3 != (unint64_t)v833;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      unsigned int v291 = (double *)*((void *)a4 + 2);
                      unsigned int v292 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v293 = *v291++;
                        *v292++ = a3 != (unint64_t)v293;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        unint64_t v596 = (double *)*((void *)a4 + 2);
                        unsigned int v597 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v598 = *v596++;
                          else {
                            double v599 = 1.0;
                          }
                          *v597++ = v599;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      double v56 = (double *)*((void *)a4 + 2);
                      double v57 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v58 = *v56++;
                        else {
                          double v59 = 1.0;
                        }
                        *v57++ = v59;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                }

                break;
            }

            break;
          case 1:
            switch(v14)
            {
              case 2:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v996 = (unsigned __int8 *)*((void *)a4 + 2);
                        v997 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v998 = *v996++;
                          *v997++ = v998 != a3;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      v456 = (unsigned __int8 *)*((void *)a4 + 2);
                      v457 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v458 = *v456++;
                        *v457++ = v458 != a3;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        unsigned int v999 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v1000 = (void *)*((void *)a5 + 2);
                        do
                        {
                          int v1001 = *v999++;
                          *v1000++ = a3 != v1001;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      unsigned int v459 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v460 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v461 = *v459++;
                        *v460++ = a3 != v461;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        double v708 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v709 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v710 = *v708++;
                          else {
                            double v711 = 1.0;
                          }
                          *v709++ = v711;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      unint64_t v168 = (unsigned __int8 *)*((void *)a4 + 2);
                      unsigned int v169 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v170 = *v168++;
                        else {
                          double v171 = 1.0;
                        }
                        *v169++ = v171;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                }

                break;
              case 1:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v1002 = (unsigned __int8 *)*((void *)a4 + 2);
                        v1003 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v1004 = *v1002;
                          v1002 += 8;
                          *v1003++ = a3 != v1004;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      v462 = (unsigned __int8 *)*((void *)a4 + 2);
                      v463 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v464 = *v462;
                        v462 += 8;
                        *v463++ = a3 != v464;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        unint64_t v1005 = (uint64_t *)*((void *)a4 + 2);
                        unint64_t v1006 = (void *)*((void *)a5 + 2);
                        do
                        {
                          uint64_t v1007 = *v1005++;
                          *v1006++ = v1007 != a3;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      unint64_t v465 = (uint64_t *)*((void *)a4 + 2);
                      double v466 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v467 = *v465++;
                        *v466++ = v467 != a3;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v712 = (unint64_t *)*((void *)a4 + 2);
                        double v713 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v714 = *v712++;
                          else {
                            double v715 = 1.0;
                          }
                          *v713++ = v715;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      double v172 = (unint64_t *)*((void *)a4 + 2);
                      double v173 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v174 = *v172++;
                        else {
                          double v175 = 1.0;
                        }
                        *v173++ = v175;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                }

                break;
              case 0:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        unsigned int v834 = (double *)*((void *)a4 + 2);
                        unsigned int v835 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v836 = *v834++;
                          *v835++ = (int)v836 != a3;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      unsigned int v294 = (double *)*((void *)a4 + 2);
                      unsigned int v295 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v296 = *v294++;
                        *v295++ = (int)v296 != a3;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v837 = (double *)*((void *)a4 + 2);
                        v838 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v839 = *v837++;
                          *v838++ = a3 != (unint64_t)v839;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      unsigned int v297 = (double *)*((void *)a4 + 2);
                      double v298 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v299 = *v297++;
                        *v298++ = a3 != (unint64_t)v299;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v600 = (double *)*((void *)a4 + 2);
                        v601 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v602 = *v600++;
                          else {
                            double v603 = 1.0;
                          }
                          *v601++ = v603;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      uint64_t v60 = (double *)*((void *)a4 + 2);
                      int v61 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v62 = *v60++;
                        else {
                          double v63 = 1.0;
                        }
                        *v61++ = v63;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                }

                break;
            }

            break;
          case 0:
            switch(v14)
            {
              case 2:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        unsigned int v900 = (unsigned __int8 *)*((void *)a4 + 2);
                        unint64_t v901 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v902 = *v900++;
                          *v901++ = v902 != (int)*(double *)&a3;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      double v360 = (unsigned __int8 *)*((void *)a4 + 2);
                      v361 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v362 = *v360++;
                        *v361++ = v362 != (int)*(double *)&a3;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v903 = (unsigned __int8 *)*((void *)a4 + 2);
                        v904 = (void *)*((void *)a5 + 2);
                        do
                        {
                          int v905 = *v903++;
                          *v904++ = (unint64_t)*(double *)&a3 != v905;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      unint64_t v363 = (unsigned __int8 *)*((void *)a4 + 2);
                      unint64_t v364 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v365 = *v363++;
                        *v364++ = (unint64_t)*(double *)&a3 != v365;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v644 = (unsigned __int8 *)*((void *)a4 + 2);
                        double v645 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v646 = *v644++;
                          else {
                            double v647 = 1.0;
                          }
                          *v645++ = v647;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      double v104 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v105 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v106 = *v104++;
                        else {
                          double v107 = 1.0;
                        }
                        *v105++ = v107;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                }

                break;
              case 1:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        unsigned int v906 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v907 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          int v908 = *v906;
                          v906 += 8;
                          *v907++ = (int)*(double *)&a3 != v908;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      unint64_t v366 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v367 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v368 = *v366;
                        v366 += 8;
                        *v367++ = (int)*(double *)&a3 != v368;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v909 = (uint64_t *)*((void *)a4 + 2);
                        v910 = (void *)*((void *)a5 + 2);
                        do
                        {
                          uint64_t v911 = *v909++;
                          *v910++ = v911 != (unint64_t)*(double *)&a3;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      unsigned int v369 = (uint64_t *)*((void *)a4 + 2);
                      unsigned int v370 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v371 = *v369++;
                        *v370++ = v371 != (unint64_t)*(double *)&a3;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v648 = (unint64_t *)*((void *)a4 + 2);
                        v649 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v650 = *v648++;
                          else {
                            double v651 = 1.0;
                          }
                          *v649++ = v651;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      unint64_t v108 = (unint64_t *)*((void *)a4 + 2);
                      unint64_t v109 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v110 = *v108++;
                        else {
                          double v111 = 1.0;
                        }
                        *v109++ = v111;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                }

                break;
              case 0:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v786 = (double *)*((void *)a4 + 2);
                        int v787 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v788 = *v786++;
                          *v787++ = (int)*(double *)&a3 != (int)v788;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      double v246 = (double *)*((void *)a4 + 2);
                      unint64_t v247 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v248 = *v246++;
                        *v247++ = (int)*(double *)&a3 != (int)v248;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        int v789 = (double *)*((void *)a4 + 2);
                        v790 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v791 = *v789++;
                          *v790++ = a3 != *(uint64_t *)&v791;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      double v249 = (double *)*((void *)a4 + 2);
                      unint64_t v250 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v251 = *v249++;
                        *v250++ = a3 != *(uint64_t *)&v251;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        double v568 = (double *)*((void *)a4 + 2);
                        v569 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v570 = *v568++;
                          else {
                            double v571 = 1.0;
                          }
                          *v569++ = v571;
                          --v13;
                        }

                        while (v13);
                      }
                    }

                    else if (!a6 && v13)
                    {
                      uint64_t v16 = (double *)*((void *)a4 + 2);
                      int v17 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v18 = *v16++;
                        else {
                          double v19 = 1.0;
                        }
                        *v17++ = v19;
                        --v13;
                      }

                      while (v13);
                    }

                    break;
                }

                break;
            }

            break;
        }

        return a5;
      }

      return result;
    case 2:
      unint64_t result = 0LL;
      if (a4 && a5)
      {
        if (*((_BYTE *)a5 + 32)) {
          return 0LL;
        }
        uint64_t v20 = *((void *)a4 + 1);
        if (v20 != *((void *)a5 + 1)) {
          return 0LL;
        }
        int v21 = *a4;
        int v22 = *a5;
        switch(a2)
        {
          case 2:
            switch(v21)
            {
              case 2:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v1008 = (unsigned __int8 *)*((void *)a4 + 2);
                        v1009 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1010 = *v1008++;
                          *v1009++ = v1010 > a3;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      v468 = (unsigned __int8 *)*((void *)a4 + 2);
                      v469 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v470 = *v468++;
                        *v469++ = v470 > a3;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        unsigned int v1011 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v1012 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1013 = *v1011++;
                          *v1012++ = a3 < (unint64_t)v1013;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      int v471 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v472 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v473 = *v471++;
                        *v472++ = a3 < (unint64_t)v473;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v716 = (unsigned __int8 *)*((void *)a4 + 2);
                        v717 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v718 = *v716++;
                          else {
                            double v719 = 1.0;
                          }
                          *v717++ = v719;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      unint64_t v176 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v177 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v178 = *v176++;
                        else {
                          double v179 = 1.0;
                        }
                        *v177++ = v179;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                }

                break;
              case 1:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v1014 = (unsigned __int8 *)*((void *)a4 + 2);
                        v1015 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1016 = *v1014;
                          v1014 += 8;
                          *v1015++ = a3 < v1016;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      v474 = (unsigned __int8 *)*((void *)a4 + 2);
                      v475 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v476 = *v474;
                        v474 += 8;
                        *v475++ = a3 < v476;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        unint64_t v1017 = (unint64_t *)*((void *)a4 + 2);
                        unint64_t v1018 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v1019 = *v1017++;
                          *v1018++ = a3 < v1019;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      unsigned int v477 = (unint64_t *)*((void *)a4 + 2);
                      double v478 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v479 = *v477++;
                        *v478++ = a3 < v479;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        unsigned int v720 = (unint64_t *)*((void *)a4 + 2);
                        v721 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v722 = *v720++;
                          else {
                            double v723 = 1.0;
                          }
                          *v721++ = v723;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      double v180 = (unint64_t *)*((void *)a4 + 2);
                      int v181 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v182 = *v180++;
                        else {
                          double v183 = 1.0;
                        }
                        *v181++ = v183;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                }

                break;
              case 0:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        unsigned int v840 = (double *)*((void *)a4 + 2);
                        unsigned int v841 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v842 = *v840++;
                          *v841++ = (int)v842 > a3;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      double v300 = (double *)*((void *)a4 + 2);
                      unint64_t v301 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v302 = *v300++;
                        *v301++ = (int)v302 > a3;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v843 = (double *)*((void *)a4 + 2);
                        v844 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v845 = *v843++;
                          *v844++ = a3 < (unint64_t)v845;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      double v303 = (double *)*((void *)a4 + 2);
                      unint64_t v304 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v305 = *v303++;
                        *v304++ = a3 < (unint64_t)v305;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        double v604 = (double *)*((void *)a4 + 2);
                        v605 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v606 = *v604++;
                          else {
                            double v607 = 1.0;
                          }
                          *v605++ = v607;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      char v64 = (double *)*((void *)a4 + 2);
                      unsigned int v65 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v66 = *v64++;
                        else {
                          double v67 = 1.0;
                        }
                        *v65++ = v67;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                }

                break;
            }

            break;
          case 1:
            switch(v21)
            {
              case 2:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v1020 = (unsigned __int8 *)*((void *)a4 + 2);
                        v1021 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1022 = *v1020++;
                          *v1021++ = v1022 > a3;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      v480 = (unsigned __int8 *)*((void *)a4 + 2);
                      v481 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v482 = *v480++;
                        *v481++ = v482 > a3;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        double v1023 = (unsigned __int8 *)*((void *)a4 + 2);
                        double v1024 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1025 = *v1023++;
                          *v1024++ = a3 < v1025;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      int v483 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v484 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v485 = *v483++;
                        *v484++ = a3 < v485;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        double v724 = (unsigned __int8 *)*((void *)a4 + 2);
                        unint64_t v725 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v726 = *v724++;
                          else {
                            double v727 = 1.0;
                          }
                          *v725++ = v727;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      double v184 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v185 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v186 = *v184++;
                        else {
                          double v187 = 1.0;
                        }
                        *v185++ = v187;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                }

                break;
              case 1:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v1026 = (unsigned __int8 *)*((void *)a4 + 2);
                        v1027 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1028 = *v1026;
                          v1026 += 8;
                          *v1027++ = a3 < v1028;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      v486 = (unsigned __int8 *)*((void *)a4 + 2);
                      v487 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v488 = *v486;
                        v486 += 8;
                        *v487++ = a3 < v488;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        double v1029 = (unint64_t *)*((void *)a4 + 2);
                        double v1030 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v1031 = *v1029++;
                          *v1030++ = v1031 > a3;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      uint64_t v489 = (unint64_t *)*((void *)a4 + 2);
                      double v490 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v491 = *v489++;
                        *v490++ = v491 > a3;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v728 = (unint64_t *)*((void *)a4 + 2);
                        double v729 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v730 = *v728++;
                          else {
                            double v731 = 1.0;
                          }
                          *v729++ = v731;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      double v188 = (unint64_t *)*((void *)a4 + 2);
                      int v189 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v190 = *v188++;
                        else {
                          double v191 = 1.0;
                        }
                        *v189++ = v191;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                }

                break;
              case 0:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        unsigned int v846 = (double *)*((void *)a4 + 2);
                        unsigned int v847 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v848 = *v846++;
                          *v847++ = (int)v848 > a3;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      double v306 = (double *)*((void *)a4 + 2);
                      unsigned int v307 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v308 = *v306++;
                        *v307++ = (int)v308 > a3;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v849 = (double *)*((void *)a4 + 2);
                        v850 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v851 = *v849++;
                          *v850++ = a3 < (unint64_t)v851;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      double v309 = (double *)*((void *)a4 + 2);
                      unint64_t v310 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v311 = *v309++;
                        *v310++ = a3 < (unint64_t)v311;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        unint64_t v608 = (double *)*((void *)a4 + 2);
                        unint64_t v609 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v610 = *v608++;
                          else {
                            double v611 = 1.0;
                          }
                          *v609++ = v611;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      double v68 = (double *)*((void *)a4 + 2);
                      double v69 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v70 = *v68++;
                        else {
                          double v71 = 1.0;
                        }
                        *v69++ = v71;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                }

                break;
            }

            break;
          case 0:
            switch(v21)
            {
              case 2:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        unint64_t v912 = (unsigned __int8 *)*((void *)a4 + 2);
                        v913 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v914 = *v912++;
                          *v913++ = v914 > (int)*(double *)&a3;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      unsigned int v372 = (unsigned __int8 *)*((void *)a4 + 2);
                      unsigned int v373 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v374 = *v372++;
                        *v373++ = v374 > (int)*(double *)&a3;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v915 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v916 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v917 = *v915++;
                          *v916++ = (unint64_t)*(double *)&a3 < v917;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      v375 = (unsigned __int8 *)*((void *)a4 + 2);
                      unint64_t v376 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v377 = *v375++;
                        *v376++ = (unint64_t)*(double *)&a3 < v377;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        uint64_t v652 = (unsigned __int8 *)*((void *)a4 + 2);
                        v653 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v654 = *v652++;
                          else {
                            double v655 = 1.0;
                          }
                          *v653++ = v655;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      double v112 = (unsigned __int8 *)*((void *)a4 + 2);
                      unsigned int v113 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v114 = *v112++;
                        else {
                          double v115 = 1.0;
                        }
                        *v113++ = v115;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                }

                break;
              case 1:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        unsigned int v918 = (unsigned __int8 *)*((void *)a4 + 2);
                        v919 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v920 = *v918;
                          v918 += 8;
                          *v919++ = (int)*(double *)&a3 < v920;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      unsigned int v378 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v379 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v380 = *v378;
                        v378 += 8;
                        *v379++ = (int)*(double *)&a3 < v380;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v921 = (unint64_t *)*((void *)a4 + 2);
                        unint64_t v922 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v923 = *v921++;
                          *v922++ = v923 > (unint64_t)*(double *)&a3;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      double v381 = (unint64_t *)*((void *)a4 + 2);
                      v382 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v383 = *v381++;
                        *v382++ = v383 > (unint64_t)*(double *)&a3;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        double v656 = (unint64_t *)*((void *)a4 + 2);
                        unsigned int v657 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v658 = *v656++;
                          else {
                            double v659 = 1.0;
                          }
                          *v657++ = v659;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      unsigned int v116 = (unint64_t *)*((void *)a4 + 2);
                      double v117 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v118 = *v116++;
                        else {
                          double v119 = 1.0;
                        }
                        *v117++ = v119;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                }

                break;
              case 0:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v792 = (double *)*((void *)a4 + 2);
                        int v793 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v794 = *v792++;
                          *v793++ = (int)*(double *)&a3 < (int)v794;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      double v252 = (double *)*((void *)a4 + 2);
                      unsigned int v253 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v254 = *v252++;
                        *v253++ = (int)*(double *)&a3 < (int)v254;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        int v795 = (double *)*((void *)a4 + 2);
                        v796 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v797 = *v795++;
                          *v796++ = (unint64_t)*(double *)&a3 < (unint64_t)v797;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      double v255 = (double *)*((void *)a4 + 2);
                      unint64_t v256 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v257 = *v255++;
                        *v256++ = (unint64_t)*(double *)&a3 < (unint64_t)v257;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        unint64_t v572 = (double *)*((void *)a4 + 2);
                        unsigned int v573 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v574 = *v572++;
                          else {
                            double v575 = 1.0;
                          }
                          *v573++ = v575;
                          --v20;
                        }

                        while (v20);
                      }
                    }

                    else if (!a6 && v20)
                    {
                      double v23 = (double *)*((void *)a4 + 2);
                      double v24 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v25 = *v23++;
                        else {
                          double v26 = 1.0;
                        }
                        *v24++ = v26;
                        --v20;
                      }

                      while (v20);
                    }

                    break;
                }

                break;
            }

            break;
        }

        return a5;
      }

      return result;
    case 3:
      unint64_t result = 0LL;
      if (a4 && a5)
      {
        if (*((_BYTE *)a5 + 32)) {
          return 0LL;
        }
        uint64_t v27 = *((void *)a4 + 1);
        if (v27 != *((void *)a5 + 1)) {
          return 0LL;
        }
        int v28 = *a4;
        int v29 = *a5;
        switch(a2)
        {
          case 2:
            switch(v28)
            {
              case 2:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        double v1032 = (unsigned __int8 *)*((void *)a4 + 2);
                        v1033 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1034 = *v1032++;
                          *v1033++ = v1034 < a3;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      v492 = (unsigned __int8 *)*((void *)a4 + 2);
                      v493 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v494 = *v492++;
                        *v493++ = v494 < a3;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v1035 = (unsigned __int8 *)*((void *)a4 + 2);
                        double v1036 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1037 = *v1035++;
                          *v1036++ = a3 > (unint64_t)v1037;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      int v495 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v496 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v497 = *v495++;
                        *v496++ = a3 > (unint64_t)v497;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v732 = (unsigned __int8 *)*((void *)a4 + 2);
                        v733 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v734 = *v732++;
                          else {
                            double v735 = 1.0;
                          }
                          *v733++ = v735;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      unint64_t v192 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v193 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v194 = *v192++;
                        else {
                          double v195 = 1.0;
                        }
                        *v193++ = v195;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                }

                break;
              case 1:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        double v1038 = (unsigned __int8 *)*((void *)a4 + 2);
                        double v1039 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1040 = *v1038;
                          v1038 += 8;
                          *v1039++ = a3 > v1040;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      v498 = (unsigned __int8 *)*((void *)a4 + 2);
                      v499 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v500 = *v498;
                        v498 += 8;
                        *v499++ = a3 > v500;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v1041 = (unint64_t *)*((void *)a4 + 2);
                        v1042 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v1043 = *v1041++;
                          *v1042++ = a3 > v1043;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      unsigned int v501 = (unint64_t *)*((void *)a4 + 2);
                      double v502 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v503 = *v501++;
                        *v502++ = a3 > v503;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        unint64_t v736 = (unint64_t *)*((void *)a4 + 2);
                        v737 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v738 = *v736++;
                          else {
                            double v739 = 1.0;
                          }
                          *v737++ = v739;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      char v196 = (unint64_t *)*((void *)a4 + 2);
                      double v197 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v198 = *v196++;
                        else {
                          double v199 = 1.0;
                        }
                        *v197++ = v199;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                }

                break;
              case 0:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        unint64_t v852 = (double *)*((void *)a4 + 2);
                        unsigned int v853 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v854 = *v852++;
                          *v853++ = (int)v854 < a3;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      unint64_t v312 = (double *)*((void *)a4 + 2);
                      double v313 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v314 = *v312++;
                        *v313++ = (int)v314 < a3;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v855 = (double *)*((void *)a4 + 2);
                        v856 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v857 = *v855++;
                          *v856++ = a3 > (unint64_t)v857;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      double v315 = (double *)*((void *)a4 + 2);
                      unsigned int v316 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v317 = *v315++;
                        *v316++ = a3 > (unint64_t)v317;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v612 = (double *)*((void *)a4 + 2);
                        v613 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v614 = *v612++;
                          else {
                            double v615 = 1.0;
                          }
                          *v613++ = v615;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      double v72 = (double *)*((void *)a4 + 2);
                      int v73 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v74 = *v72++;
                        else {
                          double v75 = 1.0;
                        }
                        *v73++ = v75;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                }

                break;
            }

            break;
          case 1:
            switch(v28)
            {
              case 2:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        double v1044 = (unsigned __int8 *)*((void *)a4 + 2);
                        double v1045 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1046 = *v1044++;
                          *v1045++ = v1046 < a3;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      v504 = (unsigned __int8 *)*((void *)a4 + 2);
                      v505 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v506 = *v504++;
                        *v505++ = v506 < a3;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v1047 = (unsigned __int8 *)*((void *)a4 + 2);
                        v1048 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1049 = *v1047++;
                          *v1048++ = a3 > v1049;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      int v507 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v508 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v509 = *v507++;
                        *v508++ = a3 > v509;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        int v740 = (unsigned __int8 *)*((void *)a4 + 2);
                        int v741 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v742 = *v740++;
                          else {
                            double v743 = 1.0;
                          }
                          *v741++ = v743;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      uint64_t v200 = (unsigned __int8 *)*((void *)a4 + 2);
                      unsigned int v201 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v202 = *v200++;
                        else {
                          double v203 = 1.0;
                        }
                        *v201++ = v203;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                }

                break;
              case 1:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        double v1050 = (unsigned __int8 *)*((void *)a4 + 2);
                        double v1051 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1052 = *v1050;
                          v1050 += 8;
                          *v1051++ = a3 > v1052;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      v510 = (unsigned __int8 *)*((void *)a4 + 2);
                      v511 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v512 = *v510;
                        v510 += 8;
                        *v511++ = a3 > v512;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        double v1053 = (unint64_t *)*((void *)a4 + 2);
                        v1054 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v1055 = *v1053++;
                          *v1054++ = v1055 < a3;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      uint64_t v513 = (unint64_t *)*((void *)a4 + 2);
                      double v514 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v515 = *v513++;
                        *v514++ = v515 < a3;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v744 = (unint64_t *)*((void *)a4 + 2);
                        v745 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v746 = *v744++;
                          else {
                            double v747 = 1.0;
                          }
                          *v745++ = v747;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      double v204 = (unint64_t *)*((void *)a4 + 2);
                      unint64_t v205 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v206 = *v204++;
                        else {
                          double v207 = 1.0;
                        }
                        *v205++ = v207;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                }

                break;
              case 0:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        unsigned int v858 = (double *)*((void *)a4 + 2);
                        unsigned int v859 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v860 = *v858++;
                          *v859++ = (int)v860 < a3;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      unsigned int v318 = (double *)*((void *)a4 + 2);
                      unsigned int v319 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v320 = *v318++;
                        *v319++ = (int)v320 < a3;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v861 = (double *)*((void *)a4 + 2);
                        v862 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v863 = *v861++;
                          *v862++ = a3 > (unint64_t)v863;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      double v321 = (double *)*((void *)a4 + 2);
                      unint64_t v322 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v323 = *v321++;
                        *v322++ = a3 > (unint64_t)v323;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v616 = (double *)*((void *)a4 + 2);
                        v617 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v618 = *v616++;
                          else {
                            double v619 = 1.0;
                          }
                          *v617++ = v619;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      double v76 = (double *)*((void *)a4 + 2);
                      double v77 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v78 = *v76++;
                        else {
                          double v79 = 1.0;
                        }
                        *v77++ = v79;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                }

                break;
            }

            break;
          case 0:
            switch(v28)
            {
              case 2:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        unint64_t v924 = (unsigned __int8 *)*((void *)a4 + 2);
                        v925 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v926 = *v924++;
                          *v925++ = v926 < (int)*(double *)&a3;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      v384 = (unsigned __int8 *)*((void *)a4 + 2);
                      unint64_t v385 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v386 = *v384++;
                        *v385++ = v386 < (int)*(double *)&a3;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v927 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v928 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v929 = *v927++;
                          *v928++ = (unint64_t)*(double *)&a3 > v929;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      double v387 = (unsigned __int8 *)*((void *)a4 + 2);
                      v388 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v389 = *v387++;
                        *v388++ = (unint64_t)*(double *)&a3 > v389;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v660 = (unsigned __int8 *)*((void *)a4 + 2);
                        double v661 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v662 = *v660++;
                          else {
                            double v663 = 1.0;
                          }
                          *v661++ = v663;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      double v120 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v121 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v122 = *v120++;
                        else {
                          double v123 = 1.0;
                        }
                        *v121++ = v123;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                }

                break;
              case 1:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        unsigned int v930 = (unsigned __int8 *)*((void *)a4 + 2);
                        v931 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v932 = *v930;
                          v930 += 8;
                          *v931++ = (int)*(double *)&a3 > v932;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      v390 = (unsigned __int8 *)*((void *)a4 + 2);
                      unint64_t v391 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v392 = *v390;
                        v390 += 8;
                        *v391++ = (int)*(double *)&a3 > v392;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v933 = (unint64_t *)*((void *)a4 + 2);
                        unsigned int v934 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v935 = *v933++;
                          *v934++ = v935 < (unint64_t)*(double *)&a3;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      unint64_t v393 = (unint64_t *)*((void *)a4 + 2);
                      double v394 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v395 = *v393++;
                        *v394++ = v395 < (unint64_t)*(double *)&a3;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v664 = (unint64_t *)*((void *)a4 + 2);
                        v665 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v666 = *v664++;
                          else {
                            double v667 = 1.0;
                          }
                          *v665++ = v667;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      unint64_t v124 = (unint64_t *)*((void *)a4 + 2);
                      double v125 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v126 = *v124++;
                        else {
                          double v127 = 1.0;
                        }
                        *v125++ = v127;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                }

                break;
              case 0:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v798 = (double *)*((void *)a4 + 2);
                        int v799 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v800 = *v798++;
                          *v799++ = (int)*(double *)&a3 > (int)v800;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      unint64_t v258 = (double *)*((void *)a4 + 2);
                      double v259 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v260 = *v258++;
                        *v259++ = (int)*(double *)&a3 > (int)v260;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        int v801 = (double *)*((void *)a4 + 2);
                        v802 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v803 = *v801++;
                          *v802++ = (unint64_t)*(double *)&a3 > (unint64_t)v803;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      double v261 = (double *)*((void *)a4 + 2);
                      unsigned int v262 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v263 = *v261++;
                        *v262++ = (unint64_t)*(double *)&a3 > (unint64_t)v263;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v576 = (double *)*((void *)a4 + 2);
                        v577 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v578 = *v576++;
                          else {
                            double v579 = 1.0;
                          }
                          *v577++ = v579;
                          --v27;
                        }

                        while (v27);
                      }
                    }

                    else if (!a6 && v27)
                    {
                      int v30 = (double *)*((void *)a4 + 2);
                      double v31 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v32 = *v30++;
                        else {
                          double v33 = 1.0;
                        }
                        *v31++ = v33;
                        --v27;
                      }

                      while (v27);
                    }

                    break;
                }

                break;
            }

            break;
        }

        return a5;
      }

      return result;
    case 4:
      unint64_t result = 0LL;
      if (a4 && a5)
      {
        if (*((_BYTE *)a5 + 32)) {
          return 0LL;
        }
        uint64_t v34 = *((void *)a4 + 1);
        if (v34 != *((void *)a5 + 1)) {
          return 0LL;
        }
        int v35 = *a4;
        int v36 = *a5;
        switch(a2)
        {
          case 2:
            switch(v35)
            {
              case 2:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v1056 = (unsigned __int8 *)*((void *)a4 + 2);
                        double v1057 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1058 = *v1056++;
                          *v1057++ = v1058 >= a3;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      v516 = (unsigned __int8 *)*((void *)a4 + 2);
                      v517 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v518 = *v516++;
                        *v517++ = v518 >= a3;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        double v1059 = (unsigned __int8 *)*((void *)a4 + 2);
                        double v1060 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1061 = *v1059++;
                          *v1060++ = a3 <= (unint64_t)v1061;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      unsigned int v519 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v520 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v521 = *v519++;
                        *v520++ = a3 <= (unint64_t)v521;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        int v748 = (unsigned __int8 *)*((void *)a4 + 2);
                        v749 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v750 = *v748++;
                          else {
                            double v751 = 1.0;
                          }
                          *v749++ = v751;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      unint64_t v208 = (unsigned __int8 *)*((void *)a4 + 2);
                      unsigned int v209 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v210 = *v208++;
                        else {
                          double v211 = 1.0;
                        }
                        *v209++ = v211;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                }

                break;
              case 1:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v1062 = (unsigned __int8 *)*((void *)a4 + 2);
                        v1063 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1064 = *v1062;
                          v1062 += 8;
                          *v1063++ = a3 <= v1064;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      v522 = (unsigned __int8 *)*((void *)a4 + 2);
                      v523 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v524 = *v522;
                        v522 += 8;
                        *v523++ = a3 <= v524;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        double v1065 = (unint64_t *)*((void *)a4 + 2);
                        double v1066 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v1067 = *v1065++;
                          *v1066++ = a3 <= v1067;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      unsigned int v525 = (unint64_t *)*((void *)a4 + 2);
                      double v526 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v527 = *v525++;
                        *v526++ = a3 <= v527;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        int v752 = (unint64_t *)*((void *)a4 + 2);
                        int v753 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v754 = *v752++;
                          else {
                            double v755 = 1.0;
                          }
                          *v753++ = v755;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      double v212 = (unint64_t *)*((void *)a4 + 2);
                      unsigned int v213 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v214 = *v212++;
                        else {
                          double v215 = 1.0;
                        }
                        *v213++ = v215;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                }

                break;
              case 0:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        unint64_t v864 = (double *)*((void *)a4 + 2);
                        unint64_t v865 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v866 = *v864++;
                          *v865++ = (int)v866 >= a3;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      unsigned int v324 = (double *)*((void *)a4 + 2);
                      double v325 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v326 = *v324++;
                        *v325++ = (int)v326 >= a3;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v867 = (double *)*((void *)a4 + 2);
                        v868 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v869 = *v867++;
                          *v868++ = a3 <= (unint64_t)v869;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      double v327 = (double *)*((void *)a4 + 2);
                      unsigned int v328 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v329 = *v327++;
                        *v328++ = a3 <= (unint64_t)v329;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        unint64_t v620 = (double *)*((void *)a4 + 2);
                        v621 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v622 = *v620++;
                          else {
                            double v623 = 1.0;
                          }
                          *v621++ = v623;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      double v80 = (double *)*((void *)a4 + 2);
                      unint64_t v81 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v82 = *v80++;
                        else {
                          double v83 = 1.0;
                        }
                        *v81++ = v83;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                }

                break;
            }

            break;
          case 1:
            switch(v35)
            {
              case 2:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v1068 = (unsigned __int8 *)*((void *)a4 + 2);
                        v1069 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1070 = *v1068++;
                          *v1069++ = v1070 >= a3;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      v528 = (unsigned __int8 *)*((void *)a4 + 2);
                      v529 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v530 = *v528++;
                        *v529++ = v530 >= a3;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        unint64_t v1071 = (unsigned __int8 *)*((void *)a4 + 2);
                        unint64_t v1072 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1073 = *v1071++;
                          *v1072++ = a3 <= v1073;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      unsigned int v531 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v532 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v533 = *v531++;
                        *v532++ = a3 <= v533;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v756 = (unsigned __int8 *)*((void *)a4 + 2);
                        v757 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v758 = *v756++;
                          else {
                            double v759 = 1.0;
                          }
                          *v757++ = v759;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      double v216 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v217 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v218 = *v216++;
                        else {
                          double v219 = 1.0;
                        }
                        *v217++ = v219;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                }

                break;
              case 1:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        double v1074 = (unsigned __int8 *)*((void *)a4 + 2);
                        v1075 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v1076 = *v1074;
                          v1074 += 8;
                          *v1075++ = a3 <= v1076;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      v534 = (unsigned __int8 *)*((void *)a4 + 2);
                      v535 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v536 = *v534;
                        v534 += 8;
                        *v535++ = a3 <= v536;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v1077 = (unint64_t *)*((void *)a4 + 2);
                        unsigned int v1078 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v1079 = *v1077++;
                          *v1078++ = v1079 >= a3;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      unint64_t v537 = (unint64_t *)*((void *)a4 + 2);
                      double v538 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v539 = *v537++;
                        *v538++ = v539 >= a3;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        uint64_t v760 = (unint64_t *)*((void *)a4 + 2);
                        v761 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v762 = *v760++;
                          else {
                            double v763 = 1.0;
                          }
                          *v761++ = v763;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      char v220 = (unint64_t *)*((void *)a4 + 2);
                      unsigned int v221 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v222 = *v220++;
                        else {
                          double v223 = 1.0;
                        }
                        *v221++ = v223;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                }

                break;
              case 0:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        unsigned int v870 = (double *)*((void *)a4 + 2);
                        unsigned int v871 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v872 = *v870++;
                          *v871++ = (int)v872 >= a3;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      char v330 = (double *)*((void *)a4 + 2);
                      unint64_t v331 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v332 = *v330++;
                        *v331++ = (int)v332 >= a3;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v873 = (double *)*((void *)a4 + 2);
                        v874 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v875 = *v873++;
                          *v874++ = a3 <= (unint64_t)v875;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      double v333 = (double *)*((void *)a4 + 2);
                      v334 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v335 = *v333++;
                        *v334++ = a3 <= (unint64_t)v335;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        double v624 = (double *)*((void *)a4 + 2);
                        int v625 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v626 = *v624++;
                          else {
                            double v627 = 1.0;
                          }
                          *v625++ = v627;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      double v84 = (double *)*((void *)a4 + 2);
                      unint64_t v85 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v86 = *v84++;
                        else {
                          double v87 = 1.0;
                        }
                        *v85++ = v87;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                }

                break;
            }

            break;
          case 0:
            switch(v35)
            {
              case 2:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        unsigned int v936 = (unsigned __int8 *)*((void *)a4 + 2);
                        v937 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v938 = *v936++;
                          *v937++ = v938 >= (int)*(double *)&a3;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      v396 = (unsigned __int8 *)*((void *)a4 + 2);
                      v397 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v398 = *v396++;
                        *v397++ = v398 >= (int)*(double *)&a3;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v939 = (unsigned __int8 *)*((void *)a4 + 2);
                        unsigned int v940 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v941 = *v939++;
                          *v940++ = (unint64_t)*(double *)&a3 <= v941;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      int v399 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v400 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v401 = *v399++;
                        *v400++ = (unint64_t)*(double *)&a3 <= v401;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v668 = (unsigned __int8 *)*((void *)a4 + 2);
                        v669 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v670 = *v668++;
                          else {
                            double v671 = 1.0;
                          }
                          *v669++ = v671;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      unint64_t v128 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v129 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v130 = *v128++;
                        else {
                          double v131 = 1.0;
                        }
                        *v129++ = v131;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                }

                break;
              case 1:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        unsigned int v942 = (unsigned __int8 *)*((void *)a4 + 2);
                        v943 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          unsigned int v944 = *v942;
                          v942 += 8;
                          *v943++ = (int)*(double *)&a3 <= v944;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      v402 = (unsigned __int8 *)*((void *)a4 + 2);
                      v403 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v404 = *v402;
                        v402 += 8;
                        *v403++ = (int)*(double *)&a3 <= v404;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v945 = (unint64_t *)*((void *)a4 + 2);
                        unint64_t v946 = (void *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v947 = *v945++;
                          *v946++ = v947 >= (unint64_t)*(double *)&a3;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      unint64_t v405 = (unint64_t *)*((void *)a4 + 2);
                      double v406 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v407 = *v405++;
                        *v406++ = v407 >= (unint64_t)*(double *)&a3;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        unint64_t v672 = (unint64_t *)*((void *)a4 + 2);
                        unint64_t v673 = (double *)*((void *)a5 + 2);
                        do
                        {
                          unint64_t v674 = *v672++;
                          else {
                            double v675 = 1.0;
                          }
                          *v673++ = v675;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      double v132 = (unint64_t *)*((void *)a4 + 2);
                      double v133 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v134 = *v132++;
                        else {
                          double v135 = 1.0;
                        }
                        *v133++ = v135;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                }

                break;
              case 0:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v804 = (double *)*((void *)a4 + 2);
                        uint64_t v805 = (BOOL *)*((void *)a5 + 2);
                        do
                        {
                          double v806 = *v804++;
                          *v805++ = (int)*(double *)&a3 <= (int)v806;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      int v264 = (double *)*((void *)a4 + 2);
                      int v265 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v266 = *v264++;
                        *v265++ = (int)*(double *)&a3 <= (int)v266;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        uint64_t v807 = (double *)*((void *)a4 + 2);
                        v808 = (void *)*((void *)a5 + 2);
                        do
                        {
                          double v809 = *v807++;
                          *v808++ = (unint64_t)*(double *)&a3 <= (unint64_t)v809;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      unint64_t v267 = (double *)*((void *)a4 + 2);
                      double v268 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v269 = *v267++;
                        *v268++ = (unint64_t)*(double *)&a3 <= (unint64_t)v269;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        double v580 = (double *)*((void *)a4 + 2);
                        v581 = (double *)*((void *)a5 + 2);
                        do
                        {
                          double v582 = *v580++;
                          else {
                            double v583 = 1.0;
                          }
                          *v581++ = v583;
                          --v34;
                        }

                        while (v34);
                      }
                    }

                    else if (!a6 && v34)
                    {
                      double v37 = (double *)*((void *)a4 + 2);
                      uint64_t v38 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v39 = *v37++;
                        else {
                          double v40 = 1.0;
                        }
                        *v38++ = v40;
                        --v34;
                      }

                      while (v34);
                    }

                    break;
                }

                break;
            }

            break;
        }

        return a5;
      }

      return result;
    case 5:
      unint64_t result = 0LL;
      if (!a4 || !a5) {
        return result;
      }
      if (*((_BYTE *)a5 + 32)) {
        return 0LL;
      }
      uint64_t v41 = *((void *)a4 + 1);
      if (v41 != *((void *)a5 + 1)) {
        return 0LL;
      }
      int v42 = *a4;
      int v43 = *a5;
      switch(a2)
      {
        case 2:
          switch(v42)
          {
            case 2:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      double v1080 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v1081 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1082 = *v1080++;
                        *v1081++ = v1082 <= a3;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    v540 = (unsigned __int8 *)*((void *)a4 + 2);
                    v541 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v542 = *v540++;
                      *v541++ = v542 <= a3;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v1083 = (unsigned __int8 *)*((void *)a4 + 2);
                      v1084 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1085 = *v1083++;
                        *v1084++ = a3 >= (unint64_t)v1085;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    unsigned int v543 = (unsigned __int8 *)*((void *)a4 + 2);
                    double v544 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v545 = *v543++;
                      *v544++ = a3 >= (unint64_t)v545;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      int v764 = (unsigned __int8 *)*((void *)a4 + 2);
                      int v765 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v766 = *v764++;
                        else {
                          double v767 = 1.0;
                        }
                        *v765++ = v767;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    double v224 = (unsigned __int8 *)*((void *)a4 + 2);
                    double v225 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v226 = *v224++;
                      else {
                        double v227 = 1.0;
                      }
                      *v225++ = v227;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
              }

              break;
            case 1:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      unint64_t v1086 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v1087 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1088 = *v1086;
                        v1086 += 8;
                        *v1087++ = a3 >= v1088;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    v546 = (unsigned __int8 *)*((void *)a4 + 2);
                    v547 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v548 = *v546;
                      v546 += 8;
                      *v547++ = a3 >= v548;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v1089 = (unint64_t *)*((void *)a4 + 2);
                      v1090 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v1091 = *v1089++;
                        *v1090++ = a3 >= v1091;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    unsigned int v549 = (unint64_t *)*((void *)a4 + 2);
                    double v550 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v551 = *v549++;
                      *v550++ = a3 >= v551;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v768 = (unint64_t *)*((void *)a4 + 2);
                      v769 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v770 = *v768++;
                        else {
                          double v771 = 1.0;
                        }
                        *v769++ = v771;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    unint64_t v228 = (unint64_t *)*((void *)a4 + 2);
                    double v229 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v230 = *v228++;
                      else {
                        double v231 = 1.0;
                      }
                      *v229++ = v231;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
              }

              break;
            case 0:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      unint64_t v876 = (double *)*((void *)a4 + 2);
                      unint64_t v877 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v878 = *v876++;
                        *v877++ = (int)v878 <= a3;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    int v336 = (double *)*((void *)a4 + 2);
                    unint64_t v337 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v338 = *v336++;
                      *v337++ = (int)v338 <= a3;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v879 = (double *)*((void *)a4 + 2);
                      v880 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v881 = *v879++;
                        *v880++ = a3 >= (unint64_t)v881;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    unint64_t v339 = (double *)*((void *)a4 + 2);
                    double v340 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v341 = *v339++;
                      *v340++ = a3 >= (unint64_t)v341;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v628 = (double *)*((void *)a4 + 2);
                      double v629 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v630 = *v628++;
                        else {
                          double v631 = 1.0;
                        }
                        *v629++ = v631;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    unsigned int v88 = (double *)*((void *)a4 + 2);
                    double v89 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v90 = *v88++;
                      else {
                        double v91 = 1.0;
                      }
                      *v89++ = v91;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
              }

              break;
          }

          break;
        case 1:
          switch(v42)
          {
            case 2:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      unsigned int v1092 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v1093 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1094 = *v1092++;
                        *v1093++ = v1094 <= a3;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    v552 = (unsigned __int8 *)*((void *)a4 + 2);
                    v553 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v554 = *v552++;
                      *v553++ = v554 <= a3;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      double v1095 = (unsigned __int8 *)*((void *)a4 + 2);
                      v1096 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1097 = *v1095++;
                        *v1096++ = a3 >= v1097;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    unsigned int v555 = (unsigned __int8 *)*((void *)a4 + 2);
                    double v556 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v557 = *v555++;
                      *v556++ = a3 >= v557;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v772 = (unsigned __int8 *)*((void *)a4 + 2);
                      v773 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v774 = *v772++;
                        else {
                          double v775 = 1.0;
                        }
                        *v773++ = v775;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    double v232 = (unsigned __int8 *)*((void *)a4 + 2);
                    unsigned int v233 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v234 = *v232++;
                      else {
                        double v235 = 1.0;
                      }
                      *v233++ = v235;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
              }

              break;
            case 1:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v1098 = (unsigned __int8 *)*((void *)a4 + 2);
                      unint64_t v1099 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1100 = *v1098;
                        v1098 += 8;
                        *v1099++ = a3 >= v1100;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    v558 = (unsigned __int8 *)*((void *)a4 + 2);
                    v559 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v560 = *v558;
                      v558 += 8;
                      *v559++ = a3 >= v560;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      double v1101 = (unint64_t *)*((void *)a4 + 2);
                      double v1102 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v1103 = *v1101++;
                        *v1102++ = v1103 <= a3;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    unint64_t v561 = (unint64_t *)*((void *)a4 + 2);
                    double v562 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v563 = *v561++;
                      *v562++ = v563 <= a3;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      int v776 = (unint64_t *)*((void *)a4 + 2);
                      int v777 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v778 = *v776++;
                        else {
                          double v779 = 1.0;
                        }
                        *v777++ = v779;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    int v236 = (unint64_t *)*((void *)a4 + 2);
                    int v237 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v238 = *v236++;
                      else {
                        double v239 = 1.0;
                      }
                      *v237++ = v239;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
              }

              break;
            case 0:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      unsigned int v882 = (double *)*((void *)a4 + 2);
                      unsigned int v883 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v884 = *v882++;
                        *v883++ = (int)v884 <= a3;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    unsigned int v342 = (double *)*((void *)a4 + 2);
                    unsigned int v343 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v344 = *v342++;
                      *v343++ = (int)v344 <= a3;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v885 = (double *)*((void *)a4 + 2);
                      v886 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v887 = *v885++;
                        *v886++ = a3 >= (unint64_t)v887;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    unsigned int v345 = (double *)*((void *)a4 + 2);
                    unsigned int v346 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v347 = *v345++;
                      *v346++ = a3 >= (unint64_t)v347;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v632 = (double *)*((void *)a4 + 2);
                      v633 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v634 = *v632++;
                        else {
                          double v635 = 1.0;
                        }
                        *v633++ = v635;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    uint64_t v92 = (double *)*((void *)a4 + 2);
                    unsigned int v93 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v94 = *v92++;
                      else {
                        double v95 = 1.0;
                      }
                      *v93++ = v95;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
              }

              break;
          }

          break;
        case 0:
          switch(v42)
          {
            case 2:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      unint64_t v948 = (unsigned __int8 *)*((void *)a4 + 2);
                      v949 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v950 = *v948++;
                        *v949++ = v950 <= (int)*(double *)&a3;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    v408 = (unsigned __int8 *)*((void *)a4 + 2);
                    v409 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v410 = *v408++;
                      *v409++ = v410 <= (int)*(double *)&a3;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v951 = (unsigned __int8 *)*((void *)a4 + 2);
                      unsigned int v952 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v953 = *v951++;
                        *v952++ = (unint64_t)*(double *)&a3 >= v953;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    int v411 = (unsigned __int8 *)*((void *)a4 + 2);
                    double v412 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v413 = *v411++;
                      *v412++ = (unint64_t)*(double *)&a3 >= v413;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v676 = (unsigned __int8 *)*((void *)a4 + 2);
                      double v677 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v678 = *v676++;
                        else {
                          double v679 = 1.0;
                        }
                        *v677++ = v679;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    double v136 = (unsigned __int8 *)*((void *)a4 + 2);
                    unint64_t v137 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v138 = *v136++;
                      else {
                        double v139 = 1.0;
                      }
                      *v137++ = v139;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
              }

              break;
            case 1:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      unsigned int v954 = (unsigned __int8 *)*((void *)a4 + 2);
                      v955 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v956 = *v954;
                        v954 += 8;
                        *v955++ = (int)*(double *)&a3 >= v956;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    v414 = (unsigned __int8 *)*((void *)a4 + 2);
                    v415 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v416 = *v414;
                      v414 += 8;
                      *v415++ = (int)*(double *)&a3 >= v416;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v957 = (unint64_t *)*((void *)a4 + 2);
                      unint64_t v958 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v959 = *v957++;
                        *v958++ = v959 <= (unint64_t)*(double *)&a3;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    unint64_t v417 = (unint64_t *)*((void *)a4 + 2);
                    double v418 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v419 = *v417++;
                      *v418++ = v419 <= (unint64_t)*(double *)&a3;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v680 = (unint64_t *)*((void *)a4 + 2);
                      v681 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v682 = *v680++;
                        else {
                          double v683 = 1.0;
                        }
                        *v681++ = v683;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6)
                  {
                    if (v41)
                    {
                      double v140 = (unint64_t *)*((void *)a4 + 2);
                      double v141 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v142 = *v140++;
                        else {
                          double v143 = 1.0;
                        }
                        *v141++ = v143;
                        --v41;
                      }

                      while (v41);
                    }

                    return a5;
                  }

                  break;
              }

              break;
            case 0:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v810 = (double *)*((void *)a4 + 2);
                      int v811 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v812 = *v810++;
                        *v811++ = (int)*(double *)&a3 >= (int)v812;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    unsigned int v270 = (double *)*((void *)a4 + 2);
                    double v271 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v272 = *v270++;
                      *v271++ = (int)*(double *)&a3 >= (int)v272;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      int v813 = (double *)*((void *)a4 + 2);
                      v814 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v815 = *v813++;
                        *v814++ = (unint64_t)*(double *)&a3 >= (unint64_t)v815;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    double v273 = (double *)*((void *)a4 + 2);
                    uint64_t v274 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v275 = *v273++;
                      *v274++ = (unint64_t)*(double *)&a3 >= (unint64_t)v275;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      unint64_t v584 = (double *)*((void *)a4 + 2);
                      unint64_t v585 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v586 = *v584++;
                        else {
                          double v587 = 1.0;
                        }
                        *v585++ = v587;
                        --v41;
                      }

                      while (v41);
                    }
                  }

                  else if (!a6 && v41)
                  {
                    unint64_t v44 = (double *)*((void *)a4 + 2);
                    double v45 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v46 = *v44++;
                      else {
                        double v47 = 1.0;
                      }
                      *v45++ = v47;
                      --v41;
                    }

                    while (v41);
                  }

                  break;
              }

              return a5;
          }

          break;
      }

      return a5;
    default:
      return result;
  }

int *sub_1E9C8(int *result, int *a2, int a3, unint64_t a4, int *a5, int a6)
{
  switch((int)result)
  {
    case 0:
      unint64_t result = 0LL;
      if (a2 && a5)
      {
        if (*((_BYTE *)a5 + 32)) {
          return 0LL;
        }
        uint64_t v6 = *((void *)a2 + 1);
        if (v6 != *((void *)a5 + 1)) {
          return 0LL;
        }
        int v7 = *a2;
        int v8 = *a5;
        if (*a2 == 2)
        {
          switch(a3)
          {
            case 2:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v960 = (unsigned __int8 *)*((void *)a2 + 2);
                      v961 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v962 = *v960++;
                        *v961++ = v962 == a4;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    v420 = (unsigned __int8 *)*((void *)a2 + 2);
                    v421 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v422 = *v420++;
                      *v421++ = v422 == a4;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      unsigned int v963 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v964 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v965 = *v963++;
                        *v964++ = v965 == a4;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    unsigned int v423 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v424 = (void *)*((void *)a5 + 2);
                    do
                    {
                      int v425 = *v423++;
                      *v424++ = v425 == a4;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v684 = (unsigned __int8 *)*((void *)a2 + 2);
                      v685 = (double *)*((void *)a5 + 2);
                      do
                      {
                        int v686 = *v684++;
                        else {
                          double v687 = 0.0;
                        }
                        *v685++ = v687;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    unsigned int v144 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v145 = (double *)*((void *)a5 + 2);
                    do
                    {
                      int v146 = *v144++;
                      else {
                        double v147 = 0.0;
                      }
                      *v145++ = v147;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
              }

              break;
            case 1:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v966 = (unsigned __int8 *)*((void *)a2 + 2);
                      v967 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v968 = *v966++;
                        *v967++ = v968 == a4;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    v426 = (unsigned __int8 *)*((void *)a2 + 2);
                    v427 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v428 = *v426++;
                      *v427++ = v428 == a4;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      unint64_t v969 = (unsigned __int8 *)*((void *)a2 + 2);
                      unint64_t v970 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v971 = *v969++;
                        *v970++ = a4 == v971;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    unint64_t v429 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v430 = (void *)*((void *)a5 + 2);
                    do
                    {
                      int v431 = *v429++;
                      *v430++ = a4 == v431;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      unsigned int v688 = (unsigned __int8 *)*((void *)a2 + 2);
                      v689 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v690 = *v688++;
                        else {
                          double v691 = 0.0;
                        }
                        *v689++ = v691;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    unint64_t v148 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v149 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v150 = *v148++;
                      else {
                        double v151 = 0.0;
                      }
                      *v149++ = v151;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
              }

              break;
            case 0:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v816 = (unsigned __int8 *)*((void *)a2 + 2);
                      uint64_t v817 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v818 = *v816++;
                        *v817++ = v818 == (int)*(double *)&a4;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    unsigned int v276 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v277 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v278 = *v276++;
                      *v277++ = v278 == (int)*(double *)&a4;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v819 = (unsigned __int8 *)*((void *)a2 + 2);
                      v820 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v821 = *v819++;
                        *v820++ = v821 == (unint64_t)*(double *)&a4;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    double v279 = (unsigned __int8 *)*((void *)a2 + 2);
                    char v280 = (void *)*((void *)a5 + 2);
                    do
                    {
                      int v281 = *v279++;
                      *v280++ = v281 == (unint64_t)*(double *)&a4;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v588 = (unsigned __int8 *)*((void *)a2 + 2);
                      v589 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v590 = *v588++;
                        else {
                          double v591 = 0.0;
                        }
                        *v589++ = v591;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    double v48 = (unsigned __int8 *)*((void *)a2 + 2);
                    uint64_t v49 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v50 = *v48++;
                      else {
                        double v51 = 0.0;
                      }
                      *v49++ = v51;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
              }

              break;
          }
        }

        else if (v7 == 1)
        {
          switch(a3)
          {
            case 2:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v972 = (unsigned __int8 *)*((void *)a2 + 2);
                      v973 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v974 = *v972;
                        v972 += 8;
                        *v973++ = v974 == a4;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    v432 = (unsigned __int8 *)*((void *)a2 + 2);
                    v433 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v434 = *v432;
                      v432 += 8;
                      *v433++ = v434 == a4;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      unsigned int v975 = (uint64_t *)*((void *)a2 + 2);
                      unsigned int v976 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v977 = *v975++;
                        *v976++ = v977 == a4;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    unsigned int v435 = (uint64_t *)*((void *)a2 + 2);
                    double v436 = (void *)*((void *)a5 + 2);
                    do
                    {
                      uint64_t v437 = *v435++;
                      *v436++ = v437 == a4;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      double v692 = (unint64_t *)*((void *)a2 + 2);
                      unint64_t v693 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v694 = *v692++;
                        else {
                          double v695 = 0.0;
                        }
                        *v693++ = v695;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    unint64_t v152 = (unint64_t *)*((void *)a2 + 2);
                    double v153 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v154 = *v152++;
                      else {
                        double v155 = 0.0;
                      }
                      *v153++ = v155;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
              }

              break;
            case 1:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v978 = (unsigned __int8 *)*((void *)a2 + 2);
                      v979 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v980 = *v978;
                        v978 += 8;
                        *v979++ = v980 == a4;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    v438 = (unsigned __int8 *)*((void *)a2 + 2);
                    v439 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v440 = *v438;
                      v438 += 8;
                      *v439++ = v440 == a4;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      unsigned int v981 = (uint64_t *)*((void *)a2 + 2);
                      unsigned int v982 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v983 = *v981++;
                        *v982++ = v983 == a4;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    unint64_t v441 = (uint64_t *)*((void *)a2 + 2);
                    double v442 = (void *)*((void *)a5 + 2);
                    do
                    {
                      uint64_t v443 = *v441++;
                      *v442++ = v443 == a4;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v696 = (unint64_t *)*((void *)a2 + 2);
                      v697 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v698 = *v696++;
                        else {
                          double v699 = 0.0;
                        }
                        *v697++ = v699;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    double v156 = (unint64_t *)*((void *)a2 + 2);
                    int v157 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v158 = *v156++;
                      else {
                        double v159 = 0.0;
                      }
                      *v157++ = v159;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
              }

              break;
            case 0:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      int v822 = (unsigned __int8 *)*((void *)a2 + 2);
                      int v823 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v824 = *v822;
                        v822 += 8;
                        *v823++ = v824 == (int)*(double *)&a4;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    unint64_t v282 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v283 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v284 = *v282;
                      v282 += 8;
                      *v283++ = v284 == (int)*(double *)&a4;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v825 = (uint64_t *)*((void *)a2 + 2);
                      v826 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v827 = *v825++;
                        *v826++ = v827 == (unint64_t)*(double *)&a4;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    unint64_t v285 = (uint64_t *)*((void *)a2 + 2);
                    double v286 = (void *)*((void *)a5 + 2);
                    do
                    {
                      uint64_t v287 = *v285++;
                      *v286++ = v287 == (unint64_t)*(double *)&a4;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      double v592 = (unint64_t *)*((void *)a2 + 2);
                      v593 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v594 = *v592++;
                        else {
                          double v595 = 0.0;
                        }
                        *v593++ = v595;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    int v52 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v53 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v54 = *v52++;
                      else {
                        double v55 = 0.0;
                      }
                      *v53++ = v55;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
              }

              break;
          }
        }

        else if (!v7)
        {
          switch(a3)
          {
            case 2:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      unsigned int v888 = (double *)*((void *)a2 + 2);
                      unsigned int v889 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v890 = *v888++;
                        *v889++ = (int)v890 == a4;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    unsigned int v348 = (double *)*((void *)a2 + 2);
                    unint64_t v349 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v350 = *v348++;
                      *v349++ = (int)v350 == a4;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v891 = (double *)*((void *)a2 + 2);
                      v892 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v893 = *v891++;
                        *v892++ = a4 == (unint64_t)v893;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    unsigned int v351 = (double *)*((void *)a2 + 2);
                    double v352 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v353 = *v351++;
                      *v352++ = a4 == (unint64_t)v353;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      int v636 = (double *)*((void *)a2 + 2);
                      v637 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v638 = *v636++;
                        else {
                          double v639 = 0.0;
                        }
                        *v637++ = v639;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    unint64_t v96 = (double *)*((void *)a2 + 2);
                    double v97 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v98 = *v96++;
                      else {
                        double v99 = 0.0;
                      }
                      *v97++ = v99;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
              }

              break;
            case 1:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      unsigned int v894 = (double *)*((void *)a2 + 2);
                      unsigned int v895 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v896 = *v894++;
                        *v895++ = (int)v896 == a4;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    double v354 = (double *)*((void *)a2 + 2);
                    unint64_t v355 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v356 = *v354++;
                      *v355++ = (int)v356 == a4;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v897 = (double *)*((void *)a2 + 2);
                      v898 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v899 = *v897++;
                        *v898++ = a4 == (unint64_t)v899;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    unsigned int v357 = (double *)*((void *)a2 + 2);
                    unint64_t v358 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v359 = *v357++;
                      *v358++ = a4 == (unint64_t)v359;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      double v640 = (double *)*((void *)a2 + 2);
                      unint64_t v641 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v642 = *v640++;
                        else {
                          double v643 = 0.0;
                        }
                        *v641++ = v643;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    unint64_t v100 = (double *)*((void *)a2 + 2);
                    unsigned int v101 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v102 = *v100++;
                      else {
                        double v103 = 0.0;
                      }
                      *v101++ = v103;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
              }

              break;
            case 0:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v780 = (double *)*((void *)a2 + 2);
                      uint64_t v781 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v782 = *v780++;
                        *v781++ = (int)v782 == (int)*(double *)&a4;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    unsigned int v240 = (double *)*((void *)a2 + 2);
                    double v241 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v242 = *v240++;
                      *v241++ = (int)v242 == (int)*(double *)&a4;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      uint64_t v783 = (double *)*((void *)a2 + 2);
                      v784 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v785 = *v783++;
                        *v784++ = *(uint64_t *)&v785 == a4;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    unsigned int v243 = (double *)*((void *)a2 + 2);
                    double v244 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v245 = *v243++;
                      *v244++ = *(uint64_t *)&v245 == a4;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v564 = (double *)*((void *)a2 + 2);
                      v565 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v566 = *v564++;
                        else {
                          double v567 = 0.0;
                        }
                        *v565++ = v567;
                        --v6;
                      }

                      while (v6);
                    }
                  }

                  else if (!a6 && v6)
                  {
                    int v9 = (double *)*((void *)a2 + 2);
                    unint64_t v10 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v11 = *v9++;
                      else {
                        double v12 = 0.0;
                      }
                      *v10++ = v12;
                      --v6;
                    }

                    while (v6);
                  }

                  break;
              }

              break;
          }
        }

        return a5;
      }

      return result;
    case 1:
      unint64_t result = 0LL;
      if (a2 && a5)
      {
        if (*((_BYTE *)a5 + 32)) {
          return 0LL;
        }
        uint64_t v13 = *((void *)a2 + 1);
        if (v13 != *((void *)a5 + 1)) {
          return 0LL;
        }
        int v14 = *a2;
        int v15 = *a5;
        if (*a2 == 2)
        {
          switch(a3)
          {
            case 2:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v984 = (unsigned __int8 *)*((void *)a2 + 2);
                      v985 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v986 = *v984++;
                        *v985++ = v986 != a4;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    v444 = (unsigned __int8 *)*((void *)a2 + 2);
                    v445 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v446 = *v444++;
                      *v445++ = v446 != a4;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      unsigned int v987 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v988 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v989 = *v987++;
                        *v988++ = v989 != a4;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    unsigned int v447 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v448 = (void *)*((void *)a5 + 2);
                    do
                    {
                      int v449 = *v447++;
                      *v448++ = v449 != a4;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v700 = (unsigned __int8 *)*((void *)a2 + 2);
                      v701 = (double *)*((void *)a5 + 2);
                      do
                      {
                        int v702 = *v700++;
                        else {
                          double v703 = 1.0;
                        }
                        *v701++ = v703;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    double v160 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v161 = (double *)*((void *)a5 + 2);
                    do
                    {
                      int v162 = *v160++;
                      else {
                        double v163 = 1.0;
                      }
                      *v161++ = v163;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
              }

              break;
            case 1:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v990 = (unsigned __int8 *)*((void *)a2 + 2);
                      v991 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v992 = *v990++;
                        *v991++ = v992 != a4;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    v450 = (unsigned __int8 *)*((void *)a2 + 2);
                    v451 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v452 = *v450++;
                      *v451++ = v452 != a4;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      unint64_t v993 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v994 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v995 = *v993++;
                        *v994++ = a4 != v995;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    unint64_t v453 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v454 = (void *)*((void *)a5 + 2);
                    do
                    {
                      int v455 = *v453++;
                      *v454++ = a4 != v455;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      unint64_t v704 = (unsigned __int8 *)*((void *)a2 + 2);
                      v705 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v706 = *v704++;
                        else {
                          double v707 = 1.0;
                        }
                        *v705++ = v707;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    double v164 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v165 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v166 = *v164++;
                      else {
                        double v167 = 1.0;
                      }
                      *v165++ = v167;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
              }

              break;
            case 0:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      uint64_t v828 = (unsigned __int8 *)*((void *)a2 + 2);
                      uint64_t v829 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v830 = *v828++;
                        *v829++ = v830 != (int)*(double *)&a4;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    unint64_t v288 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v289 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v290 = *v288++;
                      *v289++ = v290 != (int)*(double *)&a4;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v831 = (unsigned __int8 *)*((void *)a2 + 2);
                      v832 = (void *)*((void *)a5 + 2);
                      do
                      {
                        int v833 = *v831++;
                        *v832++ = v833 != (unint64_t)*(double *)&a4;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    unsigned int v291 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v292 = (void *)*((void *)a5 + 2);
                    do
                    {
                      int v293 = *v291++;
                      *v292++ = v293 != (unint64_t)*(double *)&a4;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      unint64_t v596 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v597 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v598 = *v596++;
                        else {
                          double v599 = 1.0;
                        }
                        *v597++ = v599;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    double v56 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v57 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v58 = *v56++;
                      else {
                        double v59 = 1.0;
                      }
                      *v57++ = v59;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
              }

              break;
          }
        }

        else if (v14 == 1)
        {
          switch(a3)
          {
            case 2:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v996 = (unsigned __int8 *)*((void *)a2 + 2);
                      v997 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v998 = *v996;
                        v996 += 8;
                        *v997++ = v998 != a4;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    v456 = (unsigned __int8 *)*((void *)a2 + 2);
                    v457 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v458 = *v456;
                      v456 += 8;
                      *v457++ = v458 != a4;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      unsigned int v999 = (uint64_t *)*((void *)a2 + 2);
                      unsigned int v1000 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v1001 = *v999++;
                        *v1000++ = v1001 != a4;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    unsigned int v459 = (uint64_t *)*((void *)a2 + 2);
                    double v460 = (void *)*((void *)a5 + 2);
                    do
                    {
                      uint64_t v461 = *v459++;
                      *v460++ = v461 != a4;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      double v708 = (unint64_t *)*((void *)a2 + 2);
                      unsigned int v709 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v710 = *v708++;
                        else {
                          double v711 = 1.0;
                        }
                        *v709++ = v711;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    unint64_t v168 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v169 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v170 = *v168++;
                      else {
                        double v171 = 1.0;
                      }
                      *v169++ = v171;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
              }

              break;
            case 1:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v1002 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1003 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v1004 = *v1002;
                        v1002 += 8;
                        *v1003++ = v1004 != a4;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    v462 = (unsigned __int8 *)*((void *)a2 + 2);
                    v463 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v464 = *v462;
                      v462 += 8;
                      *v463++ = v464 != a4;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      unint64_t v1005 = (uint64_t *)*((void *)a2 + 2);
                      unint64_t v1006 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v1007 = *v1005++;
                        *v1006++ = v1007 != a4;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    unint64_t v465 = (uint64_t *)*((void *)a2 + 2);
                    double v466 = (void *)*((void *)a5 + 2);
                    do
                    {
                      uint64_t v467 = *v465++;
                      *v466++ = v467 != a4;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v712 = (unint64_t *)*((void *)a2 + 2);
                      double v713 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v714 = *v712++;
                        else {
                          double v715 = 1.0;
                        }
                        *v713++ = v715;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    double v172 = (unint64_t *)*((void *)a2 + 2);
                    double v173 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v174 = *v172++;
                      else {
                        double v175 = 1.0;
                      }
                      *v173++ = v175;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
              }

              break;
            case 0:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      unsigned int v834 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v835 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        int v836 = *v834;
                        v834 += 8;
                        *v835++ = v836 != (int)*(double *)&a4;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    unsigned int v294 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v295 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      int v296 = *v294;
                      v294 += 8;
                      *v295++ = v296 != (int)*(double *)&a4;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v837 = (uint64_t *)*((void *)a2 + 2);
                      v838 = (void *)*((void *)a5 + 2);
                      do
                      {
                        uint64_t v839 = *v837++;
                        *v838++ = v839 != (unint64_t)*(double *)&a4;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    unsigned int v297 = (uint64_t *)*((void *)a2 + 2);
                    double v298 = (void *)*((void *)a5 + 2);
                    do
                    {
                      uint64_t v299 = *v297++;
                      *v298++ = v299 != (unint64_t)*(double *)&a4;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v600 = (unint64_t *)*((void *)a2 + 2);
                      v601 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v602 = *v600++;
                        else {
                          double v603 = 1.0;
                        }
                        *v601++ = v603;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    uint64_t v60 = (unint64_t *)*((void *)a2 + 2);
                    int v61 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v62 = *v60++;
                      else {
                        double v63 = 1.0;
                      }
                      *v61++ = v63;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
              }

              break;
          }
        }

        else if (!v14)
        {
          switch(a3)
          {
            case 2:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      unsigned int v900 = (double *)*((void *)a2 + 2);
                      unint64_t v901 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v902 = *v900++;
                        *v901++ = (int)v902 != a4;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    double v360 = (double *)*((void *)a2 + 2);
                    v361 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v362 = *v360++;
                      *v361++ = (int)v362 != a4;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v903 = (double *)*((void *)a2 + 2);
                      v904 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v905 = *v903++;
                        *v904++ = a4 != (unint64_t)v905;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    unint64_t v363 = (double *)*((void *)a2 + 2);
                    unint64_t v364 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v365 = *v363++;
                      *v364++ = a4 != (unint64_t)v365;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v644 = (double *)*((void *)a2 + 2);
                      double v645 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v646 = *v644++;
                        else {
                          double v647 = 1.0;
                        }
                        *v645++ = v647;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    double v104 = (double *)*((void *)a2 + 2);
                    double v105 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v106 = *v104++;
                      else {
                        double v107 = 1.0;
                      }
                      *v105++ = v107;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
              }

              break;
            case 1:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      unsigned int v906 = (double *)*((void *)a2 + 2);
                      unsigned int v907 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v908 = *v906++;
                        *v907++ = (int)v908 != a4;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    unint64_t v366 = (double *)*((void *)a2 + 2);
                    double v367 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v368 = *v366++;
                      *v367++ = (int)v368 != a4;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v909 = (double *)*((void *)a2 + 2);
                      v910 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v911 = *v909++;
                        *v910++ = a4 != (unint64_t)v911;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    unsigned int v369 = (double *)*((void *)a2 + 2);
                    unsigned int v370 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v371 = *v369++;
                      *v370++ = a4 != (unint64_t)v371;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v648 = (double *)*((void *)a2 + 2);
                      v649 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v650 = *v648++;
                        else {
                          double v651 = 1.0;
                        }
                        *v649++ = v651;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    unint64_t v108 = (double *)*((void *)a2 + 2);
                    unint64_t v109 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v110 = *v108++;
                      else {
                        double v111 = 1.0;
                      }
                      *v109++ = v111;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
              }

              break;
            case 0:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v786 = (double *)*((void *)a2 + 2);
                      int v787 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v788 = *v786++;
                        *v787++ = (int)v788 != (int)*(double *)&a4;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    double v246 = (double *)*((void *)a2 + 2);
                    unint64_t v247 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v248 = *v246++;
                      *v247++ = (int)v248 != (int)*(double *)&a4;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      int v789 = (double *)*((void *)a2 + 2);
                      v790 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v791 = *v789++;
                        *v790++ = *(uint64_t *)&v791 != a4;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    double v249 = (double *)*((void *)a2 + 2);
                    unint64_t v250 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v251 = *v249++;
                      *v250++ = *(uint64_t *)&v251 != a4;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      double v568 = (double *)*((void *)a2 + 2);
                      v569 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v570 = *v568++;
                        else {
                          double v571 = 1.0;
                        }
                        *v569++ = v571;
                        --v13;
                      }

                      while (v13);
                    }
                  }

                  else if (!a6 && v13)
                  {
                    uint64_t v16 = (double *)*((void *)a2 + 2);
                    int v17 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v18 = *v16++;
                      else {
                        double v19 = 1.0;
                      }
                      *v17++ = v19;
                      --v13;
                    }

                    while (v13);
                  }

                  break;
              }

              break;
          }
        }

        return a5;
      }

      return result;
    case 2:
      unint64_t result = 0LL;
      if (a2 && a5)
      {
        if (*((_BYTE *)a5 + 32)) {
          return 0LL;
        }
        uint64_t v20 = *((void *)a2 + 1);
        if (v20 != *((void *)a5 + 1)) {
          return 0LL;
        }
        int v21 = *a2;
        int v22 = *a5;
        if (*a2 == 2)
        {
          switch(a3)
          {
            case 2:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v1008 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1009 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1010 = *v1008++;
                        *v1009++ = v1010 < a4;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    v468 = (unsigned __int8 *)*((void *)a2 + 2);
                    v469 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v470 = *v468++;
                      *v469++ = v470 < a4;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      unsigned int v1011 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v1012 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1013 = *v1011++;
                        *v1012++ = a4 > (unint64_t)v1013;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    int v471 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v472 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v473 = *v471++;
                      *v472++ = a4 > (unint64_t)v473;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v716 = (unsigned __int8 *)*((void *)a2 + 2);
                      v717 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v718 = *v716++;
                        else {
                          double v719 = 1.0;
                        }
                        *v717++ = v719;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    unint64_t v176 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v177 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v178 = *v176++;
                      else {
                        double v179 = 1.0;
                      }
                      *v177++ = v179;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
              }

              break;
            case 1:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v1014 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1015 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1016 = *v1014++;
                        *v1015++ = v1016 < a4;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    v474 = (unsigned __int8 *)*((void *)a2 + 2);
                    v475 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v476 = *v474++;
                      *v475++ = v476 < a4;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      unint64_t v1017 = (unsigned __int8 *)*((void *)a2 + 2);
                      unint64_t v1018 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1019 = *v1017++;
                        *v1018++ = a4 > v1019;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    unsigned int v477 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v478 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v479 = *v477++;
                      *v478++ = a4 > v479;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      unsigned int v720 = (unsigned __int8 *)*((void *)a2 + 2);
                      v721 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v722 = *v720++;
                        else {
                          double v723 = 1.0;
                        }
                        *v721++ = v723;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    double v180 = (unsigned __int8 *)*((void *)a2 + 2);
                    int v181 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v182 = *v180++;
                      else {
                        double v183 = 1.0;
                      }
                      *v181++ = v183;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
              }

              break;
            case 0:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      unsigned int v840 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v841 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v842 = *v840++;
                        *v841++ = v842 < (int)*(double *)&a4;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    double v300 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v301 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v302 = *v300++;
                      *v301++ = v302 < (int)*(double *)&a4;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v843 = (unsigned __int8 *)*((void *)a2 + 2);
                      v844 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v845 = *v843++;
                        *v844++ = v845 < (unint64_t)*(double *)&a4;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    double v303 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v304 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v305 = *v303++;
                      *v304++ = v305 < (unint64_t)*(double *)&a4;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      double v604 = (unsigned __int8 *)*((void *)a2 + 2);
                      v605 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v606 = *v604++;
                        else {
                          double v607 = 1.0;
                        }
                        *v605++ = v607;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    char v64 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v65 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v66 = *v64++;
                      else {
                        double v67 = 1.0;
                      }
                      *v65++ = v67;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
              }

              break;
          }
        }

        else if (v21 == 1)
        {
          switch(a3)
          {
            case 2:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v1020 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1021 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1022 = *v1020;
                        v1020 += 8;
                        *v1021++ = v1022 < a4;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    v480 = (unsigned __int8 *)*((void *)a2 + 2);
                    v481 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v482 = *v480;
                      v480 += 8;
                      *v481++ = v482 < a4;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      double v1023 = (unint64_t *)*((void *)a2 + 2);
                      double v1024 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v1025 = *v1023++;
                        *v1024++ = v1025 < a4;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    int v483 = (unint64_t *)*((void *)a2 + 2);
                    double v484 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v485 = *v483++;
                      *v484++ = v485 < a4;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      double v724 = (unint64_t *)*((void *)a2 + 2);
                      unint64_t v725 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v726 = *v724++;
                        else {
                          double v727 = 1.0;
                        }
                        *v725++ = v727;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    double v184 = (unint64_t *)*((void *)a2 + 2);
                    double v185 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v186 = *v184++;
                      else {
                        double v187 = 1.0;
                      }
                      *v185++ = v187;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
              }

              break;
            case 1:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v1026 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1027 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1028 = *v1026;
                        v1026 += 8;
                        *v1027++ = v1028 < a4;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    v486 = (unsigned __int8 *)*((void *)a2 + 2);
                    v487 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v488 = *v486;
                      v486 += 8;
                      *v487++ = v488 < a4;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      double v1029 = (unint64_t *)*((void *)a2 + 2);
                      double v1030 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v1031 = *v1029++;
                        *v1030++ = v1031 < a4;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    uint64_t v489 = (unint64_t *)*((void *)a2 + 2);
                    double v490 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v491 = *v489++;
                      *v490++ = v491 < a4;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v728 = (unint64_t *)*((void *)a2 + 2);
                      double v729 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v730 = *v728++;
                        else {
                          double v731 = 1.0;
                        }
                        *v729++ = v731;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    double v188 = (unint64_t *)*((void *)a2 + 2);
                    int v189 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v190 = *v188++;
                      else {
                        double v191 = 1.0;
                      }
                      *v189++ = v191;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
              }

              break;
            case 0:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      unsigned int v846 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v847 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v848 = *v846;
                        v846 += 8;
                        *v847++ = v848 < (int)*(double *)&a4;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    double v306 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v307 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v308 = *v306;
                      v306 += 8;
                      *v307++ = v308 < (int)*(double *)&a4;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v849 = (unint64_t *)*((void *)a2 + 2);
                      v850 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v851 = *v849++;
                        *v850++ = v851 < (unint64_t)*(double *)&a4;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    double v309 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v310 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v311 = *v309++;
                      *v310++ = v311 < (unint64_t)*(double *)&a4;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      unint64_t v608 = (unint64_t *)*((void *)a2 + 2);
                      unint64_t v609 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v610 = *v608++;
                        else {
                          double v611 = 1.0;
                        }
                        *v609++ = v611;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    double v68 = (unint64_t *)*((void *)a2 + 2);
                    double v69 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v70 = *v68++;
                      else {
                        double v71 = 1.0;
                      }
                      *v69++ = v71;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
              }

              break;
          }
        }

        else if (!v21)
        {
          switch(a3)
          {
            case 2:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      unint64_t v912 = (double *)*((void *)a2 + 2);
                      v913 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v914 = *v912++;
                        *v913++ = (int)v914 < a4;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    unsigned int v372 = (double *)*((void *)a2 + 2);
                    unsigned int v373 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v374 = *v372++;
                      *v373++ = (int)v374 < a4;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v915 = (double *)*((void *)a2 + 2);
                      unsigned int v916 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v917 = *v915++;
                        *v916++ = a4 > (unint64_t)v917;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    v375 = (double *)*((void *)a2 + 2);
                    unint64_t v376 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v377 = *v375++;
                      *v376++ = a4 > (unint64_t)v377;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      uint64_t v652 = (double *)*((void *)a2 + 2);
                      v653 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v654 = *v652++;
                        else {
                          double v655 = 1.0;
                        }
                        *v653++ = v655;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    double v112 = (double *)*((void *)a2 + 2);
                    unsigned int v113 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v114 = *v112++;
                      else {
                        double v115 = 1.0;
                      }
                      *v113++ = v115;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
              }

              break;
            case 1:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      unsigned int v918 = (double *)*((void *)a2 + 2);
                      v919 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v920 = *v918++;
                        *v919++ = (int)v920 < a4;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    unsigned int v378 = (double *)*((void *)a2 + 2);
                    double v379 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v380 = *v378++;
                      *v379++ = (int)v380 < a4;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v921 = (double *)*((void *)a2 + 2);
                      unint64_t v922 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v923 = *v921++;
                        *v922++ = a4 > (unint64_t)v923;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    double v381 = (double *)*((void *)a2 + 2);
                    v382 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v383 = *v381++;
                      *v382++ = a4 > (unint64_t)v383;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      double v656 = (double *)*((void *)a2 + 2);
                      unsigned int v657 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v658 = *v656++;
                        else {
                          double v659 = 1.0;
                        }
                        *v657++ = v659;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    unsigned int v116 = (double *)*((void *)a2 + 2);
                    double v117 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v118 = *v116++;
                      else {
                        double v119 = 1.0;
                      }
                      *v117++ = v119;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
              }

              break;
            case 0:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v792 = (double *)*((void *)a2 + 2);
                      int v793 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v794 = *v792++;
                        *v793++ = (int)v794 < (int)*(double *)&a4;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    double v252 = (double *)*((void *)a2 + 2);
                    unsigned int v253 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v254 = *v252++;
                      *v253++ = (int)v254 < (int)*(double *)&a4;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      int v795 = (double *)*((void *)a2 + 2);
                      v796 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v797 = *v795++;
                        *v796++ = (unint64_t)v797 < (unint64_t)*(double *)&a4;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    double v255 = (double *)*((void *)a2 + 2);
                    unint64_t v256 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v257 = *v255++;
                      *v256++ = (unint64_t)v257 < (unint64_t)*(double *)&a4;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      unint64_t v572 = (double *)*((void *)a2 + 2);
                      unsigned int v573 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v574 = *v572++;
                        else {
                          double v575 = 1.0;
                        }
                        *v573++ = v575;
                        --v20;
                      }

                      while (v20);
                    }
                  }

                  else if (!a6 && v20)
                  {
                    double v23 = (double *)*((void *)a2 + 2);
                    double v24 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v25 = *v23++;
                      else {
                        double v26 = 1.0;
                      }
                      *v24++ = v26;
                      --v20;
                    }

                    while (v20);
                  }

                  break;
              }

              break;
          }
        }

        return a5;
      }

      return result;
    case 3:
      unint64_t result = 0LL;
      if (a2 && a5)
      {
        if (*((_BYTE *)a5 + 32)) {
          return 0LL;
        }
        uint64_t v27 = *((void *)a2 + 1);
        if (v27 != *((void *)a5 + 1)) {
          return 0LL;
        }
        int v28 = *a2;
        int v29 = *a5;
        if (*a2 == 2)
        {
          switch(a3)
          {
            case 2:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      double v1032 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1033 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1034 = *v1032++;
                        *v1033++ = v1034 > a4;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    v492 = (unsigned __int8 *)*((void *)a2 + 2);
                    v493 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v494 = *v492++;
                      *v493++ = v494 > a4;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v1035 = (unsigned __int8 *)*((void *)a2 + 2);
                      double v1036 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1037 = *v1035++;
                        *v1036++ = a4 < (unint64_t)v1037;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    int v495 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v496 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v497 = *v495++;
                      *v496++ = a4 < (unint64_t)v497;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v732 = (unsigned __int8 *)*((void *)a2 + 2);
                      v733 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v734 = *v732++;
                        else {
                          double v735 = 1.0;
                        }
                        *v733++ = v735;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    unint64_t v192 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v193 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v194 = *v192++;
                      else {
                        double v195 = 1.0;
                      }
                      *v193++ = v195;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
              }

              break;
            case 1:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      double v1038 = (unsigned __int8 *)*((void *)a2 + 2);
                      double v1039 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1040 = *v1038++;
                        *v1039++ = v1040 > a4;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    v498 = (unsigned __int8 *)*((void *)a2 + 2);
                    v499 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v500 = *v498++;
                      *v499++ = v500 > a4;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v1041 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1042 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1043 = *v1041++;
                        *v1042++ = a4 < v1043;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    unsigned int v501 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v502 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v503 = *v501++;
                      *v502++ = a4 < v503;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      unint64_t v736 = (unsigned __int8 *)*((void *)a2 + 2);
                      v737 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v738 = *v736++;
                        else {
                          double v739 = 1.0;
                        }
                        *v737++ = v739;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    char v196 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v197 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v198 = *v196++;
                      else {
                        double v199 = 1.0;
                      }
                      *v197++ = v199;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
              }

              break;
            case 0:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      unint64_t v852 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v853 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v854 = *v852++;
                        *v853++ = v854 > (int)*(double *)&a4;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    unint64_t v312 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v313 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v314 = *v312++;
                      *v313++ = v314 > (int)*(double *)&a4;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v855 = (unsigned __int8 *)*((void *)a2 + 2);
                      v856 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v857 = *v855++;
                        *v856++ = v857 > (unint64_t)*(double *)&a4;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    double v315 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v316 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v317 = *v315++;
                      *v316++ = v317 > (unint64_t)*(double *)&a4;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v612 = (unsigned __int8 *)*((void *)a2 + 2);
                      v613 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v614 = *v612++;
                        else {
                          double v615 = 1.0;
                        }
                        *v613++ = v615;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    double v72 = (unsigned __int8 *)*((void *)a2 + 2);
                    int v73 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v74 = *v72++;
                      else {
                        double v75 = 1.0;
                      }
                      *v73++ = v75;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
              }

              break;
          }
        }

        else if (v28 == 1)
        {
          switch(a3)
          {
            case 2:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      double v1044 = (unsigned __int8 *)*((void *)a2 + 2);
                      double v1045 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1046 = *v1044;
                        v1044 += 8;
                        *v1045++ = v1046 > a4;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    v504 = (unsigned __int8 *)*((void *)a2 + 2);
                    v505 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v506 = *v504;
                      v504 += 8;
                      *v505++ = v506 > a4;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v1047 = (unint64_t *)*((void *)a2 + 2);
                      v1048 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v1049 = *v1047++;
                        *v1048++ = v1049 > a4;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    int v507 = (unint64_t *)*((void *)a2 + 2);
                    double v508 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v509 = *v507++;
                      *v508++ = v509 > a4;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      int v740 = (unint64_t *)*((void *)a2 + 2);
                      int v741 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v742 = *v740++;
                        else {
                          double v743 = 1.0;
                        }
                        *v741++ = v743;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    uint64_t v200 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v201 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v202 = *v200++;
                      else {
                        double v203 = 1.0;
                      }
                      *v201++ = v203;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
              }

              break;
            case 1:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      double v1050 = (unsigned __int8 *)*((void *)a2 + 2);
                      double v1051 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1052 = *v1050;
                        v1050 += 8;
                        *v1051++ = v1052 > a4;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    v510 = (unsigned __int8 *)*((void *)a2 + 2);
                    v511 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v512 = *v510;
                      v510 += 8;
                      *v511++ = v512 > a4;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      double v1053 = (unint64_t *)*((void *)a2 + 2);
                      v1054 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v1055 = *v1053++;
                        *v1054++ = v1055 > a4;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    uint64_t v513 = (unint64_t *)*((void *)a2 + 2);
                    double v514 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v515 = *v513++;
                      *v514++ = v515 > a4;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v744 = (unint64_t *)*((void *)a2 + 2);
                      v745 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v746 = *v744++;
                        else {
                          double v747 = 1.0;
                        }
                        *v745++ = v747;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    double v204 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v205 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v206 = *v204++;
                      else {
                        double v207 = 1.0;
                      }
                      *v205++ = v207;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
              }

              break;
            case 0:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      unsigned int v858 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v859 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v860 = *v858;
                        v858 += 8;
                        *v859++ = v860 > (int)*(double *)&a4;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    unsigned int v318 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v319 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v320 = *v318;
                      v318 += 8;
                      *v319++ = v320 > (int)*(double *)&a4;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v861 = (unint64_t *)*((void *)a2 + 2);
                      v862 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v863 = *v861++;
                        *v862++ = v863 > (unint64_t)*(double *)&a4;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    double v321 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v322 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v323 = *v321++;
                      *v322++ = v323 > (unint64_t)*(double *)&a4;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v616 = (unint64_t *)*((void *)a2 + 2);
                      v617 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v618 = *v616++;
                        else {
                          double v619 = 1.0;
                        }
                        *v617++ = v619;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    double v76 = (unint64_t *)*((void *)a2 + 2);
                    double v77 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v78 = *v76++;
                      else {
                        double v79 = 1.0;
                      }
                      *v77++ = v79;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
              }

              break;
          }
        }

        else if (!v28)
        {
          switch(a3)
          {
            case 2:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      unint64_t v924 = (double *)*((void *)a2 + 2);
                      v925 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v926 = *v924++;
                        *v925++ = (int)v926 > a4;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    v384 = (double *)*((void *)a2 + 2);
                    unint64_t v385 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v386 = *v384++;
                      *v385++ = (int)v386 > a4;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v927 = (double *)*((void *)a2 + 2);
                      unsigned int v928 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v929 = *v927++;
                        *v928++ = a4 < (unint64_t)v929;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    double v387 = (double *)*((void *)a2 + 2);
                    v388 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v389 = *v387++;
                      *v388++ = a4 < (unint64_t)v389;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v660 = (double *)*((void *)a2 + 2);
                      double v661 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v662 = *v660++;
                        else {
                          double v663 = 1.0;
                        }
                        *v661++ = v663;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    double v120 = (double *)*((void *)a2 + 2);
                    double v121 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v122 = *v120++;
                      else {
                        double v123 = 1.0;
                      }
                      *v121++ = v123;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
              }

              break;
            case 1:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      unsigned int v930 = (double *)*((void *)a2 + 2);
                      v931 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v932 = *v930++;
                        *v931++ = (int)v932 > a4;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    v390 = (double *)*((void *)a2 + 2);
                    unint64_t v391 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v392 = *v390++;
                      *v391++ = (int)v392 > a4;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v933 = (double *)*((void *)a2 + 2);
                      unsigned int v934 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v935 = *v933++;
                        *v934++ = a4 < (unint64_t)v935;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    unint64_t v393 = (double *)*((void *)a2 + 2);
                    double v394 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v395 = *v393++;
                      *v394++ = a4 < (unint64_t)v395;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v664 = (double *)*((void *)a2 + 2);
                      v665 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v666 = *v664++;
                        else {
                          double v667 = 1.0;
                        }
                        *v665++ = v667;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    unint64_t v124 = (double *)*((void *)a2 + 2);
                    double v125 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v126 = *v124++;
                      else {
                        double v127 = 1.0;
                      }
                      *v125++ = v127;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
              }

              break;
            case 0:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v798 = (double *)*((void *)a2 + 2);
                      int v799 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v800 = *v798++;
                        *v799++ = (int)v800 > (int)*(double *)&a4;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    unint64_t v258 = (double *)*((void *)a2 + 2);
                    double v259 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v260 = *v258++;
                      *v259++ = (int)v260 > (int)*(double *)&a4;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      int v801 = (double *)*((void *)a2 + 2);
                      v802 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v803 = *v801++;
                        *v802++ = (unint64_t)v803 > (unint64_t)*(double *)&a4;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    double v261 = (double *)*((void *)a2 + 2);
                    unsigned int v262 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v263 = *v261++;
                      *v262++ = (unint64_t)v263 > (unint64_t)*(double *)&a4;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v576 = (double *)*((void *)a2 + 2);
                      v577 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v578 = *v576++;
                        else {
                          double v579 = 1.0;
                        }
                        *v577++ = v579;
                        --v27;
                      }

                      while (v27);
                    }
                  }

                  else if (!a6 && v27)
                  {
                    int v30 = (double *)*((void *)a2 + 2);
                    double v31 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v32 = *v30++;
                      else {
                        double v33 = 1.0;
                      }
                      *v31++ = v33;
                      --v27;
                    }

                    while (v27);
                  }

                  break;
              }

              break;
          }
        }

        return a5;
      }

      return result;
    case 4:
      unint64_t result = 0LL;
      if (a2 && a5)
      {
        if (*((_BYTE *)a5 + 32)) {
          return 0LL;
        }
        uint64_t v34 = *((void *)a2 + 1);
        if (v34 != *((void *)a5 + 1)) {
          return 0LL;
        }
        int v35 = *a2;
        int v36 = *a5;
        if (*a2 == 2)
        {
          switch(a3)
          {
            case 2:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v1056 = (unsigned __int8 *)*((void *)a2 + 2);
                      double v1057 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1058 = *v1056++;
                        *v1057++ = v1058 <= a4;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    v516 = (unsigned __int8 *)*((void *)a2 + 2);
                    v517 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v518 = *v516++;
                      *v517++ = v518 <= a4;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      double v1059 = (unsigned __int8 *)*((void *)a2 + 2);
                      double v1060 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1061 = *v1059++;
                        *v1060++ = a4 >= (unint64_t)v1061;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    unsigned int v519 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v520 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v521 = *v519++;
                      *v520++ = a4 >= (unint64_t)v521;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      int v748 = (unsigned __int8 *)*((void *)a2 + 2);
                      v749 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v750 = *v748++;
                        else {
                          double v751 = 1.0;
                        }
                        *v749++ = v751;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    unint64_t v208 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v209 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v210 = *v208++;
                      else {
                        double v211 = 1.0;
                      }
                      *v209++ = v211;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
              }

              break;
            case 1:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v1062 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1063 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1064 = *v1062++;
                        *v1063++ = v1064 <= a4;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    v522 = (unsigned __int8 *)*((void *)a2 + 2);
                    v523 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v524 = *v522++;
                      *v523++ = v524 <= a4;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      double v1065 = (unsigned __int8 *)*((void *)a2 + 2);
                      double v1066 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1067 = *v1065++;
                        *v1066++ = a4 >= v1067;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    unsigned int v525 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v526 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v527 = *v525++;
                      *v526++ = a4 >= v527;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      int v752 = (unsigned __int8 *)*((void *)a2 + 2);
                      int v753 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v754 = *v752++;
                        else {
                          double v755 = 1.0;
                        }
                        *v753++ = v755;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    double v212 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v213 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v214 = *v212++;
                      else {
                        double v215 = 1.0;
                      }
                      *v213++ = v215;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
              }

              break;
            case 0:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      unint64_t v864 = (unsigned __int8 *)*((void *)a2 + 2);
                      unint64_t v865 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v866 = *v864++;
                        *v865++ = v866 <= (int)*(double *)&a4;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    unsigned int v324 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v325 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v326 = *v324++;
                      *v325++ = v326 <= (int)*(double *)&a4;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v867 = (unsigned __int8 *)*((void *)a2 + 2);
                      v868 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v869 = *v867++;
                        *v868++ = v869 <= (unint64_t)*(double *)&a4;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    double v327 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v328 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v329 = *v327++;
                      *v328++ = v329 <= (unint64_t)*(double *)&a4;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      unint64_t v620 = (unsigned __int8 *)*((void *)a2 + 2);
                      v621 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v622 = *v620++;
                        else {
                          double v623 = 1.0;
                        }
                        *v621++ = v623;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    double v80 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v81 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v82 = *v80++;
                      else {
                        double v83 = 1.0;
                      }
                      *v81++ = v83;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
              }

              break;
          }
        }

        else if (v35 == 1)
        {
          switch(a3)
          {
            case 2:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v1068 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1069 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1070 = *v1068;
                        v1068 += 8;
                        *v1069++ = v1070 <= a4;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    v528 = (unsigned __int8 *)*((void *)a2 + 2);
                    v529 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v530 = *v528;
                      v528 += 8;
                      *v529++ = v530 <= a4;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      unint64_t v1071 = (unint64_t *)*((void *)a2 + 2);
                      unint64_t v1072 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v1073 = *v1071++;
                        *v1072++ = v1073 <= a4;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    unsigned int v531 = (unint64_t *)*((void *)a2 + 2);
                    double v532 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v533 = *v531++;
                      *v532++ = v533 <= a4;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v756 = (unint64_t *)*((void *)a2 + 2);
                      v757 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v758 = *v756++;
                        else {
                          double v759 = 1.0;
                        }
                        *v757++ = v759;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    double v216 = (unint64_t *)*((void *)a2 + 2);
                    double v217 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v218 = *v216++;
                      else {
                        double v219 = 1.0;
                      }
                      *v217++ = v219;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
              }

              break;
            case 1:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      double v1074 = (unsigned __int8 *)*((void *)a2 + 2);
                      v1075 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v1076 = *v1074;
                        v1074 += 8;
                        *v1075++ = v1076 <= a4;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    v534 = (unsigned __int8 *)*((void *)a2 + 2);
                    v535 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v536 = *v534;
                      v534 += 8;
                      *v535++ = v536 <= a4;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v1077 = (unint64_t *)*((void *)a2 + 2);
                      unsigned int v1078 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v1079 = *v1077++;
                        *v1078++ = v1079 <= a4;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    unint64_t v537 = (unint64_t *)*((void *)a2 + 2);
                    double v538 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v539 = *v537++;
                      *v538++ = v539 <= a4;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      uint64_t v760 = (unint64_t *)*((void *)a2 + 2);
                      v761 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v762 = *v760++;
                        else {
                          double v763 = 1.0;
                        }
                        *v761++ = v763;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    char v220 = (unint64_t *)*((void *)a2 + 2);
                    unsigned int v221 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v222 = *v220++;
                      else {
                        double v223 = 1.0;
                      }
                      *v221++ = v223;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
              }

              break;
            case 0:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      unsigned int v870 = (unsigned __int8 *)*((void *)a2 + 2);
                      unsigned int v871 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        unsigned int v872 = *v870;
                        v870 += 8;
                        *v871++ = v872 <= (int)*(double *)&a4;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    char v330 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v331 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v332 = *v330;
                      v330 += 8;
                      *v331++ = v332 <= (int)*(double *)&a4;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v873 = (unint64_t *)*((void *)a2 + 2);
                      v874 = (void *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v875 = *v873++;
                        *v874++ = v875 <= (unint64_t)*(double *)&a4;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    double v333 = (unint64_t *)*((void *)a2 + 2);
                    v334 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v335 = *v333++;
                      *v334++ = v335 <= (unint64_t)*(double *)&a4;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      double v624 = (unint64_t *)*((void *)a2 + 2);
                      int v625 = (double *)*((void *)a5 + 2);
                      do
                      {
                        unint64_t v626 = *v624++;
                        else {
                          double v627 = 1.0;
                        }
                        *v625++ = v627;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    double v84 = (unint64_t *)*((void *)a2 + 2);
                    unint64_t v85 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v86 = *v84++;
                      else {
                        double v87 = 1.0;
                      }
                      *v85++ = v87;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
              }

              break;
          }
        }

        else if (!v35)
        {
          switch(a3)
          {
            case 2:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      unsigned int v936 = (double *)*((void *)a2 + 2);
                      v937 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v938 = *v936++;
                        *v937++ = (int)v938 <= a4;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    v396 = (double *)*((void *)a2 + 2);
                    v397 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v398 = *v396++;
                      *v397++ = (int)v398 <= a4;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v939 = (double *)*((void *)a2 + 2);
                      unsigned int v940 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v941 = *v939++;
                        *v940++ = a4 >= (unint64_t)v941;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    int v399 = (double *)*((void *)a2 + 2);
                    double v400 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v401 = *v399++;
                      *v400++ = a4 >= (unint64_t)v401;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v668 = (double *)*((void *)a2 + 2);
                      v669 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v670 = *v668++;
                        else {
                          double v671 = 1.0;
                        }
                        *v669++ = v671;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    unint64_t v128 = (double *)*((void *)a2 + 2);
                    double v129 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v130 = *v128++;
                      else {
                        double v131 = 1.0;
                      }
                      *v129++ = v131;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
              }

              break;
            case 1:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      unsigned int v942 = (double *)*((void *)a2 + 2);
                      v943 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v944 = *v942++;
                        *v943++ = (int)v944 <= a4;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    v402 = (double *)*((void *)a2 + 2);
                    v403 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v404 = *v402++;
                      *v403++ = (int)v404 <= a4;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v945 = (double *)*((void *)a2 + 2);
                      unint64_t v946 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v947 = *v945++;
                        *v946++ = a4 >= (unint64_t)v947;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    unint64_t v405 = (double *)*((void *)a2 + 2);
                    double v406 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v407 = *v405++;
                      *v406++ = a4 >= (unint64_t)v407;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      unint64_t v672 = (double *)*((void *)a2 + 2);
                      unint64_t v673 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v674 = *v672++;
                        else {
                          double v675 = 1.0;
                        }
                        *v673++ = v675;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    double v132 = (double *)*((void *)a2 + 2);
                    double v133 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v134 = *v132++;
                      else {
                        double v135 = 1.0;
                      }
                      *v133++ = v135;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
              }

              break;
            case 0:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v804 = (double *)*((void *)a2 + 2);
                      uint64_t v805 = (BOOL *)*((void *)a5 + 2);
                      do
                      {
                        double v806 = *v804++;
                        *v805++ = (int)v806 <= (int)*(double *)&a4;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    int v264 = (double *)*((void *)a2 + 2);
                    int v265 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v266 = *v264++;
                      *v265++ = (int)v266 <= (int)*(double *)&a4;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      uint64_t v807 = (double *)*((void *)a2 + 2);
                      v808 = (void *)*((void *)a5 + 2);
                      do
                      {
                        double v809 = *v807++;
                        *v808++ = (unint64_t)v809 <= (unint64_t)*(double *)&a4;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    unint64_t v267 = (double *)*((void *)a2 + 2);
                    double v268 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v269 = *v267++;
                      *v268++ = (unint64_t)v269 <= (unint64_t)*(double *)&a4;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      double v580 = (double *)*((void *)a2 + 2);
                      v581 = (double *)*((void *)a5 + 2);
                      do
                      {
                        double v582 = *v580++;
                        else {
                          double v583 = 1.0;
                        }
                        *v581++ = v583;
                        --v34;
                      }

                      while (v34);
                    }
                  }

                  else if (!a6 && v34)
                  {
                    double v37 = (double *)*((void *)a2 + 2);
                    uint64_t v38 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v39 = *v37++;
                      else {
                        double v40 = 1.0;
                      }
                      *v38++ = v40;
                      --v34;
                    }

                    while (v34);
                  }

                  break;
              }

              break;
          }
        }

        return a5;
      }

      return result;
    case 5:
      unint64_t result = 0LL;
      if (!a2 || !a5) {
        return result;
      }
      if (*((_BYTE *)a5 + 32)) {
        return 0LL;
      }
      uint64_t v41 = *((void *)a2 + 1);
      if (v41 != *((void *)a5 + 1)) {
        return 0LL;
      }
      int v42 = *a2;
      int v43 = *a5;
      if (*a2 == 2)
      {
        switch(a3)
        {
          case 2:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    double v1080 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v1081 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v1082 = *v1080++;
                      *v1081++ = v1082 >= a4;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  v540 = (unsigned __int8 *)*((void *)a2 + 2);
                  v541 = (BOOL *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v542 = *v540++;
                    *v541++ = v542 >= a4;
                    --v41;
                  }

                  while (v41);
                }

                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v1083 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1084 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v1085 = *v1083++;
                      *v1084++ = a4 <= (unint64_t)v1085;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  unsigned int v543 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v544 = (void *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v545 = *v543++;
                    *v544++ = a4 <= (unint64_t)v545;
                    --v41;
                  }

                  while (v41);
                }

                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    int v764 = (unsigned __int8 *)*((void *)a2 + 2);
                    int v765 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v766 = *v764++;
                      else {
                        double v767 = 1.0;
                      }
                      *v765++ = v767;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  double v224 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v225 = (double *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v226 = *v224++;
                    else {
                      double v227 = 1.0;
                    }
                    *v225++ = v227;
                    --v41;
                  }

                  while (v41);
                }

                break;
            }

            break;
          case 1:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    unint64_t v1086 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v1087 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v1088 = *v1086++;
                      *v1087++ = v1088 >= a4;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  v546 = (unsigned __int8 *)*((void *)a2 + 2);
                  v547 = (BOOL *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v548 = *v546++;
                    *v547++ = v548 >= a4;
                    --v41;
                  }

                  while (v41);
                }

                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v1089 = (unsigned __int8 *)*((void *)a2 + 2);
                    v1090 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v1091 = *v1089++;
                      *v1090++ = a4 <= v1091;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  unsigned int v549 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v550 = (void *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v551 = *v549++;
                    *v550++ = a4 <= v551;
                    --v41;
                  }

                  while (v41);
                }

                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v768 = (unsigned __int8 *)*((void *)a2 + 2);
                    v769 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v770 = *v768++;
                      else {
                        double v771 = 1.0;
                      }
                      *v769++ = v771;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  unint64_t v228 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v229 = (double *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v230 = *v228++;
                    else {
                      double v231 = 1.0;
                    }
                    *v229++ = v231;
                    --v41;
                  }

                  while (v41);
                }

                break;
            }

            break;
          case 0:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    unint64_t v876 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v877 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v878 = *v876++;
                      *v877++ = v878 >= (int)*(double *)&a4;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  int v336 = (unsigned __int8 *)*((void *)a2 + 2);
                  unint64_t v337 = (BOOL *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v338 = *v336++;
                    *v337++ = v338 >= (int)*(double *)&a4;
                    --v41;
                  }

                  while (v41);
                }

                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v879 = (unsigned __int8 *)*((void *)a2 + 2);
                    v880 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v881 = *v879++;
                      *v880++ = v881 >= (unint64_t)*(double *)&a4;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  unint64_t v339 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v340 = (void *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v341 = *v339++;
                    *v340++ = v341 >= (unint64_t)*(double *)&a4;
                    --v41;
                  }

                  while (v41);
                }

                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v628 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v629 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v630 = *v628++;
                      else {
                        double v631 = 1.0;
                      }
                      *v629++ = v631;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  unsigned int v88 = (unsigned __int8 *)*((void *)a2 + 2);
                  double v89 = (double *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v90 = *v88++;
                    else {
                      double v91 = 1.0;
                    }
                    *v89++ = v91;
                    --v41;
                  }

                  while (v41);
                }

                break;
            }

            break;
        }
      }

      else if (v42 == 1)
      {
        switch(a3)
        {
          case 2:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    unsigned int v1092 = (unsigned __int8 *)*((void *)a2 + 2);
                    double v1093 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v1094 = *v1092;
                      v1092 += 8;
                      *v1093++ = v1094 >= a4;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  v552 = (unsigned __int8 *)*((void *)a2 + 2);
                  v553 = (BOOL *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v554 = *v552;
                    v552 += 8;
                    *v553++ = v554 >= a4;
                    --v41;
                  }

                  while (v41);
                }

                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    double v1095 = (unint64_t *)*((void *)a2 + 2);
                    v1096 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v1097 = *v1095++;
                      *v1096++ = v1097 >= a4;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  unsigned int v555 = (unint64_t *)*((void *)a2 + 2);
                  double v556 = (void *)*((void *)a5 + 2);
                  do
                  {
                    unint64_t v557 = *v555++;
                    *v556++ = v557 >= a4;
                    --v41;
                  }

                  while (v41);
                }

                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v772 = (unint64_t *)*((void *)a2 + 2);
                    v773 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v774 = *v772++;
                      else {
                        double v775 = 1.0;
                      }
                      *v773++ = v775;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  double v232 = (unint64_t *)*((void *)a2 + 2);
                  unsigned int v233 = (double *)*((void *)a5 + 2);
                  do
                  {
                    unint64_t v234 = *v232++;
                    else {
                      double v235 = 1.0;
                    }
                    *v233++ = v235;
                    --v41;
                  }

                  while (v41);
                }

                break;
            }

            break;
          case 1:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v1098 = (unsigned __int8 *)*((void *)a2 + 2);
                    unint64_t v1099 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v1100 = *v1098;
                      v1098 += 8;
                      *v1099++ = v1100 >= a4;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  v558 = (unsigned __int8 *)*((void *)a2 + 2);
                  v559 = (BOOL *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v560 = *v558;
                    v558 += 8;
                    *v559++ = v560 >= a4;
                    --v41;
                  }

                  while (v41);
                }

                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    double v1101 = (unint64_t *)*((void *)a2 + 2);
                    double v1102 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v1103 = *v1101++;
                      *v1102++ = v1103 >= a4;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  unint64_t v561 = (unint64_t *)*((void *)a2 + 2);
                  double v562 = (void *)*((void *)a5 + 2);
                  do
                  {
                    unint64_t v563 = *v561++;
                    *v562++ = v563 >= a4;
                    --v41;
                  }

                  while (v41);
                }

                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    int v776 = (unint64_t *)*((void *)a2 + 2);
                    int v777 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v778 = *v776++;
                      else {
                        double v779 = 1.0;
                      }
                      *v777++ = v779;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  int v236 = (unint64_t *)*((void *)a2 + 2);
                  int v237 = (double *)*((void *)a5 + 2);
                  do
                  {
                    unint64_t v238 = *v236++;
                    else {
                      double v239 = 1.0;
                    }
                    *v237++ = v239;
                    --v41;
                  }

                  while (v41);
                }

                break;
            }

            break;
          case 0:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    unsigned int v882 = (unsigned __int8 *)*((void *)a2 + 2);
                    unsigned int v883 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      unsigned int v884 = *v882;
                      v882 += 8;
                      *v883++ = v884 >= (int)*(double *)&a4;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  unsigned int v342 = (unsigned __int8 *)*((void *)a2 + 2);
                  unsigned int v343 = (BOOL *)*((void *)a5 + 2);
                  do
                  {
                    unsigned int v344 = *v342;
                    v342 += 8;
                    *v343++ = v344 >= (int)*(double *)&a4;
                    --v41;
                  }

                  while (v41);
                }

                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v885 = (unint64_t *)*((void *)a2 + 2);
                    v886 = (void *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v887 = *v885++;
                      *v886++ = v887 >= (unint64_t)*(double *)&a4;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  unsigned int v345 = (unint64_t *)*((void *)a2 + 2);
                  unsigned int v346 = (void *)*((void *)a5 + 2);
                  do
                  {
                    unint64_t v347 = *v345++;
                    *v346++ = v347 >= (unint64_t)*(double *)&a4;
                    --v41;
                  }

                  while (v41);
                }

                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v632 = (unint64_t *)*((void *)a2 + 2);
                    v633 = (double *)*((void *)a5 + 2);
                    do
                    {
                      unint64_t v634 = *v632++;
                      else {
                        double v635 = 1.0;
                      }
                      *v633++ = v635;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  uint64_t v92 = (unint64_t *)*((void *)a2 + 2);
                  unsigned int v93 = (double *)*((void *)a5 + 2);
                  do
                  {
                    unint64_t v94 = *v92++;
                    else {
                      double v95 = 1.0;
                    }
                    *v93++ = v95;
                    --v41;
                  }

                  while (v41);
                }

                break;
            }

            break;
        }
      }

      else if (!v42)
      {
        switch(a3)
        {
          case 2:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    unint64_t v948 = (double *)*((void *)a2 + 2);
                    v949 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v950 = *v948++;
                      *v949++ = (int)v950 >= a4;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  v408 = (double *)*((void *)a2 + 2);
                  v409 = (BOOL *)*((void *)a5 + 2);
                  do
                  {
                    double v410 = *v408++;
                    *v409++ = (int)v410 >= a4;
                    --v41;
                  }

                  while (v41);
                }

                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v951 = (double *)*((void *)a2 + 2);
                    unsigned int v952 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v953 = *v951++;
                      *v952++ = a4 <= (unint64_t)v953;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  int v411 = (double *)*((void *)a2 + 2);
                  double v412 = (void *)*((void *)a5 + 2);
                  do
                  {
                    double v413 = *v411++;
                    *v412++ = a4 <= (unint64_t)v413;
                    --v41;
                  }

                  while (v41);
                }

                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v676 = (double *)*((void *)a2 + 2);
                    double v677 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v678 = *v676++;
                      else {
                        double v679 = 1.0;
                      }
                      *v677++ = v679;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  double v136 = (double *)*((void *)a2 + 2);
                  unint64_t v137 = (double *)*((void *)a5 + 2);
                  do
                  {
                    double v138 = *v136++;
                    else {
                      double v139 = 1.0;
                    }
                    *v137++ = v139;
                    --v41;
                  }

                  while (v41);
                }

                break;
            }

            break;
          case 1:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    unsigned int v954 = (double *)*((void *)a2 + 2);
                    v955 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v956 = *v954++;
                      *v955++ = (int)v956 >= a4;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  v414 = (double *)*((void *)a2 + 2);
                  v415 = (BOOL *)*((void *)a5 + 2);
                  do
                  {
                    double v416 = *v414++;
                    *v415++ = (int)v416 >= a4;
                    --v41;
                  }

                  while (v41);
                }

                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v957 = (double *)*((void *)a2 + 2);
                    unint64_t v958 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v959 = *v957++;
                      *v958++ = a4 <= (unint64_t)v959;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  unint64_t v417 = (double *)*((void *)a2 + 2);
                  double v418 = (void *)*((void *)a5 + 2);
                  do
                  {
                    double v419 = *v417++;
                    *v418++ = a4 <= (unint64_t)v419;
                    --v41;
                  }

                  while (v41);
                }

                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v680 = (double *)*((void *)a2 + 2);
                    v681 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v682 = *v680++;
                      else {
                        double v683 = 1.0;
                      }
                      *v681++ = v683;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6)
                {
                  if (v41)
                  {
                    double v140 = (double *)*((void *)a2 + 2);
                    double v141 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v142 = *v140++;
                      else {
                        double v143 = 1.0;
                      }
                      *v141++ = v143;
                      --v41;
                    }

                    while (v41);
                  }

                  return a5;
                }

                break;
            }

            break;
          case 0:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v810 = (double *)*((void *)a2 + 2);
                    int v811 = (BOOL *)*((void *)a5 + 2);
                    do
                    {
                      double v812 = *v810++;
                      *v811++ = (int)v812 >= (int)*(double *)&a4;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  unsigned int v270 = (double *)*((void *)a2 + 2);
                  double v271 = (BOOL *)*((void *)a5 + 2);
                  do
                  {
                    double v272 = *v270++;
                    *v271++ = (int)v272 >= (int)*(double *)&a4;
                    --v41;
                  }

                  while (v41);
                }

                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    int v813 = (double *)*((void *)a2 + 2);
                    v814 = (void *)*((void *)a5 + 2);
                    do
                    {
                      double v815 = *v813++;
                      *v814++ = (unint64_t)v815 >= (unint64_t)*(double *)&a4;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  double v273 = (double *)*((void *)a2 + 2);
                  uint64_t v274 = (void *)*((void *)a5 + 2);
                  do
                  {
                    double v275 = *v273++;
                    *v274++ = (unint64_t)v275 >= (unint64_t)*(double *)&a4;
                    --v41;
                  }

                  while (v41);
                }

                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    unint64_t v584 = (double *)*((void *)a2 + 2);
                    unint64_t v585 = (double *)*((void *)a5 + 2);
                    do
                    {
                      double v586 = *v584++;
                      else {
                        double v587 = 1.0;
                      }
                      *v585++ = v587;
                      --v41;
                    }

                    while (v41);
                  }
                }

                else if (!a6 && v41)
                {
                  unint64_t v44 = (double *)*((void *)a2 + 2);
                  double v45 = (double *)*((void *)a5 + 2);
                  do
                  {
                    double v46 = *v44++;
                    else {
                      double v47 = 1.0;
                    }
                    *v45++ = v47;
                    --v41;
                  }

                  while (v41);
                }

                break;
            }

            return a5;
        }
      }

      return a5;
    default:
      return result;
  }

uint64_t agxps_timeseries_select_ttt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v6 = 0LL;
  if (a1 && a2 && a3 && a4)
  {
    if (!*(_BYTE *)(a4 + 32)
      && (uint64_t v7 = *(void *)(a1 + 8), v7 == *(void *)(a2 + 8))
      && v7 == *(void *)(a3 + 8)
      && v7 == *(void *)(a4 + 8))
    {
      sub_23550((int *)a1, a2, a3, (int *)a4, *(_DWORD *)a2, *(_DWORD *)a3, a5);
      return a4;
    }

    else
    {
      return 0LL;
    }
  }

  return v6;
}

int *sub_23550(int *a1, uint64_t a2, uint64_t a3, int *a4, int a5, int a6, double a7)
{
  if (a4)
  {
    uint64_t v7 = *((void *)a4 + 1);
    if (a1) {
      goto LABEL_3;
    }
LABEL_6:
    int v8 = 0;
    if (a4) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }

  uint64_t v7 = 0LL;
  if (!a1) {
    goto LABEL_6;
  }
LABEL_3:
  int v8 = *a1;
  if (a4)
  {
LABEL_4:
    int v9 = *a4;
    goto LABEL_8;
  }

LABEL_7:
  int v9 = 0;
LABEL_8:
  switch(v8)
  {
    case 2:
      switch(a5)
      {
        case 2:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unsigned int v738 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v738 = 0LL;
                  }
                  if (a2) {
                    int v741 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    int v741 = 0LL;
                  }
                  if (a3) {
                    v744 = *(_BYTE **)(a3 + 16);
                  }
                  else {
                    v744 = 0LL;
                  }
                  if (a4) {
                    double v747 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    double v747 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    if (*v738++) {
                      int v752 = v741;
                    }
                    else {
                      int v752 = v744;
                    }
                    *v747++ = *v752;
                    ++v744;
                    ++v741;
                  }

                  break;
                case 1:
                  if (a1) {
                    double v739 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v739 = 0LL;
                  }
                  if (a2) {
                    unint64_t v742 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    unint64_t v742 = 0LL;
                  }
                  if (a3) {
                    v745 = *(unsigned __int8 **)(a3 + 16);
                  }
                  else {
                    v745 = 0LL;
                  }
                  if (a4) {
                    int v748 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    int v748 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    if (*v739++) {
                      unsigned int v754 = v742;
                    }
                    else {
                      unsigned int v754 = v745;
                    }
                    *v748++ = *v754;
                    ++v745;
                    ++v742;
                  }

                  break;
                case 0:
                  v737 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  int v740 = a2 ? *(_BYTE **)(a2 + 16) : 0LL;
                  double v743 = a3 ? *(_BYTE **)(a3 + 16) : 0LL;
                  for (uint64_t i = a4 ? (double *)*((void *)a4 + 2) : 0LL; v7; --v7)
                  {
                    if (*v737++) {
                      unsigned int v750 = v740;
                    }
                    else {
                      unsigned int v750 = v743;
                    }
                    LOBYTE(a7) = *v750;
                    a7 = (double)*(unint64_t *)&a7;
                    *i++ = a7;
                    ++v743;
                    ++v740;
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    v689 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v689 = 0LL;
                  }
                  if (a2) {
                    double v695 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    double v695 = 0LL;
                  }
                  if (a3) {
                    v701 = *(_BYTE **)(a3 + 16);
                  }
                  else {
                    v701 = 0LL;
                  }
                  if (a4) {
                    double v707 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    double v707 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v734 = v7;
                    do
                    {
                      if (*v689++) {
                        unint64_t v736 = v695;
                      }
                      else {
                        unint64_t v736 = v701;
                      }
                      *v707++ = *v736;
                      v701 += 8;
                      ++v695;
                      --v734;
                    }

                    while (v734);
                  }

                  break;
                case 1:
                  if (a1) {
                    unsigned int v690 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v690 = 0LL;
                  }
                  if (a2) {
                    v696 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    v696 = 0LL;
                  }
                  if (a3) {
                    int v702 = *(uint64_t **)(a3 + 16);
                  }
                  else {
                    int v702 = 0LL;
                  }
                  if (a4) {
                    double v708 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    double v708 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    int v756 = *v690++;
                    int v755 = v756;
                    unsigned int v758 = *v696++;
                    uint64_t v757 = v758;
                    uint64_t v760 = *v702++;
                    uint64_t v759 = v760;
                    if (v755) {
                      uint64_t v761 = v757;
                    }
                    else {
                      uint64_t v761 = v759;
                    }
                    *v708++ = v761;
                  }

                  break;
                case 0:
                  int v686 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  double v692 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0LL;
                  unint64_t v698 = a3 ? *(unint64_t **)(a3 + 16) : 0LL;
                  for (j = a4 ? (double *)*((void *)a4 + 2) : 0LL; v7; --v7)
                  {
                    int v716 = *v686++;
                    int v715 = v716;
                    unsigned int v717 = *v692++;
                    double v718 = (double)v717;
                    unint64_t v719 = *v698++;
                    double v720 = (double)v719;
                    if (!v715) {
                      double v718 = v720;
                    }
                    *j++ = v718;
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v687 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v687 = 0LL;
                  }
                  if (a2) {
                    unint64_t v693 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    unint64_t v693 = 0LL;
                  }
                  if (a3) {
                    double v699 = *(double **)(a3 + 16);
                  }
                  else {
                    double v699 = 0LL;
                  }
                  if (a4) {
                    v705 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    v705 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    int v722 = *v687++;
                    int v721 = v722;
                    LOBYTE(v722) = *v693++;
                    char v723 = v722;
                    double v724 = *v699++;
                    int v725 = (int)v724;
                    if (v721) {
                      char v726 = v723;
                    }
                    else {
                      char v726 = v725;
                    }
                    *v705++ = v726;
                  }

                  break;
                case 1:
                  if (a1) {
                    unsigned int v688 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v688 = 0LL;
                  }
                  if (a2) {
                    unint64_t v694 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    unint64_t v694 = 0LL;
                  }
                  if (a3) {
                    v700 = *(double **)(a3 + 16);
                  }
                  else {
                    v700 = 0LL;
                  }
                  if (a4) {
                    unsigned int v706 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    unsigned int v706 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    int v728 = *v688++;
                    int v727 = v728;
                    unsigned int v730 = *v694++;
                    unint64_t v729 = v730;
                    double v731 = *v700++;
                    unint64_t v732 = (unint64_t)v731;
                    if (v727) {
                      unint64_t v733 = v729;
                    }
                    else {
                      unint64_t v733 = v732;
                    }
                    *v706++ = v733;
                  }

                  break;
                case 0:
                  v685 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  double v691 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0LL;
                  v697 = a3 ? *(double **)(a3 + 16) : 0LL;
                  for (k = a4 ? (double *)*((void *)a4 + 2) : 0LL; v7; --v7)
                  {
                    int v710 = *v685++;
                    int v709 = v710;
                    unsigned int v711 = *v691++;
                    double v712 = (double)v711;
                    double v713 = *v697++;
                    double v714 = v713;
                    if (!v709) {
                      double v712 = v714;
                    }
                    *k++ = v712;
                  }

                  break;
              }

              break;
          }

          break;
        case 1:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v654 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v654 = 0LL;
                  }
                  if (a2) {
                    unsigned int v657 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    unsigned int v657 = 0LL;
                  }
                  if (a3) {
                    v660 = *(_BYTE **)(a3 + 16);
                  }
                  else {
                    v660 = 0LL;
                  }
                  if (a4) {
                    double v663 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    double v663 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v672 = v7;
                    do
                    {
                      if (*v654++) {
                        double v674 = v657;
                      }
                      else {
                        double v674 = v660;
                      }
                      *v663++ = *v674;
                      ++v660;
                      v657 += 8;
                      --v672;
                    }

                    while (v672);
                  }

                  break;
                case 1:
                  if (a1) {
                    double v655 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v655 = 0LL;
                  }
                  if (a2) {
                    double v658 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    double v658 = 0LL;
                  }
                  if (a3) {
                    double v661 = *(unsigned __int8 **)(a3 + 16);
                  }
                  else {
                    double v661 = 0LL;
                  }
                  if (a4) {
                    v664 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    v664 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v675 = v7;
                    do
                    {
                      int v677 = *v655++;
                      int v676 = v677;
                      uint64_t v679 = *v658++;
                      uint64_t v678 = v679;
                      LODWORD(v679) = *v661++;
                      uint64_t v680 = v679;
                      if (v676) {
                        uint64_t v681 = v678;
                      }
                      else {
                        uint64_t v681 = v680;
                      }
                      *v664++ = v681;
                      --v675;
                    }

                    while (v675);
                  }

                  break;
                case 0:
                  v653 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  double v656 = a2 ? *(unint64_t **)(a2 + 16) : 0LL;
                  double v659 = a3 ? *(unsigned __int8 **)(a3 + 16) : 0LL;
                  double v662 = a4 ? (double *)*((void *)a4 + 2) : 0LL;
                  if (v7)
                  {
                    uint64_t v665 = v7;
                    do
                    {
                      int v667 = *v653++;
                      int v666 = v667;
                      unint64_t v668 = *v656++;
                      unint64_t v669 = v668;
                      LODWORD(v668) = *v659++;
                      double v670 = (double)v668;
                      double v671 = (double)v669;
                      if (!v666) {
                        double v671 = v670;
                      }
                      *v662++ = v671;
                      --v665;
                    }

                    while (v665);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unsigned int v524 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v524 = 0LL;
                  }
                  if (a2) {
                    unsigned int v536 = *(void **)(a2 + 16);
                  }
                  else {
                    unsigned int v536 = 0LL;
                  }
                  if (a3) {
                    unsigned int v548 = *(void **)(a3 + 16);
                  }
                  else {
                    unsigned int v548 = 0LL;
                  }
                  if (a4) {
                    unsigned int v560 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    unsigned int v560 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v650 = v7;
                    do
                    {
                      if (*v524++) {
                        uint64_t v652 = v536;
                      }
                      else {
                        uint64_t v652 = v548;
                      }
                      *v560++ = *v652;
                      ++v548;
                      ++v536;
                      --v650;
                    }

                    while (v650);
                  }

                  break;
                case 1:
                  if (a1) {
                    unsigned int v525 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v525 = 0LL;
                  }
                  if (a2) {
                    unint64_t v537 = *(void **)(a2 + 16);
                  }
                  else {
                    unint64_t v537 = 0LL;
                  }
                  if (a3) {
                    unsigned int v549 = *(void **)(a3 + 16);
                  }
                  else {
                    unsigned int v549 = 0LL;
                  }
                  if (a4) {
                    unint64_t v561 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    unint64_t v561 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v682 = v7;
                    do
                    {
                      if (*v525++) {
                        v684 = v537;
                      }
                      else {
                        v684 = v549;
                      }
                      *v561++ = *v684;
                      ++v549;
                      ++v537;
                      --v682;
                    }

                    while (v682);
                  }

                  break;
                case 0:
                  v517 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  v529 = a2 ? *(unint64_t **)(a2 + 16) : 0LL;
                  v541 = a3 ? *(unint64_t **)(a3 + 16) : 0LL;
                  v553 = a4 ? (double *)*((void *)a4 + 2) : 0LL;
                  if (v7)
                  {
                    uint64_t v580 = v7;
                    do
                    {
                      if (*v517++) {
                        double v582 = v529;
                      }
                      else {
                        double v582 = v541;
                      }
                      *v553++ = (double)*v582;
                      ++v541;
                      ++v529;
                      --v580;
                    }

                    while (v580);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v520 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v520 = 0LL;
                  }
                  if (a2) {
                    double v532 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    double v532 = 0LL;
                  }
                  if (a3) {
                    double v544 = *(double **)(a3 + 16);
                  }
                  else {
                    double v544 = 0LL;
                  }
                  if (a4) {
                    double v556 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    double v556 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v589 = v7;
                    do
                    {
                      int v591 = *v520++;
                      int v590 = v591;
                      LOBYTE(v591) = *v532;
                      v532 += 8;
                      char v592 = v591;
                      double v593 = *v544++;
                      int v594 = (int)v593;
                      if (v590) {
                        char v595 = v592;
                      }
                      else {
                        char v595 = v594;
                      }
                      *v556++ = v595;
                      --v589;
                    }

                    while (v589);
                  }

                  break;
                case 1:
                  if (a1) {
                    unsigned int v521 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v521 = 0LL;
                  }
                  if (a2) {
                    unint64_t v533 = *(unint64_t **)(a2 + 16);
                  }
                  else {
                    unint64_t v533 = 0LL;
                  }
                  if (a3) {
                    unsigned int v545 = *(double **)(a3 + 16);
                  }
                  else {
                    unsigned int v545 = 0LL;
                  }
                  if (a4) {
                    unint64_t v557 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    unint64_t v557 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v596 = v7;
                    do
                    {
                      int v598 = *v521++;
                      int v597 = v598;
                      unint64_t v600 = *v533++;
                      unint64_t v599 = v600;
                      double v601 = *v545++;
                      unint64_t v602 = (unint64_t)v601;
                      if (v597) {
                        unint64_t v603 = v599;
                      }
                      else {
                        unint64_t v603 = v602;
                      }
                      *v557++ = v603;
                      --v596;
                    }

                    while (v596);
                  }

                  break;
                case 0:
                  unint64_t v515 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  unsigned int v527 = a2 ? *(unint64_t **)(a2 + 16) : 0LL;
                  unint64_t v539 = a3 ? *(double **)(a3 + 16) : 0LL;
                  unsigned int v551 = a4 ? (double *)*((void *)a4 + 2) : 0LL;
                  if (v7)
                  {
                    uint64_t v565 = v7;
                    do
                    {
                      int v567 = *v515++;
                      int v566 = v567;
                      unint64_t v568 = *v527++;
                      unint64_t v569 = v568;
                      double v570 = *v539++;
                      double v571 = v570;
                      double v572 = (double)v569;
                      if (!v566) {
                        double v572 = v571;
                      }
                      *v551++ = v572;
                      --v565;
                    }

                    while (v565);
                  }

                  break;
              }

              break;
          }

          break;
        case 0:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    v612 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v612 = 0LL;
                  }
                  if (a2) {
                    double v615 = *(double **)(a2 + 16);
                  }
                  else {
                    double v615 = 0LL;
                  }
                  if (a3) {
                    unint64_t v618 = *(_BYTE **)(a3 + 16);
                  }
                  else {
                    unint64_t v618 = 0LL;
                  }
                  if (a4) {
                    v621 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    v621 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    int v630 = *v612++;
                    int v629 = v630;
                    double v631 = *v615++;
                    int v632 = (int)v631;
                    LOBYTE(v631) = *v618++;
                    char v633 = LOBYTE(v631);
                    if (v629) {
                      char v634 = v632;
                    }
                    else {
                      char v634 = v633;
                    }
                    *v621++ = v634;
                  }

                  break;
                case 1:
                  if (a1) {
                    v613 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v613 = 0LL;
                  }
                  if (a2) {
                    v616 = *(double **)(a2 + 16);
                  }
                  else {
                    v616 = 0LL;
                  }
                  if (a3) {
                    double v619 = *(unsigned __int8 **)(a3 + 16);
                  }
                  else {
                    double v619 = 0LL;
                  }
                  if (a4) {
                    unsigned int v622 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    unsigned int v622 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v635 = v7;
                    do
                    {
                      int v637 = *v613++;
                      int v636 = v637;
                      double v638 = *v616++;
                      unint64_t v639 = (unint64_t)v638;
                      LODWORD(v638) = *v619++;
                      unint64_t v640 = LODWORD(v638);
                      if (v636) {
                        unint64_t v641 = v639;
                      }
                      else {
                        unint64_t v641 = v640;
                      }
                      *v622++ = v641;
                      --v635;
                    }

                    while (v635);
                  }

                  break;
                case 0:
                  double v611 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  unsigned int v614 = a2 ? *(double **)(a2 + 16) : 0LL;
                  v617 = a3 ? *(unsigned __int8 **)(a3 + 16) : 0LL;
                  unint64_t v620 = a4 ? (double *)*((void *)a4 + 2) : 0LL;
                  if (v7)
                  {
                    uint64_t v623 = v7;
                    do
                    {
                      int v625 = *v611++;
                      int v624 = v625;
                      double v626 = *v614++;
                      double v627 = v626;
                      LODWORD(v626) = *v617++;
                      double v628 = (double)LODWORD(v626);
                      if (!v624) {
                        double v627 = v628;
                      }
                      *v620++ = v627;
                      --v623;
                    }

                    while (v623);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    v522 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v522 = 0LL;
                  }
                  if (a2) {
                    v534 = *(double **)(a2 + 16);
                  }
                  else {
                    v534 = 0LL;
                  }
                  if (a3) {
                    v546 = *(_BYTE **)(a3 + 16);
                  }
                  else {
                    v546 = 0LL;
                  }
                  if (a4) {
                    v558 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    v558 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v604 = v7;
                    do
                    {
                      int v606 = *v522++;
                      int v605 = v606;
                      double v607 = *v534++;
                      int v608 = (int)v607;
                      LOBYTE(v607) = *v546;
                      v546 += 8;
                      char v609 = LOBYTE(v607);
                      if (v605) {
                        char v610 = v608;
                      }
                      else {
                        char v610 = v609;
                      }
                      *v558++ = v610;
                      --v604;
                    }

                    while (v604);
                  }

                  break;
                case 1:
                  if (a1) {
                    v523 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v523 = 0LL;
                  }
                  if (a2) {
                    v535 = *(double **)(a2 + 16);
                  }
                  else {
                    v535 = 0LL;
                  }
                  if (a3) {
                    v547 = *(unint64_t **)(a3 + 16);
                  }
                  else {
                    v547 = 0LL;
                  }
                  if (a4) {
                    v559 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    v559 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v642 = v7;
                    do
                    {
                      int v644 = *v523++;
                      int v643 = v644;
                      double v645 = *v535++;
                      unint64_t v646 = (unint64_t)v645;
                      unint64_t v648 = *v547++;
                      unint64_t v647 = v648;
                      if (v643) {
                        unint64_t v649 = v646;
                      }
                      else {
                        unint64_t v649 = v647;
                      }
                      *v559++ = v649;
                      --v642;
                    }

                    while (v642);
                  }

                  break;
                case 0:
                  v516 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  v528 = a2 ? *(double **)(a2 + 16) : 0LL;
                  v540 = a3 ? *(unint64_t **)(a3 + 16) : 0LL;
                  v552 = a4 ? (double *)*((void *)a4 + 2) : 0LL;
                  if (v7)
                  {
                    uint64_t v573 = v7;
                    do
                    {
                      int v575 = *v516++;
                      int v574 = v575;
                      double v576 = *v528++;
                      double v577 = v576;
                      unint64_t v578 = *v540++;
                      double v579 = (double)v578;
                      if (!v574) {
                        double v577 = v579;
                      }
                      *v552++ = v577;
                      --v573;
                    }

                    while (v573);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unsigned int v518 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v518 = 0LL;
                  }
                  if (a2) {
                    unsigned int v530 = *(double **)(a2 + 16);
                  }
                  else {
                    unsigned int v530 = 0LL;
                  }
                  if (a3) {
                    unsigned int v542 = *(double **)(a3 + 16);
                  }
                  else {
                    unsigned int v542 = 0LL;
                  }
                  if (a4) {
                    unsigned int v554 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    unsigned int v554 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v583 = v7;
                    do
                    {
                      if (*v518++) {
                        unint64_t v585 = v530;
                      }
                      else {
                        unint64_t v585 = v542;
                      }
                      *v554++ = (int)*v585;
                      ++v542;
                      ++v530;
                      --v583;
                    }

                    while (v583);
                  }

                  break;
                case 1:
                  if (a1) {
                    unsigned int v519 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v519 = 0LL;
                  }
                  if (a2) {
                    unsigned int v531 = *(double **)(a2 + 16);
                  }
                  else {
                    unsigned int v531 = 0LL;
                  }
                  if (a3) {
                    unsigned int v543 = *(double **)(a3 + 16);
                  }
                  else {
                    unsigned int v543 = 0LL;
                  }
                  if (a4) {
                    unsigned int v555 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    unsigned int v555 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v586 = v7;
                    do
                    {
                      if (*v519++) {
                        v588 = v531;
                      }
                      else {
                        v588 = v543;
                      }
                      *v555++ = (unint64_t)*v588;
                      ++v543;
                      ++v531;
                      --v586;
                    }

                    while (v586);
                  }

                  break;
                case 0:
                  double v514 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  double v526 = a2 ? *(void **)(a2 + 16) : 0LL;
                  double v538 = a3 ? *(void **)(a3 + 16) : 0LL;
                  double v550 = a4 ? (void *)*((void *)a4 + 2) : 0LL;
                  if (v7)
                  {
                    uint64_t v562 = v7;
                    do
                    {
                      if (*v514++) {
                        v564 = v526;
                      }
                      else {
                        v564 = v538;
                      }
                      *v550++ = *v564;
                      ++v538;
                      ++v526;
                      --v562;
                    }

                    while (v562);
                  }

                  break;
              }

              break;
          }

          break;
      }

      break;
    case 1:
      switch(a5)
      {
        case 2:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    v487 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v487 = 0LL;
                  }
                  if (a2) {
                    double v490 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    double v490 = 0LL;
                  }
                  if (a3) {
                    v493 = *(_BYTE **)(a3 + 16);
                  }
                  else {
                    v493 = 0LL;
                  }
                  if (a4) {
                    double v496 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    double v496 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v501 = v7;
                    do
                    {
                      int v502 = *v487;
                      v487 += 8;
                      if (v502) {
                        unsigned int v503 = v490;
                      }
                      else {
                        unsigned int v503 = v493;
                      }
                      *v496++ = *v503;
                      ++v493;
                      ++v490;
                      --v501;
                    }

                    while (v501);
                  }

                  break;
                case 1:
                  if (a1) {
                    unsigned int v488 = (void *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v488 = 0LL;
                  }
                  if (a2) {
                    unint64_t v491 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    unint64_t v491 = 0LL;
                  }
                  if (a3) {
                    unsigned int v494 = *(unsigned __int8 **)(a3 + 16);
                  }
                  else {
                    unsigned int v494 = 0LL;
                  }
                  if (a4) {
                    unsigned int v497 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    unsigned int v497 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v504 = v7;
                    do
                    {
                      if (*v488++) {
                        unsigned int v506 = v491;
                      }
                      else {
                        unsigned int v506 = v494;
                      }
                      *v497++ = *v506;
                      ++v494;
                      ++v491;
                      --v504;
                    }

                    while (v504);
                  }

                  break;
                case 0:
                  v486 = a1 ? (void *)*((void *)a1 + 2) : 0LL;
                  uint64_t v489 = a2 ? *(_BYTE **)(a2 + 16) : 0LL;
                  v492 = a3 ? *(_BYTE **)(a3 + 16) : 0LL;
                  int v495 = a4 ? (double *)*((void *)a4 + 2) : 0LL;
                  if (v7)
                  {
                    uint64_t v498 = v7;
                    do
                    {
                      if (*v486++) {
                        unsigned int v500 = v489;
                      }
                      else {
                        unsigned int v500 = v492;
                      }
                      LOBYTE(a7) = *v500;
                      a7 = (double)*(unint64_t *)&a7;
                      *v495++ = a7;
                      ++v492;
                      ++v489;
                      --v498;
                    }

                    while (v498);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    uint64_t v437 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v437 = 0LL;
                  }
                  if (a2) {
                    uint64_t v443 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    uint64_t v443 = 0LL;
                  }
                  if (a3) {
                    int v449 = *(_BYTE **)(a3 + 16);
                  }
                  else {
                    int v449 = 0LL;
                  }
                  if (a4) {
                    int v455 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    int v455 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v483 = v7;
                    do
                    {
                      int v484 = *v437;
                      v437 += 8;
                      if (v484) {
                        unint64_t v485 = v443;
                      }
                      else {
                        unint64_t v485 = v449;
                      }
                      *v455++ = *v485;
                      v449 += 8;
                      ++v443;
                      --v483;
                    }

                    while (v483);
                  }

                  break;
                case 1:
                  if (a1) {
                    v438 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    v438 = 0LL;
                  }
                  if (a2) {
                    v444 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    v444 = 0LL;
                  }
                  if (a3) {
                    v450 = *(uint64_t **)(a3 + 16);
                  }
                  else {
                    v450 = 0LL;
                  }
                  if (a4) {
                    v456 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    v456 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v507 = v7;
                    do
                    {
                      uint64_t v509 = *v438++;
                      uint64_t v508 = v509;
                      LODWORD(v509) = *v444++;
                      uint64_t v510 = v509;
                      uint64_t v512 = *v450++;
                      uint64_t v511 = v512;
                      if (v508) {
                        uint64_t v513 = v510;
                      }
                      else {
                        uint64_t v513 = v511;
                      }
                      *v456++ = v513;
                      --v507;
                    }

                    while (v507);
                  }

                  break;
                case 0:
                  int v434 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  int v440 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0LL;
                  int v446 = a3 ? *(unint64_t **)(a3 + 16) : 0LL;
                  int v452 = a4 ? (double *)*((void *)a4 + 2) : 0LL;
                  if (v7)
                  {
                    uint64_t v463 = v7;
                    do
                    {
                      uint64_t v465 = *v434++;
                      uint64_t v464 = v465;
                      LODWORD(v465) = *v440++;
                      double v466 = (double)v465;
                      unint64_t v467 = *v446++;
                      double v468 = (double)v467;
                      if (!v464) {
                        double v466 = v468;
                      }
                      *v452++ = v466;
                      --v463;
                    }

                    while (v463);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unsigned int v435 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v435 = 0LL;
                  }
                  if (a2) {
                    unint64_t v441 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    unint64_t v441 = 0LL;
                  }
                  if (a3) {
                    unsigned int v447 = *(double **)(a3 + 16);
                  }
                  else {
                    unsigned int v447 = 0LL;
                  }
                  if (a4) {
                    unint64_t v453 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    unint64_t v453 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v469 = v7;
                    do
                    {
                      unsigned int v471 = *v435;
                      v435 += 8;
                      uint64_t v470 = v471;
                      LOBYTE(v471) = *v441++;
                      char v472 = v471;
                      double v473 = *v447++;
                      int v474 = (int)v473;
                      if (v470) {
                        char v475 = v472;
                      }
                      else {
                        char v475 = v474;
                      }
                      *v453++ = v475;
                      --v469;
                    }

                    while (v469);
                  }

                  break;
                case 1:
                  if (a1) {
                    double v436 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    double v436 = 0LL;
                  }
                  if (a2) {
                    double v442 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    double v442 = 0LL;
                  }
                  if (a3) {
                    double v448 = *(double **)(a3 + 16);
                  }
                  else {
                    double v448 = 0LL;
                  }
                  if (a4) {
                    double v454 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    double v454 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v476 = v7;
                    do
                    {
                      uint64_t v478 = *v436++;
                      uint64_t v477 = v478;
                      LODWORD(v478) = *v442++;
                      unint64_t v479 = v478;
                      double v480 = *v448++;
                      unint64_t v481 = (unint64_t)v480;
                      if (v477) {
                        unint64_t v482 = v479;
                      }
                      else {
                        unint64_t v482 = v481;
                      }
                      *v454++ = v482;
                      --v476;
                    }

                    while (v476);
                  }

                  break;
                case 0:
                  v433 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  v439 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0LL;
                  v445 = a3 ? *(double **)(a3 + 16) : 0LL;
                  v451 = a4 ? (double *)*((void *)a4 + 2) : 0LL;
                  if (v7)
                  {
                    uint64_t v457 = v7;
                    do
                    {
                      uint64_t v459 = *v433++;
                      uint64_t v458 = v459;
                      LODWORD(v459) = *v439++;
                      double v460 = (double)v459;
                      double v461 = *v445++;
                      double v462 = v461;
                      if (!v458) {
                        double v460 = v462;
                      }
                      *v451++ = v460;
                      --v457;
                    }

                    while (v457);
                  }

                  break;
              }

              break;
          }

          break;
        case 1:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v241 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v241 = 0LL;
                  }
                  if (a2) {
                    unint64_t v256 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    unint64_t v256 = 0LL;
                  }
                  if (a3) {
                    double v268 = *(_BYTE **)(a3 + 16);
                  }
                  else {
                    double v268 = 0LL;
                  }
                  if (a4) {
                    char v280 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    char v280 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v423 = v7;
                    do
                    {
                      int v424 = *v241;
                      v241 += 8;
                      if (v424) {
                        int v425 = v256;
                      }
                      else {
                        int v425 = v268;
                      }
                      *v280++ = *v425;
                      ++v268;
                      v256 += 8;
                      --v423;
                    }

                    while (v423);
                  }

                  break;
                case 1:
                  if (a1) {
                    double v242 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    double v242 = 0LL;
                  }
                  if (a2) {
                    double v257 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    double v257 = 0LL;
                  }
                  if (a3) {
                    double v269 = *(unsigned __int8 **)(a3 + 16);
                  }
                  else {
                    double v269 = 0LL;
                  }
                  if (a4) {
                    int v281 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    int v281 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v426 = v7;
                    do
                    {
                      uint64_t v428 = *v242++;
                      uint64_t v427 = v428;
                      uint64_t v430 = *v257++;
                      uint64_t v429 = v430;
                      LODWORD(v430) = *v269++;
                      uint64_t v431 = v430;
                      if (v427) {
                        uint64_t v432 = v429;
                      }
                      else {
                        uint64_t v432 = v431;
                      }
                      *v281++ = v432;
                      --v426;
                    }

                    while (v426);
                  }

                  break;
                case 0:
                  unsigned int v240 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  double v255 = a2 ? *(unint64_t **)(a2 + 16) : 0LL;
                  unint64_t v267 = a3 ? *(unsigned __int8 **)(a3 + 16) : 0LL;
                  double v279 = a4 ? (double *)*((void *)a4 + 2) : 0LL;
                  if (v7)
                  {
                    uint64_t v416 = v7;
                    do
                    {
                      uint64_t v418 = *v240++;
                      uint64_t v417 = v418;
                      unint64_t v419 = *v255++;
                      unint64_t v420 = v419;
                      LODWORD(v419) = *v267++;
                      double v421 = (double)v419;
                      double v422 = (double)v420;
                      if (!v417) {
                        double v422 = v421;
                      }
                      *v279++ = v422;
                      --v416;
                    }

                    while (v416);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v32 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v32 = 0LL;
                  }
                  if (a2) {
                    double v56 = *(void **)(a2 + 16);
                  }
                  else {
                    double v56 = 0LL;
                  }
                  if (a3) {
                    double v80 = *(void **)(a3 + 16);
                  }
                  else {
                    double v80 = 0LL;
                  }
                  if (a4) {
                    double v104 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    double v104 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v237 = v7;
                    do
                    {
                      int v238 = *v32;
                      v32 += 8;
                      if (v238) {
                        double v239 = v56;
                      }
                      else {
                        double v239 = v80;
                      }
                      *v104++ = *v239;
                      ++v80;
                      ++v56;
                      --v237;
                    }

                    while (v237);
                  }

                  break;
                case 1:
                  if (a1) {
                    double v33 = (void *)*((void *)a1 + 2);
                  }
                  else {
                    double v33 = 0LL;
                  }
                  if (a2) {
                    double v57 = *(void **)(a2 + 16);
                  }
                  else {
                    double v57 = 0LL;
                  }
                  if (a3) {
                    unint64_t v81 = *(void **)(a3 + 16);
                  }
                  else {
                    unint64_t v81 = 0LL;
                  }
                  if (a4) {
                    double v105 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    double v105 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v243 = v7;
                    do
                    {
                      if (*v33++) {
                        double v245 = v57;
                      }
                      else {
                        double v245 = v81;
                      }
                      *v105++ = *v245;
                      ++v81;
                      ++v57;
                      --v243;
                    }

                    while (v243);
                  }

                  break;
                case 0:
                  int v17 = a1 ? (void *)*((void *)a1 + 2) : 0LL;
                  uint64_t v41 = a2 ? *(unint64_t **)(a2 + 16) : 0LL;
                  unsigned int v65 = a3 ? *(unint64_t **)(a3 + 16) : 0LL;
                  double v89 = a4 ? (double *)*((void *)a4 + 2) : 0LL;
                  if (v7)
                  {
                    uint64_t v147 = v7;
                    do
                    {
                      if (*v17++) {
                        double v149 = v41;
                      }
                      else {
                        double v149 = v65;
                      }
                      *v89++ = (double)*v149;
                      ++v65;
                      ++v41;
                      --v147;
                    }

                    while (v147);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v24 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v24 = 0LL;
                  }
                  if (a2) {
                    double v48 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    double v48 = 0LL;
                  }
                  if (a3) {
                    double v72 = *(double **)(a3 + 16);
                  }
                  else {
                    double v72 = 0LL;
                  }
                  if (a4) {
                    unint64_t v96 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    unint64_t v96 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v177 = v7;
                    do
                    {
                      unsigned int v179 = *v24;
                      v24 += 8;
                      uint64_t v178 = v179;
                      LOBYTE(v179) = *v48;
                      v48 += 8;
                      char v180 = v179;
                      double v181 = *v72++;
                      int v182 = (int)v181;
                      if (v178) {
                        char v183 = v180;
                      }
                      else {
                        char v183 = v182;
                      }
                      *v96++ = v183;
                      --v177;
                    }

                    while (v177);
                  }

                  break;
                case 1:
                  if (a1) {
                    double v25 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    double v25 = 0LL;
                  }
                  if (a2) {
                    uint64_t v49 = *(unint64_t **)(a2 + 16);
                  }
                  else {
                    uint64_t v49 = 0LL;
                  }
                  if (a3) {
                    int v73 = *(double **)(a3 + 16);
                  }
                  else {
                    int v73 = 0LL;
                  }
                  if (a4) {
                    double v97 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    double v97 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v184 = v7;
                    do
                    {
                      uint64_t v186 = *v25++;
                      uint64_t v185 = v186;
                      unint64_t v188 = *v49++;
                      unint64_t v187 = v188;
                      double v189 = *v73++;
                      unint64_t v190 = (unint64_t)v189;
                      if (v185) {
                        unint64_t v191 = v187;
                      }
                      else {
                        unint64_t v191 = v190;
                      }
                      *v97++ = v191;
                      --v184;
                    }

                    while (v184);
                  }

                  break;
                case 0:
                  uint64_t v13 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  double v37 = a2 ? *(unint64_t **)(a2 + 16) : 0LL;
                  int v61 = a3 ? *(double **)(a3 + 16) : 0LL;
                  unint64_t v85 = a4 ? (double *)*((void *)a4 + 2) : 0LL;
                  if (v7)
                  {
                    uint64_t v121 = v7;
                    do
                    {
                      uint64_t v123 = *v13++;
                      uint64_t v122 = v123;
                      unint64_t v124 = *v37++;
                      unint64_t v125 = v124;
                      double v126 = *v61++;
                      double v127 = v126;
                      double v128 = (double)v125;
                      if (!v122) {
                        double v128 = v127;
                      }
                      *v85++ = v128;
                      --v121;
                    }

                    while (v121);
                  }

                  break;
              }

              break;
          }

          break;
        case 0:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unint64_t v218 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unint64_t v218 = 0LL;
                  }
                  if (a2) {
                    unint64_t v250 = *(double **)(a2 + 16);
                  }
                  else {
                    unint64_t v250 = 0LL;
                  }
                  if (a3) {
                    unsigned int v262 = *(_BYTE **)(a3 + 16);
                  }
                  else {
                    unsigned int v262 = 0LL;
                  }
                  if (a4) {
                    uint64_t v274 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    uint64_t v274 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v308 = v7;
                    do
                    {
                      unsigned int v310 = *v218;
                      v218 += 8;
                      uint64_t v309 = v310;
                      double v311 = *v250++;
                      int v312 = (int)v311;
                      LOBYTE(v311) = *v262++;
                      char v313 = LOBYTE(v311);
                      if (v309) {
                        char v314 = v312;
                      }
                      else {
                        char v314 = v313;
                      }
                      *v274++ = v314;
                      --v308;
                    }

                    while (v308);
                  }

                  break;
                case 1:
                  if (a1) {
                    double v219 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    double v219 = 0LL;
                  }
                  if (a2) {
                    double v251 = *(double **)(a2 + 16);
                  }
                  else {
                    double v251 = 0LL;
                  }
                  if (a3) {
                    double v263 = *(unsigned __int8 **)(a3 + 16);
                  }
                  else {
                    double v263 = 0LL;
                  }
                  if (a4) {
                    double v275 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    double v275 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v315 = v7;
                    do
                    {
                      uint64_t v317 = *v219++;
                      uint64_t v316 = v317;
                      double v318 = *v251++;
                      unint64_t v319 = (unint64_t)v318;
                      LODWORD(v318) = *v263++;
                      unint64_t v320 = LODWORD(v318);
                      if (v316) {
                        unint64_t v321 = v319;
                      }
                      else {
                        unint64_t v321 = v320;
                      }
                      *v275++ = v321;
                      --v315;
                    }

                    while (v315);
                  }

                  break;
                case 0:
                  double v217 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  double v249 = a2 ? *(double **)(a2 + 16) : 0LL;
                  double v261 = a3 ? *(unsigned __int8 **)(a3 + 16) : 0LL;
                  double v273 = a4 ? (double *)*((void *)a4 + 2) : 0LL;
                  if (v7)
                  {
                    uint64_t v302 = v7;
                    do
                    {
                      uint64_t v304 = *v217++;
                      uint64_t v303 = v304;
                      double v305 = *v249++;
                      double v306 = v305;
                      LODWORD(v305) = *v261++;
                      double v307 = (double)LODWORD(v305);
                      if (!v303) {
                        double v306 = v307;
                      }
                      *v273++ = v306;
                      --v302;
                    }

                    while (v302);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v28 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    int v28 = 0LL;
                  }
                  if (a2) {
                    int v52 = *(double **)(a2 + 16);
                  }
                  else {
                    int v52 = 0LL;
                  }
                  if (a3) {
                    double v76 = *(_BYTE **)(a3 + 16);
                  }
                  else {
                    double v76 = 0LL;
                  }
                  if (a4) {
                    unint64_t v100 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    unint64_t v100 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v210 = v7;
                    do
                    {
                      unsigned int v212 = *v28;
                      v28 += 8;
                      uint64_t v211 = v212;
                      double v213 = *v52++;
                      int v214 = (int)v213;
                      LOBYTE(v213) = *v76;
                      v76 += 8;
                      char v215 = LOBYTE(v213);
                      if (v211) {
                        char v216 = v214;
                      }
                      else {
                        char v216 = v215;
                      }
                      *v100++ = v216;
                      --v210;
                    }

                    while (v210);
                  }

                  break;
                case 1:
                  if (a1) {
                    int v29 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    int v29 = 0LL;
                  }
                  if (a2) {
                    unint64_t v53 = *(double **)(a2 + 16);
                  }
                  else {
                    unint64_t v53 = 0LL;
                  }
                  if (a3) {
                    double v77 = *(unint64_t **)(a3 + 16);
                  }
                  else {
                    double v77 = 0LL;
                  }
                  if (a4) {
                    unsigned int v101 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    unsigned int v101 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v220 = v7;
                    do
                    {
                      uint64_t v222 = *v29++;
                      uint64_t v221 = v222;
                      double v223 = *v53++;
                      unint64_t v224 = (unint64_t)v223;
                      unint64_t v226 = *v77++;
                      unint64_t v225 = v226;
                      if (v221) {
                        unint64_t v227 = v224;
                      }
                      else {
                        unint64_t v227 = v225;
                      }
                      *v101++ = v227;
                      --v220;
                    }

                    while (v220);
                  }

                  break;
                case 0:
                  int v15 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  double v39 = a2 ? *(double **)(a2 + 16) : 0LL;
                  double v63 = a3 ? *(unint64_t **)(a3 + 16) : 0LL;
                  double v87 = a4 ? (double *)*((void *)a4 + 2) : 0LL;
                  if (v7)
                  {
                    uint64_t v137 = v7;
                    do
                    {
                      uint64_t v139 = *v15++;
                      uint64_t v138 = v139;
                      double v140 = *v39++;
                      double v141 = v140;
                      unint64_t v142 = *v63++;
                      double v143 = (double)v142;
                      if (!v138) {
                        double v141 = v143;
                      }
                      *v87++ = v141;
                      --v137;
                    }

                    while (v137);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    uint64_t v20 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v20 = 0LL;
                  }
                  if (a2) {
                    unint64_t v44 = *(double **)(a2 + 16);
                  }
                  else {
                    unint64_t v44 = 0LL;
                  }
                  if (a3) {
                    double v68 = *(double **)(a3 + 16);
                  }
                  else {
                    double v68 = 0LL;
                  }
                  if (a4) {
                    uint64_t v92 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    uint64_t v92 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v156 = v7;
                    do
                    {
                      int v157 = *v20;
                      v20 += 8;
                      if (v157) {
                        unint64_t v158 = v44;
                      }
                      else {
                        unint64_t v158 = v68;
                      }
                      *v92++ = (int)*v158;
                      ++v68;
                      ++v44;
                      --v156;
                    }

                    while (v156);
                  }

                  break;
                case 1:
                  if (a1) {
                    int v21 = (void *)*((void *)a1 + 2);
                  }
                  else {
                    int v21 = 0LL;
                  }
                  if (a2) {
                    double v45 = *(double **)(a2 + 16);
                  }
                  else {
                    double v45 = 0LL;
                  }
                  if (a3) {
                    double v69 = *(double **)(a3 + 16);
                  }
                  else {
                    double v69 = 0LL;
                  }
                  if (a4) {
                    unsigned int v93 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    unsigned int v93 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v159 = v7;
                    do
                    {
                      if (*v21++) {
                        unint64_t v161 = v45;
                      }
                      else {
                        unint64_t v161 = v69;
                      }
                      *v93++ = (unint64_t)*v161;
                      ++v69;
                      ++v45;
                      --v159;
                    }

                    while (v159);
                  }

                  break;
                case 0:
                  double v11 = a1 ? (void *)*((void *)a1 + 2) : 0LL;
                  int v35 = a2 ? *(void **)(a2 + 16) : 0LL;
                  double v59 = a3 ? *(void **)(a3 + 16) : 0LL;
                  double v83 = a4 ? (void *)*((void *)a4 + 2) : 0LL;
                  if (v7)
                  {
                    uint64_t v109 = v7;
                    do
                    {
                      if (*v11++) {
                        double v111 = v35;
                      }
                      else {
                        double v111 = v59;
                      }
                      *v83++ = *v111;
                      ++v59;
                      ++v35;
                      --v109;
                    }

                    while (v109);
                  }

                  break;
              }

              break;
          }

          break;
      }

      break;
    case 0:
      switch(a5)
      {
        case 2:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v392 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v392 = 0LL;
                  }
                  if (a2) {
                    double v395 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    double v395 = 0LL;
                  }
                  if (a3) {
                    double v398 = *(_BYTE **)(a3 + 16);
                  }
                  else {
                    double v398 = 0LL;
                  }
                  if (a4) {
                    double v401 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    double v401 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v406 = *v392++;
                    else {
                      double v407 = v398;
                    }
                    *v401++ = *v407;
                    ++v398;
                    ++v395;
                  }

                  break;
                case 1:
                  if (a1) {
                    unint64_t v393 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    unint64_t v393 = 0LL;
                  }
                  if (a2) {
                    v396 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    v396 = 0LL;
                  }
                  if (a3) {
                    int v399 = *(unsigned __int8 **)(a3 + 16);
                  }
                  else {
                    int v399 = 0LL;
                  }
                  if (a4) {
                    v402 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    v402 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v408 = *v393++;
                    else {
                      v409 = v399;
                    }
                    *v402++ = *v409;
                    ++v399;
                    ++v396;
                  }

                  break;
                case 0:
                  unint64_t v391 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  double v394 = a2 ? *(_BYTE **)(a2 + 16) : 0LL;
                  v397 = a3 ? *(_BYTE **)(a3 + 16) : 0LL;
                  for (m = a4 ? (double *)*((void *)a4 + 2) : 0LL; v7; --v7)
                  {
                    double v403 = *v391++;
                    unint64_t v404 = *(void *)&v403;
                    if (v403 == 0.0) {
                      unint64_t v405 = v397;
                    }
                    else {
                      unint64_t v405 = v394;
                    }
                    LOBYTE(v404) = *v405;
                    *m++ = (double)v404;
                    ++v397;
                    ++v394;
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unsigned int v344 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v344 = 0LL;
                  }
                  if (a2) {
                    double v350 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    double v350 = 0LL;
                  }
                  if (a3) {
                    double v356 = *(_BYTE **)(a3 + 16);
                  }
                  else {
                    double v356 = 0LL;
                  }
                  if (a4) {
                    double v362 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    double v362 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v388 = v7;
                    do
                    {
                      double v389 = *v344++;
                      else {
                        v390 = v356;
                      }
                      *v362++ = *v390;
                      v356 += 8;
                      ++v350;
                      --v388;
                    }

                    while (v388);
                  }

                  break;
                case 1:
                  if (a1) {
                    unsigned int v345 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v345 = 0LL;
                  }
                  if (a2) {
                    unsigned int v351 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    unsigned int v351 = 0LL;
                  }
                  if (a3) {
                    unsigned int v357 = *(uint64_t **)(a3 + 16);
                  }
                  else {
                    unsigned int v357 = 0LL;
                  }
                  if (a4) {
                    unint64_t v363 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    unint64_t v363 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v410 = *v345++;
                    unint64_t v411 = (unint64_t)v410;
                    LODWORD(v410) = *v351++;
                    uint64_t v412 = LODWORD(v410);
                    uint64_t v414 = *v357++;
                    uint64_t v413 = v414;
                    if (v411) {
                      uint64_t v415 = v412;
                    }
                    else {
                      uint64_t v415 = v413;
                    }
                    *v363++ = v415;
                  }

                  break;
                case 0:
                  unsigned int v341 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  unint64_t v347 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0LL;
                  double v353 = a3 ? *(unint64_t **)(a3 + 16) : 0LL;
                  for (n = a4 ? (double *)*((void *)a4 + 2) : 0LL; v7; --v7)
                  {
                    double v370 = *v341++;
                    double v371 = v370;
                    LODWORD(v370) = *v347++;
                    double v372 = (double)LODWORD(v370);
                    unint64_t v373 = *v353++;
                    double v374 = (double)v373;
                    if (v371 == 0.0) {
                      double v375 = v374;
                    }
                    else {
                      double v375 = v372;
                    }
                    *n++ = v375;
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unsigned int v342 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v342 = 0LL;
                  }
                  if (a2) {
                    unsigned int v348 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    unsigned int v348 = 0LL;
                  }
                  if (a3) {
                    double v354 = *(double **)(a3 + 16);
                  }
                  else {
                    double v354 = 0LL;
                  }
                  if (a4) {
                    double v360 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    double v360 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v376 = *v342++;
                    int v377 = (int)v376;
                    LOBYTE(v376) = *v348++;
                    char v378 = LOBYTE(v376);
                    double v379 = *v354++;
                    int v380 = (int)v379;
                    if (v377) {
                      char v381 = v378;
                    }
                    else {
                      char v381 = v380;
                    }
                    *v360++ = v381;
                  }

                  break;
                case 1:
                  if (a1) {
                    unsigned int v343 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v343 = 0LL;
                  }
                  if (a2) {
                    unint64_t v349 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    unint64_t v349 = 0LL;
                  }
                  if (a3) {
                    unint64_t v355 = *(double **)(a3 + 16);
                  }
                  else {
                    unint64_t v355 = 0LL;
                  }
                  if (a4) {
                    v361 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    v361 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v382 = *v343++;
                    unint64_t v383 = (unint64_t)v382;
                    LODWORD(v382) = *v349++;
                    unint64_t v384 = LODWORD(v382);
                    double v385 = *v355++;
                    unint64_t v386 = (unint64_t)v385;
                    if (v383) {
                      unint64_t v387 = v384;
                    }
                    else {
                      unint64_t v387 = v386;
                    }
                    *v361++ = v387;
                  }

                  break;
                case 0:
                  double v340 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  unsigned int v346 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0LL;
                  double v352 = a3 ? *(double **)(a3 + 16) : 0LL;
                  for (iuint64_t i = a4 ? (double *)*((void *)a4 + 2) : 0LL; v7; --v7)
                  {
                    double v364 = *v340++;
                    double v365 = v364;
                    LODWORD(v364) = *v346++;
                    double v366 = (double)LODWORD(v364);
                    double v367 = *v352++;
                    double v368 = v367;
                    if (v365 == 0.0) {
                      double v369 = v368;
                    }
                    else {
                      double v369 = v366;
                    }
                    *ii++ = v369;
                  }

                  break;
              }

              break;
          }

          break;
        case 1:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v232 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v232 = 0LL;
                  }
                  if (a2) {
                    unsigned int v253 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    unsigned int v253 = 0LL;
                  }
                  if (a3) {
                    int v265 = *(_BYTE **)(a3 + 16);
                  }
                  else {
                    int v265 = 0LL;
                  }
                  if (a4) {
                    unint64_t v277 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    unint64_t v277 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v330 = v7;
                    do
                    {
                      double v331 = *v232++;
                      else {
                        unsigned int v332 = v265;
                      }
                      *v277++ = *v332;
                      ++v265;
                      v253 += 8;
                      --v330;
                    }

                    while (v330);
                  }

                  break;
                case 1:
                  if (a1) {
                    unsigned int v233 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v233 = 0LL;
                  }
                  if (a2) {
                    double v254 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    double v254 = 0LL;
                  }
                  if (a3) {
                    double v266 = *(unsigned __int8 **)(a3 + 16);
                  }
                  else {
                    double v266 = 0LL;
                  }
                  if (a4) {
                    int v278 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    int v278 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v333 = v7;
                    do
                    {
                      double v334 = *v233++;
                      unint64_t v335 = (unint64_t)v334;
                      uint64_t v337 = *v254++;
                      uint64_t v336 = v337;
                      LODWORD(v337) = *v266++;
                      uint64_t v338 = v337;
                      if (v335) {
                        uint64_t v339 = v336;
                      }
                      else {
                        uint64_t v339 = v338;
                      }
                      *v278++ = v339;
                      --v333;
                    }

                    while (v333);
                  }

                  break;
                case 0:
                  double v231 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  double v252 = a2 ? *(unint64_t **)(a2 + 16) : 0LL;
                  int v264 = a3 ? *(unsigned __int8 **)(a3 + 16) : 0LL;
                  unsigned int v276 = a4 ? (double *)*((void *)a4 + 2) : 0LL;
                  if (v7)
                  {
                    uint64_t v322 = v7;
                    do
                    {
                      double v323 = *v231++;
                      double v324 = v323;
                      unint64_t v325 = *v252++;
                      unint64_t v326 = v325;
                      LODWORD(v325) = *v264++;
                      double v327 = (double)v325;
                      double v328 = (double)v326;
                      if (v324 == 0.0) {
                        double v329 = v327;
                      }
                      else {
                        double v329 = v328;
                      }
                      *v276++ = v329;
                      --v322;
                    }

                    while (v322);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v30 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    int v30 = 0LL;
                  }
                  if (a2) {
                    unint64_t v54 = *(void **)(a2 + 16);
                  }
                  else {
                    unint64_t v54 = 0LL;
                  }
                  if (a3) {
                    unint64_t v78 = *(void **)(a3 + 16);
                  }
                  else {
                    unint64_t v78 = 0LL;
                  }
                  if (a4) {
                    double v102 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    double v102 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v228 = v7;
                    do
                    {
                      double v229 = *v30++;
                      else {
                        unsigned int v230 = v78;
                      }
                      *v102++ = *v230;
                      ++v78;
                      ++v54;
                      --v228;
                    }

                    while (v228);
                  }

                  break;
                case 1:
                  if (a1) {
                    double v31 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v31 = 0LL;
                  }
                  if (a2) {
                    double v55 = *(void **)(a2 + 16);
                  }
                  else {
                    double v55 = 0LL;
                  }
                  if (a3) {
                    double v79 = *(void **)(a3 + 16);
                  }
                  else {
                    double v79 = 0LL;
                  }
                  if (a4) {
                    double v103 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    double v103 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v234 = v7;
                    do
                    {
                      double v235 = *v31++;
                      else {
                        int v236 = v79;
                      }
                      *v103++ = *v236;
                      ++v79;
                      ++v55;
                      --v234;
                    }

                    while (v234);
                  }

                  break;
                case 0:
                  uint64_t v16 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  double v40 = a2 ? *(unint64_t **)(a2 + 16) : 0LL;
                  char v64 = a3 ? *(unint64_t **)(a3 + 16) : 0LL;
                  unsigned int v88 = a4 ? (double *)*((void *)a4 + 2) : 0LL;
                  if (v7)
                  {
                    uint64_t v144 = v7;
                    do
                    {
                      double v145 = *v16++;
                      if (v145 == 0.0) {
                        int v146 = v64;
                      }
                      else {
                        int v146 = v40;
                      }
                      *v88++ = (double)*v146;
                      ++v64;
                      ++v40;
                      --v144;
                    }

                    while (v144);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v22 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    int v22 = 0LL;
                  }
                  if (a2) {
                    double v46 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    double v46 = 0LL;
                  }
                  if (a3) {
                    unint64_t v70 = *(double **)(a3 + 16);
                  }
                  else {
                    unint64_t v70 = 0LL;
                  }
                  if (a4) {
                    unint64_t v94 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    unint64_t v94 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v162 = v7;
                    do
                    {
                      double v163 = *v22++;
                      int v164 = (int)v163;
                      LOBYTE(v163) = *v46;
                      v46 += 8;
                      char v165 = LOBYTE(v163);
                      double v166 = *v70++;
                      int v167 = (int)v166;
                      if (v164) {
                        char v168 = v165;
                      }
                      else {
                        char v168 = v167;
                      }
                      *v94++ = v168;
                      --v162;
                    }

                    while (v162);
                  }

                  break;
                case 1:
                  if (a1) {
                    double v23 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v23 = 0LL;
                  }
                  if (a2) {
                    double v47 = *(unint64_t **)(a2 + 16);
                  }
                  else {
                    double v47 = 0LL;
                  }
                  if (a3) {
                    double v71 = *(double **)(a3 + 16);
                  }
                  else {
                    double v71 = 0LL;
                  }
                  if (a4) {
                    double v95 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    double v95 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v169 = v7;
                    do
                    {
                      double v170 = *v23++;
                      unint64_t v171 = (unint64_t)v170;
                      unint64_t v173 = *v47++;
                      unint64_t v172 = v173;
                      double v174 = *v71++;
                      unint64_t v175 = (unint64_t)v174;
                      if (v171) {
                        unint64_t v176 = v172;
                      }
                      else {
                        unint64_t v176 = v175;
                      }
                      *v95++ = v176;
                      --v169;
                    }

                    while (v169);
                  }

                  break;
                case 0:
                  double v12 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  int v36 = a2 ? *(unint64_t **)(a2 + 16) : 0LL;
                  uint64_t v60 = a3 ? *(double **)(a3 + 16) : 0LL;
                  double v84 = a4 ? (double *)*((void *)a4 + 2) : 0LL;
                  if (v7)
                  {
                    uint64_t v112 = v7;
                    do
                    {
                      double v113 = *v12++;
                      double v114 = v113;
                      unint64_t v115 = *v36++;
                      unint64_t v116 = v115;
                      double v117 = *v60++;
                      double v118 = v117;
                      double v119 = (double)v116;
                      if (v114 == 0.0) {
                        double v120 = v118;
                      }
                      else {
                        double v120 = v119;
                      }
                      *v84++ = v120;
                      --v112;
                    }

                    while (v112);
                  }

                  break;
              }

              break;
          }

          break;
        case 0:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    uint64_t v200 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v200 = 0LL;
                  }
                  if (a2) {
                    unint64_t v247 = *(double **)(a2 + 16);
                  }
                  else {
                    unint64_t v247 = 0LL;
                  }
                  if (a3) {
                    double v259 = *(_BYTE **)(a3 + 16);
                  }
                  else {
                    double v259 = 0LL;
                  }
                  if (a4) {
                    double v271 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    double v271 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v289 = *v200++;
                    int v290 = (int)v289;
                    double v291 = *v247++;
                    int v292 = (int)v291;
                    LOBYTE(v291) = *v259++;
                    char v293 = LOBYTE(v291);
                    if (v290) {
                      char v294 = v292;
                    }
                    else {
                      char v294 = v293;
                    }
                    *v271++ = v294;
                  }

                  break;
                case 1:
                  if (a1) {
                    unsigned int v201 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v201 = 0LL;
                  }
                  if (a2) {
                    double v248 = *(double **)(a2 + 16);
                  }
                  else {
                    double v248 = 0LL;
                  }
                  if (a3) {
                    double v260 = *(unsigned __int8 **)(a3 + 16);
                  }
                  else {
                    double v260 = 0LL;
                  }
                  if (a4) {
                    double v272 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    double v272 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v295 = v7;
                    do
                    {
                      double v296 = *v201++;
                      unint64_t v297 = (unint64_t)v296;
                      double v298 = *v248++;
                      unint64_t v299 = (unint64_t)v298;
                      LODWORD(v298) = *v260++;
                      unint64_t v300 = LODWORD(v298);
                      if (v297) {
                        unint64_t v301 = v299;
                      }
                      else {
                        unint64_t v301 = v300;
                      }
                      *v272++ = v301;
                      --v295;
                    }

                    while (v295);
                  }

                  break;
                case 0:
                  double v199 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  double v246 = a2 ? *(double **)(a2 + 16) : 0LL;
                  unint64_t v258 = a3 ? *(unsigned __int8 **)(a3 + 16) : 0LL;
                  unsigned int v270 = a4 ? (double *)*((void *)a4 + 2) : 0LL;
                  if (v7)
                  {
                    uint64_t v282 = v7;
                    do
                    {
                      double v283 = *v199++;
                      double v284 = v283;
                      double v285 = *v246++;
                      double v286 = v285;
                      LODWORD(v285) = *v258++;
                      double v287 = (double)LODWORD(v285);
                      if (v284 == 0.0) {
                        double v288 = v287;
                      }
                      else {
                        double v288 = v286;
                      }
                      *v270++ = v288;
                      --v282;
                    }

                    while (v282);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v26 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v26 = 0LL;
                  }
                  if (a2) {
                    unsigned int v50 = *(double **)(a2 + 16);
                  }
                  else {
                    unsigned int v50 = 0LL;
                  }
                  if (a3) {
                    unsigned int v74 = *(_BYTE **)(a3 + 16);
                  }
                  else {
                    unsigned int v74 = 0LL;
                  }
                  if (a4) {
                    double v98 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    double v98 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v192 = v7;
                    do
                    {
                      double v193 = *v26++;
                      int v194 = (int)v193;
                      double v195 = *v50++;
                      int v196 = (int)v195;
                      LOBYTE(v195) = *v74;
                      v74 += 8;
                      char v197 = LOBYTE(v195);
                      if (v194) {
                        char v198 = v196;
                      }
                      else {
                        char v198 = v197;
                      }
                      *v98++ = v198;
                      --v192;
                    }

                    while (v192);
                  }

                  break;
                case 1:
                  if (a1) {
                    uint64_t v27 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v27 = 0LL;
                  }
                  if (a2) {
                    double v51 = *(double **)(a2 + 16);
                  }
                  else {
                    double v51 = 0LL;
                  }
                  if (a3) {
                    double v75 = *(unint64_t **)(a3 + 16);
                  }
                  else {
                    double v75 = 0LL;
                  }
                  if (a4) {
                    double v99 = (unint64_t *)*((void *)a4 + 2);
                  }
                  else {
                    double v99 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v202 = v7;
                    do
                    {
                      double v203 = *v27++;
                      unint64_t v204 = (unint64_t)v203;
                      double v205 = *v51++;
                      unint64_t v206 = (unint64_t)v205;
                      unint64_t v208 = *v75++;
                      unint64_t v207 = v208;
                      if (v204) {
                        unint64_t v209 = v206;
                      }
                      else {
                        unint64_t v209 = v207;
                      }
                      *v99++ = v209;
                      --v202;
                    }

                    while (v202);
                  }

                  break;
                case 0:
                  int v14 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  uint64_t v38 = a2 ? *(double **)(a2 + 16) : 0LL;
                  unint64_t v62 = a3 ? *(unint64_t **)(a3 + 16) : 0LL;
                  unint64_t v86 = a4 ? (double *)*((void *)a4 + 2) : 0LL;
                  if (v7)
                  {
                    uint64_t v129 = v7;
                    do
                    {
                      double v130 = *v14++;
                      double v131 = v130;
                      double v132 = *v38++;
                      double v133 = v132;
                      unint64_t v134 = *v62++;
                      double v135 = (double)v134;
                      if (v131 == 0.0) {
                        double v136 = v135;
                      }
                      else {
                        double v136 = v133;
                      }
                      *v86++ = v136;
                      --v129;
                    }

                    while (v129);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v18 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v18 = 0LL;
                  }
                  if (a2) {
                    int v42 = *(double **)(a2 + 16);
                  }
                  else {
                    int v42 = 0LL;
                  }
                  if (a3) {
                    unsigned int v66 = *(double **)(a3 + 16);
                  }
                  else {
                    unsigned int v66 = 0LL;
                  }
                  if (a4) {
                    unsigned int v90 = (_BYTE *)*((void *)a4 + 2);
                  }
                  else {
                    unsigned int v90 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v150 = v7;
                    do
                    {
                      double v151 = *v18++;
                      else {
                        unint64_t v152 = v66;
                      }
                      *v90++ = (int)*v152;
                      ++v66;
                      ++v42;
                      --v150;
                    }

                    while (v150);
                  }

                  break;
                case 1:
                  if (a1) {
                    double v19 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v19 = 0LL;
                  }
                  if (a2) {
                    int v43 = *(double **)(a2 + 16);
                  }
                  else {
                    int v43 = 0LL;
                  }
                  if (a3) {
                    double v67 = *(double **)(a3 + 16);
                  }
                  else {
                    double v67 = 0LL;
                  }
                  if (a4) {
                    double v91 = (void *)*((void *)a4 + 2);
                  }
                  else {
                    double v91 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v153 = v7;
                    do
                    {
                      double v154 = *v19++;
                      else {
                        double v155 = v67;
                      }
                      *v91++ = (unint64_t)*v155;
                      ++v67;
                      ++v43;
                      --v153;
                    }

                    while (v153);
                  }

                  break;
                case 0:
                  unint64_t v10 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  uint64_t v34 = a2 ? *(void **)(a2 + 16) : 0LL;
                  unsigned int v58 = a3 ? *(void **)(a3 + 16) : 0LL;
                  unsigned int v82 = a4 ? (void *)*((void *)a4 + 2) : 0LL;
                  if (v7)
                  {
                    uint64_t v106 = v7;
                    do
                    {
                      double v107 = *v10++;
                      if (v107 == 0.0) {
                        unint64_t v108 = v58;
                      }
                      else {
                        unint64_t v108 = v34;
                      }
                      *v82++ = *v108;
                      ++v58;
                      ++v34;
                      --v106;
                    }

                    while (v106);
                  }

                  break;
              }

              break;
          }

          break;
      }

      break;
  }

  return a4;
}

  int v9 = 0;
LABEL_8:
  switch(v8)
  {
    case 2:
      switch(a6)
      {
        case 2:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v615 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v615 = 0LL;
                  }
                  if (a4) {
                    uint64_t v623 = *(_BYTE **)(a4 + 16);
                  }
                  else {
                    uint64_t v623 = 0LL;
                  }
                  if (a5) {
                    double v626 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    double v626 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    char v633 = *v615++;
                    int v632 = v633;
                    LOBYTE(v633) = *v623++;
                    char v634 = v633;
                    if (v632) {
                      uint64_t v635 = a3;
                    }
                    else {
                      uint64_t v635 = v634;
                    }
                    *v626++ = v635;
                  }

                  break;
                case 1:
                  if (a1) {
                    v616 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v616 = 0LL;
                  }
                  if (a4) {
                    int v624 = *(unsigned __int8 **)(a4 + 16);
                  }
                  else {
                    int v624 = 0LL;
                  }
                  if (a5) {
                    double v627 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    double v627 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    int v637 = *v616++;
                    int v636 = v637;
                    unint64_t v639 = *v624++;
                    double v638 = v639;
                    if (v636) {
                      unint64_t v640 = a3;
                    }
                    else {
                      unint64_t v640 = v638;
                    }
                    *v627++ = v640;
                  }

                  break;
                case 0:
                  unsigned int v614 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  unsigned int v622 = a4 ? *(_BYTE **)(a4 + 16) : 0LL;
                  for (uint64_t i = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    int v629 = *v614++;
                    double v628 = v629;
                    LOBYTE(v629) = *v622++;
                    int v630 = v629;
                    if (v628) {
                      double v631 = a3;
                    }
                    else {
                      double v631 = v630;
                    }
                    *i++ = (double)v631;
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v571 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v571 = 0LL;
                  }
                  if (a4) {
                    double v582 = *(uint64_t **)(a4 + 16);
                  }
                  else {
                    double v582 = 0LL;
                  }
                  if (a5) {
                    v588 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    v588 = 0LL;
                  }
                  if (v7)
                  {
                    int v608 = v7;
                    do
                    {
                      char v610 = *v571++;
                      char v609 = v610;
                      v612 = *v582++;
                      double v611 = v612;
                      if (v609) {
                        v613 = a3;
                      }
                      else {
                        v613 = v611;
                      }
                      *v588++ = v613;
                      --v608;
                    }

                    while (v608);
                  }

                  break;
                case 1:
                  if (a1) {
                    double v572 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v572 = 0LL;
                  }
                  if (a4) {
                    uint64_t v583 = *(uint64_t **)(a4 + 16);
                  }
                  else {
                    uint64_t v583 = 0LL;
                  }
                  if (a5) {
                    uint64_t v589 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v589 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    unint64_t v618 = *v572++;
                    v617 = v618;
                    unint64_t v620 = *v583++;
                    double v619 = v620;
                    if (v617) {
                      v621 = a3;
                    }
                    else {
                      v621 = v619;
                    }
                    *v589++ = v621;
                  }

                  break;
                case 0:
                  unint64_t v568 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  double v579 = a4 ? *(unint64_t **)(a4 + 16) : 0LL;
                  for (j = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    char v595 = *v568++;
                    int v594 = v595;
                    uint64_t v596 = *v579++;
                    int v597 = (double)v596;
                    if (v594) {
                      int v597 = (double)a3;
                    }
                    *j++ = v597;
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unint64_t v569 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unint64_t v569 = 0LL;
                  }
                  if (a4) {
                    uint64_t v580 = *(double **)(a4 + 16);
                  }
                  else {
                    uint64_t v580 = 0LL;
                  }
                  if (a5) {
                    uint64_t v586 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v586 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    unint64_t v599 = *v569++;
                    int v598 = v599;
                    unint64_t v600 = *v580++;
                    double v601 = (int)v600;
                    if (v598) {
                      unint64_t v602 = a3;
                    }
                    else {
                      unint64_t v602 = v601;
                    }
                    *v586++ = v602;
                  }

                  break;
                case 1:
                  if (a1) {
                    double v570 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v570 = 0LL;
                  }
                  if (a4) {
                    v581 = *(double **)(a4 + 16);
                  }
                  else {
                    v581 = 0LL;
                  }
                  if (a5) {
                    double v587 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v587 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    uint64_t v604 = *v570++;
                    unint64_t v603 = v604;
                    int v605 = *v581++;
                    int v606 = (unint64_t)v605;
                    if (v603) {
                      double v607 = a3;
                    }
                    else {
                      double v607 = v606;
                    }
                    *v587++ = v607;
                  }

                  break;
                case 0:
                  int v567 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  unint64_t v578 = a4 ? *(double **)(a4 + 16) : 0LL;
                  for (k = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    int v591 = *v567++;
                    int v590 = v591;
                    char v592 = *v578++;
                    double v593 = v592;
                    if (v590) {
                      double v593 = (double)a3;
                    }
                    *k++ = v593;
                  }

                  break;
              }

              break;
          }

          break;
        case 1:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v550 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v550 = 0LL;
                  }
                  if (a4) {
                    v553 = *(_BYTE **)(a4 + 16);
                  }
                  else {
                    v553 = 0LL;
                  }
                  if (a5) {
                    double v556 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    double v556 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v562 = v7;
                    do
                    {
                      v564 = *v550++;
                      unint64_t v563 = v564;
                      LOBYTE(v564) = *v553++;
                      uint64_t v565 = v564;
                      if (v563) {
                        int v566 = a3;
                      }
                      else {
                        int v566 = v565;
                      }
                      *v556++ = v566;
                      --v562;
                    }

                    while (v562);
                  }

                  break;
                case 1:
                  if (a1) {
                    unsigned int v551 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v551 = 0LL;
                  }
                  if (a4) {
                    unsigned int v554 = *(unsigned __int8 **)(a4 + 16);
                  }
                  else {
                    unsigned int v554 = 0LL;
                  }
                  if (a5) {
                    unint64_t v557 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    unint64_t v557 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    int v574 = *v551++;
                    uint64_t v573 = v574;
                    double v576 = *v554++;
                    int v575 = v576;
                    if (v573) {
                      double v577 = a3;
                    }
                    else {
                      double v577 = v575;
                    }
                    *v557++ = v577;
                  }

                  break;
                case 0:
                  unsigned int v549 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  v552 = a4 ? *(unsigned __int8 **)(a4 + 16) : 0LL;
                  for (m = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    v559 = *v549++;
                    v558 = v559;
                    unsigned int v560 = *v552++;
                    unint64_t v561 = (double)v560;
                    if (v558) {
                      unint64_t v561 = (double)a3;
                    }
                    *m++ = v561;
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    v450 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v450 = 0LL;
                  }
                  if (a4) {
                    double v462 = *(uint64_t **)(a4 + 16);
                  }
                  else {
                    double v462 = 0LL;
                  }
                  if (a5) {
                    int v474 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    int v474 = 0LL;
                  }
                  if (v7)
                  {
                    unsigned int v543 = v7;
                    do
                    {
                      unsigned int v545 = *v450++;
                      double v544 = v545;
                      v547 = *v462++;
                      v546 = v547;
                      if (v544) {
                        unsigned int v548 = a3;
                      }
                      else {
                        unsigned int v548 = v546;
                      }
                      *v474++ = v548;
                      --v543;
                    }

                    while (v543);
                  }

                  break;
                case 1:
                  if (a1) {
                    v451 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v451 = 0LL;
                  }
                  if (a4) {
                    uint64_t v463 = *(unint64_t **)(a4 + 16);
                  }
                  else {
                    uint64_t v463 = 0LL;
                  }
                  if (a5) {
                    char v475 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    char v475 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    uint64_t v642 = *v451++;
                    unint64_t v641 = v642;
                    int v644 = *v463++;
                    int v643 = v644;
                    if (v641) {
                      double v645 = a3;
                    }
                    else {
                      double v645 = v643;
                    }
                    *v475++ = v645;
                  }

                  break;
                case 0:
                  uint64_t v443 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  int v455 = a4 ? *(unint64_t **)(a4 + 16) : 0LL;
                  for (n = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    uint64_t v489 = *v443++;
                    unsigned int v488 = v489;
                    unint64_t v491 = *v455++;
                    double v490 = v491;
                    if (v488) {
                      v492 = a3;
                    }
                    else {
                      v492 = v490;
                    }
                    *n++ = (double)v492;
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v446 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    int v446 = 0LL;
                  }
                  if (a4) {
                    uint64_t v458 = *(double **)(a4 + 16);
                  }
                  else {
                    uint64_t v458 = 0LL;
                  }
                  if (a5) {
                    uint64_t v470 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v470 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    int v502 = *v446++;
                    uint64_t v501 = v502;
                    unsigned int v503 = *v458++;
                    uint64_t v504 = (int)v503;
                    if (v501) {
                      v505 = a3;
                    }
                    else {
                      v505 = v504;
                    }
                    *v470++ = v505;
                  }

                  break;
                case 1:
                  if (a1) {
                    unsigned int v447 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v447 = 0LL;
                  }
                  if (a4) {
                    uint64_t v459 = *(double **)(a4 + 16);
                  }
                  else {
                    uint64_t v459 = 0LL;
                  }
                  if (a5) {
                    unsigned int v471 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v471 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    uint64_t v507 = *v447++;
                    unsigned int v506 = v507;
                    uint64_t v508 = *v459++;
                    uint64_t v509 = (unint64_t)v508;
                    if (v506) {
                      uint64_t v510 = a3;
                    }
                    else {
                      uint64_t v510 = v509;
                    }
                    *v471++ = v510;
                  }

                  break;
                case 0:
                  unint64_t v441 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  unint64_t v453 = a4 ? *(double **)(a4 + 16) : 0LL;
                  for (iuint64_t i = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    unint64_t v481 = *v441++;
                    double v480 = v481;
                    unint64_t v482 = *v453++;
                    uint64_t v483 = v482;
                    if (v480) {
                      uint64_t v483 = (double)a3;
                    }
                    *ii++ = v483;
                  }

                  break;
              }

              break;
          }

          break;
        case 0:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    v517 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v517 = 0LL;
                  }
                  if (a4) {
                    double v520 = *(_BYTE **)(a4 + 16);
                  }
                  else {
                    double v520 = 0LL;
                  }
                  if (a5) {
                    v523 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    v523 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    unsigned int v530 = *v517++;
                    v529 = v530;
                    LOBYTE(v530) = *v520++;
                    unsigned int v531 = v530;
                    if (v529) {
                      double v532 = (int)*(double *)&a3;
                    }
                    else {
                      double v532 = v531;
                    }
                    *v523++ = v532;
                  }

                  break;
                case 1:
                  if (a1) {
                    unsigned int v518 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v518 = 0LL;
                  }
                  if (a4) {
                    unsigned int v521 = *(unsigned __int8 **)(a4 + 16);
                  }
                  else {
                    unsigned int v521 = 0LL;
                  }
                  if (a5) {
                    unsigned int v524 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v524 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    v534 = *v518++;
                    unint64_t v533 = v534;
                    unsigned int v536 = *v521++;
                    v535 = v536;
                    if (v533) {
                      unint64_t v537 = (unint64_t)*(double *)&a3;
                    }
                    else {
                      unint64_t v537 = v535;
                    }
                    *v524++ = v537;
                  }

                  break;
                case 0:
                  v516 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  unsigned int v519 = a4 ? *(unsigned __int8 **)(a4 + 16) : 0LL;
                  for (jj = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    double v526 = *v516++;
                    unsigned int v525 = v526;
                    unsigned int v527 = *v519++;
                    v528 = (double)v527;
                    if (v525) {
                      v528 = *(double *)&a3;
                    }
                    *jj++ = v528;
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v448 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v448 = 0LL;
                  }
                  if (a4) {
                    double v460 = *(_BYTE **)(a4 + 16);
                  }
                  else {
                    double v460 = 0LL;
                  }
                  if (a5) {
                    char v472 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    char v472 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v511 = v7;
                    do
                    {
                      uint64_t v513 = *v448++;
                      uint64_t v512 = v513;
                      LOBYTE(v513) = *v460;
                      v460 += 8;
                      double v514 = v513;
                      if (v512) {
                        unint64_t v515 = (int)*(double *)&a3;
                      }
                      else {
                        unint64_t v515 = v514;
                      }
                      *v472++ = v515;
                      --v511;
                    }

                    while (v511);
                  }

                  break;
                case 1:
                  if (a1) {
                    int v449 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    int v449 = 0LL;
                  }
                  if (a4) {
                    double v461 = *(unint64_t **)(a4 + 16);
                  }
                  else {
                    double v461 = 0LL;
                  }
                  if (a5) {
                    double v473 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v473 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    unint64_t v539 = *v449++;
                    double v538 = v539;
                    v541 = *v461++;
                    v540 = v541;
                    if (v538) {
                      unsigned int v542 = (unint64_t)*(double *)&a3;
                    }
                    else {
                      unsigned int v542 = v540;
                    }
                    *v473++ = v542;
                  }

                  break;
                case 0:
                  double v442 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  double v454 = a4 ? *(unint64_t **)(a4 + 16) : 0LL;
                  for (kk = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    unint64_t v485 = *v442++;
                    int v484 = v485;
                    v486 = *v454++;
                    v487 = (double)v486;
                    if (v484) {
                      v487 = *(double *)&a3;
                    }
                    *kk++ = v487;
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    v444 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v444 = 0LL;
                  }
                  if (a4) {
                    v456 = *(double **)(a4 + 16);
                  }
                  else {
                    v456 = 0LL;
                  }
                  if (a5) {
                    double v468 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    double v468 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    unsigned int v494 = *v444++;
                    v493 = v494;
                    int v495 = *v456++;
                    double v496 = v495;
                    if (v493) {
                      double v496 = *(double *)&a3;
                    }
                    *v468++ = (int)v496;
                  }

                  break;
                case 1:
                  if (a1) {
                    v445 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v445 = 0LL;
                  }
                  if (a4) {
                    uint64_t v457 = *(double **)(a4 + 16);
                  }
                  else {
                    uint64_t v457 = 0LL;
                  }
                  if (a5) {
                    uint64_t v469 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v469 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    uint64_t v498 = *v445++;
                    unsigned int v497 = v498;
                    v499 = *v457++;
                    unsigned int v500 = v499;
                    if (v497) {
                      unsigned int v500 = *(double *)&a3;
                    }
                    *v469++ = (unint64_t)v500;
                  }

                  break;
                case 0:
                  int v440 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  int v452 = a4 ? *(double **)(a4 + 16) : 0LL;
                  for (mm = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    uint64_t v477 = *v440++;
                    uint64_t v476 = v477;
                    uint64_t v478 = *v452++;
                    unint64_t v479 = v478;
                    if (v476) {
                      unint64_t v479 = *(double *)&a3;
                    }
                    *mm++ = v479;
                  }

                  break;
              }

              break;
          }

          break;
      }

      break;
    case 1:
      switch(a6)
      {
        case 2:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v394 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v394 = 0LL;
                  }
                  if (a4) {
                    double v406 = *(_BYTE **)(a4 + 16);
                  }
                  else {
                    double v406 = 0LL;
                  }
                  if (a5) {
                    uint64_t v412 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v412 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v430 = v7;
                    do
                    {
                      uint64_t v432 = *v394;
                      v394 += 8;
                      uint64_t v431 = v432;
                      LOBYTE(v432) = *v406++;
                      v433 = v432;
                      if (v431) {
                        int v434 = a3;
                      }
                      else {
                        int v434 = v433;
                      }
                      *v412++ = v434;
                      --v430;
                    }

                    while (v430);
                  }

                  break;
                case 1:
                  if (a1) {
                    double v395 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    double v395 = 0LL;
                  }
                  if (a4) {
                    double v407 = *(unsigned __int8 **)(a4 + 16);
                  }
                  else {
                    double v407 = 0LL;
                  }
                  if (a5) {
                    uint64_t v413 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v413 = 0LL;
                  }
                  if (v7)
                  {
                    unsigned int v435 = v7;
                    do
                    {
                      uint64_t v437 = *v395++;
                      double v436 = v437;
                      LODWORD(v437) = *v407++;
                      v438 = v437;
                      if (v436) {
                        v439 = a3;
                      }
                      else {
                        v439 = v438;
                      }
                      *v413++ = v439;
                      --v435;
                    }

                    while (v435);
                  }

                  break;
                case 0:
                  unint64_t v393 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  unint64_t v405 = a4 ? *(_BYTE **)(a4 + 16) : 0LL;
                  unint64_t v411 = a5 ? (double *)*((void *)a5 + 2) : 0LL;
                  if (v7)
                  {
                    int v425 = v7;
                    do
                    {
                      uint64_t v427 = *v393++;
                      uint64_t v426 = v427;
                      LOBYTE(v427) = *v405++;
                      uint64_t v428 = v427;
                      if (v426) {
                        uint64_t v429 = a3;
                      }
                      else {
                        uint64_t v429 = v428;
                      }
                      *v411++ = (double)v429;
                      --v425;
                    }

                    while (v425);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unint64_t v300 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unint64_t v300 = 0LL;
                  }
                  if (a4) {
                    uint64_t v317 = *(uint64_t **)(a4 + 16);
                  }
                  else {
                    uint64_t v317 = 0LL;
                  }
                  if (a5) {
                    double v329 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    double v329 = 0LL;
                  }
                  if (v7)
                  {
                    unint64_t v387 = v7;
                    do
                    {
                      double v389 = *v300;
                      v300 += 8;
                      uint64_t v388 = v389;
                      unint64_t v391 = *v317++;
                      v390 = v391;
                      if (v388) {
                        double v392 = a3;
                      }
                      else {
                        double v392 = v390;
                      }
                      *v329++ = v392;
                      --v387;
                    }

                    while (v387);
                  }

                  break;
                case 1:
                  if (a1) {
                    unint64_t v301 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    unint64_t v301 = 0LL;
                  }
                  if (a4) {
                    double v318 = *(uint64_t **)(a4 + 16);
                  }
                  else {
                    double v318 = 0LL;
                  }
                  if (a5) {
                    uint64_t v330 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v330 = 0LL;
                  }
                  if (v7)
                  {
                    v396 = v7;
                    do
                    {
                      double v398 = *v301++;
                      v397 = v398;
                      double v400 = *v318++;
                      int v399 = v400;
                      if (v397) {
                        double v401 = a3;
                      }
                      else {
                        double v401 = v399;
                      }
                      *v330++ = v401;
                      --v396;
                    }

                    while (v396);
                  }

                  break;
                case 0:
                  unint64_t v297 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  char v314 = a4 ? *(unint64_t **)(a4 + 16) : 0LL;
                  unint64_t v326 = a5 ? (double *)*((void *)a5 + 2) : 0LL;
                  if (v7)
                  {
                    double v370 = v7;
                    do
                    {
                      double v372 = *v297++;
                      double v371 = v372;
                      unint64_t v373 = *v314++;
                      double v374 = (double)v373;
                      if (v371) {
                        double v374 = (double)a3;
                      }
                      *v326++ = v374;
                      --v370;
                    }

                    while (v370);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v298 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v298 = 0LL;
                  }
                  if (a4) {
                    uint64_t v315 = *(double **)(a4 + 16);
                  }
                  else {
                    uint64_t v315 = 0LL;
                  }
                  if (a5) {
                    double v327 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    double v327 = 0LL;
                  }
                  if (v7)
                  {
                    double v375 = v7;
                    do
                    {
                      int v377 = *v298;
                      v298 += 8;
                      double v376 = v377;
                      char v378 = *v315++;
                      double v379 = (int)v378;
                      if (v376) {
                        int v380 = a3;
                      }
                      else {
                        int v380 = v379;
                      }
                      *v327++ = v380;
                      --v375;
                    }

                    while (v375);
                  }

                  break;
                case 1:
                  if (a1) {
                    unint64_t v299 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    unint64_t v299 = 0LL;
                  }
                  if (a4) {
                    uint64_t v316 = *(double **)(a4 + 16);
                  }
                  else {
                    uint64_t v316 = 0LL;
                  }
                  if (a5) {
                    double v328 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v328 = 0LL;
                  }
                  if (v7)
                  {
                    char v381 = v7;
                    do
                    {
                      unint64_t v383 = *v299++;
                      double v382 = v383;
                      unint64_t v384 = *v316++;
                      double v385 = (unint64_t)v384;
                      if (v382) {
                        unint64_t v386 = a3;
                      }
                      else {
                        unint64_t v386 = v385;
                      }
                      *v328++ = v386;
                      --v381;
                    }

                    while (v381);
                  }

                  break;
                case 0:
                  double v296 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  char v313 = a4 ? *(double **)(a4 + 16) : 0LL;
                  unint64_t v325 = a5 ? (double *)*((void *)a5 + 2) : 0LL;
                  if (v7)
                  {
                    double v365 = v7;
                    do
                    {
                      double v367 = *v296++;
                      double v366 = v367;
                      double v368 = *v313++;
                      double v369 = v368;
                      if (v366) {
                        double v369 = (double)a3;
                      }
                      *v325++ = v369;
                      --v365;
                    }

                    while (v365);
                  }

                  break;
              }

              break;
          }

          break;
        case 1:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    uint64_t v210 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v210 = 0LL;
                  }
                  if (a4) {
                    uint64_t v228 = *(_BYTE **)(a4 + 16);
                  }
                  else {
                    uint64_t v228 = 0LL;
                  }
                  if (a5) {
                    unsigned int v240 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v240 = 0LL;
                  }
                  if (v7)
                  {
                    double v291 = v7;
                    do
                    {
                      char v293 = *v210;
                      v210 += 8;
                      int v292 = v293;
                      LOBYTE(v293) = *v228++;
                      char v294 = v293;
                      if (v292) {
                        uint64_t v295 = a3;
                      }
                      else {
                        uint64_t v295 = v294;
                      }
                      *v240++ = v295;
                      --v291;
                    }

                    while (v291);
                  }

                  break;
                case 1:
                  if (a1) {
                    uint64_t v211 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v211 = 0LL;
                  }
                  if (a4) {
                    double v229 = *(unsigned __int8 **)(a4 + 16);
                  }
                  else {
                    double v229 = 0LL;
                  }
                  if (a5) {
                    double v241 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v241 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v302 = v7;
                    do
                    {
                      uint64_t v304 = *v211++;
                      uint64_t v303 = v304;
                      LODWORD(v304) = *v229++;
                      double v305 = v304;
                      if (v303) {
                        double v306 = a3;
                      }
                      else {
                        double v306 = v305;
                      }
                      *v241++ = v306;
                      --v302;
                    }

                    while (v302);
                  }

                  break;
                case 0:
                  unint64_t v209 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  unint64_t v227 = a4 ? *(unsigned __int8 **)(a4 + 16) : 0LL;
                  double v239 = a5 ? (double *)*((void *)a5 + 2) : 0LL;
                  if (v7)
                  {
                    double v287 = v7;
                    do
                    {
                      double v289 = *v209++;
                      double v288 = v289;
                      LODWORD(v289) = *v227++;
                      int v290 = (double)v289;
                      if (v288) {
                        int v290 = (double)a3;
                      }
                      *v239++ = v290;
                      --v287;
                    }

                    while (v287);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v32 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v32 = 0LL;
                  }
                  if (a4) {
                    double v56 = *(uint64_t **)(a4 + 16);
                  }
                  else {
                    double v56 = 0LL;
                  }
                  if (a5) {
                    double v80 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    double v80 = 0LL;
                  }
                  if (v7)
                  {
                    double v203 = v7;
                    do
                    {
                      double v205 = *v32;
                      v32 += 8;
                      unint64_t v204 = v205;
                      unint64_t v207 = *v56++;
                      unint64_t v206 = v207;
                      if (v204) {
                        unint64_t v208 = a3;
                      }
                      else {
                        unint64_t v208 = v206;
                      }
                      *v80++ = v208;
                      --v203;
                    }

                    while (v203);
                  }

                  break;
                case 1:
                  if (a1) {
                    double v33 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    double v33 = 0LL;
                  }
                  if (a4) {
                    double v57 = *(unint64_t **)(a4 + 16);
                  }
                  else {
                    double v57 = 0LL;
                  }
                  if (a5) {
                    unint64_t v81 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    unint64_t v81 = 0LL;
                  }
                  if (v7)
                  {
                    unsigned int v212 = v7;
                    do
                    {
                      int v214 = *v33++;
                      double v213 = v214;
                      char v216 = *v57++;
                      char v215 = v216;
                      if (v213) {
                        double v217 = a3;
                      }
                      else {
                        double v217 = v215;
                      }
                      *v81++ = v217;
                      --v212;
                    }

                    while (v212);
                  }

                  break;
                case 0:
                  int v17 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  uint64_t v41 = a4 ? *(unint64_t **)(a4 + 16) : 0LL;
                  unsigned int v65 = a5 ? (double *)*((void *)a5 + 2) : 0LL;
                  if (v7)
                  {
                    unint64_t v116 = v7;
                    do
                    {
                      double v118 = *v17++;
                      double v117 = v118;
                      double v120 = *v41++;
                      double v119 = v120;
                      if (v117) {
                        uint64_t v121 = a3;
                      }
                      else {
                        uint64_t v121 = v119;
                      }
                      *v65++ = (double)v121;
                      --v116;
                    }

                    while (v116);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v24 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v24 = 0LL;
                  }
                  if (a4) {
                    double v48 = *(double **)(a4 + 16);
                  }
                  else {
                    double v48 = 0LL;
                  }
                  if (a5) {
                    double v72 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    double v72 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v150 = v7;
                    do
                    {
                      unint64_t v152 = *v24;
                      v24 += 8;
                      double v151 = v152;
                      uint64_t v153 = *v48++;
                      double v154 = (int)v153;
                      if (v151) {
                        double v155 = a3;
                      }
                      else {
                        double v155 = v154;
                      }
                      *v72++ = v155;
                      --v150;
                    }

                    while (v150);
                  }

                  break;
                case 1:
                  if (a1) {
                    double v25 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    double v25 = 0LL;
                  }
                  if (a4) {
                    uint64_t v49 = *(double **)(a4 + 16);
                  }
                  else {
                    uint64_t v49 = 0LL;
                  }
                  if (a5) {
                    int v73 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    int v73 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v156 = v7;
                    do
                    {
                      unint64_t v158 = *v25++;
                      int v157 = v158;
                      uint64_t v159 = *v49++;
                      double v160 = (unint64_t)v159;
                      if (v157) {
                        unint64_t v161 = a3;
                      }
                      else {
                        unint64_t v161 = v160;
                      }
                      *v73++ = v161;
                      --v156;
                    }

                    while (v156);
                  }

                  break;
                case 0:
                  uint64_t v13 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  double v37 = a4 ? *(double **)(a4 + 16) : 0LL;
                  int v61 = a5 ? (double *)*((void *)a5 + 2) : 0LL;
                  if (v7)
                  {
                    double v97 = v7;
                    do
                    {
                      double v99 = *v13++;
                      double v98 = v99;
                      unint64_t v100 = *v37++;
                      unsigned int v101 = v100;
                      if (v98) {
                        unsigned int v101 = (double)a3;
                      }
                      *v61++ = v101;
                      --v97;
                    }

                    while (v97);
                  }

                  break;
              }

              break;
          }

          break;
        case 0:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v181 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v181 = 0LL;
                  }
                  if (a4) {
                    uint64_t v222 = *(_BYTE **)(a4 + 16);
                  }
                  else {
                    uint64_t v222 = 0LL;
                  }
                  if (a5) {
                    uint64_t v234 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v234 = 0LL;
                  }
                  if (v7)
                  {
                    unint64_t v258 = v7;
                    do
                    {
                      double v260 = *v181;
                      v181 += 8;
                      double v259 = v260;
                      LOBYTE(v260) = *v222++;
                      double v261 = v260;
                      if (v259) {
                        unsigned int v262 = (int)*(double *)&a3;
                      }
                      else {
                        unsigned int v262 = v261;
                      }
                      *v234++ = v262;
                      --v258;
                    }

                    while (v258);
                  }

                  break;
                case 1:
                  if (a1) {
                    int v182 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    int v182 = 0LL;
                  }
                  if (a4) {
                    double v223 = *(unsigned __int8 **)(a4 + 16);
                  }
                  else {
                    double v223 = 0LL;
                  }
                  if (a5) {
                    double v235 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v235 = 0LL;
                  }
                  if (v7)
                  {
                    double v263 = v7;
                    do
                    {
                      int v265 = *v182++;
                      int v264 = v265;
                      LODWORD(v265) = *v223++;
                      double v266 = v265;
                      if (v264) {
                        unint64_t v267 = (unint64_t)*(double *)&a3;
                      }
                      else {
                        unint64_t v267 = v266;
                      }
                      *v235++ = v267;
                      --v263;
                    }

                    while (v263);
                  }

                  break;
                case 0:
                  char v180 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  uint64_t v221 = a4 ? *(unsigned __int8 **)(a4 + 16) : 0LL;
                  unsigned int v233 = a5 ? (double *)*((void *)a5 + 2) : 0LL;
                  if (v7)
                  {
                    double v254 = v7;
                    do
                    {
                      unint64_t v256 = *v180++;
                      double v255 = v256;
                      LODWORD(v2sub_4E2C(v1 + 56) = *v221++;
                      double v257 = (double)v256;
                      if (v255) {
                        double v257 = *(double *)&a3;
                      }
                      *v233++ = v257;
                      --v254;
                    }

                    while (v254);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v28 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    int v28 = 0LL;
                  }
                  if (a4) {
                    int v52 = *(_BYTE **)(a4 + 16);
                  }
                  else {
                    int v52 = 0LL;
                  }
                  if (a5) {
                    double v76 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    double v76 = 0LL;
                  }
                  if (v7)
                  {
                    unint64_t v175 = v7;
                    do
                    {
                      uint64_t v177 = *v28;
                      v28 += 8;
                      unint64_t v176 = v177;
                      LOBYTE(v177) = *v52;
                      v52 += 8;
                      uint64_t v178 = v177;
                      if (v176) {
                        unsigned int v179 = (int)*(double *)&a3;
                      }
                      else {
                        unsigned int v179 = v178;
                      }
                      *v76++ = v179;
                      --v175;
                    }

                    while (v175);
                  }

                  break;
                case 1:
                  if (a1) {
                    int v29 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    int v29 = 0LL;
                  }
                  if (a4) {
                    unint64_t v53 = *(unint64_t **)(a4 + 16);
                  }
                  else {
                    unint64_t v53 = 0LL;
                  }
                  if (a5) {
                    double v77 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v77 = 0LL;
                  }
                  if (v7)
                  {
                    char v183 = v7;
                    do
                    {
                      uint64_t v185 = *v29++;
                      uint64_t v184 = v185;
                      unint64_t v187 = *v53++;
                      uint64_t v186 = v187;
                      if (v184) {
                        unint64_t v188 = (unint64_t)*(double *)&a3;
                      }
                      else {
                        unint64_t v188 = v186;
                      }
                      *v77++ = v188;
                      --v183;
                    }

                    while (v183);
                  }

                  break;
                case 0:
                  int v15 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  double v39 = a4 ? *(unint64_t **)(a4 + 16) : 0LL;
                  double v63 = a5 ? (double *)*((void *)a5 + 2) : 0LL;
                  if (v7)
                  {
                    double v107 = v7;
                    do
                    {
                      uint64_t v109 = *v15++;
                      unint64_t v108 = v109;
                      double v110 = *v39++;
                      double v111 = (double)v110;
                      if (v108) {
                        double v111 = *(double *)&a3;
                      }
                      *v63++ = v111;
                      --v107;
                    }

                    while (v107);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    uint64_t v20 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v20 = 0LL;
                  }
                  if (a4) {
                    unint64_t v44 = *(double **)(a4 + 16);
                  }
                  else {
                    unint64_t v44 = 0LL;
                  }
                  if (a5) {
                    double v68 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    double v68 = 0LL;
                  }
                  if (v7)
                  {
                    double v130 = v7;
                    do
                    {
                      double v132 = *v20;
                      v20 += 8;
                      double v131 = v132;
                      double v133 = *v44++;
                      unint64_t v134 = v133;
                      if (v131) {
                        unint64_t v134 = *(double *)&a3;
                      }
                      *v68++ = (int)v134;
                      --v130;
                    }

                    while (v130);
                  }

                  break;
                case 1:
                  if (a1) {
                    int v21 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    int v21 = 0LL;
                  }
                  if (a4) {
                    double v45 = *(double **)(a4 + 16);
                  }
                  else {
                    double v45 = 0LL;
                  }
                  if (a5) {
                    double v69 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    double v69 = 0LL;
                  }
                  if (v7)
                  {
                    double v135 = v7;
                    do
                    {
                      uint64_t v137 = *v21++;
                      double v136 = v137;
                      uint64_t v138 = *v45++;
                      uint64_t v139 = v138;
                      if (v136) {
                        uint64_t v139 = *(double *)&a3;
                      }
                      *v69++ = (unint64_t)v139;
                      --v135;
                    }

                    while (v135);
                  }

                  break;
                case 0:
                  double v11 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  int v35 = a4 ? *(double **)(a4 + 16) : 0LL;
                  double v59 = a5 ? (double *)*((void *)a5 + 2) : 0LL;
                  if (v7)
                  {
                    double v87 = v7;
                    do
                    {
                      double v89 = *v11++;
                      unsigned int v88 = v89;
                      unsigned int v90 = *v35++;
                      double v91 = v90;
                      if (v88) {
                        double v91 = *(double *)&a3;
                      }
                      *v59++ = v91;
                      --v87;
                    }

                    while (v87);
                  }

                  break;
              }

              break;
          }

          break;
      }

      break;
    case 0:
      switch(a6)
      {
        case 2:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unint64_t v358 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    unint64_t v358 = 0LL;
                  }
                  if (a4) {
                    double v403 = *(_BYTE **)(a4 + 16);
                  }
                  else {
                    double v403 = 0LL;
                  }
                  if (a5) {
                    v409 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    v409 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    uint64_t v417 = *v358++;
                    uint64_t v418 = (int)v417;
                    LOBYTE(v417) = *v403++;
                    unint64_t v419 = LOBYTE(v417);
                    if (v418) {
                      unint64_t v420 = a3;
                    }
                    else {
                      unint64_t v420 = v419;
                    }
                    *v409++ = v420;
                  }

                  break;
                case 1:
                  if (a1) {
                    double v359 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v359 = 0LL;
                  }
                  if (a4) {
                    unint64_t v404 = *(unsigned __int8 **)(a4 + 16);
                  }
                  else {
                    unint64_t v404 = 0LL;
                  }
                  if (a5) {
                    double v410 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    double v410 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v421 = *v359++;
                    double v422 = (unint64_t)v421;
                    LODWORD(v421) = *v404++;
                    uint64_t v423 = LODWORD(v421);
                    if (v422) {
                      int v424 = a3;
                    }
                    else {
                      int v424 = v423;
                    }
                    *v410++ = v424;
                  }

                  break;
                case 0:
                  unsigned int v357 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  v402 = a4 ? *(_BYTE **)(a4 + 16) : 0LL;
                  for (nn = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    uint64_t v414 = *v357++;
                    uint64_t v415 = v414;
                    LOBYTE(v414) = *v402++;
                    uint64_t v416 = LOBYTE(v414);
                    if (v415 != 0.0) {
                      uint64_t v416 = a3;
                    }
                    *nn++ = (double)v416;
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v281 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    int v281 = 0LL;
                  }
                  if (a4) {
                    double v311 = *(uint64_t **)(a4 + 16);
                  }
                  else {
                    double v311 = 0LL;
                  }
                  if (a5) {
                    double v323 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    double v323 = 0LL;
                  }
                  if (v7)
                  {
                    unsigned int v351 = v7;
                    do
                    {
                      double v352 = *v281++;
                      double v353 = (int)v352;
                      unint64_t v355 = *v311++;
                      double v354 = v355;
                      if (v353) {
                        double v356 = a3;
                      }
                      else {
                        double v356 = v354;
                      }
                      *v323++ = v356;
                      --v351;
                    }

                    while (v351);
                  }

                  break;
                case 1:
                  if (a1) {
                    uint64_t v282 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v282 = 0LL;
                  }
                  if (a4) {
                    int v312 = *(uint64_t **)(a4 + 16);
                  }
                  else {
                    int v312 = 0LL;
                  }
                  if (a5) {
                    double v324 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    double v324 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v360 = *v282++;
                    v361 = (unint64_t)v360;
                    unint64_t v363 = *v312++;
                    double v362 = v363;
                    if (v361) {
                      double v364 = a3;
                    }
                    else {
                      double v364 = v362;
                    }
                    *v324++ = v364;
                  }

                  break;
                case 0:
                  int v278 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  uint64_t v308 = a4 ? *(unint64_t **)(a4 + 16) : 0LL;
                  for (i1 = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    uint64_t v336 = *v278++;
                    uint64_t v337 = v336;
                    uint64_t v338 = *v308++;
                    uint64_t v339 = (double)v338;
                    if (v337 == 0.0) {
                      double v340 = v339;
                    }
                    else {
                      double v340 = (double)a3;
                    }
                    *i1++ = v340;
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v279 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v279 = 0LL;
                  }
                  if (a4) {
                    uint64_t v309 = *(double **)(a4 + 16);
                  }
                  else {
                    uint64_t v309 = 0LL;
                  }
                  if (a5) {
                    unint64_t v321 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    unint64_t v321 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    unsigned int v341 = *v279++;
                    unsigned int v342 = (int)v341;
                    unsigned int v343 = *v309++;
                    unsigned int v344 = (int)v343;
                    if (v342) {
                      unsigned int v345 = a3;
                    }
                    else {
                      unsigned int v345 = v344;
                    }
                    *v321++ = v345;
                  }

                  break;
                case 1:
                  if (a1) {
                    char v280 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    char v280 = 0LL;
                  }
                  if (a4) {
                    unsigned int v310 = *(double **)(a4 + 16);
                  }
                  else {
                    unsigned int v310 = 0LL;
                  }
                  if (a5) {
                    uint64_t v322 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v322 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    unsigned int v346 = *v280++;
                    unint64_t v347 = (unint64_t)v346;
                    unsigned int v348 = *v310++;
                    unint64_t v349 = (unint64_t)v348;
                    if (v347) {
                      double v350 = a3;
                    }
                    else {
                      double v350 = v349;
                    }
                    *v322++ = v350;
                  }

                  break;
                case 0:
                  unint64_t v277 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  double v307 = a4 ? *(double **)(a4 + 16) : 0LL;
                  for (i2 = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    double v331 = *v277++;
                    unsigned int v332 = v331;
                    uint64_t v333 = *v307++;
                    double v334 = v333;
                    if (v332 == 0.0) {
                      unint64_t v335 = v334;
                    }
                    else {
                      unint64_t v335 = (double)a3;
                    }
                    *i2++ = v335;
                  }

                  break;
              }

              break;
          }

          break;
        case 1:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v196 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    int v196 = 0LL;
                  }
                  if (a4) {
                    unint64_t v225 = *(_BYTE **)(a4 + 16);
                  }
                  else {
                    unint64_t v225 = 0LL;
                  }
                  if (a5) {
                    uint64_t v237 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v237 = 0LL;
                  }
                  if (v7)
                  {
                    double v272 = v7;
                    do
                    {
                      double v273 = *v196++;
                      uint64_t v274 = (int)v273;
                      LOBYTE(v273) = *v225++;
                      double v275 = LOBYTE(v273);
                      if (v274) {
                        unsigned int v276 = a3;
                      }
                      else {
                        unsigned int v276 = v275;
                      }
                      *v237++ = v276;
                      --v272;
                    }

                    while (v272);
                  }

                  break;
                case 1:
                  if (a1) {
                    char v197 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    char v197 = 0LL;
                  }
                  if (a4) {
                    unint64_t v226 = *(unsigned __int8 **)(a4 + 16);
                  }
                  else {
                    unint64_t v226 = 0LL;
                  }
                  if (a5) {
                    int v238 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    int v238 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v283 = *v197++;
                    double v284 = (unint64_t)v283;
                    LODWORD(v283) = *v226++;
                    double v285 = LODWORD(v283);
                    if (v284) {
                      double v286 = a3;
                    }
                    else {
                      double v286 = v285;
                    }
                    *v238++ = v286;
                  }

                  break;
                case 0:
                  double v195 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  unint64_t v224 = a4 ? *(unsigned __int8 **)(a4 + 16) : 0LL;
                  for (i3 = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    double v268 = *v195++;
                    double v269 = v268;
                    LODWORD(v268) = *v224++;
                    unsigned int v270 = (double)LODWORD(v268);
                    if (v269 == 0.0) {
                      double v271 = v270;
                    }
                    else {
                      double v271 = (double)a3;
                    }
                    *i3++ = v271;
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v30 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    int v30 = 0LL;
                  }
                  if (a4) {
                    unint64_t v54 = *(uint64_t **)(a4 + 16);
                  }
                  else {
                    unint64_t v54 = 0LL;
                  }
                  if (a5) {
                    unint64_t v78 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    unint64_t v78 = 0LL;
                  }
                  if (v7)
                  {
                    double v189 = v7;
                    do
                    {
                      unint64_t v190 = *v30++;
                      unint64_t v191 = (int)v190;
                      double v193 = *v54++;
                      uint64_t v192 = v193;
                      if (v191) {
                        int v194 = a3;
                      }
                      else {
                        int v194 = v192;
                      }
                      *v78++ = v194;
                      --v189;
                    }

                    while (v189);
                  }

                  break;
                case 1:
                  if (a1) {
                    double v31 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v31 = 0LL;
                  }
                  if (a4) {
                    double v55 = *(unint64_t **)(a4 + 16);
                  }
                  else {
                    double v55 = 0LL;
                  }
                  if (a5) {
                    double v79 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v79 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    char v198 = *v31++;
                    double v199 = (unint64_t)v198;
                    unsigned int v201 = *v55++;
                    uint64_t v200 = v201;
                    if (v199) {
                      uint64_t v202 = a3;
                    }
                    else {
                      uint64_t v202 = v200;
                    }
                    *v79++ = v202;
                  }

                  break;
                case 0:
                  uint64_t v16 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  double v40 = a4 ? *(unint64_t **)(a4 + 16) : 0LL;
                  for (i4 = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    uint64_t v112 = *v16++;
                    double v113 = v112;
                    unint64_t v115 = *v40++;
                    double v114 = v115;
                    if (v113 != 0.0) {
                      double v114 = a3;
                    }
                    *i4++ = (double)v114;
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v22 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    int v22 = 0LL;
                  }
                  if (a4) {
                    double v46 = *(double **)(a4 + 16);
                  }
                  else {
                    double v46 = 0LL;
                  }
                  if (a5) {
                    unint64_t v70 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    unint64_t v70 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v140 = *v22++;
                    double v141 = (int)v140;
                    unint64_t v142 = *v46++;
                    double v143 = (int)v142;
                    if (v141) {
                      uint64_t v144 = a3;
                    }
                    else {
                      uint64_t v144 = v143;
                    }
                    *v70++ = v144;
                  }

                  break;
                case 1:
                  if (a1) {
                    double v23 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v23 = 0LL;
                  }
                  if (a4) {
                    double v47 = *(double **)(a4 + 16);
                  }
                  else {
                    double v47 = 0LL;
                  }
                  if (a5) {
                    double v71 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v71 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v145 = *v23++;
                    int v146 = (unint64_t)v145;
                    uint64_t v147 = *v47++;
                    unint64_t v148 = (unint64_t)v147;
                    if (v146) {
                      double v149 = a3;
                    }
                    else {
                      double v149 = v148;
                    }
                    *v71++ = v149;
                  }

                  break;
                case 0:
                  double v12 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  int v36 = a4 ? *(double **)(a4 + 16) : 0LL;
                  for (i5 = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    uint64_t v92 = *v12++;
                    unsigned int v93 = v92;
                    unint64_t v94 = *v36++;
                    double v95 = v94;
                    if (v93 == 0.0) {
                      unint64_t v96 = v95;
                    }
                    else {
                      unint64_t v96 = (double)a3;
                    }
                    *i5++ = v96;
                  }

                  break;
              }

              break;
          }

          break;
        case 0:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    char v168 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    char v168 = 0LL;
                  }
                  if (a4) {
                    double v219 = *(_BYTE **)(a4 + 16);
                  }
                  else {
                    double v219 = 0LL;
                  }
                  if (a5) {
                    double v231 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    double v231 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v246 = *v168++;
                    unint64_t v247 = (int)v246;
                    LOBYTE(v246) = *v219++;
                    double v248 = LOBYTE(v246);
                    if (v247) {
                      double v249 = (int)*(double *)&a3;
                    }
                    else {
                      double v249 = v248;
                    }
                    *v231++ = v249;
                  }

                  break;
                case 1:
                  if (a1) {
                    uint64_t v169 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v169 = 0LL;
                  }
                  if (a4) {
                    uint64_t v220 = *(unsigned __int8 **)(a4 + 16);
                  }
                  else {
                    uint64_t v220 = 0LL;
                  }
                  if (a5) {
                    double v232 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v232 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    unint64_t v250 = *v169++;
                    double v251 = (unint64_t)v250;
                    LODWORD(v250) = *v220++;
                    double v252 = LODWORD(v250);
                    if (v251) {
                      unsigned int v253 = (unint64_t)*(double *)&a3;
                    }
                    else {
                      unsigned int v253 = v252;
                    }
                    *v232++ = v253;
                  }

                  break;
                case 0:
                  int v167 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  unint64_t v218 = a4 ? *(unsigned __int8 **)(a4 + 16) : 0LL;
                  for (i6 = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    double v242 = *v167++;
                    uint64_t v243 = v242;
                    LODWORD(v242) = *v218++;
                    double v244 = (double)LODWORD(v242);
                    if (v243 == 0.0) {
                      double v245 = v244;
                    }
                    else {
                      double v245 = *(double *)&a3;
                    }
                    *i6++ = v245;
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v26 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v26 = 0LL;
                  }
                  if (a4) {
                    unsigned int v50 = *(_BYTE **)(a4 + 16);
                  }
                  else {
                    unsigned int v50 = 0LL;
                  }
                  if (a5) {
                    unsigned int v74 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v74 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v162 = v7;
                    do
                    {
                      double v163 = *v26++;
                      int v164 = (int)v163;
                      LOBYTE(v163) = *v50;
                      v50 += 8;
                      char v165 = LOBYTE(v163);
                      if (v164) {
                        double v166 = (int)*(double *)&a3;
                      }
                      else {
                        double v166 = v165;
                      }
                      *v74++ = v166;
                      --v162;
                    }

                    while (v162);
                  }

                  break;
                case 1:
                  if (a1) {
                    uint64_t v27 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v27 = 0LL;
                  }
                  if (a4) {
                    double v51 = *(unint64_t **)(a4 + 16);
                  }
                  else {
                    double v51 = 0LL;
                  }
                  if (a5) {
                    double v75 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v75 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v170 = *v27++;
                    unint64_t v171 = (unint64_t)v170;
                    unint64_t v173 = *v51++;
                    unint64_t v172 = v173;
                    if (v171) {
                      double v174 = (unint64_t)*(double *)&a3;
                    }
                    else {
                      double v174 = v172;
                    }
                    *v75++ = v174;
                  }

                  break;
                case 0:
                  int v14 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  uint64_t v38 = a4 ? *(unint64_t **)(a4 + 16) : 0LL;
                  for (i7 = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    double v102 = *v14++;
                    double v103 = v102;
                    double v104 = *v38++;
                    double v105 = (double)v104;
                    if (v103 == 0.0) {
                      uint64_t v106 = v105;
                    }
                    else {
                      uint64_t v106 = *(double *)&a3;
                    }
                    *i7++ = v106;
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v18 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v18 = 0LL;
                  }
                  if (a4) {
                    int v42 = *(double **)(a4 + 16);
                  }
                  else {
                    int v42 = 0LL;
                  }
                  if (a5) {
                    unsigned int v66 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v66 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    uint64_t v122 = *v18++;
                    uint64_t v123 = (int)v122;
                    unint64_t v124 = *v42++;
                    unint64_t v125 = v124;
                    if (v123) {
                      unint64_t v125 = *(double *)&a3;
                    }
                    *v66++ = (int)v125;
                  }

                  break;
                case 1:
                  if (a1) {
                    double v19 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v19 = 0LL;
                  }
                  if (a4) {
                    int v43 = *(double **)(a4 + 16);
                  }
                  else {
                    int v43 = 0LL;
                  }
                  if (a5) {
                    double v67 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    double v67 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v126 = *v19++;
                    double v127 = (unint64_t)v126;
                    double v128 = *v43++;
                    uint64_t v129 = v128;
                    if (v127) {
                      uint64_t v129 = *(double *)&a3;
                    }
                    *v67++ = (unint64_t)v129;
                  }

                  break;
                case 0:
                  unint64_t v10 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  uint64_t v34 = a4 ? *(double **)(a4 + 16) : 0LL;
                  for (i8 = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    unsigned int v82 = *v10++;
                    double v83 = v82;
                    double v84 = *v34++;
                    unint64_t v85 = v84;
                    if (v83 == 0.0) {
                      unint64_t v86 = v85;
                    }
                    else {
                      unint64_t v86 = *(double *)&a3;
                    }
                    *i8++ = v86;
                  }

                  break;
              }

              break;
          }

          break;
      }

      break;
  }

  return a5;
}

  int v9 = 0;
LABEL_8:
  switch(v8)
  {
    case 2:
      switch(a6)
      {
        case 2:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v615 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v615 = 0LL;
                  }
                  if (a2) {
                    uint64_t v623 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    uint64_t v623 = 0LL;
                  }
                  if (a5) {
                    double v626 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    double v626 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    char v633 = *v615++;
                    int v632 = v633;
                    LOBYTE(v633) = *v623++;
                    char v634 = v633;
                    if (v632) {
                      uint64_t v635 = v634;
                    }
                    else {
                      uint64_t v635 = a4;
                    }
                    *v626++ = v635;
                  }

                  break;
                case 1:
                  if (a1) {
                    v616 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v616 = 0LL;
                  }
                  if (a2) {
                    int v624 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    int v624 = 0LL;
                  }
                  if (a5) {
                    double v627 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    double v627 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    int v637 = *v616++;
                    int v636 = v637;
                    unint64_t v639 = *v624++;
                    double v638 = v639;
                    if (v636) {
                      unint64_t v640 = v638;
                    }
                    else {
                      unint64_t v640 = a4;
                    }
                    *v627++ = v640;
                  }

                  break;
                case 0:
                  unsigned int v614 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  unsigned int v622 = a2 ? *(_BYTE **)(a2 + 16) : 0LL;
                  for (uint64_t i = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    int v629 = *v614++;
                    double v628 = v629;
                    LOBYTE(v629) = *v622++;
                    int v630 = v629;
                    if (v628) {
                      double v631 = v630;
                    }
                    else {
                      double v631 = a4;
                    }
                    *i++ = (double)v631;
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    uint64_t v573 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v573 = 0LL;
                  }
                  if (a2) {
                    unint64_t v584 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    unint64_t v584 = 0LL;
                  }
                  if (a5) {
                    int v590 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    int v590 = 0LL;
                  }
                  if (v7)
                  {
                    char v609 = v7;
                    do
                    {
                      double v611 = *v573++;
                      char v610 = v611;
                      LOBYTE(v611) = *v584++;
                      v612 = v611;
                      if (v610) {
                        v613 = v612;
                      }
                      else {
                        v613 = a4;
                      }
                      *v590++ = v613;
                      --v609;
                    }

                    while (v609);
                  }

                  break;
                case 1:
                  if (a1) {
                    int v574 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    int v574 = 0LL;
                  }
                  if (a2) {
                    unint64_t v585 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    unint64_t v585 = 0LL;
                  }
                  if (a5) {
                    int v591 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    int v591 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    unint64_t v618 = *v574++;
                    v617 = v618;
                    unint64_t v620 = *v585++;
                    double v619 = v620;
                    if (v617) {
                      v621 = v619;
                    }
                    else {
                      v621 = a4;
                    }
                    *v591++ = v621;
                  }

                  break;
                case 0:
                  double v570 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  v581 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0LL;
                  for (j = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    int v597 = *v570++;
                    uint64_t v596 = v597;
                    int v598 = *v581++;
                    unint64_t v599 = (double)v598;
                    if (!v596) {
                      unint64_t v599 = (double)a4;
                    }
                    *j++ = v599;
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v571 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v571 = 0LL;
                  }
                  if (a2) {
                    double v582 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    double v582 = 0LL;
                  }
                  if (a5) {
                    v588 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    v588 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v601 = *v571++;
                    unint64_t v600 = v601;
                    LOBYTE(v601) = *v582++;
                    unint64_t v602 = v601;
                    if (v600) {
                      unint64_t v603 = v602;
                    }
                    else {
                      unint64_t v603 = (int)*(double *)&a4;
                    }
                    *v588++ = v603;
                  }

                  break;
                case 1:
                  if (a1) {
                    double v572 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v572 = 0LL;
                  }
                  if (a2) {
                    uint64_t v583 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    uint64_t v583 = 0LL;
                  }
                  if (a5) {
                    uint64_t v589 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v589 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    int v605 = *v572++;
                    uint64_t v604 = v605;
                    double v607 = *v583++;
                    int v606 = v607;
                    if (v604) {
                      int v608 = v606;
                    }
                    else {
                      int v608 = (unint64_t)*(double *)&a4;
                    }
                    *v589++ = v608;
                  }

                  break;
                case 0:
                  unint64_t v569 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  uint64_t v580 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0LL;
                  for (k = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    double v593 = *v569++;
                    char v592 = v593;
                    int v594 = *v580++;
                    char v595 = (double)v594;
                    if (!v592) {
                      char v595 = *(double *)&a4;
                    }
                    *k++ = v595;
                  }

                  break;
              }

              break;
          }

          break;
        case 1:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    unsigned int v551 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v551 = 0LL;
                  }
                  if (a2) {
                    unsigned int v554 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    unsigned int v554 = 0LL;
                  }
                  if (a5) {
                    unint64_t v557 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    unint64_t v557 = 0LL;
                  }
                  if (v7)
                  {
                    unint64_t v563 = v7;
                    do
                    {
                      uint64_t v565 = *v551++;
                      v564 = v565;
                      int v567 = *v554++;
                      int v566 = v567;
                      if (v564) {
                        unint64_t v568 = v566;
                      }
                      else {
                        unint64_t v568 = a4;
                      }
                      *v557++ = v568;
                      --v563;
                    }

                    while (v563);
                  }

                  break;
                case 1:
                  if (a1) {
                    v552 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v552 = 0LL;
                  }
                  if (a2) {
                    unsigned int v555 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    unsigned int v555 = 0LL;
                  }
                  if (a5) {
                    v558 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    v558 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v576 = *v552++;
                    int v575 = v576;
                    unint64_t v578 = *v555++;
                    double v577 = v578;
                    if (v575) {
                      double v579 = v577;
                    }
                    else {
                      double v579 = a4;
                    }
                    *v558++ = v579;
                  }

                  break;
                case 0:
                  double v550 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  v553 = a2 ? *(unint64_t **)(a2 + 16) : 0LL;
                  for (m = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    unsigned int v560 = *v550++;
                    v559 = v560;
                    unint64_t v561 = *v553++;
                    uint64_t v562 = (double)v561;
                    if (!v559) {
                      uint64_t v562 = (double)a4;
                    }
                    *m++ = v562;
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    v450 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v450 = 0LL;
                  }
                  if (a2) {
                    double v462 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    double v462 = 0LL;
                  }
                  if (a5) {
                    int v474 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    int v474 = 0LL;
                  }
                  if (v7)
                  {
                    double v544 = v7;
                    do
                    {
                      v546 = *v450++;
                      unsigned int v545 = v546;
                      unsigned int v548 = *v462++;
                      v547 = v548;
                      if (v545) {
                        unsigned int v549 = v547;
                      }
                      else {
                        unsigned int v549 = a4;
                      }
                      *v474++ = v549;
                      --v544;
                    }

                    while (v544);
                  }

                  break;
                case 1:
                  if (a1) {
                    v451 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v451 = 0LL;
                  }
                  if (a2) {
                    uint64_t v463 = *(unint64_t **)(a2 + 16);
                  }
                  else {
                    uint64_t v463 = 0LL;
                  }
                  if (a5) {
                    char v475 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    char v475 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    uint64_t v642 = *v451++;
                    unint64_t v641 = v642;
                    int v644 = *v463++;
                    int v643 = v644;
                    if (v641) {
                      double v645 = v643;
                    }
                    else {
                      double v645 = a4;
                    }
                    *v475++ = v645;
                  }

                  break;
                case 0:
                  uint64_t v443 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  int v455 = a2 ? *(unint64_t **)(a2 + 16) : 0LL;
                  for (n = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    uint64_t v489 = *v443++;
                    unsigned int v488 = v489;
                    unint64_t v491 = *v455++;
                    double v490 = v491;
                    if (v488) {
                      v492 = v490;
                    }
                    else {
                      v492 = a4;
                    }
                    *n++ = (double)v492;
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v446 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    int v446 = 0LL;
                  }
                  if (a2) {
                    uint64_t v458 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    uint64_t v458 = 0LL;
                  }
                  if (a5) {
                    uint64_t v470 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v470 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    int v502 = *v446++;
                    uint64_t v501 = v502;
                    LOBYTE(v502) = *v458;
                    v458 += 8;
                    unsigned int v503 = v502;
                    if (v501) {
                      uint64_t v504 = v503;
                    }
                    else {
                      uint64_t v504 = (int)*(double *)&a4;
                    }
                    *v470++ = v504;
                  }

                  break;
                case 1:
                  if (a1) {
                    unsigned int v447 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v447 = 0LL;
                  }
                  if (a2) {
                    uint64_t v459 = *(unint64_t **)(a2 + 16);
                  }
                  else {
                    uint64_t v459 = 0LL;
                  }
                  if (a5) {
                    unsigned int v471 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v471 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    unsigned int v506 = *v447++;
                    v505 = v506;
                    uint64_t v508 = *v459++;
                    uint64_t v507 = v508;
                    if (v505) {
                      uint64_t v509 = v507;
                    }
                    else {
                      uint64_t v509 = (unint64_t)*(double *)&a4;
                    }
                    *v471++ = v509;
                  }

                  break;
                case 0:
                  unint64_t v441 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  unint64_t v453 = a2 ? *(unint64_t **)(a2 + 16) : 0LL;
                  for (iuint64_t i = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    unint64_t v481 = *v441++;
                    double v480 = v481;
                    unint64_t v482 = *v453++;
                    uint64_t v483 = (double)v482;
                    if (!v480) {
                      uint64_t v483 = *(double *)&a4;
                    }
                    *ii++ = v483;
                  }

                  break;
              }

              break;
          }

          break;
        case 0:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    v517 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v517 = 0LL;
                  }
                  if (a2) {
                    double v520 = *(double **)(a2 + 16);
                  }
                  else {
                    double v520 = 0LL;
                  }
                  if (a5) {
                    v523 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    v523 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    unsigned int v530 = *v517++;
                    v529 = v530;
                    unsigned int v531 = *v520++;
                    double v532 = (int)v531;
                    if (v529) {
                      unint64_t v533 = v532;
                    }
                    else {
                      unint64_t v533 = a4;
                    }
                    *v523++ = v533;
                  }

                  break;
                case 1:
                  if (a1) {
                    unsigned int v518 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v518 = 0LL;
                  }
                  if (a2) {
                    unsigned int v521 = *(double **)(a2 + 16);
                  }
                  else {
                    unsigned int v521 = 0LL;
                  }
                  if (a5) {
                    unsigned int v524 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v524 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    v535 = *v518++;
                    v534 = v535;
                    unsigned int v536 = *v521++;
                    unint64_t v537 = (unint64_t)v536;
                    if (v534) {
                      double v538 = v537;
                    }
                    else {
                      double v538 = a4;
                    }
                    *v524++ = v538;
                  }

                  break;
                case 0:
                  v516 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  unsigned int v519 = a2 ? *(double **)(a2 + 16) : 0LL;
                  for (jj = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    double v526 = *v516++;
                    unsigned int v525 = v526;
                    unsigned int v527 = *v519++;
                    v528 = v527;
                    if (!v525) {
                      v528 = (double)a4;
                    }
                    *jj++ = v528;
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v448 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v448 = 0LL;
                  }
                  if (a2) {
                    double v460 = *(double **)(a2 + 16);
                  }
                  else {
                    double v460 = 0LL;
                  }
                  if (a5) {
                    char v472 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    char v472 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v510 = v7;
                    do
                    {
                      uint64_t v512 = *v448++;
                      uint64_t v511 = v512;
                      uint64_t v513 = *v460++;
                      double v514 = (int)v513;
                      if (v511) {
                        unint64_t v515 = v514;
                      }
                      else {
                        unint64_t v515 = a4;
                      }
                      *v472++ = v515;
                      --v510;
                    }

                    while (v510);
                  }

                  break;
                case 1:
                  if (a1) {
                    int v449 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    int v449 = 0LL;
                  }
                  if (a2) {
                    double v461 = *(double **)(a2 + 16);
                  }
                  else {
                    double v461 = 0LL;
                  }
                  if (a5) {
                    double v473 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v473 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    v540 = *v449++;
                    unint64_t v539 = v540;
                    v541 = *v461++;
                    unsigned int v542 = (unint64_t)v541;
                    if (v539) {
                      unsigned int v543 = v542;
                    }
                    else {
                      unsigned int v543 = a4;
                    }
                    *v473++ = v543;
                  }

                  break;
                case 0:
                  double v442 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  double v454 = a2 ? *(double **)(a2 + 16) : 0LL;
                  for (kk = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    unint64_t v485 = *v442++;
                    int v484 = v485;
                    v486 = *v454++;
                    v487 = v486;
                    if (!v484) {
                      v487 = (double)a4;
                    }
                    *kk++ = v487;
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    v444 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v444 = 0LL;
                  }
                  if (a2) {
                    v456 = *(double **)(a2 + 16);
                  }
                  else {
                    v456 = 0LL;
                  }
                  if (a5) {
                    double v468 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    double v468 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    unsigned int v494 = *v444++;
                    v493 = v494;
                    int v495 = *v456++;
                    double v496 = v495;
                    if (!v493) {
                      double v496 = *(double *)&a4;
                    }
                    *v468++ = (int)v496;
                  }

                  break;
                case 1:
                  if (a1) {
                    v445 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    v445 = 0LL;
                  }
                  if (a2) {
                    uint64_t v457 = *(double **)(a2 + 16);
                  }
                  else {
                    uint64_t v457 = 0LL;
                  }
                  if (a5) {
                    uint64_t v469 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v469 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    uint64_t v498 = *v445++;
                    unsigned int v497 = v498;
                    v499 = *v457++;
                    unsigned int v500 = v499;
                    if (!v497) {
                      unsigned int v500 = *(double *)&a4;
                    }
                    *v469++ = (unint64_t)v500;
                  }

                  break;
                case 0:
                  int v440 = a1 ? (unsigned __int8 *)*((void *)a1 + 2) : 0LL;
                  int v452 = a2 ? *(double **)(a2 + 16) : 0LL;
                  for (mm = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    uint64_t v477 = *v440++;
                    uint64_t v476 = v477;
                    uint64_t v478 = *v452++;
                    unint64_t v479 = v478;
                    if (!v476) {
                      unint64_t v479 = *(double *)&a4;
                    }
                    *mm++ = v479;
                  }

                  break;
              }

              break;
          }

          break;
      }

      break;
    case 1:
      switch(a6)
      {
        case 2:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v395 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v395 = 0LL;
                  }
                  if (a2) {
                    double v406 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    double v406 = 0LL;
                  }
                  if (a5) {
                    uint64_t v412 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v412 = 0LL;
                  }
                  if (v7)
                  {
                    uint64_t v430 = v7;
                    do
                    {
                      uint64_t v432 = *v395;
                      v395 += 8;
                      uint64_t v431 = v432;
                      LOBYTE(v432) = *v406++;
                      v433 = v432;
                      if (v431) {
                        int v434 = v433;
                      }
                      else {
                        int v434 = a4;
                      }
                      *v412++ = v434;
                      --v430;
                    }

                    while (v430);
                  }

                  break;
                case 1:
                  if (a1) {
                    v396 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    v396 = 0LL;
                  }
                  if (a2) {
                    double v407 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    double v407 = 0LL;
                  }
                  if (a5) {
                    uint64_t v413 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v413 = 0LL;
                  }
                  if (v7)
                  {
                    unsigned int v435 = v7;
                    do
                    {
                      uint64_t v437 = *v396++;
                      double v436 = v437;
                      LODWORD(v437) = *v407++;
                      v438 = v437;
                      if (v436) {
                        v439 = v438;
                      }
                      else {
                        v439 = a4;
                      }
                      *v413++ = v439;
                      --v435;
                    }

                    while (v435);
                  }

                  break;
                case 0:
                  double v394 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  unint64_t v405 = a2 ? *(_BYTE **)(a2 + 16) : 0LL;
                  unint64_t v411 = a5 ? (double *)*((void *)a5 + 2) : 0LL;
                  if (v7)
                  {
                    int v425 = v7;
                    do
                    {
                      uint64_t v427 = *v394++;
                      uint64_t v426 = v427;
                      LOBYTE(v427) = *v405++;
                      uint64_t v428 = v427;
                      if (v426) {
                        uint64_t v429 = v428;
                      }
                      else {
                        uint64_t v429 = a4;
                      }
                      *v411++ = (double)v429;
                      --v425;
                    }

                    while (v425);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v311 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v311 = 0LL;
                  }
                  if (a2) {
                    double v329 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    double v329 = 0LL;
                  }
                  if (a5) {
                    unsigned int v341 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v341 = 0LL;
                  }
                  if (v7)
                  {
                    double v389 = v7;
                    do
                    {
                      unint64_t v391 = *v311;
                      v311 += 8;
                      v390 = v391;
                      LOBYTE(v391) = *v329++;
                      double v392 = v391;
                      if (v390) {
                        unint64_t v393 = v392;
                      }
                      else {
                        unint64_t v393 = a4;
                      }
                      *v341++ = v393;
                      --v389;
                    }

                    while (v389);
                  }

                  break;
                case 1:
                  if (a1) {
                    int v312 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    int v312 = 0LL;
                  }
                  if (a2) {
                    uint64_t v330 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    uint64_t v330 = 0LL;
                  }
                  if (a5) {
                    unsigned int v342 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v342 = 0LL;
                  }
                  if (v7)
                  {
                    v397 = v7;
                    do
                    {
                      int v399 = *v312++;
                      double v398 = v399;
                      LODWORD(v399) = *v330++;
                      double v400 = v399;
                      if (v398) {
                        double v401 = v400;
                      }
                      else {
                        double v401 = a4;
                      }
                      *v342++ = v401;
                      --v397;
                    }

                    while (v397);
                  }

                  break;
                case 0:
                  uint64_t v308 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  unint64_t v326 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0LL;
                  uint64_t v338 = a5 ? (double *)*((void *)a5 + 2) : 0LL;
                  if (v7)
                  {
                    double v375 = v7;
                    do
                    {
                      int v377 = *v308++;
                      double v376 = v377;
                      LODWORD(v377) = *v326++;
                      char v378 = (double)v377;
                      if (!v376) {
                        char v378 = (double)a4;
                      }
                      *v338++ = v378;
                      --v375;
                    }

                    while (v375);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    uint64_t v309 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v309 = 0LL;
                  }
                  if (a2) {
                    double v327 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    double v327 = 0LL;
                  }
                  if (a5) {
                    uint64_t v339 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v339 = 0LL;
                  }
                  if (v7)
                  {
                    double v379 = v7;
                    do
                    {
                      char v381 = *v309;
                      v309 += 8;
                      int v380 = v381;
                      LOBYTE(v381) = *v327++;
                      double v382 = v381;
                      if (v380) {
                        unint64_t v383 = v382;
                      }
                      else {
                        unint64_t v383 = (int)*(double *)&a4;
                      }
                      *v339++ = v383;
                      --v379;
                    }

                    while (v379);
                  }

                  break;
                case 1:
                  if (a1) {
                    unsigned int v310 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    unsigned int v310 = 0LL;
                  }
                  if (a2) {
                    double v328 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    double v328 = 0LL;
                  }
                  if (a5) {
                    double v340 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v340 = 0LL;
                  }
                  if (v7)
                  {
                    unint64_t v384 = v7;
                    do
                    {
                      unint64_t v386 = *v310++;
                      double v385 = v386;
                      LODWORD(v386) = *v328++;
                      unint64_t v387 = v386;
                      if (v385) {
                        uint64_t v388 = v387;
                      }
                      else {
                        uint64_t v388 = (unint64_t)*(double *)&a4;
                      }
                      *v340++ = v388;
                      --v384;
                    }

                    while (v384);
                  }

                  break;
                case 0:
                  double v307 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  unint64_t v325 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0LL;
                  uint64_t v337 = a5 ? (double *)*((void *)a5 + 2) : 0LL;
                  if (v7)
                  {
                    double v371 = v7;
                    do
                    {
                      unint64_t v373 = *v307++;
                      double v372 = v373;
                      LODWORD(v373) = *v325++;
                      double v374 = (double)v373;
                      if (!v372) {
                        double v374 = *(double *)&a4;
                      }
                      *v337++ = v374;
                      --v371;
                    }

                    while (v371);
                  }

                  break;
              }

              break;
          }

          break;
        case 1:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    uint64_t v210 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v210 = 0LL;
                  }
                  if (a2) {
                    uint64_t v228 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    uint64_t v228 = 0LL;
                  }
                  if (a5) {
                    unsigned int v240 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v240 = 0LL;
                  }
                  if (v7)
                  {
                    unint64_t v301 = v7;
                    do
                    {
                      uint64_t v303 = *v210;
                      v210 += 8;
                      uint64_t v302 = v303;
                      double v305 = *v228++;
                      uint64_t v304 = v305;
                      if (v302) {
                        double v306 = v304;
                      }
                      else {
                        double v306 = a4;
                      }
                      *v240++ = v306;
                      --v301;
                    }

                    while (v301);
                  }

                  break;
                case 1:
                  if (a1) {
                    uint64_t v211 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v211 = 0LL;
                  }
                  if (a2) {
                    double v229 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    double v229 = 0LL;
                  }
                  if (a5) {
                    double v241 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    double v241 = 0LL;
                  }
                  if (v7)
                  {
                    char v313 = v7;
                    do
                    {
                      uint64_t v315 = *v211++;
                      char v314 = v315;
                      uint64_t v317 = *v229++;
                      uint64_t v316 = v317;
                      if (v314) {
                        double v318 = v316;
                      }
                      else {
                        double v318 = a4;
                      }
                      *v241++ = v318;
                      --v313;
                    }

                    while (v313);
                  }

                  break;
                case 0:
                  unint64_t v209 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  unint64_t v227 = a2 ? *(unint64_t **)(a2 + 16) : 0LL;
                  double v239 = a5 ? (double *)*((void *)a5 + 2) : 0LL;
                  if (v7)
                  {
                    double v296 = v7;
                    do
                    {
                      double v298 = *v209++;
                      unint64_t v297 = v298;
                      unint64_t v299 = *v227++;
                      unint64_t v300 = (double)v299;
                      if (!v297) {
                        unint64_t v300 = (double)a4;
                      }
                      *v239++ = v300;
                      --v296;
                    }

                    while (v296);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v32 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v32 = 0LL;
                  }
                  if (a2) {
                    double v56 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    double v56 = 0LL;
                  }
                  if (a5) {
                    double v80 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    double v80 = 0LL;
                  }
                  if (v7)
                  {
                    double v203 = v7;
                    do
                    {
                      double v205 = *v32;
                      v32 += 8;
                      unint64_t v204 = v205;
                      unint64_t v207 = *v56++;
                      unint64_t v206 = v207;
                      if (v204) {
                        unint64_t v208 = v206;
                      }
                      else {
                        unint64_t v208 = a4;
                      }
                      *v80++ = v208;
                      --v203;
                    }

                    while (v203);
                  }

                  break;
                case 1:
                  if (a1) {
                    double v33 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    double v33 = 0LL;
                  }
                  if (a2) {
                    double v57 = *(unint64_t **)(a2 + 16);
                  }
                  else {
                    double v57 = 0LL;
                  }
                  if (a5) {
                    unint64_t v81 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    unint64_t v81 = 0LL;
                  }
                  if (v7)
                  {
                    unsigned int v212 = v7;
                    do
                    {
                      int v214 = *v33++;
                      double v213 = v214;
                      char v216 = *v57++;
                      char v215 = v216;
                      if (v213) {
                        double v217 = v215;
                      }
                      else {
                        double v217 = a4;
                      }
                      *v81++ = v217;
                      --v212;
                    }

                    while (v212);
                  }

                  break;
                case 0:
                  int v17 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  uint64_t v41 = a2 ? *(unint64_t **)(a2 + 16) : 0LL;
                  unsigned int v65 = a5 ? (double *)*((void *)a5 + 2) : 0LL;
                  if (v7)
                  {
                    unint64_t v116 = v7;
                    do
                    {
                      double v118 = *v17++;
                      double v117 = v118;
                      double v120 = *v41++;
                      double v119 = v120;
                      if (v117) {
                        uint64_t v121 = v119;
                      }
                      else {
                        uint64_t v121 = a4;
                      }
                      *v65++ = (double)v121;
                      --v116;
                    }

                    while (v116);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v24 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v24 = 0LL;
                  }
                  if (a2) {
                    double v48 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    double v48 = 0LL;
                  }
                  if (a5) {
                    double v72 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    double v72 = 0LL;
                  }
                  if (v7)
                  {
                    double v149 = v7;
                    do
                    {
                      double v151 = *v24;
                      v24 += 8;
                      uint64_t v150 = v151;
                      LOBYTE(v151) = *v48;
                      v48 += 8;
                      unint64_t v152 = v151;
                      if (v150) {
                        uint64_t v153 = v152;
                      }
                      else {
                        uint64_t v153 = (int)*(double *)&a4;
                      }
                      *v72++ = v153;
                      --v149;
                    }

                    while (v149);
                  }

                  break;
                case 1:
                  if (a1) {
                    double v25 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    double v25 = 0LL;
                  }
                  if (a2) {
                    uint64_t v49 = *(unint64_t **)(a2 + 16);
                  }
                  else {
                    uint64_t v49 = 0LL;
                  }
                  if (a5) {
                    int v73 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    int v73 = 0LL;
                  }
                  if (v7)
                  {
                    double v154 = v7;
                    do
                    {
                      uint64_t v156 = *v25++;
                      double v155 = v156;
                      unint64_t v158 = *v49++;
                      int v157 = v158;
                      if (v155) {
                        uint64_t v159 = v157;
                      }
                      else {
                        uint64_t v159 = (unint64_t)*(double *)&a4;
                      }
                      *v73++ = v159;
                      --v154;
                    }

                    while (v154);
                  }

                  break;
                case 0:
                  uint64_t v13 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  double v37 = a2 ? *(unint64_t **)(a2 + 16) : 0LL;
                  int v61 = a5 ? (double *)*((void *)a5 + 2) : 0LL;
                  if (v7)
                  {
                    double v97 = v7;
                    do
                    {
                      double v99 = *v13++;
                      double v98 = v99;
                      unint64_t v100 = *v37++;
                      unsigned int v101 = (double)v100;
                      if (!v98) {
                        unsigned int v101 = *(double *)&a4;
                      }
                      *v61++ = v101;
                      --v97;
                    }

                    while (v97);
                  }

                  break;
              }

              break;
          }

          break;
        case 0:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v181 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    double v181 = 0LL;
                  }
                  if (a2) {
                    uint64_t v222 = *(double **)(a2 + 16);
                  }
                  else {
                    uint64_t v222 = 0LL;
                  }
                  if (a5) {
                    uint64_t v234 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v234 = 0LL;
                  }
                  if (v7)
                  {
                    unsigned int v262 = v7;
                    do
                    {
                      int v264 = *v181;
                      v181 += 8;
                      double v263 = v264;
                      int v265 = *v222++;
                      double v266 = (int)v265;
                      if (v263) {
                        unint64_t v267 = v266;
                      }
                      else {
                        unint64_t v267 = a4;
                      }
                      *v234++ = v267;
                      --v262;
                    }

                    while (v262);
                  }

                  break;
                case 1:
                  if (a1) {
                    int v182 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    int v182 = 0LL;
                  }
                  if (a2) {
                    double v223 = *(double **)(a2 + 16);
                  }
                  else {
                    double v223 = 0LL;
                  }
                  if (a5) {
                    double v235 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v235 = 0LL;
                  }
                  if (v7)
                  {
                    double v268 = v7;
                    do
                    {
                      unsigned int v270 = *v182++;
                      double v269 = v270;
                      double v271 = *v223++;
                      double v272 = (unint64_t)v271;
                      if (v269) {
                        double v273 = v272;
                      }
                      else {
                        double v273 = a4;
                      }
                      *v235++ = v273;
                      --v268;
                    }

                    while (v268);
                  }

                  break;
                case 0:
                  char v180 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  uint64_t v221 = a2 ? *(double **)(a2 + 16) : 0LL;
                  unsigned int v233 = a5 ? (double *)*((void *)a5 + 2) : 0LL;
                  if (v7)
                  {
                    double v257 = v7;
                    do
                    {
                      double v259 = *v180++;
                      unint64_t v258 = v259;
                      double v260 = *v221++;
                      double v261 = v260;
                      if (!v258) {
                        double v261 = (double)a4;
                      }
                      *v233++ = v261;
                      --v257;
                    }

                    while (v257);
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v28 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    int v28 = 0LL;
                  }
                  if (a2) {
                    int v52 = *(double **)(a2 + 16);
                  }
                  else {
                    int v52 = 0LL;
                  }
                  if (a5) {
                    double v76 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    double v76 = 0LL;
                  }
                  if (v7)
                  {
                    double v174 = v7;
                    do
                    {
                      unint64_t v176 = *v28;
                      v28 += 8;
                      unint64_t v175 = v176;
                      uint64_t v177 = *v52++;
                      uint64_t v178 = (int)v177;
                      if (v175) {
                        unsigned int v179 = v178;
                      }
                      else {
                        unsigned int v179 = a4;
                      }
                      *v76++ = v179;
                      --v174;
                    }

                    while (v174);
                  }

                  break;
                case 1:
                  if (a1) {
                    int v29 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    int v29 = 0LL;
                  }
                  if (a2) {
                    unint64_t v53 = *(double **)(a2 + 16);
                  }
                  else {
                    unint64_t v53 = 0LL;
                  }
                  if (a5) {
                    double v77 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v77 = 0LL;
                  }
                  if (v7)
                  {
                    char v183 = v7;
                    do
                    {
                      uint64_t v185 = *v29++;
                      uint64_t v184 = v185;
                      uint64_t v186 = *v53++;
                      unint64_t v187 = (unint64_t)v186;
                      if (v184) {
                        unint64_t v188 = v187;
                      }
                      else {
                        unint64_t v188 = a4;
                      }
                      *v77++ = v188;
                      --v183;
                    }

                    while (v183);
                  }

                  break;
                case 0:
                  int v15 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  double v39 = a2 ? *(double **)(a2 + 16) : 0LL;
                  double v63 = a5 ? (double *)*((void *)a5 + 2) : 0LL;
                  if (v7)
                  {
                    double v107 = v7;
                    do
                    {
                      uint64_t v109 = *v15++;
                      unint64_t v108 = v109;
                      double v110 = *v39++;
                      double v111 = v110;
                      if (!v108) {
                        double v111 = (double)a4;
                      }
                      *v63++ = v111;
                      --v107;
                    }

                    while (v107);
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    uint64_t v20 = (unsigned __int8 *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v20 = 0LL;
                  }
                  if (a2) {
                    unint64_t v44 = *(double **)(a2 + 16);
                  }
                  else {
                    unint64_t v44 = 0LL;
                  }
                  if (a5) {
                    double v68 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    double v68 = 0LL;
                  }
                  if (v7)
                  {
                    double v130 = v7;
                    do
                    {
                      double v132 = *v20;
                      v20 += 8;
                      double v131 = v132;
                      double v133 = *v44++;
                      unint64_t v134 = v133;
                      if (!v131) {
                        unint64_t v134 = *(double *)&a4;
                      }
                      *v68++ = (int)v134;
                      --v130;
                    }

                    while (v130);
                  }

                  break;
                case 1:
                  if (a1) {
                    int v21 = (uint64_t *)*((void *)a1 + 2);
                  }
                  else {
                    int v21 = 0LL;
                  }
                  if (a2) {
                    double v45 = *(double **)(a2 + 16);
                  }
                  else {
                    double v45 = 0LL;
                  }
                  if (a5) {
                    double v69 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    double v69 = 0LL;
                  }
                  if (v7)
                  {
                    double v135 = v7;
                    do
                    {
                      uint64_t v137 = *v21++;
                      double v136 = v137;
                      uint64_t v138 = *v45++;
                      uint64_t v139 = v138;
                      if (!v136) {
                        uint64_t v139 = *(double *)&a4;
                      }
                      *v69++ = (unint64_t)v139;
                      --v135;
                    }

                    while (v135);
                  }

                  break;
                case 0:
                  double v11 = a1 ? (uint64_t *)*((void *)a1 + 2) : 0LL;
                  int v35 = a2 ? *(double **)(a2 + 16) : 0LL;
                  double v59 = a5 ? (double *)*((void *)a5 + 2) : 0LL;
                  if (v7)
                  {
                    double v87 = v7;
                    do
                    {
                      double v89 = *v11++;
                      unsigned int v88 = v89;
                      unsigned int v90 = *v35++;
                      double v91 = v90;
                      if (!v88) {
                        double v91 = *(double *)&a4;
                      }
                      *v59++ = v91;
                      --v87;
                    }

                    while (v87);
                  }

                  break;
              }

              break;
          }

          break;
      }

      break;
    case 0:
      switch(a6)
      {
        case 2:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v365 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v365 = 0LL;
                  }
                  if (a2) {
                    double v403 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    double v403 = 0LL;
                  }
                  if (a5) {
                    v409 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    v409 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    uint64_t v417 = *v365++;
                    uint64_t v418 = (int)v417;
                    LOBYTE(v417) = *v403++;
                    unint64_t v419 = LOBYTE(v417);
                    if (v418) {
                      unint64_t v420 = v419;
                    }
                    else {
                      unint64_t v420 = a4;
                    }
                    *v409++ = v420;
                  }

                  break;
                case 1:
                  if (a1) {
                    double v366 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v366 = 0LL;
                  }
                  if (a2) {
                    unint64_t v404 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    unint64_t v404 = 0LL;
                  }
                  if (a5) {
                    double v410 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    double v410 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v421 = *v366++;
                    double v422 = (unint64_t)v421;
                    LODWORD(v421) = *v404++;
                    uint64_t v423 = LODWORD(v421);
                    if (v422) {
                      int v424 = v423;
                    }
                    else {
                      int v424 = a4;
                    }
                    *v410++ = v424;
                  }

                  break;
                case 0:
                  double v364 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  v402 = a2 ? *(_BYTE **)(a2 + 16) : 0LL;
                  for (nn = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    uint64_t v414 = *v364++;
                    uint64_t v415 = v414;
                    LOBYTE(v414) = *v402++;
                    uint64_t v416 = LOBYTE(v414);
                    if (v415 == 0.0) {
                      uint64_t v416 = a4;
                    }
                    *nn++ = (double)v416;
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v289 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v289 = 0LL;
                  }
                  if (a2) {
                    double v323 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    double v323 = 0LL;
                  }
                  if (a5) {
                    unint64_t v335 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    unint64_t v335 = 0LL;
                  }
                  if (v7)
                  {
                    double v359 = v7;
                    do
                    {
                      double v360 = *v289++;
                      v361 = (int)v360;
                      LOBYTE(v360) = *v323++;
                      double v362 = LOBYTE(v360);
                      if (v361) {
                        unint64_t v363 = v362;
                      }
                      else {
                        unint64_t v363 = a4;
                      }
                      *v335++ = v363;
                      --v359;
                    }

                    while (v359);
                  }

                  break;
                case 1:
                  if (a1) {
                    int v290 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    int v290 = 0LL;
                  }
                  if (a2) {
                    double v324 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    double v324 = 0LL;
                  }
                  if (a5) {
                    uint64_t v336 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v336 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v367 = *v290++;
                    double v368 = (unint64_t)v367;
                    LODWORD(v367) = *v324++;
                    double v369 = LODWORD(v367);
                    if (v368) {
                      double v370 = v369;
                    }
                    else {
                      double v370 = a4;
                    }
                    *v336++ = v370;
                  }

                  break;
                case 0:
                  double v286 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  unint64_t v320 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0LL;
                  for (i1 = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    unint64_t v347 = *v286++;
                    unsigned int v348 = v347;
                    LODWORD(v347) = *v320++;
                    unint64_t v349 = (double)LODWORD(v347);
                    if (v348 == 0.0) {
                      double v350 = (double)a4;
                    }
                    else {
                      double v350 = v349;
                    }
                    *i1++ = v350;
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v287 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v287 = 0LL;
                  }
                  if (a2) {
                    unint64_t v321 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    unint64_t v321 = 0LL;
                  }
                  if (a5) {
                    uint64_t v333 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v333 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    unsigned int v351 = *v287++;
                    double v352 = (int)v351;
                    LOBYTE(v351) = *v321++;
                    double v353 = LOBYTE(v351);
                    if (v352) {
                      double v354 = v353;
                    }
                    else {
                      double v354 = (int)*(double *)&a4;
                    }
                    *v333++ = v354;
                  }

                  break;
                case 1:
                  if (a1) {
                    double v288 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v288 = 0LL;
                  }
                  if (a2) {
                    uint64_t v322 = *(unsigned __int8 **)(a2 + 16);
                  }
                  else {
                    uint64_t v322 = 0LL;
                  }
                  if (a5) {
                    double v334 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v334 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    unint64_t v355 = *v288++;
                    double v356 = (unint64_t)v355;
                    LODWORD(v355) = *v322++;
                    unsigned int v357 = LODWORD(v355);
                    if (v356) {
                      unint64_t v358 = v357;
                    }
                    else {
                      unint64_t v358 = (unint64_t)*(double *)&a4;
                    }
                    *v334++ = v358;
                  }

                  break;
                case 0:
                  double v285 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  unint64_t v319 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0LL;
                  for (i2 = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    unsigned int v343 = *v285++;
                    unsigned int v344 = v343;
                    LODWORD(v343) = *v319++;
                    unsigned int v345 = (double)LODWORD(v343);
                    if (v344 == 0.0) {
                      unsigned int v346 = *(double *)&a4;
                    }
                    else {
                      unsigned int v346 = v345;
                    }
                    *i2++ = v346;
                  }

                  break;
              }

              break;
          }

          break;
        case 1:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v196 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    int v196 = 0LL;
                  }
                  if (a2) {
                    unint64_t v225 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    unint64_t v225 = 0LL;
                  }
                  if (a5) {
                    uint64_t v237 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    uint64_t v237 = 0LL;
                  }
                  if (v7)
                  {
                    double v279 = v7;
                    do
                    {
                      char v280 = *v196++;
                      int v281 = (int)v280;
                      double v283 = *v225++;
                      uint64_t v282 = v283;
                      if (v281) {
                        double v284 = v282;
                      }
                      else {
                        double v284 = a4;
                      }
                      *v237++ = v284;
                      --v279;
                    }

                    while (v279);
                  }

                  break;
                case 1:
                  if (a1) {
                    char v197 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    char v197 = 0LL;
                  }
                  if (a2) {
                    unint64_t v226 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    unint64_t v226 = 0LL;
                  }
                  if (a5) {
                    int v238 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    int v238 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v291 = *v197++;
                    int v292 = (unint64_t)v291;
                    char v294 = *v226++;
                    char v293 = v294;
                    if (v292) {
                      uint64_t v295 = v293;
                    }
                    else {
                      uint64_t v295 = a4;
                    }
                    *v238++ = v295;
                  }

                  break;
                case 0:
                  double v195 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  unint64_t v224 = a2 ? *(unint64_t **)(a2 + 16) : 0LL;
                  for (i3 = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    uint64_t v274 = *v195++;
                    double v275 = v274;
                    unsigned int v276 = *v224++;
                    unint64_t v277 = (double)v276;
                    if (v275 == 0.0) {
                      int v278 = (double)a4;
                    }
                    else {
                      int v278 = v277;
                    }
                    *i3++ = v278;
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v30 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    int v30 = 0LL;
                  }
                  if (a2) {
                    unint64_t v54 = *(uint64_t **)(a2 + 16);
                  }
                  else {
                    unint64_t v54 = 0LL;
                  }
                  if (a5) {
                    unint64_t v78 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    unint64_t v78 = 0LL;
                  }
                  if (v7)
                  {
                    double v189 = v7;
                    do
                    {
                      unint64_t v190 = *v30++;
                      unint64_t v191 = (int)v190;
                      double v193 = *v54++;
                      uint64_t v192 = v193;
                      if (v191) {
                        int v194 = v192;
                      }
                      else {
                        int v194 = a4;
                      }
                      *v78++ = v194;
                      --v189;
                    }

                    while (v189);
                  }

                  break;
                case 1:
                  if (a1) {
                    double v31 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v31 = 0LL;
                  }
                  if (a2) {
                    double v55 = *(unint64_t **)(a2 + 16);
                  }
                  else {
                    double v55 = 0LL;
                  }
                  if (a5) {
                    double v79 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v79 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    char v198 = *v31++;
                    double v199 = (unint64_t)v198;
                    unsigned int v201 = *v55++;
                    uint64_t v200 = v201;
                    if (v199) {
                      uint64_t v202 = v200;
                    }
                    else {
                      uint64_t v202 = a4;
                    }
                    *v79++ = v202;
                  }

                  break;
                case 0:
                  uint64_t v16 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  double v40 = a2 ? *(unint64_t **)(a2 + 16) : 0LL;
                  for (i4 = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    uint64_t v112 = *v16++;
                    double v113 = v112;
                    unint64_t v115 = *v40++;
                    double v114 = v115;
                    if (v113 == 0.0) {
                      double v114 = a4;
                    }
                    *i4++ = (double)v114;
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v22 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    int v22 = 0LL;
                  }
                  if (a2) {
                    double v46 = *(_BYTE **)(a2 + 16);
                  }
                  else {
                    double v46 = 0LL;
                  }
                  if (a5) {
                    unint64_t v70 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    unint64_t v70 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v140 = *v22++;
                    double v141 = (int)v140;
                    LOBYTE(v140) = *v46;
                    v46 += 8;
                    unint64_t v142 = LOBYTE(v140);
                    if (v141) {
                      double v143 = v142;
                    }
                    else {
                      double v143 = (int)*(double *)&a4;
                    }
                    *v70++ = v143;
                  }

                  break;
                case 1:
                  if (a1) {
                    double v23 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v23 = 0LL;
                  }
                  if (a2) {
                    double v47 = *(unint64_t **)(a2 + 16);
                  }
                  else {
                    double v47 = 0LL;
                  }
                  if (a5) {
                    double v71 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v71 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    uint64_t v144 = *v23++;
                    double v145 = (unint64_t)v144;
                    uint64_t v147 = *v47++;
                    int v146 = v147;
                    if (v145) {
                      unint64_t v148 = v146;
                    }
                    else {
                      unint64_t v148 = (unint64_t)*(double *)&a4;
                    }
                    *v71++ = v148;
                  }

                  break;
                case 0:
                  double v12 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  int v36 = a2 ? *(unint64_t **)(a2 + 16) : 0LL;
                  for (i5 = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    uint64_t v92 = *v12++;
                    unsigned int v93 = v92;
                    unint64_t v94 = *v36++;
                    double v95 = (double)v94;
                    if (v93 == 0.0) {
                      unint64_t v96 = *(double *)&a4;
                    }
                    else {
                      unint64_t v96 = v95;
                    }
                    *i5++ = v96;
                  }

                  break;
              }

              break;
          }

          break;
        case 0:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    int v167 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    int v167 = 0LL;
                  }
                  if (a2) {
                    double v219 = *(double **)(a2 + 16);
                  }
                  else {
                    double v219 = 0LL;
                  }
                  if (a5) {
                    double v231 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    double v231 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    unint64_t v247 = *v167++;
                    double v248 = (int)v247;
                    double v249 = *v219++;
                    unint64_t v250 = (int)v249;
                    if (v248) {
                      double v251 = v250;
                    }
                    else {
                      double v251 = a4;
                    }
                    *v231++ = v251;
                  }

                  break;
                case 1:
                  if (a1) {
                    char v168 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    char v168 = 0LL;
                  }
                  if (a2) {
                    uint64_t v220 = *(double **)(a2 + 16);
                  }
                  else {
                    uint64_t v220 = 0LL;
                  }
                  if (a5) {
                    double v232 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v232 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v252 = *v168++;
                    unsigned int v253 = (unint64_t)v252;
                    double v254 = *v220++;
                    double v255 = (unint64_t)v254;
                    if (v253) {
                      unint64_t v256 = v255;
                    }
                    else {
                      unint64_t v256 = a4;
                    }
                    *v232++ = v256;
                  }

                  break;
                case 0:
                  double v166 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  unint64_t v218 = a2 ? *(double **)(a2 + 16) : 0LL;
                  for (i6 = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    double v242 = *v166++;
                    uint64_t v243 = v242;
                    double v244 = *v218++;
                    double v245 = v244;
                    if (v243 == 0.0) {
                      double v246 = (double)a4;
                    }
                    else {
                      double v246 = v245;
                    }
                    *i6++ = v246;
                  }

                  break;
              }

              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v26 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v26 = 0LL;
                  }
                  if (a2) {
                    unsigned int v50 = *(double **)(a2 + 16);
                  }
                  else {
                    unsigned int v50 = 0LL;
                  }
                  if (a5) {
                    unsigned int v74 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v74 = 0LL;
                  }
                  if (v7)
                  {
                    double v160 = v7;
                    do
                    {
                      unint64_t v161 = *v26++;
                      uint64_t v162 = (int)v161;
                      double v163 = *v50++;
                      int v164 = (int)v163;
                      if (v162) {
                        char v165 = v164;
                      }
                      else {
                        char v165 = a4;
                      }
                      *v74++ = v165;
                      --v160;
                    }

                    while (v160);
                  }

                  break;
                case 1:
                  if (a1) {
                    uint64_t v27 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    uint64_t v27 = 0LL;
                  }
                  if (a2) {
                    double v51 = *(double **)(a2 + 16);
                  }
                  else {
                    double v51 = 0LL;
                  }
                  if (a5) {
                    double v75 = (unint64_t *)*((void *)a5 + 2);
                  }
                  else {
                    double v75 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    uint64_t v169 = *v27++;
                    double v170 = (unint64_t)v169;
                    unint64_t v171 = *v51++;
                    unint64_t v172 = (unint64_t)v171;
                    if (v170) {
                      unint64_t v173 = v172;
                    }
                    else {
                      unint64_t v173 = a4;
                    }
                    *v75++ = v173;
                  }

                  break;
                case 0:
                  int v14 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  uint64_t v38 = a2 ? *(double **)(a2 + 16) : 0LL;
                  for (i7 = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    double v102 = *v14++;
                    double v103 = v102;
                    double v104 = *v38++;
                    double v105 = v104;
                    if (v103 == 0.0) {
                      uint64_t v106 = (double)a4;
                    }
                    else {
                      uint64_t v106 = v105;
                    }
                    *i7++ = v106;
                  }

                  break;
              }

              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1) {
                    double v18 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v18 = 0LL;
                  }
                  if (a2) {
                    int v42 = *(double **)(a2 + 16);
                  }
                  else {
                    int v42 = 0LL;
                  }
                  if (a5) {
                    unsigned int v66 = (_BYTE *)*((void *)a5 + 2);
                  }
                  else {
                    unsigned int v66 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    uint64_t v122 = *v18++;
                    uint64_t v123 = (int)v122;
                    unint64_t v124 = *v42++;
                    unint64_t v125 = v124;
                    if (!v123) {
                      unint64_t v125 = *(double *)&a4;
                    }
                    *v66++ = (int)v125;
                  }

                  break;
                case 1:
                  if (a1) {
                    double v19 = (double *)*((void *)a1 + 2);
                  }
                  else {
                    double v19 = 0LL;
                  }
                  if (a2) {
                    int v43 = *(double **)(a2 + 16);
                  }
                  else {
                    int v43 = 0LL;
                  }
                  if (a5) {
                    double v67 = (void *)*((void *)a5 + 2);
                  }
                  else {
                    double v67 = 0LL;
                  }
                  for (; v7; --v7)
                  {
                    double v126 = *v19++;
                    double v127 = (unint64_t)v126;
                    double v128 = *v43++;
                    uint64_t v129 = v128;
                    if (!v127) {
                      uint64_t v129 = *(double *)&a4;
                    }
                    *v67++ = (unint64_t)v129;
                  }

                  break;
                case 0:
                  unint64_t v10 = a1 ? (double *)*((void *)a1 + 2) : 0LL;
                  uint64_t v34 = a2 ? *(double **)(a2 + 16) : 0LL;
                  for (i8 = a5 ? (double *)*((void *)a5 + 2) : 0LL; v7; --v7)
                  {
                    unsigned int v82 = *v10++;
                    double v83 = v82;
                    double v84 = *v34++;
                    unint64_t v85 = v84;
                    if (v83 == 0.0) {
                      unint64_t v86 = *(double *)&a4;
                    }
                    else {
                      unint64_t v86 = v85;
                    }
                    *i8++ = v86;
                  }

                  break;
              }

              break;
          }

          break;
      }

      break;
  }

  return a5;
}

  -[NSLock unlock](self->_addLock, "unlock");

  return (char)v6;
}

  -[NSLock unlock](self->_addLock, "unlock");

  return (char)v6;
}

  -[NSLock unlock](self->_addLock, "unlock");

  return (char)v6;
}

  if (a5)
  {
    double v11 = (void *)objc_claimAutoreleasedReturnValue([this[2] firstObject]);
    double v12 = (void *)objc_claimAutoreleasedReturnValue([v11 options]);
    uint64_t v13 = [v12 mutableCopy];

    [v13 setObject:&__kCFBooleanTrue forKeyedSubscript:@"ReduceCDMCluster"];
    int v14 = (void *)objc_claimAutoreleasedReturnValue([this[2] firstObject]);
    [v14 setOptions:v13];
  }

  else
  {
    if (!a3 || !a4) {
      goto LABEL_14;
    }
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([this[2] firstObject]);
    int v17 = (void *)objc_claimAutoreleasedReturnValue([v16 options]);
    uint64_t v13 = [v17 mutableCopy];

    [v13 removeObjectForKey:@"ReduceCDMCluster"];
    int v14 = (void *)objc_claimAutoreleasedReturnValue([this[2] firstObject]);
    [v14 setOptions:v13];
  }

LABEL_14:
  double v18 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v46, "objectForKeyedSubscript:", @"passList"));
  double v19 = (void *)objc_claimAutoreleasedReturnValue([v18 objectAtIndexedSubscript:a3]);

  if (v19)
  {
    uint64_t v20 = 0LL;
    int v21 = *((double *)this + 394) + *((double *)this + 394);
    if (v21 <= 1.0) {
      int v22 = 10240.0;
    }
    else {
      int v22 = v21 * 10240.0;
    }
    double v23 = (unint64_t)v22;
    while (1)
    {
      if (v20 >= (unint64_t)[this[3] count])
      {
        int v15 = 1LL;
        goto LABEL_38;
      }

      double v24 = (void *)objc_claimAutoreleasedReturnValue([this[3] objectAtIndexedSubscript:v20]);
      double v25 = (void *)objc_claimAutoreleasedReturnValue([v24 name]);
      double v26 = [v25 containsString:@"APS_USC"];

      if ((v26 & 1) == 0)
      {
        if (!a3)
        {
          uint64_t v27 = this[238];
          if (v20 < ((unint64_t)((_BYTE *)this[239] - v27) >> 2)
            && (*(_DWORD *)&v27[4 * v20] & 0x20) != 0)
          {
            v50[0] = @"SWResetOnRead";
            v50[1] = @"RingBufferSizeInKB";
            v51[0] = &__kCFBooleanTrue;
            int v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", v23));
            v51[1] = v28;
            int v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v51,  v50,  2LL));
            [v24 setOptions:v29];
          }

          else
          {
            double v48 = @"RingBufferSizeInKB";
            int v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", v23));
            uint64_t v49 = v28;
            int v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v49,  &v48,  1LL));
            [v24 setOptions:v29];
          }

          int v30 = (void *)objc_claimAutoreleasedReturnValue([v24 name]);
          double v31 = [v30 containsString:@"BMPR_RDE_1"];

          double v32 = 257LL;
          if (v31) {
            double v32 = 256LL;
          }
          [v24 requestTriggers:this[v32] firstErrorIndex:0];
        }

        double v33 = (void *)objc_claimAutoreleasedReturnValue([v19 objectAtIndexedSubscript:v20]);
        if (![v33 count])
        {
          uint64_t v34 = this[249];

          double v33 = v34;
        }

        if (([v24 requestCounters:v33 firstErrorIndex:v47] & 1) == 0
          || ([v24 setEnabled:1] & 1) == 0)
        {

          break;
        }
      }

      ++v20;
    }
  }

  int v15 = 0LL;
LABEL_38:

LABEL_39:
  return v15;
}

  return v14;
}

  if (*(_DWORD *)(v6 - 56) >> 2 == 1073737833)
  {
    GetExecuteCommandsInBufferArgs((uint64_t)v11, v6, *(void *)(v5 + 16));
    uint64_t v7 = a2 - 1;
    int v8 = v12;
    a1 = v4;
    int v9 = v7;
  }

  else
  {
    uint64_t v7 = a2 - 1;
    int v9 = v7;
    int v8 = 0LL;
  }

  GTMTLReplayController_debugSubCommandStop((uint64_t)a1, v9, v8);
LABEL_11:
  ExclusiveRange = GroupBuilder_findExclusiveRange( *(_DWORD *)(*(void *)(*(void *)v4 + 112LL) + 12LL),  *(void **)(*(void *)(*(void *)v4 + 112LL) + 24LL),  v7);
  GTMTLReplayController_restoreGroup(v4, (uint64_t)ExclusiveRange, 3LL);
}

    [*(id *)(a1 + 40) setObject:v5 forKeyedSubscript:v14];
    goto LABEL_8;
  }

  unint64_t v10 = MergeDictionaries(v7, v5);
  double v11 = objc_claimAutoreleasedReturnValue(v10);
LABEL_6:
  uint64_t v13 = (void *)v11;
  [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:v14];

LABEL_8:
}

uint64_t agxps_timeseries_select_tst(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = 0LL;
  if (a1 && a4 && a5)
  {
    if (!*(_BYTE *)(a5 + 32) && (uint64_t v7 = *(void *)(a1 + 8), v7 == *(void *)(a4 + 8)) && v7 == *(void *)(a5 + 8))
    {
      sub_25CE8((int *)a1, a2, a3, a4, (int *)a5, a2, *(_DWORD *)a4);
      return a5;
    }

    else
    {
      return 0LL;
    }
  }

  return v6;
}

int *sub_25CE8(int *a1, uint64_t a2, unint64_t a3, uint64_t a4, int *a5, int a6, int a7)
{
  if (a5)
  {
    uint64_t v7 = *((void *)a5 + 1);
    if (a1) {
      goto LABEL_3;
    }
LABEL_6:
    int v8 = 0;
    if (a5) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }

  uint64_t v7 = 0LL;
  if (!a1) {
    goto LABEL_6;
  }
LABEL_3:
  int v8 = *a1;
  if (a5)
  {
LABEL_4:
    int v9 = *a5;
    goto LABEL_8;
  }

uint64_t agxps_timeseries_select_tts(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6 = 0LL;
  if (a1 && a2 && a5)
  {
    if (!*(_BYTE *)(a5 + 32) && (uint64_t v7 = *(void *)(a1 + 8), v7 == *(void *)(a2 + 8)) && v7 == *(void *)(a5 + 8))
    {
      sub_27D84((int *)a1, a2, a3, a4, (int *)a5, *(_DWORD *)a2, a3);
      return a5;
    }

    else
    {
      return 0LL;
    }
  }

  return v6;
}

int *sub_27D84(int *a1, uint64_t a2, uint64_t a3, unint64_t a4, int *a5, int a6, int a7)
{
  if (a5)
  {
    uint64_t v7 = *((void *)a5 + 1);
    if (a1) {
      goto LABEL_3;
    }
LABEL_6:
    int v8 = 0;
    if (a5) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }

  uint64_t v7 = 0LL;
  if (!a1) {
    goto LABEL_6;
  }
LABEL_3:
  int v8 = *a1;
  if (a5)
  {
LABEL_4:
    int v9 = *a5;
    goto LABEL_8;
  }

uint64_t std::deque<ProfileEvent>::~deque[abi:nn180100](void *a1)
{
  int v2 = (void **)a1[1];
  unsigned int v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unsigned int v3 = (void **)a1[2];
      int v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<ProfileEvent *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<ProfileEvent *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + sub_4B28(v1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void sub_29E90(void (**a1)(void *), void *__p)
{
  if (*a1) {
    (*a1)(__p);
  }
  else {
    operator delete[](__p);
  }
}

void sub_29EC0(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_29F44(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }

  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_29F44(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    int v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_21A8(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      double v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      int v9 = (char *)a1[1];
    }

    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0x1000uLL);
      sub_2A258(a1, &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0x1000uLL);
    sub_2A36C((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    int v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_21A8((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    uint64_t v11 = v10 >> 3;
    uint64_t v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      BOOL v14 = v13;
    }
    else {
      BOOL v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    uint64_t v17 = &v7[-8 * v16];
    uint64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      uint64_t v7 = (char *)a1[1];
    }

    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_31;
  }

  double v19 = a1[2];
  int64_t v20 = (v19 - a1[1]) >> 3;
  uint64_t v21 = a1[3];
  unint64_t v22 = v21 - *a1;
  if (v20 < v22 >> 3)
  {
    if (v21 != v19)
    {
      *(void *)&uint64_t v49 = operator new(0x1000uLL);
      std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_back(a1, &v49);
      return;
    }

    *(void *)&uint64_t v49 = operator new(0x1000uLL);
    std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_front((uint64_t)a1, &v49);
    uint64_t v39 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v40 = *v39;
    uint64_t v7 = (char *)(v39 + 1);
    unint64_t v8 = v40;
    a1[1] = v7;
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      else {
        uint64_t v41 = (uint64_t)&v6[-*a1] >> 2;
      }
      int v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,unsigned int>>>(v41);
      __int128 v30 = &v29[8 * (v41 >> 2)];
      __int128 v32 = &v29[8 * v42];
      int v43 = (uint64_t *)a1[1];
      uint64_t v6 = v30;
      unint64_t v44 = a1[2] - (void)v43;
      if (v44)
      {
        uint64_t v6 = &v30[v44 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v45 = 8 * (v44 >> 3);
        unint64_t v46 = &v29[8 * (v41 >> 2)];
        do
        {
          uint64_t v47 = *v43++;
          *(void *)unint64_t v46 = v47;
          v46 += 8;
          v45 -= 8LL;
        }

        while (v45);
      }

        uint64_t v7 = objc_opt_respondsToSelector(v4, "supportsGlobalVariableRelocationRender");
      }

      else
      {
LABEL_11:
        uint64_t v7 = objc_opt_respondsToSelector(v3, "supportsGlobalVariableRelocationRender");
      }

      if ((v7 & 1) == 0) {
        goto LABEL_15;
      }
      unint64_t v8 = [v4 supportsGlobalVariableRelocationRender];
LABEL_14:
      uint64_t v5 = v8;
LABEL_16:

      return v5;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_16;
    case 8:
      if ((objc_opt_respondsToSelector(v3, "supportsGlobalVariableRelocationCompute") & 1) == 0) {
        goto LABEL_15;
      }
      unint64_t v8 = [v4 supportsGlobalVariableRelocationCompute];
      goto LABEL_14;
    default:
      if (v6 != 16 && v6 != 32) {
        goto LABEL_16;
      }
      goto LABEL_15;
  }

LABEL_30:
      int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&__int128 v54 = sub_21A8((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&__int128 v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  sub_2A488(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_2A59C((uint64_t)&v54, v27);
  }

  int v29 = (char *)*a1;
  __int128 v30 = v54;
  __int128 v31 = v55;
  *(void *)&__int128 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  __int128 v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  __int128 v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&__int128 v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

  uint64_t v13 = v8;
LABEL_15:

LABEL_16:
  return v13;
}

    uint64_t v42 = 0LL;
    goto LABEL_31;
  }

  if (*(_DWORD *)(a4 + 256) != 4) {
    goto LABEL_30;
  }
  __int128 v31 = GTMTLSMContext_lastObject(*a1, (uint64_t)v113[15], a5);
  if (v31)
  {
    __int128 v32 = v31;
    double v93 = (void *)objc_claimAutoreleasedReturnValue([v11 renderPipelineStateForKey:a3[1]]);
    double v92 = (void *)objc_claimAutoreleasedReturnValue([v11 libraryForKey:*(void *)(v32 + 40)]);
    unint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v11 functionMap]);
    double v104 = 0LL;
    uint64_t v34 = ObtainTracingFunction(v12, v92, a4, v32, v33, (uint64_t)&v104);
    int v35 = objc_claimAutoreleasedReturnValue(v34);
    __int128 v30 = v104;

    double v90 = (void *)v35;
    if (v35)
    {
      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v11 renderPipelineDescriptorMap]);
      MTLTileRenderPipelineDescriptor = MakeMTLTileRenderPipelineDescriptor((uint64_t)v113, v36);
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(MTLTileRenderPipelineDescriptor);

      double v91 = v38;
      [v38 setTileFunction:v90];
      uint64_t v39 = ObtainTracingLinkedFunctions( (const GTMTLSMContext *)a1,  v11,  (GTMTLReplayAccessTracking *)a4,  (uint64_t)v113,  a5);
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
      [v38 setLinkedFunctions:v40];

      if (v93) {
        objc_msgSend(v38, "setMaxTotalThreadsPerThreadgroup:", objc_msgSend(v93, "maxTotalThreadsPerThreadgroup"));
      }
      if (SupportsGlobalRelocation(v12, a4))
      {
        double v103 = v30;
        uint64_t v13 = [v12 newRenderPipelineStateWithTileDescriptor:v38 options:v94 reflection:0 error:&v103];
        uint64_t v41 = v103;
      }

      else
      {
        double v101 = v30;
        double v102 = 0LL;
        uint64_t v13 = [v12 newRenderPipelineStateWithTileDescriptor:v38 options:v94 | 1 reflection:&v102 error:&v101];
        double v69 = v102;
        uint64_t v41 = v101;

        unint64_t v70 = (void *)objc_claimAutoreleasedReturnValue([v69 tileBindings]);
        double v71 = TraceBufferBindingIndex(v70, 4u);

        double v105 = a3[1];
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned long long,unsigned int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned int>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>( a4,  v105,  &v105)
        + 6) = v71;
        __int128 v30 = v69;
      }

      uint64_t v42 = v41;
      unsigned int v65 = v92;
LABEL_65:

      if (v13)
      {
        unsigned int v74 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::piecewise_construct_t const&<>>( (uint64_t *)(a4 + 40),  v118[0],  v118);
        objc_storeStrong(v74 + 3, v13);
        if (v112 == 2)
        {
          if (*(_DWORD *)(a4 + 256) == 4)
          {
            double v76 = v113;
            double v77 = 4LL;
            goto LABEL_86;
          }
        }

        else if (v112 == 1)
        {
          double v75 = *(_DWORD *)(a4 + 256);
          if (v75 == 2)
          {
            double v76 = (uint64_t **)v114;
            double v77 = 2LL;
            goto LABEL_86;
          }

          if (v75 == 1)
          {
            double v76 = (uint64_t **)v115;
            double v77 = 1LL;
LABEL_86:
            CreateRenderFunctionHandles((GTMTLReplayAccessTracking *)a4, a3[1], (uint64_t)v76, v77);
          }
        }

      if (++v13 >= nelts) {
        goto LABEL_31;
      }
    }

    uint64_t v21 = *(id *)(a2 + 8);
    GetVisibleFunctionTableState((uint64_t)v68, v9, v14, v64, pa);
    unint64_t v22 = objc_alloc_init(&OBJC_CLASS___MTLVisibleFunctionTableDescriptor);
    -[MTLVisibleFunctionTableDescriptor setFunctionCount:](v22, "setFunctionCount:", **(void **)(v14 + 104));
    -[MTLVisibleFunctionTableDescriptor setResourceIndex:]( v22,  "setResourceIndex:",  *(void *)(*(void *)(v14 + 104) + 8LL));
    -[MTLVisibleFunctionTableDescriptor setForceResourceIndex:](v22, "setForceResourceIndex:", 1LL);
    uint64_t v23 = *(void *)(v14 + 128);
    if (v23)
    {
      uint64_t v24 = *(unsigned __int8 *)(v14 + 168);
      Object = GTMTLSMContext_getObject(**(void **)(v9 + 40), v23, v64);
      if (Object)
      {
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v21 renderPipelineStateForKey:Object[1]]);
        uint64_t v27 = v26;
        if (v26)
        {
          uint64_t v28 = [v26 newVisibleFunctionTableWithDescriptor:v22 stage:v24];
          int v29 = v28;
          if (v28) {
            goto LABEL_24;
          }
          goto LABEL_25;
        }
      }
    }

    else
    {
      __int128 v30 = *(void *)(v14 + 120);
      if (v30)
      {
        __int128 v31 = GTMTLSMContext_getObject(**(void **)(v9 + 40), v30, v64);
        if (v31)
        {
          __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v21 computePipelineStateForKey:v31[1]]);
          uint64_t v27 = v32;
          if (v32)
          {
            uint64_t v28 = [v32 newVisibleFunctionTableWithDescriptor:v22];
            int v29 = v28;
            if (v28) {
LABEL_24:
            }
              SetupRegularVisibleFunctionTable(v28, *(uint64_t **)(v9 + 40), v21, (uint64_t)v68, v64);
LABEL_25:

LABEL_27:
            if (v29)
            {
              v68[0] = *(void *)(v14 + 8);
              unint64_t v33 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::piecewise_construct_t const&<>>( v60,  v68[0],  v68);
              objc_storeStrong(v33 + 3, v29);
              [*(id *)(a2 + 8) setVisibleFunctionTable:v29 forKey:*(void *)(v14 + 8)];
            }

            nelts = v10->nelts;
            goto LABEL_30;
          }
        }
      }
    }

    int v29 = 0LL;
    goto LABEL_27;
  }

      goto LABEL_39;
    }

  *((void *)&v42[1] + 1) = v19;
  int v43 = v16;
  unint64_t v33 = *(void *)(a3 + 384);
  *(void *)(a3 + 384) = v33 + 120;
  if (a4)
  {
    uint64_t v34 = v42[0];
    *(_OWORD *)(v33 + 64) = v41;
    *(_OWORD *)(v33 + 80) = v34;
    *(_OWORD *)(v33 + 96) = v42[1];
    *(void *)(v33 + 112) = v43;
    int v35 = v38;
    *(_OWORD *)unint64_t v33 = v37;
    *(_OWORD *)(v33 + sub_4B28(v1 + 16) = v35;
    unint64_t result = (int16x4_t)v39;
    uint64_t v36 = v40;
    *(_OWORD *)(v33 + 32) = v39;
    *(_OWORD *)(v33 + 48) = v36;
  }

  return result;
}

void sub_2A20C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2A258(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      double v19 = (char *)sub_21A8(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8LL;
        }

        while (v24);
      }

      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }

      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }

  *(void *)uint64_t v6 = *a2;
  a1[2] += 8LL;
}

void sub_2A36C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(_BYTE **)(a1 + 24);
    uint64_t v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1LL;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_21A8(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8LL];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8LL;
        }

        while (v19);
      }

      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + sub_4B28(v1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }

    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }

      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + sub_4B28(v1 + 16) = &v4[8 * v11];
    }
  }

  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }

  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8LL;
}

void sub_2A488(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_21A8(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8LL;
        }

        while (v22);
      }

      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }

      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }

  *(void *)uint64_t v4 = *a2;
  a1[2] += 8LL;
}

void sub_2A59C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(_BYTE **)(a1 + 16);
    uint64_t v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1LL;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_21A8(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8LL];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8LL;
        }

        while (v18);
      }

      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + sub_4B28(v1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }

    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }

      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + sub_4B28(v1 + 16) = &v4[8 * v10];
    }
  }

  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }

  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8LL;
}

uint64_t sub_2A6B4(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

uint64_t sub_2A720(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "DeltaSeconds");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_2A75C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_d10d40e0cc19cf68a523b252faa985cd5777f1eab3cbe768098ca805cc7216ef");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_2A798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_0c33d520d54b5d5f84a71398d6ae71152426874088128bd3c18ad78df5f6d8b7");
  agxps_timeseries_get_length((uint64_t)v7);
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_d10d40e0cc19cf68a523b252faa985cd5777f1eab3cbe768098ca805cc7216ef");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  uint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  return v10;
}

uint64_t sub_2A82C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_da2d5f5fd43e7edda6d5635752a29f09d285cf47c2ecd0a1b83b1ba3eddcef55");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_2A868( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v7 = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  unint64_t v9 = v8;
  uint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_448897b2730c90c177c3e468d3780d048b4ef0c6feb09887550eb9e5e71373c0");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

int *sub_2A900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_e319ade855d6fde34a28ecc2a2266f86d6d99b5e413e08b4884629844476c571");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_83b4492da25346ffc6c1820a633ef533874dda8e2939056928ffd92384775e38");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  uint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_a3104b8f0a1ab0931761cf851c8ac5ce3212eff30deff24a1f9a5ef67453adca");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_57000(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_bd9f890bd3bdbe08af5851fb3dfa228a36a5e54b72c7d74d5985af75bafa6217");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  unint64_t v16 = (int *)sub_57000(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  return v16;
}

int *sub_2AA2C(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *))
{
  int v5 = (**a3)(a3, "NSEC_PER_SEC");
  unint64_t v7 = v6;
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PrimitivesSubmitted");
  unint64_t v9 = sub_D670(v5, v7, v8);
  uint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_792173079ffc5aacc2cea817d8812166e71ea17309e294d24ee2cc88d2fb1e8e");
  int v11 = (**a3)(a3, "TIME_SCALE");
  uint64_t v13 = sub_E1D0(v10, v11, v12);
  return sub_ED24(v9, v13);
}

int *sub_2AAF4(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *))
{
  int v5 = (**a3)(a3, "NSEC_PER_SEC");
  unint64_t v7 = v6;
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PSInvocation");
  unint64_t v9 = sub_D670(v5, v7, v8);
  uint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_792173079ffc5aacc2cea817d8812166e71ea17309e294d24ee2cc88d2fb1e8e");
  int v11 = (**a3)(a3, "TIME_SCALE");
  uint64_t v13 = sub_E1D0(v10, v11, v12);
  return sub_ED24(v9, v13);
}

int *sub_2ABBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PSInvocation");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "VSInvocation");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  uint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_tt(v7, v8, v10, 1);
  return v10;
}

int *sub_2AC50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PSInvocation");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PrimitivesSubmitted");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  uint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_tt(v7, v8, v10, 1);
  return v10;
}

int *sub_2ACE4( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_f6c3f9b835930ff834f081ab2dfaacbdfbe451f6f2100abcdecec1c3c7999e0b");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  unint64_t v10 = v9;
  int v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_ts(v7, (int)a3, v10, v11, 1);
  return v11;
}

uint64_t sub_2AD88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_427543bc9ae51e5f3520629f8bbe54e3a18d14de616f0c418cf7190a55cd7d9c");
  agxps_timeseries_get_length(v2);
  return v2;
}

void *sub_2ADC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "VerticesSubmitted");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "VSInvocation");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  uint64_t v11 = sub_9ABC();
  unint64_t v13 = v12;
  uint64_t v14 = sub_57000(a5, 0, length);
  uint64_t v15 = sub_57000(a5, 0, length);
  agxps_timeseries_compare_ts(3LL, v10, v11, v13, v14, 1LL);
  agxps_timeseries_select_tts((uint64_t)v14, (uint64_t)v10, v11, v13, (uint64_t)v15);
  return v15;
}

void *sub_2AED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "VerticesSubmitted");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "VSInvocation");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  LODWORD(v7) = sub_9ABC();
  unint64_t v12 = v11;
  unint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v10, (int)v7, v12, v13, 1);
  uint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "VerticesSubmitted");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  unint64_t v16 = (int *)sub_57000(a5, 0, v15);
  agxps_timeseries_div_tt(v13, v14, v16, 1);
  uint64_t v17 = sub_9ABC();
  unint64_t v19 = v18;
  uint64_t v20 = sub_57000(a5, 0, v15);
  uint64_t v21 = sub_57000(a5, 0, v15);
  agxps_timeseries_compare_ts(3LL, v16, v17, v19, v20, 1LL);
  agxps_timeseries_select_tts((uint64_t)v20, (uint64_t)v16, v17, v19, (uint64_t)v21);
  return v21;
}

uint64_t sub_2B078(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_2d3c257f33af88b8488658fb5b6a86f64cb02169b680e1250d3f37d373a4197f");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_2B0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PrimitivesRasterized");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_9ABC();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "InputPrimitivesPostClipping");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_9ABC();
  unint64_t v17 = v16;
  unint64_t v18 = sub_57000(a5, 0, v14);
  unint64_t v19 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_compare_ts(3LL, v13, v15, v17, v18, 1LL);
  agxps_timeseries_select_tts((uint64_t)v18, v13, v15, v17, (uint64_t)v19);
  uint64_t v20 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_2B210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_29091329a1ff8f86d51ab9b84da709de18ba8aa1d94003a519a0663db7add4a1");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_6169af48fcc4f2c5d036243de6acd153bd0308c644bd7e4afc67499ad1aef2c7");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  return v10;
}

int *sub_2B2A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "ClippedPrimitives");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_9ABC();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PreCullPrimitiveCount");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  uint64_t v15 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

uint64_t sub_2B384(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_b466c606c4b7e98fcde3adad24a292c946f1f1130670918262ebf9f660e0173c");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_2B3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_9f4066c82340989d0ea535230ddae2a44d311837c37d0eb67d122b2c592e661f");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_2B3FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_01038280d9d6c505432733b12946359b7c301c69b32369f4b921b6fa206c2211");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_2B438(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_1b4a415305c5e09fd037b34e5c34c099f08044e780d5c06d813ce80cf354dafd");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_2B474(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_d1bc81f56d6b804a852adb705f1ef63549265bdfc317d5a3af98aaee0d8f8ef9");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_2B4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PreCullPrimitiveCount");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "ClippedPrimitives");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  uint64_t v11 = sub_9ABC();
  unint64_t v13 = v12;
  uint64_t v14 = sub_57000(a5, 0, length);
  uint64_t v15 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_compare_ts(3LL, v10, v11, v13, v14, 1LL);
  agxps_timeseries_select_tts((uint64_t)v14, (uint64_t)v10, v11, v13, (uint64_t)v15);
  unint64_t v16 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "TrianglesCreatedByClipper");
  uint64_t v17 = agxps_timeseries_get_length((uint64_t)v16);
  unint64_t v18 = (int *)sub_57000(a5, 0, v17);
  agxps_timeseries_add_tt(v15, v16, v18, 1);
  return v18;
}

void *sub_2B610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "CulledPrimitives");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "GuardBandCullPrims");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  uint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "BackFaceCullPrims");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_57000(a5, 0, v12);
  agxps_timeseries_sub_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "OffscreenCullPrims");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  unint64_t v16 = (int *)sub_57000(a5, 0, v15);
  agxps_timeseries_sub_tt(v13, v14, v16, 1);
  uint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "SmallTriangleClippedPrims");
  uint64_t v18 = agxps_timeseries_get_length((uint64_t)v17);
  unint64_t v19 = (int *)sub_57000(a5, 0, v18);
  agxps_timeseries_sub_tt(v16, v17, v19, 1);
  uint64_t v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "BackFaceClippedPrims");
  uint64_t v21 = agxps_timeseries_get_length((uint64_t)v20);
  uint64_t v22 = (int *)sub_57000(a5, 0, v21);
  agxps_timeseries_sub_tt(v19, v20, v22, 1);
  uint64_t v23 = sub_9ABC();
  unint64_t v25 = v24;
  uint64_t v26 = sub_57000(a5, 0, v21);
  uint64_t v27 = sub_57000(a5, 0, v21);
  agxps_timeseries_compare_ts(3LL, v22, v23, v25, v26, 1LL);
  agxps_timeseries_select_tts((uint64_t)v26, (uint64_t)v22, v23, v25, (uint64_t)v27);
  return v27;
}

int *sub_2B840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "BackFaceCullPrims");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_9ABC();
  unint64_t v11 = v10;
  uint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "InputPrimitivesPostClipping");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_9ABC();
  unint64_t v17 = v16;
  uint64_t v18 = sub_57000(a5, 0, v14);
  unint64_t v19 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_compare_ts(3LL, v13, v15, v17, v18, 1LL);
  agxps_timeseries_select_tts((uint64_t)v18, v13, v15, v17, (uint64_t)v19);
  uint64_t v20 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_2B99C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "SmallTriangleCullPrims");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_9ABC();
  unint64_t v11 = v10;
  uint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "InputPrimitivesPostClipping");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_9ABC();
  unint64_t v17 = v16;
  uint64_t v18 = sub_57000(a5, 0, v14);
  unint64_t v19 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_compare_ts(3LL, v13, v15, v17, v18, 1LL);
  agxps_timeseries_select_tts((uint64_t)v18, v13, v15, v17, (uint64_t)v19);
  uint64_t v20 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_2BAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_4b1f5c87264cd5cd23bb5eb652d21194fb7f49f9b1d70433f180b31a7a22dcab");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_4bb4ab3f3e64c565175f4fbe0f75df41b12c3bc2b4242b99cd4a330773d475d4");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_d7b92925765e8d20627989863f1b950ec5d6dffbd815c4c100730b3a7e7801fd");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_57000(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  return v13;
}

int *sub_2BBDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "GuardBandCullPrims");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_9ABC();
  unint64_t v11 = v10;
  uint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "InputPrimitivesPostClipping");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_9ABC();
  unint64_t v17 = v16;
  uint64_t v18 = sub_57000(a5, 0, v14);
  unint64_t v19 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_compare_ts(3LL, v13, v15, v17, v18, 1LL);
  agxps_timeseries_select_tts((uint64_t)v18, v13, v15, v17, (uint64_t)v19);
  uint64_t v20 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_2BD38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_0f9aab25f0863ace3de6f9832139250c806045a7ac0d6f8cf06c682c282005f1");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_dbe3d527893309548e6eebdee711a622433c869e148727cf18e31ae63cf116d3");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_3bd7a95222e8315bf62e84ba01a511e64bd7aa7487bed322a8ac96e4c4e628e1");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_57000(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  return v13;
}

int *sub_2BE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "OffscreenCullPrims");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_9ABC();
  unint64_t v11 = v10;
  uint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "InputPrimitivesPostClipping");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_9ABC();
  unint64_t v17 = v16;
  uint64_t v18 = sub_57000(a5, 0, v14);
  unint64_t v19 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_compare_ts(3LL, v13, v15, v17, v18, 1LL);
  agxps_timeseries_select_tts((uint64_t)v18, v13, v15, v17, (uint64_t)v19);
  uint64_t v20 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

void *sub_2BF78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "InputPrimitivesPostClipping");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PrimitivesRasterized");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  uint64_t v11 = sub_9ABC();
  unint64_t v13 = v12;
  uint64_t v14 = sub_57000(a5, 0, length);
  uint64_t v15 = sub_57000(a5, 0, length);
  agxps_timeseries_compare_ts(3LL, v10, v11, v13, v14, 1LL);
  agxps_timeseries_select_tts((uint64_t)v14, (uint64_t)v10, v11, v13, (uint64_t)v15);
  return v15;
}

int *sub_2C088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "CulledPrimitives");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_9ABC();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "InputPrimitivesPostClipping");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_9ABC();
  unint64_t v17 = v16;
  uint64_t v18 = sub_57000(a5, 0, v14);
  unint64_t v19 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_compare_ts(3LL, v13, v15, v17, v18, 1LL);
  agxps_timeseries_select_tts((uint64_t)v18, v13, v15, v17, (uint64_t)v19);
  uint64_t v20 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_2C1E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_7cef4e481233623472ea3e1f6b4131fabb20f247f7e5eae173dfd693aa60d0ff");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_9177fce9b3d9e2a64a816854b3084588e4673c25a1c069c53b5909a77fb853eb");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  uint64_t v11 = sub_9ABC();
  unint64_t v13 = v12;
  uint64_t v14 = sub_57000(a5, 0, length);
  uint64_t v15 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_compare_ts(3LL, v10, v11, v13, v14, 1LL);
  agxps_timeseries_select_tts((uint64_t)v14, (uint64_t)v10, v11, v13, (uint64_t)v15);
  LODWORD(v11) = sub_9ABC();
  unint64_t v17 = v16;
  uint64_t v18 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v15, v11, v17, v18, 1);
  unint64_t v19 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "CA64702D3D4494B38F08BCB24ABD879988FB0FFE1D929F859EC9AED1C1C160E1");
  uint64_t v20 = agxps_timeseries_get_length((uint64_t)v19);
  uint64_t v21 = (int *)sub_57000(a5, 0, v20);
  agxps_timeseries_mul_tt(v8, v19, v21, 1);
  uint64_t v22 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "2EAC2CEBA509E12A31090A56155DDCE41EAEE148F6832947CA8A512BDCFA0DF9");
  uint64_t v23 = agxps_timeseries_get_length((uint64_t)v22);
  unint64_t v24 = (int *)sub_57000(a5, 0, v23);
  agxps_timeseries_mul_tt(v21, v22, v24, 1);
  unint64_t v25 = (int *)sub_57000(a5, 0, v23);
  agxps_timeseries_add_tt(v18, v24, v25, 1);
  return v25;
}

int *sub_2C400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_24be79c8d8f70844505a88372d5027b6f8afd064ccbab97ac3ffe36dd5a0ef2b");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_9177fce9b3d9e2a64a816854b3084588e4673c25a1c069c53b5909a77fb853eb");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  uint64_t v11 = sub_9ABC();
  unint64_t v13 = v12;
  uint64_t v14 = sub_57000(a5, 0, length);
  uint64_t v15 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_compare_ts(3LL, v10, v11, v13, v14, 1LL);
  agxps_timeseries_select_tts((uint64_t)v14, (uint64_t)v10, v11, v13, (uint64_t)v15);
  LODWORD(v11) = sub_9ABC();
  unint64_t v17 = v16;
  uint64_t v18 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v15, v11, v17, v18, 1);
  unint64_t v19 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "CA64702D3D4494B38F08BCB24ABD879988FB0FFE1D929F859EC9AED1C1C160E1");
  uint64_t v20 = agxps_timeseries_get_length((uint64_t)v19);
  uint64_t v21 = (int *)sub_57000(a5, 0, v20);
  agxps_timeseries_mul_tt(v8, v19, v21, 1);
  uint64_t v22 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "2EAC2CEBA509E12A31090A56155DDCE41EAEE148F6832947CA8A512BDCFA0DF9");
  uint64_t v23 = agxps_timeseries_get_length((uint64_t)v22);
  unint64_t v24 = (int *)sub_57000(a5, 0, v23);
  agxps_timeseries_mul_tt(v21, v22, v24, 1);
  unint64_t v25 = (int *)sub_57000(a5, 0, v23);
  agxps_timeseries_add_tt(v18, v24, v25, 1);
  return v25;
}

void *sub_2C61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "FragmentsRasterized");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PreZPassCount");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  uint64_t v11 = sub_9ABC();
  unint64_t v13 = v12;
  uint64_t v14 = sub_57000(a5, 0, length);
  uint64_t v15 = sub_57000(a5, 0, length);
  agxps_timeseries_compare_ts(3LL, v10, v11, v13, v14, 1LL);
  agxps_timeseries_select_tts((uint64_t)v14, (uint64_t)v10, v11, v13, (uint64_t)v15);
  return v15;
}

int *sub_2C72C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PreZFailCount");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_9ABC();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  unint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "FragmentsRasterized");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  uint64_t v15 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_2C80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PreZPassCount");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_9ABC();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  unint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "FragmentsRasterized");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  uint64_t v15 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_2C8EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PSInvocation");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_eda5bce70befa39e7c6029505c0269211092c220048a502fd8fa2fe30895465b");
  agxps_timeseries_get_length((uint64_t)v8);
  int v9 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "CA64702D3D4494B38F08BCB24ABD879988FB0FFE1D929F859EC9AED1C1C160E1");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v9);
  unint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_tt(v8, v9, v11, 1);
  unint64_t v12 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "2EAC2CEBA509E12A31090A56155DDCE41EAEE148F6832947CA8A512BDCFA0DF9");
  uint64_t v13 = agxps_timeseries_get_length((uint64_t)v12);
  uint64_t v14 = (int *)sub_57000(a5, 0, v13);
  agxps_timeseries_mul_tt(v11, v12, v14, 1);
  uint64_t v15 = (int *)sub_57000(a5, 0, v13);
  agxps_timeseries_div_tt(v7, v14, v15, 1);
  return v15;
}

int *sub_2CA1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "CA64702D3D4494B38F08BCB24ABD879988FB0FFE1D929F859EC9AED1C1C160E1");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "2EAC2CEBA509E12A31090A56155DDCE41EAEE148F6832947CA8A512BDCFA0DF9");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_tt(v7, v8, v10, 1);
  return v10;
}

void *sub_2CAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_ae304fc8bce5708ffef30935687e442d6bea78f814055a5fe6e3380013d7e507");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_9ABC();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_f46268d72ed52af703d1b490e193d71605d5c756930dfe9385a5433c9b4f264f");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  int v15 = sub_9ABC();
  unint64_t v17 = v16;
  uint64_t v18 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_mul_ts(v13, v15, v17, v18, 1);
  unint64_t v19 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_sub_tt(v12, v18, v19, 1);
  uint64_t v20 = sub_9ABC();
  unint64_t v22 = v21;
  uint64_t v23 = sub_57000(a5, 0, v14);
  unint64_t v24 = sub_57000(a5, 0, v14);
  agxps_timeseries_compare_ts(3LL, v19, v20, v22, v23, 1LL);
  agxps_timeseries_select_tts((uint64_t)v23, (uint64_t)v19, v20, v22, (uint64_t)v24);
  return v24;
}

int *sub_2CC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "TextureSamples");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "VSInvocation");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_tt(v7, v8, v10, 1);
  return v10;
}

int *sub_2CCDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "TextureSamples");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PSInvocation");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_tt(v7, v8, v10, 1);
  return v10;
}

int *sub_2CD70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "TextureSamples");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "CSInvocation");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_tt(v7, v8, v10, 1);
  return v10;
}

int *sub_2CE04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_a7e72038471917bb4125254ae57103538d43fd9d4a233b06a1f248ca3bfc11ac");
  agxps_timeseries_get_length((uint64_t)v7);
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_f76e110e78dbd810843354c733691fcfcd8a5624a46d34e887797178f903ab95");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  uint64_t v14 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v7, v13, v14, 1);
  LODWORD(v7) = sub_9ABC();
  unint64_t v16 = v15;
  unint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_ce8d2278e7b086459bd4cccfe0b5c79b13ff287bf60e12cb62113d7478856b46");
  uint64_t v18 = agxps_timeseries_get_length((uint64_t)v17);
  unint64_t v19 = (int *)sub_57000(a5, 0, v18);
  agxps_timeseries_mul_st((int)v7, v16, v17, v19, 1);
  uint64_t v20 = (int *)sub_57000(a5, 0, v18);
  agxps_timeseries_add_tt(v14, v19, v20, 1);
  LODWORD(v14) = sub_9ABC();
  unint64_t v22 = v21;
  uint64_t v23 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_88a70ef450a839c73c44e1ebf268aa13bf92a5179d6ff3ab45ac0006fa8544cd");
  uint64_t v24 = agxps_timeseries_get_length((uint64_t)v23);
  unint64_t v25 = (int *)sub_57000(a5, 0, v24);
  agxps_timeseries_mul_st((int)v14, v22, v23, v25, 1);
  uint64_t v26 = (int *)sub_57000(a5, 0, v24);
  agxps_timeseries_add_tt(v20, v25, v26, 1);
  LODWORD(v20) = sub_9ABC();
  unint64_t v28 = v27;
  int v29 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_851e2825825612ac09e7b26350dc1b5b05998c3aab3198f4a2921768a84dfbbb");
  uint64_t v30 = agxps_timeseries_get_length((uint64_t)v29);
  __int128 v31 = (int *)sub_57000(a5, 0, v30);
  agxps_timeseries_mul_st((int)v20, v28, v29, v31, 1);
  __int128 v32 = (int *)sub_57000(a5, 0, v30);
  agxps_timeseries_add_tt(v26, v31, v32, 1);
  LODWORD(v26) = sub_9ABC();
  unint64_t v34 = v33;
  int v35 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_b48ed13a188e430f6a5bd26a74642ceabd518b8d290fe8322ebc00a7671bef9d");
  uint64_t v36 = agxps_timeseries_get_length((uint64_t)v35);
  double v37 = (int *)sub_57000(a5, 0, v36);
  agxps_timeseries_mul_st((int)v26, v34, v35, v37, 1);
  uint64_t v38 = (int *)sub_57000(a5, 0, v36);
  agxps_timeseries_add_tt(v32, v37, v38, 1);
  LODWORD(v32) = sub_9ABC();
  unint64_t v40 = v39;
  uint64_t v41 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_3b22188697e2c64b322decfb2df85c2cd7a7f264312a00737b10231811737d35");
  uint64_t v42 = agxps_timeseries_get_length((uint64_t)v41);
  int v43 = (int *)sub_57000(a5, 0, v42);
  agxps_timeseries_mul_st((int)v32, v40, v41, v43, 1);
  unint64_t v44 = (int *)sub_57000(a5, 0, v42);
  agxps_timeseries_add_tt(v38, v43, v44, 1);
  LODWORD(v38) = sub_9ABC();
  unint64_t v46 = v45;
  uint64_t v47 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_14a170fde3d2efeda34d72f062b69852d6b927feb012e65ae602e9c41c3565ba");
  uint64_t v48 = agxps_timeseries_get_length((uint64_t)v47);
  uint64_t v49 = (int *)sub_57000(a5, 0, v48);
  agxps_timeseries_mul_st((int)v38, v46, v47, v49, 1);
  uint64_t v50 = (int *)sub_57000(a5, 0, v48);
  agxps_timeseries_add_tt(v44, v49, v50, 1);
  LODWORD(v44) = sub_9ABC();
  unint64_t v52 = v51;
  unint64_t v53 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_57bf025a3b6e220efeee5fb9ecd97ad51c6adcccb96ca62426cc096e38eb9aa0");
  uint64_t v54 = agxps_timeseries_get_length((uint64_t)v53);
  __int128 v55 = (int *)sub_57000(a5, 0, v54);
  agxps_timeseries_mul_st((int)v44, v52, v53, v55, 1);
  double v56 = (int *)sub_57000(a5, 0, v54);
  agxps_timeseries_add_tt(v50, v55, v56, 1);
  LODWORD(v50) = sub_9ABC();
  unint64_t v58 = v57;
  double v59 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_d86114b5bc1b6abf8638dd305669a55d8b394e5709b8e33e585d73c184d18943");
  uint64_t v60 = agxps_timeseries_get_length((uint64_t)v59);
  int v61 = (int *)sub_57000(a5, 0, v60);
  agxps_timeseries_mul_st((int)v50, v58, v59, v61, 1);
  unint64_t v62 = (int *)sub_57000(a5, 0, v60);
  agxps_timeseries_add_tt(v56, v61, v62, 1);
  double v63 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_838e506beb7a1376c2242cd5738a6016661bdfccb78c105f3ce081c89735bc9d");
  uint64_t v64 = agxps_timeseries_get_length((uint64_t)v63);
  unsigned int v65 = (int *)sub_57000(a5, 0, v64);
  agxps_timeseries_div_tt(v62, v63, v65, 1);
  return v65;
}

int *sub_2D370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_ae304fc8bce5708ffef30935687e442d6bea78f814055a5fe6e3380013d7e507");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_2D404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_0927651557827fd5468721c2ee04ff7924ebb553f9e0acc6b504a791aefdf935");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_2D498(uint64_t a1, uint64_t a2)
{
  int v3 = sub_9ABC();
  unint64_t v5 = v4;
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_0927651557827fd5468721c2ee04ff7924ebb553f9e0acc6b504a791aefdf935");
  unint64_t v7 = sub_D670(v3, v5, v6);
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_d856a24dfeb33f1dad922753efc16618fdf12ef3544115f2f5fffd93affab8d5");
  unint64_t v9 = sub_B09C(v7, v8);
  unint64_t v10 = sub_ED24(v7, v9);
  int v11 = sub_9ABC();
  return sub_13EB0(v10, v11, v12);
}

int *sub_2D54C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_f46268d72ed52af703d1b490e193d71605d5c756930dfe9385a5433c9b4f264f");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  int v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_2D5DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_838e506beb7a1376c2242cd5738a6016661bdfccb78c105f3ce081c89735bc9d");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  int v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_2D66C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_838e506beb7a1376c2242cd5738a6016661bdfccb78c105f3ce081c89735bc9d");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_9ABC();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "TextureQuads");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  unint64_t v15 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_2D74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_b7afe579643b48d1495eb528fa5a78db4c0a065f75636f39f24f9cf4578912cf");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_2D7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_b7afe579643b48d1495eb528fa5a78db4c0a065f75636f39f24f9cf4578912cf");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_9ABC();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "TextureQuads");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  unint64_t v15 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_2D8BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_443fdcc2095b4dca2f7e327fb6af5914523d670164b66d05316044de82474149");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_2D94C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_443fdcc2095b4dca2f7e327fb6af5914523d670164b66d05316044de82474149");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_9ABC();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "TextureQuads");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  unint64_t v15 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_2DA2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_cd1ed48f521bc3dff5675e8c48183da96f416902d6a6a198f8c83a2a6f8d0d11");
  agxps_timeseries_get_length((uint64_t)v7);
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_bd02d5aeed8b2a086512b59511b59d2675b598b2801965ba46b391cd64096154");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_3bcb3dea436f55c613020a7937271b8cbb6acaf6a14172ba5175c91c9ab5567e");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_57000(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_865162aa257660a732d84c9c100db8137273b0f5909e5210071fdd0e89742d21");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  unint64_t v16 = (int *)sub_57000(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  unint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_c11db3f19bb1da1294fb244d920ecbf0b1b99d56ff50e75c19bcb9e5bb1f57b3");
  uint64_t v18 = agxps_timeseries_get_length((uint64_t)v17);
  unint64_t v19 = (int *)sub_57000(a5, 0, v18);
  agxps_timeseries_add_tt(v16, v17, v19, 1);
  uint64_t v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_04594fddf571ddbd959568fdd6bb83d8daff2e345e898fb624563a1c3c9d0a4c");
  uint64_t v21 = agxps_timeseries_get_length((uint64_t)v20);
  unint64_t v22 = (int *)sub_57000(a5, 0, v21);
  agxps_timeseries_add_tt(v19, v20, v22, 1);
  uint64_t v23 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_711e0179cf22b718fc893a151a0933029ea2007379bfce51a69fdf0184a5485b");
  uint64_t v24 = agxps_timeseries_get_length((uint64_t)v23);
  unint64_t v25 = (int *)sub_57000(a5, 0, v24);
  agxps_timeseries_add_tt(v22, v23, v25, 1);
  uint64_t v26 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_4cb7b2192985d1bd9a9cb239446047edd976fbe2ff69438a86f59e6b813558a8");
  uint64_t v27 = agxps_timeseries_get_length((uint64_t)v26);
  unint64_t v28 = (int *)sub_57000(a5, 0, v27);
  agxps_timeseries_add_tt(v25, v26, v28, 1);
  int v29 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_4724ff18a7e7c06ae181692b6cadbed734b1c843a05c05daa26071f1af4c6a87");
  uint64_t v30 = agxps_timeseries_get_length((uint64_t)v29);
  __int128 v31 = (int *)sub_57000(a5, 0, v30);
  agxps_timeseries_add_tt(v28, v29, v31, 1);
  __int128 v32 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_f8d2effb45f8b4aacaf1029c53b986b48c36db82b2d599c587ab6c8617309cf8");
  uint64_t v33 = agxps_timeseries_get_length((uint64_t)v32);
  unint64_t v34 = (int *)sub_57000(a5, 0, v33);
  agxps_timeseries_add_tt(v31, v32, v34, 1);
  int v35 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_eac71bc8f3eb0ca60d7616bcb6c0f838417f6ab5859c211564897b1ff7c4199c");
  uint64_t v36 = agxps_timeseries_get_length((uint64_t)v35);
  double v37 = (int *)sub_57000(a5, 0, v36);
  agxps_timeseries_add_tt(v34, v35, v37, 1);
  uint64_t v38 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_51775add461074af32e489ceb1be9957e57adffb8c08954e7cbc8b97503f57aa");
  uint64_t v39 = agxps_timeseries_get_length((uint64_t)v38);
  unint64_t v40 = (int *)sub_57000(a5, 0, v39);
  agxps_timeseries_add_tt(v37, v38, v40, 1);
  uint64_t v41 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_611e8d6895be97ec85f10254d0a182eba64be144b3828d81e58296d054c806f4");
  uint64_t v42 = agxps_timeseries_get_length((uint64_t)v41);
  int v43 = (int *)sub_57000(a5, 0, v42);
  agxps_timeseries_add_tt(v40, v41, v43, 1);
  unint64_t v44 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_29b22d9d81e5faf744ffe7f2ef578e3373cddcc7920cbcc40a2adbe852681fc9");
  uint64_t v45 = agxps_timeseries_get_length((uint64_t)v44);
  unint64_t v46 = (int *)sub_57000(a5, 0, v45);
  agxps_timeseries_add_tt(v43, v44, v46, 1);
  uint64_t v47 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_5a7e43ba4541824bbaa881559bdcdd5ef8408e3ba5e9a4a5b8c8263cf2154427");
  uint64_t v48 = agxps_timeseries_get_length((uint64_t)v47);
  uint64_t v49 = (int *)sub_57000(a5, 0, v48);
  agxps_timeseries_add_tt(v46, v47, v49, 1);
  uint64_t v50 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_0596eeb85056cf898443332ee6ea8bb881ee935a2e48e123c1bea937d7628835");
  uint64_t v51 = agxps_timeseries_get_length((uint64_t)v50);
  unint64_t v52 = (int *)sub_57000(a5, 0, v51);
  agxps_timeseries_add_tt(v49, v50, v52, 1);
  unint64_t v53 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_99a23e5520fca1ce9e447dcb8f465fb3421277f600bd4619d437c73762113efb");
  uint64_t v54 = agxps_timeseries_get_length((uint64_t)v53);
  __int128 v55 = (int *)sub_57000(a5, 0, v54);
  agxps_timeseries_add_tt(v52, v53, v55, 1);
  double v56 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_f20734f8b1c3edc9cd0770ab4136f9c10a91972eb00a5b6d09d709ec96e491fa");
  uint64_t v57 = agxps_timeseries_get_length((uint64_t)v56);
  unint64_t v58 = (int *)sub_57000(a5, 0, v57);
  agxps_timeseries_add_tt(v55, v56, v58, 1);
  double v59 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_1368d41a242c0d8551e43e68e72de446f5393d47c57e5e80d30a559200ed596c");
  uint64_t v60 = agxps_timeseries_get_length((uint64_t)v59);
  int v61 = (int *)sub_57000(a5, 0, v60);
  agxps_timeseries_add_tt(v58, v59, v61, 1);
  unint64_t v62 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_c5fcc1133689a4133a1de53ded83dc65a5521aa193be40ab64c4189f3a9ae9cf");
  uint64_t v63 = agxps_timeseries_get_length((uint64_t)v62);
  uint64_t v64 = (int *)sub_57000(a5, 0, v63);
  agxps_timeseries_add_tt(v61, v62, v64, 1);
  unsigned int v65 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_e1ad3266ba1f3521d10f57bd0d29721449ef2ac9bbaaafd3d3ae59b1627126db");
  uint64_t v66 = agxps_timeseries_get_length((uint64_t)v65);
  double v67 = (int *)sub_57000(a5, 0, v66);
  agxps_timeseries_add_tt(v64, v65, v67, 1);
  double v68 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_3ebb8c7a6a99602c5cd417ea8af19176f3ceb108288c6f00f490ae550ac5c2c6");
  uint64_t v69 = agxps_timeseries_get_length((uint64_t)v68);
  unint64_t v70 = (int *)sub_57000(a5, 0, v69);
  agxps_timeseries_add_tt(v67, v68, v70, 1);
  double v71 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_459564729d0b5db736b153577373a56625347fe30183800281802f300feee3ba");
  uint64_t v72 = agxps_timeseries_get_length((uint64_t)v71);
  int v73 = (int *)sub_57000(a5, 0, v72);
  agxps_timeseries_add_tt(v70, v71, v73, 1);
  unsigned int v74 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_c077cee4bb409aecdf1974aadf9abcb056681bc42c4fc15f30170bf80d1f6e4c");
  uint64_t v75 = agxps_timeseries_get_length((uint64_t)v74);
  double v76 = (int *)sub_57000(a5, 0, v75);
  agxps_timeseries_add_tt(v73, v74, v76, 1);
  double v77 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_fa01d5329f611805a99f4699e796d485f8f993df07816be0c8b15ac5e39951ea");
  uint64_t v78 = agxps_timeseries_get_length((uint64_t)v77);
  double v79 = (int *)sub_57000(a5, 0, v78);
  agxps_timeseries_add_tt(v76, v77, v79, 1);
  double v80 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_0b4c966855c4b581f07ec85a1491cb234d31a838aaf82adc9427d3b2497bd31c");
  uint64_t v81 = agxps_timeseries_get_length((uint64_t)v80);
  double v82 = (int *)sub_57000(a5, 0, v81);
  agxps_timeseries_add_tt(v79, v80, v82, 1);
  double v83 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_3a4bf2592dcfa5bd877f621933e8c97461f8774aaf1561c64cc4e90f0cafeb4e");
  uint64_t v84 = agxps_timeseries_get_length((uint64_t)v83);
  double v85 = (int *)sub_57000(a5, 0, v84);
  agxps_timeseries_add_tt(v82, v83, v85, 1);
  double v86 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_89051b6760c2a53381edfd5c68aef41e769dba64437b5fc30417a810f55e9296");
  uint64_t v87 = agxps_timeseries_get_length((uint64_t)v86);
  uint64_t v88 = (int *)sub_57000(a5, 0, v87);
  agxps_timeseries_add_tt(v85, v86, v88, 1);
  uint64_t v89 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_4e088158f4d8adbbe88420686b1cb8700f71b4a42277c8b25c3f00bb97008361");
  uint64_t v90 = agxps_timeseries_get_length((uint64_t)v89);
  double v91 = (int *)sub_57000(a5, 0, v90);
  agxps_timeseries_add_tt(v88, v89, v91, 1);
  double v92 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_0427b329a9bf6f3b297e589bdebcd2e8a222101e677f95061e2fbe6fbe4ffa6f");
  uint64_t v93 = agxps_timeseries_get_length((uint64_t)v92);
  unint64_t v94 = (int *)sub_57000(a5, 0, v93);
  agxps_timeseries_add_tt(v91, v92, v94, 1);
  double v95 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_da358d8f72edfef7369baa73d3f5e11cfbd49f69949f6c79da120cd408287c04");
  uint64_t v96 = agxps_timeseries_get_length((uint64_t)v95);
  uint64_t v97 = (int *)sub_57000(a5, 0, v96);
  agxps_timeseries_add_tt(v94, v95, v97, 1);
  LODWORD(v95) = sub_9ABC();
  unint64_t v99 = v98;
  unint64_t v100 = (int *)sub_57000(a5, 0, v96);
  agxps_timeseries_mul_ts(v97, (int)v95, v99, v100, 1);
  return v100;
}

void *sub_2E330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "CompressedSamples");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_9ABC();
  unint64_t v11 = v10;
  uint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "TextureQuads");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  int v15 = sub_9ABC();
  unint64_t v17 = v16;
  uint64_t v18 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_mul_ts(v13, v15, v17, v18, 1);
  uint64_t v19 = sub_9ABC();
  unint64_t v21 = v20;
  unint64_t v22 = sub_57000(a5, 0, v14);
  uint64_t v23 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_compare_ts(3LL, v18, v19, v21, v22, 1LL);
  agxps_timeseries_select_tts((uint64_t)v22, (uint64_t)v18, v19, v21, (uint64_t)v23);
  uint64_t v24 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v23, v24, 1);
  uint64_t v25 = sub_9ABC();
  unint64_t v27 = v26;
  unint64_t v28 = sub_57000(a5, 0, v14);
  int v29 = sub_57000(a5, 0, v14);
  agxps_timeseries_compare_ts(2LL, v24, v25, v27, v28, 1LL);
  agxps_timeseries_select_tts((uint64_t)v28, (uint64_t)v24, v25, v27, (uint64_t)v29);
  return v29;
}

int *sub_2E544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_7cdc2c85e61923202c5936567bb447b8929b55e3fadd72277ff0796a99a7bdb4");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_2E5D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "LosslessCompressedSamples");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_9ABC();
  unint64_t v11 = v10;
  uint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "TextureQuads");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  int v15 = sub_9ABC();
  unint64_t v17 = v16;
  uint64_t v18 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_mul_ts(v13, v15, v17, v18, 1);
  uint64_t v19 = sub_9ABC();
  unint64_t v21 = v20;
  unint64_t v22 = sub_57000(a5, 0, v14);
  uint64_t v23 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_compare_ts(3LL, v18, v19, v21, v22, 1LL);
  agxps_timeseries_select_tts((uint64_t)v22, (uint64_t)v18, v19, v21, (uint64_t)v23);
  uint64_t v24 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v23, v24, 1);
  return v24;
}

int *sub_2E76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_4e06778c6dbd312e12fd320be6a28037bd94e2cc19c8687aba8981ec52f7d19e");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_2E7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "LossyCompressedSamples");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_9ABC();
  unint64_t v11 = v10;
  uint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "TextureQuads");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  int v15 = sub_9ABC();
  unint64_t v17 = v16;
  uint64_t v18 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_mul_ts(v13, v15, v17, v18, 1);
  uint64_t v19 = sub_9ABC();
  unint64_t v21 = v20;
  unint64_t v22 = sub_57000(a5, 0, v14);
  uint64_t v23 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_compare_ts(3LL, v18, v19, v21, v22, 1LL);
  agxps_timeseries_select_tts((uint64_t)v22, (uint64_t)v18, v19, v21, (uint64_t)v23);
  uint64_t v24 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v23, v24, 1);
  return v24;
}

void *sub_2E994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "TextureSamples");
  agxps_timeseries_get_length((uint64_t)v7);
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "CompressedSamples");
  agxps_timeseries_get_length((uint64_t)v8);
  int v9 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "LosslessCompressedSamples");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v9);
  unint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v8, v9, v11, 1);
  uint64_t v12 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "LossyCompressedSamples");
  uint64_t v13 = agxps_timeseries_get_length((uint64_t)v12);
  uint64_t v14 = (int *)sub_57000(a5, 0, v13);
  agxps_timeseries_add_tt(v11, v12, v14, 1);
  int v15 = (int *)sub_57000(a5, 0, v13);
  agxps_timeseries_sub_tt(v7, v14, v15, 1);
  uint64_t v16 = sub_9ABC();
  unint64_t v18 = v17;
  uint64_t v19 = sub_57000(a5, 0, v13);
  unint64_t v20 = sub_57000(a5, 0, v13);
  agxps_timeseries_compare_ts(3LL, v15, v16, v18, v19, 1LL);
  agxps_timeseries_select_tts((uint64_t)v19, (uint64_t)v15, v16, v18, (uint64_t)v20);
  return v20;
}

void *sub_2EB34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "UncompressedSamples");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "TextureQuads");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  LODWORD(v9) = sub_9ABC();
  unint64_t v16 = v15;
  unint64_t v17 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_mul_ts(v13, v9, v16, v17, 1);
  uint64_t v18 = sub_9ABC();
  unint64_t v20 = v19;
  unint64_t v21 = sub_57000(a5, 0, v14);
  unint64_t v22 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_compare_ts(3LL, v17, v18, v20, v21, 1LL);
  agxps_timeseries_select_tts((uint64_t)v21, (uint64_t)v17, v18, v20, (uint64_t)v22);
  uint64_t v23 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v22, v23, 1);
  uint64_t v24 = sub_9ABC();
  unint64_t v26 = v25;
  unint64_t v27 = sub_57000(a5, 0, v14);
  unint64_t v28 = sub_57000(a5, 0, v14);
  agxps_timeseries_compare_ts(2LL, v23, v24, v26, v27, 1LL);
  agxps_timeseries_select_tts((uint64_t)v27, (uint64_t)v23, v24, v26, (uint64_t)v28);
  return v28;
}

int *sub_2ED44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_f406f88bdd312ec0455d0943c388de77e53b86cf0109624b028c3aa596ec3bf4");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_2EDD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_170b3221860fc0fbaa56212aaec28265bbcde52553eab4dcc253c612393c0d02");
  agxps_timeseries_get_length((uint64_t)v7);
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_b1c17891cd73c9759b561e8166a6d51c7a422df70de3a45524ee1d8edf3d8edc");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  LODWORD(v8) = sub_9ABC();
  unint64_t v12 = v11;
  uint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v10, (int)v8, v12, v13, 1);
  return v13;
}

void *sub_2EEB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PixelsUnbiasedWrittenToMemory");
  agxps_timeseries_get_length(v7);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "TexturePixelsWrittenToMemory");
  uint64_t length = agxps_timeseries_get_length(v8);
  unint64_t v10 = sub_57000(a5, 0, length);
  unint64_t v11 = sub_57000(a5, 0, length);
  double v12 = agxps_timeseries_compare_tt(3LL, v7, v8, v10, 1LL);
  agxps_timeseries_select_ttt((uint64_t)v10, v7, v8, (uint64_t)v11, v12);
  return v11;
}

void *sub_2EF80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "PixelsUnbiasedWrittenToMemory");
  agxps_timeseries_get_length((uint64_t)v7);
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "TexturePixelsWrittenToMemory");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  uint64_t v11 = sub_9ABC();
  unint64_t v13 = v12;
  uint64_t v14 = sub_57000(a5, 0, length);
  unint64_t v15 = sub_57000(a5, 0, length);
  agxps_timeseries_compare_ts(3LL, v10, v11, v13, v14, 1LL);
  agxps_timeseries_select_tts((uint64_t)v14, (uint64_t)v10, v11, v13, (uint64_t)v15);
  return v15;
}

int *sub_2F090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_17ce0d5869b1ca5ede98d597eab698bc9a77c1ce783528f1a91438acb0c9fd08");
  agxps_timeseries_get_length((uint64_t)v7);
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_71974a1faa4bcd23016a415a1cc6479308dab6778adbf2bab1cc0b8bf7de9982");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  LODWORD(v8) = sub_9ABC();
  unint64_t v12 = v11;
  unint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v10, (int)v8, v12, v13, 1);
  return v13;
}

int *sub_2F16C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_84bc1f813b908b1a82a17fdf171643fd8ce9017f20844aa9fd9dd7f157bfeb00");
  agxps_timeseries_get_length((uint64_t)v7);
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_766330b34b32220fe711ebf12a170751a84406ef29a5cd982cef665be1b22d5d");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_f68e35eeb2bee048cb6bf9642f11773f9a1cac3f48f8bd73dac5c2f707b94e9c");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_57000(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_4d4fe81719dc0200f2d42c34feddce82198b6d23f8bbe3ec0bd4187bf4a30249");
  agxps_timeseries_get_length((uint64_t)v14);
  unint64_t v15 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_0f5ce867725c9affb1528c58134532b18ac7e8860047f7e3b81c9f367bf50f04");
  uint64_t v16 = agxps_timeseries_get_length((uint64_t)v15);
  unint64_t v17 = (int *)sub_57000(a5, 0, v16);
  agxps_timeseries_add_tt(v14, v15, v17, 1);
  uint64_t v18 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_5f3f0a1e85f83b10e10c873cae3db6a0be598f56f0c208e4d8bf3a4ea9cf40fa");
  uint64_t v19 = agxps_timeseries_get_length((uint64_t)v18);
  unint64_t v20 = (int *)sub_57000(a5, 0, v19);
  agxps_timeseries_add_tt(v17, v18, v20, 1);
  unint64_t v21 = (int *)sub_57000(a5, 0, v19);
  agxps_timeseries_add_tt(v13, v20, v21, 1);
  LODWORD(v13) = sub_9ABC();
  unint64_t v23 = v22;
  uint64_t v24 = (int *)sub_57000(a5, 0, v19);
  agxps_timeseries_mul_ts(v21, (int)v13, v23, v24, 1);
  return v24;
}

int *sub_2F368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_5139262f4aa51a2a266c84eae7b1d2a0524e10ec154ddf35e1e1bc529071258a");
  agxps_timeseries_get_length((uint64_t)v7);
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_a126f888ccf5d17092b398420351fb81f0c5462f5e15a2bf22f6914208f68de2");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_b2f6334df9fdac01bda9fa44b127edadeb640750d6824c0b27a248d10aba3638");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_57000(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_346c9e2c1dd65c22e4dcdd48f80c681551c075280b02796f700601c4530e6f4f");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  uint64_t v16 = (int *)sub_57000(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  unint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_ba686a2bead0a853932fbb1feeb87f6b3cabbfa17f2e647b7d6f92105f398c4d");
  uint64_t v18 = agxps_timeseries_get_length((uint64_t)v17);
  uint64_t v19 = (int *)sub_57000(a5, 0, v18);
  agxps_timeseries_add_tt(v16, v17, v19, 1);
  unint64_t v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_5d5cf41f6d7d32235e797b13857ad1e9dfa3b04d83470ee5997d55d83e8107aa");
  uint64_t v21 = agxps_timeseries_get_length((uint64_t)v20);
  unint64_t v22 = (int *)sub_57000(a5, 0, v21);
  agxps_timeseries_add_tt(v19, v20, v22, 1);
  return v22;
}

int *sub_2F524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_5139262f4aa51a2a266c84eae7b1d2a0524e10ec154ddf35e1e1bc529071258a");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "TotalSBUsedInLossyCompression");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_9ABC();
  unint64_t v17 = v16;
  uint64_t v18 = sub_57000(a5, 0, v14);
  uint64_t v19 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_compare_ts(3LL, v13, v15, v17, v18, 1LL);
  agxps_timeseries_select_tts((uint64_t)v18, v13, v15, v17, (uint64_t)v19);
  unint64_t v20 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_2F67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_a126f888ccf5d17092b398420351fb81f0c5462f5e15a2bf22f6914208f68de2");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "TotalSBUsedInLossyCompression");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_9ABC();
  unint64_t v17 = v16;
  uint64_t v18 = sub_57000(a5, 0, v14);
  uint64_t v19 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_compare_ts(3LL, v13, v15, v17, v18, 1LL);
  agxps_timeseries_select_tts((uint64_t)v18, v13, v15, v17, (uint64_t)v19);
  unint64_t v20 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_2F7D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_b2f6334df9fdac01bda9fa44b127edadeb640750d6824c0b27a248d10aba3638");
  agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_346c9e2c1dd65c22e4dcdd48f80c681551c075280b02796f700601c4530e6f4f");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_ba686a2bead0a853932fbb1feeb87f6b3cabbfa17f2e647b7d6f92105f398c4d");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  unint64_t v16 = (int *)sub_57000(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  unint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_5d5cf41f6d7d32235e797b13857ad1e9dfa3b04d83470ee5997d55d83e8107aa");
  uint64_t v18 = agxps_timeseries_get_length((uint64_t)v17);
  uint64_t v19 = (int *)sub_57000(a5, 0, v18);
  agxps_timeseries_add_tt(v16, v17, v19, 1);
  unint64_t v20 = (int *)sub_57000(a5, 0, v18);
  agxps_timeseries_mul_st(v7, v9, v19, v20, 1);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "TotalSBUsedInLossyCompression");
  uint64_t v22 = agxps_timeseries_get_length(v21);
  uint64_t v23 = sub_9ABC();
  unint64_t v25 = v24;
  unint64_t v26 = sub_57000(a5, 0, v22);
  unint64_t v27 = (int *)sub_57000(a5, 0, v22);
  agxps_timeseries_compare_ts(3LL, v21, v23, v25, v26, 1LL);
  agxps_timeseries_select_tts((uint64_t)v26, v21, v23, v25, (uint64_t)v27);
  unint64_t v28 = (int *)sub_57000(a5, 0, v22);
  agxps_timeseries_div_tt(v20, v27, v28, 1);
  return v28;
}

int *sub_2FA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v39 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_b2f6334df9fdac01bda9fa44b127edadeb640750d6824c0b27a248d10aba3638");
  agxps_timeseries_get_length((uint64_t)v39);
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_346c9e2c1dd65c22e4dcdd48f80c681551c075280b02796f700601c4530e6f4f");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v39, v12, v13, 1);
  LODWORD(length) = sub_9ABC();
  unint64_t v15 = v14;
  unint64_t v16 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_ba686a2bead0a853932fbb1feeb87f6b3cabbfa17f2e647b7d6f92105f398c4d");
  uint64_t v17 = agxps_timeseries_get_length((uint64_t)v16);
  uint64_t v18 = (int *)sub_57000(a5, 0, v17);
  agxps_timeseries_mul_st(length, v15, v16, v18, 1);
  uint64_t v19 = (int *)sub_57000(a5, 0, v17);
  agxps_timeseries_add_tt(v13, v18, v19, 1);
  LODWORD(v13) = sub_9ABC();
  unint64_t v21 = v20;
  uint64_t v22 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_5d5cf41f6d7d32235e797b13857ad1e9dfa3b04d83470ee5997d55d83e8107aa");
  uint64_t v23 = agxps_timeseries_get_length((uint64_t)v22);
  unint64_t v24 = (int *)sub_57000(a5, 0, v23);
  agxps_timeseries_mul_st((int)v13, v21, v22, v24, 1);
  unint64_t v25 = (int *)sub_57000(a5, 0, v23);
  agxps_timeseries_add_tt(v19, v24, v25, 1);
  unint64_t v26 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_a126f888ccf5d17092b398420351fb81f0c5462f5e15a2bf22f6914208f68de2");
  uint64_t v27 = agxps_timeseries_get_length((uint64_t)v26);
  unint64_t v28 = (int *)sub_57000(a5, 0, v27);
  agxps_timeseries_add_tt(v26, v39, v28, 1);
  int v29 = (int *)sub_57000(a5, 0, v27);
  agxps_timeseries_add_tt(v28, v10, v29, 1);
  uint64_t v30 = (int *)sub_57000(a5, 0, v27);
  agxps_timeseries_add_tt(v29, v16, v30, 1);
  __int128 v31 = (int *)sub_57000(a5, 0, v27);
  agxps_timeseries_add_tt(v30, v22, v31, 1);
  uint64_t v32 = sub_9ABC();
  unint64_t v34 = v33;
  int v35 = sub_57000(a5, 0, v27);
  uint64_t v36 = (int *)sub_57000(a5, 0, v27);
  agxps_timeseries_compare_ts(3LL, v31, v32, v34, v35, 1LL);
  agxps_timeseries_select_tts((uint64_t)v35, (uint64_t)v31, v32, v34, (uint64_t)v36);
  double v37 = (int *)sub_57000(a5, 0, v27);
  agxps_timeseries_div_tt(v25, v36, v37, 1);
  return v37;
}

int *sub_2FD6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "TexturePixelsWrittenToMemory");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PixelsWrittenToMemory");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_9ABC();
  unint64_t v17 = v16;
  uint64_t v18 = sub_57000(a5, 0, v14);
  uint64_t v19 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_compare_ts(3LL, v13, v15, v17, v18, 1LL);
  agxps_timeseries_select_tts((uint64_t)v18, v13, v15, v17, (uint64_t)v19);
  unint64_t v20 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_2FEC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "AttachmentPixelsWrittenToMemory");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PixelsWrittenToMemory");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_9ABC();
  unint64_t v17 = v16;
  uint64_t v18 = sub_57000(a5, 0, v14);
  uint64_t v19 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_compare_ts(3LL, v13, v15, v17, v18, 1LL);
  agxps_timeseries_select_tts((uint64_t)v18, v13, v15, v17, (uint64_t)v19);
  unint64_t v20 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_3001C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "CompressedPixelsWrittenToMemory");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PixelsWrittenToMemory");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_9ABC();
  unint64_t v17 = v16;
  uint64_t v18 = sub_57000(a5, 0, v14);
  uint64_t v19 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_compare_ts(3LL, v13, v15, v17, v18, 1LL);
  agxps_timeseries_select_tts((uint64_t)v18, v13, v15, v17, (uint64_t)v19);
  unint64_t v20 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_30174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "LossyCompressedPixelsWrittenToMemory");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PixelsWrittenToMemory");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_9ABC();
  unint64_t v17 = v16;
  uint64_t v18 = sub_57000(a5, 0, v14);
  uint64_t v19 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_compare_ts(3LL, v13, v15, v17, v18, 1LL);
  agxps_timeseries_select_tts((uint64_t)v18, v13, v15, v17, (uint64_t)v19);
  unint64_t v20 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_302CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_66eafb3ddb63687a1eef3817f25c70385aeb51f41d76b5cbdc5aa69a556bb76c");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_3035C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_788f9865b6b4897849bedfd577403fe30b882c1c6c2afcdbf2a9f8a0d41e741b");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_303EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "MSAA2XResolvedPixels");
  agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PixelsWrittenToMemory");
  uint64_t length = agxps_timeseries_get_length(v11);
  uint64_t v13 = sub_9ABC();
  unint64_t v15 = v14;
  unint64_t v16 = sub_57000(a5, 0, length);
  unint64_t v17 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_compare_ts(3LL, v11, v13, v15, v16, 1LL);
  agxps_timeseries_select_tts((uint64_t)v16, v11, v13, v15, (uint64_t)v17);
  uint64_t v18 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_tt(v10, v17, v18, 1);
  uint64_t v19 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v18, v19, 1);
  return v19;
}

int *sub_3054C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "MSAA4XResolvedPixels");
  agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PixelsWrittenToMemory");
  uint64_t length = agxps_timeseries_get_length(v11);
  uint64_t v13 = sub_9ABC();
  unint64_t v15 = v14;
  unint64_t v16 = sub_57000(a5, 0, length);
  unint64_t v17 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_compare_ts(3LL, v11, v13, v15, v16, 1LL);
  agxps_timeseries_select_tts((uint64_t)v16, v11, v13, v15, (uint64_t)v17);
  uint64_t v18 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_tt(v10, v17, v18, 1);
  uint64_t v19 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v18, v19, 1);
  return v19;
}

int *sub_306AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_92e4033c73762edd1ce117ae25bceecf0ae126712bf861ca430c8049f845b9ff");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_37b62c762d1c23168d0c25f1bc6033c6ee17922f5e31eab8d0cd946eb40ff5f3");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  uint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_984b0993354750161fe0018879ef125f6e3d98a5cbd800796dba5fb611df1651");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_57000(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  unint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_6bb7d08e271a527bc1e586380563ec0de8de7e58c81e7b417ac1ecb39790c288");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  unint64_t v16 = (int *)sub_57000(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  LODWORD(v14) = sub_9ABC();
  unint64_t v18 = v17;
  uint64_t v19 = (int *)sub_57000(a5, 0, v15);
  agxps_timeseries_mul_ts(v16, (int)v14, v18, v19, 1);
  return v19;
}

int *sub_30818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_92e4033c73762edd1ce117ae25bceecf0ae126712bf861ca430c8049f845b9ff");
  agxps_timeseries_get_length((uint64_t)v10);
  int v11 = sub_9ABC();
  unint64_t v13 = v12;
  unint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_37b62c762d1c23168d0c25f1bc6033c6ee17922f5e31eab8d0cd946eb40ff5f3");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v14);
  unint64_t v16 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v11, v13, v14, v16, 1);
  unint64_t v17 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v10, v16, v17, 1);
  LODWORD(sub_64DC(v11, v10) = sub_9ABC();
  unint64_t v19 = v18;
  unint64_t v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_984b0993354750161fe0018879ef125f6e3d98a5cbd800796dba5fb611df1651");
  uint64_t v21 = agxps_timeseries_get_length((uint64_t)v20);
  uint64_t v22 = (int *)sub_57000(a5, 0, v21);
  agxps_timeseries_mul_st((int)v10, v19, v20, v22, 1);
  uint64_t v23 = (int *)sub_57000(a5, 0, v21);
  agxps_timeseries_add_tt(v17, v22, v23, 1);
  LODWORD(v17) = sub_9ABC();
  unint64_t v25 = v24;
  unint64_t v26 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_6bb7d08e271a527bc1e586380563ec0de8de7e58c81e7b417ac1ecb39790c288");
  uint64_t v27 = agxps_timeseries_get_length((uint64_t)v26);
  unint64_t v28 = (int *)sub_57000(a5, 0, v27);
  agxps_timeseries_mul_st((int)v17, v25, v26, v28, 1);
  int v29 = (int *)sub_57000(a5, 0, v27);
  agxps_timeseries_add_tt(v23, v28, v29, 1);
  uint64_t v30 = (int *)sub_57000(a5, 0, v27);
  agxps_timeseries_mul_st(v7, v9, v29, v30, 1);
  uint64_t v31 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "TotalResolvedPixels");
  uint64_t v32 = agxps_timeseries_get_length(v31);
  uint64_t v33 = sub_9ABC();
  unint64_t v35 = v34;
  uint64_t v36 = sub_57000(a5, 0, v32);
  double v37 = (int *)sub_57000(a5, 0, v32);
  agxps_timeseries_compare_ts(3LL, v31, v33, v35, v36, 1LL);
  agxps_timeseries_select_tts((uint64_t)v36, v31, v33, v35, (uint64_t)v37);
  uint64_t v38 = (int *)sub_57000(a5, 0, v32);
  agxps_timeseries_div_tt(v30, v37, v38, 1);
  return v38;
}

int *sub_30B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_867226b78b975653eb9f9d171ce53bedbf3edbc1ee1af8aa960cb9db4ec6490f");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_9ABC();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  unint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_df20e560276a18cd9b97f03f47abf0d8bf719014920913d325c6ad5d4ab98453");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  uint64_t v15 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_30BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_f430991e42f778aeda210861eca9b8cef241898007339644eff469d83e5a6c9d");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_9ABC();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  unint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_3459b3e3f2f8a441719d05aae2161786eded99c72d7215bb6797f836d46a3426");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  uint64_t v15 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_add_tt(v7, v13, v15, 1);
  unint64_t v16 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v15, v16, 1);
  return v16;
}

int *sub_30CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_f539a056fbd45e39d61b9d34af0ea1a305dd8af6f005b5aa29488f2c966e7f21");
  agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_c420303ee3c2ea941491fa0a071ec1553251898524fce318c3635bc711160395");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v13, v14, 1);
  return v14;
}

int *sub_30DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_c89f25b2a31116ea6540fc6b89b623da7d4cbc9b2349ce7dbe4423a1395da60a");
  agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_7eba0657c66c2437c8d6952fb82117b9399d920ea84fa32c5bdc9d1dee49e290");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v13, v14, 1);
  return v14;
}

int *sub_30EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_3c6dba64fd85b35b8b8339f1d322943087d45cbb9b6689c587fd76259587a9d8");
  agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_ac73411a986e90adcd0a1181ace1f2684e4a900be931343385b93f58de650db4");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_sub_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_9153a820a764c5c32c10432035db3a4194ee169ef665e8fc7297bd5592b39e62");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  unint64_t v16 = (int *)sub_57000(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  unint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_2fc529a9d4ee232bf862a8eb577d573bb5b4a0b9bd581d966832ceb22e3be4cf");
  uint64_t v18 = agxps_timeseries_get_length((uint64_t)v17);
  unint64_t v19 = (int *)sub_57000(a5, 0, v18);
  agxps_timeseries_sub_tt(v16, v17, v19, 1);
  uint64_t v20 = sub_9ABC();
  unint64_t v22 = v21;
  uint64_t v23 = sub_57000(a5, 0, v18);
  unint64_t v24 = (int *)sub_57000(a5, 0, v18);
  agxps_timeseries_compare_ts(3LL, v19, v20, v22, v23, 1LL);
  agxps_timeseries_select_tts((uint64_t)v23, (uint64_t)v19, v20, v22, (uint64_t)v24);
  unint64_t v25 = (int *)sub_57000(a5, 0, v18);
  agxps_timeseries_mul_st(v7, v9, v24, v25, 1);
  return v25;
}

int *sub_310B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_3c6dba64fd85b35b8b8339f1d322943087d45cbb9b6689c587fd76259587a9d8");
  agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_9153a820a764c5c32c10432035db3a4194ee169ef665e8fc7297bd5592b39e62");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v13, v14, 1);
  return v14;
}

int *sub_311A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_ef52925e500884ba6b276e576ae78b97fd8448dfadeba596c2202b5202e246c3");
  agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_43fe12d20dfe3a9ea7b303773d624405e026e20b2c550822f2587997d2557f13");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_0d5290b07753d1bbf223d0700438322c356bc6d3f028bf47df09e81f21da75c6");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  unint64_t v16 = (int *)sub_57000(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  unint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_3329a7bf90f5b81c24f86beffadfc66daefb2b2f45b08cdb822f931dac7370d6");
  uint64_t v18 = agxps_timeseries_get_length((uint64_t)v17);
  unint64_t v19 = (int *)sub_57000(a5, 0, v18);
  agxps_timeseries_add_tt(v16, v17, v19, 1);
  uint64_t v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_3c6dba64fd85b35b8b8339f1d322943087d45cbb9b6689c587fd76259587a9d8");
  agxps_timeseries_get_length((uint64_t)v20);
  unint64_t v21 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_ac73411a986e90adcd0a1181ace1f2684e4a900be931343385b93f58de650db4");
  uint64_t v22 = agxps_timeseries_get_length((uint64_t)v21);
  uint64_t v23 = (int *)sub_57000(a5, 0, v22);
  agxps_timeseries_sub_tt(v20, v21, v23, 1);
  unint64_t v24 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_9153a820a764c5c32c10432035db3a4194ee169ef665e8fc7297bd5592b39e62");
  uint64_t v25 = agxps_timeseries_get_length((uint64_t)v24);
  unint64_t v26 = (int *)sub_57000(a5, 0, v25);
  agxps_timeseries_add_tt(v23, v24, v26, 1);
  uint64_t v27 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_2fc529a9d4ee232bf862a8eb577d573bb5b4a0b9bd581d966832ceb22e3be4cf");
  uint64_t v28 = agxps_timeseries_get_length((uint64_t)v27);
  int v29 = (int *)sub_57000(a5, 0, v28);
  agxps_timeseries_sub_tt(v26, v27, v29, 1);
  uint64_t v30 = sub_9ABC();
  unint64_t v32 = v31;
  uint64_t v33 = sub_57000(a5, 0, v28);
  unint64_t v34 = (int *)sub_57000(a5, 0, v28);
  agxps_timeseries_compare_ts(3LL, v29, v30, v32, v33, 1LL);
  agxps_timeseries_select_tts((uint64_t)v33, (uint64_t)v29, v30, v32, (uint64_t)v34);
  unint64_t v35 = (int *)sub_57000(a5, 0, v28);
  agxps_timeseries_add_tt(v19, v34, v35, 1);
  uint64_t v36 = (int *)sub_57000(a5, 0, v28);
  agxps_timeseries_mul_st(v7, v9, v35, v36, 1);
  return v36;
}

int *sub_314B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_d7a23701e11432625d46f02ff35668e60e55a7706704976facfe5fbeea3b1936");
  agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_88723e1253a5c3264f69b1fbf3a6b7f3ab67bbd9fe97afeedb649146b3b8b043");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_56a63abf333e0f9f06f1a00635d4125c3910b3c00286e4fb3652687402916c8a");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  unint64_t v16 = (int *)sub_57000(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  unint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_3c6dba64fd85b35b8b8339f1d322943087d45cbb9b6689c587fd76259587a9d8");
  uint64_t v18 = agxps_timeseries_get_length((uint64_t)v17);
  unint64_t v19 = (int *)sub_57000(a5, 0, v18);
  agxps_timeseries_add_tt(v16, v17, v19, 1);
  uint64_t v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_9153a820a764c5c32c10432035db3a4194ee169ef665e8fc7297bd5592b39e62");
  uint64_t v21 = agxps_timeseries_get_length((uint64_t)v20);
  uint64_t v22 = (int *)sub_57000(a5, 0, v21);
  agxps_timeseries_add_tt(v19, v20, v22, 1);
  uint64_t v23 = (int *)sub_57000(a5, 0, v21);
  agxps_timeseries_mul_st(v7, v9, v22, v23, 1);
  return v23;
}

int *sub_31670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_df20e560276a18cd9b97f03f47abf0d8bf719014920913d325c6ad5d4ab98453");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

void *sub_31704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v29 = v8;
  int v30 = v7;
  int v9 = sub_9ABC();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_f406f88bdd312ec0455d0943c388de77e53b86cf0109624b028c3aa596ec3bf4");
  agxps_timeseries_get_length((uint64_t)v12);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_9da983fb76d81017bb17c1307769e9cdaa3547cc33eadcf7f389043343c66b31");
  uint64_t length = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_9ABC();
  unint64_t v17 = v16;
  uint64_t v18 = sub_57000(a5, 0, length);
  unint64_t v19 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_compare_ts(3LL, v13, v15, v17, v18, 1LL);
  agxps_timeseries_select_tts((uint64_t)v18, v13, v15, v17, (uint64_t)v19);
  uint64_t v20 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  uint64_t v21 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_sub_st(v9, v11, v20, v21, 1);
  uint64_t v22 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v30, v29, v21, v22, 1);
  uint64_t v23 = sub_9ABC();
  unint64_t v25 = v24;
  unint64_t v26 = sub_57000(a5, 0, length);
  uint64_t v27 = sub_57000(a5, 0, length);
  agxps_timeseries_compare_ts(3LL, v22, v23, v25, v26, 1LL);
  agxps_timeseries_select_tts((uint64_t)v26, (uint64_t)v22, v23, v25, (uint64_t)v27);
  return v27;
}

void *sub_31910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v33 = v8;
  int v34 = v7;
  int v9 = sub_9ABC();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "TextureAccesses");
  agxps_timeseries_get_length((uint64_t)v12);
  int v13 = sub_9ABC();
  unint64_t v15 = v14;
  unint64_t v16 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "TextureQuads");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v16);
  uint64_t v18 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v13, v15, v16, v18, 1);
  uint64_t v19 = sub_9ABC();
  unint64_t v21 = v20;
  uint64_t v22 = sub_57000(a5, 0, length);
  uint64_t v23 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_compare_ts(3LL, v18, v19, v21, v22, 1LL);
  agxps_timeseries_select_tts((uint64_t)v22, (uint64_t)v18, v19, v21, (uint64_t)v23);
  unint64_t v24 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_tt(v12, v23, v24, 1);
  unint64_t v25 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_sub_st(v9, v11, v24, v25, 1);
  unint64_t v26 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v34, v33, v25, v26, 1);
  uint64_t v27 = sub_9ABC();
  unint64_t v29 = v28;
  int v30 = sub_57000(a5, 0, length);
  unint64_t v31 = sub_57000(a5, 0, length);
  agxps_timeseries_compare_ts(3LL, v26, v27, v29, v30, 1LL);
  agxps_timeseries_select_tts((uint64_t)v30, (uint64_t)v26, v27, v29, (uint64_t)v31);
  return v31;
}

int *sub_31B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_416b2a4855c3ad10e45eaab8493e7651ad66f8e3d44ad880fa8111c87ccd090a");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  int v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_eda5bce70befa39e7c6029505c0269211092c220048a502fd8fa2fe30895465b");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  unint64_t v15 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_31C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_416b2a4855c3ad10e45eaab8493e7651ad66f8e3d44ad880fa8111c87ccd090a");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  int v13 = sub_9ABC();
  unint64_t v15 = v14;
  unint64_t v16 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_ca0d54323c1777d994357aaacdb7beac572bea11cd16afed4c756f3dc9496a18");
  uint64_t v17 = agxps_timeseries_get_length((uint64_t)v16);
  uint64_t v18 = (int *)sub_57000(a5, 0, v17);
  agxps_timeseries_mul_st(v13, v15, v16, v18, 1);
  uint64_t v19 = sub_9ABC();
  unint64_t v21 = v20;
  uint64_t v22 = sub_57000(a5, 0, v17);
  uint64_t v23 = (int *)sub_57000(a5, 0, v17);
  agxps_timeseries_compare_ts(3LL, v18, v19, v21, v22, 1LL);
  agxps_timeseries_select_tts((uint64_t)v22, (uint64_t)v18, v19, v21, (uint64_t)v23);
  unint64_t v24 = (int *)sub_57000(a5, 0, v17);
  agxps_timeseries_div_tt(v12, v23, v24, 1);
  return v24;
}

int *sub_31DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_b4a97f86133bb31ea8cf25afb427cb7dc1fe52552105fcd8bc3c4aa7ad099a78");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_9969883349fe2838e0be35dff1762942e9491b337c7b0ba46661003a330996ac");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_868dda8bb614bc2256251603b58ea88fa9ebfde94214a32cac586b56bc8a0fdc");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  int v13 = (int *)sub_57000(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  unint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_001df138804c389a08dc6f67112cad9b15228d51415c964e384102355b0ff784");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  unint64_t v16 = (int *)sub_57000(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  uint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_f8d12ed1fd4a2c10df5bc36ac39f6108a81c23c312389616fd2fa2fbf882c94a");
  agxps_timeseries_get_length((uint64_t)v17);
  uint64_t v18 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_c9b7b4db80ce4f449662cc8a655a128294ce8cb63a963492682ad9c02a338a46");
  uint64_t v19 = agxps_timeseries_get_length((uint64_t)v18);
  unint64_t v20 = (int *)sub_57000(a5, 0, v19);
  agxps_timeseries_add_tt(v17, v18, v20, 1);
  LODWORD(v17) = sub_9ABC();
  unint64_t v22 = v21;
  uint64_t v23 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_4167773bd45e5e4d7f626a716b9775f840b172225798dd96b00c6f7f0290d75e");
  uint64_t v24 = agxps_timeseries_get_length((uint64_t)v23);
  unint64_t v25 = (int *)sub_57000(a5, 0, v24);
  agxps_timeseries_mul_st((int)v17, v22, v23, v25, 1);
  unint64_t v26 = (int *)sub_57000(a5, 0, v24);
  agxps_timeseries_add_tt(v20, v25, v26, 1);
  uint64_t v27 = sub_9ABC();
  unint64_t v29 = v28;
  int v30 = sub_57000(a5, 0, v24);
  unint64_t v31 = (int *)sub_57000(a5, 0, v24);
  agxps_timeseries_compare_ts(3LL, v26, v27, v29, v30, 1LL);
  agxps_timeseries_select_tts((uint64_t)v30, (uint64_t)v26, v27, v29, (uint64_t)v31);
  unint64_t v32 = (int *)sub_57000(a5, 0, v24);
  agxps_timeseries_div_tt(v16, v31, v32, 1);
  return v32;
}

int *sub_32084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_1827ca25b7318e2df60eb0fe4f0c290b43054021ec3233e1fcdcf7b622fe4589");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_04d4411374e68233627aa77e33b97414d97097b7d3599dc0555f05e8ba0c27ad");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_127d5295001f8af60ca5165221e36d79521a187e9c43940c9ea618e0d2d7c316");
  uint64_t v12 = agxps_timeseries_get_length(v11);
  uint64_t v13 = sub_9ABC();
  unint64_t v15 = v14;
  unint64_t v16 = sub_57000(a5, 0, v12);
  uint64_t v17 = (int *)sub_57000(a5, 0, v12);
  agxps_timeseries_compare_ts(3LL, v11, v13, v15, v16, 1LL);
  agxps_timeseries_select_tts((uint64_t)v16, v11, v13, v15, (uint64_t)v17);
  uint64_t v18 = (int *)sub_57000(a5, 0, v12);
  agxps_timeseries_div_tt(v10, v17, v18, 1);
  return v18;
}

int *sub_321E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_3a25f8b9b9a3bb6fee419881039de7947be1fc155061f0ed642d5957df2c9221");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  uint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_32278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_732f9ae18abcb107b504911ba9abe0422500b581734d0a11f801be57da3a56b5");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  uint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_3230C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_ba0f7bef8431f94f98ea8587e522d4c8468e2bab9bc0be87d3b8b9ac97981db3");
  agxps_timeseries_get_length((uint64_t)v7);
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_48d6a3135170e202f4c373f10c7fe2f4f35ae24a0feecef8accedc4f75fb7af4");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  uint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_01d049a728cff3c54b425c2839925c3f72de7d5110d2cd0b6823d0360fd8b0d4");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_57000(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  LODWORD(v11) = sub_9ABC();
  unint64_t v15 = v14;
  unint64_t v16 = (int *)sub_57000(a5, 0, v12);
  agxps_timeseries_mul_ts(v13, (int)v11, v15, v16, 1);
  return v16;
}

uint64_t sub_32434(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "AF Bandwidth");
}

int *sub_3244C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_fa7f16c60620d451db8d71e3b82cab7253d2dbf1457c7966dbf002da9af010c0");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

int *sub_324D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_e06b821bba710b56a3eaf194be742a6d964b111bb761426f6b1ebd16e227010e");
  agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_becc55001438de226fddc3e26ffa180fce103d635eb0f85ffbb6c01dbde954fd");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  unint64_t v14 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v13, v14, 1);
  return v14;
}

int *sub_325C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_c788b8bd5d3e1ef8ad9501833f3b01bba5e1046e3e16d1a2aa837b76a60f19f4");
  agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_4167773bd45e5e4d7f626a716b9775f840b172225798dd96b00c6f7f0290d75e");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  unint64_t v14 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v13, v14, 1);
  int v15 = sub_9ABC();
  unint64_t v17 = v16;
  uint64_t v18 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_67d62b746943a02f8d4dc07a8183667897d2a5b27b2bb6fbb52cc1f27f1c53f7");
  uint64_t v19 = agxps_timeseries_get_length((uint64_t)v18);
  unint64_t v20 = (int *)sub_57000(a5, 0, v19);
  agxps_timeseries_mul_st(v15, v17, v18, v20, 1);
  unint64_t v21 = (int *)sub_57000(a5, 0, v19);
  agxps_timeseries_add_tt(v14, v20, v21, 1);
  return v21;
}

int *sub_32734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_b89bac942f8b36ffc2ca66b71168fcbc6ce13aaf07ffbb371c8176139128528d");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

int *sub_327C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_44e2790fe56248cd45e2248d0f69699da605c77fab749daf6c865f1ab5f16563");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_5c5c55d05fb355aa5be61ac63c88eb4a2a521a47dd8f79c18b5c1df163d5cb55");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_9ABC();
  unint64_t v17 = v16;
  uint64_t v18 = sub_57000(a5, 0, v14);
  uint64_t v19 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_compare_ts(3LL, v13, v15, v17, v18, 1LL);
  agxps_timeseries_select_tts((uint64_t)v18, v13, v15, v17, (uint64_t)v19);
  unint64_t v20 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

uint64_t sub_32918(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_899b43f77bed0cc43134b61fcccca0925a0e62110b4bb7fae2c765efa3f9bbdc");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_32954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_257ec906bdb46e45679882d962be91fe1c161cb79df17ea71a7427b234a0b812");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  uint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  LODWORD(v6) = sub_9ABC();
  unint64_t v13 = v12;
  uint64_t v14 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v11, (int)v6, v13, v14, 1);
  return v14;
}

int *sub_32A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_23628149970030e181bfc592d170355b20bf26530773c5dc9481760b2c4158ea");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  uint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  LODWORD(v6) = sub_9ABC();
  unint64_t v13 = v12;
  uint64_t v14 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v11, (int)v6, v13, v14, 1);
  return v14;
}

int *sub_32AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "ParameterBufferTilerAlloc");
  agxps_timeseries_get_length((uint64_t)v7);
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "ParameterBufferPrimitiveBlockAlloc");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  return v10;
}

uint64_t sub_32B90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_06f73dd77cc4f21054a372b34a28a1d5d054ff7241ee73be67f927d897211048");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_32BCC( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  uint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_ad6b7a66022bb8efc6c01d6f3db0be8594408168905585015d8f7ab8e7efe672");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  unsigned int v14 = sub_9ABC();
  uint64_t v16 = v15;
  unsigned int v17 = (**a3)(a3, "NUM_CORES");
  LODWORD(a3) = sub_9B1C(v14, v16, v17);
  unint64_t v19 = v18;
  unint64_t v20 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v19, v20, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v20);
}

uint64_t sub_32CEC( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  uint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_2fab6f6232fd4f1349620047490c7562c852746134f1a6e53ca0510462394598");
  agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v12 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_f4035ec10b022c926c9e5a14e4e2c08c16049d0e9474bf8b383ed109db7360d7");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v12);
  unsigned int v14 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v11, v12, v14, 1);
  uint64_t v15 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v14, v15, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_CORES");
  unint64_t v17 = v16;
  unint64_t v18 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_ts(v15, (int)a3, v17, v18, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v18);
}

uint64_t sub_32E38( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  uint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_1308feee43a7aae19c3764eb8928e79f464f3a2b9d1291b01c1bae25565fa93c");
  agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v12 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_ee24ab3d92c84359c20d00d2061a37fcec736e1c550577f0529a9c9441a265dc");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v12);
  unsigned int v14 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v11, v12, v14, 1);
  uint64_t v15 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_adcaa1bfdaea7d31b4a776ffd13089ba401d5c9c533c77378b5f378062215fdb");
  agxps_timeseries_get_length((uint64_t)v15);
  unint64_t v16 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_883c062d224c59ccd4c4303a7caeacbd0aa87cd6fffd5347dfedb52a23f4a6e5");
  uint64_t v17 = agxps_timeseries_get_length((uint64_t)v16);
  unint64_t v18 = (int *)sub_57000(a5, 0, v17);
  agxps_timeseries_add_tt(v15, v16, v18, 1);
  unint64_t v19 = sub_57000(a5, 0, v17);
  unint64_t v20 = (int *)sub_57000(a5, 0, v17);
  double v21 = agxps_timeseries_compare_tt(3LL, v14, v18, v19, 1LL);
  agxps_timeseries_select_ttt((uint64_t)v19, (uint64_t)v14, (uint64_t)v18, (uint64_t)v20, v21);
  unint64_t v22 = (int *)sub_57000(a5, 0, v17);
  agxps_timeseries_mul_st(v8, v10, v20, v22, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_CORES");
  unint64_t v24 = v23;
  unint64_t v25 = (int *)sub_57000(a5, 0, v17);
  agxps_timeseries_div_ts(v22, (int)a3, v24, v25, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v25);
}

int *sub_33044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_d2acb8217628c8c28df030d3f819e3831a16760dc5af79722487d789d9cbe02d");
  agxps_timeseries_get_length((uint64_t)v7);
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_847829852334f2b320f2b2890d9a9c3dd7022b760b29a94540ba4fe13d1dd91a");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  uint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_a7dd90063ddd29bf1b2d1259297cca0904b949cc92e9dee2e929fec2294f0422");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_57000(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  return v13;
}

int *sub_33128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_d2acb8217628c8c28df030d3f819e3831a16760dc5af79722487d789d9cbe02d");
  agxps_timeseries_get_length((uint64_t)v10);
  int v11 = sub_9ABC();
  unint64_t v13 = v12;
  unsigned int v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_847829852334f2b320f2b2890d9a9c3dd7022b760b29a94540ba4fe13d1dd91a");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v14);
  unint64_t v16 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v11, v13, v14, v16, 1);
  uint64_t v17 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v10, v16, v17, 1);
  LODWORD(sub_64DC(v11, v10) = sub_9ABC();
  unint64_t v19 = v18;
  unint64_t v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_a7dd90063ddd29bf1b2d1259297cca0904b949cc92e9dee2e929fec2294f0422");
  uint64_t v21 = agxps_timeseries_get_length((uint64_t)v20);
  unint64_t v22 = (int *)sub_57000(a5, 0, v21);
  agxps_timeseries_mul_st((int)v10, v19, v20, v22, 1);
  unint64_t v23 = (int *)sub_57000(a5, 0, v21);
  agxps_timeseries_add_tt(v17, v22, v23, 1);
  unint64_t v24 = (int *)sub_57000(a5, 0, v21);
  agxps_timeseries_mul_st(v7, v9, v23, v24, 1);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "SparseTextureRequests");
  uint64_t v26 = agxps_timeseries_get_length(v25);
  uint64_t v27 = sub_9ABC();
  unint64_t v29 = v28;
  int v30 = sub_57000(a5, 0, v26);
  unint64_t v31 = (int *)sub_57000(a5, 0, v26);
  agxps_timeseries_compare_ts(3LL, v25, v27, v29, v30, 1LL);
  agxps_timeseries_select_tts((uint64_t)v30, v25, v27, v29, (uint64_t)v31);
  unint64_t v32 = (int *)sub_57000(a5, 0, v26);
  agxps_timeseries_div_tt(v24, v31, v32, 1);
  return v32;
}

uint64_t sub_33394( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  int v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_64a10cb112e74a4ec02f177b245e3f83edd61c0f78bc5bc7ae4978ce28f07f83");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  unsigned int v14 = sub_9ABC();
  uint64_t v16 = v15;
  unsigned int v17 = (**a3)(a3, "NUM_CORES");
  LODWORD(a3) = sub_9B1C(v14, v16, v17);
  unint64_t v19 = v18;
  unint64_t v20 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v19, v20, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v20);
}

uint64_t sub_334B4( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  unsigned int v8 = sub_9ABC();
  uint64_t v10 = v9;
  unsigned int v11 = sub_9ABC();
  int v12 = sub_9B1C(v8, v10, v11);
  unint64_t v14 = v13;
  uint64_t v15 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_aabc9758d4e52fd36dfb1a0e38171798aa7bf2ec665135dc298c1aa1a7c10760");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v15);
  unsigned int v17 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v12, v14, v15, v17, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_CORES");
  unint64_t v19 = v18;
  unint64_t v20 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_ts(v17, (int)a3, v19, v20, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v20);
}

uint64_t sub_335D4( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  unsigned int v8 = sub_9ABC();
  uint64_t v10 = v9;
  unsigned int v11 = sub_9ABC();
  int v12 = sub_9B1C(v8, v10, v11);
  unint64_t v14 = v13;
  uint64_t v15 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_ca0d54323c1777d994357aaacdb7beac572bea11cd16afed4c756f3dc9496a18");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v15);
  unsigned int v17 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v12, v14, v15, v17, 1);
  unsigned int v18 = sub_9ABC();
  uint64_t v20 = v19;
  unsigned int v21 = (**a3)(a3, "NUM_CORES");
  LODWORD(a3) = sub_9B1C(v18, v20, v21);
  unint64_t v23 = v22;
  unint64_t v24 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_ts(v17, (int)a3, v23, v24, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v24);
}

uint64_t sub_33718( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unsigned int v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_46210435e8bd691719dc45391f51ef552bf7e745c1401ee9943aa6f85086336e");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  unsigned int v14 = sub_9ABC();
  uint64_t v16 = v15;
  unsigned int v17 = (**a3)(a3, "NUM_GPS");
  LODWORD(a3) = sub_9B1C(v14, v16, v17);
  unint64_t v19 = v18;
  uint64_t v20 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v19, v20, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v20);
}

uint64_t sub_33838( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unsigned int v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_2d3c257f33af88b8488658fb5b6a86f64cb02169b680e1250d3f37d373a4197f");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  unint64_t v15 = v14;
  uint64_t v16 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v15, v16, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v16);
}

uint64_t sub_33934( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unsigned int v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_149b69750a3c80a27d163a4ca69ec03e3b39b3c0afe9c90c8cd37a128832cb13");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  unint64_t v15 = v14;
  uint64_t v16 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v15, v16, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v16);
}

uint64_t sub_33A30( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unsigned int v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_da824fe9269c1efd80cb71a6e5415be160b6f43b41e858cb83976c4140b052a5");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  unint64_t v15 = v14;
  uint64_t v16 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v15, v16, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v16);
}

uint64_t sub_33B2C( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unsigned int v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_6d6a7c8efb15986fa71f8bf4a6a06f8942199b36680e516766e92490607c958d");
  agxps_timeseries_get_length((uint64_t)v11);
  int v12 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_fdc48a2370f6885da6ac169661812057de2cf71fbbbcb5df8348a78f112992dc");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v12);
  unint64_t v14 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v11, v12, v14, 1);
  unint64_t v15 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v14, v15, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_L2_BANKS");
  unint64_t v17 = v16;
  unint64_t v18 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_ts(v15, (int)a3, v17, v18, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v18);
}

int *sub_33C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_6d6a7c8efb15986fa71f8bf4a6a06f8942199b36680e516766e92490607c958d");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  int v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

uint64_t sub_33D04( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unsigned int v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_da2d5f5fd43e7edda6d5635752a29f09d285cf47c2ecd0a1b83b1ba3eddcef55");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  unsigned int v14 = sub_9ABC();
  uint64_t v16 = v15;
  unsigned int v17 = (**a3)(a3, "NUM_GPS");
  LODWORD(a3) = sub_9B1C(v14, v16, v17);
  unint64_t v19 = v18;
  uint64_t v20 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v19, v20, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v20);
}

uint64_t sub_33E24( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unsigned int v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_63b721bdb7ff9f45f3835f7e6a8a4595b1fed0038ae9a76cb853fc36756386c9");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_CORES");
  unint64_t v15 = v14;
  uint64_t v16 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v15, v16, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v16);
}

int *sub_33F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_63b721bdb7ff9f45f3835f7e6a8a4595b1fed0038ae9a76cb853fc36756386c9");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unsigned int v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_33FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_95457b9a60a638f3c652d16526373338287f19e3cb86adaea8a30e8255a7aa34");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  int v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  int v13 = sub_9ABC();
  unint64_t v15 = v14;
  uint64_t v16 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_2b086decbf8af5fc652f38631028061547de9b4eab238b05cc6e26e20ba26444");
  uint64_t v17 = agxps_timeseries_get_length((uint64_t)v16);
  unint64_t v18 = (int *)sub_57000(a5, 0, v17);
  agxps_timeseries_mul_st(v13, v15, v16, v18, 1);
  unint64_t v19 = (int *)sub_57000(a5, 0, v17);
  agxps_timeseries_add_tt(v12, v18, v19, 1);
  return v19;
}

int *sub_340DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "FragmentZStoreBytes");
  agxps_timeseries_get_length((uint64_t)v7);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "ZBytesWrittenToMainMemory");
  uint64_t length = agxps_timeseries_get_length(v8);
  uint64_t v10 = sub_9ABC();
  unint64_t v12 = v11;
  int v13 = sub_57000(a5, 0, length);
  unint64_t v14 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_compare_ts(3LL, v8, v10, v12, v13, 1LL);
  agxps_timeseries_select_tts((uint64_t)v13, v8, v10, v12, (uint64_t)v14);
  unint64_t v15 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_tt(v7, v14, v15, 1);
  return v15;
}

uint64_t sub_341F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_64a10cb112e74a4ec02f177b245e3f83edd61c0f78bc5bc7ae4978ce28f07f83");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_34230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  uint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_ca0d54323c1777d994357aaacdb7beac572bea11cd16afed4c756f3dc9496a18");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

int *sub_342B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  int v10 = sub_9ABC();
  unint64_t v12 = v11;
  int v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_e88003194e52f7912577c1de30615d17adeaeb189988c5f7b3dd3994c4bf01c3");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v13);
  unint64_t v15 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v10, v12, v13, v15, 1);
  int v16 = sub_9ABC();
  unint64_t v18 = v17;
  unint64_t v19 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_0517252655ede3af8df3294d0dd1936ef2e6b738323e5502da4b683aea057ba3");
  uint64_t v20 = agxps_timeseries_get_length((uint64_t)v19);
  unsigned int v21 = (int *)sub_57000(a5, 0, v20);
  agxps_timeseries_mul_st(v16, v18, v19, v21, 1);
  unint64_t v22 = (int *)sub_57000(a5, 0, v20);
  agxps_timeseries_add_tt(v15, v21, v22, 1);
  LODWORD(v18) = sub_9ABC();
  unint64_t v24 = v23;
  uint64_t v25 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_b07f7948ecee8df33172343235e9df76503200554b4ccf95b2c7622c0380772c");
  uint64_t v26 = agxps_timeseries_get_length((uint64_t)v25);
  uint64_t v27 = (int *)sub_57000(a5, 0, v26);
  agxps_timeseries_mul_st(v18, v24, v25, v27, 1);
  unint64_t v28 = (int *)sub_57000(a5, 0, v26);
  agxps_timeseries_add_tt(v22, v27, v28, 1);
  unint64_t v29 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_2545b5f3d7fb631492e04dfa0b70c6a57307db64c735d42b00f373627eb0fa08");
  uint64_t v30 = agxps_timeseries_get_length((uint64_t)v29);
  unint64_t v31 = (int *)sub_57000(a5, 0, v30);
  agxps_timeseries_add_tt(v28, v29, v31, 1);
  unint64_t v32 = (int *)sub_57000(a5, 0, v30);
  agxps_timeseries_mul_st(v7, v9, v31, v32, 1);
  return v32;
}

uint64_t sub_344F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_46210435e8bd691719dc45391f51ef552bf7e745c1401ee9943aa6f85086336e");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_34530(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_149b69750a3c80a27d163a4ca69ec03e3b39b3c0afe9c90c8cd37a128832cb13");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_3456C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_da824fe9269c1efd80cb71a6e5415be160b6f43b41e858cb83976c4140b052a5");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_345A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_eda5bce70befa39e7c6029505c0269211092c220048a502fd8fa2fe30895465b");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_345E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_2fab6f6232fd4f1349620047490c7562c852746134f1a6e53ca0510462394598");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_34620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  int v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_0f67618fe6dd59b9cc951584dc80dd9f5dd9c428402dbe2e8a03c7df4100020e");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

int *sub_346AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_40680272e25f5a98ef1fdae57c0be82cc7fb940000907f1a4d46547de8525db0");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_34740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "FragmentGeneratorPrimitiveProcessed");
  agxps_timeseries_get_length((uint64_t)v7);
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "FragmentGeneratorTilesProcessed");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_tt(v7, v8, v10, 1);
  return v10;
}

int *sub_347D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7 = sub_9ABC();
  uint64_t v9 = v8;
  unsigned int v10 = sub_9ABC();
  LODWORD(v9) = sub_9B1C(v7, v9, v10);
  unint64_t v12 = v11;
  int v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_719a713b390f2b37bbbe8ca62f3053819539a3fc60d05b02f21b2c8435fb73a6");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v13);
  unint64_t v15 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v9, v12, v13, v15, 1);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "FragmentQuadsProcessed");
  uint64_t v17 = agxps_timeseries_get_length(v16);
  uint64_t v18 = sub_9ABC();
  unint64_t v20 = v19;
  unsigned int v21 = sub_57000(a5, 0, v17);
  unint64_t v22 = (int *)sub_57000(a5, 0, v17);
  agxps_timeseries_compare_ts(3LL, v16, v18, v20, v21, 1LL);
  agxps_timeseries_select_tts((uint64_t)v21, v16, v18, v20, (uint64_t)v22);
  unint64_t v23 = (int *)sub_57000(a5, 0, v17);
  agxps_timeseries_div_tt(v15, v22, v23, 1);
  return v23;
}

int *sub_34950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7 = sub_9ABC();
  uint64_t v9 = v8;
  unsigned int v10 = sub_9ABC();
  LODWORD(v9) = sub_9B1C(v7, v9, v10);
  unint64_t v12 = v11;
  int v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_fade8eea03e1fbf9a3d3cd6ab6bfd82b70bc1595ffb23f1b638746baa6c672e0");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v13);
  unint64_t v15 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v9, v12, v13, v15, 1);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "FragmentQuadsProcessed");
  uint64_t v17 = agxps_timeseries_get_length(v16);
  uint64_t v18 = sub_9ABC();
  unint64_t v20 = v19;
  unsigned int v21 = sub_57000(a5, 0, v17);
  unint64_t v22 = (int *)sub_57000(a5, 0, v17);
  agxps_timeseries_compare_ts(3LL, v16, v18, v20, v21, 1LL);
  agxps_timeseries_select_tts((uint64_t)v21, v16, v18, v20, (uint64_t)v22);
  unint64_t v23 = (int *)sub_57000(a5, 0, v17);
  agxps_timeseries_div_tt(v15, v22, v23, 1);
  return v23;
}

int *sub_34ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7 = sub_9ABC();
  uint64_t v9 = v8;
  unsigned int v10 = sub_9ABC();
  LODWORD(v9) = sub_9B1C(v7, v9, v10);
  unint64_t v12 = v11;
  int v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_db1f507c85a72a4148283a69481d823edb23fbfb999acf18fb2d155eb7edc768");
  agxps_timeseries_get_length((uint64_t)v13);
  unint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_879d7622b5c9023712d7cc6c70f432757ab72505afba79be4dcb023459f9658a");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v14);
  uint64_t v16 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  uint64_t v17 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v9, v12, v16, v17, 1);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "FragmentQuadsProcessed");
  uint64_t v19 = agxps_timeseries_get_length(v18);
  uint64_t v20 = sub_9ABC();
  unint64_t v22 = v21;
  unint64_t v23 = sub_57000(a5, 0, v19);
  unint64_t v24 = (int *)sub_57000(a5, 0, v19);
  agxps_timeseries_compare_ts(3LL, v18, v20, v22, v23, 1LL);
  agxps_timeseries_select_tts((uint64_t)v23, v18, v20, v22, (uint64_t)v24);
  uint64_t v25 = (int *)sub_57000(a5, 0, v19);
  agxps_timeseries_div_tt(v17, v24, v25, 1);
  return v25;
}

uint64_t sub_34C94( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_7c42e99464b33ee51de11bdd9f8cf11a14473f7061e75f7589a3578a7757abfd");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  int v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  unsigned int v14 = sub_9ABC();
  uint64_t v16 = v15;
  unsigned int v17 = (**a3)(a3, "NUM_CORES");
  LODWORD(a3) = sub_9B1C(v14, v16, v17);
  unint64_t v19 = v18;
  uint64_t v20 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v19, v20, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v20);
}

uint64_t sub_34DB4( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_d11d0ca656849a8048dbe7d1d6761d3cbcf463d9196a20b3da7e6a554fd0652f");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  int v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  unsigned int v14 = sub_9ABC();
  uint64_t v16 = v15;
  unsigned int v17 = (**a3)(a3, "NUM_CORES");
  LODWORD(a3) = sub_9B1C(v14, v16, v17);
  unint64_t v19 = v18;
  uint64_t v20 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v19, v20, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v20);
}

uint64_t sub_34ED4( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_9ABC();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_d54a22a6f6eb41ec901489f9e47263886645d322e2546360a6622d2c6bdeddb9");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  int v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  unsigned int v14 = sub_9ABC();
  uint64_t v16 = v15;
  unsigned int v17 = (**a3)(a3, "NUM_CORES");
  LODWORD(a3) = sub_9B1C(v14, v16, v17);
  unint64_t v19 = v18;
  uint64_t v20 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v19, v20, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v20);
}

int *sub_34FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_20c8b2b1747ee9c33baf87dc32e8f5d07b9eb25ca5829ad056d92eb0d040c76a");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_e247689f0b49c692ba39d348957d19faa7587b07d3025f3b283a165cfc35f5b8");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_9ABC();
  unint64_t v17 = v16;
  unint64_t v18 = sub_57000(a5, 0, v14);
  unint64_t v19 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_compare_ts(3LL, v13, v15, v17, v18, 1LL);
  agxps_timeseries_select_tts((uint64_t)v18, v13, v15, v17, (uint64_t)v19);
  uint64_t v20 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

uint64_t sub_3514C( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_f883d72b08be21c3348078baaa2362bec3884949a1726642308e7dd5cb69fe07");
  agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v9 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_a15872ac9b60de1aa5b2f8738fe49df926f782ead2f5f010124e3c141c961be3");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v9);
  unint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v8, v9, v11, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  unint64_t v13 = v12;
  uint64_t v14 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_ts(v11, (int)a3, v13, v14, 1);
  uint64_t v15 = sub_9ABC();
  unint64_t v17 = v16;
  unint64_t v18 = sub_57000(a5, 0, length);
  unint64_t v19 = sub_57000(a5, 0, length);
  agxps_timeseries_compare_ts(2LL, v14, v15, v17, v18, 1LL);
  agxps_timeseries_select_tts((uint64_t)v18, (uint64_t)v14, v15, v17, (uint64_t)v19);
  return (**(uint64_t (***)(uint64_t, void *))a2)(a2, v19);
}

uint64_t sub_352C4( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_2413cbfc3cf49db0f8a6cbaddb7f99118134a04d0a7bbfcf3e5c192276c68644");
  agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v9 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_27cde4b049e15693c767899196a213dcd807878d655e33dde43ddff8910df32e");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v9);
  unint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v8, v9, v11, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  unint64_t v13 = v12;
  uint64_t v14 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_ts(v11, (int)a3, v13, v14, 1);
  uint64_t v15 = sub_9ABC();
  unint64_t v17 = v16;
  unint64_t v18 = sub_57000(a5, 0, length);
  unint64_t v19 = sub_57000(a5, 0, length);
  agxps_timeseries_compare_ts(2LL, v14, v15, v17, v18, 1LL);
  agxps_timeseries_select_tts((uint64_t)v18, (uint64_t)v14, v15, v17, (uint64_t)v19);
  return (**(uint64_t (***)(uint64_t, void *))a2)(a2, v19);
}

uint64_t sub_3543C(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *))
{
  int v5 = sub_9ABC();
  unint64_t v7 = v6;
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_ffb81bec9c1a43cfe9f952f38103d1887bef653181bcb3c1362308492368933d");
  unint64_t v9 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_50c5ccf70ef1ec17254253a456f052e1130edd339eee1dafe34fc8254d36b52a");
  unint64_t v10 = sub_A18C(v8, v9);
  unint64_t v11 = sub_D670(v5, v7, v10);
  int v12 = (**a3)(a3, "NUM_GPS");
  uint64_t v14 = sub_FC4C(v11, v12, v13);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v14);
}

uint64_t sub_35514( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_c3bf601f0a951d8e293718574d5f9ce5ddcb27d830ef81f6b018a3b933194ce1");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  unint64_t v11 = v10;
  int v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_ts(v8, (int)a3, v11, v12, 1);
  uint64_t v13 = sub_9ABC();
  unint64_t v15 = v14;
  unint64_t v16 = sub_57000(a5, 0, length);
  unint64_t v17 = sub_57000(a5, 0, length);
  agxps_timeseries_compare_ts(2LL, v12, v13, v15, v16, 1LL);
  agxps_timeseries_select_tts((uint64_t)v16, (uint64_t)v12, v13, v15, (uint64_t)v17);
  return (**(uint64_t (***)(uint64_t, void *))a2)(a2, v17);
}

uint64_t sub_35644( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_ba42c3f46d52663d076f226bfb30be092b4b536d27d161d16869c10288811903");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  unint64_t v11 = v10;
  int v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_ts(v8, (int)a3, v11, v12, 1);
  uint64_t v13 = sub_9ABC();
  unint64_t v15 = v14;
  unint64_t v16 = sub_57000(a5, 0, length);
  unint64_t v17 = sub_57000(a5, 0, length);
  agxps_timeseries_compare_ts(2LL, v12, v13, v15, v16, 1LL);
  agxps_timeseries_select_tts((uint64_t)v16, (uint64_t)v12, v13, v15, (uint64_t)v17);
  return (**(uint64_t (***)(uint64_t, void *))a2)(a2, v17);
}

uint64_t sub_35774(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_e247689f0b49c692ba39d348957d19faa7587b07d3025f3b283a165cfc35f5b8");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_357B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_e263044475c736413734a34bbc76c45c46960ed823cfa5696235ee862ce5b6ea");
  agxps_timeseries_get_length(v2);
  return v2;
}

void *sub_357EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "MMUTLBRequests");
  agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "MMUTLBHits");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_sub_tt(v10, v11, v13, 1);
  unint64_t v14 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v13, v14, 1);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "MMUTLBRequests");
  uint64_t v16 = agxps_timeseries_get_length(v15);
  uint64_t v17 = sub_9ABC();
  unint64_t v19 = v18;
  uint64_t v20 = sub_57000(a5, 0, v16);
  unint64_t v21 = (int *)sub_57000(a5, 0, v16);
  agxps_timeseries_compare_ts(3LL, v15, v17, v19, v20, 1LL);
  agxps_timeseries_select_tts((uint64_t)v20, v15, v17, v19, (uint64_t)v21);
  unint64_t v22 = (int *)sub_57000(a5, 0, v16);
  agxps_timeseries_div_tt(v14, v21, v22, 1);
  uint64_t v23 = sub_9ABC();
  unint64_t v25 = v24;
  uint64_t v26 = sub_57000(a5, 0, v16);
  uint64_t v27 = sub_57000(a5, 0, v16);
  agxps_timeseries_compare_ts(2LL, v22, v23, v25, v26, 1LL);
  agxps_timeseries_select_tts((uint64_t)v26, (uint64_t)v22, v23, v25, (uint64_t)v27);
  return v27;
}

int *sub_35A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_e6362c1fcf78a3882ad4f3bbd5a66cfb0a6feeae2d8e84b4b161234e0b3aa335");
  agxps_timeseries_get_length((uint64_t)v7);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_fdc48a2370f6885da6ac169661812057de2cf71fbbbcb5df8348a78f112992dc");
  uint64_t length = agxps_timeseries_get_length(v8);
  uint64_t v10 = sub_9ABC();
  unint64_t v12 = v11;
  uint64_t v13 = sub_57000(a5, 0, length);
  unint64_t v14 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_compare_ts(3LL, v8, v10, v12, v13, 1LL);
  agxps_timeseries_select_tts((uint64_t)v13, v8, v10, v12, (uint64_t)v14);
  uint64_t v15 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_tt(v7, v14, v15, 1);
  return v15;
}

int *sub_35B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "FragmentsRasterized");
  agxps_timeseries_get_length((uint64_t)v7);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "PrimitivesSubmitted");
  uint64_t length = agxps_timeseries_get_length(v8);
  uint64_t v10 = sub_9ABC();
  unint64_t v12 = v11;
  uint64_t v13 = sub_57000(a5, 0, length);
  unint64_t v14 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_compare_ts(3LL, v8, v10, v12, v13, 1LL);
  agxps_timeseries_select_tts((uint64_t)v13, v8, v10, v12, (uint64_t)v14);
  uint64_t v15 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_tt(v7, v14, v15, 1);
  return v15;
}

int *sub_35C44( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v7 = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  unint64_t v9 = v8;
  uint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "79E88035C9BC883D403F17831B8C9264E643C6B76E9B3C1451B49B0F672C32BF");
  agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "AA1E812506867A5F2C54D3BA3268DB5C4BB2C6B0E4F500340DD23C4E1E637D9D");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  unint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "3476066F46CC277DE7616AAAD8FCDF2C28DA42293B231F74A62159EB6EDAC78C");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  int v16 = sub_9ABC();
  unint64_t v18 = v17;
  unint64_t v19 = (int *)sub_57000(a5, 0, v15);
  agxps_timeseries_mul_ts(v14, v16, v18, v19, 1);
  uint64_t v20 = (int *)sub_57000(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v19, v20, 1);
  unint64_t v21 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "295D65BB175E4E4EEF9003E008E093043C9B8CE43190BE0A2D8F1771F9837033");
  uint64_t v22 = agxps_timeseries_get_length((uint64_t)v21);
  uint64_t v23 = (int *)sub_57000(a5, 0, v22);
  agxps_timeseries_add_tt(v20, v21, v23, 1);
  unint64_t v24 = (int *)sub_57000(a5, 0, v22);
  agxps_timeseries_mul_st(v7, v9, v23, v24, 1);
  return v24;
}

int *sub_35E10( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "VSInvocation");
  agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v9 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "DeltaSeconds");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v9);
  LODWORD(a3) = (**a3)(a3, "NSEC_PER_SEC");
  unint64_t v12 = v11;
  uint64_t v13 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v9, (int)a3, v12, v13, 1);
  unint64_t v14 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_tt(v8, v13, v14, 1);
  return v14;
}

void *sub_35F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  int v10 = sub_9ABC();
  unint64_t v12 = v11;
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "1EE37CF6B772CC32CDCB4FC2CFE693EF7D7C80950325049285C3D49A4A88FD1C");
  agxps_timeseries_get_length((uint64_t)v13);
  unint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "C950D7F7AD90A2158FFC69617C9E89613825A41B0F38F9F0FCE55D75FC5532A3");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v14);
  int v16 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  unint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "C0D7A26A9BD1F09964BA54D31CBA3CBA8957E46C0129A0BED9DDD908890206C1");
  uint64_t v18 = agxps_timeseries_get_length((uint64_t)v17);
  unint64_t v19 = (int *)sub_57000(a5, 0, v18);
  agxps_timeseries_add_tt(v16, v17, v19, 1);
  uint64_t v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "18AA14F767F6966C6A9135ADD34A19B911559D7B7DD52BA1E092BA6613D26AF0");
  uint64_t v21 = agxps_timeseries_get_length((uint64_t)v20);
  uint64_t v22 = (int *)sub_57000(a5, 0, v21);
  agxps_timeseries_add_tt(v19, v20, v22, 1);
  uint64_t v23 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "ALUInstructions");
  uint64_t v24 = agxps_timeseries_get_length((uint64_t)v23);
  unint64_t v25 = (int *)sub_57000(a5, 0, v24);
  agxps_timeseries_div_tt(v22, v23, v25, 1);
  uint64_t v26 = (int *)sub_57000(a5, 0, v24);
  agxps_timeseries_sub_st(v10, v12, v25, v26, 1);
  uint64_t v27 = (int *)sub_57000(a5, 0, v24);
  agxps_timeseries_mul_st(v7, v9, v26, v27, 1);
  uint64_t v28 = sub_9ABC();
  unint64_t v30 = v29;
  unint64_t v31 = sub_57000(a5, 0, v24);
  unint64_t v32 = sub_57000(a5, 0, v24);
  agxps_timeseries_compare_ts(3LL, v27, v28, v30, v31, 1LL);
  agxps_timeseries_select_tts((uint64_t)v31, (uint64_t)v27, v28, v30, (uint64_t)v32);
  return v32;
}

uint64_t sub_3617C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "1EE37CF6B772CC32CDCB4FC2CFE693EF7D7C80950325049285C3D49A4A88FD1C");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_361B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "C950D7F7AD90A2158FFC69617C9E89613825A41B0F38F9F0FCE55D75FC5532A3");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_361F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "C0D7A26A9BD1F09964BA54D31CBA3CBA8957E46C0129A0BED9DDD908890206C1");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_36230(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "18AA14F767F6966C6A9135ADD34A19B911559D7B7DD52BA1E092BA6613D26AF0");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_3626C( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "AA1E812506867A5F2C54D3BA3268DB5C4BB2C6B0E4F500340DD23C4E1E637D9D");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  LODWORD(a3) = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, (int)a3, v10, v11, 1);
  return v11;
}

int *sub_36310( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "79E88035C9BC883D403F17831B8C9264E643C6B76E9B3C1451B49B0F672C32BF");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  LODWORD(a3) = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, (int)a3, v10, v11, 1);
  return v11;
}

int *sub_363B4( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "295D65BB175E4E4EEF9003E008E093043C9B8CE43190BE0A2D8F1771F9837033");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  LODWORD(a3) = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, (int)a3, v10, v11, 1);
  return v11;
}

int *sub_36458( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "3476066F46CC277DE7616AAAD8FCDF2C28DA42293B231F74A62159EB6EDAC78C");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  LODWORD(a3) = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, (int)a3, v10, v11, 1);
  LODWORD(a3) = sub_9ABC();
  unint64_t v13 = v12;
  unint64_t v14 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v11, (int)a3, v13, v14, 1);
  return v14;
}

int *sub_36538( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "4BF63E209F7D92B4E8341476C80013664D3299327C72E7A7F0D16E1CBD4904FC");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  LODWORD(a3) = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v7, (int)a3, v10, v11, 1);
  return v11;
}

int *sub_365DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "ALUInstructions");
  agxps_timeseries_get_length((uint64_t)v7);
  uint64_t v8 = sub_9ABC();
  unint64_t v10 = v9;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "DeltaSeconds");
  uint64_t length = agxps_timeseries_get_length(v11);
  unint64_t v13 = sub_57000(a5, 0, length);
  unint64_t v14 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_compare_st(3LL, v8, v10, v11, v13, 1LL);
  agxps_timeseries_select_tst((uint64_t)v13, v8, v10, v11, (uint64_t)v14);
  uint64_t v15 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_div_tt(v7, v14, v15, 1);
  return v15;
}

int *sub_366F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "ALUF32Issued");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  unint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "ALUInstructions");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  uint64_t v15 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_367D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "ALUF16Issued");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  unint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "ALUInstructions");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  uint64_t v15 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_368AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "ALUInt32AndCondIssued");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  unint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "ALUInstructions");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  uint64_t v15 = (int *)sub_57000(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_36988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "ALUIntAndComplexIssued");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  int v13 = sub_9ABC();
  unint64_t v15 = v14;
  int v16 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_ts(v12, v13, v15, v16, 1);
  unint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "ALUInstructions");
  uint64_t v18 = agxps_timeseries_get_length((uint64_t)v17);
  unint64_t v19 = (int *)sub_57000(a5, 0, v18);
  agxps_timeseries_div_tt(v16, v17, v19, 1);
  return v19;
}

int *sub_36AAC( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v7 = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "4BF63E209F7D92B4E8341476C80013664D3299327C72E7A7F0D16E1CBD4904FC");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

int *sub_36B44( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v7 = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "3856FBD8576C0AA988700D7EF5787AAAE94A3BBFBB393B0426FA9D379DA69C91");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_57000(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

uint64_t sub_36BDC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (uint64_t *)sub_24C8((uint64_t)v720, 0xFu, 3LL, (uint64_t)sub_2A720);
  int v3 = sub_2684(v2, "Xcode Derived Counters");
  __int128 v4 = *(_OWORD *)v3;
  int v723 = *((_DWORD *)v3 + 4);
  __int128 v722 = v4;
  sub_41004((uint64_t)&v724, (uint64_t)(v3 + 3));
  memset(v725, 0, sizeof(v725));
  sub_6B58((char *)v725, (__int128 *)v3[8], (__int128 *)v3[9], 0xAAAAAAAAAAAAAAABLL * ((v3[9] - v3[8]) >> 3));
  sub_23F4((int)v719, "MeshPrimitivesSubmitted");
  int v5 = (uint64_t *)sub_24C8((uint64_t)v719, 0xFu, 3LL, (uint64_t)sub_2A75C);
  unint64_t v6 = sub_2684(v5, "Xcode Derived Counters");
  __int128 v7 = *(_OWORD *)v6;
  int v727 = *((_DWORD *)v6 + 4);
  __int128 v726 = v7;
  sub_41004((uint64_t)&v728, (uint64_t)(v6 + 3));
  memset(v729, 0, sizeof(v729));
  sub_6B58((char *)v729, (__int128 *)v6[8], (__int128 *)v6[9], 0xAAAAAAAAAAAAAAABLL * ((v6[9] - v6[8]) >> 3));
  sub_23F4((int)v718, "PrimitivesSubmitted");
  unint64_t v8 = (uint64_t *)sub_24C8((uint64_t)v718, 0xFu, 3LL, (uint64_t)sub_2A798);
  unint64_t v9 = sub_2684(v8, "Xcode Derived Counters");
  __int128 v10 = *(_OWORD *)v9;
  int v731 = *((_DWORD *)v9 + 4);
  __int128 v730 = v10;
  sub_41004((uint64_t)&v732, (uint64_t)(v9 + 3));
  memset(v733, 0, sizeof(v733));
  sub_6B58((char *)v733, (__int128 *)v9[8], (__int128 *)v9[9], 0xAAAAAAAAAAAAAAABLL * ((v9[9] - v9[8]) >> 3));
  sub_23F4((int)v717, "VSInvocation");
  uint64_t v11 = (uint64_t *)sub_24C8((uint64_t)v717, 0xFu, 3LL, (uint64_t)sub_2A82C);
  unint64_t v12 = sub_2684(v11, "Xcode Derived Counters");
  __int128 v13 = *(_OWORD *)v12;
  int v735 = *((_DWORD *)v12 + 4);
  __int128 v734 = v13;
  sub_41004((uint64_t)&v736, (uint64_t)(v12 + 3));
  memset(v737, 0, sizeof(v737));
  sub_6B58((char *)v737, (__int128 *)v12[8], (__int128 *)v12[9], 0xAAAAAAAAAAAAAAABLL * ((v12[9] - v12[8]) >> 3));
  sub_23F4((int)v716, "PSInvocation");
  unint64_t v14 = (uint64_t *)sub_24C8((uint64_t)v716, 0xFu, 3LL, (uint64_t)sub_2A868);
  unint64_t v15 = sub_2684(v14, "Xcode Derived Counters");
  __int128 v16 = *(_OWORD *)v15;
  int v739 = *((_DWORD *)v15 + 4);
  __int128 v738 = v16;
  sub_41004((uint64_t)&v740, (uint64_t)(v15 + 3));
  memset(v741, 0, sizeof(v741));
  sub_6B58((char *)v741, (__int128 *)v15[8], (__int128 *)v15[9], 0xAAAAAAAAAAAAAAABLL * ((v15[9] - v15[8]) >> 3));
  sub_23F4((int)v715, "CSInvocation");
  unint64_t v17 = (uint64_t *)sub_24C8((uint64_t)v715, 0xFu, 3LL, (uint64_t)sub_2A900);
  uint64_t v18 = sub_2684(v17, "Xcode Derived Counters");
  __int128 v19 = *(_OWORD *)v18;
  int v743 = *((_DWORD *)v18 + 4);
  __int128 v742 = v19;
  sub_41004((uint64_t)&v744, (uint64_t)(v18 + 3));
  memset(v745, 0, sizeof(v745));
  sub_6B58((char *)v745, (__int128 *)v18[8], (__int128 *)v18[9], 0xAAAAAAAAAAAAAAABLL * ((v18[9] - v18[8]) >> 3));
  sub_23F4((int)v714, "PrimitivesPerSec");
  uint64_t v20 = (uint64_t *)sub_24C8((uint64_t)v714, 0xFu, 3LL, (uint64_t)sub_2AA2C);
  uint64_t v21 = sub_2684(v20, "Xcode Derived Counters");
  __int128 v22 = *(_OWORD *)v21;
  int v747 = *((_DWORD *)v21 + 4);
  __int128 v746 = v22;
  sub_41004((uint64_t)&v748, (uint64_t)(v21 + 3));
  memset(v749, 0, sizeof(v749));
  sub_6B58((char *)v749, (__int128 *)v21[8], (__int128 *)v21[9], 0xAAAAAAAAAAAAAAABLL * ((v21[9] - v21[8]) >> 3));
  sub_23F4((int)v713, "PixelsPerSec");
  uint64_t v23 = (uint64_t *)sub_24C8((uint64_t)v713, 0xFu, 3LL, (uint64_t)sub_2AAF4);
  uint64_t v24 = sub_2684(v23, "Xcode Derived Counters");
  __int128 v25 = *(_OWORD *)v24;
  int v751 = *((_DWORD *)v24 + 4);
  __int128 v750 = v25;
  sub_41004((uint64_t)&v752, (uint64_t)(v24 + 3));
  memset(v753, 0, sizeof(v753));
  sub_6B58((char *)v753, (__int128 *)v24[8], (__int128 *)v24[9], 0xAAAAAAAAAAAAAAABLL * ((v24[9] - v24[8]) >> 3));
  sub_23F4((int)v712, "PixelToVertexRatio");
  uint64_t v26 = (uint64_t *)sub_24C8((uint64_t)v712, 0xFu, 3LL, (uint64_t)sub_2ABBC);
  uint64_t v27 = sub_2684(v26, "Xcode Derived Counters");
  __int128 v28 = *(_OWORD *)v27;
  int v755 = *((_DWORD *)v27 + 4);
  __int128 v754 = v28;
  sub_41004((uint64_t)&v756, (uint64_t)(v27 + 3));
  memset(v757, 0, sizeof(v757));
  sub_6B58((char *)v757, (__int128 *)v27[8], (__int128 *)v27[9], 0xAAAAAAAAAAAAAAABLL * ((v27[9] - v27[8]) >> 3));
  sub_23F4((int)v711, "PixelPerTriangle");
  unint64_t v29 = (uint64_t *)sub_24C8((uint64_t)v711, 0xFu, 3LL, (uint64_t)sub_2AC50);
  unint64_t v30 = sub_2684(v29, "Xcode Derived Counters");
  __int128 v31 = *(_OWORD *)v30;
  int v759 = *((_DWORD *)v30 + 4);
  __int128 v758 = v31;
  sub_41004((uint64_t)&v760, (uint64_t)(v30 + 3));
  memset(v761, 0, sizeof(v761));
  sub_6B58((char *)v761, (__int128 *)v30[8], (__int128 *)v30[9], 0xAAAAAAAAAAAAAAABLL * ((v30[9] - v30[8]) >> 3));
  sub_23F4((int)v710, "DrawCalls");
  unint64_t v32 = (uint64_t *)sub_24C8((uint64_t)v710, 0xFu, 3LL, (uint64_t)sub_2ACE4);
  unint64_t v33 = sub_2684(v32, "Xcode Derived Counters");
  __int128 v34 = *(_OWORD *)v33;
  int v763 = *((_DWORD *)v33 + 4);
  __int128 v762 = v34;
  sub_41004((uint64_t)&v764, (uint64_t)(v33 + 3));
  memset(v765, 0, sizeof(v765));
  sub_6B58((char *)v765, (__int128 *)v33[8], (__int128 *)v33[9], 0xAAAAAAAAAAAAAAABLL * ((v33[9] - v33[8]) >> 3));
  sub_23F4((int)v709, "VerticesSubmitted");
  unint64_t v35 = (uint64_t *)sub_24C8((uint64_t)v709, 0xFu, 3LL, (uint64_t)sub_2AD88);
  uint64_t v36 = sub_2684(v35, "Xcode Derived Counters");
  __int128 v37 = *(_OWORD *)v36;
  int v767 = *((_DWORD *)v36 + 4);
  __int128 v766 = v37;
  sub_41004((uint64_t)&v768, (uint64_t)(v36 + 3));
  memset(v769, 0, sizeof(v769));
  sub_6B58((char *)v769, (__int128 *)v36[8], (__int128 *)v36[9], 0xAAAAAAAAAAAAAAABLL * ((v36[9] - v36[8]) >> 3));
  sub_23F4((int)v708, "VerticesReused");
  uint64_t v38 = (uint64_t *)sub_24C8((uint64_t)v708, 0xFu, 3LL, (uint64_t)sub_2ADC4);
  uint64_t v39 = sub_2684(v38, "Xcode Derived Counters");
  __int128 v40 = *(_OWORD *)v39;
  int v771 = *((_DWORD *)v39 + 4);
  __int128 v770 = v40;
  sub_41004((uint64_t)&v772, (uint64_t)(v39 + 3));
  memset(v773, 0, sizeof(v773));
  sub_6B58((char *)v773, (__int128 *)v39[8], (__int128 *)v39[9], 0xAAAAAAAAAAAAAAABLL * ((v39[9] - v39[8]) >> 3));
  sub_23F4((int)v707, "VerticesReusedPercent");
  uint64_t v41 = (uint64_t *)sub_24C8((uint64_t)v707, 0xFu, 3LL, (uint64_t)sub_2AED4);
  uint64_t v42 = sub_2684(v41, "Xcode Derived Counters");
  __int128 v43 = *(_OWORD *)v42;
  int v775 = *((_DWORD *)v42 + 4);
  __int128 v774 = v43;
  sub_41004((uint64_t)&v776, (uint64_t)(v42 + 3));
  memset(v777, 0, sizeof(v777));
  sub_6B58((char *)v777, (__int128 *)v42[8], (__int128 *)v42[9], 0xAAAAAAAAAAAAAAABLL * ((v42[9] - v42[8]) >> 3));
  sub_23F4((int)v706, "PrimitivesRasterized");
  unint64_t v44 = (uint64_t *)sub_24C8((uint64_t)v706, 0xFu, 3LL, (uint64_t)sub_2B078);
  uint64_t v45 = sub_2684(v44, "Xcode Derived Counters");
  __int128 v46 = *(_OWORD *)v45;
  int v779 = *((_DWORD *)v45 + 4);
  __int128 v778 = v46;
  sub_41004((uint64_t)&v780, (uint64_t)(v45 + 3));
  memset(v781, 0, sizeof(v781));
  sub_6B58((char *)v781, (__int128 *)v45[8], (__int128 *)v45[9], 0xAAAAAAAAAAAAAAABLL * ((v45[9] - v45[8]) >> 3));
  sub_23F4((int)v705, "PrimitivesRasterizedPercent");
  uint64_t v47 = (uint64_t *)sub_24C8((uint64_t)v705, 0xFu, 3LL, (uint64_t)sub_2B0B4);
  uint64_t v48 = sub_2684(v47, "Xcode Derived Counters");
  __int128 v49 = *(_OWORD *)v48;
  int v783 = *((_DWORD *)v48 + 4);
  __int128 v782 = v49;
  sub_41004((uint64_t)&v784, (uint64_t)(v48 + 3));
  memset(v785, 0, sizeof(v785));
  sub_6B58((char *)v785, (__int128 *)v48[8], (__int128 *)v48[9], 0xAAAAAAAAAAAAAAABLL * ((v48[9] - v48[8]) >> 3));
  sub_23F4((int)v704, "ClippedPrimitives");
  uint64_t v50 = (uint64_t *)sub_24C8((uint64_t)v704, 0xFu, 3LL, (uint64_t)sub_2B210);
  uint64_t v51 = sub_2684(v50, "Xcode Derived Counters");
  __int128 v52 = *(_OWORD *)v51;
  int v787 = *((_DWORD *)v51 + 4);
  __int128 v786 = v52;
  sub_41004((uint64_t)&v788, (uint64_t)(v51 + 3));
  memset(v789, 0, sizeof(v789));
  sub_6B58((char *)v789, (__int128 *)v51[8], (__int128 *)v51[9], 0xAAAAAAAAAAAAAAABLL * ((v51[9] - v51[8]) >> 3));
  sub_23F4((int)v703, "ClippedPrimitivesPercent");
  unint64_t v53 = (uint64_t *)sub_24C8((uint64_t)v703, 0xFu, 3LL, (uint64_t)sub_2B2A4);
  uint64_t v54 = sub_2684(v53, "Xcode Derived Counters");
  __int128 v55 = *(_OWORD *)v54;
  int v791 = *((_DWORD *)v54 + 4);
  __int128 v790 = v55;
  sub_41004((uint64_t)&v792, (uint64_t)(v54 + 3));
  memset(v793, 0, sizeof(v793));
  sub_6B58((char *)v793, (__int128 *)v54[8], (__int128 *)v54[9], 0xAAAAAAAAAAAAAAABLL * ((v54[9] - v54[8]) >> 3));
  sub_23F4((int)v702, "BackFaceCullPrims");
  double v56 = (uint64_t *)sub_24C8((uint64_t)v702, 0xFu, 3LL, (uint64_t)sub_2B384);
  uint64_t v57 = sub_2684(v56, "Xcode Derived Counters");
  __int128 v58 = *(_OWORD *)v57;
  int v795 = *((_DWORD *)v57 + 4);
  __int128 v794 = v58;
  sub_41004((uint64_t)&v796, (uint64_t)(v57 + 3));
  memset(v797, 0, sizeof(v797));
  sub_6B58((char *)v797, (__int128 *)v57[8], (__int128 *)v57[9], 0xAAAAAAAAAAAAAAABLL * ((v57[9] - v57[8]) >> 3));
  sub_23F4((int)v701, "BackFaceClippedPrims");
  double v59 = (uint64_t *)sub_24C8((uint64_t)v701, 0xFu, 3LL, (uint64_t)sub_2B3C0);
  uint64_t v60 = sub_2684(v59, "Xcode Derived Counters");
  __int128 v61 = *(_OWORD *)v60;
  int v799 = *((_DWORD *)v60 + 4);
  __int128 v798 = v61;
  sub_41004((uint64_t)&v800, (uint64_t)(v60 + 3));
  memset(v801, 0, sizeof(v801));
  sub_6B58((char *)v801, (__int128 *)v60[8], (__int128 *)v60[9], 0xAAAAAAAAAAAAAAABLL * ((v60[9] - v60[8]) >> 3));
  sub_23F4((int)v700, "SmallTriangleClippedPrims");
  unint64_t v62 = (uint64_t *)sub_24C8((uint64_t)v700, 0xFu, 3LL, (uint64_t)sub_2B3FC);
  uint64_t v63 = sub_2684(v62, "Xcode Derived Counters");
  __int128 v64 = *(_OWORD *)v63;
  int v803 = *((_DWORD *)v63 + 4);
  __int128 v802 = v64;
  sub_41004((uint64_t)&v804, (uint64_t)(v63 + 3));
  memset(v805, 0, sizeof(v805));
  sub_6B58((char *)v805, (__int128 *)v63[8], (__int128 *)v63[9], 0xAAAAAAAAAAAAAAABLL * ((v63[9] - v63[8]) >> 3));
  sub_23F4((int)v699, "TrianglesCreatedByClipper");
  unsigned int v65 = (uint64_t *)sub_24C8((uint64_t)v699, 0xFu, 3LL, (uint64_t)sub_2B438);
  uint64_t v66 = sub_2684(v65, "Xcode Derived Counters");
  __int128 v67 = *(_OWORD *)v66;
  int v807 = *((_DWORD *)v66 + 4);
  __int128 v806 = v67;
  sub_41004((uint64_t)&v808, (uint64_t)(v66 + 3));
  memset(v809, 0, sizeof(v809));
  sub_6B58((char *)v809, (__int128 *)v66[8], (__int128 *)v66[9], 0xAAAAAAAAAAAAAAABLL * ((v66[9] - v66[8]) >> 3));
  sub_23F4((int)v698, "VerticesCreatedByClipper");
  double v68 = (uint64_t *)sub_24C8((uint64_t)v698, 0xFu, 3LL, (uint64_t)sub_2B474);
  uint64_t v69 = sub_2684(v68, "Xcode Derived Counters");
  __int128 v70 = *(_OWORD *)v69;
  int v811 = *((_DWORD *)v69 + 4);
  __int128 v810 = v70;
  sub_41004((uint64_t)&v812, (uint64_t)(v69 + 3));
  memset(v813, 0, sizeof(v813));
  sub_6B58((char *)v813, (__int128 *)v69[8], (__int128 *)v69[9], 0xAAAAAAAAAAAAAAABLL * ((v69[9] - v69[8]) >> 3));
  sub_23F4((int)v697, "InputPrimitivesPostClipping");
  double v71 = (uint64_t *)sub_24C8((uint64_t)v697, 0xFu, 3LL, (uint64_t)sub_2B4B0);
  uint64_t v72 = sub_2684(v71, "Xcode Derived Counters");
  __int128 v73 = *(_OWORD *)v72;
  int v815 = *((_DWORD *)v72 + 4);
  __int128 v814 = v73;
  sub_41004((uint64_t)&v816, (uint64_t)(v72 + 3));
  memset(v817, 0, sizeof(v817));
  sub_6B58((char *)v817, (__int128 *)v72[8], (__int128 *)v72[9], 0xAAAAAAAAAAAAAAABLL * ((v72[9] - v72[8]) >> 3));
  sub_23F4((int)v696, "SmallTriangleCullPrims");
  unsigned int v74 = (uint64_t *)sub_24C8((uint64_t)v696, 0xFu, 3LL, (uint64_t)sub_2B610);
  uint64_t v75 = sub_2684(v74, "Xcode Derived Counters");
  __int128 v76 = *(_OWORD *)v75;
  int v819 = *((_DWORD *)v75 + 4);
  __int128 v818 = v76;
  sub_41004((uint64_t)&v820, (uint64_t)(v75 + 3));
  memset(v821, 0, sizeof(v821));
  sub_6B58((char *)v821, (__int128 *)v75[8], (__int128 *)v75[9], 0xAAAAAAAAAAAAAAABLL * ((v75[9] - v75[8]) >> 3));
  sub_23F4((int)v695, "BackFaceCullPrimsPercent");
  double v77 = (uint64_t *)sub_24C8((uint64_t)v695, 0xFu, 3LL, (uint64_t)sub_2B840);
  uint64_t v78 = sub_2684(v77, "Xcode Derived Counters");
  __int128 v79 = *(_OWORD *)v78;
  int v823 = *((_DWORD *)v78 + 4);
  __int128 v822 = v79;
  sub_41004((uint64_t)&v824, (uint64_t)(v78 + 3));
  memset(v825, 0, sizeof(v825));
  sub_6B58((char *)v825, (__int128 *)v78[8], (__int128 *)v78[9], 0xAAAAAAAAAAAAAAABLL * ((v78[9] - v78[8]) >> 3));
  sub_23F4((int)v694, "SmallTriangleCullPrimsPercent");
  double v80 = (uint64_t *)sub_24C8((uint64_t)v694, 0xFu, 3LL, (uint64_t)sub_2B99C);
  uint64_t v81 = sub_2684(v80, "Xcode Derived Counters");
  __int128 v82 = *(_OWORD *)v81;
  int v827 = *((_DWORD *)v81 + 4);
  __int128 v826 = v82;
  sub_41004((uint64_t)&v828, (uint64_t)(v81 + 3));
  memset(v829, 0, sizeof(v829));
  sub_6B58((char *)v829, (__int128 *)v81[8], (__int128 *)v81[9], 0xAAAAAAAAAAAAAAABLL * ((v81[9] - v81[8]) >> 3));
  sub_23F4((int)v693, "GuardBandCullPrims");
  double v83 = (uint64_t *)sub_24C8((uint64_t)v693, 0xFu, 3LL, (uint64_t)sub_2BAF8);
  uint64_t v84 = sub_2684(v83, "Xcode Derived Counters");
  __int128 v85 = *(_OWORD *)v84;
  int v831 = *((_DWORD *)v84 + 4);
  __int128 v830 = v85;
  sub_41004((uint64_t)&v832, (uint64_t)(v84 + 3));
  memset(v833, 0, sizeof(v833));
  sub_6B58((char *)v833, (__int128 *)v84[8], (__int128 *)v84[9], 0xAAAAAAAAAAAAAAABLL * ((v84[9] - v84[8]) >> 3));
  sub_23F4((int)v692, "GuardBandCullPrimsPercent");
  double v86 = (uint64_t *)sub_24C8((uint64_t)v692, 0xFu, 3LL, (uint64_t)sub_2BBDC);
  uint64_t v87 = sub_2684(v86, "Xcode Derived Counters");
  __int128 v88 = *(_OWORD *)v87;
  int v835 = *((_DWORD *)v87 + 4);
  __int128 v834 = v88;
  sub_41004((uint64_t)&v836, (uint64_t)(v87 + 3));
  memset(v837, 0, sizeof(v837));
  sub_6B58((char *)v837, (__int128 *)v87[8], (__int128 *)v87[9], 0xAAAAAAAAAAAAAAABLL * ((v87[9] - v87[8]) >> 3));
  sub_23F4((int)v691, "OffscreenCullPrims");
  uint64_t v89 = (uint64_t *)sub_24C8((uint64_t)v691, 0xFu, 3LL, (uint64_t)sub_2BD38);
  uint64_t v90 = sub_2684(v89, "Xcode Derived Counters");
  __int128 v91 = *(_OWORD *)v90;
  int v839 = *((_DWORD *)v90 + 4);
  __int128 v838 = v91;
  sub_41004((uint64_t)&v840, (uint64_t)(v90 + 3));
  memset(v841, 0, sizeof(v841));
  sub_6B58((char *)v841, (__int128 *)v90[8], (__int128 *)v90[9], 0xAAAAAAAAAAAAAAABLL * ((v90[9] - v90[8]) >> 3));
  sub_23F4((int)v690, "OffscreenCullPrimsPercent");
  double v92 = (uint64_t *)sub_24C8((uint64_t)v690, 0xFu, 3LL, (uint64_t)sub_2BE1C);
  uint64_t v93 = sub_2684(v92, "Xcode Derived Counters");
  __int128 v94 = *(_OWORD *)v93;
  int v843 = *((_DWORD *)v93 + 4);
  __int128 v842 = v94;
  sub_41004((uint64_t)&v844, (uint64_t)(v93 + 3));
  memset(v845, 0, sizeof(v845));
  sub_6B58((char *)v845, (__int128 *)v93[8], (__int128 *)v93[9], 0xAAAAAAAAAAAAAAABLL * ((v93[9] - v93[8]) >> 3));
  sub_23F4((int)v689, "CulledPrimitives");
  double v95 = (uint64_t *)sub_24C8((uint64_t)v689, 0xFu, 3LL, (uint64_t)sub_2BF78);
  uint64_t v96 = sub_2684(v95, "Xcode Derived Counters");
  __int128 v97 = *(_OWORD *)v96;
  int v847 = *((_DWORD *)v96 + 4);
  __int128 v846 = v97;
  sub_41004((uint64_t)&v848, (uint64_t)(v96 + 3));
  memset(v849, 0, sizeof(v849));
  sub_6B58((char *)v849, (__int128 *)v96[8], (__int128 *)v96[9], 0xAAAAAAAAAAAAAAABLL * ((v96[9] - v96[8]) >> 3));
  sub_23F4((int)v688, "CulledPrimitivesPercent");
  unint64_t v98 = (uint64_t *)sub_24C8((uint64_t)v688, 0xFu, 3LL, (uint64_t)sub_2C088);
  unint64_t v99 = sub_2684(v98, "Xcode Derived Counters");
  __int128 v100 = *(_OWORD *)v99;
  int v851 = *((_DWORD *)v99 + 4);
  __int128 v850 = v100;
  sub_41004((uint64_t)&v852, (uint64_t)(v99 + 3));
  memset(v853, 0, sizeof(v853));
  sub_6B58((char *)v853, (__int128 *)v99[8], (__int128 *)v99[9], 0xAAAAAAAAAAAAAAABLL * ((v99[9] - v99[8]) >> 3));
  sub_23F4((int)v687, "FragmentsRasterized");
  double v101 = (uint64_t *)sub_24C8((uint64_t)v687, 0xFu, 3LL, (uint64_t)sub_2C1E4);
  double v102 = sub_2684(v101, "Xcode Derived Counters");
  __int128 v103 = *(_OWORD *)v102;
  int v855 = *((_DWORD *)v102 + 4);
  __int128 v854 = v103;
  sub_41004((uint64_t)&v856, (uint64_t)(v102 + 3));
  memset(v857, 0, sizeof(v857));
  sub_6B58((char *)v857, (__int128 *)v102[8], (__int128 *)v102[9], 0xAAAAAAAAAAAAAAABLL * ((v102[9] - v102[8]) >> 3));
  sub_23F4((int)v686, "PreZPassCount");
  double v104 = (uint64_t *)sub_24C8((uint64_t)v686, 0xFu, 3LL, (uint64_t)sub_2C400);
  double v105 = sub_2684(v104, "Xcode Derived Counters");
  __int128 v106 = *(_OWORD *)v105;
  int v859 = *((_DWORD *)v105 + 4);
  __int128 v858 = v106;
  sub_41004((uint64_t)&v860, (uint64_t)(v105 + 3));
  memset(v861, 0, sizeof(v861));
  sub_6B58((char *)v861, (__int128 *)v105[8], (__int128 *)v105[9], 0xAAAAAAAAAAAAAAABLL * ((v105[9] - v105[8]) >> 3));
  sub_23F4((int)v685, "PreZFailCount");
  uint64_t v107 = (uint64_t *)sub_24C8((uint64_t)v685, 0xFu, 3LL, (uint64_t)sub_2C61C);
  uint64_t v108 = sub_2684(v107, "Xcode Derived Counters");
  __int128 v109 = *(_OWORD *)v108;
  int v863 = *((_DWORD *)v108 + 4);
  __int128 v862 = v109;
  sub_41004((uint64_t)&v864, (uint64_t)(v108 + 3));
  memset(v865, 0, sizeof(v865));
  sub_6B58((char *)v865, (__int128 *)v108[8], (__int128 *)v108[9], 0xAAAAAAAAAAAAAAABLL * ((v108[9] - v108[8]) >> 3));
  sub_23F4((int)v684, "PreZFailCountPercent");
  double v110 = (uint64_t *)sub_24C8((uint64_t)v684, 0xFu, 3LL, (uint64_t)sub_2C72C);
  double v111 = sub_2684(v110, "Xcode Derived Counters");
  __int128 v112 = *(_OWORD *)v111;
  int v867 = *((_DWORD *)v111 + 4);
  __int128 v866 = v112;
  sub_41004((uint64_t)&v868, (uint64_t)(v111 + 3));
  memset(v869, 0, sizeof(v869));
  sub_6B58((char *)v869, (__int128 *)v111[8], (__int128 *)v111[9], 0xAAAAAAAAAAAAAAABLL * ((v111[9] - v111[8]) >> 3));
  sub_23F4((int)v683, "PreZPassCountPercent");
  double v113 = (uint64_t *)sub_24C8((uint64_t)v683, 0xFu, 3LL, (uint64_t)sub_2C80C);
  unint64_t v114 = sub_2684(v113, "Xcode Derived Counters");
  __int128 v115 = *(_OWORD *)v114;
  int v871 = *((_DWORD *)v114 + 4);
  __int128 v870 = v115;
  sub_41004((uint64_t)&v872, (uint64_t)(v114 + 3));
  memset(v873, 0, sizeof(v873));
  sub_6B58((char *)v873, (__int128 *)v114[8], (__int128 *)v114[9], 0xAAAAAAAAAAAAAAABLL * ((v114[9] - v114[8]) >> 3));
  sub_23F4((int)v682, "AverageOverdraw");
  uint64_t v116 = (uint64_t *)sub_24C8((uint64_t)v682, 0xFu, 3LL, (uint64_t)sub_2C8EC);
  uint64_t v117 = sub_2684(v116, "Xcode Derived Counters");
  __int128 v118 = *(_OWORD *)v117;
  int v875 = *((_DWORD *)v117 + 4);
  __int128 v874 = v118;
  sub_41004((uint64_t)&v876, (uint64_t)(v117 + 3));
  memset(v877, 0, sizeof(v877));
  sub_6B58((char *)v877, (__int128 *)v117[8], (__int128 *)v117[9], 0xAAAAAAAAAAAAAAABLL * ((v117[9] - v117[8]) >> 3));
  sub_23F4((int)v681, "PixelsPerTile");
  unint64_t v119 = (uint64_t *)sub_24C8((uint64_t)v681, 0xFu, 3LL, (uint64_t)sub_2CA1C);
  unint64_t v120 = sub_2684(v119, "Xcode Derived Counters");
  __int128 v121 = *(_OWORD *)v120;
  int v879 = *((_DWORD *)v120 + 4);
  __int128 v878 = v121;
  sub_41004((uint64_t)&v880, (uint64_t)(v120 + 3));
  memset(v881, 0, sizeof(v881));
  sub_6B58((char *)v881, (__int128 *)v120[8], (__int128 *)v120[9], 0xAAAAAAAAAAAAAAABLL * ((v120[9] - v120[8]) >> 3));
  sub_23F4((int)v680, "TextureSamples");
  double v122 = (uint64_t *)sub_24C8((uint64_t)v680, 0xFu, 3LL, (uint64_t)sub_2CAB0);
  int v123 = sub_2684(v122, "Xcode Derived Counters");
  __int128 v124 = *(_OWORD *)v123;
  int v883 = *((_DWORD *)v123 + 4);
  __int128 v882 = v124;
  sub_41004((uint64_t)&v884, (uint64_t)(v123 + 3));
  memset(v885, 0, sizeof(v885));
  sub_6B58((char *)v885, (__int128 *)v123[8], (__int128 *)v123[9], 0xAAAAAAAAAAAAAAABLL * ((v123[9] - v123[8]) >> 3));
  sub_23F4((int)v679, "VSTextureSamplesPerInvocation");
  double v125 = (uint64_t *)sub_24C8((uint64_t)v679, 0xFu, 3LL, (uint64_t)sub_2CC48);
  double v126 = sub_2684(v125, "Xcode Derived Counters");
  __int128 v127 = *(_OWORD *)v126;
  int v887 = *((_DWORD *)v126 + 4);
  __int128 v886 = v127;
  sub_41004((uint64_t)&v888, (uint64_t)(v126 + 3));
  memset(v889, 0, sizeof(v889));
  sub_6B58((char *)v889, (__int128 *)v126[8], (__int128 *)v126[9], 0xAAAAAAAAAAAAAAABLL * ((v126[9] - v126[8]) >> 3));
  sub_23F4((int)v678, "FSTextureSamplesPerInvocation");
  double v128 = (uint64_t *)sub_24C8((uint64_t)v678, 0xFu, 3LL, (uint64_t)sub_2CCDC);
  double v129 = sub_2684(v128, "Xcode Derived Counters");
  __int128 v130 = *(_OWORD *)v129;
  int v891 = *((_DWORD *)v129 + 4);
  __int128 v890 = v130;
  sub_41004((uint64_t)&v892, (uint64_t)(v129 + 3));
  memset(v893, 0, sizeof(v893));
  sub_6B58((char *)v893, (__int128 *)v129[8], (__int128 *)v129[9], 0xAAAAAAAAAAAAAAABLL * ((v129[9] - v129[8]) >> 3));
  sub_23F4((int)v677, "CSTextureSamplesPerInvocation");
  uint64_t v131 = (uint64_t *)sub_24C8((uint64_t)v677, 0xFu, 3LL, (uint64_t)sub_2CD70);
  unsigned int v132 = sub_2684(v131, "Xcode Derived Counters");
  __int128 v133 = *(_OWORD *)v132;
  int v895 = *((_DWORD *)v132 + 4);
  __int128 v894 = v133;
  sub_41004((uint64_t)&v896, (uint64_t)(v132 + 3));
  memset(v897, 0, sizeof(v897));
  sub_6B58((char *)v897, (__int128 *)v132[8], (__int128 *)v132[9], 0xAAAAAAAAAAAAAAABLL * ((v132[9] - v132[8]) >> 3));
  sub_23F4((int)v676, "AverageAnisotropicRatio");
  double v134 = (uint64_t *)sub_24C8((uint64_t)v676, 0xFu, 3LL, (uint64_t)sub_2CE04);
  uint64_t v135 = sub_2684(v134, "Xcode Derived Counters");
  __int128 v136 = *(_OWORD *)v135;
  int v899 = *((_DWORD *)v135 + 4);
  __int128 v898 = v136;
  sub_41004((uint64_t)&v900, (uint64_t)(v135 + 3));
  memset(v901, 0, sizeof(v901));
  sub_6B58((char *)v901, (__int128 *)v135[8], (__int128 *)v135[9], 0xAAAAAAAAAAAAAAABLL * ((v135[9] - v135[8]) >> 3));
  sub_23F4((int)v675, "TextureAccesses");
  uint64_t v137 = (uint64_t *)sub_24C8((uint64_t)v675, 0xFu, 3LL, (uint64_t)sub_2D370);
  double v138 = sub_2684(v137, "Xcode Derived Counters");
  __int128 v139 = *(_OWORD *)v138;
  int v903 = *((_DWORD *)v138 + 4);
  __int128 v902 = v139;
  sub_41004((uint64_t)&v904, (uint64_t)(v138 + 3));
  memset(v905, 0, sizeof(v905));
  sub_6B58((char *)v905, (__int128 *)v138[8], (__int128 *)v138[9], 0xAAAAAAAAAAAAAAABLL * ((v138[9] - v138[8]) >> 3));
  sub_23F4((int)v674, "TextureQuads");
  double v140 = (uint64_t *)sub_24C8((uint64_t)v674, 0xFu, 3LL, (uint64_t)sub_2D404);
  int v141 = sub_2684(v140, "Xcode Derived Counters");
  __int128 v142 = *(_OWORD *)v141;
  int v907 = *((_DWORD *)v141 + 4);
  __int128 v906 = v142;
  sub_41004((uint64_t)&v908, (uint64_t)(v141 + 3));
  memset(v909, 0, sizeof(v909));
  sub_6B58((char *)v909, (__int128 *)v141[8], (__int128 *)v141[9], 0xAAAAAAAAAAAAAAABLL * ((v141[9] - v141[8]) >> 3));
  sub_23F4((int)v673, "FPSSpeedupFactor");
  char v143 = (uint64_t *)sub_24C8((uint64_t)v673, 0xFu, 3LL, (uint64_t)sub_2D498);
  double v144 = sub_2684(v143, "Xcode Derived Counters");
  __int128 v145 = *(_OWORD *)v144;
  int v911 = *((_DWORD *)v144 + 4);
  __int128 v910 = v145;
  sub_41004((uint64_t)&v912, (uint64_t)(v144 + 3));
  memset(v913, 0, sizeof(v913));
  sub_6B58((char *)v913, (__int128 *)v144[8], (__int128 *)v144[9], 0xAAAAAAAAAAAAAAABLL * ((v144[9] - v144[8]) >> 3));
  sub_23F4((int)v672, "TextureQuadsGathered");
  unint64_t v146 = (uint64_t *)sub_24C8((uint64_t)v672, 0xFu, 3LL, (uint64_t)sub_2D54C);
  unint64_t v147 = sub_2684(v146, "Xcode Derived Counters");
  __int128 v148 = *(_OWORD *)v147;
  int v915 = *((_DWORD *)v147 + 4);
  __int128 v914 = v148;
  sub_41004((uint64_t)&v916, (uint64_t)(v147 + 3));
  memset(v917, 0, sizeof(v917));
  sub_6B58((char *)v917, (__int128 *)v147[8], (__int128 *)v147[9], 0xAAAAAAAAAAAAAAABLL * ((v147[9] - v147[8]) >> 3));
  sub_23F4((int)v671, "AnisotropicSamples");
  uint64_t v149 = (uint64_t *)sub_24C8((uint64_t)v671, 0xFu, 3LL, (uint64_t)sub_2D5DC);
  uint64_t v150 = sub_2684(v149, "Xcode Derived Counters");
  __int128 v151 = *(_OWORD *)v150;
  int v919 = *((_DWORD *)v150 + 4);
  __int128 v918 = v151;
  sub_41004((uint64_t)&v920, (uint64_t)(v150 + 3));
  memset(v921, 0, sizeof(v921));
  sub_6B58((char *)v921, (__int128 *)v150[8], (__int128 *)v150[9], 0xAAAAAAAAAAAAAAABLL * ((v150[9] - v150[8]) >> 3));
  sub_23F4((int)v670, "AnisotropicSamplesPercent");
  char v152 = (uint64_t *)sub_24C8((uint64_t)v670, 0xFu, 3LL, (uint64_t)sub_2D66C);
  char v153 = sub_2684(v152, "Xcode Derived Counters");
  __int128 v154 = *(_OWORD *)v153;
  int v923 = *((_DWORD *)v153 + 4);
  __int128 v922 = v154;
  sub_41004((uint64_t)&v924, (uint64_t)(v153 + 3));
  memset(v925, 0, sizeof(v925));
  sub_6B58((char *)v925, (__int128 *)v153[8], (__int128 *)v153[9], 0xAAAAAAAAAAAAAAABLL * ((v153[9] - v153[8]) >> 3));
  sub_23F4((int)v669, "MipmapLinearSamples");
  uint64_t v155 = (uint64_t *)sub_24C8((uint64_t)v669, 0xFu, 3LL, (uint64_t)sub_2D74C);
  uint64_t v156 = sub_2684(v155, "Xcode Derived Counters");
  __int128 v157 = *(_OWORD *)v156;
  int v927 = *((_DWORD *)v156 + 4);
  __int128 v926 = v157;
  sub_41004((uint64_t)&v928, (uint64_t)(v156 + 3));
  memset(v929, 0, sizeof(v929));
  sub_6B58((char *)v929, (__int128 *)v156[8], (__int128 *)v156[9], 0xAAAAAAAAAAAAAAABLL * ((v156[9] - v156[8]) >> 3));
  sub_23F4((int)v668, "MipmapLinearSamplesPercent");
  unint64_t v158 = (uint64_t *)sub_24C8((uint64_t)v668, 0xFu, 3LL, (uint64_t)sub_2D7DC);
  unint64_t v159 = sub_2684(v158, "Xcode Derived Counters");
  __int128 v160 = *(_OWORD *)v159;
  int v931 = *((_DWORD *)v159 + 4);
  __int128 v930 = v160;
  sub_41004((uint64_t)&v932, (uint64_t)(v159 + 3));
  memset(v933, 0, sizeof(v933));
  sub_6B58((char *)v933, (__int128 *)v159[8], (__int128 *)v159[9], 0xAAAAAAAAAAAAAAABLL * ((v159[9] - v159[8]) >> 3));
  sub_23F4((int)v667, "MipmapNearestSamples");
  double v161 = (uint64_t *)sub_24C8((uint64_t)v667, 0xFu, 3LL, (uint64_t)sub_2D8BC);
  int v162 = sub_2684(v161, "Xcode Derived Counters");
  __int128 v163 = *(_OWORD *)v162;
  int v935 = *((_DWORD *)v162 + 4);
  __int128 v934 = v163;
  sub_41004((uint64_t)&v936, (uint64_t)(v162 + 3));
  memset(v937, 0, sizeof(v937));
  sub_6B58((char *)v937, (__int128 *)v162[8], (__int128 *)v162[9], 0xAAAAAAAAAAAAAAABLL * ((v162[9] - v162[8]) >> 3));
  sub_23F4((int)v666, "MipmapNearestSamplesPercent");
  int v164 = (uint64_t *)sub_24C8((uint64_t)v666, 0xFu, 3LL, (uint64_t)sub_2D94C);
  char v165 = sub_2684(v164, "Xcode Derived Counters");
  __int128 v166 = *(_OWORD *)v165;
  int v939 = *((_DWORD *)v165 + 4);
  __int128 v938 = v166;
  sub_41004((uint64_t)&v940, (uint64_t)(v165 + 3));
  memset(v941, 0, sizeof(v941));
  sub_6B58((char *)v941, (__int128 *)v165[8], (__int128 *)v165[9], 0xAAAAAAAAAAAAAAABLL * ((v165[9] - v165[8]) >> 3));
  sub_23F4((int)v665, "CompressedSamples");
  int v167 = (uint64_t *)sub_24C8((uint64_t)v665, 0xFu, 3LL, (uint64_t)sub_2DA2C);
  char v168 = sub_2684(v167, "Xcode Derived Counters");
  __int128 v169 = *(_OWORD *)v168;
  int v943 = *((_DWORD *)v168 + 4);
  __int128 v942 = v169;
  sub_41004((uint64_t)&v944, (uint64_t)(v168 + 3));
  memset(v945, 0, sizeof(v945));
  sub_6B58((char *)v945, (__int128 *)v168[8], (__int128 *)v168[9], 0xAAAAAAAAAAAAAAABLL * ((v168[9] - v168[8]) >> 3));
  sub_23F4((int)v664, "CompressedSamplesPercent");
  unint64_t v170 = (uint64_t *)sub_24C8((uint64_t)v664, 0xFu, 3LL, (uint64_t)sub_2E330);
  double v171 = sub_2684(v170, "Xcode Derived Counters");
  __int128 v172 = *(_OWORD *)v171;
  int v947 = *((_DWORD *)v171 + 4);
  __int128 v946 = v172;
  sub_41004((uint64_t)&v948, (uint64_t)(v171 + 3));
  memset(v949, 0, sizeof(v949));
  sub_6B58((char *)v949, (__int128 *)v171[8], (__int128 *)v171[9], 0xAAAAAAAAAAAAAAABLL * ((v171[9] - v171[8]) >> 3));
  sub_23F4((int)v663, "LosslessCompressedSamples");
  unint64_t v173 = (uint64_t *)sub_24C8((uint64_t)v663, 0xFu, 3LL, (uint64_t)sub_2E544);
  uint64_t v174 = sub_2684(v173, "Xcode Derived Counters");
  __int128 v175 = *(_OWORD *)v174;
  int v951 = *((_DWORD *)v174 + 4);
  __int128 v950 = v175;
  sub_41004((uint64_t)&v952, (uint64_t)(v174 + 3));
  memset(v953, 0, sizeof(v953));
  sub_6B58((char *)v953, (__int128 *)v174[8], (__int128 *)v174[9], 0xAAAAAAAAAAAAAAABLL * ((v174[9] - v174[8]) >> 3));
  sub_23F4((int)v662, "LosslessCompressedSamplesPercent");
  unsigned int v176 = (uint64_t *)sub_24C8((uint64_t)v662, 0xFu, 3LL, (uint64_t)sub_2E5D4);
  double v177 = sub_2684(v176, "Xcode Derived Counters");
  __int128 v178 = *(_OWORD *)v177;
  int v955 = *((_DWORD *)v177 + 4);
  __int128 v954 = v178;
  sub_41004((uint64_t)&v956, (uint64_t)(v177 + 3));
  memset(v957, 0, sizeof(v957));
  sub_6B58((char *)v957, (__int128 *)v177[8], (__int128 *)v177[9], 0xAAAAAAAAAAAAAAABLL * ((v177[9] - v177[8]) >> 3));
  sub_23F4((int)v661, "LossyCompressedSamples");
  char v179 = (uint64_t *)sub_24C8((uint64_t)v661, 0xFu, 3LL, (uint64_t)sub_2E76C);
  char v180 = sub_2684(v179, "Xcode Derived Counters");
  __int128 v181 = *(_OWORD *)v180;
  int v959 = *((_DWORD *)v180 + 4);
  __int128 v958 = v181;
  sub_41004((uint64_t)&v960, (uint64_t)(v180 + 3));
  memset(v961, 0, sizeof(v961));
  sub_6B58((char *)v961, (__int128 *)v180[8], (__int128 *)v180[9], 0xAAAAAAAAAAAAAAABLL * ((v180[9] - v180[8]) >> 3));
  sub_23F4((int)v660, "LossyCompressedSamplesPercent");
  int v182 = (uint64_t *)sub_24C8((uint64_t)v660, 0xFu, 3LL, (uint64_t)sub_2E7FC);
  uint64_t v183 = sub_2684(v182, "Xcode Derived Counters");
  __int128 v184 = *(_OWORD *)v183;
  int v963 = *((_DWORD *)v183 + 4);
  __int128 v962 = v184;
  sub_41004((uint64_t)&v964, (uint64_t)(v183 + 3));
  memset(v965, 0, sizeof(v965));
  sub_6B58((char *)v965, (__int128 *)v183[8], (__int128 *)v183[9], 0xAAAAAAAAAAAAAAABLL * ((v183[9] - v183[8]) >> 3));
  sub_23F4((int)v659, "UncompressedSamples");
  uint64_t v185 = (uint64_t *)sub_24C8((uint64_t)v659, 0xFu, 3LL, (uint64_t)sub_2E994);
  double v186 = sub_2684(v185, "Xcode Derived Counters");
  __int128 v187 = *(_OWORD *)v186;
  int v967 = *((_DWORD *)v186 + 4);
  __int128 v966 = v187;
  sub_41004((uint64_t)&v968, (uint64_t)(v186 + 3));
  memset(v969, 0, sizeof(v969));
  sub_6B58((char *)v969, (__int128 *)v186[8], (__int128 *)v186[9], 0xAAAAAAAAAAAAAAABLL * ((v186[9] - v186[8]) >> 3));
  sub_23F4((int)v658, "UnCompressedSamplesPercent");
  unint64_t v188 = (uint64_t *)sub_24C8((uint64_t)v658, 0xFu, 3LL, (uint64_t)sub_2EB34);
  uint64_t v189 = sub_2684(v188, "Xcode Derived Counters");
  __int128 v190 = *(_OWORD *)v189;
  int v971 = *((_DWORD *)v189 + 4);
  __int128 v970 = v190;
  sub_41004((uint64_t)&v972, (uint64_t)(v189 + 3));
  memset(v973, 0, sizeof(v973));
  sub_6B58((char *)v973, (__int128 *)v189[8], (__int128 *)v189[9], 0xAAAAAAAAAAAAAAABLL * ((v189[9] - v189[8]) >> 3));
  sub_23F4((int)v657, "PixelsUnbiasedWrittenToMemory");
  int v191 = (uint64_t *)sub_24C8((uint64_t)v657, 0xFu, 3LL, (uint64_t)sub_2ED44);
  char v192 = sub_2684(v191, "Xcode Derived Counters");
  __int128 v193 = *(_OWORD *)v192;
  int v975 = *((_DWORD *)v192 + 4);
  __int128 v974 = v193;
  sub_41004((uint64_t)&v976, (uint64_t)(v192 + 3));
  memset(v977, 0, sizeof(v977));
  sub_6B58((char *)v977, (__int128 *)v192[8], (__int128 *)v192[9], 0xAAAAAAAAAAAAAAABLL * ((v192[9] - v192[8]) >> 3));
  sub_23F4((int)v656, "TexturePixelsWrittenToMemory");
  char v194 = (uint64_t *)sub_24C8((uint64_t)v656, 0xFu, 3LL, (uint64_t)sub_2EDD4);
  double v195 = sub_2684(v194, "Xcode Derived Counters");
  __int128 v196 = *(_OWORD *)v195;
  int v979 = *((_DWORD *)v195 + 4);
  __int128 v978 = v196;
  sub_41004((uint64_t)&v980, (uint64_t)(v195 + 3));
  memset(v981, 0, sizeof(v981));
  sub_6B58((char *)v981, (__int128 *)v195[8], (__int128 *)v195[9], 0xAAAAAAAAAAAAAAABLL * ((v195[9] - v195[8]) >> 3));
  sub_23F4((int)v655, "PixelsWrittenToMemory");
  char v197 = (uint64_t *)sub_24C8((uint64_t)v655, 0xFu, 3LL, (uint64_t)sub_2EEB0);
  double v198 = sub_2684(v197, "Xcode Derived Counters");
  __int128 v199 = *(_OWORD *)v198;
  int v983 = *((_DWORD *)v198 + 4);
  __int128 v982 = v199;
  sub_41004((uint64_t)&v984, (uint64_t)(v198 + 3));
  memset(v985, 0, sizeof(v985));
  sub_6B58((char *)v985, (__int128 *)v198[8], (__int128 *)v198[9], 0xAAAAAAAAAAAAAAABLL * ((v198[9] - v198[8]) >> 3));
  sub_23F4((int)v654, "AttachmentPixelsWrittenToMemory");
  unint64_t v200 = (uint64_t *)sub_24C8((uint64_t)v654, 0xFu, 3LL, (uint64_t)sub_2EF80);
  unint64_t v201 = sub_2684(v200, "Xcode Derived Counters");
  __int128 v202 = *(_OWORD *)v201;
  int v987 = *((_DWORD *)v201 + 4);
  __int128 v986 = v202;
  sub_41004((uint64_t)&v988, (uint64_t)(v201 + 3));
  memset(v989, 0, sizeof(v989));
  sub_6B58((char *)v989, (__int128 *)v201[8], (__int128 *)v201[9], 0xAAAAAAAAAAAAAAABLL * ((v201[9] - v201[8]) >> 3));
  sub_23F4((int)v653, "CompressedPixelsWrittenToMemory");
  uint64_t v203 = (uint64_t *)sub_24C8((uint64_t)v653, 0xFu, 3LL, (uint64_t)sub_2F090);
  uint64_t v204 = sub_2684(v203, "Xcode Derived Counters");
  __int128 v205 = *(_OWORD *)v204;
  int v991 = *((_DWORD *)v204 + 4);
  __int128 v990 = v205;
  sub_41004((uint64_t)&v992, (uint64_t)(v204 + 3));
  memset(v993, 0, sizeof(v993));
  sub_6B58((char *)v993, (__int128 *)v204[8], (__int128 *)v204[9], 0xAAAAAAAAAAAAAAABLL * ((v204[9] - v204[8]) >> 3));
  sub_23F4((int)v652, "LossyCompressedPixelsWrittenToMemory");
  char v206 = (uint64_t *)sub_24C8((uint64_t)v652, 0xFu, 3LL, (uint64_t)sub_2F16C);
  uint64_t v207 = sub_2684(v206, "Xcode Derived Counters");
  __int128 v208 = *(_OWORD *)v207;
  int v995 = *((_DWORD *)v207 + 4);
  __int128 v994 = v208;
  sub_41004((uint64_t)&v996, (uint64_t)(v207 + 3));
  memset(v997, 0, sizeof(v997));
  sub_6B58((char *)v997, (__int128 *)v207[8], (__int128 *)v207[9], 0xAAAAAAAAAAAAAAABLL * ((v207[9] - v207[8]) >> 3));
  sub_23F4((int)v651, "TotalSBUsedInLossyCompression");
  unint64_t v209 = (uint64_t *)sub_24C8((uint64_t)v651, 0xFu, 3LL, (uint64_t)sub_2F368);
  uint64_t v210 = sub_2684(v209, "Xcode Derived Counters");
  __int128 v211 = *(_OWORD *)v210;
  int v999 = *((_DWORD *)v210 + 4);
  __int128 v998 = v211;
  sub_41004((uint64_t)&v1000, (uint64_t)(v210 + 3));
  memset(v1001, 0, sizeof(v1001));
  sub_6B58((char *)v1001, (__int128 *)v210[8], (__int128 *)v210[9], 0xAAAAAAAAAAAAAAABLL * ((v210[9] - v210[8]) >> 3));
  sub_23F4((int)v650, "PercentageLosslessCompressedSB");
  uint64_t v212 = (uint64_t *)sub_24C8((uint64_t)v650, 0xFu, 3LL, (uint64_t)sub_2F524);
  uint64_t v213 = sub_2684(v212, "Xcode Derived Counters");
  __int128 v214 = *(_OWORD *)v213;
  int v1003 = *((_DWORD *)v213 + 4);
  __int128 v1002 = v214;
  sub_41004((uint64_t)&v1004, (uint64_t)(v213 + 3));
  memset(v1005, 0, sizeof(v1005));
  sub_6B58((char *)v1005, (__int128 *)v213[8], (__int128 *)v213[9], 0xAAAAAAAAAAAAAAABLL * ((v213[9] - v213[8]) >> 3));
  sub_23F4((int)v649, "PercentageLossyCompressedSBNoFB");
  unint64_t v215 = (uint64_t *)sub_24C8((uint64_t)v649, 0xFu, 3LL, (uint64_t)sub_2F67C);
  unint64_t v216 = sub_2684(v215, "Xcode Derived Counters");
  __int128 v217 = *(_OWORD *)v216;
  int v1007 = *((_DWORD *)v216 + 4);
  __int128 v1006 = v217;
  sub_41004((uint64_t)&v1008, (uint64_t)(v216 + 3));
  memset(v1009, 0, sizeof(v1009));
  sub_6B58((char *)v1009, (__int128 *)v216[8], (__int128 *)v216[9], 0xAAAAAAAAAAAAAAABLL * ((v216[9] - v216[8]) >> 3));
  sub_23F4((int)v648, "PercentageLossyCompressedSBWithFB");
  unint64_t v218 = (uint64_t *)sub_24C8((uint64_t)v648, 0xFu, 3LL, (uint64_t)sub_2F7D4);
  double v219 = sub_2684(v218, "Xcode Derived Counters");
  __int128 v220 = *(_OWORD *)v219;
  int v1011 = *((_DWORD *)v219 + 4);
  __int128 v1010 = v220;
  sub_41004((uint64_t)&v1012, (uint64_t)(v219 + 3));
  memset(v1013, 0, sizeof(v1013));
  sub_6B58((char *)v1013, (__int128 *)v219[8], (__int128 *)v219[9], 0xAAAAAAAAAAAAAAABLL * ((v219[9] - v219[8]) >> 3));
  sub_23F4((int)v647, "AverageFBRegionsLossyCompressedSBs");
  uint64_t v221 = (uint64_t *)sub_24C8((uint64_t)v647, 0xFu, 3LL, (uint64_t)sub_2FA08);
  uint64_t v222 = sub_2684(v221, "Xcode Derived Counters");
  __int128 v223 = *(_OWORD *)v222;
  int v1015 = *((_DWORD *)v222 + 4);
  __int128 v1014 = v223;
  sub_41004((uint64_t)&v1016, (uint64_t)(v222 + 3));
  memset(v1017, 0, sizeof(v1017));
  sub_6B58((char *)v1017, (__int128 *)v222[8], (__int128 *)v222[9], 0xAAAAAAAAAAAAAAABLL * ((v222[9] - v222[8]) >> 3));
  sub_23F4((int)v646, "TexturePixelsWrittenToMemoryPercent");
  unint64_t v224 = (uint64_t *)sub_24C8((uint64_t)v646, 0xFu, 3LL, (uint64_t)sub_2FD6C);
  unint64_t v225 = sub_2684(v224, "Xcode Derived Counters");
  __int128 v226 = *(_OWORD *)v225;
  int v1019 = *((_DWORD *)v225 + 4);
  __int128 v1018 = v226;
  sub_41004((uint64_t)&v1020, (uint64_t)(v225 + 3));
  memset(v1021, 0, sizeof(v1021));
  sub_6B58((char *)v1021, (__int128 *)v225[8], (__int128 *)v225[9], 0xAAAAAAAAAAAAAAABLL * ((v225[9] - v225[8]) >> 3));
  sub_23F4((int)v645, "AttachmentPixelsWrittenToMemoryPercent");
  unint64_t v227 = (uint64_t *)sub_24C8((uint64_t)v645, 0xFu, 3LL, (uint64_t)sub_2FEC4);
  uint64_t v228 = sub_2684(v227, "Xcode Derived Counters");
  __int128 v229 = *(_OWORD *)v228;
  int v1023 = *((_DWORD *)v228 + 4);
  __int128 v1022 = v229;
  sub_41004((uint64_t)&v1024, (uint64_t)(v228 + 3));
  memset(v1025, 0, sizeof(v1025));
  sub_6B58((char *)v1025, (__int128 *)v228[8], (__int128 *)v228[9], 0xAAAAAAAAAAAAAAABLL * ((v228[9] - v228[8]) >> 3));
  sub_23F4((int)v644, "CompressedPixelsWrittenToMemoryPercent");
  unsigned int v230 = (uint64_t *)sub_24C8((uint64_t)v644, 0xFu, 3LL, (uint64_t)sub_3001C);
  double v231 = sub_2684(v230, "Xcode Derived Counters");
  __int128 v232 = *(_OWORD *)v231;
  int v1027 = *((_DWORD *)v231 + 4);
  __int128 v1026 = v232;
  sub_41004((uint64_t)&v1028, (uint64_t)(v231 + 3));
  memset(v1029, 0, sizeof(v1029));
  sub_6B58((char *)v1029, (__int128 *)v231[8], (__int128 *)v231[9], 0xAAAAAAAAAAAAAAABLL * ((v231[9] - v231[8]) >> 3));
  sub_23F4((int)v643, "LossyCompressedPixelsWrittenToMemoryPercent");
  unsigned int v233 = (uint64_t *)sub_24C8((uint64_t)v643, 0xFu, 3LL, (uint64_t)sub_30174);
  uint64_t v234 = sub_2684(v233, "Xcode Derived Counters");
  __int128 v235 = *(_OWORD *)v234;
  int v1031 = *((_DWORD *)v234 + 4);
  __int128 v1030 = v235;
  sub_41004((uint64_t)&v1032, (uint64_t)(v234 + 3));
  memset(v1033, 0, sizeof(v1033));
  sub_6B58((char *)v1033, (__int128 *)v234[8], (__int128 *)v234[9], 0xAAAAAAAAAAAAAAABLL * ((v234[9] - v234[8]) >> 3));
  sub_23F4((int)v642, "MSAA2XResolvedPixels");
  int v236 = (uint64_t *)sub_24C8((uint64_t)v642, 0xFu, 3LL, (uint64_t)sub_302CC);
  uint64_t v237 = sub_2684(v236, "Xcode Derived Counters");
  __int128 v238 = *(_OWORD *)v237;
  int v1035 = *((_DWORD *)v237 + 4);
  __int128 v1034 = v238;
  sub_41004((uint64_t)&v1036, (uint64_t)(v237 + 3));
  memset(v1037, 0, sizeof(v1037));
  sub_6B58((char *)v1037, (__int128 *)v237[8], (__int128 *)v237[9], 0xAAAAAAAAAAAAAAABLL * ((v237[9] - v237[8]) >> 3));
  sub_23F4((int)v641, "MSAA4XResolvedPixels");
  double v239 = (uint64_t *)sub_24C8((uint64_t)v641, 0xFu, 3LL, (uint64_t)sub_3035C);
  unsigned int v240 = sub_2684(v239, "Xcode Derived Counters");
  __int128 v241 = *(_OWORD *)v240;
  int v1039 = *((_DWORD *)v240 + 4);
  __int128 v1038 = v241;
  sub_41004((uint64_t)&v1040, (uint64_t)(v240 + 3));
  memset(v1041, 0, sizeof(v1041));
  sub_6B58((char *)v1041, (__int128 *)v240[8], (__int128 *)v240[9], 0xAAAAAAAAAAAAAAABLL * ((v240[9] - v240[8]) >> 3));
  sub_23F4((int)v640, "MSAA2XResolvedPixelsPercent");
  double v242 = (uint64_t *)sub_24C8((uint64_t)v640, 0xFu, 3LL, (uint64_t)sub_303EC);
  double v243 = sub_2684(v242, "Xcode Derived Counters");
  __int128 v244 = *(_OWORD *)v243;
  int v1043 = *((_DWORD *)v243 + 4);
  __int128 v1042 = v244;
  sub_41004((uint64_t)&v1044, (uint64_t)(v243 + 3));
  memset(v1045, 0, sizeof(v1045));
  sub_6B58((char *)v1045, (__int128 *)v243[8], (__int128 *)v243[9], 0xAAAAAAAAAAAAAAABLL * ((v243[9] - v243[8]) >> 3));
  sub_23F4((int)v639, "MSAA4XResolvedPixelsPercent");
  double v245 = (uint64_t *)sub_24C8((uint64_t)v639, 0xFu, 3LL, (uint64_t)sub_3054C);
  double v246 = sub_2684(v245, "Xcode Derived Counters");
  __int128 v247 = *(_OWORD *)v246;
  int v1047 = *((_DWORD *)v246 + 4);
  __int128 v1046 = v247;
  sub_41004((uint64_t)&v1048, (uint64_t)(v246 + 3));
  memset(v1049, 0, sizeof(v1049));
  sub_6B58((char *)v1049, (__int128 *)v246[8], (__int128 *)v246[9], 0xAAAAAAAAAAAAAAABLL * ((v246[9] - v246[8]) >> 3));
  sub_23F4((int)v638, "TotalResolvedPixels");
  int v248 = (uint64_t *)sub_24C8((uint64_t)v638, 0xFu, 3LL, (uint64_t)sub_306AC);
  double v249 = sub_2684(v248, "Xcode Derived Counters");
  __int128 v250 = *(_OWORD *)v249;
  int v1051 = *((_DWORD *)v249 + 4);
  __int128 v1050 = v250;
  sub_41004((uint64_t)&v1052, (uint64_t)(v249 + 3));
  memset(v1053, 0, sizeof(v1053));
  sub_6B58((char *)v1053, (__int128 *)v249[8], (__int128 *)v249[9], 0xAAAAAAAAAAAAAAABLL * ((v249[9] - v249[8]) >> 3));
  sub_23F4((int)v637, "AverageUniqueColorsPerResolvedPixels");
  char v251 = (uint64_t *)sub_24C8((uint64_t)v637, 0xFu, 3LL, (uint64_t)sub_30818);
  double v252 = sub_2684(v251, "Xcode Derived Counters");
  __int128 v253 = *(_OWORD *)v252;
  int v1055 = *((_DWORD *)v252 + 4);
  __int128 v1054 = v253;
  sub_41004((uint64_t)&v1056, (uint64_t)(v252 + 3));
  memset(v1057, 0, sizeof(v1057));
  sub_6B58((char *)v1057, (__int128 *)v252[8], (__int128 *)v252[9], 0xAAAAAAAAAAAAAAABLL * ((v252[9] - v252[8]) >> 3));
  sub_23F4((int)v636, "TextureCacheMissRate");
  double v254 = (uint64_t *)sub_24C8((uint64_t)v636, 0xFu, 3LL, (uint64_t)sub_30B0C);
  unint64_t v255 = sub_2684(v254, "Xcode Derived Counters");
  __int128 v256 = *(_OWORD *)v255;
  int v1059 = *((_DWORD *)v255 + 4);
  __int128 v1058 = v256;
  sub_41004((uint64_t)&v1060, (uint64_t)(v255 + 3));
  memset(v1061, 0, sizeof(v1061));
  sub_6B58((char *)v1061, (__int128 *)v255[8], (__int128 *)v255[9], 0xAAAAAAAAAAAAAAABLL * ((v255[9] - v255[8]) >> 3));
  sub_23F4((int)v635, "TextureCacheWriteMissRate");
  uint64_t v257 = (uint64_t *)sub_24C8((uint64_t)v635, 0xFu, 3LL, (uint64_t)sub_30BEC);
  uint64_t v258 = sub_2684(v257, "Xcode Derived Counters");
  __int128 v259 = *(_OWORD *)v258;
  int v1063 = *((_DWORD *)v258 + 4);
  __int128 v1062 = v259;
  sub_41004((uint64_t)&v1064, (uint64_t)(v258 + 3));
  memset(v1065, 0, sizeof(v1065));
  sub_6B58((char *)v1065, (__int128 *)v258[8], (__int128 *)v258[9], 0xAAAAAAAAAAAAAAABLL * ((v258[9] - v258[8]) >> 3));
  sub_23F4((int)v634, "BytesReadFromMainMemory");
  double v260 = (uint64_t *)sub_24C8((uint64_t)v634, 0xFu, 3LL, (uint64_t)sub_30CF8);
  double v261 = sub_2684(v260, "Xcode Derived Counters");
  __int128 v262 = *(_OWORD *)v261;
  int v1067 = *((_DWORD *)v261 + 4);
  __int128 v1066 = v262;
  sub_41004((uint64_t)&v1068, (uint64_t)(v261 + 3));
  memset(v1069, 0, sizeof(v1069));
  sub_6B58((char *)v1069, (__int128 *)v261[8], (__int128 *)v261[9], 0xAAAAAAAAAAAAAAABLL * ((v261[9] - v261[8]) >> 3));
  sub_23F4((int)v633, "BytesWrittenToMainMemory");
  uint64_t v263 = (uint64_t *)sub_24C8((uint64_t)v633, 0xFu, 3LL, (uint64_t)sub_30DE0);
  unsigned int v264 = sub_2684(v263, "Xcode Derived Counters");
  __int128 v265 = *(_OWORD *)v264;
  int v1071 = *((_DWORD *)v264 + 4);
  __int128 v1070 = v265;
  sub_41004((uint64_t)&v1072, (uint64_t)(v264 + 3));
  memset(v1073, 0, sizeof(v1073));
  sub_6B58((char *)v1073, (__int128 *)v264[8], (__int128 *)v264[9], 0xAAAAAAAAAAAAAAABLL * ((v264[9] - v264[8]) >> 3));
  sub_23F4((int)v632, "TotalGlobalAABytesRead");
  int v266 = (uint64_t *)sub_24C8((uint64_t)v632, 0xFu, 3LL, (uint64_t)sub_30EC8);
  char v267 = sub_2684(v266, "Xcode Derived Counters");
  __int128 v268 = *(_OWORD *)v267;
  int v1075 = *((_DWORD *)v267 + 4);
  __int128 v1074 = v268;
  sub_41004((uint64_t)&v1076, (uint64_t)(v267 + 3));
  memset(v1077, 0, sizeof(v1077));
  sub_6B58((char *)v1077, (__int128 *)v267[8], (__int128 *)v267[9], 0xAAAAAAAAAAAAAAABLL * ((v267[9] - v267[8]) >> 3));
  sub_23F4((int)v631, "TotalGlobalAABytesWritten");
  uint64_t v269 = (uint64_t *)sub_24C8((uint64_t)v631, 0xFu, 3LL, (uint64_t)sub_310B8);
  uint64_t v270 = sub_2684(v269, "Xcode Derived Counters");
  __int128 v271 = *(_OWORD *)v270;
  int v1079 = *((_DWORD *)v270 + 4);
  __int128 v1078 = v271;
  sub_41004((uint64_t)&v1080, (uint64_t)(v270 + 3));
  memset(v1081, 0, sizeof(v1081));
  sub_6B58((char *)v1081, (__int128 *)v270[8], (__int128 *)v270[9], 0xAAAAAAAAAAAAAAABLL * ((v270[9] - v270[8]) >> 3));
  sub_23F4((int)v630, "TotalL2BytesRead");
  unint64_t v272 = (uint64_t *)sub_24C8((uint64_t)v630, 0xFu, 3LL, (uint64_t)sub_311A0);
  unint64_t v273 = sub_2684(v272, "Xcode Derived Counters");
  __int128 v274 = *(_OWORD *)v273;
  int v1083 = *((_DWORD *)v273 + 4);
  __int128 v1082 = v274;
  sub_41004((uint64_t)&v1084, (uint64_t)(v273 + 3));
  memset(v1085, 0, sizeof(v1085));
  sub_6B58((char *)v1085, (__int128 *)v273[8], (__int128 *)v273[9], 0xAAAAAAAAAAAAAAABLL * ((v273[9] - v273[8]) >> 3));
  sub_23F4((int)v629, "TotalL2BytesWritten");
  double v275 = (uint64_t *)sub_24C8((uint64_t)v629, 0xFu, 3LL, (uint64_t)sub_314B0);
  unint64_t v276 = sub_2684(v275, "Xcode Derived Counters");
  __int128 v277 = *(_OWORD *)v276;
  int v1087 = *((_DWORD *)v276 + 4);
  __int128 v1086 = v277;
  sub_41004((uint64_t)&v1088, (uint64_t)(v276 + 3));
  memset(v1089, 0, sizeof(v1089));
  sub_6B58((char *)v1089, (__int128 *)v276[8], (__int128 *)v276[9], 0xAAAAAAAAAAAAAAABLL * ((v276[9] - v276[8]) >> 3));
  sub_23F4((int)v628, "TotalBytesReadFromTextureL1Cache");
  double v278 = (uint64_t *)sub_24C8((uint64_t)v628, 0xFu, 3LL, (uint64_t)sub_31670);
  uint64_t v279 = sub_2684(v278, "Xcode Derived Counters");
  __int128 v280 = *(_OWORD *)v279;
  int v1091 = *((_DWORD *)v279 + 4);
  __int128 v1090 = v280;
  sub_41004((uint64_t)&v1092, (uint64_t)(v279 + 3));
  memset(v1093, 0, sizeof(v1093));
  sub_6B58((char *)v1093, (__int128 *)v279[8], (__int128 *)v279[9], 0xAAAAAAAAAAAAAAABLL * ((v279[9] - v279[8]) >> 3));
  sub_23F4((int)v627, "PredicatedTextureWritePercentage");
  int v281 = (uint64_t *)sub_24C8((uint64_t)v627, 0xFu, 3LL, (uint64_t)sub_31704);
  char v282 = sub_2684(v281, "Xcode Derived Counters");
  __int128 v283 = *(_OWORD *)v282;
  int v1095 = *((_DWORD *)v282 + 4);
  __int128 v1094 = v283;
  sub_41004((uint64_t)&v1096, (uint64_t)(v282 + 3));
  memset(v1097, 0, sizeof(v1097));
  sub_6B58((char *)v1097, (__int128 *)v282[8], (__int128 *)v282[9], 0xAAAAAAAAAAAAAAABLL * ((v282[9] - v282[8]) >> 3));
  sub_23F4((int)v626, "PredicatedTextureReadPercentage");
  char v284 = (uint64_t *)sub_24C8((uint64_t)v626, 0xFu, 3LL, (uint64_t)sub_31910);
  unint64_t v285 = sub_2684(v284, "Xcode Derived Counters");
  __int128 v286 = *(_OWORD *)v285;
  int v1099 = *((_DWORD *)v285 + 4);
  __int128 v1098 = v286;
  sub_41004((uint64_t)&v1100, (uint64_t)(v285 + 3));
  memset(v1101, 0, sizeof(v1101));
  sub_6B58((char *)v1101, (__int128 *)v285[8], (__int128 *)v285[9], 0xAAAAAAAAAAAAAAABLL * ((v285[9] - v285[8]) >> 3));
  sub_23F4((int)v625, "SamplesShadedPerTile");
  uint64_t v287 = (uint64_t *)sub_24C8((uint64_t)v625, 0xFu, 3LL, (uint64_t)sub_31B58);
  uint64_t v288 = sub_2684(v287, "Xcode Derived Counters");
  __int128 v289 = *(_OWORD *)v288;
  int v1103 = *((_DWORD *)v288 + 4);
  __int128 v1102 = v289;
  sub_41004((uint64_t)&v1104, (uint64_t)(v288 + 3));
  memset(v1105, 0, sizeof(v1105));
  sub_6B58((char *)v1105, (__int128 *)v288[8], (__int128 *)v288[9], 0xAAAAAAAAAAAAAAABLL * ((v288[9] - v288[8]) >> 3));
  sub_23F4((int)v624, "SamplesShadedPerQuad");
  double v290 = (uint64_t *)sub_24C8((uint64_t)v624, 0xFu, 3LL, (uint64_t)sub_31C34);
  double v291 = sub_2684(v290, "Xcode Derived Counters");
  __int128 v292 = *(_OWORD *)v291;
  int v1107 = *((_DWORD *)v291 + 4);
  __int128 v1106 = v292;
  sub_41004((uint64_t)&v1108, (uint64_t)(v291 + 3));
  memset(v1109, 0, sizeof(v1109));
  sub_6B58((char *)v1109, (__int128 *)v291[8], (__int128 *)v291[9], 0xAAAAAAAAAAAAAAABLL * ((v291[9] - v291[8]) >> 3));
  sub_23F4((int)v623, "CompressionRatioTextureMemoryWritten");
  uint64_t v293 = (uint64_t *)sub_24C8((uint64_t)v623, 0xFu, 3LL, (uint64_t)sub_31DC8);
  uint64_t v294 = sub_2684(v293, "Xcode Derived Counters");
  __int128 v295 = *(_OWORD *)v294;
  int v1111 = *((_DWORD *)v294 + 4);
  __int128 v1110 = v295;
  sub_41004((uint64_t)&v1112, (uint64_t)(v294 + 3));
  memset(v1113, 0, sizeof(v1113));
  sub_6B58((char *)v1113, (__int128 *)v294[8], (__int128 *)v294[9], 0xAAAAAAAAAAAAAAABLL * ((v294[9] - v294[8]) >> 3));
  sub_23F4((int)v622, "CompressionRatioTextureMemoryRead");
  uint64_t v296 = (uint64_t *)sub_24C8((uint64_t)v622, 0xFu, 3LL, (uint64_t)sub_32084);
  uint64_t v297 = sub_2684(v296, "Xcode Derived Counters");
  __int128 v298 = *(_OWORD *)v297;
  int v1115 = *((_DWORD *)v297 + 4);
  __int128 v1114 = v298;
  sub_41004((uint64_t)&v1116, (uint64_t)(v297 + 3));
  memset(v1117, 0, sizeof(v1117));
  sub_6B58((char *)v1117, (__int128 *)v297[8], (__int128 *)v297[9], 0xAAAAAAAAAAAAAAABLL * ((v297[9] - v297[8]) >> 3));
  sub_23F4((int)v621, "LosslessCompressedBytesFromTC");
  unint64_t v299 = (uint64_t *)sub_24C8((uint64_t)v621, 0xFu, 3LL, (uint64_t)sub_321E4);
  double v300 = sub_2684(v299, "Xcode Derived Counters");
  __int128 v301 = *(_OWORD *)v300;
  int v1119 = *((_DWORD *)v300 + 4);
  __int128 v1118 = v301;
  sub_41004((uint64_t)&v1120, (uint64_t)(v300 + 3));
  memset(v1121, 0, sizeof(v1121));
  sub_6B58((char *)v1121, (__int128 *)v300[8], (__int128 *)v300[9], 0xAAAAAAAAAAAAAAABLL * ((v300[9] - v300[8]) >> 3));
  sub_23F4((int)v620, "UncompressedBytesFromTC");
  uint64_t v302 = (uint64_t *)sub_24C8((uint64_t)v620, 0xFu, 3LL, (uint64_t)sub_32278);
  unsigned int v303 = sub_2684(v302, "Xcode Derived Counters");
  __int128 v304 = *(_OWORD *)v303;
  int v1123 = *((_DWORD *)v303 + 4);
  __int128 v1122 = v304;
  sub_41004((uint64_t)&v1124, (uint64_t)(v303 + 3));
  memset(v1125, 0, sizeof(v1125));
  sub_6B58((char *)v1125, (__int128 *)v303[8], (__int128 *)v303[9], 0xAAAAAAAAAAAAAAABLL * ((v303[9] - v303[8]) >> 3));
  sub_23F4((int)v619, "LossyCompressedBytesFromTC");
  uint64_t v305 = (uint64_t *)sub_24C8((uint64_t)v619, 0xFu, 3LL, (uint64_t)sub_3230C);
  char v306 = sub_2684(v305, "Xcode Derived Counters");
  __int128 v307 = *(_OWORD *)v306;
  int v1127 = *((_DWORD *)v306 + 4);
  __int128 v1126 = v307;
  sub_41004((uint64_t)&v1128, (uint64_t)(v306 + 3));
  memset(v1129, 0, sizeof(v1129));
  sub_6B58((char *)v1129, (__int128 *)v306[8], (__int128 *)v306[9], 0xAAAAAAAAAAAAAAABLL * ((v306[9] - v306[8]) >> 3));
  sub_23F4((int)v618, "MainMemoryThroughput");
  uint64_t v308 = (uint64_t *)sub_24C8((uint64_t)v618, 0xFu, 3LL, (uint64_t)sub_32434);
  uint64_t v309 = sub_2684(v308, "Xcode Derived Counters");
  __int128 v310 = *(_OWORD *)v309;
  int v1131 = *((_DWORD *)v309 + 4);
  __int128 v1130 = v310;
  sub_41004((uint64_t)&v1132, (uint64_t)(v309 + 3));
  memset(v1133, 0, sizeof(v1133));
  sub_6B58((char *)v1133, (__int128 *)v309[8], (__int128 *)v309[9], 0xAAAAAAAAAAAAAAABLL * ((v309[9] - v309[8]) >> 3));
  sub_23F4((int)v617, "BytesReadForBuffersFromMainMemory");
  double v311 = (uint64_t *)sub_24C8((uint64_t)v617, 0xFu, 3LL, (uint64_t)sub_3244C);
  int v312 = sub_2684(v311, "Xcode Derived Counters");
  __int128 v313 = *(_OWORD *)v312;
  int v1135 = *((_DWORD *)v312 + 4);
  __int128 v1134 = v313;
  sub_41004((uint64_t)&v1136, (uint64_t)(v312 + 3));
  memset(v1137, 0, sizeof(v1137));
  sub_6B58((char *)v1137, (__int128 *)v312[8], (__int128 *)v312[9], 0xAAAAAAAAAAAAAAABLL * ((v312[9] - v312[8]) >> 3));
  sub_23F4((int)v616, "BytesWrittenForBuffersFromMainMemory");
  uint64_t v314 = (uint64_t *)sub_24C8((uint64_t)v616, 0xFu, 3LL, (uint64_t)sub_324D8);
  uint64_t v315 = sub_2684(v314, "Xcode Derived Counters");
  __int128 v316 = *(_OWORD *)v315;
  int v1139 = *((_DWORD *)v315 + 4);
  __int128 v1138 = v316;
  sub_41004((uint64_t)&v1140, (uint64_t)(v315 + 3));
  memset(v1141, 0, sizeof(v1141));
  sub_6B58((char *)v1141, (__int128 *)v315[8], (__int128 *)v315[9], 0xAAAAAAAAAAAAAAABLL * ((v315[9] - v315[8]) >> 3));
  sub_23F4((int)v615, "TextureBytesWrittenToMainMemory");
  uint64_t v317 = (uint64_t *)sub_24C8((uint64_t)v615, 0xFu, 3LL, (uint64_t)sub_325C0);
  uint64_t v318 = sub_2684(v317, "Xcode Derived Counters");
  __int128 v319 = *(_OWORD *)v318;
  int v1143 = *((_DWORD *)v318 + 4);
  __int128 v1142 = v319;
  sub_41004((uint64_t)&v1144, (uint64_t)(v318 + 3));
  memset(v1145, 0, sizeof(v1145));
  sub_6B58((char *)v1145, (__int128 *)v318[8], (__int128 *)v318[9], 0xAAAAAAAAAAAAAAABLL * ((v318[9] - v318[8]) >> 3));
  sub_23F4((int)v614, "TextureBytesReadFromMainMemory");
  unint64_t v320 = (uint64_t *)sub_24C8((uint64_t)v614, 0xFu, 3LL, (uint64_t)sub_32734);
  unint64_t v321 = sub_2684(v320, "Xcode Derived Counters");
  __int128 v322 = *(_OWORD *)v321;
  int v1147 = *((_DWORD *)v321 + 4);
  __int128 v1146 = v322;
  sub_41004((uint64_t)&v1148, (uint64_t)(v321 + 3));
  memset(v1149, 0, sizeof(v1149));
  sub_6B58((char *)v1149, (__int128 *)v321[8], (__int128 *)v321[9], 0xAAAAAAAAAAAAAAABLL * ((v321[9] - v321[8]) >> 3));
  sub_23F4((int)v613, "L2CacheMissRate");
  double v323 = (uint64_t *)sub_24C8((uint64_t)v613, 0xFu, 3LL, (uint64_t)sub_327C0);
  double v324 = sub_2684(v323, "Xcode Derived Counters");
  __int128 v325 = *(_OWORD *)v324;
  int v1151 = *((_DWORD *)v324 + 4);
  __int128 v1150 = v325;
  sub_41004((uint64_t)&v1152, (uint64_t)(v324 + 3));
  memset(v1153, 0, sizeof(v1153));
  sub_6B58((char *)v1153, (__int128 *)v324[8], (__int128 *)v324[9], 0xAAAAAAAAAAAAAAABLL * ((v324[9] - v324[8]) >> 3));
  sub_23F4((int)v612, "PartialRenders");
  unint64_t v326 = (uint64_t *)sub_24C8((uint64_t)v612, 0xFu, 3LL, (uint64_t)sub_32918);
  double v327 = sub_2684(v326, "Xcode Derived Counters");
  __int128 v328 = *(_OWORD *)v327;
  int v1155 = *((_DWORD *)v327 + 4);
  __int128 v1154 = v328;
  sub_41004((uint64_t)&v1156, (uint64_t)(v327 + 3));
  memset(v1157, 0, sizeof(v1157));
  sub_6B58((char *)v1157, (__int128 *)v327[8], (__int128 *)v327[9], 0xAAAAAAAAAAAAAAABLL * ((v327[9] - v327[8]) >> 3));
  sub_23F4((int)v611, "ParameterBufferTilerAlloc");
  double v329 = (uint64_t *)sub_24C8((uint64_t)v611, 0xFu, 3LL, (uint64_t)sub_32954);
  uint64_t v330 = sub_2684(v329, "Xcode Derived Counters");
  __int128 v331 = *(_OWORD *)v330;
  int v1159 = *((_DWORD *)v330 + 4);
  __int128 v1158 = v331;
  sub_41004((uint64_t)&v1160, (uint64_t)(v330 + 3));
  memset(v1161, 0, sizeof(v1161));
  sub_6B58((char *)v1161, (__int128 *)v330[8], (__int128 *)v330[9], 0xAAAAAAAAAAAAAAABLL * ((v330[9] - v330[8]) >> 3));
  sub_23F4((int)v610, "ParameterBufferPrimitiveBlockAlloc");
  double v332 = (uint64_t *)sub_24C8((uint64_t)v610, 0xFu, 3LL, (uint64_t)sub_32A28);
  double v333 = sub_2684(v332, "Xcode Derived Counters");
  __int128 v334 = *(_OWORD *)v333;
  int v1163 = *((_DWORD *)v333 + 4);
  __int128 v1162 = v334;
  sub_41004((uint64_t)&v1164, (uint64_t)(v333 + 3));
  memset(v1165, 0, sizeof(v1165));
  sub_6B58((char *)v1165, (__int128 *)v333[8], (__int128 *)v333[9], 0xAAAAAAAAAAAAAAABLL * ((v333[9] - v333[8]) >> 3));
  sub_23F4((int)v609, "ParameterBufferBytesUsed");
  double v335 = (uint64_t *)sub_24C8((uint64_t)v609, 0xFu, 3LL, (uint64_t)sub_32AFC);
  double v336 = sub_2684(v335, "Xcode Derived Counters");
  __int128 v337 = *(_OWORD *)v336;
  int v1167 = *((_DWORD *)v336 + 4);
  __int128 v1166 = v337;
  sub_41004((uint64_t)&v1168, (uint64_t)(v336 + 3));
  memset(v1169, 0, sizeof(v1169));
  sub_6B58((char *)v1169, (__int128 *)v336[8], (__int128 *)v336[9], 0xAAAAAAAAAAAAAAABLL * ((v336[9] - v336[8]) >> 3));
  sub_23F4((int)v608, "FRGTicks");
  unint64_t v338 = (uint64_t *)sub_24C8((uint64_t)v608, 0xFu, 3LL, (uint64_t)sub_32B90);
  double v339 = sub_2684(v338, "Xcode Derived Counters");
  __int128 v340 = *(_OWORD *)v339;
  int v1171 = *((_DWORD *)v339 + 4);
  __int128 v1170 = v340;
  sub_41004((uint64_t)&v1172, (uint64_t)(v339 + 3));
  memset(v1173, 0, sizeof(v1173));
  sub_6B58((char *)v1173, (__int128 *)v339[8], (__int128 *)v339[9], 0xAAAAAAAAAAAAAAABLL * ((v339[9] - v339[8]) >> 3));
  sub_23F4((int)v607, "TextureCacheLimiter");
  double v341 = (uint64_t *)sub_24C8((uint64_t)v607, 0xFu, 3LL, (uint64_t)sub_32BCC);
  int v342 = sub_2684(v341, "Xcode Derived Counters");
  __int128 v343 = *(_OWORD *)v342;
  int v1175 = *((_DWORD *)v342 + 4);
  __int128 v1174 = v343;
  sub_41004((uint64_t)&v1176, (uint64_t)(v342 + 3));
  memset(v1177, 0, sizeof(v1177));
  sub_6B58((char *)v1177, (__int128 *)v342[8], (__int128 *)v342[9], 0xAAAAAAAAAAAAAAABLL * ((v342[9] - v342[8]) >> 3));
  sub_23F4((int)v606, "TextureCacheMissLimiter");
  double v344 = (uint64_t *)sub_24C8((uint64_t)v606, 0xFu, 3LL, (uint64_t)sub_32CEC);
  double v345 = sub_2684(v344, "Xcode Derived Counters");
  __int128 v346 = *(_OWORD *)v345;
  int v1179 = *((_DWORD *)v345 + 4);
  __int128 v1178 = v346;
  sub_41004((uint64_t)&v1180, (uint64_t)(v345 + 3));
  memset(v1181, 0, sizeof(v1181));
  sub_6B58((char *)v1181, (__int128 *)v345[8], (__int128 *)v345[9], 0xAAAAAAAAAAAAAAABLL * ((v345[9] - v345[8]) >> 3));
  sub_23F4((int)v605, "SparseTextureTranslationLimiter");
  double v347 = (uint64_t *)sub_24C8((uint64_t)v605, 0xFu, 3LL, (uint64_t)sub_32E38);
  double v348 = sub_2684(v347, "Xcode Derived Counters");
  __int128 v349 = *(_OWORD *)v348;
  int v1183 = *((_DWORD *)v348 + 4);
  __int128 v1182 = v349;
  sub_41004((uint64_t)&v1184, (uint64_t)(v348 + 3));
  memset(v1185, 0, sizeof(v1185));
  sub_6B58((char *)v1185, (__int128 *)v348[8], (__int128 *)v348[9], 0xAAAAAAAAAAAAAAABLL * ((v348[9] - v348[8]) >> 3));
  sub_23F4((int)v604, "SparseTextureRequests");
  double v350 = (uint64_t *)sub_24C8((uint64_t)v604, 0xFu, 3LL, (uint64_t)sub_33044);
  double v351 = sub_2684(v350, "Xcode Derived Counters");
  __int128 v352 = *(_OWORD *)v351;
  int v1187 = *((_DWORD *)v351 + 4);
  __int128 v1186 = v352;
  sub_41004((uint64_t)&v1188, (uint64_t)(v351 + 3));
  memset(v1189, 0, sizeof(v1189));
  sub_6B58((char *)v1189, (__int128 *)v351[8], (__int128 *)v351[9], 0xAAAAAAAAAAAAAAABLL * ((v351[9] - v351[8]) >> 3));
  sub_23F4((int)v603, "AverageSparseTextureRequestSize");
  char v353 = (uint64_t *)sub_24C8((uint64_t)v603, 0xFu, 3LL, (uint64_t)sub_33128);
  char v354 = sub_2684(v353, "Xcode Derived Counters");
  __int128 v355 = *(_OWORD *)v354;
  int v1191 = *((_DWORD *)v354 + 4);
  __int128 v1190 = v355;
  sub_41004((uint64_t)&v1192, (uint64_t)(v354 + 3));
  memset(v1193, 0, sizeof(v1193));
  sub_6B58((char *)v1193, (__int128 *)v354[8], (__int128 *)v354[9], 0xAAAAAAAAAAAAAAABLL * ((v354[9] - v354[8]) >> 3));
  sub_23F4((int)v602, "FragmentGeneratorPrimitiveUtilization");
  unint64_t v356 = (uint64_t *)sub_24C8((uint64_t)v602, 0xFu, 3LL, (uint64_t)sub_33394);
  unint64_t v357 = sub_2684(v356, "Xcode Derived Counters");
  __int128 v358 = *(_OWORD *)v357;
  int v1195 = *((_DWORD *)v357 + 4);
  __int128 v1194 = v358;
  sub_41004((uint64_t)&v1196, (uint64_t)(v357 + 3));
  memset(v1197, 0, sizeof(v1197));
  sub_6B58((char *)v1197, (__int128 *)v357[8], (__int128 *)v357[9], 0xAAAAAAAAAAAAAAABLL * ((v357[9] - v357[8]) >> 3));
  sub_23F4((int)v601, "FragmentRasterizerUtilization");
  uint64_t v359 = (uint64_t *)sub_24C8((uint64_t)v601, 0xFu, 3LL, (uint64_t)sub_334B4);
  double v360 = sub_2684(v359, "Xcode Derived Counters");
  __int128 v361 = *(_OWORD *)v360;
  int v1199 = *((_DWORD *)v360 + 4);
  __int128 v1198 = v361;
  sub_41004((uint64_t)&v1200, (uint64_t)(v360 + 3));
  memset(v1201, 0, sizeof(v1201));
  sub_6B58((char *)v1201, (__int128 *)v360[8], (__int128 *)v360[9], 0xAAAAAAAAAAAAAAABLL * ((v360[9] - v360[8]) >> 3));
  sub_23F4((int)v600, "FragmentQuadProcessingUtilization");
  char v362 = (uint64_t *)sub_24C8((uint64_t)v600, 0xFu, 3LL, (uint64_t)sub_335D4);
  char v363 = sub_2684(v362, "Xcode Derived Counters");
  __int128 v364 = *(_OWORD *)v363;
  int v1203 = *((_DWORD *)v363 + 4);
  __int128 v1202 = v364;
  sub_41004((uint64_t)&v1204, (uint64_t)(v363 + 3));
  memset(v1205, 0, sizeof(v1205));
  sub_6B58((char *)v1205, (__int128 *)v363[8], (__int128 *)v363[9], 0xAAAAAAAAAAAAAAABLL * ((v363[9] - v363[8]) >> 3));
  sub_23F4((int)v599, "PreCullPrimitiveBlockUtilization");
  uint64_t v365 = (uint64_t *)sub_24C8((uint64_t)v599, 0xFu, 3LL, (uint64_t)sub_33718);
  uint64_t v366 = sub_2684(v365, "Xcode Derived Counters");
  __int128 v367 = *(_OWORD *)v366;
  int v1207 = *((_DWORD *)v366 + 4);
  __int128 v1206 = v367;
  sub_41004((uint64_t)&v1208, (uint64_t)(v366 + 3));
  memset(v1209, 0, sizeof(v1209));
  sub_6B58((char *)v1209, (__int128 *)v366[8], (__int128 *)v366[9], 0xAAAAAAAAAAAAAAABLL * ((v366[9] - v366[8]) >> 3));
  sub_23F4((int)v598, "PostClipCullPrimitiveBlockUtilization");
  unint64_t v368 = (uint64_t *)sub_24C8((uint64_t)v598, 0xFu, 3LL, (uint64_t)sub_33838);
  unint64_t v369 = sub_2684(v368, "Xcode Derived Counters");
  __int128 v370 = *(_OWORD *)v369;
  int v1211 = *((_DWORD *)v369 + 4);
  __int128 v1210 = v370;
  sub_41004((uint64_t)&v1212, (uint64_t)(v369 + 3));
  memset(v1213, 0, sizeof(v1213));
  sub_6B58((char *)v1213, (__int128 *)v369[8], (__int128 *)v369[9], 0xAAAAAAAAAAAAAAABLL * ((v369[9] - v369[8]) >> 3));
  sub_23F4((int)v597, "PrimitiveTileIntersectionUtilization");
  uint64_t v371 = (uint64_t *)sub_24C8((uint64_t)v597, 0xFu, 3LL, (uint64_t)sub_33934);
  uint64_t v372 = sub_2684(v371, "Xcode Derived Counters");
  __int128 v373 = *(_OWORD *)v372;
  int v1215 = *((_DWORD *)v372 + 4);
  __int128 v1214 = v373;
  sub_41004((uint64_t)&v1216, (uint64_t)(v372 + 3));
  memset(v1217, 0, sizeof(v1217));
  sub_6B58((char *)v1217, (__int128 *)v372[8], (__int128 *)v372[9], 0xAAAAAAAAAAAAAAABLL * ((v372[9] - v372[8]) >> 3));
  sub_23F4((int)v596, "TilerUtilization");
  double v374 = (uint64_t *)sub_24C8((uint64_t)v596, 0xFu, 3LL, (uint64_t)sub_33A30);
  uint64_t v375 = sub_2684(v374, "Xcode Derived Counters");
  __int128 v376 = *(_OWORD *)v375;
  int v1219 = *((_DWORD *)v375 + 4);
  __int128 v1218 = v376;
  sub_41004((uint64_t)&v1220, (uint64_t)(v375 + 3));
  memset(v1221, 0, sizeof(v1221));
  sub_6B58((char *)v1221, (__int128 *)v375[8], (__int128 *)v375[9], 0xAAAAAAAAAAAAAAABLL * ((v375[9] - v375[8]) >> 3));
  sub_23F4((int)v595, "MMULimiter");
  uint64_t v377 = (uint64_t *)sub_24C8((uint64_t)v595, 0xFu, 3LL, (uint64_t)sub_33B2C);
  double v378 = sub_2684(v377, "Xcode Derived Counters");
  __int128 v379 = *(_OWORD *)v378;
  int v1223 = *((_DWORD *)v378 + 4);
  __int128 v1222 = v379;
  sub_41004((uint64_t)&v1224, (uint64_t)(v378 + 3));
  memset(v1225, 0, sizeof(v1225));
  sub_6B58((char *)v1225, (__int128 *)v378[8], (__int128 *)v378[9], 0xAAAAAAAAAAAAAAABLL * ((v378[9] - v378[8]) >> 3));
  sub_23F4((int)v594, "MainMemoryTraffic");
  uint64_t v380 = (uint64_t *)sub_24C8((uint64_t)v594, 0xFu, 3LL, (uint64_t)sub_33C78);
  unsigned int v381 = sub_2684(v380, "Xcode Derived Counters");
  __int128 v382 = *(_OWORD *)v381;
  int v1227 = *((_DWORD *)v381 + 4);
  __int128 v1226 = v382;
  sub_41004((uint64_t)&v1228, (uint64_t)(v381 + 3));
  memset(v1229, 0, sizeof(v1229));
  sub_6B58((char *)v1229, (__int128 *)v381[8], (__int128 *)v381[9], 0xAAAAAAAAAAAAAAABLL * ((v381[9] - v381[8]) >> 3));
  sub_23F4((int)v593, "VSInvocationUtilization");
  char v383 = (uint64_t *)sub_24C8((uint64_t)v593, 0xFu, 3LL, (uint64_t)sub_33D04);
  uint64_t v384 = sub_2684(v383, "Xcode Derived Counters");
  __int128 v385 = *(_OWORD *)v384;
  int v1231 = *((_DWORD *)v384 + 4);
  __int128 v1230 = v385;
  sub_41004((uint64_t)&v1232, (uint64_t)(v384 + 3));
  memset(v1233, 0, sizeof(v1233));
  sub_6B58((char *)v1233, (__int128 *)v384[8], (__int128 *)v384[9], 0xAAAAAAAAAAAAAAABLL * ((v384[9] - v384[8]) >> 3));
  sub_23F4((int)v592, "FragmentZStoreUtilization");
  uint64_t v386 = (uint64_t *)sub_24C8((uint64_t)v592, 0xFu, 3LL, (uint64_t)sub_33E24);
  unint64_t v387 = sub_2684(v386, "Xcode Derived Counters");
  __int128 v388 = *(_OWORD *)v387;
  int v1235 = *((_DWORD *)v387 + 4);
  __int128 v1234 = v388;
  sub_41004((uint64_t)&v1236, (uint64_t)(v387 + 3));
  memset(v1237, 0, sizeof(v1237));
  sub_6B58((char *)v1237, (__int128 *)v387[8], (__int128 *)v387[9], 0xAAAAAAAAAAAAAAABLL * ((v387[9] - v387[8]) >> 3));
  sub_23F4((int)v591, "FragmentZStoreBytes");
  uint64_t v389 = (uint64_t *)sub_24C8((uint64_t)v591, 0xFu, 3LL, (uint64_t)sub_33F20);
  uint64_t v390 = sub_2684(v389, "Xcode Derived Counters");
  __int128 v391 = *(_OWORD *)v390;
  int v1239 = *((_DWORD *)v390 + 4);
  __int128 v1238 = v391;
  sub_41004((uint64_t)&v1240, (uint64_t)(v390 + 3));
  memset(v1241, 0, sizeof(v1241));
  sub_6B58((char *)v1241, (__int128 *)v390[8], (__int128 *)v390[9], 0xAAAAAAAAAAAAAAABLL * ((v390[9] - v390[8]) >> 3));
  sub_23F4((int)v590, "ZBytesWrittenToMainMemory");
  char v392 = (uint64_t *)sub_24C8((uint64_t)v590, 0xFu, 3LL, (uint64_t)sub_33FB4);
  char v393 = sub_2684(v392, "Xcode Derived Counters");
  __int128 v394 = *(_OWORD *)v393;
  int v1243 = *((_DWORD *)v393 + 4);
  __int128 v1242 = v394;
  sub_41004((uint64_t)&v1244, (uint64_t)(v393 + 3));
  memset(v1245, 0, sizeof(v1245));
  sub_6B58((char *)v1245, (__int128 *)v393[8], (__int128 *)v393[9], 0xAAAAAAAAAAAAAAABLL * ((v393[9] - v393[8]) >> 3));
  sub_23F4((int)v589, "CompressionRatioZTextureMemoryWritten");
  double v395 = (uint64_t *)sub_24C8((uint64_t)v589, 0xFu, 3LL, (uint64_t)sub_340DC);
  uint64_t v396 = sub_2684(v395, "Xcode Derived Counters");
  __int128 v397 = *(_OWORD *)v396;
  int v1247 = *((_DWORD *)v396 + 4);
  __int128 v1246 = v397;
  sub_41004((uint64_t)&v1248, (uint64_t)(v396 + 3));
  memset(v1249, 0, sizeof(v1249));
  sub_6B58((char *)v1249, (__int128 *)v396[8], (__int128 *)v396[9], 0xAAAAAAAAAAAAAAABLL * ((v396[9] - v396[8]) >> 3));
  sub_23F4((int)v588, "FragmentGeneratorPrimitiveProcessed");
  uint64_t v398 = (uint64_t *)sub_24C8((uint64_t)v588, 0xFu, 3LL, (uint64_t)sub_341F4);
  uint64_t v399 = sub_2684(v398, "Xcode Derived Counters");
  __int128 v400 = *(_OWORD *)v399;
  int v1251 = *((_DWORD *)v399 + 4);
  __int128 v1250 = v400;
  sub_41004((uint64_t)&v1252, (uint64_t)(v399 + 3));
  memset(v1253, 0, sizeof(v1253));
  sub_6B58((char *)v1253, (__int128 *)v399[8], (__int128 *)v399[9], 0xAAAAAAAAAAAAAAABLL * ((v399[9] - v399[8]) >> 3));
  sub_23F4((int)v587, "FragmentQuadsProcessed");
  unint64_t v401 = (uint64_t *)sub_24C8((uint64_t)v587, 0xFu, 3LL, (uint64_t)sub_34230);
  v402 = sub_2684(v401, "Xcode Derived Counters");
  __int128 v403 = *(_OWORD *)v402;
  int v1255 = *((_DWORD *)v402 + 4);
  __int128 v1254 = v403;
  sub_41004((uint64_t)&v1256, (uint64_t)(v402 + 3));
  memset(v1257, 0, sizeof(v1257));
  sub_6B58((char *)v1257, (__int128 *)v402[8], (__int128 *)v402[9], 0xAAAAAAAAAAAAAAABLL * ((v402[9] - v402[8]) >> 3));
  sub_23F4((int)v586, "FragmentStoreBytes");
  unint64_t v404 = (uint64_t *)sub_24C8((uint64_t)v586, 0xFu, 3LL, (uint64_t)sub_342B8);
  unint64_t v405 = sub_2684(v404, "Xcode Derived Counters");
  __int128 v406 = *(_OWORD *)v405;
  int v1259 = *((_DWORD *)v405 + 4);
  __int128 v1258 = v406;
  sub_41004((uint64_t)&v1260, (uint64_t)(v405 + 3));
  memset(v1261, 0, sizeof(v1261));
  sub_6B58((char *)v1261, (__int128 *)v405[8], (__int128 *)v405[9], 0xAAAAAAAAAAAAAAABLL * ((v405[9] - v405[8]) >> 3));
  sub_23F4((int)v585, "PreCullPrimitiveCount");
  double v407 = (uint64_t *)sub_24C8((uint64_t)v585, 0xFu, 3LL, (uint64_t)sub_344F4);
  double v408 = sub_2684(v407, "Xcode Derived Counters");
  __int128 v409 = *(_OWORD *)v408;
  int v1263 = *((_DWORD *)v408 + 4);
  __int128 v1262 = v409;
  sub_41004((uint64_t)&v1264, (uint64_t)(v408 + 3));
  memset(v1265, 0, sizeof(v1265));
  sub_6B58((char *)v1265, (__int128 *)v408[8], (__int128 *)v408[9], 0xAAAAAAAAAAAAAAABLL * ((v408[9] - v408[8]) >> 3));
  sub_23F4((int)v584, "PrimitiveTileIntersections");
  double v410 = (uint64_t *)sub_24C8((uint64_t)v584, 0xFu, 3LL, (uint64_t)sub_34530);
  unint64_t v411 = sub_2684(v410, "Xcode Derived Counters");
  __int128 v412 = *(_OWORD *)v411;
  int v1267 = *((_DWORD *)v411 + 4);
  __int128 v1266 = v412;
  sub_41004((uint64_t)&v1268, (uint64_t)(v411 + 3));
  memset(v1269, 0, sizeof(v1269));
  sub_6B58((char *)v1269, (__int128 *)v411[8], (__int128 *)v411[9], 0xAAAAAAAAAAAAAAABLL * ((v411[9] - v411[8]) >> 3));
  sub_23F4((int)v583, "TilerTilesProcessed");
  uint64_t v413 = (uint64_t *)sub_24C8((uint64_t)v583, 0xFu, 3LL, (uint64_t)sub_3456C);
  double v414 = sub_2684(v413, "Xcode Derived Counters");
  __int128 v415 = *(_OWORD *)v414;
  int v1271 = *((_DWORD *)v414 + 4);
  __int128 v1270 = v415;
  sub_41004((uint64_t)&v1272, (uint64_t)(v414 + 3));
  memset(v1273, 0, sizeof(v1273));
  sub_6B58((char *)v1273, (__int128 *)v414[8], (__int128 *)v414[9], 0xAAAAAAAAAAAAAAABLL * ((v414[9] - v414[8]) >> 3));
  sub_23F4((int)v582, "FragmentGeneratorTilesProcessed");
  unsigned __int8 v416 = (uint64_t *)sub_24C8((uint64_t)v582, 0xFu, 3LL, (uint64_t)sub_345A8);
  double v417 = sub_2684(v416, "Xcode Derived Counters");
  __int128 v418 = *(_OWORD *)v417;
  int v1275 = *((_DWORD *)v417 + 4);
  __int128 v1274 = v418;
  sub_41004((uint64_t)&v1276, (uint64_t)(v417 + 3));
  memset(v1277, 0, sizeof(v1277));
  sub_6B58((char *)v1277, (__int128 *)v417[8], (__int128 *)v417[9], 0xAAAAAAAAAAAAAAABLL * ((v417[9] - v417[8]) >> 3));
  sub_23F4((int)v581, "TextureCacheMissCount");
  char v419 = (uint64_t *)sub_24C8((uint64_t)v581, 0xFu, 3LL, (uint64_t)sub_345E4);
  char v420 = sub_2684(v419, "Xcode Derived Counters");
  __int128 v421 = *(_OWORD *)v420;
  int v1279 = *((_DWORD *)v420 + 4);
  __int128 v1278 = v421;
  sub_41004((uint64_t)&v1280, (uint64_t)(v420 + 3));
  memset(v1281, 0, sizeof(v1281));
  sub_6B58((char *)v1281, (__int128 *)v420[8], (__int128 *)v420[9], 0xAAAAAAAAAAAAAAABLL * ((v420[9] - v420[8]) >> 3));
  sub_23F4((int)v580, "ZTextureBytesReadFromMainMemory");
  unint64_t v422 = (uint64_t *)sub_24C8((uint64_t)v580, 0xFu, 3LL, (uint64_t)sub_34620);
  uint64_t v423 = sub_2684(v422, "Xcode Derived Counters");
  __int128 v424 = *(_OWORD *)v423;
  int v1283 = *((_DWORD *)v423 + 4);
  __int128 v1282 = v424;
  sub_41004((uint64_t)&v1284, (uint64_t)(v423 + 3));
  memset(v1285, 0, sizeof(v1285));
  sub_6B58((char *)v1285, (__int128 *)v423[8], (__int128 *)v423[9], 0xAAAAAAAAAAAAAAABLL * ((v423[9] - v423[8]) >> 3));
  sub_23F4((int)v579, "FragmentZLoadBytes");
  uint64_t v425 = (uint64_t *)sub_24C8((uint64_t)v579, 0xFu, 3LL, (uint64_t)sub_346AC);
  uint64_t v426 = sub_2684(v425, "Xcode Derived Counters");
  __int128 v427 = *(_OWORD *)v426;
  int v1287 = *((_DWORD *)v426 + 4);
  __int128 v1286 = v427;
  sub_41004((uint64_t)&v1288, (uint64_t)(v426 + 3));
  memset(v1289, 0, sizeof(v1289));
  sub_6B58((char *)v1289, (__int128 *)v426[8], (__int128 *)v426[9], 0xAAAAAAAAAAAAAAABLL * ((v426[9] - v426[8]) >> 3));
  sub_23F4((int)v578, "AveragePrimitiveProcessedPerTile");
  unsigned __int8 v428 = (uint64_t *)sub_24C8((uint64_t)v578, 0xFu, 3LL, (uint64_t)sub_34740);
  unsigned __int8 v429 = sub_2684(v428, "Xcode Derived Counters");
  __int128 v430 = *(_OWORD *)v429;
  int v1291 = *((_DWORD *)v429 + 4);
  __int128 v1290 = v430;
  sub_41004((uint64_t)&v1292, (uint64_t)(v429 + 3));
  memset(v1293, 0, sizeof(v1293));
  sub_6B58((char *)v1293, (__int128 *)v429[8], (__int128 *)v429[9], 0xAAAAAAAAAAAAAAABLL * ((v429[9] - v429[8]) >> 3));
  sub_23F4((int)v577, "OpaqueFragmentQuadsProcessed");
  uint64_t v431 = (uint64_t *)sub_24C8((uint64_t)v577, 0xFu, 3LL, (uint64_t)sub_347D4);
  unsigned int v432 = sub_2684(v431, "Xcode Derived Counters");
  __int128 v433 = *(_OWORD *)v432;
  int v1295 = *((_DWORD *)v432 + 4);
  __int128 v1294 = v433;
  sub_41004((uint64_t)&v1296, (uint64_t)(v432 + 3));
  memset(v1297, 0, sizeof(v1297));
  sub_6B58((char *)v1297, (__int128 *)v432[8], (__int128 *)v432[9], 0xAAAAAAAAAAAAAAABLL * ((v432[9] - v432[8]) >> 3));
  sub_23F4((int)v576, "TranslucentFragmentQuadsProcessed");
  char v434 = (uint64_t *)sub_24C8((uint64_t)v576, 0xFu, 3LL, (uint64_t)sub_34950);
  uint64_t v435 = sub_2684(v434, "Xcode Derived Counters");
  __int128 v436 = *(_OWORD *)v435;
  int v1299 = *((_DWORD *)v435 + 4);
  __int128 v1298 = v436;
  sub_41004((uint64_t)&v1300, (uint64_t)(v435 + 3));
  memset(v1301, 0, sizeof(v1301));
  sub_6B58((char *)v1301, (__int128 *)v435[8], (__int128 *)v435[9], 0xAAAAAAAAAAAAAAABLL * ((v435[9] - v435[8]) >> 3));
  sub_23F4((int)v575, "FeedBackFragmentQuadsProcessed");
  uint64_t v437 = (uint64_t *)sub_24C8((uint64_t)v575, 0xFu, 3LL, (uint64_t)sub_34ACC);
  uint64_t v438 = sub_2684(v437, "Xcode Derived Counters");
  __int128 v439 = *(_OWORD *)v438;
  int v1303 = *((_DWORD *)v438 + 4);
  __int128 v1302 = v439;
  sub_41004((uint64_t)&v1304, (uint64_t)(v438 + 3));
  memset(v1305, 0, sizeof(v1305));
  sub_6B58((char *)v1305, (__int128 *)v438[8], (__int128 *)v438[9], 0xAAAAAAAAAAAAAAABLL * ((v438[9] - v438[8]) >> 3));
  sub_23F4((int)v574, "TextureFilteringLimiter");
  int v440 = (uint64_t *)sub_24C8((uint64_t)v574, 0xFu, 3LL, (uint64_t)sub_34C94);
  unint64_t v441 = sub_2684(v440, "Xcode Derived Counters");
  __int128 v442 = *(_OWORD *)v441;
  int v1307 = *((_DWORD *)v441 + 4);
  __int128 v1306 = v442;
  sub_41004((uint64_t)&v1308, (uint64_t)(v441 + 3));
  memset(v1309, 0, sizeof(v1309));
  sub_6B58((char *)v1309, (__int128 *)v441[8], (__int128 *)v441[9], 0xAAAAAAAAAAAAAAABLL * ((v441[9] - v441[8]) >> 3));
  sub_23F4((int)v573, "TextureFilteringUtilization");
  uint64_t v443 = (uint64_t *)sub_24C8((uint64_t)v573, 0xFu, 3LL, (uint64_t)sub_34DB4);
  v444 = sub_2684(v443, "Xcode Derived Counters");
  __int128 v445 = *(_OWORD *)v444;
  int v1311 = *((_DWORD *)v444 + 4);
  __int128 v1310 = v445;
  sub_41004((uint64_t)&v1312, (uint64_t)(v444 + 3));
  memset(v1313, 0, sizeof(v1313));
  sub_6B58((char *)v1313, (__int128 *)v444[8], (__int128 *)v444[9], 0xAAAAAAAAAAAAAAABLL * ((v444[9] - v444[8]) >> 3));
  sub_23F4((int)v572, "TextureCacheUtilization");
  int v446 = (uint64_t *)sub_24C8((uint64_t)v572, 0xFu, 3LL, (uint64_t)sub_34ED4);
  unsigned int v447 = sub_2684(v446, "Xcode Derived Counters");
  __int128 v448 = *(_OWORD *)v447;
  int v1315 = *((_DWORD *)v447 + 4);
  __int128 v1314 = v448;
  sub_41004((uint64_t)&v1316, (uint64_t)(v447 + 3));
  memset(v1317, 0, sizeof(v1317));
  sub_6B58((char *)v1317, (__int128 *)v447[8], (__int128 *)v447[9], 0xAAAAAAAAAAAAAAABLL * ((v447[9] - v447[8]) >> 3));
  sub_23F4((int)v571, "TLBMissRate");
  int v449 = (uint64_t *)sub_24C8((uint64_t)v571, 0xFu, 3LL, (uint64_t)sub_34FF4);
  v450 = sub_2684(v449, "Xcode Derived Counters");
  __int128 v451 = *(_OWORD *)v450;
  int v1319 = *((_DWORD *)v450 + 4);
  __int128 v1318 = v451;
  sub_41004((uint64_t)&v1320, (uint64_t)(v450 + 3));
  memset(v1321, 0, sizeof(v1321));
  sub_6B58((char *)v1321, (__int128 *)v450[8], (__int128 *)v450[9], 0xAAAAAAAAAAAAAAABLL * ((v450[9] - v450[8]) >> 3));
  sub_23F4((int)v570, "TilingBlockLimiter");
  int v452 = (uint64_t *)sub_24C8((uint64_t)v570, 0xFu, 3LL, (uint64_t)sub_3514C);
  unint64_t v453 = sub_2684(v452, "Xcode Derived Counters");
  __int128 v454 = *(_OWORD *)v453;
  int v1323 = *((_DWORD *)v453 + 4);
  __int128 v1322 = v454;
  sub_41004((uint64_t)&v1324, (uint64_t)(v453 + 3));
  memset(v1325, 0, sizeof(v1325));
  sub_6B58((char *)v1325, (__int128 *)v453[8], (__int128 *)v453[9], 0xAAAAAAAAAAAAAAABLL * ((v453[9] - v453[8]) >> 3));
  sub_23F4((int)v569, "PrimitiveBlocksWriteLimiter");
  int v455 = (uint64_t *)sub_24C8((uint64_t)v569, 0xFu, 3LL, (uint64_t)sub_352C4);
  v456 = sub_2684(v455, "Xcode Derived Counters");
  __int128 v457 = *(_OWORD *)v456;
  int v1327 = *((_DWORD *)v456 + 4);
  __int128 v1326 = v457;
  sub_41004((uint64_t)&v1328, (uint64_t)(v456 + 3));
  memset(v1329, 0, sizeof(v1329));
  sub_6B58((char *)v1329, (__int128 *)v456[8], (__int128 *)v456[9], 0xAAAAAAAAAAAAAAABLL * ((v456[9] - v456[8]) >> 3));
  sub_23F4((int)v568, "ShadedVertexReadLimiter");
  uint64_t v458 = (uint64_t *)sub_24C8((uint64_t)v568, 0xFu, 3LL, (uint64_t)sub_3543C);
  uint64_t v459 = sub_2684(v458, "Xcode Derived Counters");
  __int128 v460 = *(_OWORD *)v459;
  int v1331 = *((_DWORD *)v459 + 4);
  __int128 v1330 = v460;
  sub_41004((uint64_t)&v1332, (uint64_t)(v459 + 3));
  memset(v1333, 0, sizeof(v1333));
  sub_6B58((char *)v1333, (__int128 *)v459[8], (__int128 *)v459[9], 0xAAAAAAAAAAAAAAABLL * ((v459[9] - v459[8]) >> 3));
  sub_23F4((int)v567, "PrimitiveCullLimiter");
  double v461 = (uint64_t *)sub_24C8((uint64_t)v567, 0xFu, 3LL, (uint64_t)sub_35514);
  double v462 = sub_2684(v461, "Xcode Derived Counters");
  __int128 v463 = *(_OWORD *)v462;
  int v1335 = *((_DWORD *)v462 + 4);
  __int128 v1334 = v463;
  sub_41004((uint64_t)&v1336, (uint64_t)(v462 + 3));
  memset(v1337, 0, sizeof(v1337));
  sub_6B58((char *)v1337, (__int128 *)v462[8], (__int128 *)v462[9], 0xAAAAAAAAAAAAAAABLL * ((v462[9] - v462[8]) >> 3));
  sub_23F4((int)v566, "PrimitiveClipLimiter");
  uint64_t v464 = (uint64_t *)sub_24C8((uint64_t)v566, 0xFu, 3LL, (uint64_t)sub_35644);
  uint64_t v465 = sub_2684(v464, "Xcode Derived Counters");
  __int128 v466 = *(_OWORD *)v465;
  int v1339 = *((_DWORD *)v465 + 4);
  __int128 v1338 = v466;
  sub_41004((uint64_t)&v1340, (uint64_t)(v465 + 3));
  memset(v1341, 0, sizeof(v1341));
  sub_6B58((char *)v1341, (__int128 *)v465[8], (__int128 *)v465[9], 0xAAAAAAAAAAAAAAABLL * ((v465[9] - v465[8]) >> 3));
  sub_23F4((int)v565, "MMUTLBRequests");
  unint64_t v467 = (uint64_t *)sub_24C8((uint64_t)v565, 0xFu, 3LL, (uint64_t)sub_35774);
  double v468 = sub_2684(v467, "Xcode Derived Counters");
  __int128 v469 = *(_OWORD *)v468;
  int v1343 = *((_DWORD *)v468 + 4);
  __int128 v1342 = v469;
  sub_41004((uint64_t)&v1344, (uint64_t)(v468 + 3));
  memset(v1345, 0, sizeof(v1345));
  sub_6B58((char *)v1345, (__int128 *)v468[8], (__int128 *)v468[9], 0xAAAAAAAAAAAAAAABLL * ((v468[9] - v468[8]) >> 3));
  sub_23F4((int)v564, "MMUTLBHits");
  uint64_t v470 = (uint64_t *)sub_24C8((uint64_t)v564, 0xFu, 3LL, (uint64_t)sub_357B0);
  unsigned int v471 = sub_2684(v470, "Xcode Derived Counters");
  __int128 v472 = *(_OWORD *)v471;
  int v1347 = *((_DWORD *)v471 + 4);
  __int128 v1346 = v472;
  sub_41004((uint64_t)&v1348, (uint64_t)(v471 + 3));
  memset(v1349, 0, sizeof(v1349));
  sub_6B58((char *)v1349, (__int128 *)v471[8], (__int128 *)v471[9], 0xAAAAAAAAAAAAAAABLL * ((v471[9] - v471[8]) >> 3));
  sub_23F4((int)v563, "MMUTLBMissRate");
  double v473 = (uint64_t *)sub_24C8((uint64_t)v563, 0xFu, 3LL, (uint64_t)sub_357EC);
  int v474 = sub_2684(v473, "Xcode Derived Counters");
  __int128 v475 = *(_OWORD *)v474;
  int v1351 = *((_DWORD *)v474 + 4);
  __int128 v1350 = v475;
  sub_41004((uint64_t)&v1352, (uint64_t)(v474 + 3));
  memset(v1353, 0, sizeof(v1353));
  sub_6B58((char *)v1353, (__int128 *)v474[8], (__int128 *)v474[9], 0xAAAAAAAAAAAAAAABLL * ((v474[9] - v474[8]) >> 3));
  sub_23F4((int)v562, "MissBufferFullStallRatio");
  int v476 = (uint64_t *)sub_24C8((uint64_t)v562, 0xFu, 3LL, (uint64_t)sub_35A14);
  int v477 = sub_2684(v476, "Xcode Derived Counters");
  __int128 v478 = *(_OWORD *)v477;
  int v1355 = *((_DWORD *)v477 + 4);
  __int128 v1354 = v478;
  sub_41004((uint64_t)&v1356, (uint64_t)(v477 + 3));
  memset(v1357, 0, sizeof(v1357));
  sub_6B58((char *)v1357, (__int128 *)v477[8], (__int128 *)v477[9], 0xAAAAAAAAAAAAAAABLL * ((v477[9] - v477[8]) >> 3));
  sub_23F4((int)v561, "RasterizedFragmentsPerTriangle");
  double v479 = (uint64_t *)sub_24C8((uint64_t)v561, 0xFu, 3LL, (uint64_t)sub_35B2C);
  int v480 = sub_2684(v479, "Xcode Derived Counters");
  __int128 v481 = *(_OWORD *)v480;
  int v1359 = *((_DWORD *)v480 + 4);
  __int128 v1358 = v481;
  sub_41004((uint64_t)&v1360, (uint64_t)(v480 + 3));
  memset(v1361, 0, sizeof(v1361));
  sub_6B58((char *)v1361, (__int128 *)v480[8], (__int128 *)v480[9], 0xAAAAAAAAAAAAAAABLL * ((v480[9] - v480[8]) >> 3));
  sub_23F4((int)v560, "ALUInstructions");
  unint64_t v482 = (uint64_t *)sub_24C8((uint64_t)v560, 0xFu, 3LL, (uint64_t)sub_35C44);
  double v483 = sub_2684(v482, "Xcode Derived Counters");
  __int128 v484 = *(_OWORD *)v483;
  int v1363 = *((_DWORD *)v483 + 4);
  __int128 v1362 = v484;
  sub_41004((uint64_t)&v1364, (uint64_t)(v483 + 3));
  memset(v1365, 0, sizeof(v1365));
  sub_6B58((char *)v1365, (__int128 *)v483[8], (__int128 *)v483[9], 0xAAAAAAAAAAAAAAABLL * ((v483[9] - v483[8]) >> 3));
  sub_23F4((int)v559, "VerticesPerNSec");
  int v485 = (uint64_t *)sub_24C8((uint64_t)v559, 0xFu, 3LL, (uint64_t)sub_35E10);
  double v486 = sub_2684(v485, "Xcode Derived Counters");
  __int128 v487 = *(_OWORD *)v486;
  int v1367 = *((_DWORD *)v486 + 4);
  __int128 v1366 = v487;
  sub_41004((uint64_t)&v1368, (uint64_t)(v486 + 3));
  memset(v1369, 0, sizeof(v1369));
  sub_6B58((char *)v1369, (__int128 *)v486[8], (__int128 *)v486[9], 0xAAAAAAAAAAAAAAABLL * ((v486[9] - v486[8]) >> 3));
  sub_23F4((int)v558, "PredicatedALUPercentage");
  int v488 = (uint64_t *)sub_24C8((uint64_t)v558, 0xFu, 3LL, (uint64_t)sub_35F08);
  int v489 = sub_2684(v488, "Xcode Derived Counters");
  __int128 v490 = *(_OWORD *)v489;
  int v1371 = *((_DWORD *)v489 + 4);
  __int128 v1370 = v490;
  sub_41004((uint64_t)&v1372, (uint64_t)(v489 + 3));
  memset(v1373, 0, sizeof(v1373));
  sub_6B58((char *)v1373, (__int128 *)v489[8], (__int128 *)v489[9], 0xAAAAAAAAAAAAAAABLL * ((v489[9] - v489[8]) >> 3));
  sub_23F4((int)v557, "ALUF32");
  unint64_t v491 = (uint64_t *)sub_24C8((uint64_t)v557, 0xFu, 3LL, (uint64_t)sub_3617C);
  unint64_t v492 = sub_2684(v491, "Xcode Derived Counters");
  __int128 v493 = *(_OWORD *)v492;
  int v1375 = *((_DWORD *)v492 + 4);
  __int128 v1374 = v493;
  sub_41004((uint64_t)&v1376, (uint64_t)(v492 + 3));
  memset(v1377, 0, sizeof(v1377));
  sub_6B58((char *)v1377, (__int128 *)v492[8], (__int128 *)v492[9], 0xAAAAAAAAAAAAAAABLL * ((v492[9] - v492[8]) >> 3));
  sub_23F4((int)v556, "ALUF16");
  int v494 = (uint64_t *)sub_24C8((uint64_t)v556, 0xFu, 3LL, (uint64_t)sub_361B8);
  double v495 = sub_2684(v494, "Xcode Derived Counters");
  __int128 v496 = *(_OWORD *)v495;
  int v1379 = *((_DWORD *)v495 + 4);
  __int128 v1378 = v496;
  sub_41004((uint64_t)&v1380, (uint64_t)(v495 + 3));
  memset(v1381, 0, sizeof(v1381));
  sub_6B58((char *)v1381, (__int128 *)v495[8], (__int128 *)v495[9], 0xAAAAAAAAAAAAAAABLL * ((v495[9] - v495[8]) >> 3));
  sub_23F4((int)v555, "ALUInt32AndCond");
  int v497 = (uint64_t *)sub_24C8((uint64_t)v555, 0xFu, 3LL, (uint64_t)sub_361F4);
  int v498 = sub_2684(v497, "Xcode Derived Counters");
  __int128 v499 = *(_OWORD *)v498;
  int v1383 = *((_DWORD *)v498 + 4);
  __int128 v1382 = v499;
  sub_41004((uint64_t)&v1384, (uint64_t)(v498 + 3));
  memset(v1385, 0, sizeof(v1385));
  sub_6B58((char *)v1385, (__int128 *)v498[8], (__int128 *)v498[9], 0xAAAAAAAAAAAAAAABLL * ((v498[9] - v498[8]) >> 3));
  sub_23F4((int)v554, "ALUIntAndComplex");
  double v500 = (uint64_t *)sub_24C8((uint64_t)v554, 0xFu, 3LL, (uint64_t)sub_36230);
  int v501 = sub_2684(v500, "Xcode Derived Counters");
  __int128 v502 = *(_OWORD *)v501;
  int v1387 = *((_DWORD *)v501 + 4);
  __int128 v1386 = v502;
  sub_41004((uint64_t)&v1388, (uint64_t)(v501 + 3));
  memset(v1389, 0, sizeof(v1389));
  sub_6B58((char *)v1389, (__int128 *)v501[8], (__int128 *)v501[9], 0xAAAAAAAAAAAAAAABLL * ((v501[9] - v501[8]) >> 3));
  sub_23F4((int)v553, "ALUF32Issued");
  char v503 = (uint64_t *)sub_24C8((uint64_t)v553, 0xFu, 3LL, (uint64_t)sub_3626C);
  char v504 = sub_2684(v503, "Xcode Derived Counters");
  __int128 v505 = *(_OWORD *)v504;
  int v1391 = *((_DWORD *)v504 + 4);
  __int128 v1390 = v505;
  sub_41004((uint64_t)&v1392, (uint64_t)(v504 + 3));
  memset(v1393, 0, sizeof(v1393));
  sub_6B58((char *)v1393, (__int128 *)v504[8], (__int128 *)v504[9], 0xAAAAAAAAAAAAAAABLL * ((v504[9] - v504[8]) >> 3));
  sub_23F4((int)v552, "ALUF16Issued");
  int v506 = (uint64_t *)sub_24C8((uint64_t)v552, 0xFu, 3LL, (uint64_t)sub_36310);
  unint64_t v507 = sub_2684(v506, "Xcode Derived Counters");
  __int128 v508 = *(_OWORD *)v507;
  int v1395 = *((_DWORD *)v507 + 4);
  __int128 v1394 = v508;
  sub_41004((uint64_t)&v1396, (uint64_t)(v507 + 3));
  memset(v1397, 0, sizeof(v1397));
  sub_6B58((char *)v1397, (__int128 *)v507[8], (__int128 *)v507[9], 0xAAAAAAAAAAAAAAABLL * ((v507[9] - v507[8]) >> 3));
  sub_23F4((int)v551, "ALUInt32AndCondIssued");
  unint64_t v509 = (uint64_t *)sub_24C8((uint64_t)v551, 0xFu, 3LL, (uint64_t)sub_363B4);
  uint64_t v510 = sub_2684(v509, "Xcode Derived Counters");
  __int128 v511 = *(_OWORD *)v510;
  int v1399 = *((_DWORD *)v510 + 4);
  __int128 v1398 = v511;
  sub_41004((uint64_t)&v1400, (uint64_t)(v510 + 3));
  memset(v1401, 0, sizeof(v1401));
  sub_6B58((char *)v1401, (__int128 *)v510[8], (__int128 *)v510[9], 0xAAAAAAAAAAAAAAABLL * ((v510[9] - v510[8]) >> 3));
  sub_23F4((int)v550, "ALUIntAndComplexIssued");
  int v512 = (uint64_t *)sub_24C8((uint64_t)v550, 0xFu, 3LL, (uint64_t)sub_36458);
  double v513 = sub_2684(v512, "Xcode Derived Counters");
  __int128 v514 = *(_OWORD *)v513;
  int v1403 = *((_DWORD *)v513 + 4);
  __int128 v1402 = v514;
  sub_41004((uint64_t)&v1404, (uint64_t)(v513 + 3));
  memset(v1405, 0, sizeof(v1405));
  sub_6B58((char *)v1405, (__int128 *)v513[8], (__int128 *)v513[9], 0xAAAAAAAAAAAAAAABLL * ((v513[9] - v513[8]) >> 3));
  sub_23F4((int)v549, "CFIssued");
  char v515 = (uint64_t *)sub_24C8((uint64_t)v549, 0xFu, 3LL, (uint64_t)sub_36538);
  v516 = sub_2684(v515, "Xcode Derived Counters");
  __int128 v517 = *(_OWORD *)v516;
  int v1407 = *((_DWORD *)v516 + 4);
  __int128 v1406 = v517;
  sub_41004((uint64_t)&v1408, (uint64_t)(v516 + 3));
  memset(v1409, 0, sizeof(v1409));
  sub_6B58((char *)v1409, (__int128 *)v516[8], (__int128 *)v516[9], 0xAAAAAAAAAAAAAAABLL * ((v516[9] - v516[8]) >> 3));
  sub_23F4((int)v548, "ALUPerformance");
  unsigned int v518 = (uint64_t *)sub_24C8((uint64_t)v548, 0xFu, 3LL, (uint64_t)sub_365DC);
  unsigned int v519 = sub_2684(v518, "Xcode Derived Counters");
  __int128 v520 = *(_OWORD *)v519;
  int v1411 = *((_DWORD *)v519 + 4);
  __int128 v1410 = v520;
  sub_41004((uint64_t)&v1412, (uint64_t)(v519 + 3));
  memset(v1413, 0, sizeof(v1413));
  sub_6B58((char *)v1413, (__int128 *)v519[8], (__int128 *)v519[9], 0xAAAAAAAAAAAAAAABLL * ((v519[9] - v519[8]) >> 3));
  sub_23F4((int)v547, "ALUF32Percent");
  unsigned int v521 = (uint64_t *)sub_24C8((uint64_t)v547, 0xFu, 3LL, (uint64_t)sub_366F4);
  v522 = sub_2684(v521, "Xcode Derived Counters");
  __int128 v523 = *(_OWORD *)v522;
  int v1415 = *((_DWORD *)v522 + 4);
  __int128 v1414 = v523;
  sub_41004((uint64_t)&v1416, (uint64_t)(v522 + 3));
  memset(v1417, 0, sizeof(v1417));
  sub_6B58((char *)v1417, (__int128 *)v522[8], (__int128 *)v522[9], 0xAAAAAAAAAAAAAAABLL * ((v522[9] - v522[8]) >> 3));
  sub_23F4((int)v546, "ALUF16Percent");
  unsigned int v524 = (uint64_t *)sub_24C8((uint64_t)v546, 0xFu, 3LL, (uint64_t)sub_367D0);
  int v525 = sub_2684(v524, "Xcode Derived Counters");
  __int128 v526 = *(_OWORD *)v525;
  int v1419 = *((_DWORD *)v525 + 4);
  __int128 v1418 = v526;
  sub_41004((uint64_t)&v1420, (uint64_t)(v525 + 3));
  memset(v1421, 0, sizeof(v1421));
  sub_6B58((char *)v1421, (__int128 *)v525[8], (__int128 *)v525[9], 0xAAAAAAAAAAAAAAABLL * ((v525[9] - v525[8]) >> 3));
  sub_23F4((int)v545, "ALUSCIBPercent");
  double v527 = (uint64_t *)sub_24C8((uint64_t)v545, 0xFu, 3LL, (uint64_t)sub_368AC);
  double v528 = sub_2684(v527, "Xcode Derived Counters");
  __int128 v529 = *(_OWORD *)v528;
  int v1423 = *((_DWORD *)v528 + 4);
  __int128 v1422 = v529;
  sub_41004((uint64_t)&v1424, (uint64_t)(v528 + 3));
  memset(v1425, 0, sizeof(v1425));
  sub_6B58((char *)v1425, (__int128 *)v528[8], (__int128 *)v528[9], 0xAAAAAAAAAAAAAAABLL * ((v528[9] - v528[8]) >> 3));
  sub_23F4((int)v544, "ALUICPercent");
  int v530 = (uint64_t *)sub_24C8((uint64_t)v544, 0xFu, 3LL, (uint64_t)sub_36988);
  double v531 = sub_2684(v530, "Xcode Derived Counters");
  __int128 v532 = *(_OWORD *)v531;
  int v1427 = *((_DWORD *)v531 + 4);
  __int128 v1426 = v532;
  sub_41004((uint64_t)&v1428, (uint64_t)(v531 + 3));
  memset(v1429, 0, sizeof(v1429));
  sub_6B58((char *)v1429, (__int128 *)v531[8], (__int128 *)v531[9], 0xAAAAAAAAAAAAAAABLL * ((v531[9] - v531[8]) >> 3));
  sub_23F4((int)v543, "CFInstructions");
  char v533 = (uint64_t *)sub_24C8((uint64_t)v543, 0xFu, 3LL, (uint64_t)sub_36AAC);
  int v534 = sub_2684(v533, "Xcode Derived Counters");
  __int128 v535 = *(_OWORD *)v534;
  int v1431 = *((_DWORD *)v534 + 4);
  __int128 v1430 = v535;
  sub_41004((uint64_t)&v1432, (uint64_t)(v534 + 3));
  memset(v1433, 0, sizeof(v1433));
  sub_6B58((char *)v1433, (__int128 *)v534[8], (__int128 *)v534[9], 0xAAAAAAAAAAAAAAABLL * ((v534[9] - v534[8]) >> 3));
  sub_23F4((int)v542, "AGenInstructions");
  double v536 = (uint64_t *)sub_24C8((uint64_t)v542, 0xFu, 3LL, (uint64_t)sub_36B44);
  unint64_t v537 = sub_2684(v536, "Xcode Derived Counters");
  __int128 v538 = *(_OWORD *)v537;
  int v1435 = *((_DWORD *)v537 + 4);
  __int128 v1434 = v538;
  sub_41004((uint64_t)&v1436, (uint64_t)(v537 + 3));
  memset(v1437, 0, sizeof(v1437));
  sub_6B58((char *)v1437, (__int128 *)v537[8], (__int128 *)v537[9], 0xAAAAAAAAAAAAAAABLL * ((v537[9] - v537[8]) >> 3));
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  v720[11] = a1;
  char v721 = 0;
  int v539 = (char *)operator new(0x3D88uLL);
  *a1 = v539;
  a1[1] = v539;
  a1[2] = v539 + 15752;
  uint64_t v540 = 0LL;
  a1[1] = sub_4129C((uint64_t)(a1 + 2), (uint64_t)&v722, (uint64_t)&v1438, (uint64_t)v539);
  do
  {
    sub_2468((char *)&v1434 + v540);
    v540 -= 88LL;
  }

  while (v540 != -15752);
  sub_2468(v542);
  sub_2468(v543);
  sub_2468(v544);
  sub_2468(v545);
  sub_2468(v546);
  sub_2468(v547);
  sub_2468(v548);
  sub_2468(v549);
  sub_2468(v550);
  sub_2468(v551);
  sub_2468(v552);
  sub_2468(v553);
  sub_2468(v554);
  sub_2468(v555);
  sub_2468(v556);
  sub_2468(v557);
  sub_2468(v558);
  sub_2468(v559);
  sub_2468(v560);
  sub_2468(v561);
  sub_2468(v562);
  sub_2468(v563);
  sub_2468(v564);
  sub_2468(v565);
  sub_2468(v566);
  sub_2468(v567);
  sub_2468(v568);
  sub_2468(v569);
  sub_2468(v570);
  sub_2468(v571);
  sub_2468(v572);
  sub_2468(v573);
  sub_2468(v574);
  sub_2468(v575);
  sub_2468(v576);
  sub_2468(v577);
  sub_2468(v578);
  sub_2468(v579);
  sub_2468(v580);
  sub_2468(v581);
  sub_2468(v582);
  sub_2468(v583);
  sub_2468(v584);
  sub_2468(v585);
  sub_2468(v586);
  sub_2468(v587);
  sub_2468(v588);
  sub_2468(v589);
  sub_2468(v590);
  sub_2468(v591);
  sub_2468(v592);
  sub_2468(v593);
  sub_2468(v594);
  sub_2468(v595);
  sub_2468(v596);
  sub_2468(v597);
  sub_2468(v598);
  sub_2468(v599);
  sub_2468(v600);
  sub_2468(v601);
  sub_2468(v602);
  sub_2468(v603);
  sub_2468(v604);
  sub_2468(v605);
  sub_2468(v606);
  sub_2468(v607);
  sub_2468(v608);
  sub_2468(v609);
  sub_2468(v610);
  sub_2468(v611);
  sub_2468(v612);
  sub_2468(v613);
  sub_2468(v614);
  sub_2468(v615);
  sub_2468(v616);
  sub_2468(v617);
  sub_2468(v618);
  sub_2468(v619);
  sub_2468(v620);
  sub_2468(v621);
  sub_2468(v622);
  sub_2468(v623);
  sub_2468(v624);
  sub_2468(v625);
  sub_2468(v626);
  sub_2468(v627);
  sub_2468(v628);
  sub_2468(v629);
  sub_2468(v630);
  sub_2468(v631);
  sub_2468(v632);
  sub_2468(v633);
  sub_2468(v634);
  sub_2468(v635);
  sub_2468(v636);
  sub_2468(v637);
  sub_2468(v638);
  sub_2468(v639);
  sub_2468(v640);
  sub_2468(v641);
  sub_2468(v642);
  sub_2468(v643);
  sub_2468(v644);
  sub_2468(v645);
  sub_2468(v646);
  sub_2468(v647);
  sub_2468(v648);
  sub_2468(v649);
  sub_2468(v650);
  sub_2468(v651);
  sub_2468(v652);
  sub_2468(v653);
  sub_2468(v654);
  sub_2468(v655);
  sub_2468(v656);
  sub_2468(v657);
  sub_2468(v658);
  sub_2468(v659);
  sub_2468(v660);
  sub_2468(v661);
  sub_2468(v662);
  sub_2468(v663);
  sub_2468(v664);
  sub_2468(v665);
  sub_2468(v666);
  sub_2468(v667);
  sub_2468(v668);
  sub_2468(v669);
  sub_2468(v670);
  sub_2468(v671);
  sub_2468(v672);
  sub_2468(v673);
  sub_2468(v674);
  sub_2468(v675);
  sub_2468(v676);
  sub_2468(v677);
  sub_2468(v678);
  sub_2468(v679);
  sub_2468(v680);
  sub_2468(v681);
  sub_2468(v682);
  sub_2468(v683);
  sub_2468(v684);
  sub_2468(v685);
  sub_2468(v686);
  sub_2468(v687);
  sub_2468(v688);
  sub_2468(v689);
  sub_2468(v690);
  sub_2468(v691);
  sub_2468(v692);
  sub_2468(v693);
  sub_2468(v694);
  sub_2468(v695);
  sub_2468(v696);
  sub_2468(v697);
  sub_2468(v698);
  sub_2468(v699);
  sub_2468(v700);
  sub_2468(v701);
  sub_2468(v702);
  sub_2468(v703);
  sub_2468(v704);
  sub_2468(v705);
  sub_2468(v706);
  sub_2468(v707);
  sub_2468(v708);
  sub_2468(v709);
  sub_2468(v710);
  sub_2468(v711);
  sub_2468(v712);
  sub_2468(v713);
  sub_2468(v714);
  sub_2468(v715);
  sub_2468(v716);
  sub_2468(v717);
  sub_2468(v718);
  sub_2468(v719);
  return sub_2468(v720);
}

void sub_3F168( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v65 + 8) = v66;
  sub_981C((void ***)&STACK[0x3D90]);
  uint64_t v69 = -15752LL;
  uint64_t v70 = v67;
  do
  {
    uint64_t v70 = sub_2468(v70) - 88;
    v69 += 88LL;
  }

  while (v69);
  sub_2468(&a10);
  sub_2468(&a21);
  sub_2468(&a32);
  sub_2468(&a43);
  sub_2468(&a54);
  sub_2468(&a65);
  sub_2468(&STACK[0x218]);
  sub_2468(&STACK[0x270]);
  sub_2468(&STACK[0x2C8]);
  sub_2468(&STACK[0x320]);
  sub_2468(&STACK[0x378]);
  sub_2468(&STACK[0x3D0]);
  sub_2468(&STACK[0x428]);
  sub_2468(&STACK[0x480]);
  sub_2468(&STACK[0x4D8]);
  sub_2468(&STACK[0x530]);
  sub_2468(&STACK[0x588]);
  sub_2468(&STACK[0x5E0]);
  sub_2468(&STACK[0x638]);
  sub_2468(&STACK[0x690]);
  sub_2468(&STACK[0x6E8]);
  sub_2468(&STACK[0x740]);
  sub_2468(&STACK[0x798]);
  sub_2468(&STACK[0x7F0]);
  sub_2468(&STACK[0x848]);
  sub_2468(&STACK[0x8A0]);
  sub_2468(&STACK[0x8F8]);
  sub_2468(&STACK[0x950]);
  sub_2468(&STACK[0x9A8]);
  sub_2468(&STACK[0xA00]);
  sub_2468(&STACK[0xA58]);
  sub_2468(&STACK[0xAB0]);
  sub_2468(&STACK[0xB08]);
  sub_2468(&STACK[0xB60]);
  sub_2468(&STACK[0xBB8]);
  sub_2468(&STACK[0xC10]);
  sub_2468(&STACK[0xC68]);
  sub_2468(&STACK[0xCC0]);
  sub_2468(&STACK[0xD18]);
  sub_2468(&STACK[0xD70]);
  sub_2468(&STACK[0xDC8]);
  sub_2468(&STACK[0xE20]);
  sub_2468(&STACK[0xE78]);
  sub_2468(&STACK[0xED0]);
  sub_2468(&STACK[0xF28]);
  sub_2468(&STACK[0xF80]);
  sub_2468(&STACK[0xFD8]);
  sub_2468(&STACK[0x1030]);
  sub_2468(&STACK[0x1088]);
  sub_2468(&STACK[0x10E0]);
  sub_2468(&STACK[0x1138]);
  sub_2468(&STACK[0x1190]);
  sub_2468(&STACK[0x11E8]);
  sub_2468(&STACK[0x1240]);
  sub_2468(&STACK[0x1298]);
  sub_2468(&STACK[0x12F0]);
  sub_2468(&STACK[0x1348]);
  sub_2468(&STACK[0x13A0]);
  sub_2468(&STACK[0x13F8]);
  sub_2468(&STACK[0x1450]);
  sub_2468(&STACK[0x14A8]);
  sub_2468(&STACK[0x1500]);
  sub_2468(&STACK[0x1558]);
  sub_2468(&STACK[0x15B0]);
  sub_2468(&STACK[0x1608]);
  sub_2468(&STACK[0x1660]);
  sub_2468(&STACK[0x16B8]);
  sub_2468(&STACK[0x1710]);
  sub_2468(&STACK[0x1768]);
  sub_2468(&STACK[0x17C0]);
  sub_2468(&STACK[0x1818]);
  sub_2468(&STACK[0x1870]);
  sub_2468(&STACK[0x18C8]);
  sub_2468(&STACK[0x1920]);
  sub_2468(&STACK[0x1978]);
  sub_2468(&STACK[0x19D0]);
  sub_2468(&STACK[0x1A28]);
  sub_2468(&STACK[0x1A80]);
  sub_2468(&STACK[0x1AD8]);
  sub_2468(&STACK[0x1B30]);
  sub_2468(&STACK[0x1B88]);
  sub_2468(&STACK[0x1BE0]);
  sub_2468(&STACK[0x1C38]);
  sub_2468(&STACK[0x1C90]);
  sub_2468(&STACK[0x1CE8]);
  sub_2468(&STACK[0x1D40]);
  sub_2468(&STACK[0x1D98]);
  sub_2468(&STACK[0x1DF0]);
  sub_2468(&STACK[0x1E48]);
  sub_2468(&STACK[0x1EA0]);
  sub_2468(&STACK[0x1EF8]);
  sub_2468(&STACK[0x1F50]);
  sub_2468(&STACK[0x1FA8]);
  sub_2468(&STACK[0x2000]);
  sub_2468(&STACK[0x2058]);
  sub_2468(&STACK[0x20B0]);
  sub_2468(&STACK[0x2108]);
  sub_2468(&STACK[0x2160]);
  sub_2468(&STACK[0x21B8]);
  sub_2468(&STACK[0x2210]);
  sub_2468(&STACK[0x2268]);
  sub_2468(&STACK[0x22C0]);
  sub_2468(&STACK[0x2318]);
  sub_2468(&STACK[0x2370]);
  sub_2468(&STACK[0x23C8]);
  sub_2468(&STACK[0x2420]);
  sub_2468(&STACK[0x2478]);
  sub_2468(&STACK[0x24D0]);
  sub_2468(&STACK[0x2528]);
  sub_2468(&STACK[0x2580]);
  sub_2468(&STACK[0x25D8]);
  sub_2468(&STACK[0x2630]);
  sub_2468(&STACK[0x2688]);
  sub_2468(&STACK[0x26E0]);
  sub_2468(&STACK[0x2738]);
  sub_2468(&STACK[0x2790]);
  sub_2468(&STACK[0x27E8]);
  sub_2468(&STACK[0x2840]);
  sub_2468(&STACK[0x2898]);
  sub_2468(&STACK[0x28F0]);
  sub_2468(&STACK[0x2948]);
  sub_2468(&STACK[0x29A0]);
  sub_2468(&STACK[0x29F8]);
  sub_2468(&STACK[0x2A50]);
  sub_2468(&STACK[0x2AA8]);
  sub_2468(&STACK[0x2B00]);
  sub_2468(&STACK[0x2B58]);
  sub_2468(&STACK[0x2BB0]);
  sub_2468(&STACK[0x2C08]);
  sub_2468(&STACK[0x2C60]);
  sub_2468(&STACK[0x2CB8]);
  sub_2468(&STACK[0x2D10]);
  sub_2468(&STACK[0x2D68]);
  sub_2468(&STACK[0x2DC0]);
  sub_2468(&STACK[0x2E18]);
  sub_2468(&STACK[0x2E70]);
  sub_2468(&STACK[0x2EC8]);
  sub_2468(&STACK[0x2F20]);
  sub_2468(&STACK[0x2F78]);
  sub_2468(&STACK[0x2FD0]);
  sub_2468(&STACK[0x3028]);
  sub_2468(&STACK[0x3080]);
  sub_2468(&STACK[0x30D8]);
  sub_2468(&STACK[0x3130]);
  sub_2468(&STACK[0x3188]);
  sub_2468(&STACK[0x31E0]);
  sub_2468(&STACK[0x3238]);
  sub_2468(&STACK[0x3290]);
  sub_2468(&STACK[0x32E8]);
  sub_2468(&STACK[0x3340]);
  sub_2468(&STACK[0x3398]);
  sub_2468(&STACK[0x33F0]);
  sub_2468(&STACK[0x3448]);
  sub_2468(&STACK[0x34A0]);
  sub_2468(&STACK[0x34F8]);
  sub_2468(&STACK[0x3550]);
  sub_2468(&STACK[0x35A8]);
  sub_2468(&STACK[0x3600]);
  sub_2468(&STACK[0x3658]);
  sub_2468(&STACK[0x36B0]);
  sub_2468(&STACK[0x3708]);
  sub_2468(&STACK[0x3760]);
  sub_2468(&STACK[0x37B8]);
  sub_2468(&STACK[0x3810]);
  sub_2468(&STACK[0x3868]);
  sub_2468(&STACK[0x38C0]);
  sub_2468(&STACK[0x3918]);
  sub_2468(&STACK[0x3970]);
  sub_2468(&STACK[0x39C8]);
  sub_2468(&STACK[0x3A20]);
  sub_2468(&STACK[0x3A78]);
  sub_2468(&STACK[0x3AD0]);
  sub_2468(&STACK[0x3B28]);
  sub_2468(&STACK[0x3B80]);
  sub_2468(&STACK[0x3BD8]);
  sub_2468(&STACK[0x3C30]);
  sub_2468(&STACK[0x3C88]);
  sub_2468(&STACK[0x3CE0]);
  sub_2468(&STACK[0x3D38]);
  _Unwind_Resume(a1);
}

uint64_t sub_41004(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + sub_4B28(v1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_573C(a1, *(void *)(a2 + 8));
  return a1;
}

void sub_41060(_Unwind_Exception *a1)
{
}

void *sub_41078(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }

    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      __int128 v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6) {
              return v10;
            }
          }

          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }

            else
            {
              v11 &= v7 - 1;
            }

            if (v11 != v3) {
              break;
            }
          }

          __int128 v10 = (void *)*v10;
        }

        while (v10);
      }
    }
  }

  __int128 v10 = operator new(0x28uLL);
  *__int128 v10 = 0LL;
  v10[1] = v6;
  *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
  v10[4] = *(void *)(a3 + 16);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1LL;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_573C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }
  }

  uint64_t v18 = *(void *)a1;
  __int128 v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *__int128 v10 = *v19;
LABEL_38:
    *__int128 v19 = v10;
    goto LABEL_39;
  }

  *__int128 v10 = *(void *)(a1 + 16);
  *(void *)(a1 + sub_4B28(v1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }

    else
    {
      v20 &= v7 - 1;
    }

    __int128 v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }

void sub_41288(_Unwind_Exception *a1)
{
}

uint64_t sub_4129C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v8 = 0LL;
    do
    {
      sub_4132C(a1, a4 + v8, (__int128 *)(a2 + v8));
      v8 += 88LL;
    }

    while (a2 + v8 != a3);
    a4 += v8;
  }

  return a4;
}

void sub_41308(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 88;
    do
    {
      sub_2468(v4 + v2);
      v2 -= 88LL;
    }

    while (v2);
  }

  _Unwind_Resume(exception_object);
}

char *sub_4132C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4 = a2;
  __int128 v5 = *a3;
  *(_DWORD *)(a2 + sub_4B28(v1 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a2 = v5;
  sub_41004(a2 + 24, (uint64_t)a3 + 24);
  *(void *)(v4 + 64) = 0LL;
  *(void *)(v4 + 72) = 0LL;
  v4 += 64LL;
  *(void *)(v4 + sub_4B28(v1 + 16) = 0LL;
  return sub_6B58( (char *)v4,  *((__int128 **)a3 + 8),  *((__int128 **)a3 + 9),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 9) - *((void *)a3 + 8)) >> 3));
}

void sub_4139C(_Unwind_Exception *a1)
{
}

uint64_t sub_413B0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (uint64_t *)sub_24C8((uint64_t)v661, 0xFu, 3LL, (uint64_t)sub_48F14);
  unint64_t v3 = sub_2684(v2, "One Pass");
  __int128 v4 = *(_OWORD *)v3;
  int v664 = *((_DWORD *)v3 + 4);
  __int128 v663 = v4;
  sub_41004((uint64_t)&v665, (uint64_t)(v3 + 3));
  memset(v666, 0, sizeof(v666));
  sub_6B58((char *)v666, (__int128 *)v3[8], (__int128 *)v3[9], 0xAAAAAAAAAAAAAAABLL * ((v3[9] - v3[8]) >> 3));
  sub_23F4((int)v660, "L1 GPR Occupancy");
  __int128 v5 = (uint64_t *)sub_24C8((uint64_t)v660, 0xFu, 3LL, (uint64_t)sub_49010);
  unint64_t v6 = sub_2684(v5, "L1 Occupancy");
  unint64_t v7 = sub_2684(v6, "One Pass");
  __int128 v8 = *(_OWORD *)v7;
  int v668 = *((_DWORD *)v7 + 4);
  __int128 v667 = v8;
  sub_41004((uint64_t)&v669, (uint64_t)(v7 + 3));
  memset(v670, 0, sizeof(v670));
  sub_6B58((char *)v670, (__int128 *)v7[8], (__int128 *)v7[9], 0xAAAAAAAAAAAAAAABLL * ((v7[9] - v7[8]) >> 3));
  sub_23F4((int)v659, "L1 Buffer Bytes Occupancy");
  unint64_t v9 = (uint64_t *)sub_24C8((uint64_t)v659, 0xFu, 3LL, (uint64_t)sub_49074);
  __int128 v10 = sub_2684(v9, "One Pass");
  __int128 v11 = *(_OWORD *)v10;
  int v672 = *((_DWORD *)v10 + 4);
  __int128 v671 = v11;
  sub_41004((uint64_t)&v673, (uint64_t)(v10 + 3));
  memset(v674, 0, sizeof(v674));
  sub_6B58((char *)v674, (__int128 *)v10[8], (__int128 *)v10[9], 0xAAAAAAAAAAAAAAABLL * ((v10[9] - v10[8]) >> 3));
  sub_23F4((int)v658, "L1 Buffer Occupancy");
  float v12 = (uint64_t *)sub_24C8((uint64_t)v658, 0xFu, 3LL, (uint64_t)sub_49170);
  float v13 = sub_2684(v12, "L1 Occupancy");
  BOOL v14 = sub_2684(v13, "One Pass");
  __int128 v15 = *(_OWORD *)v14;
  int v676 = *((_DWORD *)v14 + 4);
  __int128 v675 = v15;
  sub_41004((uint64_t)&v677, (uint64_t)(v14 + 3));
  memset(v678, 0, sizeof(v678));
  sub_6B58((char *)v678, (__int128 *)v14[8], (__int128 *)v14[9], 0xAAAAAAAAAAAAAAABLL * ((v14[9] - v14[8]) >> 3));
  sub_23F4((int)v657, "L1 Raytracing Scratch Bytes Occupancy");
  unint64_t v16 = (uint64_t *)sub_24C8((uint64_t)v657, 0xFu, 3LL, (uint64_t)sub_491D4);
  size_t v17 = sub_2684(v16, "One Pass");
  __int128 v18 = *(_OWORD *)v17;
  int v680 = *((_DWORD *)v17 + 4);
  __int128 v679 = v18;
  sub_41004((uint64_t)&v681, (uint64_t)(v17 + 3));
  memset(v682, 0, sizeof(v682));
  sub_6B58((char *)v682, (__int128 *)v17[8], (__int128 *)v17[9], 0xAAAAAAAAAAAAAAABLL * ((v17[9] - v17[8]) >> 3));
  sub_23F4((int)v656, "L1 Raytracing Scratch Occupancy");
  __int128 v19 = (uint64_t *)sub_24C8((uint64_t)v656, 0xFu, 3LL, (uint64_t)sub_492D0);
  unint64_t v20 = sub_2684(v19, "L1 Occupancy");
  uint64_t v21 = sub_2684(v20, "One Pass");
  __int128 v22 = *(_OWORD *)v21;
  int v684 = *((_DWORD *)v21 + 4);
  __int128 v683 = v22;
  sub_41004((uint64_t)&v685, (uint64_t)(v21 + 3));
  memset(v686, 0, sizeof(v686));
  sub_6B58((char *)v686, (__int128 *)v21[8], (__int128 *)v21[9], 0xAAAAAAAAAAAAAAABLL * ((v21[9] - v21[8]) >> 3));
  sub_23F4((int)v655, "L1 Stack Bytes Occupancy");
  uint64_t v23 = (uint64_t *)sub_24C8((uint64_t)v655, 0xFu, 3LL, (uint64_t)sub_49334);
  uint64_t v24 = sub_2684(v23, "One Pass");
  __int128 v25 = *(_OWORD *)v24;
  int v688 = *((_DWORD *)v24 + 4);
  __int128 v687 = v25;
  sub_41004((uint64_t)&v689, (uint64_t)(v24 + 3));
  memset(v690, 0, sizeof(v690));
  sub_6B58((char *)v690, (__int128 *)v24[8], (__int128 *)v24[9], 0xAAAAAAAAAAAAAAABLL * ((v24[9] - v24[8]) >> 3));
  sub_23F4((int)v654, "L1 Stack Occupancy");
  uint64_t v26 = (uint64_t *)sub_24C8((uint64_t)v654, 0xFu, 3LL, (uint64_t)sub_49430);
  uint64_t v27 = sub_2684(v26, "L1 Occupancy");
  __int128 v28 = sub_2684(v27, "One Pass");
  __int128 v29 = *(_OWORD *)v28;
  int v692 = *((_DWORD *)v28 + 4);
  __int128 v691 = v29;
  sub_41004((uint64_t)&v693, (uint64_t)(v28 + 3));
  memset(v694, 0, sizeof(v694));
  sub_6B58((char *)v694, (__int128 *)v28[8], (__int128 *)v28[9], 0xAAAAAAAAAAAAAAABLL * ((v28[9] - v28[8]) >> 3));
  sub_23F4((int)v653, "L1 Threadgroup Bytes Occupancy");
  unint64_t v30 = (uint64_t *)sub_24C8((uint64_t)v653, 0xFu, 3LL, (uint64_t)sub_49494);
  __int128 v31 = sub_2684(v30, "One Pass");
  __int128 v32 = *(_OWORD *)v31;
  int v696 = *((_DWORD *)v31 + 4);
  __int128 v695 = v32;
  sub_41004((uint64_t)&v697, (uint64_t)(v31 + 3));
  memset(v698, 0, sizeof(v698));
  sub_6B58((char *)v698, (__int128 *)v31[8], (__int128 *)v31[9], 0xAAAAAAAAAAAAAAABLL * ((v31[9] - v31[8]) >> 3));
  sub_23F4((int)v652, "L1 Threadgroup Occupancy");
  unint64_t v33 = (uint64_t *)sub_24C8((uint64_t)v652, 0xFu, 3LL, (uint64_t)sub_49590);
  __int128 v34 = sub_2684(v33, "L1 Occupancy");
  unint64_t v35 = sub_2684(v34, "One Pass");
  __int128 v36 = *(_OWORD *)v35;
  int v700 = *((_DWORD *)v35 + 4);
  __int128 v699 = v36;
  sub_41004((uint64_t)&v701, (uint64_t)(v35 + 3));
  memset(v702, 0, sizeof(v702));
  sub_6B58((char *)v702, (__int128 *)v35[8], (__int128 *)v35[9], 0xAAAAAAAAAAAAAAABLL * ((v35[9] - v35[8]) >> 3));
  sub_23F4((int)v651, "L1 Imageblock Bytes Occupancy");
  __int128 v37 = (uint64_t *)sub_24C8((uint64_t)v651, 0xFu, 3LL, (uint64_t)sub_495F4);
  uint64_t v38 = sub_2684(v37, "One Pass");
  __int128 v39 = *(_OWORD *)v38;
  int v704 = *((_DWORD *)v38 + 4);
  __int128 v703 = v39;
  sub_41004((uint64_t)&v705, (uint64_t)(v38 + 3));
  memset(v706, 0, sizeof(v706));
  sub_6B58((char *)v706, (__int128 *)v38[8], (__int128 *)v38[9], 0xAAAAAAAAAAAAAAABLL * ((v38[9] - v38[8]) >> 3));
  sub_23F4((int)v650, "L1 Imageblock Occupancy");
  __int128 v40 = (uint64_t *)sub_24C8((uint64_t)v650, 0xFu, 3LL, (uint64_t)sub_49718);
  uint64_t v41 = sub_2684(v40, "L1 Occupancy");
  uint64_t v42 = sub_2684(v41, "One Pass");
  __int128 v43 = *(_OWORD *)v42;
  int v708 = *((_DWORD *)v42 + 4);
  __int128 v707 = v43;
  sub_41004((uint64_t)&v709, (uint64_t)(v42 + 3));
  memset(v710, 0, sizeof(v710));
  sub_6B58((char *)v710, (__int128 *)v42[8], (__int128 *)v42[9], 0xAAAAAAAAAAAAAAABLL * ((v42[9] - v42[8]) >> 3));
  sub_23F4((int)v649, "L1 Other Bytes Occupancy");
  unint64_t v44 = (uint64_t *)sub_24C8((uint64_t)v649, 0xFu, 3LL, (uint64_t)sub_4977C);
  uint64_t v45 = sub_2684(v44, "One Pass");
  __int128 v46 = *(_OWORD *)v45;
  int v712 = *((_DWORD *)v45 + 4);
  __int128 v711 = v46;
  sub_41004((uint64_t)&v713, (uint64_t)(v45 + 3));
  memset(v714, 0, sizeof(v714));
  sub_6B58((char *)v714, (__int128 *)v45[8], (__int128 *)v45[9], 0xAAAAAAAAAAAAAAABLL * ((v45[9] - v45[8]) >> 3));
  sub_23F4((int)v648, "L1 Other Occupancy");
  uint64_t v47 = (uint64_t *)sub_24C8((uint64_t)v648, 0xFu, 3LL, (uint64_t)sub_498A0);
  uint64_t v48 = sub_2684(v47, "L1 Occupancy");
  __int128 v49 = sub_2684(v48, "One Pass");
  __int128 v50 = *(_OWORD *)v49;
  int v716 = *((_DWORD *)v49 + 4);
  __int128 v715 = v50;
  sub_41004((uint64_t)&v717, (uint64_t)(v49 + 3));
  memset(v718, 0, sizeof(v718));
  sub_6B58((char *)v718, (__int128 *)v49[8], (__int128 *)v49[9], 0xAAAAAAAAAAAAAAABLL * ((v49[9] - v49[8]) >> 3));
  sub_23F4((int)v647, "L1 Total Bytes Occupancy");
  uint64_t v51 = (uint64_t *)sub_24C8((uint64_t)v647, 0xFu, 3LL, (uint64_t)sub_49904);
  __int128 v52 = sub_2684(v51, "One Pass");
  __int128 v53 = *(_OWORD *)v52;
  int v720 = *((_DWORD *)v52 + 4);
  __int128 v719 = v53;
  sub_41004((uint64_t)&v721, (uint64_t)(v52 + 3));
  memset(v722, 0, sizeof(v722));
  sub_6B58((char *)v722, (__int128 *)v52[8], (__int128 *)v52[9], 0xAAAAAAAAAAAAAAABLL * ((v52[9] - v52[8]) >> 3));
  sub_23F4((int)v646, "L1 Total Occupancy");
  uint64_t v54 = (uint64_t *)sub_24C8((uint64_t)v646, 0xFu, 3LL, (uint64_t)sub_49A24);
  __int128 v55 = sub_2684(v54, "L1 Occupancy");
  double v56 = sub_2684(v55, "One Pass");
  __int128 v57 = *(_OWORD *)v56;
  int v724 = *((_DWORD *)v56 + 4);
  __int128 v723 = v57;
  sub_41004((uint64_t)&v725, (uint64_t)(v56 + 3));
  memset(v726, 0, sizeof(v726));
  sub_6B58((char *)v726, (__int128 *)v56[8], (__int128 *)v56[9], 0xAAAAAAAAAAAAAAABLL * ((v56[9] - v56[8]) >> 3));
  sub_23F4((int)v645, "Occupancy Management L1 Eviction Rate");
  __int128 v58 = (uint64_t *)sub_24C8((uint64_t)v645, 0xFu, 3LL, (uint64_t)sub_49A88);
  double v59 = sub_2684(v58, "Thread Occupancy");
  uint64_t v60 = sub_2684(v59, "One Pass");
  __int128 v61 = *(_OWORD *)v60;
  int v728 = *((_DWORD *)v60 + 4);
  __int128 v727 = v61;
  sub_41004((uint64_t)&v729, (uint64_t)(v60 + 3));
  memset(v730, 0, sizeof(v730));
  sub_6B58((char *)v730, (__int128 *)v60[8], (__int128 *)v60[9], 0xAAAAAAAAAAAAAAABLL * ((v60[9] - v60[8]) >> 3));
  sub_23F4((int)v644, "Buffer L1 Miss Rate");
  unint64_t v62 = (uint64_t *)sub_24C8((uint64_t)v644, 0xFu, 3LL, (uint64_t)sub_49BA0);
  uint64_t v63 = sub_2684(v62, "One Pass");
  __int128 v64 = sub_2684(v63, "Cache Misses");
  __int128 v65 = *(_OWORD *)v64;
  int v732 = *((_DWORD *)v64 + 4);
  __int128 v731 = v65;
  sub_41004((uint64_t)&v733, (uint64_t)(v64 + 3));
  memset(v734, 0, sizeof(v734));
  sub_6B58((char *)v734, (__int128 *)v64[8], (__int128 *)v64[9], 0xAAAAAAAAAAAAAAABLL * ((v64[9] - v64[8]) >> 3));
  sub_23F4((int)v643, "Vertex Shader Launch Utilization");
  uint64_t v66 = (uint64_t *)sub_24C8((uint64_t)v643, 0xFu, 3LL, (uint64_t)sub_49BF8);
  uint64_t v67 = sub_2684(v66, "One Pass");
  double v68 = sub_2684(v67, "Utilizations");
  __int128 v69 = *(_OWORD *)v68;
  int v736 = *((_DWORD *)v68 + 4);
  __int128 v735 = v69;
  sub_41004((uint64_t)&v737, (uint64_t)(v68 + 3));
  memset(v738, 0, sizeof(v738));
  sub_6B58((char *)v738, (__int128 *)v68[8], (__int128 *)v68[9], 0xAAAAAAAAAAAAAAABLL * ((v68[9] - v68[8]) >> 3));
  sub_23F4((int)v642, "Vertex Shader Launch Limiter");
  uint64_t v70 = (uint64_t *)sub_24C8((uint64_t)v642, 0xFu, 3LL, (uint64_t)sub_49D30);
  double v71 = sub_2684(v70, "One Pass");
  uint64_t v72 = sub_2684(v71, "Thread Occupancy");
  __int128 v73 = *(_OWORD *)v72;
  int v740 = *((_DWORD *)v72 + 4);
  __int128 v739 = v73;
  sub_41004((uint64_t)&v741, (uint64_t)(v72 + 3));
  memset(v742, 0, sizeof(v742));
  sub_6B58((char *)v742, (__int128 *)v72[8], (__int128 *)v72[9], 0xAAAAAAAAAAAAAAABLL * ((v72[9] - v72[8]) >> 3));
  sub_23F4((int)v641, "Fragment Shader Launch Utilization");
  unsigned int v74 = (uint64_t *)sub_24C8((uint64_t)v641, 0xFu, 3LL, (uint64_t)sub_4A074);
  uint64_t v75 = sub_2684(v74, "One Pass");
  __int128 v76 = sub_2684(v75, "Utilizations");
  __int128 v77 = *(_OWORD *)v76;
  int v744 = *((_DWORD *)v76 + 4);
  __int128 v743 = v77;
  sub_41004((uint64_t)&v745, (uint64_t)(v76 + 3));
  memset(v746, 0, sizeof(v746));
  sub_6B58((char *)v746, (__int128 *)v76[8], (__int128 *)v76[9], 0xAAAAAAAAAAAAAAABLL * ((v76[9] - v76[8]) >> 3));
  sub_23F4((int)v640, "Fragment Shader Launch Limiter");
  uint64_t v78 = (uint64_t *)sub_24C8((uint64_t)v640, 0xFu, 3LL, (uint64_t)sub_4A18C);
  __int128 v79 = sub_2684(v78, "One Pass");
  double v80 = sub_2684(v79, "Thread Occupancy");
  __int128 v81 = *(_OWORD *)v80;
  int v748 = *((_DWORD *)v80 + 4);
  __int128 v747 = v81;
  sub_41004((uint64_t)&v749, (uint64_t)(v80 + 3));
  memset(v750, 0, sizeof(v750));
  sub_6B58((char *)v750, (__int128 *)v80[8], (__int128 *)v80[9], 0xAAAAAAAAAAAAAAABLL * ((v80[9] - v80[8]) >> 3));
  sub_23F4((int)v639, "Compute Shader Launch Utilization");
  __int128 v82 = (uint64_t *)sub_24C8((uint64_t)v639, 0xFu, 3LL, (uint64_t)sub_4A2F0);
  double v83 = sub_2684(v82, "One Pass");
  uint64_t v84 = sub_2684(v83, "Utilizations");
  __int128 v85 = *(_OWORD *)v84;
  int v752 = *((_DWORD *)v84 + 4);
  __int128 v751 = v85;
  sub_41004((uint64_t)&v753, (uint64_t)(v84 + 3));
  memset(v754, 0, sizeof(v754));
  sub_6B58((char *)v754, (__int128 *)v84[8], (__int128 *)v84[9], 0xAAAAAAAAAAAAAAABLL * ((v84[9] - v84[8]) >> 3));
  sub_23F4((int)v638, "Compute Shader Launch Limiter");
  double v86 = (uint64_t *)sub_24C8((uint64_t)v638, 0xFu, 3LL, (uint64_t)sub_4A408);
  uint64_t v87 = sub_2684(v86, "One Pass");
  __int128 v88 = sub_2684(v87, "Thread Occupancy");
  __int128 v89 = *(_OWORD *)v88;
  int v756 = *((_DWORD *)v88 + 4);
  __int128 v755 = v89;
  sub_41004((uint64_t)&v757, (uint64_t)(v88 + 3));
  memset(v758, 0, sizeof(v758));
  sub_6B58((char *)v758, (__int128 *)v88[8], (__int128 *)v88[9], 0xAAAAAAAAAAAAAAABLL * ((v88[9] - v88[8]) >> 3));
  sub_23F4((int)v637, "Vertex Threads Launched");
  uint64_t v90 = (uint64_t *)sub_24C8((uint64_t)v637, 0xFu, 3LL, (uint64_t)sub_4A6B8);
  __int128 v91 = sub_2684(v90, "Absolute Statistics");
  __int128 v92 = *(_OWORD *)v91;
  int v760 = *((_DWORD *)v91 + 4);
  __int128 v759 = v92;
  sub_41004((uint64_t)&v761, (uint64_t)(v91 + 3));
  memset(v762, 0, sizeof(v762));
  sub_6B58((char *)v762, (__int128 *)v91[8], (__int128 *)v91[9], 0xAAAAAAAAAAAAAAABLL * ((v91[9] - v91[8]) >> 3));
  sub_23F4((int)v636, "Fragment Threads Launched");
  uint64_t v93 = (uint64_t *)sub_24C8((uint64_t)v636, 0xFu, 3LL, (uint64_t)sub_4A6D0);
  __int128 v94 = sub_2684(v93, "Absolute Statistics");
  __int128 v95 = *(_OWORD *)v94;
  int v764 = *((_DWORD *)v94 + 4);
  __int128 v763 = v95;
  sub_41004((uint64_t)&v765, (uint64_t)(v94 + 3));
  memset(v766, 0, sizeof(v766));
  sub_6B58((char *)v766, (__int128 *)v94[8], (__int128 *)v94[9], 0xAAAAAAAAAAAAAAABLL * ((v94[9] - v94[8]) >> 3));
  sub_23F4((int)v635, "Compute Threads Launched");
  uint64_t v96 = (uint64_t *)sub_24C8((uint64_t)v635, 0xFu, 3LL, (uint64_t)sub_4A6E8);
  __int128 v97 = sub_2684(v96, "Absolute Statistics");
  __int128 v98 = *(_OWORD *)v97;
  int v768 = *((_DWORD *)v97 + 4);
  __int128 v767 = v98;
  sub_41004((uint64_t)&v769, (uint64_t)(v97 + 3));
  memset(v770, 0, sizeof(v770));
  sub_6B58((char *)v770, (__int128 *)v97[8], (__int128 *)v97[9], 0xAAAAAAAAAAAAAAABLL * ((v97[9] - v97[8]) >> 3));
  sub_23F4((int)v634, "Threads Launched");
  unint64_t v99 = (uint64_t *)sub_24C8((uint64_t)v634, 0xFu, 3LL, (uint64_t)sub_4A700);
  __int128 v100 = sub_2684(v99, "Absolute Statistics");
  __int128 v101 = *(_OWORD *)v100;
  int v772 = *((_DWORD *)v100 + 4);
  __int128 v771 = v101;
  sub_41004((uint64_t)&v773, (uint64_t)(v100 + 3));
  memset(v774, 0, sizeof(v774));
  sub_6B58((char *)v774, (__int128 *)v100[8], (__int128 *)v100[9], 0xAAAAAAAAAAAAAAABLL * ((v100[9] - v100[8]) >> 3));
  sub_23F4((int)v633, "Simdgroups Launched");
  double v102 = (uint64_t *)sub_24C8((uint64_t)v633, 0xFu, 3LL, (uint64_t)sub_4A780);
  __int128 v103 = sub_2684(v102, "Absolute Statistics");
  __int128 v104 = *(_OWORD *)v103;
  int v776 = *((_DWORD *)v103 + 4);
  __int128 v775 = v104;
  sub_41004((uint64_t)&v777, (uint64_t)(v103 + 3));
  memset(v778, 0, sizeof(v778));
  sub_6B58((char *)v778, (__int128 *)v103[8], (__int128 *)v103[9], 0xAAAAAAAAAAAAAAABLL * ((v103[9] - v103[8]) >> 3));
  sub_23F4((int)v632, "Fragment Interpolation Limiter");
  uint64_t v105 = sub_246C((uint64_t)v632, 11, 2, (uint64_t)sub_4A798);
  uint64_t v106 = sub_246C(v105, 11, 3, (uint64_t)sub_4A798);
  uint64_t v107 = (uint64_t *)sub_246C(v106, 12, 2, (uint64_t)sub_4A798);
  uint64_t v108 = sub_2684(v107, "Limiters");
  __int128 v109 = sub_2684(v108, "One Pass");
  __int128 v110 = *(_OWORD *)v109;
  int v780 = *((_DWORD *)v109 + 4);
  __int128 v779 = v110;
  sub_41004((uint64_t)&v781, (uint64_t)(v109 + 3));
  memset(v782, 0, sizeof(v782));
  sub_6B58((char *)v782, (__int128 *)v109[8], (__int128 *)v109[9], 0xAAAAAAAAAAAAAAABLL * ((v109[9] - v109[8]) >> 3));
  sub_23F4((int)v631, "MMU Limiter");
  double v111 = (uint64_t *)sub_24C8((uint64_t)v631, 0xBu, 2LL, (uint64_t)sub_4A860);
  __int128 v112 = sub_2684(v111, "Limiters");
  double v113 = sub_2684(v112, "One Pass");
  __int128 v114 = *(_OWORD *)v113;
  int v784 = *((_DWORD *)v113 + 4);
  __int128 v783 = v114;
  sub_41004((uint64_t)&v785, (uint64_t)(v113 + 3));
  memset(v786, 0, sizeof(v786));
  sub_6B58((char *)v786, (__int128 *)v113[8], (__int128 *)v113[9], 0xAAAAAAAAAAAAAAABLL * ((v113[9] - v113[8]) >> 3));
  sub_23F4((int)v630, "MMU Utilization");
  __int128 v115 = (uint64_t *)sub_24C8((uint64_t)v630, 0xBu, 2LL, (uint64_t)sub_4A950);
  uint64_t v116 = sub_2684(v115, "Utilizations");
  uint64_t v117 = sub_2684(v116, "One Pass");
  __int128 v118 = *(_OWORD *)v117;
  int v788 = *((_DWORD *)v117 + 4);
  __int128 v787 = v118;
  sub_41004((uint64_t)&v789, (uint64_t)(v117 + 3));
  memset(v790, 0, sizeof(v790));
  sub_6B58((char *)v790, (__int128 *)v117[8], (__int128 *)v117[9], 0xAAAAAAAAAAAAAAABLL * ((v117[9] - v117[8]) >> 3));
  sub_23F4((int)v629, "L2 Cache Limiter");
  unint64_t v119 = (uint64_t *)sub_24C8((uint64_t)v629, 0xBu, 2LL, (uint64_t)sub_4AA18);
  unint64_t v120 = sub_2684(v119, "Limiters");
  __int128 v121 = sub_2684(v120, "One Pass");
  __int128 v122 = *(_OWORD *)v121;
  int v792 = *((_DWORD *)v121 + 4);
  __int128 v791 = v122;
  sub_41004((uint64_t)&v793, (uint64_t)(v121 + 3));
  memset(v794, 0, sizeof(v794));
  sub_6B58((char *)v794, (__int128 *)v121[8], (__int128 *)v121[9], 0xAAAAAAAAAAAAAAABLL * ((v121[9] - v121[8]) >> 3));
  sub_23F4((int)v628, "L2 Cache Utilization");
  int v123 = (uint64_t *)sub_24C8((uint64_t)v628, 0xBu, 2LL, (uint64_t)sub_4AB08);
  __int128 v124 = sub_2684(v123, "Utilizations");
  double v125 = sub_2684(v124, "One Pass");
  __int128 v126 = *(_OWORD *)v125;
  int v796 = *((_DWORD *)v125 + 4);
  __int128 v795 = v126;
  sub_41004((uint64_t)&v797, (uint64_t)(v125 + 3));
  memset(v798, 0, sizeof(v798));
  sub_6B58((char *)v798, (__int128 *)v125[8], (__int128 *)v125[9], 0xAAAAAAAAAAAAAAABLL * ((v125[9] - v125[8]) >> 3));
  sub_23F4((int)v627, "L1 Cache Limiter");
  __int128 v127 = (uint64_t *)sub_24C8((uint64_t)v627, 0xFu, 3LL, (uint64_t)sub_4ABD0);
  double v128 = sub_2684(v127, "Limiters");
  double v129 = sub_2684(v128, "One Pass");
  __int128 v130 = *(_OWORD *)v129;
  int v800 = *((_DWORD *)v129 + 4);
  __int128 v799 = v130;
  sub_41004((uint64_t)&v801, (uint64_t)(v129 + 3));
  memset(v802, 0, sizeof(v802));
  sub_6B58((char *)v802, (__int128 *)v129[8], (__int128 *)v129[9], 0xAAAAAAAAAAAAAAABLL * ((v129[9] - v129[8]) >> 3));
  sub_23F4((int)v626, "L1 Cache Utilization");
  uint64_t v131 = (uint64_t *)sub_24C8((uint64_t)v626, 0xFu, 3LL, (uint64_t)sub_4AD5C);
  unsigned int v132 = sub_2684(v131, "Utilizations");
  __int128 v133 = sub_2684(v132, "One Pass");
  __int128 v134 = *(_OWORD *)v133;
  int v804 = *((_DWORD *)v133 + 4);
  __int128 v803 = v134;
  sub_41004((uint64_t)&v805, (uint64_t)(v133 + 3));
  memset(v806, 0, sizeof(v806));
  sub_6B58((char *)v806, (__int128 *)v133[8], (__int128 *)v133[9], 0xAAAAAAAAAAAAAAABLL * ((v133[9] - v133[8]) >> 3));
  sub_23F4((int)v625, "Buffer Load Limiter");
  uint64_t v135 = sub_25B8((uint64_t)v625, 0xBu, 2LL, 0xCuLL, 2LL, (uint64_t)sub_4AEA0);
  __int128 v136 = (uint64_t *)sub_25B8(v135, 0xDu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4AF8C);
  uint64_t v137 = sub_2684(v136, "Limiters");
  double v138 = sub_2684(v137, "One Pass");
  __int128 v139 = *(_OWORD *)v138;
  int v808 = *((_DWORD *)v138 + 4);
  __int128 v807 = v139;
  sub_41004((uint64_t)&v809, (uint64_t)(v138 + 3));
  memset(v810, 0, sizeof(v810));
  sub_6B58((char *)v810, (__int128 *)v138[8], (__int128 *)v138[9], 0xAAAAAAAAAAAAAAABLL * ((v138[9] - v138[8]) >> 3));
  sub_23F4((int)v624, "Buffer Load Utilization");
  double v140 = (uint64_t *)sub_25B8((uint64_t)v624, 0xBu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4B0A0);
  int v141 = sub_2684(v140, "Utilizations");
  __int128 v142 = sub_2684(v141, "One Pass");
  __int128 v143 = *(_OWORD *)v142;
  int v812 = *((_DWORD *)v142 + 4);
  __int128 v811 = v143;
  sub_41004((uint64_t)&v813, (uint64_t)(v142 + 3));
  memset(v814, 0, sizeof(v814));
  sub_6B58((char *)v814, (__int128 *)v142[8], (__int128 *)v142[9], 0xAAAAAAAAAAAAAAABLL * ((v142[9] - v142[8]) >> 3));
  sub_23F4((int)v623, "Buffer L1 Load %");
  double v144 = (uint64_t *)sub_24C8((uint64_t)v623, 0xFu, 3LL, (uint64_t)sub_4B168);
  __int128 v145 = sub_2684(v144, "L1 Access Breakdown");
  unint64_t v146 = sub_2684(v145, "One Pass");
  __int128 v147 = *(_OWORD *)v146;
  int v816 = *((_DWORD *)v146 + 4);
  __int128 v815 = v147;
  sub_41004((uint64_t)&v817, (uint64_t)(v146 + 3));
  memset(v818, 0, sizeof(v818));
  sub_6B58((char *)v818, (__int128 *)v146[8], (__int128 *)v146[9], 0xAAAAAAAAAAAAAAABLL * ((v146[9] - v146[8]) >> 3));
  sub_23F4((int)v622, "Buffer Store Limiter");
  uint64_t v148 = sub_25B8((uint64_t)v622, 0xBu, 2LL, 0xCuLL, 2LL, (uint64_t)sub_4B1E8);
  uint64_t v149 = (uint64_t *)sub_25B8(v148, 0xDu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4B2D4);
  uint64_t v150 = sub_2684(v149, "Limiters");
  __int128 v151 = sub_2684(v150, "One Pass");
  __int128 v152 = *(_OWORD *)v151;
  int v820 = *((_DWORD *)v151 + 4);
  __int128 v819 = v152;
  sub_41004((uint64_t)&v821, (uint64_t)(v151 + 3));
  memset(v822, 0, sizeof(v822));
  sub_6B58((char *)v822, (__int128 *)v151[8], (__int128 *)v151[9], 0xAAAAAAAAAAAAAAABLL * ((v151[9] - v151[8]) >> 3));
  sub_23F4((int)v621, "Buffer Store Utilization");
  char v153 = (uint64_t *)sub_25B8((uint64_t)v621, 0xBu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4B3E8);
  __int128 v154 = sub_2684(v153, "Utilizations");
  uint64_t v155 = sub_2684(v154, "One Pass");
  __int128 v156 = *(_OWORD *)v155;
  int v824 = *((_DWORD *)v155 + 4);
  __int128 v823 = v156;
  sub_41004((uint64_t)&v825, (uint64_t)(v155 + 3));
  memset(v826, 0, sizeof(v826));
  sub_6B58((char *)v826, (__int128 *)v155[8], (__int128 *)v155[9], 0xAAAAAAAAAAAAAAABLL * ((v155[9] - v155[8]) >> 3));
  sub_23F4((int)v620, "Buffer L1 Store %");
  __int128 v157 = (uint64_t *)sub_24C8((uint64_t)v620, 0xFu, 3LL, (uint64_t)sub_4B4B0);
  unint64_t v158 = sub_2684(v157, "L1 Access Breakdown");
  unint64_t v159 = sub_2684(v158, "One Pass");
  __int128 v160 = *(_OWORD *)v159;
  int v828 = *((_DWORD *)v159 + 4);
  __int128 v827 = v160;
  sub_41004((uint64_t)&v829, (uint64_t)(v159 + 3));
  memset(v830, 0, sizeof(v830));
  sub_6B58((char *)v830, (__int128 *)v159[8], (__int128 *)v159[9], 0xAAAAAAAAAAAAAAABLL * ((v159[9] - v159[8]) >> 3));
  sub_23F4((int)v619, "Threadgroup Load Limiter");
  uint64_t v161 = sub_25B8((uint64_t)v619, 0xBu, 2LL, 0xCuLL, 2LL, (uint64_t)sub_4B530);
  int v162 = (uint64_t *)sub_25B8(v161, 0xDu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4B5F8);
  __int128 v163 = sub_2684(v162, "Limiters");
  int v164 = sub_2684(v163, "One Pass");
  __int128 v165 = *(_OWORD *)v164;
  int v832 = *((_DWORD *)v164 + 4);
  __int128 v831 = v165;
  sub_41004((uint64_t)&v833, (uint64_t)(v164 + 3));
  memset(v834, 0, sizeof(v834));
  sub_6B58((char *)v834, (__int128 *)v164[8], (__int128 *)v164[9], 0xAAAAAAAAAAAAAAABLL * ((v164[9] - v164[8]) >> 3));
  sub_23F4((int)v618, "Threadgroup Load Utilization");
  __int128 v166 = (uint64_t *)sub_25B8((uint64_t)v618, 0xBu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4B6E8);
  int v167 = sub_2684(v166, "Utilizations");
  char v168 = sub_2684(v167, "One Pass");
  __int128 v169 = *(_OWORD *)v168;
  int v836 = *((_DWORD *)v168 + 4);
  __int128 v835 = v169;
  sub_41004((uint64_t)&v837, (uint64_t)(v168 + 3));
  memset(v838, 0, sizeof(v838));
  sub_6B58((char *)v838, (__int128 *)v168[8], (__int128 *)v168[9], 0xAAAAAAAAAAAAAAABLL * ((v168[9] - v168[8]) >> 3));
  sub_23F4((int)v617, "Threadgroup L1 Load %");
  unint64_t v170 = (uint64_t *)sub_24C8((uint64_t)v617, 0xFu, 3LL, (uint64_t)sub_4B7B0);
  double v171 = sub_2684(v170, "L1 Access Breakdown");
  __int128 v172 = sub_2684(v171, "One Pass");
  __int128 v173 = *(_OWORD *)v172;
  int v840 = *((_DWORD *)v172 + 4);
  __int128 v839 = v173;
  sub_41004((uint64_t)&v841, (uint64_t)(v172 + 3));
  memset(v842, 0, sizeof(v842));
  sub_6B58((char *)v842, (__int128 *)v172[8], (__int128 *)v172[9], 0xAAAAAAAAAAAAAAABLL * ((v172[9] - v172[8]) >> 3));
  sub_23F4((int)v616, "Threadgroup Store Limiter");
  uint64_t v174 = sub_25B8((uint64_t)v616, 0xBu, 2LL, 0xCuLL, 2LL, (uint64_t)sub_4B830);
  __int128 v175 = (uint64_t *)sub_25B8(v174, 0xDu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4B8F8);
  unsigned int v176 = sub_2684(v175, "Limiters");
  double v177 = sub_2684(v176, "One Pass");
  __int128 v178 = *(_OWORD *)v177;
  int v844 = *((_DWORD *)v177 + 4);
  __int128 v843 = v178;
  sub_41004((uint64_t)&v845, (uint64_t)(v177 + 3));
  memset(v846, 0, sizeof(v846));
  sub_6B58((char *)v846, (__int128 *)v177[8], (__int128 *)v177[9], 0xAAAAAAAAAAAAAAABLL * ((v177[9] - v177[8]) >> 3));
  sub_23F4((int)v615, "Threadgroup Store Utilization");
  char v179 = (uint64_t *)sub_25B8((uint64_t)v615, 0xBu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4B9E8);
  char v180 = sub_2684(v179, "Utilizations");
  __int128 v181 = sub_2684(v180, "One Pass");
  __int128 v182 = *(_OWORD *)v181;
  int v848 = *((_DWORD *)v181 + 4);
  __int128 v847 = v182;
  sub_41004((uint64_t)&v849, (uint64_t)(v181 + 3));
  memset(v850, 0, sizeof(v850));
  sub_6B58((char *)v850, (__int128 *)v181[8], (__int128 *)v181[9], 0xAAAAAAAAAAAAAAABLL * ((v181[9] - v181[8]) >> 3));
  sub_23F4((int)v614, "Threadgroup L1 Store %");
  uint64_t v183 = (uint64_t *)sub_24C8((uint64_t)v614, 0xFu, 3LL, (uint64_t)sub_4BAB0);
  __int128 v184 = sub_2684(v183, "L1 Access Breakdown");
  uint64_t v185 = sub_2684(v184, "One Pass");
  __int128 v186 = *(_OWORD *)v185;
  int v852 = *((_DWORD *)v185 + 4);
  __int128 v851 = v186;
  sub_41004((uint64_t)&v853, (uint64_t)(v185 + 3));
  memset(v854, 0, sizeof(v854));
  sub_6B58((char *)v854, (__int128 *)v185[8], (__int128 *)v185[9], 0xAAAAAAAAAAAAAAABLL * ((v185[9] - v185[8]) >> 3));
  sub_23F4((int)v613, "Threadgroup Atomic Limiter");
  __int128 v187 = (uint64_t *)sub_25B8((uint64_t)v613, 0xDu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4BB30);
  unint64_t v188 = sub_2684(v187, "Limiters");
  uint64_t v189 = sub_2684(v188, "One Pass");
  __int128 v190 = *(_OWORD *)v189;
  int v856 = *((_DWORD *)v189 + 4);
  __int128 v855 = v190;
  sub_41004((uint64_t)&v857, (uint64_t)(v189 + 3));
  memset(v858, 0, sizeof(v858));
  sub_6B58((char *)v858, (__int128 *)v189[8], (__int128 *)v189[9], 0xAAAAAAAAAAAAAAABLL * ((v189[9] - v189[8]) >> 3));
  sub_23F4((int)v612, "Threadgroup Atomic Utilization");
  int v191 = (uint64_t *)sub_25B8((uint64_t)v612, 0xDu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4BBE0);
  char v192 = sub_2684(v191, "Utilizations");
  __int128 v193 = sub_2684(v192, "One Pass");
  __int128 v194 = *(_OWORD *)v193;
  int v860 = *((_DWORD *)v193 + 4);
  __int128 v859 = v194;
  sub_41004((uint64_t)&v861, (uint64_t)(v193 + 3));
  memset(v862, 0, sizeof(v862));
  sub_6B58((char *)v862, (__int128 *)v193[8], (__int128 *)v193[9], 0xAAAAAAAAAAAAAAABLL * ((v193[9] - v193[8]) >> 3));
  sub_23F4((int)v611, "GPR L1 Read %");
  double v195 = (uint64_t *)sub_25B8((uint64_t)v611, 0xFu, 3LL, 0x11uLL, 2LL, (uint64_t)sub_4BC68);
  __int128 v196 = sub_2684(v195, "L1 Access Breakdown");
  char v197 = sub_2684(v196, "One Pass");
  __int128 v198 = *(_OWORD *)v197;
  int v864 = *((_DWORD *)v197 + 4);
  __int128 v863 = v198;
  sub_41004((uint64_t)&v865, (uint64_t)(v197 + 3));
  memset(v866, 0, sizeof(v866));
  sub_6B58((char *)v866, (__int128 *)v197[8], (__int128 *)v197[9], 0xAAAAAAAAAAAAAAABLL * ((v197[9] - v197[8]) >> 3));
  sub_23F4((int)v610, "GPR L1 Write %");
  __int128 v199 = (uint64_t *)sub_25B8((uint64_t)v610, 0xFu, 3LL, 0x11uLL, 2LL, (uint64_t)sub_4BCE8);
  unint64_t v200 = sub_2684(v199, "L1 Access Breakdown");
  unint64_t v201 = sub_2684(v200, "One Pass");
  __int128 v202 = *(_OWORD *)v201;
  int v868 = *((_DWORD *)v201 + 4);
  __int128 v867 = v202;
  sub_41004((uint64_t)&v869, (uint64_t)(v201 + 3));
  memset(v870, 0, sizeof(v870));
  sub_6B58((char *)v870, (__int128 *)v201[8], (__int128 *)v201[9], 0xAAAAAAAAAAAAAAABLL * ((v201[9] - v201[8]) >> 3));
  sub_23F4((int)v609, "Stack L1 Load %");
  uint64_t v203 = (uint64_t *)sub_24C8((uint64_t)v609, 0xFu, 3LL, (uint64_t)sub_4BD68);
  uint64_t v204 = sub_2684(v203, "L1 Access Breakdown");
  __int128 v205 = sub_2684(v204, "One Pass");
  __int128 v206 = *(_OWORD *)v205;
  int v872 = *((_DWORD *)v205 + 4);
  __int128 v871 = v206;
  sub_41004((uint64_t)&v873, (uint64_t)(v205 + 3));
  memset(v874, 0, sizeof(v874));
  sub_6B58((char *)v874, (__int128 *)v205[8], (__int128 *)v205[9], 0xAAAAAAAAAAAAAAABLL * ((v205[9] - v205[8]) >> 3));
  sub_23F4((int)v608, "Stack L1 Store %");
  uint64_t v207 = (uint64_t *)sub_24C8((uint64_t)v608, 0xFu, 3LL, (uint64_t)sub_4BDE8);
  __int128 v208 = sub_2684(v207, "L1 Access Breakdown");
  unint64_t v209 = sub_2684(v208, "One Pass");
  __int128 v210 = *(_OWORD *)v209;
  int v876 = *((_DWORD *)v209 + 4);
  __int128 v875 = v210;
  sub_41004((uint64_t)&v877, (uint64_t)(v209 + 3));
  memset(v878, 0, sizeof(v878));
  sub_6B58((char *)v878, (__int128 *)v209[8], (__int128 *)v209[9], 0xAAAAAAAAAAAAAAABLL * ((v209[9] - v209[8]) >> 3));
  sub_23F4((int)v607, "Imageblock L1 Load %");
  __int128 v211 = (uint64_t *)sub_24C8((uint64_t)v607, 0xFu, 3LL, (uint64_t)sub_4BE68);
  uint64_t v212 = sub_2684(v211, "L1 Access Breakdown");
  uint64_t v213 = sub_2684(v212, "One Pass");
  __int128 v214 = *(_OWORD *)v213;
  int v880 = *((_DWORD *)v213 + 4);
  __int128 v879 = v214;
  sub_41004((uint64_t)&v881, (uint64_t)(v213 + 3));
  memset(v882, 0, sizeof(v882));
  sub_6B58((char *)v882, (__int128 *)v213[8], (__int128 *)v213[9], 0xAAAAAAAAAAAAAAABLL * ((v213[9] - v213[8]) >> 3));
  sub_23F4((int)v606, "Imageblock L1 Store %");
  unint64_t v215 = (uint64_t *)sub_24C8((uint64_t)v606, 0xFu, 3LL, (uint64_t)sub_4BF10);
  unint64_t v216 = sub_2684(v215, "L1 Access Breakdown");
  __int128 v217 = sub_2684(v216, "One Pass");
  __int128 v218 = *(_OWORD *)v217;
  int v884 = *((_DWORD *)v217 + 4);
  __int128 v883 = v218;
  sub_41004((uint64_t)&v885, (uint64_t)(v217 + 3));
  memset(v886, 0, sizeof(v886));
  sub_6B58((char *)v886, (__int128 *)v217[8], (__int128 *)v217[9], 0xAAAAAAAAAAAAAAABLL * ((v217[9] - v217[8]) >> 3));
  sub_23F4((int)v605, "Raytracing Scratch L1 Load %");
  double v219 = (uint64_t *)sub_24C8((uint64_t)v605, 0xFu, 3LL, (uint64_t)sub_4BFB8);
  __int128 v220 = sub_2684(v219, "L1 Access Breakdown");
  uint64_t v221 = sub_2684(v220, "One Pass");
  __int128 v222 = *(_OWORD *)v221;
  int v888 = *((_DWORD *)v221 + 4);
  __int128 v887 = v222;
  sub_41004((uint64_t)&v889, (uint64_t)(v221 + 3));
  memset(v890, 0, sizeof(v890));
  sub_6B58((char *)v890, (__int128 *)v221[8], (__int128 *)v221[9], 0xAAAAAAAAAAAAAAABLL * ((v221[9] - v221[8]) >> 3));
  sub_23F4((int)v604, "Raytracing Scratch L1 Store %");
  __int128 v223 = (uint64_t *)sub_24C8((uint64_t)v604, 0xFu, 3LL, (uint64_t)sub_4C038);
  unint64_t v224 = sub_2684(v223, "L1 Access Breakdown");
  unint64_t v225 = sub_2684(v224, "One Pass");
  __int128 v226 = *(_OWORD *)v225;
  int v892 = *((_DWORD *)v225 + 4);
  __int128 v891 = v226;
  sub_41004((uint64_t)&v893, (uint64_t)(v225 + 3));
  memset(v894, 0, sizeof(v894));
  sub_6B58((char *)v894, (__int128 *)v225[8], (__int128 *)v225[9], 0xAAAAAAAAAAAAAAABLL * ((v225[9] - v225[8]) >> 3));
  sub_23F4((int)v603, "Other L1 Loads %");
  unint64_t v227 = (uint64_t *)sub_24C8((uint64_t)v603, 0xFu, 3LL, (uint64_t)sub_4C0B8);
  uint64_t v228 = sub_2684(v227, "L1 Access Breakdown");
  __int128 v229 = sub_2684(v228, "One Pass");
  __int128 v230 = *(_OWORD *)v229;
  int v896 = *((_DWORD *)v229 + 4);
  __int128 v895 = v230;
  sub_41004((uint64_t)&v897, (uint64_t)(v229 + 3));
  memset(v898, 0, sizeof(v898));
  sub_6B58((char *)v898, (__int128 *)v229[8], (__int128 *)v229[9], 0xAAAAAAAAAAAAAAABLL * ((v229[9] - v229[8]) >> 3));
  sub_23F4((int)v602, "Other L1 Stores %");
  double v231 = (uint64_t *)sub_24C8((uint64_t)v602, 0xFu, 3LL, (uint64_t)sub_4C160);
  __int128 v232 = sub_2684(v231, "L1 Access Breakdown");
  unsigned int v233 = sub_2684(v232, "One Pass");
  __int128 v234 = *(_OWORD *)v233;
  int v900 = *((_DWORD *)v233 + 4);
  __int128 v899 = v234;
  sub_41004((uint64_t)&v901, (uint64_t)(v233 + 3));
  memset(v902, 0, sizeof(v902));
  sub_6B58((char *)v902, (__int128 *)v233[8], (__int128 *)v233[9], 0xAAAAAAAAAAAAAAABLL * ((v233[9] - v233[8]) >> 3));
  sub_23F4((int)v601, "ALU Limiter");
  uint64_t v235 = sub_25B8((uint64_t)v601, 0xBu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4C208);
  int v236 = (uint64_t *)sub_24C8(v235, 0xFu, 3LL, (uint64_t)sub_4C2F8);
  uint64_t v237 = sub_2684(v236, "Limiters");
  __int128 v238 = sub_2684(v237, "One Pass");
  __int128 v239 = *(_OWORD *)v238;
  int v904 = *((_DWORD *)v238 + 4);
  __int128 v903 = v239;
  sub_41004((uint64_t)&v905, (uint64_t)(v238 + 3));
  memset(v906, 0, sizeof(v906));
  sub_6B58((char *)v906, (__int128 *)v238[8], (__int128 *)v238[9], 0xAAAAAAAAAAAAAAABLL * ((v238[9] - v238[8]) >> 3));
  sub_23F4((int)v600, "ALU Utilization");
  uint64_t v240 = sub_25B8((uint64_t)v600, 0xBu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4C50C);
  __int128 v241 = (uint64_t *)sub_24C8(v240, 0xFu, 3LL, (uint64_t)sub_4C5D4);
  double v242 = sub_2684(v241, "Utilizations");
  double v243 = sub_2684(v242, "One Pass");
  __int128 v244 = *(_OWORD *)v243;
  int v908 = *((_DWORD *)v243 + 4);
  __int128 v907 = v244;
  sub_41004((uint64_t)&v909, (uint64_t)(v243 + 3));
  memset(v910, 0, sizeof(v910));
  sub_6B58((char *)v910, (__int128 *)v243[8], (__int128 *)v243[9], 0xAAAAAAAAAAAAAAABLL * ((v243[9] - v243[8]) >> 3));
  sub_23F4((int)v599, "Shader Core Limiter");
  double v245 = (uint64_t *)sub_24C8((uint64_t)v599, 0xFu, 3LL, (uint64_t)sub_4C748);
  double v246 = sub_2684(v245, "Limiters");
  __int128 v247 = sub_2684(v246, "One Pass");
  __int128 v248 = *(_OWORD *)v247;
  int v912 = *((_DWORD *)v247 + 4);
  __int128 v911 = v248;
  sub_41004((uint64_t)&v913, (uint64_t)(v247 + 3));
  memset(v914, 0, sizeof(v914));
  sub_6B58((char *)v914, (__int128 *)v247[8], (__int128 *)v247[9], 0xAAAAAAAAAAAAAAABLL * ((v247[9] - v247[8]) >> 3));
  sub_23F4((int)v598, "Shader Core Utilization");
  double v249 = (uint64_t *)sub_24C8((uint64_t)v598, 0xFu, 3LL, (uint64_t)sub_4C9D4);
  __int128 v250 = sub_2684(v249, "Utilizations");
  char v251 = sub_2684(v250, "One Pass");
  __int128 v252 = *(_OWORD *)v251;
  int v916 = *((_DWORD *)v251 + 4);
  __int128 v915 = v252;
  sub_41004((uint64_t)&v917, (uint64_t)(v251 + 3));
  memset(v918, 0, sizeof(v918));
  sub_6B58((char *)v918, (__int128 *)v251[8], (__int128 *)v251[9], 0xAAAAAAAAAAAAAAABLL * ((v251[9] - v251[8]) >> 3));
  sub_23F4((int)v597, "Instructions Executed");
  __int128 v253 = (uint64_t *)sub_24C8((uint64_t)v597, 0xFu, 3LL, (uint64_t)sub_4CA90);
  double v254 = sub_2684(v253, "Absolute Statistics");
  __int128 v255 = *(_OWORD *)v254;
  int v920 = *((_DWORD *)v254 + 4);
  __int128 v919 = v255;
  sub_41004((uint64_t)&v921, (uint64_t)(v254 + 3));
  memset(v922, 0, sizeof(v922));
  sub_6B58((char *)v922, (__int128 *)v254[8], (__int128 *)v254[9], 0xAAAAAAAAAAAAAAABLL * ((v254[9] - v254[8]) >> 3));
  sub_23F4((int)v596, "Instructions Per Clock");
  __int128 v256 = (uint64_t *)sub_24C8((uint64_t)v596, 0xFu, 3LL, (uint64_t)sub_4CB08);
  uint64_t v257 = sub_2684(v256, "Instructions Per Clock");
  uint64_t v258 = sub_2684(v257, "One Pass");
  __int128 v259 = *(_OWORD *)v258;
  int v924 = *((_DWORD *)v258 + 4);
  __int128 v923 = v259;
  sub_41004((uint64_t)&v925, (uint64_t)(v258 + 3));
  memset(v926, 0, sizeof(v926));
  sub_6B58((char *)v926, (__int128 *)v258[8], (__int128 *)v258[9], 0xAAAAAAAAAAAAAAABLL * ((v258[9] - v258[8]) >> 3));
  sub_23F4((int)v595, "F16 Limiter");
  double v260 = (uint64_t *)sub_24C8((uint64_t)v595, 0xFu, 3LL, (uint64_t)sub_4CB90);
  double v261 = sub_2684(v260, "Limiters");
  __int128 v262 = sub_2684(v261, "One Pass");
  __int128 v263 = *(_OWORD *)v262;
  int v928 = *((_DWORD *)v262 + 4);
  __int128 v927 = v263;
  sub_41004((uint64_t)&v929, (uint64_t)(v262 + 3));
  memset(v930, 0, sizeof(v930));
  sub_6B58((char *)v930, (__int128 *)v262[8], (__int128 *)v262[9], 0xAAAAAAAAAAAAAAABLL * ((v262[9] - v262[8]) >> 3));
  sub_23F4((int)v594, "F16 Utilization");
  unsigned int v264 = (uint64_t *)sub_24C8((uint64_t)v594, 0xFu, 3LL, (uint64_t)sub_4CC80);
  __int128 v265 = sub_2684(v264, "Utilizations");
  int v266 = sub_2684(v265, "One Pass");
  __int128 v267 = *(_OWORD *)v266;
  int v932 = *((_DWORD *)v266 + 4);
  __int128 v931 = v267;
  sub_41004((uint64_t)&v933, (uint64_t)(v266 + 3));
  memset(v934, 0, sizeof(v934));
  sub_6B58((char *)v934, (__int128 *)v266[8], (__int128 *)v266[9], 0xAAAAAAAAAAAAAAABLL * ((v266[9] - v266[8]) >> 3));
  sub_23F4((int)v593, "F32 Limiter");
  __int128 v268 = (uint64_t *)sub_24C8((uint64_t)v593, 0xFu, 3LL, (uint64_t)sub_4CD48);
  uint64_t v269 = sub_2684(v268, "Limiters");
  uint64_t v270 = sub_2684(v269, "One Pass");
  __int128 v271 = *(_OWORD *)v270;
  int v936 = *((_DWORD *)v270 + 4);
  __int128 v935 = v271;
  sub_41004((uint64_t)&v937, (uint64_t)(v270 + 3));
  memset(v938, 0, sizeof(v938));
  sub_6B58((char *)v938, (__int128 *)v270[8], (__int128 *)v270[9], 0xAAAAAAAAAAAAAAABLL * ((v270[9] - v270[8]) >> 3));
  sub_23F4((int)v592, "F32 Utilization");
  unint64_t v272 = (uint64_t *)sub_24C8((uint64_t)v592, 0xFu, 3LL, (uint64_t)sub_4CE38);
  unint64_t v273 = sub_2684(v272, "Utilizations");
  __int128 v274 = sub_2684(v273, "One Pass");
  __int128 v275 = *(_OWORD *)v274;
  int v940 = *((_DWORD *)v274 + 4);
  __int128 v939 = v275;
  sub_41004((uint64_t)&v941, (uint64_t)(v274 + 3));
  memset(v942, 0, sizeof(v942));
  sub_6B58((char *)v942, (__int128 *)v274[8], (__int128 *)v274[9], 0xAAAAAAAAAAAAAAABLL * ((v274[9] - v274[8]) >> 3));
  sub_23F4((int)v591, "IC Limiter");
  unint64_t v276 = (uint64_t *)sub_24C8((uint64_t)v591, 0xFu, 3LL, (uint64_t)sub_4CF00);
  __int128 v277 = sub_2684(v276, "Limiters");
  double v278 = sub_2684(v277, "One Pass");
  __int128 v279 = *(_OWORD *)v278;
  int v944 = *((_DWORD *)v278 + 4);
  __int128 v943 = v279;
  sub_41004((uint64_t)&v945, (uint64_t)(v278 + 3));
  memset(v946, 0, sizeof(v946));
  sub_6B58((char *)v946, (__int128 *)v278[8], (__int128 *)v278[9], 0xAAAAAAAAAAAAAAABLL * ((v278[9] - v278[8]) >> 3));
  sub_23F4((int)v590, "IC Utilization");
  __int128 v280 = (uint64_t *)sub_24C8((uint64_t)v590, 0xFu, 3LL, (uint64_t)sub_4CFE8);
  int v281 = sub_2684(v280, "Utilizations");
  char v282 = sub_2684(v281, "One Pass");
  __int128 v283 = *(_OWORD *)v282;
  int v948 = *((_DWORD *)v282 + 4);
  __int128 v947 = v283;
  sub_41004((uint64_t)&v949, (uint64_t)(v282 + 3));
  memset(v950, 0, sizeof(v950));
  sub_6B58((char *)v950, (__int128 *)v282[8], (__int128 *)v282[9], 0xAAAAAAAAAAAAAAABLL * ((v282[9] - v282[8]) >> 3));
  sub_23F4((int)v589, "SCIB Limiter");
  char v284 = (uint64_t *)sub_24C8((uint64_t)v589, 0xFu, 3LL, (uint64_t)sub_4D0B0);
  unint64_t v285 = sub_2684(v284, "Limiters");
  __int128 v286 = sub_2684(v285, "One Pass");
  __int128 v287 = *(_OWORD *)v286;
  int v952 = *((_DWORD *)v286 + 4);
  __int128 v951 = v287;
  sub_41004((uint64_t)&v953, (uint64_t)(v286 + 3));
  memset(v954, 0, sizeof(v954));
  sub_6B58((char *)v954, (__int128 *)v286[8], (__int128 *)v286[9], 0xAAAAAAAAAAAAAAABLL * ((v286[9] - v286[8]) >> 3));
  sub_23F4((int)v588, "SCIB Utilization");
  uint64_t v288 = (uint64_t *)sub_24C8((uint64_t)v588, 0xFu, 3LL, (uint64_t)sub_4D1A0);
  __int128 v289 = sub_2684(v288, "Utilizations");
  double v290 = sub_2684(v289, "One Pass");
  __int128 v291 = *(_OWORD *)v290;
  int v956 = *((_DWORD *)v290 + 4);
  __int128 v955 = v291;
  sub_41004((uint64_t)&v957, (uint64_t)(v290 + 3));
  memset(v958, 0, sizeof(v958));
  sub_6B58((char *)v958, (__int128 *)v290[8], (__int128 *)v290[9], 0xAAAAAAAAAAAAAAABLL * ((v290[9] - v290[8]) >> 3));
  sub_23F4((int)v587, "Control Flow Limiter");
  __int128 v292 = (uint64_t *)sub_24C8((uint64_t)v587, 0xFu, 3LL, (uint64_t)sub_4D268);
  uint64_t v293 = sub_2684(v292, "Limiters");
  uint64_t v294 = sub_2684(v293, "One Pass");
  __int128 v295 = *(_OWORD *)v294;
  int v960 = *((_DWORD *)v294 + 4);
  __int128 v959 = v295;
  sub_41004((uint64_t)&v961, (uint64_t)(v294 + 3));
  memset(v962, 0, sizeof(v962));
  sub_6B58((char *)v962, (__int128 *)v294[8], (__int128 *)v294[9], 0xAAAAAAAAAAAAAAABLL * ((v294[9] - v294[8]) >> 3));
  sub_23F4((int)v586, "Control Flow Utilization");
  uint64_t v296 = (uint64_t *)sub_24C8((uint64_t)v586, 0xFu, 3LL, (uint64_t)sub_4D358);
  uint64_t v297 = sub_2684(v296, "Utilizations");
  __int128 v298 = sub_2684(v297, "One Pass");
  __int128 v299 = *(_OWORD *)v298;
  int v964 = *((_DWORD *)v298 + 4);
  __int128 v963 = v299;
  sub_41004((uint64_t)&v965, (uint64_t)(v298 + 3));
  memset(v966, 0, sizeof(v966));
  sub_6B58((char *)v966, (__int128 *)v298[8], (__int128 *)v298[9], 0xAAAAAAAAAAAAAAABLL * ((v298[9] - v298[8]) >> 3));
  sub_23F4((int)v585, "Address Generation Limiter");
  double v300 = (uint64_t *)sub_24C8((uint64_t)v585, 0xFu, 3LL, (uint64_t)sub_4D420);
  __int128 v301 = sub_2684(v300, "Limiters");
  uint64_t v302 = sub_2684(v301, "One Pass");
  __int128 v303 = *(_OWORD *)v302;
  int v968 = *((_DWORD *)v302 + 4);
  __int128 v967 = v303;
  sub_41004((uint64_t)&v969, (uint64_t)(v302 + 3));
  memset(v970, 0, sizeof(v970));
  sub_6B58((char *)v970, (__int128 *)v302[8], (__int128 *)v302[9], 0xAAAAAAAAAAAAAAABLL * ((v302[9] - v302[8]) >> 3));
  sub_23F4((int)v584, "Address Generation Utilization");
  __int128 v304 = (uint64_t *)sub_24C8((uint64_t)v584, 0xFu, 3LL, (uint64_t)sub_4D510);
  uint64_t v305 = sub_2684(v304, "Utilizations");
  char v306 = sub_2684(v305, "One Pass");
  __int128 v307 = *(_OWORD *)v306;
  int v972 = *((_DWORD *)v306 + 4);
  __int128 v971 = v307;
  sub_41004((uint64_t)&v973, (uint64_t)(v306 + 3));
  memset(v974, 0, sizeof(v974));
  sub_6B58((char *)v974, (__int128 *)v306[8], (__int128 *)v306[9], 0xAAAAAAAAAAAAAAABLL * ((v306[9] - v306[8]) >> 3));
  sub_23F4((int)v583, "Texture Cache Limiter");
  uint64_t v308 = (uint64_t *)sub_24C8((uint64_t)v583, 0xFu, 3LL, (uint64_t)sub_4D5D8);
  uint64_t v309 = sub_2684(v308, "Limiters");
  __int128 v310 = sub_2684(v309, "One Pass");
  __int128 v311 = *(_OWORD *)v310;
  int v976 = *((_DWORD *)v310 + 4);
  __int128 v975 = v311;
  sub_41004((uint64_t)&v977, (uint64_t)(v310 + 3));
  memset(v978, 0, sizeof(v978));
  sub_6B58((char *)v978, (__int128 *)v310[8], (__int128 *)v310[9], 0xAAAAAAAAAAAAAAABLL * ((v310[9] - v310[8]) >> 3));
  sub_23F4((int)v582, "Texture Cache Limiter");
  uint64_t v312 = sub_25B8((uint64_t)v582, 0xBu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4D5D8);
  __int128 v313 = (uint64_t *)sub_24C8(v312, 0xFu, 3LL, (uint64_t)sub_4D6C8);
  uint64_t v314 = sub_2684(v313, "Limiters");
  uint64_t v315 = sub_2684(v314, "One Pass");
  __int128 v316 = *(_OWORD *)v315;
  int v980 = *((_DWORD *)v315 + 4);
  __int128 v979 = v316;
  sub_41004((uint64_t)&v981, (uint64_t)(v315 + 3));
  memset(v982, 0, sizeof(v982));
  sub_6B58((char *)v982, (__int128 *)v315[8], (__int128 *)v315[9], 0xAAAAAAAAAAAAAAABLL * ((v315[9] - v315[8]) >> 3));
  sub_23F4((int)v581, "Texture Cache Utilization");
  uint64_t v317 = (uint64_t *)sub_24C8((uint64_t)v581, 0xFu, 3LL, (uint64_t)sub_4D778);
  uint64_t v318 = sub_2684(v317, "Utilizations");
  __int128 v319 = sub_2684(v318, "One Pass");
  __int128 v320 = *(_OWORD *)v319;
  int v984 = *((_DWORD *)v319 + 4);
  __int128 v983 = v320;
  sub_41004((uint64_t)&v985, (uint64_t)(v319 + 3));
  memset(v986, 0, sizeof(v986));
  sub_6B58((char *)v986, (__int128 *)v319[8], (__int128 *)v319[9], 0xAAAAAAAAAAAAAAABLL * ((v319[9] - v319[8]) >> 3));
  sub_23F4((int)v580, "Texture Cache Utilization");
  uint64_t v321 = sub_25B8((uint64_t)v580, 0xBu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4D778);
  __int128 v322 = (uint64_t *)sub_24C8(v321, 0xFu, 3LL, (uint64_t)sub_4D840);
  double v323 = sub_2684(v322, "Utilizations");
  double v324 = sub_2684(v323, "One Pass");
  __int128 v325 = *(_OWORD *)v324;
  int v988 = *((_DWORD *)v324 + 4);
  __int128 v987 = v325;
  sub_41004((uint64_t)&v989, (uint64_t)(v324 + 3));
  memset(v990, 0, sizeof(v990));
  sub_6B58((char *)v990, (__int128 *)v324[8], (__int128 *)v324[9], 0xAAAAAAAAAAAAAAABLL * ((v324[9] - v324[8]) >> 3));
  sub_23F4((int)v579, "Texture Read Limiter");
  unint64_t v326 = (uint64_t *)sub_24C8((uint64_t)v579, 0xFu, 3LL, (uint64_t)sub_4D908);
  double v327 = sub_2684(v326, "Limiters");
  __int128 v328 = sub_2684(v327, "One Pass");
  __int128 v329 = *(_OWORD *)v328;
  int v992 = *((_DWORD *)v328 + 4);
  __int128 v991 = v329;
  sub_41004((uint64_t)&v993, (uint64_t)(v328 + 3));
  memset(v994, 0, sizeof(v994));
  sub_6B58((char *)v994, (__int128 *)v328[8], (__int128 *)v328[9], 0xAAAAAAAAAAAAAAABLL * ((v328[9] - v328[8]) >> 3));
  sub_23F4((int)v578, "Texture Read Limiter");
  uint64_t v330 = sub_25B8((uint64_t)v578, 0xBu, 2LL, 0xCuLL, 2LL, (uint64_t)sub_4D9F8);
  uint64_t v331 = sub_25B8(v330, 0xDu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4D908);
  double v332 = (uint64_t *)sub_24C8(v331, 0xFu, 3LL, (uint64_t)sub_4DAC0);
  double v333 = sub_2684(v332, "Limiters");
  __int128 v334 = sub_2684(v333, "One Pass");
  __int128 v335 = *(_OWORD *)v334;
  int v996 = *((_DWORD *)v334 + 4);
  __int128 v995 = v335;
  sub_41004((uint64_t)&v997, (uint64_t)(v334 + 3));
  memset(v998, 0, sizeof(v998));
  sub_6B58((char *)v998, (__int128 *)v334[8], (__int128 *)v334[9], 0xAAAAAAAAAAAAAAABLL * ((v334[9] - v334[8]) >> 3));
  sub_23F4((int)v577, "Texture Read Utilization");
  double v336 = (uint64_t *)sub_24C8((uint64_t)v577, 0xFu, 3LL, (uint64_t)sub_4DAC4);
  __int128 v337 = sub_2684(v336, "Utilizations");
  unint64_t v338 = sub_2684(v337, "One Pass");
  __int128 v339 = *(_OWORD *)v338;
  int v1000 = *((_DWORD *)v338 + 4);
  __int128 v999 = v339;
  sub_41004((uint64_t)&v1001, (uint64_t)(v338 + 3));
  memset(v1002, 0, sizeof(v1002));
  sub_6B58((char *)v1002, (__int128 *)v338[8], (__int128 *)v338[9], 0xAAAAAAAAAAAAAAABLL * ((v338[9] - v338[8]) >> 3));
  sub_23F4((int)v576, "Texture Read Utilization");
  uint64_t v340 = sub_25B8((uint64_t)v576, 0xBu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4DAC4);
  double v341 = (uint64_t *)sub_24C8(v340, 0xFu, 3LL, (uint64_t)sub_4DB8C);
  int v342 = sub_2684(v341, "Utilizations");
  __int128 v343 = sub_2684(v342, "One Pass");
  __int128 v344 = *(_OWORD *)v343;
  int v1004 = *((_DWORD *)v343 + 4);
  __int128 v1003 = v344;
  sub_41004((uint64_t)&v1005, (uint64_t)(v343 + 3));
  memset(v1006, 0, sizeof(v1006));
  sub_6B58((char *)v1006, (__int128 *)v343[8], (__int128 *)v343[9], 0xAAAAAAAAAAAAAAABLL * ((v343[9] - v343[8]) >> 3));
  sub_23F4((int)v575, "Texture Write Limiter");
  double v345 = (uint64_t *)sub_24C8((uint64_t)v575, 0xBu, 2LL, (uint64_t)sub_4DD7C);
  __int128 v346 = sub_2684(v345, "Limiters");
  double v347 = sub_2684(v346, "One Pass");
  __int128 v348 = *(_OWORD *)v347;
  int v1008 = *((_DWORD *)v347 + 4);
  __int128 v1007 = v348;
  sub_41004((uint64_t)&v1009, (uint64_t)(v347 + 3));
  memset(v1010, 0, sizeof(v1010));
  sub_6B58((char *)v1010, (__int128 *)v347[8], (__int128 *)v347[9], 0xAAAAAAAAAAAAAAABLL * ((v347[9] - v347[8]) >> 3));
  sub_23F4((int)v574, "Texture Write Utilization");
  __int128 v349 = (uint64_t *)sub_24C8((uint64_t)v574, 0xBu, 2LL, (uint64_t)sub_4DE6C);
  double v350 = sub_2684(v349, "Utilizations");
  double v351 = sub_2684(v350, "One Pass");
  __int128 v352 = *(_OWORD *)v351;
  int v1012 = *((_DWORD *)v351 + 4);
  __int128 v1011 = v352;
  sub_41004((uint64_t)&v1013, (uint64_t)(v351 + 3));
  memset(v1014, 0, sizeof(v1014));
  sub_6B58((char *)v1014, (__int128 *)v351[8], (__int128 *)v351[9], 0xAAAAAAAAAAAAAAABLL * ((v351[9] - v351[8]) >> 3));
  sub_23F4((int)v573, "Total Occupancy");
  char v353 = (uint64_t *)sub_24C8((uint64_t)v573, 0xBu, 2LL, (uint64_t)sub_4DF34);
  char v354 = sub_2684(v353, "Thread Occupancy");
  __int128 v355 = sub_2684(v354, "One Pass");
  __int128 v356 = *(_OWORD *)v355;
  int v1016 = *((_DWORD *)v355 + 4);
  __int128 v1015 = v356;
  sub_41004((uint64_t)&v1017, (uint64_t)(v355 + 3));
  memset(v1018, 0, sizeof(v1018));
  sub_6B58((char *)v1018, (__int128 *)v355[8], (__int128 *)v355[9], 0xAAAAAAAAAAAAAAABLL * ((v355[9] - v355[8]) >> 3));
  sub_23F4((int)v572, "Total Simdgroups Inflight Per Shader Core");
  unint64_t v357 = (uint64_t *)sub_24C8((uint64_t)v572, 0xBu, 2LL, (uint64_t)sub_4DFD8);
  __int128 v358 = sub_2684(v357, "One Pass");
  __int128 v359 = *(_OWORD *)v358;
  int v1020 = *((_DWORD *)v358 + 4);
  __int128 v1019 = v359;
  sub_41004((uint64_t)&v1021, (uint64_t)(v358 + 3));
  memset(v1022, 0, sizeof(v1022));
  sub_6B58((char *)v1022, (__int128 *)v358[8], (__int128 *)v358[9], 0xAAAAAAAAAAAAAAABLL * ((v358[9] - v358[8]) >> 3));
  sub_23F4((int)v571, "Vertex Occupancy");
  double v360 = (uint64_t *)sub_24C8((uint64_t)v571, 0xBu, 2LL, (uint64_t)sub_4E058);
  __int128 v361 = sub_2684(v360, "Thread Occupancy");
  char v362 = sub_2684(v361, "One Pass");
  __int128 v363 = *(_OWORD *)v362;
  int v1024 = *((_DWORD *)v362 + 4);
  __int128 v1023 = v363;
  sub_41004((uint64_t)&v1025, (uint64_t)(v362 + 3));
  memset(v1026, 0, sizeof(v1026));
  sub_6B58((char *)v1026, (__int128 *)v362[8], (__int128 *)v362[9], 0xAAAAAAAAAAAAAAABLL * ((v362[9] - v362[8]) >> 3));
  sub_23F4((int)v570, "Vertex Simdgroups Inflight Per Shader Core");
  uint64_t v364 = sub_25B8((uint64_t)v570, 0xBu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4E0BC);
  uint64_t v365 = (uint64_t *)sub_24C8(v364, 0xFu, 3LL, (uint64_t)sub_4E154);
  uint64_t v366 = sub_2684(v365, "One Pass");
  __int128 v367 = *(_OWORD *)v366;
  int v1028 = *((_DWORD *)v366 + 4);
  __int128 v1027 = v367;
  sub_41004((uint64_t)&v1029, (uint64_t)(v366 + 3));
  memset(v1030, 0, sizeof(v1030));
  sub_6B58((char *)v1030, (__int128 *)v366[8], (__int128 *)v366[9], 0xAAAAAAAAAAAAAAABLL * ((v366[9] - v366[8]) >> 3));
  sub_23F4((int)v569, "Fragment Occupancy");
  unint64_t v368 = (uint64_t *)sub_24C8((uint64_t)v569, 0xBu, 2LL, (uint64_t)sub_4E278);
  unint64_t v369 = sub_2684(v368, "Thread Occupancy");
  __int128 v370 = sub_2684(v369, "One Pass");
  __int128 v371 = *(_OWORD *)v370;
  int v1032 = *((_DWORD *)v370 + 4);
  __int128 v1031 = v371;
  sub_41004((uint64_t)&v1033, (uint64_t)(v370 + 3));
  memset(v1034, 0, sizeof(v1034));
  sub_6B58((char *)v1034, (__int128 *)v370[8], (__int128 *)v370[9], 0xAAAAAAAAAAAAAAABLL * ((v370[9] - v370[8]) >> 3));
  sub_23F4((int)v568, "Fragment Simdgroups Inflight Per Shader Core");
  uint64_t v372 = sub_25B8((uint64_t)v568, 0xBu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4E2DC);
  __int128 v373 = (uint64_t *)sub_24C8(v372, 0xFu, 3LL, (uint64_t)sub_4E374);
  double v374 = sub_2684(v373, "One Pass");
  __int128 v375 = *(_OWORD *)v374;
  int v1036 = *((_DWORD *)v374 + 4);
  __int128 v1035 = v375;
  sub_41004((uint64_t)&v1037, (uint64_t)(v374 + 3));
  memset(v1038, 0, sizeof(v1038));
  sub_6B58((char *)v1038, (__int128 *)v374[8], (__int128 *)v374[9], 0xAAAAAAAAAAAAAAABLL * ((v374[9] - v374[8]) >> 3));
  sub_23F4((int)v567, "Compute Occupancy");
  __int128 v376 = (uint64_t *)sub_24C8((uint64_t)v567, 0xBu, 2LL, (uint64_t)sub_4E4C0);
  uint64_t v377 = sub_2684(v376, "Thread Occupancy");
  double v378 = sub_2684(v377, "One Pass");
  __int128 v379 = *(_OWORD *)v378;
  int v1040 = *((_DWORD *)v378 + 4);
  __int128 v1039 = v379;
  sub_41004((uint64_t)&v1041, (uint64_t)(v378 + 3));
  memset(v1042, 0, sizeof(v1042));
  sub_6B58((char *)v1042, (__int128 *)v378[8], (__int128 *)v378[9], 0xAAAAAAAAAAAAAAABLL * ((v378[9] - v378[8]) >> 3));
  sub_23F4((int)v566, "Compute Simdgroups Inflight Per Shader Core");
  uint64_t v380 = sub_25B8((uint64_t)v566, 0xBu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4E524);
  unsigned int v381 = (uint64_t *)sub_24C8(v380, 0xFu, 3LL, (uint64_t)sub_4E5BC);
  __int128 v382 = sub_2684(v381, "One Pass");
  __int128 v383 = *(_OWORD *)v382;
  int v1044 = *((_DWORD *)v382 + 4);
  __int128 v1043 = v383;
  sub_41004((uint64_t)&v1045, (uint64_t)(v382 + 3));
  memset(v1046, 0, sizeof(v1046));
  sub_6B58((char *)v1046, (__int128 *)v382[8], (__int128 *)v382[9], 0xAAAAAAAAAAAAAAABLL * ((v382[9] - v382[8]) >> 3));
  sub_23F4((int)v565, "Occupancy Manager Target");
  uint64_t v384 = (uint64_t *)sub_24C8((uint64_t)v565, 0xFu, 3LL, (uint64_t)sub_4E708);
  __int128 v385 = sub_2684(v384, "Thread Occupancy");
  uint64_t v386 = sub_2684(v385, "One Pass");
  __int128 v387 = *(_OWORD *)v386;
  int v1048 = *((_DWORD *)v386 + 4);
  __int128 v1047 = v387;
  sub_41004((uint64_t)&v1049, (uint64_t)(v386 + 3));
  memset(v1050, 0, sizeof(v1050));
  sub_6B58((char *)v1050, (__int128 *)v386[8], (__int128 *)v386[9], 0xAAAAAAAAAAAAAAABLL * ((v386[9] - v386[8]) >> 3));
  sub_23F4((int)v564, "AF Bandwidth");
  uint64_t v388 = sub_25B8((uint64_t)v564, 0xBu, 2LL, 0xBuLL, 3LL, (uint64_t)sub_4E830);
  uint64_t v389 = sub_25B8(v388, 0xCu, 2LL, 0xEuLL, 3LL, (uint64_t)sub_4E894);
  uint64_t v390 = sub_24C8(v389, 0xEu, 4LL, (uint64_t)sub_4E948);
  __int128 v391 = (uint64_t *)sub_246C(v390, 15, 2, (uint64_t)sub_4E894);
  char v392 = sub_2684(v391, "Memory Bandwidth");
  char v393 = sub_2684(v392, "System Memory Bandwidth");
  __int128 v394 = sub_2684(v393, "One Pass");
  __int128 v395 = *(_OWORD *)v394;
  int v1052 = *((_DWORD *)v394 + 4);
  __int128 v1051 = v395;
  sub_41004((uint64_t)&v1053, (uint64_t)(v394 + 3));
  memset(v1054, 0, sizeof(v1054));
  sub_6B58((char *)v1054, (__int128 *)v394[8], (__int128 *)v394[9], 0xAAAAAAAAAAAAAAABLL * ((v394[9] - v394[8]) >> 3));
  sub_23F4((int)v563, "AF Read Bandwidth");
  uint64_t v396 = sub_25B8((uint64_t)v563, 0xBu, 2LL, 0xBuLL, 3LL, (uint64_t)sub_4EA24);
  uint64_t v397 = sub_25B8(v396, 0xCu, 2LL, 0xEuLL, 3LL, (uint64_t)sub_4EA88);
  uint64_t v398 = sub_24C8(v397, 0xEu, 4LL, (uint64_t)sub_4EB14);
  uint64_t v399 = (uint64_t *)sub_246C(v398, 15, 2, (uint64_t)sub_4EA88);
  __int128 v400 = sub_2684(v399, "Memory Bandwidth");
  unint64_t v401 = sub_2684(v400, "System Memory Bandwidth");
  v402 = sub_2684(v401, "One Pass");
  __int128 v403 = *(_OWORD *)v402;
  int v1056 = *((_DWORD *)v402 + 4);
  __int128 v1055 = v403;
  sub_41004((uint64_t)&v1057, (uint64_t)(v402 + 3));
  memset(v1058, 0, sizeof(v1058));
  sub_6B58((char *)v1058, (__int128 *)v402[8], (__int128 *)v402[9], 0xAAAAAAAAAAAAAAABLL * ((v402[9] - v402[8]) >> 3));
  sub_23F4((int)v562, "AF Write Bandwidth");
  unint64_t v404 = (uint64_t *)sub_24C8((uint64_t)v562, 0xBu, 2LL, (uint64_t)sub_4EBA0);
  unint64_t v405 = sub_2684(v404, "Memory Bandwidth");
  __int128 v406 = sub_2684(v405, "System Memory Bandwidth");
  double v407 = sub_2684(v406, "One Pass");
  __int128 v408 = *(_OWORD *)v407;
  int v1060 = *((_DWORD *)v407 + 4);
  __int128 v1059 = v408;
  sub_41004((uint64_t)&v1061, (uint64_t)(v407 + 3));
  memset(v1062, 0, sizeof(v1062));
  sub_6B58((char *)v1062, (__int128 *)v407[8], (__int128 *)v407[9], 0xAAAAAAAAAAAAAAABLL * ((v407[9] - v407[8]) >> 3));
  sub_23F4((int)v561, "L2 Bandwidth");
  __int128 v409 = (uint64_t *)sub_24C8((uint64_t)v561, 0xBu, 2LL, (uint64_t)sub_4EBF8);
  double v410 = sub_2684(v409, "Memory Bandwidth");
  unint64_t v411 = sub_2684(v410, "Internal Memory Bandwidth");
  __int128 v412 = sub_2684(v411, "One Pass");
  __int128 v413 = *(_OWORD *)v412;
  int v1064 = *((_DWORD *)v412 + 4);
  __int128 v1063 = v413;
  sub_41004((uint64_t)&v1065, (uint64_t)(v412 + 3));
  memset(v1066, 0, sizeof(v1066));
  sub_6B58((char *)v1066, (__int128 *)v412[8], (__int128 *)v412[9], 0xAAAAAAAAAAAAAAABLL * ((v412[9] - v412[8]) >> 3));
  sub_23F4((int)v560, "L1 Load Bandwidth");
  uint64_t v414 = sub_25B8((uint64_t)v560, 0xDu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4EC5C);
  __int128 v415 = (uint64_t *)sub_24C8(v414, 0xFu, 3LL, (uint64_t)sub_4ECC0);
  unsigned __int8 v416 = sub_2684(v415, "Memory Bandwidth");
  double v417 = sub_2684(v416, "Internal Memory Bandwidth");
  __int128 v418 = sub_2684(v417, "One Pass");
  __int128 v419 = *(_OWORD *)v418;
  int v1068 = *((_DWORD *)v418 + 4);
  __int128 v1067 = v419;
  sub_41004((uint64_t)&v1069, (uint64_t)(v418 + 3));
  memset(v1070, 0, sizeof(v1070));
  sub_6B58((char *)v1070, (__int128 *)v418[8], (__int128 *)v418[9], 0xAAAAAAAAAAAAAAABLL * ((v418[9] - v418[8]) >> 3));
  sub_23F4((int)v559, "L1 Store Bandwidth");
  uint64_t v420 = sub_25B8((uint64_t)v559, 0xDu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4ED0C);
  __int128 v421 = (uint64_t *)sub_24C8(v420, 0xFu, 3LL, (uint64_t)sub_4ED70);
  unint64_t v422 = sub_2684(v421, "Memory Bandwidth");
  uint64_t v423 = sub_2684(v422, "Internal Memory Bandwidth");
  __int128 v424 = sub_2684(v423, "One Pass");
  __int128 v425 = *(_OWORD *)v424;
  int v1072 = *((_DWORD *)v424 + 4);
  __int128 v1071 = v425;
  sub_41004((uint64_t)&v1073, (uint64_t)(v424 + 3));
  memset(v1074, 0, sizeof(v1074));
  sub_6B58((char *)v1074, (__int128 *)v424[8], (__int128 *)v424[9], 0xAAAAAAAAAAAAAAABLL * ((v424[9] - v424[8]) >> 3));
  sub_23F4((int)v558, "Threadgroup Memory Load Bandwidth");
  uint64_t v426 = (uint64_t *)sub_25B8((uint64_t)v558, 0xDu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4EDBC);
  __int128 v427 = sub_2684(v426, "Memory Bandwidth");
  unsigned __int8 v428 = sub_2684(v427, "Internal Memory Bandwidth");
  unsigned __int8 v429 = sub_2684(v428, "One Pass");
  __int128 v430 = *(_OWORD *)v429;
  int v1076 = *((_DWORD *)v429 + 4);
  __int128 v1075 = v430;
  sub_41004((uint64_t)&v1077, (uint64_t)(v429 + 3));
  memset(v1078, 0, sizeof(v1078));
  sub_6B58((char *)v1078, (__int128 *)v429[8], (__int128 *)v429[9], 0xAAAAAAAAAAAAAAABLL * ((v429[9] - v429[8]) >> 3));
  sub_23F4((int)v557, "Threadgroup Memory Store Bandwidth");
  uint64_t v431 = (uint64_t *)sub_25B8((uint64_t)v557, 0xDu, 2LL, 0xFuLL, 2LL, (uint64_t)sub_4EE38);
  unsigned int v432 = sub_2684(v431, "Memory Bandwidth");
  __int128 v433 = sub_2684(v432, "Internal Memory Bandwidth");
  char v434 = sub_2684(v433, "One Pass");
  __int128 v435 = *(_OWORD *)v434;
  int v1080 = *((_DWORD *)v434 + 4);
  __int128 v1079 = v435;
  sub_41004((uint64_t)&v1081, (uint64_t)(v434 + 3));
  memset(v1082, 0, sizeof(v1082));
  sub_6B58((char *)v1082, (__int128 *)v434[8], (__int128 *)v434[9], 0xAAAAAAAAAAAAAAABLL * ((v434[9] - v434[8]) >> 3));
  sub_23F4((int)v556, "Threadgroup Memory L1 Load Bandwidth");
  __int128 v436 = (uint64_t *)sub_24C8((uint64_t)v556, 0xFu, 3LL, (uint64_t)sub_4EDBC);
  uint64_t v437 = sub_2684(v436, "Memory Bandwidth");
  uint64_t v438 = sub_2684(v437, "Internal Memory Bandwidth");
  __int128 v439 = sub_2684(v438, "One Pass");
  __int128 v440 = *(_OWORD *)v439;
  int v1084 = *((_DWORD *)v439 + 4);
  __int128 v1083 = v440;
  sub_41004((uint64_t)&v1085, (uint64_t)(v439 + 3));
  memset(v1086, 0, sizeof(v1086));
  sub_6B58((char *)v1086, (__int128 *)v439[8], (__int128 *)v439[9], 0xAAAAAAAAAAAAAAABLL * ((v439[9] - v439[8]) >> 3));
  sub_23F4((int)v555, "Threadgroup Memory L1 Store Bandwidth");
  unint64_t v441 = (uint64_t *)sub_24C8((uint64_t)v555, 0xFu, 3LL, (uint64_t)sub_4EE38);
  __int128 v442 = sub_2684(v441, "Memory Bandwidth");
  uint64_t v443 = sub_2684(v442, "Internal Memory Bandwidth");
  v444 = sub_2684(v443, "One Pass");
  __int128 v445 = *(_OWORD *)v444;
  int v1088 = *((_DWORD *)v444 + 4);
  __int128 v1087 = v445;
  sub_41004((uint64_t)&v1089, (uint64_t)(v444 + 3));
  memset(v1090, 0, sizeof(v1090));
  sub_6B58((char *)v1090, (__int128 *)v444[8], (__int128 *)v444[9], 0xAAAAAAAAAAAAAAABLL * ((v444[9] - v444[8]) >> 3));
  sub_23F4((int)v554, "Imageblock L1 Load Bandwidth");
  int v446 = (uint64_t *)sub_24C8((uint64_t)v554, 0xFu, 3LL, (uint64_t)sub_4EEB4);
  unsigned int v447 = sub_2684(v446, "Memory Bandwidth");
  __int128 v448 = sub_2684(v447, "Internal Memory Bandwidth");
  int v449 = sub_2684(v448, "One Pass");
  __int128 v450 = *(_OWORD *)v449;
  int v1092 = *((_DWORD *)v449 + 4);
  __int128 v1091 = v450;
  sub_41004((uint64_t)&v1093, (uint64_t)(v449 + 3));
  memset(v1094, 0, sizeof(v1094));
  sub_6B58((char *)v1094, (__int128 *)v449[8], (__int128 *)v449[9], 0xAAAAAAAAAAAAAAABLL * ((v449[9] - v449[8]) >> 3));
  sub_23F4((int)v553, "Imageblock L1 Store Bandwidth");
  __int128 v451 = (uint64_t *)sub_24C8((uint64_t)v553, 0xFu, 3LL, (uint64_t)sub_4EF58);
  int v452 = sub_2684(v451, "Memory Bandwidth");
  unint64_t v453 = sub_2684(v452, "Internal Memory Bandwidth");
  __int128 v454 = sub_2684(v453, "One Pass");
  __int128 v455 = *(_OWORD *)v454;
  int v1096 = *((_DWORD *)v454 + 4);
  __int128 v1095 = v455;
  sub_41004((uint64_t)&v1097, (uint64_t)(v454 + 3));
  memset(v1098, 0, sizeof(v1098));
  sub_6B58((char *)v1098, (__int128 *)v454[8], (__int128 *)v454[9], 0xAAAAAAAAAAAAAAABLL * ((v454[9] - v454[8]) >> 3));
  sub_23F4((int)v552, "Raytracing Scratch L1 Load Bandwidth");
  v456 = (uint64_t *)sub_24C8((uint64_t)v552, 0xFu, 3LL, (uint64_t)sub_4EFFC);
  __int128 v457 = sub_2684(v456, "Memory Bandwidth");
  uint64_t v458 = sub_2684(v457, "Internal Memory Bandwidth");
  uint64_t v459 = sub_2684(v458, "One Pass");
  __int128 v460 = *(_OWORD *)v459;
  int v1100 = *((_DWORD *)v459 + 4);
  __int128 v1099 = v460;
  sub_41004((uint64_t)&v1101, (uint64_t)(v459 + 3));
  memset(v1102, 0, sizeof(v1102));
  sub_6B58((char *)v1102, (__int128 *)v459[8], (__int128 *)v459[9], 0xAAAAAAAAAAAAAAABLL * ((v459[9] - v459[8]) >> 3));
  sub_23F4((int)v551, "Raytracing Scratch L1 Store Bandwidth");
  double v461 = (uint64_t *)sub_24C8((uint64_t)v551, 0xFu, 3LL, (uint64_t)sub_4F078);
  double v462 = sub_2684(v461, "Memory Bandwidth");
  __int128 v463 = sub_2684(v462, "Internal Memory Bandwidth");
  uint64_t v464 = sub_2684(v463, "One Pass");
  __int128 v465 = *(_OWORD *)v464;
  int v1104 = *((_DWORD *)v464 + 4);
  __int128 v1103 = v465;
  sub_41004((uint64_t)&v1105, (uint64_t)(v464 + 3));
  memset(v1106, 0, sizeof(v1106));
  sub_6B58((char *)v1106, (__int128 *)v464[8], (__int128 *)v464[9], 0xAAAAAAAAAAAAAAABLL * ((v464[9] - v464[8]) >> 3));
  sub_23F4((int)v550, "Other L1 Load Bandwidth");
  __int128 v466 = (uint64_t *)sub_24C8((uint64_t)v550, 0xFu, 3LL, (uint64_t)sub_4F0F4);
  unint64_t v467 = sub_2684(v466, "Memory Bandwidth");
  double v468 = sub_2684(v467, "Internal Memory Bandwidth");
  __int128 v469 = sub_2684(v468, "One Pass");
  __int128 v470 = *(_OWORD *)v469;
  int v1108 = *((_DWORD *)v469 + 4);
  __int128 v1107 = v470;
  sub_41004((uint64_t)&v1109, (uint64_t)(v469 + 3));
  memset(v1110, 0, sizeof(v1110));
  sub_6B58((char *)v1110, (__int128 *)v469[8], (__int128 *)v469[9], 0xAAAAAAAAAAAAAAABLL * ((v469[9] - v469[8]) >> 3));
  sub_23F4((int)v549, "Other L1 Store Bandwidth");
  unsigned int v471 = (uint64_t *)sub_24C8((uint64_t)v549, 0xFu, 3LL, (uint64_t)sub_4F198);
  __int128 v472 = sub_2684(v471, "Memory Bandwidth");
  double v473 = sub_2684(v472, "Internal Memory Bandwidth");
  int v474 = sub_2684(v473, "One Pass");
  __int128 v475 = *(_OWORD *)v474;
  int v1112 = *((_DWORD *)v474 + 4);
  __int128 v1111 = v475;
  sub_41004((uint64_t)&v1113, (uint64_t)(v474 + 3));
  memset(v1114, 0, sizeof(v1114));
  sub_6B58((char *)v1114, (__int128 *)v474[8], (__int128 *)v474[9], 0xAAAAAAAAAAAAAAABLL * ((v474[9] - v474[8]) >> 3));
  sub_23F4((int)v548, "GPR L1 Load Bandwidth");
  int v476 = (uint64_t *)sub_24C8((uint64_t)v548, 0xFu, 3LL, (uint64_t)sub_4F23C);
  int v477 = sub_2684(v476, "Memory Bandwidth");
  __int128 v478 = sub_2684(v477, "Internal Memory Bandwidth");
  double v479 = sub_2684(v478, "One Pass");
  __int128 v480 = *(_OWORD *)v479;
  int v1116 = *((_DWORD *)v479 + 4);
  __int128 v1115 = v480;
  sub_41004((uint64_t)&v1117, (uint64_t)(v479 + 3));
  memset(v1118, 0, sizeof(v1118));
  sub_6B58((char *)v1118, (__int128 *)v479[8], (__int128 *)v479[9], 0xAAAAAAAAAAAAAAABLL * ((v479[9] - v479[8]) >> 3));
  sub_23F4((int)v547, "GPR L1 Store Bandwidth");
  __int128 v481 = (uint64_t *)sub_24C8((uint64_t)v547, 0xFu, 3LL, (uint64_t)sub_4F2B8);
  unint64_t v482 = sub_2684(v481, "Memory Bandwidth");
  double v483 = sub_2684(v482, "Internal Memory Bandwidth");
  __int128 v484 = sub_2684(v483, "One Pass");
  __int128 v485 = *(_OWORD *)v484;
  int v1120 = *((_DWORD *)v484 + 4);
  __int128 v1119 = v485;
  sub_41004((uint64_t)&v1121, (uint64_t)(v484 + 3));
  memset(v1122, 0, sizeof(v1122));
  sub_6B58((char *)v1122, (__int128 *)v484[8], (__int128 *)v484[9], 0xAAAAAAAAAAAAAAABLL * ((v484[9] - v484[8]) >> 3));
  sub_23F4((int)v546, "Stack L1 Load Bandwidth");
  double v486 = (uint64_t *)sub_24C8((uint64_t)v546, 0xFu, 3LL, (uint64_t)sub_4F334);
  __int128 v487 = sub_2684(v486, "Memory Bandwidth");
  int v488 = sub_2684(v487, "Internal Memory Bandwidth");
  int v489 = sub_2684(v488, "One Pass");
  __int128 v490 = *(_OWORD *)v489;
  int v1124 = *((_DWORD *)v489 + 4);
  __int128 v1123 = v490;
  sub_41004((uint64_t)&v1125, (uint64_t)(v489 + 3));
  memset(v1126, 0, sizeof(v1126));
  sub_6B58((char *)v1126, (__int128 *)v489[8], (__int128 *)v489[9], 0xAAAAAAAAAAAAAAABLL * ((v489[9] - v489[8]) >> 3));
  sub_23F4((int)v545, "Stack L1 Store Bandwidth");
  unint64_t v491 = (uint64_t *)sub_24C8((uint64_t)v545, 0xFu, 3LL, (uint64_t)sub_4F3B0);
  unint64_t v492 = sub_2684(v491, "Memory Bandwidth");
  __int128 v493 = sub_2684(v492, "Internal Memory Bandwidth");
  int v494 = sub_2684(v493, "One Pass");
  __int128 v495 = *(_OWORD *)v494;
  int v1128 = *((_DWORD *)v494 + 4);
  __int128 v1127 = v495;
  sub_41004((uint64_t)&v1129, (uint64_t)(v494 + 3));
  memset(v1130, 0, sizeof(v1130));
  sub_6B58((char *)v1130, (__int128 *)v494[8], (__int128 *)v494[9], 0xAAAAAAAAAAAAAAABLL * ((v494[9] - v494[8]) >> 3));
  sub_23F4((int)v544, "Buffer L1 Load Bandwidth");
  __int128 v496 = (uint64_t *)sub_24C8((uint64_t)v544, 0xFu, 3LL, (uint64_t)sub_4F42C);
  int v497 = sub_2684(v496, "Memory Bandwidth");
  int v498 = sub_2684(v497, "Internal Memory Bandwidth");
  __int128 v499 = sub_2684(v498, "One Pass");
  __int128 v500 = *(_OWORD *)v499;
  int v1132 = *((_DWORD *)v499 + 4);
  __int128 v1131 = v500;
  sub_41004((uint64_t)&v1133, (uint64_t)(v499 + 3));
  memset(v1134, 0, sizeof(v1134));
  sub_6B58((char *)v1134, (__int128 *)v499[8], (__int128 *)v499[9], 0xAAAAAAAAAAAAAAABLL * ((v499[9] - v499[8]) >> 3));
  sub_23F4((int)v543, "Buffer L1 Store Bandwidth");
  int v501 = (uint64_t *)sub_24C8((uint64_t)v543, 0xFu, 3LL, (uint64_t)sub_4F4A8);
  __int128 v502 = sub_2684(v501, "Memory Bandwidth");
  char v503 = sub_2684(v502, "Internal Memory Bandwidth");
  char v504 = sub_2684(v503, "One Pass");
  __int128 v505 = *(_OWORD *)v504;
  int v1136 = *((_DWORD *)v504 + 4);
  __int128 v1135 = v505;
  sub_41004((uint64_t)&v1137, (uint64_t)(v504 + 3));
  memset(v1138, 0, sizeof(v1138));
  sub_6B58((char *)v1138, (__int128 *)v504[8], (__int128 *)v504[9], 0xAAAAAAAAAAAAAAABLL * ((v504[9] - v504[8]) >> 3));
  sub_23F4((int)v542, "Raytracing Active");
  int v506 = (uint64_t *)sub_24C8((uint64_t)v542, 0xFu, 3LL, (uint64_t)sub_4F524);
  unint64_t v507 = sub_2684(v506, "Raytracing Limiters");
  __int128 v508 = sub_2684(v507, "One Pass");
  __int128 v509 = *(_OWORD *)v508;
  int v1140 = *((_DWORD *)v508 + 4);
  __int128 v1139 = v509;
  sub_41004((uint64_t)&v1141, (uint64_t)(v508 + 3));
  memset(v1142, 0, sizeof(v1142));
  sub_6B58((char *)v1142, (__int128 *)v508[8], (__int128 *)v508[9], 0xAAAAAAAAAAAAAAABLL * ((v508[9] - v508[8]) >> 3));
  sub_23F4((int)v541, "Raytracing Active GT");
  uint64_t v510 = (uint64_t *)sub_24C8((uint64_t)v541, 0xFu, 3LL, (uint64_t)sub_4F574);
  __int128 v511 = sub_2684(v510, "One Pass GT");
  __int128 v512 = *(_OWORD *)v511;
  int v1144 = *((_DWORD *)v511 + 4);
  __int128 v1143 = v512;
  sub_41004((uint64_t)&v1145, (uint64_t)(v511 + 3));
  memset(v1146, 0, sizeof(v1146));
  sub_6B58((char *)v1146, (__int128 *)v511[8], (__int128 *)v511[9], 0xAAAAAAAAAAAAAAABLL * ((v511[9] - v511[8]) >> 3));
  sub_23F4((int)v540, "Ray Occupancy");
  double v513 = (uint64_t *)sub_24C8((uint64_t)v540, 0xFu, 3LL, (uint64_t)sub_4F644);
  __int128 v514 = sub_2684(v513, "Raytracing Limiters");
  char v515 = sub_2684(v514, "One Pass");
  __int128 v516 = *(_OWORD *)v515;
  int v1148 = *((_DWORD *)v515 + 4);
  __int128 v1147 = v516;
  sub_41004((uint64_t)&v1149, (uint64_t)(v515 + 3));
  memset(v1150, 0, sizeof(v1150));
  sub_6B58((char *)v1150, (__int128 *)v515[8], (__int128 *)v515[9], 0xAAAAAAAAAAAAAAABLL * ((v515[9] - v515[8]) >> 3));
  sub_23F4((int)v539, "Leaf Test Occupancy");
  __int128 v517 = (uint64_t *)sub_24C8((uint64_t)v539, 0xFu, 3LL, (uint64_t)sub_4F740);
  unsigned int v518 = sub_2684(v517, "Raytracing Limiters");
  unsigned int v519 = sub_2684(v518, "One Pass");
  __int128 v520 = *(_OWORD *)v519;
  int v1152 = *((_DWORD *)v519 + 4);
  __int128 v1151 = v520;
  sub_41004((uint64_t)&v1153, (uint64_t)(v519 + 3));
  memset(v1154, 0, sizeof(v1154));
  sub_6B58((char *)v1154, (__int128 *)v519[8], (__int128 *)v519[9], 0xAAAAAAAAAAAAAAABLL * ((v519[9] - v519[8]) >> 3));
  sub_23F4((int)v538, "Raytracing Node Test");
  unsigned int v521 = (uint64_t *)sub_24C8((uint64_t)v538, 0xFu, 3LL, (uint64_t)sub_4F83C);
  v522 = sub_2684(v521, "Raytracing");
  __int128 v523 = sub_2684(v522, "One Pass");
  __int128 v524 = *(_OWORD *)v523;
  int v1156 = *((_DWORD *)v523 + 4);
  __int128 v1155 = v524;
  sub_41004((uint64_t)&v1157, (uint64_t)(v523 + 3));
  memset(v1158, 0, sizeof(v1158));
  sub_6B58((char *)v1158, (__int128 *)v523[8], (__int128 *)v523[9], 0xAAAAAAAAAAAAAAABLL * ((v523[9] - v523[8]) >> 3));
  sub_23F4((int)v537, "Ray T Leaf Test");
  int v525 = (uint64_t *)sub_24C8((uint64_t)v537, 0xFu, 3LL, (uint64_t)sub_4F864);
  __int128 v526 = sub_2684(v525, "Raytracing");
  double v527 = sub_2684(v526, "One Pass");
  __int128 v528 = *(_OWORD *)v527;
  int v1160 = *((_DWORD *)v527 + 4);
  __int128 v1159 = v528;
  sub_41004((uint64_t)&v1161, (uint64_t)(v527 + 3));
  memset(v1162, 0, sizeof(v1162));
  sub_6B58((char *)v1162, (__int128 *)v527[8], (__int128 *)v527[9], 0xAAAAAAAAAAAAAAABLL * ((v527[9] - v527[8]) >> 3));
  sub_23F4((int)&v536, "Intersect Ray Threads");
  __int128 v529 = (uint64_t *)sub_24C8((uint64_t)&v536, 0xFu, 3LL, (uint64_t)sub_4F88C);
  int v530 = sub_2684(v529, "Raytracing");
  double v531 = sub_2684(v530, "One Pass");
  __int128 v532 = *(_OWORD *)v531;
  int v1164 = *((_DWORD *)v531 + 4);
  __int128 v1163 = v532;
  sub_41004((uint64_t)&v1165, (uint64_t)(v531 + 3));
  memset(v1166, 0, sizeof(v1166));
  sub_6B58((char *)v1166, (__int128 *)v531[8], (__int128 *)v531[9], 0xAAAAAAAAAAAAAAABLL * ((v531[9] - v531[8]) >> 3));
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  v661[11] = a1;
  char v662 = 0;
  char v533 = (char *)operator new(0x2B50uLL);
  *a1 = v533;
  a1[1] = v533;
  a1[2] = v533 + 11088;
  uint64_t v534 = 0LL;
  a1[1] = sub_4129C((uint64_t)(a1 + 2), (uint64_t)&v663, (uint64_t)&v1167, (uint64_t)v533);
  do
  {
    sub_2468((char *)&v1163 + v534);
    v534 -= 88LL;
  }

  while (v534 != -11088);
  sub_2468(&v536);
  sub_2468(v537);
  sub_2468(v538);
  sub_2468(v539);
  sub_2468(v540);
  sub_2468(v541);
  sub_2468(v542);
  sub_2468(v543);
  sub_2468(v544);
  sub_2468(v545);
  sub_2468(v546);
  sub_2468(v547);
  sub_2468(v548);
  sub_2468(v549);
  sub_2468(v550);
  sub_2468(v551);
  sub_2468(v552);
  sub_2468(v553);
  sub_2468(v554);
  sub_2468(v555);
  sub_2468(v556);
  sub_2468(v557);
  sub_2468(v558);
  sub_2468(v559);
  sub_2468(v560);
  sub_2468(v561);
  sub_2468(v562);
  sub_2468(v563);
  sub_2468(v564);
  sub_2468(v565);
  sub_2468(v566);
  sub_2468(v567);
  sub_2468(v568);
  sub_2468(v569);
  sub_2468(v570);
  sub_2468(v571);
  sub_2468(v572);
  sub_2468(v573);
  sub_2468(v574);
  sub_2468(v575);
  sub_2468(v576);
  sub_2468(v577);
  sub_2468(v578);
  sub_2468(v579);
  sub_2468(v580);
  sub_2468(v581);
  sub_2468(v582);
  sub_2468(v583);
  sub_2468(v584);
  sub_2468(v585);
  sub_2468(v586);
  sub_2468(v587);
  sub_2468(v588);
  sub_2468(v589);
  sub_2468(v590);
  sub_2468(v591);
  sub_2468(v592);
  sub_2468(v593);
  sub_2468(v594);
  sub_2468(v595);
  sub_2468(v596);
  sub_2468(v597);
  sub_2468(v598);
  sub_2468(v599);
  sub_2468(v600);
  sub_2468(v601);
  sub_2468(v602);
  sub_2468(v603);
  sub_2468(v604);
  sub_2468(v605);
  sub_2468(v606);
  sub_2468(v607);
  sub_2468(v608);
  sub_2468(v609);
  sub_2468(v610);
  sub_2468(v611);
  sub_2468(v612);
  sub_2468(v613);
  sub_2468(v614);
  sub_2468(v615);
  sub_2468(v616);
  sub_2468(v617);
  sub_2468(v618);
  sub_2468(v619);
  sub_2468(v620);
  sub_2468(v621);
  sub_2468(v622);
  sub_2468(v623);
  sub_2468(v624);
  sub_2468(v625);
  sub_2468(v626);
  sub_2468(v627);
  sub_2468(v628);
  sub_2468(v629);
  sub_2468(v630);
  sub_2468(v631);
  sub_2468(v632);
  sub_2468(v633);
  sub_2468(v634);
  sub_2468(v635);
  sub_2468(v636);
  sub_2468(v637);
  sub_2468(v638);
  sub_2468(v639);
  sub_2468(v640);
  sub_2468(v641);
  sub_2468(v642);
  sub_2468(v643);
  sub_2468(v644);
  sub_2468(v645);
  sub_2468(v646);
  sub_2468(v647);
  sub_2468(v648);
  sub_2468(v649);
  sub_2468(v650);
  sub_2468(v651);
  sub_2468(v652);
  sub_2468(v653);
  sub_2468(v654);
  sub_2468(v655);
  sub_2468(v656);
  sub_2468(v657);
  sub_2468(v658);
  sub_2468(v659);
  sub_2468(v660);
  return sub_2468(v661);
}

void sub_479A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, char a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v65 + 8) = v66;
  sub_981C((void ***)&STACK[0x2B50]);
  uint64_t v68 = -11088LL;
  uint64_t v69 = v64;
  do
  {
    uint64_t v69 = sub_2468(v69) - 88;
    v68 += 88LL;
  }

  while (v68);
  sub_2468(&a9);
  sub_2468(&a20);
  sub_2468(&a31);
  sub_2468(&a42);
  sub_2468(&a53);
  sub_2468(&a64);
  sub_2468(&STACK[0x210]);
  sub_2468(&STACK[0x268]);
  sub_2468(&STACK[0x2C0]);
  sub_2468(&STACK[0x318]);
  sub_2468(&STACK[0x370]);
  sub_2468(&STACK[0x3C8]);
  sub_2468(&STACK[0x420]);
  sub_2468(&STACK[0x478]);
  sub_2468(&STACK[0x4D0]);
  sub_2468(&STACK[0x528]);
  sub_2468(&STACK[0x580]);
  sub_2468(&STACK[0x5D8]);
  sub_2468(&STACK[0x630]);
  sub_2468(&STACK[0x688]);
  sub_2468(&STACK[0x6E0]);
  sub_2468(&STACK[0x738]);
  sub_2468(&STACK[0x790]);
  sub_2468(&STACK[0x7E8]);
  sub_2468(&STACK[0x840]);
  sub_2468(&STACK[0x898]);
  sub_2468(&STACK[0x8F0]);
  sub_2468(&STACK[0x948]);
  sub_2468(&STACK[0x9A0]);
  sub_2468(&STACK[0x9F8]);
  sub_2468(&STACK[0xA50]);
  sub_2468(&STACK[0xAA8]);
  sub_2468(&STACK[0xB00]);
  sub_2468(&STACK[0xB58]);
  sub_2468(&STACK[0xBB0]);
  sub_2468(&STACK[0xC08]);
  sub_2468(&STACK[0xC60]);
  sub_2468(&STACK[0xCB8]);
  sub_2468(&STACK[0xD10]);
  sub_2468(&STACK[0xD68]);
  sub_2468(&STACK[0xDC0]);
  sub_2468(&STACK[0xE18]);
  sub_2468(&STACK[0xE70]);
  sub_2468(&STACK[0xEC8]);
  sub_2468(&STACK[0xF20]);
  sub_2468(&STACK[0xF78]);
  sub_2468(&STACK[0xFD0]);
  sub_2468(&STACK[0x1028]);
  sub_2468(&STACK[0x1080]);
  sub_2468(&STACK[0x10D8]);
  sub_2468(&STACK[0x1130]);
  sub_2468(&STACK[0x1188]);
  sub_2468(&STACK[0x11E0]);
  sub_2468(&STACK[0x1238]);
  sub_2468(&STACK[0x1290]);
  sub_2468(&STACK[0x12E8]);
  sub_2468(&STACK[0x1340]);
  sub_2468(&STACK[0x1398]);
  sub_2468(&STACK[0x13F0]);
  sub_2468(&STACK[0x1448]);
  sub_2468(&STACK[0x14A0]);
  sub_2468(&STACK[0x14F8]);
  sub_2468(&STACK[0x1550]);
  sub_2468(&STACK[0x15A8]);
  sub_2468(&STACK[0x1600]);
  sub_2468(&STACK[0x1658]);
  sub_2468(&STACK[0x16B0]);
  sub_2468(&STACK[0x1708]);
  sub_2468(&STACK[0x1760]);
  sub_2468(&STACK[0x17B8]);
  sub_2468(&STACK[0x1810]);
  sub_2468(&STACK[0x1868]);
  sub_2468(&STACK[0x18C0]);
  sub_2468(&STACK[0x1918]);
  sub_2468(&STACK[0x1970]);
  sub_2468(&STACK[0x19C8]);
  sub_2468(&STACK[0x1A20]);
  sub_2468(&STACK[0x1A78]);
  sub_2468(&STACK[0x1AD0]);
  sub_2468(&STACK[0x1B28]);
  sub_2468(&STACK[0x1B80]);
  sub_2468(&STACK[0x1BD8]);
  sub_2468(&STACK[0x1C30]);
  sub_2468(&STACK[0x1C88]);
  sub_2468(&STACK[0x1CE0]);
  sub_2468(&STACK[0x1D38]);
  sub_2468(&STACK[0x1D90]);
  sub_2468(&STACK[0x1DE8]);
  sub_2468(&STACK[0x1E40]);
  sub_2468(&STACK[0x1E98]);
  sub_2468(&STACK[0x1EF0]);
  sub_2468(&STACK[0x1F48]);
  sub_2468(&STACK[0x1FA0]);
  sub_2468(&STACK[0x1FF8]);
  sub_2468(&STACK[0x2050]);
  sub_2468(&STACK[0x20A8]);
  sub_2468(&STACK[0x2100]);
  sub_2468(&STACK[0x2158]);
  sub_2468(&STACK[0x21B0]);
  sub_2468(&STACK[0x2208]);
  sub_2468(&STACK[0x2260]);
  sub_2468(&STACK[0x22B8]);
  sub_2468(&STACK[0x2310]);
  sub_2468(&STACK[0x2368]);
  sub_2468(&STACK[0x23C0]);
  sub_2468(&STACK[0x2418]);
  sub_2468(&STACK[0x2470]);
  sub_2468(&STACK[0x24C8]);
  sub_2468(&STACK[0x2520]);
  sub_2468(&STACK[0x2578]);
  sub_2468(&STACK[0x25D0]);
  sub_2468(&STACK[0x2628]);
  sub_2468(&STACK[0x2680]);
  sub_2468(&STACK[0x26D8]);
  sub_2468(&STACK[0x2730]);
  sub_2468(&STACK[0x2788]);
  sub_2468(&STACK[0x27E0]);
  sub_2468(&STACK[0x2838]);
  sub_2468(&STACK[0x2890]);
  sub_2468(&STACK[0x28E8]);
  sub_2468(&STACK[0x2940]);
  sub_2468(&STACK[0x2998]);
  sub_2468(&STACK[0x29F0]);
  sub_2468(&STACK[0x2A48]);
  sub_2468(&STACK[0x2AA0]);
  sub_2468(&STACK[0x2AF8]);
  _Unwind_Resume(a1);
}

uint64_t sub_48F14( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "D36BDC945E9A3C2158D269457AE35CC5AD63543965D991AB68A2CC0556E31D50");
  unsigned int v8 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_129_99");
  uint64_t v10 = v9;
  unsigned int v11 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_131_101");
  LODWORD(a4) = sub_9B1C(v8, v10, v11);
  uint64_t v13 = v12;
  unsigned int v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v15 = sub_9D9C(a4, v13, v14);
  size_t v17 = sub_E1D0(v7, v15, v16);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
}

int *sub_49010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  __int128 v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "L1 GPR Bytes Occupancy");
  int v6 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_130_100");
  return sub_FC4C(v5, v6, v7);
}

uint64_t sub_49074( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "FD406D36CD5763CFC9F0DD6C37C7BDC528ADF3990CF9725229F4258C1758C94D");
  unsigned int v8 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_129_99");
  uint64_t v10 = v9;
  unsigned int v11 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_131_101");
  LODWORD(a4) = sub_9B1C(v8, v10, v11);
  uint64_t v13 = v12;
  unsigned int v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v15 = sub_9D9C(a4, v13, v14);
  size_t v17 = sub_E1D0(v7, v15, v16);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
}

int *sub_49170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  __int128 v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "L1 Buffer Bytes Occupancy");
  int v6 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_130_100");
  return sub_FC4C(v5, v6, v7);
}

uint64_t sub_491D4( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "353FBA19946FC52BCED9C06F6EE4844496369F4985110F6E78E467505E48C88F");
  unsigned int v8 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_129_99");
  uint64_t v10 = v9;
  unsigned int v11 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_131_101");
  LODWORD(a4) = sub_9B1C(v8, v10, v11);
  uint64_t v13 = v12;
  unsigned int v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v15 = sub_9D9C(a4, v13, v14);
  size_t v17 = sub_E1D0(v7, v15, v16);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
}

int *sub_492D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  __int128 v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "L1 Raytracing Scratch Bytes Occupancy");
  int v6 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_130_100");
  return sub_FC4C(v5, v6, v7);
}

uint64_t sub_49334( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "E9FDDF0E4E3D3ABB4D40C135F207C0310E5BE4CCF2EC1099CB89594DD756B745");
  unsigned int v8 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_129_99");
  uint64_t v10 = v9;
  unsigned int v11 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_131_101");
  LODWORD(a4) = sub_9B1C(v8, v10, v11);
  uint64_t v13 = v12;
  unsigned int v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v15 = sub_9D9C(a4, v13, v14);
  size_t v17 = sub_E1D0(v7, v15, v16);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
}

int *sub_49430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  __int128 v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "L1 Stack Bytes Occupancy");
  int v6 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_130_100");
  return sub_FC4C(v5, v6, v7);
}

uint64_t sub_49494( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "53E08B2D38CDBBC0D198B95302BCC632B50E773651E9BA4C57373B002114CBBC");
  unsigned int v8 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_129_99");
  uint64_t v10 = v9;
  unsigned int v11 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_131_101");
  LODWORD(a4) = sub_9B1C(v8, v10, v11);
  uint64_t v13 = v12;
  unsigned int v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v15 = sub_9D9C(a4, v13, v14);
  size_t v17 = sub_E1D0(v7, v15, v16);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
}

int *sub_49590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  __int128 v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "L1 Threadgroup Bytes Occupancy");
  int v6 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_130_100");
  return sub_FC4C(v5, v6, v7);
}

uint64_t sub_495F4( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "244B94B5F2129A5A0083F3661EAC9C6B9EB5FB62A499E6ED236452F5BE6828F5");
  unsigned int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "972B60C198C39199A11F25454037CADA381BB118BE18D850A36534F88A82B7F1");
  uint64_t v9 = sub_A18C(v7, v8);
  unsigned int v10 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_129_99");
  uint64_t v12 = v11;
  unsigned int v13 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_131_101");
  LODWORD(a4) = sub_9B1C(v10, v12, v13);
  uint64_t v15 = v14;
  unsigned int v16 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v17 = sub_9D9C(a4, v15, v16);
  __int128 v19 = sub_E1D0(v9, v17, v18);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v19);
}

int *sub_49718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  __int128 v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "L1 Imageblock Bytes Occupancy");
  int v6 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_130_100");
  return sub_FC4C(v5, v6, v7);
}

uint64_t sub_4977C( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "5537928133BBD235A03487186F42FBFF9D0FC45873C83FD5219EB5EBF500ED10");
  unsigned int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "19FCC75261554C74A79C9151422F265347FC6282808C4BB8E9627195837B3682");
  uint64_t v9 = sub_A18C(v7, v8);
  unsigned int v10 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_129_99");
  uint64_t v12 = v11;
  unsigned int v13 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_131_101");
  LODWORD(a4) = sub_9B1C(v10, v12, v13);
  uint64_t v15 = v14;
  unsigned int v16 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v17 = sub_9D9C(a4, v15, v16);
  __int128 v19 = sub_E1D0(v9, v17, v18);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v19);
}

int *sub_498A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  __int128 v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "L1 Other Bytes Occupancy");
  int v6 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_130_100");
  return sub_FC4C(v5, v6, v7);
}

int *sub_49904(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "L1 GPR Bytes Occupancy");
  __int128 v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "L1 Buffer Bytes Occupancy");
  __int128 v5 = sub_A18C(v3, v4);
  int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "L1 Raytracing Scratch Bytes Occupancy");
  unint64_t v7 = sub_A18C(v5, v6);
  unsigned int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "L1 Stack Bytes Occupancy");
  uint64_t v9 = sub_A18C(v7, v8);
  unsigned int v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "L1 Threadgroup Bytes Occupancy");
  uint64_t v11 = sub_A18C(v9, v10);
  uint64_t v12 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "L1 Imageblock Bytes Occupancy");
  unsigned int v13 = sub_A18C(v11, v12);
  uint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "L1 Other Bytes Occupancy");
  return sub_A18C(v13, v14);
}

int *sub_49A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  __int128 v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "L1 Total Bytes Occupancy");
  int v6 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_130_100");
  return sub_FC4C(v5, v6, v7);
}

int *sub_49A88( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, char *))(*(void *)a2 + 16LL))(a2, kAGXPSCounterGPUCycles);
  int v8 = (**a3)(a3, kAGXPSCounterConstantOccupancyManagerEvalWindow);
  unsigned int v10 = sub_FC4C(v7, v8, v9);
  uint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "EC02EE62A95DE2B0B2BC9C65A400E1318CFD7FFA894EECC7B23F8FB164A10C08");
  uint64_t v12 = sub_ED24(v11, v10);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_137_107");
  uint64_t v14 = v13;
  unsigned int v15 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  LODWORD(a3) = sub_9B1C(a4, v14, v15);
  unint64_t v17 = v16;
  unint64_t v18 = sub_11840(v12, (int)a3, v16);
  return sub_FC4C(v18, (int)a3, v17);
}

int *sub_49BA0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "5851D9888A5EE313F6D80CC60F6BB6ADFC20BB0BA8D9BED753F04382DF6BED1A");
  __int128 v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "18487C9D7CEF0D61908387ACBCC7316000F44757B4F9C98EA18217C35C6ECF85");
  return sub_ED24(v3, v4);
}

int *sub_49BF8( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "5BA476059E7B48575673F80A8DC1251E26C5B23F5DCF5BCB3AB1251D0D3424E8");
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "D613D0441777617363D2EF9031155D28A493ED4CF2B714C61332BEB8E694A21C");
  unint64_t v9 = sub_A18C(v7, v8);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_133_103");
  uint64_t v11 = v10;
  unsigned int v12 = sub_9ABC();
  LODWORD(a4) = sub_9B1C(a4, v11, v12);
  uint64_t v14 = v13;
  unsigned int v15 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v16 = sub_9D9C(a4, v14, v15);
  unint64_t v18 = sub_E1D0(v9, v16, v17);
  __int128 v19 = (int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v18);
  int v20 = sub_9ABC();
  return sub_11840(v19, v20, v21);
}

int *sub_49D30( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  int variant = agxps_gpu_get_variant(a1);
  int v8 = *(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL);
  if ((variant - 4) > 2)
  {
    __int128 v40 = (int *)v8(a2, "F9F04A751DF32AED42FF9EFB131D3CD40E499AA0A99A68D0DD6778167E42BF26");
    uint64_t v41 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "357D351342C59B72F21BD4580AD1B2F1C4C47D0006AB615A4760BC3BEBD99E48");
    uint64_t v42 = sub_A18C(v40, v41);
    unsigned int v43 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/ DerivedCounters/AGXPSLimiters.cpp_133_103");
    uint64_t v45 = v44;
    unsigned int v46 = sub_9ABC();
    unsigned int v47 = sub_9B1C(v43, v45, v46);
    uint64_t v49 = v48;
    unsigned int v50 = (**a3)(a3, kAGXPSCounterConstantNumCores);
    int v51 = sub_9D9C(v47, v49, v50);
    __int128 v53 = sub_E1D0(v42, v51, v52);
    uint64_t v54 = (int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v53);
    __int128 v55 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "Vertex Shader Launch Utilization");
    __int128 v39 = sub_A18C(v54, v55);
  }

  else
  {
    unint64_t v9 = (int *)v8(a2, "5BA476059E7B48575673F80A8DC1251E26C5B23F5DCF5BCB3AB1251D0D3424E8");
    uint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "F9F04A751DF32AED42FF9EFB131D3CD40E499AA0A99A68D0DD6778167E42BF26");
    uint64_t v11 = sub_A18C(v9, v10);
    unsigned int v12 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/ DerivedCounters/AGXPSLimiters.cpp_133_103");
    uint64_t v14 = v13;
    unsigned int v15 = sub_9ABC();
    unsigned int v16 = sub_9B1C(v12, v14, v15);
    uint64_t v18 = v17;
    unsigned int v19 = (**a3)(a3, kAGXPSCounterConstantNumCores);
    int v20 = sub_9D9C(v16, v18, v19);
    __int128 v22 = sub_E1D0(v11, v20, v21);
    uint64_t v23 = (int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v22);
    uint64_t v24 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "D613D0441777617363D2EF9031155D28A493ED4CF2B714C61332BEB8E694A21C");
    __int128 v25 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "357D351342C59B72F21BD4580AD1B2F1C4C47D0006AB615A4760BC3BEBD99E48");
    uint64_t v26 = sub_A18C(v24, v25);
    unsigned int v27 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/ DerivedCounters/AGXPSLimiters.cpp_133_103");
    uint64_t v29 = v28;
    unsigned int v30 = sub_9ABC();
    unsigned int v31 = sub_9B1C(v27, v29, v30);
    uint64_t v33 = v32;
    unsigned int v34 = (**a3)(a3, kAGXPSCounterConstantNumCores);
    int v35 = sub_9D9C(v31, v33, v34);
    __int128 v37 = sub_E1D0(v26, v35, v36);
    uint64_t v38 = (int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v37);
    __int128 v39 = sub_1249C(v23, v38);
  }

  double v56 = v39;
  int v57 = sub_9ABC();
  return sub_11840(v56, v57, v58);
}

uint64_t sub_4A074( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "92CB5205D6DC7B8CF67306FCBBF4D2E22C50A82E14C323C9869A8154961E1379");
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "87BA80BEA278BCBDE11D4ADFEA6B3C8BEF365D8260CDE3591D5B76B2C36DD853");
  unint64_t v9 = sub_A18C(v7, v8);
  uint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "D2D6A9827703DC8826305F130123DE83C3648F82DCB4F96DFCD7E33EA799BD62");
  uint64_t v11 = sub_A18C(v9, v10);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_134_104");
  uint64_t v13 = v12;
  unsigned int v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v15 = sub_9D9C(a4, v13, v14);
  uint64_t v17 = sub_E1D0(v11, v15, v16);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
}

int *sub_4A18C( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "06E83674FEE3BAEADDA04BCE4F798E64EAF9562959486A334178EFE9614AFE02");
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "CFC88028D48CFFC122779E410D958A0644A7B3219492B8F56805460AE11D3317");
  unint64_t v9 = sub_A18C(v7, v8);
  uint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "C38EE6AA610415ACB3D10D68E346EE868CDB70CFC2F46D887E5E152FD4A256B2");
  uint64_t v11 = sub_A18C(v9, v10);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_135_105");
  uint64_t v13 = v12;
  unsigned int v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v15 = sub_9D9C(a4, v13, v14);
  uint64_t v17 = sub_E1D0(v11, v15, v16);
  uint64_t v18 = (int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
  unsigned int v19 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "Fragment Shader Launch Utilization");
  int v20 = sub_A18C(v18, v19);
  int v21 = sub_9ABC();
  return sub_11840(v20, v21, v22);
}

uint64_t sub_4A2F0( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "98A511FEF2F07DAECD3383521C19383B6DCA2C733FA4611CDFA49CC62B7B5181");
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "51A34CA49D64B984F464BC878382CDD07EEF0B001EBE4F2E95026F21673969A7");
  unint64_t v9 = sub_A18C(v7, v8);
  uint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "83B2F8BA9316B9EFB16E84445A86F4306028A166E21E7B350C8D908E696445FC");
  uint64_t v11 = sub_A18C(v9, v10);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_136_106");
  uint64_t v13 = v12;
  unsigned int v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v15 = sub_9D9C(a4, v13, v14);
  uint64_t v17 = sub_E1D0(v11, v15, v16);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
}

int *sub_4A408( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "98A511FEF2F07DAECD3383521C19383B6DCA2C733FA4611CDFA49CC62B7B5181");
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "AEB4C02667999241FFC01E220B4443963E1B34D3ACD2C5545F5BBE1143870378");
  unint64_t v9 = sub_A18C(v7, v8);
  unsigned int v10 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_136_106");
  uint64_t v12 = v11;
  unsigned int v13 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v14 = sub_9D9C(v10, v12, v13);
  unint64_t v16 = sub_E1D0(v9, v14, v15);
  uint64_t v17 = (int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v16);
  uint64_t v18 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "51A34CA49D64B984F464BC878382CDD07EEF0B001EBE4F2E95026F21673969A7");
  unsigned int v19 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "40A9788933E5BA39796E86A50864B263BC0F2291A4B895C7EA6BBB144E5DACA5");
  int v20 = sub_A18C(v18, v19);
  LODWORD(v12) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingS upport/DerivedCounters/AGXPSLimiters.cpp_136_106");
  uint64_t v22 = v21;
  unsigned int v23 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v24 = sub_9D9C(v12, v22, v23);
  uint64_t v26 = sub_E1D0(v20, v24, v25);
  unsigned int v27 = (int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v26);
  uint64_t v28 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "83B2F8BA9316B9EFB16E84445A86F4306028A166E21E7B350C8D908E696445FC");
  uint64_t v29 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "D469DF7536BAE8E1DE2CB8B3C1E14B4133343771592D97C7BCEC1D03BF0EE40A");
  unsigned int v30 = sub_A18C(v28, v29);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_136_106");
  uint64_t v32 = v31;
  unsigned int v33 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v34 = sub_9D9C(a4, v32, v33);
  unint64_t v36 = sub_E1D0(v30, v34, v35);
  __int128 v37 = (int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v36);
  uint64_t v38 = sub_1249C(v27, v37);
  __int128 v39 = sub_1249C(v17, v38);
  int v40 = sub_9ABC();
  return sub_11840(v39, v40, v41);
}

uint64_t sub_4A6B8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "8751E932723FAB8324B1EFAB05DE911953F94AB079963EC9D4882EC0F853207E");
}

uint64_t sub_4A6D0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "9B37F49C310110FE3C1D0349A0DBD1F4165E5E1873418FE3D8E02DBD2C42360F");
}

uint64_t sub_4A6E8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "ECE8C77FAA463F6CD7C69976F66D170E06AABA1F8EAADE7E5C2EF059C7FD1BC6");
}

int *sub_4A700(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "Vertex Threads Launched");
  __int128 v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "Fragment Threads Launched");
  __int128 v5 = sub_A18C(v3, v4);
  int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "Compute Threads Launched");
  return sub_A18C(v5, v6);
}

uint64_t sub_4A780(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "6EA38ABD760FE83DDB724F359C9F761841C5BD69E5DCCC1C211D42F98751EF80");
}

uint64_t sub_4A798( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_28_0");
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_86_56");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9D9C(a4, v9, v10);
  unsigned int v13 = sub_E1D0(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_4A860(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *))
{
  __int128 v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_29_1");
  int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_30_2");
  unint64_t v7 = sub_A18C(v5, v6);
  unsigned int v8 = (**a3)(a3, kAGXPSCounterConstantNumBanksPerL2);
  uint64_t v10 = v9;
  unsigned int v11 = (**a3)(a3, kAGXPSCounterConstantNumAGCs);
  int v12 = sub_9B1C(v8, v10, v11);
  int v14 = sub_FC4C(v7, v12, v13);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v14);
}

uint64_t sub_4A950(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *))
{
  __int128 v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_29_1");
  unsigned int v6 = (**a3)(a3, kAGXPSCounterConstantNumBanksPerL2);
  uint64_t v8 = v7;
  unsigned int v9 = (**a3)(a3, kAGXPSCounterConstantNumAGCs);
  int v10 = sub_9B1C(v6, v8, v9);
  int v12 = sub_FC4C(v5, v10, v11);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v12);
}

uint64_t sub_4AA18(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *))
{
  __int128 v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_5c5c55d05fb355aa5be61ac63c88eb4a2a521a47dd8f79c18b5c1df163d5cb55");
  unsigned int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_c9bcd5df6397dc8477a12ddf9358bccbbb3d8e52fc3dadab320be9bbb14fe157");
  uint64_t v7 = sub_A18C(v5, v6);
  unsigned int v8 = (**a3)(a3, kAGXPSCounterConstantNumBanksPerL2);
  uint64_t v10 = v9;
  unsigned int v11 = (**a3)(a3, kAGXPSCounterConstantNumAGCs);
  int v12 = sub_9B1C(v8, v10, v11);
  int v14 = sub_FC4C(v7, v12, v13);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v14);
}

uint64_t sub_4AB08(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *))
{
  __int128 v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_5c5c55d05fb355aa5be61ac63c88eb4a2a521a47dd8f79c18b5c1df163d5cb55");
  unsigned int v6 = (**a3)(a3, kAGXPSCounterConstantNumBanksPerL2);
  uint64_t v8 = v7;
  unsigned int v9 = (**a3)(a3, kAGXPSCounterConstantNumAGCs);
  int v10 = sub_9B1C(v6, v8, v9);
  int v12 = sub_FC4C(v5, v10, v11);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v12);
}

int *sub_4ABD0(unsigned int *a1, uint64_t a2, uint64_t (***a3)(void, char *))
{
  unsigned int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "274A1E04D620A2A93E0AAFC7DB5F0BC3A6322D745709FD3011852A7608D0DC59");
  int v7 = sub_9ABC();
  unsigned int v9 = sub_FC4C(v6, v7, v8);
  int v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "E21086636B17AA11D0ECA0545AB90C82D396EB03C6D33A9DE49DEEC71BFEC9A3");
  int v11 = sub_9ABC();
  unint64_t v13 = sub_FC4C(v10, v11, v12);
  int v14 = sub_A18C(v9, v13);
  int v15 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v17 = sub_FC4C(v14, v15, v16);
  uint64_t v18 = (int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
  unsigned int v19 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "L1 Cache Utilization");
  return sub_A18C(v18, v19);
}

uint64_t sub_4AD5C(unsigned int *a1, uint64_t a2, uint64_t (***a3)(void, char *))
{
  unsigned int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "A6C2B5EE1745CD5EB5C81F2B31F5E946A0C1BDC93B226BB05571EFA08555EF8F");
  int v7 = sub_9ABC();
  unsigned int v9 = sub_FC4C(v6, v7, v8);
  int v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "18487C9D7CEF0D61908387ACBCC7316000F44757B4F9C98EA18217C35C6ECF85");
  int v11 = sub_9ABC();
  unint64_t v13 = sub_FC4C(v10, v11, v12);
  int v14 = sub_A18C(v9, v13);
  int v15 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v17 = sub_FC4C(v14, v15, v16);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
}

int *sub_4AEA0( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_224fc5057da0739817ec8947d2fb1ad3ff63c2ceb3fabe0e34719c0eb465d7e9");
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_90_60");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9D9C(a4, v9, v10);
  unint64_t v13 = sub_E1D0(v7, v11, v12);
  int v14 = (int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
  int v15 = sub_9ABC();
  return sub_11840(v14, v15, v16);
}

int *sub_4AF8C( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_31_3");
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_32_4");
  uint64_t v9 = sub_A18C(v7, v8);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_90_60");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v13 = sub_9D9C(a4, v11, v12);
  int v15 = sub_E1D0(v9, v13, v14);
  unint64_t v16 = (int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
  int v17 = sub_9ABC();
  return sub_11840(v16, v17, v18);
}

uint64_t sub_4B0A0( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_31_3");
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_90_60");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9D9C(a4, v9, v10);
  int v13 = sub_E1D0(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

int *sub_4B168(unsigned int *a1, uint64_t a2)
{
  __int128 v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "EED11884758646FD70438F8D2661EC13F25DF1E40EC651E073736D2EFDAB9F0D");
  int v5 = sub_9ABC();
  unint64_t v7 = v6;
  uint64_t v8 = sub_56300(a1, a2);
  uint64_t v9 = sub_13248(v5, v7, v8);
  return sub_ED24(v4, v9);
}

int *sub_4B1E8( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_b39850e6fdaf024c59701c0ee69b15fce7e4f6c92aa385e9920569a6f595745f");
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_92_62");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9D9C(a4, v9, v10);
  int v13 = sub_E1D0(v7, v11, v12);
  unint64_t v14 = (int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
  int v15 = sub_9ABC();
  return sub_11840(v14, v15, v16);
}

int *sub_4B2D4( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_33_5");
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_34_6");
  uint64_t v9 = sub_A18C(v7, v8);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_92_62");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v13 = sub_9D9C(a4, v11, v12);
  int v15 = sub_E1D0(v9, v13, v14);
  unint64_t v16 = (int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
  int v17 = sub_9ABC();
  return sub_11840(v16, v17, v18);
}

uint64_t sub_4B3E8( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_33_5");
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_92_62");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9D9C(a4, v9, v10);
  int v13 = sub_E1D0(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

int *sub_4B4B0(unsigned int *a1, uint64_t a2)
{
  __int128 v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "E01BD71065BD9CE02CFEEC935E09F6DE3C3B9EFAED8F187A533C6321069B4D85");
  int v5 = sub_9ABC();
  unint64_t v7 = v6;
  uint64_t v8 = sub_56300(a1, a2);
  uint64_t v9 = sub_13248(v5, v7, v8);
  return sub_ED24(v4, v9);
}

uint64_t sub_4B530( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_43_15");
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_93_63");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9D9C(a4, v9, v10);
  int v13 = sub_E1D0(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_4B5F8( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_44_16");
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_45_17");
  uint64_t v9 = sub_A18C(v7, v8);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_93_63");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v13 = sub_9D9C(a4, v11, v12);
  int v15 = sub_E1D0(v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_4B6E8( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_44_16");
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_93_63");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9D9C(a4, v9, v10);
  int v13 = sub_E1D0(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

int *sub_4B7B0(unsigned int *a1, uint64_t a2)
{
  __int128 v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "0D32627A10C5DB983D8E5DF466E154001CBB4E945D22A4E280A08C8D0F1701A7");
  int v5 = sub_9ABC();
  unint64_t v7 = v6;
  uint64_t v8 = sub_56300(a1, a2);
  uint64_t v9 = sub_13248(v5, v7, v8);
  return sub_ED24(v4, v9);
}

uint64_t sub_4B830( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_48_20");
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_95_65");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9D9C(a4, v9, v10);
  int v13 = sub_E1D0(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_4B8F8( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_49_21");
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_50_22");
  uint64_t v9 = sub_A18C(v7, v8);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_95_65");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v13 = sub_9D9C(a4, v11, v12);
  int v15 = sub_E1D0(v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_4B9E8( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_49_21");
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_95_65");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9D9C(a4, v9, v10);
  int v13 = sub_E1D0(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

int *sub_4BAB0(unsigned int *a1, uint64_t a2)
{
  __int128 v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "B6C42286FD0AB628E79B9D4F5F10DC31C2DFD460570800BEB5C9E53651363C7D");
  int v5 = sub_9ABC();
  unint64_t v7 = v6;
  uint64_t v8 = sub_56300(a1, a2);
  uint64_t v9 = sub_13248(v5, v7, v8);
  return sub_ED24(v4, v9);
}

uint64_t sub_4BB30(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *))
{
  int v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_51_23");
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_52_24");
  unint64_t v7 = sub_A18C(v5, v6);
  int v8 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  unsigned int v10 = sub_FC4C(v7, v8, v9);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v10);
}

uint64_t sub_4BBE0(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *))
{
  int v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_51_23");
  int v6 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v8 = sub_FC4C(v5, v6, v7);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v8);
}

int *sub_4BC68(unsigned int *a1, uint64_t a2)
{
  __int128 v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_39_11");
  int v5 = sub_9ABC();
  unint64_t v7 = v6;
  int v8 = sub_56300(a1, a2);
  unint64_t v9 = sub_13248(v5, v7, v8);
  return sub_ED24(v4, v9);
}

int *sub_4BCE8(unsigned int *a1, uint64_t a2)
{
  __int128 v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_40_12");
  int v5 = sub_9ABC();
  unint64_t v7 = v6;
  int v8 = sub_56300(a1, a2);
  unint64_t v9 = sub_13248(v5, v7, v8);
  return sub_ED24(v4, v9);
}

int *sub_4BD68(unsigned int *a1, uint64_t a2)
{
  __int128 v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "0AF6A9208DBB7C0C06A19C4C9090BF87CF00BBEE2BDFD9E0C49423DD641C1174");
  int v5 = sub_9ABC();
  unint64_t v7 = v6;
  int v8 = sub_56300(a1, a2);
  unint64_t v9 = sub_13248(v5, v7, v8);
  return sub_ED24(v4, v9);
}

int *sub_4BDE8(unsigned int *a1, uint64_t a2)
{
  __int128 v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "6CFA2D1125EAFC658FDF0E2F1A1B4F8D315296A1AFB116D0A8ECF669C026FF69");
  int v5 = sub_9ABC();
  unint64_t v7 = v6;
  int v8 = sub_56300(a1, a2);
  unint64_t v9 = sub_13248(v5, v7, v8);
  return sub_ED24(v4, v9);
}

int *sub_4BE68(unsigned int *a1, uint64_t a2)
{
  __int128 v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "D1922B4CF1F4DC1E2062378D34EE4E6EAB398BD0417BC95E5EF60C5C1F53E035");
  int v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "DFF91EC9DAE4F9D14485F569D87B6AC75F93DD47C850ACF09E9DD7A3D0EFCE8A");
  unint64_t v6 = sub_A18C(v4, v5);
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unsigned int v10 = sub_56300(a1, a2);
  int v11 = sub_13248(v7, v9, v10);
  return sub_ED24(v6, v11);
}

int *sub_4BF10(unsigned int *a1, uint64_t a2)
{
  __int128 v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "7D8633F6EB10ABA43002BB46D28FA26BFFA1093AB39728908221CE3FD922C72D");
  int v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "8F37B8C186E20EAB68B65FA965112E8C106205370CA0829C3EBD548C49C99A46");
  unint64_t v6 = sub_A18C(v4, v5);
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unsigned int v10 = sub_56300(a1, a2);
  int v11 = sub_13248(v7, v9, v10);
  return sub_ED24(v6, v11);
}

int *sub_4BFB8(unsigned int *a1, uint64_t a2)
{
  __int128 v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "3CCBBD2DBDE74F294638B5661472C6041FD802D082125437CB926C2F4E201182");
  int v5 = sub_9ABC();
  unint64_t v7 = v6;
  unint64_t v8 = sub_56300(a1, a2);
  unint64_t v9 = sub_13248(v5, v7, v8);
  return sub_ED24(v4, v9);
}

int *sub_4C038(unsigned int *a1, uint64_t a2)
{
  __int128 v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "0597494BBDA7FA995805FB01DD8AD6D81CC143C09F8EFB86702288F745E3F791");
  int v5 = sub_9ABC();
  unint64_t v7 = v6;
  unint64_t v8 = sub_56300(a1, a2);
  unint64_t v9 = sub_13248(v5, v7, v8);
  return sub_ED24(v4, v9);
}

int *sub_4C0B8(unsigned int *a1, uint64_t a2)
{
  __int128 v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "3FAA4DE8275531852B39C91E52291523AEA993A6114D2CF7645F7C8AC1EF27CE");
  int v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "11F678510139CFDE77DC68F07F633C61D28564C9B207D45849B5E6AB72B41E0A");
  unint64_t v6 = sub_A18C(v4, v5);
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unsigned int v10 = sub_56300(a1, a2);
  int v11 = sub_13248(v7, v9, v10);
  return sub_ED24(v6, v11);
}

int *sub_4C160(unsigned int *a1, uint64_t a2)
{
  __int128 v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "6FFBFD65F64B0F892C812D9952748E8632E02C4DF155F5E233927E6D0DC88D38");
  int v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "9C397DD48F0AD6AAD1F9B2ABA077E5808FA3D4E452B659013FF3CEC6D1EB1472");
  unint64_t v6 = sub_A18C(v4, v5);
  int v7 = sub_9ABC();
  unint64_t v9 = v8;
  unsigned int v10 = sub_56300(a1, a2);
  int v11 = sub_13248(v7, v9, v10);
  return sub_ED24(v6, v11);
}

uint64_t sub_4C208( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_58_30");
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_57_29");
  unint64_t v9 = sub_A18C(v7, v8);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_117_87");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v13 = sub_9D9C(a4, v11, v12);
  int v15 = sub_E1D0(v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_4C2F8( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_59_31");
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_60_32");
  unint64_t v9 = sub_A18C(v7, v8);
  uint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSup port/DerivedCounters/AGXPSLimiters.cpp_61_33");
  uint64_t v11 = sub_A18C(v9, v10);
  unsigned int v12 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSup port/DerivedCounters/AGXPSLimiters.cpp_62_34");
  int v13 = sub_A18C(v11, v12);
  unint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSup port/DerivedCounters/AGXPSLimiters.cpp_65_37");
  int v15 = sub_A18C(v13, v14);
  unint64_t v16 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSup port/DerivedCounters/AGXPSLimiters.cpp_66_38");
  int v17 = sub_A18C(v15, v16);
  unint64_t v18 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSup port/DerivedCounters/AGXPSLimiters.cpp_63_35");
  unsigned int v19 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSup port/DerivedCounters/AGXPSLimiters.cpp_64_36");
  int v20 = sub_A18C(v18, v19);
  int v21 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_120_90");
  unsigned int v23 = sub_E1D0(v20, v21, v22);
  int v24 = sub_A18C(v17, v23);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_118_88");
  uint64_t v26 = v25;
  unsigned int v27 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v28 = sub_9D9C(a4, v26, v27);
  unsigned int v30 = sub_E1D0(v24, v28, v29);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v30);
}

uint64_t sub_4C50C( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_57_29");
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_117_87");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9D9C(a4, v9, v10);
  int v13 = sub_E1D0(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_4C5D4( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_59_31");
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_61_33");
  uint64_t v9 = sub_A18C(v7, v8);
  unsigned int v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSup port/DerivedCounters/AGXPSLimiters.cpp_65_37");
  int v11 = sub_A18C(v9, v10);
  unint64_t v12 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSup port/DerivedCounters/AGXPSLimiters.cpp_63_35");
  int v13 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_120_90");
  int v15 = sub_E1D0(v12, v13, v14);
  unint64_t v16 = sub_A18C(v11, v15);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_118_88");
  uint64_t v18 = v17;
  unsigned int v19 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v20 = sub_9D9C(a4, v18, v19);
  unint64_t v22 = sub_E1D0(v16, v20, v21);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v22);
}

int *sub_4C748( uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *), uint64_t a5)
{
  uint64_t v9 = (int *)(*a2)[2]( a2,  (int *)"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfil ingSupport/DerivedCounters/AGXPSLimiters.cpp_53_25");
  int v10 = sub_9ABC();
  unint64_t v12 = sub_FC4C(v9, v10, v11);
  uint64_t v13 = (**a2)(a2, v12);
  unint64_t v14 = (int *)(*a2)[2]( a2,  (int *)"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfi lingSupport/DerivedCounters/AGXPSLimiters.cpp_55_27");
  int v15 = sub_9ABC();
  uint64_t v17 = sub_FC4C(v14, v15, v16);
  uint64_t v18 = (**a2)(a2, v17);
  unsigned int v19 = (int *)(*a2)[2]( a2,  (int *)"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfi lingSupport/DerivedCounters/AGXPSLimiters.cpp_54_26");
  int v20 = sub_9ABC();
  unint64_t v22 = sub_FC4C(v19, v20, v21);
  uint64_t v23 = (**a2)(a2, v22);
  int v24 = (int *)(*a2)[2]( a2,  (int *)"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfi lingSupport/DerivedCounters/AGXPSLimiters.cpp_56_28");
  int v25 = sub_9ABC();
  unsigned int v27 = sub_FC4C(v24, v25, v26);
  uint64_t v28 = (**a2)(a2, v27);
  if (!sub_5673C(v13, v18, v23, v28)) {
    return (int *)sub_98F4();
  }
  uint64_t length = agxps_timeseries_get_length(v13);
  unsigned int v30 = (int *)sub_57000(a5, 0, length);
  data = (double *)agxps_timeseries_get_data((uint64_t)v30);
  uint64_t v32 = (double *)agxps_timeseries_get_data(v13);
  unsigned int v33 = (double *)agxps_timeseries_get_data(v18);
  int v34 = (double *)agxps_timeseries_get_data(v23);
  for (uint64_t i = (double *)agxps_timeseries_get_data(v28); length; --length)
  {
    double v36 = *v32++;
    double v37 = v36;
    double v38 = *v33++;
    double v39 = v38;
    double v40 = *v34++;
    double v41 = v40;
    double v42 = *i++;
    double v43 = v42;
    if (v41 < v42) {
      double v41 = v43;
    }
    double v44 = v39 - v37;
    if (v44 < 0.0) {
      double v44 = 0.0;
    }
    if (v39 + v41 <= 1.0) {
      double v44 = 0.0;
    }
    *data++ = fmin(v39 + v41 - v44, 1.0);
  }

  uint64_t v45 = (int *)sub_4C9D4((uint64_t)i, a2, a3, a4);
  return sub_1249C(v30, v45);
}

uint64_t sub_4C9D4( uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  __int128 v4 = a4;
  int v7 = sub_567E4((uint64_t)a2, a4);
  LODWORD(v4) = (**v4)( v4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_117_87");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9D9C(v4, v9, v10);
  uint64_t v13 = sub_E1D0(v7, v11, v12);
  return (**a2)(a2, v13);
}

uint64_t sub_4CA90( uint64_t a1, uint64_t (***a2)(void, int *), uint64_t a3, uint64_t (***a4)(void, const char *))
{
  unint64_t v6 = sub_567E4((uint64_t)a2, a4);
  int v7 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_119_89");
  uint64_t v9 = sub_E1D0(v6, v7, v8);
  return (**a2)(a2, v9);
}

uint64_t sub_4CB08(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *))
{
  int v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "Instructions Executed");
  int v6 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  unint64_t v8 = sub_FC4C(v5, v6, v7);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v8);
}

uint64_t sub_4CB90( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_59_31");
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_60_32");
  uint64_t v9 = sub_A18C(v7, v8);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_111_81");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v13 = sub_9D9C(a4, v11, v12);
  int v15 = sub_E1D0(v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_4CC80( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_59_31");
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_111_81");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9D9C(a4, v9, v10);
  int v13 = sub_E1D0(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_4CD48( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_61_33");
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_62_34");
  uint64_t v9 = sub_A18C(v7, v8);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_112_82");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v13 = sub_9D9C(a4, v11, v12);
  int v15 = sub_E1D0(v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_4CE38( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_61_33");
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_112_82");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9D9C(a4, v9, v10);
  int v13 = sub_E1D0(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_4CF00( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_63_35");
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_64_36");
  uint64_t v9 = sub_A18C(v7, v8);
  int v10 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_113_83");
  unint64_t v12 = sub_E1D0(v9, v10, v11);
  int v13 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v15 = sub_FC4C(v12, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_4CFE8( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_63_35");
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_113_83");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9D9C(a4, v9, v10);
  int v13 = sub_E1D0(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_4D0B0( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_65_37");
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_66_38");
  uint64_t v9 = sub_A18C(v7, v8);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_114_84");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v13 = sub_9D9C(a4, v11, v12);
  int v15 = sub_E1D0(v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_4D1A0( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_65_37");
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_114_84");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9D9C(a4, v9, v10);
  int v13 = sub_E1D0(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_4D268( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_67_39");
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_68_40");
  uint64_t v9 = sub_A18C(v7, v8);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_115_85");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v13 = sub_9D9C(a4, v11, v12);
  int v15 = sub_E1D0(v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_4D358( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_67_39");
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_115_85");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9D9C(a4, v9, v10);
  int v13 = sub_E1D0(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_4D420( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_69_41");
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_70_42");
  uint64_t v9 = sub_A18C(v7, v8);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_116_86");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v13 = sub_9D9C(a4, v11, v12);
  int v15 = sub_E1D0(v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_4D510( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_69_41");
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_116_86");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9D9C(a4, v9, v10);
  int v13 = sub_E1D0(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_4D5D8( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_72_44");
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_71_43");
  uint64_t v9 = sub_A18C(v7, v8);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_121_91");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v13 = sub_9D9C(a4, v11, v12);
  int v15 = sub_E1D0(v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_4D6C8(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *))
{
  int v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_fec93bc804b85a65d152fdd4747b95f2b6633ea518b6bb44a7bc87186198c2a8");
  int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_8922765bce9a86586c4e9f2d8c17967bf71fc42fefdc94b60ac069f686424044");
  unint64_t v7 = sub_A18C(v5, v6);
  int v8 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v10 = sub_FC4C(v7, v8, v9);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v10);
}

uint64_t sub_4D778( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_71_43");
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_121_91");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9D9C(a4, v9, v10);
  int v13 = sub_E1D0(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_4D840( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_eb1b52d1bee0dd7bb1d4f6345a6a34e9d9f75340093e425454be8205d717c2ba");
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_122_92");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9D9C(a4, v9, v10);
  int v13 = sub_E1D0(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_4D908( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_73_45");
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_74_46");
  uint64_t v9 = sub_A18C(v7, v8);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_123_93");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v13 = sub_9D9C(a4, v11, v12);
  int v15 = sub_E1D0(v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_4D9F8( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_7646a8523871192073a29fb3af219f4dbddae3339e969e0da8ef8d84a3d46ec5");
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_123_93");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9D9C(a4, v9, v10);
  int v13 = sub_E1D0(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_4DAC4( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_73_45");
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_123_93");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9D9C(a4, v9, v10);
  int v13 = sub_E1D0(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

int *sub_4DB8C( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *), uint64_t a5)
{
  uint64_t v9 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_ae304fc8bce5708ffef30935687e442d6bea78f814055a5fe6e3380013d7e507");
  int v10 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_125_95");
  unint64_t v12 = sub_E1D0(v9, v10, v11);
  LODWORD(v9) = sub_9ABC();
  uint64_t v14 = v13;
  unsigned int v15 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v16 = sub_9D9C(v9, v14, v15);
  uint64_t v18 = sub_E1D0(v12, v16, v17);
  unsigned int v19 = (int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v18);
  int v20 = sub_9ABC();
  unint64_t v22 = sub_E1D0(v12, v20, v21);
  uint64_t v23 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_d856a24dfeb33f1dad922753efc16618fdf12ef3544115f2f5fffd93affab8d5");
  int v24 = sub_B09C(v22, v23);
  uint64_t length = agxps_timeseries_get_length((uint64_t)v22);
  int datatype = agxps_timeseries_get_datatype((unsigned int *)v22);
  unsigned int v27 = (int *)sub_57000(a5, datatype, length);
  uint64_t v28 = (int *)sub_57000(a5, datatype, length);
  agxps_timeseries_div_tt(v22, v24, v27, 1);
  int v29 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_124_94");
  uint64_t v31 = sub_D670(v29, v30, v27);
  uint64_t v32 = agxps_timeseries_div_tt(v19, v31, v28, 1);
  unsigned int v33 = (int *)sub_4D9F8((uint64_t)v32, a2, a3, a4);
  return sub_10A94(v33, v28);
}

uint64_t sub_4DD7C( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_75_47");
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_76_48");
  uint64_t v9 = sub_A18C(v7, v8);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_126_96");
  uint64_t v11 = v10;
  unsigned int v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v13 = sub_9B1C(a4, v11, v12);
  unsigned int v15 = sub_FC4C(v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_4DE6C( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_75_47");
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_126_96");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v11 = sub_9B1C(a4, v9, v10);
  int v13 = sub_FC4C(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

int *sub_4DF34(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "Vertex Occupancy");
  __int128 v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "Fragment Occupancy");
  int v5 = sub_A18C(v3, v4);
  int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "Compute Occupancy");
  unint64_t v7 = sub_A18C(v5, v6);
  int v8 = sub_9ABC();
  return sub_11840(v7, v8, v9);
}

int *sub_4DFD8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "Vertex Simdgroups Inflight Per Shader Core");
  __int128 v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "Fragment Simdgroups Inflight Per Shader Core");
  int v5 = sub_A18C(v3, v4);
  int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "Compute Simdgroups Inflight Per Shader Core");
  return sub_A18C(v5, v6);
}

int *sub_4E058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  int v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "Vertex Simdgroups Inflight Per Shader Core");
  int v6 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_84_54");
  return sub_FC4C(v5, v6, v7);
}

uint64_t sub_4E0BC(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *))
{
  int v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_77_49");
  unsigned int v6 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v8 = sub_9B1C(v6, v7, qword_5B8C88);
  unsigned int v10 = sub_FC4C(v5, v8, v9);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v10);
}

int *sub_4E154( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "FB75B1EE028F765D95134B65BAFD26602EE879B247F31514268AFE1DF00830D4");
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "C8CAD3DF32303A6876151218FAAA63CA0642964F0528B51E0F3BBA792A0FA006");
  unint64_t v9 = sub_A18C(v7, v8);
  unsigned int v10 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_127_97");
  uint64_t v12 = v11;
  unsigned int v13 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v14 = sub_9D9C(v10, v12, v13);
  int v16 = sub_E1D0(v9, v14, v15);
  unint64_t v17 = (int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v16);
  int v18 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_84_54");
  return sub_11840(v17, v18, v19);
}

int *sub_4E278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  int v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "Fragment Simdgroups Inflight Per Shader Core");
  int v6 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_84_54");
  return sub_FC4C(v5, v6, v7);
}

uint64_t sub_4E2DC(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *))
{
  int v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_78_50");
  unsigned int v6 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v8 = sub_9B1C(v6, v7, qword_5B8C88);
  unsigned int v10 = sub_FC4C(v5, v8, v9);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v10);
}

int *sub_4E374( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "55DDF08ED5B641C5048444150A2D58A930D81F86EEA506CD8B4073F64FC0F1C2");
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "C4B3D90E89BC6B96BEB336D1A17757038334C2A490EDF56428037F1BC405BF70");
  unint64_t v9 = sub_A18C(v7, v8);
  unsigned int v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "E0822A12A8DD1B222198A771537F2CE4899EB45BC94D7854E0E6FA983E6EBC89");
  uint64_t v11 = sub_A18C(v9, v10);
  unsigned int v12 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_127_97");
  uint64_t v14 = v13;
  unsigned int v15 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v16 = sub_9D9C(v12, v14, v15);
  int v18 = sub_E1D0(v11, v16, v17);
  unint64_t v19 = (int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v18);
  int v20 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_84_54");
  return sub_11840(v19, v20, v21);
}

int *sub_4E4C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  int v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "Compute Simdgroups Inflight Per Shader Core");
  int v6 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_84_54");
  return sub_FC4C(v5, v6, v7);
}

uint64_t sub_4E524(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *))
{
  int v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_79_51");
  unsigned int v6 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v8 = sub_9B1C(v6, v7, qword_5B8C88);
  unsigned int v10 = sub_FC4C(v5, v8, v9);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v10);
}

int *sub_4E5BC( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "33634F0DC72BA827D588E38DC75C388CF4976E4671D85148780CFAFD262B07FB");
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "FD6F91B4C067953424B95F0B332F0FB4A64F7E43DC4D6E8CDE26B1D5D7C07A42");
  unint64_t v9 = sub_A18C(v7, v8);
  unsigned int v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "50E7E1AAC46F3CF79A6B3BB2DDC0BCDCF0ACD9011439415E47AEA7B6579F3EA8");
  uint64_t v11 = sub_A18C(v9, v10);
  unsigned int v12 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_127_97");
  uint64_t v14 = v13;
  unsigned int v15 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v16 = sub_9D9C(v12, v14, v15);
  int v18 = sub_E1D0(v11, v16, v17);
  unint64_t v19 = (int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v18);
  int v20 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_84_54");
  return sub_11840(v19, v20, v21);
}

int *sub_4E708( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "3AFE7FC24E518305DB9BB516AE4AA6725E13A423016B31BAFEBFD6FA09AFAFCD");
  unsigned int v8 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_128_98");
  uint64_t v10 = v9;
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_84_54");
  uint64_t v12 = v11;
  unsigned int v13 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  unsigned int v14 = sub_9B1C(a4, v12, v13);
  int v15 = sub_9D9C(v8, v10, v14);
  unint64_t v17 = sub_E1D0(v7, v15, v16);
  int v18 = (int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
  int v19 = sub_9ABC();
  return sub_11840(v18, v19, v20);
}

uint64_t sub_4E830(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_6d6a7c8efb15986fa71f8bf4a6a06f8942199b36680e516766e92490607c958d");
  int v4 = sub_9ABC();
  unsigned int v6 = sub_E1D0(v3, v4, v5);
  return sub_56CAC(a2, v6);
}

uint64_t sub_4E894(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_190175e7010a5c90cc957e3f3eed64c3910111ef228808fbb2462cd269524ef5");
  int v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_e7982344eb9c10ce1e1e9e179c01bb8a55934656fd5d499f956d6e35e42f1f10");
  unint64_t v5 = sub_A18C(v3, v4);
  unsigned int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_aac2d2ece8ff1acbf2ab0f821c8f1e4e2dbb2ca4c3a6918e2dc458dfab8ee05c");
  uint64_t v7 = sub_A18C(v5, v6);
  int v8 = sub_9ABC();
  uint64_t v10 = sub_E1D0(v7, v8, v9);
  return sub_56CAC(a2, v10);
}

uint64_t sub_4E948(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_f539a056fbd45e39d61b9d34af0ea1a305dd8af6f005b5aa29488f2c966e7f21");
  int v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_c420303ee3c2ea941491fa0a071ec1553251898524fce318c3635bc711160395");
  unint64_t v5 = sub_A18C(v3, v4);
  unsigned int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_c89f25b2a31116ea6540fc6b89b623da7d4cbc9b2349ce7dbe4423a1395da60a");
  uint64_t v7 = sub_A18C(v5, v6);
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_7eba0657c66c2437c8d6952fb82117b9399d920ea84fa32c5bdc9d1dee49e290");
  unint64_t v9 = sub_A18C(v7, v8);
  int v10 = sub_9ABC();
  uint64_t v12 = sub_E1D0(v9, v10, v11);
  return sub_56CAC(a2, v12);
}

uint64_t sub_4EA24(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_7df466c5ce6d100c121c263bbbff0effc1e4806f9bdb997e3c9b3c3bd4753064");
  int v4 = sub_9ABC();
  unsigned int v6 = sub_E1D0(v3, v4, v5);
  return sub_56CAC(a2, v6);
}

uint64_t sub_4EA88(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_e7982344eb9c10ce1e1e9e179c01bb8a55934656fd5d499f956d6e35e42f1f10");
  int v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_aac2d2ece8ff1acbf2ab0f821c8f1e4e2dbb2ca4c3a6918e2dc458dfab8ee05c");
  unint64_t v5 = sub_A18C(v3, v4);
  int v6 = sub_9ABC();
  int v8 = sub_E1D0(v5, v6, v7);
  return sub_56CAC(a2, v8);
}

uint64_t sub_4EB14(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_f539a056fbd45e39d61b9d34af0ea1a305dd8af6f005b5aa29488f2c966e7f21");
  int v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_c420303ee3c2ea941491fa0a071ec1553251898524fce318c3635bc711160395");
  unint64_t v5 = sub_A18C(v3, v4);
  int v6 = sub_9ABC();
  int v8 = sub_E1D0(v5, v6, v7);
  return sub_56CAC(a2, v8);
}

int *sub_4EBA0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "AF Bandwidth");
  int v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, "AF Read Bandwidth");
  return sub_B09C(v3, v4);
}

uint64_t sub_4EBF8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "_5c5c55d05fb355aa5be61ac63c88eb4a2a521a47dd8f79c18b5c1df163d5cb55");
  int v4 = sub_9ABC();
  int v6 = sub_E1D0(v3, v4, v5);
  return sub_56CAC(a2, v6);
}

uint64_t sub_4EC5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_31_3");
  int v4 = sub_9ABC();
  int v6 = sub_E1D0(v3, v4, v5);
  return sub_56CAC(a2, v6);
}

uint64_t sub_4ECC0(unsigned int *a1, uint64_t a2)
{
  unint64_t v3 = sub_56344(a1, a2);
  int v4 = sub_9ABC();
  int v6 = sub_E1D0(v3, v4, v5);
  return sub_56CAC(a2, v6);
}

uint64_t sub_4ED0C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_33_5");
  int v4 = sub_9ABC();
  int v6 = sub_E1D0(v3, v4, v5);
  return sub_56CAC(a2, v6);
}

uint64_t sub_4ED70(unsigned int *a1, uint64_t a2)
{
  unint64_t v3 = sub_56540(a1, a2);
  int v4 = sub_9ABC();
  int v6 = sub_E1D0(v3, v4, v5);
  return sub_56CAC(a2, v6);
}

uint64_t sub_4EDBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_46_18");
  int v7 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_94_64");
  unint64_t v9 = sub_E1D0(v6, v7, v8);
  return sub_56CAC(a2, v9);
}

uint64_t sub_4EE38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_47_19");
  int v7 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_96_66");
  unint64_t v9 = sub_E1D0(v6, v7, v8);
  return sub_56CAC(a2, v9);
}

uint64_t sub_4EEB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "D1922B4CF1F4DC1E2062378D34EE4E6EAB398BD0417BC95E5EF60C5C1F53E035");
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "DFF91EC9DAE4F9D14485F569D87B6AC75F93DD47C850ACF09E9DD7A3D0EFCE8A");
  unint64_t v8 = sub_A18C(v6, v7);
  int v9 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_106_76");
  unint64_t v11 = sub_E1D0(v8, v9, v10);
  return sub_56CAC(a2, v11);
}

uint64_t sub_4EF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "7D8633F6EB10ABA43002BB46D28FA26BFFA1093AB39728908221CE3FD922C72D");
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "8F37B8C186E20EAB68B65FA965112E8C106205370CA0829C3EBD548C49C99A46");
  unint64_t v8 = sub_A18C(v6, v7);
  int v9 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_106_76");
  unint64_t v11 = sub_E1D0(v8, v9, v10);
  return sub_56CAC(a2, v11);
}

uint64_t sub_4EFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "3CCBBD2DBDE74F294638B5661472C6041FD802D082125437CB926C2F4E201182");
  int v7 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_108_78");
  int v9 = sub_E1D0(v6, v7, v8);
  return sub_56CAC(a2, v9);
}

uint64_t sub_4F078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "0597494BBDA7FA995805FB01DD8AD6D81CC143C09F8EFB86702288F745E3F791");
  int v7 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_108_78");
  int v9 = sub_E1D0(v6, v7, v8);
  return sub_56CAC(a2, v9);
}

uint64_t sub_4F0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "3FAA4DE8275531852B39C91E52291523AEA993A6114D2CF7645F7C8AC1EF27CE");
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "11F678510139CFDE77DC68F07F633C61D28564C9B207D45849B5E6AB72B41E0A");
  unint64_t v8 = sub_A18C(v6, v7);
  int v9 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_110_80");
  unint64_t v11 = sub_E1D0(v8, v9, v10);
  return sub_56CAC(a2, v11);
}

uint64_t sub_4F198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "6FFBFD65F64B0F892C812D9952748E8632E02C4DF155F5E233927E6D0DC88D38");
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "9C397DD48F0AD6AAD1F9B2ABA077E5808FA3D4E452B659013FF3CEC6D1EB1472");
  unint64_t v8 = sub_A18C(v6, v7);
  int v9 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_110_80");
  unint64_t v11 = sub_E1D0(v8, v9, v10);
  return sub_56CAC(a2, v11);
}

uint64_t sub_4F23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_39_11");
  int v7 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_98_68");
  int v9 = sub_E1D0(v6, v7, v8);
  return sub_56CAC(a2, v9);
}

uint64_t sub_4F2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_40_12");
  int v7 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_98_68");
  int v9 = sub_E1D0(v6, v7, v8);
  return sub_56CAC(a2, v9);
}

uint64_t sub_4F334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_37_9");
  int v7 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_102_72");
  int v9 = sub_E1D0(v6, v7, v8);
  return sub_56CAC(a2, v9);
}

uint64_t sub_4F3B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_38_10");
  int v7 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_102_72");
  int v9 = sub_E1D0(v6, v7, v8);
  return sub_56CAC(a2, v9);
}

uint64_t sub_4F42C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_35_7");
  int v7 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_104_74");
  int v9 = sub_E1D0(v6, v7, v8);
  return sub_56CAC(a2, v9);
}

uint64_t sub_4F4A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  int v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_36_8");
  int v7 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_104_74");
  int v9 = sub_E1D0(v6, v7, v8);
  return sub_56CAC(a2, v9);
}

int *sub_4F524(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "E2175386E8858E1E5273EB120A19C734896FE34E529B7720E38F90C3E66633CC");
  int v3 = sub_9ABC();
  return sub_11840(v2, v3, v4);
}

int *sub_4F574(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *))
{
  unint64_t v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "E2175386E8858E1E5273EB120A19C734896FE34E529B7720E38F90C3E66633CC");
  int v6 = sub_9ABC();
  unint64_t v8 = sub_E1D0(v5, v6, v7);
  int v9 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  unint64_t v11 = sub_FC4C(v8, v9, v10);
  uint64_t v12 = (int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v11);
  int v13 = sub_9ABC();
  return sub_11840(v12, v13, v14);
}

uint64_t sub_4F644( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "F5B97BA71877E7014D8BB80B1B5750123154A26D4FD86B41AE0525EDEF44A41B");
  int v8 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_141_110");
  unint64_t v10 = sub_E1D0(v7, v8, v9);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_140_109");
  uint64_t v12 = v11;
  unsigned int v13 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v14 = sub_9B1C(a4, v12, v13);
  unint64_t v16 = sub_FC4C(v10, v14, v15);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v16);
}

uint64_t sub_4F740( uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "CBB7FC5C90F6950C90B30709E38AC295085E9F9A5D82EB5DF56E89752A1E0252");
  int v8 = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Der ivedCounters/AGXPSLimiters.cpp_141_110");
  unint64_t v10 = sub_E1D0(v7, v8, v9);
  LODWORD(a4) = (**a4)( a4,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSu pport/DerivedCounters/AGXPSLimiters.cpp_140_109");
  uint64_t v12 = v11;
  unsigned int v13 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  int v14 = sub_9B1C(a4, v12, v13);
  unint64_t v16 = sub_FC4C(v10, v14, v15);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v16);
}

void **sub_4F83C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "A5AD2AAF51022A15627C4C6C3F18D612BFF2CA7F01F65EC1C26965ED6DDC6563");
  return agxps_timeseries_copy(v2);
}

void **sub_4F864(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "D51129E2277ED8B7AE37E82DA9F8FEB9C3FDB71EC4E4B5548B4D3763A89AF1C2");
  return agxps_timeseries_copy(v2);
}

void **sub_4F88C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "6634D05466F515CAD98B1548EE7DCC52386712E059BE4C1A3FBB157892D9D61E");
  return agxps_timeseries_copy(v2);
}

uint64_t sub_4F8B4@<X0>(uint64_t *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  unint64_t v2 = 0x30000000FLL;
  while (2)
  {
    unint64_t v3 = HIDWORD(v2);
    sub_27F0((uint64_t)&v938, v2, SHIDWORD(v2));
    sub_76B8( &v943,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_129_99");
    uint64_t v4 = sub_2C44((uint64_t)&v938, (uint64_t)&v943, 64.0);
    sub_76B8( v936,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_130_100");
    uint64_t v5 = sub_2C44(v4, (uint64_t)v936, 196608.0);
    sub_76B8( v934,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_131_101");
    uint64_t v6 = sub_2C44(v5, (uint64_t)v934, 128.0);
    sub_76B8( v932,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_132_102");
    uint64_t v7 = sub_2C44(v6, (uint64_t)v932, 2.0);
    sub_76B8( v930,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_133_103");
    uint64_t v8 = sub_2C44(v7, (uint64_t)v930, 64.0);
    sub_76B8( v928,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_134_104");
    uint64_t v9 = sub_2C44(v8, (uint64_t)v928, 2.0);
    sub_76B8( v926,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_135_105");
    uint64_t v10 = sub_2C44(v9, (uint64_t)v926, 4.0);
    sub_76B8( v924,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_136_106");
    uint64_t v11 = sub_2C44(v10, (uint64_t)v924, 4.0);
    sub_76B8( v922,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_137_107");
    uint64_t v12 = sub_2C44(v11, (uint64_t)v922, 64.0);
    sub_76B8( __p,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_138_108");
    unsigned int v13 = (void *)sub_2C44(v12, (uint64_t)__p, 384.0);
    unint64_t v14 = a1[1];
    if (v14 >= a1[2])
    {
      uint64_t v15 = sub_56918(a1, v13);
    }

    else
    {
      sub_29F4(a1[1], v13);
      uint64_t v15 = v14 + 176;
      a1[1] = v14 + 176;
    }

    a1[1] = v15;
    if (v921 < 0) {
      operator delete(__p[0]);
    }
    if (v923 < 0) {
      operator delete(v922[0]);
    }
    if (v925 < 0) {
      operator delete(v924[0]);
    }
    if (v927 < 0) {
      operator delete(v926[0]);
    }
    if (v929 < 0) {
      operator delete(v928[0]);
    }
    if (v931 < 0) {
      operator delete(v930[0]);
    }
    if (v933 < 0) {
      operator delete(v932[0]);
    }
    if (v935 < 0) {
      operator delete(v934[0]);
    }
    if (v937 < 0) {
      operator delete(v936[0]);
    }
    if (v945 < 0) {
      operator delete((void *)v943);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
    sub_4E2C((uint64_t)v940);
    sub_4B28((uint64_t)v939);
    switch(HIDWORD(v2))
    {
      case 1:
        LODWORD(v3) = 2;
        goto LABEL_31;
      case 2:
        LODWORD(v3) = 3;
        goto LABEL_31;
      case 3:
        LODWORD(v3) = 4;
        goto LABEL_31;
      case 4:
        LODWORD(v3) = 5;
        goto LABEL_31;
      case 5:
        LODWORD(v3) = 6;
        goto LABEL_31;
      case 6:
        switch((int)v2)
        {
          case 10:
            LODWORD(v3) = 1;
            LODWORD(v2) = 11;
            goto LABEL_31;
          case 11:
            LODWORD(v3) = 1;
            LODWORD(v2) = 12;
            goto LABEL_31;
          case 12:
            LODWORD(v3) = 1;
            LODWORD(v2) = 13;
            goto LABEL_31;
          case 13:
            LODWORD(v3) = 1;
            LODWORD(v2) = 14;
            goto LABEL_31;
          case 14:
            LODWORD(v3) = 1;
            LODWORD(v2) = 15;
            goto LABEL_31;
          case 15:
            LODWORD(v3) = 1;
            LODWORD(v2) = 16;
            goto LABEL_31;
          case 16:
            LODWORD(v3) = 1;
            LODWORD(v2) = 17;
            goto LABEL_31;
          case 17:
            goto LABEL_42;
          default:
            LODWORD(v3) = 1;
            goto LABEL_31;
        }

        goto LABEL_42;
      default:
LABEL_31:
        unint64_t v2 = v2 | ((unint64_t)v3 << 32);
        if (v2 != 0x300000011LL) {
          continue;
        }
LABEL_42:
        uint64_t v16 = 0LL;
        break;
    }

    break;
  }

  do
  {
    uint64_t v17 = 0LL;
    uint64_t v345 = v16;
    int v18 = dword_3137B0[v16];
    unsigned int v19 = v18 - 1;
    do
    {
      int v20 = dword_3137C8[v17];
      if (v20 == 10) {
        double v21 = 64.0;
      }
      else {
        double v21 = 96.0;
      }
      if (v20 == 15 && v19 < 2 || v20 < 15) {
        double v24 = 0.0;
      }
      else {
        double v24 = 48.0;
      }
      sub_27F0((uint64_t)&v938, v20, v18);
      sub_76B8( v918,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_82_52");
      uint64_t v25 = sub_2C44((uint64_t)&v938, (uint64_t)v918, 32.0);
      sub_76B8( v916,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_83_53");
      uint64_t v26 = sub_2C44(v25, (uint64_t)v916, v21 + v24);
      sub_76B8( v914,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_84_54");
      unsigned int v27 = (void *)sub_2C44(v26, (uint64_t)v914, v21);
      unint64_t v28 = a1[1];
      if (v28 >= a1[2])
      {
        uint64_t v29 = sub_56918(a1, v27);
      }

      else
      {
        sub_29F4(a1[1], v27);
        uint64_t v29 = v28 + 176;
        a1[1] = v28 + 176;
      }

      a1[1] = v29;
      if (v915 < 0) {
        operator delete(v914[0]);
      }
      if (v917 < 0) {
        operator delete(v916[0]);
      }
      if (v919 < 0) {
        operator delete(v918[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_4E2C((uint64_t)v940);
      sub_4B28((uint64_t)v939);
      ++v17;
    }

    while (v17 != 8);
    uint64_t v30 = 0LL;
    uint64_t v943 = 0xB0000000ALL;
    do
    {
      sub_27F0((uint64_t)&v938, *(_DWORD *)((char *)&v943 + v30), v18);
      sub_76B8( v912,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_28_0");
      sub_76B8(v910, "_90784375edce0b872bddf54d5fdc7e2419df531375843de0472b43e95edffe2b");
      uint64_t v31 = sub_2A38((uint64_t)&v938, (__int128 *)v912, (__int128 *)v910);
      sub_76B8( v908,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_28_0");
      sub_76B8(v906, "_e5f2d8a6cf9651b49b3b00bebdf815a5269b8c89fc3bc02057a3a14e28733495");
      uint64_t v32 = sub_2A38(v31, (__int128 *)v908, (__int128 *)v906);
      sub_76B8( v904,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_86_56");
      unsigned int v33 = (void *)sub_2C44(v32, (uint64_t)v904, 0.25);
      unint64_t v34 = a1[1];
      if (v34 >= a1[2])
      {
        uint64_t v35 = sub_56918(a1, v33);
      }

      else
      {
        sub_29F4(a1[1], v33);
        uint64_t v35 = v34 + 176;
        a1[1] = v34 + 176;
      }

      a1[1] = v35;
      if (v905 < 0) {
        operator delete(v904[0]);
      }
      if (v907 < 0) {
        operator delete(v906[0]);
      }
      if (v909 < 0) {
        operator delete(v908[0]);
      }
      if (v911 < 0) {
        operator delete(v910[0]);
      }
      if (v913 < 0) {
        operator delete(v912[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_4E2C((uint64_t)v940);
      sub_4B28((uint64_t)v939);
      v30 += 4LL;
    }

    while (v30 != 8);
    sub_27F0((uint64_t)&v938, 12, v18);
    sub_76B8( v902,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_28_0");
    sub_76B8(v900, "_90784375edce0b872bddf54d5fdc7e2419df531375843de0472b43e95edffe2b");
    uint64_t v36 = sub_2A38((uint64_t)&v938, (__int128 *)v902, (__int128 *)v900);
    sub_76B8( v898,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_28_0");
    sub_76B8(v896, "_e5f2d8a6cf9651b49b3b00bebdf815a5269b8c89fc3bc02057a3a14e28733495");
    uint64_t v37 = sub_2A38(v36, (__int128 *)v898, (__int128 *)v896);
    sub_76B8( v894,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_86_56");
    double v38 = (void *)sub_2C44(v37, (uint64_t)v894, 1.0);
    unint64_t v39 = a1[1];
    if (v39 >= a1[2])
    {
      uint64_t v40 = sub_56918(a1, v38);
    }

    else
    {
      sub_29F4(a1[1], v38);
      uint64_t v40 = v39 + 176;
      a1[1] = v39 + 176;
    }

    a1[1] = v40;
    if (v895 < 0) {
      operator delete(v894[0]);
    }
    if (v897 < 0) {
      operator delete(v896[0]);
    }
    if (v899 < 0) {
      operator delete(v898[0]);
    }
    if (v901 < 0) {
      operator delete(v900[0]);
    }
    if (v903 < 0) {
      operator delete(v902[0]);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
    sub_4E2C((uint64_t)v940);
    sub_4B28((uint64_t)v939);
    for (uint64_t i = 0LL; i != 7; ++i)
    {
      sub_27F0((uint64_t)&v938, dword_3137E8[i], v18);
      sub_76B8( v892,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_29_1");
      sub_76B8(v890, "_6d6a7c8efb15986fa71f8bf4a6a06f8942199b36680e516766e92490607c958d");
      uint64_t v42 = sub_2A38((uint64_t)&v938, (__int128 *)v892, (__int128 *)v890);
      sub_76B8( v888,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_30_2");
      sub_76B8(v886, "_fdc48a2370f6885da6ac169661812057de2cf71fbbbcb5df8348a78f112992dc");
      double v43 = (void *)sub_2A38(v42, (__int128 *)v888, (__int128 *)v886);
      unint64_t v44 = a1[1];
      if (v44 >= a1[2])
      {
        uint64_t v45 = sub_56918(a1, v43);
      }

      else
      {
        sub_29F4(a1[1], v43);
        uint64_t v45 = v44 + 176;
        a1[1] = v44 + 176;
      }

      a1[1] = v45;
      if (v887 < 0) {
        operator delete(v886[0]);
      }
      if (v889 < 0) {
        operator delete(v888[0]);
      }
      if (v891 < 0) {
        operator delete(v890[0]);
      }
      if (v893 < 0) {
        operator delete(v892[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_4E2C((uint64_t)v940);
      sub_4B28((uint64_t)v939);
    }

    uint64_t v46 = 0LL;
    uint64_t v943 = 0x100000000FLL;
    int v944 = 17;
    do
    {
      BOOL v47 = v19 < 2;
      int v48 = *(_DWORD *)((char *)&v943 + v46);
      if (v48 != 15) {
        BOOL v47 = 0;
      }
      if (v48 >= 15 && !v47)
      {
        sub_27F0((uint64_t)&v938, v48, v18);
        sub_76B8( v884,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_87_57");
        uint64_t v49 = sub_2C44((uint64_t)&v938, (uint64_t)v884, 0.0833333333);
        sub_76B8( v882,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_88_58");
        unsigned int v50 = (void *)sub_2C44(v49, (uint64_t)v882, 0.0833333333);
        unint64_t v51 = a1[1];
        if (v51 >= a1[2])
        {
          uint64_t v52 = sub_56918(a1, v50);
        }

        else
        {
          sub_29F4(a1[1], v50);
          uint64_t v52 = v51 + 176;
          a1[1] = v51 + 176;
        }

        a1[1] = v52;
        if (v883 < 0) {
          operator delete(v882[0]);
        }
        if (v885 < 0) {
          operator delete(v884[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_4E2C((uint64_t)v940);
        sub_4B28((uint64_t)v939);
      }

      v46 += 4LL;
    }

    while (v46 != 12);
    uint64_t v53 = 0LL;
    uint64_t v943 = 0x100000000FLL;
    int v944 = 17;
    do
    {
      BOOL v54 = v19 < 2;
      int v55 = *(_DWORD *)((char *)&v943 + v53);
      if (v55 != 15) {
        BOOL v54 = 0;
      }
      if (v55 >= 15 && !v54)
      {
        sub_27F0((uint64_t)&v938, v55, v18);
        sub_76B8( v880,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_37_9");
        sub_76B8(v878, "0AF6A9208DBB7C0C06A19C4C9090BF87CF00BBEE2BDFD9E0C49423DD641C1174");
        uint64_t v56 = sub_2A38((uint64_t)&v938, (__int128 *)v880, (__int128 *)v878);
        sub_76B8( v876,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_38_10");
        sub_76B8(v874, "6CFA2D1125EAFC658FDF0E2F1A1B4F8D315296A1AFB116D0A8ECF669C026FF69");
        uint64_t v57 = sub_2A38(v56, (__int128 *)v876, (__int128 *)v874);
        sub_76B8( v872,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_39_11");
        sub_76B8(v870, "E4079A9FE3685ED6370986B0373FFC91E49069A610571534C42255467036D7CD");
        uint64_t v58 = sub_2A38(v57, (__int128 *)v872, (__int128 *)v870);
        sub_76B8( v868,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_40_12");
        sub_76B8(v866, "6060A012307BC0711368543129DC26F4493F2C5C30CAF9D4F782C065929930B3");
        uint64_t v59 = sub_2A38(v58, (__int128 *)v868, (__int128 *)v866);
        sub_76B8( v864,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_41_13");
        sub_76B8(v862, "11F678510139CFDE77DC68F07F633C61D28564C9B207D45849B5E6AB72B41E0A");
        uint64_t v60 = sub_2A38(v59, (__int128 *)v864, (__int128 *)v862);
        sub_76B8( v860,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_42_14");
        sub_76B8(v858, "9C397DD48F0AD6AAD1F9B2ABA077E5808FA3D4E452B659013FF3CEC6D1EB1472");
        uint64_t v61 = sub_2A38(v60, (__int128 *)v860, (__int128 *)v858);
        sub_76B8( v856,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_89_59");
        uint64_t v62 = sub_2C44(v61, (uint64_t)v856, 0.03125);
        sub_76B8( v854,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_97_67");
        uint64_t v63 = sub_2C44(v62, (uint64_t)v854, 0.03125);
        sub_76B8( v852,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_98_68");
        uint64_t v64 = sub_2C44(v63, (uint64_t)v852, 8.0);
        sub_76B8( v850,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_99_69");
        uint64_t v65 = sub_2C44(v64, (uint64_t)v850, 0.03125);
        sub_76B8( v848,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_100_70");
        uint64_t v66 = sub_2C44(v65, (uint64_t)v848, 8.0);
        sub_76B8( v846,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_101_71");
        uint64_t v67 = sub_2C44(v66, (uint64_t)v846, 0.03125);
        sub_76B8( v844,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_102_72");
        uint64_t v68 = sub_2C44(v67, (uint64_t)v844, 8.0);
        sub_76B8( v842,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_103_73");
        uint64_t v69 = sub_2C44(v68, (uint64_t)v842, 0.03125);
        sub_76B8( v840,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_104_74");
        uint64_t v70 = sub_2C44(v69, (uint64_t)v840, 8.0);
        sub_76B8( v838,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_105_75");
        uint64_t v71 = sub_2C44(v70, (uint64_t)v838, 0.03125);
        sub_76B8( v836,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_106_76");
        uint64_t v72 = sub_2C44(v71, (uint64_t)v836, 8.0);
        sub_76B8( v834,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_107_77");
        uint64_t v73 = sub_2C44(v72, (uint64_t)v834, 0.03125);
        sub_76B8( v832,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_108_78");
        uint64_t v74 = sub_2C44(v73, (uint64_t)v832, 8.0);
        sub_76B8( v830,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_109_79");
        uint64_t v75 = sub_2C44(v74, (uint64_t)v830, 0.03125);
        sub_76B8( v828,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_110_80");
        __int128 v76 = (void *)sub_2C44(v75, (uint64_t)v828, 8.0);
        unint64_t v77 = a1[1];
        if (v77 >= a1[2])
        {
          uint64_t v78 = sub_56918(a1, v76);
        }

        else
        {
          sub_29F4(a1[1], v76);
          uint64_t v78 = v77 + 176;
          a1[1] = v77 + 176;
        }

        a1[1] = v78;
        if (v829 < 0) {
          operator delete(v828[0]);
        }
        if (v831 < 0) {
          operator delete(v830[0]);
        }
        if (v833 < 0) {
          operator delete(v832[0]);
        }
        if (v835 < 0) {
          operator delete(v834[0]);
        }
        if (v837 < 0) {
          operator delete(v836[0]);
        }
        if (v839 < 0) {
          operator delete(v838[0]);
        }
        if (v841 < 0) {
          operator delete(v840[0]);
        }
        if (v843 < 0) {
          operator delete(v842[0]);
        }
        if (v845 < 0) {
          operator delete(v844[0]);
        }
        if (v847 < 0) {
          operator delete(v846[0]);
        }
        if (v849 < 0) {
          operator delete(v848[0]);
        }
        if (v851 < 0) {
          operator delete(v850[0]);
        }
        if (v853 < 0) {
          operator delete(v852[0]);
        }
        if (v855 < 0) {
          operator delete(v854[0]);
        }
        if (v857 < 0) {
          operator delete(v856[0]);
        }
        if (v859 < 0) {
          operator delete(v858[0]);
        }
        if (v861 < 0) {
          operator delete(v860[0]);
        }
        if (v863 < 0) {
          operator delete(v862[0]);
        }
        if (v865 < 0) {
          operator delete(v864[0]);
        }
        if (v867 < 0) {
          operator delete(v866[0]);
        }
        if (v869 < 0) {
          operator delete(v868[0]);
        }
        if (v871 < 0) {
          operator delete(v870[0]);
        }
        if (v873 < 0) {
          operator delete(v872[0]);
        }
        if (v875 < 0) {
          operator delete(v874[0]);
        }
        if (v877 < 0) {
          operator delete(v876[0]);
        }
        if (v879 < 0) {
          operator delete(v878[0]);
        }
        if (v881 < 0) {
          operator delete(v880[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_4E2C((uint64_t)v940);
        sub_4B28((uint64_t)v939);
      }

      v53 += 4LL;
    }

    while (v53 != 12);
    uint64_t v79 = 0LL;
    uint64_t v943 = 0x100000000FLL;
    int v944 = 17;
    do
    {
      BOOL v80 = v19 < 2;
      int v81 = *(_DWORD *)((char *)&v943 + v79);
      if (v81 != 15) {
        BOOL v80 = 0;
      }
      if (v81 >= 15 && !v80)
      {
        sub_27F0((uint64_t)&v938, v81, v18);
        sub_76B8( v826,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_31_3");
        sub_76B8(v824, "EED11884758646FD70438F8D2661EC13F25DF1E40EC651E073736D2EFDAB9F0D");
        uint64_t v82 = sub_2A38((uint64_t)&v938, (__int128 *)v826, (__int128 *)v824);
        sub_76B8( v822,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_35_7");
        sub_76B8(v820, "EED11884758646FD70438F8D2661EC13F25DF1E40EC651E073736D2EFDAB9F0D");
        uint64_t v83 = sub_2A38(v82, (__int128 *)v822, (__int128 *)v820);
        sub_76B8( v818,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_90_60");
        uint64_t v84 = (void *)sub_2C44(v83, (uint64_t)v818, 0.03125);
        unint64_t v85 = a1[1];
        if (v85 >= a1[2])
        {
          uint64_t v86 = sub_56918(a1, v84);
        }

        else
        {
          sub_29F4(a1[1], v84);
          uint64_t v86 = v85 + 176;
          a1[1] = v85 + 176;
        }

        a1[1] = v86;
        if (v819 < 0) {
          operator delete(v818[0]);
        }
        if (v821 < 0) {
          operator delete(v820[0]);
        }
        if (v823 < 0) {
          operator delete(v822[0]);
        }
        if (v825 < 0) {
          operator delete(v824[0]);
        }
        if (v827 < 0) {
          operator delete(v826[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_4E2C((uint64_t)v940);
        sub_4B28((uint64_t)v939);
      }

      v79 += 4LL;
    }

    while (v79 != 12);
    uint64_t v87 = 0LL;
    uint64_t v943 = 0xE0000000DLL;
    int v944 = 15;
    do
    {
      BOOL v88 = v19 < 2;
      int v89 = *(_DWORD *)((char *)&v943 + v87);
      if (v89 != 15) {
        BOOL v88 = 0;
      }
      if (v89 < 15 || v88)
      {
        sub_27F0((uint64_t)&v938, v89, v18);
        sub_76B8( v816,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_31_3");
        sub_76B8(v814, "_8cd74591f03ed3eb90e0c547b8bf21ae7eed4129053f40570cce56a39a690015");
        uint64_t v91 = sub_2A38((uint64_t)&v938, (__int128 *)v816, (__int128 *)v814);
        sub_76B8( v812,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_32_4");
        sub_76B8(v810, "_d0699f5ce934818cd7248127feed214216e30183a27473bea81c3d3b90578ef9");
        uint64_t v92 = sub_2A38(v91, (__int128 *)v812, (__int128 *)v810);
        sub_76B8( v808,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_90_60");
        uint64_t v93 = (void *)sub_2C44(v92, (uint64_t)v808, 0.5);
        unint64_t v94 = a1[1];
        if (v94 >= a1[2])
        {
          uint64_t v95 = sub_56918(a1, v93);
        }

        else
        {
          sub_29F4(a1[1], v93);
          uint64_t v95 = v94 + 176;
          a1[1] = v94 + 176;
        }

        a1[1] = v95;
        if (v809 < 0) {
          operator delete(v808[0]);
        }
        if (v811 < 0) {
          operator delete(v810[0]);
        }
        if (v813 < 0) {
          operator delete(v812[0]);
        }
        if (v815 < 0) {
          operator delete(v814[0]);
        }
        if (v817 < 0) {
          operator delete(v816[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_4E2C((uint64_t)v940);
        sub_4B28((uint64_t)v939);
      }

      v87 += 4LL;
    }

    while (v87 != 12);
    uint64_t v96 = 0LL;
    uint64_t v943 = 0xB0000000ALL;
    int v944 = 12;
    do
    {
      sub_27F0((uint64_t)&v938, *(_DWORD *)((char *)&v943 + v96), v18);
      sub_76B8( v806,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_31_3");
      sub_76B8(v804, "_f3b0ac2ff165c0670b2240e2ab5a6536283a3731be38544cccd5d6393815b687");
      uint64_t v97 = sub_2A38((uint64_t)&v938, (__int128 *)v806, (__int128 *)v804);
      sub_76B8( v802,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_31_3");
      sub_76B8(v800, "_84411edb65d08697e681f20b450ed1f7aef44dbed4cce93a02d28340bb3c9dce");
      uint64_t v98 = sub_2A38(v97, (__int128 *)v802, (__int128 *)v800);
      sub_76B8( v798,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_32_4");
      sub_76B8(v796, "_5fae1ea71b71c15b2c88ee87572e9af5c8e106e76f225662b93ee1e39122f488");
      uint64_t v99 = sub_2A38(v98, (__int128 *)v798, (__int128 *)v796);
      sub_76B8( v794,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_32_4");
      sub_76B8(v792, "_eae3a7dc81602f26730b05b79171aa4da4f5d67d10089b075090ac21392f8550");
      uint64_t v100 = sub_2A38(v99, (__int128 *)v794, (__int128 *)v792);
      sub_76B8( v790,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_90_60");
      __int128 v101 = (void *)sub_2C44(v100, (uint64_t)v790, 0.25);
      unint64_t v102 = a1[1];
      if (v102 >= a1[2])
      {
        uint64_t v103 = sub_56918(a1, v101);
      }

      else
      {
        sub_29F4(a1[1], v101);
        uint64_t v103 = v102 + 176;
        a1[1] = v102 + 176;
      }

      a1[1] = v103;
      if (v791 < 0) {
        operator delete(v790[0]);
      }
      if (v793 < 0) {
        operator delete(v792[0]);
      }
      if (v795 < 0) {
        operator delete(v794[0]);
      }
      if (v797 < 0) {
        operator delete(v796[0]);
      }
      if (v799 < 0) {
        operator delete(v798[0]);
      }
      if (v801 < 0) {
        operator delete(v800[0]);
      }
      if (v803 < 0) {
        operator delete(v802[0]);
      }
      if (v805 < 0) {
        operator delete(v804[0]);
      }
      if (v807 < 0) {
        operator delete(v806[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_4E2C((uint64_t)v940);
      sub_4B28((uint64_t)v939);
      v96 += 4LL;
    }

    while (v96 != 12);
    uint64_t v104 = 0LL;
    uint64_t v943 = 0x100000000FLL;
    int v944 = 17;
    do
    {
      BOOL v105 = v19 < 2;
      int v106 = *(_DWORD *)((char *)&v943 + v104);
      if (v106 != 15) {
        BOOL v105 = 0;
      }
      if (v106 >= 15 && !v105)
      {
        sub_27F0((uint64_t)&v938, v106, v18);
        sub_76B8( v788,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_33_5");
        sub_76B8(v786, "E01BD71065BD9CE02CFEEC935E09F6DE3C3B9EFAED8F187A533C6321069B4D85");
        uint64_t v107 = sub_2A38((uint64_t)&v938, (__int128 *)v788, (__int128 *)v786);
        sub_76B8( v784,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_36_8");
        sub_76B8(v782, "E01BD71065BD9CE02CFEEC935E09F6DE3C3B9EFAED8F187A533C6321069B4D85");
        uint64_t v108 = sub_2A38(v107, (__int128 *)v784, (__int128 *)v782);
        sub_76B8( v780,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_92_62");
        uint64_t v109 = sub_2C44(v108, (uint64_t)v780, 0.03125);
        sub_76B8( v778,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_91_61");
        __int128 v110 = (void *)sub_2C44(v109, (uint64_t)v778, 8.0);
        unint64_t v111 = a1[1];
        if (v111 >= a1[2])
        {
          uint64_t v112 = sub_56918(a1, v110);
        }

        else
        {
          sub_29F4(a1[1], v110);
          uint64_t v112 = v111 + 176;
          a1[1] = v111 + 176;
        }

        a1[1] = v112;
        if (v779 < 0) {
          operator delete(v778[0]);
        }
        if (v781 < 0) {
          operator delete(v780[0]);
        }
        if (v783 < 0) {
          operator delete(v782[0]);
        }
        if (v785 < 0) {
          operator delete(v784[0]);
        }
        if (v787 < 0) {
          operator delete(v786[0]);
        }
        if (v789 < 0) {
          operator delete(v788[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_4E2C((uint64_t)v940);
        sub_4B28((uint64_t)v939);
      }

      v104 += 4LL;
    }

    while (v104 != 12);
    uint64_t v113 = 0LL;
    uint64_t v943 = 0xE0000000DLL;
    int v944 = 15;
    do
    {
      BOOL v114 = v19 < 2;
      int v115 = *(_DWORD *)((char *)&v943 + v113);
      if (v115 != 15) {
        BOOL v114 = 0;
      }
      if (v115 < 15 || v114)
      {
        sub_27F0((uint64_t)&v938, v115, v18);
        sub_76B8( v776,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_33_5");
        sub_76B8(v774, "_3dfa6da703ded5b65a76ddf0aa3f7f28f19b4a624ef77347a925f55bf66a82f5");
        uint64_t v117 = sub_2A38((uint64_t)&v938, (__int128 *)v776, (__int128 *)v774);
        sub_76B8( v772,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_34_6");
        sub_76B8(v770, "_04619811825d9d1620326f0529902213ffb847ef304f2532afe9a5c8e581a633");
        uint64_t v118 = sub_2A38(v117, (__int128 *)v772, (__int128 *)v770);
        sub_76B8( v768,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_92_62");
        unint64_t v119 = (void *)sub_2C44(v118, (uint64_t)v768, 1.0);
        unint64_t v120 = a1[1];
        if (v120 >= a1[2])
        {
          uint64_t v121 = sub_56918(a1, v119);
        }

        else
        {
          sub_29F4(a1[1], v119);
          uint64_t v121 = v120 + 176;
          a1[1] = v120 + 176;
        }

        a1[1] = v121;
        if (v769 < 0) {
          operator delete(v768[0]);
        }
        if (v771 < 0) {
          operator delete(v770[0]);
        }
        if (v773 < 0) {
          operator delete(v772[0]);
        }
        if (v775 < 0) {
          operator delete(v774[0]);
        }
        if (v777 < 0) {
          operator delete(v776[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_4E2C((uint64_t)v940);
        sub_4B28((uint64_t)v939);
      }

      v113 += 4LL;
    }

    while (v113 != 12);
    uint64_t v122 = 0LL;
    uint64_t v943 = 0xB0000000ALL;
    int v944 = 12;
    do
    {
      sub_27F0((uint64_t)&v938, *(_DWORD *)((char *)&v943 + v122), v18);
      sub_76B8( v766,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_33_5");
      sub_76B8(v764, "_dcc19066dda99b0411d8c63a3e83f6f7f1d98ab35e1abb6ea67d0cc2c48fb902");
      uint64_t v123 = sub_2A38((uint64_t)&v938, (__int128 *)v766, (__int128 *)v764);
      sub_76B8( v762,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_33_5");
      sub_76B8(v760, "_cc8474cdb602b06dfa72a727bfb5880343cf4aaf48fcac51ca52c95d2d822fec");
      uint64_t v124 = sub_2A38(v123, (__int128 *)v762, (__int128 *)v760);
      sub_76B8( v758,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_34_6");
      sub_76B8(v756, "_1b0917f46330b000ef490421780d7f78dae3e7de9b1dca6b00ead766e1147535");
      uint64_t v125 = sub_2A38(v124, (__int128 *)v758, (__int128 *)v756);
      sub_76B8( v754,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_34_6");
      sub_76B8(v752, "_a1a96bea3f99234f22bda56eb11aba0c4b12ca3186d95a0d9b789dfec4b86cd2");
      uint64_t v126 = sub_2A38(v125, (__int128 *)v754, (__int128 *)v752);
      sub_76B8( v750,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_92_62");
      __int128 v127 = (void *)sub_2C44(v126, (uint64_t)v750, 0.5);
      unint64_t v128 = a1[1];
      if (v128 >= a1[2])
      {
        uint64_t v129 = sub_56918(a1, v127);
      }

      else
      {
        sub_29F4(a1[1], v127);
        uint64_t v129 = v128 + 176;
        a1[1] = v128 + 176;
      }

      a1[1] = v129;
      if (v751 < 0) {
        operator delete(v750[0]);
      }
      if (v753 < 0) {
        operator delete(v752[0]);
      }
      if (v755 < 0) {
        operator delete(v754[0]);
      }
      if (v757 < 0) {
        operator delete(v756[0]);
      }
      if (v759 < 0) {
        operator delete(v758[0]);
      }
      if (v761 < 0) {
        operator delete(v760[0]);
      }
      if (v763 < 0) {
        operator delete(v762[0]);
      }
      if (v765 < 0) {
        operator delete(v764[0]);
      }
      if (v767 < 0) {
        operator delete(v766[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_4E2C((uint64_t)v940);
      sub_4B28((uint64_t)v939);
      v122 += 4LL;
    }

    while (v122 != 12);
    uint64_t v130 = 0LL;
    uint64_t v943 = 0x100000000FLL;
    int v944 = 17;
    do
    {
      BOOL v131 = v19 < 2;
      int v132 = *(_DWORD *)((char *)&v943 + v130);
      if (v132 != 15) {
        BOOL v131 = 0;
      }
      if (v132 >= 15 && !v131)
      {
        sub_27F0((uint64_t)&v938, v132, v18);
        sub_76B8( v748,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_44_16");
        sub_76B8(v746, "0D32627A10C5DB983D8E5DF466E154001CBB4E945D22A4E280A08C8D0F1701A7");
        uint64_t v133 = sub_2A38((uint64_t)&v938, (__int128 *)v748, (__int128 *)v746);
        sub_76B8( v744,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_46_18");
        sub_76B8(v742, "0D32627A10C5DB983D8E5DF466E154001CBB4E945D22A4E280A08C8D0F1701A7");
        uint64_t v134 = sub_2A38(v133, (__int128 *)v744, (__int128 *)v742);
        sub_76B8( v740,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_93_63");
        uint64_t v135 = sub_2C44(v134, (uint64_t)v740, 0.03125);
        sub_76B8( v738,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_94_64");
        __int128 v136 = (void *)sub_2C44(v135, (uint64_t)v738, 8.0);
        unint64_t v137 = a1[1];
        if (v137 >= a1[2])
        {
          uint64_t v138 = sub_56918(a1, v136);
        }

        else
        {
          sub_29F4(a1[1], v136);
          uint64_t v138 = v137 + 176;
          a1[1] = v137 + 176;
        }

        a1[1] = v138;
        if (v739 < 0) {
          operator delete(v738[0]);
        }
        if (v741 < 0) {
          operator delete(v740[0]);
        }
        if (v743 < 0) {
          operator delete(v742[0]);
        }
        if (v745 < 0) {
          operator delete(v744[0]);
        }
        if (v747 < 0) {
          operator delete(v746[0]);
        }
        if (v749 < 0) {
          operator delete(v748[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_4E2C((uint64_t)v940);
        sub_4B28((uint64_t)v939);
      }

      v130 += 4LL;
    }

    while (v130 != 12);
    uint64_t v139 = 0LL;
    uint64_t v943 = 0xE0000000DLL;
    int v944 = 15;
    do
    {
      BOOL v140 = v19 < 2;
      int v141 = *(_DWORD *)((char *)&v943 + v139);
      if (v141 != 15) {
        BOOL v140 = 0;
      }
      if (v141 < 15 || v140)
      {
        sub_27F0((uint64_t)&v938, v141, v18);
        sub_76B8( v736,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_44_16");
        sub_76B8(v734, "_5d6a90a3c3f5d373b4784fb5f1f7aa7743084eba64d8294172d1185916b9bd1c");
        uint64_t v143 = sub_2A38((uint64_t)&v938, (__int128 *)v736, (__int128 *)v734);
        sub_76B8( v732,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_44_16");
        sub_76B8(v730, "_7227f357f8a21cdbc5daa79f9084b3bc5cc765c17918eb28fb2cf4cc3a5781e2");
        uint64_t v144 = sub_2A38(v143, (__int128 *)v732, (__int128 *)v730);
        sub_76B8( v728,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_45_17");
        sub_76B8(v726, "_e24075c611924196d3fa333bd6f2a6afab121c5355fbadd312da8989dd52ce15");
        uint64_t v145 = sub_2A38(v144, (__int128 *)v728, (__int128 *)v726);
        sub_76B8( v724,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_45_17");
        sub_76B8(v722, "_16eb6d6baefae7585a774d494fadd8137c12d14e93540aecbcf238f844009d01");
        uint64_t v146 = sub_2A38(v145, (__int128 *)v724, (__int128 *)v722);
        sub_76B8( v720,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_46_18");
        sub_76B8(v718, "_c83d8e1815183224c98c397c7f4c229e49bf0e3ff37dc1950a9728afbcb30048");
        uint64_t v147 = sub_2A38(v146, (__int128 *)v720, (__int128 *)v718);
        sub_76B8( v716,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_46_18");
        sub_76B8(v714, "_3c3dc9a24c6f8ab640c0ea8f6372c66cec9c6d0ac7a42871c7d4ee9d78918fb2");
        uint64_t v148 = sub_2A38(v147, (__int128 *)v716, (__int128 *)v714);
        sub_76B8( v712,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_93_63");
        uint64_t v149 = sub_2C44(v148, (uint64_t)v712, 1.0);
        sub_76B8( v710,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_94_64");
        uint64_t v150 = (void *)sub_2C44(v149, (uint64_t)v710, 128.0);
        unint64_t v151 = a1[1];
        if (v151 >= a1[2])
        {
          uint64_t v152 = sub_56918(a1, v150);
        }

        else
        {
          sub_29F4(a1[1], v150);
          uint64_t v152 = v151 + 176;
          a1[1] = v151 + 176;
        }

        a1[1] = v152;
        if (v711 < 0) {
          operator delete(v710[0]);
        }
        if (v713 < 0) {
          operator delete(v712[0]);
        }
        if (v715 < 0) {
          operator delete(v714[0]);
        }
        if (v717 < 0) {
          operator delete(v716[0]);
        }
        if (v719 < 0) {
          operator delete(v718[0]);
        }
        if (v721 < 0) {
          operator delete(v720[0]);
        }
        if (v723 < 0) {
          operator delete(v722[0]);
        }
        if (v725 < 0) {
          operator delete(v724[0]);
        }
        if (v727 < 0) {
          operator delete(v726[0]);
        }
        if (v729 < 0) {
          operator delete(v728[0]);
        }
        if (v731 < 0) {
          operator delete(v730[0]);
        }
        if (v733 < 0) {
          operator delete(v732[0]);
        }
        if (v735 < 0) {
          operator delete(v734[0]);
        }
        if (v737 < 0) {
          operator delete(v736[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_4E2C((uint64_t)v940);
        sub_4B28((uint64_t)v939);
      }

      v139 += 4LL;
    }

    while (v139 != 12);
    uint64_t v153 = 0LL;
    uint64_t v943 = 0xB0000000ALL;
    int v944 = 12;
    do
    {
      sub_27F0((uint64_t)&v938, *(_DWORD *)((char *)&v943 + v153), v18);
      sub_76B8( v708,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_44_16");
      sub_76B8(v706, "_4f6aebbe216cd96fa4684995ac68478cbdb59c6706480ecbbb9f101d892bb540");
      uint64_t v154 = sub_2A38((uint64_t)&v938, (__int128 *)v708, (__int128 *)v706);
      sub_76B8( v704,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_44_16");
      sub_76B8(v702, "_9cdfd7e41cd0f7bedf5e73de71cff7713d55d7876ed3ceb192b859bbeacd355c");
      uint64_t v155 = sub_2A38(v154, (__int128 *)v704, (__int128 *)v702);
      sub_76B8( v700,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_45_17");
      sub_76B8(v698, "_6adb9f77137d1ea24fd389dc7b4ce3e0f4941ef6c4bd10a5a9069a0508c21096");
      uint64_t v156 = sub_2A38(v155, (__int128 *)v700, (__int128 *)v698);
      sub_76B8( v696,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_45_17");
      sub_76B8(v694, "_28ec30e5d700201a445959b85812ddc5d67051822f1dedd35fcff019f9373467");
      uint64_t v157 = sub_2A38(v156, (__int128 *)v696, (__int128 *)v694);
      sub_76B8( v692,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_43_15");
      sub_76B8(v690, "_7297c7ee63bc3f774b2e5f2e665cd87efcbf40dd3e6b66a9c08f8ebfdae4019e");
      uint64_t v158 = sub_2A38(v157, (__int128 *)v692, (__int128 *)v690);
      sub_76B8( v688,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_43_15");
      sub_76B8(v686, "_302f5158ec17e76ab08ef2d34c39bb819212a714ce814287bfd08e80024ad038");
      uint64_t v159 = sub_2A38(v158, (__int128 *)v688, (__int128 *)v686);
      sub_76B8( v684,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_93_63");
      __int128 v160 = (void *)sub_2C44(v159, (uint64_t)v684, 0.25);
      unint64_t v161 = a1[1];
      if (v161 >= a1[2])
      {
        uint64_t v162 = sub_56918(a1, v160);
      }

      else
      {
        sub_29F4(a1[1], v160);
        uint64_t v162 = v161 + 176;
        a1[1] = v161 + 176;
      }

      a1[1] = v162;
      if (v685 < 0) {
        operator delete(v684[0]);
      }
      if (v687 < 0) {
        operator delete(v686[0]);
      }
      if (v689 < 0) {
        operator delete(v688[0]);
      }
      if (v691 < 0) {
        operator delete(v690[0]);
      }
      if (v693 < 0) {
        operator delete(v692[0]);
      }
      if (v695 < 0) {
        operator delete(v694[0]);
      }
      if (v697 < 0) {
        operator delete(v696[0]);
      }
      if (v699 < 0) {
        operator delete(v698[0]);
      }
      if (v701 < 0) {
        operator delete(v700[0]);
      }
      if (v703 < 0) {
        operator delete(v702[0]);
      }
      if (v705 < 0) {
        operator delete(v704[0]);
      }
      if (v707 < 0) {
        operator delete(v706[0]);
      }
      if (v709 < 0) {
        operator delete(v708[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_4E2C((uint64_t)v940);
      sub_4B28((uint64_t)v939);
      v153 += 4LL;
    }

    while (v153 != 12);
    uint64_t v163 = 0LL;
    uint64_t v943 = 0x100000000FLL;
    int v944 = 17;
    do
    {
      BOOL v164 = v19 < 2;
      int v165 = *(_DWORD *)((char *)&v943 + v163);
      if (v165 != 15) {
        BOOL v164 = 0;
      }
      if (v165 >= 15 && !v164)
      {
        sub_27F0((uint64_t)&v938, v165, v18);
        sub_76B8( v682,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_49_21");
        sub_76B8(v680, "B6C42286FD0AB628E79B9D4F5F10DC31C2DFD460570800BEB5C9E53651363C7D");
        uint64_t v166 = sub_2A38((uint64_t)&v938, (__int128 *)v682, (__int128 *)v680);
        sub_76B8( v678,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_47_19");
        sub_76B8(v676, "B6C42286FD0AB628E79B9D4F5F10DC31C2DFD460570800BEB5C9E53651363C7D");
        uint64_t v167 = sub_2A38(v166, (__int128 *)v678, (__int128 *)v676);
        sub_76B8( v674,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_95_65");
        uint64_t v168 = sub_2C44(v167, (uint64_t)v674, 0.03125);
        sub_76B8( v672,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_96_66");
        __int128 v169 = (void *)sub_2C44(v168, (uint64_t)v672, 8.0);
        unint64_t v170 = a1[1];
        if (v170 >= a1[2])
        {
          uint64_t v171 = sub_56918(a1, v169);
        }

        else
        {
          sub_29F4(a1[1], v169);
          uint64_t v171 = v170 + 176;
          a1[1] = v170 + 176;
        }

        a1[1] = v171;
        if (v673 < 0) {
          operator delete(v672[0]);
        }
        if (v675 < 0) {
          operator delete(v674[0]);
        }
        if (v677 < 0) {
          operator delete(v676[0]);
        }
        if (v679 < 0) {
          operator delete(v678[0]);
        }
        if (v681 < 0) {
          operator delete(v680[0]);
        }
        if (v683 < 0) {
          operator delete(v682[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_4E2C((uint64_t)v940);
        sub_4B28((uint64_t)v939);
      }

      v163 += 4LL;
    }

    while (v163 != 12);
    uint64_t v172 = 0LL;
    uint64_t v943 = 0xE0000000DLL;
    int v944 = 15;
    do
    {
      BOOL v173 = v19 < 2;
      int v174 = *(_DWORD *)((char *)&v943 + v172);
      if (v174 != 15) {
        BOOL v173 = 0;
      }
      if (v174 < 15 || v173)
      {
        sub_27F0((uint64_t)&v938, v174, v18);
        sub_76B8( v670,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_49_21");
        sub_76B8(v668, "_a6959c95ec387b8177c7952dc2b0442397db237352d2eaac83f58ec8a91891b7");
        uint64_t v176 = sub_2A38((uint64_t)&v938, (__int128 *)v670, (__int128 *)v668);
        sub_76B8( v666,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_49_21");
        sub_76B8(v664, "_464535adf580fe38c8fab89c8ad5a40e7c554a788650a011f8466f784654dd52");
        uint64_t v177 = sub_2A38(v176, (__int128 *)v666, (__int128 *)v664);
        sub_76B8( v662,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_50_22");
        sub_76B8(v660, "_9569b663f07ab9906139babb5dc9f9f6f4d1efb9d094eb0bacf3d139d1c7f5be");
        uint64_t v178 = sub_2A38(v177, (__int128 *)v662, (__int128 *)v660);
        sub_76B8( v658,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_50_22");
        sub_76B8(v656, "_61da94edb1fd5147230f175dd36cb2c626394d3b2f750c7e3dad70653c868aba");
        uint64_t v179 = sub_2A38(v178, (__int128 *)v658, (__int128 *)v656);
        sub_76B8( v654,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_47_19");
        sub_76B8(v652, "_5412071a0e3ec24e2f545d0476454725457124ae557a2da54285da8204d334db");
        uint64_t v180 = sub_2A38(v179, (__int128 *)v654, (__int128 *)v652);
        sub_76B8( v650,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_47_19");
        sub_76B8(v648, "_77c64a76c3a1882e7551dd3fa1188c7e4a8a0872b57fd0cb1587664cab0899eb");
        uint64_t v181 = sub_2A38(v180, (__int128 *)v650, (__int128 *)v648);
        sub_76B8( v646,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_95_65");
        uint64_t v182 = sub_2C44(v181, (uint64_t)v646, 1.0);
        sub_76B8( v644,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_96_66");
        uint64_t v183 = (void *)sub_2C44(v182, (uint64_t)v644, 128.0);
        unint64_t v184 = a1[1];
        if (v184 >= a1[2])
        {
          uint64_t v185 = sub_56918(a1, v183);
        }

        else
        {
          sub_29F4(a1[1], v183);
          uint64_t v185 = v184 + 176;
          a1[1] = v184 + 176;
        }

        a1[1] = v185;
        if (v645 < 0) {
          operator delete(v644[0]);
        }
        if (v647 < 0) {
          operator delete(v646[0]);
        }
        if (v649 < 0) {
          operator delete(v648[0]);
        }
        if (v651 < 0) {
          operator delete(v650[0]);
        }
        if (v653 < 0) {
          operator delete(v652[0]);
        }
        if (v655 < 0) {
          operator delete(v654[0]);
        }
        if (v657 < 0) {
          operator delete(v656[0]);
        }
        if (v659 < 0) {
          operator delete(v658[0]);
        }
        if (v661 < 0) {
          operator delete(v660[0]);
        }
        if (v663 < 0) {
          operator delete(v662[0]);
        }
        if (v665 < 0) {
          operator delete(v664[0]);
        }
        if (v667 < 0) {
          operator delete(v666[0]);
        }
        if (v669 < 0) {
          operator delete(v668[0]);
        }
        if (v671 < 0) {
          operator delete(v670[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_4E2C((uint64_t)v940);
        sub_4B28((uint64_t)v939);
      }

      v172 += 4LL;
    }

    while (v172 != 12);
    uint64_t v186 = 0LL;
    uint64_t v943 = 0xC0000000BLL;
    do
    {
      sub_27F0((uint64_t)&v938, *(_DWORD *)((char *)&v943 + v186), v18);
      sub_76B8( v642,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_49_21");
      sub_76B8(v640, "_968353d331d798ff8c65ce5f1d5294c1f4bcd54f8004fe37c0ec8e0327bdb887");
      uint64_t v187 = sub_2A38((uint64_t)&v938, (__int128 *)v642, (__int128 *)v640);
      sub_76B8( v638,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_49_21");
      sub_76B8(v636, "_db7bf2f7b343f9696051ffea283afce6cecf26ab478ddb2f2d46e68f4e83a5f1");
      uint64_t v188 = sub_2A38(v187, (__int128 *)v638, (__int128 *)v636);
      sub_76B8( v634,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_50_22");
      sub_76B8(v632, "_4ce8c39578a4732a6c0258355819e9fd7b199ccd3aee51f117a33230e1c23c2a");
      uint64_t v189 = sub_2A38(v188, (__int128 *)v634, (__int128 *)v632);
      sub_76B8( v630,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_50_22");
      sub_76B8(v628, "_f695d9489766916cc7b4575aead0a5120678f6ac54c7940bc8837ee6f64f8c5a");
      uint64_t v190 = sub_2A38(v189, (__int128 *)v630, (__int128 *)v628);
      sub_76B8( v626,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_48_20");
      sub_76B8(v624, "_192193e6c7ce23b86614fecbd983be5c3d4ea08d47c42ee19db85a736c0cbf7e");
      uint64_t v191 = sub_2A38(v190, (__int128 *)v626, (__int128 *)v624);
      sub_76B8( v622,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_48_20");
      sub_76B8(v620, "_f803fbcc00ceb66df21019f6dba7192937dcd274bd128a72102021004bf1bbc5");
      uint64_t v192 = sub_2A38(v191, (__int128 *)v622, (__int128 *)v620);
      sub_76B8( v618,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_95_65");
      __int128 v193 = (void *)sub_2C44(v192, (uint64_t)v618, 0.25);
      unint64_t v194 = a1[1];
      if (v194 >= a1[2])
      {
        uint64_t v195 = sub_56918(a1, v193);
      }

      else
      {
        sub_29F4(a1[1], v193);
        uint64_t v195 = v194 + 176;
        a1[1] = v194 + 176;
      }

      a1[1] = v195;
      if (v619 < 0) {
        operator delete(v618[0]);
      }
      if (v621 < 0) {
        operator delete(v620[0]);
      }
      if (v623 < 0) {
        operator delete(v622[0]);
      }
      if (v625 < 0) {
        operator delete(v624[0]);
      }
      if (v627 < 0) {
        operator delete(v626[0]);
      }
      if (v629 < 0) {
        operator delete(v628[0]);
      }
      if (v631 < 0) {
        operator delete(v630[0]);
      }
      if (v633 < 0) {
        operator delete(v632[0]);
      }
      if (v635 < 0) {
        operator delete(v634[0]);
      }
      if (v637 < 0) {
        operator delete(v636[0]);
      }
      if (v639 < 0) {
        operator delete(v638[0]);
      }
      if (v641 < 0) {
        operator delete(v640[0]);
      }
      if (v643 < 0) {
        operator delete(v642[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_4E2C((uint64_t)v940);
      sub_4B28((uint64_t)v939);
      v186 += 4LL;
    }

    while (v186 != 8);
    uint64_t v196 = 0LL;
    uint64_t v943 = 0xC0000000BLL;
    do
    {
      sub_27F0((uint64_t)&v938, *(_DWORD *)((char *)&v943 + v196), v18);
      sub_76B8( v616,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_49_21");
      sub_76B8(v614, "_968353d331d798ff8c65ce5f1d5294c1f4bcd54f8004fe37c0ec8e0327bdb887");
      uint64_t v197 = sub_2A38((uint64_t)&v938, (__int128 *)v616, (__int128 *)v614);
      sub_76B8( v612,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_49_21");
      sub_76B8(v610, "_db7bf2f7b343f9696051ffea283afce6cecf26ab478ddb2f2d46e68f4e83a5f1");
      uint64_t v198 = sub_2A38(v197, (__int128 *)v612, (__int128 *)v610);
      sub_76B8( v608,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_50_22");
      sub_76B8(v606, "_b22547623b585b14c5b8c85d49ccc42d6bfbb77f64e443ea518f37d34c0f1069");
      uint64_t v199 = sub_2A38(v198, (__int128 *)v608, (__int128 *)v606);
      sub_76B8( v604,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_50_22");
      sub_76B8(v602, "_a128f99af1d196435cf6f78f481310a31f61ce52f25c5601cc30c563469d604c");
      uint64_t v200 = sub_2A38(v199, (__int128 *)v604, (__int128 *)v602);
      sub_76B8( v600,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_93_63");
      unint64_t v201 = (void *)sub_2C44(v200, (uint64_t)v600, 0.25);
      unint64_t v202 = a1[1];
      if (v202 >= a1[2])
      {
        uint64_t v203 = sub_56918(a1, v201);
      }

      else
      {
        sub_29F4(a1[1], v201);
        uint64_t v203 = v202 + 176;
        a1[1] = v202 + 176;
      }

      a1[1] = v203;
      if (v601 < 0) {
        operator delete(v600[0]);
      }
      if (v603 < 0) {
        operator delete(v602[0]);
      }
      if (v605 < 0) {
        operator delete(v604[0]);
      }
      if (v607 < 0) {
        operator delete(v606[0]);
      }
      if (v609 < 0) {
        operator delete(v608[0]);
      }
      if (v611 < 0) {
        operator delete(v610[0]);
      }
      if (v613 < 0) {
        operator delete(v612[0]);
      }
      if (v615 < 0) {
        operator delete(v614[0]);
      }
      if (v617 < 0) {
        operator delete(v616[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_4E2C((uint64_t)v940);
      sub_4B28((uint64_t)v939);
      v196 += 4LL;
    }

    while (v196 != 8);
    uint64_t v204 = 0LL;
    uint64_t v943 = 0xE0000000DLL;
    int v944 = 15;
    do
    {
      BOOL v205 = v19 < 2;
      int v206 = *(_DWORD *)((char *)&v943 + v204);
      if (v206 != 15) {
        BOOL v205 = 0;
      }
      if (v206 < 15 || v205)
      {
        sub_27F0((uint64_t)&v938, v206, v18);
        sub_76B8( v598,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_51_23");
        sub_76B8(v596, "_1e24b9b53884e278180f1249a5bb0bcbdabb20e50e98be9258f48dc3b8d601cd");
        uint64_t v208 = sub_2A38((uint64_t)&v938, (__int128 *)v598, (__int128 *)v596);
        sub_76B8( v594,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_51_23");
        sub_76B8(v592, "_102d161027c9cd6bf8752b3bcbbe48ec7879b593c584521ed0be10b44ee0f74c");
        uint64_t v209 = sub_2A38(v208, (__int128 *)v594, (__int128 *)v592);
        sub_76B8( v590,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_52_24");
        sub_76B8(v588, "_cc7546f381d9a442a4b723d9dd8d5ddf0bfca3942df436e95e607619d355ca59");
        uint64_t v210 = sub_2A38(v209, (__int128 *)v590, (__int128 *)v588);
        sub_76B8( v586,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_52_24");
        sub_76B8(v584, "_f6aba336a7053251ccdb48a792232046e64961084645e162a508593a1676624d");
        __int128 v211 = (void *)sub_2A38(v210, (__int128 *)v586, (__int128 *)v584);
        unint64_t v212 = a1[1];
        if (v212 >= a1[2])
        {
          uint64_t v213 = sub_56918(a1, v211);
        }

        else
        {
          sub_29F4(a1[1], v211);
          uint64_t v213 = v212 + 176;
          a1[1] = v212 + 176;
        }

        a1[1] = v213;
        if (v585 < 0) {
          operator delete(v584[0]);
        }
        if (v587 < 0) {
          operator delete(v586[0]);
        }
        if (v589 < 0) {
          operator delete(v588[0]);
        }
        if (v591 < 0) {
          operator delete(v590[0]);
        }
        if (v593 < 0) {
          operator delete(v592[0]);
        }
        if (v595 < 0) {
          operator delete(v594[0]);
        }
        if (v597 < 0) {
          operator delete(v596[0]);
        }
        if (v599 < 0) {
          operator delete(v598[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_4E2C((uint64_t)v940);
        sub_4B28((uint64_t)v939);
      }

      v204 += 4LL;
    }

    while (v204 != 12);
    uint64_t v214 = 0LL;
    uint64_t v943 = 0x100000000FLL;
    int v944 = 17;
    do
    {
      BOOL v215 = v19 < 2;
      int v216 = *(_DWORD *)((char *)&v943 + v214);
      if (v216 != 15) {
        BOOL v215 = 0;
      }
      if (v216 >= 15 && !v215)
      {
        sub_27F0((uint64_t)&v938, v216, v18);
        sub_76B8( v582,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_59_31");
        sub_76B8(v580, "79E88035C9BC883D403F17831B8C9264E643C6B76E9B3C1451B49B0F672C32BF");
        uint64_t v217 = sub_2A38((uint64_t)&v938, (__int128 *)v582, (__int128 *)v580);
        sub_76B8( v578,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_60_32");
        sub_76B8(v576, "260130B343BA0695AB911D986B3870FA0CCD0EC58E6F55895A856F37201CE9F8");
        uint64_t v218 = sub_2A38(v217, (__int128 *)v578, (__int128 *)v576);
        sub_76B8( v574,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_61_33");
        sub_76B8(v572, "AA1E812506867A5F2C54D3BA3268DB5C4BB2C6B0E4F500340DD23C4E1E637D9D");
        uint64_t v219 = sub_2A38(v218, (__int128 *)v574, (__int128 *)v572);
        sub_76B8( v570,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_62_34");
        sub_76B8(v568, "100299043F027ADADB62685130C7FBE549E29F08B58C365844FF8EC25BAEEAB0");
        uint64_t v220 = sub_2A38(v219, (__int128 *)v570, (__int128 *)v568);
        sub_76B8( v566,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_63_35");
        sub_76B8(v564, "3476066F46CC277DE7616AAAD8FCDF2C28DA42293B231F74A62159EB6EDAC78C");
        uint64_t v221 = sub_2A38(v220, (__int128 *)v566, (__int128 *)v564);
        sub_76B8( v562,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_64_36");
        sub_76B8(v560, "5D4640C1160E691CF9E1DA7FE475482756D03567716B9856424469B31049A457");
        uint64_t v222 = sub_2A38(v221, (__int128 *)v562, (__int128 *)v560);
        sub_76B8( v558,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_65_37");
        sub_76B8(v556, "295D65BB175E4E4EEF9003E008E093043C9B8CE43190BE0A2D8F1771F9837033");
        uint64_t v223 = sub_2A38(v222, (__int128 *)v558, (__int128 *)v556);
        sub_76B8( v554,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_66_38");
        sub_76B8(v552, "547021D0E82D62B7841769A23FC7FE04F7A63B8A0528A3F6E4C67E8B9420360E");
        uint64_t v224 = sub_2A38(v223, (__int128 *)v554, (__int128 *)v552);
        sub_76B8( v550,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_67_39");
        sub_76B8(v548, "4BF63E209F7D92B4E8341476C80013664D3299327C72E7A7F0D16E1CBD4904FC");
        uint64_t v225 = sub_2A38(v224, (__int128 *)v550, (__int128 *)v548);
        sub_76B8( v546,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_68_40");
        sub_76B8(v544, "76F5A23AACC27615C980BE3E58B52994192195866836855BCA7C3F885796297B");
        uint64_t v226 = sub_2A38(v225, (__int128 *)v546, (__int128 *)v544);
        sub_76B8( v542,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_69_41");
        sub_76B8(v540, "3856FBD8576C0AA988700D7EF5787AAAE94A3BBFBB393B0426FA9D379DA69C91");
        uint64_t v227 = sub_2A38(v226, (__int128 *)v542, (__int128 *)v540);
        sub_76B8( v538,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_70_42");
        sub_76B8(v536, "1FFBA951E06F1A7810DC823264210F0C13273E454D699383F3D6265630FEDD53");
        uint64_t v228 = sub_2A38(v227, (__int128 *)v538, (__int128 *)v536);
        sub_76B8( v534,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_53_25");
        sub_76B8(v532, "F89408CC4F2E499CED47E61E0AFD929E01C44D079ADF0B440EF845B984DE4956");
        uint64_t v229 = sub_2A38(v228, (__int128 *)v534, (__int128 *)v532);
        sub_76B8( v530,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_54_26");
        sub_76B8(v528, "3EBB72814821E8E8DB302E61197BC3AC6B0A02119FCD0C86BCFA54EB1B511AD2");
        uint64_t v230 = sub_2A38(v229, (__int128 *)v530, (__int128 *)v528);
        sub_76B8( v526,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_55_27");
        sub_76B8(v524, "7FD8B674D9FE018B3D64EA31CB94787780CD12317B2764B9BAFB60C975CDC8EB");
        uint64_t v231 = sub_2A38(v230, (__int128 *)v526, (__int128 *)v524);
        sub_76B8( v522,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_56_28");
        sub_76B8(v520, "0DAB6425F1EAC005798A5E8220F97E433817AADFE2490BD4F4B762C38F20E22B");
        uint64_t v232 = sub_2A38(v231, (__int128 *)v522, (__int128 *)v520);
        sub_76B8( v518,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_111_81");
        uint64_t v233 = sub_2C44(v232, (uint64_t)v518, 0.25);
        sub_76B8( v516,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_112_82");
        uint64_t v234 = sub_2C44(v233, (uint64_t)v516, 0.25);
        sub_76B8( v514,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_113_83");
        uint64_t v235 = sub_2C44(v234, (uint64_t)v514, 0.25);
        sub_76B8( v512,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_114_84");
        uint64_t v236 = sub_2C44(v235, (uint64_t)v512, 0.25);
        sub_76B8( v510,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_115_85");
        uint64_t v237 = sub_2C44(v236, (uint64_t)v510, 0.25);
        sub_76B8( v508,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_116_86");
        uint64_t v238 = sub_2C44(v237, (uint64_t)v508, 0.5);
        sub_76B8( v506,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_118_88");
        uint64_t v239 = sub_2C44(v238, (uint64_t)v506, 0.125);
        sub_76B8( v504,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_117_87");
        uint64_t v240 = sub_2C44(v239, (uint64_t)v504, 0.0625);
        sub_76B8( v502,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_119_89");
        uint64_t v241 = sub_2C44(v240, (uint64_t)v502, 32.0);
        sub_76B8( v500,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_120_90");
        double v242 = (void *)sub_2C44(v241, (uint64_t)v500, 0.5);
        unint64_t v243 = a1[1];
        if (v243 >= a1[2])
        {
          uint64_t v244 = sub_56918(a1, v242);
        }

        else
        {
          sub_29F4(a1[1], v242);
          uint64_t v244 = v243 + 176;
          a1[1] = v243 + 176;
        }

        a1[1] = v244;
        if (v501 < 0) {
          operator delete(v500[0]);
        }
        if (v503 < 0) {
          operator delete(v502[0]);
        }
        if (v505 < 0) {
          operator delete(v504[0]);
        }
        if (v507 < 0) {
          operator delete(v506[0]);
        }
        if (v509 < 0) {
          operator delete(v508[0]);
        }
        if (v511 < 0) {
          operator delete(v510[0]);
        }
        if (v513 < 0) {
          operator delete(v512[0]);
        }
        if (v515 < 0) {
          operator delete(v514[0]);
        }
        if (v517 < 0) {
          operator delete(v516[0]);
        }
        if (v519 < 0) {
          operator delete(v518[0]);
        }
        if (v521 < 0) {
          operator delete(v520[0]);
        }
        if (v523 < 0) {
          operator delete(v522[0]);
        }
        if (v525 < 0) {
          operator delete(v524[0]);
        }
        if (v527 < 0) {
          operator delete(v526[0]);
        }
        if (v529 < 0) {
          operator delete(v528[0]);
        }
        if (v531 < 0) {
          operator delete(v530[0]);
        }
        if (v533 < 0) {
          operator delete(v532[0]);
        }
        if (v535 < 0) {
          operator delete(v534[0]);
        }
        if (v537 < 0) {
          operator delete(v536[0]);
        }
        if (v539 < 0) {
          operator delete(v538[0]);
        }
        if (v541 < 0) {
          operator delete(v540[0]);
        }
        if (v543 < 0) {
          operator delete(v542[0]);
        }
        if (v545 < 0) {
          operator delete(v544[0]);
        }
        if (v547 < 0) {
          operator delete(v546[0]);
        }
        if (v549 < 0) {
          operator delete(v548[0]);
        }
        if (v551 < 0) {
          operator delete(v550[0]);
        }
        if (v553 < 0) {
          operator delete(v552[0]);
        }
        if (v555 < 0) {
          operator delete(v554[0]);
        }
        if (v557 < 0) {
          operator delete(v556[0]);
        }
        if (v559 < 0) {
          operator delete(v558[0]);
        }
        if (v561 < 0) {
          operator delete(v560[0]);
        }
        if (v563 < 0) {
          operator delete(v562[0]);
        }
        if (v565 < 0) {
          operator delete(v564[0]);
        }
        if (v567 < 0) {
          operator delete(v566[0]);
        }
        if (v569 < 0) {
          operator delete(v568[0]);
        }
        if (v571 < 0) {
          operator delete(v570[0]);
        }
        if (v573 < 0) {
          operator delete(v572[0]);
        }
        if (v575 < 0) {
          operator delete(v574[0]);
        }
        if (v577 < 0) {
          operator delete(v576[0]);
        }
        if (v579 < 0) {
          operator delete(v578[0]);
        }
        if (v581 < 0) {
          operator delete(v580[0]);
        }
        if (v583 < 0) {
          operator delete(v582[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_4E2C((uint64_t)v940);
        sub_4B28((uint64_t)v939);
      }

      v214 += 4LL;
    }

    while (v214 != 12);
    uint64_t v245 = 0LL;
    uint64_t v943 = 0xE0000000DLL;
    int v944 = 15;
    do
    {
      BOOL v246 = v19 < 2;
      int v247 = *(_DWORD *)((char *)&v943 + v245);
      if (v247 != 15) {
        BOOL v246 = 0;
      }
      if (v247 < 15 || v246)
      {
        sub_27F0((uint64_t)&v938, v247, v18);
        sub_76B8( v498,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_57_29");
        sub_76B8(v496, "_c4c7e4c8f7b6488a9a980bba9f849c9e5d8e4bbb1e2c134cef7620b6faf7d6a2");
        uint64_t v249 = sub_2A38((uint64_t)&v938, (__int128 *)v498, (__int128 *)v496);
        sub_76B8( v494,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_57_29");
        sub_76B8(v492, "_ce4b66ffe276175a6a391d11a059d703038b1a404e718e896201733b1a75da1a");
        uint64_t v250 = sub_2A38(v249, (__int128 *)v494, (__int128 *)v492);
        sub_76B8( v490,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_58_30");
        sub_76B8(v488, "_d201fed97c60848e3714502b203a0ad4e2820937c140dbf6a9db1cb31be194dd");
        uint64_t v251 = sub_2A38(v250, (__int128 *)v490, (__int128 *)v488);
        sub_76B8( v486,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_58_30");
        sub_76B8(v484, "_b6f09ea2a13fd988f6f30d7af8022025303b9324416c9447517205110fc3c18d");
        uint64_t v252 = sub_2A38(v251, (__int128 *)v486, (__int128 *)v484);
        sub_76B8( v482,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_117_87");
        __int128 v253 = (void *)sub_2C44(v252, (uint64_t)v482, 2.0);
        unint64_t v254 = a1[1];
        if (v254 >= a1[2])
        {
          uint64_t v255 = sub_56918(a1, v253);
        }

        else
        {
          sub_29F4(a1[1], v253);
          uint64_t v255 = v254 + 176;
          a1[1] = v254 + 176;
        }

        a1[1] = v255;
        if (v483 < 0) {
          operator delete(v482[0]);
        }
        if (v485 < 0) {
          operator delete(v484[0]);
        }
        if (v487 < 0) {
          operator delete(v486[0]);
        }
        if (v489 < 0) {
          operator delete(v488[0]);
        }
        if (v491 < 0) {
          operator delete(v490[0]);
        }
        if (v493 < 0) {
          operator delete(v492[0]);
        }
        if (v495 < 0) {
          operator delete(v494[0]);
        }
        if (v497 < 0) {
          operator delete(v496[0]);
        }
        if (v499 < 0) {
          operator delete(v498[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_4E2C((uint64_t)v940);
        sub_4B28((uint64_t)v939);
      }

      v245 += 4LL;
    }

    while (v245 != 12);
    sub_27F0((uint64_t)&v938, 12, v18);
    sub_76B8( v480,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_57_29");
    sub_76B8(v478, "_c4c7e4c8f7b6488a9a980bba9f849c9e5d8e4bbb1e2c134cef7620b6faf7d6a2");
    uint64_t v256 = sub_2A38((uint64_t)&v938, (__int128 *)v480, (__int128 *)v478);
    sub_76B8( v476,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_57_29");
    sub_76B8(v474, "_ce4b66ffe276175a6a391d11a059d703038b1a404e718e896201733b1a75da1a");
    uint64_t v257 = sub_2A38(v256, (__int128 *)v476, (__int128 *)v474);
    sub_76B8( v472,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_58_30");
    sub_76B8(v470, "_d201fed97c60848e3714502b203a0ad4e2820937c140dbf6a9db1cb31be194dd");
    uint64_t v258 = sub_2A38(v257, (__int128 *)v472, (__int128 *)v470);
    sub_76B8( v468,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_58_30");
    sub_76B8(v466, "_b6f09ea2a13fd988f6f30d7af8022025303b9324416c9447517205110fc3c18d");
    uint64_t v259 = sub_2A38(v258, (__int128 *)v468, (__int128 *)v466);
    sub_76B8( v464,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_117_87");
    double v260 = (void *)sub_2C44(v259, (uint64_t)v464, 2.0);
    unint64_t v261 = a1[1];
    if (v261 >= a1[2])
    {
      uint64_t v262 = sub_56918(a1, v260);
    }

    else
    {
      sub_29F4(a1[1], v260);
      uint64_t v262 = v261 + 176;
      a1[1] = v261 + 176;
    }

    a1[1] = v262;
    if (v465 < 0) {
      operator delete(v464[0]);
    }
    if (v467 < 0) {
      operator delete(v466[0]);
    }
    if (v469 < 0) {
      operator delete(v468[0]);
    }
    if (v471 < 0) {
      operator delete(v470[0]);
    }
    if (v473 < 0) {
      operator delete(v472[0]);
    }
    if (v475 < 0) {
      operator delete(v474[0]);
    }
    if (v477 < 0) {
      operator delete(v476[0]);
    }
    if (v479 < 0) {
      operator delete(v478[0]);
    }
    if (v481 < 0) {
      operator delete(v480[0]);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
    sub_4E2C((uint64_t)v940);
    sub_4B28((uint64_t)v939);
    sub_27F0((uint64_t)&v938, 11, v18);
    sub_76B8( v462,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_57_29");
    sub_76B8(v460, "_c4c7e4c8f7b6488a9a980bba9f849c9e5d8e4bbb1e2c134cef7620b6faf7d6a2");
    uint64_t v263 = sub_2A38((uint64_t)&v938, (__int128 *)v462, (__int128 *)v460);
    sub_76B8( v458,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_57_29");
    sub_76B8(v456, "_ce4b66ffe276175a6a391d11a059d703038b1a404e718e896201733b1a75da1a");
    uint64_t v264 = sub_2A38(v263, (__int128 *)v458, (__int128 *)v456);
    sub_76B8( v454,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_58_30");
    sub_76B8(v452, "_d201fed97c60848e3714502b203a0ad4e2820937c140dbf6a9db1cb31be194dd");
    uint64_t v265 = sub_2A38(v264, (__int128 *)v454, (__int128 *)v452);
    sub_76B8( v450,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_58_30");
    sub_76B8(v448, "_b6f09ea2a13fd988f6f30d7af8022025303b9324416c9447517205110fc3c18d");
    uint64_t v266 = sub_2A38(v265, (__int128 *)v450, (__int128 *)v448);
    sub_76B8( v446,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Derive dCounters/AGXPSLimiters.cpp_117_87");
    __int128 v267 = (void *)sub_2C44(v266, (uint64_t)v446, 0.5);
    unint64_t v268 = a1[1];
    if (v268 >= a1[2])
    {
      uint64_t v269 = sub_56918(a1, v267);
    }

    else
    {
      sub_29F4(a1[1], v267);
      uint64_t v269 = v268 + 176;
      a1[1] = v268 + 176;
    }

    a1[1] = v269;
    if (v447 < 0) {
      operator delete(v446[0]);
    }
    if (v449 < 0) {
      operator delete(v448[0]);
    }
    if (v451 < 0) {
      operator delete(v450[0]);
    }
    if (v453 < 0) {
      operator delete(v452[0]);
    }
    if (v455 < 0) {
      operator delete(v454[0]);
    }
    if (v457 < 0) {
      operator delete(v456[0]);
    }
    if (v459 < 0) {
      operator delete(v458[0]);
    }
    if (v461 < 0) {
      operator delete(v460[0]);
    }
    if (v463 < 0) {
      operator delete(v462[0]);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
    sub_4E2C((uint64_t)v940);
    sub_4B28((uint64_t)v939);
    for (uint64_t j = 0LL; j != 5; ++j)
    {
      sub_27F0((uint64_t)&v938, dword_313804[j], v18);
      sub_76B8( v444,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_71_43");
      sub_76B8(v442, "_d54a22a6f6eb41ec901489f9e47263886645d322e2546360a6622d2c6bdeddb9");
      uint64_t v271 = sub_2A38((uint64_t)&v938, (__int128 *)v444, (__int128 *)v442);
      sub_76B8( v440,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_72_44");
      sub_76B8(v438, "_426da530d7dc3093409acc82244bf8b45bf25ffbf6f37a2b37e2afcb9f76bde4");
      uint64_t v272 = sub_2A38(v271, (__int128 *)v440, (__int128 *)v438);
      sub_76B8( v436,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_121_91");
      uint64_t v273 = sub_2C44(v272, (uint64_t)v436, 0.125);
      sub_76B8( v434,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_122_92");
      __int128 v274 = (void *)sub_2C44(v273, (uint64_t)v434, 0.0625);
      unint64_t v275 = a1[1];
      if (v275 >= a1[2])
      {
        uint64_t v276 = sub_56918(a1, v274);
      }

      else
      {
        sub_29F4(a1[1], v274);
        uint64_t v276 = v275 + 176;
        a1[1] = v275 + 176;
      }

      a1[1] = v276;
      if (v435 < 0) {
        operator delete(v434[0]);
      }
      if (v437 < 0) {
        operator delete(v436[0]);
      }
      if (v439 < 0) {
        operator delete(v438[0]);
      }
      if (v441 < 0) {
        operator delete(v440[0]);
      }
      if (v443 < 0) {
        operator delete(v442[0]);
      }
      if (v445 < 0) {
        operator delete(v444[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_4E2C((uint64_t)v940);
      sub_4B28((uint64_t)v939);
    }

    uint64_t v277 = 0LL;
    uint64_t v943 = 0xB0000000ALL;
    int v944 = 12;
    do
    {
      sub_27F0((uint64_t)&v938, *(_DWORD *)((char *)&v943 + v277), v18);
      sub_76B8( v432,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_71_43");
      sub_76B8(v430, "_e04363b0193aecfc56d5f1c5edb7fc2147625522e4ecdb3a8d24ae32f45eaa5c");
      uint64_t v278 = sub_2A38((uint64_t)&v938, (__int128 *)v432, (__int128 *)v430);
      sub_76B8( v428,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_72_44");
      sub_76B8(v426, "_f89636291d4d2848204d266a1eff5d7b231750cc967f91d005cb1fc30779b1cc");
      uint64_t v279 = sub_2A38(v278, (__int128 *)v428, (__int128 *)v426);
      sub_76B8( v424,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_121_91");
      __int128 v280 = (void *)sub_2C44(v279, (uint64_t)v424, 1.0);
      unint64_t v281 = a1[1];
      if (v281 >= a1[2])
      {
        uint64_t v282 = sub_56918(a1, v280);
      }

      else
      {
        sub_29F4(a1[1], v280);
        uint64_t v282 = v281 + 176;
        a1[1] = v281 + 176;
      }

      a1[1] = v282;
      if (v425 < 0) {
        operator delete(v424[0]);
      }
      if (v427 < 0) {
        operator delete(v426[0]);
      }
      if (v429 < 0) {
        operator delete(v428[0]);
      }
      if (v431 < 0) {
        operator delete(v430[0]);
      }
      if (v433 < 0) {
        operator delete(v432[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_4E2C((uint64_t)v940);
      sub_4B28((uint64_t)v939);
      v277 += 4LL;
    }

    while (v277 != 12);
    for (uint64_t k = 0LL; k != 8; ++k)
    {
      int v284 = dword_3137C8[k];
      sub_27F0((uint64_t)&v938, v284, v18);
      sub_76B8( v422,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_73_45");
      sub_76B8(v420, "_6d86d89a09a872e62b809325d49d6967e2327aa5d1d4ea471d700f29696b9560");
      uint64_t v285 = sub_2A38((uint64_t)&v938, (__int128 *)v422, (__int128 *)v420);
      sub_76B8( v418,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_74_46");
      sub_76B8(v416, "_871eb7474b854b92c49783a16238fd7c52ef56150d0f4caa839424650bcb6f32");
      uint64_t v286 = sub_2A38(v285, (__int128 *)v418, (__int128 *)v416);
      sub_76B8( v414,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_123_93");
      uint64_t v287 = sub_2C44(v286, (uint64_t)v414, 0.5);
      sub_76B8( v412,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_124_94");
      uint64_t v288 = sub_2C44(v287, (uint64_t)v412, 8.0);
      sub_76B8( v410,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/Deri vedCounters/AGXPSLimiters.cpp_125_95");
      BOOL v290 = v284 == 15 && v19 < 2 || v284 < 15;
      double v291 = 128.0;
      if (v290) {
        double v291 = 64.0;
      }
      __int128 v292 = (void *)sub_2C44(v288, (uint64_t)v410, v291);
      unint64_t v293 = a1[1];
      if (v293 >= a1[2])
      {
        uint64_t v294 = sub_56918(a1, v292);
      }

      else
      {
        sub_29F4(a1[1], v292);
        uint64_t v294 = v293 + 176;
        a1[1] = v293 + 176;
      }

      a1[1] = v294;
      if (v411 < 0) {
        operator delete(v410[0]);
      }
      if (v413 < 0) {
        operator delete(v412[0]);
      }
      if (v415 < 0) {
        operator delete(v414[0]);
      }
      if (v417 < 0) {
        operator delete(v416[0]);
      }
      if (v419 < 0) {
        operator delete(v418[0]);
      }
      if (v421 < 0) {
        operator delete(v420[0]);
      }
      if (v423 < 0) {
        operator delete(v422[0]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_4E2C((uint64_t)v940);
      sub_4B28((uint64_t)v939);
    }

    for (uint64_t m = 0LL; m != 8; ++m)
    {
      BOOL v296 = v19 < 2;
      int v297 = dword_3137C8[m];
      if (v297 != 15) {
        BOOL v296 = 0;
      }
      if (v297 >= 15 && !v296)
      {
        sub_27F0((uint64_t)&v938, v297, v18);
        sub_76B8( v398,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_75_47");
        sub_76B8(v396, "_8ff5f6e1c2e52558354049aef96f7abf429f223a3fc4e626292d894456e02fc2");
        uint64_t v304 = sub_2A38((uint64_t)&v938, (__int128 *)v398, (__int128 *)v396);
        sub_76B8( v394,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_76_48");
        sub_76B8(v392, "_da0afb5d20fd710a2f7ce18da42b2a53dc3d3fcfe45ac35c28e75d4402986d37");
        uint64_t v305 = sub_2A38(v304, (__int128 *)v394, (__int128 *)v392);
        sub_76B8( v390,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_126_96");
        char v306 = (void *)sub_2C44(v305, (uint64_t)v390, 1.0);
        unint64_t v307 = a1[1];
        if (v307 >= a1[2])
        {
          uint64_t v308 = sub_56918(a1, v306);
        }

        else
        {
          sub_29F4(a1[1], v306);
          uint64_t v308 = v307 + 176;
          a1[1] = v307 + 176;
        }

        a1[1] = v308;
        if (v391 < 0) {
          operator delete(v390[0]);
        }
        if (v393 < 0) {
          operator delete(v392[0]);
        }
        if (v395 < 0) {
          operator delete(v394[0]);
        }
        if (v397 < 0) {
          operator delete(v396[0]);
        }
        if (v399 < 0)
        {
          uint64_t v309 = v398[0];
          goto LABEL_812;
        }
      }

      else
      {
        sub_27F0((uint64_t)&v938, v297, v18);
        sub_76B8( &v408,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_75_47");
        sub_76B8(v406, "_bb9dbea90df77e54beebae872b35923d727fd2a59d6905410b32092d6d561402");
        uint64_t v299 = sub_2A38((uint64_t)&v938, &v408, (__int128 *)v406);
        sub_76B8( v404,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_76_48");
        sub_76B8(v402, "_63b42fb9d33e39b5f913060438c759d841275b394631cb7a8145853e9a04ef67");
        uint64_t v300 = sub_2A38(v299, (__int128 *)v404, (__int128 *)v402);
        sub_76B8( v400,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_126_96");
        __int128 v301 = (void *)sub_2C44(v300, (uint64_t)v400, 1.0);
        unint64_t v302 = a1[1];
        if (v302 >= a1[2])
        {
          uint64_t v303 = sub_56918(a1, v301);
        }

        else
        {
          sub_29F4(a1[1], v301);
          uint64_t v303 = v302 + 176;
          a1[1] = v302 + 176;
        }

        a1[1] = v303;
        if (v401 < 0) {
          operator delete(v400[0]);
        }
        if (v403 < 0) {
          operator delete(v402[0]);
        }
        if (v405 < 0) {
          operator delete(v404[0]);
        }
        if (v407 < 0) {
          operator delete(v406[0]);
        }
        if (v409 < 0)
        {
          uint64_t v309 = (void *)v408;
LABEL_812:
          operator delete(v309);
        }
      }

      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_4E2C((uint64_t)v940);
      uint64_t result = sub_4B28((uint64_t)v939);
    }

    uint64_t v311 = 0LL;
    uint64_t v943 = 0x100000000FLL;
    int v944 = 17;
    do
    {
      BOOL v312 = v19 < 2;
      int v313 = *(_DWORD *)((char *)&v943 + v311);
      if (v313 != 15) {
        BOOL v312 = 0;
      }
      if (v313 >= 15 && !v312)
      {
        sub_27F0((uint64_t)&v938, v313, v18);
        sub_76B8( v388,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_127_97");
        uint64_t v314 = sub_2C44((uint64_t)&v938, (uint64_t)v388, 8.0);
        sub_76B8( v386,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_128_98");
        uint64_t v315 = (void *)sub_2C44(v314, (uint64_t)v386, 128.0);
        unint64_t v316 = a1[1];
        if (v316 >= a1[2])
        {
          uint64_t v317 = sub_56918(a1, v315);
        }

        else
        {
          sub_29F4(a1[1], v315);
          uint64_t v317 = v316 + 176;
          a1[1] = v316 + 176;
        }

        a1[1] = v317;
        if (v387 < 0) {
          operator delete(v386[0]);
        }
        if (v389 < 0) {
          operator delete(v388[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_4E2C((uint64_t)v940);
        uint64_t result = sub_4B28((uint64_t)v939);
      }

      v311 += 4LL;
    }

    while (v311 != 12);
    for (uint64_t n = 0LL; n != 6; ++n)
    {
      BOOL v319 = v19 < 2;
      int v320 = dword_313818[n];
      if (v320 != 15) {
        BOOL v319 = 0;
      }
      if (v320 < 15 || v319)
      {
        sub_27F0((uint64_t)&v938, v320, v18);
        sub_76B8( v384,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_77_49");
        sub_76B8(v382, "_9492ca9a91eedcc95e1741334edf1a3855869e882d2b6adc820c2c5e1850532f");
        uint64_t v322 = sub_2A38((uint64_t)&v938, (__int128 *)v384, (__int128 *)v382);
        sub_76B8( v380,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_77_49");
        sub_76B8(v378, "_4bb4a72bfa974f38e0143eef87e93ae69847e8612684f014350fb4a8c0692050");
        uint64_t v323 = sub_2A38(v322, (__int128 *)v380, (__int128 *)v378);
        sub_76B8( v376,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_78_50");
        sub_76B8(v374, "_4309079a0b69c765325f6ac5313a4b1c75a2fa562cbb0c420ac0dd80de814ccd");
        uint64_t v324 = sub_2A38(v323, (__int128 *)v376, (__int128 *)v374);
        sub_76B8( v372,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_78_50");
        sub_76B8(v370, "_367a60a3f4d39b45114c57a560ad1bad4f9f62798346ead3a98f790ad32537a6");
        uint64_t v325 = sub_2A38(v324, (__int128 *)v372, (__int128 *)v370);
        sub_76B8( v368,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_79_51");
        sub_76B8(v366, "_4088b7c5932a1a8ba88b39e4d641d4f8c3b7ec56ebf78a9c3e7f5b8bffea84d6");
        uint64_t v326 = sub_2A38(v325, (__int128 *)v368, (__int128 *)v366);
        sub_76B8( v364,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_79_51");
        sub_76B8(v362, "_6b3a9b25a65b692ad1039bcc4c052d5a85e40a9410946c0cdf5dc85d993e2131");
        double v327 = (void *)sub_2A38(v326, (__int128 *)v364, (__int128 *)v362);
        unint64_t v328 = a1[1];
        if (v328 >= a1[2])
        {
          uint64_t v329 = sub_56918(a1, v327);
        }

        else
        {
          sub_29F4(a1[1], v327);
          uint64_t v329 = v328 + 176;
          a1[1] = v328 + 176;
        }

        a1[1] = v329;
        if (v363 < 0) {
          operator delete(v362[0]);
        }
        if (v365 < 0) {
          operator delete(v364[0]);
        }
        if (v367 < 0) {
          operator delete(v366[0]);
        }
        if (v369 < 0) {
          operator delete(v368[0]);
        }
        if (v371 < 0) {
          operator delete(v370[0]);
        }
        if (v373 < 0) {
          operator delete(v372[0]);
        }
        if (v375 < 0) {
          operator delete(v374[0]);
        }
        if (v377 < 0) {
          operator delete(v376[0]);
        }
        if (v379 < 0) {
          operator delete(v378[0]);
        }
        if (v381 < 0) {
          operator delete(v380[0]);
        }
        if (v383 < 0) {
          operator delete(v382[0]);
        }
        if (v385 < 0) {
          operator delete(v384[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_4E2C((uint64_t)v940);
        uint64_t result = sub_4B28((uint64_t)v939);
      }
    }

    uint64_t v330 = 0LL;
    uint64_t v943 = 0x100000000FLL;
    int v944 = 17;
    do
    {
      BOOL v331 = v19 < 2;
      int v332 = *(_DWORD *)((char *)&v943 + v330);
      if (v332 != 15) {
        BOOL v331 = 0;
      }
      if (v332 >= 15 && !v331)
      {
        if (v332 == 16 && v18 == 3) {
          double v334 = 1024.0;
        }
        else {
          double v334 = 768.0;
        }
        sub_27F0((uint64_t)&v938, v332, v18);
        sub_76B8( v360,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_141_110");
        uint64_t v335 = sub_2C44((uint64_t)&v938, (uint64_t)v360, 1.0);
        sub_76B8( v358,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_140_109");
        uint64_t v336 = sub_2C44(v335, (uint64_t)v358, v334);
        sub_76B8( v356,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_143_111");
        uint64_t v337 = sub_2C44(v336, (uint64_t)v356, 96.0);
        sub_76B8( v354,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_144_112");
        uint64_t v338 = sub_2C44(v337, (uint64_t)v354, 8.0);
        sub_76B8( v352,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_145_113");
        uint64_t v339 = sub_2C44(v338, (uint64_t)v352, 1.0);
        sub_76B8( v350,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_147_114");
        uint64_t v340 = sub_2C44(v339, (uint64_t)v350, 16.0);
        sub_76B8( v348,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_148_115");
        uint64_t v341 = sub_2C44(v340, (uint64_t)v348, 8.0);
        sub_76B8( v346,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_149_116");
        int v342 = (void *)sub_2C44(v341, (uint64_t)v346, 1.0);
        unint64_t v343 = a1[1];
        if (v343 >= a1[2])
        {
          uint64_t v344 = sub_56918(a1, v342);
        }

        else
        {
          sub_29F4(a1[1], v342);
          uint64_t v344 = v343 + 176;
          a1[1] = v343 + 176;
        }

        a1[1] = v344;
        if (v347 < 0) {
          operator delete(v346[0]);
        }
        if (v349 < 0) {
          operator delete(v348[0]);
        }
        if (v351 < 0) {
          operator delete(v350[0]);
        }
        if (v353 < 0) {
          operator delete(v352[0]);
        }
        if (v355 < 0) {
          operator delete(v354[0]);
        }
        if (v357 < 0) {
          operator delete(v356[0]);
        }
        if (v359 < 0) {
          operator delete(v358[0]);
        }
        if (v361 < 0) {
          operator delete(v360[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_4E2C((uint64_t)v940);
        uint64_t result = sub_4B28((uint64_t)v939);
      }

      v330 += 4LL;
    }

    while (v330 != 12);
    uint64_t v16 = v345 + 1;
  }

  while (v345 != 5);
  return result;
}

void sub_54508(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  if (SLOBYTE(STACK[0x4D7]) < 0) {
    operator delete((void *)STACK[0x4C0]);
  }
  if (SLOBYTE(STACK[0x4EF]) < 0) {
    operator delete((void *)STACK[0x4D8]);
  }
  if (SLOBYTE(STACK[0x507]) < 0) {
    operator delete((void *)STACK[0x4F0]);
  }
  if (SLOBYTE(STACK[0x51F]) < 0) {
    operator delete((void *)STACK[0x508]);
  }
  if (SLOBYTE(STACK[0x537]) < 0) {
    operator delete((void *)STACK[0x520]);
  }
  if (SLOBYTE(STACK[0x54F]) < 0) {
    operator delete((void *)STACK[0x538]);
  }
  if (SLOBYTE(STACK[0x567]) < 0) {
    operator delete((void *)STACK[0x550]);
  }
  if (SLOBYTE(STACK[0x57F]) < 0) {
    operator delete((void *)STACK[0x568]);
  }
  if (SLOBYTE(STACK[0x597]) < 0) {
    operator delete((void *)STACK[0x580]);
  }
  sub_29F8((uint64_t)&STACK[0x1BD0]);
  *(void *)(v3 - 192) = v1;
  sub_9760((void ***)(v3 - 192));
  _Unwind_Resume(a1);
}

int *sub_56300(unsigned int *a1, uint64_t a2)
{
  uint64_t v4 = sub_56344(a1, a2);
  uint64_t v5 = sub_56540(a1, a2);
  return sub_A18C(v4, v5);
}

int *sub_56344(unsigned int *a1, uint64_t a2)
{
  uint64_t v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "EED11884758646FD70438F8D2661EC13F25DF1E40EC651E073736D2EFDAB9F0D");
  uint64_t v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "D1922B4CF1F4DC1E2062378D34EE4E6EAB398BD0417BC95E5EF60C5C1F53E035");
  uint64_t v6 = sub_A18C(v4, v5);
  uint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "DFF91EC9DAE4F9D14485F569D87B6AC75F93DD47C850ACF09E9DD7A3D0EFCE8A");
  uint64_t v8 = sub_A18C(v6, v7);
  uint64_t v9 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "3FAA4DE8275531852B39C91E52291523AEA993A6114D2CF7645F7C8AC1EF27CE");
  uint64_t v10 = sub_A18C(v8, v9);
  uint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "0AF6A9208DBB7C0C06A19C4C9090BF87CF00BBEE2BDFD9E0C49423DD641C1174");
  uint64_t v12 = sub_A18C(v10, v11);
  unsigned int v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "0D32627A10C5DB983D8E5DF466E154001CBB4E945D22A4E280A08C8D0F1701A7");
  unint64_t v14 = sub_A18C(v12, v13);
  int gen = agxps_gpu_get_gen(a1);
  int variant = agxps_gpu_get_variant((uint64_t)a1);
  int rev = agxps_gpu_get_rev((uint64_t)a1);
  if (gen != 15 || variant != 3 || rev != 1)
  {
    int v18 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "3CCBBD2DBDE74F294638B5661472C6041FD802D082125437CB926C2F4E201182");
    unint64_t v14 = sub_A18C(v14, v18);
  }

  BOOL v20 = gen == 15 && variant > 2;
  if (gen != 16 && !v20 && (gen != 17 || variant > 2)) {
    return v14;
  }
  double v21 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "E4079A9FE3685ED6370986B0373FFC91E49069A610571534C42255467036D7CD");
  unint64_t v22 = sub_A18C(v14, v21);
  uint64_t v23 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "11F678510139CFDE77DC68F07F633C61D28564C9B207D45849B5E6AB72B41E0A");
  return sub_A18C(v22, v23);
}

int *sub_56540(unsigned int *a1, uint64_t a2)
{
  uint64_t v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "E01BD71065BD9CE02CFEEC935E09F6DE3C3B9EFAED8F187A533C6321069B4D85");
  uint64_t v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "7D8633F6EB10ABA43002BB46D28FA26BFFA1093AB39728908221CE3FD922C72D");
  uint64_t v6 = sub_A18C(v4, v5);
  uint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "8F37B8C186E20EAB68B65FA965112E8C106205370CA0829C3EBD548C49C99A46");
  uint64_t v8 = sub_A18C(v6, v7);
  uint64_t v9 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "6FFBFD65F64B0F892C812D9952748E8632E02C4DF155F5E233927E6D0DC88D38");
  uint64_t v10 = sub_A18C(v8, v9);
  uint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "6CFA2D1125EAFC658FDF0E2F1A1B4F8D315296A1AFB116D0A8ECF669C026FF69");
  uint64_t v12 = sub_A18C(v10, v11);
  unsigned int v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "B6C42286FD0AB628E79B9D4F5F10DC31C2DFD460570800BEB5C9E53651363C7D");
  unint64_t v14 = sub_A18C(v12, v13);
  int gen = agxps_gpu_get_gen(a1);
  int variant = agxps_gpu_get_variant((uint64_t)a1);
  int rev = agxps_gpu_get_rev((uint64_t)a1);
  if (gen != 15 || variant != 3 || rev != 1)
  {
    int v18 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "0597494BBDA7FA995805FB01DD8AD6D81CC143C09F8EFB86702288F745E3F791");
    unint64_t v14 = sub_A18C(v14, v18);
  }

  BOOL v20 = gen == 15 && variant > 2;
  if (gen != 16 && !v20 && (gen != 17 || variant > 2)) {
    return v14;
  }
  double v21 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "6060A012307BC0711368543129DC26F4493F2C5C30CAF9D4F782C065929930B3");
  unint64_t v22 = sub_A18C(v14, v21);
  uint64_t v23 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))( a2,  "9C397DD48F0AD6AAD1F9B2ABA077E5808FA3D4E452B659013FF3CEC6D1EB1472");
  return sub_A18C(v22, v23);
}

BOOL sub_5673C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t length = agxps_timeseries_get_length(a1);
  BOOL result = agxps_gpu_is_valid(a1);
  if (result)
  {
    BOOL result = agxps_gpu_is_valid(a2);
    if (result)
    {
      BOOL result = agxps_gpu_is_valid(a3);
      if (result)
      {
        BOOL result = agxps_gpu_is_valid(a4);
        if (result) {
          return agxps_timeseries_get_length(a2) == length
        }
              && agxps_timeseries_get_length(a3) == length
              && agxps_timeseries_get_length(a4) == length;
      }
    }
  }

  return result;
}

int *sub_567E4(uint64_t a1, uint64_t (***a2)(void, const char *))
{
  uint64_t v4 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a1 + 16LL))( a1,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_59_31");
  uint64_t v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a1 + 16LL))( a1,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_61_33");
  uint64_t v6 = sub_A18C(v4, v5);
  uint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a1 + 16LL))( a1,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_65_37");
  uint64_t v8 = sub_A18C(v6, v7);
  uint64_t v9 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a1 + 16LL))( a1,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp ort/DerivedCounters/AGXPSLimiters.cpp_63_35");
  int v10 = (**a2)( a2,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/De rivedCounters/AGXPSLimiters.cpp_120_90");
  uint64_t v12 = sub_E1D0(v9, v10, v11);
  unsigned int v13 = sub_A18C(v8, v12);
  unint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a1 + 16LL))( a1,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSup port/DerivedCounters/AGXPSLimiters.cpp_67_39");
  uint64_t v15 = sub_A18C(v13, v14);
  uint64_t v16 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a1 + 16LL))( a1,  "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSup port/DerivedCounters/AGXPSLimiters.cpp_69_41");
  return sub_A18C(v15, v16);
}

uint64_t sub_56918(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3LL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3LL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v9 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)sub_56AA8(v7, v9);
  }
  else {
    int v10 = 0LL;
  }
  unsigned int v13 = v10;
  unint64_t v14 = &v10[176 * v4];
  uint64_t v16 = &v10[176 * v9];
  sub_29F4((uint64_t)v14, a2);
  uint64_t v15 = v14 + 176;
  sub_56A34(a1, &v13);
  uint64_t v11 = a1[1];
  sub_56C2C(&v13);
  return v11;
}

void sub_56A20(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_56A34(uint64_t *a1, void *a2)
{
  uint64_t result = sub_56AF0((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_56AA8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745ELL) {
    sub_21DC();
  }
  return operator new(176 * a2);
}

uint64_t sub_56AF0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + 1) = a7;
  __int128 v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    unint64_t v9 = a3;
    do
    {
      v9 -= 22;
      sub_29F4(v7 - 176, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 176LL;
      *((void *)&v15 + 1) -= 176LL;
    }

    while (v9 != a5);
    uint64_t v10 = v15;
  }

  char v13 = 1;
  sub_56BA8((uint64_t)v12);
  return v10;
}

void sub_56B94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_56BA8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_56BDC((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_56BDC(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_97E4(v3, v1);
      v1 += 176LL;
    }

    while (v1 != v2);
  }

  return result;
}

void **sub_56C2C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_56C5C(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + sub_4B28(v1 + 16) = v1 - 176;
      uint64_t result = sub_97E4(v4, v1 - 176);
      uint64_t v1 = *(void *)(v3 + 16);
    }

    while (v1 != v2);
  }

  return result;
}

void *sub_56CA0()
{
  return &_os_log_disabled;
}

uint64_t sub_56CAC(uint64_t a1, int *a2)
{
  uint64_t v3 = agxps_timeseries_div_ts(a2, 0, 0x41D0000000000000uLL, a2, 0);
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 8LL))(a1, v3);
}

void sub_56CF0(uint64_t a1@<X0>, const void *a2@<X1>, char **a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
    goto LABEL_8;
  }

  uint64_t v6 = (void *)sub_2E60(v5);
  v25[0] = a2;
  v25[1] = (const void *)strlen((const char *)a2);
  uint64_t v7 = sub_5853C(v6, v25);
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  if (!v7)
  {
LABEL_8:
    char v13 = (char *)operator new(8uLL);
    *a3 = v13;
    *(void *)char v13 = a2;
    v13 += 8;
    a3[1] = v13;
    a3[2] = v13;
    return;
  }

  unint64_t v9 = v7;
  uint64_t v10 = v8;
  if (v7 == v8)
  {
    unint64_t v11 = 0LL;
  }

  else
  {
    unint64_t v11 = 0LL;
    uint64_t v12 = v7;
    do
    {
      ++v11;
      uint64_t v12 = (uint64_t **)*v12;
    }

    while (v12 != v10);
  }

  sub_56EBC((void **)a3, v11);
  if (v9 != v10)
  {
    __int128 v14 = a3 + 2;
    __int128 v15 = a3[1];
    do
    {
      if ((unint64_t)v15 >= *v14)
      {
        uint64_t v16 = (v15 - *a3) >> 3;
        uint64_t v17 = *v14 - (void)*a3;
        uint64_t v18 = v17 >> 2;
        else {
          unint64_t v19 = v18;
        }
        if (v19) {
          BOOL v20 = (char *)sub_21A8((uint64_t)(a3 + 2), v19);
        }
        else {
          BOOL v20 = 0LL;
        }
        double v21 = &v20[8 * v16];
        *(void *)double v21 = v9[4];
        __int128 v15 = v21 + 8;
        uint64_t v23 = *a3;
        unint64_t v22 = a3[1];
        if (v22 != *a3)
        {
          do
          {
            uint64_t v24 = *((void *)v22 - 1);
            v22 -= 8;
            *((void *)v21 - 1) = v24;
            v21 -= 8;
          }

          while (v22 != v23);
          unint64_t v22 = *a3;
        }

        *a3 = v21;
        a3[1] = v15;
        a3[2] = &v20[8 * v19];
        if (v22) {
          operator delete(v22);
        }
      }

      else
      {
        *(void *)__int128 v15 = v9[4];
        v15 += 8;
      }

      a3[1] = v15;
      unint64_t v9 = (uint64_t **)*v9;
    }

    while (v9 != v10);
  }

void sub_56E98(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_56EBC(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_2120();
    }
    int64_t v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    uint64_t v6 = (char *)sub_21A8(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8LL];
    unint64_t v9 = &v6[8 * v8];
    unint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }

      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }

    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10) {
      operator delete(v10);
    }
  }

void *sub_56F50(void *a1)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  sub_A050((uint64_t)a1);
  return a1;
}

void sub_56F7C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void ***sub_56F98(void ***a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    do
      agxps_timeseries_destroy(*v2++);
    while (v2 != v3);
    uint64_t v2 = *a1;
  }

  if (v2)
  {
    a1[1] = v2;
    operator delete(v2);
  }

  return a1;
}

void *sub_57000(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = agxps_timeseries_create(a2, a3);
  int64_t v5 = v4;
  unint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void **)(a1 + 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = *(void **)a1;
    uint64_t v10 = ((uint64_t)v7 - *(void *)a1) >> 3;
    unint64_t v11 = v10 + 1;
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      __int128 v14 = (char *)sub_21A8(a1 + 16, v13);
      unint64_t v9 = *(void **)a1;
      uint64_t v7 = *(void **)(a1 + 8);
    }

    else
    {
      __int128 v14 = 0LL;
    }

    __int128 v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    *(void *)__int128 v15 = v5;
    uint64_t v8 = v15 + 8;
    while (v7 != v9)
    {
      uint64_t v17 = *--v7;
      *((void *)v15 - 1) = v17;
      v15 -= 8;
    }

    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + sub_4B28(v1 + 16) = v16;
    if (v9) {
      operator delete(v9);
    }
  }

  else
  {
    *uint64_t v7 = v4;
    uint64_t v8 = v7 + 1;
  }

  *(void *)(a1 + 8) = v8;
  return v5;
}

void *agxps_derived_counter_gpu_descriptor_create( int a1, int a2, char **a3, char **a4, uint64_t a5, char **a6, double *a7, uint64_t a8)
{
  uint64_t v8 = a8;
  unint64_t v9 = a7;
  uint64_t v10 = a6;
  uint64_t v11 = a5;
  uint64_t v12 = a4;
  unint64_t v13 = a3;
  if (!a5 || (uint64_t v16 = 0LL, a3) && a4)
  {
    if (!a8 || (uint64_t v16 = 0LL, a6) && a7)
    {
      uint64_t v16 = operator new(0xB0uLL);
      sub_27F0((uint64_t)v16, a1, a2);
      for (; v11; --v11)
      {
        sub_76B8(v22, *v13);
        sub_76B8(__p, *v12);
        sub_2A38((uint64_t)v16, (__int128 *)v22, (__int128 *)__p);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
        if (v23 < 0) {
          operator delete(v22[0]);
        }
        ++v12;
        ++v13;
      }

      for (; v8; --v8)
      {
        sub_76B8(v18, *v10);
        sub_2C44((uint64_t)v16, (uint64_t)v18, *v9);
        if (v19 < 0) {
          operator delete(v18[0]);
        }
        ++v9;
        ++v10;
      }
    }
  }

  return v16;
}

void sub_57224( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
}

uint64_t agxps_counter_get_raw_counters_used_by_derived_counters( unsigned int *a1, unint64_t *a2, uint64_t a3, void *a4, void *a5)
{
  BOOL is_valid = agxps_gpu_is_valid((uint64_t)a1);
  if (a2) {
    BOOL v11 = is_valid;
  }
  else {
    BOOL v11 = 0;
  }
  if (!a3) {
    BOOL v11 = 0;
  }
  if (!a4) {
    BOOL v11 = 0;
  }
  if (a5) {
    uint64_t result = v11;
  }
  else {
    uint64_t result = 0LL;
  }
  if ((_DWORD)result == 1)
  {
    char v23 = a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v26 = 1065353216;
    do
    {
      unint64_t v13 = *a2;
      if (agxps_counter_is_derived(*a2))
      {
        double v38 = &off_58D7B8;
        memset(v39, 0, sizeof(v39));
        int v40 = 1065353216;
        uint64_t v35 = &off_58D7B8;
        memset(v36, 0, sizeof(v36));
        int v37 = 1065353216;
        __int128 v14 = sub_3060(a1);
        v28[0] = (unint64_t)off_58D7D0;
        v28[1] = (unint64_t)v14;
        v28[2] = (unint64_t)a1;
        v28[3] = (unint64_t)&v38;
        v28[4] = (unint64_t)&v35;
        __int128 __p = 0u;
        __int128 v31 = 0u;
        __int128 v32 = 0u;
        memset(v33, 0, sizeof(v33));
        int v29 = 1;
        int v34 = 1065353216;
        sub_56F50(v27);
        __int128 v15 = sub_30D8(v13);
        sub_2294( (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v15,  (uint64_t)a1,  (uint64_t)v28,  (uint64_t)&v38,  (uint64_t)&v35,  (uint64_t)v27);
        uint64_t v17 = (unint64_t **)*((void *)&v31 + 1);
        uint64_t v16 = (unint64_t **)v32;
        while (v17 != v16)
        {
          char v19 = *v17;
          uint64_t v18 = v17[1];
          while (v19 != v18)
          {
            sub_57D70((uint64_t)&v24, v19, v19);
            ++v19;
          }

          v17 += 3;
        }

        sub_56F98(v27);
        v28[0] = (unint64_t)off_58D7D0;
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v33);
        v27[0] = (void **)&v31 + 1;
        std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100](v27);
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
        }

        uint64_t v35 = &off_58D7B8;
        sub_4E2C((uint64_t)v36);
        double v38 = &off_58D7B8;
        sub_4E2C((uint64_t)v39);
      }

      ++a2;
      --a3;
    }

    while (a3);
    v28[0] = agxps_counter_get_ident(a1, kAGXPSCounterGPUCycles);
    sub_586C0(&v24, v28);
    v28[0] = agxps_counter_get_ident(a1, kAGXPSCounterDeltaSeconds);
    sub_586C0(&v24, v28);
    uint64_t v20 = *((void *)&v25 + 1);
    void *v23 = *((void *)&v25 + 1);
    if (v20)
    {
      char v21 = malloc(8 * v20);
      *a4 = v21;
      for (uint64_t i = (void *)v25; i; uint64_t i = (void *)*i)
        *v21++ = i[2];
    }

    else
    {
      *a4 = 0LL;
    }

    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v24);
    return 1LL;
  }

  return result;
}

void sub_574FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *__p, uint64_t a30)
{
}

uint64_t sub_57590(uint64_t a1, char *a2)
{
  uint64_t v2 = a1 + 8;
  sub_76B8(__p, a2);
  sub_57600(v2, (unsigned __int8 *)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_575E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_57600(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_5CF0(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(void **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t v16 = (void *)(a1 + 16);
  uint64_t i = operator new(0x28uLL);
  *(void *)uint64_t i = 0LL;
  *((void *)i + 1) = v9;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((void *)i + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0LL;
  *(void *)(a3 + 8) = 0LL;
  *(void *)(a3 + sub_4B28(v1 + 16) = 0LL;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1LL;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_573C(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  uint64_t v23 = *(void *)a1;
  __int128 v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_38:
    *__int128 v24 = i;
    goto LABEL_39;
  }

  *(void *)uint64_t i = *v16;
  void *v16 = i;
  *(void *)(v23 + 8 * v3) = v16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8LL);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }

    else
    {
      v25 &= v10 - 1;
    }

    __int128 v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }

void sub_57864( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_57880(uint64_t a1, uint64_t a2)
{
  uint64_t ident = agxps_counter_get_ident(*(unsigned int **)(a1 + 16), kAGXPSCounterGPUCycles);
  char v5 = operator new(8uLL);
  __int128 __p = v5;
  *char v5 = ident;
  unint64_t v8 = v5 + 1;
  unint64_t v9 = v5 + 1;
  sub_57A9C(a1, (unint64_t **)&__p);
  if (__p)
  {
    unint64_t v8 = __p;
    operator delete(__p);
  }

  return a2;
}

void sub_578F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_57914(uint64_t a1, uint64_t a2)
{
  uint64_t ident = agxps_counter_get_ident(*(unsigned int **)(a1 + 16), kAGXPSCounterDeltaSeconds);
  char v5 = operator new(8uLL);
  __int128 __p = v5;
  *char v5 = ident;
  unint64_t v8 = v5 + 1;
  unint64_t v9 = v5 + 1;
  sub_57A9C(a1, (unint64_t **)&__p);
  if (__p)
  {
    unint64_t v8 = __p;
    operator delete(__p);
  }

  return a2;
}

void sub_5798C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_579A8(uint64_t a1, const void *a2)
{
  int v3 = *(_DWORD *)(a1 + 40);
  sub_56CF0(a1, a2, (char **)&v11);
  __int128 __p = 0LL;
  unint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v4 = (char **)v11;
  if ((v3 & 1) != 0) {
    char v5 = (char **)((char *)v11 + 8);
  }
  else {
    char v5 = v12;
  }
  p_p = &__p;
  while (v4 != v5)
  {
    uint64_t ident = agxps_counter_get_ident(*(unsigned int **)(a1 + 16), *v4);
    sub_583BC((uint64_t *)&p_p, &ident);
    ++v4;
  }

  sub_57A9C(a1, (unint64_t **)&__p);
  unint64_t v6 = agxps_timeseries_create(0, 0LL);
  if (__p)
  {
    unint64_t v9 = __p;
    operator delete(__p);
  }

  if (v11)
  {
    unint64_t v12 = (char **)v11;
    operator delete(v11);
  }

  return v6;
}

void sub_57A6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_57A9C(uint64_t result, unint64_t **a2)
{
  uint64_t v2 = *a2;
  int v3 = a2[1];
  if (*a2 != v3)
  {
    char v5 = (uint64_t *)result;
    while (1)
    {
      uint64_t result = agxps_counter_is_valid(*v2);
      if ((_DWORD)result) {
        break;
      }
      if (++v2 == v3) {
        return result;
      }
    }

    uint64_t v7 = *a2;
    unint64_t v6 = a2[1];
    if (v6 != *a2 && (unint64_t)((char *)v6 - (char *)*a2) >= 0x10)
    {
      while (1)
      {
        uint64_t result = agxps_counter_is_derived(*v7);
        if ((result & 1) != 0) {
          break;
        }
        if (++v7 == v6)
        {
          uint64_t v7 = *a2;
          goto LABEL_14;
        }
      }
    }

    else
    {
LABEL_14:
      uint64_t result = (uint64_t)sub_57CBC(v5 + 12, v7);
      if (!result)
      {
        unint64_t v9 = (void ***)*a2;
        uint64_t v10 = (void ***)a2[1];
        if (*a2 == (unint64_t *)v10)
        {
          unint64_t v12 = *a2;
        }

        else
        {
          do
          {
            uint64_t v11 = *v9++;
            v29[0] = v11;
            sub_57D70((uint64_t)(v5 + 12), (unint64_t *)v29, v29);
          }

          while (v9 != v10);
          unint64_t v12 = *a2;
          unint64_t v9 = (void ***)a2[1];
        }

        if ((char *)v9 - (char *)v12 == 8 && (unint64_t v13 = *v12, agxps_counter_is_derived(*v12)))
        {
          unint64_t v14 = v5[8];
          unint64_t v15 = (unint64_t *)v5[7];
          if ((unint64_t)v15 >= v14)
          {
            BOOL v19 = (unint64_t *)v5[6];
            uint64_t v20 = v15 - v19;
            unint64_t v21 = v14 - (void)v19;
            unint64_t v22 = (uint64_t)(v14 - (void)v19) >> 2;
            if (v22 <= v20 + 1) {
              unint64_t v22 = v20 + 1;
            }
            if (v21 >= 0x7FFFFFFFFFFFFFF8LL) {
              unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v23 = v22;
            }
            if (v23)
            {
              __int128 v24 = (char *)sub_21A8((uint64_t)(v5 + 8), v23);
              BOOL v19 = (unint64_t *)v5[6];
              unint64_t v15 = (unint64_t *)v5[7];
            }

            else
            {
              __int128 v24 = 0LL;
            }

            unint64_t v25 = (unint64_t *)&v24[8 * v20];
            int v26 = &v24[8 * v23];
            unint64_t *v25 = v13;
            uint64_t v16 = v25 + 1;
            while (v15 != v19)
            {
              unint64_t v27 = *--v15;
              *--unint64_t v25 = v27;
            }

            v5[6] = (uint64_t)v25;
            v5[7] = (uint64_t)v16;
            v5[8] = (uint64_t)v26;
            if (v19) {
              operator delete(v19);
            }
          }

          else
          {
            unint64_t *v15 = v13;
            uint64_t v16 = v15 + 1;
          }

          v5[7] = (uint64_t)v16;
          unint64_t v28 = sub_30D8(v13);
          sub_56F50(v29);
          sub_2294( (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v28,  v5[2],  (uint64_t)v5,  v5[3],  v5[4],  (uint64_t)v29);
          return (uint64_t)sub_56F98(v29);
        }

        else
        {
          float v17 = v5 + 9;
          unint64_t v18 = v5[10];
          if (v18 >= v5[11])
          {
            uint64_t result = sub_57FD8(v17, (uint64_t)a2);
          }

          else
          {
            sub_57F88((uint64_t)v17, (uint64_t)a2);
            uint64_t result = v18 + 24;
          }

          v5[10] = result;
        }
      }
    }
  }

  return result;
}

void sub_57CA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_57CBC(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v5 = (*(void *)&v2 - 1LL) & v3;
  }

  unint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0LL;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }

      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }

        else
        {
          v8 &= *(void *)&v2 - 1LL;
        }

        if (v8 != v5) {
          return 0LL;
        }
      }

      uint64_t result = (void *)*result;
    }

    while (result);
  }

  return result;
}

void *sub_57D70(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }

    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }

        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }

          else
          {
            v11 &= v7 - 1;
          }

          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t i = operator new(0x18uLL);
  void *i = 0LL;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1LL;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_573C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }

  uint64_t v18 = *(void *)a1;
  BOOL v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    *BOOL v19 = i;
    goto LABEL_39;
  }

  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + sub_4B28(v1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }

    else
    {
      v20 &= v7 - 1;
    }

    BOOL v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }

void sub_57F74(_Unwind_Exception *a1)
{
}

void *sub_57F88(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a1 + 8);
  *unint64_t v3 = 0LL;
  v3[1] = 0LL;
  v3[2] = 0LL;
  uint64_t result = sub_580EC(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_57FD0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_57FD8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2120();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  size_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_6C2C(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unint64_t v15 = v11;
  unint64_t v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0LL;
  *((void *)v11 + 1) = 0LL;
  *((void *)v11 + 2) = 0LL;
  sub_580EC(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  sub_581A4(a1, v14);
  uint64_t v12 = a1[1];
  sub_58330((uint64_t)v14);
  return v12;
}

void sub_580D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_580EC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_58164(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_58148(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_58164(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_2120();
  }
  uint64_t result = (char *)sub_21A8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t sub_581A4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_58218((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_58218(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v14 = a6;
  *((void *)&v14 + 1) = a7;
  __int128 v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }

  else
  {
    do
    {
      *(void *)(v7 - 24) = 0LL;
      *(void *)(v7 - sub_4B28(v1 + 16) = 0LL;
      *(void *)(v7 - 8) = 0LL;
      __int128 v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
      uint64_t v7 = *((void *)&v14 + 1) - 24LL;
      *((void *)&v14 + 1) -= 24LL;
    }

    while (a3 != a5);
    uint64_t v9 = v14;
  }

  char v12 = 1;
  sub_582B8((uint64_t)v11);
  return v9;
}

uint64_t sub_582B8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_582EC(a1);
  }
  return a1;
}

void sub_582EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }

    v1 += 24LL;
  }

uint64_t sub_58330(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_58364(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + sub_4B28(v1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - sub_4B28(v1 + 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }

    else
    {
      v2 -= 24LL;
    }
  }

uint64_t *sub_583BC(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    __int128 v8 = *(void **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 3;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      __int128 v13 = (char *)sub_21A8((uint64_t)v6, v12);
      __int128 v8 = *(void **)v4;
      uint64_t v5 = *(void **)(v4 + 8);
    }

    else
    {
      __int128 v13 = 0LL;
    }

    __int128 v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *(void *)__int128 v14 = *a2;
    uint64_t v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }

    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + sub_4B28(v1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    *uint64_t v5 = *a2;
    uint64_t v7 = v5 + 1;
  }

  *(void *)(v4 + 8) = v7;
  return a1;
}

void std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<ProfileEvent>>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }

void std::vector<std::vector<ProfileEvent>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24LL;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - sub_4B28(v1 + 16) = v5;
        operator delete(v5);
      }

      uint64_t v2 = v4;
    }

    while (v4 != v3);
  }

  a1[1] = v3;
}

uint64_t **sub_5853C(void *a1, const void **a2)
{
  uint64_t v3 = sub_585AC(a1, (uint64_t)a2);
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v6 = *a2;
    size_t v5 = (size_t)a2[1];
    uint64_t v7 = v3;
    do
      uint64_t v7 = (uint64_t **)*v7;
    while (v7 && v7[3] == (uint64_t *)v5 && !memcmp(v7[2], v6, v5));
  }

  return v4;
}

uint64_t **sub_585AC(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_90D0((uint64_t)(a1 + 3), *(uint64_t **)a2, *(void *)(a2 + 8));
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0LL;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }

  else
  {
    unint64_t v9 = (*(void *)&v5 - 1LL) & v4;
  }

  unint64_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0LL;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v14 = a2;
    unint64_t v12 = *(uint64_t **)a2;
    size_t v13 = *(void *)(v14 + 8);
    do
    {
      unint64_t v15 = (unint64_t)v11[1];
      if (v6 == v15)
      {
      }

      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(void *)&v5) {
            v15 %= *(void *)&v5;
          }
        }

        else
        {
          v15 &= *(void *)&v5 - 1LL;
        }

        if (v15 != v9) {
          return 0LL;
        }
      }

      uint64_t v11 = (uint64_t **)*v11;
    }

    while (v11);
  }

  return v11;
}

uint64_t *sub_586C0(void *a1, unint64_t *a2)
{
  uint64_t result = sub_57CBC(a1, a2);
  if (result)
  {
    sub_586F4(a1, result);
    return (void *)(&dword_0 + 1);
  }

  return result;
}

uint64_t sub_586F4(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_58734(a1, a2, (uint64_t)&__p);
  uint64_t v3 = __p;
  __int128 __p = 0LL;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *sub_58734@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }

  else
  {
    v4 &= *(void *)&v3 - 1LL;
  }

  unint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint8x8_t v7 = v6;
    unint64_t v6 = (void *)*v6;
  }

  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }

  else
  {
    v8 &= *(void *)&v3 - 1LL;
  }

  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8LL);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }

    else
    {
      v9 &= *(void *)&v3 - 1LL;
    }

    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0LL;
  }

  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }

    else
    {
      v11 &= *(void *)&v3 - 1LL;
    }

    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }

  *uint8x8_t v7 = v10;
  *a2 = 0LL;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + sub_4B28(v1 + 16) = 1;
  return result;
}

void sub_58868()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  byte_5B8B28 = 0;
  *(_OWORD *)&qword_5B8B30 = 0u;
  *(_OWORD *)&qword_5B8B40 = 0u;
  unk_5B8B50 = 0u;
  qword_5B8B60 = 0LL;
  dword_5B8B68 = 1065353216;
  *(_OWORD *)qword_5B8B70 = 0u;
  *(_OWORD *)&qword_5B8B70[2] = 0u;
  dword_5B8B90 = 1065353216;
  xmmword_5B8B98 = 0u;
  unk_5B8BA8 = 0u;
  dword_5B8BB8 = 1065353216;
  unk_5B8BC0 = 0u;
  unk_5B8BD0 = 0u;
  dword_5B8BE0 = 1065353216;
  xmmword_5B8BE8 = 0u;
  unk_5B8BF8 = 0u;
  dword_5B8C08 = 1065353216;
  unk_5B8C20 = 0u;
  unk_5B8C10 = 0u;
  dword_5B8C30 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_2204, &byte_5B8B28, &dword_0);
  qword_5B9DA8 = 0LL;
  unk_5B9DB0 = 0LL;
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_58908()
{
  uint64_t result = sub_9ABC();
  qword_5B8C88 = result;
  unk_5B8C90 = v1;
  return result;
}

LABEL_16:
  return v9;
}

LABEL_17:
  -[GTReplayerOperationBatch flush:](v68, "flush:", clientContext->var7.var1);

  _Block_object_dispose(&v85, 8);
  return 0LL;
}

      abort();
    }

    uint64_t v10 = __stderrp;
    unint64_t v11 = @"fail: queue cannot be NULL";
LABEL_15:
    fprintf( v10,  "%s\n",  -[NSString UTF8String]( +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v11, a4),  "UTF8String"));
    goto LABEL_16;
  }

  if (!a4)
  {
    if (s_logUsingOsLog)
    {
      unint64_t v8 = (os_log_s *)gt_default_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        unint64_t v9 = "fail: block cannot be NULL";
LABEL_12:
        _os_log_fault_impl(&dword_0, v8, OS_LOG_TYPE_FAULT, v9, buf, 2u);
        abort();
      }

      goto LABEL_16;
    }

    uint64_t v10 = __stderrp;
    unint64_t v11 = @"fail: block cannot be NULL";
    goto LABEL_15;
  }

  v12.receiver = self;
  v12.super_class = (Class)&OBJC_CLASS___GTContinuation_replayer;
  unint64_t v6 = -[GTContinuation_replayer init](&v12, "init");
  if (v6)
  {
    dispatch_retain((dispatch_object_t)a3);
    v6->queue = (OS_dispatch_queue *)a3;
    v6->blocuint64_t k = [a4 copy];
  }

  return v6;
}

      abort();
    }

    unint64_t v15 = __stderrp;
    uint64_t v16 = @"fail: queue cannot be NULL";
LABEL_15:
    fprintf( v15,  "%s\n",  -[NSString UTF8String]( +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v16, a4),  "UTF8String"));
    goto LABEL_16;
  }

  if (!a4)
  {
    if (s_logUsingOsLog)
    {
      size_t v13 = (os_log_s *)gt_default_log();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        uint64_t v14 = "fail: transport cannot be nil";
LABEL_12:
        _os_log_fault_impl(&dword_0, v13, OS_LOG_TYPE_FAULT, v14, buf, 2u);
        abort();
      }

      goto LABEL_16;
    }

    unint64_t v15 = __stderrp;
    uint64_t v16 = @"fail: transport cannot be nil";
    goto LABEL_15;
  }

  v18.receiver = self;
  v18.super_class = (Class)&OBJC_CLASS___GTTransportSource_replayer;
  unint64_t v6 = -[GTTransportSource_replayer init](&v18, "init");
  if (v6)
  {
    v6->_transport = (GTTransport_replayer *)a4;
    uint8x8_t v7 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"gputools.%@.%p.%@",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", object_getClassName(v6)),  v6,  @"manager"),  "UTF8String");
    unint64_t v8 = dispatch_queue_create_with_target_V2(v7, 0LL, (dispatch_queue_t)a3);
    v6->_queue = (OS_dispatch_queue *)v8;
    dispatch_suspend(v8);
    unint64_t v9 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"gputools.%@.%p.%@",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", object_getClassName(v6)),  v6,  @"message"),  "UTF8String");
    uint64_t v10 = dispatch_queue_create_with_target_V2(v9, 0LL, (dispatch_queue_t)a3);
    v6->_mqueue = (OS_dispatch_queue *)v10;
    dispatch_suspend(v10);
    queue = (dispatch_queue_s *)v6->_queue;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = __46__GTTransportSource__initWithQueue_transport___block_invoke;
    block[3] = &unk_58F020;
    block[4] = v6;
    dispatch_async(queue, block);
  }

  return v6;
}

    LOBYTE(v7) = 0;
    return v7;
  }

  uint8x8_t v7 = -[GTTransport_replayer _packMessage:error:](self, "_packMessage:error:", a3, a4);
  if (v7)
  {
    isa = self[1].super.isa;
    unint64_t v9 = BYTE1(self->_interposerVersion);
    if (v9) {
      dispatch_suspend((dispatch_object_t)self->_queue);
    }
    sendQueue = self->_sendQueue;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = __34__GTTransport_relayMessage_error___block_invoke;
    v14[3] = &unk_58E310;
    unint64_t v15 = v9;
    v14[4] = self;
    v14[5] = a3;
    ((void (*)(OS_dispatch_queue *, void *))isa)(sendQueue, v14);
    LOBYTE(v7) = 1;
  }

  return v7;
}

  return v16;
}

    unint64_t v9 = 1;
    goto LABEL_17;
  }

  unint64_t v8 = *(void *)(v7 + 32);
  if (v6)
  {
    unint64_t v9 = 0;
LABEL_9:
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) defaultCommandQueue]);
    [v10 finish];

    goto LABEL_10;
  }

  if (!v8) {
    goto LABEL_16;
  }
  unint64_t v11 = *(unsigned int *)(v8 + 12);
  if ((int)v11 < 1)
  {
    unint64_t v9 = 1;
    goto LABEL_11;
  }

  unint64_t v12 = *(void **)(v8 + 24);
  if (*v12 == 86LL)
  {
    unint64_t v9 = 1;
    goto LABEL_9;
  }

  unint64_t v39 = 0LL;
  int v40 = v12 + 8;
  do
  {
    if (v11 - 1 == v39)
    {
      unint64_t v9 = 1;
      goto LABEL_10;
    }

    double v41 = *v40;
    v40 += 8;
    ++v39;
  }

  while (v41 != 86);
  unint64_t v9 = 1;
  if (v39 < v11) {
    goto LABEL_9;
  }
LABEL_10:
  if (v8)
  {
LABEL_11:
    AppendRestoreJobsToLoadQueue(a1, v8);
    SignalLoadQueueThreads(a1, *(_DWORD *)(*(void *)(a1 + 22504) + 12LL));
  }

  __int128 v24 = -1431655765 * ((unint64_t)(v16 - v15) >> 4);
  int v26 = a2[1];
  unint64_t v25 = (unint64_t)a2[2];
  if ((unint64_t)v26 >= v25)
  {
    unint64_t v28 = *a2;
    int v29 = 0xAAAAAAAAAAAAAAABLL * ((v26 - *a2) >> 4);
    uint64_t v30 = v29 + 1;
    if (v29 + 1 > 0x555555555555555LL) {
      abort();
    }
    __int128 v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (void)v28) >> 4);
    if (2 * v31 > v30) {
      uint64_t v30 = 2 * v31;
    }
    if (v31 >= 0x2AAAAAAAAAAAAAALL) {
      __int128 v32 = 0x555555555555555LL;
    }
    else {
      __int128 v32 = v30;
    }
    if (v32)
    {
      if (v32 > 0x555555555555555LL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unsigned int v33 = (char *)operator new(48 * v32);
    }

    else
    {
      unsigned int v33 = 0LL;
    }

    int v34 = &v33[48 * v29];
    *(void *)int v34 = v38;
    *((void *)v34 + 1) = v14;
    *((void *)v34 + 2) = v37;
    *((_DWORD *)v34 + 6) = v24;
    *((_DWORD *)v34 + 7) = v19;
    *((_DWORD *)v34 + 8) = v22;
    *((_DWORD *)v34 + 9) = a6;
    *((void *)v34 + 5) = 0LL;
    unint64_t v27 = v34 + 48;
    if (v26 != v28)
    {
      do
      {
        uint64_t v35 = *((_OWORD *)v26 - 3);
        uint64_t v36 = *((_OWORD *)v26 - 1);
        *((_OWORD *)v34 - 2) = *((_OWORD *)v26 - 2);
        *((_OWORD *)v34 - 1) = v36;
        *((_OWORD *)v34 - 3) = v35;
        v34 -= 48;
        v26 -= 48;
      }

      while (v26 != v28);
      int v26 = *a2;
    }

    *a2 = v34;
    a2[1] = v27;
    a2[2] = &v33[48 * v32];
    if (v26) {
      operator delete(v26);
    }
  }

  else
  {
    *(void *)int v26 = v38;
    *((void *)v26 + 1) = v14;
    *((void *)v26 + 2) = v37;
    *((_DWORD *)v26 + 6) = v24;
    *((_DWORD *)v26 + 7) = v19;
    *((_DWORD *)v26 + 8) = v22;
    *((_DWORD *)v26 + 9) = a6;
    unint64_t v27 = v26 + 48;
    *((void *)v26 + 5) = 0LL;
  }

  a2[1] = v27;
LABEL_34:
}

LABEL_4:
LABEL_5:
  unint64_t v9 = v5;
LABEL_6:

LABEL_8:
  return v9;
}

  uint64_t v16 = 0LL;
  size_t v17 = 1LL;
  do
  {
    uint64_t v18 = *(void *)(a3 + 8 * v16);
    Object = GTMTLSMContext_getObject(*a5, v18, a6);
    if (!Object) {
      goto LABEL_33;
    }
    if (*(_DWORD *)Object != 60)
    {
      if (*(_DWORD *)Object != 83) {
        goto LABEL_7;
      }
      unint64_t v20 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>( a7,  Object[1]);
      if (v20)
      {
        unint64_t v21 = (uint64_t *)(id)v20[3];
        switch(a1)
        {
          case 1u:
            [v14 setVertexVisibleFunctionTable:v21 atBufferIndex:v16];
            break;
          case 2u:
            [v14 setFragmentVisibleFunctionTable:v21 atBufferIndex:v16];
            break;
          case 4u:
            [v14 setTileVisibleFunctionTable:v21 atBufferIndex:v16];
            break;
          case 8u:
            [v14 setVisibleFunctionTable:v21 atBufferIndex:v16];
            break;
          default:
            goto LABEL_37;
        }

        goto LABEL_37;
      }

LABEL_26:
        unint64_t v11 = 0LL;
        goto LABEL_27;
      }

      if (v6 && ([v6 isEqual:v12] & 1) == 0)
      {
        unint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
        int v26 = 0LL;
        [v22 copyItemAtURL:v12 toURL:v6 error:&v26];
        uint64_t v10 = v26;

        if (v10)
        {
          if (a4) {
            goto LABEL_8;
          }
          goto LABEL_26;
        }
      }

      else
      {
        uint64_t v10 = 0LL;
      }
    }

    else
    {
      if (!v6 || ([v6 isEqual:v12] & 1) != 0)
      {
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(-[GTShaderProfilerStreamData traceName](self, "traceName"));
        unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 stringByDeletingPathExtension]);
        size_t v17 = v15;
        if (v15)
        {
          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v15 stringByAppendingPathExtension:@"gpuprofiler_raw"]);
        }

        else
        {
          BOOL v19 = (void *)objc_opt_new(&OBJC_CLASS___NSUUID, v16);
          unint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 UUIDString]);
          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v20 stringByAppendingPathExtension:@"gpuprofiler_raw"]);
        }

        unint64_t v11 = (id)objc_claimAutoreleasedReturnValue([v12 URLByAppendingPathComponent:v18]);
        __int128 v24 = 0LL;
        [v8 writeToURL:v11 options:1 error:&v24];
        uint64_t v10 = v24;

        goto LABEL_27;
      }

      unint64_t v25 = 0LL;
      [v8 writeToURL:v6 options:1 error:&v25];
      uint64_t v10 = v25;
    }

    if (v6) {
      unint64_t v21 = v6;
    }
    else {
      unint64_t v21 = v12;
    }
    unint64_t v11 = v21;
    goto LABEL_27;
  }

  uint64_t v10 = v9;
  if (a4)
  {
    uint64_t v10 = v9;
    unint64_t v11 = 0LL;
    *a4 = v10;
  }

  else
  {
    unint64_t v11 = 0LL;
  }

      if (v24 > -16203)
      {
        if (v24 <= -15588)
        {
          if (v24 > -15909)
          {
            if (v24 == -15908) {
              goto LABEL_55;
            }
            if (v24 != -15673) {
              goto LABEL_58;
            }
            goto LABEL_54;
          }

          if (v24 == -16202) {
            goto LABEL_55;
          }
          if (v24 != -16014) {
            goto LABEL_58;
          }
          __int128 v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", *v15));
          int v29 = (void *)objc_claimAutoreleasedReturnValue([v84 objectForKeyedSubscript:v31]);

          if (v29)
          {
            __int128 v76 = (char *)[v29 unsignedIntegerValue];
            __int128 v32 = *(void *)(a1 + 1928);
            *(void *)(a1 + 1928) = v32 + 1;
            **(_DWORD **)(a1 + 1936) = **(unsigned __int8 **)(a1 + 1936) | ((_DWORD)v32 << 8);
            *(void *)(a1 + 1936) += 24LL;
            unsigned int v33 = GTTraceFunc_argumentBytesWithMap((void *)v19, *(unsigned __int8 *)(v96 + (v18 << 6) + 13), v94);
            uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue([v97 commandBufferForKey:*(void *)v33]);
            int v34 = objc_alloc_init(&OBJC_CLASS___MTLComputePassDescriptor);
            -[MTLComputePassDescriptor setAllowCommandEncoderCoalescing:](v34, "setAllowCommandEncoderCoalescing:", 1LL);
            -[MTLComputePassDescriptor setDispatchType:](v34, "setDispatchType:", *((void *)v33 + 2));
            uint64_t v35 = (MTLComputePassDescriptor *)objc_claimAutoreleasedReturnValue( [v86 sampledComputeCommandEncoderWithDescriptor:v34 programInfoBuffer:*(void *)(a1 + 1936) capacity:v76]);
            GTUSCSamplingStreamingManagerHelper::AddEncoderSamplePoints( (_DWORD *)a1,  a2,  v19,  -[MTLComputePassDescriptor globalTraceObjectID](v35, "globalTraceObjectID"),  v35,  *(void *)(a1 + 1928) - 1LL,  v23,  a3);
            [v97 setComputeCommandEncoder:v35 forKey:*((void *)v33 + 1)];
            *(void *)(a1 + 1936) += 24LL * (void)v76;
            uint64_t v36 = *(void *)(a1 + 1976) + 24LL * (void)v76 + 24;
LABEL_64:
            *(void *)(a1 + 1976) = v36;
            goto LABEL_69;
          }
        }

        else
        {
          if (v24 > -15365)
          {
            if (v24 != -15364)
            {
              if (v24 == -15318 || v24 == -15316)
              {
LABEL_55:
                if (!(v87 & 1 | (v83 == 0LL)))
                {
                  v83[2]();
                  __int128 v24 = *v20;
                }

                uint64_t v87 = 1;
              }

                  -[GTShaderProfilerHelper _latencyAdjustmentFactorWithLimiterDataForDraw:forDataMaster:forLimiterType:]( self,  "_latencyAdjustmentFactorWithLimiterDataForDraw:forDataMaster:forLimiterType:",  v37,  a9,  v40);
                  goto LABEL_34;
                case 16:
                  int v37 = (void *)objc_claimAutoreleasedReturnValue([v58 objectAtIndexedSubscript:v32]);
                  int v40 = (void *)objc_claimAutoreleasedReturnValue([&off_59F920 objectAtIndexedSubscript:5]);
                  -[GTShaderProfilerHelper _latencyAdjustmentFactorWithLimiterDataForDraw:forDataMaster:forLimiterType:]( self,  "_latencyAdjustmentFactorWithLimiterDataForDraw:forDataMaster:forLimiterType:",  v37,  a9,  v40);
LABEL_34:
                  uint64_t v36 = v41;

                  goto LABEL_35;
                default:
                  if (v35 == 54)
                  {
                    if ((*(_BYTE *)(v33 + 40LL * v31 + 33) & 2) != 0)
                    {
                      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v58 objectAtIndexedSubscript:v32]);
                      double v43 = (void *)objc_claimAutoreleasedReturnValue([&off_59F920 objectAtIndexedSubscript:4]);
                      -[GTShaderProfilerHelper _latencyAdjustmentFactorWithLimiterDataForDraw:forDataMaster:forLimiterType:]( self,  "_latencyAdjustmentFactorWithLimiterDataForDraw:forDataMaster:forLimiterType:",  v42,  a9,  v43);
                      uint64_t v36 = v44;
                    }
                  }

                  else if (v35 == 52)
                  {
                    unint64_t v39 = *(_DWORD *)(v33 + 40LL * v31 + 32);
                    if (v39 == 256 || v39 == 128)
                    {
                      uint64_t v36 = 0.0;
                    }

                    else if (v39 == 64)
                    {
                      int v37 = (void *)objc_claimAutoreleasedReturnValue([v58 objectAtIndexedSubscript:v32]);
                      -[GTShaderProfilerHelper _waitLatencyAdjustmentFactorWithLimiterDataForDraw:forDataMaster:]( self,  "_waitLatencyAdjustmentFactorWithLimiterDataForDraw:forDataMaster:",  v37,  a9);
LABEL_15:
                      uint64_t v36 = v38;
LABEL_35:
                    }
                  }

    objc_autoreleasePoolPop(v14);
    unint64_t v22 = atomic_load((unsigned int *)(v5 + 4));
    unint64_t v23 = v9 + (v22 >> 6);
    __int128 v24 = (HIDWORD(v9) + 1);
    unint64_t v9 = (v24 << 32) | v9;
    if ((_DWORD)v24 == v23 - 1)
    {
      unint64_t v9 = (v24 << 32) | v24;
      uint8x8_t v5 = *(void *)(v5 + 40);
      goto LABEL_9;
    }
  }
}

LABEL_28:
  objc_autoreleasePoolPop(v7);
  return v11;
}

      double v38 = (char *)*a1;
      *a1 = v29;
      a1[1] = v30;
      a1[2] = v6;
      a1[3] = v32;
      if (v38)
      {
        operator delete(v38);
        unint64_t v6 = (char *)a1[2];
      }

      goto LABEL_31;
    }

    goto LABEL_5;
  }

  if (v21 == *a1) {
    unint64_t v23 = 1LL;
  }
  else {
    unint64_t v23 = v22 >> 2;
  }
  unint64_t v51 = a1 + 3;
  *(void *)&uint64_t v49 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,unsigned int>>>(v23);
  *((void *)&v49 + 1) = v49 + 8 * v20;
  *(void *)&unsigned int v50 = *((void *)&v49 + 1);
  *((void *)&v50 + 1) = v49 + 8 * v24;
  int v48 = operator new(0x1000uLL);
  std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_back(&v49, &v48);
  for (uint64_t i = (void *)a1[2];
        i != (void *)a1[1];
        std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_front((uint64_t)&v49, i))
  {
    --i;
  }

  int v26 = (char *)*a1;
  unint64_t v27 = v50;
  *(_OWORD *)a1 = v49;
  *((_OWORD *)a1 + 1) = v27;
  if (v26) {
    operator delete(v26);
  }
}

  uint64_t v35 = 0LL;
  uint64_t v36 = 0LL;
LABEL_75:

  apr_pool_destroy(newpool);
  return v36;
}

const char *AppendString(const char *result, int *a2)
{
  if (result)
  {
    int8x8_t v3 = result;
    size_t v4 = strlen(result);
    int v5 = v4 + 1;
    uint64_t result = (const char *)memcpy((char *)a2 + *a2, v3, v4 + 1);
    int v6 = *a2 + v5;
  }

  else
  {
    *(void *)((char *)a2 + *a2) = 0xFFFFFFFFLL;
    int v6 = *a2 + 8;
  }

  *a2 = v6;
  return result;
}

void DYTraceEncode_InternalData(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = a1;
  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFD01000000024LL;
  a2[8] = 198;
  int v4 = *(_DWORD *)(a1 + 8);
  switch(v4)
  {
    case 101:
      uint64_t v14 = *(void *)(a1 + 40);
      if (v14)
      {
        *(void *)(a2 + 9) = 0x536C536C756943LL;
        uint64_t v15 = 44LL;
      }

      else
      {
        strcpy((char *)a2 + 36, "CiulSl");
        uint64_t v15 = 43LL;
      }

      bzero((char *)a2 + v15, 44 - v15);
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)v3;
      *a2 = 52;
      a2[13] = *(_DWORD *)(v3 + 8);
      *a2 = 56;
      *((void *)a2 + 7) = *(void *)(v3 + 16);
      *a2 = 64;
      AppendString(*(const char **)(v3 + 32), (int *)a2);
      uint64_t v22 = *a2;
      uint64_t v23 = ((_DWORD)v22 + 3) & 0xFFFFFFFC;
      bzero((char *)a2 + v22, v23 - v22);
      *a2 = v23;
      *(void *)((char *)a2 + v23) = *(void *)(v3 + 24);
      unsigned int v24 = *a2 + 8;
      *a2 = v24;
      if (v14)
      {
        AppendString(*(const char **)(v3 + 40), (int *)a2);
        unsigned int v24 = *a2;
      }

      uint64_t v3 = (v24 + 3) & 0xFFFFFFFC;
      bzero((char *)a2 + v24, v3 - v24);
      break;
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 112:
    case 113:
    case 114:
    case 115:
    case 121:
    case 122:
    case 123:
    case 124:
    case 130:
    case 131:
    case 133:
    case 134:
      goto LABEL_7;
    case 107:
      strcpy((char *)a2 + 36, "Ciulul");
      *((_BYTE *)a2 + 43) = 0;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      *((void *)a2 + 7) = *(void *)(a1 + 16);
      *a2 = 64;
      *((void *)a2 + 8) = *(void *)(a1 + 24);
      LODWORD(v3) = 72;
      break;
    case 108:
      strcpy((char *)a2 + 36, "CitS");
      *(_WORD *)((char *)a2 + 41) = 0;
      *((_BYTE *)a2 + 43) = 0;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      *((void *)a2 + 7) = *(void *)(a1 + 16);
      *a2 = 64;
      goto LABEL_21;
    case 109:
    case 120:
      strcpy((char *)a2 + 36, "CiSululb");
      *(_WORD *)((char *)a2 + 45) = 0;
      *((_BYTE *)a2 + 47) = 0;
      *a2 = 48;
      *((void *)a2 + 6) = *(void *)a1;
      *a2 = 56;
      a2[14] = *(_DWORD *)(a1 + 8);
      *a2 = 60;
      AppendString(*(const char **)(a1 + 32), (int *)a2);
      uint64_t v7 = *a2;
      uint64_t v8 = ((_DWORD)v7 + 3) & 0xFFFFFFFC;
      bzero((char *)a2 + v7, v8 - v7);
      *a2 = v8;
      *(void *)((char *)a2 + v8) = *(void *)(v3 + 16);
      unsigned int v9 = *a2 + 8;
      *a2 = v9;
      *(void *)((char *)a2 + v9) = *(void *)(v3 + 24);
      unsigned int v10 = *a2 + 8;
      *a2 = v10;
      *((_BYTE *)a2 + sub_623C(v11, v10) = *(_BYTE *)(v3 + 40);
      uint64_t v11 = *a2 + 1;
      uint64_t v3 = (*a2 & 0xFFFFFFFC) + 4;
      unint64_t v12 = (char *)a2 + v11;
      size_t v13 = v3 - v11;
      goto LABEL_23;
    case 110:
      *(void *)(a2 + 9) = 0x696C756943LL;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      *((void *)a2 + 7) = *(void *)(a1 + 16);
      *a2 = 64;
      a2[16] = *(_DWORD *)(a1 + 24);
      LODWORD(v3) = 68;
      break;
    case 111:
      int v5 = 5597507;
      goto LABEL_3;
    case 116:
      *(void *)(a2 + 9) = 0x6C75556943LL;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      AppendString(*(const char **)(a1 + 16), (int *)a2);
      uint64_t v16 = *a2;
      uint64_t v17 = ((_DWORD)v16 + 3) & 0xFFFFFFFC;
      bzero((char *)a2 + v16, v17 - v16);
      *a2 = v17;
      *(void *)((char *)a2 + v17) = *(void *)(v3 + 24);
      LODWORD(v3) = *a2 + 8;
      break;
    case 117:
    case 127:
    case 128:
    case 129:
    case 132:
      int v5 = 5466435;
LABEL_3:
      a2[9] = v5;
      *a2 = 40;
      *((void *)a2 + 5) = *(void *)a1;
      *a2 = 48;
      a2[12] = *(_DWORD *)(a1 + 8);
      *a2 = 52;
      int v6 = *(const char **)(a1 + 16);
      goto LABEL_22;
    case 118:
      strcpy((char *)a2 + 36, "Ciul");
      *(_WORD *)((char *)a2 + 41) = 0;
      *((_BYTE *)a2 + 43) = 0;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      uint64_t v18 = *(void *)(a1 + 16);
      goto LABEL_18;
    case 119:
      *(void *)(a2 + 9) = 0x53535369756943LL;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      a2[14] = *(_DWORD *)(a1 + 40);
      *a2 = 60;
      AppendString(*(const char **)(a1 + 16), (int *)a2);
      AppendString(*(const char **)(v3 + 24), (int *)a2);
      int v6 = *(const char **)(v3 + 32);
      goto LABEL_22;
    case 125:
      strcpy((char *)a2 + 36, "Ciul");
      *(_WORD *)((char *)a2 + 41) = 0;
      *((_BYTE *)a2 + 43) = 0;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      uint64_t v18 = *(void *)(a1 + 24);
LABEL_18:
      *((void *)a2 + 7) = v18;
      LODWORD(v3) = 64;
      break;
    case 126:
      strcpy((char *)a2 + 36, "CiSS");
      *(_WORD *)((char *)a2 + 41) = 0;
      *((_BYTE *)a2 + 43) = 0;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      AppendString(*(const char **)(a1 + 16), (int *)a2);
      goto LABEL_21;
    case 135:
      strcpy((char *)a2 + 36, "CiSS");
      *(_WORD *)((char *)a2 + 41) = 0;
      *((_BYTE *)a2 + 43) = 0;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      AppendString(*(const char **)(a1 + 16), (int *)a2);
      uint64_t v19 = *a2;
      uint64_t v20 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
      bzero((char *)a2 + v19, v20 - v19);
      *a2 = v20;
LABEL_21:
      int v6 = *(const char **)(v3 + 24);
LABEL_22:
      AppendString(v6, (int *)a2);
      uint64_t v21 = *a2;
      uint64_t v3 = ((_DWORD)v21 + 3) & 0xFFFFFFFC;
      unint64_t v12 = (char *)a2 + v21;
      size_t v13 = v3 - v21;
LABEL_23:
      bzero(v12, v13);
      break;
    default:
      if (v4 == 7)
      {
        strcpy((char *)a2 + 36, "Ciui");
        *(_WORD *)((char *)a2 + 41) = 0;
        *((_BYTE *)a2 + 43) = 0;
        *a2 = 44;
        *(void *)(a2 + 11) = *(void *)a1;
        *a2 = 52;
        a2[13] = *(_DWORD *)(a1 + 8);
        *a2 = 56;
        a2[14] = *(_DWORD *)(a1 + 16);
        LODWORD(v3) = 60;
      }

      else
      {
LABEL_7:
        a2[9] = 26947;
        *a2 = 40;
        *((void *)a2 + 5) = *(void *)a1;
        *a2 = 48;
        a2[12] = *(_DWORD *)(a1 + 8);
        LODWORD(v3) = 52;
      }

      break;
  }

  *a2 = v3;
}

void DYTraceEncode_MTLCommandBuffer_restoreMTLBufferContents(uint64_t a1, unsigned int *a2)
{
  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFD80000000024LL;
  a2[8] = 4;
  strcpy((char *)a2 + 36, "CtU<b>ulul");
  *((_BYTE *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)(a1 + 8);
  *a2 = 64;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v4 = *a2;
  uint64_t v5 = ((_DWORD)v4 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v4, v5 - v4);
  *a2 = v5;
  *(void *)((char *)a2 + v5) = *(void *)(a1 + 24);
  unsigned int v6 = *a2 + 8;
  *a2 = v6;
  *(void *)((char *)a2 + v6) = *(void *)(a1 + 32);
  *a2 += 8;
}

void *GTHarvesterGetMetadata(void *a1, unint64_t a2)
{
  uint64_t result = 0LL;
  if (a1 && a2 >= 0x10)
  {
    if (*a1 == 0x63617074757265LL) {
      return a1;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t GTHarvesterGetData(uint64_t result, unint64_t a2)
{
  if (result && a2 >= 0x10 && *(void *)result == 0x63617074757265LL)
  {
    uint64_t v2 = *(int *)(result + 12);
    if (*(_WORD *)(result + 8) == 1) {
      v2 += 16LL;
    }
    result += v2;
  }

  return result;
}

uint64_t GTHarvesterGetTexturePlaneCount(uint64_t result)
{
  if (result)
  {
    if (*(_WORD *)(result + 10) == 1) {
      return *(void *)(result + 16);
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t GTHarvesterGetTexturePlane(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (*(_WORD *)(result + 10) == 1)
    {
      if (*(void *)(result + 16) >= a2) {
        result += 48 * a2 + 24;
      }
      else {
        return 0LL;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void sub_5CF18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_5CFEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

uint64_t GTUSCSamplingStreamingManagerHelper::CleanupGPURawCounters(uint64_t this)
{
  if (*(void *)(this + 16))
  {
    uint64_t v1 = this;
    uint64_t v2 = *(void **)(this + 24);
    *(void *)(this + 24) = 0LL;

    uint64_t v3 = *(void **)(v1 + 16);
    *(void *)(v1 + sub_4B28(v1 + 16) = 0LL;

    return GRCReleaseAllCounterSourceGroup();
  }

  return this;
}

void GTUSCSamplingStreamingManagerHelper::SetupGPURawCounters(GTUSCSamplingStreamingManagerHelper *this)
{
  context = objc_autoreleasePoolPush();
  uint64_t v1 = GRCCopyAllCounterSourceGroup();
  uint64_t v2 = (void *)xmmword_5B8CE0;
  *(void *)&xmmword_5B8CE0 = v1;

  if ((void)xmmword_5B8CE0 && [(id)xmmword_5B8CE0 count])
  {
    __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([(id)xmmword_5B8CE0 firstObject]);
    int v37 = (void *)objc_claimAutoreleasedReturnValue([v31 sourceList]);
    if (v37 && [v37 count])
    {
      if ((objc_opt_respondsToSelector(v31, "features") & 1) != 0)
      {
        uint64_t v3 = (NSDictionary *)objc_claimAutoreleasedReturnValue([v31 features]);
        dword_5B9540 = GPURawCounterSupportFlags(v3);

        uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v31 features]);
        if (v4)
        {
          uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v31 features]);
          unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"ConstantAGX_CoreConfig"]);

          if (v6) {
            objc_storeStrong((id *)&qword_5B9490, v6);
          }
        }

        std::vector<unsigned int>::value_type __x = 0;
        std::vector<unsigned int>::resize( (std::vector<unsigned int> *)&xmmword_5B9440,  (std::vector<unsigned int>::size_type)[v37 count],  &__x);
        for (unint64_t i = 0; i < (unint64_t)[v37 count]; ++i)
        {
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v37 objectAtIndexedSubscript:i]);
          if ((objc_opt_respondsToSelector(v8, "features") & 1) != 0)
          {
            unsigned int v9 = (NSDictionary *)objc_claimAutoreleasedReturnValue([v8 features]);
            *(_DWORD *)(xmmword_5B9440 + 4 * i) = GPURawCounterSupportFlags(v9);
          }
        }
      }

      id v36 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", 3LL));
      __int128 v44 = 0u;
      __int128 v45 = 0u;
      __int128 v42 = 0u;
      __int128 v43 = 0u;
      id obj = v37;
      id v10 = [obj countByEnumeratingWithState:&v42 objects:v48 count:16];
      if (v10)
      {
        uint64_t v34 = *(void *)v43;
LABEL_17:
        uint64_t v11 = 0LL;
        id v33 = v10;
        while (1)
        {
          if (*(void *)v43 != v34) {
            objc_enumerationMutation(obj);
          }
          unint64_t v12 = *(void **)(*((void *)&v42 + 1) + 8 * v11);
          if (![v12 ringBufferNum])
          {

            goto LABEL_47;
          }

          size_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 name]);
          unsigned int v14 = [v13 containsString:@"RDE"];
          if ((v14 & 1) != 0) {
            goto LABEL_24;
          }
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v12 name]);
          int v29 = (void *)objc_claimAutoreleasedReturnValue([v12 name]);
          unsigned __int8 v30 = [v29 containsString:@"APS_USC"];

          if ((v30 & 1) != 0)
          {
            int v16 = 1;
            goto LABEL_25;
          }

LABEL_42:
          if ((id)++v11 == v33)
          {
            id v10 = [obj countByEnumeratingWithState:&v42 objects:v48 count:16];
            if (v10) {
              goto LABEL_17;
            }
            goto LABEL_44;
          }
        }

LABEL_24:
        int v16 = 0;
LABEL_25:
        [v36 addObject:v12];
        HIDWORD(qword_5B9548) += v14;
        if (((v14 & 1) != 0 || [obj count] == (char *)&dword_0 + 1) && !qword_5B94B8)
        {
          uint64_t v17 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", 10LL));
          uint64_t v18 = (void *)qword_5B94B8;
          qword_5B94B8 = v17;

          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v12 availableCounters]);
          __int128 v40 = 0u;
          __int128 v41 = 0u;
          __int128 v38 = 0u;
          __int128 v39 = 0u;
          id v20 = v19;
          id v21 = [v20 countByEnumeratingWithState:&v38 objects:v47 count:16];
          if (v21)
          {
            uint64_t v22 = *(void *)v39;
            do
            {
              for (uint64_t j = 0LL; j != v21; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v39 != v22) {
                  objc_enumerationMutation(v20);
                }
                unsigned int v24 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)j);
                unint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 name]);
                unsigned int v26 = [v25 hasPrefix:@"GRC_SHADER_PROFILER_DATA_"];

                if (v26)
                {
                  unint64_t v27 = (void *)qword_5B94B8;
                  unint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v24 name]);
                  [v27 addObject:v28];
                }
              }

              id v21 = [v20 countByEnumeratingWithState:&v38 objects:v47 count:16];
            }

            while (v21);
          }
        }

        else if (v16)
        {
          LODWORD(qword_5B9550) = [v36 count] - 1;
        }

        goto LABEL_42;
      }

    int v16 = 0;
    goto LABEL_50;
  }

  uint64_t v17 = v10 > 2;
LABEL_47:
  int v16 = v17;
LABEL_50:
  byte_5B9768 = v16;
  if (v135) {
    uint64_t v18 = derived_counters;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v18 == 1)
  {
    uint64_t v19 = 0LL;
    while (1)
    {
      name = agxps_counter_get_name(*(void *)(v136 + 8 * v19));
      std::string::basic_string[abi:nn180100]<0>(&v153, name);
      uint64_t v124 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>( *(uint64_t *)&v149[0],  *((unint64_t *)&v149[0] + 1),  (uint64_t)&v153);
      if (SHIBYTE(v153.__end_) < 0) {
        operator delete(v153.__first_);
      }
      v129.i64[0] = 1LL;
      __p[0] = (void *)3735928559LL;
      if (agxps_counter_get_raw_counters_used_by_derived_counters( v120,  (unint64_t *)(v136 + 8 * v19),  1LL,  &v129,  __p))
      {
        memset(&v153, 0, 24);
        id v21 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_impl<char const*&,std::vector<std::string>>( (uint64_t *)&xmmword_5B9740,  name,  (uint64_t)&v153);
        *(void *)&v133[0] = &v153;
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)v133);
        if (__p[0]) {
          break;
        }
      }

  ++*(void *)(a1 + 24);
  return v10;
}

      __int128 v31 = *(unsigned __int8 *)v11;
      __int128 v32 = v31 == 108;
      if (v31 == 108) {
        id v33 = v11 + 1;
      }
      else {
        id v33 = v11;
      }
      if (v31 == 113)
      {
        __int128 v32 = 1;
        id v33 = v11 + 1;
      }

      uint64_t v34 = v31 == 104;
      if (v31 == 104) {
        __int128 v32 = 0;
      }
      LODWORD(v35) = v31 == 104;
      if (v34) {
        fmt = v11 + 1;
      }
      else {
        fmt = v33;
      }
      id v36 = *fmt;
      uint64_t v192 = v19;
      if (v36 > 70)
      {
        switch(*fmt)
        {
          case 'c':
            LOBYTE(v35) = 0;
            LOBYTE(vsub_4B28(v1 + 16) = 0;
            uint64_t v84 = v196;
            v196 += 8;
            uint64_t v83 = *v84;
            goto LABEL_142;
          case 'd':
          case 'i':
            if (v32)
            {
              uint64_t v66 = (unint64_t *)v196;
              v196 += 8;
              uint64_t v67 = v17;
              uint64_t v68 = conv_10_quad(*v66, 0, &v193, (uint64_t)&v202[3], &v195);
              LODWORD(v19) = v192;
              uint64_t v7 = (char *)v68;
              if ((v67 & 1) != 0) {
                goto LABEL_171;
              }
LABEL_167:
              uint64_t v98 = 511LL;
              if (v189 + 1 < 0x200) {
                uint64_t v98 = v189;
              }
              goto LABEL_171;
            }

            unint64_t v94 = (unsigned int *)v196;
            v196 += 8;
            uint64_t v95 = *v94;
            if ((_DWORD)v35) {
              uint64_t v96 = (__int16)v95;
            }
            else {
              uint64_t v96 = v95;
            }
            uint64_t v97 = v96 >> 31;
            if ((v96 & 0x80000000) != 0) {
              uint64_t v96 = -v96;
            }
            __int128 v193 = v97;
            uint64_t v7 = &v202[3];
            do
            {
              *--uint64_t v7 = v96 % 0xA + 48;
              uint64_t v75 = v96 > 9;
              v96 /= 0xAu;
            }

            while (v75);
            uint64_t v195 = (_BYTE *)(&v202[3] - v7);
            if ((v17 & 1) == 0) {
              goto LABEL_167;
            }
LABEL_171:
            uint64_t v186 = v5;
            if (v193)
            {
              uint64_t v99 = 45;
            }

            else if (v15)
            {
              uint64_t v99 = 43;
            }

            else
            {
              uint64_t v99 = 32 * (v14 != 0);
            }

            __int128 v40 = flush_func;
            __int128 v101 = endpos;
            goto LABEL_408;
          case 'e':
          case 'f':
            goto LABEL_88;
          case 'g':
            goto LABEL_106;
          case 'h':
          case 'j':
          case 'k':
          case 'l':
          case 'm':
          case 'q':
          case 'r':
          case 't':
          case 'v':
          case 'w':
            goto LABEL_139;
          case 'n':
            if (v32)
            {
              LOBYTE(v35) = 0;
              unint64_t v85 = (void **)v196;
              v196 += 8;
              **unint64_t v85 = v8;
            }

            else if ((_DWORD)v35)
            {
              LOBYTE(v35) = 0;
              uint64_t v126 = (_WORD **)v196;
              v196 += 8;
              *uint64_t *v126 = v8;
            }

            else
            {
              uint64_t v145 = (_DWORD **)v196;
              v196 += 8;
              *uint64_t *v145 = v8;
            }

            LOBYTE(vsub_4B28(v1 + 16) = 1;
            goto LABEL_304;
          case 'o':
            if (v32)
            {
              uint64_t v86 = (unint64_t *)v196;
              v196 += 8;
              uint64_t v87 = *v86;
              BOOL v88 = "0123456789abcdef";
              if (*fmt == 88) {
                BOOL v88 = "0123456789ABCDEF";
              }
              if (HIDWORD(v87))
              {
                uint64_t v7 = &v202[3];
                __int128 v40 = flush_func;
                do
                {
                  *--uint64_t v7 = v88[v87 & 7];
                  uint64_t v65 = v87 >= 8;
                  v87 >>= 3;
                }

                while (v65);
              }

              else
              {
                uint64_t v7 = &v202[3];
                __int128 v40 = flush_func;
                do
                {
                  *--uint64_t v7 = v88[v87 & 7];
                  uint64_t v65 = v87 >= 8;
                  LODWORD(v87) = v87 >> 3;
                }

                while (v65);
              }
            }

            else
            {
              __int128 v127 = (unsigned int *)v196;
              v196 += 8;
              unint64_t v128 = *v127;
              if ((_DWORD)v35) {
                unint64_t v128 = (unsigned __int16)v128;
              }
              uint64_t v129 = "0123456789abcdef";
              if (*fmt == 88) {
                uint64_t v129 = "0123456789ABCDEF";
              }
              uint64_t v7 = &v202[3];
              uint64_t v187 = v128;
              do
              {
                *--uint64_t v7 = v129[v128 & 7];
                uint64_t v75 = v128 > 7;
                v128 >>= 3;
              }

              while (v75);
              __int128 v40 = flush_func;
            }

            uint64_t v143 = (_BYTE *)(&v202[3] - v7);
            uint64_t v195 = (_BYTE *)(&v202[3] - v7);
            if ((v17 & 1) == 0)
            {
              uint64_t v144 = 511LL;
              if (v189 + 1 < 0x200) {
                uint64_t v144 = v189;
              }
              while ((unint64_t)v143 < v144)
              {
                *--uint64_t v7 = 48;
                uint64_t v143 = ++v195;
              }
            }

            if (!v16)
            {
              LOBYTE(v35) = 0;
              goto LABEL_318;
            }

            if (*v7 == 48) {
              goto LABEL_294;
            }
            LOBYTE(v35) = 0;
            LOBYTE(vsub_4B28(v1 + 16) = 0;
            *--uint64_t v7 = 48;
            __int128 v136 = v195 + 1;
            goto LABEL_301;
          case 'p':
            __int128 v38 = *++fmt;
            int v37 = v38;
            id v10 = v38;
            if (!v38) {
              continue;
            }
            if (v37 <= 83)
            {
              __int128 v40 = flush_func;
              switch(v37)
              {
                case 'A':
                  __int128 v41 = (unsigned int **)v196;
                  v196 += 8;
                  uint64_t v35 = *v41;
                  if (!v35) {
                    goto LABEL_217;
                  }
                  __int128 v42 = bswap32(*v35);
                  __int128 v43 = v42;
                  __int128 v44 = v202;
                  __int128 v45 = &v202[2];
                  uint64_t v46 = &v202[4];
                  do
                  {
                    BOOL v47 = v45;
                    int v48 = v44;
                    *(v46 - 2) = v43 % 0xA + 48;
                    --v46;
                    --v45;
                    --v44;
                    uint64_t v75 = v43 > 9;
                    v43 /= 0xAu;
                  }

                  while (v75);
                  *(v46 - 2) = 46;
                  uint64_t v49 = BYTE1(v42);
                  do
                  {
                    unsigned int v50 = v48;
                    *(v47 - 2) = v49 % 0xA + 48;
                    --v47;
                    --v48;
                    uint64_t v75 = v49 > 9;
                    v49 /= 0xAu;
                  }

                  while (v75);
                  *(v47 - 2) = 46;
                  unint64_t v51 = BYTE2(v42);
                  do
                  {
                    *(v50 - 2) = v51 % 0xA + 48;
                    --v50;
                    uint64_t v75 = v51 > 9;
                    v51 /= 0xAu;
                  }

                  while (v75);
                  *(v50 - 2) = 46;
                  uint64_t v7 = v50 - 2;
                  uint64_t v52 = HIBYTE(v42);
                  do
                  {
                    *--uint64_t v7 = v52 % 0xA + 48;
                    uint64_t v75 = v52 > 9;
                    v52 /= 0xAu;
                  }

                  while (v75);
                  goto LABEL_310;
                case 'B':
                case 'F':
                  goto LABEL_194;
                case 'C':
                case 'D':
                case 'E':
                case 'G':
                case 'H':
                  goto LABEL_207;
                case 'I':
                  __int128 v110 = (unsigned int **)v196;
                  v196 += 8;
                  uint64_t v35 = *v110;
                  if (!v35) {
                    goto LABEL_217;
                  }
                  LOBYTE(v35) = 0;
                  LOBYTE(vsub_4B28(v1 + 16) = 0;
                  uint64_t v7 = 0LL;
                  unint64_t v111 = v195;
                  goto LABEL_311;
                default:
                  __int128 v40 = flush_func;
                  if (v37 != 83) {
                    goto LABEL_207;
                  }
LABEL_194:
                  if (v10 == 66)
                  {
                    BOOL v105 = (unint64_t *)v196;
                    v196 += 8;
                    int v106 = *v105;
                    if (v106) {
                      int v106 = *(unsigned int *)v106;
                    }
                  }

                  else
                  {
                    uint64_t v107 = (unint64_t **)v196;
                    v196 += 8;
                    uint64_t v108 = *v107;
                    if (!v108) {
                      goto LABEL_200;
                    }
                    int v106 = *v108;
                    if ((v106 & 0x8000000000000000LL) != 0)
                    {
                      BOOL v140 = "  - ";
                      goto LABEL_322;
                    }
                  }

                  if (v106 < 0x3CD)
                  {
LABEL_200:
                    uint64_t v109 = apr_snprintf(__s, v19, "%3d ");
                    goto LABEL_320;
                  }

                  uint64_t v123 = "";
                  do
                  {
                    uint64_t v124 = v106;
                    v106 >>= 10;
                    ++v123;
                  }

                  while (v106 > 0x3CC);
                  uint64_t v125 = v124 & 0x3FF;
                  if (v106 < 9 || v106 == 9 && v125 <= 0x3CC) {
                    uint64_t v109 = apr_snprintf(__s, v19, "%d.%d%c");
                  }
                  else {
                    uint64_t v109 = apr_snprintf(__s, v19, "%3d%c");
                  }
LABEL_320:
                  if ((v109 & 0x80000000) == 0) {
                    goto LABEL_323;
                  }
                  BOOL v140 = "****";
LABEL_322:
                  *(_DWORD *)__s = *(_DWORD *)v140;
                  BOOL v205 = v140[4];
LABEL_323:
                  uint64_t v7 = __s;
                  uint64_t v147 = strlen(__s);
                  LOBYTE(v35) = 0;
                  LOBYTE(vsub_4B28(v1 + 16) = 0;
                  uint64_t v195 = (_BYTE *)v147;
                  uint64_t v18 = 32;
                  __int128 v101 = endpos;
                  LODWORD(v19) = v192;
                  break;
              }

              goto LABEL_412;
            }

            if (v37 > 111)
            {
              if (v37 != 116)
              {
                __int128 v40 = flush_func;
                if (v37 != 112)
                {
LABEL_207:
                  LOBYTE(v35) = 0;
                  LOBYTE(vsub_4B28(v1 + 16) = 0;
                  uint64_t v195 = (_BYTE *)&dword_8;
                  v196 += 8;
                  uint64_t v7 = "bogus %p";
                  goto LABEL_318;
                }

                BOOL v80 = (unint64_t *)v196;
                v196 += 8;
                int v81 = *v80;
                if (HIDWORD(v81))
                {
                  uint64_t v7 = &v202[3];
                  do
                  {
                    *--uint64_t v7 = conv_p2_low_digits[v81 & 0xF];
                    uint64_t v75 = v81 > 0xF;
                    v81 >>= 4;
                  }

                  while (v75);
                }

                else
                {
                  uint64_t v7 = &v202[3];
                  do
                  {
                    *--uint64_t v7 = conv_p2_low_digits[v81 & 0xF];
                    uint64_t v65 = v81 >= 0x10;
                    LODWORD(v81) = v81 >> 4;
                  }

                  while (v65);
                }

                LOBYTE(v35) = 0;
                LOBYTE(vsub_4B28(v1 + 16) = 0;
                unint64_t v111 = (_BYTE *)(&v202[3] - v7);
                goto LABEL_316;
              }

              uint64_t v117 = (unsigned int **)v196;
              v196 += 8;
              uint64_t v35 = *v117;
              __int128 v40 = flush_func;
              if (!v35)
              {
LABEL_217:
                LOBYTE(vsub_4B28(v1 + 16) = 0;
                uint64_t v195 = (_BYTE *)(&dword_4 + 2);
                uint64_t v18 = 32;
                uint64_t v7 = "(null)";
                goto LABEL_318;
              }

              uint64_t v118 = *(void *)v35;
              if (HIDWORD(v118))
              {
                uint64_t v7 = &v202[3];
                do
                {
                  *--uint64_t v7 = conv_p2_low_digits[v118 & 0xF];
                  uint64_t v75 = v118 > 0xF;
                  v118 >>= 4;
                }

                while (v75);
              }

              else
              {
                uint64_t v7 = &v202[3];
                do
                {
                  *--uint64_t v7 = conv_p2_low_digits[v118 & 0xF];
                  uint64_t v65 = v118 >= 0x10;
                  LODWORD(v118) = v118 >> 4;
                }

                while (v65);
              }

LABEL_44:
      if ([v36 count])
      {
        objc_storeStrong((id *)&xmmword_5B8CE0 + 1, v36);
        qword_5B8CF0 = (uint64_t)[v31 sampleMarker];
      }

        __int128 v45 = v44 & 0xFFFFFFF;
        if (*((void *)&v121 + 1)) {
          v42 += (unint64_t)(v45 - v41) / *((void *)&v121 + 1);
        }
        int v115 = v44 & 0xFFFFFFF;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( (uint64_t)v117,  v44 & 0xFFFFFFF,  &v115)
        + 5) = v42;
        uint64_t v46 = v44 >> 28;
        BOOL v47 = (v44 >> 28) - 3;
        if (v47 >= 6)
        {
          if (v46 - 1 < 2)
          {
            HIDWORD(v1sub_4B28(v1 + 16) = v4;
            std::deque<ProfileEvent>::emplace_back<ProfileEvent&>(&v119, &v116);
          }
        }

        else
        {
          int v48 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>( a1[7],  v46);
          if (v48)
          {
            if ((void)v120 != v119.i64[1])
            {
              uint64_t v49 = v119.i64[1] + 8 * ((unint64_t)v121 >> 9);
              unsigned int v50 = *(char **)v49;
              unint64_t v51 = (char *)(*(void *)v49 + 8 * (v121 & 0x1FF));
              uint64_t v52 = *(void *)(v119.i64[1] + (((*((void *)&v121 + 1) + (void)v121) >> 6) & 0x3FFFFFFFFFFFFF8LL))
                  + 8 * ((*((void *)&v121 + 1) + v121) & 0x1FF);
              if (v51 != (char *)v52)
              {
                while (*((_DWORD *)v51 + 1) != *((_DWORD *)v48 + 5))
                {
                  v51 += 8;
                  if (v51 - v50 == 4096)
                  {
                    uint64_t v53 = *(char **)(v49 + 8);
                    v49 += 8LL;
                    unsigned int v50 = v53;
                    unint64_t v51 = v53;
                  }
                }

                BOOL v54 = *(_DWORD *)v51;
                std::deque<ProfileEvent>::erase(&v119, (char *)v49, (uint64_t)v51);
                int v55 = v54 & 0xFFFFFFF;
                int v115 = v54 & 0xFFFFFFF;
                uint64_t v112 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( (uint64_t)v117,  v54 & 0xFFFFFFF,  &v115)
                       + 5);
                int v115 = v45;
                uint64_t v56 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( (uint64_t)v117,  v45,  &v115);
                uint64_t v57 = a1[1];
                uint64_t v58 = *((void *)v57 + 5);
                if (v58 < 2 || (uint64_t v59 = a1[3], v60 = *((void *)v59 + 5), v60 <= 1))
                {
                  uint64_t v67 = v54;
                  unint64_t v111 = (*a1[4] | (v58 << 36)) & 0x3000000FFFLL;
                  __int128 v110 = 0;
                  uint64_t v61 = 0;
                }

                else
                {
                  uint64_t v61 = 0;
                  uint64_t v62 = *((void *)v57 + 4);
                  uint64_t v63 = *((void *)v57 + 1);
                  uint64_t v64 = *((void *)v59 + 4);
                  uint64_t v65 = *((void *)v59 + 1);
                  uint64_t v66 = (*a1[4] | (v58 << 36)) & 0x3000000FFFLL | ((unint64_t)(*(_DWORD *)(*(void *)(v65 + (((unint64_t)(v64 + 1) >> 7) & 0x1FFFFFFFFFFFFF8LL))
                                                                                                + 4
                                                                                                * ((v64 + 1) & 0x3FF)) & 0xFFF) << 12);
                  if (v58 < 3 || v60 == 2)
                  {
                    uint64_t v67 = v54;
                  }

                  else
                  {
                    uint64_t v67 = v54;
                    v66 |= (unint64_t)(*(_DWORD *)(*(void *)(v65
                  }

                  unint64_t v111 = v66;
                }

                uint64_t v68 = *((_DWORD *)v56 + 5) - v112;
                uint64_t v69 = *a1[9];
                if (v69 == -1) {
                  uint64_t v70 = v67 >> 28 == 2;
                }
                else {
                  uint64_t v70 = v61;
                }
                uint64_t v71 = *a1[2];
                uint64_t v74 = (v55 == 4095 || (_DWORD)v45 == 4095) && *(_BYTE *)(*(void *)a1[10] + 752LL) != 0;
                if (v40 >= v114)
                {
                  uint64_t v107 = *a1[2];
                  uint64_t v108 = v70;
                  uint64_t v109 = v74;
                  uint64_t v113 = *((_DWORD *)v56 + 5) - v112;
                  uint64_t v75 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v40 - (void)v39) >> 3) + 1;
                  if (v75 > 0x666666666666666LL) {
                    abort();
                  }
                  else {
                    __int128 v76 = v75;
                  }
                  if (v76) {
                    __int128 v76 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<ShaderProfilerUSCSampleInfo>>(v76);
                  }
                  else {
                    unint64_t v77 = 0LL;
                  }
                  uint64_t v78 = v76 + 8 * ((uint64_t)(v40 - (void)v39) >> 3);
                  *(_DWORD *)uint64_t v78 = v69;
                  *(_DWORD *)(v78 + 4) = 0;
                  *(_DWORD *)(v78 + 8) = v113;
                  *(_DWORD *)(v78 + 12) = v107;
                  *(_DWORD *)(v78 + sub_4B28(v1 + 16) = v110;
                  *(_DWORD *)(v78 + 20) = v108;
                  *(void *)(v78 + 24) = v111;
                  *(_DWORD *)(v78 + 32) = v47;
                  *(_DWORD *)(v78 + 36) = v109;
                  if ((void *)v40 == v39)
                  {
                    uint64_t v82 = (void *)(v76 + 8 * ((uint64_t)(v40 - (void)v39) >> 3));
                  }

                  else
                  {
                    uint64_t v79 = v76 + 8 * ((uint64_t)(v40 - (void)v39) >> 3);
                    do
                    {
                      BOOL v80 = *(_OWORD *)(v40 - 40);
                      int v81 = *(_OWORD *)(v40 - 24);
                      uint64_t v82 = (void *)(v79 - 40);
                      *(void *)(v79 - 8) = *(void *)(v40 - 8);
                      *(_OWORD *)(v79 - 24) = v81;
                      *(_OWORD *)(v79 - 40) = v80;
                      v40 -= 40LL;
                      v79 -= 40LL;
                    }

                    while ((void *)v40 != v39);
                  }

                  BOOL v114 = v76 + 40 * v77;
                  __int128 v40 = v78 + 40;
                  if (v39) {
                    operator delete(v39);
                  }
                  __int128 v39 = v82;
                }

                else
                {
                  *(_DWORD *)__int128 v40 = v69;
                  *(_DWORD *)(v40 + 4) = 0;
                  *(_DWORD *)(v40 + 8) = v68;
                  *(_DWORD *)(v40 + 12) = v71;
                  *(_DWORD *)(v40 + sub_4B28(v1 + 16) = v110;
                  *(_DWORD *)(v40 + 20) = v70;
                  *(void *)(v40 + 24) = v111;
                  *(_DWORD *)(v40 + 32) = v47;
                  *(_DWORD *)(v40 + 36) = v74;
                  v40 += 40LL;
                }
              }
            }
          }
        }

        goto LABEL_58;
      }

      __int128 v45 = v41;
LABEL_58:
      int v37 = a1[8];
      __int128 v38 = *((void *)v37 + 5);
      __int128 v41 = v45;
      if (!v38) {
        goto LABEL_105;
      }
    }
  }

  __int128 v39 = 0LL;
  __int128 v40 = 0LL;
LABEL_105:
  uint64_t v83 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v40 - (void)v39) >> 3));
  else {
    uint64_t v84 = v83;
  }
  std::__introsort<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper _processTracePackets:forRenderIndex:andGenerateSampleList:forTargetIndex:forLimiterIndex:]::$_1::operator() const(std::queue<ProfileEvent>)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*,false>( (uint64_t)v39,  v40,  v84,  1);
  if ((void *)v40 != v39)
  {
    unint64_t v85 = 0;
    uint64_t v86 = v39;
    do
    {
      v86[8] = v85++;
      v86 += 10;
    }

    while (v86 != (_DWORD *)v40);
    if ((void *)v40 != v39)
    {
      uint64_t v87 = (void **)a1[11];
      BOOL v88 = (char *)v87[1];
      int v89 = v39;
      do
      {
        uint64_t v90 = (char *)v87[2];
        if (v88 >= v90)
        {
          uint64_t v93 = 0xCCCCCCCCCCCCCCCDLL * ((v88 - (_BYTE *)*v87) >> 3);
          unint64_t v94 = v93 + 1;
          if (v93 + 1 > 0x666666666666666LL) {
            abort();
          }
          uint64_t v95 = 0xCCCCCCCCCCCCCCCDLL * ((v90 - (_BYTE *)*v87) >> 3);
          if (2 * v95 > v94) {
            unint64_t v94 = 2 * v95;
          }
          if (v95 >= 0x333333333333333LL) {
            uint64_t v96 = 0x666666666666666LL;
          }
          else {
            uint64_t v96 = v94;
          }
          if (v96) {
            uint64_t v96 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<ShaderProfilerUSCSampleInfo>>(v96);
          }
          else {
            uint64_t v97 = 0LL;
          }
          uint64_t v98 = v96 + 40 * v93;
          uint64_t v99 = *v89;
          uint64_t v100 = v89[1];
          *(void *)(v98 + 32) = *((void *)v89 + 4);
          *(_OWORD *)uint64_t v98 = v99;
          *(_OWORD *)(v98 + sub_4B28(v1 + 16) = v100;
          unint64_t v102 = (char *)*v87;
          __int128 v101 = (char *)v87[1];
          uint64_t v103 = (char *)v98;
          if (v101 != *v87)
          {
            do
            {
              uint64_t v104 = *(_OWORD *)(v101 - 40);
              BOOL v105 = *(_OWORD *)(v101 - 24);
              *((void *)v103 - 1) = *((void *)v101 - 1);
              *(_OWORD *)(v103 - 24) = v105;
              *(_OWORD *)(v103 - 40) = v104;
              v103 -= 40;
              v101 -= 40;
            }

            while (v101 != v102);
            __int128 v101 = (char *)*v87;
          }

          BOOL v88 = (char *)(v98 + 40);
          uint64_t *v87 = v103;
          v87[1] = (void *)(v98 + 40);
          v87[2] = (void *)(v96 + 40 * v97);
          if (v101) {
            operator delete(v101);
          }
        }

        else
        {
          uint64_t v91 = *v89;
          uint64_t v92 = v89[1];
          *((void *)v88 + 4) = *((void *)v89 + 4);
          *(_OWORD *)BOOL v88 = v91;
          *((_OWORD *)v88 + 1) = v92;
          v88 += 40;
        }

        v87[1] = v88;
        int v89 = (_OWORD *)((char *)v89 + 40);
      }

      while (v89 != (_OWORD *)v40);
    }
  }

  if (v39) {
    operator delete(v39);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v117);
  std::deque<ProfileEvent>::~deque[abi:nn180100](&v119);
  return std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v122);
}

          __int128 v32 = 20;
        }

LABEL_47:
    }
  }

  objc_autoreleasePoolPop(context);
}

    __int128 v43 = v109 + 1;
  }

  uint64_t v65 = v103;

  if (HIDWORD(qword_5B9548) <= 1) {
    uint64_t v66 = (unint64_t)[(id)qword_5B94B8 count];
  }
  else {
    uint64_t v66 = ((unint64_t)[(id)qword_5B94B8 count] + 1) >> 1;
  }
  uint64_t v67 = 8 * v66;
  uint64_t v68 = 224 - (void)[(id)xmmword_5B94A8 count];
  if (v68 >= 8 * v66)
  {
    uint64_t v69 = 0;
    do
    {
      if (v114)
      {
        for (iunint64_t i = 0LL; ii != v114; ++ii)
        {
          uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue([(id)xmmword_5B94A8 objectAtIndexedSubscript:v113]);
          uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_5B94B8 objectAtIndexedSubscript:ii]);
          uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue( +[GPURawCounterSelect selectWithName:options:]( &OBJC_CLASS___GPURawCounterSelect,  "selectWithName:options:",  v72,  0LL));
          [v71 addObject:v73];
        }
      }

      uint64_t v74 = v114;
      if (HIDWORD(qword_5B9548) >= 2)
      {
        while (v74 < (unint64_t)[(id)qword_5B94B8 count])
        {
          uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([(id)xmmword_5B94A8 objectAtIndexedSubscript:v111]);
          __int128 v76 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_5B94B8 objectAtIndexedSubscript:v74]);
          unint64_t v77 = (void *)objc_claimAutoreleasedReturnValue( +[GPURawCounterSelect selectWithName:options:]( &OBJC_CLASS___GPURawCounterSelect,  "selectWithName:options:",  v76,  0LL));
          [v75 addObject:v77];

          ++v74;
        }
      }

      if (v69 > 2) {
        break;
      }
      ++v69;
      v68 -= v67;
    }

    while (v68 >= v67);
  }

  uint64_t v78 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", 2LL));
  uint64_t v79 = (void *)xmmword_5B94C8;
  *(void *)&xmmword_5B94C8 = v78;

  BOOL v80 = (void *)xmmword_5B94C8;
  int v81 = (void *)objc_claimAutoreleasedReturnValue( +[GPURawCounterSourceTriggerSelect selectWithName:options:]( &OBJC_CLASS___GPURawCounterSourceTriggerSelect,  "selectWithName:options:",  @"TimerNClock",  &off_59FC28));
  [v80 addObject:v81];

  uint64_t v82 = (void *)xmmword_5B94C8;
  uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue( +[GPURawCounterSourceTriggerSelect selectWithName:options:]( &OBJC_CLASS___GPURawCounterSourceTriggerSelect,  "selectWithName:options:",  @"KickBoundary",  0LL));
  [v82 addObject:v83];

  uint64_t v84 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", 1LL));
  unint64_t v85 = (void *)*((void *)&xmmword_5B94C8 + 1);
  *((void *)&xmmword_5B94C8 + 1) = v84;

  uint64_t v86 = (void *)*((void *)&xmmword_5B94C8 + 1);
  uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue( +[GPURawCounterSourceTriggerSelect selectWithName:options:]( &OBJC_CLASS___GPURawCounterSourceTriggerSelect,  "selectWithName:options:",  @"TimerNClock",  &off_59FC50));
  [v86 addObject:v87];

  BOOL v88 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", 1LL));
  int v89 = (void *)qword_5B94D8;
  qword_5B94D8 = v88;

  uint64_t v90 = (void *)qword_5B94D8;
  uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue( +[GPURawCounterSourceTriggerSelect selectWithName:options:]( &OBJC_CLASS___GPURawCounterSourceTriggerSelect,  "selectWithName:options:",  @"KickBoundary",  0LL));
  [v90 addObject:v91];

  if (v114)
  {
    v125[0] = @"BufferSizeInKB";
    uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", 20480LL));
    v125[1] = @"RingBufferSizeInKB";
    v126[0] = v92;
    uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", 20480LL));
    v126[1] = v93;
    unint64_t v94 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v126,  v125,  2LL));
    uint64_t v95 = (void *)*((void *)&xmmword_5B94E8 + 1);
    *((void *)&xmmword_5B94E8 + 1) = v94;
  }

  else
  {
    v123[1] = @"BufferSizeInKB";
    v124[0] = &off_5A0460;
    v123[0] = @"ShaderProfiler";
    uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  20480LL * qword_5B9548));
    v124[1] = v92;
    uint64_t v96 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v124,  v123,  2LL));
    uint64_t v93 = (void *)*((void *)&xmmword_5B94E8 + 1);
    *((void *)&xmmword_5B94E8 + 1) = v96;
  }

  uint64_t v97 = GTUSCSamplingStreamingManagerHelper::AllocUSCSamplingAddressBuffer((GTUSCSamplingStreamingManagerHelper *)&GTUSCSamplingStreamingManagerHelper::Instance(void)::instance);
  qword_5B9460 = (uint64_t)[(id)qword_5B9480 mutableBytes];
  [*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 40) setObject:v65 forKeyedSubscript:@"limiter sample counters"];
  [*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 40) setObject:v29 forKeyedSubscript:@"Counter Info"];
  [*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 40) setObject:v104 forKeyedSubscript:@"Limiter Counter List Map"];
  (*(void (**)(void))(*(void *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 32) + 16LL))();
  HIDWORD(qword_5B9550) = 12;
  [*((id *)&GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 1) setup];
  uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 16) objectForKeyedSubscript:@"AnalyzeBinaries"]);
  uint64_t v99 = v98 == 0LL;

  if (!v99)
  {
    uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 16) objectForKeyedSubscript:@"AnalyzeBinaries"]);
    byte_5B9559 = [v100 BOOLValue];
  }
}

        v28 += 5;
        if (!--v26) {
          goto LABEL_51;
        }
      }
    }

    int v29 = 0.0;
LABEL_51:
    id v21 = (void *)objc_claimAutoreleasedReturnValue( -[GTShaderProfilerHelper _processPerLineCostDataForLineTable:withFileCost:withDebugInfo:andAllDrawCost:withKey:withShaderSourcePath:withDrawCost:]( self,  "_processPerLineCostDataForLineTable:withFileCost:withDebugInfo:andAllDrawCost:withKey:withShaderSo urcePath:withDrawCost:",  &v65,  __p,  v67,  v56,  v55,  v60,  v29));
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v60);
    std::__hash_table<std::__hash_value_type<std::string,PerFileCost>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,PerFileCost>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,PerFileCost>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,PerFileCost>>>::~__hash_table((uint64_t)__p);
    uint64_t v18 = v52;
    int v16 = v53;
  }

  __p[0] = &v65;
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
  if (v20) {
    operator delete(v20);
  }
  __p[0] = v68;
  std::vector<DebugInfo::LineDisassemblyInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
  __p[0] = v67;
  std::vector<DebugInfo::LineEntry>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);

  return v21;
}

LABEL_48:
  return v26;
}

  if (v13->nelts >= 1)
  {
    for (unint64_t i = 0LL; i < v13->nelts; ++i)
    {
      __int128 v39 = *(void *)&v13->elts[8 * i];
      if (!v39) {
        continue;
      }
      __int128 v40 = *(void *)(v39 + 16);
      __int128 v41 = *(void *)(v11 + 64);
      if (v41 <= v40 && *(void *)(v11 + 72) + v41 > v40) {
        continue;
      }
      __int128 v43 = *(_DWORD *)(a3 + 256);
      if (*(void *)(v39 + 120) && v43 != 8) {
        continue;
      }
      __int128 v45 = *(void *)(v39 + 128);
      if (v45)
      {
        HIDWORD(v47) = *(unsigned __int8 *)(v39 + 160);
        LODWORD(v47) = (HIDWORD(v47) << 24) - 0x2000000;
        uint64_t v46 = v47 >> 25;
        int v48 = v46 > 7u ? 1 : dword_316FF8[v46];
        if (v48 != v43) {
          continue;
        }
      }

      uint64_t v49 = a5[1];
      if (v45 != v49)
      {
        uint64_t v59 = *(uint64_t **)(v11 + 40);
        uint64_t v60 = a5;
        while (*(void *)(v39 + 120) != v49)
        {
          if (*(_DWORD *)v60 == 29)
          {
            uint64_t v60 = GTMTLSMContext_getObject(*v59, v60[5], v60[2]);
            if (!v60 || *(_DWORD *)v60 != 29) {
              goto LABEL_94;
            }
          }

          else
          {
            if (*(_DWORD *)v60 != 71) {
              goto LABEL_94;
            }
            uint64_t v60 = GTMTLSMContext_getObject(*v59, v60[5], v60[2]);
            if (!v60 || *(_DWORD *)v60 != 71) {
              goto LABEL_94;
            }
          }

          uint64_t v49 = v60[1];
          if (*(void *)(v39 + 128) == v49) {
            break;
          }
        }
      }

      std::unordered_map<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong}>::unordered_map( (uint64_t)v78,  v73);
      unsigned int v50 = *(id *)(a2 + 8);
      GetIntersectionFunctionTableState(v80, v11, v39, v76, a6, pa);
      unint64_t v51 = objc_alloc_init(&OBJC_CLASS___MTLIntersectionFunctionTableDescriptor);
      -[MTLIntersectionFunctionTableDescriptor setFunctionCount:]( v51,  "setFunctionCount:",  *(unsigned int *)(*(void *)(v39 + 104) + 8LL));
      -[MTLIntersectionFunctionTableDescriptor setResourceIndex:](v51, "setResourceIndex:", **(void **)(v39 + 104));
      -[MTLIntersectionFunctionTableDescriptor setForceResourceIndex:](v51, "setForceResourceIndex:", 1LL);
      uint64_t v52 = *(void *)(v39 + 128);
      if (v52)
      {
        uint64_t v53 = *(unsigned __int8 *)(v39 + 160);
        BOOL v54 = GTMTLSMContext_getObject(**(void **)(v11 + 40), v52, v76);
        if (v54)
        {
          int v55 = std::unordered_map<unsigned long long,-[GTShaderProfilerHelper _calculatePerSampleActiveShaders:withShaderProfilerResult:forWorkloadInfo:]::EncoderRangeInfo>::find[abi:nn180100]( *(void *)(a3 + 40),  *(void *)(a3 + 48),  v54[1]);
          if (v55)
          {
            uint64_t v72 = v50;
            uint64_t v68 = (id)v55[3];
            uint64_t v56 = [v68 newIntersectionFunctionTableWithDescriptor:v51 stage:v53];
            if (v56)
            {
              uint64_t v66 = *(uint64_t **)(v11 + 40);
              uint64_t v57 = std::unordered_map<unsigned long long,-[GTShaderProfilerHelper _calculatePerSampleActiveShaders:withShaderProfilerResult:forWorkloadInfo:]::EncoderRangeInfo>::find[abi:nn180100]( *(void *)(a3 + 80),  *(void *)(a3 + 88),  v53);
              if (!v57) {
                abort();
              }
              uint64_t v58 = v57;
              std::unordered_map<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong}>::unordered_map( (uint64_t)v79,  (uint64_t)v78);
              SetupInstrumentedIntersectionFunctionTable( v56,  v72,  v66,  (uint64_t)(v58 + 3),  v79,  v80,  *(void *)(v39 + 128),  v76);
LABEL_88:
              std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto22MTLRenderPipelineState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>>::~__hash_table((uint64_t)v79);
            }

            goto LABEL_90;
          }
        }

        uint64_t v56 = 0LL;
      }

      else
      {
        uint64_t v61 = *(void *)(v39 + 120);
        if (v61)
        {
          uint64_t v62 = GTMTLSMContext_getObject(**(void **)(v11 + 40), v61, v76);
          if (v62)
          {
            uint64_t v63 = std::unordered_map<unsigned long long,-[GTShaderProfilerHelper _calculatePerSampleActiveShaders:withShaderProfilerResult:forWorkloadInfo:]::EncoderRangeInfo>::find[abi:nn180100]( *(void *)(a3 + 120),  *(void *)(a3 + 128),  v62[1]);
            if (v63)
            {
              uint64_t v72 = v50;
              uint64_t v68 = (id)v63[3];
              uint64_t v56 = [v68 newIntersectionFunctionTableWithDescriptor:v51];
              if (v56)
              {
                uint64_t v64 = *(uint64_t **)(v11 + 40);
                std::unordered_map<unsigned long long,objc_object  {objcproto23MTLVisibleFunctionTable}* {__strong}>::unordered_map( (uint64_t)v79,  (uint64_t)v78);
                SetupInstrumentedIntersectionFunctionTable( v56,  v50,  v64,  a3 + 200,  v79,  v80,  *(void *)(v39 + 120),  v76);
                goto LABEL_88;
              }

  int v29 = 0LL;
  unsigned __int8 v30 = 0LL;
  __int128 v31 = 0LL;
  __int128 v32 = 0LL;
  uint64_t v74 = 0;
  while (2)
  {
    uint64_t v7 = (unsigned int *)((char *)v7 + *v7);
    id v33 = v7[1];
    if (a4)
    {
      if (v33 != -12272)
      {
        uint64_t v65 = *a4;
        uint64_t v92 = 0u;
        __s = 0u;
        int v89 = v65;
        uint64_t v90 = 500;
        uint64_t v91 = "header->fenum == kDYFEInternalData";
        uint64_t v66 = &v89;
        goto LABEL_102;
      }
    }

    else if (v33 != -12272)
    {
      goto LABEL_96;
    }

    uint64_t v82 = 0LL;
    uint64_t v34 = FBDecoder_DecodeArguments((unsigned int *)&v82, (uint64_t)(v7 + 9), *v7 - 36, (uint64_t)&v89, 0xDuLL);
    if (a4)
    {
      if (v34)
      {
        uint64_t v67 = *a4;
        BOOL v80 = 0u;
        int v81 = 0u;
        unint64_t v77 = v67;
        uint64_t v78 = 500;
        uint64_t v69 = "err == FBUF_SUCCESS";
        goto LABEL_101;
      }

      uint64_t v35 = HIDWORD(v82);
      if (HIDWORD(v82) <= 1)
      {
        uint64_t v68 = *a4;
        BOOL v80 = 0u;
        int v81 = 0u;
        unint64_t v77 = v68;
        uint64_t v78 = 500;
        uint64_t v69 = "2 <= parser.ntokens";
        goto LABEL_101;
      }
    }

    else
    {
      uint64_t v35 = HIDWORD(v82);
      if (v34) {
        id v36 = 0;
      }
      else {
        id v36 = HIDWORD(v82) > 1;
      }
      if (!v36) {
        goto LABEL_96;
      }
    }

    int v37 = *(_DWORD *)v92;
    if (*(int *)v92 <= 106)
    {
      if (v37 == 105)
      {
        __int128 v39 = v29;
        __int128 v40 = v31;
        __int128 v41 = v32;
        __int128 v42 = v26;
        __int128 v43 = v25;
        __int128 v44 = v30;
        __int128 v45 = (v39 + 1);
        uint64_t v7 = DecodeDYMTLBinding(v75 + 56LL * (unsigned __int16)v39, v7, a2, a3, a4);
        uint64_t v46 = v45;
        unsigned __int8 v30 = v44;
        unint64_t v25 = v43;
        unsigned int v26 = v42;
        __int128 v32 = v41;
        __int128 v31 = v40;
        int v29 = v46;
      }

      else if (v37 == 106)
      {
        __int128 v38 = v30;
        unsigned __int8 v30 = (v30 + 1);
        uint64_t v7 = DecodeDYMTLBinding(v76 + 56LL * v38, v7, a2, a3, a4);
      }

      goto LABEL_93;
    }

    if (v37 != 107)
    {
      if (v37 != 126) {
        goto LABEL_93;
      }
      if (a4)
      {
        if (v35 <= 3) {
          goto LABEL_100;
        }
      }

      else if (v35 < 4)
      {
        goto LABEL_96;
      }

      uint64_t v71 = v30;
      uint64_t v72 = v32;
      uint64_t v73 = v29;
      BOOL v47 = v31;
      int v48 = (const void *)__s;
      if ((void)__s)
      {
        uint64_t v49 = a3;
        unsigned int v50 = strlen((const char *)__s);
        unint64_t v51 = (char *)a2[23];
        uint64_t v52 = v51;
        uint64_t v53 = v50 + 1;
        if (v50 != -1LL)
        {
LABEL_82:
          BOOL v54 = v26;
          a2[23] = &v51[v53];
          if ((_DWORD)v49) {
            memcpy(v52, v48, v53);
          }
          int v55 = v25;
          uint64_t v56 = v94;
          if (v94)
          {
            uint64_t v57 = strlen(v94);
            uint64_t v58 = (char *)a2[23];
            uint64_t v59 = v58;
            uint64_t v60 = v57 + 1;
            if (v57 != -1LL) {
              goto LABEL_89;
            }
          }

          else
          {
            uint64_t v60 = 0LL;
            uint64_t v58 = (char *)a2[23];
          }

          uint64_t v59 = 0LL;
LABEL_89:
          a2[23] = &v58[v60];
          if ((_DWORD)v49)
          {
            memcpy(v59, v56, v60);
            *(void *)(v55 + 8LL * (unsigned __int16)v47) = v52;
            *(void *)(v54 + 8LL * (unsigned __int16)v47) = v59;
            unint64_t v25 = v55;
            unsigned int v26 = v54;
            __int128 v31 = (v47 + 1);
            a3 = v49;
          }

          else
          {
            unint64_t v25 = v55;
            unsigned int v26 = v54;
            a3 = v49;
            __int128 v31 = v47;
          }

          int v29 = v73;
          __int128 v32 = v72;
          unsigned __int8 v30 = v71;
LABEL_93:
          if ((*((_BYTE *)v7 + 33) & 0x20) != 0) {
            goto LABEL_96;
          }
          continue;
        }
      }

      else
      {
        uint64_t v49 = a3;
        uint64_t v53 = 0LL;
        unint64_t v51 = (char *)a2[23];
      }

      uint64_t v52 = 0LL;
      goto LABEL_82;
    }

    break;
  }

  if (!a4)
  {
    if (v35 < 4) {
      goto LABEL_96;
    }
    goto LABEL_79;
  }

  if (v35 > 3)
  {
LABEL_79:
    __int128 v32 = *(unsigned __int16 *)__s;
    uint64_t v74 = *(_WORD *)v94;
    goto LABEL_93;
  }

void sub_5D550( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t GPURawCounterSupportFlags(NSDictionary *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary allKeys](v1, "allKeys", 0LL));
    uint64_t v4 = 0LL;
    id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v12;
      do
      {
        for (unint64_t i = 0LL; i != v5; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( [&off_59FE08 objectForKeyedSubscript:*(void *)(*((void *)&v11 + 1) + 8 * (void)i)]);
          unsigned int v9 = v8;
          if (v8) {
            uint64_t v4 = [v8 unsignedIntValue] | v4;
          }
        }

        id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }

      while (v5);
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4;
}

void sub_5D784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::resize( std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz, std::vector<unsigned int>::const_reference __x)
{
  begiuint64_t n = this->__begin_;
  std::vector<unsigned int>::pointer end = this->__end_;
  std::vector<unsigned int>::size_type v7 = end - this->__begin_;
  if (__sz <= v7)
  {
    if (__sz < v7) {
      this->__end_ = &begin[__sz];
    }
  }

  else
  {
    value = this->__end_cap_.__value_;
    if (__sz - v7 <= value - end)
    {
      uint64_t v23 = &end[__sz - v7];
      std::vector<unsigned int>::size_type v24 = 4 * __sz - 4 * v7;
      do
      {
        *end++ = *__x;
        v24 -= 4LL;
      }

      while (v24);
      this->__end_ = v23;
    }

    else
    {
      if (__sz >> 62) {
        abort();
      }
      unint64_t v10 = (char *)value - (char *)begin;
      std::vector<unsigned int>::size_type v11 = ((char *)value - (char *)begin) >> 1;
      if (v11 <= __sz) {
        std::vector<unsigned int>::size_type v11 = __sz;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      __int128 v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v12);
      uint64_t v15 = (unsigned int *)&v13[4 * v7];
      int v16 = (unsigned int *)&v13[4 * __sz];
      std::vector<unsigned int>::size_type v17 = 4 * __sz - 4 * v7;
      uint64_t v18 = v15;
      do
      {
        *v18++ = *__x;
        v17 -= 4LL;
      }

      while (v17);
      uint64_t v19 = (unsigned int *)&v13[4 * v14];
      std::vector<unsigned int>::pointer v20 = this->__begin_;
      for (std::vector<unsigned int>::pointer i = this->__end_; i != v20; --i)
      {
        unsigned int v22 = *(i - 1);
        *--uint64_t v15 = v22;
      }

      this->__begin_ = v15;
      this->__end_ = v16;
      this->__end_cap_.__value_ = v19;
      if (v20) {
        operator delete(v20);
      }
    }
  }

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(unint64_t a1)
{
  if (a1 >> 62) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(4 * a1);
}