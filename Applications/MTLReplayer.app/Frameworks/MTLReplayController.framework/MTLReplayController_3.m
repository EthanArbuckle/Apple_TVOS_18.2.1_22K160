BOOL std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>( void *a1, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  if (*a1 < *a2) {
    return 1LL;
  }
  if (*a2 < *a1) {
    return 0LL;
  }
  v2 = a1[1];
  v3 = a2[1];
  if (v2 < v3) {
    return 1LL;
  }
  if (v3 < v2) {
    return 0LL;
  }
  v4 = a1[2];
  v5 = a2[2];
  if (v4 < v5) {
    return 1LL;
  }
  return v5 >= v4 && a1[3] < a2[3];
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>( uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v6 = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>( a2,  a1);
  BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>( a3,  a2);
  if (v6)
  {
    v9 = a1 + 3;
    uint64_t v8 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v8;
      uint64_t v10 = a1[1];
      a1[1] = a3[1];
      a3[1] = v10;
      uint64_t v11 = a1[2];
      a1[2] = a3[2];
    }

    else
    {
      *a1 = *a2;
      *a2 = v8;
      uint64_t v20 = a1[1];
      a1[1] = a2[1];
      a2[1] = v20;
      uint64_t v21 = a1[2];
      a1[2] = a2[2];
      a2[2] = v21;
      v9 = a2 + 3;
      uint64_t v22 = a1[3];
      a1[3] = a2[3];
      a2[3] = v22;
      BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>( a3,  a2);
      if (!result) {
        return result;
      }
      uint64_t v23 = *a2;
      *a2 = *a3;
      *a3 = v23;
      uint64_t v24 = a2[1];
      a2[1] = a3[1];
      a3[1] = v24;
      uint64_t v11 = a2[2];
      a2[2] = a3[2];
    }

    a3[2] = v11;
    v16 = a3 + 3;
    goto LABEL_10;
  }

  if (result)
  {
    uint64_t v12 = *a2;
    *a2 = *a3;
    *a3 = v12;
    uint64_t v13 = a2[1];
    a2[1] = a3[1];
    a3[1] = v13;
    uint64_t v14 = a2[2];
    a2[2] = a3[2];
    a3[2] = v14;
    v16 = a2 + 3;
    uint64_t v15 = a2[3];
    a2[3] = a3[3];
    a3[3] = v15;
    BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>( a2,  a1);
    if (result)
    {
      uint64_t v17 = *a1;
      *a1 = *a2;
      *a2 = v17;
      uint64_t v18 = a1[1];
      a1[1] = a2[1];
      a2[1] = v18;
      uint64_t v19 = a1[2];
      a1[2] = a2[2];
      a2[2] = v19;
      v9 = a1 + 3;
LABEL_10:
      uint64_t v25 = *v9;
      uint64_t *v9 = *v16;
      uint64_t *v16 = v25;
    }
  }

  return result;
}

BOOL std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>( uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>( a4,  a3);
  if (result)
  {
    uint64_t v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    uint64_t v11 = a3[2];
    a3[2] = a4[2];
    a4[2] = v11;
    uint64_t v12 = a3[3];
    a3[3] = a4[3];
    a4[3] = v12;
    BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>( a3,  a2);
    if (result)
    {
      uint64_t v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      uint64_t v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      uint64_t v15 = a2[2];
      a2[2] = a3[2];
      a3[2] = v15;
      uint64_t v16 = a2[3];
      a2[3] = a3[3];
      a3[3] = v16;
      BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>( a2,  a1);
      if (result)
      {
        uint64_t v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
        uint64_t v18 = a1[1];
        a1[1] = a2[1];
        a2[1] = v18;
        uint64_t v19 = a1[2];
        a1[2] = a2[2];
        a2[2] = v19;
        uint64_t v20 = a1[3];
        a1[3] = a2[3];
        a2[3] = v20;
      }
    }
  }

  return result;
}

BOOL std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>( uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>( a5,  a4);
  if (result)
  {
    uint64_t v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    uint64_t v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    uint64_t v13 = a4[2];
    a4[2] = a5[2];
    a5[2] = v13;
    uint64_t v14 = a4[3];
    a4[3] = a5[3];
    a5[3] = v14;
    BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>( a4,  a3);
    if (result)
    {
      uint64_t v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      uint64_t v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      uint64_t v17 = a3[2];
      a3[2] = a4[2];
      a4[2] = v17;
      uint64_t v18 = a3[3];
      a3[3] = a4[3];
      a4[3] = v18;
      BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>( a3,  a2);
      if (result)
      {
        uint64_t v19 = *a2;
        *a2 = *a3;
        *a3 = v19;
        uint64_t v20 = a2[1];
        a2[1] = a3[1];
        a3[1] = v20;
        uint64_t v21 = a2[2];
        a2[2] = a3[2];
        a3[2] = v21;
        uint64_t v22 = a2[3];
        a2[3] = a3[3];
        a3[3] = v22;
        BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>( a2,  a1);
        if (result)
        {
          uint64_t v23 = *a1;
          *a1 = *a2;
          *a2 = v23;
          uint64_t v24 = a1[1];
          a1[1] = a2[1];
          a2[1] = v24;
          uint64_t v25 = a1[2];
          a1[2] = a2[2];
          a2[2] = v25;
          uint64_t v26 = a1[3];
          a1[3] = a2[3];
          a2[3] = v26;
        }
      }
    }
  }

  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>( uint64_t *a1, char *a2)
{
  uint64_t v4 = (a2 - (char *)a1) >> 5;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      if (std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>( (void *)a2 - 4,  a1))
      {
        uint64_t v6 = *a1;
        *a1 = *((void *)a2 - 4);
        *((void *)a2 - 4) = v6;
        uint64_t v7 = a1[1];
        a1[1] = *((void *)a2 - 3);
        *((void *)a2 - 3) = v7;
        uint64_t v8 = a1[2];
        a1[2] = *((void *)a2 - 2);
        *((void *)a2 - 2) = v8;
        uint64_t v9 = a1[3];
        a1[3] = *((void *)a2 - 1);
        *((void *)a2 - 1) = v9;
      }

      return 1LL;
    case 3LL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>( a1,  a1 + 4,  (uint64_t *)a2 - 4);
      return 1LL;
    case 4LL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>( a1,  a1 + 4,  a1 + 8,  (uint64_t *)a2 - 4);
      return 1LL;
    case 5LL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>( a1,  a1 + 4,  a1 + 8,  a1 + 12,  (uint64_t *)a2 - 4);
      return 1LL;
    default:
      uint64_t v10 = a1 + 8;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>( a1,  a1 + 4,  a1 + 8);
      uint64_t v11 = a1 + 12;
      uint64_t v12 = 0LL;
      int v13 = 0;
      break;
  }

  while (2)
  {
    if (!std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>( v11,  v10)) {
      goto LABEL_21;
    }
    unint64_t v14 = *v11;
    unint64_t v15 = v11[1];
    unint64_t v16 = v11[2];
    unint64_t v17 = v11[3];
    *uint64_t v11 = *v10;
    v11[1] = v10[1];
    v11[2] = v10[2];
    v11[3] = v10[3];
    uint64_t v18 = a1;
    if (v10 == a1) {
      goto LABEL_20;
    }
    uint64_t v19 = v12;
    while (1)
    {
      uint64_t v20 = (char *)a1 + v19;
      unint64_t v21 = *(uint64_t *)((char *)a1 + v19 + 32);
      if (v14 < v21)
      {
        unint64_t v22 = *((void *)v20 + 5);
        goto LABEL_17;
      }

      if (v21 < v14) {
        goto LABEL_19;
      }
      unint64_t v22 = *(uint64_t *)((char *)a1 + v19 + 40);
      if (v15 >= v22)
      {
        if (v22 < v15) {
          goto LABEL_19;
        }
        unint64_t v23 = *(uint64_t *)((char *)a1 + v19 + 48);
        if (v16 >= v23)
        {
          if (v23 < v16)
          {
LABEL_19:
            uint64_t v18 = v10;
            goto LABEL_20;
          }
        }
      }

id GRCSplitBlitTimeData::CalculateBlitEncoderTime(uint64_t a1, void *a2, void *a3)
{
  id v151 = a2;
  id v147 = a3;
  unsigned int v5 = [v147 length];
  id v6 = v147;
  uint64_t v7 = (unsigned int *)[v6 bytes];
  v149 = v6;
  LODWORD(v8) = v5 >> 2;
  __int128 v163 = 0u;
  __int128 v164 = 0u;
  float v165 = 0.3;
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( (uint64_t)&v163,  vcvtps_u32_f32((float)(v5 >> 2) / 0.3));
  if (v5 >= 4)
  {
    uint64_t v9 = 0LL;
    else {
      uint64_t v8 = v8;
    }
    unint64_t v10 = *((void *)&v163 + 1);
    do
    {
      unint64_t v11 = v7[v9];
      if (v10)
      {
        uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          unint64_t v3 = v7[v9];
          if (v10 <= v11) {
            unint64_t v3 = v11 % v10;
          }
        }

        else
        {
          unint64_t v3 = ((_DWORD)v10 - 1) & v11;
        }

        int v13 = *(uint64_t ***)(v163 + 8 * v3);
        if (v13)
        {
          for (i = *v13; i; i = (uint64_t *)*i)
          {
            unint64_t v15 = i[1];
            if (v15 == v11)
            {
              if (*((_DWORD *)i + 4) == (_DWORD)v11) {
                goto LABEL_44;
              }
            }

            else
            {
              if (v12.u32[0] > 1uLL)
              {
                if (v15 >= v10) {
                  v15 %= v10;
                }
              }

              else
              {
                v15 &= v10 - 1;
              }

              if (v15 != v3) {
                break;
              }
            }
          }
        }
      }

      unint64_t v16 = (char *)operator new(0x40uLL);
      *(void *)unint64_t v16 = 0LL;
      *((void *)v16 + 1) = v11;
      *((_DWORD *)v16 + 4) = v11;
      *(_OWORD *)(v16 + 24) = 0u;
      *(_OWORD *)(v16 + 40) = 0u;
      *((_DWORD *)v16 + 14) = 0;
      *((_DWORD *)v16 + 15) = v9;
      float v17 = (float)(unint64_t)(*((void *)&v164 + 1) + 1LL);
      if (!v10 || (float)(v165 * (float)v10) < v17)
      {
        BOOL v18 = (v10 & (v10 - 1)) != 0;
        if (v10 < 3) {
          BOOL v18 = 1LL;
        }
        unint64_t v19 = v18 | (2 * v10);
        unint64_t v20 = vcvtps_u32_f32(v17 / v165);
        if (v19 <= v20) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = v19;
        }
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( (uint64_t)&v163,  v21);
        unint64_t v10 = *((void *)&v163 + 1);
        if ((*((void *)&v163 + 1) & (*((void *)&v163 + 1) - 1LL)) != 0)
        {
          if (*((void *)&v163 + 1) <= v11) {
            unint64_t v3 = v11 % *((void *)&v163 + 1);
          }
          else {
            unint64_t v3 = v11;
          }
        }

        else
        {
          unint64_t v3 = (DWORD2(v163) - 1) & v11;
        }
      }

      uint64_t v22 = v163;
      unint64_t v23 = *(void **)(v163 + 8 * v3);
      if (v23)
      {
        *(void *)unint64_t v16 = *v23;
      }

      else
      {
        *(void *)unint64_t v16 = v164;
        *(void *)&__int128 v164 = v16;
        *(void *)(v22 + 8 * v3) = &v164;
        if (!*(void *)v16) {
          goto LABEL_43;
        }
        unint64_t v24 = *(void *)(*(void *)v16 + 8LL);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v24 >= v10) {
            v24 %= v10;
          }
        }

        else
        {
          v24 &= v10 - 1;
        }

        unint64_t v23 = (void *)(v163 + 8 * v24);
      }

      *unint64_t v23 = v16;
LABEL_43:
      ++*((void *)&v164 + 1);
LABEL_44:
      ++v9;
    }

    while (v9 != v8);
  }

  unint64_t v25 = (unint64_t)[v151 count];
  unint64_t v26 = v25;
  if (v25)
  {
    if (v25 >> 62) {
      abort();
    }
    v150 = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v25);
    bzero(v150, 4 * v26);
  }

  else
  {
    v150 = 0LL;
  }

  __p = 0LL;
  v161 = 0LL;
  unint64_t v162 = 0LL;
  std::vector<std::pair<unsigned int,unsigned int>>::reserve(&__p, (unint64_t)[v151 count]);
  __int128 v158 = 0u;
  __int128 v159 = 0u;
  __int128 v156 = 0u;
  __int128 v157 = 0u;
  id v27 = v151;
  id v28 = [v27 countByEnumeratingWithState:&v156 objects:v167 count:16];
  if (v28)
  {
    uint64_t v29 = *(void *)v157;
    do
    {
      for (j = 0LL; j != v28; j = (char *)j + 1)
      {
        if (*(void *)v157 != v29) {
          objc_enumerationMutation(v27);
        }
        id v31 = [*(id *)(*((void *)&v156 + 1) + 8 * (void)j) bytes];
        id v32 = v31;
        v33 = v161;
        if ((unint64_t)v161 >= v162)
        {
          uint64_t v35 = (v161 - (_BYTE *)__p) >> 3;
          unint64_t v36 = (uint64_t)(v162 - (void)__p) >> 2;
          if (v36 <= v35 + 1) {
            unint64_t v36 = v35 + 1;
          }
          else {
            unint64_t v37 = v36;
          }
          if (v37) {
            unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,unsigned int>>>(v37);
          }
          else {
            uint64_t v38 = 0LL;
          }
          v39 = (char *)(v37 + 8 * v35);
          *(void *)v39 = v32;
          v34 = v39 + 8;
          v41 = (char *)__p;
          v40 = v161;
          if (v161 != __p)
          {
            do
            {
              uint64_t v42 = *((void *)v40 - 1);
              v40 -= 8;
              *((void *)v39 - 1) = v42;
              v39 -= 8;
            }

            while (v40 != v41);
            v40 = (char *)__p;
          }

          __p = v39;
          v161 = v34;
          unint64_t v162 = v37 + 8 * v38;
          if (v40) {
            operator delete(v40);
          }
        }

        else
        {
          *(void *)v161 = v31;
          v34 = v33 + 8;
        }

        v161 = v34;
      }

      id v28 = [v27 countByEnumeratingWithState:&v156 objects:v167 count:16];
    }

    while (v28);
  }

  if (v161 == __p)
  {
    v90 = 0LL;
    __int128 v153 = 0u;
    __int128 v154 = 0u;
    int v155 = 1065353216;
    goto LABEL_238;
  }

  unint64_t v43 = 0LL;
  v44 = 0LL;
  v45 = 0LL;
  v46 = 0LL;
  do
  {
    v47 = (void *)objc_claimAutoreleasedReturnValue([v27 objectAtIndexedSubscript:v43]);
    BOOL v48 = (unint64_t)[v47 length] > 0x3F;

    if (v48)
    {
      v49 = (NSData *)objc_claimAutoreleasedReturnValue([v27 objectAtIndexedSubscript:v43]);
      int NextMarker = FindNextMarker(v49, 0, *(void *)(a1 + 8));

      if (NextMarker != -1)
      {
        if (v45 >= v46)
        {
          uint64_t v51 = (v45 - v44) >> 3;
          unint64_t v52 = v51 + 1;
          if ((v46 - v44) >> 2 > v52) {
            unint64_t v52 = (v46 - v44) >> 2;
          }
          else {
            unint64_t v53 = v52;
          }
          if (v53 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          v54 = (char *)operator new(8 * v53);
          v55 = &v54[8 * v51];
          *(_DWORD *)v55 = v43;
          *((_DWORD *)v55 + 1) = 0;
          v56 = v55;
          while (v45 != v44)
          {
            uint64_t v57 = *((void *)v45 - 1);
            v45 -= 8;
            *((void *)v56 - 1) = v57;
            v56 -= 8;
          }

          v46 = &v54[8 * v53];
          v45 = v55 + 8;
          if (v44) {
            operator delete(v44);
          }
          v44 = v56;
        }

        else
        {
          *(_DWORD *)v45 = v43;
          *((_DWORD *)v45 + 1) = 0;
          v45 += 8;
        }

        *(void *)&__int128 v153 = &__p;
        std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,GRCFrameTimeData::ProcessSingleFrameData(NSArray<NSData *> *,std::unordered_set<unsigned int> const&)::$_0 &,std::__wrap_iter<GRCFrameTimeData::ProcessSingleFrameData(NSArray<NSData *> *,std::unordered_set<unsigned int> const&)::PriorityQueueElement *>>( (uint64_t)v44,  (uint64_t)v45,  (uint64_t **)&v153,  (v45 - v44) >> 3);
      }
    }

    ++v43;
  }

  while (v43 < (v161 - (_BYTE *)__p) >> 3);
  __int128 v153 = 0u;
  __int128 v154 = 0u;
  int v155 = 1065353216;
  if (v44 == v45)
  {
    v90 = v45;
    goto LABEL_238;
  }

  uint64_t v58 = 0LL;
  int v148 = 0;
  do
  {
    unint64_t v59 = *(void *)v44;
    p_p = &__p;
    if (v45 - v44 < 9) {
      goto LABEL_114;
    }
    uint64_t v60 = 0LL;
    uint64_t v61 = (v45 - v44) >> 3;
    unint64_t v62 = *(void *)v44;
    v63 = v44;
    do
    {
      v64 = v63;
      v63 += 8 * v60 + 8;
      uint64_t v65 = 2 * v60;
      uint64_t v60 = (2 * v60) | 1;
      uint64_t v66 = v65 + 2;
      if (v66 >= v61) {
        goto LABEL_110;
      }
      v67 = (void *)(*((void *)*p_p + *(unsigned int *)v63) + 8LL * *((unsigned int *)v63 + 1));
      v68 = (void *)(*((void *)*p_p + *((unsigned int *)v63 + 2)) + 8LL * *((unsigned int *)v63 + 3));
      unint64_t v69 = v67[1];
      unint64_t v70 = v68[1];
      BOOL v71 = v69 > v70;
      if (v69 == v70
        && (v72 = v67[4], v73 = v68[4], BOOL v71 = v72 > v73, v72 == v73)
        && (v74 = v67[5], v75 = v68[5], BOOL v71 = v74 > v75, v74 == v75))
      {
        unint64_t v76 = v67[3];
        uint64_t v77 = v68[3];
        if (v76 > v69 && v76 != v77)
        {
LABEL_109:
          v63 += 8;
          uint64_t v60 = v66;
        }
      }

      else if (v71)
      {
        goto LABEL_109;
      }

LABEL_229:
      if (v125.u32[0] > 1uLL)
      {
        if (v135 >= v122) {
          v135 %= v122;
        }
      }

      else
      {
        v135 &= v129;
      }

      if (v135 != v124)
      {
        *(void *)(v153 + 8 * v135) = v133;
        v131 = *(__int128 **)v128;
      }
    }

    *(void *)v133 = v131;
    --*((void *)&v154 + 1);
    operator delete(v128);
LABEL_132:
    v88 = (NSData *)objc_claimAutoreleasedReturnValue([v27 objectAtIndexedSubscript:v59]);
    int v89 = FindNextMarker(v88, HIDWORD(v59) + 8, *(void *)(a1 + 8));

    v90 = v45 - 8;
    if (v89 != -1)
    {
      if (v90 >= v46)
      {
        uint64_t v93 = (v90 - v44) >> 3;
        unint64_t v94 = v93 + 1;
        if ((v46 - v44) >> 2 > v94) {
          unint64_t v94 = (v46 - v44) >> 2;
        }
        else {
          unint64_t v95 = v94;
        }
        if (v95 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        v96 = (char *)operator new(8 * v95);
        v92 = &v96[8 * v93];
        *(_DWORD *)v92 = v59;
        *((_DWORD *)v92 + 1) = v89;
        uint64_t v91 = (uint64_t)v92;
        if (v90 != v44)
        {
          uint64_t v91 = (uint64_t)v92;
          do
          {
            uint64_t v97 = *((void *)v90 - 1);
            v90 -= 8;
            *(void *)(v91 - 8) = v97;
            v91 -= 8LL;
          }

          while (v90 != v44);
        }

        v46 = &v96[8 * v95];
        operator delete(v44);
        v44 = (char *)v91;
      }

      else
      {
        *((_DWORD *)v45 - 2) = v59;
        *((_DWORD *)v45 - 1) = v89;
        uint64_t v91 = (uint64_t)v44;
        v92 = v90;
      }

      v90 = v92 + 8;
      p_p = &__p;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,GRCFrameTimeData::ProcessSingleFrameData(NSArray<NSData *> *,std::unordered_set<unsigned int> const&)::$_0 &,std::__wrap_iter<GRCFrameTimeData::ProcessSingleFrameData(NSArray<NSData *> *,std::unordered_set<unsigned int> const&)::PriorityQueueElement *>>( v91,  (uint64_t)(v92 + 8),  (uint64_t **)&p_p,  (uint64_t)&v92[-v91 + 8] >> 3);
    }

    uint64_t v58 = v87;
    v45 = v90;
  }

  while (v44 != v90);
LABEL_238:
  id v137 = objc_claimAutoreleasedReturnValue( +[NSMutableData dataWithLength:]( &OBJC_CLASS___NSMutableData, "dataWithLength:", 32LL * *((void *)&v164 + 1)));
  v138 = (char *)[v137 mutableBytes];
  for (k = (uint64_t **)v164; k; k = (uint64_t **)*k)
  {
    uint64_t v140 = 0LL;
    uint64_t v141 = *((unsigned int *)k + 15);
    uint64_t v142 = 4 * v141;
    v143 = &v138[32 * v141];
    double v144 = 0.0;
    do
    {
      *(void *)&v143[v140 * 8] = k[v140 + 3];
      double v144 = v144 + *(double *)&k[v140 + 3];
      ++v140;
    }

    while (v140 != 3);
    *(double *)&v138[(8 * v142) | 0x18] = v144;
  }

  id v145 = v137;

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v153);
  if (v90) {
    operator delete(v90);
  }
  if (__p)
  {
    v161 = (char *)__p;
    operator delete(__p);
  }

  if (v150) {
    operator delete(v150);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v163);

  return v145;
}

void sub_180954( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *__p, uint64_t a33, uint64_t a34, char a35)
{
  if (v35) {
    operator delete(v35);
  }
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }

  if (a14) {
    operator delete(a14);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a35);

  _Unwind_Resume(a1);
}

char *std::unordered_map<unsigned int,GRCSplitBlitTimeData::CalculateBlitEncoderTime(NSArray<NSData *> *,NSData *)::TimeInfo *,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,GRCSplitBlitTimeData::CalculateBlitEncoderTime(NSArray<NSData *> *,NSData *)::TimeInfo *>>>::operator[]( float *a1, unsigned int a2)
{
  unint64_t v5 = a2;
  unint64_t v6 = *((void *)a1 + 1);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v2 = a2;
      if (v6 <= a2) {
        unint64_t v2 = a2 % v6;
      }
    }

    else
    {
      unint64_t v2 = ((_DWORD)v6 - 1) & a2;
    }

    uint64_t v8 = *(void ***)(*(void *)a1 + 8 * v2);
    if (v8)
    {
      uint64_t v9 = *v8;
      if (*v8)
      {
        do
        {
          unint64_t v10 = v9[1];
          if (v10 == a2)
          {
            if (*((_DWORD *)v9 + 4) == a2) {
              return (char *)(v9 + 3);
            }
          }

          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6) {
                v10 %= v6;
              }
            }

            else
            {
              v10 &= v6 - 1;
            }

            if (v10 != v2) {
              break;
            }
          }

          uint64_t v9 = (void *)*v9;
        }

        while (v9);
      }
    }
  }

  uint64_t v9 = operator new(0x20uLL);
  void *v9 = 0LL;
  v9[1] = v5;
  *((_DWORD *)v9 + 4) = a2;
  v9[3] = 0LL;
  float v11 = (float)(unint64_t)(*((void *)a1 + 3) + 1LL);
  float v12 = a1[8];
  if (v6 && (float)(v12 * (float)v6) >= v11)
  {
    unint64_t v5 = v2;
    goto LABEL_64;
  }

  BOOL v13 = (v6 & (v6 - 1)) == 0;
  if (v6 < 3) {
    BOOL v13 = 0;
  }
  unint64_t v14 = (2 * v6) | !v13;
  unint64_t v15 = vcvtps_u32_f32(v11 / v12);
  if (v14 <= v15) {
    int8x8_t prime = (int8x8_t)v15;
  }
  else {
    int8x8_t prime = (int8x8_t)v14;
  }
  if (*(void *)&prime == 1LL)
  {
    int8x8_t prime = (int8x8_t)2LL;
  }

  else if ((*(void *)&prime & (*(void *)&prime - 1LL)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v6 = *((void *)a1 + 1);
  }

  if (*(void *)&prime <= v6)
  {
    if (*(void *)&prime >= v6) {
      goto LABEL_60;
    }
    unint64_t v23 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v6 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
    {
      unint64_t v23 = std::__next_prime(v23);
    }

    else
    {
      uint64_t v25 = 1LL << -(char)__clz(v23 - 1);
      if (v23 >= 2) {
        unint64_t v23 = v25;
      }
    }

    if (*(void *)&prime <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime >= v6)
    {
      unint64_t v6 = *((void *)a1 + 1);
      goto LABEL_60;
    }

    if (!*(void *)&prime)
    {
      id v32 = *(void **)a1;
      *(void *)a1 = 0LL;
      if (v32) {
        operator delete(v32);
      }
      unint64_t v6 = 0LL;
      *((void *)a1 + 1) = 0LL;
      goto LABEL_60;
    }
  }

  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  float v17 = operator new(8LL * *(void *)&prime);
  BOOL v18 = *(void **)a1;
  *(void *)a1 = v17;
  if (v18) {
    operator delete(v18);
  }
  uint64_t v19 = 0LL;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v19++) = 0LL;
  while (*(void *)&prime != v19);
  unint64_t v20 = (void *)*((void *)a1 + 2);
  if (v20)
  {
    unint64_t v21 = v20[1];
    uint8x8_t v22 = (uint8x8_t)vcnt_s8(prime);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      if (v21 >= *(void *)&prime) {
        v21 %= *(void *)&prime;
      }
    }

    else
    {
      v21 &= *(void *)&prime - 1LL;
    }

    *(void *)(*(void *)a1 + 8 * v21) = a1 + 4;
    unint64_t v26 = (void *)*v20;
    if (*v20)
    {
      do
      {
        unint64_t v27 = v26[1];
        if (v22.u32[0] > 1uLL)
        {
          if (v27 >= *(void *)&prime) {
            v27 %= *(void *)&prime;
          }
        }

        else
        {
          v27 &= *(void *)&prime - 1LL;
        }

        if (v27 != v21)
        {
          if (!*(void *)(*(void *)a1 + 8 * v27))
          {
            *(void *)(*(void *)a1 + 8 * v27) = v20;
            goto LABEL_56;
          }

          *unint64_t v20 = *v26;
          *unint64_t v26 = **(void **)(*(void *)a1 + 8 * v27);
          **(void **)(*(void *)a1 + 8 * v27) = v26;
          unint64_t v26 = v20;
        }

        unint64_t v27 = v21;
LABEL_56:
        unint64_t v20 = v26;
        unint64_t v26 = (void *)*v26;
        unint64_t v21 = v27;
      }

      while (v26);
    }
  }

  unint64_t v6 = (unint64_t)prime;
LABEL_60:
  if ((v6 & (v6 - 1)) != 0)
  {
    if (v6 <= v5) {
      v5 %= v6;
    }
  }

  else
  {
    unint64_t v5 = ((_DWORD)v6 - 1) & v5;
  }

void sub_180E34(_Unwind_Exception *a1)
{
}

id GRCSplitBlitTimeData::BlitFrameEncoderTimeData(id *this, NSString *a2, NSString *a3)
{
  unint64_t v5 = a3;
  uint8x8_t v7 = (void *)objc_claimAutoreleasedReturnValue([*this objectForKeyedSubscript:a2]);
  if (v7)
  {
    uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSDictionary, v6);
    uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSArray, v9);
    uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSNumber, v11);
    unint64_t v14 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v8,  v10,  v12,  objc_opt_class(&OBJC_CLASS___NSNull, v13),  0LL);
    unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    id v43 = 0LL;
    unint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v15,  v7,  &v43));
    id v17 = v43;

    BOOL v18 = (void *)objc_claimAutoreleasedReturnValue([*this objectForKeyedSubscript:v5]);
    if ([v16 count] && objc_msgSend(v18, "length"))
    {
      id v19 = v18;
      id v20 = [v19 bytes];
      uint64_t v34 = 0LL;
      uint64_t v35 = &v34;
      uint64_t v36 = 0x4812000000LL;
      unint64_t v37 = __Block_byref_object_copy__186;
      uint64_t v38 = __Block_byref_object_dispose__187;
      v39 = "";
      __p = 0LL;
      v41 = 0LL;
      uint64_t v42 = 0LL;
      std::vector<std::pair<unsigned long long,unsigned long long>>::reserve( &__p,  (unint64_t)[v19 length] >> 3);
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472LL;
      v33[2] = ___ZN20GRCSplitBlitTimeData24BlitFrameEncoderTimeDataEP8NSStringS1__block_invoke;
      v33[3] = &unk_58F9A0;
      v33[4] = &v34;
      v33[5] = v20;
      [v16 enumerateKeysAndObjectsUsingBlock:v33];
      unint64_t v21 = v35[6];
      uint8x8_t v22 = (unint64_t *)v35[7];
      unint64_t v23 = 126 - 2 * __clz((uint64_t)((uint64_t)v22 - v21) >> 4);
      else {
        uint64_t v24 = v23;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *,false>( v21,  v22,  v24,  1);
      id v25 = objc_claimAutoreleasedReturnValue( +[NSMutableData dataWithLength:]( &OBJC_CLASS___NSMutableData, "dataWithLength:", 2 * (v35[7] - v35[6])));
      unint64_t v26 = (char *)[v25 mutableBytes];
      uint64_t v27 = v35[6];
      if (v35[7] != v27)
      {
        unint64_t v28 = 0LL;
        uint64_t v29 = (double *)(v26 + 24);
        uint64_t v30 = 8LL;
        do
        {
          double v31 = (double)*(unint64_t *)(v27 + v30);
          *(v29 - 2) = v31;
          *uint64_t v29 = v31;
          v29 += 4;
          ++v28;
          uint64_t v27 = v35[6];
          v30 += 16LL;
        }

        while (v28 < (v35[7] - v27) >> 4);
      }

      _Block_object_dispose(&v34, 8);
      if (__p)
      {
        v41 = __p;
        operator delete(__p);
      }
    }

    else
    {
      id v25 = 0LL;
    }
  }

  else
  {
    id v25 = 0LL;
  }

  return v25;
}

void sub_1810EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26)
{
  _Block_object_dispose(&a19, 8);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__186(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0LL;
  a1[3].n128_u64[1] = 0LL;
  a1[4].n128_u64[0] = 0LL;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0LL;
  a2[3].n128_u64[1] = 0LL;
  a2[4].n128_u64[0] = 0LL;
  return result;
}

void __Block_byref_object_dispose__187(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

void ___ZN20GRCSplitBlitTimeData24BlitFrameEncoderTimeDataEP8NSStringS1__block_invoke( uint64_t a1, void *a2, void *a3)
{
  id v27 = a2;
  id v5 = a3;
  unsigned int v6 = [v27 unsignedIntValue];
  uint8x8_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndexedSubscript:0]);
  unsigned int v8 = [v7 unsignedIntValue];

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndexedSubscript:2]);
  unsigned int v10 = [v9 unsignedIntValue];

  if (v10 == 2)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL * (v8 + 1)) - *(void *)(*(void *)(a1 + 40) + 8LL * v8);
    uint64_t v12 = *(void **)(*(void *)(a1 + 32) + 8LL);
    unint64_t v14 = (void *)v12[7];
    unint64_t v13 = v12[8];
    if ((unint64_t)v14 >= v13)
    {
      uint64_t v16 = v12[6];
      uint64_t v17 = ((uint64_t)v14 - v16) >> 4;
      unint64_t v18 = v17 + 1;
      uint64_t v19 = v13 - v16;
      if (v19 >> 3 > v18) {
        unint64_t v18 = v19 >> 3;
      }
      else {
        unint64_t v20 = v18;
      }
      unint64_t v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned long long,unsigned long long>>>(v20);
      uint8x8_t v22 = &v21[16 * v17];
      uint64_t v24 = &v21[16 * v23];
      *(void *)uint8x8_t v22 = v6;
      *((void *)v22 + 1) = v11;
      unint64_t v15 = v22 + 16;
      unint64_t v26 = (char *)v12[6];
      id v25 = (char *)v12[7];
      if (v25 != v26)
      {
        do
        {
          *((_OWORD *)v22 - 1) = *((_OWORD *)v25 - 1);
          v22 -= 16;
          v25 -= 16;
        }

        while (v25 != v26);
        id v25 = (char *)v12[6];
      }

      v12[6] = v22;
      v12[7] = v15;
      v12[8] = v24;
      if (v25) {
        operator delete(v25);
      }
    }

    else
    {
      *unint64_t v14 = v6;
      v14[1] = v11;
      unint64_t v15 = v14 + 2;
    }

    v12[7] = v15;
  }
}

void sub_181314( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    id v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint8x8_t v7 = (void *)*((void *)v4 - 3);
        v4 -= 24;
        unsigned int v6 = v7;
        if (v7) {
          operator delete(v6);
        }
      }

      while (v4 != v2);
      id v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void ___ZN21GRCDerivedCounterData18RawCounterInfoListEv_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v11 = a3;
  [*(id *)(a1 + 32) addObject:a2];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:@"subtype"]);
  unsigned int v6 = v5;
  if (v5 && [v5 isEqualToString:@"Normalize"])
  {
    uint8x8_t v7 = *(void **)(a1 + 40);
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:@"counters"]);
    [v7 addObjectsFromArray:v8];

    uint64_t v9 = *(void **)(a1 + 48);
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:@"counters"]);
    [v9 addObjectsFromArray:v10];
  }
}

void sub_18148C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::vector<RawCounterInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    id v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unsigned int v6 = (void *)*((void *)v4 - 2);
        v4 -= 16;
      }

      while (v4 != v2);
      id v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t std::__split_buffer<RawCounterInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ___ZN21GRCDerivedCounterData32GenerateCodeForCounterProcessingEv_block_invoke( void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (void *)a1[4];
  id v11 = v4;
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"name"]);
  [v5 addObject:v6];

  uint8x8_t v7 = (void *)a1[5];
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:@"description"]);
  [v7 addObject:v8];

  uint64_t v9 = (void *)a1[6];
  unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:@"type"]);
  [v9 addObject:v10];
}

void sub_181634( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

const OpaqueJSValue *GRCDerivedCounterData::ProcessDerivedCounterData(uint64_t a1, void *a2)
{
  id v420 = a2;
  if (*(_DWORD *)(a1 + 148))
  {
    uint64_t v3 = operator new(0x20uLL);
    id v4 = (const OpaqueJSValue *)*(unsigned int *)(a1 + 144);
    v3[1] = 0LL;
    v3[2] = 0LL;
    *uint64_t v3 = 0LL;
    uint64_t v472 = a1;
    unint64_t v5 = *(void *)(a1 + 160) - *(void *)(a1 + 152);
    *((_DWORD *)v3 + 6) = v5 >> 5;
    if ((_DWORD)v4)
    {
      unsigned int v6 = (char *)operator new(72LL * (void)v4);
      unint64_t v7 = (v5 >> 5);
      bzero(v6, 72 * ((72 * (uint64_t)v4 - 72) / 0x48uLL) + 72);
      JSValueRef v8 = 0LL;
      *uint64_t v3 = v6;
      v3[1] = &v6[72 * ((72 * (uint64_t)v4 - 72) / 0x48uLL) + 72];
      v3[2] = &v6[72 * v4];
      JSValueRef value = v4;
      do
      {
        for (uint64_t i = 0LL; i != 3; ++i)
        {
          uint64_t v10 = *v3 + 72LL * (void)v8;
          id v11 = (char **)(v10 + 24 * i);
          uint64_t v12 = v11[1];
          JSValueRef v488 = (JSValueRef)(v11 + 1);
          unint64_t v13 = *v11;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *v11) >> 3);
          unint64_t v15 = v7 - v14;
          if (v7 <= v14)
          {
            if (v7 < v14)
            {
              uint64_t v36 = &v13[24 * v7];
              if (v12 != v36)
              {
                unint64_t v37 = v11[1];
                do
                {
                  v39 = (void *)*((void *)v37 - 3);
                  v37 -= 24;
                  uint64_t v38 = v39;
                  if (v39)
                  {
                    *((void *)v12 - 2) = v38;
                    operator delete(v38);
                  }

                  uint64_t v12 = v37;
                }

                while (v37 != v36);
              }

              *(void *)JSValueRef v488 = v36;
            }
          }

          else
          {
            uint64_t v16 = v10 + 24 * i;
            uint64_t v19 = *(void *)(v16 + 16);
            unint64_t v18 = (char **)(v16 + 16);
            uint64_t v17 = v19;
            if (0xAAAAAAAAAAAAAAABLL * ((v19 - (uint64_t)v12) >> 3) >= v15)
            {
              bzero(v12, 24 * ((24 * v15 - 24) / 0x18) + 24);
              *(void *)JSValueRef v488 = &v12[24 * ((24 * v15 - 24) / 0x18) + 24];
              goto LABEL_33;
            }

            v483 = v18;
            unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v17 - (uint64_t)v13) >> 3);
            uint64_t v21 = 2 * v20;
            if (2 * v20 <= v7) {
              uint64_t v21 = v7;
            }
            if (v20 >= 0x555555555555555LL) {
              unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v22 = v21;
            }
            uint64_t v23 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>>(v22);
            uint64_t v24 = &v23[24 * v14];
            unint64_t v26 = &v23[24 * v25];
            bzero(v24, 24 * ((24 * v15 - 24) / 0x18) + 24);
            id v27 = &v24[24 * ((24 * v15 - 24) / 0x18) + 24];
            unint64_t v28 = *(char **)v488;
            uint64_t v29 = *v11;
            if (*(char **)v488 == *v11)
            {
              *id v11 = v24;
              *(void *)JSValueRef v488 = v27;
              *v483 = v26;
              if (!v28) {
                goto LABEL_33;
              }
LABEL_32:
              operator delete(v28);
              goto LABEL_33;
            }

            uint64_t v30 = v26;
            do
            {
              *((void *)v24 - 3) = 0LL;
              *((void *)v24 - 2) = 0LL;
              v24 -= 24;
              *((void *)v24 + 2) = 0LL;
              __int128 v31 = *(_OWORD *)(v28 - 24);
              v28 -= 24;
              *(_OWORD *)uint64_t v24 = v31;
              *((void *)v24 + 2) = *((void *)v28 + 2);
              *(void *)unint64_t v28 = 0LL;
              *((void *)v28 + 1) = 0LL;
              *((void *)v28 + 2) = 0LL;
            }

            while (v28 != v29);
            id v32 = *v11;
            unint64_t v28 = *(char **)v488;
            *id v11 = v24;
            *(void *)JSValueRef v488 = v27;
            *v483 = v30;
            if (v28 != v32)
            {
              v33 = v28;
              do
              {
                uint64_t v35 = (void *)*((void *)v33 - 3);
                v33 -= 24;
                uint64_t v34 = v35;
                if (v35)
                {
                  *((void *)v28 - 2) = v34;
                  operator delete(v34);
                }

                unint64_t v28 = v33;
              }

              while (v33 != v32);
              unint64_t v28 = v32;
            }

            if (v28) {
              goto LABEL_32;
            }
          }

LABEL_176:
                  if (value) {
                    operator delete(value);
                  }
                }

                id v64 = [v447 countByEnumeratingWithState:&v493 objects:v519 count:16];
              }

              while (v64);
            }

            ++v441;
          }

          id v57 = [v422 countByEnumeratingWithState:&v497 objects:v520 count:16];
        }

        while (v57);

        ++v421;
        if (v58) {
          operator delete(v58);
        }
LABEL_185:
        uint64_t v45 = v472;
      }

      id v415 = [v417 countByEnumeratingWithState:&v501 objects:v521 count:16];
    }

    while (v415);
LABEL_189:

    if (!v418)
    {
      unint64_t v144 = (uint64_t)(v50 - (void)__p) / 40;
      unint64_t v145 = 126 - 2 * __clz(v144);
      else {
        uint64_t v146 = v145;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *,false>( (uint64_t)__p,  v50,  v146,  1);
      BufferView<EncoderSampleIndexData>::BufferView(v523, *(void **)(v472 + 80));
      std::vector<GPUEncoderInfo>::vector(&v533, *(unsigned int *)(v472 + 144));
      uint64_t v147 = objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( &OBJC_CLASS___NSMutableArray,  "arrayWithCapacity:",  *(unsigned int *)(v472 + 144)));
      int v148 = *(void **)(v472 + 120);
      *(void *)(v472 + 120) = v147;

      if (v524)
      {
        unint64_t v149 = 0LL;
        unint64_t v150 = 0LL;
        uint64_t v151 = 16LL;
        do
        {
          for (uint64_t n = 0LL; n != 48; n += 16LL)
          {
            __int128 v153 = (char *)&v529 + n;
            *(_DWORD *)__int128 v153 = 0;
            *((void *)v153 + 1) = 0LL;
          }

          uint64_t v154 = v533;
          if (v149 < v144)
          {
            uint64_t v155 = v533 + 48 * v150;
            __int128 v156 = (void *)(v155 + 8);
            __int128 v157 = (double *)(v155 + 40);
            __int128 v158 = &__p[40 * v149];
            while (v150 == *((_DWORD *)v158 + 8))
            {
              unint64_t v159 = *((void *)v158 + 3);
              unint64_t v160 = v159 >> 1;
              v161 = &v529 + 2 * (v159 >> 1);
              int v162 = *(_DWORD *)v161;
              if ((v159 & 1) != 0)
              {
                int v163 = v162 - 1;
                *(_DWORD *)v161 = v163;
                if (!v163)
                {
                  double v164 = ((double)*(unint64_t *)v158 - (double)(unint64_t)*(&v529 + 2 * v160 + 1))
                       * 125.0
                       / 3.0;
                  *(double *)(v154 + 48 * v150 + 8 * v160 + 16) = *(double *)(v154 + 48 * v150 + 8 * v160 + 16) + v164;
                  if (*v156 == 2LL) {
                    *__int128 v157 = v164 + *v157;
                  }
                }
              }

              else
              {
                if (!v162) {
                  *(&v529 + 2 * v160 + 1) = *(void *)v158;
                }
                *(_DWORD *)v161 = v162 + 1;
              }

              ++v149;
              v158 += 40;
              if (v144 == v149)
              {
                unint64_t v149 = v144;
                break;
              }
            }

            uint64_t v154 = v533;
          }

          float v165 = &v523[0][2 * v150];
          *(void *)(v154 + 48 * v150) = v165[1];
          uint64_t v166 = *((unsigned __int16 *)v165 + 2);
          if ((_DWORD)v166)
          {
            if ((_DWORD)v166 == 2)
            {
              uint64_t v166 = 2LL;
            }

            else
            {
              if ((_DWORD)v166 != 4) {
                goto LABEL_216;
              }
              uint64_t v166 = 1LL;
            }
          }

          *(void *)(v154 + 48 * v150 + 8) = v166;
LABEL_216:
          v167 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", 3LL));
          for (iuint64_t i = 0LL; ii != 24; ii += 8LL)
          {
            v169 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(v533 + v151 + ii)));
            [v167 addObject:v169];
          }

          [*(id *)(v472 + 120) addObject:v167];

          ++v150;
          v151 += 48LL;
        }

        while (v150 < v524);
      }

      uint64_t v170 = objc_claimAutoreleasedReturnValue( +[NSMutableData dataWithBytes:length:]( &OBJC_CLASS___NSMutableData,  "dataWithBytes:length:",  (void)v533,  *((void *)&v533 + 1) - (void)v533));
      v171 = *(void **)(v472 + 208);
      *(void *)(v472 + 208) = v170;

      if ((void)v533)
      {
        *((void *)&v533 + 1) = v533;
        operator delete((void *)v533);
      }
    }

    contexta = objc_autoreleasePoolPush();
    v455 = (void *)objc_opt_new(&OBJC_CLASS___DYJSScriptingContext, v172);
    v173 = (void *)objc_claimAutoreleasedReturnValue([v455 context]);
    [v173 setObject:&__block_literal_global_7603 forKeyedSubscript:@"ErrorLog"];

    v174 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v472 + 88) objectForKeyedSubscript:@"DerivedCounterScript"]);
    unsigned __int8 v175 = [v455 evaluteScript:v174 scriptURL:0];

    if ((v175 & 1) == 0) {
      goto LABEL_387;
    }
    uint64_t v176 = *(void *)(v472 + 136);
    if (!v176)
    {
      v466 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
      v177 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v472 + 88) objectForKeyedSubscript:@"DerivedCounterDictionary"]);
      id v448 = (id)objc_claimAutoreleasedReturnValue([v177 objectForKeyedSubscript:@"DerivedCounters"]);

      uint64_t v178 = objc_claimAutoreleasedReturnValue([v448 allKeys]);
      v179 = *(void **)(v472 + 104);
      *(void *)(v472 + 104) = v178;

      v427 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [*(id *)(v472 + 104) count]));
      v429 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [*(id *)(v472 + 104) count]));
      v180 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [*(id *)(v472 + 104) count]));
      v507[0] = _NSConcreteStackBlock;
      v507[1] = 3221225472LL;
      v507[2] = ___ZN21GRCDerivedCounterData32GenerateCodeForCounterProcessingEv_block_invoke;
      v507[3] = &unk_58F9C8;
      id v181 = v429;
      id v508 = v181;
      id v182 = v427;
      id v509 = v182;
      id v183 = v180;
      id v510 = v183;
      v436 = v183;
      [v448 enumerateKeysAndObjectsUsingBlock:v507];
      v522[0] = *(void *)(v472 + 104);
      v432 = v182;
      v434 = v181;
      v522[1] = v181;
      v522[2] = v182;
      v522[3] = v183;
      uint64_t v184 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v522, 4LL));
      v185 = *(void **)(v472 + 112);
      *(void *)(v472 + 112) = v184;

      v438 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v472 + 88) objectForKeyedSubscript:@"DerivedCounterConfigurationVariables"]);
      v457 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue([v438 objectForKeyedSubscript:@"num_cores"]);
      v506[0] = 0LL;
      int64x2_t v505 = 0uLL;
      v186 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v472 + 88) objectForKeyedSubscript:@"DerivedCounterDictionary"]);
      v449 = (void *)objc_claimAutoreleasedReturnValue([v186 objectForKeyedSubscript:@"DerivedCounters"]);

      v444 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableSet setWithCapacity:]( NSMutableSet,  "setWithCapacity:",  [v449 count]));
      uint64_t v187 = v472;
      v446 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableSet setWithCapacity:]( NSMutableSet,  "setWithCapacity:",  [v449 count]));
      v188 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [v449 count]));
      exception[0] = (JSValueRef)_NSConcreteStackBlock;
      exception[1] = (JSValueRef)3221225472LL;
      exception[2] = (JSValueRef)___ZN21GRCDerivedCounterData18RawCounterInfoListEv_block_invoke;
      exception[3] = (JSValueRef)&unk_58F9C8;
      id v442 = v188;
      id v512 = v442;
      JSValueRef v489 = v444;
      JSValueRef v513 = v489;
      id v189 = v446;
      id v514 = v189;
      [v449 enumerateKeysAndObjectsUsingBlock:exception];
      v440 = v189;
      id v190 = [v189 count];
      uint64_t v191 = *(unsigned int *)(v472 + 148);
      unint64_t v192 = (unint64_t)v190 + v191;
      uint64_t v193 = v505.i64[0];
      if (v192 > (v506[0] - v505.i64[0]) >> 4)
      {
        if (v192 >> 60) {
          abort();
        }
        uint64_t v194 = v505.i64[1];
        v532 = v506;
        v195 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned long long,unsigned long long>>>(v192);
        v197 = (void *)v505.i64[1];
        v198 = (void *)v505.i64[0];
        if (v505.i64[1] == v505.i64[0])
        {
          int64x2_t v201 = vdupq_n_s64(v505.u64[1]);
          v199 = &v195[v194 - v193];
        }

        else
        {
          v199 = &v195[v194 - v193];
          do
          {
            uint64_t v200 = *(v197 - 2);
            v197 -= 2;
            void *v197 = 0LL;
            *((void *)v199 - 2) = v200;
            v199 -= 16;
            *((void *)v199 + 1) = v197[1];
          }

          while (v197 != v198);
          int64x2_t v201 = v505;
        }

        v505.i64[0] = (uint64_t)v199;
        v505.i64[1] = (uint64_t)&v195[v194 - v193];
        int64x2_t v530 = v201;
        unint64_t v202 = v506[0];
        v506[0] = &v195[16 * v196];
        unint64_t v531 = v202;
        uint64_t v529 = v201.i64[0];
        std::__split_buffer<RawCounterInfo>::~__split_buffer((uint64_t)&v529);
        LODWORD(v191) = *(_DWORD *)(v472 + 148);
      }

      if ((_DWORD)v191)
      {
        unint64_t v485 = 0LL;
        do
        {
          v203 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v187 + 24) objectForKeyedSubscript:@"passList"]);
          v204 = (void *)objc_claimAutoreleasedReturnValue([v203 objectAtIndexedSubscript:v485]);

          uint64_t v205 = v505.i64[1];
          uint64_t v206 = v505.i64[0];
          __int128 v533 = 0u;
          __int128 v534 = 0u;
          __int128 v535 = 0u;
          __int128 v536 = 0u;
          id v459 = v204;
          id v207 = [v459 countByEnumeratingWithState:&v533 objects:&v529 count:16];
          if (v207)
          {
            int v208 = 0;
            int propertyIndex = 0;
            uint64_t v462 = *(void *)v534;
            id v463 = v207;
            int v209 = 2 * (v485 & 0x1F);
            unint64_t v451 = (v205 - v206) >> 4;
            do
            {
              for (jj = 0LL; jj != v463; jj = (char *)jj + 1)
              {
                if (*(void *)v534 != v462) {
                  objc_enumerationMutation(v459);
                }
                v210 = *(void **)(*((void *)&v533 + 1) + 8LL * (void)jj);
                __int128 v525 = 0u;
                __int128 v526 = 0u;
                __int128 v527 = 0u;
                __int128 v528 = 0u;
                id v211 = v210;
                id v212 = [v211 countByEnumeratingWithState:&v525 objects:v523 count:16];
                if (v212)
                {
                  char v213 = 0;
                  uint64_t v214 = *(void *)v526;
                  do
                  {
                    for (kk = 0LL; kk != v212; kk = (char *)kk + 1)
                    {
                      if (*(void *)v526 != v214) {
                        objc_enumerationMutation(v211);
                      }
                      v216 = *(const OpaqueJSValue **)(*((void *)&v525 + 1) + 8LL * (void)kk);
                      if ((-[OpaqueJSValue containsString:](v216, "containsString:", @"GRC") & 1) == 0)
                      {
                        if ((v213 & 1) == 0) {
                          goto LABEL_289;
                        }
                        if (*(void *)v472 && [*(id *)v472 isEqualToString:v216])
                        {
                          JSValueRef v217 = v216;
                          if (v485)
                          {
                            JSValueRef value = (JSValueRef)objc_claimAutoreleasedReturnValue( -[OpaqueJSValue stringByAppendingFormat:]( v216,  "stringByAppendingFormat:",  @"_%u",  v485));
                            JSValueRef v217 = value;
                          }

                          v218 = v217;
                          unsigned int v219 = -[OpaqueJSValue containsObject:](v489, "containsObject:", v216);
                          ++v208;
                          uint64_t v220 = v505.i64[1];
                          if (v505.i64[1] >= v506[0])
                          {
                            uint64_t v229 = (v505.i64[1] - v505.i64[0]) >> 4;
                            unint64_t v230 = (v506[0] - v505.i64[0]) >> 3;
                            if (v230 <= v229 + 1) {
                              unint64_t v230 = v229 + 1;
                            }
                            if (v506[0] - v505.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL) {
                              unint64_t v231 = 0xFFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v231 = v230;
                            }
                            v518 = v506;
                            if (v231) {
                              unint64_t v231 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned long long,unsigned long long>>>(v231);
                            }
                            else {
                              uint64_t v232 = 0LL;
                            }
                            unint64_t v240 = v231 + 16 * v229;
                            unint64_t v241 = v231 + 16 * v232;
                            unint64_t v517 = v241;
                            *(void *)unint64_t v240 = v218;
                            *(_DWORD *)(v240 + 8) = v219 & 0xFFF8003F | ((v208 & 0x1FFF) << 6) | v209;
                            unint64_t v221 = v240 + 16;
                            v516.i64[1] = v240 + 16;
                            v242 = (void *)v505.i64[1];
                            v243 = (void *)v505.i64[0];
                            if (v505.i64[1] == v505.i64[0])
                            {
                              int64x2_t v245 = vdupq_n_s64(v505.u64[1]);
                            }

                            else
                            {
                              do
                              {
                                uint64_t v244 = *(v242 - 2);
                                v242 -= 2;
                                void *v242 = 0LL;
                                *(void *)(v240 - 16) = v244;
                                v240 -= 16LL;
                                *(void *)(v240 + 8) = v242[1];
                              }

                              while (v242 != v243);
                              int64x2_t v245 = v505;
                              unint64_t v221 = v516.u64[1];
                              unint64_t v241 = v517;
                            }

                            v505.i64[0] = v240;
                            v505.i64[1] = v221;
                            int64x2_t v516 = v245;
                            unint64_t v246 = v506[0];
                            v506[0] = v241;
                            unint64_t v517 = v246;
                            uint64_t v515 = v245.i64[0];
                            std::__split_buffer<RawCounterInfo>::~__split_buffer((uint64_t)&v515);
                          }

                          else
                          {
                            *(void *)uint64_t v220 = v218;
                            *(_DWORD *)(v220 + 8) = v209 & 0xFFF8003F | ((v208 & 0x1FFF) << 6) | v219;
                            unint64_t v221 = v220 + 16;
                          }

                          v505.i64[1] = v221;

                          if (v485) {
                          int propertyIndex = (*(_DWORD *)(v505.i64[1] - 8) >> 6) & 0x1FFF;
                          }
                        }

                        else
                        {
                          unsigned int v222 = -[OpaqueJSValue containsObject:](v489, "containsObject:", v216);
                          ++v208;
                          uint64_t v223 = v505.i64[1];
                          if (v505.i64[1] >= v506[0])
                          {
                            uint64_t v225 = (v505.i64[1] - v505.i64[0]) >> 4;
                            unint64_t v226 = (v506[0] - v505.i64[0]) >> 3;
                            if (v226 <= v225 + 1) {
                              unint64_t v226 = v225 + 1;
                            }
                            if (v506[0] - v505.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL) {
                              unint64_t v227 = 0xFFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v227 = v226;
                            }
                            v518 = v506;
                            if (v227) {
                              unint64_t v227 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned long long,unsigned long long>>>(v227);
                            }
                            else {
                              uint64_t v228 = 0LL;
                            }
                            unint64_t v233 = v227 + 16 * v225;
                            unint64_t v234 = v227 + 16 * v228;
                            unint64_t v517 = v234;
                            *(void *)unint64_t v233 = v216;
                            *(_DWORD *)(v233 + 8) = v222 & 0xFFF8003F | ((v208 & 0x1FFF) << 6) | v209;
                            unint64_t v224 = v233 + 16;
                            v516.i64[1] = v233 + 16;
                            v235 = (void *)v505.i64[1];
                            v236 = (void *)v505.i64[0];
                            if (v505.i64[1] == v505.i64[0])
                            {
                              int64x2_t v238 = vdupq_n_s64(v505.u64[1]);
                            }

                            else
                            {
                              do
                              {
                                uint64_t v237 = *(v235 - 2);
                                v235 -= 2;
                                void *v235 = 0LL;
                                *(void *)(v233 - 16) = v237;
                                v233 -= 16LL;
                                *(void *)(v233 + 8) = v235[1];
                              }

                              while (v235 != v236);
                              int64x2_t v238 = v505;
                              unint64_t v224 = v516.u64[1];
                              unint64_t v234 = v517;
                            }

                            v505.i64[0] = v233;
                            v505.i64[1] = v224;
                            int64x2_t v516 = v238;
                            unint64_t v239 = v506[0];
                            v506[0] = v234;
                            unint64_t v517 = v239;
                            uint64_t v515 = v238.i64[0];
                            std::__split_buffer<RawCounterInfo>::~__split_buffer((uint64_t)&v515);
                          }

                          else
                          {
                            *(void *)uint64_t v223 = v216;
                            *(_DWORD *)(v223 + 8) = v209 & 0xFFF8003F | ((v208 & 0x1FFF) << 6) | v222;
                            unint64_t v224 = v223 + 16;
                          }

                          v505.i64[1] = v224;
                        }
                      }

                      char v213 = 1;
                    }

                    id v212 = [v211 countByEnumeratingWithState:&v525 objects:v523 count:16];
                  }

                  while (v212);
                }

LABEL_289:
              }

              id v463 = [v459 countByEnumeratingWithState:&v533 objects:&v529 count:16];
            }

            while (v463);

            if (propertyIndex)
            {
              uint64_t v247 = v505.i64[0];
              unint64_t v248 = v451;
              if (v451 < (v505.i64[1] - v505.i64[0]) >> 4)
              {
                uint64_t v249 = (16 * v451) | 8;
                do
                {
                  *(_DWORD *)(v247 + v249) = *(_DWORD *)(v247 + v249) & 0x7FFFF | (propertyIndex << 19);
                  ++v248;
                  uint64_t v247 = v505.i64[0];
                  v249 += 16LL;
                }

                while (v248 < (v505.i64[1] - v505.i64[0]) >> 4);
              }
            }
          }

          else
          {
          }

          uint64_t v187 = v472;
          ++v485;
        }

        while (v485 < *(unsigned int *)(v472 + 148));
      }

      uint64_t v250 = v505.i64[1];
      if (v505.i64[1] >= v506[0])
      {
        uint64_t v252 = (v505.i64[1] - v505.i64[0]) >> 4;
        unint64_t v253 = v252 + 1;
        uint64_t v254 = v506[0] - v505.i64[0];
        if ((v506[0] - v505.i64[0]) >> 3 > v253) {
          unint64_t v253 = v254 >> 3;
        }
        else {
          unint64_t v255 = v253;
        }
        v532 = v506;
        if (v255) {
          unint64_t v255 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned long long,unsigned long long>>>(v255);
        }
        else {
          uint64_t v256 = 0LL;
        }
        unint64_t v257 = v255 + 16 * v252;
        unint64_t v258 = v255 + 16 * v256;
        unint64_t v531 = v258;
        v259 = @"MTLStat_nSec";
        *(void *)unint64_t v257 = @"MTLStat_nSec";
        *(_DWORD *)(v257 + 8) = 0;
        unint64_t v251 = v257 + 16;
        v530.i64[1] = v257 + 16;
        v260 = (void *)v505.i64[1];
        v261 = (void *)v505.i64[0];
        if (v505.i64[1] == v505.i64[0])
        {
          int64x2_t v263 = vdupq_n_s64(v505.u64[1]);
        }

        else
        {
          do
          {
            uint64_t v262 = *(v260 - 2);
            v260 -= 2;
            void *v260 = 0LL;
            *(void *)(v257 - 16) = v262;
            v257 -= 16LL;
            *(void *)(v257 + 8) = v260[1];
          }

          while (v260 != v261);
          int64x2_t v263 = v505;
          unint64_t v251 = v530.u64[1];
          unint64_t v258 = v531;
        }

        v505.i64[0] = v257;
        v505.i64[1] = v251;
        int64x2_t v530 = v263;
        unint64_t v264 = v506[0];
        v506[0] = v258;
        unint64_t v531 = v264;
        uint64_t v529 = v263.i64[0];
        std::__split_buffer<RawCounterInfo>::~__split_buffer((uint64_t)&v529);
      }

      else
      {
        *(void *)v505.i64[1] = @"MTLStat_nSec";
        *(_DWORD *)(v250 + 8) = 0;
        unint64_t v251 = v250 + 16;
      }

      v505.i64[1] = v251;

      uint64_t v265 = v505.i64[1];
      if (v505.i64[1] >= v506[0])
      {
        uint64_t v267 = (v505.i64[1] - v505.i64[0]) >> 4;
        unint64_t v268 = v267 + 1;
        uint64_t v269 = v506[0] - v505.i64[0];
        if ((v506[0] - v505.i64[0]) >> 3 > v268) {
          unint64_t v268 = v269 >> 3;
        }
        else {
          unint64_t v270 = v268;
        }
        v532 = v506;
        if (v270) {
          unint64_t v270 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned long long,unsigned long long>>>(v270);
        }
        else {
          uint64_t v271 = 0LL;
        }
        unint64_t v272 = v270 + 16 * v267;
        unint64_t v273 = v270 + 16 * v271;
        unint64_t v531 = v273;
        v274 = @"MTLStatTotalGPUCycles";
        *(void *)unint64_t v272 = @"MTLStatTotalGPUCycles";
        *(_DWORD *)(v272 + 8) = 0;
        unint64_t v266 = v272 + 16;
        v530.i64[1] = v272 + 16;
        v275 = (void *)v505.i64[1];
        v276 = (void *)v505.i64[0];
        if (v505.i64[1] == v505.i64[0])
        {
          int64x2_t v278 = vdupq_n_s64(v505.u64[1]);
        }

        else
        {
          do
          {
            uint64_t v277 = *(v275 - 2);
            v275 -= 2;
            void *v275 = 0LL;
            *(void *)(v272 - 16) = v277;
            v272 -= 16LL;
            *(void *)(v272 + 8) = v275[1];
          }

          while (v275 != v276);
          int64x2_t v278 = v505;
          unint64_t v266 = v530.u64[1];
          unint64_t v273 = v531;
        }

        v505.i64[0] = v272;
        v505.i64[1] = v266;
        int64x2_t v530 = v278;
        unint64_t v279 = v506[0];
        v506[0] = v273;
        unint64_t v531 = v279;
        uint64_t v529 = v278.i64[0];
        std::__split_buffer<RawCounterInfo>::~__split_buffer((uint64_t)&v529);
      }

      else
      {
        *(void *)v505.i64[1] = @"MTLStatTotalGPUCycles";
        *(_DWORD *)(v265 + 8) = 0;
        unint64_t v266 = v265 + 16;
      }

      v505.i64[1] = v266;

      uint64_t v280 = objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( &OBJC_CLASS___NSMutableArray,  "arrayWithCapacity:",  (v505.i64[1] - v505.i64[0]) >> 1));
      v281 = *(void **)(v472 + 96);
      *(void *)(v472 + 96) = v280;

      v283 = (void *)v505.i64[1];
      for (mm = (void *)v505.i64[0]; mm != v283; mm += 2)
      {
        __int128 v535 = 0u;
        __int128 v536 = 0u;
        __int128 v533 = 0u;
        __int128 v534 = 0u;
        id v284 = [&off_59FB90 countByEnumeratingWithState:&v533 objects:&v529 count:16];
        if (v284)
        {
          uint64_t v285 = *(void *)v534;
          do
          {
            for (nuint64_t n = 0LL; nn != v284; nuint64_t n = (char *)nn + 1)
            {
              if (*(void *)v534 != v285) {
                objc_enumerationMutation(&off_59FB90);
              }
              uint64_t v287 = *(void *)(*((void *)&v533 + 1) + 8LL * (void)nn);
              [v466 appendFormat:@"var %@%@ = 0;\n", *mm, v287];
              if ((mm[1] & 1) != 0) {
                [v466 appendFormat:@"var %@_norm%@ = 0;\n", *mm, v287];
              }
            }

            id v284 = [&off_59FB90 countByEnumeratingWithState:&v533 objects:&v529 count:16];
          }

          while (v284);
        }
      }

      [v466 appendString:@"var core_count = num_cores;\nvar TileWidth  = 0;\nvar TileHeight = 0;"];
      uint64_t v288 = v472;
      [v466 appendString:@"var _DerivedCounterResult = [];\n\n"];
      [v466 appendString:@"var _RawCounterValues = [];\n\n"];
      [v466 appendFormat:@"function _SetAndEvaluateRawCounterValues() {\n"];
      [v466 appendString:@"\tfor (var encoderIdx = 0; encoderIdx < _encoderRawData.length; encoderIdx++) {\n"];
      uint64_t v289 = *(void *)(v472 + 40);
      uint64_t v290 = *(void *)(v472 + 48);
      if (v289 != v290
        && 0x8E38E38E38E38E39LL * ((uint64_t)(*(void *)(*(void *)v428 + 8LL) - **(void **)v428) >> 3) == (v290 - v289) >> 3)
      {
        [v466 appendString:@"\t\tTileWidth = _encoderTileInfos[encoderIdx][0];\n"];
        [v466 appendString:@"\t\tTileHeight = _encoderTileInfos[encoderIdx][1];\n"];
      }

      [v466 appendString:@"\t\t_DerivedCounterResult[encoderIdx] = []\n"];
      [v466 appendString:@"\t\t_RawCounterValues[encoderIdx] = []\n"];
      uint64_t v291 = v505.i64[0];
      if (v505.i64[1] != v505.i64[0])
      {
        uint64_t v292 = 0LL;
        v293 = &off_59FB90;
        v294 = &CATransform3DIdentity_ptr;
        do
        {
          uint64_t v295 = 0LL;
          uint64_t v296 = v292 + 1;
          v490 = (id *)(v291 + 16 * v292);
          v486 = (unsigned int *)(v490 + 1);
          *(void *)propertyIndexa = v292 + 1;
          id objb = (id)(v292 + 2);
          do
          {
            if (v296 == (v505.i64[1] - v505.i64[0]) >> 4)
            {
              id v323 = *v490;
              v298 = (void *)objc_claimAutoreleasedReturnValue([v293 objectAtIndexedSubscript:v295]);
              unsigned int v324 = *v486;
              id v325 = *v490;
              v301 = (void *)objc_claimAutoreleasedReturnValue([v293 objectAtIndexedSubscript:v295]);
              objc_msgSend( v466,  "appendFormat:",  @"\t\t%@%@ = _encoderRawData[encoderIdx][%u][%u][%u];\n\t\t_RawCounterValues[encoderIdx].push(%@%@);\n",
                v323,
                v298,
                v295,
                (v324 >> 1) & 0x1F,
                (v324 >> 6) & 0x1FFF,
                v325,
                v301);
              v294 = &CATransform3DIdentity_ptr;
            }

            else
            {
              id v297 = *v490;
              if (objb == (id)((v505.i64[1] - v505.i64[0]) >> 4))
              {
                v298 = (void *)objc_claimAutoreleasedReturnValue([v293 objectAtIndexedSubscript:v295]);
                id v326 = *v490;
                v301 = (void *)objc_claimAutoreleasedReturnValue([v293 objectAtIndexedSubscript:v295]);
                objc_msgSend( v466,  "appendFormat:",  @"\t\t%@%@ = _encoderKickTimes[encoderIdx][%u];\n\t\t_RawCounterValues[encoderIdx].push(%@%@);\n",
                  v297,
                  v298,
                  v295,
                  v326,
                  v301);
              }

              else
              {
                v298 = (void *)objc_claimAutoreleasedReturnValue([v293 objectAtIndexedSubscript:v295]);
                unsigned int v299 = *v486;
                id v300 = *v490;
                v301 = (void *)objc_claimAutoreleasedReturnValue([v293 objectAtIndexedSubscript:v295]);
                objc_msgSend( v466,  "appendFormat:",  @"\t\t%@%@ = _encoderRawData[encoderIdx][%u][%u][%u];\n\t\t_RawCounterValues[encoderIdx].push(%@%@);\n",
                  v297,
                  v298,
                  v295,
                  (v299 >> 1) & 0x1F,
                  (v299 >> 6) & 0x1FFF,
                  v300,
                  v301);
              }
            }

            v302 = *(void **)(v472 + 96);
            v303 = (CATransform3D *)v294[288];
            id v304 = *v490;
            v305 = (void *)objc_claimAutoreleasedReturnValue([v293 objectAtIndexedSubscript:v295]);
            v306 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D stringWithFormat:](v303, "stringWithFormat:", @"%@%@", v304, v305));
            [v302 addObject:v306];

            if ((*v486 & 1) != 0)
            {
              unsigned int v307 = *v486 >> 19;
              v308 = &off_5A0C10;
              if (v457 != 0LL && v307 != 0)
              {
                v308 = v457;
                uint64_t v309 = v307;
              }

              else
              {
                uint64_t v309 = 0LL;
              }

              JSValueRef valueb = v308;
              id v310 = *v490;
              v311 = (void *)objc_claimAutoreleasedReturnValue([v293 objectAtIndexedSubscript:v295]);
              id v312 = *v490;
              v313 = (void *)objc_claimAutoreleasedReturnValue([v293 objectAtIndexedSubscript:v295]);
              v314 = v293;
              unsigned int v315 = *v486;
              id v316 = *v490;
              v317 = v314;
              v318 = (void *)objc_claimAutoreleasedReturnValue([v314 objectAtIndexedSubscript:v295]);
              objc_msgSend( v466,  "appendFormat:",  @"\t\t%@_norm%@ = 100.0 * %@ * (%@%@ / Math.max(_encoderRawData[encoderIdx][%u][%u][%u], 1));\n\t\t_RawCounterValues[encoderIdx].push(%@_norm%@);\n",
                v310,
                v311,
                valueb,
                v312,
                v313,
                v295,
                (v315 >> 1) & 0x1F,
                v309,
                v316,
                v318);

              v294 = &CATransform3DIdentity_ptr;
              v293 = v317;

              v319 = *(void **)(v472 + 96);
              id v320 = *v490;
              v321 = (void *)objc_claimAutoreleasedReturnValue([v317 objectAtIndexedSubscript:v295]);
              v322 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@_norm%@",  v320,  v321));
              [v319 addObject:v322];
              uint64_t v296 = *(void *)propertyIndexa;
            }

            ++v295;
          }

          while (v295 != 3);
          id v327 = *v490;
          v328 = (void *)objc_claimAutoreleasedReturnValue([v293 objectAtIndexedSubscript:0]);
          id v329 = *v490;
          v330 = (void *)objc_claimAutoreleasedReturnValue([v293 objectAtIndexedSubscript:1]);
          id v331 = *v490;
          v332 = (void *)objc_claimAutoreleasedReturnValue([v293 objectAtIndexedSubscript:2]);
          objc_msgSend( v466,  "appendFormat:",  @"\t\t%@ = %@%@ + %@%@ + %@%@;\n\t\t_RawCounterValues[encoderIdx].push(%@);\n",
            v327,
            v327,
            v328,
            v329,
            v330,
            v331,
            v332,
            *v490);

          uint64_t v292 = *(void *)propertyIndexa;
          uint64_t v288 = v472;
          [*(id *)(v472 + 96) addObject:*v490];
          if ((*v486 & 1) != 0)
          {
            unsigned int v333 = *v486 >> 19;
            v334 = &off_5A0C10;
            if (v457 != 0LL && v333 != 0)
            {
              v334 = v457;
              uint64_t v335 = v333;
            }

            else
            {
              uint64_t v335 = 0LL;
            }

            v336 = v334;
            objc_msgSend( v466,  "appendFormat:",  @"\t\t%@_norm = 100.0 * %@ * (%@ / Math.max(_encoderRawData[encoderIdx][0][%u][%u] + _encoderRawData[encoderIdx][1][%u][%u] + _encoderRawData[encoderIdx][2][%u][%u], 1.0));\n\t\t_RawCounterValues[encoderIdx].push(%@_norm);\n",
              *v490,
              v336,
              *v490,
              (*v486 >> 1) & 0x1F,
              v335,
              (*v486 >> 1) & 0x1F,
              v335,
              (*v486 >> 1) & 0x1F,
              v335,
              *v490);
            v337 = *(void **)(v472 + 96);
            v338 = (void *)objc_claimAutoreleasedReturnValue([*v490 stringByAppendingString:@"_norm"]);
            [v337 addObject:v338];

            uint64_t v288 = v472;
          }

          uint64_t v291 = v505.i64[0];
        }

        while (*(void *)propertyIndexa < (unint64_t)((v505.i64[1] - v505.i64[0]) >> 4));
      }

      __int128 v528 = 0u;
      __int128 v527 = 0u;
      __int128 v526 = 0u;
      __int128 v525 = 0u;
      id v339 = *(id *)(v288 + 104);
      id v340 = [v339 countByEnumeratingWithState:&v525 objects:v523 count:16];
      if (v340)
      {
        uint64_t v341 = *(void *)v526;
        do
        {
          for (i1 = 0LL; i1 != v340; i1 = (char *)i1 + 1)
          {
            if (*(void *)v526 != v341) {
              objc_enumerationMutation(v339);
            }
            id v343 = *(id *)(*((void *)&v525 + 1) + 8LL * (void)i1);
            objc_msgSend( v466,  "appendFormat:",  @"\t\ttry { JSValueRef value = %@(); if (!isFinite(value) || isNaN(value) || (value < 0)) { JSValueRef value = 0; } _DerivedCounterResult[encoderIdx].push(value); } catch(err) { ErrorLog(err); _DerivedCounterResult[encoderIdx].push(0); }\n",
              v343);
          }

          id v340 = [v339 countByEnumeratingWithState:&v525 objects:v523 count:16];
        }

        while (v340);
      }

      [v466 appendFormat:@"\t}\n"];
      [v466 appendFormat:@"}\n"];
      v344 = *(void **)(v472 + 136);
      *(void *)(v472 + 136) = v466;
      id v345 = v466;

      exception[0] = (JSValueRef)&v505;
      std::vector<RawCounterInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)exception);

      uint64_t v176 = *(void *)(v472 + 136);
    }

    if ([v455 evaluteScript:v176 scriptURL:0])
    {
      id v346 = v455;
      exception[0] = 0LL;
      v469 = v346;
      v347 = (void *)objc_claimAutoreleasedReturnValue([v346 context]);
      objecta = (OpaqueJSValue *)[v346 createArrayRef:@"_encoderRawData"];
      if (*(void *)(*(void *)v428 + 8LL) == **(void **)v428)
      {
        unint64_t v359 = 0LL;
      }

      else
      {
        *(void *)propertyIndexb = 0LL;
        do
        {
          valuea = JSObjectMakeArray((JSContextRef)[v347 JSGlobalContextRef], 0, 0, exception);
          JSObjectSetPropertyAtIndex( (JSContextRef)[v347 JSGlobalContextRef],  objecta,  propertyIndexb[0],  valuea,  exception);
          v348 = 0LL;
          objc = (char *)(**(void **)v428 + 72LL * *(void *)propertyIndexb);
          do
          {
            Array = JSObjectMakeArray((JSContextRef)[v347 JSGlobalContextRef], 0, 0, exception);
            JSObjectSetPropertyAtIndex( (JSContextRef)[v347 JSGlobalContextRef],  valuea,  v348,  Array,  exception);
            v487 = v348;
            v349 = &objc[24 * (void)v348];
            if (*((void *)v349 + 1) != *(void *)v349)
            {
              uint64_t v350 = 0LL;
              unsigned int v351 = 0;
              do
              {
                v352 = JSObjectMakeArray((JSContextRef)[v347 JSGlobalContextRef], 0, 0, exception);
                JSObjectSetPropertyAtIndex( (JSContextRef)[v347 JSGlobalContextRef],  Array,  v351,  v352,  exception);
                uint64_t v353 = *(void *)v349;
                v354 = (void *)(*(void *)v349 + 24 * v350);
                if (v354[1] != *v354)
                {
                  uint64_t v355 = 0LL;
                  unsigned int v356 = 0;
                  do
                  {
                    v357 = (const OpaqueJSContext *)[v347 JSGlobalContextRef];
                    Number = JSValueMakeNumber( (JSContextRef)[v347 JSGlobalContextRef],  (double)*(unint64_t *)(*v354 + 8 * v355));
                    JSObjectSetPropertyAtIndex(v357, v352, v356++, Number, exception);
                    uint64_t v355 = v356;
                  }

                  while (v356 < (unint64_t)((uint64_t)(v354[1] - *v354) >> 3));
                  uint64_t v353 = *(void *)v349;
                }

                uint64_t v350 = ++v351;
              }

              while (0xAAAAAAAAAAAAAAABLL * ((*((void *)v349 + 1) - v353) >> 3) > v351);
            }

            v348 = v487 + 1;
          }

          while (v487 != (_BYTE *)&dword_0 + 2);
          unint64_t v359 = 0x8E38E38E38E38E39LL * ((uint64_t)(*(void *)(*(void *)v428 + 8LL) - **(void **)v428) >> 3);
          ++*(void *)propertyIndexb;
        }

        while (*(void *)propertyIndexb < v359);
      }

      uint64_t v361 = *(void *)(v472 + 40);
      uint64_t v362 = *(void *)(v472 + 48);
      if (v361 != v362 && v359 == (v362 - v361) >> 3)
      {
        v363 = (OpaqueJSValue *)[v469 createArrayRef:@"_encoderTileInfos"];
        if (*(void *)(v472 + 48) != *(void *)(v472 + 40))
        {
          v364 = v363;
          unint64_t v365 = 0LL;
          do
          {
            v366 = JSObjectMakeArray((JSContextRef)[v347 JSGlobalContextRef], 0, 0, exception);
            JSObjectSetPropertyAtIndex( (JSContextRef)[v347 JSGlobalContextRef],  v364,  v365,  v366,  exception);
            v367 = (const OpaqueJSContext *)[v347 JSGlobalContextRef];
            v368 = JSValueMakeNumber( (JSContextRef)[v347 JSGlobalContextRef],  (double)*(void *)(*(void *)(v472 + 40) + 8 * v365));
            JSObjectSetPropertyAtIndex(v367, v366, 0, v368, exception);
            v369 = (const OpaqueJSContext *)[v347 JSGlobalContextRef];
            v370 = (const OpaqueJSContext *)[v347 JSGlobalContextRef];
            LODWORD(v371) = *(_DWORD *)(*(void *)(v472 + 40) + 8 * v365 + 4);
            v372 = JSValueMakeNumber(v370, (double)v371);
            JSObjectSetPropertyAtIndex(v369, v366, 1u, v372, exception);
            ++v365;
          }

          while (v365 < (uint64_t)(*(void *)(v472 + 48) - *(void *)(v472 + 40)) >> 3);
        }
      }

      v373 = (OpaqueJSValue *)[v469 createArrayRef:@"_encoderKickTimes"];
      if (![*(id *)(v472 + 120) count])
      {
        id v374 = [&off_59FB78 mutableCopy];
        uint64_t v375 = objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( &OBJC_CLASS___NSMutableArray,  "arrayWithCapacity:",  *(unsigned int *)(v472 + 144)));
        v376 = *(void **)(v472 + 120);
        *(void *)(v472 + 120) = v375;

        if (*(_DWORD *)(v472 + 144))
        {
          unsigned int v377 = 0;
          do
          {
            [*(id *)(v472 + 120) addObject:v374];
            ++v377;
          }

          while (v377 < *(_DWORD *)(v472 + 144));
        }
      }

      for (unint64_t i2 = 0; i2 < (unint64_t)[*(id *)(v472 + 120) count]; ++i2)
      {
        v380 = JSObjectMakeArray((JSContextRef)[v347 JSGlobalContextRef], 0, 0, exception);
        JSObjectSetPropertyAtIndex((JSContextRef)[v347 JSGlobalContextRef], v373, i2, v380, exception);
        for (unint64_t i3 = 0LL; ; ++i3)
        {
          v382 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v472 + 120) objectAtIndexedSubscript:i2]);
          BOOL v383 = i3 < (unint64_t)[v382 count];

          if (!v383) {
            break;
          }
          v384 = (const OpaqueJSContext *)[v347 JSGlobalContextRef];
          v385 = (const OpaqueJSContext *)[v347 JSGlobalContextRef];
          v386 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v472 + 120) objectAtIndexedSubscript:i2]);
          v387 = (void *)objc_claimAutoreleasedReturnValue([v386 objectAtIndexedSubscript:i3]);
          [v387 doubleValue];
          v389 = JSValueMakeNumber(v385, v388);
          JSObjectSetPropertyAtIndex(v384, v380, i3, v389, exception);
        }
      }

      JSValueRef v492 = (JSValueRef)objc_opt_new(&OBJC_CLASS___NSMutableDictionary, v379);
      v390 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v472 + 88) objectForKeyedSubscript:@"DerivedCounterConfigurationVariables"]);
      if (v390)
      {
        [v469 setValues:v390];
        -[OpaqueJSValue setObject:forKeyedSubscript:]( v492,  "setObject:forKeyedSubscript:",  v390,  @"DerivedCounterConfigurationVariables");
      }

      [v469 callFunction:@"_SetAndEvaluateRawCounterValues" withArguments:&__NSArray0__struct];
      v391 = (void *)objc_claimAutoreleasedReturnValue([v469 getValue:@"_DerivedCounterResult"]);
      v392 = (void *)objc_claimAutoreleasedReturnValue([v391 toArray]);

      v393 = (void *)objc_claimAutoreleasedReturnValue([v469 getValue:@"_RawCounterValues"]);
      v394 = (void *)objc_claimAutoreleasedReturnValue([v393 toArray]);

      v395 = (char *)[*(id *)(v472 + 104) count];
      id v396 = [*(id *)(v472 + 96) count];
      id v397 = (id)*(unsigned int *)(v472 + 144);
      if ([v392 count] == v397
        && (id v398 = (id)*(unsigned int *)(v472 + 144), [v394 count] == v398))
      {
        v399 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( &OBJC_CLASS___NSMutableArray,  "arrayWithCapacity:",  *(unsigned int *)(v472 + 144)));
        if (*(_DWORD *)(v472 + 144))
        {
          unint64_t v400 = 0LL;
          v401 = &v395[(void)v396];
          do
          {
            v402 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( &OBJC_CLASS___NSMutableArray,  "arrayWithCapacity:",  v401));
            v403 = (void *)objc_claimAutoreleasedReturnValue([v392 objectAtIndexedSubscript:v400]);
            [v402 addObjectsFromArray:v403];

            v404 = (void *)objc_claimAutoreleasedReturnValue([v394 objectAtIndexedSubscript:v400]);
            [v402 addObjectsFromArray:v404];

            [v399 addObject:v402];
            ++v400;
          }

          while (v400 < *(unsigned int *)(v472 + 144));
        }

        uint64_t v529 = (uint64_t)v399;
        v523[0] = (void **)@"AverageSamples";
        v523[1] = (void **)@"counters";
        v405 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v472 + 104) arrayByAddingObjectsFromArray:*(void *)(v472 + 96)]);
        v530.i64[0] = (uint64_t)v405;
        v406 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v529,  v523,  2LL));
        -[OpaqueJSValue setObject:forKeyedSubscript:]( v492,  "setObject:forKeyedSubscript:",  v406,  @"derivedCounterDataForBottleneckAnalysis");

        *(void *)&__int128 v525 = @"AverageSamples";
        *((void *)&v525 + 1) = @"counters";
        uint64_t v407 = *(void *)(v472 + 112);
        *(void *)&__int128 v533 = v392;
        *((void *)&v533 + 1) = v407;
        v408 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v533,  &v525,  2LL));
        -[OpaqueJSValue setObject:forKeyedSubscript:]( v492,  "setObject:forKeyedSubscript:",  v408,  @"derivedCounterData");

        v409 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v472 + 88) objectForKeyedSubscript:@"DerivedCounterAnalysis"]);
        -[OpaqueJSValue setObject:forKeyedSubscript:]( v492,  "setObject:forKeyedSubscript:",  v409,  @"DerivedCounterAnalysis");

        v410 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v472 + 88) objectForKeyedSubscript:@"DerivedCounterAnalysisFunctions"]);
        -[OpaqueJSValue setObject:forKeyedSubscript:]( v492,  "setObject:forKeyedSubscript:",  v410,  @"DerivedCounterAnalysisFunctions");

        -[OpaqueJSValue setObject:forKeyedSubscript:]( v492,  "setObject:forKeyedSubscript:",  *(void *)(v472 + 88),  @"DerivedCounterInfo");
        uint64_t v411 = *(void *)(v472 + 128);
        if (v411) {
          -[OpaqueJSValue setObject:forKeyedSubscript:](v492, "setObject:forKeyedSubscript:", v411, @"BatchInfos");
        }
        uint64_t v412 = *(void *)(v472 + 72);
        if (v412) {
          -[OpaqueJSValue setObject:forKeyedSubscript:]( v492,  "setObject:forKeyedSubscript:",  v412,  @"HighPriorityBatchInfo");
        }
        BOOL v48 = v492;
      }

      else
      {
        BOOL v48 = 0LL;
      }

      uint64_t v413 = *(void *)(v472 + 208);
      if (v413) {
        -[OpaqueJSValue setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v413,  @"GPU Encoder Info");
      }
      if (*(void *)(v472 + 216)) {
        v414 = *(_UNKNOWN ***)(v472 + 216);
      }
      else {
        v414 = &off_59FBA8;
      }
      -[OpaqueJSValue setObject:forKeyedSubscript:](v48, "setObject:forKeyedSubscript:", v414, @"Timebase");
    }

    else
    {
LABEL_387:
      BOOL v48 = 0LL;
    }

    objc_autoreleasePoolPop(contexta);
    if (__p) {
      operator delete(__p);
    }
  }

  else
  {
    BOOL v48 = 0LL;
  }

  return v48;
}

void sub_184394( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *__p, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void std::unique_ptr<FrameRawCounterData>::reset[abi:nn180100](void ***a1, void **a2)
{
  unint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    std::vector<std::array<std::vector<std::vector<unsigned long long>>,3ul>>::__destroy_vector::operator()[abi:nn180100](&v3);
    operator delete(v2);
  }

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *,false>( uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
LABEL_1:
  uint64_t v8 = a2 - 40;
  uint64_t v121 = a2 - 120;
  uint64_t v122 = a2 - 80;
  unint64_t v9 = a1;
  unint64_t v123 = a2;
  while (2)
  {
    a1 = v9;
    uint64_t v10 = a2 - v9;
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v9) >> 3);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return *(double *)&v36;
      case 2uLL:
        if (KickBoundarySample::operator<(v8, v9))
        {
          __int128 v52 = *(_OWORD *)v9;
          __int128 v53 = *(_OWORD *)(v9 + 16);
          uint64_t v129 = *(void *)(v9 + 32);
          __int128 v127 = v52;
          __int128 v128 = v53;
          __int128 v54 = *(_OWORD *)v8;
          __int128 v55 = *(_OWORD *)(v8 + 16);
          *(void *)(v9 + 32) = *(void *)(v8 + 32);
          *(_OWORD *)unint64_t v9 = v54;
          *(_OWORD *)(v9 + 16) = v55;
          __int128 v36 = v127;
          __int128 v56 = v128;
          *(void *)(v8 + 32) = v129;
          *(_OWORD *)uint64_t v8 = v36;
          *(_OWORD *)(v8 + 16) = v56;
        }

        return *(double *)&v36;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>( v9,  v9 + 40,  v8);
        return *(double *)&v36;
      case 4uLL:
        *(void *)&__int128 v36 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>( v9,  v9 + 40,  v9 + 80,  v8).n128_u64[0];
        return *(double *)&v36;
      case 5uLL:
        *(void *)&__int128 v36 = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>( v9,  v9 + 40,  v9 + 80,  v9 + 120,  v8).n128_u64[0];
        return *(double *)&v36;
      default:
        if (v10 <= 959)
        {
          uint64_t v57 = v9 + 40;
          BOOL v59 = v9 == a2 || v57 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v59)
            {
              uint64_t v60 = 0LL;
              uint64_t v61 = v9;
              do
              {
                uint64_t v62 = v61;
                uint64_t v61 = v57;
                if (KickBoundarySample::operator<(v57, v62))
                {
                  __int128 v63 = *(_OWORD *)v61;
                  __int128 v64 = *(_OWORD *)(v61 + 16);
                  uint64_t v129 = *(void *)(v61 + 32);
                  __int128 v127 = v63;
                  __int128 v128 = v64;
                  uint64_t v65 = v60;
                  while (1)
                  {
                    uint64_t v66 = v9 + v65;
                    __int128 v67 = *(_OWORD *)(v9 + v65 + 16);
                    *(_OWORD *)(v66 + 40) = *(_OWORD *)(v9 + v65);
                    *(_OWORD *)(v66 + 56) = v67;
                    *(void *)(v66 + 72) = *(void *)(v9 + v65 + 32);
                    if (!v65) {
                      break;
                    }
                    v65 -= 40LL;
                    if (!KickBoundarySample::operator<((uint64_t)&v127, v65 + v9))
                    {
                      uint64_t v68 = v9 + v65 + 40;
                      goto LABEL_71;
                    }
                  }

                  uint64_t v68 = v9;
LABEL_71:
                  __int128 v36 = v127;
                  __int128 v69 = v128;
                  *(void *)(v68 + 32) = v129;
                  *(_OWORD *)uint64_t v68 = v36;
                  *(_OWORD *)(v68 + 16) = v69;
                }

                uint64_t v57 = v61 + 40;
                v60 += 40LL;
              }

              while (v61 + 40 != a2);
            }
          }

          else if (!v59)
          {
            do
            {
              uint64_t v112 = a1;
              a1 = v57;
              if (KickBoundarySample::operator<(v57, v112))
              {
                __int128 v113 = *(_OWORD *)a1;
                __int128 v114 = *(_OWORD *)(a1 + 16);
                uint64_t v129 = *(void *)(a1 + 32);
                __int128 v127 = v113;
                __int128 v128 = v114;
                uint64_t v115 = a1;
                do
                {
                  uint64_t v116 = v115 - 40;
                  __int128 v117 = *(_OWORD *)(v115 - 24);
                  *(_OWORD *)uint64_t v115 = *(_OWORD *)(v115 - 40);
                  *(_OWORD *)(v115 + 16) = v117;
                  *(void *)(v115 + 32) = *(void *)(v115 - 8);
                  BOOL v118 = KickBoundarySample::operator<((uint64_t)&v127, v115 - 80);
                  uint64_t v115 = v116;
                }

                while (v118);
                __int128 v36 = v127;
                __int128 v119 = v128;
                *(void *)(v116 + 32) = v129;
                *(_OWORD *)uint64_t v116 = v36;
                *(_OWORD *)(v116 + 16) = v119;
              }

              uint64_t v57 = a1 + 40;
            }

            while (a1 + 40 != a2);
          }

          return *(double *)&v36;
        }

        if (!a3)
        {
          if (v9 != a2)
          {
            int64_t v70 = (v11 - 2) >> 1;
            int64_t v71 = v70;
            do
            {
              int64_t v72 = v71;
              if (v70 >= v71)
              {
                uint64_t v73 = (2 * v71) | 1;
                uint64_t v74 = a1 + 40 * v73;
                if (2 * v71 + 2 < (uint64_t)v11 && KickBoundarySample::operator<(a1 + 40 * v73, v74 + 40))
                {
                  v74 += 40LL;
                  uint64_t v73 = 2 * v72 + 2;
                }

                uint64_t v75 = a1 + 40 * v72;
                if (!KickBoundarySample::operator<(v74, v75))
                {
                  __int128 v76 = *(_OWORD *)v75;
                  __int128 v77 = *(_OWORD *)(v75 + 16);
                  uint64_t v129 = *(void *)(v75 + 32);
                  __int128 v127 = v76;
                  __int128 v128 = v77;
                  do
                  {
                    uint64_t v78 = v74;
                    __int128 v79 = *(_OWORD *)v74;
                    __int128 v80 = *(_OWORD *)(v74 + 16);
                    *(void *)(v75 + 32) = *(void *)(v74 + 32);
                    *(_OWORD *)uint64_t v75 = v79;
                    *(_OWORD *)(v75 + 16) = v80;
                    if (v70 < v73) {
                      break;
                    }
                    uint64_t v81 = (2 * v73) | 1;
                    uint64_t v74 = a1 + 40 * v81;
                    uint64_t v82 = 2 * v73 + 2;
                    if (v82 < (uint64_t)v11 && KickBoundarySample::operator<(a1 + 40 * v81, v74 + 40))
                    {
                      v74 += 40LL;
                      uint64_t v81 = v82;
                    }

                    uint64_t v75 = v78;
                    uint64_t v73 = v81;
                  }

                  while (!KickBoundarySample::operator<(v74, (uint64_t)&v127));
                  __int128 v83 = v127;
                  __int128 v84 = v128;
                  *(void *)(v78 + 32) = v129;
                  *(_OWORD *)uint64_t v78 = v83;
                  *(_OWORD *)(v78 + 16) = v84;
                }
              }

              int64_t v71 = v72 - 1;
            }

            while (v72);
            int64_t v85 = v10 / 0x28uLL;
            unint64_t v86 = v123;
            do
            {
              uint64_t v87 = 0LL;
              __int128 v88 = *(_OWORD *)a1;
              __int128 v89 = *(_OWORD *)(a1 + 16);
              uint64_t v126 = *(void *)(a1 + 32);
              __int128 v124 = v88;
              __int128 v125 = v89;
              uint64_t v90 = v85 - 2;
              if (v85 < 2) {
                uint64_t v90 = v85 - 1;
              }
              uint64_t v91 = v90 >> 1;
              uint64_t v92 = a1;
              do
              {
                uint64_t v93 = v92 + 40 * v87 + 40;
                uint64_t v94 = (2 * v87) | 1;
                uint64_t v95 = 2 * v87 + 2;
                if (v95 < v85 && KickBoundarySample::operator<(v92 + 40 * v87 + 40, v92 + 40 * v87 + 80))
                {
                  v93 += 40LL;
                  uint64_t v94 = v95;
                }

                __int128 v96 = *(_OWORD *)v93;
                __int128 v97 = *(_OWORD *)(v93 + 16);
                *(void *)(v92 + 32) = *(void *)(v93 + 32);
                *(_OWORD *)uint64_t v92 = v96;
                *(_OWORD *)(v92 + 16) = v97;
                uint64_t v92 = v93;
                uint64_t v87 = v94;
              }

              while (v94 <= v91);
              v86 -= 40LL;
              if (v93 == v86)
              {
                __int128 v36 = v124;
                __int128 v110 = v125;
                *(void *)(v93 + 32) = v126;
                *(_OWORD *)uint64_t v93 = v36;
                *(_OWORD *)(v93 + 16) = v110;
              }

              else
              {
                __int128 v98 = *(_OWORD *)v86;
                __int128 v99 = *(_OWORD *)(v86 + 16);
                *(void *)(v93 + 32) = *(void *)(v86 + 32);
                *(_OWORD *)uint64_t v93 = v98;
                *(_OWORD *)(v93 + 16) = v99;
                __int128 v36 = v124;
                __int128 v100 = v125;
                *(void *)(v86 + 32) = v126;
                *(_OWORD *)unint64_t v86 = v36;
                *(_OWORD *)(v86 + 16) = v100;
                uint64_t v101 = v93 - a1 + 40;
                if (v101 >= 41)
                {
                  unint64_t v102 = (unint64_t)(-2 - 0x3333333333333333LL * (v101 >> 3)) >> 1;
                  uint64_t v103 = a1 + 40 * v102;
                  if (KickBoundarySample::operator<(v103, v93))
                  {
                    __int128 v104 = *(_OWORD *)v93;
                    __int128 v105 = *(_OWORD *)(v93 + 16);
                    uint64_t v129 = *(void *)(v93 + 32);
                    __int128 v127 = v104;
                    __int128 v128 = v105;
                    do
                    {
                      uint64_t v106 = v103;
                      __int128 v107 = *(_OWORD *)v103;
                      __int128 v108 = *(_OWORD *)(v103 + 16);
                      *(void *)(v93 + 32) = *(void *)(v103 + 32);
                      *(_OWORD *)uint64_t v93 = v107;
                      *(_OWORD *)(v93 + 16) = v108;
                      if (!v102) {
                        break;
                      }
                      unint64_t v102 = (v102 - 1) >> 1;
                      uint64_t v103 = a1 + 40 * v102;
                      uint64_t v93 = v106;
                    }

                    while (KickBoundarySample::operator<(v103, (uint64_t)&v127));
                    __int128 v36 = v127;
                    __int128 v109 = v128;
                    *(void *)(v106 + 32) = v129;
                    *(_OWORD *)uint64_t v106 = v36;
                    *(_OWORD *)(v106 + 16) = v109;
                  }
                }
              }
            }

            while (v85-- > 2);
          }

          return *(double *)&v36;
        }

        unint64_t v12 = v9 + 40 * (v11 >> 1);
        if ((unint64_t)v10 < 0x1401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>( v9 + 40 * (v11 >> 1),  v9,  v8);
        }

        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>( v9,  v9 + 40 * (v11 >> 1),  v8);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>( v9 + 40,  v9 + 40 * (v11 >> 1) - 40,  v122);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>( v9 + 80,  v9 + 40 + 40 * (v11 >> 1),  v121);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>( v9 + 40 * (v11 >> 1) - 40,  v9 + 40 * (v11 >> 1),  v9 + 40 + 40 * (v11 >> 1));
          __int128 v13 = *(_OWORD *)v9;
          __int128 v14 = *(_OWORD *)(v9 + 16);
          uint64_t v129 = *(void *)(v9 + 32);
          __int128 v127 = v13;
          __int128 v128 = v14;
          __int128 v15 = *(_OWORD *)v12;
          __int128 v16 = *(_OWORD *)(v12 + 16);
          *(void *)(v9 + 32) = *(void *)(v12 + 32);
          *(_OWORD *)unint64_t v9 = v15;
          *(_OWORD *)(v9 + 16) = v16;
          __int128 v17 = v127;
          __int128 v18 = v128;
          *(void *)(v12 + 32) = v129;
          *(_OWORD *)unint64_t v12 = v17;
          *(_OWORD *)(v12 + 16) = v18;
        }

        --a3;
        a2 = v123;
        if ((a4 & 1) == 0 && !KickBoundarySample::operator<(v9 - 40, v9))
        {
          __int128 v37 = *(_OWORD *)v9;
          __int128 v38 = *(_OWORD *)(v9 + 16);
          uint64_t v126 = *(void *)(v9 + 32);
          __int128 v124 = v37;
          __int128 v125 = v38;
          if (KickBoundarySample::operator<((uint64_t)&v124, v8))
          {
            do
              v9 += 40LL;
            while (!KickBoundarySample::operator<((uint64_t)&v124, v9));
          }

          else
          {
            unint64_t v39 = v9 + 40;
            do
            {
              unint64_t v9 = v39;
              if (v39 >= v123) {
                break;
              }
              BOOL v40 = KickBoundarySample::operator<((uint64_t)&v124, v39);
              unint64_t v39 = v9 + 40;
            }

            while (!v40);
          }

          unint64_t v41 = v123;
          if (v9 < v123)
          {
            unint64_t v41 = v123;
            do
              v41 -= 40LL;
            while (KickBoundarySample::operator<((uint64_t)&v124, v41));
          }

          while (v9 < v41)
          {
            __int128 v42 = *(_OWORD *)v9;
            __int128 v43 = *(_OWORD *)(v9 + 16);
            uint64_t v129 = *(void *)(v9 + 32);
            __int128 v127 = v42;
            __int128 v128 = v43;
            __int128 v44 = *(_OWORD *)v41;
            __int128 v45 = *(_OWORD *)(v41 + 16);
            *(void *)(v9 + 32) = *(void *)(v41 + 32);
            *(_OWORD *)unint64_t v9 = v44;
            *(_OWORD *)(v9 + 16) = v45;
            __int128 v46 = v127;
            __int128 v47 = v128;
            *(void *)(v41 + 32) = v129;
            *(_OWORD *)unint64_t v41 = v46;
            *(_OWORD *)(v41 + 16) = v47;
            do
              v9 += 40LL;
            while (!KickBoundarySample::operator<((uint64_t)&v124, v9));
            do
              v41 -= 40LL;
            while (KickBoundarySample::operator<((uint64_t)&v124, v41));
          }

          BOOL v48 = (__int128 *)(v9 - 40);
          if (v9 - 40 != a1)
          {
            __int128 v49 = *v48;
            __int128 v50 = *(_OWORD *)(v9 - 24);
            *(void *)(a1 + 32) = *(void *)(v9 - 8);
            *(_OWORD *)a1 = v49;
            *(_OWORD *)(a1 + 16) = v50;
          }

          a4 = 0;
          __int128 v36 = v124;
          __int128 v51 = v125;
          *(void *)(v9 - 8) = v126;
          *BOOL v48 = v36;
          *(_OWORD *)(v9 - 24) = v51;
          continue;
        }

        __int128 v19 = *(_OWORD *)v9;
        __int128 v20 = *(_OWORD *)(v9 + 16);
        uint64_t v126 = *(void *)(v9 + 32);
        __int128 v124 = v19;
        __int128 v125 = v20;
        unint64_t v21 = v9;
        do
        {
          uint64_t v22 = v21;
          v21 += 40LL;
        }

        while (KickBoundarySample::operator<(v21, (uint64_t)&v124));
        unint64_t v23 = v123;
        if (v22 == v9)
        {
          unint64_t v23 = v123;
          do
          {
            if (v21 >= v23) {
              break;
            }
            v23 -= 40LL;
          }

          while (!KickBoundarySample::operator<(v23, (uint64_t)&v124));
        }

        else
        {
          do
            v23 -= 40LL;
          while (!KickBoundarySample::operator<(v23, (uint64_t)&v124));
        }

        if (v21 < v23)
        {
          unint64_t v24 = v21;
          unint64_t v25 = v23;
          do
          {
            __int128 v27 = *(_OWORD *)(v24 + 16);
            __int128 v127 = *(_OWORD *)v24;
            __int128 v26 = v127;
            __int128 v128 = v27;
            uint64_t v129 = *(void *)(v24 + 32);
            uint64_t v28 = v129;
            __int128 v30 = *(_OWORD *)v25;
            __int128 v29 = *(_OWORD *)(v25 + 16);
            *(void *)(v24 + 32) = *(void *)(v25 + 32);
            *(_OWORD *)unint64_t v24 = v30;
            *(_OWORD *)(v24 + 16) = v29;
            *(void *)(v25 + 32) = v28;
            *(_OWORD *)unint64_t v25 = v26;
            *(_OWORD *)(v25 + 16) = v27;
            do
            {
              uint64_t v22 = v24;
              v24 += 40LL;
            }

            while (KickBoundarySample::operator<(v24, (uint64_t)&v124));
            do
              v25 -= 40LL;
            while (!KickBoundarySample::operator<(v25, (uint64_t)&v124));
          }

          while (v24 < v25);
        }

        if (v22 != a1)
        {
          __int128 v31 = *(_OWORD *)v22;
          __int128 v32 = *(_OWORD *)(v22 + 16);
          *(void *)(a1 + 32) = *(void *)(v22 + 32);
          *(_OWORD *)a1 = v31;
          *(_OWORD *)(a1 + 16) = v32;
        }

        __int128 v33 = v124;
        __int128 v34 = v125;
        *(void *)(v22 + 32) = v126;
        *(_OWORD *)uint64_t v22 = v33;
        *(_OWORD *)(v22 + 16) = v34;
        if (v21 < v23)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *,false>( a1,  v22,  a3,  a4 & 1);
          a4 = 0;
          unint64_t v9 = v22 + 40;
          continue;
        }

        BOOL v35 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>( a1,  v22);
        unint64_t v9 = v22 + 40;
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>( v22 + 40,  v123))
        {
          if (v35) {
            continue;
          }
          goto LABEL_29;
        }

        a2 = v22;
        if (!v35) {
          goto LABEL_1;
        }
        return *(double *)&v36;
    }
  }

void *BufferView<EncoderSampleIndexData>::BufferView(void *a1, void *a2)
{
  id v3 = a2;
  *a1 = [v3 bytes];
  unint64_t v4 = (unint64_t)[v3 length];
  a1[1] = *a1 + 16 * (v4 >> 4);
  a1[2] = v4 >> 4;

  return a1;
}

void sub_185288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::vector<GPUEncoderInfo>::vector(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    if (a2 >= 0x555555555555556LL) {
      abort();
    }
    uint64_t v3 = 3 * a2;
    uint64_t v4 = 48 * a2;
    unint64_t v5 = (char *)operator new(48 * a2);
    *a1 = v5;
    a1[2] = &v5[16 * v3];
    size_t v6 = 48 * ((v4 - 48) / 0x30uLL) + 48;
    bzero(v5, v6);
    a1[1] = &v5[v6];
  }

  return a1;
}

void ___ZN21GRCDerivedCounterData25ProcessDerivedCounterDataEP14NSMutableArrayIPS0_IP8NSNumberEE_block_invoke( id a1, NSString *a2)
{
}

BOOL KickBoundarySample::operator<(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  unsigned int v3 = *(_DWORD *)(a2 + 32);
  BOOL v4 = v2 >= v3;
  if (v2 == v3)
  {
    BOOL v4 = *(void *)a1 >= *(void *)a2;
    if (*(void *)a1 == *(void *)a2)
    {
      unint64_t v5 = *(void *)(a1 + 8);
      unint64_t v6 = *(void *)(a2 + 8);
      BOOL v4 = v5 >= v6;
      if (v5 == v6)
      {
        unint64_t v7 = *(void *)(a1 + 16);
        unint64_t v8 = *(void *)(a2 + 16);
        BOOL v4 = v7 >= v8;
        if (v7 == v8)
        {
          unint64_t v9 = *(void *)(a1 + 24);
          unint64_t v10 = *(void *)(a2 + 24);
          BOOL v4 = v9 >= v10;
          if (v9 == v10) {
            return *(_DWORD *)(a1 + 36) < *(_DWORD *)(a2 + 36);
          }
        }
      }
    }
  }

  return !v4;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = KickBoundarySample::operator<(a2, a1);
  BOOL result = KickBoundarySample::operator<(a3, a2);
  if (v6)
  {
    if (result)
    {
      __int128 v8 = *(_OWORD *)a1;
      __int128 v9 = *(_OWORD *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a3 + 32);
      __int128 v12 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v12;
      *(void *)(a1 + 32) = v11;
    }

    else
    {
      __int128 v23 = *(_OWORD *)a1;
      __int128 v24 = *(_OWORD *)(a1 + 16);
      uint64_t v25 = *(void *)(a1 + 32);
      uint64_t v26 = *(void *)(a2 + 32);
      __int128 v27 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v27;
      *(void *)(a1 + 32) = v26;
      *(void *)(a2 + 32) = v25;
      *(_OWORD *)a2 = v23;
      *(_OWORD *)(a2 + 16) = v24;
      BOOL result = KickBoundarySample::operator<(a3, a2);
      if (!result) {
        return result;
      }
      __int128 v8 = *(_OWORD *)a2;
      __int128 v9 = *(_OWORD *)(a2 + 16);
      uint64_t v10 = *(void *)(a2 + 32);
      uint64_t v28 = *(void *)(a3 + 32);
      __int128 v29 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v29;
      *(void *)(a2 + 32) = v28;
    }

    *(void *)(a3 + 32) = v10;
    *(_OWORD *)a3 = v8;
    *(_OWORD *)(a3 + 16) = v9;
  }

  else if (result)
  {
    __int128 v13 = *(_OWORD *)a2;
    __int128 v14 = *(_OWORD *)(a2 + 16);
    uint64_t v15 = *(void *)(a2 + 32);
    uint64_t v16 = *(void *)(a3 + 32);
    __int128 v17 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 16) = v17;
    *(void *)(a2 + 32) = v16;
    *(void *)(a3 + 32) = v15;
    *(_OWORD *)a3 = v13;
    *(_OWORD *)(a3 + 16) = v14;
    BOOL result = KickBoundarySample::operator<(a2, a1);
    if (result)
    {
      __int128 v18 = *(_OWORD *)a1;
      __int128 v19 = *(_OWORD *)(a1 + 16);
      uint64_t v20 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a2 + 32);
      __int128 v22 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v22;
      *(void *)(a1 + 32) = v21;
      *(void *)(a2 + 32) = v20;
      *(_OWORD *)a2 = v18;
      *(_OWORD *)(a2 + 16) = v19;
    }
  }

  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (KickBoundarySample::operator<(a4, a3))
  {
    __int128 v9 = *(_OWORD *)a3;
    __int128 v10 = *(_OWORD *)(a3 + 16);
    uint64_t v11 = *(void *)(a3 + 32);
    uint64_t v12 = *(void *)(a4 + 32);
    __int128 v13 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v13;
    *(void *)(a3 + 32) = v12;
    *(void *)(a4 + 32) = v11;
    *(_OWORD *)a4 = v9;
    *(_OWORD *)(a4 + 16) = v10;
    if (KickBoundarySample::operator<(a3, a2))
    {
      __n128 v14 = *(__n128 *)a2;
      __int128 v15 = *(_OWORD *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 32);
      uint64_t v17 = *(void *)(a3 + 32);
      __int128 v18 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v18;
      *(void *)(a2 + 32) = v17;
      *(void *)(a3 + 32) = v16;
      *(__n128 *)a3 = v14;
      *(_OWORD *)(a3 + 16) = v15;
      if (KickBoundarySample::operator<(a2, a1))
      {
        __n128 result = *(__n128 *)a1;
        __int128 v19 = *(_OWORD *)(a1 + 16);
        uint64_t v20 = *(void *)(a1 + 32);
        uint64_t v21 = *(void *)(a2 + 32);
        __int128 v22 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v22;
        *(void *)(a1 + 32) = v21;
        *(void *)(a2 + 32) = v20;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v19;
      }
    }
  }

  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (KickBoundarySample::operator<(a5, a4))
  {
    __int128 v11 = *(_OWORD *)a4;
    __int128 v12 = *(_OWORD *)(a4 + 16);
    uint64_t v13 = *(void *)(a4 + 32);
    uint64_t v14 = *(void *)(a5 + 32);
    __int128 v15 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v15;
    *(void *)(a4 + 32) = v14;
    *(void *)(a5 + 32) = v13;
    *(_OWORD *)a5 = v11;
    *(_OWORD *)(a5 + 16) = v12;
    if (KickBoundarySample::operator<(a4, a3))
    {
      __int128 v16 = *(_OWORD *)a3;
      __int128 v17 = *(_OWORD *)(a3 + 16);
      uint64_t v18 = *(void *)(a3 + 32);
      uint64_t v19 = *(void *)(a4 + 32);
      __int128 v20 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v20;
      *(void *)(a3 + 32) = v19;
      *(void *)(a4 + 32) = v18;
      *(_OWORD *)a4 = v16;
      *(_OWORD *)(a4 + 16) = v17;
      if (KickBoundarySample::operator<(a3, a2))
      {
        __n128 v21 = *(__n128 *)a2;
        __int128 v22 = *(_OWORD *)(a2 + 16);
        uint64_t v23 = *(void *)(a2 + 32);
        uint64_t v24 = *(void *)(a3 + 32);
        __int128 v25 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v25;
        *(void *)(a2 + 32) = v24;
        *(void *)(a3 + 32) = v23;
        *(__n128 *)a3 = v21;
        *(_OWORD *)(a3 + 16) = v22;
        if (KickBoundarySample::operator<(a2, a1))
        {
          __n128 result = *(__n128 *)a1;
          __int128 v26 = *(_OWORD *)(a1 + 16);
          uint64_t v27 = *(void *)(a1 + 32);
          uint64_t v28 = *(void *)(a2 + 32);
          __int128 v29 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v29;
          *(void *)(a1 + 32) = v28;
          *(void *)(a2 + 32) = v27;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v26;
        }
      }
    }
  }

  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>( uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = a2 - 40;
      if (!KickBoundarySample::operator<(a2 - 40, a1)) {
        return 1LL;
      }
      __int128 v7 = *(_OWORD *)a1;
      __int128 v8 = *(_OWORD *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(v6 + 32);
      __int128 v11 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(_OWORD *)(a1 + 16) = v11;
      *(void *)(a1 + 32) = v10;
      *(void *)(v6 + 32) = v9;
      BOOL result = 1LL;
      *(_OWORD *)uint64_t v6 = v7;
      *(_OWORD *)(v6 + 16) = v8;
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>( a1,  a1 + 40,  a2 - 40);
      return 1LL;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>( a1,  a1 + 40,  a1 + 80,  a2 - 40);
      return 1LL;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>( a1,  a1 + 40,  a1 + 80,  a1 + 120,  a2 - 40);
      return 1LL;
    default:
      uint64_t v12 = a1 + 80;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>( a1,  a1 + 40,  a1 + 80);
      uint64_t v13 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1LL;
      }
      uint64_t v14 = 0LL;
      int v15 = 0;
      break;
  }

  while (1)
  {
    if (KickBoundarySample::operator<(v13, v12))
    {
      __int128 v16 = *(_OWORD *)(v13 + 16);
      __int128 v22 = *(_OWORD *)v13;
      __int128 v23 = v16;
      uint64_t v24 = *(void *)(v13 + 32);
      uint64_t v17 = v14;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        __int128 v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(void *)(v18 + 152) = *(void *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40LL;
        if (!KickBoundarySample::operator<((uint64_t)&v22, v18 + 40))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }

      uint64_t v20 = a1;
LABEL_12:
      __int128 v21 = v23;
      *(_OWORD *)uint64_t v20 = v22;
      *(_OWORD *)(v20 + 16) = v21;
      *(void *)(v20 + 32) = v24;
      if (++v15 == 8) {
        return v13 + 40 == a2;
      }
    }

    uint64_t v12 = v13;
    v14 += 40LL;
    v13 += 40LL;
    if (v13 == a2) {
      return 1LL;
    }
  }

void std::vector<std::array<std::vector<std::vector<unsigned long long>>,3ul>>::__destroy_vector::operator()[abi:nn180100]( void ***a1)
{
  v1 = *a1;
  unsigned int v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4;
        v4 -= 72;
        for (uint64_t i = -24LL; i != -96; i -= 24LL)
        {
          __int128 v8 = (void **)&v6[i];
          std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100](&v8);
        }
      }

      while (v4 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void GRCCurrentFrameStream::GRCCurrentFrameStream(GRCCurrentFrameStream *this)
{
  *((void *)this + 4) = 0LL;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 1065353216;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 1065353216;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *(_OWORD *)((char *)this + 350) = 0u;
  unsigned int v2 = objc_autoreleasePoolPush();
  uint64_t v4 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary, v3);
  unint64_t v5 = *(void **)this;
  *(void *)this = v4;

  objc_autoreleasePoolPop(v2);
}

void sub_185A00(_Unwind_Exception *a1)
{
  __int128 v8 = *(void **)(v1 + 256);
  if (v8)
  {
    *(void *)(v1 + 264) = v8;
    operator delete(v8);
  }

  uint64_t v9 = *(void **)(v1 + 232);
  if (v9)
  {
    *(void *)(v1 + 240) = v9;
    operator delete(v9);
  }

  if (*v6) {
    operator delete(*v6);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v5);
  std::__hash_table<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>>>::~__hash_table(v4);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v1 + 8);

  _Unwind_Resume(a1);
}

void std::unique_ptr<GRCSplitBlitTimeData>::reset[abi:nn180100](id **a1, id *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {

    operator delete(v2);
  }

void *MTLGRCStreamingSampleHelper::MTLGRCStreamingSampleHelper(void *a1, void *a2, int a3)
{
  id v37 = a2;
  uint64_t v5 = (char *)operator new(0x90uLL);
  id v6 = v37;
  *(void *)uint64_t v5 = 0LL;
  __int128 v7 = (GRCCurrentFrameStream *)operator new(0x170uLL);
  GRCCurrentFrameStream::GRCCurrentFrameStream(v7);
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  __int128 v8 = v5 + 80;
  *((void *)v5 + 1) = v7;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  id v9 = objc_retainBlock(v6);
  *((void *)v5 + 15) = 0LL;
  *((void *)v5 + 16) = 0LL;
  *((void *)v5 + 14) = v9;
  *((_DWORD *)v5 + 34) = a3;
  v5[140] = 0;
  uint64_t v10 = objc_autoreleasePoolPush();
  __int128 v11 = objc_alloc_init(&OBJC_CLASS___NSOperationQueue);
  uint64_t v12 = (void *)*((void *)v5 + 6);
  *((void *)v5 + 6) = v11;

  objc_msgSend(*((id *)v5 + 6), "setName:", @"gputools.MTLShaderProfiler.parallelQueue", v5 + 24, v37);
  uint64_t v14 = objc_opt_new(&OBJC_CLASS___NSOperation, v13);
  int v15 = (void *)*((void *)v5 + 7);
  *((void *)v5 + 7) = v14;

  uint64_t v17 = objc_opt_new(&OBJC_CLASS___NSOperation, v16);
  uint64_t v18 = (void *)*((void *)v5 + 8);
  *((void *)v5 + 8) = v17;

  uint64_t v20 = objc_opt_new(&OBJC_CLASS___NSOperation, v19);
  __int128 v21 = (void *)*((void *)v5 + 9);
  *((void *)v5 + 9) = v20;

  uint64_t v23 = objc_opt_new(&OBJC_CLASS___NSOperation, v22);
  uint64_t v24 = (void *)*((void *)v5 + 10);
  *((void *)v5 + 10) = v23;

  uint64_t v26 = objc_opt_new(&OBJC_CLASS___NSOperation, v25);
  uint64_t v27 = (void *)*((void *)v5 + 16);
  *((void *)v5 + 16) = v26;

  int v29 = *((_DWORD *)v5 + 34);
  if (v29 == 2) {
    goto LABEL_5;
  }
  if (!v29)
  {
    [*((id *)v5 + 7) addDependency:*((void *)v5 + 10)];
    [*((id *)v5 + 7) addDependency:*((void *)v5 + 8)];
    __int128 v8 = v5 + 72;
LABEL_5:
    [*((id *)v5 + 7) addDependency:*v8];
    goto LABEL_6;
  }

  __int128 v8 = v5 + 72;
  if (a3 == 1) {
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v30 = objc_opt_new(&OBJC_CLASS___NSMutableArray, v28);
  __int128 v31 = (void *)*((void *)v5 + 11);
  *((void *)v5 + 11) = v30;

  uint64_t v32 = objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithCapacity:](&OBJC_CLASS___NSMutableSet, "setWithCapacity:", 128LL));
  __int128 v33 = *(void **)v5;
  *(void *)uint64_t v5 = v32;

  dispatch_semaphore_t v34 = dispatch_semaphore_create(1LL);
  BOOL v35 = (void *)*((void *)v5 + 15);
  *((void *)v5 + 15) = v34;

  objc_autoreleasePoolPop(v10);
  *a1 = v5;

  return a1;
}

void sub_185CF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  operator delete(v10);
  _Unwind_Resume(a1);
}

void MTLGRCStreamingSampleHelperImpl::ProcessStreamedData( MTLGRCStreamingSampleHelperImpl *this, NSDictionary *a2, NSDictionary *a3)
{
  uint64_t v413 = a2;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 140);
  if ((v4 & 1) != 0) {
    goto LABEL_334;
  }
  v414 = this;
  os_signpost_id_t v5 = os_signpost_id_generate((os_log_t)g_signpostLog);
  id v6 = g_signpostLog;
  __int128 v7 = (os_log_s *)v6;
  spid = (void *)v5;
  unint64_t v410 = v5 - 1;
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( &dword_0,  v7,  OS_SIGNPOST_INTERVAL_BEGIN,  v5,  "ShaderProfiler-ProcessStreamedDataPayload",  (const char *)&unk_3189BB,  buf,  2u);
  }

  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v413,  "objectForKeyedSubscript:",  @"Post Processing Frame Marker"));
  BOOL v9 = v8 == 0LL;

  if (!v9)
  {
    *(_BYTE *)(*((void *)v414 + 1) + 364LL) = 1;
    uint64_t v10 = g_signpostLog;
    __int128 v11 = (os_log_s *)v10;
    if (v410 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v10))
    {
      int v12 = *(_DWORD *)(*((void *)v414 + 1) + 360LL);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v12;
      uint64_t v13 = "bPostProcessingMarkerReceived: %u";
LABEL_236:
      uint64_t v151 = v11;
      os_signpost_id_t v152 = (os_signpost_id_t)spid;
      uint32_t v153 = 8;
      goto LABEL_237;
    }

    goto LABEL_238;
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v413, "objectForKeyedSubscript:", @"profileCounters"));
  if (v14)
  {
    BOOL v15 = *((void *)v414 + 4) == 0LL;

    if (v15)
    {
      id v148 = -[NSDictionary copy](v413, "copy");
      unint64_t v149 = (void *)*((void *)v414 + 4);
      *((void *)v414 + 4) = v148;

      unint64_t v150 = g_signpostLog;
      __int128 v11 = (os_log_s *)v150;
      if (v410 >= 0xFFFFFFFFFFFFFFFELL || !os_signpost_enabled((os_log_t)v150)) {
        goto LABEL_238;
      }
      *(_WORD *)buf = 0;
      uint64_t v13 = "profileCounters";
      goto LABEL_163;
    }
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v413, "objectForKeyedSubscript:", @"Frame Index"));
  BOOL v17 = v16 == 0LL;

  if (!v17)
  {
    uint64_t v18 = *((void *)v414 + 1);
    uint64_t v19 = v413;
    unsigned int context = v19;
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v19,  "objectForKeyedSubscript:",  @"Program Address Buffer"));
    id v21 = [v20 mutableCopy];
    uint64_t v22 = *(void **)(v18 + 304);
    *(void *)(v18 + 304) = v21;

    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v19,  "objectForKeyedSubscript:",  @"Program Address Mappings"));
    id v24 = [v23 mutableCopy];
    uint64_t v25 = *(void **)(v18 + 312);
    *(void *)(v18 + 312) = v24;

    uint64_t v26 = objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v19,  "objectForKeyedSubscript:",  @"Frame Consistent Perf Info"));
    uint64_t v27 = *(void **)(v18 + 320);
    *(void *)(v18 + 320) = v26;

    uint64_t v28 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v19, "objectForKeyedSubscript:", @"Restore Timestamps"));
    int v29 = *(void **)(v18 + 328);
    *(void *)(v18 + 328) = v28;

    uint64_t v30 = objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v19,  "objectForKeyedSubscript:",  @"Command Buffer Timestamps"));
    __int128 v31 = *(void **)(v18 + 336);
    *(void *)(v18 + 336) = v30;

    uint64_t v32 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v19, "objectForKeyedSubscript:", @"PState Info Data"));
    __int128 v33 = *(void **)(v18 + 344);
    *(void *)(v18 + 344) = v32;

    dispatch_semaphore_t v34 = *(void **)(v18 + 320);
    if (!v34 || !*(void *)(v18 + 344))
    {
LABEL_198:
      __pb = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v19,  "objectForKeyedSubscript:",  @"TraceId to BatchId"));
      if (__pb)
      {
        uint64_t v185 = objc_opt_class(&OBJC_CLASS___NSDictionary, v184);
        uint64_t v187 = objc_opt_class(&OBJC_CLASS___NSNumber, v186);
        id v189 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v185,  v187,  objc_opt_class(&OBJC_CLASS___NSNull, v188),  0LL);
        id v190 = (void *)objc_claimAutoreleasedReturnValue(v189);
        *(void *)&__int128 v434 = 0LL;
        uint64_t v191 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v190,  __pb,  &v434));
        id v192 = (id)v434;

        if (v191)
        {
          *(void *)buf = _NSConcreteStackBlock;
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&__int128 v451 = ___ZN21GRCCurrentFrameStream30PopulateProgramAddressDataInfoEP12NSDictionary_block_invoke;
          *((void *)&v451 + 1) = &__block_descriptor_40_e35_v32__0__NSNumber_8__NSNumber_16_B24l;
          *(void *)&__int128 v452 = v18;
          [v191 enumerateKeysAndObjectsUsingBlock:buf];
        }
      }

      uint64_t v194 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v19,  "objectForKeyedSubscript:",  @"TraceId to Coalesced BatchId"));
      if (v194)
      {
        uint64_t v195 = objc_opt_class(&OBJC_CLASS___NSDictionary, v193);
        uint64_t v197 = objc_opt_class(&OBJC_CLASS___NSMutableDictionary, v196);
        uint64_t v199 = objc_opt_class(&OBJC_CLASS___NSArray, v198);
        uint64_t v201 = objc_opt_class(&OBJC_CLASS___NSMutableArray, v200);
        uint64_t v203 = objc_opt_class(&OBJC_CLASS___NSNumber, v202);
        uint64_t v205 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v195,  v197,  v199,  v201,  v203,  objc_opt_class(&OBJC_CLASS___NSNull, v204),  0LL);
        uint64_t v206 = (void *)objc_claimAutoreleasedReturnValue(v205);
        *(void *)&v448[0] = 0LL;
        id v207 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v206,  v194,  v448));
        id v208 = *(id *)&v448[0];

        *(void *)&__int128 v440 = _NSConcreteStackBlock;
        *((void *)&v440 + 1) = 3221225472LL;
        *(void *)&__int128 v441 = ___ZN21GRCCurrentFrameStream30PopulateProgramAddressDataInfoEP12NSDictionary_block_invoke_2;
        *((void *)&v441 + 1) = &__block_descriptor_40_e34_v32__0__NSNumber_8__NSArray_16_B24l;
        *(void *)&__int128 v442 = v18;
        [v207 enumerateKeysAndObjectsUsingBlock:&v440];
      }

      int v209 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v19,  "objectForKeyedSubscript:",  @"Source Sample Marker"));
      *(void *)(*((void *)v414 + 1) + 352) = [v209 unsignedLongLongValue];

      v210 = v19;
      uint64_t v211 = *((void *)v414 + 1);
      id v212 = v210;
      char v213 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v212,  "objectForKeyedSubscript:",  @"TraceId to SampleIndex"));
      if (v213)
      {
        __pc = v213;
        uint64_t v215 = objc_opt_class(&OBJC_CLASS___NSDictionary, v214);
        uint64_t v217 = objc_opt_class(&OBJC_CLASS___NSArray, v216);
        uint64_t v219 = objc_opt_class(&OBJC_CLASS___NSNumber, v218);
        unint64_t v221 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v215,  v217,  v219,  objc_opt_class(&OBJC_CLASS___NSNull, v220),  0LL);
        unsigned int v222 = (void *)objc_claimAutoreleasedReturnValue(v221);
        *(void *)&v448[0] = 0LL;
        uint64_t v223 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v222,  __pc,  v448));
        id v400 = *(id *)&v448[0];

        id contexta = (id)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v212,  "objectForKeyedSubscript:",  @"Frame Encoder Time Data"));
        if ([v223 count] || objc_msgSend(contexta, "length"))
        {
          unint64_t v224 = (unint64_t)[contexta length];
          if (v224)
          {
            uint64_t v225 = objc_autoreleasePoolPush();
            if (![*(id *)v211 count])
            {
              unint64_t v227 = (void *)objc_opt_new(&OBJC_CLASS___NSMutableDictionary, v226);
              [*(id *)v211 setObject:v227 forKeyedSubscript:&off_5A0BF8];
            }

            objc_autoreleasePoolPop(v225);
          }

          if ((unint64_t)[v223 count] | v224)
          {
            if (v224) {
              id v228 = [contexta bytes];
            }
            else {
              id v228 = 0LL;
            }
            unint64_t v229 = (unint64_t)[contexta length] >> 3;
            *(void *)buf = 0LL;
            *(void *)&buf[8] = buf;
            *((void *)&v451 + 1) = __Block_byref_object_copy__7447;
            *(void *)&__int128 v452 = __Block_byref_object_dispose__7448;
            *(void *)&__int128 v451 = 0x4812000000LL;
            *((void *)&v452 + 1) = "";
            __int128 v453 = 0uLL;
            *(void *)&__int128 v454 = 0LL;
            std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>::reserve( (void **)&v453,  v229);
            unint64_t v230 = *(void *)(v211 + 96);
            if (v230) {
              float v231 = (float)*(unint64_t *)(v211 + 112) / (float)v230;
            }
            else {
              float v231 = 0.0;
            }
            float v232 = fmaxf(v231, 0.3);
            *(float *)(v211 + 120) = v232;
            std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( v211 + 88,  vcvtps_u32_f32((float)v229 / v232));
            *(void *)&__int128 v434 = _NSConcreteStackBlock;
            *((void *)&v434 + 1) = 3221225472LL;
            *(void *)&__int128 v435 = ___ZN21GRCCurrentFrameStream23AddFrameEncoderTimeDataEP12NSDictionary_block_invoke;
            *((void *)&v435 + 1) = &unk_58FB30;
            BOOL v439 = v224 != 0;
            id v438 = v228;
            uint64_t v437 = v211;
            v436 = buf;
            [v223 enumerateKeysAndObjectsUsingBlock:&v434];
            if (v224)
            {
              uint64_t v233 = *(void *)(*(void *)&buf[8] + 48LL);
              unint64_t v234 = *(char **)(*(void *)&buf[8] + 56LL);
              unint64_t v235 = 126 - 2 * __clz((uint64_t)&v234[-v233] >> 5);
              else {
                uint64_t v236 = v235;
              }
              std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,false>( v233,  v234,  v236,  1);
              uint64_t v237 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableData dataWithCapacity:]( &OBJC_CLASS___NSMutableData,  "dataWithCapacity:",  2LL * (*(void *)(*(void *)&buf[8] + 56LL) - *(void *)(*(void *)&buf[8] + 48LL))));
              int64x2_t v238 = *(void **)(*(void *)&buf[8] + 48LL);
              for (uint64_t i = *(void **)(*(void *)&buf[8] + 56LL); v238 != i; v238 += 4)
              {
                *(void *)&__int128 v440 = *(void *)(v211 + 352);
                *((void *)&v440 + 1) = *v238;
                *(void *)&__int128 v441 = 0LL;
                *((void *)&v441 + 1) = v238[2];
                *(void *)&__int128 v442 = v238[1];
                *((void *)&v442 + 1) = v238[3];
                __int128 v443 = 0uLL;
                [v237 appendBytes:&v440 length:64];
              }

              for (unint64_t j = 0; j < (unint64_t)[*(id *)v211 count]; ++j)
              {
                id v241 = *(id *)v211;
                v242 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  j));
                v243 = (void *)objc_claimAutoreleasedReturnValue([v241 objectForKeyedSubscript:v242]);
                uint64_t v244 = (void *)objc_claimAutoreleasedReturnValue([v243 objectForKeyedSubscript:@"EncoderTime"]);
                BOOL v245 = v244 == 0LL;

                if (v245)
                {
                  uint64_t v247 = (void *)objc_opt_new(&OBJC_CLASS___NSMutableArray, v246);
                  id v248 = *(id *)v211;
                  uint64_t v249 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  j));
                  uint64_t v250 = (void *)objc_claimAutoreleasedReturnValue([v248 objectForKeyedSubscript:v249]);
                  [v250 setObject:v247 forKeyedSubscript:@"EncoderTime"];
                }

                id v251 = *(id *)v211;
                uint64_t v252 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  j));
                unint64_t v253 = (void *)objc_claimAutoreleasedReturnValue([v251 objectForKeyedSubscript:v252]);
                uint64_t v254 = (void *)objc_claimAutoreleasedReturnValue([v253 objectForKeyedSubscript:@"EncoderTime"]);
                [v254 addObject:v237];
              }
            }

            _Block_object_dispose(buf, 8);
            if ((void)v453)
            {
              *((void *)&v453 + 1) = v453;
              operator delete((void *)v453);
            }
          }
        }

        char v213 = __pc;
      }

      unint64_t v255 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v212, "objectForKeyedSubscript:", @"Frame Index"));
      *(_DWORD *)(*((void *)v414 + 1) + 360) = [v255 unsignedIntValue];

      *(_BYTE *)(*((void *)v414 + 1) + 365LL) = 1;
      uint64_t v256 = g_signpostLog;
      __int128 v11 = (os_log_s *)v256;
      if (v410 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled((os_log_t)v256))
      {
        int v257 = *(_DWORD *)(*((void *)v414 + 1) + 360LL);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v257;
        uint64_t v13 = "Frame Index: %u";
        goto LABEL_236;
      }

      goto LABEL_238;
    }

    BOOL v35 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKeyedSubscript:@"consistent"]);
    __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v18 + 320) objectForKeyedSubscript:@"mapping"]);
    if (!v35
      || ([v35 BOOLValue] & 1) != 0
      || ![*(id *)(v18 + 344) count]
      || !v36)
    {
LABEL_197:

      goto LABEL_198;
    }

    v386 = v36;
    unsigned int v384 = [v36 unsignedIntValue];
    id v394 = objc_claimAutoreleasedReturnValue([*(id *)(v18 + 344) objectForKeyedSubscript:@"GPU Stats"]);
    id v37 = [v394 bytes];
    id v387 = v394;
    __int128 v38 = (char *)[v387 bytes];
    unint64_t v39 = &v38[24 * ((unint64_t)[v387 length] / 0x18)];
    int64_t v40 = v39 - v37;
    if (v39 == v37)
    {

LABEL_196:
      id v182 = [*(id *)(v18 + 320) mutableCopy];
      [v182 setObject:&__kCFBooleanTrue forKeyedSubscript:@"consistent"];
      id v183 = *(void **)(v18 + 320);
      *(void *)(v18 + 320) = v182;

      __int128 v36 = v386;
      goto LABEL_197;
    }

    unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * (v40 >> 3);
    if (v41 >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    __int128 v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>>(v41);
    uint64_t v399 = v18;
    memmove(v42, v37, v40);
    uint64_t v43 = 0LL;
    __int128 v44 = &v42[24 * v41];
    __int128 v434 = 0u;
    __int128 v435 = 0u;
    LODWORD(v436) = 1065353216;
    double v388 = v42;
    v385 = v35;
    do
    {
      __int128 v45 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned int>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>( (uint64_t)&v434,  *(void *)&v42[v43 + 8],  &v42[v43 + 8]);
      ++*((_DWORD *)v45 + 6);
      v43 += 24LL;
    }

    while (24 * v41 != v43);
    __int128 v46 = 0LL;
    __int128 v47 = 0LL;
    BOOL v48 = 0LL;
    __int128 v49 = 0LL;
    unint64_t v50 = 0LL;
    v449[0] = -1LL;
    v449[1] = -1LL;
    memset(v448, 0, sizeof(v448));
    unint64_t v51 = (v44 - v42) / 24;
    __int128 v52 = v42 + 40;
    id v397 = v42 + 40;
    do
    {
      __int128 v53 = &v42[24 * v50];
      unsigned int v54 = *(_DWORD *)v53;
      uint64_t v55 = (*(_DWORD *)v53 >> 8) & 0x7F;
      if (v55 < 4)
      {
        uint64_t v57 = *((void *)v53 + 1);
        uint64_t v58 = *(void *)&v42[24 * v50 + 16];
        unint64_t v56 = v50 + 1;
        if (v50 + 1 < v51)
        {
          BOOL v59 = &v52[24 * v50];
          while (*((void *)v59 - 1) == v57 && ((*((_DWORD *)v59 - 4) >> 8) & 0x7F) == (_DWORD)v55)
          {
            uint64_t v60 = *(void *)v59;
            v59 += 24;
            v58 += v60;
            if (v51 == ++v56)
            {
              unint64_t v56 = v51;
              break;
            }
          }
        }

        unint64_t v61 = *((void *)v448 + v55);
        uint64_t v62 = v57 - v58;
        if (v57 - v58 <= v61) {
          unint64_t v63 = *((void *)v448 + v55);
        }
        else {
          unint64_t v63 = v57 - v58;
        }
        int v64 = *((_DWORD *)v449 + v55);
        if (v50 < v56)
        {
          while (v64 != (*(_DWORD *)v53 >> 15))
          {
            ++v50;
            v53 += 24;
            if (v56 == v50) {
              goto LABEL_41;
            }
          }

          uint64_t v65 = *(void *)&v42[24 * v50 + 16];
          unint64_t v66 = v65 + v62;
          unint64_t v67 = v65 + v61;
          if (v67 >= v66) {
            unint64_t v63 = v66;
          }
          else {
            unint64_t v63 = v67;
          }
        }

LABEL_163:
    uint64_t v151 = v11;
    os_signpost_id_t v152 = v5;
    uint32_t v153 = 2;
LABEL_237:
    _os_signpost_emit_with_name_impl( &dword_0,  v151,  OS_SIGNPOST_INTERVAL_END,  v152,  "ShaderProfiler-ProcessStreamedDataPayload",  v13,  buf,  v153);
    goto LABEL_238;
  }

  GRCCurrentFrameStream::AddGRCSampledData(*((id **)v414 + 1), v413);
  __int128 v156 = g_signpostLog;
  __int128 v11 = (os_log_s *)v156;
  if (v410 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v156))
  {
    int v157 = *(_DWORD *)(*((void *)v414 + 1) + 360LL);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v157;
    uint64_t v13 = "Frame Index, ShaderProfilerData: %u";
    goto LABEL_236;
  }

LABEL_238:
  v259 = (uint64_t *)((char *)v414 + 8);
  uint64_t v258 = *((void *)v414 + 1);
  if (*(_BYTE *)(v258 + 364) && *(_BYTE *)(v258 + 365))
  {
    id contextb = objc_autoreleasePoolPush();
    v260 = g_signpostLog;
    v261 = (os_log_s *)v260;
    if (v410 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled((os_log_t)v260))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( &dword_0,  v261,  OS_SIGNPOST_INTERVAL_BEGIN,  (os_signpost_id_t)spid,  "ShaderProfiler-ProcessStreamedDataPostProcessing",  (const char *)&unk_3189BB,  buf,  2u);
    }

    uint64_t v262 = (void *)*((void *)v414 + 12);
    if (v262)
    {
      id v263 = v262;
    }

    else
    {
      unint64_t v264 = (void *)objc_claimAutoreleasedReturnValue([*((id *)v414 + 4) objectForKeyedSubscript:@"limiter sample counters"]);
      uint64_t v265 = (void *)objc_claimAutoreleasedReturnValue([*((id *)v414 + 4) objectForKeyedSubscript:@"DerivedCounterDictionary"]);
      unint64_t v266 = (void *)objc_claimAutoreleasedReturnValue([v265 objectForKeyedSubscript:@"DerivedCounters"]);

      uint64_t v267 = objc_claimAutoreleasedReturnValue([v266 allKeys]);
      unint64_t v268 = (void *)*((void *)v414 + 13);
      *((void *)v414 + 13) = v267;

      uint64_t v269 = (char *)[v264 count];
      unint64_t v270 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
      uint64_t v271 = v269 - 1;
      if (v269 != (_BYTE *)&dword_0 + 1)
      {
        unint64_t v272 = 0LL;
        do
        {
          unint64_t v273 = (void *)objc_claimAutoreleasedReturnValue([v264 objectAtIndexedSubscript:v272]);
          v274 = (void *)objc_claimAutoreleasedReturnValue([v264 objectAtIndexedSubscript:v272]);
          [v270 appendFormat:@"var %@ = 0;\nvar %@_norm = 0;\n", v273, v274];

          ++v272;
        }

        while (v271 != v272);
      }

      [v270 appendString:@"var core_count = num_cores;\n\n"];
      [v270 appendString:@"var MTLStat_nSec = 0;\n\n"];
      [v270 appendString:@"var _DerivedCounterResult = [];\n\n"];
      objc_msgSend( v270,  "appendFormat:",  @"function _SetAndEvaluateRawCounterValues(numSamples, gpuCyclesCounterIndex, ringBufferIndex) {\n");
      [v270 appendString:@"\tnum_cores = _CoreCount[ringBufferIndex];\n"];
      [v270 appendString:@"\t_DerivedCounterResult = [];\n"];
      [v270 appendString:@"\tfor (var sampleIndex = 0; sampleIndex < numSamples; ++sampleIndex) {\n"];
      objc_msgSend( v270,  "appendFormat:",  @"\t\tvar sampleStartIndex = sampleIndex * %lu;\n",
        [v264 count]);
      [v270 appendFormat:@"\t\tvar gpuCycles = _RawCounterValues[gpuCyclesCounterIndex + sampleStartIndex] / num_cores;\n"];
      objc_msgSend( v270,  "appendFormat:",  @"\t\tMTLStat_nSec = (_RawTimestampDelta[sampleIndex]) * %u / %u;\n",
        125LL,
        3LL);
      if (v271)
      {
        for (m = 0LL; m != v271; ++m)
        {
          v276 = (void *)objc_claimAutoreleasedReturnValue([v264 objectAtIndexedSubscript:m]);
          [v270 appendFormat:@"\t\t%@ = _RawCounterValues[%lu + sampleStartIndex];\n", v276, m];

          uint64_t v277 = (void *)objc_claimAutoreleasedReturnValue([v264 objectAtIndexedSubscript:m]);
          objc_msgSend( v270,  "appendFormat:",  @"\t\t%@_norm = 100.0 * (_RawCounterValues[%lu + sampleStartIndex] / gpuCycles);\n",
            v277,
            m);
        }
      }

      __int128 v442 = 0u;
      __int128 v443 = 0u;
      __int128 v440 = 0u;
      __int128 v441 = 0u;
      id v278 = *((id *)v414 + 13);
      id v279 = [v278 countByEnumeratingWithState:&v440 objects:buf count:16];
      if (v279)
      {
        uint64_t v280 = *(void *)v441;
        do
        {
          for (uint64_t n = 0LL; n != v279; uint64_t n = (char *)n + 1)
          {
            if (*(void *)v441 != v280) {
              objc_enumerationMutation(v278);
            }
            id v282 = *(id *)(*((void *)&v440 + 1) + 8LL * (void)n);
            objc_msgSend( v270,  "appendFormat:",  @"\t\ttry { JSValueRef value = %@(); if (!isFinite(value)) { JSValueRef value = 0; } _DerivedCounterResult.push(value); } catch(err) { ErrorLog(err); _DerivedCounterResult.push(0); }\n",
              v282);
          }

          id v279 = [v278 countByEnumeratingWithState:&v440 objects:buf count:16];
        }

        while (v279);
      }

      [v270 appendFormat:@"\t}\n"];
      [v270 appendFormat:@"}\n"];
      v283 = (void *)*((void *)v414 + 12);
      *((void *)v414 + 12) = v270;
      id v284 = v270;

      id v263 = *((id *)v414 + 12);
    }

    uint64_t v285 = *((void *)v414 + 1);
    uint64_t v287 = (void *)*((void *)v414 + 12);
    v286 = (void *)*((void *)v414 + 13);
    uint64_t v288 = (void *)*((void *)v414 + 4);
    id v289 = v287;
    id v290 = v286;
    id v411 = v288;
    objc_storeStrong((id *)(v285 + 288), v287);
    objc_storeStrong((id *)(v285 + 296), v286);
    uint64_t v291 = (id *)(v285 + 280);
    objc_storeStrong((id *)(v285 + 280), v288);
    unint64_t v292 = *(void *)(v285 + 32);
    v293 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v285 + 280) objectForKeyedSubscript:@"DerivedCounterConfigurationVariables"]);
    v294 = (void *)objc_claimAutoreleasedReturnValue([v293 objectForKeyedSubscript:@"core_mask_list"]);
    id v295 = [v294 count];
    else {
      unint64_t v296 = v292;
    }
    *(void *)buf = 0x3FF0000000000000LL;
    std::vector<double>::resize((char **)(v285 + 232), v296, buf);
    if (v294)
    {
      __int128 v442 = 0u;
      __int128 v443 = 0u;
      __int128 v440 = 0u;
      __int128 v441 = 0u;
      id v297 = v294;
      id v298 = [v297 countByEnumeratingWithState:&v440 objects:buf count:16];
      if (v298)
      {
        v393 = v294;
        id v396 = v293;
        id v401 = v289;
        unsigned int v299 = 0;
        unsigned int v300 = 0;
        uint64_t v301 = *(void *)v441;
        do
        {
          for (iuint64_t i = 0LL; ii != v298; iuint64_t i = (char *)ii + 1)
          {
            unsigned int v303 = v300;
            if (*(void *)v441 != v301) {
              objc_enumerationMutation(v297);
            }
            v304.i32[0] = [*(id *)(*((void *)&v440 + 1) + 8 * (void)ii) unsignedIntValue];
            uint8x8_t v305 = (uint8x8_t)vcnt_s8(v304);
            v305.i16[0] = vaddlv_u8(v305);
            unsigned int v306 = v305.i32[0];
            v308 = *(char **)(v285 + 264);
            unint64_t v307 = *(void *)(v285 + 272);
            if ((unint64_t)v308 >= v307)
            {
              id v310 = *(char **)(v285 + 256);
              uint64_t v311 = (v308 - v310) >> 2;
              unint64_t v312 = v311 + 1;
              uint64_t v313 = v307 - (void)v310;
              if (v313 >> 1 > v312) {
                unint64_t v312 = v313 >> 1;
              }
              else {
                unint64_t v314 = v312;
              }
              if (v314)
              {
                unint64_t v314 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v314);
                id v310 = *(char **)(v285 + 256);
                v308 = *(char **)(v285 + 264);
              }

              else
              {
                uint64_t v315 = 0LL;
              }

              id v316 = (unsigned int *)(v314 + 4 * v311);
              *id v316 = v306;
              uint64_t v309 = v316 + 1;
              while (v308 != v310)
              {
                unsigned int v317 = *((_DWORD *)v308 - 1);
                v308 -= 4;
                *--id v316 = v317;
              }

              *(void *)(v285 + 256) = v316;
              *(void *)(v285 + 264) = v309;
              *(void *)(v285 + 272) = v314 + 4 * v315;
              if (v310) {
                operator delete(v310);
              }
            }

            else
            {
              *(_DWORD *)v308 = v305.i32[0];
              uint64_t v309 = v308 + 4;
            }

            *(void *)(v285 + 264) = v309;
            unsigned int v300 = v303 + 1;
            *(double *)(*(void *)(v285 + 232) + 8LL * v303) = (double)v306;
            v299 += v306;
          }

          id v298 = [v297 countByEnumeratingWithState:&v440 objects:buf count:16];
        }

        while (v298);
        double v318 = (double)v299;
        v259 = (uint64_t *)((char *)v414 + 8);
        v294 = v393;
        id v289 = v401;
        v293 = v396;
      }

      else
      {
        double v318 = 0.0;
      }

      uint64_t v291 = (id *)(v285 + 280);
      v319 = *(double **)(v285 + 232);
      id v320 = *(double **)(v285 + 240);
      while (v319 != v320)
      {
        double *v319 = *v319 / v318;
        ++v319;
      }
    }

    if (*(void *)(v285 + 256) == *(void *)(v285 + 264))
    {
      v321 = (void *)objc_claimAutoreleasedReturnValue([v293 objectForKeyedSubscript:@"num_cores"]);
      unsigned int v322 = [v321 unsignedIntValue];
      unsigned int v323 = v322;
      id v325 = *(unsigned int **)(v285 + 264);
      unint64_t v324 = *(void *)(v285 + 272);
      if ((unint64_t)v325 >= v324)
      {
        id v327 = *(unsigned int **)(v285 + 256);
        uint64_t v328 = v325 - v327;
        unint64_t v329 = v328 + 1;
        uint64_t v330 = v324 - (void)v327;
        if (v330 >> 1 > v329) {
          unint64_t v329 = v330 >> 1;
        }
        BOOL v331 = (unint64_t)v330 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v332 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v331) {
          unint64_t v332 = v329;
        }
        if (v332)
        {
          unint64_t v332 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v332);
          id v327 = *(unsigned int **)(v285 + 256);
          id v325 = *(unsigned int **)(v285 + 264);
        }

        else
        {
          uint64_t v333 = 0LL;
        }

        v334 = (unsigned int *)(v332 + 4 * v328);
        unint64_t v335 = v332 + 4 * v333;
        unsigned int *v334 = v323;
        id v326 = v334 + 1;
        while (v325 != v327)
        {
          unsigned int v336 = *--v325;
          *--v334 = v336;
        }

        *(void *)(v285 + 256) = v334;
        *(void *)(v285 + 264) = v326;
        *(void *)(v285 + 272) = v335;
        if (v327) {
          operator delete(v327);
        }
      }

      else
      {
        *id v325 = v322;
        id v326 = v325 + 1;
      }

      *(void *)(v285 + 264) = v326;
    }

    v337 = (void *)objc_claimAutoreleasedReturnValue([*v291 objectForKeyedSubscript:@"limiter sample counters"]);
    v338 = (void *)objc_claimAutoreleasedReturnValue([*v291 objectForKeyedSubscript:@"Counter Info"]);
    id v339 = (void *)(v285 + 208);
    std::vector<BOOL>::resize(v285 + 208, (unint64_t)[v337 count], 1);
    if (v338)
    {
      for (junint64_t j = 0; jj < (unint64_t)[v337 count]; ++jj)
      {
        uint64_t v341 = (void *)objc_claimAutoreleasedReturnValue([v337 objectAtIndexedSubscript:jj]);
        v342 = (void *)objc_claimAutoreleasedReturnValue([v338 objectForKeyedSubscript:v341]);

        if (v342)
        {
          unsigned int v343 = [v342 unsignedIntValue];
          v344 = (uint64_t *)(*v339 + 8 * (jj >> 6));
          uint64_t v345 = 1LL << jj;
          if (v343 != 1)
          {
            uint64_t v346 = *v344 & ~v345;
            goto LABEL_316;
          }
        }

        else
        {
          v344 = (uint64_t *)(*v339 + 8 * (jj >> 6));
          uint64_t v345 = 1LL << jj;
        }

        uint64_t v346 = *v344 | v345;
LABEL_316:
        uint64_t *v344 = v346;
      }
    }

    uint64_t v412 = (uint64_t *)objc_opt_new(&OBJC_CLASS___GRCPerFrameDataClass, v347);
    v348 = (char *)operator new(0x220uLL);
    v349 = (void *)*((void *)v414 + 14);
    unsigned int v350 = [*((id *)v414 + 13) count];
    int v351 = *((_DWORD *)v414 + 34);
    id v352 = v349;
    *(_OWORD *)v348 = 0u;
    *((_OWORD *)v348 + 1) = 0u;
    *((_OWORD *)v348 + 2) = 0u;
    *((void *)v348 + 6) = 0LL;
    *((_DWORD *)v348 + 14) = 1065353216;
    *((_OWORD *)v348 + 4) = 0u;
    *((_OWORD *)v348 + 5) = 0u;
    *((_DWORD *)v348 + 24) = 1065353216;
    *(_OWORD *)(v348 + 104) = 0u;
    *(_OWORD *)(v348 + 120) = 0u;
    *((_DWORD *)v348 + 34) = 1065353216;
    *((_OWORD *)v348 + 9) = 0u;
    *((_OWORD *)v348 + 10) = 0u;
    uint64_t v353 = v348 + 304;
    uint64_t v354 = 184LL;
    *((_DWORD *)v348 + 44) = 1065353216;
    do
    {
      uint64_t v355 = &v348[v354];
      *(_OWORD *)uint64_t v355 = 0uLL;
      *((_OWORD *)v355 + 1) = 0uLL;
      *((_DWORD *)v355 + 8) = 1065353216;
      v354 += 40LL;
    }

    while (v355 + 40 != v353);
    unint64_t v356 = *((void *)v348 + 14);
    if (v356) {
      float v357 = (float)*((unint64_t *)v348 + 16) / (float)v356;
    }
    else {
      float v357 = 0.0;
    }
    float v358 = fmaxf(v357, 0.3);
    *((float *)v348 + 34) = v358;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( (uint64_t)(v348 + 104),  vcvtps_u32_f32(256.0 / v358));
    unint64_t v359 = *((void *)v348 + 4);
    if (v359) {
      float v360 = (float)*((unint64_t *)v348 + 6) / (float)v359;
    }
    else {
      float v360 = 0.0;
    }
    float v361 = fmaxf(v360, 0.3);
    *((float *)v348 + 14) = v361;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( (uint64_t)(v348 + 24),  vcvtps_u32_f32(256.0 / v361));
    unint64_t v362 = *((void *)v348 + 9);
    if (v362) {
      float v363 = (float)*((unint64_t *)v348 + 11) / (float)v362;
    }
    else {
      float v363 = 0.0;
    }
    *((float *)v348 + 24) = fmaxf(v363, 0.3);
    *(_OWORD *)uint64_t v353 = 0u;
    *((_OWORD *)v348 + 20) = 0u;
    *((_OWORD *)v348 + 21) = 0u;
    *((_DWORD *)v348 + 88) = 0;
    *((void *)v348 + 59) = 0LL;
    *(_OWORD *)(v348 + 360) = 0u;
    *(_OWORD *)(v348 + 376) = 0u;
    *(_OWORD *)(v348 + 392) = 0u;
    *(_OWORD *)(v348 + 408) = 0u;
    *(_OWORD *)(v348 + 424) = 0u;
    *(_OWORD *)(v348 + 440) = 0u;
    *(_OWORD *)(v348 + 456) = 0u;
    *((_DWORD *)v348 + 120) = 1065353216;
    *((void *)v348 + 61) = 0LL;
    *((void *)v348 + 62) = 0LL;
    *((void *)v348 + 63) = objc_retainBlock(v352);
    *((void *)v348 + 64) = 0LL;
    *((_DWORD *)v348 + 130) = v350;
    *((_DWORD *)v348 + 131) = 0;
    *((void *)v348 + 66) = 0LL;
    *((_DWORD *)v348 + 134) = v351;
    uint64_t v364 = *((void *)v348 + 61);
    *((void *)v348 + 61) = *v259;
    uint64_t *v259 = v364;
    unint64_t v365 = objc_alloc_init(&OBJC_CLASS___NSOperationQueue);
    v366 = (void *)*((void *)v348 + 62);
    *((void *)v348 + 62) = v365;

    [*((id *)v348 + 62) setName:@"gputools.MTLShaderProfiler.GRCPerFrameDataparallelQueue"];
    unsigned int v367 = std::thread::hardware_concurrency() >> 1;
    if (v367 <= 1) {
      uint64_t v368 = 1LL;
    }
    else {
      uint64_t v368 = v367;
    }
    [*((id *)v348 + 62) setMaxConcurrentOperationCount:v368];

    std::unique_ptr<GRCPerFrameData>::reset[abi:nn180100](v412 + 1, (uint64_t)v348);
    dispatch_semaphore_wait(*((dispatch_semaphore_t *)v414 + 15), 0xFFFFFFFFFFFFFFFFLL);
    [*(id *)v414 addObject:v412];
    dispatch_semaphore_signal(*((dispatch_semaphore_t *)v414 + 15));
    v369 = (GRCCurrentFrameStream *)operator new(0x170uLL);
    GRCCurrentFrameStream::GRCCurrentFrameStream(v369);
    std::unique_ptr<GRCCurrentFrameStream>::reset[abi:nn180100](v259, (uint64_t)v369);
    objc_initWeak((id *)buf, v412);
    v415[0] = _NSConcreteStackBlock;
    v415[1] = 3221225472LL;
    v415[2] = ___ZN31MTLGRCStreamingSampleHelperImpl19ProcessStreamedDataEP12NSDictionaryS1__block_invoke_231;
    v415[3] = &unk_58FAA0;
    v416[1] = v414;
    objc_copyWeak(v416, (id *)buf);
    v416[2] = spid;
    v370 = (void *)objc_claimAutoreleasedReturnValue( +[NSBlockOperation blockOperationWithBlock:]( &OBJC_CLASS___NSBlockOperation,  "blockOperationWithBlock:",  v415));
    unint64_t v371 = v370;
    if (!*((_DWORD *)v414 + 34)) {
      [v370 addDependency:*((void *)v414 + 8)];
    }
    [*((id *)v414 + 9) addDependency:v371];
    [*((id *)v414 + 6) addOperation:v371];
    [*((id *)v414 + 7) addDependency:v371];

    objc_destroyWeak(v416);
    objc_destroyWeak((id *)buf);

    objc_autoreleasePoolPop(contextb);
  }

LABEL_334:
}

void sub_18851C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *__p, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, _Unwind_Exception *exception_objecta, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, void *a44)
{
  _Unwind_Resume(a1);
}

void ___ZN31MTLGRCStreamingSampleHelperImpl19ProcessStreamedDataEP12NSDictionaryS1__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(v2 + 140));
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(v2 + 112) + 16LL))();
    os_signpost_id_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    id v6 = v5;
    if (v5)
    {
      __int128 v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"Kick Time Data"]);
      if (v7) {
        [*(id *)(v2 + 88) setArray:v7];
      }
    }
  }

  __int128 v8 = g_signpostLog;
  BOOL v9 = (os_log_s *)v8;
  os_signpost_id_t v10 = *(void *)(a1 + 40);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v8))
  {
    *(_WORD *)__int128 v11 = 0;
    _os_signpost_emit_with_name_impl( &dword_0,  v9,  OS_SIGNPOST_INTERVAL_END,  v10,  "ShaderProfiler-ProcessStreamedDataPayload",  "usc sampling address data",  v11,  2u);
  }
}

void sub_188B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void GRCCurrentFrameStream::AddGRCSampledData(id *this, NSDictionary *a2)
{
  id v37 = a2;
  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v37, "objectForKeyedSubscript:", @"RingBufferIndex"));
  if (!v3) {
    goto LABEL_46;
  }
  __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v37, "objectForKeyedSubscript:", @"ShaderProfilerData"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v37, "objectForKeyedSubscript:", @"Source"));
  unsigned int context = objc_autoreleasePoolPush();
  os_signpost_id_t v5 = (void *)objc_claimAutoreleasedReturnValue([*this objectForKeyedSubscript:v3]);

  if (!v5)
  {
    __int128 v7 = (void *)objc_opt_new(&OBJC_CLASS___NSMutableDictionary, v6);
    [*this setObject:v7 forKeyedSubscript:v3];
  }

  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*this objectForKeyedSubscript:v3]);
  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v4]);

  if (!v9)
  {
    __int128 v11 = (void *)objc_opt_new(&OBJC_CLASS___NSMutableArray, v10);
    int v12 = (void *)objc_claimAutoreleasedReturnValue([*this objectForKeyedSubscript:v3]);
    [v12 setObject:v11 forKeyedSubscript:v4];
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*this objectForKeyedSubscript:v3]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:v4]);
  unint64_t v15 = (unint64_t)v36;
  [v14 addObject:v36];

  id v16 = [v36 length];
  unsigned int v17 = [v3 unsignedIntValue];
  unsigned int v18 = v17;
  uint64_t v19 = (uint64_t *)(this + 1);
  unint64_t v20 = v17;
  unint64_t v21 = (unint64_t)this[2];
  if (v21)
  {
    uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      unint64_t v15 = v17;
      if (v21 <= v17) {
        unint64_t v15 = v17 % v21;
      }
    }

    else
    {
      unint64_t v15 = ((_DWORD)v21 - 1) & v17;
    }

    uint64_t v23 = *(void ***)(*v19 + 8 * v15);
    if (v23)
    {
      id v24 = *v23;
      if (*v23)
      {
        do
        {
          unint64_t v25 = v24[1];
          if (v25 == v17)
          {
            if (*((_DWORD *)v24 + 4) == v17) {
              goto LABEL_45;
            }
          }

          else
          {
            if (v22.u32[0] > 1uLL)
            {
              if (v25 >= v21) {
                v25 %= v21;
              }
            }

            else
            {
              v25 &= v21 - 1;
            }

            if (v25 != v15) {
              break;
            }
          }

          id v24 = (void *)*v24;
        }

        while (v24);
      }
    }
  }

  id v24 = operator new(0x20uLL);
  *id v24 = 0LL;
  v24[1] = v20;
  *((_DWORD *)v24 + 4) = v18;
  v24[3] = 0LL;
  float v26 = (float)((unint64_t)this[4] + 1);
  float v27 = *((float *)this + 10);
  if (!v21 || (float)(v27 * (float)v21) < v26)
  {
    BOOL v28 = 1LL;
    if (v21 >= 3) {
      BOOL v28 = (v21 & (v21 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v21);
    unint64_t v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30) {
      size_t v31 = v30;
    }
    else {
      size_t v31 = v29;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( (uint64_t)(this + 1),  v31);
    unint64_t v21 = (unint64_t)this[2];
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v21 <= v20) {
        unint64_t v15 = v20 % v21;
      }
      else {
        unint64_t v15 = v20;
      }
    }

    else
    {
      unint64_t v15 = ((_DWORD)v21 - 1) & v20;
    }
  }

  uint64_t v32 = *v19;
  __int128 v33 = *(void **)(*v19 + 8 * v15);
  if (v33)
  {
    *id v24 = *v33;
  }

  else
  {
    *id v24 = this[3];
    this[3] = v24;
    *(void *)(v32 + 8 * v15) = this + 3;
    if (!*v24) {
      goto LABEL_44;
    }
    unint64_t v34 = *(void *)(*v24 + 8LL);
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v34 >= v21) {
        v34 %= v21;
      }
    }

    else
    {
      v34 &= v21 - 1;
    }

    __int128 v33 = (void *)(*v19 + 8 * v34);
  }

  void *v33 = v24;
LABEL_44:
  this[4] = (char *)this[4] + 1;
LABEL_45:
  v24[3] += v16;
  objc_autoreleasePoolPop(context);

LABEL_46:
}

void sub_188F18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void ___ZN31MTLGRCStreamingSampleHelperImpl19ProcessStreamedDataEP12NSDictionaryS1__block_invoke_211( uint64_t a1)
{
  uint64_t v116 = *(void *)(a1 + 40);
  uint64_t v128 = *(void *)(v116 + 16);
  if (!*(void *)v128)
  {
    double v12 = 0.0;
    goto LABEL_151;
  }

  __int128 v117 = (void *)objc_claimAutoreleasedReturnValue([*(id *)v128 objectForKeyedSubscript:@"TraceId to SampleIndex"]);
  if (!v117) {
    goto LABEL_32;
  }
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___NSDictionary, v1);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSArray, v3);
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSNumber, v5);
  __int128 v8 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v2,  v4,  v6,  objc_opt_class(&OBJC_CLASS___NSNull, v7),  0LL);
  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  *(void *)&__int128 v135 = 0LL;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v9,  v117,  &v135));
  id v126 = (id)v135;

  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)v128 objectForKeyedSubscript:@"Frame Encoder Times Data"]);
  double v12 = 0.0;
  if (![v10 count]) {
    goto LABEL_29;
  }
  if ([v11 count]
    && (uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]),
        BOOL v14 = [v13 length] == 0,
        v13,
        !v14))
  {
    unint64_t v15 = 0LL;
    unint64_t v16 = -1LL;
    while (v15 < (unint64_t)[v11 count])
    {
      id v17 = objc_claimAutoreleasedReturnValue([v11 objectAtIndexedSubscript:v15]);
      id v18 = [v17 bytes];

      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v11 objectAtIndexedSubscript:v15]);
      unint64_t v20 = (unint64_t)[v19 length];

      *(void *)buf = 0LL;
      uint64_t v147 = buf;
      uint64_t v148 = 0x4812000000LL;
      unint64_t v149 = __Block_byref_object_copy__7447;
      unint64_t v150 = __Block_byref_object_dispose__7448;
      uint64_t v151 = "";
      uint32_t v153 = 0LL;
      uint64_t v154 = 0LL;
      os_signpost_id_t v152 = 0LL;
      std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>::reserve( &v152,  v20 >> 3);
      unint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v10 objectAtIndexedSubscript:v15]);
      v145[0] = _NSConcreteStackBlock;
      v145[1] = 3221225472LL;
      v145[2] = ___ZN16GRCFrameTimeData26ProcessFrameTimeSampleDataERd_block_invoke;
      v145[3] = &unk_58F9A0;
      v145[4] = buf;
      v145[5] = v18;
      [v21 enumerateKeysAndObjectsUsingBlock:v145];

      uint64_t v22 = *((void *)v147 + 6);
      uint64_t v23 = (char *)*((void *)v147 + 7);
      unint64_t v24 = 126 - 2 * __clz((uint64_t)&v23[-v22] >> 5);
      else {
        uint64_t v25 = v24;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,false>( v22,  v23,  v25,  1);
      float v26 = (uint64_t *)*((void *)v147 + 6);
      float v27 = (uint64_t *)*((void *)v147 + 7);
      if (v26 == v27)
      {
        unint64_t v30 = 0LL;
      }

      else
      {
        int v28 = 0;
        uint64_t v29 = 0LL;
        unint64_t v30 = 0LL;
        do
        {
          if (!v28) {
            uint64_t v29 = *v26;
          }
          if ((v26[2] & 1) != 0) {
            --v28;
          }
          else {
            ++v28;
          }
          if (!v28) {
            unint64_t v30 = v30 - v29 + *v26;
          }
          v26 += 4;
        }

        while (v26 != v27);
      }

      if (v30 < v16) {
        unint64_t v16 = v30;
      }
      _Block_object_dispose(buf, 8);
      if (v152)
      {
        uint32_t v153 = v152;
        operator delete(v152);
      }

      ++v15;
    }

    double v12 = (double)v16;
    char v31 = 1;
  }

  else
  {
LABEL_29:
    char v31 = 0;
  }

  if ((v31 & 1) == 0)
  {
LABEL_32:
    BOOL v118 = (void *)objc_claimAutoreleasedReturnValue([*(id *)v128 objectForKeyedSubscript:@"Frame Time Data"]);
    id v114 = objc_claimAutoreleasedReturnValue( [*(id *)v128 objectForKeyedSubscript:@"Encoder TraceId Data"]);
    uint64_t v32 = (unsigned int *)[v114 bytes];
    unsigned int v33 = [v114 length];
    unint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)v128 objectForKeyedSubscript:@"Sample Marker"]);
    LODWORD(v35) = v33 >> 2;
    *(void *)(v128 + 8) = [v34 unsignedLongLongValue];

    memset(v133, 0, sizeof(v133));
    int v134 = 1050253722;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( (uint64_t)v133,  vcvtps_u32_f32((float)(v33 >> 2) / 0.3));
    if (v33 >= 4)
    {
      else {
        uint64_t v35 = v35;
      }
      do
      {
        unsigned int v36 = *v32++;
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>( (uint64_t)v133,  v36,  v36);
        --v35;
      }

      while (v35);
    }

    __int128 v131 = 0u;
    __int128 v132 = 0u;
    __int128 v129 = 0u;
    __int128 v130 = 0u;
    obunint64_t j = v118;
    id v37 = [obj countByEnumeratingWithState:&v129 objects:v145 count:16];
    if (!v37)
    {
      double v12 = 1.79769313e308;
      goto LABEL_150;
    }

    uint64_t v121 = *(void *)v130;
    id v122 = v37;
    double v12 = 1.79769313e308;
    while (1)
    {
      for (uint64_t i = 0LL; i != v122; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v130 != v121) {
          objc_enumerationMutation(obj);
        }
        id v38 = *(id *)(*((void *)&v129 + 1) + 8LL * (void)i);
        unint64_t v39 = (unint64_t)[v38 count];
        unint64_t v40 = v39;
        if (v39)
        {
          if (v39 >> 62) {
            abort();
          }
          uint64_t v123 = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v39);
          bzero(v123, 4 * v40);
        }

        else
        {
          uint64_t v123 = 0LL;
        }

        __p = 0LL;
        uint64_t v140 = 0LL;
        unint64_t v141 = 0LL;
        std::vector<std::pair<unsigned int,unsigned int>>::reserve(&__p, (unint64_t)[v38 count]);
        __int128 v137 = 0u;
        __int128 v138 = 0u;
        __int128 v135 = 0u;
        __int128 v136 = 0u;
        id v41 = v38;
        id v42 = [v41 countByEnumeratingWithState:&v135 objects:buf count:16];
        if (v42)
        {
          uint64_t v43 = *(void *)v136;
          do
          {
            for (unint64_t j = 0LL; j != v42; unint64_t j = (char *)j + 1)
            {
              if (*(void *)v136 != v43) {
                objc_enumerationMutation(v41);
              }
              id v45 = [*(id *)(*((void *)&v135 + 1) + 8 * (void)j) bytes];
              id v46 = v45;
              __int128 v47 = v140;
              if ((unint64_t)v140 >= v141)
              {
                uint64_t v49 = (v140 - (_BYTE *)__p) >> 3;
                unint64_t v50 = (uint64_t)(v141 - (void)__p) >> 2;
                if (v50 <= v49 + 1) {
                  unint64_t v50 = v49 + 1;
                }
                else {
                  unint64_t v51 = v50;
                }
                if (v51) {
                  unint64_t v51 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,unsigned int>>>(v51);
                }
                else {
                  uint64_t v52 = 0LL;
                }
                __int128 v53 = (char *)(v51 + 8 * v49);
                *(void *)__int128 v53 = v46;
                BOOL v48 = v53 + 8;
                uint64_t v55 = (char *)__p;
                unsigned int v54 = v140;
                if (v140 != __p)
                {
                  do
                  {
                    uint64_t v56 = *((void *)v54 - 1);
                    v54 -= 8;
                    *((void *)v53 - 1) = v56;
                    v53 -= 8;
                  }

                  while (v54 != v55);
                  unsigned int v54 = (char *)__p;
                }

                __p = v53;
                uint64_t v140 = v48;
                unint64_t v141 = v51 + 8 * v52;
                if (v54) {
                  operator delete(v54);
                }
              }

              else
              {
                *(void *)uint64_t v140 = v45;
                BOOL v48 = v47 + 8;
              }

              uint64_t v140 = v48;
            }

            id v42 = [v41 countByEnumeratingWithState:&v135 objects:buf count:16];
          }

          while (v42);
        }

        uint64_t v57 = v140;
        if (v140 == __p)
        {
          unint64_t v127 = 0LL;
          goto LABEL_140;
        }

        unint64_t v58 = 0LL;
        BOOL v59 = 0LL;
        uint64_t v60 = 0LL;
        unint64_t v61 = 0LL;
        do
        {
          uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue([v41 objectAtIndexedSubscript:v58]);
          BOOL v63 = (unint64_t)[v62 length] > 0x3F;

          if (v63)
          {
            int v64 = (NSData *)objc_claimAutoreleasedReturnValue([v41 objectAtIndexedSubscript:v58]);
            int NextMarker = FindNextMarker(v64, 0, *(void *)(v128 + 8));

            if (NextMarker != -1)
            {
              if (v60 >= v61)
              {
                uint64_t v66 = (v60 - v59) >> 3;
                unint64_t v67 = v66 + 1;
                if ((v61 - v59) >> 2 > v67) {
                  unint64_t v67 = (v61 - v59) >> 2;
                }
                else {
                  unint64_t v68 = v67;
                }
                if (v68 >> 61) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                uint64_t v69 = (char *)operator new(8 * v68);
                unint64_t v70 = &v69[8 * v66];
                *(_DWORD *)unint64_t v70 = v58;
                *((_DWORD *)v70 + 1) = 0;
                unint64_t v71 = v70;
                while (v60 != v59)
                {
                  uint64_t v72 = *((void *)v60 - 1);
                  v60 -= 8;
                  *((void *)v71 - 1) = v72;
                  v71 -= 8;
                }

                unint64_t v61 = &v69[8 * v68];
                uint64_t v60 = v70 + 8;
                if (v59) {
                  operator delete(v59);
                }
                BOOL v59 = v71;
              }

              else
              {
                *(_DWORD *)uint64_t v60 = v58;
                *((_DWORD *)v60 + 1) = 0;
                v60 += 8;
              }

              p_p = &__p;
              std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,GRCFrameTimeData::ProcessSingleFrameData(NSArray<NSData *> *,std::unordered_set<unsigned int> const&)::$_0 &,std::__wrap_iter<GRCFrameTimeData::ProcessSingleFrameData(NSArray<NSData *> *,std::unordered_set<unsigned int> const&)::PriorityQueueElement *>>( (uint64_t)v59,  (uint64_t)v60,  (uint64_t **)&p_p,  (v60 - v59) >> 3);
            }
          }

          ++v58;
          uint64_t v57 = (char *)__p;
        }

        while (v58 < (v140 - (_BYTE *)__p) >> 3);
        if (v59 != v60)
        {
          uint64_t v125 = 0LL;
          unint64_t v127 = 0LL;
          int v73 = 0;
          while (1)
          {
            unint64_t v74 = *(void *)v59;
            p_p = &__p;
            if (v60 - v59 < 9) {
              goto LABEL_111;
            }
            uint64_t v75 = 0LL;
            uint64_t v76 = (v60 - v59) >> 3;
            unint64_t v77 = *(void *)v59;
            uint64_t v78 = v59;
            do
            {
              __int128 v79 = v78;
              v78 += 8 * v75 + 8;
              uint64_t v80 = 2 * v75;
              uint64_t v75 = (2 * v75) | 1;
              uint64_t v81 = v80 + 2;
              if (v81 >= v76) {
                goto LABEL_107;
              }
              int64_t v82 = (void *)(*((void *)*p_p + *(unsigned int *)v78) + 8LL * *((unsigned int *)v78 + 1));
              unint64_t v83 = (void *)(*((void *)*p_p + *((unsigned int *)v78 + 2)) + 8LL * *((unsigned int *)v78 + 3));
              unint64_t v84 = v82[1];
              unint64_t v85 = v83[1];
              BOOL v86 = v84 > v85;
              if (v84 == v85
                && (v87 = v82[4], v88 = v83[4], BOOL v86 = v87 > v88, v87 == v88)
                && (v89 = v82[5], v90 = v83[5], BOOL v86 = v89 > v90, v89 == v90))
              {
                unint64_t v91 = v82[3];
                uint64_t v92 = v83[3];
                if (v91 > v84 && v91 != v92)
                {
LABEL_106:
                  v78 += 8;
                  uint64_t v75 = v81;
                }
              }

              else if (v86)
              {
                goto LABEL_106;
              }

LABEL_140:
        if (v57)
        {
          uint64_t v140 = v57;
          operator delete(v57);
        }

        if (v123) {
          operator delete(v123);
        }
      }

      id v122 = [obj countByEnumeratingWithState:&v129 objects:v145 count:16];
      if (!v122)
      {
LABEL_150:

        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v133);
        break;
      }
    }
  }

LABEL_151:
  unsigned __int8 v106 = atomic_load((unsigned __int8 *)(v116 + 140));
  if ((v106 & 1) == 0)
  {
    uint64_t v107 = *(void *)(v116 + 112);
    v143[0] = @"GPU Time";
    __int128 v119 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v12));
    v144[0] = v119;
    v143[1] = @"Frame Time Data";
    v144[1] = **(void **)(v116 + 16);
    v143[2] = @"Num Ring Buffers";
    __int128 v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:"));
    v144[2] = v108;
    __int128 v109 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v144,  v143,  3LL));
    id v110 = (id)(*(uint64_t (**)(uint64_t, void *))(v107 + 16))( v107,  v109);
  }

  uint64_t v111 = g_signpostLog;
  uint64_t v112 = (os_log_s *)v111;
  os_signpost_id_t v113 = *(void *)(a1 + 48);
  if (v113 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v111))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( &dword_0,  v112,  OS_SIGNPOST_INTERVAL_END,  v113,  "ShaderProfiler-ProcessStreamedDataPayload",  "Frame Time Data",  buf,  2u);
  }
}

            v84 -= 24LL;
            uint64_t v96 = v7 + v92;
            *(void *)uint64_t v96 = v93;
            int v97 = *(_DWORD *)(v7 + v92 - 12);
            *(_DWORD *)(v96 + 8) = v94;
            *(_DWORD *)(v96 + 12) = v97;
            *(void *)(v96 + 16) = *(void *)(v7 + v92 - 8);
            v92 -= 24LL;
            if (!v92)
            {
              unint64_t v91 = v7;
              goto LABEL_154;
            }
          }

          if (v95 >= v87)
          {
            unint64_t v91 = v7 + v92;
            if (v88 >= *(void *)(v7 + v92 - 8)) {
              goto LABEL_154;
            }
            goto LABEL_151;
          }

void sub_189BA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *__p, uint64_t a48)
{
  _Unwind_Resume(a1);
}

void std::make_unique[abi:nn180100]<GRCSplitBlitTimeData,NSDictionary * {__strong}&>(void *a1, void *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  id v5 = a2;
  *uint64_t v4 = v5;
  v4[1] = 0LL;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"Source Sample Marker"]);
  v4[1] = [v6 unsignedLongLongValue];

  *a1 = v4;
}

void sub_189DC4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN31MTLGRCStreamingSampleHelperImpl19ProcessStreamedDataEP12NSDictionaryS1__block_invoke_216( uint64_t a1)
{
  uint64_t v63 = *(void *)(a1 + 32);
  uint64_t v1 = *(id **)(v63 + 24);
  id v2 = GRCSplitBlitTimeData::BlitFrameEncoderTimeData( v1,  @"Blit TraceId to Sample Index",  @"Blit Encoder Time Data");
  id v66 = (id)objc_claimAutoreleasedReturnValue(v2);
  id v3 = GRCSplitBlitTimeData::BlitFrameEncoderTimeData( v1,  @"Blit Split TraceId to Sample Index",  @"Blit Split Encoder Time Data");
  uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
  id v5 = (void *)v4;
  if (v66)
  {
    if (v4) {
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*v1 objectForKeyedSubscript:@"Blit Encoder Frame Data"]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v1 objectForKeyedSubscript:@"Blit Encoder Info"]);
    id v8 = GRCSplitBlitTimeData::CalculateBlitEncoderTime((uint64_t)v1, v6, v7);
    id v66 = (id)objc_claimAutoreleasedReturnValue(v8);

    if (v5) {
      goto LABEL_6;
    }
  }

  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([*v1 objectForKeyedSubscript:@"Blit Split Encoder Frame Data"]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*v1 objectForKeyedSubscript:@"Blit Split Encoder Info"]);
  id v11 = GRCSplitBlitTimeData::CalculateBlitEncoderTime((uint64_t)v1, v9, v10);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v11);

LABEL_6:
  if ([v5 length])
  {
    uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([*v1 objectForKeyedSubscript:@"Blit Encoder Indices"]);
    unint64_t v71 = (void *)objc_claimAutoreleasedReturnValue([*v1 objectForKeyedSubscript:@"Encoder Draw Call Count"]);
    unint64_t v12 = (unint64_t)[v5 length];
    unint64_t v13 = (unint64_t)[v66 length];
    unint64_t v14 = v12 >> 5;
    if (v12 >= 0x20)
    {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v12 >> 5);
      memset(v15, 255, 4 * v14);
      unint64_t v68 = &v15[4 * v14];
    }

    else
    {
      unint64_t v15 = 0LL;
      unint64_t v68 = 0LL;
    }

    unint64_t v17 = v13 >> 5;
    unint64_t v61 = v12;
    unint64_t v62 = v13;
    unint64_t v65 = v12 >> 5;
    if (v13 >= 0x20)
    {
      uint64_t v19 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,unsigned int>>>(v13 >> 5);
      unint64_t v18 = v13 >> 5;
      bzero(v19, 8 * v17);
    }

    else
    {
      unint64_t v18 = v13 >> 5;
      uint64_t v19 = 0LL;
    }

    unint64_t v20 = (double *)[v5 bytes];
    uint64_t v21 = 0LL;
    for (unint64_t i = 0; i < (unint64_t)objc_msgSend(v72, "count", v61); ++i)
    {
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v72 objectAtIndexedSubscript:i]);
      unint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v71,  "objectAtIndexedSubscript:",  objc_msgSend(v23, "unsignedIntValue")));
      unsigned int v25 = [v24 unsignedIntValue];

      if (v25) {
        uint64_t v26 = v21;
      }
      else {
        uint64_t v26 = v21 + 1;
      }
      if (v25)
      {
        uint64_t v27 = v25;
        double v28 = *((double *)v19 + i);
        uint64_t v29 = &v20[4 * v26 + 3];
        do
        {
          double v30 = *v29;
          v29 += 4;
          double v28 = v30 + v28;
          *((double *)v19 + i) = v28;
          uint64_t v21 = v26 + 1;
          *(_DWORD *)&v15[4 * v26++] = i;
          --v27;
        }

        while (v27);
      }

      else
      {
        uint64_t v21 = v26;
      }
    }

    unint64_t v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", v65));
    unint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", v18));
    char v31 = (char *)[v66 bytes];
    uint64_t v32 = v31;
    if (v62 >= 0x20)
    {
      if (v18 <= 1) {
        uint64_t v33 = 1LL;
      }
      else {
        uint64_t v33 = v18;
      }
      unint64_t v34 = (double *)(v31 + 24);
      do
      {
        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *v34));
        [v70 addObject:v35];

        v34 += 4;
        --v33;
      }

      while (v33);
    }

    if (v68 != v15)
    {
      uint64_t v36 = 0LL;
      unsigned int v37 = 0;
      do
      {
        uint64_t v38 = *(unsigned int *)&v15[4 * v36];
        if ((_DWORD)v38 != -1)
        {
          double v39 = *((double *)v19 + v38);
          if (v39 >= 2.22044605e-16)
          {
            uint64_t v40 = 0LL;
            double v41 = v20[4 * v36 + 3];
            double v42 = *(double *)&v32[32 * v38 + 24] * v41 / v39 / v41;
            if (v41 <= 2.22044605e-16) {
              double v42 = 1.0;
            }
            do
            {
              v20[v40] = v42 * v20[v40];
              ++v40;
            }

            while (v40 != 3);
            uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
            [v67 addObject:v43];
          }

          else
          {
            [v67 addObject:&off_5A0BF8];
          }
        }

        uint64_t v36 = ++v37;
      }

      while ((v68 - v15) >> 2 > (unint64_t)v37);
    }

    __int128 v44 = &CATransform3DIdentity_ptr;
    uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", v18));
    if (v62 >= 0x20)
    {
      uint64_t v45 = 0LL;
      if (v18 <= 1) {
        uint64_t v46 = 1LL;
      }
      else {
        uint64_t v46 = v18;
      }
      do
      {
        __int128 v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", 3LL));
        for (uint64_t j = 0LL; j != 24; j += 8LL)
        {
          uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)&v32[j]));
          [v47 addObject:v49];
        }

        [v69 addObject:v47];

        ++v45;
        v32 += 32;
        __int128 v44 = &CATransform3DIdentity_ptr;
      }

      while (v45 != v46);
    }

    unint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", v65));
    if (v61 >= 0x20)
    {
      uint64_t v51 = 0LL;
      if (v65 <= 1) {
        uint64_t v52 = 1LL;
      }
      else {
        uint64_t v52 = v65;
      }
      do
      {
        __int128 v53 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D arrayWithCapacity:]((id)v44[273], "arrayWithCapacity:", 3LL));
        for (uint64_t k = 0LL; k != 3; ++k)
        {
          uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v20[k]));
          [v53 addObject:v55];
        }

        [v50 addObject:v53];

        ++v51;
        v20 += 4;
        __int128 v44 = &CATransform3DIdentity_ptr;
      }

      while (v51 != v52);
    }

    v73[0] = @"Blit Command Nsec Times";
    v73[1] = @"Blit Encoder Indices";
    *(void *)buf = v67;
    uint64_t v75 = v72;
    v73[2] = @"Encoder Draw Call Count";
    v73[3] = @"Blit Encoder Nsec Times";
    uint64_t v76 = v71;
    unint64_t v77 = v70;
    v73[4] = @"Blit Encoder Kick Times Nsec";
    v73[5] = @"Blit Command Kick Times Nsec";
    uint64_t v78 = v69;
    __int128 v79 = v50;
    unint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  buf,  v73,  6LL));

    if (v19) {
      operator delete(v19);
    }
    if (v15) {
      operator delete(v15);
    }
  }

  else
  {
    unint64_t v16 = 0LL;
  }

  if (v16)
  {
    unsigned __int8 v56 = atomic_load((unsigned __int8 *)(v63 + 140));
    if ((v56 & 1) == 0) {
      id v57 = (id)(*(uint64_t (**)(void))(*(void *)(v63 + 112) + 16LL))();
    }
  }

  unint64_t v58 = g_signpostLog;
  BOOL v59 = (os_log_s *)v58;
  os_signpost_id_t v60 = *(void *)(a1 + 40);
  if (v60 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v58))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( &dword_0,  v59,  OS_SIGNPOST_INTERVAL_END,  v60,  "ShaderProfiler-ProcessStreamedDataPayload",  "Blit Encoder Frame Data",  buf,  2u);
  }
}

void sub_18A4D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN31MTLGRCStreamingSampleHelperImpl19ProcessStreamedDataEP12NSDictionaryS1__block_invoke_221( uint64_t a1)
{
  uint64_t v243 = *(void *)(a1 + 48);
  id v2 = (char *)operator new(0x100uLL);
  id v3 = *(id *)(a1 + 32);
  *(_OWORD *)(v2 + 152) = 0u;
  uint64_t v265 = (uint64_t *)(v2 + 152);
  *(_OWORD *)(v2 + 184) = 0u;
  uint64_t v249 = v2 + 184;
  *((void *)v2 + 29) = 0LL;
  v259 = (GRCDerivedCounterData *)v2;
  v260 = (uint64_t *)(v2 + 232);
  *((void *)v2 + 30) = 0LL;
  *((void *)v2 + 31) = 0LL;
  *(_OWORD *)id v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *((void *)v2 + 27) = 0LL;
  id v248 = v3;
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"Derived Counter Sample Data"]);
  id v5 = (void *)*((void *)v2 + 1);
  *((void *)v2 + 1) = v4;

  uint64_t v6 = objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"Subdivided Dictionary"]);
  uint64_t v7 = (void *)*((void *)v2 + 3);
  *((void *)v2 + 3) = v6;

  uint64_t v8 = objc_claimAutoreleasedReturnValue([*((id *)v2 + 3) objectForKeyedSubscript:@"passList"]);
  BOOL v9 = (void *)*((void *)v2 + 2);
  *((void *)v2 + 2) = v8;

  uint64_t v10 = objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"Encoder Infos"]);
  id v11 = (void *)*((void *)v2 + 4);
  *((void *)v2 + 4) = v10;

  id v245 = (id)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"Encoder Tile Info"]);
  if (v245)
  {
    id v12 = v245;
    unint64_t v13 = (char *)[v12 bytes];
    id v14 = v12;
    unint64_t v15 = (char *)[v14 bytes];
    unint64_t v16 = &v15[(void)[v14 length]];
    int64_t v17 = v16 - v13;
    unint64_t v18 = (v16 - v13) >> 3;
    uint64_t v19 = *((void *)v2 + 7);
    unint64_t v20 = (char *)*((void *)v2 + 5);
    if (v18 <= (v19 - (uint64_t)v20) >> 3)
    {
      uint64_t v26 = (char *)*((void *)v2 + 6);
      uint64_t v23 = (void **)(v2 + 48);
      unsigned int v25 = v26;
      size_t v27 = v26 - v20;
      unint64_t v28 = (v26 - v20) >> 3;
      if (v28 < v18)
      {
        uint64_t v29 = &v13[8 * v28];
        if (v25 != v20)
        {
          memmove(v20, v13, v27);
          unint64_t v20 = (char *)*v23;
        }

        int64_t v17 = v16 - v29;
        if (v16 == v29) {
          goto LABEL_21;
        }
        double v30 = v20;
        char v31 = v29;
        goto LABEL_20;
      }
    }

    else
    {
      if (v20)
      {
        *((void *)v2 + 6) = v20;
        operator delete(v20);
        uint64_t v19 = 0LL;
        *((void *)v2 + 5) = 0LL;
        *((void *)v2 + 6) = 0LL;
        *((void *)v2 + 7) = 0LL;
      }

      if (v17 < 0) {
        goto LABEL_244;
      }
      uint64_t v21 = v19 >> 2;
      if (v19 >> 2 <= v18) {
        uint64_t v21 = v17 >> 3;
      }
      unint64_t v22 = (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8LL ? 0x1FFFFFFFFFFFFFFFLL : v21;
      if (v22 >> 61) {
LABEL_244:
      }
        abort();
      unint64_t v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,unsigned int>>>(v22);
      *((void *)v2 + 6) = v20;
      uint64_t v23 = (void **)(v2 + 48);
      *((void *)v259 + 5) = v20;
      *((void *)v259 + 7) = &v20[8 * v24];
    }

    if (v13 == v16)
    {
LABEL_21:
      *uint64_t v23 = &v20[v17];
      id v2 = (char *)v259;
      goto LABEL_22;
    }

    double v30 = v20;
    char v31 = v13;
LABEL_20:
    memmove(v30, v31, v17);
    goto LABEL_21;
  }

LABEL_83:
  __int128 v282 = 0u;
  __int128 v283 = 0u;
  __int128 v280 = 0u;
  __int128 v281 = 0u;
  id v90 = *((id *)v259 + 2);
  id v91 = [v90 countByEnumeratingWithState:&v280 objects:buf count:16];
  if (v91)
  {
    unsigned int v92 = 0;
    id v250 = v90;
    uint64_t v252 = *(void *)v281;
    do
    {
      int v257 = 0LL;
      id v253 = v91;
      do
      {
        if (*(void *)v281 != v252) {
          objc_enumerationMutation(v250);
        }
        unint64_t v93 = *(void **)(*((void *)&v280 + 1) + 8LL * (void)v257);
        uint64_t v94 = *v265;
        unint64_t v95 = (unint64_t)[v93 count];
        uint64_t v96 = v92;
        uint64_t v97 = v94 + 32LL * v92;
        uint64_t v100 = *(void *)(v97 + 8);
        __int128 v98 = (void **)(v97 + 8);
        uint64_t v99 = v100;
        if (v95 > ((uint64_t)v98[2] - v100) >> 3)
        {
          if (v95 >> 61) {
            abort();
          }
          uint64_t v101 = v94 + 32LL * v92;
          uint64_t v104 = *(void *)(v101 + 16);
          unint64_t v102 = (void **)(v101 + 16);
          uint64_t v103 = v104;
          uint64_t v105 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,unsigned int>>>(v95);
          uint64_t v107 = (char *)*v102;
          __int128 v108 = (char *)*v98;
          __int128 v109 = &v105[(v104 - v99) & 0xFFFFFFFFFFFFFFF8LL];
          if (*v102 != *v98)
          {
            do
            {
              uint64_t v110 = *((void *)v107 - 1);
              v107 -= 8;
              *((void *)v109 - 1) = v110;
              v109 -= 8;
            }

            while (v107 != v108);
            uint64_t v107 = (char *)*v98;
          }

          *__int128 v98 = v109;
          *unint64_t v102 = &v105[(v103 - v99) & 0xFFFFFFFFFFFFFFF8LL];
          v98[2] = &v105[8 * v106];
          if (v107) {
            operator delete(v107);
          }
        }

        __int128 v278 = 0u;
        __int128 v279 = 0u;
        __int128 v276 = 0u;
        __int128 v277 = 0u;
        id v262 = v93;
        id v111 = [v262 countByEnumeratingWithState:&v276 objects:v286 count:16];
        unsigned int v255 = v92;
        if (v111)
        {
          uint64_t v112 = *(void *)v277;
          int v113 = 1;
          do
          {
            for (unint64_t i = 0LL; i != v111; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v277 != v112) {
                objc_enumerationMutation(v262);
              }
              unsigned int v115 = [*(id *)(*((void *)&v276 + 1) + 8 * (void)i) count];
              unsigned int v116 = v115;
              uint64_t v117 = *v265 + 32 * v96;
              unint64_t v120 = *(void *)(v117 + 24);
              __int128 v119 = (void *)(v117 + 24);
              unint64_t v118 = v120;
              id v122 = (void **)(v119 - 1);
              uint64_t v121 = (int *)*(v119 - 1);
              if ((unint64_t)v121 >= v120)
              {
                unint64_t v124 = (void **)(v119 - 2);
                uint64_t v125 = *(v119 - 2);
                uint64_t v126 = ((uint64_t)v121 - v125) >> 3;
                unint64_t v127 = v126 + 1;
                uint64_t v128 = v118 - v125;
                if (v128 >> 2 > v127) {
                  unint64_t v127 = v128 >> 2;
                }
                else {
                  unint64_t v129 = v127;
                }
                __int128 v130 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,unsigned int>>>(v129);
                __int128 v132 = (int *)&v130[8 * v126];
                int *v132 = v113;
                v132[1] = v116;
                uint64_t v133 = (char *)*v122;
                int v134 = (char *)*v124;
                __int128 v135 = v132;
                if (*v122 != *v124)
                {
                  do
                  {
                    uint64_t v136 = *((void *)v133 - 1);
                    v133 -= 8;
                    *((void *)v135 - 1) = v136;
                    v135 -= 2;
                  }

                  while (v133 != v134);
                  uint64_t v133 = (char *)*v124;
                }

                *unint64_t v124 = v135;
                uint64_t v123 = v132 + 2;
                *id v122 = v132 + 2;
                *__int128 v119 = &v130[8 * v131];
                if (v133) {
                  operator delete(v133);
                }
              }

              else
              {
                *uint64_t v121 = v113;
                v121[1] = v115;
                uint64_t v123 = v121 + 2;
              }

              *id v122 = v123;
              if (v116 >= 8)
              {
                __int128 v137 = (int *)(*v265 + 32 * v96);
                int v138 = *v137;
                if (!*v137)
                {
                  int v138 = 1;
                  *__int128 v137 = 1;
                }

                *__int128 v137 = v138 + v116 - 7;
                v113 += v116 - 7;
              }
            }

            id v111 = [v262 countByEnumeratingWithState:&v276 objects:v286 count:16];
          }

          while (v111);
        }

        unsigned int v92 = v255 + 1;
        int v257 = (char *)v257 + 1;
      }

      while (v257 != v253);
      id v90 = v250;
      id v91 = [v250 countByEnumeratingWithState:&v280 objects:buf count:16];
    }

    while (v91);
  }

  unint64_t v139 = *((unsigned int *)v259 + 37);
  uint64_t v140 = *((void *)v259 + 23);
  uint64_t v141 = *((void *)v259 + 24);
  unint64_t v142 = 0xCCCCCCCCCCCCCCCDLL * ((v141 - v140) >> 3);
  unint64_t v143 = v139 - v142;
  if (v139 <= v142)
  {
    if (v139 < v142)
    {
      uint64_t v152 = v140 + 40LL * v139;
      while (v141 != v152)
      {
        v141 -= 40LL;
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v141);
      }

      *((void *)v259 + 24) = v152;
    }
  }

  else
  {
    uint64_t v144 = *((void *)v259 + 25);
    if (0xCCCCCCCCCCCCCCCDLL * ((v144 - v141) >> 3) >= v143)
    {
      unint64_t v153 = v141 + 40 * v143;
      do
      {
        *(_OWORD *)uint64_t v141 = 0uLL;
        *(_OWORD *)(v141 + 16) = 0uLL;
        *(_DWORD *)(v141 + 32) = 1065353216;
        v141 += 40LL;
      }

      while (v141 != v153);
      *((void *)v259 + 24) = v153;
    }

    else
    {
      unint64_t v145 = 0x999999999999999ALL * ((v144 - v140) >> 3);
      if (v145 <= v139) {
        unint64_t v145 = *((unsigned int *)v259 + 37);
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((v144 - v140) >> 3) >= 0x333333333333333LL) {
        unint64_t v146 = 0x666666666666666LL;
      }
      else {
        unint64_t v146 = v145;
      }
      if (v146 > 0x666666666666666LL) {
        goto LABEL_245;
      }
      uint64_t v147 = (char *)operator new(40 * v146);
      uint64_t v148 = (uint64_t)&v147[8 * ((v141 - v140) >> 3)];
      unint64_t v149 = &v147[40 * v139];
      uint64_t v150 = v148;
      do
      {
        *(_OWORD *)uint64_t v150 = 0uLL;
        *(_OWORD *)(v150 + 16) = 0uLL;
        *(_DWORD *)(v150 + 32) = 1065353216;
        v150 += 40LL;
      }

      while ((char *)v150 != v149);
      uint64_t v151 = &v147[40 * v146];
      while (v141 != v140)
      {
        v141 -= 40LL;
        uint64_t v148 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__hash_table( v148 - 40,  (uint64_t *)v141);
      }

      uint64_t v154 = (void *)*((void *)v259 + 23);
      uint64_t v155 = *((void *)v259 + 24);
      *((void *)v259 + 23) = v148;
      *((void *)v259 + 24) = v149;
      *((void *)v259 + 25) = v151;
      while ((void *)v155 != v154)
      {
        v155 -= 40LL;
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v155);
      }

      if (v154) {
        operator delete(v154);
      }
    }
  }

  __int128 v156 = v259;
  if (*((_DWORD *)v259 + 37))
  {
    unint64_t v157 = 0LL;
    do
    {
      id v158 = objc_claimAutoreleasedReturnValue([*((id *)v156 + 4) objectAtIndexedSubscript:v157]);
      BOOL v159 = [v158 bytes];

      unint64_t v160 = (void *)objc_claimAutoreleasedReturnValue([*((id *)v259 + 4) objectAtIndexedSubscript:v157]);
      unsigned int v161 = [v160 length];

      uint64_t v162 = *v249 + 40 * v157;
      unint64_t v163 = *(void *)(v162 + 8);
      if (v163) {
        float v164 = (float)*(unint64_t *)(v162 + 24) / (float)v163;
      }
      else {
        float v164 = 0.0;
      }
      LODWORD(v165) = v161 >> 3;
      float v166 = fmaxf(v164, 0.3);
      *(float *)(v162 + 32) = v166;
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( v162,  vcvtps_u32_f32((float)(v161 >> 3) / v166));
      if (v161 >= 8)
      {
        uint64_t v167 = 0LL;
        else {
          uint64_t v165 = v165;
        }
        do
        {
          LODWORD(v285[0]) = v159[2 * v167 + 1];
          *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( *v249 + 40 * v157,  v285[0],  v285)
          + 5) = v167++;
        }

        while (v165 != v167);
      }

      ++v157;
      __int128 v156 = v259;
      unint64_t v168 = *((unsigned int *)v259 + 37);
    }

    while (v157 < v168);
    id v169 = (void *)((char *)v259 + 240);
    uint64_t v170 = *((void *)v259 + 30);
    uint64_t v171 = *((void *)v259 + 29);
    unint64_t v172 = 0xAAAAAAAAAAAAAAABLL * ((v170 - v171) >> 3);
    unint64_t v173 = v168 - v172;
    if (v168 > v172)
    {
      uint64_t v174 = *((void *)v259 + 31);
      if (0xAAAAAAAAAAAAAAABLL * ((v174 - v170) >> 3) >= v173)
      {
        bzero(*((void **)v259 + 30), 24 * ((24 * v173 - 24) / 0x18) + 24);
        void *v169 = v170 + 24 * ((24 * v173 - 24) / 0x18) + 24;
        goto LABEL_182;
      }

      unint64_t v175 = 0xAAAAAAAAAAAAAAABLL * ((v174 - v171) >> 3);
      unint64_t v176 = 0x5555555555555556LL * ((v174 - v171) >> 3);
      if (v176 > v168) {
        unint64_t v168 = v176;
      }
      if (v175 >= 0x555555555555555LL) {
        unint64_t v177 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v177 = v168;
      }
      if (v177 <= 0xAAAAAAAAAAAAAAALL)
      {
        BOOL v178 = (char *)operator new(24 * v177);
        unsigned __int8 v179 = &v178[8 * ((v170 - v171) >> 3)];
        id v180 = &v178[24 * v177];
        size_t v181 = 24 * ((24 * v173 - 24) / 0x18) + 24;
        bzero(v179, v181);
        id v182 = &v179[v181];
        if (v170 == v171)
        {
          *((void *)v259 + 29) = v179;
          *((void *)v259 + 30) = v182;
          *((void *)v259 + 31) = v180;
        }

        else
        {
          do
          {
            *((void *)v179 - 3) = 0LL;
            *((void *)v179 - 2) = 0LL;
            v179 -= 24;
            *((void *)v179 + 2) = 0LL;
            __int128 v183 = *(_OWORD *)(v170 - 24);
            v170 -= 24LL;
            *(_OWORD *)unsigned __int8 v179 = v183;
            *((void *)v179 + 2) = *(void *)(v170 + 16);
            *(void *)uint64_t v170 = 0LL;
            *(void *)(v170 + 8) = 0LL;
            *(void *)(v170 + 16) = 0LL;
          }

          while (v170 != v171);
          uint64_t v184 = *((void *)v259 + 29);
          uint64_t v170 = *((void *)v259 + 30);
          *((void *)v259 + 29) = v179;
          *((void *)v259 + 30) = v182;
          *((void *)v259 + 31) = v180;
          if (v170 != v184)
          {
            do
            {
              v170 -= 24LL;
              v285[0] = (void **)v170;
              std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:nn180100](v285);
            }

            while (v170 != v184);
            uint64_t v170 = v184;
          }
        }

        if (v170) {
          operator delete((void *)v170);
        }
        goto LABEL_182;
      }

LABEL_245:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
  }

  else
  {
    unint64_t v168 = 0LL;
    id v169 = (void *)((char *)v259 + 240);
    uint64_t v170 = *((void *)v259 + 30);
    uint64_t v171 = *((void *)v259 + 29);
    unint64_t v172 = 0xAAAAAAAAAAAAAAABLL * ((v170 - v171) >> 3);
  }

  if (v172 > v168)
  {
    uint64_t v185 = v171 + 24LL * v168;
    while (v170 != v185)
    {
      v170 -= 24LL;
      v285[0] = (void **)v170;
      std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:nn180100](v285);
    }

    void *v169 = v185;
  }

LABEL_182:
  uint64_t v186 = v259;
  if (*((_DWORD *)v259 + 37))
  {
    for (unint64_t j = 0LL; j < *((unsigned int *)v259 + 37); ++j)
    {
      uint64_t v188 = (void *)objc_claimAutoreleasedReturnValue([*((id *)v186 + 3) objectForKeyedSubscript:@"passList"]);
      id v189 = (void *)objc_claimAutoreleasedReturnValue([v188 objectAtIndexedSubscript:j]);

      uint64_t v190 = *v260;
      unint64_t v191 = (unint64_t)[v189 count];
      id v192 = (void *)(v190 + 24 * j);
      uint64_t v193 = (char **)(v192 + 1);
      uint64_t v194 = (char *)v192[1];
      uint64_t v195 = (char *)*v192;
      unint64_t v196 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v194[-*v192] >> 3);
      unint64_t v197 = v191 - v196;
      if (v191 <= v196)
      {
        if (v191 < v196)
        {
          uint64_t v214 = &v195[24 * v191];
          while (v194 != v214)
          {
            uint64_t v216 = (void *)*((void *)v194 - 3);
            v194 -= 24;
            uint64_t v215 = v216;
            if (v216) {
              operator delete(v215);
            }
          }

          *uint64_t v193 = v214;
        }

        goto LABEL_211;
      }

      uint64_t v198 = v190 + 24 * j;
      uint64_t v201 = *(void *)(v198 + 16);
      uint64_t v200 = (char **)(v198 + 16);
      uint64_t v199 = v201;
      if (0xAAAAAAAAAAAAAAABLL * ((v201 - (uint64_t)v194) >> 3) >= v197)
      {
        bzero(v194, 24 * ((24 * v197 - 24) / 0x18) + 24);
        *uint64_t v193 = &v194[24 * ((24 * v197 - 24) / 0x18) + 24];
      }

      else
      {
        if (v191 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        unint64_t v202 = 0xAAAAAAAAAAAAAAABLL * ((v199 - (uint64_t)v195) >> 3);
        uint64_t v203 = 2 * v202;
        if (2 * v202 <= v191) {
          uint64_t v203 = v191;
        }
        if (v202 >= 0x555555555555555LL) {
          unint64_t v204 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v204 = v203;
        }
        if (v204 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v205 = (char *)operator new(24 * v204);
        uint64_t v206 = &v205[24 * v196];
        id v263 = &v205[24 * v204];
        bzero(v206, 24 * ((24 * v197 - 24) / 0x18) + 24);
        id v207 = &v206[24 * ((24 * v197 - 24) / 0x18) + 24];
        id v208 = *v193;
        int v209 = (char *)*v192;
        if (*v193 != (char *)*v192)
        {
          do
          {
            uint64_t v210 = *((void *)v208 - 3);
            v208 -= 24;
            *((void *)v206 - 3) = v210;
            v206 -= 24;
            *((void *)v206 + 1) = *((void *)v208 + 1);
            *((void *)v206 + 2) = *((void *)v208 + 2);
            *(void *)id v208 = 0LL;
            *((void *)v208 + 1) = 0LL;
            *((void *)v208 + 2) = 0LL;
          }

          while (v208 != v209);
          uint64_t v211 = (char *)*v192;
          id v208 = *v193;
          *id v192 = v206;
          *uint64_t v193 = v207;
          *uint64_t v200 = v263;
          if (v208 != v211)
          {
            do
            {
              char v213 = (void *)*((void *)v208 - 3);
              v208 -= 24;
              id v212 = v213;
              if (v213) {
                operator delete(v212);
              }
            }

            while (v208 != v211);
            id v208 = v211;
          }

          if (!v208) {
            goto LABEL_211;
          }
LABEL_210:
          operator delete(v208);
          goto LABEL_211;
        }

        *id v192 = v206;
        *uint64_t v193 = v207;
        *uint64_t v200 = v263;
        if (v208) {
          goto LABEL_210;
        }
      }

LABEL_211:
      __int128 v275 = 0u;
      __int128 v273 = 0u;
      __int128 v274 = 0u;
      __int128 v272 = 0u;
      id v251 = v189;
      id v217 = [v251 countByEnumeratingWithState:&v272 objects:v285 count:16];
      if (v217)
      {
        unsigned int v218 = 0;
        uint64_t v254 = *(void *)v273;
        do
        {
          uint64_t v219 = 0LL;
          id v256 = v217;
          do
          {
            if (*(void *)v273 != v254) {
              objc_enumerationMutation(v251);
            }
            uint64_t v220 = *(void **)(*((void *)&v272 + 1) + 8 * v219);
            unsigned int v221 = v218;
            std::vector<BOOL>::resize( *(void *)(*v260 + 24 * j) + 24 * v218,  (unint64_t)[v220 count],  0);
            __int128 v270 = 0u;
            __int128 v271 = 0u;
            __int128 v268 = 0u;
            __int128 v269 = 0u;
            id v222 = v220;
            id v223 = [v222 countByEnumeratingWithState:&v268 objects:v284 count:16];
            uint64_t v258 = v219;
            unsigned int v264 = v218;
            if (v223)
            {
              unsigned int v224 = 0;
              uint64_t v225 = *(void *)v269;
              do
              {
                for (uint64_t k = 0LL; k != v223; uint64_t k = (char *)k + 1)
                {
                  if (*(void *)v269 != v225) {
                    objc_enumerationMutation(v222);
                  }
                  unint64_t v227 = *(void **)(*((void *)&v268 + 1) + 8LL * (void)k);
                  if (([v227 containsString:@"GRC"] & 1) == 0)
                  {
                    id v228 = (void *)objc_claimAutoreleasedReturnValue([*((id *)v259 + 8) objectForKeyedSubscript:v227]);
                    unint64_t v229 = v228;
                    if (v228) {
                      BOOL v230 = [v228 unsignedIntValue] == 1;
                    }
                    else {
                      BOOL v230 = 1;
                    }
                    uint64_t v231 = *(void *)(*(void *)(*v260 + 24 * j) + 24LL * v221);
                    unint64_t v232 = (unint64_t)v224 >> 6;
                    uint64_t v233 = 1LL << v224;
                    if (v230) {
                      uint64_t v234 = *(void *)(v231 + 8 * v232) | v233;
                    }
                    else {
                      uint64_t v234 = *(void *)(v231 + 8 * v232) & ~v233;
                    }
                    *(void *)(v231 + 8 * v232) = v234;

                    ++v224;
                  }
                }

                id v223 = [v222 countByEnumeratingWithState:&v268 objects:v284 count:16];
              }

              while (v223);
            }

            unsigned int v218 = v264 + 1;
            uint64_t v219 = v258 + 1;
          }

          while ((id)(v258 + 1) != v256);
          id v217 = [v251 countByEnumeratingWithState:&v272 objects:v285 count:16];
        }

        while (v217);
      }

      uint64_t v186 = v259;
    }
  }

  if (__p)
  {
    uint64_t v267 = __p;
    operator delete(__p);
  }

  unint64_t v235 = GRCDerivedCounterData::ProcessDerivedCounterData((uint64_t)v259, *(void **)(v244 + 40));
  uint64_t v236 = (void *)objc_claimAutoreleasedReturnValue(v235);
  if (v236)
  {
    unsigned __int8 v237 = atomic_load((unsigned __int8 *)(v243 + 140));
    if ((v237 & 1) == 0) {
      id v238 = (id)(*(uint64_t (**)(void))(*(void *)(v243 + 112) + 16LL))();
    }
  }

  unint64_t v239 = g_signpostLog;
  unint64_t v240 = (os_log_s *)v239;
  os_signpost_id_t v241 = *(void *)(v244 + 56);
  if (v241 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v239))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( &dword_0,  v240,  OS_SIGNPOST_INTERVAL_END,  v241,  "ShaderProfiler-ProcessStreamedDataPayload",  "Derived Counter Sample Data",  buf,  2u);
  }

  GRCDerivedCounterData::~GRCDerivedCounterData(v259);
  operator delete(v242);
}

void sub_18BB48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, GRCDerivedCounterData *__p, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27)
{
  GRCDerivedCounterData::~GRCDerivedCounterData(__p);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void ___ZN31MTLGRCStreamingSampleHelperImpl19ProcessStreamedDataEP12NSDictionaryS1__block_invoke_229( uint64_t a1)
{
  id v3 = g_signpostLog;
  uint64_t v4 = (os_log_s *)v3;
  os_signpost_id_t v5 = *(void *)(a1 + 48);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v3))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_signpost_emit_with_name_impl( &dword_0,  v4,  OS_SIGNPOST_INTERVAL_END,  v5,  "ShaderProfiler-ProcessStreamedDataPayload",  "End Batch ID Streaming Data",  v6,  2u);
  }
}

void ___ZN31MTLGRCStreamingSampleHelperImpl19ProcessStreamedDataEP12NSDictionaryS1__block_invoke_231( uint64_t a1)
{
  uint64_t v84 = *(void *)(a1 + 40);
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(v84 + 140));
  if ((v1 & 1) != 0) {
    return;
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unint64_t v87 = (char **)WeakRetained[1];
  if ([*(id *)v87[61] count])
  {
    unsigned int v2 = [*((id *)v87[61] + 38) length];
    id v3 = (unsigned __int8 *)[*((id *)v87[61] + 38) mutableBytes];
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)v87[61] allKeys]);
    unint64_t v5 = (unint64_t)[v4 count];
    unint64_t v6 = v5;
    uint64_t v7 = (float *)&unk_318000;
    if (!v5)
    {
LABEL_42:

      uint64_t v40 = v87[61];
      *(_DWORD *)buf = -1;
      uint64_t v86 = (uint64_t)(v87 + 13);
      *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)(v87 + 13),  0xFFFFFFFF,  buf)
      + 5) = -1;
      *(_OWORD *)buf = 0u;
      __int128 v98 = 0u;
      int v99 = 1050253722;
      float v41 = v7[277];
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( (uint64_t)buf,  vcvtps_u32_f32((float)*((unint64_t *)v40 + 24) / v41));
      if (v2 >= 0x18)
      {
        unsigned int v42 = 0;
        unint64_t v43 = v2 / 0x18uLL;
        do
        {
          if ((*(void *)v3 & *((void *)v3 + 1) & *((void *)v3 + 2)) != -1LL)
          {
            unsigned int v44 = *((_DWORD *)v3 + 1);
            if (v44 == -1)
            {
              unsigned int v42 = *(_DWORD *)v3 >> 8;
            }

            else
            {
              unsigned int v96 = *((_DWORD *)v3 + 1);
              uint64_t v45 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>( (void *)v40 + 21,  v42);
              if (v45)
              {
                unsigned int v44 = *((_DWORD *)v45 + 5);
                unsigned int v96 = v44;
                *((_DWORD *)v3 + 1) = v44;
                uint64_t v46 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>( buf,  v44);
                if (v46)
                {
                  int v47 = *((_DWORD *)v46 + 5) + 1;
                  *((_DWORD *)v46 + 5) = v47;
                }

                else
                {
                  int v47 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,unsigned int &,int>( (uint64_t)buf,  v44,  v44,  0)
                        + 5);
                }

                *(_DWORD *)id v3 = *v3 | (v47 << 8);
              }

              *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( v86,  v44,  &v96)
              + 5) = v42;
              if (*((void *)v3 + 1) != -1LL)
              {
                unsigned __int16 v48 = *v3;
                id v91 = 0LL;
                uint64_t v92 = 0LL;
                id v90 = &v91;
                LODWORD(v93) = v44;
                std::set<ProgramAddressHelper::ProgramAddressInfo>::set[abi:nn180100]((uint64_t)&v94, &v90);
                unint64_t v49 = (uint64_t **)std::__hash_table<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::set<ProgramAddressHelper::ProgramAddressInfo>>>( (uint64_t)(v87 + 3),  v93,  (uint64_t)&v93);
                std::__tree<llvm::DIType *>::destroy(v95);
                std::__tree<llvm::DIType *>::destroy(v91);
                v49 += 3;
                std::__tree<ProgramAddressHelper::ProgramAddressInfo>::__emplace_unique_impl<unsigned long long &,ProgramAddressHelper::eAddressRange,unsigned int &>( v49,  *((void *)v3 + 1),  0,  v48);
                std::__tree<ProgramAddressHelper::ProgramAddressInfo>::__emplace_unique_impl<unsigned long long &,ProgramAddressHelper::eAddressRange,unsigned int &>( v49,  *((void *)v3 + 2),  2u,  v48);
                if ((*(_DWORD *)v3 & 0xFE) == 0x64) {
                  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int &>( (uint64_t)(v87 + 8),  v44,  v44);
                }
              }
            }
          }

          v3 += 24;
          --v43;
        }

        while (v43);
      }

      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)buf);
      uint64_t v50 = (GRCPerFrameData *)v87;
      id v51 = v87[61];
      id v89 = *((id *)v51 + 39);
      *(_OWORD *)buf = 0u;
      __int128 v98 = 0u;
      int v99 = 1050253722;
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( (uint64_t)buf,  vcvtps_u32_f32((float)*((unint64_t *)v51 + 24) / v41));
      unsigned int v52 = 0;
      unint64_t v85 = v51 + 168;
      while (1)
      {
        uint64_t v53 = v52;
        unint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v89 objectAtIndexedSubscript:v52]);
        uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([v54 objectForKeyedSubscript:@"encID"]);
        unsigned int v56 = [v55 unsignedIntValue];

        unsigned int v96 = v56;
        uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([v54 objectForKeyedSubscript:@"mappedAddress"]);
        unsigned int v58 = [v57 unsignedLongLongValue];

        double v59 = (void *)objc_claimAutoreleasedReturnValue([v54 objectForKeyedSubscript:@"mappedSize"]);
        unsigned int v60 = [v59 unsignedLongLongValue];

        unint64_t v61 = (void *)objc_claimAutoreleasedReturnValue([v54 objectForKeyedSubscript:@"encIndex"]);
        unsigned int v62 = [v61 unsignedIntValue];

        uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([v54 objectForKeyedSubscript:@"type"]);
        int64_t v64 = (void *)objc_claimAutoreleasedReturnValue([&off_5A03D0 objectForKeyedSubscript:v63]);
        double v65 = v64;
        if (v64) {
          unsigned int v66 = [v64 unsignedIntValue];
        }
        else {
          unsigned int v66 = 255;
        }

        double v67 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>( v85,  v62);
        if (v67)
        {
          uint64_t v68 = v67;
          id v69 = [v54 mutableCopy];
          unsigned int v96 = *((_DWORD *)v68 + 5);
          unsigned int v56 = v96;
          unsigned int v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v96));
          [v69 setObject:v70 forKeyedSubscript:@"encID"];

          uint64_t v71 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>( buf,  v56);
          if (v71)
          {
            uint64_t v72 = (*((_DWORD *)v71 + 5) + 1);
            *((_DWORD *)v71 + 5) = v72;
          }

          else
          {
            uint64_t v72 = *((unsigned int *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,unsigned int &,int>( (uint64_t)buf,  v56,  v56,  0)
                  + 5);
          }

          int v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v72));
          [v69 setObject:v73 forKeyedSubscript:@"index"];

          [v89 setObject:v69 atIndexedSubscript:v53];
        }

        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( v86,  v56,  &v96)
        + 5) = v62;
        id v91 = 0LL;
        uint64_t v92 = 0LL;
        id v90 = &v91;
        LODWORD(v93) = v56;
        std::set<ProgramAddressHelper::ProgramAddressInfo>::set[abi:nn180100]((uint64_t)&v94, &v90);
        unint64_t v74 = (uint64_t **)std::__hash_table<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::set<ProgramAddressHelper::ProgramAddressInfo>>>( (uint64_t)(v87 + 3),  v93,  (uint64_t)&v93);
        std::__tree<llvm::DIType *>::destroy(v95);
        std::__tree<llvm::DIType *>::destroy(v91);
        unint64_t v75 = v74 + 3;
        std::__tree<ProgramAddressHelper::ProgramAddressInfo>::__emplace_unique_impl<unsigned long long &,ProgramAddressHelper::eAddressRange,unsigned int &>( v74 + 3,  v58,  0,  v66);
        uint64_t v50 = (GRCPerFrameData *)v87;
        uint64_t v76 = operator new(0x28uLL);
        unsigned int v77 = (v66 << 16) | 2;
        v76[7] = v58 + v60;
        v76[8] = v77;
        unint64_t v78 = std::__tree<ProgramAddressHelper::ProgramAddressInfo>::__find_equal<ProgramAddressHelper::ProgramAddressInfo>( (uint64_t)v75,  &v93,  v58 + v60,  v77);
        if (*v78) {
          operator delete(v76);
        }
        else {
          std::__tree<llvm::DIType *>::__insert_node_at(v75, v93, (uint64_t **)v78, (uint64_t *)v76);
        }
        if ((v66 & 0xFFFFFFFE) == 0x64) {
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int &>( (uint64_t)(v87 + 8),  v56,  v56);
        }

        unsigned int v52 = v53 + 1;
      }

      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)buf);

      GRCPerFrameData::EvaluatePerRingBufferSamples(v50);
      goto LABEL_73;
    }

    uint64_t v8 = *v87;
    uint64_t v9 = (uint64_t)v87[1];
    unint64_t v10 = 0x2E8BA2E8BA2E8BA3LL * ((v9 - (uint64_t)*v87) >> 3);
    unint64_t v11 = v5 - v10;
    if (v5 <= v10)
    {
      if (v5 >= v10)
      {
        unint64_t v34 = (unint64_t)v87[1];
        uint64_t v35 = (uint64_t *)v87;
LABEL_36:
        uint64_t v36 = *v35;
        if (v36 != v34)
        {
          float v37 = v7[277];
          do
          {
            unint64_t v38 = *(void *)(v36 + 8);
            if (v38) {
              float v39 = (float)*(unint64_t *)(v36 + 24) / (float)v38;
            }
            else {
              float v39 = 0.0;
            }
            *(float *)(v36 + 32) = fmaxf(v39, v37);
            v36 += 88LL;
          }

          while (v36 != v34);
        }

        goto LABEL_42;
      }

      unint64_t v34 = (unint64_t)&v8[88 * v5];
      while (v9 != v34)
      {
        v9 -= 88LL;
        std::allocator<ProgramAddressHelper::PerRingBufferProgramInfo>::destroy[abi:nn180100](v9);
      }
    }

    else
    {
      id v12 = v87[2];
      if (0x2E8BA2E8BA2E8BA3LL * ((uint64_t)&v12[-v9] >> 3) < v11)
      {
        if (v5 > 0x2E8BA2E8BA2E8BALL) {
          abort();
        }
        unint64_t v13 = 0x2E8BA2E8BA2E8BA3LL * ((v12 - v8) >> 3);
        uint64_t v14 = 2 * v13;
        if (2 * v13 <= v5) {
          uint64_t v14 = v5;
        }
        if (v13 >= 0x1745D1745D1745DLL) {
          unint64_t v15 = 0x2E8BA2E8BA2E8BALL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15 > 0x2E8BA2E8BA2E8BALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v16 = (char *)operator new(88 * v15);
        int64_t v17 = &v16[88 * v10];
        unint64_t v18 = &v16[88 * v6];
        uint64_t v19 = v17;
        do
        {
          *((void *)v19 + 6) = 0LL;
          *((void *)v19 + 4) = 0LL;
          *((void *)v19 + 5) = v19 + 48;
          *(_OWORD *)uint64_t v19 = 0uLL;
          *((_OWORD *)v19 + 1) = 0uLL;
          *((_DWORD *)v19 + 8) = 1065353216;
          *((void *)v19 + 7) = 0LL;
          *((void *)v19 + 8) = 0LL;
          *((void *)v19 + 9) = 0LL;
          *((void *)v19 + 10) = 0LL;
          v19 += 88;
        }

        while (v19 != v18);
        unint64_t v20 = &v16[88 * v15];
        unint64_t v22 = *v87;
        uint64_t v21 = v87[1];
        if (v21 == *v87)
        {
          *unint64_t v87 = v17;
          v87[1] = v18;
          v87[2] = v20;
        }

        else
        {
          unint64_t v88 = v20;
          uint64_t v23 = 0LL;
          do
          {
            uint64_t v24 = &v17[v23];
            unsigned int v25 = &v21[v23];
            std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__hash_table( (uint64_t)&v17[v23 - 88],  (uint64_t *)&v21[v23 - 88]);
            *((void *)v24 - 6) = *(void *)&v21[v23 - 48];
            uint64_t v26 = &v21[v23 - 40];
            uint64_t v27 = *(void *)v26;
            *((void *)v24 - 5) = *(void *)v26;
            uint64_t v28 = (uint64_t)&v17[v23 - 40];
            uint64_t v29 = *(void *)&v21[v23 - 32];
            *((void *)v24 - 4) = v29;
            if (v29)
            {
              *(void *)(v27 + 16) = v28;
              *((void *)v25 - 6) = v26;
              *(void *)uint64_t v26 = 0LL;
              *((void *)v25 - 4) = 0LL;
            }

            else
            {
              *((void *)v24 - 6) = v28;
            }

            double v30 = &v17[v23];
            char v31 = &v21[v23];
            *((void *)v30 - 3) = 0LL;
            *((void *)v30 - 2) = 0LL;
            *((void *)v30 - 1) = 0LL;
            *(_OWORD *)(v30 - 24) = *(_OWORD *)&v21[v23 - 24];
            *((void *)v30 - 1) = *(void *)&v21[v23 - 8];
            *((void *)v31 - 3) = 0LL;
            *((void *)v31 - 2) = 0LL;
            *((void *)v31 - 1) = 0LL;
            v23 -= 88LL;
          }

          while (&v21[v23] != v22);
          uint64_t v32 = &v17[v23];
          uint64_t v33 = *v87;
          uint64_t v21 = v87[1];
          *unint64_t v87 = v32;
          v87[1] = v18;
          v87[2] = v88;
          uint64_t v7 = (float *)&unk_318000;
          if (v21 != v33)
          {
            do
            {
              v21 -= 88;
              std::allocator<ProgramAddressHelper::PerRingBufferProgramInfo>::destroy[abi:nn180100]((uint64_t)v21);
            }

            while (v21 != v33);
            uint64_t v21 = v33;
          }
        }

        if (v21) {
          operator delete(v21);
        }
        uint64_t v35 = (uint64_t *)v87;
        unint64_t v34 = (unint64_t)v87[1];
        goto LABEL_36;
      }

      unint64_t v34 = v9 + 88 * v11;
      do
      {
        *(void *)(v9 + 48) = 0LL;
        *(void *)(v9 + 32) = 0LL;
        *(void *)(v9 + 40) = v9 + 48;
        *(_OWORD *)uint64_t v9 = 0uLL;
        *(_OWORD *)(v9 + 16) = 0uLL;
        *(_DWORD *)(v9 + 32) = 1065353216;
        *(void *)(v9 + 56) = 0LL;
        *(void *)(v9 + 64) = 0LL;
        *(void *)(v9 + 72) = 0LL;
        *(void *)(v9 + 80) = 0LL;
        v9 += 88LL;
      }

      while (v9 != v34);
    }

    uint64_t v35 = (uint64_t *)v87;
    v87[1] = (char *)v34;
    goto LABEL_36;
  }

void sub_18C82C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void GRCPerFrameData::EvaluatePerRingBufferSamples(GRCPerFrameData *this)
{
  __int128 v561 = 0u;
  __int128 v562 = 0u;
  __int128 v563 = 0u;
  __int128 v564 = 0u;
  obunint64_t j = (id)objc_claimAutoreleasedReturnValue([**((id **)this + 61) allKeys]);
  unsigned int v2 = this;
  id v525 = [obj countByEnumeratingWithState:&v561 objects:v589 count:16];
  if (v525)
  {
    __int128 v533 = (char *)this + 448;
    uint64_t v523 = *(void *)v562;
    do
    {
      for (unint64_t i = 0LL; i != v525; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v562 != v523) {
          objc_enumerationMutation(obj);
        }
        id v3 = *(void **)(*((void *)&v561 + 1) + 8LL * (void)i);
        v551 = (void *)objc_claimAutoreleasedReturnValue([**((id **)v2 + 61) objectForKeyedSubscript:v3]);
        unsigned int v4 = [v3 unsignedIntValue];
        int64x2_t v530 = v3;
        LODWORD(v586) = v4;
        id v552 = v551;
        unsigned int context = objc_autoreleasePoolPush();
        unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v552 allKeys]);
        unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [v5 count]));
        int64x2_t v571 = 0uLL;
        *(void *)&__int128 v572 = 0LL;
        v555 = v6;
        unint64_t v7 = (unint64_t)[v6 count];
        uint64_t v8 = v571.i64[0];
        if (v7 > (uint64_t)(v572 - v571.i64[0]) >> 3)
        {
          if (v7 >> 61) {
            abort();
          }
          uint64_t v9 = v571.i64[1];
          v605 = &v572;
          unint64_t v10 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,unsigned int>>>(v7);
          id v12 = (void *)v571.i64[1];
          unint64_t v13 = (void *)v571.i64[0];
          if (v571.i64[1] == v571.i64[0])
          {
            int64x2_t v16 = vdupq_n_s64(v571.u64[1]);
            uint64_t v14 = &v10[(v9 - v8) & 0xFFFFFFFFFFFFFFF8LL];
          }

          else
          {
            uint64_t v14 = &v10[(v9 - v8) & 0xFFFFFFFFFFFFFFF8LL];
            do
            {
              uint64_t v15 = *--v12;
              *id v12 = 0LL;
              *((void *)v14 - 1) = v15;
              v14 -= 8;
            }

            while (v12 != v13);
            int64x2_t v16 = v571;
          }

          v571.i64[0] = (uint64_t)v14;
          v571.i64[1] = (uint64_t)&v10[(v9 - v8) & 0xFFFFFFFFFFFFFFF8LL];
          int64x2_t v603 = v16;
          int64_t v17 = (void *)v572;
          *(void *)&__int128 v572 = &v10[8 * v11];
          v604 = v17;
          v602 = (void **)v16.i64[0];
          std::__split_buffer<std::unique_ptr<GRCPerFrameData::PriorityQueueElement>>::~__split_buffer((uint64_t)&v602);
        }

        __int128 v592 = 0u;
        *(_OWORD *)__p = 0u;
        __int128 v590 = 0u;
        __int128 v591 = 0u;
        id v18 = v5;
        uint64_t v19 = 0LL;
        uint64_t v20 = 0LL;
        id v21 = [v18 countByEnumeratingWithState:&v590 objects:&v602 count:16];
        if (v21)
        {
          v558 = 0LL;
          uint64_t v22 = *(void *)v591;
          do
          {
            for (unint64_t j = 0LL; j != v21; unint64_t j = (char *)j + 1)
            {
              if (*(void *)v591 != v22) {
                objc_enumerationMutation(v18);
              }
              uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( [v552 objectForKeyedSubscript:*(void *)(*((void *)&v590 + 1) + 8 * (void)j)]);
              [v555 addObject:v24];

              unsigned int v25 = operator new(0x68uLL);
              uint64_t v26 = v25;
              v25[12] = 0LL;
              *((_OWORD *)v25 + 4) = 0u;
              *((_OWORD *)v25 + 5) = 0u;
              *((_OWORD *)v25 + 2) = 0u;
              *((_OWORD *)v25 + 3) = 0u;
              *(_OWORD *)unsigned int v25 = 0u;
              *((_OWORD *)v25 + 1) = 0u;
              uint64_t v27 = v571.i64[1];
              if (v571.i64[1] >= (unint64_t)v572)
              {
                uint64_t v30 = (v571.i64[1] - v571.i64[0]) >> 3;
                uint64_t v29 = this;
                unint64_t v31 = (uint64_t)(v572 - v571.i64[0]) >> 2;
                if (v31 <= v30 + 1) {
                  unint64_t v31 = v30 + 1;
                }
                else {
                  unint64_t v32 = v31;
                }
                v575 = (char *)&v572;
                if (v32) {
                  unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,unsigned int>>>(v32);
                }
                else {
                  uint64_t v33 = 0LL;
                }
                unint64_t v34 = (void *)(v32 + 8 * v30);
                uint64_t v35 = (void *)(v32 + 8 * v33);
                v574[3] = v35;
                void *v34 = v26;
                uint64_t v28 = v34 + 1;
                v574[2] = v34 + 1;
                uint64_t v36 = (void *)v571.i64[1];
                float v37 = (void *)v571.i64[0];
                if (v571.i64[1] == v571.i64[0])
                {
                  int64x2_t v39 = vdupq_n_s64(v571.u64[1]);
                }

                else
                {
                  do
                  {
                    uint64_t v38 = *--v36;
                    *uint64_t v36 = 0LL;
                    *--unint64_t v34 = v38;
                  }

                  while (v36 != v37);
                  int64x2_t v39 = v571;
                  uint64_t v35 = v574[3];
                  uint64_t v28 = v574[2];
                }

                v571.i64[0] = (uint64_t)v34;
                v571.i64[1] = (uint64_t)v28;
                *(int64x2_t *)&v574[1] = v39;
                uint64_t v40 = (void *)v572;
                *(void *)&__int128 v572 = v35;
                v574[3] = v40;
                v574[0] = (void *)v39.i64[0];
                std::__split_buffer<std::unique_ptr<GRCPerFrameData::PriorityQueueElement>>::~__split_buffer((uint64_t)v574);
              }

              else
              {
                *(void *)v571.i64[1] = v25;
                uint64_t v28 = (void *)(v27 + 8);
                uint64_t v29 = this;
              }

              v571.i64[1] = (uint64_t)v28;
              uint64_t v1 = *(v28 - 1);
              *(_DWORD *)uint64_t v1 = (((unint64_t)v28 - v571.i64[0]) >> 3) - 1;
              float v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v555, "objectAtIndexedSubscript:"));
              GRCPerFrameData::FindNextMarker((uint64_t)v29, v41, *(_DWORD *)(v1 + 4), *(_DWORD *)(v1 + 8), v1);

              uint64_t v42 = *(void *)(v571.i64[1] - 8);
              if (v20 >= v558)
              {
                uint64_t v43 = (v20 - v19) >> 3;
                unint64_t v44 = v43 + 1;
                if ((v558 - v19) >> 2 > v44) {
                  unint64_t v44 = (v558 - v19) >> 2;
                }
                else {
                  unint64_t v45 = v44;
                }
                if (v45) {
                  unint64_t v45 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,unsigned int>>>(v45);
                }
                else {
                  uint64_t v46 = 0LL;
                }
                uint64_t v1 = v45 + 8 * v43;
                *(void *)uint64_t v1 = v42;
                int v47 = (char *)(v1 + 8);
                while (v20 != v19)
                {
                  uint64_t v48 = *((void *)v20 - 1);
                  v20 -= 8;
                  *(void *)(v1 - 8) = v48;
                  v1 -= 8LL;
                }

                v558 = (char *)(v45 + 8 * v46);
                if (v19) {
                  operator delete(v19);
                }
                uint64_t v19 = (char *)v1;
                uint64_t v20 = v47;
              }

              else
              {
                *(void *)uint64_t v20 = v42;
                v20 += 8;
              }

              std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,GRCPerFrameData::GreaterPQElement &,std::__wrap_iter<GRCPerFrameData::PriorityQueueElement **>>( (BOOL)v19,  (uint64_t)v20,  (v20 - v19) >> 3);
            }

            id v21 = [v18 countByEnumeratingWithState:&v590 objects:&v602 count:16];
          }

          while (v21);
          unsigned int v4 = v586;
        }

        else
        {
          v558 = 0LL;
        }

        v537 = (char *)std::__hash_table<std::__hash_value_type<unsigned int,RingBufferSampledData>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,RingBufferSampledData>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( (uint64_t)v533,  v4,  &v586);
        uint64_t v49 = *((void *)this + 61);
        uint64_t v50 = (uint64_t *)(v49 + 8);
        unint64_t v51 = *(void *)(v49 + 16);
        if (v51)
        {
          uint8x8_t v52 = (uint8x8_t)vcnt_s8((int8x8_t)v51);
          v52.i16[0] = vaddlv_u8(v52);
          if (v52.u32[0] > 1uLL)
          {
            uint64_t v1 = v4;
            if (v51 <= v4) {
              uint64_t v1 = v4 % v51;
            }
          }

          else
          {
            uint64_t v1 = ((_DWORD)v51 - 1) & v4;
          }

          uint64_t v53 = *(void ***)(*v50 + 8 * v1);
          if (v53)
          {
            unint64_t v54 = *v53;
            if (*v53)
            {
              do
              {
                unint64_t v55 = v54[1];
                if (v55 == v4)
                {
                  if (*((_DWORD *)v54 + 4) == v4) {
                    goto LABEL_94;
                  }
                }

                else
                {
                  if (v52.u32[0] > 1uLL)
                  {
                    if (v55 >= v51) {
                      v55 %= v51;
                    }
                  }

                  else
                  {
                    v55 &= v51 - 1;
                  }

                  if (v55 != v1) {
                    break;
                  }
                }

                unint64_t v54 = (void *)*v54;
              }

              while (v54);
            }
          }
        }

        unint64_t v54 = operator new(0x20uLL);
        void *v54 = 0LL;
        v54[1] = v4;
        *((_DWORD *)v54 + 4) = v4;
        v54[3] = 0LL;
        float v56 = (float)(unint64_t)(*(void *)(v49 + 32) + 1LL);
        float v57 = *(float *)(v49 + 40);
        if (!v51 || (float)(v57 * (float)v51) < v56)
        {
          BOOL v58 = (v51 & (v51 - 1)) != 0;
          if (v51 < 3) {
            BOOL v58 = 1LL;
          }
          unint64_t v59 = v58 | (2 * v51);
          unint64_t v60 = vcvtps_u32_f32(v56 / v57);
          if (v59 <= v60) {
            size_t v61 = v60;
          }
          else {
            size_t v61 = v59;
          }
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( v49 + 8,  v61);
          unint64_t v51 = *(void *)(v49 + 16);
          if ((v51 & (v51 - 1)) != 0)
          {
            if (v51 <= v4) {
              uint64_t v1 = v4 % v51;
            }
            else {
              uint64_t v1 = v4;
            }
          }

          else
          {
            uint64_t v1 = ((_DWORD)v51 - 1) & v4;
          }
        }

        uint64_t v62 = *v50;
        uint64_t v63 = *(void **)(*v50 + 8 * v1);
        if (v63)
        {
          void *v54 = *v63;
LABEL_92:
          void *v63 = v54;
          goto LABEL_93;
        }

        void *v54 = *(void *)(v49 + 24);
        *(void *)(v49 + 24) = v54;
        *(void *)(v62 + 8 * v1) = v49 + 24;
        if (*v54)
        {
          unint64_t v64 = *(void *)(*v54 + 8LL);
          if ((v51 & (v51 - 1)) != 0)
          {
            if (v64 >= v51) {
              v64 %= v51;
            }
          }

          else
          {
            v64 &= v51 - 1;
          }

          uint64_t v63 = (void *)(*v50 + 8 * v64);
          goto LABEL_92;
        }

void sub_18FC24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20, uint64_t a21, void *a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, void *a27, void *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, void *__p, uint64_t a38, uint64_t a39, void *a40, uint64_t a41, uint64_t a42, char a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, void *a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a40) {
    operator delete(a40);
  }

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a43);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a49);
  if (v68) {
    operator delete(v68);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a27) {
    operator delete(a27);
  }

  if (a59) {
    operator delete(a59);
  }

  if (a62) {
    operator delete(a62);
  }

  unsigned int v70 = (void *)a65;
  if (v70) {
    operator delete(v70);
  }
  if (a28) {
    operator delete(a28);
  }
  if (a68) {
    operator delete(a68);
  }
  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void std::vector<BufferView2D<double>>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5)
  {
    int64_t v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    unsigned int v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<GTMMappedBufferBlock>>(a2);
    unint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFE0LL];
    unint64_t v7 = &v4[32 * v6];
    uint64_t v9 = (char *)*a1;
    uint64_t v8 = (char *)a1[1];
    unint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        __int128 v11 = *((_OWORD *)v8 - 1);
        *((_OWORD *)v10 - 2) = *((_OWORD *)v8 - 2);
        *((_OWORD *)v10 - 1) = v11;
        v10 -= 32;
        v8 -= 32;
      }

      while (v8 != v9);
      uint64_t v8 = (char *)*a1;
    }

    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8) {
      operator delete(v8);
    }
  }

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,RingBufferSampledData>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,RingBufferSampledData>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & a2;
    }

    uint64_t v9 = *(uint64_t **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = *(void *)i)
      {
        unint64_t v11 = *(void *)(i + 8);
        if (v11 == a2)
        {
          if (*(_DWORD *)(i + 16) == a2) {
            return i;
          }
        }

        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }

          else
          {
            v11 &= v7 - 1;
          }

          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }

  id v12 = (void *)(a1 + 16);
  unint64_t v13 = operator new(0x88uLL);
  v35[0] = (uint64_t)v13;
  v35[1] = a1 + 16;
  *unint64_t v13 = 0LL;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = *a3;
  *((_OWORD *)v13 + 2) = 0u;
  *((_OWORD *)v13 + 3) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  *((_OWORD *)v13 + 5) = 0u;
  *((_OWORD *)v13 + 6) = 0u;
  *((_OWORD *)v13 + 7) = 0u;
  v13[16] = 0LL;
  *((_DWORD *)v13 + 6) = 0;
  char v36 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v6 = v3;
    goto LABEL_64;
  }

  BOOL v16 = 1LL;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    int8x8_t prime = (int8x8_t)v18;
  }
  else {
    int8x8_t prime = (int8x8_t)v17;
  }
  if (*(void *)&prime == 1LL)
  {
    int8x8_t prime = (int8x8_t)2LL;
  }

  else if ((*(void *)&prime & (*(void *)&prime - 1LL)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *(void *)(a1 + 8);
  }

  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      unint64_t v26 = std::__next_prime(v26);
    }

    else
    {
      uint64_t v28 = 1LL << -(char)__clz(v26 - 1);
      if (v26 >= 2) {
        unint64_t v26 = v28;
      }
    }

    if (*(void *)&prime <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *(void *)(a1 + 8);
      goto LABEL_60;
    }

    if (!*(void *)&prime)
    {
      unint64_t v34 = *(void **)a1;
      *(void *)a1 = 0LL;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0LL;
      *(void *)(a1 + 8) = 0LL;
      goto LABEL_60;
    }
  }

  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v20 = operator new(8LL * *(void *)&prime);
  id v21 = *(void **)a1;
  *(void *)a1 = v20;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = 0LL;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v22++) = 0LL;
  while (*(void *)&prime != v22);
  uint64_t v23 = (void *)*v12;
  if (*v12)
  {
    unint64_t v24 = v23[1];
    uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&prime) {
        v24 %= *(void *)&prime;
      }
    }

    else
    {
      v24 &= *(void *)&prime - 1LL;
    }

    *(void *)(*(void *)a1 + 8 * v24) = v12;
    uint64_t v29 = (void *)*v23;
    if (*v23)
    {
      do
      {
        unint64_t v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(void *)&prime) {
            v30 %= *(void *)&prime;
          }
        }

        else
        {
          v30 &= *(void *)&prime - 1LL;
        }

        if (v30 != v24)
        {
          if (!*(void *)(*(void *)a1 + 8 * v30))
          {
            *(void *)(*(void *)a1 + 8 * v30) = v23;
            goto LABEL_56;
          }

          *uint64_t v23 = *v29;
          *uint64_t v29 = **(void **)(*(void *)a1 + 8 * v30);
          **(void **)(*(void *)a1 + 8 * v30) = v29;
          uint64_t v29 = v23;
        }

        unint64_t v30 = v24;
LABEL_56:
        uint64_t v23 = v29;
        uint64_t v29 = (void *)*v29;
        unint64_t v24 = v30;
      }

      while (v29);
    }
  }

  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }

  else
  {
    unint64_t v6 = ((_DWORD)v7 - 1) & v6;
  }

void sub_190690(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

char **BufferView2D<double>::BufferView2D(char **a1, void *a2, char *a3)
{
  id v5 = a2;
  unint64_t v6 = (char *)[v5 mutableBytes];
  *a1 = v6;
  if (a3)
  {
    unint64_t v7 = (unint64_t)[v5 length];
    unint64_t v6 = *a1;
    unint64_t v8 = v7 / (8 * (uint64_t)a3);
  }

  else
  {
    unint64_t v8 = 0LL;
  }

  a1[1] = &v6[8 * v8 * (void)a3];
  a1[2] = (char *)v8;
  a1[3] = a3;

  return a1;
}

void sub_19071C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *,false>( uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
LABEL_1:
  unsigned int v96 = (__int128 *)(a2 - 24);
  unint64_t v7 = a1;
  while (2)
  {
    a1 = v7;
    uint64_t v8 = a2 - v7;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v7) >> 3);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return *(double *)&v27;
      case 2uLL:
        if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( v96,  *(void *)v7,  *(_DWORD *)(v7 + 16)))
        {
          __int128 v41 = *(_OWORD *)v7;
          uint64_t v106 = *(void *)(v7 + 16);
          __int128 v105 = v41;
          __int128 v42 = *v96;
          *(void *)(v7 + 16) = *(void *)(a2 - 8);
          *(_OWORD *)unint64_t v7 = v42;
          __int128 v27 = v105;
          *(void *)(a2 - 8) = v106;
          __int128 *v96 = v27;
        }

        return *(double *)&v27;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>( (__int128 *)v7,  (_DWORD *)(v7 + 24),  v96);
        return *(double *)&v27;
      case 4uLL:
        *(void *)&__int128 v27 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>( v7,  (_DWORD *)(v7 + 24),  v7 + 48,  (uint64_t)v96).n128_u64[0];
        return *(double *)&v27;
      case 5uLL:
        *(void *)&__int128 v27 = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>( v7,  (_DWORD *)(v7 + 24),  (_DWORD *)(v7 + 48),  (_DWORD *)(v7 + 72),  (uint64_t)v96).n128_u64[0];
        return *(double *)&v27;
      default:
        if (v8 <= 575)
        {
          uint64_t v43 = (_DWORD *)(v7 + 24);
          BOOL v45 = v7 == a2 || v43 == (_DWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v45)
            {
              uint64_t v46 = 0LL;
              int v47 = (_DWORD *)v7;
              do
              {
                uint64_t v48 = *(void *)v47;
                unsigned int v49 = v47[4];
                int v47 = v43;
                if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(v43, v48, v49))
                {
                  __int128 v50 = *(_OWORD *)v47;
                  uint64_t v106 = *((void *)v47 + 2);
                  __int128 v105 = v50;
                  uint64_t v51 = v46;
                  while (1)
                  {
                    uint64_t v52 = v7 + v51;
                    *(_OWORD *)(v52 + 24) = *(_OWORD *)(v7 + v51);
                    *(void *)(v52 + 40) = *(void *)(v7 + v51 + 16);
                    if (!v51) {
                      break;
                    }
                    v51 -= 24LL;
                    if (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( &v105,  *(void *)(v52 - 24),  *(_DWORD *)(v52 - 8)))
                    {
                      uint64_t v53 = v7 + v51 + 24;
                      goto LABEL_73;
                    }
                  }

                  uint64_t v53 = v7;
LABEL_73:
                  __int128 v27 = v105;
                  *(void *)(v53 + 16) = v106;
                  *(_OWORD *)uint64_t v53 = v27;
                }

                uint64_t v43 = v47 + 6;
                v46 += 24LL;
              }

              while (v47 + 6 != (_DWORD *)a2);
            }
          }

          else if (!v45)
          {
            do
            {
              uint64_t v85 = *(void *)a1;
              unsigned int v86 = *(_DWORD *)(a1 + 16);
              a1 = (uint64_t)v43;
              if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(v43, v85, v86))
              {
                __int128 v87 = *(_OWORD *)a1;
                uint64_t v106 = *(void *)(a1 + 16);
                __int128 v105 = v87;
                uint64_t v88 = a1;
                do
                {
                  uint64_t v89 = v88 - 24;
                  *(_OWORD *)uint64_t v88 = *(_OWORD *)(v88 - 24);
                  *(void *)(v88 + 16) = *(void *)(v88 - 8);
                  BOOL v90 = GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( &v105,  *(void *)(v88 - 48),  *(_DWORD *)(v88 - 32));
                  uint64_t v88 = v89;
                }

                while (v90);
                __int128 v27 = v105;
                *(void *)(v89 + 16) = v106;
                *(_OWORD *)uint64_t v89 = v27;
              }

              uint64_t v43 = (_DWORD *)(a1 + 24);
            }

            while (a1 + 24 != a2);
          }

          return *(double *)&v27;
        }

        if (!a3)
        {
          if (v7 != a2)
          {
            int64_t v54 = (v9 - 2) >> 1;
            int64_t v102 = v54;
            unint64_t v92 = a2;
            do
            {
              int64_t v55 = v54;
              if (v102 >= v54)
              {
                uint64_t v56 = (2 * v54) | 1;
                uint64_t v57 = a1 + 24 * v56;
                if (2 * v54 + 2 < (uint64_t)v9
                  && GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( (_DWORD *)(a1 + 24 * v56),  *(void *)(v57 + 24),  *(_DWORD *)(v57 + 40)))
                {
                  v57 += 24LL;
                  uint64_t v56 = 2 * v55 + 2;
                }

                uint64_t v58 = a1 + 24 * v55;
                uint64_t v59 = *(void *)v58;
                unsigned int v60 = *(_DWORD *)(v58 + 16);
                if (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( (_DWORD *)v57,  *(void *)v58,  v60))
                {
                  uint64_t v97 = *(void *)(v58 + 8);
                  int64_t v100 = v55;
                  int v94 = *(_DWORD *)(v58 + 20);
                  do
                  {
                    uint64_t v61 = v57;
                    __int128 v62 = *(_OWORD *)v57;
                    *(void *)(v58 + 16) = *(void *)(v57 + 16);
                    *(_OWORD *)uint64_t v58 = v62;
                    if (v102 < v56) {
                      break;
                    }
                    uint64_t v63 = (2 * v56) | 1;
                    uint64_t v57 = a1 + 24 * v63;
                    if (2 * v56 + 2 < (uint64_t)v9
                      && GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( (_DWORD *)(a1 + 24 * v63),  *(void *)(v57 + 24),  *(_DWORD *)(v57 + 40)))
                    {
                      v57 += 24LL;
                      uint64_t v63 = 2 * v56 + 2;
                    }

                    uint64_t v58 = v61;
                    uint64_t v56 = v63;
                  }

                  while (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( (_DWORD *)v57,  v59,  v60));
                  *(void *)uint64_t v61 = v59;
                  *(void *)(v61 + 8) = v97;
                  *(_DWORD *)(v61 + 16) = v60;
                  *(_DWORD *)(v61 + 20) = v94;
                  a2 = v92;
                  int64_t v55 = v100;
                }
              }

              int64_t v54 = v55 - 1;
            }

            while (v55);
            int64_t v64 = v8 / 0x18uLL;
            do
            {
              unint64_t v65 = a2;
              uint64_t v66 = 0LL;
              __int128 v67 = *(_OWORD *)a1;
              uint64_t v106 = *(void *)(a1 + 16);
              __int128 v105 = v67;
              uint64_t v68 = v64 - 2;
              if (v64 < 2) {
                uint64_t v68 = v64 - 1;
              }
              uint64_t v69 = v68 >> 1;
              uint64_t v70 = a1;
              do
              {
                uint64_t v71 = v70 + 24 * v66 + 24;
                uint64_t v72 = (2 * v66) | 1;
                uint64_t v73 = 2 * v66 + 2;
                if (v73 < v64
                  && GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( (_DWORD *)(v70 + 24 * v66 + 24),  *(void *)(v70 + 24 * v66 + 48),  *(_DWORD *)(v70 + 24 * v66 + 64)))
                {
                  v71 += 24LL;
                  uint64_t v72 = v73;
                }

                __int128 v74 = *(_OWORD *)v71;
                *(void *)(v70 + 16) = *(void *)(v71 + 16);
                *(_OWORD *)uint64_t v70 = v74;
                uint64_t v70 = v71;
                uint64_t v66 = v72;
              }

              while (v72 <= v69);
              unint64_t v75 = (__int128 *)(v65 - 24);
              if (v71 == v65 - 24)
              {
                unint64_t v77 = v65 - 24;
                __int128 v27 = v105;
                *(void *)(v71 + 16) = v106;
                *(_OWORD *)uint64_t v71 = v27;
              }

              else
              {
                __int128 v76 = *v75;
                *(void *)(v71 + 16) = *(void *)(v65 - 8);
                *(_OWORD *)uint64_t v71 = v76;
                __int128 v27 = v105;
                *(void *)(v65 - 8) = v106;
                unint64_t v77 = v65 - 24;
                *unint64_t v75 = v27;
                uint64_t v78 = v71 - a1 + 24;
                if (v78 >= 25)
                {
                  unint64_t v79 = (unint64_t)(-2 - 0x5555555555555555LL * (v78 >> 3)) >> 1;
                  unint64_t v80 = a1 + 24 * v79;
                  uint64_t v81 = *(void *)v71;
                  unsigned int v82 = *(_DWORD *)(v71 + 16);
                  if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( (_DWORD *)v80,  *(void *)v71,  v82))
                  {
                    uint64_t v98 = *(void *)(v71 + 8);
                    int v95 = *(_DWORD *)(v71 + 20);
                    do
                    {
                      uint64_t v83 = v80;
                      __int128 v27 = *(_OWORD *)v80;
                      *(void *)(v71 + 16) = *(void *)(v80 + 16);
                      *(_OWORD *)uint64_t v71 = v27;
                      if (!v79) {
                        break;
                      }
                      unint64_t v79 = (v79 - 1) >> 1;
                      unint64_t v80 = a1 + 24 * v79;
                      uint64_t v71 = v83;
                    }

                    while (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( (_DWORD *)v80,  v81,  v82));
                    *(void *)uint64_t v83 = v81;
                    *(void *)(v83 + 8) = v98;
                    *(_DWORD *)(v83 + 16) = v82;
                    *(_DWORD *)(v83 + 20) = v95;
                  }
                }
              }

              BOOL v84 = v64-- <= 2;
              a2 = v77;
            }

            while (!v84);
          }

          return *(double *)&v27;
        }

        unint64_t v10 = v7 + 24 * (v9 >> 1);
        if ((unint64_t)v8 < 0xC01)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>( (__int128 *)(v7 + 24 * (v9 >> 1)),  (_DWORD *)v7,  v96);
        }

        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>( (__int128 *)v7,  (_DWORD *)(v7 + 24 * (v9 >> 1)),  v96);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>( (__int128 *)(v7 + 24),  (_DWORD *)(v7 + 24 * (v9 >> 1) - 24),  (__int128 *)(a2 - 48));
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>( (__int128 *)(v7 + 48),  (_DWORD *)(v7 + 24 + 24 * (v9 >> 1)),  (__int128 *)(a2 - 72));
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>( (__int128 *)(v7 + 24 * (v9 >> 1) - 24),  (_DWORD *)(v7 + 24 * (v9 >> 1)),  (__int128 *)(v7 + 24 + 24 * (v9 >> 1)));
          __int128 v11 = *(_OWORD *)v7;
          uint64_t v106 = *(void *)(v7 + 16);
          __int128 v105 = v11;
          uint64_t v12 = *(void *)(v10 + 16);
          *(_OWORD *)unint64_t v7 = *(_OWORD *)v10;
          *(void *)(v7 + 16) = v12;
          __int128 v13 = v105;
          *(void *)(v10 + 16) = v106;
          *(_OWORD *)unint64_t v10 = v13;
        }

        --a3;
        uint64_t v14 = *(void *)v7;
        if ((a4 & 1) == 0)
        {
          unsigned int v15 = *(_DWORD *)(a1 + 16);
          if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( (_DWORD *)(a1 - 24),  *(void *)a1,  v15))
          {
            goto LABEL_11;
          }

          __int128 v28 = *(_OWORD *)a1;
          uint64_t v104 = *(void *)(a1 + 16);
          __int128 v103 = v28;
          if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( &v103,  *(void *)(a2 - 24),  *(_DWORD *)(a2 - 8)))
          {
            unint64_t v7 = a1;
            do
            {
              uint64_t v29 = *(void *)(v7 + 24);
              v7 += 24LL;
            }

            while (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( &v103,  v29,  *(_DWORD *)(v7 + 16)));
          }

          else
          {
            unint64_t v30 = a1 + 24;
            do
            {
              unint64_t v7 = v30;
              if (v30 >= a2) {
                break;
              }
              BOOL v31 = GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( &v103,  *(void *)v30,  *(_DWORD *)(v30 + 16));
              unint64_t v30 = v7 + 24;
            }

            while (!v31);
          }

          unint64_t v32 = a2;
          if (v7 < a2)
          {
            unint64_t v32 = a2;
            do
            {
              uint64_t v33 = *(void *)(v32 - 24);
              v32 -= 24LL;
            }

            while (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( &v103,  v33,  *(_DWORD *)(v32 + 16)));
          }

          while (v7 < v32)
          {
            __int128 v34 = *(_OWORD *)v7;
            uint64_t v106 = *(void *)(v7 + 16);
            __int128 v105 = v34;
            __int128 v35 = *(_OWORD *)v32;
            *(void *)(v7 + 16) = *(void *)(v32 + 16);
            *(_OWORD *)unint64_t v7 = v35;
            __int128 v36 = v105;
            *(void *)(v32 + 16) = v106;
            *(_OWORD *)unint64_t v32 = v36;
            do
            {
              uint64_t v37 = *(void *)(v7 + 24);
              v7 += 24LL;
            }

            while (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( &v103,  v37,  *(_DWORD *)(v7 + 16)));
            do
            {
              uint64_t v38 = *(void *)(v32 - 24);
              v32 -= 24LL;
            }

            while (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( &v103,  v38,  *(_DWORD *)(v32 + 16)));
          }

          int64x2_t v39 = (__int128 *)(v7 - 24);
          if (v7 - 24 != a1)
          {
            __int128 v40 = *v39;
            *(void *)(a1 + 16) = *(void *)(v7 - 8);
            *(_OWORD *)a1 = v40;
          }

          a4 = 0;
          __int128 v27 = v103;
          *(void *)(v7 - 8) = v104;
          __int128 *v39 = v27;
          continue;
        }

        unsigned int v15 = *(_DWORD *)(a1 + 16);
LABEL_11:
        uint64_t v101 = *(void *)(a1 + 8);
        int v99 = *(_DWORD *)(a1 + 20);
        BOOL v16 = (_DWORD *)a1;
        do
        {
          uint64_t v17 = (uint64_t)v16;
          v16 += 6;
        }

        while (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(v16, v14, v15));
        uint64_t v18 = a3;
        uint64_t v19 = (_DWORD *)a2;
        if (v17 == a1)
        {
          uint64_t v19 = (_DWORD *)a2;
          do
          {
            if (v16 >= v19) {
              break;
            }
            v19 -= 6;
          }

          while (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(v19, v14, v15));
        }

        else
        {
          do
            v19 -= 6;
          while (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(v19, v14, v15));
        }

        if (v16 < v19)
        {
          uint64_t v20 = v16;
          id v21 = v19;
          do
          {
            __int128 v105 = *(_OWORD *)v20;
            __int128 v22 = v105;
            uint64_t v106 = *((void *)v20 + 2);
            uint64_t v23 = v106;
            uint64_t v24 = *((void *)v21 + 2);
            *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
            *((void *)v20 + 2) = v24;
            *((void *)v21 + 2) = v23;
            *(_OWORD *)id v21 = v22;
            do
            {
              uint64_t v17 = (uint64_t)v20;
              v20 += 6;
            }

            while (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(v20, v14, v15));
            do
              v21 -= 6;
            while (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(v21, v14, v15));
          }

          while (v20 < v21);
        }

        if (v17 != a1)
        {
          __int128 v25 = *(_OWORD *)v17;
          *(void *)(a1 + 16) = *(void *)(v17 + 16);
          *(_OWORD *)a1 = v25;
        }

        *(void *)uint64_t v17 = v14;
        *(void *)(v17 + 8) = v101;
        *(_DWORD *)(v17 + 16) = v15;
        *(_DWORD *)(v17 + 20) = v99;
        a3 = v18;
        if (v16 < v19)
        {
LABEL_30:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *,false>( a1,  v17,  v18,  a4 & 1);
          a4 = 0;
          unint64_t v7 = v17 + 24;
          continue;
        }

        BOOL v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>( a1,  v17);
        unint64_t v7 = v17 + 24;
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>( v17 + 24,  a2))
        {
          if (v26) {
            continue;
          }
          goto LABEL_30;
        }

        a2 = v17;
        if (!v26) {
          goto LABEL_1;
        }
        return *(double *)&v27;
    }
  }

BOOL GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( _DWORD *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v3 = *(_DWORD **)a1;
  unint64_t v4 = *(void *)(*(void *)a1 + 12LL);
  unint64_t v5 = *(void *)(a2 + 12);
  BOOL v6 = v4 >= v5;
  if (v4 == v5)
  {
    unsigned int v7 = v3[5];
    unsigned int v8 = *(_DWORD *)(a2 + 20);
    BOOL v6 = v7 >= v8;
    if (v7 == v8)
    {
      unsigned int v9 = *v3 & 0xF;
      BOOL v6 = v9 >= (*(_DWORD *)a2 & 0xFu);
      if (v9 == (*(_DWORD *)a2 & 0xF)) {
        BOOL v6 = a1[4] >= a3;
      }
    }
  }

  return !v6;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>( __int128 *a1, _DWORD *a2, __int128 *a3)
{
  BOOL v6 = GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( a2,  *(void *)a1,  *((_DWORD *)a1 + 4));
  BOOL result = GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(a3, *(void *)a2, a2[4]);
  if (v6)
  {
    if (result)
    {
      uint64_t v8 = *((void *)a1 + 2);
      __int128 v9 = *a1;
      uint64_t v10 = *((void *)a3 + 2);
      *a1 = *a3;
      *((void *)a1 + 2) = v10;
    }

    else
    {
      uint64_t v17 = *((void *)a1 + 2);
      __int128 v18 = *a1;
      uint64_t v19 = *((void *)a2 + 2);
      *a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = v19;
      *(_OWORD *)a2 = v18;
      *((void *)a2 + 2) = v17;
      BOOL result = GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(a3, *(void *)a2, v17);
      if (!result) {
        return result;
      }
      uint64_t v8 = *((void *)a2 + 2);
      __int128 v9 = *(_OWORD *)a2;
      uint64_t v20 = *((void *)a3 + 2);
      *(_OWORD *)a2 = *a3;
      *((void *)a2 + 2) = v20;
    }

    *a3 = v9;
    *((void *)a3 + 2) = v8;
  }

  else if (result)
  {
    uint64_t v11 = *((void *)a2 + 2);
    __int128 v12 = *(_OWORD *)a2;
    uint64_t v13 = *((void *)a3 + 2);
    *(_OWORD *)a2 = *a3;
    *((void *)a2 + 2) = v13;
    *a3 = v12;
    *((void *)a3 + 2) = v11;
    BOOL result = GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( a2,  *(void *)a1,  *((_DWORD *)a1 + 4));
    if (result)
    {
      uint64_t v14 = *((void *)a1 + 2);
      __int128 v15 = *a1;
      uint64_t v16 = *((void *)a2 + 2);
      *a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = v16;
      *(_OWORD *)a2 = v15;
      *((void *)a2 + 2) = v14;
    }
  }

  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>( uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( (_DWORD *)a4,  *(void *)a3,  *(_DWORD *)(a3 + 16)))
  {
    uint64_t v9 = *(void *)(a3 + 16);
    __int128 v10 = *(_OWORD *)a3;
    uint64_t v11 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v11;
    *(_OWORD *)a4 = v10;
    *(void *)(a4 + 16) = v9;
    if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( (_DWORD *)a3,  *(void *)a2,  a2[4]))
    {
      uint64_t v12 = *((void *)a2 + 2);
      __int128 v13 = *(_OWORD *)a2;
      uint64_t v14 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((void *)a2 + 2) = v14;
      *(_OWORD *)a3 = v13;
      *(void *)(a3 + 16) = v12;
      if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( a2,  *(void *)a1,  *(_DWORD *)(a1 + 16)))
      {
        uint64_t v15 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v16 = *((void *)a2 + 2);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v16;
        *(__n128 *)a2 = result;
        *((void *)a2 + 2) = v15;
      }
    }
  }

  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>( uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( (_DWORD *)a5,  *(void *)a4,  a4[4]))
  {
    uint64_t v11 = *((void *)a4 + 2);
    __int128 v12 = *(_OWORD *)a4;
    uint64_t v13 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *((void *)a4 + 2) = v13;
    *(_OWORD *)a5 = v12;
    *(void *)(a5 + 16) = v11;
    if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(a4, *(void *)a3, a3[4]))
    {
      uint64_t v14 = *((void *)a3 + 2);
      __int128 v15 = *(_OWORD *)a3;
      uint64_t v16 = *((void *)a4 + 2);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *((void *)a3 + 2) = v16;
      *(_OWORD *)a4 = v15;
      *((void *)a4 + 2) = v14;
      if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(a3, *(void *)a2, a2[4]))
      {
        uint64_t v17 = *((void *)a2 + 2);
        __int128 v18 = *(_OWORD *)a2;
        uint64_t v19 = *((void *)a3 + 2);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((void *)a2 + 2) = v19;
        *(_OWORD *)a3 = v18;
        *((void *)a3 + 2) = v17;
        if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( a2,  *(void *)a1,  *(_DWORD *)(a1 + 16)))
        {
          uint64_t v20 = *(void *)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v21 = *((void *)a2 + 2);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v21;
          *(__n128 *)a2 = result;
          *((void *)a2 + 2) = v20;
        }
      }
    }
  }

  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>( uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = a2 - 24;
      if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( (_DWORD *)(a2 - 24),  *(void *)a1,  *(_DWORD *)(a1 + 16)))
      {
        uint64_t v7 = *(void *)(a1 + 16);
        __int128 v8 = *(_OWORD *)a1;
        uint64_t v9 = *(void *)(v6 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(void *)(a1 + 16) = v9;
        *(_OWORD *)uint64_t v6 = v8;
        *(void *)(v6 + 16) = v7;
      }

      return 1LL;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>( (__int128 *)a1,  (_DWORD *)(a1 + 24),  (__int128 *)(a2 - 24));
      return 1LL;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>( a1,  (_DWORD *)(a1 + 24),  a1 + 48,  a2 - 24);
      return 1LL;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>( a1,  (_DWORD *)(a1 + 24),  (_DWORD *)(a1 + 48),  (_DWORD *)(a1 + 72),  a2 - 24);
      return 1LL;
    default:
      uint64_t v10 = a1 + 48;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>( (__int128 *)a1,  (_DWORD *)(a1 + 24),  (__int128 *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1LL;
      }
      uint64_t v12 = 0LL;
      int v13 = 0;
      break;
  }

  while (1)
  {
    if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( (_DWORD *)v11,  *(void *)v10,  *(_DWORD *)(v10 + 16)))
    {
      __int128 v17 = *(_OWORD *)v11;
      uint64_t v18 = *(void *)(v11 + 16);
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        *(_OWORD *)(v15 + 72) = *(_OWORD *)(a1 + v14 + 48);
        *(void *)(v15 + 88) = *(void *)(a1 + v14 + 64);
        if (v14 == -48) {
          break;
        }
        v14 -= 24LL;
        if (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<( &v17,  *(void *)(v15 + 24),  *(_DWORD *)(v15 + 40)))
        {
          uint64_t v16 = a1 + v14 + 72;
          goto LABEL_12;
        }
      }

      uint64_t v16 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v16 = v17;
      *(void *)(v16 + 16) = v18;
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }

    uint64_t v10 = v11;
    v12 += 24LL;
    v11 += 24LL;
    if (v11 == a2) {
      return 1LL;
    }
  }

void *BufferView<ShaderProfilerSampleTimelineInfoEx>::BufferView(void *a1, void *a2)
{
  id v3 = a2;
  *a1 = [v3 mutableBytes];
  unint64_t v4 = (unint64_t)[v3 length];
  a1[1] = *a1 + 24 * (v4 / 0x18);
  a1[2] = v4 / 0x18;

  return a1;
}

void sub_1915F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *BufferView<ShaderProfilerSampleTimelineInfo>::BufferView(void *a1, void *a2)
{
  id v3 = a2;
  *a1 = [v3 mutableBytes];
  unint64_t v4 = (unint64_t)[v3 length];
  a1[1] = *a1 + 24 * (v4 / 0x18);
  a1[2] = v4 / 0x18;

  return a1;
}

void sub_191668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1916C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_191728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,RingBufferSampledData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,RingBufferSampledData>,void *>>>>::reset[abi:nn180100]( uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0LL;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16)) {
      RingBufferSampledData::~RingBufferSampledData((RingBufferSampledData *)(v1 + 24));
    }
    operator delete((void *)v1);
  }

__n128 __Block_byref_object_copy__357(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0LL;
  a1[3].n128_u64[1] = 0LL;
  a1[4].n128_u64[0] = 0LL;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0LL;
  a2[3].n128_u64[1] = 0LL;
  a2[4].n128_u64[0] = 0LL;
  return result;
}

void __Block_byref_object_dispose__358(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

void ___ZN15GRCPerFrameData23EvaluateDerivedLimitersEj_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  id v3 = objc_autoreleasePoolPush();
  unint64_t v5 = (void *)objc_opt_new(&OBJC_CLASS___DYJSScriptingContext, v4);
  id v6 = *(id *)(a1 + 40);
  id v7 = v5;
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 context]);
  [v8 setObject:&__block_literal_global_362 forKeyedSubscript:@"ErrorLog"];

  LODWORD(v8) = [v7 evaluteScript:v6 scriptURL:0];
  if (!(_DWORD)v8) {
    goto LABEL_25;
  }
  if (*(void *)(a1 + 48)) {
    objc_msgSend(v7, "setValues:");
  }
  objc_msgSend( v7,  "setRawArrayValues:withUint64Values:andNumCounters:",  @"_RawTimestampDelta",  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 48)
  + 8 * (*(void *)(a1 + 72) / ((unint64_t)**(unsigned int **)(a1 + 80) >> 26)),
    *(void *)(a1 + 88));
  uint64_t v9 = *(unsigned int **)(a1 + 80);
  unint64_t v10 = *(void *)(a1 + 88);
  unint64_t v11 = *v9;
  unint64_t v12 = v10 * (v11 >> 26);
  if (v12)
  {
    if (v12 >> 62) {
      abort();
    }
    int v13 = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v10 * (v11 >> 26));
    bzero(v13, 4 * v12);
    uint64_t v9 = *(unsigned int **)(a1 + 80);
    unint64_t v10 = *(void *)(a1 + 88);
    LODWORD(v11) = *v9;
    if (!v10) {
      goto LABEL_20;
    }
    goto LABEL_10;
  }

  int v13 = 0LL;
  if (v10)
  {
LABEL_10:
    LODWORD(v14) = 0;
    while (1)
    {
      LODWORD(v15) = v11 >> 26;
LABEL_19:
      unint64_t v14 = (v14 + 1);
      if (v10 <= v14) {
        goto LABEL_20;
      }
    }

    unint64_t v16 = 0LL;
    uint64_t v17 = *(void *)(*(void *)(v2 + 488) + 208LL);
    uint64_t v18 = (v14 * v15);
    while (1)
    {
      if (((*(void *)(v17 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
      {
        uint64_t v19 = *(void *)(a1 + 72);
        uint64_t v20 = *((void *)v9 + 1);
      }

      else
      {
        uint64_t v19 = *(void *)(a1 + 72);
        uint64_t v20 = *((void *)v9 + 1);
        if (*(void *)(a1 + 96))
        {
          int v21 = *(_DWORD *)(v20 + 4 * (v18 + v16 + v19)) - *(_DWORD *)(v20 + 4 * (v18 + v16 + v19 - v15));
          goto LABEL_18;
        }
      }

      int v21 = *(_DWORD *)(v20 + 4 * (v18 + v19 + v16));
LABEL_18:
      *((_DWORD *)v13 + (v18 + v16++)) = v21;
      unint64_t v11 = *v9;
      unint64_t v15 = v11 >> 26;
      if (v16 >= v11 >> 26) {
        goto LABEL_19;
      }
    }
  }

void sub_191B6C(_Unwind_Exception *a1)
{
  if (v2) {
    operator delete(v2);
  }

  _Unwind_Resume(a1);
}

void ___ZN15GRCPerFrameData19PrepareCounterNamesEP8NSStringP20DYJSScriptingContext_block_invoke( id a1, NSString *a2)
{
}

uint64_t std::__split_buffer<std::unique_ptr<GRCPerFrameData::PriorityQueueElement>>::~__split_buffer( uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void **)(i - 8);
    *(void *)(i - 8) = 0LL;
    if (v4) {
      std::default_delete<GRCPerFrameData::PriorityQueueElement>::operator()[abi:nn180100](v4);
    }
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::default_delete<GRCPerFrameData::PriorityQueueElement>::operator()[abi:nn180100](void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2)
  {
    __p[11] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void GRCPerFrameData::FindNextMarker(uint64_t a1, void *a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  id v58 = a2;
  __int128 v62 = 0LL;
  uint64_t v63 = 0LL;
  int64_t v64 = 0LL;
  std::vector<std::pair<unsigned int,unsigned int>>::reserve((void **)&v62, 2uLL);
  int v8 = 0;
  unint64_t v10 = v63;
  uint64_t v9 = v64;
  unint64_t v11 = a4;
  unint64_t v12 = v62;
LABEL_2:
  if ((unint64_t)[v58 count] <= a3)
  {
    if (v8 != 1)
    {
      *(void *)(a5 + 4) = -1LL;
      if (!v12) {
        goto LABEL_27;
      }
LABEL_26:
      uint64_t v63 = v12;
      operator delete(v12);
      goto LABEL_27;
    }

    *(void *)(a5 + 4) = (*(_DWORD *)(a5 + 4) + 1);
    id v33 = (id)objc_claimAutoreleasedReturnValue([v58 objectAtIndexedSubscript:*v12]);
    unint64_t v51 = ((unint64_t)[v33 length] >> 3) - v12[1];
    if (v51 >= 8)
    {
      uint64_t v52 = (char *)[v33 bytes] + 8 * v12[1];
      *(void *)(a5 + 88) = *(void *)(a5 + 80);
      __int128 v53 = *(_OWORD *)v52;
      __int128 v54 = *((_OWORD *)v52 + 1);
      __int128 v55 = *((_OWORD *)v52 + 3);
      *(_OWORD *)(a5 + 48) = *((_OWORD *)v52 + 2);
      *(_OWORD *)(a5 + 64) = v55;
      *(_OWORD *)(a5 + 16) = v53;
      *(_OWORD *)(a5 + 32) = v54;
      std::vector<unsigned long long>::reserve((void **)(a5 + 80), v51 - 8);
      std::vector<unsigned long long>::__assign_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>( (char *)(a5 + 80),  v52 + 64,  (uint64_t)&v52[8 * v51],  (uint64_t)(8 * v51 - 64) >> 3);
    }

void sub_192154( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v18) {
    operator delete(v18);
  }

  _Unwind_Resume(a1);
}

BOOL std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,GRCPerFrameData::GreaterPQElement &,std::__wrap_iter<GRCPerFrameData::PriorityQueueElement **>>( BOOL result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    BOOL v4 = result;
    unint64_t v5 = v3 >> 1;
    id v6 = (void **)(result + 8 * (v3 >> 1));
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v9 = (void *)(a2 - 8);
    int v8 = *(void **)(a2 - 8);
    __n128 result = GRCPerFrameData::GreaterPQElement::operator()(*v6, v8);
    if (result)
    {
      do
      {
        unint64_t v10 = v6;
        void *v9 = v7;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        id v6 = (void **)(v4 + 8 * v5);
        uint64_t v7 = (uint64_t)*v6;
        __n128 result = GRCPerFrameData::GreaterPQElement::operator()(*v6, v8);
        uint64_t v9 = v10;
      }

      while (result);
      *unint64_t v10 = v8;
    }
  }

  return result;
}

void GRCPerFrameData::AddLimiterCounterSample(uint64_t a1, unsigned int a2, __int128 *a3, int a4)
{
  unsigned int v55 = a2;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned int,RingBufferSampledData>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,RingBufferSampledData>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( a1 + 448,  a2,  &v55);
  if ((uint64_t)(*((void *)a3 + 9) - *((void *)a3 + 8)) >> 3 >= (unint64_t)*(unsigned int *)(v8 + 24) >> 26)
  {
    uint64_t v9 = v8;
    if (!a4) {
      goto LABEL_50;
    }
    BOOL v10 = GRCPerFrameData::AddDeferredKickSamples((ProgramAddressHelper *)a1, a2, a3);
    unsigned int v48 = a2;
    __int128 v11 = a3[1];
    __int128 v49 = *a3;
    __int128 v50 = v11;
    __int128 v12 = a3[3];
    __int128 v51 = a3[2];
    __int128 v52 = v12;
    std::vector<unsigned long long>::vector(&__p, (uint64_t)(a3 + 4));
    *(_DWORD *)(a1 + 352) = a2;
    *(_OWORD *)(a1 + 360) = v49;
    *(_OWORD *)(a1 + 376) = v50;
    *(_OWORD *)(a1 + 392) = v51;
    *(_OWORD *)(a1 + 408) = v52;
    if ((unsigned int *)(a1 + 352) != &v48) {
      std::vector<unsigned long long>::__assign_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>( (char *)(a1 + 424),  (char *)__p,  (uint64_t)v54,  (v54 - (_BYTE *)__p) >> 3);
    }
    if (__p)
    {
      __int128 v54 = __p;
      operator delete(__p);
    }

    if (v10)
    {
LABEL_50:
      if ([*(id *)(v9 + 88) length])
      {
        uint64_t v13 = [*(id *)(v9 + 88) mutableBytes];
        unint64_t v14 = (unint64_t)[*(id *)(v9 + 88) length];
        v13[6 * (v14 / 0x18) - 6] += 16;
      }

      *(_DWORD *)(v9 + 24) = *(_DWORD *)(v9 + 24) & 0xFC000000 | (*(_DWORD *)(v9 + 24) + 1) & 0x3FFFFFF;
      unint64_t v16 = (char *)*((void *)a3 + 8);
      unint64_t v15 = (char *)*((void *)a3 + 9);
      if (v15 - v16 >= 1)
      {
        uint64_t v17 = (v15 - v16) >> 3;
        unint64_t v19 = *(char **)(v9 + 40);
        uint64_t v18 = *(void *)(v9 + 48);
        if (v17 <= (v18 - (uint64_t)v19) >> 2)
        {
          if (v17 <= 0)
          {
            __int128 v29 = &v16[8 * v17];
            __int128 v30 = *(char **)(v9 + 40);
            __int128 v43 = &v19[4 * v17];
            __int128 v44 = &v30[-4 * v17];
            BOOL v45 = *(_DWORD **)(v9 + 40);
            if (v44 < v19)
            {
              BOOL v45 = *(_DWORD **)(v9 + 40);
              do
              {
                int v46 = *(_DWORD *)v44;
                v44 += 4;
                *v45++ = v46;
              }

              while (v44 < v19);
            }

            *(void *)(v9 + 40) = v45;
            if (v30 != v43) {
              memmove(&v30[-4 * ((v30 - v43) >> 2)], v19, v30 - v43);
            }
            for (; v16 != v29; v19 += 4)
            {
              uint64_t v47 = *(void *)v16;
              v16 += 8;
              *(_DWORD *)unint64_t v19 = v47;
            }
          }

          else
          {
            if (*((char **)a3 + 8) == v15)
            {
              id v27 = *(_DWORD **)(v9 + 40);
            }

            else
            {
              uint64_t v26 = (char *)*((void *)a3 + 8);
              id v27 = *(_DWORD **)(v9 + 40);
              do
              {
                uint64_t v28 = *(void *)v26;
                v26 += 8;
                *v27++ = v28;
              }

              while (v26 != v15);
            }

            *(void *)(v9 + 40) = v27;
          }
        }

        else
        {
          uint64_t v20 = *(void *)(v9 + 32);
          uint64_t v21 = (uint64_t)&v19[-v20] >> 2;
          uint64_t v22 = v18 - v20;
          uint64_t v23 = v22 >> 1;
          else {
            unint64_t v24 = v23;
          }
          if (v24) {
            unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v24);
          }
          else {
            uint64_t v25 = 0LL;
          }
          __int128 v31 = (_DWORD *)(v24 + 4 * v21);
          unint64_t v32 = (char *)&v31[v17];
          uint64_t v33 = 4 * v17;
          unint64_t v34 = v31;
          do
          {
            uint64_t v35 = *(void *)v16;
            v16 += 8;
            *v34++ = v35;
            v33 -= 4LL;
          }

          while (v33);
          uint64_t v36 = *(char **)(v9 + 32);
          if (v36 != v19)
          {
            id v37 = v19;
            do
            {
              int v38 = *((_DWORD *)v37 - 1);
              v37 -= 4;
              *--__int128 v31 = v38;
            }

            while (v37 != v36);
          }

          unint64_t v39 = v24 + 4 * v25;
          __int128 v40 = *(char **)(v9 + 40);
          int64_t v41 = v40 - v19;
          if (v40 != v19) {
            memmove(v32, v19, v40 - v19);
          }
          __int128 v42 = *(void **)(v9 + 32);
          *(void *)(v9 + 32) = v31;
          *(void *)(v9 + 40) = &v32[v41];
          *(void *)(v9 + 48) = v39;
          if (v42) {
            operator delete(v42);
          }
        }
      }

      [*(id *)(v9 + 56) appendBytes:(char *)a3 + 8 length:8];
    }
  }

void sub_1925C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL GRCPerFrameData::AddDeferredKickSamples(ProgramAddressHelper *a1, unsigned int a2, void *a3)
{
  uint64_t v238 = a3[8];
  uint64_t v241 = (char *)a3[9];
  uint64_t v232 = *((void *)a1 + 53);
  uint64_t v235 = *((void *)a1 + 54);
  uint64_t v3 = *((void *)a1 + 38);
  uint64_t v4 = *((void *)a1 + 39);
  if (-991146299 * ((unint64_t)(v4 - v3) >> 3))
  {
    unint64_t v5 = 0LL;
    id v216 = 0LL;
    unint64_t v6 = 0LL;
    unint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = v3 + 104 * v7;
      if ((unint64_t)v216 >= v6)
      {
        uint64_t v9 = v5;
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v216 - v5);
        unint64_t v11 = v10 + 1;
        if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        __int128 v12 = v9;
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v9) >> 3);
        if (2 * v13 > v11) {
          unint64_t v11 = 2 * v13;
        }
        if (v13 >= 0x555555555555555LL) {
          unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v14 = v11;
        }
        if (v14) {
          unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>>(v14);
        }
        else {
          uint64_t v15 = 0LL;
        }
        unint64_t v16 = v14 + 24 * v10;
        *(void *)unint64_t v16 = *(void *)(v8 + 16);
        *(_DWORD *)(v16 + 8) = 0;
        *(_DWORD *)(v16 + 12) = *(void *)(v8 + 96);
        *(void *)(v16 + 16) = v7;
        uint64_t v17 = v216;
        if (v216 == v12)
        {
          unint64_t v5 = (uint64_t *)(v14 + 24 * v10);
        }

        else
        {
          unint64_t v18 = v14 + 24 * v10;
          do
          {
            unint64_t v5 = (uint64_t *)(v18 - 24);
            __int128 v19 = *(_OWORD *)(v17 - 3);
            *(void *)(v18 - 8) = *(v17 - 1);
            *(_OWORD *)(v18 - 24) = v19;
            v17 -= 3;
            v18 -= 24LL;
          }

          while (v17 != v12);
        }

        unint64_t v6 = v14 + 24 * v15;
        id v216 = (uint64_t *)(v16 + 24);
        if (v12) {
          operator delete(v12);
        }
      }

      else
      {
        uint64_t *v216 = *(void *)(v8 + 16);
        *((_DWORD *)v216 + 2) = 0;
        *((_DWORD *)v216 + 3) = *(void *)(v8 + 96);
        v216[2] = v7;
        v216 += 3;
      }

      ++v7;
      uint64_t v3 = *((void *)a1 + 38);
      uint64_t v4 = *((void *)a1 + 39);
    }

    while (v7 < -991146299 * ((unint64_t)(v4 - v3) >> 3));
    uint64_t v20 = a1;
  }

  else
  {
    uint64_t v20 = a1;
    unint64_t v5 = 0LL;
    id v216 = 0LL;
    unint64_t v6 = 0LL;
  }

  uint64_t v21 = *((void *)v20 + 41);
  uint64_t v22 = *((void *)v20 + 42);
  if (-1431655765 * ((unint64_t)(v22 - v21) >> 5))
  {
    unint64_t v23 = 0LL;
    do
    {
      uint64_t v24 = *(void *)(v21 + 96 * v23 + 16) + 200LL;
      if ((unint64_t)v216 >= v6)
      {
        uint64_t v25 = v5;
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (v216 - v5);
        unint64_t v27 = v26 + 1;
        if (v26 + 1 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        uint64_t v28 = v25;
        unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v25) >> 3);
        if (2 * v29 > v27) {
          unint64_t v27 = 2 * v29;
        }
        if (v29 >= 0x555555555555555LL) {
          unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v30 = v27;
        }
        if (v30) {
          unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>>(v30);
        }
        else {
          uint64_t v31 = 0LL;
        }
        unint64_t v32 = (uint64_t *)(v30 + 24 * v26);
        *unint64_t v32 = v24;
        v32[1] = 0xFFFFFFFF00000001LL;
        v32[2] = v23;
        uint64_t v33 = v216;
        if (v216 == v28)
        {
          unint64_t v5 = (uint64_t *)(v30 + 24 * v26);
        }

        else
        {
          unint64_t v34 = v30 + 24 * v26;
          do
          {
            unint64_t v5 = (uint64_t *)(v34 - 24);
            __int128 v35 = *(_OWORD *)(v33 - 3);
            *(void *)(v34 - 8) = *(v33 - 1);
            *(_OWORD *)(v34 - 24) = v35;
            v33 -= 3;
            v34 -= 24LL;
          }

          while (v33 != v28);
        }

        unint64_t v6 = v30 + 24 * v31;
        id v216 = v32 + 3;
        if (v28) {
          operator delete(v28);
        }
      }

      else
      {
        uint64_t *v216 = v24;
        v216[1] = 0xFFFFFFFF00000001LL;
        v216[2] = v23;
        v216 += 3;
      }

      ++v23;
      uint64_t v21 = *((void *)a1 + 41);
      uint64_t v22 = *((void *)a1 + 42);
    }

    while (v23 < -1431655765 * ((unint64_t)(v22 - v21) >> 5));
    uint64_t v20 = a1;
    uint64_t v3 = *((void *)a1 + 38);
    uint64_t v4 = *((void *)a1 + 39);
  }

  if (v21 != v22 && v3 != v4)
  {
    unint64_t v36 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v216 - v5));
    if (v216 == v5) {
      uint64_t v37 = 0LL;
    }
    else {
      uint64_t v37 = v36;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *,false>( (uint64_t)v5,  (unint64_t *)v216,  v37,  1);
    uint64_t v3 = *((void *)v20 + 38);
    uint64_t v4 = *((void *)v20 + 39);
  }

  memset(v257, 0, sizeof(v257));
  id v212 = v5;
  if (v3 != v4)
  {
    unint64_t v38 = (uint64_t)(a3[9] - a3[8]) >> 3;
    v252[0] = 0LL;
    std::vector<unsigned long long>::resize(v257, v38, v252);
  }

  id v207 = (uint64_t *)((char *)v20 + 304);
  id v208 = (uint64_t *)((char *)v20 + 328);
  if (v5 != v216)
  {
    size_t v202 = &v241[-v238];
    uint64_t v203 = (_OWORD *)((char *)v20 + 360);
    uint64_t v201 = (char *)(v235 - v232);
    uint64_t v206 = *((void *)v20 + 46);
    double v39 = (double)(unint64_t)(a3[1] - v206);
    uint64_t v211 = (uint64_t)v20 + 448;
    id v217 = (void *)((char *)v20 + 224);
    int v209 = (void *)((char *)v20 + 64);
    uint64_t v205 = (void *)((char *)v20 + 104);
    double v40 = 0.0;
    int64_t v41 = v5;
    while (1)
    {
      int v42 = *((_DWORD *)v41 + 2);
      uint64_t v43 = v41[2];
      if (v42 != 1)
      {
        if (!v42)
        {
          id v213 = v41;
          uint64_t v44 = *v41;
          memset(v256, 0, 24);
          uint64_t v45 = *v207 + 104 * v43;
          unsigned int v46 = *(_DWORD *)v45;
          *(_OWORD *)uint64_t v252 = *(_OWORD *)(v45 + 8);
          *(_OWORD *)unint64_t v253 = *(_OWORD *)(v45 + 24);
          *(_OWORD *)size_t v254 = *(_OWORD *)(v45 + 40);
          __int128 v255 = *(_OWORD *)(v45 + 56);
          std::vector<unsigned long long>::__assign_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>( (char *)v256,  *(char **)(v45 + 72),  *(void *)(v45 + 80),  (uint64_t)(*(void *)(v45 + 80) - *(void *)(v45 + 72)) >> 3);
          if (v206 != v44 && *((void *)v20 + 53) != *((void *)v20 + 54) && *((_DWORD *)v20 + 88) == a2)
          {
            uint64_t v47 = (void *)*((void *)v20 + 46);
            BOOL v48 = v252[1] >= v47;
            __int128 v49 = (char *)((char *)v252[1] - (char *)v47);
            if (v49 != 0LL && v48 && (void *)a3[1] > v252[1] && (double)((unint64_t)v252[1] - v206) / v39 > 0.05)
            {
              __p = 0LL;
              unint64_t v250 = 0LL;
              unint64_t v251 = 0LL;
              __int128 v50 = v203[1];
              *(_OWORD *)uint64_t v246 = *v203;
              *(_OWORD *)&v246[16] = v50;
              __int128 v51 = v203[3];
              double v40 = (double)(unint64_t)v49 / v39;
              __int128 v247 = v203[2];
              __int128 v248 = v51;
              *(void **)&v246[8] = v252[1];
              if (v202 == v201)
              {
                *(void *)&v246[16] = (unint64_t)(v40 * (double)(unint64_t)a3[2]);
                std::vector<unsigned long long>::reserve(&__p, (uint64_t)(a3[9] - a3[8]) >> 3);
                uint64_t v52 = a3[8];
                if (((a3[9] - v52) & 0x7FFFFFFF8LL) != 0)
                {
                  unint64_t v53 = 0LL;
                  __int128 v54 = v257[0];
                  do
                  {
                    unint64_t v55 = (unint64_t)(v40 * (double)*(unint64_t *)(v52 + 8 * v53));
                    uint64_t v56 = *(void *)&v54[8 * v53];
                    *(void *)&v54[8 * v53] = v55;
                    if (((*(void *)(*(void *)(*((void *)v20 + 61) + 208LL) + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> v53) & 1) != 0) {
                      unint64_t v57 = v55 - v56;
                    }
                    else {
                      unint64_t v57 = (unint64_t)((1.0 - v40)
                    }
                    id v58 = v250;
                    if ((unint64_t)v250 >= v251)
                    {
                      unsigned int v60 = (char *)__p;
                      uint64_t v61 = (v250 - (_BYTE *)__p) >> 3;
                      unint64_t v62 = v61 + 1;
                      uint64_t v63 = v251 - (void)__p;
                      BOOL v48 = (unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8LL;
                      unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
                      if (!v48) {
                        unint64_t v64 = v62;
                      }
                      if (v64)
                      {
                        unint64_t v64 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,unsigned int>>>(v64);
                        unsigned int v60 = (char *)__p;
                        id v58 = v250;
                      }

                      else
                      {
                        uint64_t v65 = 0LL;
                      }

                      uint64_t v66 = (unint64_t *)(v64 + 8 * v61);
                      *uint64_t v66 = v57;
                      uint64_t v59 = (char *)(v66 + 1);
                      while (v58 != v60)
                      {
                        unint64_t v67 = *((void *)v58 - 1);
                        v58 -= 8;
                        *--uint64_t v66 = v67;
                      }

                      __p = v66;
                      unint64_t v250 = v59;
                      unint64_t v251 = v64 + 8 * v65;
                      if (v60) {
                        operator delete(v60);
                      }
                    }

                    else
                    {
                      *(void *)unint64_t v250 = v57;
                      uint64_t v59 = v58 + 8;
                    }

                    unint64_t v250 = v59;
                    ++v53;
                    uint64_t v52 = a3[8];
                  }

                  while (v53 < ((unint64_t)(a3[9] - v52) >> 3));
                }

                GRCPerFrameData::AddLimiterCounterSample(v20, a2, v246, 0LL);
                uint64_t v206 = *(void *)&v246[8];
                if (__p)
                {
                  unint64_t v250 = (char *)__p;
                  operator delete(__p);
                }
              }
            }
          }

          uint64_t v68 = v20;
          v259[0] = v46;
          uint64_t v69 = std::__hash_table<std::__hash_value_type<unsigned int,RingBufferSampledData>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,RingBufferSampledData>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( v211,  v46,  v259);
          unsigned int v70 = v254[0];
          unsigned int v71 = v253[2];
          uint64_t v72 = v252[1];
          ProgramAddressHelper::UpdateActiveEncoderRef(v68, v46, v254[0], v253[2], (unint64_t)v252[1]);
          uint64_t v73 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>( v205,  v70);
          if (v73) {
            int v74 = *((_DWORD *)v73 + 5);
          }
          else {
            int v74 = -1;
          }
          int v181 = *(_DWORD *)(v69 + 24) & 0x3FFFFFF;
          *(_DWORD *)uint64_t v246 = v71 & 0xF;
          *(_DWORD *)&v246[4] = v181;
          *(_DWORD *)&v246[8] = v74;
          *(void *)&v246[12] = v72;
          *(_DWORD *)&v246[20] = v70;
          objc_msgSend(*(id *)(v69 + 88), "appendBytes:length:", v246, 24, v201, v202, v203);
          *(void *)uint64_t v258 = *(void *)&v254[2];
          [*(id *)(v69 + 96) appendBytes:v258 length:24];
          uint64_t v182 = *((void *)v68 + 61);
          unint64_t v183 = *(void *)(v182 + 136);
          if (v183)
          {
            uint8x8_t v184 = (uint8x8_t)vcnt_s8((int8x8_t)v183);
            v184.i16[0] = vaddlv_u8(v184);
            if (v184.u32[0] > 1uLL)
            {
              unint64_t v185 = v70;
              if (v183 <= v70) {
                unint64_t v185 = v70 % v183;
              }
            }

            else
            {
              unint64_t v185 = ((_DWORD)v183 - 1) & v70;
            }

            uint64_t v186 = *(uint64_t ***)(*(void *)(v182 + 128) + 8 * v185);
            if (v186)
            {
              uint64_t v187 = *v186;
              if (v187)
              {
                int v244 = *((_DWORD *)v68 + 134);
                do
                {
                  unint64_t v188 = v187[1];
                  if (v188 == v70)
                  {
                    if (*((_DWORD *)v187 + 4) == v70)
                    {
                      uint64_t v190 = v187[3];
                      uint64_t v189 = v187[4];
                      while (v190 != v189)
                      {
                        unsigned int v191 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( *((void *)v68 + 61) + 168LL,  *(_DWORD *)v190,  (_DWORD *)v190)
                               + 5);
                        if (v191 != v70)
                        {
                          ProgramAddressHelper::UpdateActiveEncoderRef(v68, v46, v191, v71, (unint64_t)v72);
                          if (v244 != 2)
                          {
                            int v192 = *(_DWORD *)(v69 + 24) & 0x3FFFFFF;
                            *(_DWORD *)uint64_t v246 = v71 & 0xF;
                            *(_DWORD *)&v246[4] = v192;
                            *(_DWORD *)&v246[8] = *(_DWORD *)v190;
                            *(void *)&v246[12] = v72;
                            *(_DWORD *)&v246[20] = v191;
                            [*(id *)(v69 + 88) appendBytes:v246 length:24];
                            *(void *)uint64_t v258 = *(void *)(v190 + 8);
                            [*(id *)(v69 + 96) appendBytes:v258 length:24];
                          }
                        }

                        v190 += 16LL;
                      }

                      break;
                    }
                  }

                  else
                  {
                    if (v184.u32[0] > 1uLL)
                    {
                      if (v188 >= v183) {
                        v188 %= v183;
                      }
                    }

                    else
                    {
                      v188 &= v183 - 1;
                    }

                    if (v188 != v185) {
                      break;
                    }
                  }

                  uint64_t v187 = (uint64_t *)*v187;
                }

                while (v187);
              }
            }
          }

          if (v256[0]) {
            operator delete(v256[0]);
          }
          unint64_t v5 = v212;
          int64_t v41 = v213;
          uint64_t v20 = v68;
        }

        goto LABEL_277;
      }

      uint64_t v214 = v41;
      uint64_t v75 = *v208;
      v258[0] = a2;
      uint64_t v230 = std::__hash_table<std::__hash_value_type<unsigned int,RingBufferSampledData>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,RingBufferSampledData>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,RingBufferSampledData>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( v211,  a2,  v258);
      uint64_t v76 = v75 + 96 * v43;
      uint64_t v77 = *(void *)(v76 + 80);
      id v219 = (void *)(v76 + 80);
      unint64_t v79 = (uint64_t *)(v76 + 72);
      uint64_t v78 = *(void *)(v76 + 72);
      unsigned int v218 = v79;
      uint64_t v80 = v77 - v78;
      if (v77 == v78)
      {
        uint64_t v215 = v78;
        uint64_t v83 = 0LL;
        uint64_t v81 = 0LL;
      }

      else
      {
        uint64_t v81 = (__n128 *)std::__allocate_at_least[abi:nn180100]<std::allocator<DYMTLShaderProfilerProcessedUSCSample>>(v80 >> 3);
        uint64_t v83 = (__n128 *)((char *)v81 + 20 * v82);
        uint64_t v215 = *v218;
        uint64_t v80 = *v219 - *v218;
      }

      v246[0] = 0;
      std::vector<BOOL>::vector(v252, v80 >> 2, v246);
      uint64_t v231 = v75 + 96 * v43 + 8;
      uint64_t v84 = *v218;
      if (*v219 == *v218)
      {
        uint64_t v129 = 0LL;
        __int128 v130 = v81;
      }

      else
      {
        unint64_t v85 = 0LL;
        int v86 = 0;
        int v87 = 0;
        v242 = v81;
        uint64_t v88 = v83;
        do
        {
          unsigned int v89 = 0;
          uint64_t v90 = v84 + 8 * v85;
          int64_t v226 = (char *)v81 - (char *)v242;
          int v228 = v87;
          unint64_t v239 = (2 * v87);
          unsigned __int32 v236 = v239 + 8;
          unsigned int v91 = 1;
          uint64_t v233 = v90;
          do
          {
            if ((*(_DWORD *)(v90 + 4LL * v89) & 1) != 0)
            {
              if (0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*((void *)v20 + 1) - *(void *)v20) >> 3) <= (unint64_t)v258[0])
              {
                LOWORD(v118) = -1;
                LODWORD(v101) = -1;
              }

              else
              {
                uint64_t v92 = *(void *)v20 + 88LL * v258[0];
                uint64_t v93 = *(void **)(v92 + 40);
                int v94 = (void *)(v92 + 48);
                if (v93 == (void *)(v92 + 48))
                {
                  LOWORD(v118) = -1;
                  LODWORD(v101) = -1;
                }

                else
                {
                  unsigned int v95 = *(_DWORD *)(v90 + 4LL * v91);
                  unint64_t v96 = *(void *)(v231 + 8);
                  int8x8_t v97 = *(int8x8_t *)((char *)v20 + 32);
                  uint8x8_t v98 = (uint8x8_t)vcnt_s8(v97);
                  v98.i16[0] = vaddlv_u8(v98);
                  unint64_t v99 = v98.u32[0];
                  uint64_t v100 = *(void *)&v97 + 0xFFFFFFFFLL;
                  do
                  {
                    if (v97)
                    {
                      unint64_t v101 = *((unsigned int *)v93 + 7);
                      if (v99 > 1)
                      {
                        unint64_t v102 = *((unsigned int *)v93 + 7);
                        if (*(void *)&v97 <= v101) {
                          unint64_t v102 = v101 % *(void *)&v97;
                        }
                      }

                      else
                      {
                        unint64_t v102 = v100 & v101;
                      }

                      __int128 v103 = *(uint64_t **)(*((void *)a1 + 3) + 8 * v102);
                      if (v103)
                      {
                        while (1)
                        {
                          __int128 v103 = (uint64_t *)*v103;
                          if (!v103) {
                            break;
                          }
                          unint64_t v104 = v103[1];
                          if (v104 == v101)
                          {
                            if (*((_DWORD *)v103 + 4) == (_DWORD)v101)
                            {
                              if ((unint64_t)v103[5] >= 2)
                              {
                                uint64_t v107 = v103[4];
                                __int128 v105 = v103 + 4;
                                uint64_t v106 = v107;
                                if (v107)
                                {
                                  uint64_t v108 = v105;
                                  do
                                  {
                                    unsigned int v109 = *(_DWORD *)(v106 + 28);
                                    if (v95 == v109)
                                    {
                                      else {
                                        BOOL v110 = HIWORD(*(_DWORD *)(v106 + 32)) > 0x66u;
                                      }
                                      BOOL v111 = v110;
                                    }

                                    else
                                    {
                                      BOOL v111 = v95 < v109;
                                    }

                                    BOOL v112 = !v111;
                                    if (v111) {
                                      unint64_t v113 = (uint64_t *)v106;
                                    }
                                    else {
                                      unint64_t v113 = (uint64_t *)(v106 + 8);
                                    }
                                    if (!v112) {
                                      uint64_t v108 = (uint64_t *)v106;
                                    }
                                    uint64_t v106 = *v113;
                                  }

                                  while (*v113);
                                  if (v105 != v108)
                                  {
                                    unsigned int v114 = *((_DWORD *)v108 + 8);
                                    if ((unsigned __int16)v114 == 2)
                                    {
                                      if ((v114 & 0xFFFE0000 | 0x10000) != 0x650000) {
                                        goto LABEL_172;
                                      }
                                      uint64_t v221 = v100;
                                      unint64_t v222 = v96;
                                      unsigned int v224 = v88;
                                      int v223 = v86;
                                      unsigned int v220 = v114;
                                      unint64_t v115 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>( v217,  v101);
                                      unsigned int v114 = v220;
                                      uint64_t v100 = v221;
                                      unint64_t v96 = v222;
                                      int v86 = v223;
                                      uint64_t v90 = v233;
                                      uint64_t v88 = v224;
                                      if (v115)
                                      {
                                        if (v115[3] <= v222 && v115[4] >= v222)
                                        {
LABEL_172:
                                          unsigned int v118 = HIWORD(v114);
                                          goto LABEL_149;
                                        }
                                      }
                                    }
                                  }
                                }
                              }

                              break;
                            }
                          }

                          else
                          {
                            if (v99 > 1)
                            {
                              if (v104 >= *(void *)&v97) {
                                v104 %= *(void *)&v97;
                              }
                            }

                            else
                            {
                              v104 &= *(void *)&v97 - 1LL;
                            }

                            if (v104 != v102) {
                              break;
                            }
                          }
                        }
                      }
                    }

                    unsigned int v116 = (void *)v93[1];
                    if (v116)
                    {
                      do
                      {
                        uint64_t v117 = v116;
                        unsigned int v116 = (void *)*v116;
                      }

                      while (v116);
                    }

                    else
                    {
                      do
                      {
                        uint64_t v117 = (void *)v93[2];
                        BOOL v112 = *v117 == (void)v93;
                        uint64_t v93 = v117;
                      }

                      while (!v112);
                    }

                    uint64_t v93 = v117;
                  }

                  while (v117 != v94);
                  LOWORD(v118) = -1;
                  LODWORD(v101) = -1;
LABEL_149:
                  uint64_t v20 = a1;
                }
              }

              unsigned __int32 v119 = v89 + v239;
              if (v242 != v81)
              {
                v81[-1].n128_u32[1] += v86;
                v81[-1].n128_u32[2] = v119;
              }

              if (v81 >= v88)
              {
                unint64_t v120 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v81 - (char *)v242) >> 2) + 1;
                if (v120 > 0xCCCCCCCCCCCCCCCLL) {
                  abort();
                }
                else {
                  unint64_t v121 = v120;
                }
                id v122 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<DYMTLShaderProfilerProcessedUSCSample>>(v121);
                uint64_t v124 = &v122[4 * (((char *)v81 - (char *)v242) >> 2)];
                *(_DWORD *)uint64_t v124 = v101;
                *((_DWORD *)v124 + 1) = v119;
                *((_DWORD *)v124 + 2) = 0;
                *((_DWORD *)v124 + 3) = v236;
                *((_WORD *)v124 + 8) = v118;
                if (v242 == v81)
                {
                  __int128 v127 = v81;
                  v242 = (__n128 *)&v122[4 * (((char *)v81 - (char *)v242) >> 2)];
                }

                else
                {
                  uint64_t v125 = (__n128 *)&v122[4 * (((char *)v81 - (char *)v242) >> 2)];
                  do
                  {
                    __n128 v126 = *(__n128 *)((char *)v81 - 20);
                    v125[-1].n128_u32[3] = v81[-1].n128_u32[3];
                    *(__n128 *)((char *)v125 - 20) = v126;
                    uint64_t v125 = (__n128 *)((char *)v125 - 20);
                    uint64_t v81 = (__n128 *)((char *)v81 - 20);
                  }

                  while (v81 != v242);
                  __int128 v127 = v242;
                  v242 = v125;
                }

                uint64_t v88 = (__n128 *)&v122[20 * v123];
                uint64_t v81 = (__n128 *)(v124 + 20);
                if (v127)
                {
                  __int128 v128 = &v122[20 * v123];
                  operator delete(v127);
                  uint64_t v88 = (__n128 *)v128;
                }

                int v86 = 0;
                uint64_t v90 = v233;
              }

              else
              {
                int v86 = 0;
                v81->n128_u32[0] = v101;
                v81->n128_u32[1] = v119;
                v81->n128_u32[2] = 0;
                v81->n128_u32[3] = v236;
                v81[1].n128_u16[0] = v118;
                uint64_t v81 = (__n128 *)((char *)v81 + 20);
              }
            }

            else
            {
              unsigned int v91 = v89;
            }

            unsigned int v89 = v91 + 1;
            v91 += 2;
          }

          while (v91 < 8);
          uint64_t v129 = (char *)v81 - (char *)v242;
          if (v226 == (char *)v81 - (char *)v242)
          {
            ++v86;
            *(void *)((char *)v252[0] + ((v239 >> 3) & 0x1FFFFFF8)) |= 1LL << (v239 & 0x38);
          }

          unint64_t v85 = (v228 + 4);
          uint64_t v84 = *v218;
          int v87 = v228 + 4;
        }

        while (v85 < (*v219 - *v218) >> 3);
        __int128 v130 = v242;
      }

      unint64_t v131 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (v129 >> 2));
      uint64_t v132 = v81 == v130 ? 0LL : v131;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *,false>( v130,  v81,  v132,  1);
      BufferView<unsigned long long>::BufferView(v246, *(void **)(v230 + 56));
      unint64_t v133 = v130;
      if (v81 != v130) {
        break;
      }
LABEL_251:
      if (v252[0]) {
        operator delete(v252[0]);
      }
      unint64_t v5 = v212;
      if (v133) {
        operator delete(v133);
      }
      int64_t v41 = v214;
LABEL_277:
      v41 += 3;
      if (v41 == v216) {
        goto LABEL_285;
      }
    }

    unint64_t v134 = 0LL;
    unint64_t v135 = ((char *)v81 - (char *)v130) / 20;
    unint64_t v225 = v135 - 1;
    unint64_t v227 = &v130[2].n128_i8[8];
    unint64_t v136 = v135 - 2;
    unint64_t v234 = v135;
    unint64_t v229 = v135 - 2;
    while (1)
    {
      __int128 v137 = (_DWORD *)v133 + 5 * v134;
      int v138 = v137[2];
      int v139 = v137[3] - v137[1];
      uint64_t v140 = (unsigned __int16 *)(v137 + 4);
      uint64_t v243 = v137;
      if (v134 + 1 >= v135)
      {
        unint64_t v144 = v134;
        uint64_t v142 = v230;
      }

      else
      {
        unsigned int v141 = *v137;
        uint64_t v142 = v230;
        if (*v137 == v133[1].n128_u32[5 * v134 + 1])
        {
          unint64_t v143 = &v227[20 * v134];
          unint64_t v144 = v134;
          while (*v140 == *((unsigned __int16 *)v143 - 2))
          {
            int v139 = *((_DWORD *)v143 - 2) + v139 - *((_DWORD *)v143 - 4);
            v138 += *((_DWORD *)v143 - 3);
            if (v136 == v144)
            {
              unint64_t v144 = v225;
              break;
            }

            int v145 = *(_DWORD *)v143;
            v143 += 20;
            ++v144;
            if (v141 != v145) {
              break;
            }
          }
        }

        else
        {
          unint64_t v144 = v134;
        }
      }

      int v240 = v139 + 7;
      int v237 = ((v139 + 7) >> 3) - v138;
      int v146 = (4 * v237) | 1;
      if ((unint64_t)objc_msgSend(*(id *)(v142 + 72), "length", v201, v202, v203) < 8
      int v148 = *(_DWORD *)(v142 + 24);
      unsigned int v149 = v148 & 0x3FFFFFF;
      if ((v148 & 0x3FFFFFF) == 0)
      {
        unint64_t v154 = *v147 & 0x7FFFFFFFFFLL;
LABEL_220:
        *__int128 v147 = v154;
        uint64_t v159 = v230;
        unsigned int v161 = *(char **)(v230 + 120);
        unint64_t v160 = *(void *)(v230 + 128);
        if ((unint64_t)v161 >= v160)
        {
          unint64_t v163 = *(char **)(v230 + 112);
          uint64_t v164 = (v161 - v163) >> 2;
          unint64_t v165 = v164 + 1;
          uint64_t v166 = v160 - (void)v163;
          if (v166 >> 1 > v165) {
            unint64_t v165 = v166 >> 1;
          }
          BOOL v48 = (unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v167 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v48) {
            unint64_t v167 = v165;
          }
          if (v167)
          {
            unint64_t v167 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v167);
            uint64_t v169 = v230;
            unint64_t v163 = *(char **)(v230 + 112);
            unsigned int v161 = *(char **)(v230 + 120);
          }

          else
          {
            uint64_t v168 = 0LL;
            uint64_t v169 = v230;
          }

          uint64_t v170 = (_DWORD *)(v167 + 4 * v164);
          *uint64_t v170 = *(_DWORD *)(v169 + 84);
          uint64_t v162 = v170 + 1;
          while (v161 != v163)
          {
            int v171 = *((_DWORD *)v161 - 1);
            v161 -= 4;
            *--uint64_t v170 = v171;
          }

          *(void *)(v230 + 112) = v170;
          *(void *)(v230 + 120) = v162;
          *(void *)(v230 + 128) = v167 + 4 * v168;
          if (v163) {
            operator delete(v163);
          }
          uint64_t v159 = v230;
        }

        else
        {
          *(_DWORD *)unsigned int v161 = *(_DWORD *)(v230 + 84);
          uint64_t v162 = v161 + 4;
        }

        *(void *)(v159 + 120) = v162;
        *(_DWORD *)(v159 + 84) += v146;
        *__int128 v147 = *v147 & 0xFFFFFF8000000000LL | *v243 | ((unint64_t)(v237 & 0x7F) << 32);
        uint64_t v172 = v147 + 1;
        ++*(_DWORD *)(v159 + 80);
        if (v134 <= v144)
        {
          unsigned int v173 = 0;
          uint64_t v174 = (char *)v252[0];
          do
          {
            unint64_t v175 = (char *)v133 + 20 * v134;
            unsigned int v178 = *((_DWORD *)v175 + 3);
            unint64_t v176 = (unsigned int *)(v175 + 12);
            unsigned int v177 = v178;
            for (unsigned int i = *(v176 - 2); i < v177; ++i)
            {
              if (((*(void *)&v174[((unint64_t)i >> 3) & 0x1FFFFFF8] >> i) & 1) != 0)
              {
                i += 8;
              }

              else
              {
                *((_DWORD *)v172 + v173++) = *(_DWORD *)(v215 + 4LL * i);
                unsigned int v177 = *v176;
              }
            }

            ++v134;
          }

          while (v134 <= v144);
        }

        else
        {
          unsigned int v173 = 0;
        }

        if ((v240 & 0xFFFFFFF8) != v139)
        {
          unsigned int v180 = (v240 & 0xFFFFFFF8) - v139;
          if (v180 <= 1) {
            unsigned int v180 = 1;
          }
          do
          {
            *((_DWORD *)v172 + v173++) = 0;
            --v180;
          }

          while (v180);
        }

        goto LABEL_250;
      }

      unsigned int v150 = *v243;
      if (*v243 == -1)
      {
        unint64_t v154 = *v147 & 0x7FFFFFFFFFLL | ((unint64_t)(v148 - 1) << 39);
        goto LABEL_220;
      }

      unsigned int v151 = *v140;
      if (v151 > 0x63) {
        break;
      }
      switch(v151)
      {
        case 1u:
          uint64_t v153 = 0LL;
          break;
        case 2u:
          goto LABEL_207;
        case 3u:
          uint64_t v152 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>( v209,  *v243);
          uint64_t v153 = 1LL;
          if (!v152) {
            uint64_t v153 = 2LL;
          }
          break;
        default:
          goto LABEL_250;
      }

LABEL_250:
      unint64_t v134 = v144 + 2;
      unint64_t v135 = v234;
      uint64_t v20 = a1;
      unint64_t v136 = v229;
      if (v144 + 2 >= v234) {
        goto LABEL_251;
      }
    }

    if (v151 - 100 >= 2) {
      goto LABEL_250;
    }
LABEL_207:
    uint64_t v153 = 1LL;
    goto LABEL_209;
  }

  double v40 = 0.0;
LABEL_285:
  if (*((void *)v20 + 38) == *((void *)v20 + 39))
  {
    uint64_t v195 = v257[0];
    goto LABEL_293;
  }

  uint64_t v193 = a3[8];
  unint64_t v194 = a3[9] - v193;
  uint64_t v195 = v257[0];
  if ((v194 & 0x7FFFFFFF8LL) == 0)
  {
LABEL_293:
    unint64_t v199 = "CttulultUtUtU)) == 0";
    goto LABEL_294;
  }

  unint64_t v196 = 0LL;
  uint64_t v197 = *(void *)(*((void *)v20 + 61) + 208LL);
  uint64_t v198 = (v194 >> 3);
  unint64_t v199 = "memcmp((const char*)bytes + offset, (CttulultUtUtU), sizeof(CttulultUtUtU)) == 0" + 63;
  do
  {
    if (((*(void *)(v197 + ((v196 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> v196) & 1) != 0) {
      *(void *)(v193 + 8 * v196) -= *(void *)&v195[8 * v196];
    }
    ++v196;
  }

  while (v198 != v196);
LABEL_294:
  std::vector<std::tuple<unsigned int,SampleInfoWithPayload,unsigned long long>>::__clear[abi:nn180100](v207);
  std::vector<std::pair<unsigned int,SampleInfoWithPayload>>::__clear[abi:nn180100](v208);
  if (v195) {
    operator delete(v195);
  }
  if (v5) {
    operator delete(v5);
  }
  return 1.0 - v40 > *((double *)v199 + 333);
}

void sub_19398C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,void *__p,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a63) {
    operator delete(a63);
  }
  uint64_t v65 = *(void **)(v63 - 192);
  if (v65) {
    operator delete(v65);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::unique_ptr<GRCPerFrameData::PriorityQueueElement>>::__destroy_vector::operator()[abi:nn180100]( void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v7 = (void *)*--v4;
        unint64_t v6 = v7;
        *uint64_t v4 = 0LL;
        if (v7) {
          std::default_delete<GRCPerFrameData::PriorityQueueElement>::operator()[abi:nn180100](v6);
        }
      }

      while (v4 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *,false>( uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v7 = result;
LABEL_2:
  uint64_t v8 = a2 - 3;
  uint64_t v9 = (uint64_t)(a2 - 6);
  uint64_t v10 = (uint64_t)(a2 - 9);
  unint64_t i = v7;
  unint64_t v156 = (unint64_t)a2;
  while (2)
  {
    uint64_t v7 = i;
    uint64_t v12 = (uint64_t)a2 - i;
    uint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - i) >> 3);
    switch(v13)
    {
      case 0LL:
      case 1LL:
        return result;
      case 2LL:
        __n128 result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>( (uint64_t)v8,  v7);
        if ((_DWORD)result)
        {
          unint64_t v78 = *(void *)v7;
          *(void *)uint64_t v7 = *(a2 - 3);
          *(a2 - 3) = v78;
          LODWORD(v78) = *(_DWORD *)(v7 + 8);
          *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 - 4);
          *((_DWORD *)a2 - 4) = v78;
          LODWORD(v78) = *(_DWORD *)(v7 + 12);
          *(_DWORD *)(v7 + 12) = *((_DWORD *)a2 - 3);
          *((_DWORD *)a2 - 3) = v78;
          unint64_t v79 = *(void *)(v7 + 16);
          *(void *)(v7 + 16) = *(a2 - 1);
          *(a2 - 1) = v79;
        }

        return result;
      case 3LL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>( v7,  v7 + 24,  (uint64_t)v8);
      case 4LL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>( v7,  v7 + 24,  v7 + 48,  (uint64_t)v8);
      case 5LL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>( v7,  v7 + 24,  v7 + 48,  v7 + 72,  (uint64_t)v8);
      default:
        if (v12 > 575)
        {
          if (!a3)
          {
            if ((unint64_t *)v7 != a2)
            {
              int64_t v98 = (unint64_t)(v13 - 2) >> 1;
              int64_t v154 = v98;
              do
              {
                int64_t v99 = v98;
                if (v154 >= v98)
                {
                  uint64_t v100 = (2 * v98) | 1;
                  uint64_t v101 = v7 + 24 * v100;
                  if (2 * v98 + 2 < v13
                    && std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>( v7 + 24 * v100,  v101 + 24))
                  {
                    v101 += 24LL;
                    uint64_t v100 = 2 * v99 + 2;
                  }

                  uint64_t v102 = v7 + 24 * v99;
                  __n128 result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>( v101,  v102);
                  a2 = (unint64_t *)v156;
                  if ((result & 1) == 0)
                  {
                    unint64_t v103 = *(void *)v102;
                    uint64_t v104 = *(unsigned int *)(v102 + 8);
                    unsigned int v105 = *(_DWORD *)(v102 + 12);
                    unint64_t v148 = *(void *)(v102 + 16);
                    *(void *)uint64_t v102 = *(void *)v101;
                    *(_DWORD *)(v102 + 8) = *(_DWORD *)(v101 + 8);
                    *(_DWORD *)(v102 + 12) = *(_DWORD *)(v101 + 12);
                    *(void *)(v102 + 16) = *(void *)(v101 + 16);
                    if (v154 >= v100)
                    {
                      int64_t v152 = v99;
                      unsigned int v150 = v105;
                      while (1)
                      {
                        uint64_t v106 = v101;
                        uint64_t v107 = 2 * v100;
                        uint64_t v100 = (2 * v100) | 1;
                        uint64_t v101 = v7 + 24 * v100;
                        uint64_t v108 = v107 + 2;
                        if (v107 + 2 < v13)
                        {
                          uint64_t v109 = v104;
                          __n128 result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>( v7 + 24 * v100,  v101 + 24);
                          unsigned int v105 = v150;
                          uint64_t v104 = v109;
                          int64_t v99 = v152;
                          if ((_DWORD)result)
                          {
                            v101 += 24LL;
                            uint64_t v100 = v108;
                          }
                        }

                        unint64_t v110 = *(void *)v101;
                        if (*(void *)v101 < v103) {
                          break;
                        }
                        unsigned int v111 = *(_DWORD *)(v101 + 8);
                        if (v103 >= v110)
                        {
                          if (v104 >= v111)
                          {
                            unsigned int v112 = *(_DWORD *)(v101 + 12);
                            if (v112 < v105 || v105 >= v112 && *(void *)(v101 + 16) < v148) {
                              break;
                            }
                          }
                        }

                        *(void *)uint64_t v106 = v110;
                        *(_DWORD *)(v106 + 8) = v111;
                        *(_DWORD *)(v106 + 12) = *(_DWORD *)(v101 + 12);
                        *(void *)(v106 + 16) = *(void *)(v101 + 16);
                        if (v154 < v100) {
                          goto LABEL_179;
                        }
                      }

                      uint64_t v101 = v106;
                    }

LABEL_179:
                    *(void *)uint64_t v101 = v103;
                    *(_DWORD *)(v101 + 8) = v104;
                    *(_DWORD *)(v101 + 12) = v105;
                    *(void *)(v101 + 16) = v148;
                    a2 = (unint64_t *)v156;
                  }
                }

                int64_t v98 = v99 - 1;
              }

              while (v99);
              int64_t v113 = v12 / 0x18uLL;
              do
              {
                unsigned int v114 = a2;
                uint64_t v115 = 0LL;
                int v151 = *(_DWORD *)(v7 + 12);
                int v153 = *(_DWORD *)(v7 + 8);
                unint64_t v149 = *(void *)(v7 + 16);
                uint64_t v116 = v113 - 2;
                unint64_t v155 = *(void *)v7;
                if (v113 < 2) {
                  uint64_t v116 = v113 - 1;
                }
                uint64_t v117 = v116 >> 1;
                uint64_t v118 = v7;
                do
                {
                  uint64_t v119 = v118 + 24 * v115 + 24;
                  uint64_t v120 = (2 * v115) | 1;
                  uint64_t v121 = 2 * v115 + 2;
                  if (v121 < v113)
                  {
                    __n128 result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>( v118 + 24 * v115 + 24,  v118 + 24 * v115 + 48);
                    if ((_DWORD)result)
                    {
                      v119 += 24LL;
                      uint64_t v120 = v121;
                    }
                  }

                  *(void *)uint64_t v118 = *(void *)v119;
                  *(_DWORD *)(v118 + 8) = *(_DWORD *)(v119 + 8);
                  *(_DWORD *)(v118 + 12) = *(_DWORD *)(v119 + 12);
                  *(void *)(v118 + 16) = *(void *)(v119 + 16);
                  uint64_t v118 = v119;
                  uint64_t v115 = v120;
                }

                while (v120 <= v117);
                if ((unint64_t *)v119 == v114 - 3)
                {
                  *(void *)uint64_t v119 = v155;
                  *(_DWORD *)(v119 + 8) = v153;
                  *(_DWORD *)(v119 + 12) = v151;
                  *(void *)(v119 + 16) = v149;
                  goto LABEL_206;
                }

                *(void *)uint64_t v119 = *(v114 - 3);
                *(_DWORD *)(v119 + 8) = *((_DWORD *)v114 - 4);
                *(_DWORD *)(v119 + 12) = *((_DWORD *)v114 - 3);
                *(void *)(v119 + 16) = *(v114 - 1);
                *(v114 - 3) = v155;
                *((_DWORD *)v114 - 4) = v153;
                *((_DWORD *)v114 - 3) = v151;
                *(v114 - 1) = v149;
                uint64_t v122 = v119 - v7 + 24;
                if (v122 >= 25)
                {
                  unint64_t v123 = -2 - 0x5555555555555555LL * (v122 >> 3);
                  unint64_t v124 = v123 >> 1;
                  uint64_t v125 = v7 + 24 * (v123 >> 1);
                  __n128 result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>( v125,  v119);
                  if ((_DWORD)result)
                  {
                    unint64_t v126 = *(void *)v119;
                    unsigned int v127 = *(_DWORD *)(v119 + 8);
                    unsigned int v128 = *(_DWORD *)(v119 + 12);
                    unint64_t v129 = *(void *)(v119 + 16);
                    *(void *)uint64_t v119 = *(void *)v125;
                    *(_DWORD *)(v119 + 8) = *(_DWORD *)(v125 + 8);
                    *(_DWORD *)(v119 + 12) = *(_DWORD *)(v125 + 12);
                    *(void *)(v119 + 16) = *(void *)(v125 + 16);
                    if (v123 < 2) {
                      goto LABEL_205;
                    }
                    while (1)
                    {
                      uint64_t v130 = v125;
                      unint64_t v131 = v124 - 1;
                      unint64_t v124 = (v124 - 1) >> 1;
                      uint64_t v125 = v7 + 24 * v124;
                      unint64_t v132 = *(void *)v125;
                      if (*(void *)v125 >= v126)
                      {
                        if (v126 < v132
                          || (unsigned int v133 = *(_DWORD *)(v125 + 8), v133 >= v127)
                          && (v127 < v133
                           || (unsigned int v134 = *(_DWORD *)(v125 + 12), v134 >= v128)
                           && (v128 < v134 || *(void *)(v125 + 16) >= v129)))
                        {
                          uint64_t v125 = v130;
LABEL_205:
                          *(void *)uint64_t v125 = v126;
                          *(_DWORD *)(v125 + 8) = v127;
                          *(_DWORD *)(v125 + 12) = v128;
                          *(void *)(v125 + 16) = v129;
                          break;
                        }
                      }

                      else
                      {
                        unsigned int v133 = *(_DWORD *)(v125 + 8);
                      }

                      *(void *)uint64_t v130 = v132;
                      *(_DWORD *)(v130 + 8) = v133;
                      *(_DWORD *)(v130 + 12) = *(_DWORD *)(v125 + 12);
                      *(void *)(v130 + 16) = *(void *)(v125 + 16);
                      if (v131 <= 1) {
                        goto LABEL_205;
                      }
                    }
                  }
                }

      ++v170;
      unsigned int v147 = v239;
      if (v170 >= v239->nelts) {
        goto LABEL_180;
      }
    }

    uint64_t v174 = MakeMTLVisibleFunctionTableDescriptor(*(void *)(v171 + 104));
    unint64_t v175 = (void *)objc_claimAutoreleasedReturnValue(v174);
    unint64_t v176 = [v173 newVisibleFunctionTableWithDescriptor:v175 stage:*(unsigned __int8 *)(v171 + 168)];
    if ((UpdateVisibleFunctionTable((uint64_t)a1, v176, v171, v236) & 1) == 0)
    {
      if (a3)
      {
        unint64_t v196 = GTUpdateShaderMakeError( 1u,  @"Internal: Could not update visiable function table for render pipeline",  0LL,  0LL);
        *a3 = (id)objc_claimAutoreleasedReturnValue(v196);
      }

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *,false>( __n128 *a1, __n128 *a2, uint64_t a3, char a4)
{
LABEL_1:
  uint64_t v8 = (uint64_t)&a2[-2].n128_i64[1] + 4;
  uint64_t v89 = (uint64_t)a2[-4].n128_i64 + 4;
  uint64_t v90 = (uint64_t)&a2[-3].n128_i64[1];
  uint64_t v9 = a1;
  uint64_t v91 = a2;
  while (2)
  {
    a1 = v9;
    uint64_t v10 = (char *)a2 - (char *)v9;
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v9) >> 2);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return v30.n128_f64[0];
      case 2uLL:
        if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( v8,  (uint64_t)v9))
        {
          __n128 v40 = *v9;
          unsigned __int32 v95 = v9[1].n128_u32[0];
          __n128 v94 = v40;
          __n128 v41 = *(__n128 *)v8;
          v9[1].n128_u32[0] = *(_DWORD *)(v8 + 16);
          __n128 *v9 = v41;
          __n128 v30 = v94;
          *(_DWORD *)(v8 + 16) = v95;
          *(__n128 *)uint64_t v8 = v30;
        }

        return v30.n128_f64[0];
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>( (uint64_t)v9,  (uint64_t)v9[1].n128_i64 + 4,  v8);
        return v30.n128_f64[0];
      case 4uLL:
        v30.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>( v9,  (uint64_t)v9[1].n128_i64 + 4,  (uint64_t)&v9[2].n128_i64[1],  v8).n128_u64[0];
        return v30.n128_f64[0];
      case 5uLL:
        v30.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>( v9,  (uint64_t)v9[1].n128_i64 + 4,  (uint64_t)&v9[2].n128_i64[1],  (uint64_t)&v9[3].n128_i64[1] + 4,  v8).n128_u64[0];
        return v30.n128_f64[0];
      default:
        if (v10 <= 479)
        {
          uint64_t v42 = (uint64_t)v9[1].n128_i64 + 4;
          BOOL v44 = v9 == a2 || v42 == (void)a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              uint64_t v45 = 0LL;
              uint64_t v46 = (uint64_t)v9;
              do
              {
                uint64_t v47 = v46;
                uint64_t v46 = v42;
                if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( v42,  v47))
                {
                  __n128 v48 = *(__n128 *)v46;
                  unsigned __int32 v95 = *(_DWORD *)(v46 + 16);
                  __n128 v94 = v48;
                  uint64_t v49 = v45;
                  while (1)
                  {
                    unsigned int v50 = (char *)v9 + v49;
                    *(__n128 *)(v50 + 20) = *(__n128 *)((char *)v9 + v49);
                    *((_DWORD *)v50 + 9) = *(unsigned __int32 *)((char *)v9[1].n128_u32 + v49);
                    if (!v49) {
                      break;
                    }
                    v49 -= 20LL;
                    if (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( (uint64_t)&v94,  (uint64_t)v9 + v49))
                    {
                      uint64_t v51 = (uint64_t)v9[1].n128_i64 + v49 + 4;
                      goto LABEL_71;
                    }
                  }

                  uint64_t v51 = (uint64_t)v9;
LABEL_71:
                  __n128 v30 = v94;
                  *(_DWORD *)(v51 + 16) = v95;
                  *(__n128 *)uint64_t v51 = v30;
                }

                uint64_t v42 = v46 + 20;
                v45 += 20LL;
              }

              while ((__n128 *)(v46 + 20) != a2);
            }
          }

          else if (!v44)
          {
            do
            {
              uint64_t v83 = (uint64_t)a1;
              a1 = (__n128 *)v42;
              if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( v42,  v83))
              {
                __n128 v84 = *a1;
                unsigned __int32 v95 = a1[1].n128_u32[0];
                __n128 v94 = v84;
                uint64_t v85 = a1;
                do
                {
                  unsigned int v86 = (__n128 *)((char *)v85 - 20);
                  __n128 *v85 = *(__n128 *)((char *)v85 - 20);
                  v85[1].n128_u32[0] = v85[-1].n128_u32[3];
                  BOOL v87 = GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( (uint64_t)&v94,  (uint64_t)&v85[-3].n128_i64[1]);
                  uint64_t v85 = v86;
                }

                while (v87);
                __n128 v30 = v94;
                v86[1].n128_u32[0] = v95;
                *unsigned int v86 = v30;
              }

              uint64_t v42 = (uint64_t)a1[1].n128_i64 + 4;
            }

            while (&a1[1].n128_u8[4] != (unsigned __int8 *)a2);
          }

          return v30.n128_f64[0];
        }

        if (!a3)
        {
          if (v9 != a2)
          {
            int64_t v52 = (v11 - 2) >> 1;
            int64_t v53 = v52;
            do
            {
              int64_t v54 = v53;
              if (v52 >= v53)
              {
                uint64_t v55 = (2 * v53) | 1;
                uint64_t v56 = (uint64_t)a1 + 20 * v55;
                if (2 * v53 + 2 < (uint64_t)v11
                  && GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( (uint64_t)a1 + 20 * v55,  v56 + 20))
                {
                  v56 += 20LL;
                  uint64_t v55 = 2 * v54 + 2;
                }

                uint64_t v57 = (uint64_t)a1 + 20 * v54;
                if (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( v56,  v57))
                {
                  __n128 v58 = *(__n128 *)v57;
                  unsigned __int32 v95 = *(_DWORD *)(v57 + 16);
                  __n128 v94 = v58;
                  do
                  {
                    uint64_t v59 = v56;
                    __int128 v60 = *(_OWORD *)v56;
                    *(_DWORD *)(v57 + 16) = *(_DWORD *)(v56 + 16);
                    *(_OWORD *)uint64_t v57 = v60;
                    if (v52 < v55) {
                      break;
                    }
                    uint64_t v61 = (2 * v55) | 1;
                    uint64_t v56 = (uint64_t)a1 + 20 * v61;
                    uint64_t v62 = 2 * v55 + 2;
                    if (v62 < (uint64_t)v11
                      && GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( (uint64_t)a1 + 20 * v61,  v56 + 20))
                    {
                      v56 += 20LL;
                      uint64_t v61 = v62;
                    }

                    uint64_t v57 = v59;
                    uint64_t v55 = v61;
                  }

                  while (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( v56,  (uint64_t)&v94));
                  __n128 v63 = v94;
                  *(_DWORD *)(v59 + 16) = v95;
                  *(__n128 *)uint64_t v59 = v63;
                }
              }

              int64_t v53 = v54 - 1;
            }

            while (v54);
            int64_t v64 = v10 / 0x14uLL;
            unint64_t v65 = v91;
            do
            {
              uint64_t v66 = 0LL;
              __n128 v67 = *a1;
              unsigned __int32 v93 = a1[1].n128_u32[0];
              __n128 v92 = v67;
              uint64_t v68 = v64 - 2;
              if (v64 < 2) {
                uint64_t v68 = v64 - 1;
              }
              uint64_t v69 = v68 >> 1;
              uint64_t v70 = (uint64_t)a1;
              do
              {
                uint64_t v71 = v70 + 20 * v66 + 20;
                uint64_t v72 = (2 * v66) | 1;
                uint64_t v73 = 2 * v66 + 2;
                if (v73 < v64
                  && GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( v70 + 20 * v66 + 20,  v70 + 20 * v66 + 40))
                {
                  v71 += 20LL;
                  uint64_t v72 = v73;
                }

                __n128 v74 = *(__n128 *)v71;
                *(_DWORD *)(v70 + 16) = *(_DWORD *)(v71 + 16);
                *(__n128 *)uint64_t v70 = v74;
                uint64_t v70 = v71;
                uint64_t v66 = v72;
              }

              while (v72 <= v69);
              unint64_t v65 = (__n128 *)((char *)v65 - 20);
              if ((__n128 *)v71 == v65)
              {
                __n128 v30 = v92;
                *(_DWORD *)(v71 + 16) = v93;
                *(__n128 *)uint64_t v71 = v30;
              }

              else
              {
                __n128 v75 = *v65;
                *(_DWORD *)(v71 + 16) = v65[1].n128_u32[0];
                *(__n128 *)uint64_t v71 = v75;
                __n128 v30 = v92;
                v65[1].n128_u32[0] = v93;
                *unint64_t v65 = v30;
                uint64_t v76 = v71 - (void)a1 + 20;
                if (v76 >= 21)
                {
                  unint64_t v77 = (unint64_t)(-2 - 0x3333333333333333LL * (v76 >> 2)) >> 1;
                  uint64_t v78 = (uint64_t)a1 + 20 * v77;
                  if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( v78,  v71))
                  {
                    __n128 v79 = *(__n128 *)v71;
                    unsigned __int32 v95 = *(_DWORD *)(v71 + 16);
                    __n128 v94 = v79;
                    do
                    {
                      uint64_t v80 = v78;
                      __int128 v81 = *(_OWORD *)v78;
                      *(_DWORD *)(v71 + 16) = *(_DWORD *)(v78 + 16);
                      *(_OWORD *)uint64_t v71 = v81;
                      if (!v77) {
                        break;
                      }
                      unint64_t v77 = (v77 - 1) >> 1;
                      uint64_t v78 = (uint64_t)a1 + 20 * v77;
                      uint64_t v71 = v80;
                    }

                    while (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( v78,  (uint64_t)&v94));
                    __n128 v30 = v94;
                    *(_DWORD *)(v80 + 16) = v95;
                    *(__n128 *)uint64_t v80 = v30;
                  }
                }
              }
            }

            while (v64-- > 2);
          }

          return v30.n128_f64[0];
        }

        uint64_t v12 = (uint64_t)v9 + 20 * (v11 >> 1);
        if ((unint64_t)v10 < 0xA01)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>( (uint64_t)v9 + 20 * (v11 >> 1),  (uint64_t)v9,  v8);
        }

        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>( (uint64_t)v9,  (uint64_t)v9 + 20 * (v11 >> 1),  v8);
          uint64_t v13 = 5 * (v11 >> 1);
          uint64_t v14 = (uint64_t)&v9[-1] + 20 * (v11 >> 1) - 4;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>( (uint64_t)v9[1].n128_i64 + 4,  v14,  v90);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>( (uint64_t)&v9[2].n128_i64[1],  (uint64_t)v9[1].n128_i64 + 4 * v13 + 4,  v89);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>( v14,  v12,  (uint64_t)v9[1].n128_i64 + 4 * v13 + 4);
          __n128 v15 = *v9;
          unsigned __int32 v95 = v9[1].n128_u32[0];
          __n128 v94 = v15;
          unsigned __int32 v16 = *(_DWORD *)(v12 + 16);
          __n128 *v9 = *(__n128 *)v12;
          v9[1].n128_u32[0] = v16;
          __n128 v17 = v94;
          *(_DWORD *)(v12 + 16) = v95;
          *(__n128 *)uint64_t v12 = v17;
        }

        --a3;
        a2 = v91;
        if ((a4 & 1) == 0
          && !GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( (uint64_t)&v9[-2].n128_i64[1] + 4,  (uint64_t)v9))
        {
          __n128 v31 = *v9;
          unsigned __int32 v93 = v9[1].n128_u32[0];
          __n128 v92 = v31;
          if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( (uint64_t)&v92,  v8))
          {
            do
              uint64_t v9 = (__n128 *)((char *)v9 + 20);
            while (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( (uint64_t)&v92,  (uint64_t)v9));
          }

          else
          {
            unint64_t v32 = (unint64_t)v9[1].n128_u64 + 4;
            do
            {
              uint64_t v9 = (__n128 *)v32;
              BOOL v33 = GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( (uint64_t)&v92,  v32);
              unint64_t v32 = (unint64_t)v9[1].n128_u64 + 4;
            }

            while (!v33);
          }

          unint64_t v34 = (unint64_t)v91;
          if (v9 < v91)
          {
            unint64_t v34 = (unint64_t)v91;
            do
              v34 -= 20LL;
            while (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( (uint64_t)&v92,  v34));
          }

          while ((unint64_t)v9 < v34)
          {
            __n128 v35 = *v9;
            unsigned __int32 v95 = v9[1].n128_u32[0];
            __n128 v94 = v35;
            __n128 v36 = *(__n128 *)v34;
            v9[1].n128_u32[0] = *(_DWORD *)(v34 + 16);
            __n128 *v9 = v36;
            __n128 v37 = v94;
            *(_DWORD *)(v34 + 16) = v95;
            *(__n128 *)unint64_t v34 = v37;
            do
              uint64_t v9 = (__n128 *)((char *)v9 + 20);
            while (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( (uint64_t)&v92,  (uint64_t)v9));
            do
              v34 -= 20LL;
            while (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( (uint64_t)&v92,  v34));
          }

          unint64_t v38 = (__n128 *)((char *)v9 - 20);
          if ((__n128 *)((char *)&v9[-2].n128_f64[1] + 4) != a1)
          {
            __n128 v39 = *v38;
            a1[1].n128_u32[0] = v9[-1].n128_u32[3];
            *a1 = v39;
          }

          a4 = 0;
          __n128 v30 = v92;
          v9[-1].n128_u32[3] = v93;
          *unint64_t v38 = v30;
          continue;
        }

        __n128 v18 = *v9;
        unsigned __int32 v93 = v9[1].n128_u32[0];
        __n128 v92 = v18;
        unint64_t v19 = (unint64_t)v9;
        do
        {
          unint64_t v20 = v19;
          v19 += 20LL;
        }

        while (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( v19,  (uint64_t)&v92));
        unint64_t v21 = (unint64_t)v91;
        if ((__n128 *)v20 == v9)
        {
          unint64_t v21 = (unint64_t)v91;
          do
          {
            if (v19 >= v21) {
              break;
            }
            v21 -= 20LL;
          }

          while (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( v21,  (uint64_t)&v92));
        }

        else
        {
          do
            v21 -= 20LL;
          while (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( v21,  (uint64_t)&v92));
        }

        if (v19 < v21)
        {
          unint64_t v22 = v19;
          unint64_t v23 = v21;
          do
          {
            __n128 v94 = *(__n128 *)v22;
            __n128 v24 = v94;
            unsigned __int32 v95 = *(_DWORD *)(v22 + 16);
            unsigned __int32 v25 = v95;
            int v26 = *(_DWORD *)(v23 + 16);
            *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
            *(_DWORD *)(v22 + 16) = v26;
            *(_DWORD *)(v23 + 16) = v25;
            *(__n128 *)unint64_t v23 = v24;
            do
            {
              unint64_t v20 = v22;
              v22 += 20LL;
            }

            while (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( v22,  (uint64_t)&v92));
            do
              v23 -= 20LL;
            while (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( v23,  (uint64_t)&v92));
          }

          while (v22 < v23);
        }

        if ((__n128 *)v20 != a1)
        {
          __n128 v27 = *(__n128 *)v20;
          a1[1].n128_u32[0] = *(_DWORD *)(v20 + 16);
          *a1 = v27;
        }

        __n128 v28 = v92;
        *(_DWORD *)(v20 + 16) = v93;
        *(__n128 *)unint64_t v20 = v28;
        if (v19 < v21)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *,false>( a1,  v20,  a3,  a4 & 1);
          a4 = 0;
          uint64_t v9 = (__n128 *)(v20 + 20);
          continue;
        }

        BOOL v29 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>( a1,  (__n128 *)v20);
        uint64_t v9 = (__n128 *)(v20 + 20);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>( (__n128 *)(v20 + 20),  v91))
        {
          if (v29) {
            continue;
          }
          goto LABEL_29;
        }

        a2 = (__n128 *)v20;
        if (!v29) {
          goto LABEL_1;
        }
        return v30.n128_f64[0];
    }
  }

BOOL GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(_DWORD *)a1 >= *(_DWORD *)a2;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    unsigned int v3 = *(unsigned __int16 *)(a1 + 16);
    unsigned int v4 = *(unsigned __int16 *)(a2 + 16);
    BOOL v2 = v3 >= v4;
    if (v3 == v4)
    {
      unsigned int v5 = *(_DWORD *)(a1 + 4);
      unsigned int v6 = *(_DWORD *)(a2 + 4);
      BOOL v2 = v5 >= v6;
      if (v5 == v6)
      {
        unsigned int v7 = *(_DWORD *)(a1 + 8);
        unsigned int v8 = *(_DWORD *)(a2 + 8);
        BOOL v2 = v7 >= v8;
        if (v7 == v8) {
          BOOL v2 = *(_DWORD *)(a1 + 12) >= *(_DWORD *)(a2 + 12);
        }
      }
    }
  }

  return !v2;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( a2,  a1);
  BOOL result = GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( a3,  a2);
  if (v6)
  {
    if (result)
    {
      int v8 = *(_DWORD *)(a1 + 16);
      __int128 v9 = *(_OWORD *)a1;
      int v10 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_DWORD *)(a1 + 16) = v10;
    }

    else
    {
      int v17 = *(_DWORD *)(a1 + 16);
      __int128 v18 = *(_OWORD *)a1;
      int v19 = *(_DWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 16) = v19;
      *(_OWORD *)a2 = v18;
      *(_DWORD *)(a2 + 16) = v17;
      BOOL result = GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( a3,  a2);
      if (!result) {
        return result;
      }
      int v8 = *(_DWORD *)(a2 + 16);
      __int128 v9 = *(_OWORD *)a2;
      int v20 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v20;
    }

    *(_OWORD *)a3 = v9;
    *(_DWORD *)(a3 + 16) = v8;
  }

  else if (result)
  {
    int v11 = *(_DWORD *)(a2 + 16);
    __int128 v12 = *(_OWORD *)a2;
    int v13 = *(_DWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_DWORD *)(a2 + 16) = v13;
    *(_OWORD *)a3 = v12;
    *(_DWORD *)(a3 + 16) = v11;
    BOOL result = GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( a2,  a1);
    if (result)
    {
      int v14 = *(_DWORD *)(a1 + 16);
      __int128 v15 = *(_OWORD *)a1;
      int v16 = *(_DWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 16) = v16;
      *(_OWORD *)a2 = v15;
      *(_DWORD *)(a2 + 16) = v14;
    }
  }

  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>( __n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( a4,  a3))
  {
    int v9 = *(_DWORD *)(a3 + 16);
    __int128 v10 = *(_OWORD *)a3;
    int v11 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_DWORD *)(a3 + 16) = v11;
    *(_OWORD *)a4 = v10;
    *(_DWORD *)(a4 + 16) = v9;
    if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( a3,  a2))
    {
      int v12 = *(_DWORD *)(a2 + 16);
      __n128 v13 = *(__n128 *)a2;
      int v14 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v14;
      *(__n128 *)a3 = v13;
      *(_DWORD *)(a3 + 16) = v12;
      if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( a2,  (uint64_t)a1))
      {
        unsigned __int32 v15 = a1[1].n128_u32[0];
        __n128 result = *a1;
        unsigned __int32 v16 = *(_DWORD *)(a2 + 16);
        *a1 = *(__n128 *)a2;
        a1[1].n128_u32[0] = v16;
        *(__n128 *)a2 = result;
        *(_DWORD *)(a2 + 16) = v15;
      }
    }
  }

  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>( __n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( a5,  a4))
  {
    int v11 = *(_DWORD *)(a4 + 16);
    __int128 v12 = *(_OWORD *)a4;
    int v13 = *(_DWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_DWORD *)(a4 + 16) = v13;
    *(_OWORD *)a5 = v12;
    *(_DWORD *)(a5 + 16) = v11;
    if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( a4,  a3))
    {
      int v14 = *(_DWORD *)(a3 + 16);
      __int128 v15 = *(_OWORD *)a3;
      int v16 = *(_DWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_DWORD *)(a3 + 16) = v16;
      *(_OWORD *)a4 = v15;
      *(_DWORD *)(a4 + 16) = v14;
      if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( a3,  a2))
      {
        int v17 = *(_DWORD *)(a2 + 16);
        __n128 v18 = *(__n128 *)a2;
        int v19 = *(_DWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_DWORD *)(a2 + 16) = v19;
        *(__n128 *)a3 = v18;
        *(_DWORD *)(a3 + 16) = v17;
        if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( a2,  (uint64_t)a1))
        {
          unsigned __int32 v20 = a1[1].n128_u32[0];
          __n128 result = *a1;
          unsigned __int32 v21 = *(_DWORD *)(a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u32[0] = v21;
          *(__n128 *)a2 = result;
          *(_DWORD *)(a2 + 16) = v20;
        }
      }
    }
  }

  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>( __n128 *a1, __n128 *a2)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 2);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      BOOL v6 = (__n128 *)((char *)a2 - 20);
      if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( (uint64_t)&a2[-2].n128_i64[1] + 4,  (uint64_t)a1))
      {
        unsigned __int32 v7 = a1[1].n128_u32[0];
        __n128 v8 = *a1;
        unsigned __int32 v9 = v6[1].n128_u32[0];
        *a1 = *v6;
        a1[1].n128_u32[0] = v9;
        *BOOL v6 = v8;
        v6[1].n128_u32[0] = v7;
      }

      return 1LL;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>( (uint64_t)a1,  (uint64_t)a1[1].n128_i64 + 4,  (uint64_t)&a2[-2].n128_i64[1] + 4);
      return 1LL;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>( a1,  (uint64_t)a1[1].n128_i64 + 4,  (uint64_t)&a1[2].n128_i64[1],  (uint64_t)&a2[-2].n128_i64[1] + 4);
      return 1LL;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>( a1,  (uint64_t)a1[1].n128_i64 + 4,  (uint64_t)&a1[2].n128_i64[1],  (uint64_t)&a1[3].n128_i64[1] + 4,  (uint64_t)&a2[-2].n128_i64[1] + 4);
      return 1LL;
    default:
      uint64_t v10 = (uint64_t)&a1[2].n128_i64[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>( (uint64_t)a1,  (uint64_t)a1[1].n128_i64 + 4,  (uint64_t)&a1[2].n128_i64[1]);
      uint64_t v11 = (uint64_t)&a1[3].n128_i64[1] + 4;
      uint64_t v12 = 0LL;
      int v13 = 0;
      break;
  }

  while (1)
  {
    if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( v11,  v10))
    {
      __int128 v17 = *(_OWORD *)v11;
      int v18 = *(_DWORD *)(v11 + 16);
      uint64_t v14 = v12;
      while (1)
      {
        __int128 v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 60) = *(__n128 *)((char *)a1 + v14 + 40);
        *((_DWORD *)v15 + 19) = *(unsigned __int32 *)((char *)&a1[3].n128_u32[2] + v14);
        if (v14 == -40) {
          break;
        }
        v14 -= 20LL;
        if (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<( (uint64_t)&v17,  (uint64_t)(v15 + 20)))
        {
          uint64_t v16 = (uint64_t)&a1[3].n128_i64[1] + v14 + 4;
          goto LABEL_12;
        }
      }

      uint64_t v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)uint64_t v16 = v17;
      *(_DWORD *)(v16 + 16) = v18;
      if (++v13 == 8) {
        return v11 + 20 == (void)a2;
      }
    }

    uint64_t v10 = v11;
    v12 += 20LL;
    v11 += 20LL;
    if ((__n128 *)v11 == a2) {
      return 1LL;
    }
  }

void ProgramAddressHelper::UpdateActiveEncoderRef( ProgramAddressHelper *this, unsigned int a2, unsigned int a3, unsigned int a4, unint64_t a5)
{
  __n128 v8 = (void *)(*(void *)this + 88LL * a2);
  unsigned __int32 v9 = (_DWORD *)v8[2];
  if (!v9) {
    goto LABEL_124;
  }
  uint64_t v10 = (void **)(v8 + 5);
  uint64_t v11 = (void **)(v8 + 6);
  do
  {
    unsigned int v116 = v9[4];
    unsigned int v12 = v116;
    if (std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( (float *)this + 36,  v116,  &v116)[4] + 500LL >= a5)
    {
      int v26 = *(void **)v9;
      goto LABEL_123;
    }

    int v13 = (void **)*v11;
    if (!*v11) {
      goto LABEL_96;
    }
    uint64_t v14 = (void **)(v8 + 6);
    __int128 v15 = (char *)*v11;
    do
    {
      unsigned int v16 = *((_DWORD *)v15 + 7);
      BOOL v17 = v16 >= v12;
      if (v16 >= v12) {
        int v18 = (void **)v15;
      }
      else {
        int v18 = (void **)(v15 + 8);
      }
      if (v17) {
        uint64_t v14 = (void **)v15;
      }
      __int128 v15 = (char *)*v18;
    }

    while (*v18);
    if (v14 == v11 || v12 < *((_DWORD *)v14 + 7)) {
      goto LABEL_96;
    }
    int v19 = (void **)v14[1];
    unsigned __int32 v20 = v14;
    if (v19)
    {
      do
      {
        unsigned __int32 v21 = v19;
        int v19 = (void **)*v19;
      }

      while (v19);
    }

    else
    {
      do
      {
        unsigned __int32 v21 = (void **)v20[2];
        BOOL v42 = *v21 == v20;
        unsigned __int32 v20 = v21;
      }

      while (!v42);
    }

    if (*v10 == v14) {
      *uint64_t v10 = v21;
    }
    --v8[7];
    unint64_t v22 = (void **)*v14;
    unint64_t v23 = v14;
    if (*v14)
    {
      __n128 v24 = (void **)v14[1];
      if (!v24)
      {
        unint64_t v23 = v14;
LABEL_30:
        int v25 = 0;
        v22[2] = v23[2];
        goto LABEL_31;
      }

      do
      {
        unint64_t v23 = v24;
        __n128 v24 = (void **)*v24;
      }

      while (v24);
    }

    unint64_t v22 = (void **)v23[1];
    if (v22) {
      goto LABEL_30;
    }
    int v25 = 1;
LABEL_31:
    __n128 v27 = (void ***)v23[2];
    __n128 v28 = *v27;
    if (*v27 == v23)
    {
      *__n128 v27 = v22;
      if (v23 == v13)
      {
        __n128 v28 = 0LL;
        int v13 = v22;
      }

      else
      {
        __n128 v28 = v27[1];
      }
    }

    else
    {
      v27[1] = v22;
    }

    int v29 = *((unsigned __int8 *)v23 + 24);
    if (v23 != v14)
    {
      __n128 v30 = v14[2];
      v23[2] = v30;
      *((void *)v30 + (*(void *)v14[2] != (void)v14)) = v23;
      unint64_t v32 = *v14;
      __n128 v31 = v14[1];
      v32[2] = v23;
      *unint64_t v23 = v32;
      v23[1] = v31;
      if (v31) {
        v31[2] = v23;
      }
      *((_BYTE *)v23 + 24) = *((_BYTE *)v14 + 24);
      if (v13 == v14) {
        int v13 = v23;
      }
    }

    if (!v29 || !v13) {
      goto LABEL_95;
    }
    if (!v25)
    {
      *((_BYTE *)v22 + 24) = 1;
      goto LABEL_95;
    }

    while (1)
    {
      BOOL v33 = (void **)v28[2];
      if (*v33 != v28) {
        break;
      }
      if (!*((_BYTE *)v28 + 24))
      {
        *((_BYTE *)v28 + 24) = 1;
        *((_BYTE *)v33 + 24) = 0;
        __n128 v39 = v28[1];
        uint64_t *v33 = v39;
        if (v39) {
          v39[2] = v33;
        }
        v28[2] = v33[2];
        *((void *)v33[2] + (*(void *)v33[2] != (void)v33)) = v28;
        v28[1] = v33;
        v33[2] = v28;
        if (v13 == v33) {
          int v13 = v28;
        }
        __n128 v28 = (void **)*v33;
      }

      __n128 v40 = *v28;
      if (*v28 && !v40[24]) {
        goto LABEL_90;
      }
      __n128 v41 = (void **)v28[1];
      if (v41 && !*((_BYTE *)v41 + 24))
      {
        if (v40 && !v40[24])
        {
LABEL_90:
          __n128 v41 = v28;
        }

        else
        {
          *((_BYTE *)v41 + 24) = 1;
          *((_BYTE *)v28 + 24) = 0;
          uint64_t v47 = *v41;
          v28[1] = *v41;
          if (v47) {
            v47[2] = v28;
          }
          v41[2] = v28[2];
          *((void *)v28[2] + (*(void *)v28[2] != (void)v28)) = v41;
          uint64_t *v41 = v28;
          v28[2] = v41;
          __n128 v40 = v28;
        }

        BOOL v44 = v41[2];
        *((_BYTE *)v41 + 24) = *((_BYTE *)v44 + 24);
        *((_BYTE *)v44 + 24) = 1;
        v40[24] = 1;
        uint64_t v45 = *(uint64_t **)v44;
        uint64_t v48 = *(void *)(*(void *)v44 + 8LL);
        *(void *)BOOL v44 = v48;
        if (v48) {
          *(void *)(v48 + 16) = v44;
        }
        v45[2] = *((void *)v44 + 2);
        *(void *)(*((void *)v44 + 2) + 8LL * (**((void **)v44 + 2) != (void)v44)) = v45;
        v45[1] = (uint64_t)v44;
        goto LABEL_94;
      }

      *((_BYTE *)v28 + 24) = 0;
      unint64_t v38 = (void **)v28[2];
      if (*((_BYTE *)v38 + 24)) {
        BOOL v42 = v38 == v13;
      }
      else {
        BOOL v42 = 1;
      }
      if (v42) {
        goto LABEL_75;
      }
LABEL_72:
      __n128 v28 = (void **)*((void *)v38[2] + (*(void *)v38[2] == (void)v38));
    }

    if (!*((_BYTE *)v28 + 24))
    {
      *((_BYTE *)v28 + 24) = 1;
      *((_BYTE *)v33 + 24) = 0;
      unint64_t v34 = (uint64_t *)v33[1];
      uint64_t v35 = *v34;
      v33[1] = (void *)*v34;
      if (v35) {
        *(void *)(v35 + 16) = v33;
      }
      v34[2] = (uint64_t)v33[2];
      *((void *)v33[2] + (*(void *)v33[2] != (void)v33)) = v34;
      uint64_t *v34 = (uint64_t)v33;
      v33[2] = v34;
      if (v13 == *v28) {
        int v13 = v28;
      }
      __n128 v28 = (void **)*((void *)*v28 + 1);
    }

    __n128 v36 = (void **)*v28;
    if (!*v28 || *((_BYTE *)v36 + 24))
    {
      __n128 v37 = (void **)v28[1];
      if (v37 && !*((_BYTE *)v37 + 24)) {
        goto LABEL_81;
      }
      *((_BYTE *)v28 + 24) = 0;
      unint64_t v38 = (void **)v28[2];
      if (v38 == v13)
      {
        unint64_t v38 = v13;
LABEL_75:
        *((_BYTE *)v38 + 24) = 1;
        goto LABEL_95;
      }

      if (!*((_BYTE *)v38 + 24)) {
        goto LABEL_75;
      }
      goto LABEL_72;
    }

    __n128 v37 = (void **)v28[1];
    if (v37 && !*((_BYTE *)v37 + 24))
    {
LABEL_81:
      __n128 v36 = v28;
    }

    else
    {
      *((_BYTE *)v36 + 24) = 1;
      *((_BYTE *)v28 + 24) = 0;
      unsigned int v43 = v36[1];
      *__n128 v28 = v43;
      if (v43) {
        v43[2] = v28;
      }
      v36[2] = v28[2];
      *((void *)v28[2] + (*(void *)v28[2] != (void)v28)) = v36;
      v36[1] = v28;
      v28[2] = v36;
      __n128 v37 = v28;
    }

    BOOL v44 = v36[2];
    *((_BYTE *)v36 + 24) = *((_BYTE *)v44 + 24);
    *((_BYTE *)v44 + 24) = 1;
    *((_BYTE *)v37 + 24) = 1;
    uint64_t v45 = (uint64_t *)*((void *)v44 + 1);
    uint64_t v46 = *v45;
    *((void *)v44 + 1) = *v45;
    if (v46) {
      *(void *)(v46 + 16) = v44;
    }
    v45[2] = *((void *)v44 + 2);
    *(void *)(*((void *)v44 + 2) + 8LL * (**((void **)v44 + 2) != (void)v44)) = v45;
    uint64_t *v45 = (uint64_t)v44;
LABEL_94:
    *((void *)v44 + 2) = v45;
LABEL_95:
    operator delete(v14);
LABEL_96:
    int8x8_t v49 = (int8x8_t)v8[1];
    int v26 = *(void **)v9;
    unint64_t v50 = *((void *)v9 + 1);
    uint8x8_t v51 = (uint8x8_t)vcnt_s8(v49);
    v51.i16[0] = vaddlv_u8(v51);
    if (v51.u32[0] > 1uLL)
    {
      if (v50 >= *(void *)&v49) {
        v50 %= *(void *)&v49;
      }
    }

    else
    {
      v50 &= *(void *)&v49 - 1LL;
    }

    int64_t v52 = *(void **)(*v8 + 8 * v50);
    do
    {
      int64_t v53 = v52;
      int64_t v52 = (void *)*v52;
    }

    while (v52 != (void *)v9);
    if (v53 == v8 + 2) {
      goto LABEL_245;
    }
    unint64_t v54 = v53[1];
    if (v51.u32[0] > 1uLL)
    {
      if (v54 >= *(void *)&v49) {
        v54 %= *(void *)&v49;
      }
    }

    else
    {
      v54 &= *(void *)&v49 - 1LL;
    }

    uint64_t v55 = *(void *)v9;
    if (v54 == v50)
    {
LABEL_115:
      if (v55) {
        goto LABEL_116;
      }
    }

    else
    {
LABEL_245:
      if (!v26) {
        goto LABEL_114;
      }
      unint64_t v56 = v26[1];
      if (v51.u32[0] > 1uLL)
      {
        if (v56 >= *(void *)&v49) {
          v56 %= *(void *)&v49;
        }
      }

      else
      {
        v56 &= *(void *)&v49 - 1LL;
      }

      uint64_t v55 = *(void *)v9;
      if (v56 != v50)
      {
LABEL_114:
        *(void *)(*v8 + 8 * v50) = 0LL;
        uint64_t v55 = *(void *)v9;
        goto LABEL_115;
      }

LABEL_219:
    uint64_t v110 = *(void *)v84;
    unsigned int v111 = *(void **)(*(void *)v84 + 8 * v87);
    if (v111)
    {
      *uint64_t v91 = *v111;
      goto LABEL_227;
    }

    *uint64_t v91 = *((void *)v84 + 2);
    *((void *)v84 + 2) = v91;
    *(void *)(v110 + 8 * v87) = v84 + 16;
    if (*v91)
    {
      unint64_t v112 = *(void *)(*v91 + 8LL);
      if ((v88 & (v88 - 1)) != 0)
      {
        if (v112 >= v88) {
          v112 %= v88;
        }
      }

      else
      {
        v112 &= v88 - 1;
      }

      unsigned int v111 = (void *)(*(void *)v84 + 8 * v112);
LABEL_227:
      *unsigned int v111 = v91;
    }

    ++*((void *)v84 + 3);
LABEL_229:
    v91[3] = a5;
    unsigned int v86 = v91 + 4;
LABEL_230:
    *unsigned int v86 = -1LL;
LABEL_231:
    *((_DWORD *)v64 + 8) |= v81 << v59 << 16;
  }

void sub_19617C(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<unsigned long long,unsigned long long,unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & a2;
    }

    unsigned __int32 v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }

          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }

            else
            {
              v11 &= v7 - 1;
            }

            if (v11 != v3) {
              break;
            }
          }

          uint64_t v10 = (void *)*v10;
        }

        while (v10);
      }
    }
  }

  uint64_t v10 = operator new(0x30uLL);
  *uint64_t v10 = 0LL;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0LL;
  v10[4] = 0LL;
  *((_DWORD *)v10 + 10) = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1LL);
  float v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    unint64_t v6 = v3;
    goto LABEL_64;
  }

  BOOL v14 = 1LL;
  if (v7 >= 3) {
    BOOL v14 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v15 = v14 | (2 * v7);
  unint64_t v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16) {
    int8x8_t prime = (int8x8_t)v16;
  }
  else {
    int8x8_t prime = (int8x8_t)v15;
  }
  if (*(void *)&prime == 1LL)
  {
    int8x8_t prime = (int8x8_t)2LL;
  }

  else if ((*(void *)&prime & (*(void *)&prime - 1LL)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *((void *)a1 + 1);
  }

  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      unint64_t v24 = std::__next_prime(v24);
    }

    else
    {
      uint64_t v26 = 1LL << -(char)__clz(v24 - 1);
      if (v24 >= 2) {
        unint64_t v24 = v26;
      }
    }

    if (*(void *)&prime <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *((void *)a1 + 1);
      goto LABEL_60;
    }

    if (!*(void *)&prime)
    {
      BOOL v33 = *(void **)a1;
      *(void *)a1 = 0LL;
      if (v33) {
        operator delete(v33);
      }
      unint64_t v7 = 0LL;
      *((void *)a1 + 1) = 0LL;
      goto LABEL_60;
    }
  }

  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  int v18 = operator new(8LL * *(void *)&prime);
  int v19 = *(void **)a1;
  *(void *)a1 = v18;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = 0LL;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v20++) = 0LL;
  while (*(void *)&prime != v20);
  unsigned __int32 v21 = (void *)*((void *)a1 + 2);
  if (v21)
  {
    unint64_t v22 = v21[1];
    uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(void *)&prime) {
        v22 %= *(void *)&prime;
      }
    }

    else
    {
      v22 &= *(void *)&prime - 1LL;
    }

    *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
    __n128 v27 = (void *)*v21;
    if (*v21)
    {
      do
      {
        unint64_t v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(void *)&prime) {
            v28 %= *(void *)&prime;
          }
        }

        else
        {
          v28 &= *(void *)&prime - 1LL;
        }

        if (v28 != v22)
        {
          if (!*(void *)(*(void *)a1 + 8 * v28))
          {
            *(void *)(*(void *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }

          *unsigned __int32 v21 = *v27;
          *__n128 v27 = **(void **)(*(void *)a1 + 8 * v28);
          **(void **)(*(void *)a1 + 8 * v28) = v27;
          __n128 v27 = v21;
        }

        unint64_t v28 = v22;
LABEL_56:
        unsigned __int32 v21 = v27;
        __n128 v27 = (void *)*v27;
        unint64_t v22 = v28;
      }

      while (v27);
    }
  }

  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }

  else
  {
    unint64_t v6 = ((_DWORD)v7 - 1) & v6;
  }

void sub_196570(_Unwind_Exception *a1)
{
}

char *std::vector<unsigned long long>::__assign_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>( char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unsigned __int32 v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0LL;
      *unint64_t v7 = 0LL;
      v7[1] = 0LL;
      v7[2] = 0LL;
    }

    if (a4 >> 61) {
      abort();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    BOOL result = std::vector<unsigned long>::__vallocate[abi:nn180100](v7, v11);
    float v13 = (char *)v7[1];
    float v12 = (void **)(v7 + 1);
    unsigned __int32 v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      int v19 = __src;
      goto LABEL_18;
    }

    goto LABEL_19;
  }

  float v12 = (void **)(result + 8);
  BOOL v14 = (_BYTE *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unsigned __int32 v9 = (char *)*v12;
  }

  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    int v19 = v16;
LABEL_18:
    BOOL result = (char *)memmove(v18, v19, v17);
  }

BOOL std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>( uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 < *(void *)a2) {
    return 1LL;
  }
  if (*(void *)a2 < *(void *)a1) {
    return 0LL;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v2 < v3) {
    return 1LL;
  }
  if (v3 < v2) {
    return 0LL;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  unsigned int v5 = *(_DWORD *)(a2 + 12);
  if (v4 < v5) {
    return 1LL;
  }
  return v5 >= v4 && *(void *)(a1 + 16) < *(void *)(a2 + 16);
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>( a2,  a1);
  BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>( a3,  a2);
  if (v6)
  {
    unsigned __int32 v9 = (uint64_t *)(a1 + 16);
    uint64_t v8 = *(void *)a1;
    if (result)
    {
      *(void *)a1 = *(void *)a3;
      *(void *)a3 = v8;
      int v10 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v10;
      int v11 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a3 + 12);
    }

    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)a2 = v8;
      int v16 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v16;
      int v17 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = v17;
      unsigned __int32 v9 = (uint64_t *)(a2 + 16);
      uint64_t v18 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = v18;
      BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>( a3,  a2);
      if (!result) {
        return result;
      }
      uint64_t v19 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v19;
      LODWORD(v19) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v19;
      int v11 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
    }

    *(_DWORD *)(a3 + 12) = v11;
    BOOL v14 = (uint64_t *)(a3 + 16);
    goto LABEL_10;
  }

  if (result)
  {
    uint64_t v12 = *(void *)a2;
    *(void *)a2 = *(void *)a3;
    *(void *)a3 = v12;
    LODWORD(v12) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v12;
    LODWORD(v12) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
    *(_DWORD *)(a3 + 12) = v12;
    BOOL v14 = (uint64_t *)(a2 + 16);
    uint64_t v13 = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = v13;
    BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>( a2,  a1);
    if (result)
    {
      uint64_t v15 = *(void *)a1;
      *(void *)a1 = *(void *)a2;
      *(void *)a2 = v15;
      LODWORD(v15) = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v15;
      LODWORD(v15) = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = v15;
      unsigned __int32 v9 = (uint64_t *)(a1 + 16);
LABEL_10:
      uint64_t v20 = *v9;
      uint64_t *v9 = *v14;
      *BOOL v14 = v20;
    }
  }

  return result;
}

BOOL std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>( a4,  a3);
  if (result)
  {
    uint64_t v9 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v9;
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v9;
    LODWORD(v9) = *(_DWORD *)(a3 + 12);
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(a4 + 12);
    *(_DWORD *)(a4 + 12) = v9;
    uint64_t v10 = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = v10;
    BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>( a3,  a2);
    if (result)
    {
      uint64_t v11 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v11;
      LODWORD(v11) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v11;
      LODWORD(v11) = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a3 + 12) = v11;
      uint64_t v12 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = v12;
      BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>( a2,  a1);
      if (result)
      {
        uint64_t v13 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 12);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a2 + 12) = v13;
        uint64_t v14 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v14;
      }
    }
  }

  return result;
}

BOOL std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>( a5,  a4);
  if (result)
  {
    uint64_t v11 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v11;
    LODWORD(v11) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = v11;
    LODWORD(v11) = *(_DWORD *)(a4 + 12);
    *(_DWORD *)(a4 + 12) = *(_DWORD *)(a5 + 12);
    *(_DWORD *)(a5 + 12) = v11;
    uint64_t v12 = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = *(void *)(a5 + 16);
    *(void *)(a5 + 16) = v12;
    BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>( a4,  a3);
    if (result)
    {
      uint64_t v13 = *(void *)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v13;
      LODWORD(v13) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = v13;
      LODWORD(v13) = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a3 + 12) = *(_DWORD *)(a4 + 12);
      *(_DWORD *)(a4 + 12) = v13;
      uint64_t v14 = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = *(void *)(a4 + 16);
      *(void *)(a4 + 16) = v14;
      BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>( a3,  a2);
      if (result)
      {
        uint64_t v15 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v15;
        LODWORD(v15) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v15;
        LODWORD(v15) = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
        *(_DWORD *)(a3 + 12) = v15;
        uint64_t v16 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = *(void *)(a3 + 16);
        *(void *)(a3 + 16) = v16;
        BOOL result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>( a2,  a1);
        if (result)
        {
          uint64_t v17 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v17;
          LODWORD(v17) = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = v17;
          LODWORD(v17) = *(_DWORD *)(a1 + 12);
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
          *(_DWORD *)(a2 + 12) = v17;
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a2 + 16) = v18;
        }
      }
    }
  }

  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>( uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>( a2 - 24,  a1))
      {
        uint64_t v6 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 24);
        *(void *)(a2 - 24) = v6;
        LODWORD(v6) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v6;
        LODWORD(v6) = *(_DWORD *)(a1 + 12);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 - 12);
        *(_DWORD *)(a2 - 12) = v6;
        uint64_t v7 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v7;
      }

      return 1LL;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>( a1,  a1 + 24,  a2 - 24);
      return 1LL;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>( a1,  a1 + 24,  a1 + 48,  a2 - 24);
      return 1LL;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>( a1,  a1 + 24,  a1 + 48,  a1 + 72,  a2 - 24);
      return 1LL;
    default:
      uint64_t v8 = a1 + 48;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long> *>( a1,  a1 + 24,  a1 + 48);
      uint64_t v9 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1LL;
      }
      uint64_t v10 = 0LL;
      int v11 = 0;
      break;
  }

  while (2)
  {
    if (!std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>,std::tuple<unsigned long long,unsigned int,unsigned int,unsigned long long>>( v9,  v8)) {
      goto LABEL_21;
    }
    unint64_t v12 = *(void *)v9;
    unsigned int v13 = *(_DWORD *)(v9 + 8);
    unsigned int v14 = *(_DWORD *)(v9 + 12);
    unint64_t v15 = *(void *)(v9 + 16);
    *(void *)uint64_t v9 = *(void *)v8;
    *(_DWORD *)(v9 + 8) = *(_DWORD *)(v8 + 8);
    *(_DWORD *)(v9 + 12) = *(_DWORD *)(v8 + 12);
    *(void *)(v9 + 16) = *(void *)(v8 + 16);
    uint64_t v16 = a1;
    if (v8 == a1) {
      goto LABEL_20;
    }
    uint64_t v17 = v10;
    while (1)
    {
      uint64_t v18 = a1 + v17;
      unint64_t v19 = *(void *)(a1 + v17 + 24);
      if (v12 < v19)
      {
        unsigned int v20 = *(_DWORD *)(v18 + 32);
        goto LABEL_17;
      }

      if (v19 < v12) {
        goto LABEL_19;
      }
      unsigned int v20 = *(_DWORD *)(a1 + v17 + 32);
      if (v13 >= v20)
      {
        if (v20 < v13) {
          goto LABEL_19;
        }
        unsigned int v21 = *(_DWORD *)(a1 + v17 + 36);
        if (v14 >= v21)
        {
          if (v21 < v14)
          {
LABEL_19:
            uint64_t v16 = v8;
            goto LABEL_20;
          }

          if (v15 >= *(void *)(a1 + v17 + 40)) {
            break;
          }
        }
      }

uint64_t std::__split_buffer<std::tuple<unsigned int,SampleInfoWithPayload,unsigned long long>>::~__split_buffer( uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 104;
    unint64_t v4 = *(void **)(v2 - 32);
    if (v4)
    {
      *(void *)(v2 - 24) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }

    else
    {
      v2 -= 104LL;
    }
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL GRCPerFrameData::GreaterPQElement::operator()(void *a1, void *a2)
{
  unint64_t v2 = a1[3];
  unint64_t v3 = a2[3];
  BOOL v4 = v2 > v3;
  if (v2 == v3)
  {
    unint64_t v5 = a1[6];
    unint64_t v6 = a2[6];
    BOOL v4 = v5 > v6;
    if (v5 == v6)
    {
      unint64_t v7 = a1[7];
      unint64_t v8 = a2[7];
      BOOL v4 = v7 > v8;
      if (v7 == v8)
      {
        unint64_t v9 = a1[5];
        unint64_t v10 = a2[5];
        BOOL v4 = v9 > v10;
        if (v9 == v10)
        {
          unint64_t v11 = a1[8];
          unint64_t v12 = a2[8];
          BOOL v4 = v11 > v12;
          if (v11 == v12) {
            return a1[9] > a2[9];
          }
        }
      }
    }
  }

  return v4;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,unsigned int &,int>( uint64_t a1, unsigned int a2, int a3, int a4)
{
  unint64_t v8 = a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v9 - 1) & a2;
    }

    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      unint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == a2)
          {
            if (*((_DWORD *)v12 + 4) == a2) {
              return v12;
            }
          }

          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }

            else
            {
              v13 &= v9 - 1;
            }

            if (v13 != v4) {
              break;
            }
          }

          unint64_t v12 = (void *)*v12;
        }

        while (v12);
      }
    }
  }

  unint64_t v12 = operator new(0x18uLL);
  *unint64_t v12 = 0LL;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = a3;
  *((_DWORD *)v12 + 5) = a4;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1LL;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( a1,  v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v9 - 1) & v8;
    }
  }

  uint64_t v20 = *(void *)a1;
  unsigned int v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *unint64_t v12 = *v21;
LABEL_38:
    *unsigned int v21 = v12;
    goto LABEL_39;
  }

  *unint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v22 = *(void *)(*v12 + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }

    else
    {
      v22 &= v9 - 1;
    }

    unsigned int v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_197068(_Unwind_Exception *a1)
{
}

uint64_t std::set<ProgramAddressHelper::ProgramAddressInfo>::set[abi:nn180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0LL;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  unint64_t v4 = a2 + 1;
  unint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      uint64_t v7 = v3;
      if (*(void *)a1 == v3) {
        break;
      }
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          uint64_t v8 = *(void *)(v8 + 8);
        }

        while (v8);
      }

      else
      {
        do
        {
          uint64_t v7 = *(void *)(v9 + 16);
          BOOL v10 = *(void *)v7 == v9;
          uint64_t v9 = v7;
        }

        while (v10);
      }

      unsigned int v11 = *(_DWORD *)(v7 + 28);
      unsigned int v12 = *((_DWORD *)v5 + 7);
      if (v11 == v12)
      {
        unsigned int v13 = (unsigned __int16)*(_DWORD *)(v7 + 32);
        unsigned int v14 = *((_DWORD *)v5 + 8);
        if (v13 == (unsigned __int16)v14)
        {
          if (HIWORD(*(_DWORD *)(v7 + 32)) < HIWORD(v14)) {
            break;
          }
        }

        else if (v13 < (unsigned __int16)*((_DWORD *)v5 + 8))
        {
          break;
        }
      }

      else
      {
        if (v11 < v12) {
          break;
        }
        unsigned int v14 = *((_DWORD *)v5 + 8);
      }

      float v15 = std::__tree<ProgramAddressHelper::ProgramAddressInfo>::__find_equal<ProgramAddressHelper::ProgramAddressInfo>( a1,  &v20,  v12,  v14);
LABEL_18:
      if (!*v15)
      {
        BOOL v16 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v16 + 28) = *(void *)((char *)v5 + 28);
        std::__tree<llvm::DIType *>::__insert_node_at((uint64_t **)a1, v20, (uint64_t **)v15, v16);
      }

      unint64_t v17 = (void *)v5[1];
      if (v17)
      {
        do
        {
          unint64_t v18 = v17;
          unint64_t v17 = (void *)*v17;
        }

        while (v17);
      }

      else
      {
        do
        {
          unint64_t v18 = (void *)v5[2];
          BOOL v10 = *v18 == (void)v5;
          unint64_t v5 = v18;
        }

        while (!v10);
      }

      unint64_t v5 = v18;
      if (v18 == v4) {
        return a1;
      }
    }

    if (v6)
    {
      uint64_t v20 = v7;
      float v15 = (uint64_t *)(v7 + 8);
    }

    else
    {
      uint64_t v20 = v3;
      float v15 = (uint64_t *)v3;
    }

    goto LABEL_18;
  }

  return a1;
}

void sub_1971F0(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::set<ProgramAddressHelper::ProgramAddressInfo>>>( uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & a2;
    }

    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      BOOL v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }

          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }

            else
            {
              v11 &= v7 - 1;
            }

            if (v11 != v3) {
              break;
            }
          }

          BOOL v10 = (void *)*v10;
        }

        while (v10);
      }
    }
  }

  unsigned int v12 = operator new(0x30uLL);
  BOOL v10 = v12;
  *unsigned int v12 = 0LL;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = *(_DWORD *)a3;
  unsigned int v13 = (void *)(a3 + 16);
  uint64_t v14 = *(void *)(a3 + 16);
  v12[3] = *(void *)(a3 + 8);
  v12[4] = v14;
  float v15 = (char *)(v12 + 4);
  uint64_t v16 = *(void *)(a3 + 24);
  v12[5] = v16;
  if (v16)
  {
    *(void *)(v14 + 16) = v15;
    *(void *)(a3 + 8) = v13;
    *unsigned int v13 = 0LL;
    *(void *)(a3 + 24) = 0LL;
  }

  else
  {
    v12[3] = v15;
  }

  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if (!v7 || (float)(v18 * (float)v7) < v17)
  {
    BOOL v19 = 1LL;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( a1,  v22);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }
  }

  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *BOOL v10 = *v24;
LABEL_41:
    *unint64_t v24 = v10;
    goto LABEL_42;
  }

  *BOOL v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v25 = *(void *)(*v10 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7) {
        v25 %= v7;
      }
    }

    else
    {
      v25 &= v7 - 1;
    }

    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_41;
  }

void sub_197438(_Unwind_Exception *a1)
{
}

void std::__tree<ProgramAddressHelper::ProgramAddressInfo>::__emplace_unique_impl<unsigned long long &,ProgramAddressHelper::eAddressRange,unsigned int &>( uint64_t **a1, unsigned int a2, unsigned __int16 a3, unsigned __int16 a4)
{
  uint8x8_t v8 = operator new(0x28uLL);
  unsigned int v9 = a3 | (a4 << 16);
  v8[7] = a2;
  v8[8] = v9;
  BOOL v10 = std::__tree<ProgramAddressHelper::ProgramAddressInfo>::__find_equal<ProgramAddressHelper::ProgramAddressInfo>( (uint64_t)a1,  &v11,  a2,  v9);
  if (*v10) {
    operator delete(v8);
  }
  else {
    std::__tree<llvm::DIType *>::__insert_node_at(a1, v11, (uint64_t **)v10, (uint64_t *)v8);
  }
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int &>( uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & a2;
    }

    unsigned int v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }

        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }

          else
          {
            v11 &= v7 - 1;
          }

          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }

  unsigned int v12 = operator new(0x18uLL);
  *unsigned int v12 = 0LL;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1LL;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( a1,  v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }
  }

  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *unsigned int v12 = *v20;
LABEL_38:
    *unint64_t v20 = v12;
    goto LABEL_39;
  }

  *unsigned int v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }

    else
    {
      v21 &= v7 - 1;
    }

    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }

void sub_1976E0(_Unwind_Exception *a1)
{
}

uint64_t *std::__tree<ProgramAddressHelper::ProgramAddressInfo>::__find_equal<ProgramAddressHelper::ProgramAddressInfo>( uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v6 = *(uint64_t **)(a1 + 8);
  BOOL result = (uint64_t *)(a1 + 8);
  unint64_t v5 = v6;
  if (v6)
  {
    unsigned int v7 = HIWORD(a4);
    while (1)
    {
      while (1)
      {
        uint8x8_t v8 = v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v9 == a3) {
          break;
        }
        if (v9 <= a3)
        {
          if (v9 >= a3) {
            goto LABEL_18;
          }
          goto LABEL_15;
        }

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::set<ProgramAddressHelper::ProgramAddressInfo>>,void *>>>::operator()[abi:nn180100]( char a1, void **__p)
{
  if (a1) {
    std::__tree<llvm::DIType *>::destroy(__p[4]);
  }
  operator delete(__p);
}

void GRCDerivedCounterData::~GRCDerivedCounterData(GRCDerivedCounterData *this)
{
  unint64_t v3 = (void **)((char *)this + 232);
  std::vector<std::vector<std::vector<BOOL>>>::__destroy_vector::operator()[abi:nn180100](&v3);

  unint64_t v3 = (void **)((char *)this + 184);
  std::vector<std::unordered_map<unsigned int,GTEncoderSampleIndexInfo>>::__destroy_vector::operator()[abi:nn180100](&v3);
  std::unique_ptr<FrameRawCounterData>::reset[abi:nn180100]((void ***)this + 22, 0LL);
  unint64_t v3 = (void **)((char *)this + 152);
  std::vector<PassSourceCounterInfo>::__destroy_vector::operator()[abi:nn180100](&v3);

  unint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
}

void std::vector<std::vector<std::vector<BOOL>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        unint64_t v6 = v4;
        std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:nn180100](&v6);
      }

      while (v4 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void std::vector<PassSourceCounterInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }

        v4 -= 32;
      }

      while (v4 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void ___ZN21GRCCurrentFrameStream23AddFrameEncoderTimeDataEP12NSDictionary_block_invoke( uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v35 = v5;
  __n128 v36 = v6;
  unsigned int v8 = [v5 unsignedIntValue];
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v6 objectAtIndexedSubscript:0]);
  unsigned int v10 = [v9 unsignedIntValue];

  unsigned int v11 = (void *)objc_claimAutoreleasedReturnValue([v6 objectAtIndexedSubscript:1]);
  unsigned int v37 = [v11 unsignedIntValue];

  unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([v6 objectAtIndexedSubscript:2]);
  unsigned int v13 = [v12 unsignedIntValue];

  if ((unint64_t)[v6 count] < 4)
  {
    id v15 = 0LL;
    if (!v13) {
      goto LABEL_25;
    }
  }

  else
  {
    float v14 = (void *)objc_claimAutoreleasedReturnValue([v6 objectAtIndexedSubscript:3]);
    id v15 = [v14 unsignedLongLongValue];

    uint64_t v38 = v8;
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>( v7 + 88,  v8,  &v38)[3] = v15;
    if (!v13) {
      goto LABEL_25;
    }
  }

  uint64_t v16 = 0LL;
  unint64_t v17 = v8;
  do
  {
    if (*(_BYTE *)(a1 + 56))
    {
      uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8LL * (v10 + v16));
      if (v18)
      {
        unint64_t v19 = v37 + v16;
        unint64_t v20 = 3 * v18 / 0x7DuLL;
        unint64_t v21 = *(void **)(*(void *)(a1 + 32) + 8LL);
        uint64_t v23 = (unint64_t *)v21[7];
        unint64_t v22 = v21[8];
        if ((unint64_t)v23 >= v22)
        {
          unint64_t v25 = (unint64_t *)v21[6];
          uint64_t v26 = ((char *)v23 - (char *)v25) >> 5;
          unint64_t v27 = v26 + 1;
          uint64_t v28 = v22 - (void)v25;
          if (v28 >> 4 > v27) {
            unint64_t v27 = v28 >> 4;
          }
          BOOL v29 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFE0LL;
          unint64_t v30 = 0x7FFFFFFFFFFFFFFLL;
          if (!v29) {
            unint64_t v30 = v27;
          }
          if (v30)
          {
            unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<GTMMappedBufferBlock>>(v30);
            unint64_t v25 = (unint64_t *)v21[6];
            uint64_t v23 = (unint64_t *)v21[7];
          }

          else
          {
            uint64_t v31 = 0LL;
          }

          unint64_t v32 = (unint64_t *)(v30 + 32 * v26);
          *unint64_t v32 = v20;
          v32[1] = v17;
          v32[2] = v19;
          v32[3] = (unint64_t)v15;
          BOOL v33 = v32;
          if (v23 != v25)
          {
            do
            {
              __int128 v34 = *((_OWORD *)v23 - 1);
              *((_OWORD *)v33 - 2) = *((_OWORD *)v23 - 2);
              *((_OWORD *)v33 - 1) = v34;
              v33 -= 4;
              v23 -= 4;
            }

            while (v23 != v25);
            unint64_t v25 = (unint64_t *)v21[6];
          }

          unint64_t v24 = v32 + 4;
          v21[6] = v33;
          v21[7] = v32 + 4;
          v21[8] = v30 + 32 * v31;
          if (v25) {
            operator delete(v25);
          }
        }

        else
        {
          *uint64_t v23 = v20;
          v23[1] = v17;
          unint64_t v24 = v23 + 4;
          v23[2] = v19;
          v23[3] = (unint64_t)v15;
        }

        v21[7] = v24;
      }
    }

    ++v16;
  }

  while (v16 != v13);
LABEL_25:
}

void sub_197C1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
}

void ___ZN21GRCCurrentFrameStream30PopulateProgramAddressDataInfoEP12NSDictionary_block_invoke( uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5 && v6)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    unsigned int v9 = [v6 unsignedIntValue];
    unsigned int v10 = [v5 unsignedIntValue];
    *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( v8 + 48,  v10,  &v10)
    + 5) = v9;
  }
}

void sub_197CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN21GRCCurrentFrameStream30PopulateProgramAddressDataInfoEP12NSDictionary_block_invoke_2( uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if ((unint64_t)[v5 count] >= 2)
  {
    unsigned int v7 = [v8 unsignedIntValue];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = ___ZN21GRCCurrentFrameStream30PopulateProgramAddressDataInfoEP12NSDictionary_block_invoke_3;
    v9[3] = &unk_58FAE8;
    uint64_t v11 = v6;
    id v10 = v8;
    unsigned int v12 = v7;
    [v5 enumerateObjectsUsingBlock:v9];
  }
}

void sub_197DCC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZN21GRCCurrentFrameStream30PopulateProgramAddressDataInfoEP12NSDictionary_block_invoke_3( uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = v4;
  if (!v4) {
    goto LABEL_94;
  }
  if (!*(void *)(a1 + 32)) {
    goto LABEL_94;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v5 firstObject]);
  unsigned int v8 = [v7 unsignedIntValue];

  unsigned int v56 = v8;
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v5 lastObject]);
  id v10 = [v9 unsignedLongLongValue];

  unint64_t v11 = *(unsigned int *)(a1 + 48);
  unint64_t v12 = *(void *)(v6 + 136);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v2 = *(unsigned int *)(a1 + 48);
      if (v12 <= v11) {
        unint64_t v2 = v11 % v12;
      }
    }

    else
    {
      unint64_t v2 = ((_DWORD)v12 - 1) & v11;
    }

    float v14 = *(void ***)(*(void *)(v6 + 128) + 8 * v2);
    if (v14)
    {
      id v15 = *v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            if (*((_DWORD *)v15 + 4) == (_DWORD)v11) {
              goto LABEL_77;
            }
          }

          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v16 >= v12) {
                v16 %= v12;
              }
            }

            else
            {
              v16 &= v12 - 1;
            }

            if (v16 != v2) {
              break;
            }
          }

          id v15 = (void *)*v15;
        }

        while (v15);
      }
    }
  }

  id v15 = operator new(0x30uLL);
  unint64_t v17 = (void *)(v6 + 144);
  *id v15 = 0LL;
  v15[1] = v11;
  *((_DWORD *)v15 + 4) = v11;
  v15[4] = 0LL;
  v15[5] = 0LL;
  v15[3] = 0LL;
  float v18 = (float)(unint64_t)(*(void *)(v6 + 152) + 1LL);
  float v19 = *(float *)(v6 + 160);
  if (v12 && (float)(v19 * (float)v12) >= v18)
  {
    unint64_t v11 = v2;
    goto LABEL_67;
  }

  BOOL v20 = 1LL;
  if (v12 >= 3) {
    BOOL v20 = (v12 & (v12 - 1)) != 0;
  }
  unint64_t v21 = v20 | (2 * v12);
  unint64_t v22 = vcvtps_u32_f32(v18 / v19);
  if (v21 <= v22) {
    int8x8_t prime = (int8x8_t)v22;
  }
  else {
    int8x8_t prime = (int8x8_t)v21;
  }
  if (*(void *)&prime == 1LL)
  {
    int8x8_t prime = (int8x8_t)2LL;
  }

  else if ((*(void *)&prime & (*(void *)&prime - 1LL)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v12 = *(void *)(v6 + 136);
  }

  if (*(void *)&prime <= v12)
  {
    if (*(void *)&prime >= v12) {
      goto LABEL_63;
    }
    unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(v6 + 152) / *(float *)(v6 + 160));
    if (v12 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
    {
      unint64_t v30 = std::__next_prime(v30);
    }

    else
    {
      uint64_t v32 = 1LL << -(char)__clz(v30 - 1);
      if (v30 >= 2) {
        unint64_t v30 = v32;
      }
    }

    if (*(void *)&prime <= v30) {
      int8x8_t prime = (int8x8_t)v30;
    }
    if (*(void *)&prime >= v12)
    {
      unint64_t v12 = *(void *)(v6 + 136);
      goto LABEL_63;
    }

    if (!*(void *)&prime)
    {
      uint64_t v55 = *(void **)(v6 + 128);
      *(void *)(v6 + 128) = 0LL;
      if (v55) {
        operator delete(v55);
      }
      unint64_t v12 = 0LL;
      *(void *)(v6 + 136) = 0LL;
      goto LABEL_63;
    }
  }

  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  unint64_t v24 = operator new(8LL * *(void *)&prime);
  unint64_t v25 = *(void **)(v6 + 128);
  *(void *)(v6 + 128) = v24;
  if (v25) {
    operator delete(v25);
  }
  uint64_t v26 = 0LL;
  *(int8x8_t *)(v6 + 136) = prime;
  do
    *(void *)(*(void *)(v6 + 128) + 8 * v26++) = 0LL;
  while (*(void *)&prime != v26);
  unint64_t v27 = (void *)*v17;
  if (*v17)
  {
    unint64_t v28 = v27[1];
    uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      if (v28 >= *(void *)&prime) {
        v28 %= *(void *)&prime;
      }
    }

    else
    {
      v28 &= *(void *)&prime - 1LL;
    }

    *(void *)(*(void *)(v6 + 128) + 8 * v28) = v17;
    BOOL v33 = (void *)*v27;
    if (*v27)
    {
      do
      {
        unint64_t v34 = v33[1];
        if (v29.u32[0] > 1uLL)
        {
          if (v34 >= *(void *)&prime) {
            v34 %= *(void *)&prime;
          }
        }

        else
        {
          v34 &= *(void *)&prime - 1LL;
        }

        if (v34 != v28)
        {
          uint64_t v35 = *(void *)(v6 + 128);
          if (!*(void *)(v35 + 8 * v34))
          {
            *(void *)(v35 + 8 * v34) = v27;
            goto LABEL_59;
          }

          *unint64_t v27 = *v33;
          void *v33 = **(void **)(*(void *)(v6 + 128) + 8 * v34);
          **(void **)(*(void *)(v6 + 128) + 8 * v34) = v33;
          BOOL v33 = v27;
        }

        unint64_t v34 = v28;
LABEL_59:
        unint64_t v27 = v33;
        BOOL v33 = (void *)*v33;
        unint64_t v28 = v34;
      }

      while (v33);
    }
  }

  unint64_t v12 = (unint64_t)prime;
LABEL_63:
  if ((v12 & (v12 - 1)) != 0)
  {
    if (v12 <= v11) {
      v11 %= v12;
    }
  }

  else
  {
    unint64_t v11 = ((_DWORD)v12 - 1) & v11;
  }

LABEL_67:
  uint64_t v36 = *(void *)(v6 + 128);
  unsigned int v37 = *(void **)(v36 + 8 * v11);
  if (v37)
  {
    *id v15 = *v37;
  }

  else
  {
    *id v15 = *v17;
    *unint64_t v17 = v15;
    *(void *)(v36 + 8 * v11) = v17;
    if (!*v15) {
      goto LABEL_76;
    }
    unint64_t v38 = *(void *)(*v15 + 8LL);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v38 >= v12) {
        v38 %= v12;
      }
    }

    else
    {
      v38 &= v12 - 1;
    }

    unsigned int v37 = (void *)(*(void *)(v6 + 128) + 8 * v38);
  }

  *unsigned int v37 = v15;
LABEL_76:
  ++*(void *)(v6 + 152);
LABEL_77:
  unint64_t v40 = v15[4];
  unint64_t v39 = v15[5];
  if (v40 >= v39)
  {
    uint64_t v42 = v15[3];
    uint64_t v43 = (uint64_t)(v40 - v42) >> 4;
    unint64_t v44 = v43 + 1;
    uint64_t v45 = v39 - v42;
    if (v45 >> 3 > v44) {
      unint64_t v44 = v45 >> 3;
    }
    else {
      unint64_t v46 = v44;
    }
    if (v46 >> 60) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v47 = (char *)operator new(16 * v46);
    uint64_t v48 = &v47[16 * v43];
    int8x8_t v49 = &v47[16 * v46];
    *(_DWORD *)uint64_t v48 = v8;
    *((void *)v48 + 1) = v10;
    __n128 v41 = v48 + 16;
    uint8x8_t v51 = (char *)v15[3];
    unint64_t v50 = (char *)v15[4];
    if (v50 != v51)
    {
      do
      {
        *((_OWORD *)v48 - 1) = *((_OWORD *)v50 - 1);
        v48 -= 16;
        v50 -= 16;
      }

      while (v50 != v51);
      unint64_t v50 = (char *)v15[3];
    }

    v15[3] = v48;
    v15[4] = v41;
    v15[5] = v49;
    if (v50) {
      operator delete(v50);
    }
  }

  else
  {
    *(_DWORD *)unint64_t v40 = v8;
    *(void *)(v40 + 8) = v10;
    __n128 v41 = (char *)(v40 + 16);
  }

  v15[4] = v41;
  unsigned int v52 = *(_DWORD *)(a1 + 48);
  int v53 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>( (void *)(v6 + 48),  v52)
        + 5);
  uint64_t v54 = v6 + 168;
  if (v53 == v8) {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( v54,  v8,  &v56)
  }
    + 5) = v52;
  else {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( v54,  v8,  &v56)
  }
    + 5) = (_DWORD)v10;
LABEL_94:
}

  a2 *= 4;
  return a2;
}

void sub_198354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::less<GRCCurrentFrameStream::IsWorkloadThrottled(unsigned int)::TimestampInfoElement> &,std::__wrap_iter<GRCCurrentFrameStream::IsWorkloadThrottled(unsigned int)::TimestampInfoElement*>>( BOOL result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    BOOL v5 = result;
    unint64_t v6 = v3 >> 1;
    unsigned int v7 = (_OWORD *)(result + 16 * (v3 >> 1));
    unsigned int v9 = (_OWORD *)(a2 - 16);
    unint64_t v8 = *(void *)(a2 - 16);
    unsigned int v10 = *(_DWORD *)(a2 - 8);
    BOOL result = GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement::operator<( (uint64_t)v7,  v8,  v10);
    if (result)
    {
      int v11 = *(_DWORD *)(a2 - 4);
      do
      {
        unint64_t v12 = v7;
        _OWORD *v9 = *v7;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        unsigned int v7 = (_OWORD *)(v5 + 16 * v6);
        BOOL result = GRCCurrentFrameStream::IsWorkloadThrottled::TimestampInfoElement::operator<( (uint64_t)v7,  v8,  v10);
        unsigned int v9 = v12;
      }

      while (result);
      *(void *)unint64_t v12 = v8;
      *((_DWORD *)v12 + 2) = v10;
      *((_DWORD *)v12 + 3) = v11;
    }
  }

  return result;
}

BOOL GRCCurrentFrameStream::IsWorkloadThrottled(unsigned int)::TimestampInfoElement::operator<( uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (*(void *)a1 != a2) {
    return *(void *)a1 > a2;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  unsigned int v4 = v3 & 1;
  unsigned int v5 = a3 & 1;
  unsigned int v6 = (v3 >> 1) & 1;
  unsigned int v7 = (a3 >> 1) & 1;
  BOOL v8 = v3 >> 2 > a3 >> 2;
  BOOL v9 = v6 == v7;
  BOOL v10 = v6 > v7;
  if (!v9) {
    BOOL v8 = v10;
  }
  BOOL v9 = v4 == v5;
  BOOL v11 = v4 > v5;
  if (v9) {
    return v8;
  }
  else {
    return v11;
  }
}

void FillAttachmentPixelFormats(uint64_t a1, uint64_t *a2, unint64_t a3, void *a4)
{
  id v16 = a4;
  uint64_t v7 = 0LL;
  int v8 = 0;
  BOOL v9 = (uint64_t *)(a1 + 8);
  do
  {
    uint64_t v11 = *v9;
    v9 += 8;
    uint64_t v10 = v11;
    if (v11)
    {
      GTMTLSMContext_getTextureDescriptor(a2, v10, a3, (uint64_t)v18);
      uint64_t v12 = v19;
      uint8x8_t v13 = (void *)objc_claimAutoreleasedReturnValue([v16 colorAttachments]);
      float v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectAtIndexedSubscript:v7]);
      [v14 setPixelFormat:v12];

      int v8 = v20;
    }

    ++v7;
  }

  while (v7 != 8);
  if (v8 <= 1) {
    uint64_t v15 = 1LL;
  }
  else {
    uint64_t v15 = v8;
  }
  objc_msgSend(v16, "setRasterSampleCount:", v15, v16);
}

uint64_t countStructMember(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 24);
  if (v1 == 1)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = *(unsigned int *)(v3 + 16);
    if ((_DWORD)v4)
    {
      LODWORD(v5) = 0;
      uint64_t v6 = *(void *)(v3 + 8);
      do
      {
        uint64_t v5 = countStructMember(v6) + v5;
        v6 += 32LL;
        --v4;
      }

      while (v4);
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    if (v1 == 2) {
      return countArrayType(*(void *)(a1 + 8));
    }
    return 1LL;
  }

  return v5;
}

uint64_t nameStructType1(apr_array_header_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 16);
  if (!(_DWORD)v3) {
    return 0LL;
  }
  uint64_t v6 = 0LL;
  uint64_t v7 = *(const char ***)(a2 + 8);
  for (unint64_t i = v7; ; i += 4)
  {
    int v9 = countStructMember((uint64_t)i);
    ++v6;
    a3 = (a3 - v9);
    if (v3 == v6) {
      return 0LL;
    }
  }

  uint64_t v11 = *i;
  if (!strncmp(v11, "user(", 5uLL)) {
    uint64_t v11 = "fragmentMember%d";
  }
  *(void *)apr_array_push(a1) = v11;
  uint64_t v12 = &v7[4 * v6];
  int v13 = *((unsigned __int8 *)v12 + 24);
  if (v13 == 1)
  {
    float v14 = v12[1];
    *(void *)apr_array_push(a1) = ".";
    return nameStructType1(a1, v14, a3);
  }

  else if (v13 == 2)
  {
    return nameArrayType(a1, (uint64_t)v7[4 * v6 + 1], a3);
  }

  else
  {
    return 0LL;
  }

uint64_t processStructMember(apr_array_header_t *a1, uint64_t a2, uint64_t a3, apr_allocator_t *a4)
{
  int v8 = *(void **)a2;
  else {
    int v9 = 0LL;
  }
  if (v9) {
    int v8 = apr_psprintf(a1->pool, "fragmentMember%d", (_DWORD)a4);
  }
  *(void *)apr_array_push(a1) = v8;
  int v10 = *(unsigned __int8 *)(a2 + 24);
  switch(v10)
  {
    case 1:
      uint64_t v11 = processStructType(a1, *(void *)(a2 + 8), a3, a4);
      break;
    case 60:
      uint64_t v11 = processPointerType(a1, *(void *)(a2 + 8), a3, a4);
      break;
    case 2:
      uint64_t v11 = processArrayType(a1, *(void *)(a2 + 8), a3, a4);
      break;
    default:
      processDataType(a1, *(unsigned __int8 *)(a2 + 25), v10, a3);
      uint64_t v12 = 1LL;
      if (!v9) {
        goto LABEL_14;
      }
      goto LABEL_13;
  }

  uint64_t v12 = v11;
  if (v9)
  {
LABEL_13:
    *(void *)apr_array_push(a1) = "[[ ";
    *(void *)apr_array_push(a1) = v9;
    *(void *)apr_array_push(a1) = " ]]";
  }

void *GenerateStringForWritingDataToTexture(apr_array_header_t *arr, uint64_t a2)
{
  else {
    uint64_t v4 = off_58FB98[(*(_BYTE *)(a2 + 14) - 3)];
  }
  *(void *)apr_array_push(arr) = v4;
  else {
    uint64_t v5 = (&off_58FEF8)[(*(_BYTE *)(a2 + 14) - 4)];
  }
  BOOL result = apr_array_push(arr);
  *BOOL result = v5;
  return result;
}

uint64_t processArrayType(apr_array_header_t *a1, uint64_t a2, uint64_t a3, apr_allocator_t *a4)
{
  for (int i = 1; ; i *= v11)
  {
    int v9 = apr_psprintf(a1->pool, "[%u]", *(unsigned __int16 *)(a2 + 20));
    *(void *)apr_array_push(a1) = v9;
    int v10 = *(unsigned __int8 *)(a2 + 24);
    if (v10 != 2) {
      break;
    }
    int v11 = *(unsigned __int16 *)(a2 + 20);
    a2 = *(void *)(a2 + 8);
  }

  if (v10 == 1)
  {
    int v12 = *(unsigned __int16 *)(a2 + 20);
    int v13 = processStructType(a1, *(void *)(a2 + 8), a3, a4);
  }

  else
  {
    if (v10 != 60)
    {
      int v14 = *(unsigned __int16 *)(a2 + 20);
      processDataType(a1, *(unsigned __int8 *)(a2 + 25), v10, a3);
      return (v14 * i);
    }

    int v12 = *(unsigned __int16 *)(a2 + 20);
    int v13 = processPointerType(a1, *(void *)(a2 + 8), a3, a4);
  }

  int v14 = v13 * v12;
  return (v14 * i);
}

uint64_t processStructType(apr_array_header_t *a1, uint64_t a2, int a3, apr_allocator_t *a4)
{
  int v4 = (int)a4;
  apr_pool_create_ex(&newpool, a1->pool, 0LL, a4);
  p = newpool;
  int v8 = apr_array_make(newpool, 8, 8);
  uint64_t nelts = a1->nelts;
  if ((int)nelts > 1)
  {
    uint64_t v10 = 0LL;
    do
    {
      elts = a1->elts;
      uint64_t v12 = *(void *)&elts[8 * v10];
      uint64_t v13 = nelts - 2;
      *(void *)&elts[8 * v10] = *(void *)&elts[8 * (int)--nelts];
      *(void *)&a1->elts[8 * (int)nelts] = v12;
      ++v10;
    }

    while (v13 > v10);
  }

  *(void *)apr_array_push(a1) = "} ";
  if (a3 >= 1)
  {
    int v14 = a3;
    do
    {
      *(void *)apr_array_push(a1) = "\t";
      --v14;
    }

    while (v14);
  }

  uint64_t v15 = *(unsigned int *)(a2 + 16);
  if ((int)v15 < 1)
  {
    uint64_t v16 = 0LL;
  }

  else
  {
    LODWORD(v16) = 0;
    unint64_t v17 = v15 + 1;
    do
    {
      v8->uint64_t nelts = 0;
      uint64_t v16 = processStructMember( v8,  *(void *)(a2 + 8) + 32LL * (v17 - 2),  (a3 + 1),  (v16 + v4))
          + v16;
      unsigned __int16 v19 = apr_array_pstrcat(a1->pool, v8, v18);
      *(void *)apr_array_push(a1) = v19;
      --v17;
    }

    while (v17 > 1);
  }

  *(void *)apr_array_push(a1) = "struct {\n";
  if (a3 >= 1)
  {
    do
    {
      *(void *)apr_array_push(a1) = "\t";
      --a3;
    }

    while (a3);
  }

  uint64_t v20 = a1->nelts;
  if ((int)v20 > 1)
  {
    uint64_t v21 = 0LL;
    do
    {
      unint64_t v22 = a1->elts;
      uint64_t v23 = *(void *)&v22[8 * v21];
      uint64_t v24 = v20 - 2;
      *(void *)&v22[8 * v21] = *(void *)&v22[8 * (int)--v20];
      *(void *)&a1->elts[8 * (int)v20] = v23;
      ++v21;
    }

    while (v24 > v21);
  }

  apr_pool_destroy(p);
  return v16;
}

uint64_t processPointerType(apr_array_header_t *arr, uint64_t a2, uint64_t a3, apr_allocator_t *a4)
{
  int v5 = a3;
  int v8 = *(unsigned __int8 *)(a2 + 22);
  if (v8 == 1)
  {
    push_front(arr, (uint64_t)"*");
    if (*(_BYTE *)(a2 + 22) == 1) {
      uint64_t v11 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v11 = 0LL;
    }
    return processStructType(arr, v11, v5, a4);
  }

  else if (v8 == 2)
  {
    uint64_t v9 = processArrayType(arr, *(void *)(a2 + 8), a3, a4);
    push_front(arr, (uint64_t)"(*");
    *(void *)apr_array_push(arr) = ")";
    return v9;
  }

  else
  {
    return 1LL;
  }

void *processDataType(apr_array_header_t *arr, int a2, int a3, int a4)
{
  uint64_t nelts = arr->nelts;
  if ((int)nelts >= 2)
  {
    uint64_t v7 = 0LL;
    do
    {
      elts = arr->elts;
      uint64_t v9 = *(void *)&elts[8 * v7];
      uint64_t v10 = nelts - 2;
      *(void *)&elts[8 * v7] = *(void *)&elts[8 * (int)--nelts];
      *(void *)&arr->elts[8 * (int)nelts] = v9;
      ++v7;
    }

    while (v10 > v7);
  }

  if ((a3 - 62) > 0xFu)
  {
    uint64_t v11 = 0LL;
    char v13 = 1;
    goto LABEL_45;
  }

  uint64_t v11 = 0LL;
  unsigned int v12 = asc_317218[(a3 - 62)];
  char v13 = 1;
  if (v12 > 0x45)
  {
    if (asc_317218[(a3 - 62)] > 0x5Bu)
    {
      if (asc_317218[(a3 - 62)] > 0x6Du)
      {
        if (v12 == 110)
        {
          uint64_t v11 = "rgba16unorm";
        }

        else
        {
          if (v12 != 112) {
            goto LABEL_45;
          }
          uint64_t v11 = "rgba16snorm";
        }
      }

      else if (v12 == 92)
      {
        uint64_t v11 = "rg11b10f";
      }

      else
      {
        if (v12 != 93) {
          goto LABEL_45;
        }
        uint64_t v11 = "rgb9e5";
      }
    }

    else if (asc_317218[(a3 - 62)] > 0x47u)
    {
      if (v12 == 72)
      {
        uint64_t v11 = "rgba8snorm";
      }

      else
      {
        if (v12 != 90) {
          goto LABEL_45;
        }
        uint64_t v11 = "rgb10a2";
      }
    }

    else if (v12 == 70)
    {
      uint64_t v11 = "rgba8unorm";
    }

    else
    {
      uint64_t v11 = "srgba8unorm";
    }
  }

  else if (asc_317218[(a3 - 62)] > 0x1Du)
  {
    if (asc_317218[(a3 - 62)] > 0x3Bu)
    {
      if (v12 == 60)
      {
        uint64_t v11 = "rg16unorm";
      }

      else
      {
        if (v12 != 62) {
          goto LABEL_45;
        }
        uint64_t v11 = "rg16snorm";
      }
    }

    else if (v12 == 30)
    {
      uint64_t v11 = "rg8unorm";
    }

    else
    {
      if (v12 != 32) {
        goto LABEL_45;
      }
      uint64_t v11 = "rg8snorm";
    }
  }

  else if (asc_317218[(a3 - 62)] > 0x13u)
  {
    if (v12 == 20)
    {
      uint64_t v11 = "r16unorm";
    }

    else
    {
      if (v12 != 22) {
        goto LABEL_45;
      }
      uint64_t v11 = "r16snorm";
    }
  }

  else if (v12 == 10)
  {
    uint64_t v11 = "r8unorm";
  }

  else
  {
    if (v12 != 12) {
      goto LABEL_45;
    }
    uint64_t v11 = "r8snorm";
  }

  char v13 = 0;
  a3 = a2;
LABEL_45:
  else {
    int v14 = off_58FD48[(a3 - 3)];
  }
  *(void *)apr_array_push(arr) = " ";
  BOOL result = apr_array_push(arr);
  if ((v13 & 1) != 0)
  {
    *BOOL result = v14;
  }

  else
  {
    *BOOL result = ">";
    *(void *)apr_array_push(arr) = v14;
    *(void *)apr_array_push(arr) = "<";
    BOOL result = apr_array_push(arr);
    *BOOL result = v11;
  }

  if (a4 >= 1)
  {
    do
    {
      BOOL result = apr_array_push(arr);
      *BOOL result = "\t";
      --a4;
    }

    while (a4);
  }

  uint64_t v16 = arr->nelts;
  if ((int)v16 > 1)
  {
    uint64_t v17 = 0LL;
    do
    {
      char v18 = arr->elts;
      uint64_t v19 = *(void *)&v18[8 * v17];
      uint64_t v20 = v16 - 2;
      *(void *)&v18[8 * v17] = *(void *)&v18[8 * (int)--v16];
      *(void *)&arr->elts[8 * (int)v16] = v19;
      ++v17;
    }

    while (v20 > v17);
  }

  return result;
}

void *push_front(apr_array_header_t *arr, uint64_t a2)
{
  uint64_t nelts = arr->nelts;
  if ((int)nelts >= 2)
  {
    uint64_t v5 = 0LL;
    do
    {
      elts = arr->elts;
      uint64_t v7 = *(void *)&elts[8 * v5];
      uint64_t v8 = nelts - 2;
      *(void *)&elts[8 * v5] = *(void *)&elts[8 * (int)--nelts];
      *(void *)&arr->elts[8 * (int)nelts] = v7;
      ++v5;
    }

    while (v8 > v5);
  }

  BOOL result = apr_array_push(arr);
  *BOOL result = a2;
  uint64_t v10 = arr->nelts;
  if ((int)v10 >= 2)
  {
    uint64_t v11 = 0LL;
    do
    {
      unsigned int v12 = arr->elts;
      uint64_t v13 = *(void *)&v12[8 * v11];
      uint64_t v14 = v10 - 2;
      *(void *)&v12[8 * v11] = *(void *)&v12[8 * (int)--v10];
      *(void *)&arr->elts[8 * (int)v10] = v13;
      ++v11;
    }

    while (v14 > v11);
  }

  return result;
}

uint64_t nameArrayType(apr_array_header_t *a1, uint64_t a2, int a3)
{
  int v6 = countArrayType(a2);
  int v7 = *(unsigned __int8 *)(a2 + 24);
  int v8 = v6 / *(unsigned __int16 *)(a2 + 20);
  if (v7 == 1)
  {
    uint64_t v11 = apr_psprintf(a1->pool, "[%u]", a3 / v8);
    *(void *)apr_array_push(a1) = v11;
    if (*(_BYTE *)(a2 + 24) == 1) {
      uint64_t v12 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v12 = 0LL;
    }
    *(void *)apr_array_push(a1) = ".";
    return nameStructType1(a1, v12, (a3 % v8));
  }

  else if (v7 == 2)
  {
    uint64_t v9 = apr_psprintf(a1->pool, "[%u]", a3 / v8);
    *(void *)apr_array_push(a1) = v9;
    if (*(_BYTE *)(a2 + 24) == 2) {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v10 = 0LL;
    }
    return nameArrayType(a1, v10, (a3 % v8));
  }

  else
  {
    return 0LL;
  }

uint64_t countArrayType(uint64_t a1)
{
  for (int i = 1; ; i *= v3)
  {
    int v2 = *(unsigned __int8 *)(a1 + 24);
    if (v2 != 2) {
      break;
    }
    int v3 = *(unsigned __int16 *)(a1 + 20);
    a1 = *(void *)(a1 + 8);
  }

  if (v2 == 1)
  {
    int v4 = *(unsigned __int16 *)(a1 + 20);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(unsigned int *)(v5 + 16);
    if ((_DWORD)v6)
    {
      int v7 = 0;
      uint64_t v8 = *(void *)(v5 + 8);
      do
      {
        v7 += countStructMember(v8);
        v8 += 32LL;
        --v6;
      }

      while (v6);
    }

    else
    {
      int v7 = 0;
    }

    int v9 = v7 * v4;
  }

  else
  {
    int v9 = *(unsigned __int16 *)(a1 + 20);
  }

  return (v9 * i);
}

BOOL UpdateLibraryResource(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v163 = a3;
  id v8 = a4;
  uint64_t v162 = v8;
  if (v8)
  {
    int v9 = -[NSData initWithContentsOfURL:options:error:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithContentsOfURL:options:error:",  v8,  0LL,  0LL);
    id v10 = [v7 mutableCopy];
    uint64_t v11 = v10;
    if (v9)
    {
      [v10 setObject:v9 forKeyedSubscript:@"IR"];
    }

    else
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](&OBJC_CLASS___NSData, "data"));
      [v11 setObject:v12 forKeyedSubscript:@"IR"];
    }

    id v13 = [v11 copy];

    id v7 = v13;
  }

  id v174 = 0LL;
  id v179 = 0LL;
  __int128 v183 = 0u;
  __int128 v184 = 0u;
  unint64_t v185 = 0LL;
  id v164 = v7;
  GTMTLReplayController_rewind((uint64_t)a1);
  id v14 = a1[1];
  uint64_t v15 = (char *)*a1;
  uint64_t v16 = *((void *)*a1 + 5);
  unint64_t v18 = *((void *)*a1 + 10);
  uint64_t v17 = *((void *)*a1 + 11);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v164 objectForKeyedSubscript:@"streamref"]);
  id v20 = [v19 unsignedLongLongValue];
  unint64_t v21 = v17 + v18;

  uint64_t Object = GTMTLSMContext_lastObject(*(void *)v16, (uint64_t)v20, v21);
  if (!Object)
  {
    BOOL v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Internal error: Unable to find object (%llu)",  v20));
    id Error = GTUpdateShaderMakeError(1u, v33, 0LL, 0LL);
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(Error);
    goto LABEL_21;
  }

  uint64_t v23 = (void *)Object;
  unsigned int v178 = (uint64_t *)v16;
  id v167 = v14;
  id v179 = v167;
  __int128 v24 = *(_OWORD *)(v15 + 8);
  __int128 v180 = v24;
  unint64_t v181 = v18;
  unint64_t v182 = v21;
  uint64_t v25 = *(unsigned int *)v23;
  if ((_DWORD)v25 != 43)
  {
    if ((_DWORD)v25 == 62)
    {
      id v165 = v164;
      uint64_t v26 = v23[1];
      __int128 v157 = v23;
      if (v23[2] >= v18)
      {
        unint64_t v27 = objc_alloc(&OBJC_CLASS___NSMutableSet);
        unint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v26));
        unint64_t v185 = -[NSMutableSet initWithObjects:](v27, "initWithObjects:", v28, 0LL);
      }

      unint64_t v158 = (void *)objc_claimAutoreleasedReturnValue([v167 defaultDevice]);
      unsigned int v161 = (void *)objc_claimAutoreleasedReturnValue([v165 objectForKeyedSubscript:@"source"]);
      if (v161)
      {
        uint64_t v29 = v23[13];
        if (v29)
        {
          unint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v167 dynamicLibraries]);
          MTLCompileOptions = MakeMTLCompileOptions(v29, v30);
          uint64_t v32 = (MTLCompileOptions *)objc_claimAutoreleasedReturnValue(MTLCompileOptions);
        }

        else
        {
          uint64_t v32 = objc_alloc_init(&OBJC_CLASS___MTLCompileOptions);
        }

        -[MTLCompileOptions setDebuggingEnabled:](v32, "setDebuggingEnabled:", 1LL);
        id v160 = [v158 newLibraryWithSource:v161 options:v32 error:&v174];
        BOOL v61 = v160 == 0LL;
      }

      else
      {
        unsigned int v59 = (void *)objc_claimAutoreleasedReturnValue([v165 objectForKeyedSubscript:@"IR"]);
        id v60 = GTCreateMTLLibrary(a1, (uint64_t)v23, v59, &v174);
        id v160 = (id)objc_claimAutoreleasedReturnValue(v60);
        BOOL v61 = v160 == 0LL;
      }

      if (v61)
      {
      }

      else
      {
        uint64_t v159 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v26));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v159, "setObject:forKeyedSubscript:", v160, v62);

        *(void *)&__int128 v183 = -[NSMutableDictionary copy](v159, "copy");
        int obja = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        __n128 v63 = (void *)objc_claimAutoreleasedReturnValue([a1[1] functionMap]);
        -[NSMutableDictionary addEntriesFromDictionary:](obja, "addEntriesFromDictionary:", v63);

        -[NSMutableDictionary addEntriesFromDictionary:](obja, "addEntriesFromDictionary:", v159);
        apr_pool_create_ex(newpool, 0LL, 0LL, v64);
        p = newpool[0];
        unsigned int v65 = apr_array_make(newpool[0], 128, 8);
        uint64_t v169 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        GTMTLSMContext_getObjects(*(_DWORD **)(v16 + 224), v18, v65);
        int nelts = v65->nelts;
        if (nelts >= 1)
        {
          for (uint64_t i = 0LL; i < nelts; ++i)
          {
            uint64_t v68 = *(void **)&v65->elts[8 * i];
            if (v68[5] == v26)
            {
              id v69 = -[NSMutableDictionary copy](obja, "copy");
              id v70 = GTCreateMTLFunction((uint64_t)a1, v68, v69, &v174);
              uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue(v70);

              if (!v71)
              {
                id v155 = 0LL;
LABEL_49:
                char v87 = 0;
LABEL_60:

                goto LABEL_61;
              }

              uint64_t v72 = v68[1];
              BOOL v73 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v72));
              -[NSMutableDictionary setObject:forKeyedSubscript:](obja, "setObject:forKeyedSubscript:", v71, v73);

              __n128 v74 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v72));
              -[NSMutableDictionary setObject:forKeyedSubscript:](v169, "setObject:forKeyedSubscript:", v71, v74);

              int nelts = v65->nelts;
            }
          }
        }

        id v155 = -[NSMutableDictionary copy](v169, "copy");
        *((void *)&v184 + 1) = v155;

        v65->int nelts = 0;
        uint64_t v169 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        GTMTLSMContext_getObjects(*(_DWORD **)(v16 + 96), v18, v65);
        int v75 = v65->nelts;
        if (v75 >= 1)
        {
          for (uint64_t j = 0LL; j < v75; ++j)
          {
            uint64_t v77 = *(void *)&v65->elts[8 * j];
            if (*(void *)(v77 + 48) == v26)
            {
              uint64_t v78 = obja;
              __n128 v79 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v26));
              uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v78, "objectForKeyedSubscript:", v79));

              if (!v80)
              {
                id v97 = GTUpdateShaderMakeError( 1u,  @"Internal error: Failed to find runtime library for dylib",  0LL,  0LL);
                char v87 = 0;
                id v174 = (id)objc_claimAutoreleasedReturnValue(v97);
                goto LABEL_60;
              }

              int v81 = (void *)objc_claimAutoreleasedReturnValue([a1[1] defaultDevice]);
              v225[0] = 0LL;
              id v82 = [v81 newDynamicLibrary:v80 error:v225];
              id v83 = v225[0];
              if (v82)
              {
                id v84 = v82;
              }

              else
              {
                id v85 = GTUpdateShaderMakeError(4u, @"Failed to instantiate dynamic library", 0LL, v83);
                id v174 = (id)objc_claimAutoreleasedReturnValue(v85);
              }

              if (!v82) {
                goto LABEL_49;
              }
              unsigned int v86 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(v77 + 8)));
              -[NSMutableDictionary setObject:forKeyedSubscript:](v169, "setObject:forKeyedSubscript:", v82, v86);

              int v75 = v65->nelts;
            }
          }
        }

        *((void *)&v183 + 1) = -[NSMutableDictionary copy](v169, "copy");

        if (!v161)
        {
          uint64_t v169 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          uint64_t v89 = v157[13];
          if (v89)
          {
            uint64_t v90 = *(uint64_t **)(v89 + 32);
            if (v90)
            {
              uint64_t v91 = *(void *)(v89 + 40);
              if ((int)v91 >= 1)
              {
                uint64_t v92 = v91;
                do
                {
                  uint64_t v93 = *v90++;
                  float v94 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v93));
                  BOOL v95 = (void *)objc_claimAutoreleasedReturnValue([v167 dynamicLibraries]);
                  unint64_t v96 = (void *)objc_claimAutoreleasedReturnValue([v95 objectForKeyedSubscript:v94]);

                  if (v96) {
                    -[NSMutableDictionary setObject:forKeyedSubscript:](v169, "setObject:forKeyedSubscript:", v96, v94);
                  }

                  --v92;
                }

                while (v92);
              }
            }
          }

          *(void *)&__int128 v184 = -[NSMutableDictionary copy](v169, "copy");
          char v87 = 1;
          goto LABEL_60;
        }

        char v87 = 1;
LABEL_61:
        apr_pool_destroy(p);

        if ((v87 & 1) != 0) {
          goto LABEL_62;
        }
      }

LABEL_129:
      id v53 = 0LL;
      unsigned int v52 = v164;
      goto LABEL_130;
    }

    BOOL v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Internal error: Unknown object type (%llu:%u)",  v20,  v25));
    id v51 = GTUpdateShaderMakeError(1u, v33, 0LL, 0LL);
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(v51);
LABEL_21:
    id v174 = v35;

    unsigned int v52 = v164;
    id v53 = 0LL;
    goto LABEL_130;
  }

  obuint64_t j = v24;
  id v36 = v164;
  if (v23[2] >= v18)
  {
    uint64_t v54 = _GTMTLSMFunctionDisplayLabel(v23, obj);
    uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
    unsigned int v56 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Ensure the modified function '%@' isn't created during the capture",  v55));

    id v57 = GTUpdateShaderMakeError(5u, @"Unable to update shader function", v56, 0LL);
    unint64_t v58 = (void *)objc_claimAutoreleasedReturnValue(v57);
LABEL_47:
    id v174 = v58;

    goto LABEL_129;
  }

  uint64_t v37 = GTMTLSMContext_lastObject(*(void *)v16, v23[5], v18);
  if (!v37)
  {
    unsigned int v56 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Internal error: Unable to find library (%llu)",  v23[5]));
    id v88 = GTUpdateShaderMakeError(1u, v56, 0LL, 0LL);
    unint64_t v58 = (void *)objc_claimAutoreleasedReturnValue(v88);
    goto LABEL_47;
  }

  uint64_t v38 = v37;
  unint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKeyedSubscript:@"IR"]);
  id v40 = GTCreateMTLLibrary(a1, v38, v39, &v174);
  __n128 v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
  if (!v41)
  {

    goto LABEL_129;
  }

  uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([a1[1] functionMap]);
  id v43 = [v42 mutableCopy];

  unint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v23[5]));
  [v43 setObject:v41 forKeyedSubscript:v44];

  id v45 = [v43 copy];
  id v46 = GTCreateMTLFunction((uint64_t)a1, v23, v45, &v174);
  uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(v46);

  if (!v47)
  {

    goto LABEL_129;
  }

  uint64_t v48 = v23[1];
  int8x8_t v49 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  unint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v48));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v49, "setObject:forKeyedSubscript:", v47, v50);

  id v155 = -[NSMutableDictionary copy](v49, "copy");
  *((void *)&v184 + 1) = v155;

LABEL_62:
  __int128 v176 = 0u;
  __int128 v177 = 0u;
  __int128 v175 = 0u;
  unsigned int v52 = v164;
  if ((GTUpdateShaderPipelines(&v178, (uint64_t)&v175, &v174) & 1) != 0)
  {
    id v98 = a1[1];
    id v99 = v155;
    __int128 v214 = 0u;
    __int128 v215 = 0u;
    __int128 v216 = 0u;
    __int128 v217 = 0u;
    id objb = v99;
    id v100 = [v99 countByEnumeratingWithState:&v214 objects:v225 count:16];
    if (v100)
    {
      uint64_t v101 = *(void *)v215;
      uint64_t v102 = v185;
      do
      {
        for (uint64_t k = 0LL; k != v100; uint64_t k = (char *)k + 1)
        {
          if (*(void *)v215 != v101) {
            objc_enumerationMutation(objb);
          }
          uint8x8_t v104 = *(void **)(*((void *)&v214 + 1) + 8LL * (void)k);
          unsigned int v105 = -[NSMutableSet containsObject:](v102, "containsObject:", v104);
          uint8x8_t v106 = (void *)objc_claimAutoreleasedReturnValue([objb objectForKeyedSubscript:v104]);
          if (v105) {
            [a1[18] setObject:v106 forKeyedSubscript:v104];
          }
          else {
            objc_msgSend(v98, "setFunction:forKey:", v106, objc_msgSend(v104, "unsignedLongLongValue"));
          }
        }

        id v100 = [objb countByEnumeratingWithState:&v214 objects:v225 count:16];
      }

      while (v100);
    }

    id v107 = (id)v183;
    __int128 v210 = 0u;
    __int128 v211 = 0u;
    __int128 v212 = 0u;
    __int128 v213 = 0u;
    id v170 = v107;
    id v108 = [v107 countByEnumeratingWithState:&v210 objects:newpool count:16];
    if (v108)
    {
      uint64_t v109 = *(void *)v211;
      uint64_t v110 = v185;
      do
      {
        for (m = 0LL; m != v108; m = (char *)m + 1)
        {
          if (*(void *)v211 != v109) {
            objc_enumerationMutation(v170);
          }
          unint64_t v112 = *(void **)(*((void *)&v210 + 1) + 8LL * (void)m);
          unsigned int v113 = -[NSMutableSet containsObject:](v110, "containsObject:", v112);
          unsigned int v114 = (void *)objc_claimAutoreleasedReturnValue([v170 objectForKeyedSubscript:v112]);
          if (v113) {
            [a1[18] setObject:v114 forKeyedSubscript:v112];
          }
          else {
            objc_msgSend(v98, "setLibrary:forKey:", v114, objc_msgSend(v112, "unsignedLongLongValue"));
          }
        }

        id v108 = [v170 countByEnumeratingWithState:&v210 objects:newpool count:16];
      }

      while (v108);
    }

    id v115 = *((id *)&v183 + 1);
    __int128 v206 = 0u;
    __int128 v207 = 0u;
    __int128 v208 = 0u;
    __int128 v209 = 0u;
    id v168 = v115;
    id v116 = [v115 countByEnumeratingWithState:&v206 objects:v223 count:16];
    if (v116)
    {
      uint64_t v117 = *(void *)v207;
      do
      {
        for (uint64_t n = 0LL; n != v116; uint64_t n = (char *)n + 1)
        {
          if (*(void *)v207 != v117) {
            objc_enumerationMutation(v168);
          }
          uint64_t v119 = *(void **)(*((void *)&v206 + 1) + 8LL * (void)n);
          uint64_t v120 = (void *)objc_claimAutoreleasedReturnValue([v168 objectForKeyedSubscript:v119]);
          objc_msgSend(v98, "setDynamicLibrary:forKey:", v120, objc_msgSend(v119, "unsignedLongLongValue"));
        }

        id v116 = [v168 countByEnumeratingWithState:&v206 objects:v223 count:16];
      }

      while (v116);
    }

    id v121 = (id)v175;
    __int128 v202 = 0u;
    __int128 v203 = 0u;
    __int128 v204 = 0u;
    __int128 v205 = 0u;
    id v166 = v121;
    id v122 = [v166 countByEnumeratingWithState:&v202 objects:v222 count:16];
    if (v122)
    {
      uint64_t v123 = *(void *)v203;
      do
      {
        for (iuint64_t i = 0LL; ii != v122; iuint64_t i = (char *)ii + 1)
        {
          if (*(void *)v203 != v123) {
            objc_enumerationMutation(v166);
          }
          uint64_t v125 = *(void **)(*((void *)&v202 + 1) + 8LL * (void)ii);
          unint64_t v126 = (void *)objc_claimAutoreleasedReturnValue([v166 objectForKeyedSubscript:v125]);
          objc_msgSend(v98, "setRenderPipelineState:forKey:", v126, objc_msgSend(v125, "unsignedLongLongValue"));
        }

        id v122 = [v166 countByEnumeratingWithState:&v202 objects:v222 count:16];
      }

      while (v122);
    }

    id v127 = *((id *)&v175 + 1);
    __int128 v198 = 0u;
    __int128 v199 = 0u;
    __int128 v200 = 0u;
    __int128 v201 = 0u;
    id v128 = [v127 countByEnumeratingWithState:&v198 objects:v221 count:16];
    if (v128)
    {
      uint64_t v129 = *(void *)v199;
      do
      {
        for (juint64_t j = 0LL; jj != v128; juint64_t j = (char *)jj + 1)
        {
          if (*(void *)v199 != v129) {
            objc_enumerationMutation(v127);
          }
          unint64_t v131 = *(void **)(*((void *)&v198 + 1) + 8LL * (void)jj);
          unint64_t v132 = (void *)objc_claimAutoreleasedReturnValue([v127 objectForKeyedSubscript:v131]);
          objc_msgSend(v98, "setComputePipelineState:forKey:", v132, objc_msgSend(v131, "unsignedLongLongValue"));
        }

        id v128 = [v127 countByEnumeratingWithState:&v198 objects:v221 count:16];
      }

      while (v128);
    }

    id v133 = (id)v176;
    __int128 v194 = 0u;
    __int128 v195 = 0u;
    __int128 v196 = 0u;
    __int128 v197 = 0u;
    id v134 = [v133 countByEnumeratingWithState:&v194 objects:v220 count:16];
    if (v134)
    {
      uint64_t v135 = *(void *)v195;
      do
      {
        for (kuint64_t k = 0LL; kk != v134; kuint64_t k = (char *)kk + 1)
        {
          if (*(void *)v195 != v135) {
            objc_enumerationMutation(v133);
          }
          unint64_t v137 = *(void **)(*((void *)&v194 + 1) + 8LL * (void)kk);
          unsigned int v138 = (void *)objc_claimAutoreleasedReturnValue([v133 objectForKeyedSubscript:v137]);
          objc_msgSend(v98, "setFunctionHandle:forKey:", v138, objc_msgSend(v137, "unsignedLongLongValue"));
        }

        id v134 = [v133 countByEnumeratingWithState:&v194 objects:v220 count:16];
      }

      while (v134);
    }

    id v139 = *((id *)&v176 + 1);
    __int128 v190 = 0u;
    __int128 v191 = 0u;
    __int128 v192 = 0u;
    __int128 v193 = 0u;
    id v140 = [v139 countByEnumeratingWithState:&v190 objects:v219 count:16];
    if (v140)
    {
      uint64_t v141 = *(void *)v191;
      do
      {
        for (mm = 0LL; mm != v140; mm = (char *)mm + 1)
        {
          if (*(void *)v191 != v141) {
            objc_enumerationMutation(v139);
          }
          unint64_t v143 = *(void **)(*((void *)&v190 + 1) + 8LL * (void)mm);
          unint64_t v144 = (void *)objc_claimAutoreleasedReturnValue([v139 objectForKeyedSubscript:v143]);
          objc_msgSend(v98, "setVisibleFunctionTable:forKey:", v144, objc_msgSend(v143, "unsignedLongLongValue"));
        }

        id v140 = [v139 countByEnumeratingWithState:&v190 objects:v219 count:16];
      }

      while (v140);
    }

    id v145 = (id)v177;
    __int128 v186 = 0u;
    __int128 v187 = 0u;
    __int128 v188 = 0u;
    __int128 v189 = 0u;
    id v146 = [v145 countByEnumeratingWithState:&v186 objects:v218 count:16];
    if (v146)
    {
      uint64_t v147 = *(void *)v187;
      do
      {
        for (nuint64_t n = 0LL; nn != v146; nuint64_t n = (char *)nn + 1)
        {
          if (*(void *)v187 != v147) {
            objc_enumerationMutation(v145);
          }
          unint64_t v149 = *(void **)(*((void *)&v186 + 1) + 8LL * (void)nn);
          unsigned int v150 = (void *)objc_claimAutoreleasedReturnValue([v145 objectForKeyedSubscript:v149]);
          objc_msgSend(v98, "setIntersectionFunctionTable:forKey:", v150, objc_msgSend(v149, "unsignedLongLongValue"));
        }

        id v146 = [v145 countByEnumeratingWithState:&v186 objects:v218 count:16];
      }

      while (v146);
    }

    id v53 = *((id *)&v177 + 1);
    unsigned int v52 = v164;
  }

  else
  {
    id v53 = 0LL;
  }

  __destructor_8_s0_s8_s16_s24_s32_s40((id *)&v175);
LABEL_130:
  __destructor_8_s8_S_s48_s56_s64_s72_s80((id *)&v178);

  id v151 = v174;
  int64_t v152 = v151;
  if (v53)
  {
    [v163 setObject:v53 forKeyedSubscript:@"updatedPipelines"];
  }

  else
  {
    int v153 = (void *)objc_claimAutoreleasedReturnValue([v151 localizedDescription]);
    [v163 setObject:v153 forKeyedSubscript:@"propagate"];

    [v163 setObject:v152 forKeyedSubscript:@"error"];
  }

  return v53 != 0LL;
}

void sub_19A488( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, apr_pool_t *p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, id a36)
{
}

id GTUpdateShaderMakeError(unsigned int a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v9 = a2;
  id v10 = -[NSMutableDictionary initWithObjectsAndKeys:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithObjectsAndKeys:",  v9,  NSLocalizedDescriptionKey,  0LL);

  if (v7) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v7,  NSLocalizedRecoverySuggestionErrorKey);
  }
  if (v8) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v8, NSUnderlyingErrorKey);
  }
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"GTUpdateShaderErrorDomain",  a1,  v10));

  return v11;
}

id GTCreateMTLLibrary(id *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  if ([v7 length])
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([a1[1] defaultDevice]);
    if (!*(void *)(a2 + 136)) {
      goto LABEL_15;
    }
    unint64_t v39 = a4;
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 UUIDString]);
    id v11 = (id)objc_claimAutoreleasedReturnValue([v10 substringToIndex:8]);

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  *(void *)(a2 + 136)));
    id v37 = v11;
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"tmp-%@", v11));
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 stringByAppendingPathExtension:v13]);

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([a1[2821] URLByAppendingPathComponent:v14]);
    id v42 = 0LL;
    unsigned int v16 = [v7 writeToURL:v15 options:1 error:&v42];
    id v17 = v42;
    unint64_t v18 = v17;
    uint64_t v38 = v8;
    if (v16)
    {
      id v41 = v17;
      id v11 = [v8 newLibraryWithURL:v15 error:&v41];
      id v19 = v41;

      id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      [v20 removeItemAtURL:v15 error:0];

      if (v11)
      {
        id v21 = v11;
      }

      else
      {
        id v24 = _GTMTLSMLibraryDisplayLabel(a2, *((void *)*a1 + 1));
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
        id v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to instantiate library <url> '%@'",  v25));

        if (v39)
        {
          id Error = GTUpdateShaderMakeError(3u, v36, 0LL, v19);
          void *v39 = (id)objc_claimAutoreleasedReturnValue(Error);
        }
      }

      uint64_t v23 = v37;
    }

    else
    {
      id v19 = v17;
      uint64_t v23 = v11;
    }

    id v8 = v38;
    a4 = v39;
    if ((v16 & 1) == 0)
    {
LABEL_15:
      id v27 = v7;
      dispatch_data_t v28 = dispatch_data_create([v27 bytes], (size_t)objc_msgSend(v27, "length"), 0, 0);
      id v40 = 0LL;
      id v11 = [v8 newLibraryWithData:v28 error:&v40];
      id v29 = v40;
      if (v11)
      {
        id v30 = v11;
      }

      else
      {
        id v31 = _GTMTLSMLibraryDisplayLabel(a2, *((void *)*a1 + 1));
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
        BOOL v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to instantiate library <data> '%@'",  v32));

        if (a4)
        {
          id v34 = GTUpdateShaderMakeError(3u, v33, 0LL, v29);
          *a4 = (id)objc_claimAutoreleasedReturnValue(v34);
        }
      }
    }
  }

  else if (a4)
  {
    id v22 = GTUpdateShaderMakeError(1u, @"Internal error: No library data", 0LL, 0LL);
    id v11 = 0LL;
    *a4 = (id)objc_claimAutoreleasedReturnValue(v22);
  }

  else
  {
    id v11 = 0LL;
  }

  return v11;
}

id GTCreateMTLFunction(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a2[5]));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:v8]);

  if (v9)
  {
    uint64_t v10 = a2[15];
    if (v10)
    {
      MTLIntersectionFunctionDescriptor = MakeMTLIntersectionFunctionDescriptor(v10, v7);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(MTLIntersectionFunctionDescriptor);
      id v30 = 0LL;
      id v13 = [v9 newIntersectionFunctionWithDescriptor:v12 error:&v30];
      id v14 = v30;
    }

    else
    {
      uint64_t v16 = a2[14];
      if (!v16)
      {
        id v19 = (_BYTE *)a2[7];
        if (!v19 || !*v19)
        {
          id Error = GTUpdateShaderMakeError(1u, @"Internal error: empty function name", 0LL, 0LL);
          id v18 = (id)objc_claimAutoreleasedReturnValue(Error);
          goto LABEL_17;
        }

        id v18 = (id)a2[9];
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:"));
        if (v18)
        {
          MTLFunctionConstantValues = MakeMTLFunctionConstantValues((void *)a2[9]);
          id v21 = (void *)objc_claimAutoreleasedReturnValue(MTLFunctionConstantValues);
          id v28 = 0LL;
          id v13 = [v9 newFunctionWithName:v12 constantValues:v21 error:&v28];
          id v18 = v28;
        }

        else
        {
          id v13 = [v9 newFunctionWithName:v12];
        }

__CFString *_GTMTLSMFunctionDisplayLabel(void *a1, uint64_t a2)
{
  if (!a1) {
    return &stru_591D98;
  }
  int v4 = (_BYTE *)a1[8];
  if (!v4
    || !*v4
    || (uint64_t v5 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:"))) == 0LL)
  {
    uint64_t v6 = a1[15];
    if (!v6 || (uint64_t v7 = *(void *)(v6 + 8)) == 0)
    {
      uint64_t v8 = a1[14];
      if (!v8 || (uint64_t v7 = *(void *)(v8 + 8)) == 0) {
        uint64_t v7 = a1[7];
      }
    }

    uint64_t v9 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v7));
    if (v9) {
      uint64_t v5 = (__CFString *)v9;
    }
    else {
      uint64_t v5 = @"MTLFunction";
    }
  }

  uint64_t v13 = a1[1];
  id v10 = -[__CFString stringByAppendingFormat:]( v5,  "stringByAppendingFormat:",  @" 0x%llx",  *(void *)(*(void *)(*find_entry(a2, &v13, 8uLL, 0LL) + 32LL) + 8LL));
  id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

  return (__CFString *)v11;
}

uint64_t GTUpdateShaderPipelines(uint64_t **a1, uint64_t a2, void *a3)
{
  __int128 v217 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  unsigned int v218 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  unint64_t v234 = a1[1];
  unint64_t v222 = (void *)objc_claimAutoreleasedReturnValue([v234 defaultDevice]);
  apr_pool_create_ex(&newpool, 0LL, 0LL, v4);
  uint64_t v5 = apr_array_make(newpool, 128, 8);
  GTMTLSMContext_getObjects((_DWORD *)(*a1)[5], (unint64_t)a1[4], v5);
  uint64_t nelts = v5->nelts;
  uint64_t v231 = v5;
  if ((int)nelts < 1)
  {
LABEL_42:
    id v224 = -[NSMutableDictionary copy](v218, "copy");
    goto LABEL_43;
  }

  uint64_t v6 = 0LL;
  while (1)
  {
    uint64_t v7 = *(void *)&v231->elts[8 * v6];
    if (v7) {
      uint64_t v240 = *(void *)(v7 + 8);
    }
    else {
      uint64_t v240 = 0LL;
    }
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v234 unusedResourceKeys]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v240));
    unsigned __int8 v10 = [v8 containsObject:v9];

    if ((v10 & 1) != 0) {
      goto LABEL_41;
    }
    id v254 = 0LL;
    id v255 = 0LL;
    uint64_t v12 = *(void *)(v7 + 64);
    if (v12)
    {
      uint64_t v13 = *(void *)(v12 + 40);
      uint64_t v14 = *(unsigned __int16 *)(v12 + 96);
    }

    else
    {
      uint64_t v13 = 0LL;
      uint64_t v14 = 0LL;
    }

    id v15 = *a1;
    apr_pool_create_ex(&v261, 0LL, 0LL, v11);
    uint64_t v16 = v261;
    GTMTLSMComputePipelineState_computePipelineDescriptor(v15, v7, v265, v261);
    *(void *)&__int128 v256 = v266[12];
    *((void *)&v256 + 1) = v266;
    __int128 v257 = v268;
    *(void *)&__int128 v249 = &v256;
    *((void *)&v249 + 1) = 1LL;
    *(void *)&__int128 v250 = v13;
    *((void *)&v250 + 1) = v14;
    BOOL ProgramUpdateObjectMapForPipelineObjects = GetProgramUpdateObjectMapForPipelineObjects( (uint64_t *)&v249,  (id *)a1,  &v255,  &v254);
    apr_pool_destroy(v16);
    id v237 = v255;
    id v18 = v254;
    if (ProgramUpdateObjectMapForPipelineObjects) {
      break;
    }

LABEL_41:
    if (++v6 == nelts) {
      goto LABEL_42;
    }
  }

  unint64_t v225 = v18;
  id v19 = (void *)objc_claimAutoreleasedReturnValue([v234 computePipelineDescriptorMap]);
  id v20 = [v19 mutableCopy];

  id v21 = v225;
  if ([v237 count])
  {
    __int128 v272 = 0u;
    __int128 v273 = 0u;
    __int128 v270 = 0u;
    __int128 v271 = 0u;
    id v22 = v237;
    id v23 = [v22 countByEnumeratingWithState:&v270 objects:p count:16];
    if (v23)
    {
      uint64_t v24 = *(void *)v271;
      do
      {
        for (uint64_t i = 0LL; i != v23; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v271 != v24) {
            objc_enumerationMutation(v22);
          }
          uint64_t v26 = *(void *)(*((void *)&v270 + 1) + 8LL * (void)i);
          id v27 = (void *)objc_claimAutoreleasedReturnValue([v22 objectForKeyedSubscript:v26]);
          [v20 setObject:v27 forKeyedSubscript:v26];
        }

        id v23 = [v22 countByEnumeratingWithState:&v270 objects:p count:16];
      }

      while (v23);
    }

    id v21 = v225;
  }

  GTMTLSMComputePipelineState_computePipelineDescriptor(*a1, v7, v265, newpool);
  uint64_t MTLComputePipelineDescriptor = MakeMTLComputePipelineDescriptor(v265, v20);
  id v29 = (void *)objc_claimAutoreleasedReturnValue(MTLComputePipelineDescriptor);
  if ([v21 count])
  {
    id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 preloadedLibraries]);
    id v31 = v30;
    if (v30)
    {
      uint64_t v220 = objc_claimAutoreleasedReturnValue([v30 arrayByAddingObjectsFromArray:v21]);
      id v32 = (id)v220;
    }

    else
    {
      id v215 = [v21 copy];
      id v32 = v215;
    }

    [v29 setPreloadedLibraries:v32];
    BOOL v33 = v215;
    if (v31) {
      BOOL v33 = (void *)v220;
    }
  }

  id v253 = 0LL;
  id v248 = 0LL;
  id v34 = [v222 newComputePipelineStateWithDescriptor:v29 options:0x40000 reflection:&v253 error:&v248];
  id v35 = v253;
  id v36 = v248;
  if (v34)
  {
    id v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v240));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v218, "setObject:forKeyedSubscript:", v34, v37);

    if (!v35) {
      goto LABEL_40;
    }
    uint64_t v38 = (__CFString *)objc_claimAutoreleasedReturnValue([v35 performanceStatistics]);
    if (v7) {
      uint64_t v39 = *(void *)(v7 + 8);
    }
    else {
      uint64_t v39 = 0LL;
    }
    uint64_t v40 = (uint64_t)a1[2];
    *(void *)&__int128 v256 = v39;
    id v41 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(*(void *)(*find_entry(v40, &v256, 8uLL, 0LL) + 32LL) + 8LL));
    id v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v217, "setObject:forKeyedSubscript:", v38, v42);
  }

  else
  {
    if (v267) {
      uint64_t v38 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @": '%s'",  v267));
    }
    else {
      uint64_t v38 = &stru_591D98;
    }
    id v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to recreate compute pipeline%@",  v38));
    if (a3)
    {
      id Error = GTUpdateShaderMakeError(4u, v42, 0LL, v36);
      *a3 = (id)objc_claimAutoreleasedReturnValue(Error);
    }
  }

LABEL_40:
  if (v34) {
    goto LABEL_41;
  }
  id v224 = 0LL;
LABEL_43:
  apr_pool_destroy(newpool);

  if (!v224)
  {
    uint64_t v195 = 0LL;
    goto LABEL_212;
  }

  id v219 = v217;
  int64_t v226 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v238 = a1[1];
  uint64_t v221 = (void *)objc_claimAutoreleasedReturnValue([v238 defaultDevice]);
  apr_pool_create_ex(&newpool, 0LL, 0LL, v44);
  id v45 = apr_array_make(newpool, 128, 8);
  GTMTLSMContext_getObjects((_DWORD *)(*a1)[4], (unint64_t)a1[4], v45);
  uint64_t v232 = v45->nelts;
  uint64_t v235 = v45;
  if ((int)v232 < 1)
  {
LABEL_152:
    v235->uint64_t nelts = 0;
    id v223 = -[NSMutableDictionary copy](v226, "copy");
    goto LABEL_153;
  }

  uint64_t v46 = 0LL;
  while (2)
  {
    uint64_t v47 = *(void **)&v235->elts[8 * v46];
    if (v47) {
      uint64_t v241 = v47[1];
    }
    else {
      uint64_t v241 = 0LL;
    }
    uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v238 unusedResourceKeys]);
    int8x8_t v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v241));
    unsigned __int8 v50 = [v48 containsObject:v49];

    if ((v50 & 1) != 0)
    {
LABEL_99:
      if (++v46 == v232) {
        goto LABEL_152;
      }
      continue;
    }

    break;
  }

  id v51 = (void *)v47[10];
  if (!v51)
  {
    id v253 = 0LL;
    id v254 = 0LL;
    uint64_t v63 = v47[7];
    if (v63)
    {
      uint64_t v64 = *(void *)(v63 + 96);
      uint64_t v63 = *(unsigned __int16 *)(v63 + 214);
    }

    else
    {
      uint64_t v64 = 0LL;
    }

    uint64_t v263 = v64;
    uint64_t v264 = v63;
    uint64_t v85 = v47[6];
    if (v85)
    {
      *(void *)&__int128 v270 = *(void *)(v85 + 1296);
      *((void *)&v270 + 1) = v85 + 1064;
      __int128 v271 = *(_OWORD *)(v85 + 1304);
      *(void *)&__int128 v272 = *(void *)(v85 + 1176);
      *((void *)&v272 + 1) = v85 + 872;
      uint64_t v86 = *(void *)(v85 + 1184);
      uint64_t v87 = *(void *)(v85 + 1192);
      *(void *)&__int128 v273 = v86;
      *((void *)&v273 + 1) = v87;
      unint64_t v261 = (apr_pool_t *)&v270;
      uint64_t v262 = 2LL;
      BOOL v88 = GetProgramUpdateObjectMapForPipelineObjects((uint64_t *)&v261, (id *)a1, &v254, &v253);
    }

    else
    {
      uint64_t v89 = (void *)v47[9];
      if (v89)
      {
        uint64_t v90 = v89[45];
        *(void *)&__int128 v270 = v89[46];
        *((void *)&v270 + 1) = v89 + 32;
        __int128 v271 = 0uLL;
        *(void *)&__int128 v272 = v90;
        *((void *)&v272 + 1) = v89 + 24;
        __int128 v273 = 0uLL;
        uint64_t v274 = v89[43];
        __int128 v275 = v89 + 16;
        uint64_t v276 = 0LL;
        uint64_t v277 = 0LL;
        unint64_t v261 = (apr_pool_t *)&v270;
        uint64_t v262 = 3LL;
        BOOL v88 = GetProgramUpdateObjectMapForPipelineObjects((uint64_t *)&v261, (id *)a1, &v254, &v253);
      }

      else
      {
        uint64_t v91 = (void *)v47[8];
        if (!v91)
        {
          BOOL v94 = 0;
LABEL_85:
          id v70 = v254;
          id v95 = v253;
          if (!v94)
          {
            id v69 = v95;
            goto LABEL_98;
          }

          id v229 = v95;
          unint64_t v96 = (void *)objc_claimAutoreleasedReturnValue([v238 renderPipelineDescriptorMap]);
          id v77 = [v96 mutableCopy];

          __int128 v251 = 0u;
          __int128 v252 = 0u;
          __int128 v249 = 0u;
          __int128 v250 = 0u;
          id v69 = v70;
          id v97 = [v69 countByEnumeratingWithState:&v249 objects:p count:16];
          if (v97)
          {
            uint64_t v98 = *(void *)v250;
            do
            {
              for (uint64_t j = 0LL; j != v97; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v250 != v98) {
                  objc_enumerationMutation(v69);
                }
                uint64_t v100 = *(void *)(*((void *)&v249 + 1) + 8LL * (void)j);
                uint64_t v101 = (void *)objc_claimAutoreleasedReturnValue([v69 objectForKeyedSubscript:v100]);
                [v77 setObject:v101 forKeyedSubscript:v100];
              }

              id v97 = [v69 countByEnumeratingWithState:&v249 objects:p count:16];
            }

            while (v97);
          }

          uint64_t v102 = v47[6];
          if (v102)
          {
            uint64_t MTLRenderPipelineDescriptor = MakeMTLRenderPipelineDescriptor(v102, v77);
            uint8x8_t v104 = (void *)objc_claimAutoreleasedReturnValue(MTLRenderPipelineDescriptor);
            if ([v229 count])
            {
              unsigned int v105 = (void *)objc_claimAutoreleasedReturnValue([v104 vertexPreloadedLibraries]);
              uint8x8_t v106 = v105;
              if (v105)
              {
                uint64_t v213 = objc_claimAutoreleasedReturnValue([v105 arrayByAddingObjectsFromArray:v229]);
                id v107 = (id)v213;
              }

              else
              {
                id v211 = [v229 copy];
                id v107 = v211;
              }

              [v104 setVertexPreloadedLibraries:v107];
              unsigned int v113 = v211;
              if (v106) {
                unsigned int v113 = (void *)v213;
              }

              unsigned int v114 = (void *)objc_claimAutoreleasedReturnValue([v104 fragmentPreloadedLibraries]);
              if (v114)
              {
                uint64_t v212 = objc_claimAutoreleasedReturnValue([v114 arrayByAddingObjectsFromArray:v229]);
                id v115 = (id)v212;
              }

              else
              {
                id v210 = [v229 copy];
                id v115 = v210;
              }

              [v104 setFragmentPreloadedLibraries:v115];
              id v116 = v210;
              if (v114) {
                id v116 = (void *)v212;
              }
            }

            id v247 = 0LL;
            id v248 = 0LL;
            id v82 = [v221 newRenderPipelineStateWithDescriptor:v104 options:0x40000 reflection:&v248 error:&v247];
            id v117 = v248;
            id v70 = v247;
            unsigned int v118 = (uint64_t *)(v47[6] + 1200LL);
          }

          else
          {
            uint64_t v108 = v47[9];
            if (v108)
            {
              uint64_t MTLMeshRenderPipelineDescriptor = MakeMTLMeshRenderPipelineDescriptor(v108, v77);
              uint8x8_t v104 = (void *)objc_claimAutoreleasedReturnValue(MTLMeshRenderPipelineDescriptor);
              if ([v229 count])
              {
                uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue([v104 objectPreloadedLibraries]);
                unsigned int v111 = v110;
                if (v110)
                {
                  uint64_t v209 = objc_claimAutoreleasedReturnValue([v110 arrayByAddingObjectsFromArray:v229]);
                  id v112 = (id)v209;
                }

                else
                {
                  id v206 = [v229 copy];
                  id v112 = v206;
                }

                [v104 setObjectPreloadedLibraries:v112];
                unint64_t v124 = v206;
                if (v111) {
                  unint64_t v124 = (void *)v209;
                }

                uint64_t v125 = (void *)objc_claimAutoreleasedReturnValue([v104 meshPreloadedLibraries]);
                if (v125)
                {
                  uint64_t v208 = objc_claimAutoreleasedReturnValue([v125 arrayByAddingObjectsFromArray:v229]);
                  id v126 = (id)v208;
                }

                else
                {
                  id v205 = [v229 copy];
                  id v126 = v205;
                }

                [v104 setMeshPreloadedLibraries:v126];
                id v127 = v205;
                if (v125) {
                  id v127 = (void *)v208;
                }

                id v128 = (void *)objc_claimAutoreleasedReturnValue([v104 fragmentPreloadedLibraries]);
                if (v128)
                {
                  uint64_t v207 = objc_claimAutoreleasedReturnValue([v128 arrayByAddingObjectsFromArray:v229]);
                  id v129 = (id)v207;
                }

                else
                {
                  id v204 = [v229 copy];
                  id v129 = v204;
                }

                [v104 setFragmentPreloadedLibraries:v129];
                uint64_t v130 = v204;
                if (v128) {
                  uint64_t v130 = (void *)v207;
                }
              }

              id v245 = 0LL;
              id v246 = 0LL;
              id v82 = [v221 newRenderPipelineStateWithMeshDescriptor:v104 options:0x40000 reflection:&v246 error:&v245];
              id v117 = v246;
              id v70 = v245;
              unsigned int v118 = (uint64_t *)(v47[9] + 352LL);
            }

            else
            {
              uint64_t v119 = v47[8];
              if (!v119)
              {
                id v117 = 0LL;
                id v70 = 0LL;
                goto LABEL_146;
              }

              MTLTileRenderPipelineDescriptor = MakeMTLTileRenderPipelineDescriptor(v119, v77);
              uint8x8_t v104 = (void *)objc_claimAutoreleasedReturnValue(MTLTileRenderPipelineDescriptor);
              if ([v229 count])
              {
                id v121 = (void *)objc_claimAutoreleasedReturnValue([v104 preloadedLibraries]);
                id v122 = v121;
                if (v121)
                {
                  uint64_t v203 = objc_claimAutoreleasedReturnValue([v121 arrayByAddingObjectsFromArray:v229]);
                  id v123 = (id)v203;
                }

                else
                {
                  id v202 = [v229 copy];
                  id v123 = v202;
                }

                [v104 setPreloadedLibraries:v123];
                unint64_t v131 = v202;
                if (v122) {
                  unint64_t v131 = (void *)v203;
                }
              }

              id v243 = 0LL;
              id v244 = 0LL;
              id v82 = [v221 newRenderPipelineStateWithTileDescriptor:v104 options:0x40000 reflection:&v244 error:&v243];
              id v117 = v244;
              id v70 = v243;
              unsigned int v118 = (uint64_t *)(v47[8] + 96LL);
            }
          }

          uint64_t v132 = *v118;

          if (v82)
          {
            id v133 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v241));
            -[NSMutableDictionary setObject:forKeyedSubscript:](v226, "setObject:forKeyedSubscript:", v82, v133);

            if (v117)
            {
              id v134 = (__CFString *)objc_claimAutoreleasedReturnValue([v117 performanceStatistics]);
              uint64_t v135 = (uint64_t)a1[2];
              *(void *)&__int128 v270 = v47[1];
              unint64_t v136 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(*(void *)(*find_entry(v135, &v270, 8uLL, 0LL) + 32LL) + 8LL));
              unint64_t v137 = (void *)objc_claimAutoreleasedReturnValue(v136);
              -[NSMutableDictionary setObject:forKeyedSubscript:](v219, "setObject:forKeyedSubscript:", v134, v137);
              char v138 = 1;
              goto LABEL_150;
            }

LABEL_170:
      ++v148;
      uint64_t v147 = v239;
      if (v148 >= v239->nelts) {
        goto LABEL_171;
      }
    }

    int v153 = a1[9];
    int64_t v154 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(v149 + 40)));
    id v155 = (void *)objc_claimAutoreleasedReturnValue([v153 objectForKeyedSubscript:v154]);
    unint64_t v156 = v155;
    if (v155)
    {
      id v157 = v155;
    }

    else
    {
      id v164 = (void *)objc_claimAutoreleasedReturnValue([a1[1] functionMap]);
      id v165 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(v149 + 40)));
      id v157 = (id)objc_claimAutoreleasedReturnValue([v164 objectForKeyedSubscript:v165]);
    }

    id v163 = (id)objc_claimAutoreleasedReturnValue([v152 functionHandleWithFunction:v157 stage:*(unsigned __int8 *)(v149 + 64)]);
    id v166 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v150));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v236, "setObject:forKeyedSubscript:", v163, v166);
LABEL_169:

    goto LABEL_170;
  }

LABEL_171:
  v147->uint64_t nelts = 0;
  GTMTLSMContext_getObjects((_DWORD *)(*a1)[7], (unint64_t)a1[4], v147);
  if (v147->nelts >= 1)
  {
    uint64_t v170 = 0LL;
    while (1)
    {
      uint64_t v171 = *(void *)&v147->elts[8 * v170];
      uint64_t v172 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(v171 + 128)));
      unsigned int v173 = (void *)objc_claimAutoreleasedReturnValue([v242 objectForKey:v172]);

      if (v173) {
        break;
      }
      __int128 v177 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(v171 + 120)));
      unsigned int v173 = (void *)objc_claimAutoreleasedReturnValue([v230 objectForKey:v177]);

      if (v173)
      {
        uint64_t MTLVisibleFunctionTableDescriptor = MakeMTLVisibleFunctionTableDescriptor(*(void *)(v171 + 104));
        __int128 v175 = (void *)objc_claimAutoreleasedReturnValue(MTLVisibleFunctionTableDescriptor);
        id v176 = [v173 newVisibleFunctionTableWithDescriptor:v175];
        if ((UpdateVisibleFunctionTable((uint64_t)a1, v176, v171, v236) & 1) == 0)
        {
          if (a3)
          {
            id v199 = GTUpdateShaderMakeError( 1u,  @"Internal: Could not update visiable function table for compute pipeline",  0LL,  0LL);
            *a3 = (id)objc_claimAutoreleasedReturnValue(v199);
          }

          goto LABEL_205;
        }

        goto LABEL_178;
      }

LABEL_208:
  uint64_t v195 = 0LL;
LABEL_209:

LABEL_210:
  apr_pool_destroy(p[0]);

LABEL_211:
LABEL_212:

  return v195;
}

void sub_19C610(_Unwind_Exception *a1)
{
}

void __destructor_8_s8_S_s48_s56_s64_s72_s80(id *a1)
{
}

BOOL GetProgramUpdateObjectMapForPipelineObjects(uint64_t *a1, id *a2, void *a3, void *a4)
{
  id v34 = a3;
  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v36 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  if ((int)a1[1] >= 1)
  {
    uint64_t v7 = 0LL;
    uint64_t v37 = a1[1];
    do
    {
      uint64_t v8 = *a1;
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(*a1 + 32 * v7),  v34));
      unsigned __int8 v10 = (void *)objc_claimAutoreleasedReturnValue([a2[9] objectForKeyedSubscript:v9]);
      uint64_t v39 = v7;
      if (v10)
      {
        -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v10, v9);
        int v11 = 1;
      }

      else
      {
        int v11 = 0;
      }

      uint64_t v12 = 0LL;
      uint64_t v38 = v8;
      uint64_t v13 = *(uint64_t **)(v8 + 32 * v39 + 8);
      uint64_t v14 = v13[3];
      uint64_t v40 = v13[2];
      int v41 = v14;
      uint64_t v15 = v13[1];
      uint64_t v42 = *v13;
      int v43 = v15;
      uint64_t v17 = v13[6];
      uint64_t v16 = v13[7];
      uint64_t v44 = v17;
      int v45 = v16;
      do
      {
        id v18 = (uint64_t *)*(&v40 + 2 * v12);
        if (v18)
        {
          uint64_t v19 = *((unsigned int *)&v40 + 4 * v12 + 2);
          if ((int)v19 >= 1)
          {
            do
            {
              uint64_t v20 = *v18++;
              id v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v20));
              id v22 = (void *)objc_claimAutoreleasedReturnValue([a2[9] objectForKeyedSubscript:v21]);
              if (v22)
              {
                -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v22, v21);
                ++v11;
              }

              --v19;
            }

            while (v19);
          }
        }

        ++v12;
      }

      while (v12 != 3);
      uint64_t v23 = v38 + 32 * v39;
      uint64_t v24 = *(uint64_t **)(v23 + 16);
      if (v24)
      {
        uint64_t v25 = *(void *)(v23 + 24);
        if ((int)v25 >= 1)
        {
          uint64_t v26 = v25;
          do
          {
            uint64_t v27 = *v24++;
            id v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v27));
            id v29 = (void *)objc_claimAutoreleasedReturnValue([a2[7] objectForKeyedSubscript:v28]);
            if (v29) {
              -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v29, v28);
            }

            --v26;
          }

          while (v26);
        }
      }

      if (v11 && [a2[8] count])
      {
        id v30 = (void *)objc_claimAutoreleasedReturnValue([a2[8] allValues]);
        -[NSMutableArray addObjectsFromArray:](v36, "addObjectsFromArray:", v30);
      }

      uint64_t v7 = v39 + 1;
    }

    while (v39 + 1 != v37);
  }

  if (v34) {
    void *v34 = -[NSMutableDictionary copy](v6, "copy");
  }
  if (a4) {
    *a4 = -[NSMutableArray copy](v36, "copy");
  }
  id v31 = -[NSMutableDictionary count](v6, "count", v34);
  BOOL v32 = (char *)-[NSMutableArray count](v36, "count") + (void)v31 != 0LL;

  return v32;
}

uint64_t UpdateVisibleFunctionTable(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  apr_pool_create_ex(&newpool, 0LL, 0LL, v9);
  __int128 v27 = 0u;
  *(void *)&__int128 v28 = 0LL;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v30 = 0u;
  __int128 v29 = 0u;
  LODWORD(v27) = 83;
  *((void *)&v28 + 1) = -1LL;
  WORD1(v33) = 2;
  __int128 v31 = 0xFFFFFFFFFFFFFFFFLL;
  unint64_t v39 = **(void **)(a3 + 104);
  uint64_t v38 = apr_palloc(newpool, 8 * v39);
  bzero(v38, 8 * v39);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v41 = *(void *)(a3 + 8);
  uint64_t v11 = *(void *)(*(void *)(*find_entry(v10, &v41, 8uLL, 0LL) + 32LL) + 32LL);
  if (v11)
  {
    unsigned int v12 = 0;
    while (1)
    {
      unsigned int v13 = atomic_load((unsigned int *)(v11 + 4));
      uint64_t v14 = v12 + (v13 >> 6) - 1;
      uint64_t v11 = *(void *)(v11 + 40);
      unsigned int v12 = v14;
      if (!v11)
      {
        unsigned int v12 = v14;
        goto LABEL_8;
      }
    }
  }

  else
  {
    unsigned int v12 = 0;
  }

  uint64_t v14 = 0LL;
LABEL_8:
  unint64_t v15 = v12 | (unint64_t)(v14 << 32);
LABEL_9:
  uint64_t v16 = v11 + 64;
  while (v11)
  {
    uint64_t v17 = (void *)(v16 + ((uint64_t)(HIDWORD(v15) - (int)v15) << 6));
    if (*v17 >= *(void *)(a1 + 32)) {
      break;
    }
    GTMTLSMVisibleFunctionTableStateful_processTraceFuncWithMap((uint64_t)&v27, *(void *)(a1 + 24), (uint64_t)v17);
    unsigned int v18 = atomic_load((unsigned int *)(v11 + 4));
    int v19 = v15 + (v18 >> 6);
    uint64_t v20 = (HIDWORD(v15) + 1);
    unint64_t v15 = (v20 << 32) | v15;
    if ((_DWORD)v20 == v19 - 1)
    {
      unint64_t v15 = (v20 << 32) | v20;
      uint64_t v11 = *(void *)(v11 + 40);
      goto LABEL_9;
    }
  }

  if (v39)
  {
    for (unint64_t i = 0LL; v39 > i; ++i)
    {
      uint64_t v22 = *((void *)v38 + i);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v22,  v27,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v37));
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v23]);
      if (v24)
      {
      }

      else
      {
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) functionHandleForKey:v22]);

        if (!v24)
        {
          uint64_t v25 = 0LL;
          goto LABEL_22;
        }
      }

      [v7 setFunction:v24 atIndex:i];
    }
  }

  uint64_t v25 = 1LL;
LABEL_22:
  apr_pool_destroy(newpool);

  return v25;
}

void sub_19CC90(_Unwind_Exception *a1)
{
}

uint64_t UpdateIntersectionFunctionTable(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, uint64_t *a6)
{
  id v11 = a2;
  id v12 = a4;
  id v13 = a5;
  apr_pool_create_ex(&newpool, 0LL, 0LL, v14);
  bzero(v41, 0x3A0uLL);
  v41[0] = 60;
  __int16 v44 = 2;
  uint64_t v42 = -1LL;
  uint64_t v43 = -1LL;
  unint64_t v46 = *(unsigned int *)(*(void *)(a3 + 104) + 8LL);
  size_t v15 = 16 * v46;
  int v45 = (char *)apr_palloc(newpool, 16 * v46);
  bzero(v45, v15);
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v49 = *(void *)(a3 + 8);
  uint64_t v17 = *(void *)(*(void *)(*find_entry(v16, &v49, 8uLL, 0LL) + 32LL) + 32LL);
  if (v17)
  {
    unsigned int v18 = 0;
    while (1)
    {
      unsigned int v19 = atomic_load((unsigned int *)(v17 + 4));
      uint64_t v20 = v18 + (v19 >> 6) - 1;
      uint64_t v17 = *(void *)(v17 + 40);
      unsigned int v18 = v20;
      if (!v17)
      {
        unsigned int v18 = v20;
        goto LABEL_8;
      }
    }
  }

  else
  {
    unsigned int v18 = 0;
  }

  uint64_t v20 = 0LL;
LABEL_8:
  unint64_t v21 = v18 | (unint64_t)(v20 << 32);
LABEL_9:
  uint64_t v22 = v17 + 64;
  while (v17)
  {
    uint64_t v23 = (void *)(v22 + ((uint64_t)(HIDWORD(v21) - (int)v21) << 6));
    if (*v23 >= *(void *)(a1 + 32)) {
      break;
    }
    GTMTLSMIntersectionFunctionTableStateful_processTraceFuncWithMap( (uint64_t)v41,  *(void *)(a1 + 24),  (uint64_t)v23,  a6);
    unsigned int v24 = atomic_load((unsigned int *)(v17 + 4));
    int v25 = v21 + (v24 >> 6);
    uint64_t v26 = (HIDWORD(v21) + 1);
    unint64_t v21 = (v26 << 32) | v21;
    if ((_DWORD)v26 == v25 - 1)
    {
      unint64_t v21 = (v26 << 32) | v26;
      uint64_t v17 = *(void *)(v17 + 40);
      goto LABEL_9;
    }
  }

  if (v46)
  {
    uint64_t v27 = 0LL;
    for (unint64_t i = 0LL; i < v46; ++i)
    {
      int v29 = *(_DWORD *)&v45[v27];
      switch(v29)
      {
        case 3:
          [v11 setOpaqueCurveIntersectionFunctionWithSignature:*(void *)&v45[v27 + 8] atIndex:i];
          break;
        case 2:
          [v11 setOpaqueTriangleIntersectionFunctionWithSignature:*(void *)&v45[v27 + 8] atIndex:i];
          break;
        case 1:
          uint64_t v30 = *(void *)&v45[v27 + 8];
          if (v30)
          {
            __int128 v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)&v45[v27 + 8]));
            __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v31]);
            if (v32)
            {
            }

            else
            {
              __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) functionHandleForKey:v30]);

              if (!v32)
              {
LABEL_41:
                uint64_t v39 = 0LL;
                goto LABEL_42;
              }
            }

            [v11 setFunction:v32 atIndex:i];
          }

          break;
      }

      v27 += 16LL;
    }
  }

  uint64_t v33 = 0LL;
  __int128 v34 = &v47;
  do
  {
    int v35 = *((_DWORD *)v34 - 4);
    if (v35 == 2)
    {
      uint64_t v37 = *(v34 - 1);
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v37));
      __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:v38]);
      if (v36)
      {
      }

      else
      {
        __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) visibleFunctionTableForKey:v37]);

        if (!v36) {
          goto LABEL_41;
        }
      }

      [v11 setVisibleFunctionTable:v36 atBufferIndex:v33];
      goto LABEL_38;
    }

    if (v35 == 1 && *(v34 - 1))
    {
      __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "bufferForKey:"));
      if (!v36) {
        goto LABEL_41;
      }
      [v11 setBuffer:v36 offset:*v34 atIndex:v33];
LABEL_38:
    }

    ++v33;
    v34 += 3;
  }

  while (v33 != 31);
  uint64_t v39 = 1LL;
LABEL_42:
  apr_pool_destroy(newpool);

  return v39;
}

void sub_19D034(_Unwind_Exception *a1)
{
}

id _GTMTLSMLibraryDisplayLabel(uint64_t a1, uint64_t a2)
{
  int v4 = *(_BYTE **)(a1 + 112);
  if (v4 && *v4) {
    uint64_t v5 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:"));
  }
  else {
    uint64_t v5 = @"MTLLibrary";
  }
  uint64_t v9 = *(void *)(a1 + 8);
  id v6 = -[__CFString stringByAppendingFormat:]( v5,  "stringByAppendingFormat:",  @" 0x%llx",  *(void *)(*(void *)(*find_entry(a2, &v9, 8uLL, 0LL) + 32LL) + 8LL));
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  return v7;
}

uint64_t GTResourceTrackerGetResourceType(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1;
  entry = find_entry(a2, &v5, 8uLL, 0LL);
  if (*entry && (uint64_t v3 = *(void *)(*entry + 32LL)) != 0) {
    return GetFuncEnumConstructorType(*(_DWORD *)(*(void *)(v3 + 32) + 72LL));
  }
  else {
    return 0LL;
  }
}

uint64_t GTResourceTrackerUsingResource(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a3;
  if (a3)
  {
    id v8 = (apr_pool_t **)result;
    BOOL result = (uint64_t)find_entry(result, &v17, 8uLL, 0LL);
    if (!*(void *)result || !*(void *)(*(void *)result + 32LL))
    {
      uint64_t v9 = apr_palloc(*v8, 0x10uLL);
      *(void *)uint64_t v9 = v17;
      apr_hash_set((apr_hash_t *)v8, v9, 8LL, v9);
      *(void *)&__int128 v18 = v17;
      uint64_t v10 = *find_entry(a4, &v18, 8uLL, 0LL);
      if (v10 && (uint64_t v11 = *(void *)(v10 + 32)) != 0)
      {
        uint64_t v12 = *(void *)(v11 + 32);
        if (v12) {
          uint64_t v13 = v12 + 64;
        }
        else {
          uint64_t v13 = 0LL;
        }
      }

      else
      {
        uint64_t v13 = 0LL;
      }

      BOOL result = GetFuncEnumConstructorType(*(_DWORD *)(v13 + 8));
      v9[2] = result;
      if (a2 != 16)
      {
        if (a2 != 80)
        {
          if (a2 != 22) {
            return result;
          }
          __int128 v18 = 0u;
          uint64_t v19 = 0LL;
          __int128 v25 = 0u;
          __int128 v27 = 0u;
          __int128 v28 = 0u;
          __int128 v24 = 0u;
          __int128 v21 = 0u;
          __int128 v22 = 0u;
          LODWORD(v18) = 22;
          uint64_t v20 = -1LL;
          WORD1(v25) = 2;
          __int128 v23 = 0xFFFFFFFFFFFFFFFFLL;
          __int128 v26 = 0xFFFFFFFFFFFFFFFFLL;
          GTMTLSMBuffer_processTraceFuncWithMap((char *)&v18, a5, (uint64_t *)v13);
          goto LABEL_14;
        }

        __int128 v18 = 0u;
        uint64_t v19 = 0LL;
        __int128 v30 = 0u;
        __int128 v31 = 0u;
        __int128 v28 = 0u;
        __int128 v29 = 0u;
        __int128 v27 = 0u;
        __int128 v25 = 0u;
        __int128 v26 = 0u;
        __int128 v24 = 0u;
        __int128 v21 = 0u;
        __int128 v22 = 0u;
        LODWORD(v18) = 80;
        uint64_t v20 = -1LL;
        WORD1(v25) = 2;
        __int128 v23 = 0xFFFFFFFFFFFFFFFFLL;
        uint64_t v32 = 0xFFFFFFFFLL;
        GTMTLSMTexture_processTraceFuncWithMap((char *)&v18, a5, (uint64_t *)v13);
        uint64_t v14 = v28;
        if ((void)v28)
        {
          size_t v15 = v8;
          uint64_t v16 = 80LL;
          return GTResourceTrackerUsingResource(v15, v16, v14, a4, a5);
        }

        uint64_t v14 = *((void *)&v27 + 1);
        if (!*((void *)&v27 + 1))
        {
LABEL_14:
          uint64_t v14 = v22;
          size_t v15 = v8;
          uint64_t v16 = 50LL;
          return GTResourceTrackerUsingResource(v15, v16, v14, a4, a5);
        }

void *tracker_resource_get(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v23 = a3;
  GTResourceTrackerUsingResource(a1[2], a2, a3, *a1, a1[1]);
  uint64_t ParentResource = GetParentResource(*a1, v5, a1[1]);
  if (ParentResource != v5)
  {
    find_entry(*a1, &ParentResource, 8uLL, 0LL);
    uint64_t v5 = ParentResource;
    uint64_t v23 = ParentResource;
  }

  if (!v5) {
    return 0LL;
  }
  id v7 = (apr_hash_t *)a1[4];
  entry = find_entry((uint64_t)v7, &v23, 8uLL, 0LL);
  if (!*entry || (uint64_t v9 = *(void **)(*entry + 32LL)) == 0LL)
  {
    uint64_t v10 = *(apr_pool_t **)v7;
    uint64_t v11 = *a1;
    uint64_t v12 = a1[1];
    uint64_t v24 = v23;
    uint64_t v13 = *find_entry(v11, &v24, 8uLL, 0LL);
    if (v13)
    {
      uint64_t v14 = *(void **)(v13 + 32);
      if (v14)
      {
        uint64_t v15 = v14[4];
        if (v15)
        {
          if ((*(_BYTE *)(v15 + 79) & 8) != 0)
          {
            uint64_t v16 = v15 + 64;
            goto LABEL_14;
          }
        }
      }
    }

    else
    {
      uint64_t v14 = 0LL;
    }

    uint64_t v16 = 0LL;
LABEL_14:
    uint64_t v17 = apr_palloc(v10, 0x38uLL);
    uint64_t v9 = v17;
    if (v17)
    {
      *((void *)v17 + 6) = 0LL;
      v17[1] = 0u;
      v17[2] = 0u;
      *uint64_t v17 = 0u;
    }

    *(void *)uint64_t v17 = v14[1];
    *((void *)v17 + 1) = v24;
    int FuncEnumConstructorType = GetFuncEnumConstructorType(*(_DWORD *)(v16 + 8));
    v9[3] = -1LL;
    *((_DWORD *)v9 + 10) = FuncEnumConstructorType;
    v9[2] = a4;
    void v9[4] = -1LL;
    if (FuncEnumConstructorType > 59)
    {
      if (FuncEnumConstructorType != 60)
      {
        if (FuncEnumConstructorType != 80)
        {
          goto LABEL_26;
        }

        __int128 v25 = 0u;
        uint64_t v26 = 0LL;
        __int128 v31 = 0u;
        __int128 v32 = 0u;
        __int128 v37 = 0u;
        __int128 v38 = 0u;
        __int128 v35 = 0u;
        __int128 v36 = 0u;
        __int128 v33 = 0u;
        __int128 v34 = 0u;
        __int128 v29 = 0u;
        __int128 v28 = 0u;
        LODWORD(v25) = 80;
        uint64_t v27 = -1LL;
        WORD1(v32) = 2;
        __int128 v30 = 0xFFFFFFFFFFFFFFFFLL;
        uint64_t v39 = 0xFFFFFFFFLL;
        GTMTLSMTexture_processTraceFuncWithMap((char *)&v25, v12, (uint64_t *)v16);
        if (*((void *)&v32 + 1) && (*(_WORD *)(*((void *)&v32 + 1) + 36LL) & 0xF0) == 0x30) {
          v9[3] = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          LOBYTE(v20) = 0;
        }
LABEL_35:
        *((_BYTE *)v9 + 48) = v20;
        goto LABEL_36;
      }

      void *v9 = v14[2];
LABEL_28:
      LOBYTE(v20) = 1;
      goto LABEL_35;
    }

    if (FuncEnumConstructorType == 16)
    {
LABEL_26:
      void *v9 = v14[2];
      goto LABEL_36;
    }

    if (FuncEnumConstructorType == 22)
    {
      __int128 v25 = 0u;
      uint64_t v26 = 0LL;
      __int128 v31 = 0u;
      __int128 v32 = 0u;
      __int128 v34 = 0u;
      __int128 v35 = 0u;
      __int128 v33 = 0u;
      __int128 v29 = 0u;
      __int128 v28 = 0u;
      LODWORD(v25) = 22;
      uint64_t v27 = -1LL;
      WORD1(v32) = 2;
      __int128 v30 = 0xFFFFFFFFFFFFFFFFLL;
      *(void *)&__int128 v33 = -1LL;
      GTMTLSMBuffer_processTraceFuncWithMap((char *)&v25, v12, (uint64_t *)v16);
      if ((v32 & 0xE0) == 0)
      {
        unsigned int v19 = atomic_load(v14 + 7);
        int v20 = (v19 >> 1) & 1;
        goto LABEL_35;
      }
    }

uint64_t GetParentResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = a2;
  if (!a2) {
    return v12;
  }
  uint64_t v5 = *find_entry(a1, &v12, 8uLL, 0LL);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 32)) != 0)
  {
    uint64_t v7 = *(void *)(v6 + 32);
    uint64_t v8 = v7 ? v7 + 64 : 0LL;
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  int v9 = *(_DWORD *)(v8 + 8);
  __int128 v13 = 0u;
  uint64_t v14 = 0LL;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v22 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  LODWORD(v13) = 80;
  uint64_t v15 = -1LL;
  WORD1(v20) = 2;
  __int128 v18 = 0xFFFFFFFFFFFFFFFFLL;
  uint64_t v27 = 0xFFFFFFFFLL;
  GTMTLSMTexture_processTraceFuncWithMap((char *)&v13, a3, (uint64_t *)v8);
  uint64_t v10 = v23;
  if ((void)v23) {
    return GetParentResource(a1, v10, a3);
  }
  uint64_t v10 = *((void *)&v22 + 1);
  if (*((void *)&v22 + 1)) {
    return GetParentResource(a1, v10, a3);
  }
  else {
    return v12;
  }
}

void *GTResourceTrackerResourceRead(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = tracker_resource_get(a1, a2, a3, a4);
  int v9 = v8;
  if (v8)
  {
    uint64_t v10 = v8[3];
    if (v10 < 0) {
      uint64_t v10 = a4;
    }
    v8[3] = v10;
    if (*((_BYTE *)v8 + 48))
    {
      uint64_t v11 = tracker_resource_get(a1, a2, a3, a4);
      if (v11) {
        v11[4] = a4;
      }
    }
  }

  return v9;
}

uint64_t *GTResourceTrackerResourceUsage(uint64_t *result, int a2, uint64_t a3, uint64_t a4, char a5)
{
  int v9 = result;
  if ((a5 & 2) != 0)
  {
    BOOL result = tracker_resource_get(result, a2, a3, a4);
    if (result) {
      result[4] = a4;
    }
  }

  if ((a5 & 5) != 0) {
    return GTResourceTrackerResourceRead(v9, a2, a3, a4);
  }
  return result;
}

uint64_t GTResourceTrackerUsingResourceArray( uint64_t result, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4)
  {
    uint64_t v8 = a4;
    uint64_t v11 = result;
    do
    {
      uint64_t v12 = *a3;
      if (*a3)
      {
        if (a2)
        {
          int ResourceType = a2;
        }

        else
        {
          int ResourceType = GTResourceTrackerGetResourceType(*a3, a5);
          uint64_t v12 = *a3;
        }

        BOOL result = GTResourceTrackerUsingResource(v11, ResourceType, v12, a5, a6);
      }

      ++a3;
      --v8;
    }

    while (v8);
  }

  return result;
}

uint64_t *GTResourceTrackerResourceReadMTLArray(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a2 + 1;
  uint64_t v4 = *a2;
  if (*a2)
  {
    uint64_t v6 = result;
    do
    {
      uint64_t v8 = *v3++;
      uint64_t v7 = v8;
      if (v8) {
        BOOL result = GTResourceTrackerResourceRead(v6, 16, v7, a3);
      }
      --v4;
    }

    while (v4);
  }

  return result;
}

uint64_t *GTResourceTrackerResourceWriteArray(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    uint64_t v7 = result;
    do
    {
      uint64_t v9 = *a2++;
      uint64_t v8 = v9;
      if (v9)
      {
        BOOL result = tracker_resource_get(v7, 80, v8, a4);
        if (result) {
          result[4] = a4;
        }
      }

      --v5;
    }

    while (v5);
  }

  return result;
}

uint64_t *GTResourceTrackerResourceUsageArray(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a3)
  {
    uint64_t v7 = a3;
    uint64_t v9 = result;
    do
    {
      BOOL result = (uint64_t *)*a2;
      if (*a2)
      {
        int ResourceType = GTResourceTrackerGetResourceType((uint64_t)result, *v9);
        BOOL result = GTResourceTrackerResourceUsage(v9, ResourceType, *a2, a4, a5);
      }

      ++a2;
      --v7;
    }

    while (v7);
  }

  return result;
}

void GTResourceTrackerUsingResourceHeap(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  if (a2)
  {
    GTResourceTrackerUsingResource(a1[2], 50, a2, *a1, a1[1]);
    entry = find_entry(a1[3], &v7, 8uLL, 0LL);
    if (!*entry || !*(void *)(*entry + 32LL))
    {
      uint64_t v6 = apr_palloc(*(apr_pool_t **)a1[3], 0x10uLL);
      *uint64_t v6 = v7;
      v6[1] = a3;
      apr_hash_set((apr_hash_t *)a1[3], v6, 8LL, v6);
    }
  }

uint64_t IsHeapResourceMadeAliasable(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v19 = a2;
  uint64_t v4 = *(void *)(*(void *)(*find_entry(a1, &v19, 8uLL, 0LL) + 32LL) + 32LL);
  if (v4)
  {
    unsigned int v5 = 0;
    while (1)
    {
      unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
      uint64_t v7 = v5 + (v6 >> 6) - 1;
      uint64_t v4 = *(void *)(v4 + 40);
      unsigned int v5 = v7;
      if (!v4)
      {
        unsigned int v5 = v7;
        goto LABEL_8;
      }
    }
  }

  else
  {
    unsigned int v5 = 0;
  }

  uint64_t v7 = 0LL;
LABEL_8:
  unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_9:
  uint64_t v9 = v4 + 64;
  while (v4)
  {
    int v10 = HIDWORD(v8) - v8;
    unint64_t v11 = *(void *)(v9 + ((uint64_t)v10 << 6));
    if (v11 > a3) {
      break;
    }
    int v12 = *(_DWORD *)(v9 + ((uint64_t)v10 << 6) + 8);
    BOOL v14 = v12 == -16122 || v12 == -16114 || v12 == -15651;
    unsigned int v15 = atomic_load((unsigned int *)(v4 + 4));
    int v16 = v8 + (v15 >> 6);
    uint64_t v17 = (HIDWORD(v8) + 1);
    unint64_t v8 = (v17 << 32) | v8;
    if ((_DWORD)v17 == v16 - 1)
    {
      unint64_t v8 = (v17 << 32) | v17;
      uint64_t v4 = *(void *)(v4 + 40);
      goto LABEL_9;
    }
  }

  return -1LL;
}

void *GTResourceTrackerMake(uint64_t a1, uint64_t a2, apr_pool_t *p)
{
  unsigned int v6 = apr_palloc(p, 0x30uLL);
  *unsigned int v6 = a1;
  v6[1] = a2;
  v6[2] = apr_hash_make(p);
  v6[3] = apr_hash_make(p);
  v6[4] = apr_hash_make(p);
  v6[5] = apr_hash_make(p);
  return v6;
}

void GTResourceTrackerProcessFunction(uint64_t *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (IsFuncEnumCreateCommandEncoder(v4))
  {
    bzero(&v77, 0x2B90uLL);
    GTMTLSMCommandEncoder_processTraceFunc((uint64_t)&v77, (uint64_t *)a2, a1[1]);
    if (v77 <= 64)
    {
      if (v77 != 17 && v77 != 21)
      {
        if (v77 != 28) {
          return;
        }
        goto LABEL_35;
      }
    }

    else
    {
      if (v77 <= 73)
      {
        if (v77 != 65)
        {
          if (v77 != 70) {
            return;
          }
          uint64_t v5 = *a1;
          *(void *)&__int128 v87 = v78;
          uint64_t v6 = *find_entry(v5, &v87, 8uLL, 0LL);
          if (v6
            && (uint64_t v7 = *(void *)(v6 + 32)) != 0
            && (uint64_t v8 = *(void *)(v7 + 32)) != 0
            && (*(_BYTE *)(v8 + 79) & 8) != 0)
          {
            uint64_t v9 = v8 + 64;
          }

          else
          {
            uint64_t v9 = 0LL;
          }

          bzero(&v87, 0x2B90uLL);
          GTMTLSMCommandEncoder_processTraceFunc((uint64_t)&v87, (uint64_t *)v9, a1[1]);
          bzero(&v81, 0x2B90uLL);
          if (*(_DWORD *)(v9 + 8) != -16286)
          {
            unsigned __int8 v50 = (uint64_t *)*((void *)&v91 + 1);
            uint64_t v51 = renderCommandEncoder_processStreamWithDescriptor(a1, *((uint64_t *)&v91 + 1), (uint64_t)&v87);
            __n128 v79 = v99;
            __int16 v80 = v99[607];
            goto LABEL_110;
          }

          uint64_t v10 = *a1;
          __n128 v79 = (_WORD *)*((void *)&v90 + 1);
          uint64_t v11 = *find_entry(v10, &v79, 8uLL, 0LL);
          if (v11)
          {
            uint64_t v12 = *(void *)(v11 + 32);
            if (v12)
            {
              uint64_t v13 = *(void *)(v12 + 32);
              if (v13)
              {
                if ((*(_BYTE *)(v13 + 79) & 8) != 0)
                {
                  BOOL v14 = (uint64_t *)(v13 + 64);
LABEL_94:
                  GTMTLSMCommandEncoder_processTraceFunc((uint64_t)&v81, v14, a1[1]);
                  uint64_t v67 = *(void *)(v12 + 32);
                  if (v67)
                  {
                    unsigned int v68 = 0;
                    while (1)
                    {
                      unsigned int v69 = atomic_load((unsigned int *)(v67 + 4));
                      uint64_t v70 = v68 + (v69 >> 6) - 1;
                      uint64_t v67 = *(void *)(v67 + 40);
                      unsigned int v68 = v70;
                      if (!v67)
                      {
                        unsigned int v68 = v70;
                        goto LABEL_101;
                      }
                    }

                    uint64_t v70 = 1LL;
                  }

                  else
                  {
                    unsigned int v68 = 0;
                    uint64_t v70 = 0LL;
                  }

void defaultCommandEncoder_processStream(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v26 = a2;
  uint64_t v5 = *(void *)(*(void *)(*find_entry(v4, &v26, 8uLL, 0LL) + 32LL) + 32LL);
  if (v5)
  {
    unsigned int v6 = 0;
    while (1)
    {
      unsigned int v7 = atomic_load((unsigned int *)(v5 + 4));
      uint64_t v8 = v6 + (v7 >> 6) - 1;
      uint64_t v5 = *(void *)(v5 + 40);
      unsigned int v6 = v8;
      if (!v5)
      {
        unsigned int v6 = v8;
        goto LABEL_8;
      }
    }
  }

  else
  {
    unsigned int v6 = 0;
  }

  uint64_t v8 = 0LL;
LABEL_8:
  unint64_t v9 = v6 | (unint64_t)(v8 << 32);
LABEL_9:
  uint64_t v10 = v5 + 64;
  while (v5 && (*(_BYTE *)(v10 + ((uint64_t)(HIDWORD(v9) - (int)v9) << 6) + 15) & 8) != 0)
  {
    uint64_t v11 = (uint64_t *)(v10 + ((uint64_t)(HIDWORD(v9) - (int)v9) << 6));
    GTResourceTrackerProcessResourceUse(a1, (uint64_t)v11, *v11);
    GTMTLSMCommandEncoder_processTraceFunc((uint64_t)v24, v11, a1[1]);
    unsigned int v12 = atomic_load((unsigned int *)(v5 + 4));
    int v13 = v9 + (v12 >> 6);
    uint64_t v14 = (HIDWORD(v9) + 1);
    unint64_t v9 = (v14 << 32) | v9;
    if ((_DWORD)v14 == v13 - 1)
    {
      unint64_t v9 = (v14 << 32) | v14;
      uint64_t v5 = *(void *)(v5 + 40);
      goto LABEL_9;
    }
  }

  switch(v24[0])
  {
    case 0x11:
      uint64_t v18 = v25;
      if (v25)
      {
        for (uint64_t i = 8LL; i != 104; i += 24LL)
        {
          uint64_t v20 = *(void *)(v18 + i);
          if (v20) {
            GTResourceTrackerUsingResource(a1[2], 31, v20, *a1, a1[1]);
          }
        }
      }

      break;
    case 0x15:
      uint64_t v21 = v25;
      if (v25)
      {
        for (uint64_t j = 8LL; j != 104; j += 24LL)
        {
          uint64_t v23 = *(void *)(v21 + j);
          if (v23) {
            GTResourceTrackerUsingResource(a1[2], 31, v23, *a1, a1[1]);
          }
        }
      }

      break;
    case 0x4A:
      uint64_t v15 = v25;
      if (v25)
      {
        for (uint64_t k = 8LL; k != 104; k += 24LL)
        {
          uint64_t v17 = *(void *)(v15 + k);
          if (v17) {
            GTResourceTrackerUsingResource(a1[2], 31, v17, *a1, a1[1]);
          }
        }
      }

      break;
  }

uint64_t computeCommandEncoder_processStream(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v21 = a2;
  uint64_t result = (uint64_t)find_entry(v4, &v21, 8uLL, 0LL);
  uint64_t v6 = *(void *)(*(void *)(*(void *)result + 32LL) + 32LL);
  if (v6)
  {
    unsigned int v7 = 0;
    while (1)
    {
      unsigned int v8 = atomic_load((unsigned int *)(v6 + 4));
      uint64_t v9 = v7 + (v8 >> 6) - 1;
      uint64_t v6 = *(void *)(v6 + 40);
      unsigned int v7 = v9;
      if (!v6)
      {
        unsigned int v7 = v9;
        goto LABEL_8;
      }
    }
  }

  else
  {
    unsigned int v7 = 0;
  }

  uint64_t v9 = 0LL;
LABEL_8:
  unint64_t v10 = v7 | (unint64_t)(v9 << 32);
LABEL_9:
  uint64_t v11 = v6 + 64;
  while (v6 && (*(_BYTE *)(v11 + ((uint64_t)(HIDWORD(v10) - (int)v10) << 6) + 15) & 8) != 0)
  {
    uint64_t v12 = v11 + ((uint64_t)(HIDWORD(v10) - (int)v10) << 6);
    GTResourceTrackerProcessResourceUse(a1, v12, *(void *)v12);
    GTMTLSMCommandEncoder_processTraceFunc((uint64_t)v19, (uint64_t *)v12, a1[1]);
    uint64_t result = (uint64_t)ResourceTracker_processCommandEncoder(a1, *(_DWORD *)(v12 + 8), (uint64_t)v19, *(void *)v12);
    unsigned int v13 = atomic_load((unsigned int *)(v6 + 4));
    int v14 = v10 + (v13 >> 6);
    uint64_t v15 = (HIDWORD(v10) + 1);
    unint64_t v10 = (v15 << 32) | v10;
    if ((_DWORD)v15 == v14 - 1)
    {
      unint64_t v10 = (v15 << 32) | v15;
      uint64_t v6 = *(void *)(v6 + 40);
      goto LABEL_9;
    }
  }

  if (v19[0] == 28)
  {
    uint64_t v16 = v20;
    if (v20)
    {
      for (uint64_t i = 8LL; i != 104; i += 24LL)
      {
        uint64_t v18 = *(void *)(v16 + i);
        if (v18) {
          uint64_t result = GTResourceTrackerUsingResource(a1[2], 31, v18, *a1, a1[1]);
        }
      }
    }
  }

  return result;
}

uint64_t renderCommandEncoder_processStreamWithDescriptor(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v26 = *(void *)(a3 + 8);
  uint64_t v7 = *(void *)(*(void *)(*find_entry(v6, &v26, 8uLL, 0LL) + 32LL) + 32LL);
  if (v7)
  {
    unsigned int v8 = 0;
    while (1)
    {
      unsigned int v9 = atomic_load((unsigned int *)(v7 + 4));
      uint64_t v10 = v8 + (v9 >> 6) - 1;
      uint64_t v7 = *(void *)(v7 + 40);
      unsigned int v8 = v10;
      if (!v7)
      {
        unsigned int v8 = v10;
        goto LABEL_8;
      }
    }

    uint64_t v10 = 1LL;
  }

  else
  {
    unsigned int v8 = 0;
    uint64_t v10 = 0LL;
  }

uint64_t RenderEncoderWithDescriptor(uint64_t *a1, uint64_t *a2)
{
  for (uint64_t i = 0LL; i != 64; i += 8LL)
  {
    GTResourceTrackerUsingResource(a1[2], 80, a2[i + 1], *a1, a1[1]);
    GTResourceTrackerUsingResource(a1[2], 80, a2[i], *a1, a1[1]);
  }

  GTResourceTrackerUsingResource(a1[2], 80, a2[85], *a1, a1[1]);
  GTResourceTrackerUsingResource(a1[2], 80, a2[84], *a1, a1[1]);
  GTResourceTrackerUsingResource(a1[2], 80, a2[91], *a1, a1[1]);
  GTResourceTrackerUsingResource(a1[2], 80, a2[90], *a1, a1[1]);
  GTResourceTrackerUsingResource(a1[2], 22, a2[99], *a1, a1[1]);
  uint64_t result = GTResourceTrackerUsingResource(a1[2], 68, a2[98], *a1, a1[1]);
  uint64_t v6 = 0LL;
  uint64_t v7 = a2 + 66;
  do
  {
    uint64_t v8 = v7[v6];
    if (v8) {
      uint64_t result = GTResourceTrackerUsingResource(a1[2], 31, v8, *a1, a1[1]);
    }
    v6 += 5LL;
  }

  while (v6 != 20);
  return result;
}

uint64_t *RenderEncoderEndEncoding(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = a2;
  do
  {
    uint64_t v10 = *(unsigned __int8 *)(v9 + 27);
    if (v10 == 4) {
      uint64_t v10 = *(void *)(*(void *)a3 + v8);
    }
    RenderEncoderStoreAttachment(a1, (uint64_t *)v9, v10, a4);
    v8 += 8LL;
    v9 += 64LL;
  }

  while (v8 != 64);
  unsigned int v11 = *(unsigned __int8 *)(a2 + 699);
  if (v11 == 4) {
    unsigned int v11 = *(unsigned __int8 *)(a3 + 8);
  }
  RenderEncoderStoreAttachment(a1, (uint64_t *)(a2 + 672), v11, a4);
  unsigned int v12 = *(unsigned __int8 *)(a2 + 747);
  if (v12 == 4) {
    unsigned int v12 = *(unsigned __int8 *)(a3 + 9);
  }
  return RenderEncoderStoreAttachment(a1, (uint64_t *)(a2 + 720), v12, a4);
}

uint64_t *RenderEncoderStoreAttachment(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2[1];
  uint64_t v8 = result;
  switch(a3)
  {
    case 0LL:
    case 1LL:
    case 5LL:
      goto LABEL_5;
    case 2LL:
      goto LABEL_4;
    case 3LL:
      uint64_t v9 = tracker_resource_get(result, 80, v5, a4);
      if (v9) {
        void v9[4] = a4;
      }
LABEL_4:
      uint64_t v5 = *a2;
LABEL_5:
      uint64_t result = tracker_resource_get(v8, 80, v5, a4);
      if (result) {
        result[4] = a4;
      }
      break;
    default:
      return result;
  }

  return result;
}

uint64_t *ResourceTracker_processCommandEncoder(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (uint64_t *)IsFuncEnumDrawCall(a2);
  if ((_DWORD)result)
  {
    if (*(_DWORD *)a3 != 70) {
      return result;
    }
    uint64_t v9 = *a1;
    v25.i64[0] = *(void *)(a3 + 8600);
    uint64_t v10 = *find_entry(v9, &v25, 8uLL, 0LL);
    if (v10) {
      uint64_t v11 = *(void *)(v10 + 32);
    }
    else {
      uint64_t v11 = 0LL;
    }
    GTMTLSMRenderPipelineState_resourceAccess(&v25, v11, a1[1]);
    int8x16_t v25 = vandq_s8(v25, (int8x16_t)vdupq_n_s64(~*(void *)(a3 + 64)));
    BufferAccess(a1, a3 + 80, &v25, a4);
    TextureAccess(a1, a3 + 824, (uint64_t)v26, a4);
    *(int8x16_t *)((char *)v28 + 8) = vandq_s8( *(int8x16_t *)((char *)v28 + 8),  (int8x16_t)vdupq_n_s64(~*(void *)(a3 + 1976)));
    BufferAccess(a1, a3 + 1984, &v28[0].i64[1], a4);
    TextureAccess(a1, a3 + 2480, (uint64_t)&v28[1].i64[1], a4);
    v29[0] = vandq_s8(v29[0], (int8x16_t)vdupq_n_s64(~*(void *)(a3 + 3632)));
    BufferAccess(a1, a3 + 3640, v29, a4);
    TextureAccess(a1, a3 + 4136, (uint64_t)v29[1].i64, a4);
    *(int8x16_t *)((char *)&v29[3] + 8) = vandq_s8( *(int8x16_t *)((char *)&v29[3] + 8),  (int8x16_t)vdupq_n_s64(~*(void *)(a3 + 5288)));
    BufferAccess(a1, a3 + 5296, &v29[3].i64[1], a4);
    uint64_t v21 = a3 + 5792;
    unsigned int v22 = &v29[4].i64[1];
    goto LABEL_25;
  }

  if (a2 <= -16080)
  {
    if (a2 != -16327 && a2 != -16220)
    {
      int v12 = -16137;
LABEL_12:
      if (a2 != v12) {
        return result;
      }
      goto LABEL_13;
    }

uint64_t *RenderEncoderLoadAttachment(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = result;
    int v7 = *(unsigned __int8 *)(a2 + 25);
    if (v7 == 2) {
      return GTResourceTrackerResourceRead(result, 80, v4, 0x7FFFFFFFFFFFFFFFLL);
    }
    if (v7 != 1)
    {
      if (*(_BYTE *)(a2 + 25)) {
        return result;
      }
      return GTResourceTrackerResourceRead(result, 80, v4, 0x7FFFFFFFFFFFFFFFLL);
    }

    GTResourceTrackerResourceRead(result, 80, v4, a3);
    uint64_t v8 = *v6;
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t result = find_entry(v8, &v9, 8uLL, 0LL);
    if (*(_DWORD *)(*(void *)(*(void *)(*result + 32) + 32LL) + 72LL) == -16294)
    {
      uint64_t result = tracker_resource_get(v6, 80, *(void *)(a2 + 8), a3);
      *((_BYTE *)result + 48) = 1;
    }
  }

  return result;
}

uint64_t *BufferAccess(uint64_t *result, uint64_t a2, void *a3, uint64_t a4)
{
  int v7 = result;
  int v8 = 0;
  do
  {
    unint64_t v9 = *a3 >> v8;
    if (!v9) {
      break;
    }
    int v10 = v8 + __clz(__rbit64(v9));
    uint64_t result = GTResourceTrackerResourceRead(v7, 22, *(void *)(a2 + 8LL * v10), a4);
    int v8 = v10 + 1;
  }

  while (v10 < 63);
  int v11 = 0;
  do
  {
    unint64_t v12 = a3[1] >> v11;
    if (!v12) {
      break;
    }
    int v13 = v11 + __clz(__rbit64(v12));
    uint64_t result = tracker_resource_get(v7, 22, *(void *)(a2 + 8LL * v13), a4);
    if (result) {
      result[4] = a4;
    }
    int v11 = v13 + 1;
  }

  while (v13 < 63);
  return result;
}

uint64_t *TextureAccess(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = result;
  uint64_t v8 = 0LL;
  char v9 = 1;
  do
  {
    int v10 = 0;
    char v11 = v9;
    uint64_t v12 = v8 << 6;
    do
    {
      unint64_t v13 = *(void *)(a3 + 16 * v8) >> v10;
      if (!v13) {
        break;
      }
      int v14 = v10 + __clz(__rbit64(v13));
      uint64_t result = GTResourceTrackerResourceRead(v7, 80, *(void *)(a2 + 8 * (v12 + v14)), a4);
      int v10 = v14 + 1;
    }

    while (v14 < 63);
    int v15 = 0;
    uint64_t v16 = (void *)(a3 + 16 * v8 + 8);
    do
    {
      unint64_t v17 = *v16 >> v15;
      if (!v17) {
        break;
      }
      int v18 = v15 + __clz(__rbit64(v17));
      uint64_t result = tracker_resource_get(v7, 80, *(void *)(a2 + 8 * (v12 + v18)), a4);
      if (result) {
        result[4] = a4;
      }
      int v15 = v18 + 1;
    }

    while (v18 < 63);
    char v9 = 0;
    uint64_t v8 = 1LL;
  }

  while ((v11 & 1) != 0);
  return result;
}

void GTResourceTrackerProcessCommandBuffer(uint64_t a1, apr_pool_t *a2, char a3)
{
  uint64_t v5 = *(void *)a1;
  newpool = a2;
  entry = find_entry(v5, &newpool, 8uLL, 0LL);
  if (*entry) {
    uint64_t v7 = *(void *)(*entry + 32LL);
  }
  else {
    uint64_t v7 = 0LL;
  }
  uint64_t v8 = *(void *)(v7 + 32);
  if (v8)
  {
    unsigned int v9 = 0;
    while (1)
    {
      unsigned int v10 = atomic_load((unsigned int *)(v8 + 4));
      uint64_t v11 = v9 + (v10 >> 6) - 1;
      uint64_t v8 = *(void *)(v8 + 40);
      unsigned int v9 = v11;
      if (!v8)
      {
        unsigned int v9 = v11;
        goto LABEL_11;
      }
    }
  }

  else
  {
    unsigned int v9 = 0;
  }

  uint64_t v11 = 0LL;
LABEL_11:
  unint64_t v12 = v9 | (unint64_t)(v11 << 32);
LABEL_12:
  uint64_t v13 = v8 + 64;
  while (v8 && (*(_BYTE *)(v13 + ((uint64_t)(HIDWORD(v12) - (int)v12) << 6) + 15) & 8) != 0)
  {
    GTResourceTrackerProcessFunction((uint64_t *)a1, v13 + ((uint64_t)(HIDWORD(v12) - (int)v12) << 6));
    unsigned int v14 = atomic_load((unsigned int *)(v8 + 4));
    int v15 = v12 + (v14 >> 6);
    uint64_t v16 = (HIDWORD(v12) + 1);
    unint64_t v12 = (v16 << 32) | v12;
    if ((_DWORD)v16 == v15 - 1)
    {
      unint64_t v12 = (v16 << 32) | v16;
      uint64_t v8 = *(void *)(v8 + 40);
      goto LABEL_12;
    }
  }

  if ((a3 & 1) != 0)
  {
    uint64_t v17 = *(void *)a1;
    uint64_t v18 = *(void *)(a1 + 8);
    uint64_t v19 = *(void *)(v7 + 32);
    if (v19)
    {
      unsigned int v20 = 0;
      while (1)
      {
        unsigned int v21 = atomic_load((unsigned int *)(v19 + 4));
        uint64_t v22 = v20 + (v21 >> 6) - 1;
        uint64_t v19 = *(void *)(v19 + 40);
        unsigned int v20 = v22;
        if (!v19)
        {
          unsigned int v20 = v22;
          goto LABEL_25;
        }
      }
    }

    else
    {
      unsigned int v20 = 0;
    }

    uint64_t v22 = 0LL;
LABEL_25:
    unint64_t v23 = v20 | (unint64_t)(v22 << 32);
LABEL_26:
    uint64_t v24 = v19 + 64;
    while (1)
    {
      if (!v19 || (*(_BYTE *)(v24 + ((uint64_t)(HIDWORD(v23) - (int)v23) << 6) + 15) & 8) == 0)
      {
        uint64_t v29 = -1LL;
        goto LABEL_34;
      }

      uint64_t v25 = v24 + ((uint64_t)(HIDWORD(v23) - (int)v23) << 6);
      unsigned int v26 = atomic_load((unsigned int *)(v19 + 4));
      int v27 = v23 + (v26 >> 6);
      uint64_t v28 = (HIDWORD(v23) + 1);
      unint64_t v23 = (v28 << 32) | v23;
      if ((_DWORD)v28 == v27 - 1)
      {
        unint64_t v23 = (v28 << 32) | v28;
        uint64_t v19 = *(void *)(v19 + 40);
        goto LABEL_26;
      }
    }

    uint64_t v29 = *(void *)GTTraceFunc_argumentBytesWithMap((void *)v25, *(unsigned __int8 *)(v25 + 13), v18);
LABEL_34:
    newpool = (apr_pool_t *)v29;
    uint64_t v30 = *find_entry(v17, &newpool, 8uLL, 0LL);
    if (v30)
    {
      uint64_t v31 = *(void *)(v30 + 32);
      unint64_t v33 = CommandBufferCommitIndex(*(void *)(v7 + 32));
      if (v31)
      {
        apr_pool_create_ex(&newpool, 0LL, 0LL, v32);
        uint64_t v34 = newpool;
        uint64_t v35 = (apr_pool_t **)apr_hash_make(newpool);
        GatherCommandQueueResidencySetsUpToIndexInternal(v35, v31, *(void *)(a1 + 8), v33, 1);
        unint64_t v36 = apr_hash_first(v34, (apr_hash_t *)v35);
        if (v36)
        {
          uint64_t v37 = v36;
          do
          {
            GTResourceTrackerUsingResidencySet((uint64_t *)a1, **(void **)(*((void *)v37 + 1) + 16LL));
            uint64_t v37 = apr_hash_next(v37);
          }

          while (v37);
        }

        apr_pool_destroy(v34);
      }
    }

    else
    {
      unint64_t v33 = CommandBufferCommitIndex(*(void *)(v7 + 32));
    }

    if (*(_DWORD *)(*(void *)(a1 + 40) + 48LL))
    {
      apr_pool_create_ex(&pool, 0LL, 0LL, v32);
      __int128 v38 = pool;
      unsigned int v39 = apr_hash_make(pool);
      int v40 = apr_hash_make(v38);
      uint64_t v41 = apr_hash_first(v38, *(apr_hash_t **)(a1 + 40));
      if (v41)
      {
        uint64_t v42 = v41;
        h = (apr_pool_t **)v40;
        do
        {
          uint64_t v43 = *(void *)a1;
          newpool = **(apr_pool_t ***)(*((void *)v42 + 1) + 16LL);
          uint64_t v44 = *find_entry(v43, &newpool, 8uLL, 0LL);
          if (v44) {
            uint64_t v44 = *(void *)(v44 + 32);
          }
          uint64_t v45 = *(void *)(a1 + 8);
          uint64_t v46 = *(void *)(v44 + 32);
          if (v46)
          {
            unsigned int v47 = 0;
            while (1)
            {
              unsigned int v48 = atomic_load((unsigned int *)(v46 + 4));
              uint64_t v49 = v47 + (v48 >> 6) - 1;
              uint64_t v46 = *(void *)(v46 + 40);
              unsigned int v47 = v49;
              if (!v46)
              {
                unsigned int v47 = v49;
                goto LABEL_53;
              }
            }

            uint64_t v49 = 0LL;
          }

          else
          {
            unsigned int v47 = 0;
            uint64_t v49 = 0LL;
          }

void GTResourceTrackerUsingResidencySet(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = a2;
  GTResourceTrackerUsingResource(a1[2], 72, a2, *a1, a1[1]);
  entry = find_entry(a1[5], &v5, 8uLL, 0LL);
  if (!*entry || !*(void *)(*entry + 32LL))
  {
    uint64_t v4 = apr_palloc(*(apr_pool_t **)a1[5], 8uLL);
    *uint64_t v4 = v5;
    apr_hash_set((apr_hash_t *)a1[5], v4, 8LL, v4);
  }

uint64_t *GTResourceTrackerUsingAccelerationStructureDescriptor(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = result;
  int v6 = *(unsigned __int8 *)a2;
  if (v6 == 3)
  {
    GTResourceTrackerResourceRead(result, 22, a2[1], a3);
    GTResourceTrackerResourceRead(v5, 22, a2[3], a3);
    GTResourceTrackerResourceRead(v5, 22, a2[5], a3);
    return GTResourceTrackerResourceRead(v5, 22, a2[7], a3);
  }

  else if (v6 == 2)
  {
    GTResourceTrackerResourceRead(result, 22, a2[2], a3);
    uint64_t result = GTResourceTrackerResourceRead(v5, 22, a2[3], a3);
    if (*((_DWORD *)a2 + 14))
    {
      unint64_t v28 = 0LL;
      do
        uint64_t result = GTResourceTrackerResourceRead(v5, 16, *(void *)(a2[1] + 8 * v28++), a3);
      while (v28 < *((unsigned int *)a2 + 14));
    }
  }

  else if (v6 == 1 && a2[2])
  {
    unint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = a2[1];
      unint64_t v9 = v8 + 136 * v7;
      uint64_t result = GTResourceTrackerResourceRead(v5, 22, *(void *)(v9 + 8), a3);
      switch(*(_BYTE *)(v9 + 36))
      {
        case 1:
          unsigned int v10 = (uint64_t *)(v8 + 136 * v7);
          GTResourceTrackerResourceRead(v5, 22, v10[10], a3);
          GTResourceTrackerResourceRead(v5, 22, v10[5], a3);
          uint64_t v11 = v10 + 7;
          goto LABEL_25;
        case 2:
          uint64_t v11 = (uint64_t *)(v8 + 136 * v7 + 40);
          goto LABEL_25;
        case 3:
          unint64_t v12 = v8 + 136 * v7;
          uint64_t v13 = (uint64_t *)(v12 + 40);
          if (*(void *)(v12 + 88))
          {
            uint64_t v14 = 0LL;
            unint64_t v15 = 0LL;
            do
            {
              GTResourceTrackerResourceRead(v5, 22, *(void *)(v13[5] + v14), a3);
              ++v15;
              v14 += 16LL;
            }

            while (v13[6] > v15);
          }

          uint64_t v16 = *v13;
          uint64_t v11 = v13 + 2;
          GTResourceTrackerResourceRead(v5, 22, v16, a3);
          goto LABEL_25;
        case 4:
          unint64_t v17 = v8 + 136 * v7;
          if (*(void *)(v17 + 48))
          {
            uint64_t v18 = 0LL;
            unint64_t v19 = 0LL;
            unsigned int v20 = (void *)(v17 + 40);
            do
            {
              uint64_t result = GTResourceTrackerResourceRead(v5, 22, *(void *)(*v20 + v18), a3);
              ++v19;
              v18 += 16LL;
            }

            while (v20[1] > v19);
          }

          break;
        case 5:
          unsigned int v21 = (uint64_t *)(v8 + 136 * v7);
          GTResourceTrackerResourceRead(v5, 22, v21[5], a3);
          GTResourceTrackerResourceRead(v5, 22, v21[11], a3);
          uint64_t v11 = v21 + 9;
          goto LABEL_25;
        case 6:
          unint64_t v22 = v8 + 136 * v7;
          unint64_t v23 = (void *)(v22 + 40);
          if (*(void *)(v22 + 48))
          {
            uint64_t v24 = 0LL;
            unint64_t v25 = 0LL;
            do
            {
              GTResourceTrackerResourceRead(v5, 22, *(void *)(*v23 + v24), a3);
              ++v25;
              v24 += 16LL;
            }

            while (v23[1] > v25);
          }

          if (v23[7])
          {
            uint64_t v26 = 0LL;
            unint64_t v27 = 0LL;
            do
            {
              GTResourceTrackerResourceRead(v5, 22, *(void *)(v23[6] + v26), a3);
              ++v27;
              v26 += 16LL;
            }

            while (v23[7] > v27);
          }

          uint64_t v11 = v23 + 4;
LABEL_25:
          uint64_t result = GTResourceTrackerResourceRead(v5, 22, *v11, a3);
          break;
        default:
          break;
      }

      ++v7;
    }

    while (a2[2] > v7);
  }

  return result;
}

void GTResourceTrackerProcessResourceUse(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a2 + 8);
  if (v6 > -15757)
  {
    if (v6 <= -15367)
    {
      if (v6 <= -15525)
      {
        if (v6 > -15599)
        {
          switch(v6)
          {
            case -15598:
              uint64_t v102 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v20 = a1[1];
              uint64_t v21 = *((void *)v102 + 1);
              uint64_t v22 = *a1;
              uint64_t v23 = a1[2];
              int v24 = 44;
              goto LABEL_400;
            case -15597:
              unint64_t v103 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v104 = a1[2];
              unsigned int v105 = GTTraceFunc_argumentBytesWithMap((void *)a2, v103[24], a1[1]);
              uint64_t v106 = *((void *)v103 + 2);
              if (v106)
              {
                id v107 = (uint64_t *)v105;
                uint64_t v109 = *a1;
                uint64_t v108 = a1[1];
                do
                {
                  uint64_t v111 = *v107++;
                  uint64_t v110 = v111;
                  if (v111) {
                    GTResourceTrackerUsingResource(v104, 44, v110, v109, v108);
                  }
                  --v106;
                }

                while (v106);
              }

              break;
            case -15592:
            case -15591:
LABEL_46:
              uint64_t v37 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v38 = v37[1];
              unsigned int v39 = a1;
              int v40 = 22;
LABEL_209:
              GTResourceTrackerResourceRead(v39, v40, v38, a3);
              uint64_t v28 = v37[3];
              goto LABEL_232;
            case -15588:
              goto LABEL_231;
            case -15583:
LABEL_88:
              uint64_t v64 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v20 = a1[1];
              uint64_t v21 = *((void *)v64 + 1);
              uint64_t v22 = *a1;
              uint64_t v23 = a1[2];
              int v24 = 60;
              goto LABEL_400;
            case -15582:
              id v112 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v113 = a1[2];
              unsigned int v114 = GTTraceFunc_argumentBytesWithMap((void *)a2, v112[24], a1[1]);
              uint64_t v115 = *((void *)v112 + 2);
              if (v115)
              {
                id v116 = (uint64_t *)v114;
                uint64_t v118 = *a1;
                uint64_t v117 = a1[1];
                do
                {
                  uint64_t v120 = *v116++;
                  uint64_t v119 = v120;
                  if (v120) {
                    GTResourceTrackerUsingResource(v113, 60, v119, v118, v117);
                  }
                  --v115;
                }

                while (v115);
              }

              break;
            case -15581:
LABEL_89:
              unint64_t v65 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v20 = a1[1];
              uint64_t v21 = *((void *)v65 + 1);
              uint64_t v22 = *a1;
              uint64_t v23 = a1[2];
              int v24 = 83;
              goto LABEL_400;
            case -15580:
              id v121 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v122 = a1[2];
              id v123 = GTTraceFunc_argumentBytesWithMap((void *)a2, v121[24], a1[1]);
              uint64_t v124 = *((void *)v121 + 2);
              if (v124)
              {
                uint64_t v125 = (uint64_t *)v123;
                uint64_t v127 = *a1;
                uint64_t v126 = a1[1];
                do
                {
                  uint64_t v129 = *v125++;
                  uint64_t v128 = v129;
                  if (v129) {
                    GTResourceTrackerUsingResource(v122, 83, v128, v127, v126);
                  }
                  --v124;
                }

                while (v124);
              }

              break;
            default:
              return;
          }
        }

        else
        {
          switch(v6)
          {
            case -15647:
              __int128 v92 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              __int128 v93 = tracker_resource_get(a1, 16, *((void *)v92 + 1), a3);
              if (v93) {
                v93[4] = a3;
              }
              GTResourceTrackerUsingResource(a1[2], 22, *((void *)v92 + 2), *a1, a1[1]);
              unsigned int v86 = v92[32];
              goto LABEL_131;
            case -15646:
            case -15645:
              unint64_t v27 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              GTResourceTrackerResourceRead(a1, 16, *((void *)v27 + 1), a3);
              uint64_t v28 = *((void *)v27 + 2);
              uint64_t v29 = a1;
              int v30 = 16;
              goto LABEL_233;
            case -15644:
            case -15643:
            case -15642:
            case -15641:
            case -15640:
            case -15639:
            case -15636:
            case -15628:
            case -15627:
            case -15626:
            case -15625:
            case -15624:
              return;
            case -15638:
              __int128 v94 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              GTResourceTrackerResourceRead(a1, 16, *((void *)v94 + 1), a3);
              uint64_t v95 = tracker_resource_get(a1, 16, *((void *)v94 + 2), a3);
              if (v95) {
                v95[4] = a3;
              }
              GTResourceTrackerUsingResource(a1[2], 22, *((void *)v94 + 3), *a1, a1[1]);
              unsigned int v86 = v94[40];
              goto LABEL_131;
            case -15637:
LABEL_48:
              uint64_t v41 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v20 = a1[1];
              uint64_t v21 = *((void *)v41 + 1);
              uint64_t v22 = *a1;
              uint64_t v23 = a1[2];
              int v24 = 31;
              goto LABEL_400;
            case -15635:
            case -15630:
LABEL_58:
              uint64_t v43 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v20 = a1[1];
              uint64_t v21 = *((void *)v43 + 1);
              uint64_t v22 = *a1;
              uint64_t v23 = a1[2];
              int v24 = 41;
              goto LABEL_400;
            case -15634:
LABEL_85:
              uint64_t v61 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
              GTResourceTrackerUsingResourceHeap(a1, v61, a3);
              break;
            case -15633:
              uint64_t v97 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v98 = GTTraceFunc_argumentBytesWithMap((void *)a2, v97[16], a1[1]);
              uint64_t v99 = *((void *)v97 + 1);
              if (v99)
              {
                uint64_t v100 = (uint64_t *)v98;
                do
                {
                  uint64_t v101 = *v100++;
                  GTResourceTrackerUsingResourceHeap(a1, v101, a3);
                  --v99;
                }

                while (v99);
              }

              break;
            case -15632:
LABEL_86:
              unsigned int v62 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              int ResourceType = GTResourceTrackerGetResourceType(*((void *)v62 + 1), *a1);
              GTResourceTrackerResourceUsage(a1, ResourceType, *((void *)v62 + 1), a3, *((_DWORD *)v62 + 4));
              break;
            case -15631:
LABEL_42:
              unint64_t v33 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              unsigned int v34 = v33[24];
LABEL_241:
              int v228 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v34, a1[1]);
              GTResourceTrackerResourceUsageArray(a1, v228, *((void *)v33 + 1), a3, *((_DWORD *)v33 + 4));
              break;
            case -15629:
              goto LABEL_231;
            case -15623:
LABEL_87:
              uint64_t v7 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
              uint64_t v8 = a1;
              int v9 = 16;
              goto LABEL_455;
            default:
              switch(v6)
              {
                case -15756:
                  uint64_t v32 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
                  GTResourceTrackerUsingResource(a1[2], 31, *((void *)v32 + 1), *a1, a1[1]);
LABEL_156:
                  uint64_t v28 = *((void *)v32 + 4);
                  goto LABEL_232;
                case -15755:
                case -15754:
                case -15750:
                  goto LABEL_48;
                case -15753:
                case -15752:
                case -15751:
                  return;
                case -15749:
                  goto LABEL_124;
                default:
                  switch(v6)
                  {
                    case -15728:
                    case -15726:
                    case -15723:
                    case -15722:
LABEL_71:
                      uint64_t v7 = *((void *)GTTraceFunc_argumentBytesWithMap( (void *)a2,  *(unsigned __int8 *)(a2 + 13),  a1[1])
                           + 1);
                      goto LABEL_72;
                    default:
                      return;
                  }
              }
          }
        }
      }

      else
      {
        switch(v6)
        {
          case -15474:
LABEL_90:
            uint64_t v28 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
            goto LABEL_232;
          case -15473:
          case -15472:
          case -15471:
          case -15470:
          case -15469:
LABEL_55:
            uint64_t v28 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
            goto LABEL_56;
          case -15468:
          case -15467:
          case -15464:
          case -15463:
          case -15462:
          case -15461:
          case -15460:
          case -15444:
          case -15443:
          case -15442:
          case -15441:
          case -15440:
          case -15439:
          case -15438:
          case -15437:
          case -15436:
          case -15435:
          case -15434:
          case -15433:
          case -15432:
          case -15431:
          case -15430:
          case -15429:
          case -15428:
          case -15427:
          case -15426:
          case -15425:
          case -15424:
          case -15423:
          case -15422:
          case -15421:
          case -15420:
          case -15419:
          case -15418:
          case -15417:
          case -15416:
          case -15414:
          case -15413:
          case -15412:
          case -15411:
          case -15410:
          case -15409:
          case -15408:
          case -15407:
          case -15406:
          case -15405:
          case -15404:
          case -15403:
          case -15402:
          case -15400:
          case -15398:
          case -15390:
          case -15388:
            return;
          case -15466:
LABEL_74:
            unint64_t v55 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            int v56 = tracker_resource_get(a1, 16, *((void *)v55 + 1), a3);
            if (v56) {
              v56[4] = a3;
            }
            unint64_t v57 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v55[32], a1[1]);
            GTResourceTrackerResourceReadMTLArray(a1, v57, a3);
            uint64_t v7 = *((void *)v55 + 2);
            goto LABEL_454;
          case -15465:
LABEL_117:
            uint64_t v73 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            __int128 v87 = tracker_resource_get(a1, 16, *((void *)v73 + 1), a3);
            if (v87) {
              v87[4] = a3;
            }
LABEL_119:
            uint64_t v7 = *((void *)v73 + 2);
            goto LABEL_454;
          case -15459:
          case -15454:
          case -15449:
            goto LABEL_87;
          case -15458:
          case -15453:
          case -15448:
            goto LABEL_88;
          case -15457:
            unsigned int v10 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v11 = a1[2];
            unint64_t v12 = GTTraceFunc_argumentBytesWithMap((void *)a2, v10[24], a1[1]);
            uint64_t v13 = *((void *)v10 + 2);
            if (v13)
            {
              uint64_t v14 = (uint64_t *)v12;
              uint64_t v16 = *a1;
              uint64_t v15 = a1[1];
              do
              {
                uint64_t v18 = *v14++;
                uint64_t v17 = v18;
                if (v18) {
                  GTResourceTrackerUsingResource(v11, 60, v17, v16, v15);
                }
                --v13;
              }

              while (v13);
            }

            break;
          case -15456:
          case -15451:
          case -15446:
            goto LABEL_89;
          case -15455:
            unint64_t v291 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v292 = a1[2];
            v293 = GTTraceFunc_argumentBytesWithMap((void *)a2, v291[24], a1[1]);
            uint64_t v294 = *((void *)v291 + 2);
            if (v294)
            {
              unint64_t v295 = (uint64_t *)v293;
              uint64_t v297 = *a1;
              uint64_t v296 = a1[1];
              do
              {
                uint64_t v299 = *v295++;
                uint64_t v298 = v299;
                if (v299) {
                  GTResourceTrackerUsingResource(v292, 83, v298, v297, v296);
                }
                --v294;
              }

              while (v294);
            }

            break;
          case -15452:
            unint64_t v300 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v301 = a1[2];
            uint64_t v302 = GTTraceFunc_argumentBytesWithMap((void *)a2, v300[24], a1[1]);
            uint64_t v303 = *((void *)v300 + 2);
            if (v303)
            {
              int8x8_t v304 = (uint64_t *)v302;
              uint64_t v306 = *a1;
              uint64_t v305 = a1[1];
              do
              {
                uint64_t v308 = *v304++;
                uint64_t v307 = v308;
                if (v308) {
                  GTResourceTrackerUsingResource(v301, 60, v307, v306, v305);
                }
                --v303;
              }

              while (v303);
            }

            break;
          case -15450:
            uint64_t v309 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v310 = a1[2];
            uint64_t v311 = GTTraceFunc_argumentBytesWithMap((void *)a2, v309[24], a1[1]);
            uint64_t v312 = *((void *)v309 + 2);
            if (v312)
            {
              int64_t v313 = (uint64_t *)v311;
              uint64_t v315 = *a1;
              uint64_t v314 = a1[1];
              do
              {
                uint64_t v317 = *v313++;
                uint64_t v316 = v317;
                if (v317) {
                  GTResourceTrackerUsingResource(v310, 83, v316, v315, v314);
                }
                --v312;
              }

              while (v312);
            }

            break;
          case -15447:
            uint64_t v318 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v319 = a1[2];
            id v320 = GTTraceFunc_argumentBytesWithMap((void *)a2, v318[24], a1[1]);
            uint64_t v321 = *((void *)v318 + 2);
            if (v321)
            {
              unsigned int v322 = (uint64_t *)v320;
              uint64_t v324 = *a1;
              uint64_t v323 = a1[1];
              do
              {
                uint64_t v326 = *v322++;
                uint64_t v325 = v326;
                if (v326) {
                  GTResourceTrackerUsingResource(v319, 60, v325, v324, v323);
                }
                --v321;
              }

              while (v321);
            }

            break;
          case -15445:
            id v327 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v328 = a1[2];
            unint64_t v329 = GTTraceFunc_argumentBytesWithMap((void *)a2, v327[24], a1[1]);
            uint64_t v330 = *((void *)v327 + 2);
            if (v330)
            {
              BOOL v331 = (uint64_t *)v329;
              uint64_t v333 = *a1;
              uint64_t v332 = a1[1];
              do
              {
                uint64_t v335 = *v331++;
                uint64_t v334 = v335;
                if (v335) {
                  GTResourceTrackerUsingResource(v328, 83, v334, v333, v332);
                }
                --v330;
              }

              while (v330);
            }

            break;
          case -15415:
LABEL_211:
            uint64_t v7 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
            goto LABEL_454;
          case -15401:
          case -15391:
            goto LABEL_99;
          case -15399:
            unsigned int v336 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v337 = a1[2];
            __int128 v338 = GTTraceFunc_argumentBytesWithMap((void *)a2, v336[24], a1[1]);
            uint64_t v339 = *((void *)v336 + 2);
            if (v339)
            {
              id v340 = (uint64_t *)v338;
              uint64_t v342 = *a1;
              uint64_t v341 = a1[1];
              do
              {
                uint64_t v344 = *v340++;
                uint64_t v343 = v344;
                if (v344) {
                  GTResourceTrackerUsingResource(v337, 22, v343, v342, v341);
                }
                --v339;
              }

              while (v339);
            }

            break;
          case -15397:
          case -15396:
          case -15387:
          case -15386:
LABEL_60:
            uint64_t v44 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v20 = a1[1];
            uint64_t v21 = *((void *)v44 + 1);
            uint64_t v22 = *a1;
            uint64_t v23 = a1[2];
LABEL_61:
            int v24 = 75;
            goto LABEL_400;
          case -15395:
            uint64_t v345 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v346 = a1[2];
            uint64_t v347 = GTTraceFunc_argumentBytesWithMap((void *)a2, v345[24], a1[1]);
            uint64_t v348 = *((void *)v345 + 2);
            if (v348)
            {
              unint64_t v349 = (uint64_t *)v347;
              uint64_t v351 = *a1;
              uint64_t v350 = a1[1];
              do
              {
                uint64_t v353 = *v349++;
                uint64_t v352 = v353;
                if (v353) {
                  GTResourceTrackerUsingResource(v346, 75, v352, v351, v350);
                }
                --v348;
              }

              while (v348);
            }

            break;
          case -15394:
            uint64_t v354 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v355 = a1[2];
            __int128 v356 = GTTraceFunc_argumentBytesWithMap((void *)a2, v354[24], a1[1]);
            uint64_t v357 = *((void *)v354 + 2);
            if (v357)
            {
              unint64_t v358 = (uint64_t *)v356;
              uint64_t v360 = *a1;
              uint64_t v359 = a1[1];
              do
              {
                uint64_t v362 = *v358++;
                uint64_t v361 = v362;
                if (v362) {
                  GTResourceTrackerUsingResource(v355, 75, v361, v360, v359);
                }
                --v357;
              }

              while (v357);
            }

            break;
          case -15393:
          case -15383:
LABEL_69:
            uint64_t v54 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v20 = a1[1];
            uint64_t v21 = *((void *)v54 + 1);
            uint64_t v22 = *a1;
            uint64_t v23 = a1[2];
            int v24 = 80;
            goto LABEL_400;
          case -15392:
            float v363 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v364 = a1[2];
            unint64_t v365 = GTTraceFunc_argumentBytesWithMap((void *)a2, v363[24], a1[1]);
            uint64_t v366 = *((void *)v363 + 2);
            if (v366)
            {
              unsigned int v367 = (uint64_t *)v365;
              uint64_t v369 = *a1;
              uint64_t v368 = a1[1];
              do
              {
                uint64_t v371 = *v367++;
                uint64_t v370 = v371;
                if (v371) {
                  GTResourceTrackerUsingResource(v364, 80, v370, v369, v368);
                }
                --v366;
              }

              while (v366);
            }

            break;
          case -15389:
            unint64_t v372 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v373 = a1[2];
            uint64_t v374 = GTTraceFunc_argumentBytesWithMap((void *)a2, v372[24], a1[1]);
            uint64_t v375 = *((void *)v372 + 2);
            if (v375)
            {
              unint64_t v376 = (uint64_t *)v374;
              uint64_t v378 = *a1;
              uint64_t v377 = a1[1];
              do
              {
                uint64_t v380 = *v376++;
                uint64_t v379 = v380;
                if (v380) {
                  GTResourceTrackerUsingResource(v373, 22, v379, v378, v377);
                }
                --v375;
              }

              while (v375);
            }

            break;
          case -15385:
            __int128 v381 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v382 = a1[2];
            unint64_t v383 = GTTraceFunc_argumentBytesWithMap((void *)a2, v381[24], a1[1]);
            uint64_t v384 = *((void *)v381 + 2);
            if (v384)
            {
              unint64_t v385 = (uint64_t *)v383;
              uint64_t v387 = *a1;
              uint64_t v386 = a1[1];
              do
              {
                uint64_t v389 = *v385++;
                uint64_t v388 = v389;
                if (v389) {
                  GTResourceTrackerUsingResource(v382, 75, v388, v387, v386);
                }
                --v384;
              }

              while (v384);
            }

            break;
          case -15384:
            uint64_t v390 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v391 = a1[2];
            unint64_t v392 = GTTraceFunc_argumentBytesWithMap((void *)a2, v390[24], a1[1]);
            uint64_t v393 = *((void *)v390 + 2);
            if (v393)
            {
              id v394 = (uint64_t *)v392;
              uint64_t v396 = *a1;
              uint64_t v395 = a1[1];
              do
              {
                uint64_t v398 = *v394++;
                uint64_t v397 = v398;
                if (v398) {
                  GTResourceTrackerUsingResource(v391, 75, v397, v396, v395);
                }
                --v393;
              }

              while (v393);
            }

            break;
          case -15382:
            uint8x8_t v399 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v400 = a1[2];
            id v401 = GTTraceFunc_argumentBytesWithMap((void *)a2, v399[24], a1[1]);
            uint64_t v402 = *((void *)v399 + 2);
            if (v402)
            {
              unint64_t v403 = (uint64_t *)v401;
              uint64_t v405 = *a1;
              uint64_t v404 = a1[1];
              do
              {
                uint64_t v407 = *v403++;
                uint64_t v406 = v407;
                if (v407) {
                  GTResourceTrackerUsingResource(v400, 80, v406, v405, v404);
                }
                --v402;
              }

              while (v402);
            }

            break;
          default:
            switch(v6)
            {
              case -15524:
                goto LABEL_74;
              case -15523:
                goto LABEL_117;
              case -15522:
                unint64_t v408 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
                GTResourceTrackerResourceRead(a1, 16, *((void *)v408 + 1), a3);
                v409 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v408[32], a1[1]);
                GTResourceTrackerResourceReadMTLArray(a1, v409, a3);
                uint64_t v28 = *((void *)v408 + 2);
                goto LABEL_232;
              case -15521:
                goto LABEL_231;
              default:
                if (v6 == -15502) {
                  goto LABEL_231;
                }
                break;
            }

            break;
        }
      }

      return;
    }

    if (v6 > -7158)
    {
      switch(v6)
      {
        case -6142:
          id v230 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 7, *(void *)v230, *a1, a1[1]);
          uint64_t v231 = GTTraceFunc_argumentBytesWithMap((void *)a2, v230[40], a1[1]);
          uint64_t v232 = *((void *)v230 + 6);
          if (v232)
          {
            uint64_t v233 = (uint64_t *)v231;
            do
            {
              uint64_t v235 = *v233++;
              uint64_t v234 = v235;
              if (v235) {
                GTResourceTrackerResourceRead(a1, 80, v234, a3);
              }
              --v232;
            }

            while (v232);
          }

          unsigned __int32 v236 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v230[64], a1[1]);
          GTResourceTrackerResourceWriteArray(a1, v236, *((void *)v230 + 9), a3);
          uint64_t v7 = *((void *)v230 + 13);
          goto LABEL_454;
        case -6141:
        case -6139:
        case -6138:
        case -6134:
        case -6133:
        case -6131:
        case -6129:
        case -6128:
        case -6127:
        case -6124:
        case -6123:
        case -6122:
        case -6120:
        case -6119:
        case -6116:
        case -6111:
        case -6110:
        case -6109:
          return;
        case -6140:
          id v237 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 11, *v237, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v237[6], a3);
          GTResourceTrackerResourceRead(a1, 22, v237[11], a3);
          uint64_t v238 = tracker_resource_get(a1, 22, v237[15], a3);
          if (v238) {
            v238[4] = a3;
          }
          uint64_t v7 = v237[19];
          goto LABEL_454;
        case -6137:
          unint64_t v239 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 11, *v239, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v239[6], a3);
          GTResourceTrackerResourceRead(a1, 22, v239[11], a3);
          uint64_t v28 = v239[15];
          goto LABEL_232;
        case -6136:
          uint64_t v240 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 5, *v240, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v240[3], a3);
          uint64_t v241 = v240[4];
          goto LABEL_452;
        case -6135:
          id v242 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v244 = a1[1];
          uint64_t v243 = a1[2];
          uint64_t v245 = *v242;
          uint64_t v246 = *a1;
          int v247 = 8;
          goto LABEL_258;
        case -6132:
          id v248 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 10, *v248, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v248[11], a3);
          GTResourceTrackerResourceRead(a1, 22, v248[16], a3);
          uint64_t v28 = v248[21];
          goto LABEL_232;
        case -6130:
          __int128 v249 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 10, *v249, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v249[6], a3);
          GTResourceTrackerResourceRead(a1, 22, v249[11], a3);
          uint64_t v28 = v249[16];
          goto LABEL_232;
        case -6126:
          id v242 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v244 = a1[1];
          uint64_t v243 = a1[2];
          uint64_t v245 = *v242;
          uint64_t v246 = *a1;
          int v247 = 7;
LABEL_258:
          GTResourceTrackerUsingResource(v243, v247, v245, v246, v244);
          GTResourceTrackerResourceRead(a1, 80, v242[5], a3);
          uint64_t v28 = v242[7];
          goto LABEL_56;
        case -6125:
          uint64_t v35 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 4, *v35, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 80, v35[6], a3);
          uint64_t v36 = v35[8];
LABEL_260:
          GTResourceTrackerResourceRead(a1, 80, v36, a3);
          uint64_t v28 = v35[10];
          goto LABEL_56;
        case -6121:
          __int128 v250 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 7, *v250, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 80, v250[5], a3);
          uint64_t v7 = v250[7];
LABEL_72:
          uint64_t v8 = a1;
          int v9 = 80;
          goto LABEL_455;
        case -6118:
          __int128 v251 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 4, *(void *)v251, *a1, a1[1]);
          __int128 v252 = GTTraceFunc_argumentBytesWithMap((void *)a2, v251[48], a1[1]);
          uint64_t v253 = *((void *)v251 + 7);
          if (v253)
          {
            id v254 = (uint64_t *)v252;
            do
            {
              uint64_t v256 = *v254++;
              uint64_t v255 = v256;
              if (v256) {
                GTResourceTrackerResourceRead(a1, 80, v255, a3);
              }
              --v253;
            }

            while (v253);
          }

          __int128 v257 = GTTraceFunc_argumentBytesWithMap((void *)a2, v251[72], a1[1]);
          uint64_t v258 = *((void *)v251 + 10);
          if (v258)
          {
            __int128 v259 = (uint64_t *)v257;
            do
            {
              uint64_t v261 = *v259++;
              uint64_t v260 = v261;
              if (v261) {
                GTResourceTrackerResourceRead(a1, 80, v260, a3);
              }
              --v258;
            }

            while (v258);
          }

          uint64_t v262 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v251[96], a1[1]);
          GTResourceTrackerResourceWriteArray(a1, v262, *((void *)v251 + 13), a3);
          goto LABEL_295;
        case -6117:
          uint64_t v66 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 8, *v66, *a1, a1[1]);
          uint64_t v67 = v66[6];
          unsigned int v68 = a1;
          int v69 = 80;
LABEL_274:
          GTResourceTrackerResourceRead(v68, v69, v67, a3);
          uint64_t v28 = v66[8];
          goto LABEL_56;
        case -6115:
          uint64_t v263 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 8, *(void *)v263, *a1, a1[1]);
          uint64_t v264 = GTTraceFunc_argumentBytesWithMap((void *)a2, v263[48], a1[1]);
          uint64_t v265 = *((void *)v263 + 7);
          if (v265)
          {
            unint64_t v266 = (uint64_t *)v264;
            do
            {
              uint64_t v268 = *v266++;
              uint64_t v267 = v268;
              if (v268) {
                GTResourceTrackerResourceRead(a1, 80, v267, a3);
              }
              --v265;
            }

            while (v265);
          }

          __int128 v269 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v263[72], a1[1]);
          GTResourceTrackerResourceWriteArray(a1, v269, *((void *)v263 + 10), a3);
          uint64_t v7 = *((void *)v263 + 12);
          goto LABEL_454;
        case -6114:
          __int128 v251 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 6, *(void *)v251, *a1, a1[1]);
          __int128 v270 = GTTraceFunc_argumentBytesWithMap((void *)a2, v251[48], a1[1]);
          uint64_t v271 = *((void *)v251 + 7);
          if (v271)
          {
            __int128 v272 = (uint64_t *)v270;
            do
            {
              uint64_t v274 = *v272++;
              uint64_t v273 = v274;
              if (v274) {
                GTResourceTrackerResourceRead(a1, 80, v273, a3);
              }
              --v271;
            }

            while (v271);
          }

          __int128 v275 = GTTraceFunc_argumentBytesWithMap((void *)a2, v251[72], a1[1]);
          uint64_t v276 = *((void *)v251 + 10);
          if (v276)
          {
            uint64_t v277 = (uint64_t *)v275;
            do
            {
              uint64_t v279 = *v277++;
              uint64_t v278 = v279;
              if (v279) {
                GTResourceTrackerResourceRead(a1, 80, v278, a3);
              }
              --v276;
            }

            while (v276);
          }

          GTResourceTrackerResourceRead(a1, 22, *((void *)v251 + 12), a3);
          __int128 v280 = tracker_resource_get(a1, 22, *((void *)v251 + 12), a3);
          if (v280) {
            v280[4] = a3;
          }
          GTResourceTrackerResourceRead(a1, 22, *((void *)v251 + 13), a3);
          uint64_t v281 = tracker_resource_get(a1, 22, *((void *)v251 + 13), a3);
          if (v281) {
            v281[4] = a3;
          }
LABEL_295:
          uint64_t v7 = *((void *)v251 + 15);
          goto LABEL_454;
        case -6113:
          unint64_t v156 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 6, *v156, *a1, a1[1]);
          uint64_t v157 = v156[3];
LABEL_297:
          GTResourceTrackerResourceRead(a1, 22, v157, a3);
          uint64_t v7 = v156[4];
          goto LABEL_454;
        case -6112:
          uint64_t v240 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 5, *v240, *a1, a1[1]);
          uint64_t v282 = tracker_resource_get(a1, 22, v240[3], a3);
          if (v282) {
            v282[4] = a3;
          }
          __int128 v283 = tracker_resource_get(a1, 22, v240[4], a3);
          if (v283) {
            v283[4] = a3;
          }
          goto LABEL_453;
        case -6108:
          unint64_t v158 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 5, *v158, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v158[3], a3);
          uint64_t v159 = v158[5];
LABEL_303:
          GTResourceTrackerResourceRead(a1, 22, v159, a3);
          goto LABEL_304;
        case -6107:
          uint64_t v240 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 6, *v240, *a1, a1[1]);
          uint64_t v241 = v240[3];
LABEL_452:
          GTResourceTrackerResourceRead(a1, 22, v241, a3);
LABEL_453:
          uint64_t v7 = v240[5];
          goto LABEL_454;
        case -6106:
          unint64_t v158 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 5, *v158, *a1, a1[1]);
          id v284 = tracker_resource_get(a1, 22, v158[3], a3);
          if (v284) {
            v284[4] = a3;
          }
          uint64_t v285 = tracker_resource_get(a1, 22, v158[5], a3);
          if (v285) {
            v285[4] = a3;
          }
LABEL_304:
          uint64_t v7 = v158[6];
          goto LABEL_454;
        case -6105:
        case -6101:
          unint64_t v25 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 10, *v25, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v25[11], a3);
          GTResourceTrackerResourceRead(a1, 22, v25[16], a3);
          uint64_t v26 = tracker_resource_get(a1, 22, v25[21], a3);
          if (v26) {
            v26[4] = a3;
          }
          uint64_t v7 = v25[26];
          goto LABEL_454;
        case -6104:
          v286 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 9, *v286, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v286[6], a3);
          GTResourceTrackerResourceRead(a1, 22, v286[11], a3);
          GTResourceTrackerResourceRead(a1, 22, v286[16], a3);
          uint64_t v28 = v286[20];
          goto LABEL_232;
        case -6103:
          __int128 v287 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 9, *v287, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v287[6], a3);
          GTResourceTrackerResourceRead(a1, 22, v287[11], a3);
          GTResourceTrackerResourceRead(a1, 22, v287[16], a3);
          uint64_t v288 = tracker_resource_get(a1, 22, v287[20], a3);
          if (v288) {
            v288[4] = a3;
          }
          uint64_t v7 = v287[33];
          goto LABEL_454;
        case -6102:
        case -6100:
          int v77 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v79 = a1[1];
          uint64_t v78 = a1[2];
          uint64_t v80 = *v77;
          uint64_t v81 = *a1;
          int v82 = 14;
          goto LABEL_111;
        case -6099:
        case -6098:
          int v77 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v79 = a1[1];
          uint64_t v78 = a1[2];
          uint64_t v80 = *v77;
          uint64_t v81 = *a1;
          int v82 = 13;
LABEL_111:
          GTResourceTrackerUsingResource(v78, v82, v80, v81, v79);
          GTResourceTrackerResourceRead(a1, 22, v77[6], a3);
          GTResourceTrackerResourceRead(a1, 22, v77[8], a3);
          GTResourceTrackerResourceRead(a1, 22, v77[10], a3);
          int v83 = tracker_resource_get(a1, 22, v77[12], a3);
          if (v83) {
            v83[4] = a3;
          }
          uint64_t v7 = v77[15];
          goto LABEL_454;
        case -6097:
          unint64_t v289 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 12, *v289, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v289[6], a3);
          GTResourceTrackerResourceRead(a1, 22, v289[8], a3);
          unint64_t v290 = tracker_resource_get(a1, 22, v289[10], a3);
          if (v290) {
            v290[4] = a3;
          }
          uint64_t v7 = v289[12];
LABEL_454:
          uint64_t v8 = a1;
          int v9 = 22;
LABEL_455:
          GTResourceTrackerResourceRead(v8, v9, v7, a3);
          return;
        default:
          if (v6 == -7157) {
            goto LABEL_108;
          }
          int v42 = -7156;
          goto LABEL_107;
      }
    }

    if (v6 <= -15288)
    {
      if (v6 > -15341)
      {
        switch(v6)
        {
          case -15311:
            goto LABEL_78;
          case -15310:
            v522 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v523 = tracker_resource_get(a1, 80, *((void *)v522 + 1), a3);
            if (v523) {
              *((_BYTE *)v523 + 48) = 1;
            }
            uint64_t v28 = *((void *)v522 + 1);
            goto LABEL_56;
          case -15309:
          case -15308:
            goto LABEL_124;
          default:
            if (v6 == -15340 || v6 == -15339) {
              goto LABEL_124;
            }
            break;
        }

        return;
      }

      if (v6 == -15366)
      {
        __int16 v84 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
        GTResourceTrackerResourceRead(a1, 16, *((void *)v84 + 1), a3);
        uint64_t v85 = tracker_resource_get(a1, 16, *((void *)v84 + 2), a3);
        if (v85) {
          v85[4] = a3;
        }
        GTResourceTrackerUsingResource(a1[2], 22, *((void *)v84 + 3), *a1, a1[1]);
        unsigned int v86 = v84[48];
LABEL_131:
        __int128 v96 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v86, a1[1]);
        GTResourceTrackerUsingAccelerationStructureDescriptor(a1, v96, a3);
        return;
      }

      if (v6 != -15365)
      {
        if (v6 != -15342) {
          return;
        }
LABEL_78:
        unsigned int v58 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
        uint64_t v59 = tracker_resource_get(a1, 22, *((void *)v58 + 1), a3);
        if (v59) {
          *((_BYTE *)v59 + 48) = 1;
        }
        uint64_t v28 = *((void *)v58 + 1);
        goto LABEL_232;
      }

LABEL_231:
      uint64_t v221 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
      GTResourceTrackerResourceRead(a1, 16, *((void *)v221 + 1), a3);
      uint64_t v28 = *((void *)v221 + 2);
LABEL_232:
      uint64_t v29 = a1;
      int v30 = 22;
      goto LABEL_233;
    }

    if (v6 <= -15274)
    {
      if (v6 > -15283)
      {
        if (v6 == -15282)
        {
          id v145 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v146 = a1[2];
          uint64_t v147 = GTTraceFunc_argumentBytesWithMap((void *)a2, v145[24], a1[1]);
          uint64_t v148 = *((void *)v145 + 2);
          if (v148)
          {
            uint64_t v149 = (uint64_t *)v147;
            uint64_t v151 = *a1;
            uint64_t v150 = a1[1];
            do
            {
              uint64_t v153 = *v149++;
              uint64_t v152 = v153;
              if (v153) {
                GTResourceTrackerUsingResource(v146, 22, v152, v151, v150);
              }
              --v148;
            }

            while (v148);
          }

          return;
        }

        int v60 = -15275;
      }

      else
      {
        if (v6 == -15287) {
          goto LABEL_231;
        }
        int v60 = -15284;
      }

      if (v6 != v60) {
        return;
      }
LABEL_99:
      uint64_t v72 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
      uint64_t v20 = a1[1];
      uint64_t v21 = *((void *)v72 + 1);
      uint64_t v22 = *a1;
      uint64_t v23 = a1[2];
      int v24 = 22;
    }

    else
    {
      if (v6 <= -15254)
      {
        if (v6 == -15273)
        {
          unint64_t v136 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v137 = a1[2];
          char v138 = GTTraceFunc_argumentBytesWithMap((void *)a2, v136[24], a1[1]);
          uint64_t v139 = *((void *)v136 + 2);
          if (v139)
          {
            id v140 = (uint64_t *)v138;
            uint64_t v142 = *a1;
            uint64_t v141 = a1[1];
            do
            {
              uint64_t v144 = *v140++;
              uint64_t v143 = v144;
              if (v144) {
                GTResourceTrackerUsingResource(v137, 22, v143, v142, v141);
              }
              --v139;
            }

            while (v139);
          }
        }

        else if (v6 == -15254)
        {
          uint64_t v71 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
          GTResourceTrackerUsingResidencySet(a1, v71);
        }

        return;
      }

      if (v6 == -15253)
      {
        uint64_t v130 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
        unint64_t v131 = GTTraceFunc_argumentBytesWithMap((void *)a2, v130[16], a1[1]);
        uint64_t v132 = *((void *)v130 + 1);
        if (v132)
        {
          id v133 = (uint64_t *)v131;
          do
          {
            uint64_t v135 = *v133++;
            uint64_t v134 = v135;
            if (v135) {
              GTResourceTrackerUsingResidencySet(a1, v134);
            }
            --v132;
          }

          while (v132);
        }

        return;
      }

      if (v6 == -15217)
      {
LABEL_124:
        char v90 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
        uint64_t v91 = a1[2];
        int v24 = GTResourceTrackerGetResourceType(*((void *)v90 + 1), *a1);
        uint64_t v21 = *((void *)v90 + 1);
        uint64_t v22 = *a1;
        uint64_t v20 = a1[1];
        uint64_t v23 = v91;
      }

      else
      {
        int v42 = -7158;
LABEL_107:
        if (v6 != v42) {
          return;
        }
LABEL_108:
        uint64_t v75 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
        uint64_t v76 = a1[2];
        uint64_t v21 = *(void *)v75;
LABEL_399:
        uint64_t v22 = *a1;
        uint64_t v20 = a1[1];
        uint64_t v23 = v76;
        int v24 = 2;
      }
    }

LABEL_400:
    GTResourceTrackerUsingResource(v23, v24, v21, v22, v20);
    return;
  }

  if (v6 <= -16157)
  {
    if (v6 <= -16359)
    {
      switch(v6)
      {
        case -20480:
        case -20473:
        case -20471:
        case -20470:
        case -20464:
        case -20456:
          goto LABEL_71;
        case -20479:
        case -20469:
          goto LABEL_58;
        case -20478:
        case -20477:
        case -20475:
        case -20472:
        case -20468:
        case -20467:
        case -20466:
        case -20465:
        case -20463:
        case -20462:
        case -20460:
        case -20459:
        case -20458:
          return;
        case -20476:
        case -20461:
          goto LABEL_55;
        case -20474:
          uint64_t v31 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v20 = a1[1];
          uint64_t v21 = *(void *)v31;
          uint64_t v22 = *a1;
          uint64_t v23 = a1[2];
          int v24 = 39;
          goto LABEL_400;
        case -20457:
          char v89 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v20 = a1[1];
          uint64_t v21 = *(void *)v89;
          uint64_t v22 = *a1;
          uint64_t v23 = a1[2];
          int v24 = 40;
          goto LABEL_400;
        default:
          switch(v6)
          {
            case -16382:
LABEL_44:
              uint64_t v35 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v36 = v35[1];
              goto LABEL_260;
            case -16381:
LABEL_91:
              uint64_t v66 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v67 = v66[1];
              unsigned int v68 = a1;
              int v69 = 22;
              goto LABEL_274;
            case -16380:
LABEL_92:
              int v70 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              GTResourceTrackerResourceRead(a1, 80, *((void *)v70 + 1), a3);
LABEL_177:
              uint64_t v28 = *((void *)v70 + 10);
              goto LABEL_232;
            case -16379:
              goto LABEL_55;
            case -16378:
              goto LABEL_90;
            case -16377:
              goto LABEL_46;
            default:
              int v88 = -16359;
LABEL_397:
              if (v6 != v88) {
                return;
              }
LABEL_398:
              uint64_t v410 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v76 = a1[2];
              uint64_t v21 = *((void *)v410 + 1);
              break;
          }

          goto LABEL_399;
      }
    }

    else
    {
      switch(v6)
      {
        case -16279:
          unint64_t v19 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v20 = a1[1];
          uint64_t v21 = *((void *)v19 + 1);
          uint64_t v22 = *a1;
          uint64_t v23 = a1[2];
          int v24 = 71;
          goto LABEL_400;
        case -16278:
        case -16263:
          goto LABEL_99;
        case -16277:
          unint64_t v411 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v412 = a1[2];
          uint64_t v413 = GTTraceFunc_argumentBytesWithMap((void *)a2, v411[24], a1[1]);
          uint64_t v414 = *((void *)v411 + 2);
          if (v414)
          {
            int v415 = (uint64_t *)v413;
            uint64_t v417 = *a1;
            uint64_t v416 = a1[1];
            do
            {
              uint64_t v419 = *v415++;
              uint64_t v418 = v419;
              if (v419) {
                GTResourceTrackerUsingResource(v412, 22, v418, v417, v416);
              }
              --v414;
            }

            while (v414);
          }

          break;
        case -16276:
        case -16261:
          goto LABEL_69;
        case -16275:
          os_signpost_id_t v420 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v421 = a1[2];
          uint8x8_t v422 = GTTraceFunc_argumentBytesWithMap((void *)a2, v420[24], a1[1]);
          uint64_t v423 = *((void *)v420 + 2);
          if (v423)
          {
            uint64_t v424 = (uint64_t *)v422;
            uint64_t v426 = *a1;
            uint64_t v425 = a1[1];
            do
            {
              uint64_t v428 = *v424++;
              uint64_t v427 = v428;
              if (v428) {
                GTResourceTrackerUsingResource(v421, 80, v427, v426, v425);
              }
              --v423;
            }

            while (v423);
          }

          break;
        case -16274:
        case -16272:
        case -16259:
        case -16257:
          goto LABEL_60;
        case -16273:
          v429 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v430 = a1[2];
          BOOL v431 = GTTraceFunc_argumentBytesWithMap((void *)a2, v429[24], a1[1]);
          uint64_t v432 = *((void *)v429 + 2);
          if (v432)
          {
            unint64_t v433 = (uint64_t *)v431;
            uint64_t v435 = *a1;
            uint64_t v434 = a1[1];
            do
            {
              uint64_t v437 = *v433++;
              uint64_t v436 = v437;
              if (v437) {
                GTResourceTrackerUsingResource(v430, 75, v436, v435, v434);
              }
              --v432;
            }

            while (v432);
          }

          break;
        case -16271:
          id v438 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v439 = a1[2];
          unint64_t v440 = GTTraceFunc_argumentBytesWithMap((void *)a2, v438[24], a1[1]);
          uint64_t v441 = *((void *)v438 + 2);
          if (v441)
          {
            __int128 v442 = (uint64_t *)v440;
            uint64_t v444 = *a1;
            uint64_t v443 = a1[1];
            do
            {
              uint64_t v446 = *v442++;
              uint64_t v445 = v446;
              if (v446) {
                GTResourceTrackerUsingResource(v439, 75, v445, v444, v443);
              }
              --v441;
            }

            while (v441);
          }

          break;
        case -16270:
        case -16269:
        case -16268:
        case -16267:
        case -16266:
        case -16265:
        case -16264:
        case -16255:
        case -16253:
        case -16252:
        case -16251:
        case -16250:
        case -16247:
        case -16246:
        case -16245:
        case -16244:
        case -16243:
        case -16242:
        case -16241:
        case -16240:
        case -16239:
        case -16238:
        case -16237:
        case -16236:
        case -16235:
        case -16234:
        case -16233:
        case -16232:
        case -16231:
        case -16230:
        case -16229:
        case -16228:
        case -16227:
        case -16226:
        case -16225:
        case -16224:
        case -16223:
        case -16222:
        case -16221:
        case -16219:
        case -16218:
          return;
        case -16262:
          __int128 v447 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v448 = a1[2];
          unint64_t v449 = GTTraceFunc_argumentBytesWithMap((void *)a2, v447[24], a1[1]);
          uint64_t v450 = *((void *)v447 + 2);
          if (v450)
          {
            uint64_t v451 = (uint64_t *)v449;
            uint64_t v453 = *a1;
            uint64_t v452 = a1[1];
            do
            {
              uint64_t v455 = *v451++;
              uint64_t v454 = v455;
              if (v455) {
                GTResourceTrackerUsingResource(v448, 22, v454, v453, v452);
              }
              --v450;
            }

            while (v450);
          }

          break;
        case -16260:
          uint64_t v456 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v457 = a1[2];
          id v458 = GTTraceFunc_argumentBytesWithMap((void *)a2, v456[24], a1[1]);
          uint64_t v459 = *((void *)v456 + 2);
          if (v459)
          {
            uint64_t v460 = (uint64_t *)v458;
            uint64_t v462 = *a1;
            uint64_t v461 = a1[1];
            do
            {
              uint64_t v464 = *v460++;
              uint64_t v463 = v464;
              if (v464) {
                GTResourceTrackerUsingResource(v457, 80, v463, v462, v461);
              }
              --v459;
            }

            while (v459);
          }

          break;
        case -16258:
          unint64_t v465 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v466 = a1[2];
          unint64_t v467 = GTTraceFunc_argumentBytesWithMap((void *)a2, v465[24], a1[1]);
          uint64_t v468 = *((void *)v465 + 2);
          if (v468)
          {
            unint64_t v469 = (uint64_t *)v467;
            uint64_t v471 = *a1;
            uint64_t v470 = a1[1];
            do
            {
              uint64_t v473 = *v469++;
              uint64_t v472 = v473;
              if (v473) {
                GTResourceTrackerUsingResource(v466, 75, v472, v471, v470);
              }
              --v468;
            }

            while (v468);
          }

          break;
        case -16256:
          v474 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v475 = a1[2];
          uint64_t v476 = GTTraceFunc_argumentBytesWithMap((void *)a2, v474[24], a1[1]);
          uint64_t v477 = *((void *)v474 + 2);
          if (v477)
          {
            uint64_t v478 = (uint64_t *)v476;
            uint64_t v480 = *a1;
            uint64_t v479 = a1[1];
            do
            {
              uint64_t v482 = *v478++;
              uint64_t v481 = v482;
              if (v482) {
                GTResourceTrackerUsingResource(v475, 75, v481, v480, v479);
              }
              --v477;
            }

            while (v477);
          }

          break;
        case -16254:
          v483 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v20 = a1[1];
          uint64_t v21 = *((void *)v483 + 1);
          uint64_t v22 = *a1;
          uint64_t v23 = a1[2];
          int v24 = 34;
          goto LABEL_400;
        case -16249:
        case -16248:
        case -16217:
LABEL_29:
          uint64_t v7 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 4);
          goto LABEL_454;
        case -16220:
          goto LABEL_211;
        case -16216:
          uint64_t v7 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 2);
          goto LABEL_454;
        case -16215:
          uint64_t v240 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v241 = v240[3];
          goto LABEL_452;
        case -16214:
          uint64_t v484 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 80, *((void *)v484 + 1), *a1, a1[1]);
          uint64_t v20 = a1[1];
          uint64_t v23 = a1[2];
          uint64_t v21 = *((void *)v484 + 3);
          uint64_t v22 = *a1;
          goto LABEL_61;
        case -16213:
          goto LABEL_124;
        case -16212:
          goto LABEL_55;
        case -16211:
          goto LABEL_44;
        case -16210:
          goto LABEL_91;
        case -16209:
          goto LABEL_92;
        default:
          switch(v6)
          {
            case -16337:
              unint64_t v485 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v20 = a1[1];
              uint64_t v21 = *((void *)v485 + 1);
              uint64_t v22 = *a1;
              uint64_t v23 = a1[2];
              int v24 = 29;
              goto LABEL_400;
            case -16336:
              goto LABEL_99;
            case -16335:
              v486 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v487 = a1[2];
              unint64_t v488 = GTTraceFunc_argumentBytesWithMap((void *)a2, v486[24], a1[1]);
              uint64_t v489 = *((void *)v486 + 2);
              if (v489)
              {
                uint64_t v490 = (uint64_t *)v488;
                uint64_t v492 = *a1;
                uint64_t v491 = a1[1];
                do
                {
                  uint64_t v494 = *v490++;
                  uint64_t v493 = v494;
                  if (v494) {
                    GTResourceTrackerUsingResource(v487, 22, v493, v492, v491);
                  }
                  --v489;
                }

                while (v489);
              }

              break;
            case -16334:
              goto LABEL_69;
            case -16333:
              __int128 v495 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v496 = a1[2];
              unint64_t v497 = GTTraceFunc_argumentBytesWithMap((void *)a2, v495[24], a1[1]);
              uint64_t v498 = *((void *)v495 + 2);
              if (v498)
              {
                double v499 = (uint64_t *)v497;
                uint64_t v501 = *a1;
                uint64_t v500 = a1[1];
                do
                {
                  uint64_t v503 = *v499++;
                  uint64_t v502 = v503;
                  if (v503) {
                    GTResourceTrackerUsingResource(v496, 80, v502, v501, v500);
                  }
                  --v498;
                }

                while (v498);
              }

              break;
            case -16332:
            case -16330:
              goto LABEL_60;
            case -16331:
              __int128 v504 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v505 = a1[2];
              double v506 = GTTraceFunc_argumentBytesWithMap((void *)a2, v504[24], a1[1]);
              uint64_t v507 = *((void *)v504 + 2);
              if (v507)
              {
                double v508 = (uint64_t *)v506;
                uint64_t v510 = *a1;
                uint64_t v509 = a1[1];
                do
                {
                  uint64_t v512 = *v508++;
                  uint64_t v511 = v512;
                  if (v512) {
                    GTResourceTrackerUsingResource(v505, 75, v511, v510, v509);
                  }
                  --v507;
                }

                while (v507);
              }

              break;
            case -16329:
              JSValueRef v513 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v514 = a1[2];
              id v515 = GTTraceFunc_argumentBytesWithMap((void *)a2, v513[24], a1[1]);
              uint64_t v516 = *((void *)v513 + 2);
              if (v516)
              {
                size_t v517 = (uint64_t *)v515;
                uint64_t v519 = *a1;
                uint64_t v518 = a1[1];
                do
                {
                  uint64_t v521 = *v517++;
                  uint64_t v520 = v521;
                  if (v521) {
                    GTResourceTrackerUsingResource(v514, 75, v520, v519, v518);
                  }
                  --v516;
                }

                while (v516);
              }

              break;
            default:
              int v88 = -16358;
              goto LABEL_397;
          }

          break;
      }
    }
  }

  else
  {
    if (v6 > -16009)
    {
      if (v6 <= -15899)
      {
        switch(v6)
        {
          case -15977:
            int v70 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            int64_t v154 = tracker_resource_get(a1, 80, *((void *)v70 + 1), a3);
            if (v154) {
              v154[4] = a3;
            }
            goto LABEL_177;
          case -15976:
            goto LABEL_55;
          case -15975:
          case -15974:
          case -15973:
          case -15972:
          case -15971:
          case -15970:
          case -15969:
          case -15968:
          case -15965:
            return;
          case -15967:
            goto LABEL_124;
          case -15966:
            goto LABEL_85;
          case -15964:
          case -15962:
            uint64_t v7 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
            uint64_t v8 = a1;
            int v9 = 57;
            goto LABEL_455;
          case -15963:
          case -15961:
            uint64_t v73 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            GTResourceTrackerResourceRead(a1, 57, *((void *)v73 + 1), a3);
            goto LABEL_119;
          case -15960:
          case -15958:
            uint64_t v28 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
            goto LABEL_179;
          case -15959:
            id v155 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            GTResourceTrackerResourceRead(a1, 57, *((void *)v155 + 1), a3);
            uint64_t v28 = *((void *)v155 + 4);
LABEL_179:
            uint64_t v29 = a1;
            int v30 = 57;
            goto LABEL_233;
          default:
            switch(v6)
            {
              case -16008:
                uint64_t v171 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
                unsigned int v172 = v171[16];
                goto LABEL_194;
              case -16003:
                uint64_t v171 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
                unsigned int v172 = v171[32];
LABEL_194:
                uint64_t v173 = a1[2];
                uint64_t v174 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v172, a1[1]);
                GTResourceTrackerUsingResourceArray(v173, 0, v174, *((void *)v171 + 1), *a1, a1[1]);
                break;
              case -15995:
              case -15994:
              case -15993:
              case -15992:
                goto LABEL_55;
              case -15991:
              case -15990:
                goto LABEL_124;
              default:
                return;
            }

            return;
        }
      }

      if (v6 > -15822)
      {
        switch(v6)
        {
          case -15792:
            uint64_t v32 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            GTResourceTrackerResourceRead(a1, 80, *((void *)v32 + 1), a3);
            goto LABEL_156;
          case -15791:
          case -15790:
          case -15789:
          case -15788:
          case -15787:
          case -15786:
            return;
          case -15785:
          case -15781:
            goto LABEL_58;
          case -15784:
            id v160 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            GTResourceTrackerResourceRead(a1, 80, *((void *)v160 + 1), a3);
            uint64_t v7 = *((void *)v160 + 3);
            goto LABEL_454;
          case -15783:
          case -15782:
            goto LABEL_71;
          default:
            switch(v6)
            {
              case -15821:
                goto LABEL_85;
              case -15820:
                id v223 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
                id v224 = GTTraceFunc_argumentBytesWithMap((void *)a2, v223[24], a1[1]);
                uint64_t v225 = *((void *)v223 + 1);
                if (v225)
                {
                  int64_t v226 = (uint64_t *)v224;
                  do
                  {
                    uint64_t v227 = *v226++;
                    GTResourceTrackerUsingResourceHeap(a1, v227, a3);
                    --v225;
                  }

                  while (v225);
                }

                break;
              case -15819:
                goto LABEL_86;
              case -15818:
                unint64_t v33 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
                unsigned int v34 = v33[32];
                goto LABEL_241;
              default:
                return;
            }

            break;
        }

        return;
      }

      switch(v6)
      {
        case -15898:
          __int128 v175 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v176 = a1[2];
          __int128 v177 = GTTraceFunc_argumentBytesWithMap((void *)a2, v175[16], a1[1]);
          uint64_t v178 = *((void *)v175 + 1);
          if (v178)
          {
            id v179 = (uint64_t *)v177;
            uint64_t v181 = *a1;
            uint64_t v180 = a1[1];
            do
            {
              uint64_t v183 = *v179++;
              uint64_t v182 = v183;
              if (v183) {
                GTResourceTrackerUsingResource(v176, 73, v182, v181, v180);
              }
              --v178;
            }

            while (v178);
          }

          return;
        case -15897:
          __int128 v184 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v185 = a1[2];
          id v186 = GTTraceFunc_argumentBytesWithMap((void *)a2, v184[16], a1[1]);
          uint64_t v187 = *((void *)v184 + 1);
          if (v187)
          {
            uint64_t v188 = (uint64_t *)v186;
            uint64_t v190 = *a1;
            uint64_t v189 = a1[1];
            do
            {
              uint64_t v192 = *v188++;
              uint64_t v191 = v192;
              if (v192) {
                GTResourceTrackerUsingResource(v185, 73, v191, v190, v189);
              }
              --v187;
            }

            while (v187);
          }

          return;
        case -15896:
        case -15895:
        case -15894:
        case -15893:
        case -15892:
        case -15891:
        case -15890:
        case -15889:
          return;
        case -15888:
          __int128 v193 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v20 = a1[1];
          uint64_t v21 = *((void *)v193 + 1);
          uint64_t v22 = *a1;
          uint64_t v23 = a1[2];
          int v24 = 64;
          goto LABEL_400;
        case -15887:
          uint64_t v37 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerResourceRead(a1, 80, v37[1], a3);
          uint64_t v38 = v37[2];
          unsigned int v39 = a1;
          int v40 = 80;
          goto LABEL_209;
        case -15886:
        case -15885:
          goto LABEL_58;
        default:
          if (v6 == -15878)
          {
            id v229 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            GTResourceTrackerResourceRead(a1, 80, *((void *)v229 + 1), a3);
            uint64_t v28 = *((void *)v229 + 4);
          }

          else
          {
            if (v6 != -15877) {
              return;
            }
            unsigned int v74 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            GTResourceTrackerResourceRead(a1, 80, *((void *)v74 + 1), a3);
            uint64_t v28 = *((void *)v74 + 2);
          }

          break;
      }

uint64_t CommandBufferCommitIndex(uint64_t a1)
{
  unsigned int v1 = 0;
  if (a1)
  {
    while (1)
    {
      unsigned int v2 = atomic_load((unsigned int *)(a1 + 4));
      uint64_t v3 = v1 + (v2 >> 6) - 1;
      a1 = *(void *)(a1 + 40);
      unsigned int v1 = v3;
      if (!a1)
      {
        unsigned int v1 = v3;
        goto LABEL_6;
      }
    }
  }

  uint64_t v3 = 0LL;
LABEL_6:
  unint64_t v4 = v1 | (unint64_t)(v3 << 32);
LABEL_7:
  uint64_t v5 = a1 + 64;
  while (a1)
  {
    int v6 = HIDWORD(v4) - v4;
    int v7 = *(_DWORD *)(v5 + ((uint64_t)v6 << 6) + 8);
    if (v7 > -15344)
    {
      unsigned int v10 = v7 + 15343;
      BOOL v11 = v10 > 0x1B;
      int v12 = (1 << v10) & 0xA000001;
      if (!v11 && v12 != 0) {
        return *(void *)(v5 + ((uint64_t)v6 << 6));
      }
    }

    else if (v7 == -16361 || v7 == -16202 || v7 == -15908)
    {
      return *(void *)(v5 + ((uint64_t)v6 << 6));
    }

    unsigned int v14 = atomic_load((unsigned int *)(a1 + 4));
    uint64_t v15 = (HIDWORD(v4) + 1);
    int v16 = v4 + (v14 >> 6) - 1;
    unint64_t v4 = (v15 << 32) | v4;
    if ((_DWORD)v15 == v16)
    {
      unint64_t v4 = (v15 << 32) | v15;
      a1 = *(void *)(a1 + 40);
      goto LABEL_7;
    }
  }

  return -1LL;
}

void GatherCommandQueueResidencySetsUpToIndexInternal( apr_pool_t **a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a2 + 32);
  if (v6)
  {
    unsigned int v7 = 0;
    while (1)
    {
      unsigned int v8 = atomic_load((unsigned int *)(v6 + 4));
      uint64_t v9 = v7 + (v8 >> 6) - 1;
      uint64_t v6 = *(void *)(v6 + 40);
      unsigned int v7 = v9;
      if (!v6)
      {
        unsigned int v7 = v9;
        goto LABEL_8;
      }
    }
  }

  else
  {
    unsigned int v7 = 0;
  }

  uint64_t v9 = 0LL;
LABEL_8:
  unint64_t v10 = 0LL;
  unint64_t v11 = v7 | (unint64_t)(v9 << 32);
LABEL_9:
  uint64_t v12 = v6 + 64;
  while (v6)
  {
    int v13 = HIDWORD(v11) - v11;
    uint64_t v14 = v13;
    unint64_t v15 = *(void *)(v12 + ((uint64_t)v13 << 6));
    if (v15 >= a4) {
      break;
    }
    int v16 = *(_DWORD *)(v12 + (v14 << 6) + 8);
    unsigned int v18 = atomic_load((unsigned int *)(v6 + 4));
    uint64_t v19 = (HIDWORD(v11) + 1);
    int v20 = v11 + (v18 >> 6) - 1;
    unint64_t v11 = (v19 << 32) | v11;
    if ((_DWORD)v19 == v20)
    {
      unint64_t v11 = (v19 << 32) | v19;
      uint64_t v6 = *(void *)(v6 + 40);
      goto LABEL_9;
    }
  }

  uint64_t v21 = *(void *)(a2 + 32);
  unsigned int v22 = 0;
  if (v21)
  {
    while (1)
    {
      unsigned int v23 = atomic_load((unsigned int *)(v21 + 4));
      uint64_t v24 = v22 + (v23 >> 6) - 1;
      uint64_t v21 = *(void *)(v21 + 40);
      unsigned int v22 = v24;
      if (!v21)
      {
        unsigned int v22 = v24;
        goto LABEL_25;
      }
    }
  }

  uint64_t v24 = 0LL;
LABEL_25:
  unint64_t v25 = v22 | (unint64_t)(v24 << 32);
LABEL_26:
  uint64_t v26 = v21 + 64;
  while (v21)
  {
    int v27 = HIDWORD(v25) - v25;
    uint64_t v28 = (unint64_t *)(v26 + ((uint64_t)v27 << 6));
    if (*v28 >= v10)
    {
      if (*v28 >= a4)
      {
      }

      else
      {
        int v29 = *(_DWORD *)(v26 + ((uint64_t)v27 << 6) + 8);
        if (!a5 || (v29 & 0xFFFFFFFE) != 0xFFFFC46E)
        {
          switch(v29)
          {
            case -15252:
              int v30 = GTTraceFunc_argumentBytesWithMap(v28, *(unsigned __int8 *)(v26 + ((uint64_t)v27 << 6) + 13), a3) + 8;
              uint64_t v31 = *find_entry((uint64_t)a1, v30, 8uLL, 0LL);
              if (!v31 || !*(void *)(v31 + 32))
              {
                uint64_t v32 = (char *)apr_palloc(*a1, 8uLL);
                *(void *)uint64_t v32 = *(void *)v30;
                unint64_t v33 = (apr_hash_t *)a1;
                unsigned int v34 = v32;
                goto LABEL_51;
              }

              break;
            case -15251:
              uint64_t v38 = GTTraceFunc_argumentBytesWithMap(v28, *(unsigned __int8 *)(v26 + ((uint64_t)v27 << 6) + 13), a3);
              unsigned int v39 = GTTraceFunc_argumentBytesWithMap(v28, v38[16], a3);
              if (*((void *)v38 + 1))
              {
                int v40 = v39;
                uint64_t v41 = 0LL;
                unint64_t v42 = 0LL;
                do
                {
                  uint64_t v43 = *find_entry((uint64_t)a1, &v40[v41], 8uLL, 0LL);
                  if (!v43 || !*(void *)(v43 + 32))
                  {
                    if (v40)
                    {
                      uint64_t v44 = apr_palloc(*a1, 8uLL);
                      void *v44 = *(void *)&v40[8 * v42];
                    }

                    else
                    {
                      uint64_t v44 = 0LL;
                    }

                    apr_hash_set((apr_hash_t *)a1, v44, 8LL, v44);
                  }

                  ++v42;
                  v41 += 8LL;
                }

                while (*((void *)v38 + 1) > v42);
              }

              break;
            case -15250:
              uint64_t v32 = GTTraceFunc_argumentBytesWithMap(v28, *(unsigned __int8 *)(v26 + ((uint64_t)v27 << 6) + 13), a3) + 8;
              unint64_t v33 = (apr_hash_t *)a1;
              unsigned int v34 = 0LL;
LABEL_51:
              apr_hash_set(v33, v32, 8LL, v34);
              break;
            case -15249:
              uint64_t v45 = GTTraceFunc_argumentBytesWithMap(v28, *(unsigned __int8 *)(v26 + ((uint64_t)v27 << 6) + 13), a3);
              uint64_t v46 = GTTraceFunc_argumentBytesWithMap(v28, v45[16], a3);
              if (*((void *)v45 + 1))
              {
                unsigned int v47 = v46;
                unint64_t v48 = 0LL;
                do
                {
                  apr_hash_set((apr_hash_t *)a1, v47, 8LL, 0LL);
                  ++v48;
                  v47 += 8;
                }

                while (*((void *)v45 + 1) > v48);
              }

              break;
            default:
              break;
          }
        }
      }
    }

    unsigned int v35 = atomic_load((unsigned int *)(v21 + 4));
    int v36 = v25 + (v35 >> 6);
    uint64_t v37 = (HIDWORD(v25) + 1);
    unint64_t v25 = (v37 << 32) | v25;
    if ((_DWORD)v37 == v36 - 1)
    {
      unint64_t v25 = (v37 << 32) | v37;
      uint64_t v21 = *(void *)(v21 + 40);
      goto LABEL_26;
    }
  }

uint64_t std::vector<TargetBlock>::push_back[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  unint64_t v5 = a1[1];
  if (v5 >= v4)
  {
    uint64_t v8 = (uint64_t)(v5 - *a1) >> 7;
    uint64_t v9 = v4 - *a1;
    uint64_t v10 = v9 >> 6;
    else {
      unint64_t v11 = v10;
    }
    uint64_t v17 = a1 + 2;
    if (v11)
    {
      if (v11 >> 57) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v12 = (char *)operator new(v11 << 7);
    }

    else
    {
      uint64_t v12 = 0LL;
    }

    int v13 = v12;
    uint64_t v14 = &v12[128 * v8];
    int v16 = &v12[128 * v11];
    std::allocator<TargetBlock>::construct[abi:nn180100]<TargetBlock,TargetBlock>((uint64_t)v14, a2);
    unint64_t v15 = v14 + 128;
    std::vector<TargetBlock>::__swap_out_circular_buffer(a1, &v13);
    uint64_t v7 = a1[1];
    uint64_t result = std::__split_buffer<TargetBlock>::~__split_buffer((uint64_t)&v13);
  }

  else
  {
    uint64_t result = std::allocator<TargetBlock>::construct[abi:nn180100]<TargetBlock,TargetBlock>(a1[1], a2);
    uint64_t v7 = v5 + 128;
  }

  a1[1] = v7;
  return result;
}

uint64_t *std::vector<ALUTargetBlockInfo>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(void *)(v6 - 24) = 0LL;
      *(void *)(v6 - 16) = 0LL;
      *(void *)(v6 - 8) = 0LL;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 24) = 0LL;
      *(void *)(v7 - 16) = 0LL;
      *(void *)(v7 - 8) = 0LL;
      v5 -= 32LL;
    }

    while (v2 + v5 != v3);
    v4 += v5;
  }

  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<ALUTargetBlockInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 32;
    uint64_t v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }

    else
    {
      v2 -= 32LL;
    }
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *llvm::agxclauseanalyzer::AnalyzerInput::InstIteratorImpl<llvm::agxclauseanalyzer::AnalyzerInput>::operator++( void *a1)
{
  (*(void (**)(uint64_t *__return_ptr, void, void))(*(void *)*a1 + 24LL))(&v4, *a1, a1[1]);
  uint64_t v2 = v4;
  if ((v5 & 1) != 0)
  {
    ++a1[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  else
  {
    a1[1] += *(void *)(v4 + 16);
  }

  return a1;
}

uint64_t std::vector<TargetBlock>::__base_destruct_at_end[abi:nn180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 128LL)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(i - 40);
    std::__hash_table<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>>>::~__hash_table(i - 88);
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(i - 128);
  }

  *(void *)(v3 + 8) = a2;
  return result;
}

void std::vector<TargetBlock>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<TargetBlock>::__base_destruct_at_end[abi:nn180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }

uint64_t std::allocator<TargetBlock>::construct[abi:nn180100]<TargetBlock,TargetBlock>( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__hash_table( a1,  (uint64_t *)a2);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  *(void *)(v3 + 40) = v4;
  *(void *)(v3 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0LL;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(v3 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(v3 + 64) = v6;
  *(_DWORD *)(v3 + 72) = *(_DWORD *)(a2 + 72);
  if (v6)
  {
    unint64_t v7 = *(void *)(v5 + 8);
    unint64_t v8 = *(void *)(v3 + 48);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }

    else
    {
      v7 &= v8 - 1;
    }

    *(void *)(v4 + 8 * v7) = v3 + 56;
    *(void *)(a2 + 56) = 0LL;
    *(void *)(a2 + 64) = 0LL;
  }

  *(void *)(v3 + 80) = *(void *)(a2 + 80);
  return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__hash_table( v3 + 88,  (uint64_t *)(a2 + 88));
}

uint64_t *std::vector<TargetBlock>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 128LL;
    v4 -= 128LL;
    uint64_t result = (uint64_t *)std::allocator<TargetBlock>::construct[abi:nn180100]<TargetBlock,TargetBlock>(v6, v4);
  }

  a2[1] = v6;
  uint64_t v7 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v7;
  uint64_t v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = v3[2];
  v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<TargetBlock>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 128;
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(i - 40);
    std::__hash_table<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>>>::~__hash_table(i - 88);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(i - 128);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,unsigned long &>( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }

    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == a2)
        {
          if (i[2] == a2) {
            return;
          }
        }

        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }

          else
          {
            v13 &= v9 - 1;
          }

          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }

  uint64_t v14 = operator new(0x20uLL);
  v14[1] = a2;
  v14[2] = a3;
  v14[3] = a4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1LL;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( a1,  v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
      else {
        unint64_t v4 = a2;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
  }

  uint64_t v21 = *(void *)a1;
  unsigned int v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t v14 = *v22;
LABEL_38:
    *unsigned int v22 = v14;
    goto LABEL_39;
  }

  uint64_t v23 = *(void *)(a1 + 16);
  *uint64_t v14 = v23;
  *(void *)(a1 + 16) = v14;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (v23)
  {
    unint64_t v24 = *(void *)(v23 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }

    else
    {
      v24 &= v9 - 1;
    }

    unsigned int v22 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }

uint64_t llvm::Expected<std::vector<llvm::iterator_range<llvm::agxclauseanalyzer::AnalyzerInput::InstIteratorImpl<llvm::agxclauseanalyzer::AnalyzerInput const>>>>::~Expected( uint64_t a1)
{
  char v2 = *(_BYTE *)(a1 + 24);
  uint64_t v3 = *(void **)a1;
  if ((v2 & 1) != 0)
  {
    *(void *)a1 = 0LL;
    if (v3) {
      (*(void (**)(void *))(*(void *)v3 + 8LL))(v3);
    }
  }

  else if (v3)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }

  return a1;
}

void std::vector<llvm::Error>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  unsigned int v1 = *a1;
  char v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *((void *)v4 - 1);
        v4 -= 8;
        uint64_t v6 = v7;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
        }
      }

      while (v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t std::allocator<TargetClause>::destroy[abi:nn180100](uint64_t a1)
{
  char v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }

  return std::__hash_table<std::__hash_value_type<unsigned int,DrawDurationInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DrawDurationInfo>>>::~__hash_table(a1 + 24);
}

uint64_t TargetClauseAnalysis::GetTargetBlocks(TargetClauseAnalysis *this)
{
  __int128 v108 = 0u;
  __int128 v109 = 0u;
  int v110 = 1065353216;
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( (uint64_t)&v108,  (unint64_t)(float)*((unsigned int *)this + 62));
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *((void *)this + 1);
  while (v2 != v3)
  {
    for (uint64_t i = *(uint64_t **)(v2 + 40); i; uint64_t i = (uint64_t *)*i)
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>( (uint64_t)&v108,  *((_DWORD *)i + 4),  *((_DWORD *)i + 4));
    v2 += 88LL;
  }

  uint64_t v5 = v109;
  if (!(void)v109) {
    goto LABEL_157;
  }
  do
  {
    uint64_t v6 = (int *)*((void *)this + 17);
    uint64_t v7 = (int *)*((void *)this + 18);
    if (v6 == v7)
    {
      uint64_t v8 = 0LL;
    }

    else
    {
      uint64_t v8 = 0LL;
      do
      {
        int v9 = *v6++;
        if (v9 == -1) {
          ++v8;
        }
      }

      while (v6 != v7);
    }

    uint64_t v10 = *((void *)this + 32);
    unint64_t v11 = v10 - v8;
    if (v10 == v8)
    {
      size_t v12 = 0LL;
      unint64_t v13 = 0LL;
      uint64_t v97 = 0LL;
    }

    else
    {
      if (v11 >> 62
        || (size_t v12 = (size_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v10 - v8),
            bzero((void *)v12, 4 * v10 - 4 * v8),
            v11 >= 0xAAAAAAAAAAAAAABLL))
      {
LABEL_158:
        abort();
      }

      unint64_t v13 = (char *)operator new(24 * v11);
      bzero(v13, 24 * ((24 * v11 - 24) / 0x18) + 24);
      uint64_t v97 = &v13[24 * ((24 * v11 - 24) / 0x18) + 24];
    }

    uint64_t v98 = (uint64_t *)v5;
    uint64_t v14 = (unsigned int *)(v5 + 16);
    uint64_t v15 = *(void *)this;
    uint64_t v100 = *((void *)this + 1);
    unint64_t v103 = v13;
    size_t v104 = v12;
    uint64_t v102 = v14;
    if (*(void *)this != v100)
    {
      do
      {
        int v16 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,DrawDurationInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DrawDurationInfo>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( v15 + 24,  *v14,  v14)
              + 6);
        if (v16)
        {
          uint64_t v17 = *((void *)this + 17);
          uint64_t v18 = *(unsigned int *)(v17 + 4LL * *(void *)v15);
          uint64_t v19 = *(unsigned int *)(v17 + 4LL * (*(void *)(v15 + 8) + *(void *)v15));
          if (v18 < v19)
          {
            do
            {
              *(_DWORD *)(v12 + 4 * v18) += v16;
              size_t v20 = &v13[24 * v18];
              unsigned int v22 = (_DWORD **)(v20 + 8);
              uint64_t v21 = (_DWORD *)*((void *)v20 + 1);
              unint64_t v23 = *((void *)v20 + 2);
              if ((unint64_t)v21 >= v23)
              {
                unint64_t v25 = *(_DWORD **)v20;
                uint64_t v26 = ((uint64_t)v21 - *(void *)v20) >> 2;
                unint64_t v27 = v26 + 1;
                uint64_t v28 = v23 - (void)v25;
                if (v28 >> 1 > v27) {
                  unint64_t v27 = v28 >> 1;
                }
                BOOL v29 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v29) {
                  unint64_t v30 = v27;
                }
                if (v30)
                {
                  unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v30);
                  uint64_t v21 = *v22;
                  unint64_t v25 = *(_DWORD **)v20;
                }

                else
                {
                  uint64_t v31 = 0LL;
                }

                uint64_t v32 = (_DWORD *)(v30 + 4 * v26);
                *uint64_t v32 = *(_DWORD *)(v15 + 16);
                unint64_t v24 = v32 + 1;
                while (v21 != v25)
                {
                  int v33 = *--v21;
                  *--uint64_t v32 = v33;
                }

                *(void *)size_t v20 = v32;
                *unsigned int v22 = v24;
                *((void *)v20 + 2) = v30 + 4 * v31;
                if (v25) {
                  operator delete(v25);
                }
              }

              else
              {
                *uint64_t v21 = *(_DWORD *)(v15 + 16);
                unint64_t v24 = v21 + 1;
              }

              *unsigned int v22 = v24;
              ++v18;
              unint64_t v13 = v103;
              size_t v12 = v104;
            }

            while (v18 != v19);
          }
        }

        v15 += 88LL;
        uint64_t v14 = v102;
      }

      while (v15 != v100);
    }

    uint64_t v35 = *((void *)this + 28);
    uint64_t v34 = *((void *)this + 29);
    uint64_t v99 = v34;
    while (v35 != v34)
    {
      int v36 = *(_DWORD *)(v35 + 84) - *(_DWORD *)(v35 + 80);
      unsigned int v37 = v36 + 1;
      if (v36 == -1)
      {
        unint64_t v38 = 0LL;
        __int128 v39 = 0uLL;
      }

      else
      {
        size_t v12 = 4LL * (v36 + 1);
        int v40 = (char *)operator new(v12);
        unint64_t v38 = (unint64_t)&v40[4 * v37];
        bzero(v40, 4LL * v37);
        *(void *)&__int128 v39 = v40;
        *((void *)&v39 + 1) = v38;
      }

      uint64_t v41 = (uint64_t *)(v35 + 40);
      size_t v42 = *v102;
      unint64_t v43 = *(void *)(v35 + 48);
      if (v43)
      {
        uint8x8_t v44 = (uint8x8_t)vcnt_s8((int8x8_t)v43);
        v44.i16[0] = vaddlv_u8(v44);
        if (v44.u32[0] > 1uLL)
        {
          size_t v12 = *v102;
          if (v43 <= v42) {
            size_t v12 = v42 % v43;
          }
        }

        else
        {
          size_t v12 = ((_DWORD)v43 - 1) & v42;
        }

        uint64_t v45 = *(uint64_t ***)(*v41 + 8 * v12);
        if (v45)
        {
          for (uint64_t j = *v45; j; uint64_t j = (uint64_t *)*j)
          {
            unint64_t v47 = j[1];
            if (v47 == v42)
            {
              if (*((_DWORD *)j + 4) == (_DWORD)v42)
              {
                size_t v12 = v104;
                goto LABEL_82;
              }
            }

            else
            {
              if (v44.u32[0] > 1uLL)
              {
                if (v47 >= v43) {
                  v47 %= v43;
                }
              }

              else
              {
                v47 &= v43 - 1;
              }

              if (v47 != v12) {
                break;
              }
            }
          }
        }
      }

      __int128 v101 = v39;
      unint64_t v48 = (char *)operator new(0x30uLL);
      *(void *)unint64_t v48 = 0LL;
      *((void *)v48 + 1) = v42;
      *((_DWORD *)v48 + 4) = *v102;
      *(_OWORD *)(v48 + 24) = v101;
      *((void *)v48 + 5) = v38;
      float v49 = (float)(unint64_t)(*(void *)(v35 + 64) + 1LL);
      float v50 = *(float *)(v35 + 72);
      if (!v43 || (float)(v50 * (float)v43) < v49)
      {
        BOOL v51 = (v43 & (v43 - 1)) != 0;
        if (v43 < 3) {
          BOOL v51 = 1LL;
        }
        unint64_t v52 = v51 | (2 * v43);
        unint64_t v53 = vcvtps_u32_f32(v49 / v50);
        if (v52 <= v53) {
          size_t v54 = v53;
        }
        else {
          size_t v54 = v52;
        }
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( v35 + 40,  v54);
        unint64_t v43 = *(void *)(v35 + 48);
        if ((v43 & (v43 - 1)) != 0)
        {
          if (v43 <= v42) {
            size_t v12 = v42 % v43;
          }
          else {
            size_t v12 = v42;
          }
        }

        else
        {
          size_t v12 = ((_DWORD)v43 - 1) & v42;
        }
      }

      uint64_t v55 = *v41;
      int v56 = *(void **)(*v41 + 8 * v12);
      if (v56)
      {
        *(void *)unint64_t v48 = *v56;
        size_t v12 = v104;
LABEL_80:
        void *v56 = v48;
        goto LABEL_81;
      }

      *(void *)unint64_t v48 = *(void *)(v35 + 56);
      *(void *)(v35 + 56) = v48;
      *(void *)(v55 + 8 * v12) = v35 + 56;
      size_t v12 = v104;
      if (*(void *)v48)
      {
        unint64_t v57 = *(void *)(*(void *)v48 + 8LL);
        if ((v43 & (v43 - 1)) != 0)
        {
          if (v57 >= v43) {
            v57 %= v43;
          }
        }

        else
        {
          v57 &= v43 - 1;
        }

        int v56 = (void *)(*v41 + 8 * v57);
        goto LABEL_80;
      }

LABEL_121:
      ++*(void *)(v35 + 64);
LABEL_122:
      uint64_t v73 = *(unsigned int *)(v35 + 80);
      uint64_t v74 = *(unsigned int *)(v35 + 84);
      uint64_t v75 = (int *)(v12 + 4 * v73);
      unint64_t v13 = v103;
      unsigned int v76 = 0;
      if (v75 == (int *)(v12 + 4 * v74 + 4))
      {
        LODWORD(v78) = 0;
      }

      else
      {
        uint64_t v77 = 4 * v74 - 4 * v73 + 4;
        uint64_t v78 = v77;
        uint64_t v79 = v75;
        do
        {
          int v80 = *v79++;
          v76 += v80;
          v78 -= 4LL;
        }

        while (v78);
        do
        {
          if (*v75++) {
            LODWORD(v78) = v78 + 1;
          }
          v77 -= 4LL;
        }

        while (v77);
      }

      else {
        unsigned int v82 = v78;
      }
      *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( v35 + 88,  *v102,  v102)
      + 5) = v76 / v82;
      __int128 v105 = 0u;
      __int128 v106 = 0u;
      int v107 = 1065353216;
      unsigned int v83 = *(_DWORD *)(v35 + 80);
      if (v83 <= *(_DWORD *)(v35 + 84))
      {
        do
        {
          int v84 = *(_DWORD *)(v12 + 4LL * v83);
          unsigned int v85 = v83;
          if (v84)
          {
            *(_DWORD *)(v62[3] + 4LL * (v83 - *(_DWORD *)(v35 + 80))) = v84;
            unsigned int v86 = (unsigned int **)&v103[24 * v83];
            __int128 v87 = *v86;
            int v88 = v86[1];
            while (v87 != v88)
            {
              unsigned int v89 = *(_DWORD *)(*((void *)this + 17) + 4LL * *(void *)(*(void *)this + 88LL * *v87));
              if (v89 >= *(_DWORD *)(v35 + 80) && v89 <= *(_DWORD *)(v35 + 84)) {
                std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>( (uint64_t)&v105,  *v87,  *v87);
              }
              ++v87;
            }
          }

          unsigned int v83 = v85 + 1;
        }

        while (v85 + 1 <= *(_DWORD *)(v35 + 84));
        for (uint64_t k = (uint64_t *)v106; k; uint64_t k = (uint64_t *)*k)
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>( v35,  *((_DWORD *)k + 4),  *((_DWORD *)k + 4));
      }

      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v105);
      v35 += 128LL;
      uint64_t v34 = v99;
    }

    if (v13)
    {
      __int128 v92 = v97;
      if (v97 != v13)
      {
        __int128 v93 = v97;
        do
        {
          uint64_t v95 = (void *)*((void *)v93 - 3);
          v93 -= 24;
          __int128 v94 = v95;
          if (v95)
          {
            *((void *)v92 - 2) = v94;
            operator delete(v94);
          }

          __int128 v92 = v93;
        }

        while (v93 != v13);
      }

      operator delete(v13);
    }

    if (v12) {
      operator delete((void *)v12);
    }
    uint64_t v5 = *v98;
  }

  while (*v98);
LABEL_157:
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v108);
  return (uint64_t)this + 224;
}

void GPUToolsPlatformLLVMShaderProfilerHelper::GPUToolsPlatformLLVMShaderProfilerHelper( GPUToolsPlatformLLVMShaderProfilerHelper *this)
{
  *(void *)this = 0LL;
  uint64_t v1 = LLVMInitializeAGX2TargetInfo();
  uint64_t v2 = LLVMInitializeAGX2TargetMC(v1);
  uint64_t v3 = LLVMInitializeAGX2Disassembler(v2);
  LLVMInitializeAGX2ClauseAnalyzer(v3);
}

void std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelperImpl>::reset[abi:nn180100]( uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 136);
    *(void *)(v2 + 136) = 0LL;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    unint64_t v4 = *(void ***)(v2 + 128);
    *(void *)(v2 + 128) = 0LL;
    if (v4) {
      std::default_delete<TargetClauseAnalysis>::operator()[abi:nn180100](v4);
    }
    uint64_t v5 = *(void *)(v2 + 120);
    *(void *)(v2 + 120) = 0LL;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    uint64_t v6 = *(void *)(v2 + 112);
    *(void *)(v2 + 112) = 0LL;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    uint64_t v7 = *(void *)(v2 + 104);
    *(void *)(v2 + 104) = 0LL;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
    std::unique_ptr<llvm::MCContext>::reset[abi:nn180100]((llvm::MCContext **)(v2 + 96), 0LL);
    uint64_t v11 = *(void *)(v2 + 88);
    *(void *)(v2 + 88) = 0LL;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    }
    uint64_t v12 = *(void *)(v2 + 80);
    *(void *)(v2 + 80) = 0LL;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    uint64_t v13 = *(void *)(v2 + 72);
    *(void *)(v2 + 72) = 0LL;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
    }
    uint64_t v14 = *(void *)(v2 + 64);
    *(void *)(v2 + 64) = 0LL;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
    }
    uint64_t v15 = *(void *)(v2 + 56);
    *(void *)(v2 + 56) = 0LL;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
    }
    int v16 = *(void **)(v2 + 48);
    *(void *)(v2 + 48) = 0LL;
    if (v16) {
      operator delete(v16);
    }
    uint64_t v17 = *(void *)(v2 + 40);
    *(void *)(v2 + 40) = 0LL;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
    }
    uint64_t v18 = *(void *)(v2 + 32);
    *(void *)(v2 + 32) = 0LL;
    if (v18) {
      std::default_delete<llvm::MCRegisterInfo const>::operator()[abi:nn180100](v18, v8, v9, v10);
    }
    operator delete((void *)v2);
  }

void std::default_delete<TargetClauseAnalysis>::operator()[abi:nn180100](void **__p)
{
  uint64_t v2 = (char *)*__p;
  void *__p = 0LL;
  if (v2)
  {
    uint64_t v15 = (void **)(v2 + 224);
    std::vector<TargetBlock>::__destroy_vector::operator()[abi:nn180100](&v15);
    uint64_t v3 = *((void *)v2 + 25);
    if (v3)
    {
      uint64_t v4 = *((void *)v2 + 26);
      uint64_t v5 = (void *)*((void *)v2 + 25);
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = *(void **)(v4 - 24);
          if (v6)
          {
            *(void *)(v4 - 16) = v6;
            operator delete(v6);
          }

          v4 -= 32LL;
        }

        while (v4 != v3);
        uint64_t v5 = (void *)*((void *)v2 + 25);
      }

      *((void *)v2 + 26) = v3;
      operator delete(v5);
    }

    uint64_t v7 = (void *)*((void *)v2 + 22);
    if (v7)
    {
      do
      {
        uint64_t v8 = (void *)*v7;
        operator delete(v7);
        uint64_t v7 = v8;
      }

      while (v8);
    }

    uint64_t v9 = (void *)*((void *)v2 + 20);
    *((void *)v2 + 20) = 0LL;
    if (v9) {
      operator delete(v9);
    }
    unint64_t v10 = (void *)*((void *)v2 + 17);
    if (v10)
    {
      *((void *)v2 + 18) = v10;
      operator delete(v10);
    }

    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)(v2 + 96));
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)(v2 + 56));
    uint64_t v11 = (void *)*((void *)v2 + 3);
    if (v11)
    {
      *((void *)v2 + 4) = v11;
      operator delete(v11);
    }

    uint64_t v12 = *(void *)v2;
    if (*(void *)v2)
    {
      uint64_t v13 = *((void *)v2 + 1);
      uint64_t v14 = *(void **)v2;
      if (v13 != v12)
      {
        do
        {
          v13 -= 88LL;
          std::allocator<TargetClause>::destroy[abi:nn180100](v13);
        }

        while (v13 != v12);
        uint64_t v14 = *(void **)v2;
      }

      *((void *)v2 + 1) = v12;
      operator delete(v14);
    }

    operator delete(v2);
  }

  operator delete(__p);
}

void std::unique_ptr<llvm::MCContext>::reset[abi:nn180100](llvm::MCContext **a1, llvm::MCContext *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    llvm::MCContext::~MCContext(v3);
    operator delete(v4);
  }

void std::default_delete<llvm::MCRegisterInfo const>::operator()[abi:nn180100]( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
}

uint64_t GPUToolsPlatformLLVMShaderProfilerHelper::SetFileForAnalysis( GPUToolsPlatformLLVMShaderProfilerHelper *this, const char *a2, int a3, __sFILE *a4)
{
  uint64_t v8 = operator new(0xA0uLL);
  v8[1] = 0LL;
  v8[2] = 0LL;
  *uint64_t v8 = 0LL;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  v8[18] = a4;
  *((_BYTE *)v8 + 152) = 1;
  std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelperImpl>::reset[abi:nn180100]((uint64_t *)this, (uint64_t)v8);
  uint64_t v9 = *(void *)this;
  std::string::assign(*(std::string **)this, a2);
  int v10 = *(char *)(v9 + 23);
  if (v10 >= 0) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = *(void *)v9;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    uint64_t v12 = *(void *)(v9 + 8);
  }
  llvm::object::createBinary(&v21, v11, v12, 0LL, 1LL);
  if ((v23 & 1) != 0)
  {
    uint64_t v17 = 0LL;
    *(_BYTE *)(v9 + 152) = 0;
  }

  else
  {
    uint64_t v13 = v21;
    uint64_t v21 = 0LL;
    uint64_t v14 = *(void *)(v9 + 104);
    *(void *)(v9 + 104) = v13;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
    }
    uint64_t v15 = v22;
    uint64_t v22 = 0LL;
    uint64_t v16 = *(void *)(v9 + 112);
    *(void *)(v9 + 112) = v15;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
    }
    uint64_t v17 = GPUToolsPlatformLLVMShaderProfilerHelperImpl::_CompleteSetupForAnalysis( (GPUToolsPlatformLLVMShaderProfilerHelperImpl *)v9,  a3);
    if ((v23 & 1) == 0)
    {
      uint64_t v18 = v22;
      uint64_t v22 = 0LL;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
      }
    }
  }

  uint64_t v19 = v21;
  uint64_t v21 = 0LL;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  return v17;
}

uint64_t GPUToolsPlatformLLVMShaderProfilerHelperImpl::_CompleteSetupForAnalysis( GPUToolsPlatformLLVMShaderProfilerHelperImpl *this, int a2)
{
  int v4 = a2 + 10;
  std::string::basic_string[abi:nn180100]<0>(&v96, "g");
  std::to_string(&v74, v4);
  if ((v74.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unint64_t v5 = &v74;
  }
  else {
    unint64_t v5 = (std::string *)v74.__r_.__value_.__r.__words[0];
  }
  if ((v74.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v74.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v74.__r_.__value_.__l.__size_;
  }
  std::string::append(&v96, (const std::string::value_type *)v5, size);
  uint64_t v7 = (_DWORD *)*((void *)this + 13);
  if (v7 && (v7[2] - 24) > 0xFFFFFFF0)
  {
    __int128 v94 = 0u;
    __int128 v95 = 0u;
    if (a2 <= 4) {
      uint64_t v8 = 28LL;
    }
    else {
      uint64_t v8 = 29LL;
    }
    __int128 v93 = 0uLL;
    llvm::Triple::setArch(&v93, v8, 0LL);
    (*(void (**)(std::string *__return_ptr, _DWORD *))(*(void *)v7 + 384LL))(&v74, v7);
    llvm::SubtargetFeatures::getString((llvm::SubtargetFeatures *)&v74);
    v80[0] = (void **)&v74;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v80);
    v89[0] = 0LL;
    v89[1] = 0LL;
    uint64_t v90 = 0LL;
    uint64_t v9 = llvm::TargetRegistry::lookupTarget(&v93, v89);
    *((void *)this + 3) = v9;
    if (!v9) {
      goto LABEL_59;
    }
    int v10 = *(void (**)(void))(v9 + 288);
    if (v10)
    {
      v10();
      uint64_t v9 = *((void *)this + 3);
    }

    if ((SBYTE7(v94) & 0x80u) == 0) {
      uint64_t v11 = &v93;
    }
    else {
      uint64_t v11 = (__int128 *)v93;
    }
    if ((SBYTE7(v94) & 0x80u) == 0) {
      uint64_t v12 = BYTE7(v94);
    }
    else {
      uint64_t v12 = *((void *)&v93 + 1);
    }
    MCRegInfo = llvm::Target::createMCRegInfo(*(uint64_t (**)(void **))(v9 + 80), (uint64_t)v11, v12);
    uint64_t v17 = *((void *)this + 4);
    *((void *)this + 4) = MCRegInfo;
    if (v17)
    {
      std::default_delete<llvm::MCRegisterInfo const>::operator()[abi:nn180100](v17, v14, v15, v16);
      MCRegInfo = (uint64_t (*)(void **))*((void *)this + 4);
    }

    if (MCRegInfo)
    {
      llvm::MCTargetOptions::MCTargetOptions((llvm::MCTargetOptions *)v80);
      if ((SBYTE7(v94) & 0x80u) == 0) {
        uint64_t v18 = &v93;
      }
      else {
        uint64_t v18 = (__int128 *)v93;
      }
      if ((SBYTE7(v94) & 0x80u) == 0) {
        uint64_t v19 = BYTE7(v94);
      }
      else {
        uint64_t v19 = *((void *)&v93 + 1);
      }
      uint64_t MCAsmInfo = llvm::Target::createMCAsmInfo( *(uint64_t (**)(uint64_t, void **, uint64_t))(*((void *)this + 3) + 48LL),  *((void *)this + 4),  (uint64_t)v18,  v19,  (uint64_t)v80);
      uint64_t v21 = *((void *)this + 5);
      *((void *)this + 5) = MCAsmInfo;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
      if ((SBYTE7(v94) & 0x80u) == 0) {
        uint64_t v22 = &v93;
      }
      else {
        uint64_t v22 = (__int128 *)v93;
      }
      if ((SBYTE7(v94) & 0x80u) == 0) {
        uint64_t v23 = BYTE7(v94);
      }
      else {
        uint64_t v23 = *((void *)&v93 + 1);
      }
      if ((v96.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v24 = &v96;
      }
      else {
        unint64_t v24 = (std::string *)v96.__r_.__value_.__r.__words[0];
      }
      if ((v96.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v25 = v96.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t v25 = v96.__r_.__value_.__l.__size_;
      }
      if ((v92 & 0x80u) == 0) {
        uint64_t v26 = v91;
      }
      else {
        uint64_t v26 = (void **)v91[0];
      }
      if ((v92 & 0x80u) == 0) {
        uint64_t v27 = v92;
      }
      else {
        uint64_t v27 = (uint64_t)v91[1];
      }
      uint64_t MCSubtargetInfo = llvm::Target::createMCSubtargetInfo( *(uint64_t (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t))(*((void *)this + 3)
                                                                                                + 88LL),
                          (uint64_t)v22,
                          v23,
                          (uint64_t)v24,
                          v25,
                          (uint64_t)v26,
                          v27);
      uint64_t v29 = *((void *)this + 8);
      *((void *)this + 8) = MCSubtargetInfo;
      if (v29)
      {
        (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
        uint64_t MCSubtargetInfo = *((void *)this + 8);
      }

      if (MCSubtargetInfo && (uint64_t v30 = *((void *)this + 5)) != 0)
      {
        char v78 = 0;
        __int128 v79 = 0u;
        v74.__r_.__value_.__l.__size_ = 0LL;
        LODWORD(v74.__r_.__value_.__r.__words[2]) = 0;
        bzero(v75, 0x329uLL);
        v75[51] = 0u;
        char v77 = 0;
        uint64_t v76 = 0LL;
        uint64_t v31 = *((void *)this + 4);
        uint64_t v32 = (llvm::MCContext *)operator new(0x800uLL);
        llvm::MCContext::MCContext(v32, &v93, v30, v31, MCSubtargetInfo, 0LL, 0LL, 1LL, 0LL, 0LL);
        std::unique_ptr<llvm::MCContext>::reset[abi:nn180100]((llvm::MCContext **)this + 12, v32);
        uint64_t inited = llvm::MCObjectFileInfo::initMCObjectFileInfo( (llvm::MCObjectFileInfo *)&v74,  *((llvm::MCContext **)this + 12),  0,  0);
        uint64_t v34 = *(uint64_t (**)(uint64_t))(*((void *)this + 3) + 64LL);
        if (v34) {
          uint64_t v35 = v34(inited);
        }
        else {
          uint64_t v35 = 0LL;
        }
        unsigned int v37 = (void *)*((void *)this + 6);
        *((void *)this + 6) = v35;
        if (v37)
        {
          operator delete(v37);
          uint64_t v35 = *((void *)this + 6);
        }

        if (!v35) {
          goto LABEL_116;
        }
        unint64_t v38 = *(uint64_t (**)(void))(*((void *)this + 3) + 72LL);
        if (v38) {
          uint64_t v39 = v38();
        }
        else {
          uint64_t v39 = 0LL;
        }
        uint64_t v40 = *((void *)this + 7);
        *((void *)this + 7) = v39;
        if (v40)
        {
          (*(void (**)(uint64_t))(*(void *)v40 + 8LL))(v40);
          uint64_t v39 = *((void *)this + 7);
        }

        if (!v39) {
          goto LABEL_116;
        }
        uint64_t v41 = *(uint64_t (**)(void))(*((void *)this + 3) + 128LL);
        if (v41) {
          uint64_t v42 = v41();
        }
        else {
          uint64_t v42 = 0LL;
        }
        uint64_t v43 = *((void *)this + 10);
        *((void *)this + 10) = v42;
        if (v43)
        {
          (*(void (**)(uint64_t))(*(void *)v43 + 8LL))(v43);
          uint64_t v42 = *((void *)this + 10);
        }

        if (!v42) {
          goto LABEL_116;
        }
        uint64_t v44 = *((void *)this + 5);
        uint64_t v45 = *((void *)this + 6);
        uint64_t v46 = *(unsigned int *)(v44 + 176);
        uint64_t v48 = *((void *)this + 3);
        uint64_t v47 = *((void *)this + 4);
        float v49 = *(void (**)(void))(v48 + 288);
        if (v49) {
          v49();
        }
        float v50 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 136);
        if (v50) {
          uint64_t v51 = v50(&v93, v46, v44, v45, v47);
        }
        else {
          uint64_t v51 = 0LL;
        }
        uint64_t v52 = *((void *)this + 9);
        *((void *)this + 9) = v51;
        if (v52)
        {
          (*(void (**)(uint64_t))(*(void *)v52 + 8LL))(v52);
          uint64_t v51 = *((void *)this + 9);
        }

        if (v51) {
          *(_BYTE *)(v51 + 50) = 1;
        }
        unint64_t v53 = *(uint64_t (**)(void))(*((void *)this + 3) + 256LL);
        if (v53) {
          uint64_t v54 = v53(*((void *)this + 6));
        }
        else {
          uint64_t v54 = 0LL;
        }
        uint64_t v55 = *((void *)this + 11);
        *((void *)this + 11) = v54;
        if (v55)
        {
          (*(void (**)(uint64_t))(*(void *)v55 + 8LL))(v55);
          uint64_t v54 = *((void *)this + 11);
        }

        if (!v54) {
          goto LABEL_116;
        }
        int v56 = *(uint64_t (**)(void, void, void))(*((void *)this + 3) + 264LL);
        if (v56) {
          uint64_t v57 = v56(*((void *)this + 6), *((void *)this + 8), *((void *)this + 12));
        }
        else {
          uint64_t v57 = 0LL;
        }
        uint64_t v58 = *((void *)this + 17);
        *((void *)this + 17) = v57;
        if (v58)
        {
          (*(void (**)(uint64_t))(*(void *)v58 + 8LL))(v58);
          uint64_t v57 = *((void *)this + 17);
        }

        if (!v57) {
          goto LABEL_116;
        }
        uint64_t v59 = (*(uint64_t (**)(_DWORD *))(*(void *)v7 + 344LL))(v7);
        uint64_t v61 = v60;
        uint64_t v62 = (*(uint64_t (**)(_DWORD *))(*(void *)v7 + 352LL))(v7);
        uint64_t v63 = v62;
        uint64_t v65 = v64;
        uint64_t v72 = v59;
        uint64_t v73 = v61;
        if (v61 != v64 || v59 != v62)
        {
          do
          {
            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v61 + 192LL))(v61, v59)
              && (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v73 + 160LL))(v73, v72)
              && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v73 + 216LL))(v73, v72) & 1) == 0)
            {
              llvm::agxclauseanalyzer::createObjInput(&v97, *((void *)this + 10), v7, &v72);
              char v66 = v98;
              if ((v98 & 1) == 0)
              {
                uint64_t v67 = v97;
                uint64_t v97 = 0LL;
                uint64_t v68 = *((void *)this + 15);
                *((void *)this + 15) = v67;
                if (!v68) {
                  break;
                }
                (*(void (**)(uint64_t))(*(void *)v68 + 8LL))(v68);
              }

              uint64_t v69 = v97;
              uint64_t v97 = 0LL;
              if (v69) {
                (*(void (**)(uint64_t))(*(void *)v69 + 8LL))(v69);
              }
              if ((v66 & 1) == 0) {
                break;
              }
            }

            (*(void (**)(uint64_t, uint64_t *))(*(void *)v73 + 128LL))(v73, &v72);
            uint64_t v59 = v72;
            uint64_t v61 = v73;
          }

          while (v73 != v65 || v72 != v63);
        }

        if (*((void *)this + 15))
        {
          uint64_t v36 = 1LL;
        }

        else
        {
LABEL_116:
          uint64_t v36 = 0LL;
          *((_BYTE *)this + 152) = 0;
        }

        llvm::MCObjectFileInfo::~MCObjectFileInfo((llvm::MCObjectFileInfo *)&v74);
      }

      else
      {
        uint64_t v36 = 0LL;
        *((_BYTE *)this + 152) = 0;
      }

      v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v74);
      if (v87 < 0) {
        operator delete(__p);
      }
      if (v85 < 0) {
        operator delete(v84);
      }
      if (v83 < 0) {
        operator delete(v82);
      }
      if (v81 < 0) {
        operator delete(v80[2]);
      }
    }

    else
    {
LABEL_59:
      uint64_t v36 = 0LL;
      *((_BYTE *)this + 152) = 0;
    }

    if (SHIBYTE(v90) < 0) {
      operator delete(v89[0]);
    }
    if (SBYTE7(v94) < 0) {
      operator delete((void *)v93);
    }
  }

  else
  {
    uint64_t v36 = 0LL;
    *((_BYTE *)this + 152) = 0;
  }

  return v36;
}

uint64_t (*llvm::Target::createMCRegInfo( uint64_t (*a1)(void **), uint64_t a2, uint64_t a3))(void **)
{
  uint64_t v3 = a1;
  if (a1)
  {
    __int16 v6 = 261;
    v5[0] = a2;
    v5[1] = a3;
    llvm::Triple::Triple(__p, v5);
    uint64_t v3 = (uint64_t (*)(void **))v3(__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }

  return v3;
}

uint64_t llvm::Target::createMCAsmInfo( uint64_t (*a1)(uint64_t, void **, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1) {
    return 0LL;
  }
  __int16 v11 = 261;
  v10[0] = a3;
  v10[1] = a4;
  llvm::Triple::Triple(__p, v10);
  uint64_t v8 = a1(a2, __p, a5);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  return v8;
}

uint64_t llvm::Target::createMCSubtargetInfo( uint64_t (*a1)(void **, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a1) {
    return 0LL;
  }
  __int16 v15 = 261;
  v14[0] = a2;
  v14[1] = a3;
  llvm::Triple::Triple(__p, v14);
  uint64_t v12 = a1(__p, a4, a5, a6, a7);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  return v12;
}

llvm::MemoryBuffer *GPUToolsPlatformLLVMShaderProfilerHelper::SetBinaryForAnalysis( GPUToolsPlatformLLVMShaderProfilerHelper *this, const char *a2, uint64_t a3, int a4)
{
  uint64_t v8 = operator new(0xA0uLL);
  v8[1] = 0LL;
  v8[2] = 0LL;
  *uint64_t v8 = 0LL;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  v8[18] = 0LL;
  *((_BYTE *)v8 + 152) = 1;
  std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelperImpl>::reset[abi:nn180100]((uint64_t *)this, (uint64_t)v8);
  uint64_t v9 = *(void *)this;
  llvm::MemoryBuffer::getMemBuffer(&v17, a2, a3, "", 0LL, 0LL);
  llvm::MemoryBuffer::getMemBufferRef(v17);
  llvm::object::createBinary(&v18, &v16, 0LL, 1LL);
  if ((v19 & 1) != 0)
  {
    *(_BYTE *)(v9 + 152) = 0;
  }

  else
  {
    __int16 v11 = v17;
    uint64_t v10 = v18;
    char v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v12 = *(void *)(v9 + 104);
    *(void *)(v9 + 104) = v10;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    uint64_t v13 = *(void *)(v9 + 112);
    *(void *)(v9 + 112) = v11;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
    }
    GPUToolsPlatformLLVMShaderProfilerHelperImpl::_CompleteSetupForAnalysis( (GPUToolsPlatformLLVMShaderProfilerHelperImpl *)v9,  a4);
  }

  uint64_t v14 = v18;
  uint64_t v18 = 0LL;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  uint64_t result = v17;
  char v17 = 0LL;
  if (result) {
    return (llvm::MemoryBuffer *)(*(uint64_t (**)(llvm::MemoryBuffer *))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t llvm::raw_ostream::SetUnbuffered(llvm::raw_ostream *this)
{
  if (*((void *)this + 4) != *((void *)this + 2)) {
    llvm::raw_ostream::flush_nonempty(this);
  }
  return llvm::raw_ostream::SetBufferAndMode(this, 0LL, 0LL, 0LL);
}

void *GPUToolsPlatformLLVMShaderProfilerHelperImpl::_DumpInstructionsToOStream( void *this, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5 = (void *)this[15];
  __int16 v15 = v5;
  uint64_t v16 = a3;
  if (a3 != a4)
  {
    uint64_t v8 = this;
    this = v5;
    while (1)
    {
      (*(void (**)(void **__return_ptr, void *, uint64_t))(*this + 24LL))(&v17, this, a3);
      uint64_t v9 = v17;
      uint64_t v10 = *v17;
      char v17 = &off_5900D0;
      uint64_t v18 = "%04x";
      uint64_t v19 = v10;
      __int16 v11 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<(a2, &v17);
      uint64_t v12 = (_WORD *)*((void *)v11 + 4);
      if (*((void *)v11 + 3) - (void)v12 > 1uLL)
      {
        *uint64_t v12 = 8250;
        *((void *)v11 + 4) += 2LL;
      }

      else
      {
        llvm::raw_ostream::write(v11, ": ", 2uLL);
      }

      uint64_t v13 = v8[9];
      if (v13) {
        (*(void (**)(uint64_t, void *, void, const char *, void, void, llvm::raw_ostream *))(*(void *)v13 + 32LL))( v13,  v9 + 3,  0LL,  "",  0LL,  v8[8],  a2);
      }
      uint64_t v14 = (_BYTE *)*((void *)a2 + 4);
      if (*((_BYTE **)a2 + 3) == v14)
      {
        llvm::raw_ostream::write(a2, "\n", 1uLL);
      }

      else
      {
        *uint64_t v14 = 10;
        ++*((void *)a2 + 4);
      }

      llvm::agxclauseanalyzer::AnalyzerInput::InstIteratorImpl<llvm::agxclauseanalyzer::AnalyzerInput>::operator++(&v15);
      this = v15;
      a3 = v16;
      if (v15 == v5 && v16 == a4) {
        return this;
      }
    }

    this = (void *)fwrite("Unexpected instruction found", 0x1CuLL, 1uLL, __stderrp);
    if (v9) {
      return (void *)(*(uint64_t (**)(void *))(*v9 + 8LL))(v9);
    }
  }

  return this;
}

unsigned __int8 *std::remove[abi:nn180100]<std::__wrap_iter<char *>,char>( const void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t result = (unsigned __int8 *)memchr(a1, (char)*a3, a2 - (_BYTE *)a1);
  if (!result) {
    uint64_t result = a2;
  }
  __int16 v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      int v8 = *v6;
      if (v8 != *a3) {
        *result++ = v8;
      }
      ++v6;
    }

    while (v6 != a2);
  }

  return result;
}

uint64_t llvm::format_object<unsigned long long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16));
}

void *GPUToolsPlatformLLVMShaderProfilerHelperImpl::GetTargetClauseAnalysis( GPUToolsPlatformLLVMShaderProfilerHelperImpl *this)
{
  uint64_t v1 = (void *)*((void *)this + 16);
  if (v1) {
    return v1;
  }
  uint64_t v241 = operator new(8uLL);
  uint64_t v3 = (char *)operator new(0x108uLL);
  *(_OWORD *)uint64_t v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *((void *)v3 + 6) = this;
  *(_OWORD *)(v3 + 56) = 0u;
  uint64_t v4 = (uint64_t)(v3 + 56);
  *(_OWORD *)(v3 + 72) = 0u;
  *((_DWORD *)v3 + 22) = 1065353216;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_DWORD *)v3 + 32) = 1065353216;
  *(_OWORD *)(v3 + 136) = 0u;
  uint64_t v246 = (std::vector<unsigned int> *)(v3 + 136);
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *((void *)v3 + 23) = 0LL;
  *(_OWORD *)(v3 + 200) = 0u;
  uint64_t v245 = (uint64_t *)(v3 + 200);
  *((_DWORD *)v3 + 48) = 1065353216;
  *((void *)v3 + 32) = 0LL;
  *((_DWORD *)v3 + 62) = 0;
  *(_OWORD *)(v3 + 232) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  memset(v263, 0, sizeof(v263));
  int v264 = 1065353216;
  unint64_t v5 = *((void *)this + 15);
  __int16 v6 = this;
  uint64_t v7 = *(void *)(v5 + 16);
  __int128 v265 = v5;
  id v242 = v6;
  if (v7)
  {
    unint64_t v8 = v5;
    do
    {
      (*(void (**)(std::vector<unsigned int>::value_type *__return_ptr))(*(void *)v8 + 24LL))(__x);
      if ((__x[2] & 1) != 0)
      {
        if (*(void *)__x) {
          (*(void (**)(void))(**(void **)__x + 8LL))(*(void *)__x);
        }
      }

      else
      {
        uint64_t v9 = *((void *)v3 + 6);
        if ((*(_BYTE *)(**(void **)(v9 + 48) + 48LL * *(unsigned int *)(*(void *)__x + 24LL) + 9) & 4) != 0
          && (*(unsigned int (**)(void, uint64_t, void, void, std::vector<unsigned int>::value_type *))(**(void **)(v9 + 56) + 104LL))( *(void *)(v9 + 56),  *(void *)__x + 24LL,  **(void **)__x,  *(void *)(*(void *)__x + 16LL),  __x))
        {
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>( (uint64_t)v263,  *(unint64_t *)__x,  *(uint64_t *)__x);
        }
      }

      llvm::agxclauseanalyzer::AnalyzerInput::InstIteratorImpl<llvm::agxclauseanalyzer::AnalyzerInput>::operator++(&v265);
      unint64_t v8 = v265;
    }

    while ((void)v265 != v5 || *((void *)&v265 + 1) != v7);
    __int16 v6 = (GPUToolsPlatformLLVMShaderProfilerHelperImpl *)*((void *)v3 + 6);
    unint64_t v5 = *((void *)v6 + 15);
  }

  uint64_t v11 = *((void *)v6 + 11);
  memset(v269, 0, sizeof(v269));
  uint64_t v12 = *(void *)(v5 + 16);
  v268[0] = v5;
  v268[1] = 0LL;
  v268[2] = v5;
  v268[3] = v12;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void *, void, void *))(*(void *)v11 + 48LL))( &v272,  v11,  v268,  *((void *)v6 + 7),  v269);
  unint64_t v13 = *((void *)v3 + 8);
  float v14 = 0.0;
  float v15 = 0.0;
  if (v13) {
    float v15 = (float)*((unint64_t *)v3 + 10) / (float)v13;
  }
  float v16 = fmaxf(v15, 0.25);
  *((float *)v3 + 22) = v16;
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( v4,  vcvtps_u32_f32((float)(unint64_t)(8LL * *(void *)(v5 + 16)) / v16));
  size_t v17 = 8LL * *(void *)(v5 + 16);
  memset(__x, 0, sizeof(__x));
  LODWORD(v277) = 1065353216;
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( (uint64_t)__x,  v17);
  if (*(void *)&__x[2]) {
    float v14 = (float)*(unint64_t *)&__x[6] / (float)*(unint64_t *)&__x[2];
  }
  LODWORD(v277) = fmaxf(v14, 0.25);
  __int128 v265 = 0u;
  __int128 v266 = 0u;
  float v267 = 1.0;
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( (uint64_t)&v265,  (v273 - v272) >> 5);
  if (*((void *)&v265 + 1)) {
    float v18 = (float)*((unint64_t *)&v266 + 1) / (float)*((unint64_t *)&v265 + 1);
  }
  else {
    float v18 = 0.0;
  }
  float v267 = fmaxf(v18, 0.25);
  uint64_t v19 = v272;
  uint64_t v243 = v273;
  __int128 v259 = (float *)v3;
  id v254 = v3 + 56;
  if (v272 != v273)
  {
    int v20 = 0;
    uint64_t v247 = v11;
    unint64_t v248 = v5;
    do
    {
      unint64_t v21 = *(void *)(v19 + 8);
      uint64_t v244 = v19;
      unint64_t v22 = *(void *)(v19 + 24);
      unint64_t v249 = v22;
      while (v21 < v22
           && !std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>( &v265,  v21))
      {
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long>( (uint64_t)&v265,  v21,  v21);
        (*(void (**)(unint64_t *__return_ptr, uint64_t, unint64_t, unint64_t, unint64_t, void))(*(void *)v11 + 40LL))( &v274,  v11,  v5,  v21,  v5,  *(void *)(v5 + 16));
        char v23 = v275;
        if ((v275 & 1) == 0)
        {
          char v251 = v275;
          unint64_t v252 = v21;
          unint64_t v24 = (llvm::agxclauseanalyzer::InstrClause ***)v274;
          unint64_t v274 = 0LL;
          uint64_t v26 = v24[1];
          uint64_t v25 = v24[2];
          __int128 v250 = (llvm::agxclauseanalyzer::InstrStream *)v24;
          uint64_t v256 = v25;
          if (v26 != v25)
          {
            while (1)
            {
              uint64_t v27 = *v26;
              unint64_t Offset = llvm::agxclauseanalyzer::InstrClause::getOffset(*v26);
              unint64_t v270 = Offset;
              unint64_t SizeInBytes = llvm::agxclauseanalyzer::InstrClause::getSizeInBytes(v27);
              uint64_t v30 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>( __x,  Offset);
              if (!v30) {
                break;
              }
              if (v30[3] < SizeInBytes)
              {
                v30[3] = SizeInBytes;
                goto LABEL_34;
              }

LABEL_249:
          if (!(*(void *)&prime >> 61))
          {
            uint64_t v199 = operator new(8LL * *(void *)&prime);
            uint64_t v200 = (void *)v198[20];
            v198[20] = (int8x8_t)v199;
            if (v200) {
              operator delete(v200);
            }
            uint64_t v201 = 0LL;
            v198[21] = prime;
            do
              *(void *)(*(void *)&v198[20] + 8 * v201++) = 0LL;
            while (*(void *)&prime != v201);
            uint64_t v202 = (void *)*v258;
            if (!*v258) {
              goto LABEL_277;
            }
            unint64_t v203 = v202[1];
            uint8x8_t v204 = (uint8x8_t)vcnt_s8(prime);
            v204.i16[0] = vaddlv_u8(v204);
            if (v204.u32[0] > 1uLL)
            {
              if (v203 >= *(void *)&prime) {
                v203 %= *(void *)&prime;
              }
            }

            else
            {
              v203 &= *(void *)&prime - 1LL;
            }

            *(void *)(*(void *)&v198[20] + 8 * v203) = v258;
            uint64_t v208 = (void *)*v202;
            if (!*v202)
            {
LABEL_277:
              unint64_t v187 = (unint64_t)prime;
              goto LABEL_278;
            }

            while (2)
            {
              unint64_t v209 = v208[1];
              if (v204.u32[0] > 1uLL)
              {
                if (v209 >= *(void *)&prime) {
                  v209 %= *(void *)&prime;
                }
              }

              else
              {
                v209 &= *(void *)&prime - 1LL;
              }

              if (v209 == v203)
              {
LABEL_273:
                unint64_t v209 = v203;
              }

              else
              {
                int8x8_t v210 = v198[20];
                if (*(void *)(*(void *)&v210 + 8 * v209))
                {
                  *uint64_t v202 = *v208;
                  *uint64_t v208 = **(void **)(*(void *)&v198[20] + 8 * v209);
                  **(void **)(*(void *)&v198[20] + 8 * v209) = v208;
                  uint64_t v208 = v202;
                  goto LABEL_273;
                }

                *(void *)(*(void *)&v210 + 8 * v209) = v202;
              }

              uint64_t v202 = v208;
              uint64_t v208 = (void *)*v208;
              unint64_t v203 = v209;
              if (!v208) {
                goto LABEL_277;
              }
              continue;
            }
          }

LABEL_342:
          std::__throw_bad_array_new_length[abi:nn180100]();
        }

LABEL_278:
        if ((v187 & (v187 - 1)) != 0)
        {
          if (v187 <= v141) {
            unint64_t v140 = v141 % v187;
          }
          else {
            unint64_t v140 = v141;
          }
        }

        else
        {
          unint64_t v140 = ((_DWORD)v187 - 1) & v141;
        }
      }

      uint64_t v211 = *((void *)v259 + 20);
      uint64_t v212 = *(void **)(v211 + 8 * v140);
      if (v212)
      {
        *uint64_t v190 = *v212;
        unint64_t v140 = v185;
        uint64_t v139 = v262;
        goto LABEL_291;
      }

      *uint64_t v190 = *v258;
      *uint64_t v258 = v190;
      *(void *)(v211 + 8 * v140) = v258;
      unint64_t v140 = v185;
      uint64_t v139 = v262;
      if (*v190)
      {
        unint64_t v213 = *(void *)(*v190 + 8LL);
        if ((v187 & (v187 - 1)) != 0)
        {
          if (v213 >= v187) {
            v213 %= v187;
          }
        }

        else
        {
          v213 &= v187 - 1;
        }

        uint64_t v212 = (void *)(*((void *)v259 + 20) + 8 * v213);
LABEL_291:
        *uint64_t v212 = v190;
      }

      uint64_t v3 = (char *)v259;
      ++*((void *)v259 + 23);
LABEL_293:
      v190[3] = v145;
      *((_DWORD *)v190 + 8) = v186;
      if (v145 <= *((void *)v3 + 32)) {
        v246->__begin_[v145] = v141++;
      }
      unint64_t v142 = *(void *)(v144 + 16) + v145;
LABEL_296:
      llvm::agxclauseanalyzer::AnalyzerInput::InstIteratorImpl<llvm::agxclauseanalyzer::AnalyzerInput>::operator++(&v272);
      uint64_t v143 = v272;
      if (v272 == v139 && v273 == v140) {
        goto LABEL_325;
      }
    }
  }

  unint64_t v142 = 0LL;
LABEL_325:
  v246->__begin_[v142] = v141;
  uint64_t v226 = *((void *)&v265 + 1);
  if (*(_DWORD *)(*((void *)&v265 + 1) - 48LL) == -1)
  {
    std::vector<TargetBlock>::__base_destruct_at_end[abi:nn180100]((uint64_t)&v265, *((void *)&v265 + 1) - 128LL);
    uint64_t v226 = *((void *)&v265 + 1);
  }

  __int128 v227 = *((_OWORD *)v3 + 14);
  uint64_t v228 = v266;
  *((void *)v3 + 28) = v265;
  *((void *)v3 + 29) = v226;
  __int128 v265 = v227;
  uint64_t v229 = *((void *)v3 + 30);
  *((void *)v3 + 30) = v228;
  *(void *)&__int128 v266 = v229;
  uint64_t v230 = *((void *)v3 + 26);
  uint64_t v231 = v242;
  if (*((void *)v3 + 25) != v230)
  {
    uint64_t v232 = *(void **)(v230 - 24);
    if (v232 == *(void **)(v230 - 16))
    {
      uint64_t v233 = v230 - 32;
      if (v232)
      {
        *(void *)(v230 - 16) = v232;
        operator delete(v232);
      }

      *((void *)v3 + 26) = v233;
      uint64_t v231 = v242;
    }
  }

  *(void *)__x = &v265;
  std::vector<TargetBlock>::__destroy_vector::operator()[abi:nn180100]((void ***)__x);
  uint64_t v234 = *((void *)v3 + 25);
  uint64_t v235 = *((void *)v3 + 26);
  while (v234 != v235)
  {
    unsigned int v236 = *(_DWORD *)v234;
    if (*(_DWORD *)v234)
    {
      uint64_t v237 = *(void *)(v234 + 8);
      for (uint64_t i = *(void *)(v234 + 16); v237 != i; v237 += 16LL)
        *(double *)(v237 + 8) = *(double *)(v237 + 8) / (double)v236;
    }

    v234 += 32LL;
  }

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v263);
  uint64_t v1 = v241;
  *uint64_t v241 = v3;
  unint64_t v239 = (void **)*((void *)v231 + 16);
  *((void *)v231 + 16) = v241;
  if (v239)
  {
    std::default_delete<TargetClauseAnalysis>::operator()[abi:nn180100](v239);
    return (void *)*((void *)v231 + 16);
  }

  return v1;
}

void ***GPUToolsPlatformLLVMShaderProfilerHelper::ShaderInstructionInfoFromBinary( void ***this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *this = 0LL;
  this[1] = 0LL;
  this[2] = 0LL;
  uint64_t v4 = *(void ****)(a2 + 120);
  uint64_t v41 = v4;
  uint64_t v42 = a3;
  if (a3 == a4) {
    return this;
  }
  uint64_t v5 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = this;
  unint64_t v8 = 0LL;
  this = v4;
  uint64_t v35 = v4;
  while (1)
  {
    ((void (*)(char **__return_ptr, void ***, uint64_t))(*this)[3])(&v43, this, a3);
    uint64_t v9 = v43;
    if ((v44 & 1) != 0) {
      break;
    }
    if (v43)
    {
      int v10 = (*(uint64_t (**)(void, char *))(**(void **)(v6 + 88) + 56LL))(*(void *)(v6 + 88), v43);
      int v11 = (*(uint64_t (**)(void, char *))(**(void **)(v6 + 88) + 64LL))(*(void *)(v6 + 88), v9);
      __p[0] = 0LL;
      __p[1] = 0LL;
      uint64_t v40 = 0LL;
      int v44 = 0;
      char v48 = 0;
      uint64_t v49 = 0LL;
      int v50 = 1;
      uint64_t v46 = 0LL;
      uint64_t v47 = 0LL;
      uint64_t v45 = 0LL;
      uint64_t v51 = (std::string *)__p;
      llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)&v43);
      unint64_t v38 = *(void **)v9;
      uint64_t v12 = *(void *)(v6 + 72);
      if (v12) {
        (*(void (**)(uint64_t, char *, void, const char *, void, void, char **))(*(void *)v12 + 32LL))( v12,  v9 + 24,  0LL,  "",  0LL,  *(void *)(v6 + 64),  &v43);
      }
      unint64_t v13 = v51;
      if ((char)v51->__r_.__value_.__s.__size_ < 0)
      {
        float v15 = (std::string *)v51->__r_.__value_.__r.__words[0];
        std::string::size_type size = v51->__r_.__value_.__l.__size_;
        if (!size) {
          goto LABEL_17;
        }
      }

      else
      {
        std::string::size_type size = v51->__r_.__value_.__s.__size_;
        float v15 = v51;
        if (!v51->__r_.__value_.__s.__size_) {
          goto LABEL_17;
        }
      }

      float v16 = v15;
      while (v16->__r_.__value_.__s.__data_[0] == 9)
      {
        float v16 = (std::string *)((char *)v16 + 1);
        if (!--size) {
          goto LABEL_17;
        }
      }

id GTShaderProfilerAnalyzeBinaryLLVM(void *a1, uint64_t a2, void *a3)
{
  id v7 = a1;
  id v8 = a3;
  uint64_t v9 = v8;
  __int128 v381 = v7;
  if (a2 > 0x7FFFFFFE)
  {
    int v10 = 0LL;
    goto LABEL_615;
  }

  uint64_t v379 = v8;
  if (GTShaderProfilerAnalyzeBinaryLLVM::onceToken != -1) {
    dispatch_once(&GTShaderProfilerAnalyzeBinaryLLVM::onceToken, &__block_literal_global_8438);
  }
  *(_OWORD *)os_signpost_id_t v420 = 0u;
  __int128 v421 = 0u;
  __int128 v418 = 0u;
  __int128 v419 = 0u;
  __int128 v416 = 0u;
  *(_OWORD *)__p = 0u;
  __int128 v415 = 0u;
  id v11 = v7;
  LOWORD(v453) = 257;
  llvm::MemoryBuffer::getMemBufferCopy(&v441, [v11 bytes], objc_msgSend(v11, "length"), v452);
  llvm::MemoryBuffer::getMemBufferRef(v441);
  llvm::object::createBinary(v466, &v442, 0LL, 1LL);
  if ((v467 & 1) != 0)
  {
    int v40 = 0;
    goto LABEL_149;
  }

  uint64_t v12 = *(void *)v466;
  *(void *)uint64_t v466 = 0LL;
  unint64_t v13 = v441;
  uint64_t v441 = 0LL;
  uint64_t v14 = v415;
  *(void *)&__int128 v415 = v12;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  uint64_t v15 = *((void *)&v415 + 1);
  *((void *)&v415 + 1) = v13;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  std::string::basic_string[abi:nn180100]<0>(&v440, "g");
  std::to_string((std::string *)v452, a2 + 10);
  if (v452[23] >= 0) {
    float v16 = v452;
  }
  else {
    float v16 = *(const std::string::value_type **)v452;
  }
  if (v452[23] >= 0) {
    std::string::size_type v17 = v452[23];
  }
  else {
    std::string::size_type v17 = *(void *)&v452[8];
  }
  std::string::append(&v440, v16, v17);
  if ((v452[23] & 0x80000000) != 0) {
    operator delete(*(void **)v452);
  }
  uint64_t v18 = v415;
  uint64_t v414 = v18;
  if (v18)
  {
    __int128 v464 = 0u;
    __int128 v465 = 0u;
    __int128 v463 = 0u;
    llvm::Triple::setArch(&v463, 28LL, 0LL);
    (*(void (**)(_BYTE *__return_ptr))(*(void *)v414 + 384LL))(v452);
    llvm::SubtargetFeatures::getString((llvm::SubtargetFeatures *)v452);
    *(void *)uint64_t v425 = v452;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)v425);
    v436[0] = 0LL;
    v436[1] = 0LL;
    uint64_t v437 = 0LL;
    uint64_t v19 = llvm::TargetRegistry::lookupTarget(&v463, v436);
    uint64_t v413 = v19;
    if (!v19) {
      goto LABEL_68;
    }
    int v20 = *(void (**)(void))(v19 + 288);
    if (v20)
    {
      v20();
      uint64_t v19 = v413;
    }

    if ((SBYTE7(v464) & 0x80u) == 0) {
      unint64_t v21 = &v463;
    }
    else {
      unint64_t v21 = (__int128 *)v463;
    }
    if ((SBYTE7(v464) & 0x80u) == 0) {
      uint64_t v22 = BYTE7(v464);
    }
    else {
      uint64_t v22 = *((void *)&v463 + 1);
    }
    MCRegInfo = llvm::Target::createMCRegInfo(*(uint64_t (**)(void **))(v19 + 80), (uint64_t)v21, v22);
    uint64_t v27 = v416;
    *(void *)&__int128 v416 = MCRegInfo;
    if (v27)
    {
      std::default_delete<llvm::MCRegisterInfo const>::operator()[abi:nn180100](v27, v24, v25, v26);
      MCRegInfo = (uint64_t (*)(void **))v416;
    }

    if (!MCRegInfo)
    {
LABEL_68:
      int v40 = 0;
LABEL_141:
      if (SHIBYTE(v437) < 0) {
        operator delete(v436[0]);
      }
      if (SBYTE7(v464) < 0) {
        operator delete((void *)v463);
      }
      goto LABEL_147;
    }

    llvm::MCTargetOptions::MCTargetOptions((llvm::MCTargetOptions *)v425);
    if ((SBYTE7(v464) & 0x80u) == 0) {
      uint64_t v28 = &v463;
    }
    else {
      uint64_t v28 = (__int128 *)v463;
    }
    if ((SBYTE7(v464) & 0x80u) == 0) {
      uint64_t v29 = BYTE7(v464);
    }
    else {
      uint64_t v29 = *((void *)&v463 + 1);
    }
    uint64_t MCAsmInfo = llvm::Target::createMCAsmInfo( *(uint64_t (**)(uint64_t, void **, uint64_t))(v413 + 48),  v416,  (uint64_t)v28,  v29,  (uint64_t)v425);
    uint64_t v31 = *((void *)&v416 + 1);
    *((void *)&v416 + 1) = MCAsmInfo;
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
    }
    if ((SBYTE7(v464) & 0x80u) == 0) {
      __int128 v32 = &v463;
    }
    else {
      __int128 v32 = (__int128 *)v463;
    }
    if ((SBYTE7(v464) & 0x80u) == 0) {
      uint64_t v33 = BYTE7(v464);
    }
    else {
      uint64_t v33 = *((void *)&v463 + 1);
    }
    if ((v440.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v34 = &v440;
    }
    else {
      uint64_t v34 = (std::string *)v440.__r_.__value_.__r.__words[0];
    }
    if ((v440.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = v440.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = v440.__r_.__value_.__l.__size_;
    }
    if ((v439 & 0x80u) == 0) {
      uint64_t v36 = v438;
    }
    else {
      uint64_t v36 = (void **)v438[0];
    }
    if ((v439 & 0x80u) == 0) {
      uint64_t v37 = v439;
    }
    else {
      uint64_t v37 = (uint64_t)v438[1];
    }
    uint64_t MCSubtargetInfo = llvm::Target::createMCSubtargetInfo( *(uint64_t (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t))(v413 + 88),  (uint64_t)v32,  v33,  (uint64_t)v34,  size,  (uint64_t)v36,  v37);
    uint64_t v39 = v418;
    *(void *)&__int128 v418 = MCSubtargetInfo;
    if (v39) {
      (*(void (**)(uint64_t))(*(void *)v39 + 8LL))(v39);
    }
    int v40 = DWORD2(v416);
    if (*((void *)&v416 + 1))
    {
      if ((void)v418)
      {
        char v461 = 0;
        __int128 v462 = 0u;
        *(void *)&v452[8] = 0LL;
        *(_DWORD *)&v452[16] = 0;
        bzero(&v452[24], 0x329uLL);
        __int128 v458 = 0u;
        char v460 = 0;
        uint64_t v459 = 0LL;
        uint64_t v41 = (llvm::MCContext *)operator new(0x800uLL);
        llvm::MCContext::MCContext(v41, &v463, *((void *)&v416 + 1), v416, v418, 0LL, 0LL, 1LL, 0LL, 0LL);
        uint64_t v42 = v420[0];
        v420[0] = v41;
        if (v42)
        {
          llvm::MCContext::~MCContext(v42);
          operator delete(v43);
          uint64_t v41 = v420[0];
        }

        uint64_t inited = llvm::MCObjectFileInfo::initMCObjectFileInfo((llvm::MCObjectFileInfo *)v452, v41, 0, 0);
        uint64_t v45 = *(uint64_t (**)(uint64_t))(v413 + 64);
        if (v45) {
          uint64_t v46 = (void *)v45(inited);
        }
        else {
          uint64_t v46 = 0LL;
        }
        uint64_t v47 = __p[0];
        __p[0] = v46;
        if (v47)
        {
          operator delete(v47);
          uint64_t v46 = __p[0];
        }

        if (!v46) {
          goto LABEL_131;
        }
        char v48 = *(uint64_t (**)(void))(v413 + 72);
        if (v48) {
          uint64_t v49 = (void *)v48();
        }
        else {
          uint64_t v49 = 0LL;
        }
        int v50 = __p[1];
        __p[1] = v49;
        if (v50)
        {
          (*(void (**)(void *))(*(void *)v50 + 8LL))(v50);
          uint64_t v49 = __p[1];
        }

        if (!v49) {
          goto LABEL_131;
        }
        uint64_t v51 = *(uint64_t (**)(void))(v413 + 128);
        if (v51) {
          uint64_t v52 = v51();
        }
        else {
          uint64_t v52 = 0LL;
        }
        uint64_t v53 = v419;
        *(void *)&__int128 v419 = v52;
        if (v53)
        {
          (*(void (**)(uint64_t))(*(void *)v53 + 8LL))(v53);
          uint64_t v52 = v419;
        }

        if (!v52) {
          goto LABEL_131;
        }
        uint64_t v54 = *(unsigned int *)(*((void *)&v416 + 1) + 176LL);
        uint64_t v55 = *(void (**)(void))(v413 + 288);
        if (v55) {
          v55();
        }
        int v56 = *(uint64_t (**)(__int128 *, uint64_t, void, void *, void))(v413 + 136);
        if (v56) {
          uint64_t v57 = v56(&v463, v54, *((void *)&v416 + 1), __p[0], v416);
        }
        else {
          uint64_t v57 = 0LL;
        }
        uint64_t v58 = *((void *)&v418 + 1);
        *((void *)&v418 + 1) = v57;
        if (v58)
        {
          (*(void (**)(uint64_t))(*(void *)v58 + 8LL))(v58);
          uint64_t v57 = *((void *)&v418 + 1);
        }

        if (v57) {
          *(_BYTE *)(v57 + 50) = 1;
        }
        uint64_t v59 = *(uint64_t (**)(void *))(v413 + 256);
        if (v59) {
          uint64_t v60 = v59(__p[0]);
        }
        else {
          uint64_t v60 = 0LL;
        }
        uint64_t v61 = *((void *)&v419 + 1);
        *((void *)&v419 + 1) = v60;
        if (v61)
        {
          (*(void (**)(uint64_t))(*(void *)v61 + 8LL))(v61);
          uint64_t v60 = *((void *)&v419 + 1);
        }

        if (!v60) {
          goto LABEL_131;
        }
        uint64_t v62 = *(uint64_t (**)(void *, void, llvm::MCContext *))(v413 + 264);
        if (v62) {
          uint64_t v63 = v62(__p[0], v418, v420[0]);
        }
        else {
          uint64_t v63 = 0LL;
        }
        uint64_t v64 = v421;
        *(void *)&__int128 v421 = v63;
        if (v64)
        {
          (*(void (**)(uint64_t))(*(void *)v64 + 8LL))(v64);
          uint64_t v63 = v421;
        }

        if (!v63) {
          goto LABEL_131;
        }
        uint64_t v65 = (*(uint64_t (**)(uint64_t))(*(void *)v414 + 344LL))(v414);
        __int128 v67 = v66;
        uint64_t v68 = (*(uint64_t (**)(uint64_t))(*(void *)v414 + 352LL))(v414);
        uint64_t v69 = (uint64_t (**)())v68;
        uint64_t v71 = v70;
        SubroutineForAddress = (uint64_t (**)())v65;
        unint64_t v449 = v67;
        if (v67 != v70 || v65 != v68)
        {
          do
          {
            if ((*(unsigned int (**)(void *, uint64_t))(*(void *)v67 + 192LL))(v67, v65)
              && (*(uint64_t (**)(void *, uint64_t (**)()))(*(void *)v449 + 160LL))( v449,  SubroutineForAddress)
              && ((*(uint64_t (**)(void *, uint64_t (**)()))(*(void *)v449 + 216LL))( v449,  SubroutineForAddress) & 1) == 0)
            {
              llvm::agxclauseanalyzer::createObjInput(&v445, v419, v414, &SubroutineForAddress);
              char v72 = (char)v446;
              if ((v446 & 1) == 0)
              {
                unsigned int v73 = (llvm::MCContext *)v445;
                unint64_t v445 = 0LL;
                std::string v74 = v420[1];
                v420[1] = v73;
                if (!v74) {
                  break;
                }
                (*(void (**)(llvm::MCContext *))(*(void *)v74 + 8LL))(v74);
              }

              unint64_t v75 = v445;
              unint64_t v445 = 0LL;
              if (v75) {
                (*(void (**)(unint64_t))(*(void *)v75 + 8LL))(v75);
              }
              if ((v72 & 1) == 0) {
                break;
              }
            }

            (*(void (**)(void *, uint64_t (***)()))(*(void *)v449 + 128LL))( v449,  &SubroutineForAddress);
            __int128 v67 = v449;
            uint64_t v65 = (uint64_t)SubroutineForAddress;
          }

          while (v449 != v71 || SubroutineForAddress != v69);
        }

        if (!v420[1])
        {
LABEL_131:
          int v40 = 0;
LABEL_132:
          llvm::MCObjectFileInfo::~MCObjectFileInfo((llvm::MCObjectFileInfo *)v452);
          goto LABEL_133;
        }

        std::string::basic_string[abi:nn180100]<0>(v422, "");
        SubroutineForAddress = &off_590110;
        unint64_t v449 = &llvm::WithColor::defaultErrorHandler;
        uint64_t v451 = &SubroutineForAddress;
        unint64_t v445 = (unint64_t)&off_590110;
        uint64_t v446 = &llvm::WithColor::defaultWarningHandler;
        __int128 v447 = &v445;
        llvm::DWARFContext::create(&v424, v414, 0LL, 0LL, v422, &SubroutineForAddress, &v445);
        uint64_t v77 = v424;
        uint64_t v424 = 0LL;
        uint64_t v78 = *((void *)&v421 + 1);
        *((void *)&v421 + 1) = v77;
        if (v78)
        {
          (*(void (**)(uint64_t))(*(void *)v78 + 8LL))(v78);
          uint64_t v79 = v424;
          uint64_t v424 = 0LL;
          if (v79) {
            (*(void (**)(uint64_t))(*(void *)v79 + 8LL))(v79);
          }
        }

        int v80 = v447;
        if (v447 == &v445)
        {
          uint64_t v81 = 4LL;
          int v80 = &v445;
        }

        else
        {
          if (!v447) {
            goto LABEL_618;
          }
          uint64_t v81 = 5LL;
        }

        (*(void (**)(void))(*v80 + 8 * v81))();
LABEL_618:
        uint64_t v375 = v451;
        if (v451 == &SubroutineForAddress)
        {
          uint64_t v376 = 4LL;
          uint64_t v375 = &SubroutineForAddress;
        }

        else
        {
          if (!v451)
          {
LABEL_623:
            if (v423 < 0) {
              operator delete(v422[0]);
            }
            int v40 = *((void *)&v421 + 1) != 0LL;
            goto LABEL_132;
          }

          uint64_t v376 = 5LL;
        }

        (*v375)[v376]();
        goto LABEL_623;
      }

      int v40 = 0;
    }

LABEL_262:
    if (v92 && [v92 count] && objc_msgSend(v92, "count"))
    {
      id v143 = [v92 count];
      uint64_t v145 = v88[3];
      uint64_t v144 = v88[4];
      if (v143 == (id)(0x8E38E38E38E38E39LL * ((v144 - v145) >> 2)) && v144 != v145)
      {
        unint64_t v147 = 0LL;
        uint64_t v148 = 28LL;
        do
        {
          id v149 = objc_claimAutoreleasedReturnValue([v92 objectAtIndexedSubscript:v147]);
          std::string::basic_string[abi:nn180100]<0>(v452, (char *)[v149 UTF8String]);
          *(_DWORD *)(v88[3] + v148) = GTShaderProfilerLLVMTargetClauseAnalysis::addString( (uint64_t)v88,  (__int128 *)v452);
          if ((v452[23] & 0x80000000) != 0) {
            operator delete(*(void **)v452);
          }

          ++v147;
          v148 += 36LL;
        }

        while (v147 < 0x8E38E38E38E38E39LL * ((uint64_t)(v88[4] - v88[3]) >> 2));
      }
    }

    unint64_t v150 = (void *)v88[31];
    unint64_t v151 = v150[13];
    uint64_t v152 = *(void *)(v151 + 16);
    *(_OWORD *)uint64_t v425 = v151;
    if (v152)
    {
      unint64_t v153 = v151;
      do
      {
        (*(void (**)(_BYTE *__return_ptr))(*(void *)v153 + 24LL))(v452);
        if ((v452[8] & 1) != 0)
        {
          if (*(void *)v452) {
            (*(void (**)(void))(**(void **)v452 + 8LL))();
          }
        }

        else
        {
          uint64_t v154 = v88[31];
          if ((*(_BYTE *)(**(void **)(v154 + 48) + 48LL * *(unsigned int *)(*(void *)v452 + 24LL) + 9) & 4) != 0
            && ((*(uint64_t (**)(void, uint64_t, void, void, _BYTE *))(**(void **)(v154 + 56) + 104LL))( *(void *)(v154 + 56),  *(void *)v452 + 24LL,  **(void **)v452,  *(void *)(*(void *)v452 + 16LL),  v452) & 1) != 0)
          {
            unint64_t v155 = v151;
            uint64_t v156 = *(void *)v452;
            uint64_t v158 = (char *)v88[12];
            unint64_t v157 = v88[13];
            if ((unint64_t)v158 >= v157)
            {
              double v160 = (char *)*v377;
              uint64_t v161 = (v158 - (_BYTE *)*v377) >> 3;
              unint64_t v162 = v161 + 1;
              uint64_t v163 = v157 - (void)v160;
              if (v163 >> 2 > v162) {
                unint64_t v162 = v163 >> 2;
              }
              else {
                unint64_t v3 = v162;
              }
              if (v3)
              {
                if (v3 >> 61) {
                  goto LABEL_627;
                }
                uint64_t v164 = (char *)operator new(8 * v3);
              }

              else
              {
                uint64_t v164 = 0LL;
              }

              uint64_t v165 = &v164[8 * v161];
              *(void *)uint64_t v165 = v156;
              uint64_t v4 = (unint64_t *)(v165 + 8);
              unint64_t v151 = v155;
              while (v158 != v160)
              {
                uint64_t v166 = *((void *)v158 - 1);
                v158 -= 8;
                *((void *)v165 - 1) = v166;
                v165 -= 8;
              }

              v88[11] = v165;
              v88[12] = v4;
              v88[13] = &v164[8 * v3];
              if (v160) {
                operator delete(v160);
              }
              v88[12] = v4;
            }

            else
            {
              *(void *)uint64_t v158 = *(void *)v452;
              v88[12] = v158 + 8;
              unint64_t v151 = v155;
            }
          }
        }

        llvm::agxclauseanalyzer::AnalyzerInput::InstIteratorImpl<llvm::agxclauseanalyzer::AnalyzerInput>::operator++(v425);
        unint64_t v153 = *(void *)v425;
      }

      while (*(void *)v425 != v151 || *(void *)&v425[8] != v152);
      unint64_t v150 = (void *)v88[31];
      unint64_t v151 = v150[13];
    }

    uint64_t v167 = (char *)v150[11];
    unint64_t v449 = 0LL;
    SubroutineForAddress = 0LL;
    uint64_t v450 = 0LL;
    uint64_t v168 = *(void *)(v151 + 16);
    __int128 v442 = v151;
    unint64_t v443 = v151;
    uint64_t v444 = v168;
    (*(void (**)(__int128 *__return_ptr, char *, __int128 *, void, uint64_t (***)()))(*(void *)v167 + 48LL))( &v463,  v167,  &v442,  v150[7],  &SubroutineForAddress);
    size_t v169 = 8LL * *(void *)(v151 + 16);
    memset(v452, 0, sizeof(v452));
    LODWORD(v453) = 1065353216;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( (uint64_t)v452,  v169);
    float v170 = 0.0;
    float v171 = 0.0;
    if (*(void *)&v452[8]) {
      float v171 = (float)*(unint64_t *)&v452[24] / (float)*(unint64_t *)&v452[8];
    }
    LODWORD(v453) = fmaxf(v171, 0.25);
    memset(v425, 0, sizeof(v425));
    float v426 = 1.0;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>( (uint64_t)v425,  (uint64_t)(*((void *)&v463 + 1) - v463) >> 5);
    if (*(void *)&v425[8]) {
      float v170 = (float)*(unint64_t *)&v425[24] / (float)*(unint64_t *)&v425[8];
    }
    float v426 = fmaxf(v170, 0.25);
    uint64_t v390 = *((void *)&v463 + 1);
    uint64_t v172 = v463;
    if ((void)v463 != *((void *)&v463 + 1))
    {
      __s1a = v167;
      unint64_t v400 = v151;
      do
      {
        unint64_t v173 = *(void *)(v172 + 8);
        uint64_t v393 = v172;
        unint64_t v174 = *(void *)(v172 + 24);
        if (v173 >= v174) {
          goto LABEL_345;
        }
        unint64_t v403 = *(void *)(v172 + 24);
        do
        {
          if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>( v425,  v173))
          {
            break;
          }

          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long>( (uint64_t)v425,  v173,  v173);
          (*(void (**)(unint64_t *__return_ptr, char *, unint64_t, unint64_t, unint64_t, void))(*(void *)v167 + 40LL))( &v445,  v167,  v151,  v173,  v151,  *(void *)(v151 + 16));
          __int128 v175 = (llvm::agxclauseanalyzer::InstrStream *)v445;
          unint64_t v445 = 0LL;
          __int128 v177 = (llvm::agxclauseanalyzer::InstrClause **)*((void *)v175 + 1);
          uint64_t v176 = (llvm::agxclauseanalyzer::InstrClause **)*((void *)v175 + 2);
          uint64_t v407 = v175;
          *(void *)uint64_t v410 = v173;
          if (v177 == v176)
          {
            float v193 = v175;
            v173 += llvm::agxclauseanalyzer::InstrStream::getSizeInBytes(v175);
            uint64_t v167 = __s1a;
            unint64_t v151 = v400;
            unint64_t v174 = v403;
LABEL_341:
            (*(void (**)(llvm::agxclauseanalyzer::InstrStream *))(*(void *)v193 + 8LL))(v193);
            goto LABEL_342;
          }

          do
          {
            uint64_t v178 = *v177;
            unint64_t Offset = llvm::agxclauseanalyzer::InstrClause::getOffset(*v177);
            unint64_t SizeInBytes = llvm::agxclauseanalyzer::InstrClause::getSizeInBytes(v178);
            unint64_t v181 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>( v452,  Offset);
            if (v181)
            {
              if (v181[3] >= SizeInBytes) {
                goto LABEL_337;
              }
              v181[3] = SizeInBytes;
            }

            else
            {
              std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,unsigned long &>( (uint64_t)v452,  Offset,  Offset,  SizeInBytes);
            }

            uint64_t v182 = (*((void *)v178 + 2) - *((void *)v178 + 1)) >> 3;
            uint64_t v4 = (unint64_t *)*v88;
            uint64_t v183 = (unint64_t *)v88[1];
            uint64_t v184 = ((uint64_t)v183 - *v88) >> 5;
            unint64_t v185 = v88[2];
            if ((unint64_t)v183 >= v185)
            {
              unint64_t v187 = v184 + 1;
              uint64_t v188 = v185 - (void)v4;
              if (v188 >> 4 > v187) {
                unint64_t v187 = v188 >> 4;
              }
              else {
                unint64_t v3 = v187;
              }
              if (v3)
              {
                if (v3 >> 59) {
                  goto LABEL_627;
                }
                uint64_t v189 = (char *)operator new(32 * v3);
              }

              else
              {
                uint64_t v189 = 0LL;
              }

              uint64_t v190 = &v189[32 * v184];
              *(void *)uint64_t v190 = Offset;
              *((void *)v190 + 1) = SizeInBytes;
              *((_DWORD *)v190 + 4) = v184;
              *((_DWORD *)v190 + 5) = v182;
              *((void *)v190 + 3) = 0LL;
              unint64_t v191 = v190;
              if (v183 != v4)
              {
                do
                {
                  __int128 v192 = *((_OWORD *)v183 - 1);
                  *((_OWORD *)v191 - 2) = *((_OWORD *)v183 - 2);
                  *((_OWORD *)v191 - 1) = v192;
                  v191 -= 32;
                  v183 -= 4;
                }

                while (v183 != v4);
                uint64_t v183 = (unint64_t *)*v88;
              }

              uint64_t v186 = v190 + 32;
              void *v88 = v191;
              v88[1] = v190 + 32;
              v88[2] = &v189[32 * v3];
              if (v183) {
                operator delete(v183);
              }
            }

            else
            {
              *uint64_t v183 = Offset;
              v183[1] = SizeInBytes;
              *((_DWORD *)v183 + 4) = v184;
              *((_DWORD *)v183 + 5) = v182;
              uint64_t v186 = v183 + 4;
              v183[3] = 0LL;
            }

            v88[1] = v186;
LABEL_337:
            ++v177;
          }

          while (v177 != v176);
          float v193 = v407;
          unint64_t v173 = llvm::agxclauseanalyzer::InstrStream::getSizeInBytes(v407) + *(void *)v410;
          uint64_t v167 = __s1a;
          unint64_t v151 = v400;
          unint64_t v174 = v403;
          if (v407) {
            goto LABEL_341;
          }
LABEL_342:
          unint64_t v194 = v445;
          unint64_t v445 = 0LL;
          if (v194) {
            (*(void (**)(unint64_t))(*(void *)v194 + 8LL))(v194);
          }
        }

        while (v173 < v174);
LABEL_345:
        uint64_t v172 = v393 + 32;
      }

      while (v393 + 32 != v390);
    }

    uint64_t v195 = *v88;
    uint64_t v196 = v88[1] - *v88;
    if (v196)
    {
      unint64_t v197 = 0LL;
      uint64_t v198 = v88[3];
      unint64_t v411 = v196 >> 5;
      do
      {
        uint64_t v199 = (unint64_t *)(v195 + 32 * v197);
        unint64_t v200 = *v199;
        unint64_t v201 = v199[1];
        uint64_t v202 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>( v88 + 6,  *v199);
        uint64_t v203 = v198;
        if (v202) {
          uint64_t v203 = v198 + 36LL * v202[3];
        }
        unint64_t v204 = v200 + v201;
        unint64_t v205 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>( v88 + 6,  v204);
        if (v205)
        {
          unint64_t v206 = v203 - v198;
          unint64_t v3 = v205[3] + 0x71C71C71C71C71C7LL * ((v203 - v198) >> 2);
LABEL_352:
          LODWORD(v4) = 954437177 * (v206 >> 2);
        }

        else
        {
          uint64_t v208 = v88[4];
          while (v203 != v208)
          {
            if (*(void *)(v203 + 8) >= v200)
            {
              if (v203 != v208)
              {
                uint64_t v209 = v203;
                while (*(void *)(v209 + 8) <= v204)
                {
                  v209 += 36LL;
                  if (v209 == v208) {
                    goto LABEL_365;
                  }
                }

                uint64_t v208 = v209;
              }

LABEL_365:
              unint64_t v206 = v203 - v198;
              unint64_t v3 = 0x8E38E38E38E38E39LL * ((v208 - v203) >> 2);
              goto LABEL_352;
            }

            v203 += 36LL;
          }
        }

        uint64_t v207 = v195 + 32 * v197;
        *(_DWORD *)(v207 + 24) = (_DWORD)v4;
        *(_DWORD *)(v207 + 28) = v3;
        ++v197;
      }

      while (v197 < v411);
    }

    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v425);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v452);
    llvm::Expected<std::vector<llvm::iterator_range<llvm::agxclauseanalyzer::AnalyzerInput::InstIteratorImpl<llvm::agxclauseanalyzer::AnalyzerInput const>>>>::~Expected((uint64_t)&v463);
    *(void *)uint64_t v452 = &SubroutineForAddress;
    std::vector<llvm::Error>::__destroy_vector::operator()[abi:nn180100]((void ***)v452);
    uint64_t v380 = *(llvm::DWARFContext **)(v88[31] + 120LL);
    if (!v380) {
      goto LABEL_552;
    }
    llvm::DWARFContext::parseNormalUnits(v380);
    unsigned int v211 = *((_DWORD *)v380 + 18);
    if (v211 == -1)
    {
      unsigned int v211 = *((_DWORD *)v380 + 6);
      if (!v211)
      {
LABEL_552:
        int v10 = (void *)objc_opt_new(&OBJC_CLASS___GTShaderProfilerBinaryAnalysisResult, v210);
        id v327 = (void *)objc_opt_new(&OBJC_CLASS___NSMutableArray, v326);
        uint64_t v328 = (uint64_t *)v88[17];
        for (uint64_t j = (uint64_t *)v88[18]; v328 != j; v328 += 3)
        {
          uint64_t v330 = v328;
          BOOL v331 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v330));
          [v327 addObject:v331];
        }

        id v332 = [v327 copy];
        [v10 setStrings:v332];

        uint64_t v333 = v88[3];
        uint64_t v334 = v88[4];
        if (v333 != v334)
        {
          uint64_t v335 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v333,  v334 - v333));
          [v10 setInstructionData:v335];
        }

        uint64_t v336 = v88[1];
        if (*v88 != v336)
        {
          uint64_t v337 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  *v88,  v336 - *v88));
          [v10 setClauseData:v337];
        }

        uint64_t v338 = v88[11];
        uint64_t v339 = v88[12];
        if (v338 != v339)
        {
          id v340 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v338,  v339 - v338));
          [v10 setBranchTargetData:v340];
        }

        uint64_t v341 = v88[28];
        uint64_t v342 = v88[29];
        if (v341 != v342)
        {
          uint64_t v343 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v341,  v342 - v341));
          [v10 setBinaryRangeData:v343];
        }

        uint64_t v344 = v88[25];
        uint64_t v345 = v88[26];
        if (v344 != v345)
        {
          uint64_t v346 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v344,  v345 - v344));
          [v10 setBinaryLocationData:v346];
        }

        uint64_t v347 = v88[14];
        uint64_t v348 = v88[15];
        if (v347 != v348)
        {
          unint64_t v349 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v347,  v348 - v347));
          [v10 setRegisterInfoData:v349];
        }

        [v10 setVersion:2];

        uint64_t v350 = (void *)v88[28];
        if (v350)
        {
          v88[29] = v350;
          operator delete(v350);
        }

        uint64_t v351 = *v405;
        if (*v405)
        {
          v88[26] = v351;
          operator delete(v351);
        }

        uint64_t v352 = (void **)v88[22];
        if (v352)
        {
          do
          {
            uint64_t v353 = (void **)*v352;
            operator delete(v352);
            uint64_t v352 = v353;
          }

          while (v353);
        }

        uint64_t v354 = (void *)v88[20];
        v88[20] = 0LL;
        if (v354) {
          operator delete(v354);
        }
        *(void *)uint64_t v452 = v88 + 17;
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)v452);
        uint64_t v355 = (void *)v88[14];
        if (v355)
        {
          v88[15] = v355;
          operator delete(v355);
        }

        __int128 v356 = *v377;
        if (*v377)
        {
          v88[12] = v356;
          operator delete(v356);
        }

        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)(v88 + 6));
        uint64_t v357 = (void *)v88[3];
        if (v357)
        {
          v88[4] = v357;
          operator delete(v357);
        }

        unint64_t v358 = (void *)*v88;
        if (*v88)
        {
          v88[1] = v358;
          operator delete(v358);
        }

        operator delete(v88);
        goto LABEL_587;
      }
    }

    else if (!v211)
    {
      goto LABEL_552;
    }

    uint64_t v212 = (llvm::DWARFUnit **)*((void *)v380 + 2);
    unint64_t v213 = &v212[v211];
    uint64_t v214 = 8LL * v211;
    while ((*((_BYTE *)*v212 + 96) & 0xFB) == 2)
    {
      ++v212;
      v214 -= 8LL;
      if (!v214) {
        goto LABEL_552;
      }
    }

    if (v212 == v213) {
      goto LABEL_552;
    }
    uint64_t v378 = v213;
    while (1)
    {
      CompilationDir = (const char *)llvm::DWARFUnit::getCompilationDir(*v212);
      LineTableForUnit = (void *)llvm::DWARFContext::getLineTableForUnit(v380, *v212);
      uint64_t v217 = LineTableForUnit[18];
      uint64_t v382 = LineTableForUnit[19];
      if (v217 != v382) {
        break;
      }
LABEL_546:
      uint64_t v325 = v212 + 1;
      uint64_t v212 = v378;
      if (v325 != v378)
      {
        uint64_t v212 = v325;
        while (!llvm::isCompileUnit((uint64_t)v212))
        {
          if (++v212 == v378)
          {
            uint64_t v212 = v378;
            break;
          }
        }
      }

      if (v212 == v378) {
        goto LABEL_552;
      }
    }

    uint64_t v218 = LineTableForUnit;
    unint64_t v408 = (llvm::agxclauseanalyzer::InstrStream *)(LineTableForUnit + 1);
    id v401 = LineTableForUnit;
    uint64_t v391 = v212;
    while (1)
    {
      uint64_t v383 = v217;
      uint64_t v219 = *(unsigned int *)(v217 + 24);
      *(void *)uint64_t v412 = (*(_DWORD *)(v217 + 28) - 1);
LABEL_545:
      uint64_t v217 = v383 + 40;
      if (v383 + 40 == v382) {
        goto LABEL_546;
      }
    }

    while (1)
    {
      uint64_t v220 = v218[15];
      uint64_t v221 = (unint64_t *)(v220 + 32 * v219);
      SubroutineForAddress = (uint64_t (**)())llvm::DWARFUnit::getSubroutineForAddress(*v212, *v221);
      unint64_t v449 = (void *)v210;
      uint64_t v222 = v219 + 1;
      if (SubroutineForAddress && v210 != 0)
      {
        unint64_t v210 = *v221;
        if (*(void *)(v218[15] + 32 * v222) != *v221) {
          break;
        }
      }

LABEL_544:
      uint64_t v219 = v222;
      if (v222 == *(void *)v412) {
        goto LABEL_545;
      }
    }

    *(void *)uint64_t v452 = &v452[16];
    *(void *)&v452[8] = 0x1000000000LL;
    llvm::DWARFUnit::getInlinedChainForAddress(*v212);
    if (!*(_DWORD *)&v452[8])
    {
LABEL_542:
      if (*(_BYTE **)v452 != &v452[16]) {
        free(*(void **)v452);
      }
      goto LABEL_544;
    }

    uint64_t v224 = *(void *)v452 + 16LL * *(unsigned int *)&v452[8];
    uint64_t v225 = *(void *)(*(void *)(v224 - 8) + 16LL);
    if (!v225 || ((int v226 = *(unsigned __int16 *)(v225 + 4), v226 != 46) ? (v227 = v226 == 29) : (v227 = 1), !v227))
    {
      memset(v425, 0, 24);
      uint64_t v232 = v220 + 32 * v219;
      if (CompilationDir) {
        size_t v233 = strlen(CompilationDir);
      }
      else {
        size_t v233 = 0LL;
      }
      llvm::DWARFDebugLine::Prologue::getFileNameByIndex( v408,  *(unsigned __int16 *)(v232 + 22),  CompilationDir,  v233,  4LL,  v425,  0LL);
      uint64_t Name = llvm::DWARFDie::getName(&SubroutineForAddress, 1LL);
      if (Name) {
        unsigned int v236 = (char *)Name;
      }
      else {
        unsigned int v236 = "";
      }
      int v237 = GTShaderProfilerLLVMTargetClauseAnalysis::addString((uint64_t)v88, (__int128 *)v425);
      std::string::basic_string[abi:nn180100]<0>(&v463, v236);
      int v238 = GTShaderProfilerLLVMTargetClauseAnalysis::addString((uint64_t)v88, &v463);
      int v239 = *(_DWORD *)(v232 + 16);
      int v240 = *(unsigned __int16 *)(v232 + 20);
      if (SBYTE7(v464) < 0) {
        operator delete((void *)v463);
      }
      uint64_t v241 = (char *)v88[25];
      id v242 = (char *)v88[26];
      uint64_t v243 = (v242 - v241) >> 4;
      unint64_t v244 = v88[27];
      if ((unint64_t)v242 >= v244)
      {
        unint64_t v246 = v243 + 1;
        uint64_t v247 = v244 - (void)v241;
        if (v247 >> 3 > v246) {
          unint64_t v246 = v247 >> 3;
        }
        BOOL v248 = (unint64_t)v247 >= 0x7FFFFFFFFFFFFFF0LL;
        unint64_t v249 = 0xFFFFFFFFFFFFFFFLL;
        if (!v248) {
          unint64_t v249 = v246;
        }
        if (v249)
        {
          unint64_t v249 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned long long,unsigned long long>>>(v249);
          uint64_t v241 = (char *)v88[25];
          id v242 = (char *)v88[26];
        }

        else
        {
          unint64_t v210 = 0LL;
        }

        __int128 v257 = (_DWORD *)(v249 + 16 * v243);
        *__int128 v257 = v237;
        v257[1] = v238;
        v257[2] = v239;
        v257[3] = v240;
        uint64_t v258 = v257;
        if (v242 != v241)
        {
          do
          {
            *((_OWORD *)v258 - 1) = *((_OWORD *)v242 - 1);
            v258 -= 4;
            v242 -= 16;
          }

          while (v242 != v241);
          uint64_t v241 = (char *)*v405;
        }

        uint64_t v245 = v257 + 4;
        v88[25] = v258;
        v88[26] = v257 + 4;
        v88[27] = v249 + 16 * v210;
        if (v241) {
          operator delete(v241);
        }
      }

      else
      {
        *(_DWORD *)id v242 = v237;
        *((_DWORD *)v242 + 1) = v238;
        uint64_t v245 = v242 + 16;
        *((_DWORD *)v242 + 2) = v239;
        *((_DWORD *)v242 + 3) = v240;
      }

      v88[26] = v245;
      unint64_t v259 = *v221;
      unint64_t v260 = *(void *)(v401[15] + 32 * v222) - *v221;
      uint64_t v262 = (unint64_t *)v88[29];
      unint64_t v261 = v88[30];
      if ((unint64_t)v262 >= v261)
      {
        int v264 = (unint64_t *)v88[28];
        unint64_t v265 = 0xAAAAAAAAAAAAAAABLL * (v262 - v264);
        unint64_t v266 = v265 + 1;
        if (v265 + 1 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_626;
        }
        unint64_t v267 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v261 - (void)v264) >> 3);
        if (2 * v267 > v266) {
          unint64_t v266 = 2 * v267;
        }
        if (v267 >= 0x555555555555555LL) {
          unint64_t v268 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v268 = v266;
        }
        if (v268)
        {
          unint64_t v268 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>>(v268);
          int v264 = (unint64_t *)v88[28];
          uint64_t v262 = (unint64_t *)v88[29];
        }

        else
        {
          unint64_t v210 = 0LL;
        }

        unint64_t v269 = v268 + 24 * v265;
        *(void *)unint64_t v269 = v259;
        *(void *)(v269 + 8) = v260;
        *(_DWORD *)(v269 + 16) = v243;
        *(_DWORD *)(v269 + 20) = 1;
        unint64_t v270 = v269;
        if (v262 == v264)
        {
          uint64_t v212 = v391;
        }

        else
        {
          uint64_t v212 = v391;
          do
          {
            __int128 v271 = *(_OWORD *)(v262 - 3);
            *(void *)(v270 - 8) = *(v262 - 1);
            *(_OWORD *)(v270 - 24) = v271;
            v270 -= 24LL;
            v262 -= 3;
          }

          while (v262 != v264);
          int v264 = (unint64_t *)v88[28];
        }

        uint64_t v263 = (void *)(v269 + 24);
        v88[28] = v270;
        v88[29] = v269 + 24;
        v88[30] = v268 + 24 * v210;
        if (v264) {
          operator delete(v264);
        }
      }

      else
      {
        *uint64_t v262 = v259;
        v262[1] = v260;
        uint64_t v263 = v262 + 3;
        *((_DWORD *)v262 + 4) = v243;
        *((_DWORD *)v262 + 5) = 1;
        uint64_t v212 = v391;
      }

      v88[29] = v263;
      if ((v425[23] & 0x80000000) != 0) {
        operator delete(*(void **)v425);
      }
      uint64_t v218 = v401;
      goto LABEL_542;
    }

    uint64_t v228 = (llvm::DWARFDie *)(v224 - 16);
    llvm::DWARFDie::getLowAndHighPC( (llvm::DWARFDie *)(v224 - 16),  &v445,  (unint64_t *)&v440,  (unint64_t *)v438);
    uint64_t v229 = *(void *)(*(void *)(v224 - 8) + 16LL);
    if (v229 && *(_WORD *)(v229 + 4) == 46)
    {
      LODWORD(v436[0]) = 0;
      LOWORD(v463) = 58;
      llvm::DWARFDie::findRecursively(v425, v224 - 16, &v463, 1LL);
      if (v429)
      {
        int AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v425);
        if (v231) {
          LODWORD(v436[0]) = AsUnsignedConstant;
        }
      }

      LODWORD(v422[0]) = llvm::DWARFDie::getDeclLine((llvm::DWARFDie *)(v224 - 16));
      v466[0] = 0;
      LODWORD(v441) = 0;
    }

    else
    {
      llvm::DWARFDie::getCallerFrame( (llvm::DWARFDie *)(v224 - 16),  (unsigned int *)v436,  (unsigned int *)v422,  v466,  (unsigned int *)&v441);
    }

    memset(v425, 0, 24);
    if (CompilationDir) {
      size_t v234 = strlen(CompilationDir);
    }
    else {
      size_t v234 = 0LL;
    }
    llvm::DWARFDebugLine::Prologue::getFileNameByIndex(v408, LODWORD(v436[0]), CompilationDir, v234, 4LL, v425, 0LL);
    uint64_t v250 = llvm::DWARFDie::getName(v224 - 16, 1LL);
    char v251 = "";
    if (v250) {
      char v251 = (const char *)v250;
    }
    __s1b = (char *)v251;
    uint64_t v252 = v220 + 32 * v219;
    int v255 = *(_DWORD *)(v252 + 16);
    uint64_t v253 = v252 + 16;
    int v254 = v255;
    uint64_t v404 = (int *)v253;
    if ((unint64_t)v228 <= *(void *)v452)
    {
      int v387 = v254;
      unsigned int v385 = *(unsigned __int16 *)(v253 + 4);
    }

    else
    {
      llvm::DWARFDie::getCallerFrame( (llvm::DWARFDie *)(v224 - 32),  (unsigned int *)v436,  (unsigned int *)v422,  v466,  (unsigned int *)&v441);
      int v387 = (int)v422[0];
      unsigned int v385 = v466[0];
      if (CompilationDir) {
        size_t v256 = strlen(CompilationDir);
      }
      else {
        size_t v256 = 0LL;
      }
      llvm::DWARFDebugLine::Prologue::getFileNameByIndex(v408, LODWORD(v436[0]), CompilationDir, v256, 4LL, v425, 0LL);
    }

    int v272 = GTShaderProfilerLLVMTargetClauseAnalysis::addString((uint64_t)v88, (__int128 *)v425);
    std::string::basic_string[abi:nn180100]<0>(&v463, __s1b);
    int v273 = GTShaderProfilerLLVMTargetClauseAnalysis::addString((uint64_t)v88, &v463);
    if (SBYTE7(v464) < 0) {
      operator delete((void *)v463);
    }
    unint64_t v274 = (char *)v88[25];
    char v275 = (char *)v88[26];
    unint64_t v276 = v88[27];
    uint64_t v394 = (v275 - v274) >> 4;
    if ((unint64_t)v275 >= v276)
    {
      unint64_t v279 = ((v275 - v274) >> 4) + 1;
      if (v279 >> 60) {
        goto LABEL_626;
      }
      uint64_t v280 = v276 - (void)v274;
      if (v280 >> 3 > v279) {
        unint64_t v279 = v280 >> 3;
      }
      BOOL v248 = (unint64_t)v280 >= 0x7FFFFFFFFFFFFFF0LL;
      unint64_t v281 = 0xFFFFFFFFFFFFFFFLL;
      if (!v248) {
        unint64_t v281 = v279;
      }
      if (v281)
      {
        unint64_t v281 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned long long,unsigned long long>>>(v281);
        unint64_t v274 = (char *)v88[25];
        char v275 = (char *)v88[26];
      }

      else
      {
        uint64_t v282 = 0LL;
      }

      __int128 v283 = (_DWORD *)(v281 + 16 * v394);
      _DWORD *v283 = v272;
      v283[1] = v273;
      v283[2] = v387;
      v283[3] = v385;
      id v284 = v283;
      if (v275 == v274)
      {
        __int128 v278 = v401;
      }

      else
      {
        __int128 v278 = v401;
        do
        {
          *((_OWORD *)v284 - 1) = *((_OWORD *)v275 - 1);
          v284 -= 4;
          v275 -= 16;
        }

        while (v275 != v274);
        unint64_t v274 = (char *)*v405;
      }

      uint64_t v277 = v283 + 4;
      v88[25] = v284;
      v88[26] = v283 + 4;
      v88[27] = v281 + 16 * v282;
      if (v274) {
        operator delete(v274);
      }
    }

    else
    {
      *(_DWORD *)char v275 = v272;
      *((_DWORD *)v275 + 1) = v273;
      uint64_t v277 = v275 + 16;
      *((_DWORD *)v275 + 2) = v387;
      *((_DWORD *)v275 + 3) = v385;
      __int128 v278 = v401;
    }

    v88[26] = v277;
    uint64_t v386 = *(void *)(v278[15] + 32 * v222);
    unint64_t v388 = *v221;
    int v285 = strcmp(__s1b, "air.vertexFetchFunction");
    int v286 = v394;
    if (v285) {
      LODWORD(v287) = v394;
    }
    else {
      LODWORD(v287) = -1;
    }
    uint64_t v288 = *(llvm::DWARFDie **)v452;
    if (v228 == *(llvm::DWARFDie **)v452)
    {
LABEL_519:
      unint64_t v311 = v386 - v388;
      else {
        int v312 = v287;
      }
      int v313 = (((unint64_t)v277 - v88[25]) >> 4) - v312;
      uint64_t v315 = (unint64_t *)v88[29];
      unint64_t v314 = v88[30];
      if ((unint64_t)v315 >= v314)
      {
        uint64_t v317 = (unint64_t *)v88[28];
        unint64_t v318 = 0xAAAAAAAAAAAAAAABLL * (v315 - v317);
        unint64_t v319 = v318 + 1;
        if (v318 + 1 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_626;
        }
        unint64_t v320 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v314 - (void)v317) >> 3);
        if (2 * v320 > v319) {
          unint64_t v319 = 2 * v320;
        }
        if (v320 >= 0x555555555555555LL) {
          unint64_t v321 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v321 = v319;
        }
        if (v321)
        {
          unint64_t v321 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>>(v321);
          uint64_t v317 = (unint64_t *)v88[28];
          uint64_t v315 = (unint64_t *)v88[29];
        }

        else
        {
          unint64_t v210 = 0LL;
        }

        unint64_t v322 = v321 + 24 * v318;
        *(void *)unint64_t v322 = v388;
        *(void *)(v322 + 8) = v311;
        *(_DWORD *)(v322 + 16) = v312;
        *(_DWORD *)(v322 + 20) = v313;
        unint64_t v323 = v322;
        if (v315 == v317)
        {
          uint64_t v212 = v391;
          uint64_t v218 = v401;
        }

        else
        {
          uint64_t v212 = v391;
          uint64_t v218 = v401;
          do
          {
            __int128 v324 = *(_OWORD *)(v315 - 3);
            *(void *)(v323 - 8) = *(v315 - 1);
            *(_OWORD *)(v323 - 24) = v324;
            v323 -= 24LL;
            v315 -= 3;
          }

          while (v315 != v317);
          uint64_t v317 = (unint64_t *)v88[28];
        }

        uint64_t v316 = (void *)(v322 + 24);
        v88[28] = v323;
        v88[29] = v322 + 24;
        v88[30] = v321 + 24 * v210;
        if (v317) {
          operator delete(v317);
        }
      }

      else
      {
        *uint64_t v315 = v388;
        v315[1] = v311;
        uint64_t v316 = v315 + 3;
        *((_DWORD *)v315 + 4) = v312;
        *((_DWORD *)v315 + 5) = v313;
        uint64_t v212 = v391;
        uint64_t v218 = v401;
      }

      v88[29] = v316;
      if ((v425[23] & 0x80000000) != 0) {
        operator delete(*(void **)v425);
      }
      goto LABEL_542;
    }

    __s1c = (char *)(v220 + 32 * v219 + 22);
    unint64_t v289 = v408;
    while (1)
    {
      unint64_t v290 = v228;
      uint64_t v291 = *((void *)v228 - 2);
      uint64_t v228 = (llvm::DWARFDie *)((char *)v228 - 16);
      if (v291)
      {
        if (*((void *)v290 - 1)) {
          break;
        }
      }

LABEL_517:
      if (v228 == v288)
      {
        uint64_t v277 = (_DWORD *)v88[26];
        int v286 = v394;
        goto LABEL_519;
      }
    }

    llvm::DWARFDie::getCallerFrame(v228, (unsigned int *)v436, (unsigned int *)v422, v466, (unsigned int *)&v441);
    __int128 v463 = 0uLL;
    *(void *)&__int128 v464 = 0LL;
    if (CompilationDir) {
      size_t v292 = strlen(CompilationDir);
    }
    else {
      size_t v292 = 0LL;
    }
    llvm::DWARFDebugLine::Prologue::getFileNameByIndex(v289, LODWORD(v436[0]), CompilationDir, v292, 4LL, &v463, 0LL);
    uint64_t v293 = llvm::DWARFDie::getName(v228, 1LL);
    if (v293) {
      uint64_t v294 = (char *)v293;
    }
    else {
      uint64_t v294 = "";
    }
    if ((_DWORD)v287 == -1)
    {
      if (!strcmp(v294, "air.vertexFetchFunction")) {
        LODWORD(v287) = -1;
      }
      else {
        uint64_t v287 = (v88[26] - v88[25]) >> 4;
      }
    }

    if ((unint64_t)v228 <= *(void *)v452)
    {
      unsigned int v296 = v466[0];
      int v295 = *v404;
      uint64_t v297 = *(unsigned __int16 *)__s1c;
      if (!CompilationDir) {
        goto LABEL_492;
      }
    }

    else
    {
      llvm::DWARFDie::getCallerFrame( (llvm::DWARFDie *)((char *)v290 - 32),  (unsigned int *)v436,  (unsigned int *)v422,  v466,  (unsigned int *)&v441);
      int v295 = (int)v422[0];
      unsigned int v296 = v466[0];
      uint64_t v297 = LODWORD(v436[0]);
      if (!CompilationDir)
      {
LABEL_492:
        size_t v298 = 0LL;
LABEL_495:
        llvm::DWARFDebugLine::Prologue::getFileNameByIndex(v289, v297, CompilationDir, v298, 4LL, &v463, 0LL);
        int v299 = GTShaderProfilerLLVMTargetClauseAnalysis::addString((uint64_t)v88, &v463);
        std::string::basic_string[abi:nn180100]<0>(&v442, v294);
        int v300 = GTShaderProfilerLLVMTargetClauseAnalysis::addString((uint64_t)v88, &v442);
        if (SHIBYTE(v443) < 0) {
          operator delete((void *)v442);
        }
        uint64_t v302 = (char *)v88[26];
        unint64_t v301 = v88[27];
        if ((unint64_t)v302 >= v301)
        {
          int8x8_t v304 = (char *)*v405;
          uint64_t v305 = (v302 - (_BYTE *)*v405) >> 4;
          unint64_t v306 = v305 + 1;
          uint64_t v307 = v301 - (void)v304;
          if (v307 >> 3 > v306) {
            unint64_t v306 = v307 >> 3;
          }
          BOOL v248 = (unint64_t)v307 >= 0x7FFFFFFFFFFFFFF0LL;
          unint64_t v308 = 0xFFFFFFFFFFFFFFFLL;
          if (!v248) {
            unint64_t v308 = v306;
          }
          if (v308)
          {
            unint64_t v308 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned long long,unsigned long long>>>(v308);
            int8x8_t v304 = (char *)v88[25];
            uint64_t v302 = (char *)v88[26];
          }

          else
          {
            unint64_t v210 = 0LL;
          }

          uint64_t v309 = (_DWORD *)(v308 + 16 * v305);
          *uint64_t v309 = v299;
          v309[1] = v300;
          v309[2] = v295;
          v309[3] = v296;
          uint64_t v310 = v309;
          if (v302 == v304)
          {
            unint64_t v289 = v408;
          }

          else
          {
            unint64_t v289 = v408;
            do
            {
              *((_OWORD *)v310 - 1) = *((_OWORD *)v302 - 1);
              v310 -= 4;
              v302 -= 16;
            }

            while (v302 != v304);
            int8x8_t v304 = (char *)*v405;
          }

          uint64_t v303 = v309 + 4;
          v88[25] = v310;
          v88[26] = v309 + 4;
          v88[27] = v308 + 16 * v210;
          if (v304) {
            operator delete(v304);
          }
        }

        else
        {
          *(_DWORD *)uint64_t v302 = v299;
          *((_DWORD *)v302 + 1) = v300;
          uint64_t v303 = v302 + 16;
          *((_DWORD *)v302 + 2) = v295;
          *((_DWORD *)v302 + 3) = v296;
        }

        v88[26] = v303;
        if (SBYTE7(v464) < 0) {
          operator delete((void *)v463);
        }
        uint64_t v288 = *(llvm::DWARFDie **)v452;
        goto LABEL_517;
      }
    }

    size_t v298 = strlen(CompilationDir);
    goto LABEL_495;
  }

  int v10 = 0LL;
LABEL_587:
  uint64_t v359 = *((void *)&v421 + 1);
  *((void *)&v421 + 1) = 0LL;
  if (v359) {
    (*(void (**)(uint64_t))(*(void *)v359 + 8LL))(v359);
  }
  uint64_t v360 = v421;
  *(void *)&__int128 v421 = 0LL;
  if (v360) {
    (*(void (**)(uint64_t))(*(void *)v360 + 8LL))(v360);
  }
  uint64_t v361 = v420[1];
  v420[1] = 0LL;
  uint64_t v9 = v379;
  if (v361) {
    (*(void (**)(llvm::MCContext *))(*(void *)v361 + 8LL))(v361);
  }
  uint64_t v362 = v420[0];
  v420[0] = 0LL;
  if (v362)
  {
    llvm::MCContext::~MCContext(v362);
    operator delete(v363);
  }

  uint64_t v364 = *((void *)&v419 + 1);
  *((void *)&v419 + 1) = 0LL;
  if (v364) {
    (*(void (**)(uint64_t))(*(void *)v364 + 8LL))(v364);
  }
  uint64_t v365 = v419;
  *(void *)&__int128 v419 = 0LL;
  if (v365) {
    (*(void (**)(uint64_t))(*(void *)v365 + 8LL))(v365);
  }
  uint64_t v366 = *((void *)&v418 + 1);
  *((void *)&v418 + 1) = 0LL;
  if (v366) {
    (*(void (**)(uint64_t))(*(void *)v366 + 8LL))(v366);
  }
  uint64_t v367 = v418;
  *(void *)&__int128 v418 = 0LL;
  if (v367) {
    (*(void (**)(uint64_t))(*(void *)v367 + 8LL))(v367);
  }
  uint64_t v368 = __p[1];
  __p[1] = 0LL;
  if (v368) {
    (*(void (**)(void *))(*(void *)v368 + 8LL))(v368);
  }
  uint64_t v369 = __p[0];
  __p[0] = 0LL;
  if (v369) {
    operator delete(v369);
  }
  uint64_t v370 = *((void *)&v416 + 1);
  *((void *)&v416 + 1) = 0LL;
  if (v370) {
    (*(void (**)(uint64_t))(*(void *)v370 + 8LL))(v370);
  }
  uint64_t v371 = v416;
  *(void *)&__int128 v416 = 0LL;
  if (v371) {
    std::default_delete<llvm::MCRegisterInfo const>::operator()[abi:nn180100](v371, v84, v85, v86);
  }
  uint64_t v372 = *((void *)&v415 + 1);
  *((void *)&v415 + 1) = 0LL;
  if (v372) {
    (*(void (**)(uint64_t))(*(void *)v372 + 8LL))(v372);
  }
  uint64_t v373 = v415;
  *(void *)&__int128 v415 = 0LL;
  if (v373) {
    (*(void (**)(uint64_t))(*(void *)v373 + 8LL))(v373);
  }
LABEL_615:

  return v10;
}

uint64_t GTShaderProfilerLLVMTargetClauseAnalysis::addString(uint64_t a1, __int128 *a2)
{
  char v4 = *((_BYTE *)a2 + 23);
  int v74 = v4;
  std::string::size_type v72 = *((void *)a2 + 1);
  unsigned int v73 = *(const std::string::value_type **)a2;
  if (v4 >= 0) {
    uint64_t v5 = (uint64_t *)a2;
  }
  else {
    uint64_t v5 = *(uint64_t **)a2;
  }
  if (v4 >= 0) {
    unint64_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v6 = *((void *)a2 + 1);
  }
  unint64_t v7 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v5, v6);
  unint64_t v8 = *(void *)(a1 + 168);
  if (v8)
  {
    unint64_t v9 = v7;
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v8) {
        unint64_t v12 = v7 % v8;
      }
    }

    else
    {
      unint64_t v12 = (v8 - 1) & v7;
    }

    unint64_t v13 = *(unsigned __int8 ***)(*(void *)(a1 + 160) + 8 * v12);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
        }

        else
        {
          if (v11 > 1)
          {
            if (v15 >= v8) {
              v15 %= v8;
            }
          }

          else
          {
            v15 &= v8 - 1;
          }

          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }

  uint64_t v17 = *(void *)(a1 + 136);
  float v16 = *(std::string **)(a1 + 144);
  unint64_t v18 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v5, v6);
  unint64_t v19 = v18;
  if (v8)
  {
    uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v20.i16[0] = vaddlv_u8(v20);
    unint64_t v21 = v20.u32[0];
    if (v20.u32[0] > 1uLL)
    {
      unint64_t v6 = v18;
      if (v18 >= v8) {
        unint64_t v6 = v18 % v8;
      }
    }

    else
    {
      unint64_t v6 = (v8 - 1) & v18;
    }

    uint64_t v22 = *(char ***)(*(void *)(a1 + 160) + 8 * v6);
    if (v22)
    {
      for (uint64_t j = *v22; j; uint64_t j = *(char **)j)
      {
        unint64_t v24 = *((void *)j + 1);
        if (v24 == v19)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)j + 16, (unsigned __int8 *)a2))
          {
            uint64_t v70 = v16;
            goto LABEL_99;
          }
        }

        else
        {
          if (v21 > 1)
          {
            if (v24 >= v8) {
              v24 %= v8;
            }
          }

          else
          {
            v24 &= v8 - 1;
          }

          if (v24 != v6) {
            break;
          }
        }
      }
    }
  }

  uint64_t v25 = (void *)(a1 + 176);
  uint64_t j = (char *)operator new(0x30uLL);
  *(void *)uint64_t j = 0LL;
  *((void *)j + 1) = v19;
  unint64_t v26 = (std::string *)(j + 16);
  if (v74 < 0)
  {
    std::string::__init_copy_ctor_external(v26, v73, v72);
  }

  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *a2;
    *((void *)j + 4) = *((void *)a2 + 2);
  }

  *((_DWORD *)j + 10) = 0;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 184) + 1LL);
  float v28 = *(float *)(a1 + 192);
  if (!v8 || (float)(v28 * (float)v8) < v27)
  {
    BOOL v29 = 1LL;
    if (v8 >= 3) {
      BOOL v29 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v30 = v29 | (2 * v8);
    unint64_t v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31) {
      int8x8_t prime = (int8x8_t)v31;
    }
    else {
      int8x8_t prime = (int8x8_t)v30;
    }
    if (*(void *)&prime == 1LL)
    {
      int8x8_t prime = (int8x8_t)2LL;
    }

    else if ((*(void *)&prime & (*(void *)&prime - 1LL)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }

    unint64_t v8 = *(void *)(a1 + 168);
    if (*(void *)&prime > v8) {
      goto LABEL_55;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 184) / *(float *)(a1 + 192));
      if (v8 < 3 || (uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }

      else
      {
        uint64_t v41 = 1LL << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }

      if (*(void *)&prime <= v39) {
        int8x8_t prime = (int8x8_t)v39;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *(void *)(a1 + 168);
      }

      else
      {
        if (prime)
        {
LABEL_55:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v33 = operator new(8LL * *(void *)&prime);
          uint64_t v34 = *(void **)(a1 + 160);
          *(void *)(a1 + 160) = v33;
          if (v34) {
            operator delete(v34);
          }
          uint64_t v35 = 0LL;
          *(int8x8_t *)(a1 + 168) = prime;
          do
            *(void *)(*(void *)(a1 + 160) + 8 * v35++) = 0LL;
          while (*(void *)&prime != v35);
          uint64_t v36 = (void *)*v25;
          if (*v25)
          {
            unint64_t v37 = v36[1];
            uint8x8_t v38 = (uint8x8_t)vcnt_s8(prime);
            v38.i16[0] = vaddlv_u8(v38);
            if (v38.u32[0] > 1uLL)
            {
              if (v37 >= *(void *)&prime) {
                v37 %= *(void *)&prime;
              }
            }

            else
            {
              v37 &= *(void *)&prime - 1LL;
            }

            *(void *)(*(void *)(a1 + 160) + 8 * v37) = v25;
            uint64_t v42 = (void *)*v36;
            if (*v36)
            {
              do
              {
                unint64_t v43 = v42[1];
                if (v38.u32[0] > 1uLL)
                {
                  if (v43 >= *(void *)&prime) {
                    v43 %= *(void *)&prime;
                  }
                }

                else
                {
                  v43 &= *(void *)&prime - 1LL;
                }

                if (v43 != v37)
                {
                  uint64_t v44 = *(void *)(a1 + 160);
                  if (!*(void *)(v44 + 8 * v43))
                  {
                    *(void *)(v44 + 8 * v43) = v36;
                    goto LABEL_80;
                  }

                  *uint64_t v36 = *v42;
                  *uint64_t v42 = **(void **)(*(void *)(a1 + 160) + 8 * v43);
                  **(void **)(*(void *)(a1 + 160) + 8 * v43) = v42;
                  uint64_t v42 = v36;
                }

                unint64_t v43 = v37;
LABEL_80:
                uint64_t v36 = v42;
                uint64_t v42 = (void *)*v42;
                unint64_t v37 = v43;
              }

              while (v42);
            }
          }

          unint64_t v8 = (unint64_t)prime;
          goto LABEL_84;
        }

        uint64_t v71 = *(void **)(a1 + 160);
        *(void *)(a1 + 160) = 0LL;
        if (v71) {
          operator delete(v71);
        }
        unint64_t v8 = 0LL;
        *(void *)(a1 + 168) = 0LL;
      }
    }

BOOL llvm::isCompileUnit(uint64_t a1)
{
  return (*(_BYTE *)(*(void *)a1 + 96LL) & 0xFB) != 2;
}

void *std::__function::__func<void (*)(llvm::Error),std::allocator<void (*)(llvm::Error)>,void ()(llvm::Error)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_590110;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(llvm::Error),std::allocator<void (*)(llvm::Error)>,void ()(llvm::Error)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_590110;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(llvm::Error),std::allocator<void (*)(llvm::Error)>,void ()(llvm::Error)>::operator()( uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void (**)(uint64_t *))(a1 + 8);
  uint64_t v4 = *a2;
  *a2 = 0LL;
  v2(&v4);
  uint64_t result = v4;
  if (v4) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return result;
}

__n128 GTMTLGetTextureLevelInfoForDeviceWithOptions( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v13 = a3 + 11;
  if ((unint64_t)(a3 - 501) <= 0x3E)
  {
    if (((1LL << v13) & 0x2000000000100001LL) != 0)
    {
      *(_OWORD *)a1 = v23;
      uint64_t v15 = *((void *)&v24 + 1);
      uint64_t v14 = v24;
      uint64_t v17 = *((void *)&v25 + 1);
      uint64_t v16 = v25;
      result.n128_u64[0] = v26.n128_u64[0];
      *(__n128 *)(a1 + 48) = v26;
      uint64_t v18 = v27;
      uint64_t v19 = 2 * a7;
      goto LABEL_7;
    }

    if (((1LL << v13) & 0x4000000000800008LL) != 0) {
      goto LABEL_5;
    }
  }

  if (a3 == 590)
  {
LABEL_5:
    *(_OWORD *)a1 = v23;
    uint64_t v15 = *((void *)&v24 + 1);
    uint64_t v14 = v24;
    uint64_t v17 = *((void *)&v25 + 1);
    uint64_t v16 = v25;
    result.n128_u64[0] = v26.n128_u64[0];
    *(__n128 *)(a1 + 48) = v26;
    uint64_t v18 = v27;
    uint64_t v19 = 4 * a7;
LABEL_7:
    uint64_t v20 = v16 * v15 * v19;
    *(void *)(a1 + 16) = v14;
    *(void *)(a1 + 24) = v15;
    *(void *)(a1 + 32) = v16;
    *(void *)(a1 + 40) = v17;
    *(void *)(a1 + 64) = v18;
    *(void *)(a1 + 72) = v19;
    *(void *)(a1 + 80) = v15 * v19;
    *(void *)(a1 + 88) = v20;
    *(void *)(a1 + 96) = v17 * v20;
    return result;
  }

  __int128 v21 = v28;
  *(_OWORD *)(a1 + 64) = v27;
  *(_OWORD *)(a1 + 80) = v21;
  *(void *)(a1 + 96) = v29;
  __int128 v22 = v24;
  *(_OWORD *)a1 = v23;
  *(_OWORD *)(a1 + 16) = v22;
  __n128 result = v26;
  *(_OWORD *)(a1 + 32) = v25;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t GTMTLPixelFormatGetInfoForDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = MTLPixelFormatGetInfoForDevice(a2, a3);
  char v6 = a3 + 11;
  if (((1LL << v6) & 0x2000000000100001LL) != 0)
  {
    uint64_t v7 = 2LL;
    goto LABEL_7;
  }

  if (((1LL << v6) & 0x4000000000800008LL) == 0)
  {
LABEL_4:
    if (a3 != 590) {
      return result;
    }
  }

  uint64_t v7 = 4LL;
LABEL_7:
  *(void *)(a1 + 24) = v7;
  return result;
}

id MTLHeap_backbuffer(void *a1)
{
  id v1 = a1;
  id v2 = [v1 currentAllocatedSize];
  id v3 = [v1 resourceOptions];
  if ([v1 type])
  {
    else {
      id v4 = 0LL;
    }
  }

  else
  {
    id v4 = [v1 newBufferWithLength:v2 options:v3];
    [v4 makeAliasable];
  }

  return v4;
}

apr_hash_t *__cdecl apr_hash_make(apr_pool_t *pool)
{
  v6.__darwin_time_t tv_sec = v6.tv_usec + 1000000 * v6.tv_sec;
  __darwin_time_t tv_sec = v6.tv_sec;
  id v3 = apr_palloc(pool, 0x50uLL);
  *id v3 = pool;
  v3[9] = 0LL;
  v3[6] = 0xF00000000LL;
  *((_DWORD *)v3 + 14) = (&v6 ^ pool ^ v3 ^ tv_sec ^ HIDWORD(tv_sec)) - 1;
  id v4 = apr_palloc(pool, 0x80uLL);
  if (v4)
  {
    v4[6] = 0u;
    v4[7] = 0u;
    v4[4] = 0u;
    v4[5] = 0u;
    v4[2] = 0u;
    v4[3] = 0u;
    *id v4 = 0u;
    v4[1] = 0u;
  }

  v3[1] = v4;
  v3[8] = 0LL;
  return (apr_hash_t *)v3;
}

apr_hash_index_t *__cdecl apr_hash_next(apr_hash_index_t *hi)
{
  id v1 = (void *)*((void *)hi + 2);
  *((void *)hi + 1) = v1;
  if (v1)
  {
LABEL_5:
    *((void *)hi + 2) = *v1;
  }

  else
  {
    uint64_t v2 = *(void *)hi;
    unsigned int v3 = *(_DWORD *)(*(void *)hi + 52LL);
    unsigned int v4 = *((_DWORD *)hi + 6);
    while (v4 <= v3)
    {
      id v1 = *(void **)(*(void *)(v2 + 8) + 8LL * v4++);
      *((_DWORD *)hi + 6) = v4;
      *((void *)hi + 1) = v1;
      if (v1) {
        goto LABEL_5;
      }
    }

    return 0LL;
  }

  return hi;
}

apr_hash_index_t *__cdecl apr_hash_first(apr_pool_t *p, apr_hash_t *ht)
{
  if (p) {
    unsigned int v3 = (char *)apr_palloc(p, 0x20uLL);
  }
  else {
    unsigned int v3 = (char *)ht + 16;
  }
  *((void *)v3 + 1) = 0LL;
  *((void *)v3 + 2) = 0LL;
  *(void *)unsigned int v3 = ht;
  *((_DWORD *)v3 + 6) = 0;
  return apr_hash_next((apr_hash_index_t *)v3);
}

apr_hash_t *__cdecl apr_hash_copy(apr_pool_t *pool, const apr_hash_t *h)
{
  uint64_t result = (apr_hash_t *)apr_palloc( pool,  40LL * *((unsigned int *)h + 12) + 8LL * (*((_DWORD *)h + 13) + 1) + 80);
  uint64_t v5 = 0LL;
  timeval v6 = 0LL;
  *((_DWORD *)result + 12) = *((_DWORD *)h + 12);
  uint64_t v7 = *(void *)((char *)h + 52);
  *(void *)((char *)result + 52) = v7;
  *((void *)result + 8) = *((void *)h + 8);
  *((void *)result + 9) = 0LL;
  *(void *)uint64_t result = pool;
  *((void *)result + 1) = (char *)result + 80;
  unint64_t v8 = (char *)result + 8 * (*((_DWORD *)h + 13) + 1) + 80;
  else {
    uint64_t v9 = 1LL;
  }
  do
  {
    uint8x8_t v10 = (char **)(*((void *)result + 1) + 8 * v5);
    unint64_t v11 = *(uint64_t **)(*((void *)h + 1) + 8 * v5);
    if (v11)
    {
      do
      {
        unint64_t v12 = (char **)((_DWORD)v6 + 1);
        char v13 = &v8[40 * v6];
        *uint8x8_t v10 = v13;
        *((_DWORD *)v13 + 2) = *((_DWORD *)v11 + 2);
        uint64_t v14 = (char *)v11[3];
        *((void *)v13 + 2) = v11[2];
        timeval v6 = (char **)*v10;
        uint64_t v15 = (char *)v11[4];
        v6[3] = v14;
        v6[4] = v15;
        uint8x8_t v10 = (char **)*v10;
        unint64_t v11 = (uint64_t *)*v11;
        LODWORD(v6) = (_DWORD)v12;
      }

      while (v11);
    }

    else
    {
      unint64_t v12 = v6;
    }

    *uint8x8_t v10 = 0LL;
    ++v5;
    timeval v6 = v12;
  }

  while (v5 != v9);
  return result;
}

void *find_entry(uint64_t a1, _BYTE *a2, size_t a3, uint64_t a4)
{
  __uint64_t n = a3;
  uint64_t v7 = *(uint64_t (**)(_BYTE *, size_t *))(a1 + 64);
  if (v7)
  {
    unsigned int v8 = v7(a2, &__n);
  }

  else
  {
    unsigned int v8 = *(_DWORD *)(a1 + 56);
    if (a3 == -1LL)
    {
      int v18 = *a2;
      if (*a2)
      {
        uint64_t v19 = a2;
        do
        {
          unsigned int v8 = 33 * v8 + v18;
          int v20 = *++v19;
          int v18 = v20;
        }

        while (v20);
      }

      else
      {
        uint64_t v19 = a2;
      }

      __uint64_t n = v19 - a2;
    }

    else if (a3)
    {
      uint64_t v14 = a2;
      do
      {
        int v15 = *v14++;
        unsigned int v8 = 33 * v8 + v15;
        --a3;
      }

      while (a3);
    }
  }

  uint64_t v9 = (void *)(*(void *)(a1 + 8) + 8LL * (*(_DWORD *)(a1 + 52) & v8));
  uint64_t v10 = *v9;
  if (*v9)
  {
    size_t v11 = __n;
    while (1)
    {
      unint64_t v12 = v9;
      uint64_t v9 = (void *)v10;
      uint64_t v10 = *v9;
      if (!*v9) {
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:
    if (a4)
    {
      char v13 = *(_DWORD **)(a1 + 72);
      if (v13) {
        *(void *)(a1 + 72) = *(void *)v13;
      }
      else {
        char v13 = apr_palloc(*(apr_pool_t **)a1, 0x28uLL);
      }
      *(void *)char v13 = 0LL;
      v13[2] = v8;
      size_t v16 = __n;
      *((void *)v13 + 2) = a2;
      *((void *)v13 + 3) = v16;
      *((void *)v13 + 4) = a4;
      void *v9 = v13;
      ++*(_DWORD *)(a1 + 48);
    }

    return v9;
  }

  return v12;
}

void apr_hash_set(apr_hash_t *ht, const void *key, apr_ssize_t klen, const void *val)
{
  entry = find_entry((uint64_t)ht, key, klen, (uint64_t)val);
  uint64_t v7 = (void *)*entry;
  if (*entry)
  {
    if (val)
    {
      v7[4] = val;
      unsigned int v8 = *((_DWORD *)ht + 13);
      if (*((_DWORD *)ht + 12) > v8)
      {
        int v9 = (2 * v8) | 1;
        apr_size_t v10 = 8LL * (2 * v8 + 2);
        size_t v11 = apr_palloc(*(apr_pool_t **)ht, v10);
        unint64_t v12 = v11;
        if (v11) {
          bzero(v11, v10);
        }
        char v13 = (apr_hash_t *)((char *)ht + 16);
        *((void *)ht + 3) = 0LL;
        *((void *)ht + 4) = 0LL;
        *((void *)ht + 2) = ht;
        *((_DWORD *)ht + 10) = 0;
        while (1)
        {
          char v13 = apr_hash_next(v13);
          if (!v13) {
            break;
          }
          uint64_t v14 = *((void *)v13 + 1);
          unsigned int v15 = *(_DWORD *)(v14 + 8) & v9;
          *(void *)uint64_t v14 = v12[v15];
          v12[v15] = v14;
        }

        *((void *)ht + 1) = v12;
        *((_DWORD *)ht + 13) = v9;
      }
    }

    else
    {
      void *entry = *v7;
      *uint64_t v7 = *((void *)ht + 9);
      *((void *)ht + 9) = v7;
      --*((_DWORD *)ht + 12);
    }
  }

void apr_hash_clear(apr_hash_t *ht)
{
  *((void *)ht + 4) = 0LL;
  *((void *)ht + 2) = ht;
  *((void *)ht + 3) = 0LL;
  *((_DWORD *)ht + 10) = 0;
  uint64_t v2 = apr_hash_next((apr_hash_t *)((char *)ht + 16));
  if (v2)
  {
    unsigned int v3 = v2;
    do
    {
      apr_hash_set(ht, *(const void **)(*((void *)v3 + 1) + 16LL), *(void *)(*((void *)v3 + 1) + 24LL), 0LL);
      unsigned int v3 = apr_hash_next(v3);
    }

    while (v3);
  }

vm_address_t GTCoreAlloc(memory_object_size_t a1)
{
  vm_address_t address = 0LL;
  memory_object_size_t size = a1;
  mach_error_t memory_entry_64 = mach_make_memory_entry_64(mach_task_self_, &size, 0LL, 139267, &object_handle, 0);
  if (memory_entry_64)
  {
    mach_error_t v3 = memory_entry_64;
    if (!s_logUsingOsLog)
    {
      apr_size_t v10 = __stderrp;
      mach_error_string(memory_entry_64);
      fprintf(v10, "warning: failed to create memory entry error 0x%x (%s)\n");
      return 0LL;
    }

    unsigned int v4 = (os_log_s *)gt_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = mach_error_string(v3);
      *(_DWORD *)buf = 67109378;
      mach_error_t v17 = v3;
      __int16 v18 = 2080;
      uint64_t v19 = v5;
      timeval v6 = "warning: failed to create memory entry error 0x%x (%s)";
LABEL_9:
      _os_log_error_impl(&dword_0, v4, OS_LOG_TYPE_ERROR, v6, buf, 0x12u);
    }
  }

  else
  {
    mach_error_t v7 = vm_map(mach_task_self_, &address, a1, 0LL, 1, object_handle, 0LL, 0, 3, 3, 1u);
    if (!v7)
    {
      mach_port_deallocate(mach_task_self_, object_handle);
      return address;
    }

    mach_error_t v8 = v7;
    if (!s_logUsingOsLog)
    {
      unint64_t v12 = __stderrp;
      mach_error_string(v7);
      fprintf(v12, "warning: failed to map memory error 0x%x (%s)\n");
      return 0LL;
    }

    unsigned int v4 = (os_log_s *)gt_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v9 = mach_error_string(v8);
      *(_DWORD *)buf = 67109378;
      mach_error_t v17 = v8;
      __int16 v18 = 2080;
      uint64_t v19 = v9;
      timeval v6 = "warning: failed to map memory error 0x%x (%s)";
      goto LABEL_9;
    }
  }

  return 0LL;
}

uint64_t atomic_cleanup(uint64_t a1)
{
  if (hash_mutex == a1) {
    hash_mutex = 0LL;
  }
  return 0LL;
}

void apr_pool_destroy(apr_pool_t *p)
{
  for (uint64_t i = *((void *)p + 14); i; uint64_t i = *((void *)p + 14))
  {
    *((void *)p + 14) = *(void *)i;
    (*(void (**)(void))(i + 16))(*(void *)(i + 8));
  }

  *((void *)p + 14) = 0LL;
  while (1)
  {
    timeval v6 = (apr_pool_t *)*((void *)p + 1);
    if (!v6) {
      break;
    }
    apr_pool_destroy(v6);
  }

  while (1)
  {
    uint64_t v7 = *((void *)p + 4);
    if (!v7) {
      break;
    }
    *((void *)p + 4) = *(void *)v7;
    (*(void (**)(void))(v7 + 16))(*(void *)(v7 + 8));
  }

  free_proc_chain(*((unsigned int **)p + 7), v1, v2, v3);
  if (*(void *)p)
  {
    uint64_t v8 = *(void *)(*(void *)(*(void *)p + 48LL) + 24LL);
    if (v8) {
      pthread_mutex_lock((pthread_mutex_t *)(v8 + 8));
    }
    uint64_t v9 = *((void *)p + 2);
    **((void **)p + 3) = v9;
    if (v9) {
      *(void *)(*((void *)p + 2) + 24LL) = *((void *)p + 3);
    }
    if (v8) {
      pthread_mutex_unlock((pthread_mutex_t *)(v8 + 8));
    }
  }

  apr_size_t v10 = (unint64_t *)*((void *)p + 6);
  vm_address_t v11 = *((void *)p + 12);
  **(void **)(v11 + 8) = 0LL;
  if ((apr_pool_t *)v10[4] == p)
  {
    v10[3] = 0LL;
  }

  else
  {
    unint64_t v12 = v10[3];
    if (v12) {
      pthread_mutex_lock((pthread_mutex_t *)(v12 + 8));
    }
  }

  vm_address_t v13 = 0LL;
  unint64_t v14 = *v10;
  unint64_t v15 = v10[1];
  unint64_t v16 = v10[2];
  do
  {
    while (1)
    {
      while (1)
      {
        vm_address_t v17 = v11;
        vm_address_t v11 = *(void *)v11;
        unint64_t v18 = *(unsigned int *)(v17 + 16);
        if (!v15 || v16 > v18) {
          break;
        }
        *(void *)vm_address_t v17 = v13;
        vm_address_t v13 = v17;
        if (!v11) {
          goto LABEL_38;
        }
      }

      uint64_t v19 = (uint64_t *)&v10[v18];
      uint64_t v20 = v19[5];
      *(void *)vm_address_t v17 = v20;
      if (v14 < v18 && v20 == 0) {
        unint64_t v14 = v18;
      }
      v19[5] = v17;
      if (v16 <= v18)
      {
        unint64_t v16 = 0LL;
        if (!v11) {
          goto LABEL_38;
        }
      }

      else
      {
        v16 += ~v18;
        if (!v11) {
          goto LABEL_38;
        }
      }
    }

    *(void *)vm_address_t v17 = v10[5];
    v10[5] = v17;
    BOOL v22 = v16 > v18;
    v16 += ~v18;
    if (!v22) {
      unint64_t v16 = 0LL;
    }
  }

  while (v11);
LABEL_38:
  *apr_size_t v10 = v14;
  v10[2] = v16;
  unint64_t v23 = v10[3];
  if (v23) {
    pthread_mutex_unlock((pthread_mutex_t *)(v23 + 8));
  }
  if (v13)
  {
    do
    {
      vm_address_t v24 = *(void *)v13;
      vm_deallocate(mach_task_self_, v13, ((*(_DWORD *)(v13 + 16) << 12) + 4096));
      vm_address_t v13 = v24;
    }

    while (v24);
  }

  if ((apr_pool_t *)v10[4] == p) {
    apr_allocator_destroy((apr_allocator_t *)v10);
  }
}

unsigned int *free_proc_chain(unsigned int *result, uint64_t a2, apr_exit_why_e *a3, apr_wait_how_e a4)
{
  if (!result) {
    return result;
  }
  unsigned int v4 = result;
  uint64_t v5 = result;
  do
  {
    uint64_t result = (unsigned int *)apr_proc_wait(*(apr_proc_t **)v5, (int *)((char *)&dword_0 + 1), a3, a4);
    if ((_DWORD)result != 70006) {
      v5[2] = 0;
    }
    uint64_t v5 = (unsigned int *)*((void *)v5 + 2);
  }

  while (v5);
  timeval v6 = v4;
  do
  {
    unsigned int v7 = v6[2];
    if (v7 == 1)
    {
      uint64_t result = (unsigned int *)apr_proc_kill((apr_proc_t *)**(unsigned int **)v6, 9);
    }

    else if (v7 == 4 || v7 == 2)
    {
      uint64_t result = (unsigned int *)apr_proc_kill((apr_proc_t *)**(unsigned int **)v6, 15);
      if (!(_DWORD)result) {
        LODWORD(v5) = 1;
      }
    }

    timeval v6 = (unsigned int *)*((void *)v6 + 2);
  }

  while (v6);
  uint64_t v9 = v4;
  if (!(_DWORD)v5) {
    goto LABEL_29;
  }
  unint64_t v10 = 46875LL;
  v14.tv_usec = 46875;
  v14.__darwin_time_t tv_sec = 0LL;
  uint64_t result = (unsigned int *)select(0, 0LL, 0LL, 0LL, &v14);
  while (2)
  {
    uint64_t v11 = 0LL;
    unint64_t v12 = v4;
    do
    {
      uint64_t v13 = v11;
      if (v12[2] == 2)
      {
        uint64_t v11 = 1LL;
        uint64_t result = (unsigned int *)apr_proc_wait(*(apr_proc_t **)v12, (int *)((char *)&dword_0 + 1), a3, a4);
        if ((_DWORD)result == 70006) {
          goto LABEL_24;
        }
        v12[2] = 0;
      }

      uint64_t v11 = v13;
LABEL_24:
      unint64_t v12 = (unsigned int *)*((void *)v12 + 2);
    }

    while (v12);
    if ((_DWORD)v11 && v10 <= 0x2DC6BF)
    {
      v14.tv_usec = v10 % 0xF4240;
      v14.__darwin_time_t tv_sec = v10 / 0xF4240;
      uint64_t result = (unsigned int *)select(0, 0LL, 0LL, 0LL, &v14);
      v10 *= 2LL;
      continue;
    }

    break;
  }

  uint64_t v9 = v4;
  do
  {
LABEL_29:
    if (v9[2] == 2) {
      uint64_t result = (unsigned int *)apr_proc_kill((apr_proc_t *)**(unsigned int **)v9, 9);
    }
    uint64_t v9 = (unsigned int *)*((void *)v9 + 2);
  }

  while (v9);
  do
  {
    if (v4[2]) {
      uint64_t result = (unsigned int *)apr_proc_wait(*(apr_proc_t **)v4, 0LL, a3, a4);
    }
    unsigned int v4 = (unsigned int *)*((void *)v4 + 2);
  }

  while (v4);
  return result;
}

void apr_allocator_destroy(apr_allocator_t *allocator)
{
  for (uint64_t i = 0LL; i != 20; ++i)
  {
    apr_wait_how_e v3 = (char *)allocator + 8 * i;
    vm_address_t v6 = *((void *)v3 + 5);
    uint64_t v5 = (vm_address_t *)(v3 + 40);
    vm_address_t v4 = v6;
    if (v6)
    {
      do
      {
        *uint64_t v5 = *(void *)v4;
        vm_deallocate(mach_task_self_, v4, ((*(_DWORD *)(v4 + 16) << 12) + 4096));
        vm_address_t v4 = *v5;
      }

      while (*v5);
    }
  }

  vm_deallocate(mach_task_self_, (vm_address_t)allocator, 0xC8uLL);
}

void *allocator_alloc(unint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0LL;
  unint64_t v3 = (a2 + 4135) & 0xFFFFFFFFFFFFF000LL;
  unint64_t v4 = 0x2000LL;
  if (v3 > 0x2000) {
    unint64_t v4 = (a2 + 4135) & 0xFFFFFFFFFFFFF000LL;
  }
  if (v3 >= a2) {
    memory_object_size_t v5 = v4;
  }
  else {
    memory_object_size_t v5 = 0LL;
  }
  if (v3 >= a2)
  {
    unint64_t v6 = v4 >> 12;
    unint64_t v7 = (v4 >> 12) - 1;
    if (HIDWORD(v7)) {
      return 0LL;
    }
    unint64_t v9 = *a1;
    if (v7 <= *a1)
    {
      unint64_t v14 = a1[3];
      if (v14)
      {
        pthread_mutex_lock((pthread_mutex_t *)(v14 + 8));
        unint64_t v9 = *a1;
      }

      unint64_t v15 = &a1[v7];
      vm_address_t v17 = (void *)v15[5];
      unint64_t v16 = v15 + 5;
      uint64_t v2 = v17;
      BOOL v18 = v17 == 0LL;
      BOOL v19 = v7 < v9;
      if (v17) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v7 >= v9;
      }
      if (!v20)
      {
        do
        {
          __int128 v21 = (void *)v16[1];
          ++v16;
          uint64_t v2 = v21;
          BOOL v18 = v21 == 0LL;
          BOOL v19 = v6 < v9;
          if (v21) {
            BOOL v22 = 1;
          }
          else {
            BOOL v22 = v6 >= v9;
          }
          ++v6;
        }

        while (!v22);
      }

      if (!v18)
      {
        uint64_t v25 = *v2;
        void *v16 = *v2;
        if (v25) {
          BOOL v19 = 1;
        }
        if (!v19)
        {
          __n128 v26 = v16 - 1;
          do
          {
            if (*v26--) {
              BOOL v28 = 1;
            }
            else {
              BOOL v28 = v9 == 1;
            }
            --v9;
          }

          while (!v28);
          *a1 = v9;
        }

        uint64_t v13 = (*((_DWORD *)v2 + 4) + 1);
LABEL_43:
        unint64_t v29 = a1[2] + v13;
        if (v29 >= a1[1]) {
          unint64_t v29 = a1[1];
        }
        a1[2] = v29;
        unint64_t v30 = a1[3];
        if (v30) {
          pthread_mutex_unlock((pthread_mutex_t *)(v30 + 8));
        }
        goto LABEL_47;
      }
    }

    else
    {
      uint64_t v2 = a1 + 5;
      if (!a1[5])
      {
LABEL_30:
        vm_address_t v24 = GTCoreAlloc(v5);
        uint64_t v2 = (void *)v24;
        if (!v24) {
          return v2;
        }
        *(_DWORD *)(v24 + 16) = v7;
        *(void *)(v24 + 32) = v24 + v5;
LABEL_47:
        *uint64_t v2 = 0LL;
        v2[3] = v2 + 5;
        return v2;
      }

      unint64_t v10 = a1[3];
      if (v10) {
        pthread_mutex_lock((pthread_mutex_t *)(v10 + 8));
      }
      while (1)
      {
        uint64_t v11 = v2;
        uint64_t v2 = (void *)*v2;
        if (!v2) {
          break;
        }
        unint64_t v12 = *((unsigned int *)v2 + 4);
        if (v7 <= v12)
        {
          *uint64_t v11 = *v2;
          uint64_t v13 = (v12 + 1);
          goto LABEL_43;
        }
      }
    }

    unint64_t v23 = a1[3];
    if (v23) {
      pthread_mutex_unlock((pthread_mutex_t *)(v23 + 8));
    }
    goto LABEL_30;
  }

  return v2;
}

apr_status_t apr_pool_create_ex( apr_pool_t **newpool, apr_pool_t *parent, apr_abortfunc_t abort_fn, apr_allocator_t *allocator)
{
  unint64_t v4 = (unint64_t *)abort_fn;
  apr_pool_t *newpool = 0LL;
  if (parent) {
    unint64_t v6 = parent;
  }
  else {
    unint64_t v6 = (apr_pool_t *)global_pool;
  }
  if (v6)
  {
    unint64_t v7 = (apr_pool_t *)*((void *)v6 + 8);
    if (abort_fn) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  unint64_t v7 = 0LL;
  if (!abort_fn) {
LABEL_6:
  }
    unint64_t v4 = (unint64_t *)*((void *)v6 + 6);
LABEL_7:
  uint64_t v8 = (apr_pool_t *)allocator_alloc(v4, 0x1FD8uLL);
  if (v8)
  {
    *(void *)uint64_t v8 = v8;
    *((void *)v8 + 1) = v8;
    unint64_t v9 = (apr_pool_t **)*((void *)v8 + 3);
    *((void *)v8 + 3) = v9 + 15;
    v9[12] = v8;
    v9[13] = (apr_pool_t *)(v9 + 15);
    v9[14] = 0LL;
    v9[6] = (apr_pool_t *)v4;
    v9[7] = 0LL;
    void v9[4] = 0LL;
    v9[5] = 0LL;
    v9[10] = 0LL;
    v9[11] = v8;
    v9[8] = v7;
    v9[9] = 0LL;
    unsigned int *v9 = v6;
    v9[1] = 0LL;
    if (v6)
    {
      uint64_t v10 = *(void *)(*((void *)v6 + 6) + 24LL);
      if (v10) {
        pthread_mutex_lock((pthread_mutex_t *)(v10 + 8));
      }
      uint64_t v13 = (apr_pool_t *)*((void *)v6 + 1);
      unint64_t v12 = (apr_pool_t ***)((char *)v6 + 8);
      uint64_t v11 = v13;
      v9[2] = v13;
      if (v13) {
        *((void *)v11 + 3) = v9 + 2;
      }
      *unint64_t v12 = v9;
      v9[3] = (apr_pool_t *)v12;
      if (v10) {
        pthread_mutex_unlock((pthread_mutex_t *)(v10 + 8));
      }
    }

    else
    {
      v9[2] = 0LL;
      v9[3] = 0LL;
    }

    apr_status_t v14 = 0;
    apr_pool_t *newpool = (apr_pool_t *)v9;
  }

  else
  {
    apr_status_t v14 = 12;
    if (v7) {
      ((void (*)(uint64_t))v7)(12LL);
    }
  }

  return v14;
}

void *__cdecl apr_palloc(apr_pool_t *p, apr_size_t size)
{
  apr_size_t v3 = (size + 7) & 0xFFFFFFFFFFFFFFF8LL;
  if (v3 < size)
  {
LABEL_2:
    unint64_t v4 = (void (*)(uint64_t))*((void *)p + 8);
    if (v4) {
      v4(12LL);
    }
    return 0LL;
  }

  unint64_t v6 = (void *)*((void *)p + 11);
  uint64_t result = (void *)v6[3];
  if (v3 <= v6[4] - (void)result)
  {
    v6[3] = (char *)result + v3;
    return result;
  }

  unint64_t v7 = (void *)*v6;
  if (v3 <= *(void *)(*v6 + 32LL) - *(void *)(*v6 + 24LL))
  {
    *(void *)v7[1] = *v7;
    *(void *)(*v7 + 8LL) = v7[1];
  }

  else
  {
    unint64_t v7 = allocator_alloc(*((unint64_t **)p + 6), (size + 7) & 0xFFFFFFFFFFFFFFF8LL);
    if (!v7) {
      goto LABEL_2;
    }
  }

  *((_DWORD *)v7 + 5) = 0;
  uint64_t result = (void *)v7[3];
  v7[3] = (char *)result + v3;
  uint64_t v8 = (void *)v6[1];
  v7[1] = v8;
  *uint64_t v8 = v7;
  *unint64_t v7 = v6;
  v6[1] = v7;
  *((void *)p + 11) = v7;
  unint64_t v9 = (uint64_t)(v6[4] - v6[3]) >> 12;
  *((_DWORD *)v6 + 5) = v9;
  if (v9 < *(unsigned int *)(*v6 + 20LL))
  {
    uint64_t v10 = (uint64_t *)*v6;
    do
      uint64_t v10 = (uint64_t *)*v10;
    while (*((_DWORD *)v10 + 5) > v9);
    *unint64_t v7 = *v6;
    *(void *)(*v6 + 8LL) = v6[1];
    uint64_t v11 = (void *)v10[1];
    v6[1] = v11;
    *uint64_t v11 = v6;
    *unint64_t v6 = v10;
    v10[1] = (uint64_t)v6;
  }

  return result;
}

void apr_pool_clear(apr_pool_t *p)
{
  for (uint64_t i = *((void *)p + 14); i; uint64_t i = *((void *)p + 14))
  {
    *((void *)p + 14) = *(void *)i;
    (*(void (**)(void))(i + 16))(*(void *)(i + 8));
  }

  *((void *)p + 14) = 0LL;
  while (1)
  {
    unint64_t v6 = (apr_pool_t *)*((void *)p + 1);
    if (!v6) {
      break;
    }
    apr_pool_destroy(v6);
  }

  uint64_t v8 = (uint64_t *)((char *)p + 32);
  uint64_t v7 = *((void *)p + 4);
  if (v7)
  {
    do
    {
      *uint64_t v8 = *(void *)v7;
      (*(void (**)(void))(v7 + 16))(*(void *)(v7 + 8));
      uint64_t v7 = *v8;
    }

    while (*v8);
  }

  *uint64_t v8 = 0LL;
  *((void *)p + 5) = 0LL;
  free_proc_chain(*((unsigned int **)p + 7), v1, v2, v3);
  *((void *)p + 7) = 0LL;
  *((void *)p + 9) = 0LL;
  uint64_t v10 = *((void *)p + 12);
  uint64_t v9 = *((void *)p + 13);
  *((void *)p + 11) = v10;
  *(void *)(v10 + 24) = v9;
  if (*(void *)v10 != v10)
  {
    **(void **)(v10 + 8) = 0LL;
    uint64_t v11 = (unint64_t *)*((void *)p + 6);
    unint64_t v12 = *(vm_address_t **)v10;
    unint64_t v13 = v11[3];
    if (v13) {
      pthread_mutex_lock((pthread_mutex_t *)(v13 + 8));
    }
    vm_address_t v14 = 0LL;
    unint64_t v15 = *v11;
    unint64_t v16 = v11[1];
    unint64_t v17 = v11[2];
    do
    {
      while (1)
      {
        while (1)
        {
          BOOL v18 = v12;
          unint64_t v12 = (vm_address_t *)*v12;
          unint64_t v19 = *((unsigned int *)v18 + 4);
          if (!v16 || v17 > v19) {
            break;
          }
          *BOOL v18 = v14;
          vm_address_t v14 = (vm_address_t)v18;
          if (!v12) {
            goto LABEL_30;
          }
        }

        BOOL v20 = &v11[v19];
        vm_address_t v21 = v20[5];
        *BOOL v18 = v21;
        if (v15 < v19 && v21 == 0) {
          unint64_t v15 = v19;
        }
        v20[5] = (unint64_t)v18;
        if (v17 <= v19)
        {
          unint64_t v17 = 0LL;
          if (!v12) {
            goto LABEL_30;
          }
        }

        else
        {
          v17 += ~v19;
          if (!v12) {
            goto LABEL_30;
          }
        }
      }

      *BOOL v18 = v11[5];
      v11[5] = (unint64_t)v18;
      BOOL v23 = v17 > v19;
      v17 += ~v19;
      if (!v23) {
        unint64_t v17 = 0LL;
      }
    }

    while (v12);
LABEL_30:
    *uint64_t v11 = v15;
    v11[2] = v17;
    unint64_t v24 = v11[3];
    if (v24) {
      pthread_mutex_unlock((pthread_mutex_t *)(v24 + 8));
    }
    if (v14)
    {
      do
      {
        vm_address_t v25 = *(void *)v14;
        vm_deallocate(mach_task_self_, v14, ((*(_DWORD *)(v14 + 16) << 12) + 4096));
        vm_address_t v14 = v25;
      }

      while (v25);
    }

    *(void *)uint64_t v10 = v10;
    *(void *)(v10 + 8) = v10;
  }

uint64_t psprintf_flush(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  size_t v4 = *(void *)a1 - *(void *)(v3 + 24);
  if (2 * v4 <= 0x20) {
    unint64_t v5 = 32LL;
  }
  else {
    unint64_t v5 = 2 * v4;
  }
  if (!*(_BYTE *)(a1 + 32))
  {
    unint64_t v6 = *(void **)v3;
    if (v5 <= *(void *)(*(void *)v3 + 32LL) - *(void *)(*(void *)v3 + 24LL))
    {
      *(void *)v6[1] = *v6;
      *(void *)(*v6 + 8LL) = v6[1];
      uint64_t v10 = *(void **)(v3 + 8);
      v6[1] = v10;
      *uint64_t v10 = v6;
      *unint64_t v6 = v3;
      *(void *)(v3 + 8) = v6;
      *((_DWORD *)v6 + 5) = 0;
      *(void *)(v2 + 88) = v6;
      unint64_t v11 = (uint64_t)(*(void *)(v3 + 32) - *(void *)(v3 + 24)) >> 12;
      *(_DWORD *)(v3 + 20) = v11;
      if (v11 < *(unsigned int *)(*(void *)v3 + 20LL))
      {
        unint64_t v12 = *(void **)v3;
        do
          unint64_t v12 = (void *)*v12;
        while (*((_DWORD *)v12 + 5) > v11);
        *unint64_t v6 = *(void *)v3;
        *(void *)(*(void *)v3 + 8LL) = *(void *)(v3 + 8);
        unint64_t v13 = (void *)v12[1];
        *(void *)(v3 + 8) = v13;
        *unint64_t v13 = v3;
        *(void *)uint64_t v3 = v12;
        v12[1] = v3;
        unint64_t v6 = *(void **)(v2 + 88);
      }

      goto LABEL_10;
    }
  }

  uint64_t v7 = allocator_alloc(*(unint64_t **)(v2 + 48), v5);
  if (v7)
  {
    unint64_t v6 = v7;
    if (*(_BYTE *)(a1 + 32))
    {
      *(void *)uint64_t v3 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v3;
    }

    *(_BYTE *)(a1 + 32) = 1;
LABEL_10:
    memcpy((void *)v6[3], *(const void **)(v3 + 24), v4);
    uint64_t result = 0LL;
    *(void *)(a1 + 16) = v6;
    uint64_t v9 = v6[4] - 1LL;
    *(void *)a1 = v6[3] + v4;
    *(void *)(a1 + 8) = v9;
    return result;
  }

  return 0xFFFFFFFFLL;
}

char *apr_psprintf(apr_pool_t *p, const char *fmt, ...)
{
  vm_address_t v45 = *((void *)p + 11);
  uint64_t v46 = p;
  size_t v4 = *(char **)(v45 + 32);
  c.curpos = *(char **)(v45 + 24);
  c.endpos = v4 - 1;
  char v47 = 0;
  vm_address_t address = 0LL;
  if (c.curpos == v4 && psprintf_flush((uint64_t)&c) == -1
    || apr_vformatter((int (__cdecl *)(apr_vformatter_buff_t *))psprintf_flush, &c, fmt, va) == -1)
  {
    BOOL v28 = (void (*)(uint64_t))*((void *)p + 8);
    if (v28) {
      v28(12LL);
    }
    if (v47)
    {
      unint64_t v29 = (vm_address_t *)v45;
      *(void *)vm_address_t v45 = address;
      unint64_t v30 = (unint64_t *)*((void *)p + 6);
      unint64_t v31 = v30[3];
      if (v31) {
        pthread_mutex_lock((pthread_mutex_t *)(v31 + 8));
      }
      vm_address_t v32 = 0LL;
      unint64_t v33 = *v30;
      unint64_t v34 = v30[1];
      unint64_t v35 = v30[2];
      do
      {
        while (1)
        {
          while (1)
          {
            uint64_t v36 = v29;
            unint64_t v29 = (vm_address_t *)*v29;
            unint64_t v37 = *((unsigned int *)v36 + 4);
            if (!v34 || v35 > v37) {
              break;
            }
            *uint64_t v36 = v32;
            vm_address_t v32 = (vm_address_t)v36;
            if (!v29) {
              goto LABEL_59;
            }
          }

          uint8x8_t v38 = &v30[v37];
          vm_address_t v39 = v38[5];
          *uint64_t v36 = v39;
          if (v33 < v37 && v39 == 0) {
            unint64_t v33 = v37;
          }
          v38[5] = (unint64_t)v36;
          if (v35 <= v37)
          {
            unint64_t v35 = 0LL;
            if (!v29) {
              goto LABEL_59;
            }
          }

          else
          {
            v35 += ~v37;
            if (!v29) {
              goto LABEL_59;
            }
          }
        }

        *uint64_t v36 = v30[5];
        v30[5] = (unint64_t)v36;
        BOOL v19 = v35 > v37;
        v35 += ~v37;
        if (!v19) {
          unint64_t v35 = 0LL;
        }
      }

      while (v29);
LABEL_59:
      *unint64_t v30 = v33;
      v30[2] = v35;
      unint64_t v41 = v30[3];
      if (v41) {
        pthread_mutex_unlock((pthread_mutex_t *)(v41 + 8));
      }
      if (v32)
      {
        do
        {
          vm_address_t v42 = *(void *)v32;
          vm_deallocate(mach_task_self_, v32, ((*(_DWORD *)(v32 + 16) << 12) + 4096));
          vm_address_t v32 = v42;
        }

        while (v42);
      }
    }

    return 0LL;
  }

  else
  {
    unint64_t v5 = c.curpos++;
    *unint64_t v5 = 0;
    unint64_t v6 = *(char **)(v45 + 24);
    *(void *)(v45 + 24) = &v6[(c.curpos - v6 + 7) & 0xFFFFFFFFFFFFFFF8LL];
    uint64_t v7 = (vm_address_t *)address;
    if (address)
    {
      uint64_t v8 = (unint64_t *)*((void *)p + 6);
      unint64_t v9 = v8[3];
      if (v9) {
        pthread_mutex_lock((pthread_mutex_t *)(v9 + 8));
      }
      vm_address_t v10 = 0LL;
      unint64_t v11 = *v8;
      unint64_t v12 = v8[1];
      unint64_t v13 = v8[2];
      do
      {
        while (1)
        {
          while (1)
          {
            vm_address_t v14 = v7;
            uint64_t v7 = (vm_address_t *)*v7;
            unint64_t v15 = *((unsigned int *)v14 + 4);
            if (!v12 || v13 > v15) {
              break;
            }
            *vm_address_t v14 = v10;
            vm_address_t v10 = (vm_address_t)v14;
            if (!v7) {
              goto LABEL_26;
            }
          }

          unint64_t v16 = &v8[v15];
          vm_address_t v17 = v16[5];
          *vm_address_t v14 = v17;
          if (v11 < v15 && v17 == 0) {
            unint64_t v11 = v15;
          }
          v16[5] = (unint64_t)v14;
          if (v13 <= v15)
          {
            unint64_t v13 = 0LL;
            if (!v7) {
              goto LABEL_26;
            }
          }

          else
          {
            v13 += ~v15;
            if (!v7) {
              goto LABEL_26;
            }
          }
        }

        *vm_address_t v14 = v8[5];
        v8[5] = (unint64_t)v14;
        BOOL v19 = v13 > v15;
        v13 += ~v15;
        if (!v19) {
          unint64_t v13 = 0LL;
        }
      }

      while (v7);
LABEL_26:
      *uint64_t v8 = v11;
      v8[2] = v13;
      unint64_t v20 = v8[3];
      if (v20) {
        pthread_mutex_unlock((pthread_mutex_t *)(v20 + 8));
      }
      if (v10)
      {
        do
        {
          vm_address_t v21 = *(void *)v10;
          vm_deallocate(mach_task_self_, v10, ((*(_DWORD *)(v10 + 16) << 12) + 4096));
          vm_address_t v10 = v21;
        }

        while (v21);
      }
    }

    if (v47)
    {
      BOOL v22 = (uint64_t *)*((void *)p + 11);
      BOOL v23 = (void *)v45;
      *(_DWORD *)(v45 + 20) = 0;
      unint64_t v24 = (void *)v22[1];
      v23[1] = v24;
      *unint64_t v24 = v23;
      *BOOL v23 = v22;
      v22[1] = (uint64_t)v23;
      *((void *)p + 11) = v23;
      unint64_t v25 = (v22[4] - v22[3]) >> 12;
      *((_DWORD *)v22 + 5) = v25;
      if (v25 < *(unsigned int *)(*v22 + 20))
      {
        __n128 v26 = (uint64_t *)*v22;
        do
          __n128 v26 = (uint64_t *)*v26;
        while (*((_DWORD *)v26 + 5) > v25);
        *BOOL v23 = *v22;
        *(void *)(*v22 + 8) = v22[1];
        __int128 v27 = (void *)v26[1];
        v22[1] = (uint64_t)v27;
        *__int128 v27 = v22;
        *BOOL v22 = (uint64_t)v26;
        v26[1] = (uint64_t)v22;
      }
    }
  }

  return v6;
}

void apr_pool_cleanup_register( apr_pool_t *p, const void *data, apr_status_t (__cdecl *plain_cleanup)(void *), apr_status_t (__cdecl *child_cleanup)(void *))
{
  if (p)
  {
    uint64_t v7 = (void *)*((void *)p + 5);
    if (v7) {
      *((void *)p + 5) = *v7;
    }
    else {
      uint64_t v7 = apr_palloc(p, 0x20uLL);
    }
    v7[2] = plain_cleanup;
    v7[3] = apr_pool_cleanup_null;
    *uint64_t v7 = *((void *)p + 4);
    v7[1] = data;
    *((void *)p + 4) = v7;
  }

apr_status_t apr_pool_cleanup_null(void *data)
{
  return 0;
}

apr_status_t apr_proc_wait(apr_proc_t *proc, int *exitcode, apr_exit_why_e *exitwhy, apr_wait_how_e waithow)
{
  if ((_DWORD)exitcode) {
    int v5 = 3;
  }
  else {
    int v5 = 2;
  }
  while (1)
  {
    pid_t v6 = waitpid(proc->pid, &v8, v5);
    if ((v6 & 0x80000000) == 0) {
      break;
    }
    if (*__error() != 4) {
      return *__error();
    }
  }

  if (!v6) {
    return 70006;
  }
  proc->pid = v6;
  if ((~v8 & 0x7F) != 0) {
    return 70005;
  }
  else {
    return 20014;
  }
}

int apr_vformatter( int (__cdecl *flush_func)(apr_vformatter_buff_t *), apr_vformatter_buff_t *c, const char *fmt, va_list ap)
{
  int v5 = c;
  unint64_t v189 = 0LL;
  unsigned int v187 = 0;
  unint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  int v8 = 0;
  uint64_t v195 = 0LL;
  va_list v196 = ap;
  curpos = c->curpos;
  endpos = c->endpos;
LABEL_2:
  LOBYTE(v10) = *fmt;
  do
  {
    while (2)
    {
      if (v10 != 37)
      {
        if (!(_BYTE)v10)
        {
          v5->curpos = curpos;
          return v8;
        }

        if (curpos)
        {
          if (curpos >= endpos)
          {
            v5->curpos = curpos;
            curpos = v5->curpos;
            unint64_t v53 = v5->endpos;
            LOBYTE(v10) = *fmt;
          }

          else
          {
            unint64_t v53 = endpos;
          }

          *curpos++ = v10;
        }

        else
        {
          unint64_t v53 = endpos;
        }

        endpos = v53;
        ++v8;
LABEL_452:
        ++fmt;
        goto LABEL_2;
      }

      int v12 = fmt[1];
      unint64_t v11 = fmt + 1;
      uint64_t v13 = v12;
      if (v12 < 0)
      {
        if (__maskrune(v13, 0x1000uLL))
        {
LABEL_6:
          int v191 = 0;
          int v14 = 0;
          int v15 = 0;
          int v16 = 0;
          int v17 = 1;
          int v18 = 32;
          apr_size_t v19 = 1LL;
          goto LABEL_42;
        }
      }

      else if ((_DefaultRuneLocale.__runetype[v13] & 0x1000) != 0)
      {
        goto LABEL_6;
      }

      int v14 = 0;
      int v15 = 0;
      int v16 = 0;
      apr_size_t v19 = 1LL;
      int v18 = 32;
      while (1)
      {
        unsigned int v20 = *(unsigned __int8 *)v11;
        if (v20 <= 0x2A) {
          break;
        }
        switch(v20)
        {
          case '0':
            int v18 = 48;
            break;
          case '-':
            apr_size_t v19 = 0LL;
            break;
          case '+':
            int v15 = 1;
            break;
          default:
            goto LABEL_21;
        }

LABEL_310:
              LOBYTE(v35) = 0;
              LOBYTE(v16) = 0;
              unint64_t v111 = (_BYTE *)(&v202[3] - v7);
LABEL_311:
              uint64_t v115 = (_BYTE *)v189;
              else {
                int v116 = v17;
              }
            }

            else
            {
              if (v37 != 84)
              {
                uint8x8_t v40 = flush_func;
                if (v37 != 109) {
                  goto LABEL_207;
                }
                uint64_t v54 = (unsigned int **)v196;
                v196 += 8;
                unint64_t v55 = *v54;
                if (v55)
                {
                  unsigned int v56 = *v55;
                  if ((int)*v55 > 19999)
                  {
                    if (v56 >> 6 > 0x752)
                    {
                      if (v56 > 0xA392F)
                      {
                        if (v56 > 0xAFC7F)
                        {
                          uint64_t v161 = 0LL;
                          unint64_t v162 = "Unrecognized resolver error";
                          if (v56 == 720004) {
                            unint64_t v162 = "No address for host";
                          }
                          uint64_t v163 = "Unknown host";
                          if (v56 != 720001) {
                            uint64_t v163 = v162;
                          }
                          while (1)
                          {
                            int v164 = v163[v161];
                            __n_4[v161] = v164;
                            if (!v164) {
                              break;
                            }
                            if (++v161 == 510)
                            {
LABEL_500:
                              uint64_t v180 = &v202[1];
                              goto LABEL_501;
                            }
                          }
                        }

                        else
                        {
                          uint64_t v158 = gai_strerror(v56 - 670000);
                          if (v158)
                          {
                            uint64_t v159 = 0LL;
                            while (1)
                            {
                              int v160 = v158[v159];
                              __n_4[v159] = v160;
                              if (!v160) {
                                break;
                              }
                              if (++v159 == 510) {
                                goto LABEL_500;
                              }
                            }
                          }

                          else
                          {
                            uint64_t v180 = __n_4;
LABEL_501:
                            char *v180 = 0;
                          }
                        }
                      }

                      else
                      {
                        for (uint64_t i = 0LL; ; ++i)
                        {
                          __n_4[i] = aAprDoesNotUnde[i];
                          if (i == 39) {
                            break;
                          }
                        }
                      }
                    }

                    else
                    {
                      uint8x8_t v146 = "Could not perform a stat on the file.";
                      switch(v56)
                      {
                        case 0x4E21u:
                          break;
                        case 0x4E22u:
                          uint8x8_t v146 = "A new pool could not be created.";
                          break;
                        case 0x4E23u:
                        case 0x4E32u:
LABEL_478:
                          uint8x8_t v146 = "Error string not specified yet";
                          break;
                        case 0x4E24u:
                          uint8x8_t v146 = "An invalid date has been provided";
                          break;
                        case 0x4E25u:
                          uint8x8_t v146 = "An invalid socket was returned";
                          break;
                        case 0x4E26u:
                          uint8x8_t v146 = "No process was provided and one was required.";
                          break;
                        case 0x4E27u:
                          uint8x8_t v146 = "No time was provided and one was required.";
                          break;
                        case 0x4E28u:
                          uint8x8_t v146 = "No directory was provided and one was required.";
                          break;
                        case 0x4E29u:
                          uint8x8_t v146 = "No lock was provided and one was required.";
                          break;
                        case 0x4E2Au:
                          uint8x8_t v146 = "No poll structure was provided and one was required.";
                          break;
                        case 0x4E2Bu:
                          uint8x8_t v146 = "No socket was provided and one was required.";
                          break;
                        case 0x4E2Cu:
                          uint8x8_t v146 = "No thread was provided and one was required.";
                          break;
                        case 0x4E2Du:
                          uint8x8_t v146 = "No thread key structure was provided and one was required.";
                          break;
                        case 0x4E2Eu:
                          uint8x8_t v146 = "Internal error (specific information not available)";
                          break;
                        case 0x4E2Fu:
                          uint8x8_t v146 = "No shared memory is currently available";
                          break;
                        case 0x4E30u:
                          uint8x8_t v146 = "The specified IP address is invalid.";
                          break;
                        case 0x4E31u:
                          uint8x8_t v146 = "The specified network mask is invalid.";
                          break;
                        case 0x4E33u:
                          uint8x8_t v146 = "DSO load failed";
                          break;
                        case 0x4E34u:
                          uint8x8_t v146 = "The given path is absolute";
                          break;
                        case 0x4E35u:
                          uint8x8_t v146 = "The given path is relative";
                          break;
                        case 0x4E36u:
                          uint8x8_t v146 = "The given path is incomplete";
                          break;
                        case 0x4E37u:
                          uint8x8_t v146 = "The given path was above the root path";
                          break;
                        case 0x4E38u:
                          uint8x8_t v146 = "The given path is misformatted or contained invalid characters";
                          break;
                        case 0x4E39u:
                          uint8x8_t v146 = "The given path contained wildcard characters";
                          break;
                        case 0x4E3Au:
                          uint8x8_t v146 = "Could not find the requested symbol.";
                          break;
                        case 0x4E3Bu:
                          uint8x8_t v146 = "The process is not recognized.";
                          break;
                        case 0x4E3Cu:
                          uint8x8_t v146 = "Not enough entropy to continue.";
                          break;
                        default:
                          switch(v56)
                          {
                            case 0x11171u:
                              uint8x8_t v146 = "Your code just forked, and you are currently executing in the child process";
                              break;
                            case 0x11172u:
                              uint8x8_t v146 = "Your code just forked, and you are currently executing in the parent process";
                              break;
                            case 0x11173u:
                              uint8x8_t v146 = "The specified thread is detached";
                              break;
                            case 0x11174u:
                              uint8x8_t v146 = "The specified thread is not detached";
                              break;
                            case 0x11175u:
                              uint8x8_t v146 = "The specified child process is done executing";
                              break;
                            case 0x11176u:
                              uint8x8_t v146 = "The specified child process is not done executing";
                              break;
                            case 0x11177u:
                              uint8x8_t v146 = "The timeout specified has expired";
                              break;
                            case 0x11178u:
                              uint8x8_t v146 = "Partial results are valid but processing is incomplete";
                              break;
                            case 0x1117Cu:
                              uint8x8_t v146 = "Bad character specified on command line";
                              break;
                            case 0x1117Du:
                              uint8x8_t v146 = "Missing parameter for the specified command line option";
                              break;
                            case 0x1117Eu:
                              uint8x8_t v146 = "End of file found";
                              break;
                            case 0x1117Fu:
                              uint8x8_t v146 = "Could not find specified socket in poll list.";
                              break;
                            case 0x11183u:
                              uint8x8_t v146 = "Shared memory is implemented anonymously";
                              break;
                            case 0x11184u:
                              uint8x8_t v146 = "Shared memory is implemented using files";
                              break;
                            case 0x11185u:
                              uint8x8_t v146 = "Shared memory is implemented using a key system";
                              break;
                            case 0x11186u:
                              uint8x8_t v146 = "There is no error, this value signifies an initialized error code";
                              break;
                            case 0x11187u:
                              uint8x8_t v146 = "This function has not been implemented on this platform";
                              break;
                            case 0x11188u:
                              uint8x8_t v146 = "passwords do not match";
                              break;
                            case 0x11189u:
                              uint8x8_t v146 = "The given lock was busy.";
                              break;
                            default:
                              goto LABEL_478;
                          }

                          break;
                      }

                      uint64_t v181 = 0LL;
                      while (1)
                      {
                        int v182 = v146[v181];
                        __n_4[v181] = v182;
                        if (!v182) {
                          break;
                        }
                        if (++v181 == 510) {
                          goto LABEL_500;
                        }
                      }
                    }
                  }

                  else if (strerror_r(v56, __n_4, 0x1FFuLL) < 0)
                  {
                    for (uint64_t j = 0LL; ; ++j)
                    {
                      __n_4[j] = aAprDoesNotUnde[j];
                      if (j == 39) {
                        break;
                      }
                    }
                  }

                  uint64_t v7 = __n_4;
                  size_t v142 = strlen(__n_4);
                  LODWORD(v19) = v192;
                }

                else
                {
                  size_t v142 = 6LL;
                  uint64_t v7 = "(null)";
                }

                __int128 v101 = endpos;
                LOBYTE(v35) = 0;
                LOBYTE(v16) = 0;
                uint64_t v195 = (_BYTE *)v142;
                int v18 = 32;
                goto LABEL_412;
              }

              unint64_t v112 = (unsigned int **)v196;
              v196 += 8;
              unint64_t v35 = *v112;
              uint8x8_t v40 = flush_func;
              if (!v35) {
                goto LABEL_217;
              }
              int v113 = v17;
              uint64_t v114 = conv_10_quad(*(void *)v35, 1, __s, (uint64_t)&v202[3], &v195);
              LODWORD(v19) = v192;
              uint64_t v7 = (char *)v114;
              LOBYTE(v35) = 0;
              LOBYTE(v16) = 0;
              unint64_t v111 = v195;
              uint64_t v115 = (_BYTE *)v189;
              else {
                int v116 = v113;
              }
            }

            if (!v116) {
              unint64_t v111 = v115;
            }
LABEL_316:
            uint64_t v195 = v111;
LABEL_317:
            int v18 = 32;
            goto LABEL_318;
          case 's':
            id v89 = (const char **)v196;
            v196 += 8;
            uint64_t v7 = (char *)*v89;
            if (!*v89)
            {
              LOBYTE(v35) = 0;
              LOBYTE(v16) = 0;
              uint64_t v195 = (_BYTE *)(&dword_4 + 2);
              int v18 = 32;
              uint64_t v7 = "(null)";
              goto LABEL_304;
            }

            if ((v17 & 1) != 0)
            {
              size_t v90 = strlen(*v89);
              LODWORD(v19) = v192;
              LOBYTE(v35) = 0;
              LOBYTE(v16) = 0;
              uint64_t v195 = (_BYTE *)v90;
              goto LABEL_144;
            }

            uint64_t v195 = 0LL;
            uint8x8_t v40 = flush_func;
            LOBYTE(v35) = v189;
            if (v189)
            {
              uint64_t v141 = 0LL;
              while (v7[v141])
              {
                uint64_t v195 = (_BYTE *)++v141;
                int v18 = 32;
                if (v189 == v141) {
                  goto LABEL_294;
                }
              }

              LOBYTE(v35) = 0;
            }

            else
            {
              unint64_t v189 = 0LL;
            }

            LOBYTE(v16) = 0;
            goto LABEL_317;
          case 'u':
            if (v32)
            {
              uint64_t v91 = (unint64_t *)v196;
              v196 += 8;
              char v92 = v17;
              uint64_t v93 = conv_10_quad(*v91, 1, &v193, (uint64_t)&v202[3], &v195);
              LOBYTE(v17) = v92;
              LODWORD(v19) = v192;
              uint64_t v7 = (char *)v93;
            }

            else
            {
              unint64_t v130 = (unsigned int *)v196;
              v196 += 8;
              unsigned int v131 = *v130;
              if ((_DWORD)v35) {
                unsigned int v132 = (unsigned __int16)v131;
              }
              else {
                unsigned int v132 = v131;
              }
              unsigned int v193 = 0;
              uint64_t v7 = &v202[3];
              do
              {
                *--uint64_t v7 = v132 % 0xA + 48;
                BOOL v75 = v132 > 9;
                v132 /= 0xAu;
              }

              while (v75);
              uint64_t v195 = (_BYTE *)(&v202[3] - v7);
            }

            uint8x8_t v40 = flush_func;
            if ((v17 & 1) != 0)
            {
              LOBYTE(v35) = 0;
              LOBYTE(v16) = 0;
            }

            else
            {
              unint64_t v133 = 511LL;
              if (v189 + 1 < 0x200) {
                unint64_t v133 = v189;
              }
LABEL_294:
              LOBYTE(v35) = 0;
              LOBYTE(v16) = 0;
            }

            goto LABEL_318;
          case 'x':
            goto LABEL_96;
          default:
            if (v36 == 71)
            {
LABEL_106:
              uint64_t v186 = v5;
              uint64_t v69 = v189;
              if (v189 <= 1) {
                uint64_t v69 = 1LL;
              }
              if (v17) {
                uint64_t v70 = 6LL;
              }
              else {
                uint64_t v70 = v69;
              }
              uint64_t v71 = (double *)v196;
              v196 += 8;
              apr_cvt(v70, &__n, &v202[3], 1, __s, *v71);
              p_n_6 = __n_5;
              if (*(_DWORD *)&v202[3])
              {
                __n_5[0] = 45;
                p_n_6 = &__n_6;
              }

              unint64_t v189 = v70;
              if ((int)v70 >= 2)
              {
                uint64_t v70 = v70;
                do
                {
                  uint64_t v73 = v70 - 1;
                  --v70;
                }

                while ((unint64_t)(v73 + 1) > 2);
                LODWORD(v70) = 1;
              }

LABEL_88:
  uint64_t v58 = (double *)v196;
  v196 += 8;
  if (fabs(*v58) == INFINITY)
  {
    LOBYTE(v35) = 0;
    LOBYTE(v16) = 0;
    uint64_t v195 = (_BYTE *)(&dword_0 + 3);
    uint64_t v7 = "inf";
    goto LABEL_304;
  }

  if (v17) {
    int v59 = 6;
  }
  else {
    int v59 = v189;
  }
  int v184 = *(unsigned __int8 *)fmt;
  uint64_t v186 = v5;
  if (v184 == 102)
  {
    int v60 = v59;
    int v61 = 0;
  }

  else
  {
    int v60 = v59 + 1;
    int v61 = 1;
  }

  apr_cvt(v60, &__n, &v193, v61, __s, *v58);
  char v100 = __s[0];
  if (__s[0] < 0)
  {
  }

  else if ((_DefaultRuneLocale.__runetype[__s[0]] & 0x100) != 0)
  {
LABEL_177:
    uint64_t v195 = (_BYTE *)strlen(__s);
    uint64_t v7 = __n_5;
    __memcpy_chk(__n_5, __s, v195 + 1, 511LL);
    unsigned int v193 = 0;
    __int128 v101 = endpos;
    LODWORD(v19) = v192;
    goto LABEL_178;
  }

  int v119 = v184;
  if (v184 == 102)
  {
    if (__n < 1)
    {
      __n_5[0] = 48;
      if (v59 < 1)
      {
        LODWORD(v19) = v192;
        if (v16)
        {
          char __n_6 = 46;
          float v121 = __s;
          float v122 = __n_7;
        }

        else
        {
          float v121 = __s;
          float v122 = &__n_6;
        }
      }

      else
      {
        char __n_6 = 46;
        float v122 = __n_7;
        LODWORD(v19) = v192;
        if (__n < 0)
        {
          uint64_t v148 = ~__n;
          memset(__n_7, 48, v148 + 1);
          int v119 = 102;
          LODWORD(v19) = v192;
          float v122 = &__n_5[v148 + 3];
        }

        __uint64_t n = 1;
        float v121 = __s;
      }
    }

    else
    {
      uint64_t v120 = __n;
      memcpy(__n_5, __s, __n);
      float v121 = &__s[v120];
      float v122 = &__n_5[v120];
      __uint64_t n = -1;
      if (v16 || v59 > 0)
      {
        *float v122 = 46;
        float v122 = &__n_7[(v120 - 1)];
      }

      LODWORD(v19) = v192;
      int v119 = 102;
    }
  }

  else
  {
    __n_5[0] = v100;
    LODWORD(v19) = v192;
    if (v16 || (v122 = &__n_6, float v121 = &__s[1], v59 >= 1))
    {
      char __n_6 = 46;
      float v122 = __n_7;
      float v121 = &__s[1];
    }
  }

  char v165 = *v121;
  if (*v121)
  {
    uint64_t v166 = (unsigned __int8 *)(v121 + 1);
    do
    {
      *v122++ = v165;
      int v167 = *v166++;
      char v165 = v167;
    }

    while (v167);
  }

  uint64_t v7 = __n_5;
  if (v119 != 102)
  {
    *float v122 = v119;
    int v168 = __n;
    int v169 = --__n;
    if (__n)
    {
      if (v169 >= 0) {
        unsigned int v170 = v169;
      }
      else {
        unsigned int v170 = -v169;
      }
      uint64_t v171 = -1LL;
      uint64_t v172 = v203;
      do
      {
        uint64_t v173 = v171;
        *--uint64_t v172 = v170 % 0xA + 48;
        --v171;
        BOOL v75 = v170 > 9;
        v170 /= 0xAu;
      }

      while (v75);
      if (v168 <= 0) {
        char v174 = 45;
      }
      else {
        char v174 = 43;
      }
      __int128 v175 = v122 + 2;
      v122[1] = v174;
      uint64_t v176 = (_BYTE *)(v203 - v172);
      if (v176)
      {
        if (v176 == (_BYTE *)&dword_0 + 1)
        {
          __int128 v175 = v122 + 3;
          v122[2] = 48;
        }

        do
        {
          *v175++ = v203[v173];
          BOOL v65 = __CFADD__(v173++, 1LL);
        }

        while (!v65);
      }
    }

    else
    {
      *(_WORD *)(v122 + 1) = 12331;
      __int128 v175 = v122 + 4;
      v122[3] = 48;
    }

    float v122 = v175;
  }

  uint64_t v195 = (_BYTE *)(v122 - __n_5);
  __int128 v101 = endpos;
  if (v193)
  {
    int v99 = 45;
    goto LABEL_407;
  }

    if (a1 == v3) {
      return 80LL;
    }
    return 0LL;
  }

  if (a1 > -15365)
  {
    if (a1 <= -12545)
    {
      if (a1 <= -15318)
      {
        switch(a1)
        {
          case -15359:
          case -15358:
          case -15356:
          case -15355:
          case -15354:
          case -15353:
          case -15352:
          case -15351:
LABEL_19:
            uint64_t result = 16LL;
            break;
          case -15357:
          case -15349:
          case -15347:
          case -15346:
          case -15345:
          case -15344:
          case -15343:
          case -15342:
          case -15341:
          case -15340:
          case -15339:
          case -15338:
          case -15337:
          case -15336:
          case -15335:
          case -15334:
            return 0LL;
          case -15350:
            uint64_t result = 52LL;
            break;
          case -15348:
            return 53LL;
          case -15333:
            return 51LL;
          default:
            uint64_t v7 = -15364;
LABEL_148:
            if (a1 != v7) {
              return 0LL;
            }
            uint64_t result = 17LL;
            break;
        }

        return result;
      }

      if (a1 > -15262)
      {
        if ((a1 + 15260) >= 2)
        {
          if (a1 == -15261) {
            return 18LL;
          }
          if (a1 == -15245) {
            return 72LL;
          }
          return 0LL;
        }
      }

      else
      {
        if (a1 <= -15300)
        {
          if (a1 == -15317) {
            return 33LL;
          }
          uint64_t v2 = -15306;
          goto LABEL_48;
        }

        if (a1 == -15299) {
          return 55LL;
        }
        if (a1 != -15296) {
          return 0LL;
        }
      }

      return 53LL;
    }

    if (a1 > -6123)
    {
      size_t v4 = a1 + 6122;
      uint64_t result = 6LL;
      switch(v4)
      {
        case 0:
          uint64_t result = 10LL;
          break;
        case 3:
        case 6:
LABEL_63:
          uint64_t result = 8LL;
          break;
        case 11:
          return result;
        case 12:
          uint64_t result = 9LL;
          break;
        case 13:
          uint64_t result = 7LL;
          break;
        default:
          return 0LL;
      }

      return result;
    }

    if (a1 > -7167)
    {
      switch(a1)
      {
        case -6143:
        case -6131:
          uint64_t result = 5LL;
          break;
        case -6142:
        case -6140:
        case -6139:
        case -6138:
        case -6137:
        case -6136:
        case -6135:
        case -6132:
        case -6130:
          return 0LL;
        case -6141:
        case -6133:
        case -6129:
          goto LABEL_63;
        case -6134:
          uint64_t result = 11LL;
          break;
        default:
          if (a1 != -7166 && a1 != -6655) {
            return 0LL;
          }
          uint64_t result = 2LL;
          break;
      }

      return result;
    }

    if (a1 > -10238)
    {
      if (a1 == -10237) {
        return 22LL;
      }
      uint64_t v3 = -7167;
      goto LABEL_88;
    }

    if (a1 == -12544) {
      return 25LL;
    }
    uint64_t v2 = -12543;
LABEL_48:
    if (a1 == v2) {
      return 51LL;
    }
    return 0LL;
  }

  if (a1 <= -15507)
  {
    if (a1 > -15588)
    {
      if (a1 > -15552)
      {
        if (a1 > -15541)
        {
          if (a1 == -15540) {
            return 60LL;
          }
          if (a1 == -15531) {
            return 37LL;
          }
          unint64_t v6 = -15509;
          goto LABEL_119;
        }

        int v5 = -15541;
        goto LABEL_67;
      }

      switch(a1)
      {
        case -15587:
LABEL_39:
          uint64_t result = 21LL;
          break;
        case -15586:
        case -15584:
          return 28LL;
        case -15585:
          return 74LL;
        case -15578:
LABEL_69:
          uint64_t result = 83LL;
          break;
        case -15577:
          return 60LL;
        default:
          return 0LL;
      }
    }

    else
    {
      if (a1 <= -15674)
      {
        switch(a1)
        {
          case -15707:
          case -15705:
            return 22LL;
          case -15706:
          case -15704:
          case -15703:
          case -15702:
          case -15700:
          case -15699:
          case -15698:
          case -15697:
          case -15696:
          case -15694:
          case -15692:
          case -15691:
            return 0LL;
          case -15701:
            return 25LL;
          case -15695:
            return 37LL;
          case -15693:
            return 62LL;
          case -15690:
          case -15689:
          case -15688:
            return 80LL;
          default:
            return 0LL;
        }
      }

      switch(a1)
      {
        case -15620:
LABEL_11:
          uint64_t result = 44LL;
          break;
        case -15619:
        case -15618:
        case -15617:
        case -15616:
        case -15612:
        case -15611:
        case -15610:
          return 0LL;
        case -15615:
        case -15614:
          goto LABEL_19;
        case -15613:
          return 37LL;
        case -15609:
        case -15608:
          return 43LL;
        default:
          uint64_t v7 = -15673;
          goto LABEL_148;
      }
    }
  }

  else
  {
    switch(a1)
    {
      case -15464:
        goto LABEL_19;
      case -15463:
      case -15444:
      case -15437:
      case -15436:
        goto LABEL_11;
      case -15462:
      case -15443:
      case -15442:
      case -15441:
        return 60LL;
      case -15461:
      case -15406:
      case -15405:
      case -15404:
      case -15403:
        return 71LL;
      case -15460:
      case -15440:
      case -15439:
      case -15438:
        goto LABEL_69;
      case -15459:
      case -15458:
      case -15457:
      case -15456:
      case -15455:
      case -15454:
      case -15453:
      case -15452:
      case -15451:
      case -15450:
      case -15449:
      case -15448:
      case -15447:
      case -15446:
      case -15445:
      case -15433:
      case -15432:
      case -15431:
      case -15426:
      case -15424:
      case -15423:
      case -15422:
      case -15418:
      case -15417:
      case -15416:
      case -15415:
      case -15414:
      case -15413:
      case -15412:
      case -15411:
      case -15410:
      case -15409:
      case -15408:
      case -15407:
        return 0LL;
      case -15435:
      case -15434:
      case -15425:
      case -15421:
      case -15420:
      case -15419:
        return 62LL;
      case -15430:
      case -15429:
      case -15428:
      case -15427:
        return 43LL;
      default:
        if (a1 == -15506) {
          goto LABEL_19;
        }
        if (a1 != -15496) {
          return 0LL;
        }
        uint64_t result = 61LL;
        break;
    }
  }

  return result;
}

uint64_t conv_10_quad(unint64_t a1, int a2, _DWORD *a3, uint64_t a4, void *a5)
{
  if ((HIDWORD(a1) || !a2) && (a1 != (int)a1 || a2))
  {
    if ((a1 & 0x8000000000000000LL) == 0LL) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = -(uint64_t)a1;
    }
    if (a2) {
      int v11 = 0;
    }
    else {
      int v11 = a1 >> 63;
    }
    if (a2) {
      unint64_t v12 = a1;
    }
    else {
      unint64_t v12 = v10;
    }
    *a3 = v11;
    uint64_t result = a4;
    do
    {
      *(_BYTE *)--uint64_t result = v12 % 0xA + 48;
      BOOL v13 = v12 > 9;
      v12 /= 0xAuLL;
    }

    while (v13);
  }

  else
  {
    if ((a1 & 0x80000000) == 0LL) {
      int v5 = a1;
    }
    else {
      int v5 = -(int)a1;
    }
    if (a2) {
      int v6 = 0;
    }
    else {
      int v6 = (a1 >> 31) & 1;
    }
    if (a2) {
      unsigned int v7 = a1;
    }
    else {
      unsigned int v7 = v5;
    }
    *a3 = v6;
    uint64_t result = a4;
    do
    {
      *(_BYTE *)--uint64_t result = v7 % 0xA + 48;
      BOOL v9 = v7 >= 0xA;
      v7 /= 0xAu;
    }

    while (v9);
  }

  *a5 = a4 - result;
  return result;
}

char *apr_cvt(int a1, int *a2, _DWORD *a3, int a4, char *a5, double a6)
{
  if (a1 >= 78) {
    int v9 = 78;
  }
  else {
    int v9 = a1;
  }
  *a3 = 0;
  if (a6 < 0.0)
  {
    *a3 = 1;
    a6 = -a6;
  }

  double v10 = modf(a6, &v32);
  double v11 = v10;
  double v12 = v32;
  if (v32 == 0.0)
  {
    if (v10 > 0.0)
    {
      int v13 = 1;
      do
      {
        double v21 = v11;
        double v11 = v11 * 10.0;
        --v13;
      }

      while (v11 < 1.0);
      unint64_t v19 = 0LL;
      double v31 = v11;
      double v11 = v21;
      goto LABEL_20;
    }

    int v13 = 0;
  }

  else
  {
    int v13 = 0;
    uint64_t v14 = 80LL;
    uint64_t v15 = 1LL;
    do
    {
      uint64_t v16 = v14;
      uint64_t v17 = v15;
      double v18 = modf(v12 / 10.0, &v32);
      ++v13;
      uint64_t v14 = v16 - 1;
      a5[v16 - 1] = (int)((v18 + 0.03) * 10.0) + 48;
      if (v16 == 1) {
        break;
      }
      double v12 = v32;
      uint64_t v15 = v17 + 1;
    }

    while (v32 != 0.0);
    double v31 = v18;
    if (v16 <= 80)
    {
      unint64_t v19 = 81 - v16;
      unsigned int v20 = a5;
      do
      {
        *unsigned int v20 = v20[v14];
        ++v20;
        --v17;
      }

      while (v17);
      goto LABEL_20;
    }
  }

  unint64_t v19 = 0LL;
LABEL_20:
  if (a4) {
    int v22 = 0;
  }
  else {
    int v22 = v13;
  }
  uint64_t v23 = v22 + (uint64_t)v9;
  if (v23 < 0)
  {
    *a2 = -v9;
    char v27 = a5;
  }

  else
  {
    *a2 = v13;
    if ((uint64_t)v19 <= v23 && v19 <= 0x4F)
    {
      do
      {
        double v11 = modf(v11 * 10.0, &v31);
        a5[v19] = (int)v31 + 48;
      }

      while (v19++ < 0x4F);
    }

    if (v23 >= 80)
    {
      char v27 = a5 + 79;
    }

    else
    {
      unsigned int v25 = &a5[v23];
      int v26 = (char)(a5[v23] + 5);
      a5[v23] += 5;
      if (v26 < 58)
      {
        char v27 = &a5[v23];
      }

      else
      {
        char v27 = &a5[v23];
        do
        {
          *unsigned int v25 = 48;
          if (v25 <= a5)
          {
            *unsigned int v25 = 49;
            ++*a2;
            if (!a4)
            {
              if (v27 > a5) {
                *char v27 = 48;
              }
              ++v27;
            }

            char v29 = *v25;
          }

          else
          {
            char v28 = *--v25;
            char v29 = v28 + 1;
            *unsigned int v25 = v28 + 1;
          }
        }

        while (v29 > 57);
      }
    }
  }

  *char v27 = 0;
  return a5;
}

int apr_snprintf(char *buf, apr_size_t len, const char *format, ...)
{
  c.curpos = buf;
  c.endpos = buf + 4;
  va_copy(v5, va);
  int result = apr_vformatter((int (__cdecl *)(apr_vformatter_buff_t *))snprintf_flush, &c, format, va);
  *c.curpos = 0;
  if (result == -1) {
    return 4;
  }
  return result;
}

uint64_t snprintf_flush()
{
  return 0xFFFFFFFFLL;
}

char *__cdecl apr_pstrdup(apr_pool_t *p, const char *s)
{
  if (!s) {
    return 0LL;
  }
  apr_size_t v4 = strlen(s) + 1;
  va_list v5 = apr_palloc(p, v4);
  memcpy(v5, s, v4);
  return (char *)v5;
}

apr_status_t apr_proc_kill(apr_proc_t *proc, int sig)
{
  if (kill((pid_t)proc, sig) == -1) {
    return *__error();
  }
  else {
    return 0;
  }
}

apr_array_header_t *__cdecl apr_array_make(apr_pool_t *p, int nelts, int elt_size)
{
  int v6 = (apr_array_header_t *)apr_palloc(p, 0x20uLL);
  if (nelts <= 1) {
    int v7 = 1;
  }
  else {
    int v7 = nelts;
  }
  int v8 = (char *)apr_palloc(p, v7 * elt_size);
  int v9 = v8;
  if (v8) {
    bzero(v8, v7 * elt_size);
  }
  v6->elts = v9;
  v6->pool = p;
  v6->elt_memory_object_size_t size = elt_size;
  v6->uint64_t nelts = 0;
  v6->nalloapr_vformatter_buff_t c = v7;
  return v6;
}

void *__cdecl apr_array_push(apr_array_header_t *arr)
{
  int nelts = arr->nelts;
  if (nelts == arr->nalloc)
  {
    if (nelts < 1) {
      int v3 = 1;
    }
    else {
      int v3 = 2 * nelts;
    }
    elts = (char *)apr_palloc(arr->pool, arr->elt_size * (uint64_t)v3);
    memcpy(elts, arr->elts, arr->elt_size * (uint64_t)arr->nalloc);
    bzero(&elts[arr->elt_size * arr->nalloc], arr->elt_size * (v3 - arr->nalloc));
    arr->elts = elts;
    arr->nalloapr_vformatter_buff_t c = v3;
    int nelts = arr->nelts;
  }

  else
  {
    elts = arr->elts;
  }

  arr->int nelts = nelts + 1;
  return &elts[arr->elt_size * (uint64_t)nelts];
}

apr_array_header_t *__cdecl apr_array_copy(apr_pool_t *p, const apr_array_header_t *arr)
{
  apr_size_t v4 = (apr_array_header_t *)apr_palloc(p, 0x20uLL);
  elt_memory_object_size_t size = arr->elt_size;
  if (arr->nalloc <= 1) {
    nalloapr_vformatter_buff_t c = 1;
  }
  else {
    nalloapr_vformatter_buff_t c = arr->nalloc;
  }
  int v7 = (char *)apr_palloc(p, nalloc * elt_size);
  v4->elts = v7;
  v4->pool = p;
  v4->elt_memory_object_size_t size = elt_size;
  v4->int nelts = 0;
  v4->nalloapr_vformatter_buff_t c = nalloc;
  memcpy(v7, arr->elts, arr->nelts * (uint64_t)arr->elt_size);
  int nelts = arr->nelts;
  v4->int nelts = nelts;
  bzero(&v4->elts[v4->elt_size * nelts], (v4->nalloc - nelts) * v4->elt_size);
  return v4;
}

char *__cdecl apr_array_pstrcat(apr_pool_t *p, const apr_array_header_t *arr, const char sep)
{
  int nelts = arr->nelts;
  int v5 = nelts - 1;
  if (nelts >= 1)
  {
    elts = arr->elts;
    if (elts)
    {
      uint64_t v8 = 0LL;
      while (1)
      {
        if (*(void *)elts) {
          v8 += strlen(*(const char **)elts);
        }
        if (!v5) {
          break;
        }
        elts += 8;
        --v5;
      }

      double v10 = (char *)apr_palloc(p, v8 + 1);
      double v12 = arr->elts;
      int v13 = 1;
      int v9 = v10;
      if (v12)
      {
LABEL_12:
        if (*(void *)v12)
        {
          size_t v14 = strlen(*(const char **)v12);
          memcpy(v9, *(const void **)v12, v14);
          v9 += v14;
        }
      }

      while (v13 < arr->nelts)
      {
        v12 += 8;
        ++v13;
        if (v12) {
          goto LABEL_12;
        }
      }

      goto LABEL_9;
    }
  }

  int v9 = apr_palloc(p, 1uLL);
  double v10 = v9;
  if (v9) {
LABEL_9:
  }
    _BYTE *v9 = 0;
  return v10;
}

apr_status_t apr_thread_mutex_create(apr_thread_mutex_t **mutex, unsigned int flags, apr_pool_t *pool)
{
  uint64_t v3 = *(void *)&flags;
  int v5 = (char *)apr_palloc(*(apr_pool_t **)&flags, 0x48uLL);
  int v6 = (apr_pool_t **)v5;
  if (v5)
  {
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 8) = 0u;
  }

  *(void *)int v5 = v3;
  apr_status_t result = pthread_mutex_init((pthread_mutex_t *)(v5 + 8), 0LL);
  if (!result)
  {
    apr_pool_cleanup_register(*v6, v6, (apr_status_t (__cdecl *)(void *))thread_mutex_cleanup, v8);
    apr_status_t result = 0;
    *mutex = (apr_thread_mutex_t *)v6;
  }

  return result;
}

uint64_t thread_mutex_cleanup(uint64_t a1)
{
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 8));
}

char *gt_filepath_merge(const char *a1, const char *a2, apr_pool_t *a3)
{
  size_t v6 = strlen(a1);
  size_t v7 = strlen(a2);
  size_t v8 = v7;
  if (v6 && a1[v6 - 1] == 47) {
    --v6;
  }
  int v9 = (char *)apr_palloc(a3, v7 + v6 + 2);
  memcpy(v9, a1, v6);
  v9[v6] = 47;
  memcpy(&v9[v6 + 1], a2, v8);
  v9[v8 + 1 + v6] = 0;
  return v9;
}

unint64_t MinBytesPerRow(int a1, unsigned int a2)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (a1 > 1885745711)
        {
          if (a1 <= 2016686639)
          {
            if (a1 != 1885745712)
            {
              if (a1 == 1999843442) {
                goto LABEL_67;
              }
              int v4 = 1999908961;
              goto LABEL_56;
            }
          }

          else if (a1 <= 2019963439)
          {
            if (a1 != 2016686640) {
              return 0;
            }
          }

          else if (a1 != 2019963440)
          {
            if (a1 != 2037741171)
            {
              int v3 = 2037741158;
              goto LABEL_62;
            }

uint64_t IsBiplanar(int a1)
{
  uint64_t result = 1LL;
  if (a1 <= 875836517)
  {
    if (a1 > 645428783)
    {
      if (a1 != 645428784 && a1 != 875704422)
      {
        int v3 = 875704438;
LABEL_18:
        if (a1 != v3) {
          return 0LL;
        }
      }
    }

    else if (a1 != 641230384 && a1 != 641234480)
    {
      int v3 = 645424688;
      goto LABEL_18;
    }
  }

  else
  {
    if (a1 > 1882468911)
    {
      if (a1 > 2016686639)
      {
        if (a1 == 2016686640) {
          return result;
        }
        int v3 = 2019963440;
      }

      else
      {
        if (a1 == 1882468912) {
          return result;
        }
        int v3 = 1885745712;
      }

      goto LABEL_18;
    }

    if (a1 != 875836518 && a1 != 875836534)
    {
      int v3 = 1751527984;
      goto LABEL_18;
    }
  }

  return result;
}

uint64_t BytesPerElement(int a1)
{
  uint64_t v1 = 1LL;
  if (a1 <= 875836533)
  {
    if (a1 <= 828584239)
    {
      if (a1 <= 645428783)
      {
        if (a1 <= 641230383)
        {
          if (a1 == 24) {
            return 3LL;
          }
          if (a1 == 32) {
            return 4LL;
          }
        }

        return 0LL;
      }

      if (a1 <= 826486885)
      {
        if (a1 == 826486840) {
          return v1;
        }
        return 0LL;
      }

      if (a1 == 826486886) {
        return 4LL;
      }
      if (a1 == 826486888) {
        return 2LL;
      }
      int v3 = 826487094;
    }

    else
    {
      if (a1 > 845361455)
      {
        if (a1 <= 875704421)
        {
          if (a1 != 845361456)
          {
            if (a1 != 846624102)
            {
              int v2 = 846624121;
              goto LABEL_51;
            }

            return 4LL;
          }

          return 8LL;
        }

        return 0LL;
      }

      if (a1 > 843264101)
      {
        if (a1 != 843264102)
        {
          if (a1 == 843264104) {
            return 4LL;
          }
          int v2 = 843264310;
          goto LABEL_51;
        }

        return 8LL;
      }

      if (a1 == 828584240) {
        return 4LL;
      }
      int v3 = 843264056;
    }

    goto LABEL_57;
  }

  if (a1 > 1751527983)
  {
    if (a1 <= 1999843441)
    {
      if (a1 > 1815491697)
      {
        if (a1 != 1815491698) {
          return 0LL;
        }
        return 8LL;
      }

      if (a1 == 1751527984) {
        return 0LL;
      }
      int v2 = 1815162994;
    }

    else
    {
      if (a1 <= 2019963439)
      {
        if (a1 == 1999843442) {
          return 4LL;
        }
        if (a1 == 1999908961) {
          return 8LL;
        }
        return 0LL;
      }

      if (a1 == 2019963440) {
        return 0LL;
      }
      if (a1 == 2037741158) {
        return 4LL;
      }
      int v2 = 2037741171;
    }

uint64_t ElementWidth(int a1)
{
  uint64_t v1 = 2LL;
  if (a1 <= 875704437)
  {
    if (a1 <= 828584239)
    {
      if (a1 > 645424687)
      {
        if (a1 != 645424688)
        {
          int v2 = 645428784;
          return a1 != v2;
        }
      }

      else if (a1 != 641230384)
      {
        int v2 = 641234480;
        return a1 != v2;
      }

      return 0LL;
    }

    if (a1 <= 846624101)
    {
      if (a1 != 828584240 && a1 != 845361456) {
        return 1LL;
      }
      return 3LL;
    }

    else if (a1 != 846624102 && a1 != 846624121)
    {
      int v2 = 875704422;
      return a1 != v2;
    }
  }

  else
  {
    if (a1 <= 1885745711)
    {
      if (a1 > 875836533)
      {
        if (a1 == 875836534 || a1 == 1751527984) {
          return 0LL;
        }
        int v2 = 1882468912;
        return a1 != v2;
      }

      if (a1 != 875704438)
      {
        int v2 = 875836518;
        return a1 != v2;
      }

      return 0LL;
    }

    if (a1 <= 2019963439)
    {
      if (a1 != 1885745712)
      {
        int v2 = 2016686640;
        return a1 != v2;
      }

      return 0LL;
    }

    if (a1 == 2019963440) {
      return 0LL;
    }
    if (a1 != 2037741158 && a1 != 2037741171) {
      return 1LL;
    }
  }

  return v1;
}

id gt_default_log()
{
  v0 = s_defaultLog;
  if (s_defaultLog == &_os_log_default)
  {
    if (gt_default_log_onceToken != -1) {
      dispatch_once(&gt_default_log_onceToken, &__block_literal_global_8885);
    }
    v0 = s_defaultLog;
  }

  return v0;
}

void __gt_default_log_block_invoke(id a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "GPUTOOLS(warning): Log uninitialized, please call GTCoreLogInit(), logging to OS_LOG_DEFAULT instead",  v1,  2u);
  }

id gt_tagged_log(unint64_t a1)
{
  if (s_logCount != 1 || a1 >= 3)
  {
    if (s_logUsingOsLog)
    {
      id v3 = gt_default_log();
      int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = a1;
        _os_log_fault_impl(&dword_0, v4, OS_LOG_TYPE_FAULT, "fail: Invalid log tag: %llu", (uint8_t *)&buf, 0xCu);
      }
    }

    else
    {
      double v11 = __stderrp;
      id v12 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString, "stringWithFormat:", @"fail: Invalid log tag: %llu", a1));
      fprintf(v11, "%s\n", (const char *)[v12 UTF8String]);
    }

    id v13 = &_os_log_default;
    return &_os_log_default;
  }

  else
  {
    unsigned int v5 = (id *)(s_logs + 32 * a1);
    *(void *)&__int128 buf = *v5;
    *((void *)&buf + 1) = v5[1];
    id v15 = v5[2];
    id v6 = v5[3];
    id v16 = v6;
    int v7 = GTCoreLog_enabled((uint64_t)&buf);
    size_t v8 = &_os_log_disabled;
    if (v7) {
      size_t v8 = v6;
    }
    id v9 = v8;
    __destructor_8_s0_s8_s16_s24((id *)&buf);
    return v9;
  }

uint64_t GTCoreLog_enabled(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 1LL;
  }
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  id v3 = [v2 BOOLForKey:*(void *)(a1 + 16)];

  return (uint64_t)v3;
}

id PrettifyFenumString(void *a1)
{
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    if ([v1 hasPrefix:@"kDYFE"])
    {
      uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 substringFromIndex:5]);

      int v2 = (void *)v3;
    }

    id v4 = [v2 rangeOfString:@"_"];
    if (v4 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v6 = objc_claimAutoreleasedReturnValue( objc_msgSend( v2,  "stringByReplacingOccurrencesOfString:withString:options:range:",  @"_",  @" ",  0,  v4,  v5));

      int v2 = (void *)v6;
    }

    int v7 = (void *)objc_claimAutoreleasedReturnValue([v2 stringByReplacingOccurrencesOfString:@"_" withString:@":"]);

    int v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@[%@%@]",  @"-",  v7,  @":"));
  }

  return v2;
}

void GTError_addError(int *a1, uint64_t a2)
{
  if (a1 && *(_DWORD *)(a2 + 4))
  {
    if (GTError_initialize_onceToken != -1) {
      dispatch_once(&GTError_initialize_onceToken, &__block_literal_global_9024);
    }
    if (a1[1])
    {
      int v4 = *(_DWORD *)a2 | *a1 | 2;
    }

    else
    {
      int v5 = *a1;
      __int128 v7 = *(_OWORD *)(a2 + 16);
      __int128 v6 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v7;
      *((_OWORD *)a1 + 2) = v6;
      int v4 = *a1 | v5;
    }

    *a1 = v4;
  }

uint64_t CalculateBindingsAccess(uint64_t result, int a2, uint64_t a3)
{
  if (a2 >= 1)
  {
    uint64_t v4 = result;
    uint64_t v5 = a3 + 16;
    for (uint64_t i = a2; i; --i)
    {
      if ((*(_BYTE *)(v4 + 19) & 1) == 0) {
        goto LABEL_9;
      }
      int v7 = *(unsigned __int8 *)(v4 + 16);
      if ((v7 - 24) >= 4)
      {
        if (v7 == 2)
        {
          size_t v8 = (_BYTE *)v4;
          uint64_t v9 = v5;
          goto LABEL_8;
        }

        if (*(_BYTE *)(v4 + 16)) {
          goto LABEL_9;
        }
      }

      size_t v8 = (_BYTE *)v4;
      uint64_t v9 = a3;
LABEL_8:
      uint64_t result = (uint64_t)UpdateAccess(v8, v9);
LABEL_9:
      if (*(unsigned __int8 *)(v4 + 16) <= 1u)
      {
        uint64_t result = *(void *)(v4 + 8);
        if (result)
        {
          int v10 = *(unsigned __int8 *)result;
          if (v10 == 1 || v10 == 60 && *(_BYTE *)(result + 22) == 1 && (uint64_t result = *(void *)(result + 8)) != 0)
          {
            uint64_t result = GTMTLStructType_isArgumentBuffer(result);
            if ((_DWORD)result) {
              *(void *)(a3 + (((unint64_t)*(unsigned __int8 *)(v4 + 18) >> 3) & 0x18) + 48) |= 1LL << *(_BYTE *)(v4 + 18);
            }
          }
        }
      }

      v4 += 56LL;
    }
  }

  return result;
}

_BYTE *UpdateAccess(_BYTE *result, uint64_t a2)
{
  uint64_t v2 = result[18];
  if (result[16] != 2)
  {
    uint64_t v3 = v2 + 1;
    goto LABEL_5;
  }

  if (result[26])
  {
    uint64_t v3 = result[26] + v2;
LABEL_5:
    int v4 = result[17];
    while (1)
    {
      unsigned int v5 = v2 >> 6;
      if (v4 == 2) {
        break;
      }
      if (v4 == 1)
      {
        uint64_t v6 = 1LL << v2;
        size_t v8 = (void *)(a2 + 16LL * v5);
        *v8 |= 1LL << v2;
        int v7 = v8 + 1;
        goto LABEL_12;
      }

      if (!v4)
      {
        uint64_t v6 = 1LL << v2;
        int v7 = (void *)(a2 + 16LL * v5);
LABEL_12:
        *v7 |= v6;
      }

      if (v3 == ++v2) {
        return result;
      }
    }

    uint64_t v6 = 1LL << v2;
    int v7 = (void *)(a2 + 16LL * v5 + 8);
    goto LABEL_12;
  }

  return result;
}

BOOL GTMTLStructType_isArgumentBuffer(uint64_t a1)
{
  if (a1)
  {
    unint64_t v1 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v1)
    {
      uint64_t v2 = 0LL;
      uint64_t v3 = *(void *)(a1 + 8);
      BOOL v4 = 1;
      while (1)
      {
        unsigned int v5 = *(unsigned __int8 *)(v3 + 32 * v2 + 24);
        if (v5 <= 1)
        {
          if (v5 == 1)
          {
            uint64_t v6 = v3 + 32 * v2;
LABEL_17:
            if ((GTMTLStructType_isArgumentBuffer(*(void *)(v6 + 8)) & 1) != 0) {
              return v4;
            }
          }
        }

        else if (v5 == 2)
        {
          uint64_t v6 = v3 + 32 * v2;
          do
          {
            uint64_t v6 = *(void *)(v6 + 8);
            int v7 = *(unsigned __int8 *)(v6 + 24);
          }

          while (v7 == 2);
          if (v7 == 1) {
            goto LABEL_17;
          }
        }

        else
        {
          BOOL v9 = v5 - 78 > 0x28 || ((1LL << (v5 - 78)) & 0x1E000000007LL) == 0;
          if (!v9 || v5 - 58 < 3) {
            return v4;
          }
        }

        BOOL v4 = ++v2 < v1;
        if (v2 == v1) {
          return v4;
        }
      }
    }
  }

  return 0;
}

uint64_t GetFuncEnumConstructorType(int a1)
{
  if (a1 <= -15716)
  {
    if (a1 > -16121)
    {
      if (a1 > -16015)
      {
        if (a1 <= -15892)
        {
          if (a1 > -15970)
          {
            switch(a1)
            {
              case -15922:
                return 59LL;
              case -15921:
                return 58LL;
              case -15920:
              case -15919:
              case -15918:
              case -15917:
              case -15916:
              case -15915:
              case -15911:
              case -15910:
                return 0LL;
              case -15914:
                return 22LL;
              case -15913:
                return 80LL;
              case -15912:
              case -15909:
                return 76LL;
              default:
                if (a1 == -15969)
                {
                  uint64_t result = 57LL;
                }

                else
                {
                  if (a1 != -15900) {
                    return 0LL;
                  }
                  uint64_t result = 73LL;
                }

                break;
            }

            return result;
          }

          if (a1 <= -15997)
          {
            switch(a1)
            {
              case -16014:
                return 28LL;
              case -16013:
                return 82LL;
              case -15997:
                return 38LL;
            }

            return 0LL;
          }

          if ((a1 + 15980) >= 2)
          {
            if (a1 == -15996) {
              return 76LL;
            }
            int v6 = -15972;
            goto LABEL_119;
          }

          return 80LL;
        }

        if (a1 <= -15778)
        {
          if (a1 <= -15848)
          {
            switch(a1)
            {
              case -15891:
                return 64LL;
              case -15870:
                return 74LL;
              case -15848:
                return 31LL;
            }

            return 0LL;
          }

          if (a1 > -15794)
          {
            if (a1 == -15793) {
              return 68LL;
            }
            int v6 = -15778;
LABEL_119:
            if (a1 != v6) {
              return 0LL;
            }
            return 22LL;
          }

          if (a1 == -15847) {
            return 62LL;
          }
          if (a1 != -15830) {
            return 0LL;
          }
          return 43LL;
        }

        if (a1 > -15739)
        {
          if ((a1 + 15731) >= 2)
          {
            if (a1 == -15738) {
              return 71LL;
            }
            if (a1 == -15717) {
              return 19LL;
            }
            return 0LL;
          }

          return 43LL;
        }

        if (a1 == -15777 || a1 == -15775) {
          return 80LL;
        }
        int v5 = -15740;
LABEL_67:
        if (a1 == v5) {
          return 29LL;
        }
        return 0LL;
      }

      if (a1 > -16054)
      {
        switch(a1)
        {
          case -16039:
          case -16029:
            return 62LL;
          case -16038:
            return 43LL;
          case -16037:
            return 18LL;
          case -16036:
          case -16035:
          case -16034:
          case -16033:
          case -16032:
            return 0LL;
          case -16031:
          case -16030:
            return 80LL;
          default:
            if (a1 == -16018) {
              return 62LL;
            }
            return 0LL;
        }
      }

      switch(a1)
      {
        case -16120:
          uint64_t result = 50LL;
          break;
        case -16119:
        case -16118:
        case -16115:
        case -16114:
        case -16113:
        case -16112:
        case -16111:
        case -16110:
        case -16109:
        case -16108:
        case -16105:
        case -16103:
        case -16102:
        case -16100:
        case -16097:
        case -16094:
        case -16093:
        case -16092:
        case -16087:
        case -16086:
        case -16085:
        case -16084:
        case -16083:
          return 0LL;
        case -16117:
          return 22LL;
        case -16116:
        case -16104:
        case -16098:
        case -16096:
          return 80LL;
        case -16107:
        case -16106:
        case -16082:
        case -16081:
          return 43LL;
        case -16101:
          return 29LL;
        case -16099:
          uint64_t result = 81LL;
          break;
        case -16095:
          return 62LL;
        case -16091:
        case -16090:
        case -16089:
        case -16088:
          return 71LL;
        default:
          if (a1 != -16075) {
            return 0LL;
          }
          uint64_t result = 67LL;
          break;
      }

      return result;
    }

    if (a1 > -16234)
    {
      if (a1 > -16197)
      {
        if (a1 > -16164)
        {
          if (a1 != -16163)
          {
            if (a1 == -16128) {
              return 41LL;
            }
            return 0LL;
          }

          return 22LL;
        }

        if (a1 != -16196)
        {
          if (a1 == -16165) {
            return 27LL;
          }
          return 0LL;
        }

        return 80LL;
      }

      int v3 = -16233;
    }

    else
    {
      if (a1 > -16355)
      {
        switch(a1)
        {
          case -16354:
            goto LABEL_39;
          case -16353:
          case -16286:
            uint64_t result = 70LL;
            break;
          case -16352:
            return 28LL;
          case -16351:
            uint64_t result = 65LL;
            break;
          case -16343:
          case -16342:
            return 25LL;
          case -16316:
          case -16315:
            return 27LL;
          case -16314:
          case -16313:
          case -16312:
            return 22LL;
          case -16311:
            uint64_t result = 34LL;
            break;
          case -16310:
          case -16294:
            return 80LL;
          case -16309:
            uint64_t result = 75LL;
            break;
          case -16308:
          case -16307:
          case -16306:
          case -16305:
          case -16304:
            return 62LL;
          case -16303:
          case -16302:
          case -16301:
          case -16300:
            return 71LL;
          case -16299:
          case -16298:
          case -16297:
          case -16296:
            return 29LL;
          case -16290:
            return 43LL;
          default:
            return 0LL;
        }

        return result;
      }

      if (a1 == -18432) {
        return 39LL;
      }
      if (a1 == -18431) {
        return 40LL;
      }
      int v3 = -16368;
    }

uint64_t IsFuncEnumDestructor(int a1)
{
  uint64_t result = 1LL;
  if (a1 <= -15894)
  {
    if (a1 <= -16294)
    {
      if (a1 > -16371)
      {
        unsigned int v7 = a1 + 16370;
        if (v7 > 0x35) {
          return 0LL;
        }
        uint64_t v4 = 1LL << v7;
        uint64_t v5 = 0x26000104000081LL;
        goto LABEL_29;
      }

      if (a1 == -20475 || a1 == -20458) {
        return result;
      }
      int v10 = -16383;
    }

    else
    {
      if (a1 > -16119)
      {
        unsigned int v9 = a1 + 16118;
        if (v9 > 0x38) {
          return 0LL;
        }
        uint64_t v4 = 1LL << v9;
        uint64_t v5 = 0x100000000200001LL;
        goto LABEL_29;
      }

      int v10 = -16127;
    }

uint64_t IsFuncEnumDrawCall(int a1)
{
  uint64_t result = 1LL;
  if ((a1 + 16251) > 0x24 || ((1LL << (a1 + 123)) & 0x1E0000000FLL) == 0)
  {
    unsigned int v3 = a1 + 16147;
    BOOL v4 = (a1 + 15416) < 3;
    return v3 < 4 || v4;
  }

  return result;
}

BOOL IsFuncEnumSampledBlitCall(int a1)
{
  return (a1 + 16382) < 6 || (a1 + 16210) < 2 || (a1 + 15878) < 2;
}

BOOL IsFuncEnumSampledBlitCallAGX(int a1)
{
  BOOL result = 1LL;
  if (((a1 + 15995) > 0x25 || ((1LL << (a1 + 123)) & 0x38000C000FLL) == 0)
    && ((a1 + 15802) > 4 || ((1 << (a1 - 70)) & 0x15) == 0))
  {
    return (a1 + 15470) < 2;
  }

  return result;
}

BOOL IsFuncEnumGPUCommandCall(int a1)
{
  if ((IsFuncEnumDrawCall(a1) & 1) != 0) {
    return 1LL;
  }
  BOOL result = 1LL;
  if ((a1 + 16079) >= 2 && a1 != -16327 && a1 != -16220)
  {
    if (IsFuncEnumSampledBlitCall(a1) || IsFuncEnumSampledBlitCallAGX(a1)) {
      return 1LL;
    }
    BOOL result = 1LL;
    if (a1 != -16137 && a1 != -15486 && a1 != -15297) {
      return (a1 + 15416) < 3;
    }
  }

  return result;
}

uint64_t IsFuncEnumPushDebugGroup(int a1)
{
  uint64_t result = 1LL;
  if (a1 <= -16066)
  {
    if (a1 > -16284)
    {
      if (a1 == -16283) {
        return result;
      }
      int v3 = -16244;
    }

    else
    {
      if (a1 == -16374) {
        return result;
      }
      int v3 = -16323;
    }

    goto LABEL_13;
  }

  if (a1 <= -15787)
  {
    if (a1 == -16065) {
      return result;
    }
    int v3 = -15882;
    goto LABEL_13;
  }

  if (a1 != -15786 && a1 != -15639)
  {
    int v3 = -15292;
LABEL_13:
    if (a1 != v3) {
      return 0LL;
    }
  }

  return result;
}

uint64_t IsFuncEnumPopDebugGroup(int a1)
{
  uint64_t result = 1LL;
  if (a1 <= -16065)
  {
    if (a1 > -16283)
    {
      if (a1 == -16282) {
        return result;
      }
      int v3 = -16243;
    }

    else
    {
      if (a1 == -16373) {
        return result;
      }
      int v3 = -16322;
    }

    goto LABEL_13;
  }

  if (a1 <= -15788)
  {
    if (a1 == -16064) {
      return result;
    }
    int v3 = -15881;
    goto LABEL_13;
  }

  if (a1 != -15787 && a1 != -15640)
  {
    int v3 = -15293;
LABEL_13:
    if (a1 != v3) {
      return 0LL;
    }
  }

  return result;
}

uint64_t IsFuncEnumEndEncoding(int a1)
{
  uint64_t result = 1LL;
  if (a1 > -16247)
  {
    if (a1 > -15790)
    {
      if (a1 == -15789) {
        return result;
      }
      int v3 = -15642;
    }

    else
    {
      if (a1 == -16246) {
        return result;
      }
      int v3 = -15884;
    }

    goto LABEL_10;
  }

  if (a1 != -16376 && a1 != -16325)
  {
    int v3 = -16285;
LABEL_10:
    if (a1 != v3) {
      return 0LL;
    }
  }

  return result;
}

uint64_t IsFuncEnumUseResourceCall(int a1)
{
  uint64_t result = 1LL;
  if (a1 <= -15822)
  {
    return 0LL;
  }

  if (a1 <= -15635)
  {
    return 0LL;
  }

  return result;
}

const char *GetFuncEnumAsString(int a1)
{
  if (a1 > -12545)
  {
    if (a1 > -7169)
    {
      switch(a1)
      {
        case -6144:
          uint64_t result = "kDYFEMPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRows_resul"
                   "tColumns_interiorColumns_alpha_beta_A_aInfo_B_bInfo_C_cInfo_predicationBuffer_predicationOffset";
          break;
        case -6143:
          uint64_t result = "kDYFEMPSPlugin_newCNNConvolutionWithDescriptor_convolutionData";
          break;
        case -6142:
          uint64_t result = "kDYFEMPSExternalCNNPoolingAverage_encodeBatchToCommandBuffer_computeCommandEncoder_options_sourceText"
                   "ures_sourceInfo_destinationTextures_destinationInfo_zeroPadSizeX_zeroPadSizeY_predicationBuffer_predicationOffset";
          break;
        case -6141:
          uint64_t result = "kDYFEMPSPlugin_newCNNPoolingMaxWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY";
          break;
        case -6140:
          uint64_t result = "kDYFEMPSExternalMatrixVectorMultiplication_encodeToCommandBuffer_encoder_options_batchSize_matrix_mat"
                   "rixStructure_vector_vectorStructure_result_resultStructure_predicationBuffer_predicationOffset";
          break;
        case -6139:
          uint64_t result = "kDYFEMPSExternalPluginBase_dealloc";
          break;
        case -6138:
          uint64_t result = "kDYFEMPSExternalCNNUnary_maxBatchSize";
          break;
        case -6137:
          uint64_t result = "kDYFEMPSExternalMatrixVectorMultiplication_encodeToCommandBuffer_encoder_options_batchSize_matrix_mat"
                   "rixStructure_vector_vectorStructure_result_resultStructure";
          break;
        case -6136:
          uint64_t result = "kDYFEMPSExternalCNNConvolution_reloadWeightsAndBiasesWithCommandBuffer_encoder_weights_biases_predica"
                   "tionBuffer_predicationOffset";
          break;
        case -6135:
          uint64_t result = "kDYFEMPSExternalCNNUnary_encodeToCommandBuffer_computeCommandEncoder_options_sourceTexture_sourceInfo"
                   "_destinationTexture_destinationInfo";
          break;
        case -6134:
          uint64_t result = "kDYFEMPSPlugin_newMatrixVectorMultiplicationWithTranspose_rows_columns_alpha_beta";
          break;
        case -6133:
          uint64_t result = "kDYFEMPSPlugin_newCNNNeuronWithNeuronType_neuronParameterA_neuronParameterB_neuronParameterC";
          break;
        case -6132:
          uint64_t result = "kDYFEMPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRows_resul"
                   "tColumns_interiorColumns_alpha_beta_A_aInfo_B_bInfo_C_cInfo";
          break;
        case -6131:
          uint64_t result = "kDYFEMPSPlugin_newCNNConvolutionWithDescriptor_dataSource_fullyConnected";
          break;
        case -6130:
          uint64_t result = "kDYFEMPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_A_aInfo_B_bInfo_C_cInfo";
          break;
        case -6129:
          uint64_t result = "kDYFEMPSPlugin_newCNNNeuronWithNeuronType_neuronParameterAArray_count";
          break;
        case -6128:
          uint64_t result = "kDYFEMPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_options_batchSize_inputMatrix_inpu"
                   "tMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_alp"
                   "ha_numberOfFeatureVectors_inputFeatureChannels_outputFeatureChannels_neuronType_neuronParameterA_neur"
                   "onParameterB_neuronParameterC";
          break;
        case -6127:
          uint64_t result = "kDYFEMPSExternalCNNConvolutionGradient_reloadWeights";
          break;
        case -6126:
          uint64_t result = "kDYFEMPSExternalCNNPoolingAverage_encodeToCommandBuffer_computeCommandEncoder_options_sourceTexture_s"
                   "ourceInfo_destinationTexture_destinationInfo";
          break;
        case -6125:
          uint64_t result = "kDYFEMPSExternalCNNBinary_encodeToCommandBuffer_computeCommandEncoder_options_pluginOptions_primaryTe"
                   "xture_primaryInfo_secondaryTexture_secondaryInfo_destinationTexture_destinationInfo";
          break;
        case -6124:
          uint64_t result = "kDYFEMPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_options_batchSize_inputMatrix_inpu"
                   "tMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_alp"
                   "ha_numberOfFeatureVectors_inputFeatureChannels_outputFeatureChannels_neuronType_neuronParameterA_neur"
                   "onParameterB_neuronParameterC_predicationBuffer_predicationOffset";
          break;
        case -6123:
          uint64_t result = "kDYFEMPSExternalCNNBinary_maxBatchSize";
          break;
        case -6122:
          uint64_t result = "kDYFEMPSPlugin_newMatrixMultiplicationWithTransposeLeft_transposeRight_resultRows_resultColumns_inter"
                   "iorColumns_alpha_beta";
          break;
        case -6121:
          uint64_t result = "kDYFEMPSExternalCNNPoolingAverage_encodeToCommandBuffer_computeCommandEncoder_options_sourceTexture_s"
                   "ourceInfo_destinationTexture_destinationInfo_zeroPadSizeX_zeroPadSizeY";
          break;
        case -6120:
          uint64_t result = "kDYFEMPSExternalCNNConvolution_reloadWeightsAndBiases";
          break;
        case -6119:
          uint64_t result = "kDYFEMPSPlugin_newCNNSoftMax";
          break;
        case -6118:
          uint64_t result = "kDYFEMPSExternalCNNBinary_encodeBatchToCommandBuffer_computeCommandEncoder_options_pluginOptions_prim"
                   "aryTextures_primaryInfo_secondaryTextures_secondaryInfo_destinationTextures_destinationInfo_predicati"
                   "onBuffer_predicationOffset";
          break;
        case -6117:
          uint64_t result = "kDYFEMPSExternalCNNUnary_encodeToCommandBuffer_computeCommandEncoder_options_pluginOptions_sourceText"
                   "ure_sourceInfo_destinationTexture_destinationInfo";
          break;
        case -6116:
          uint64_t result = "kDYFEMPSPlugin_newCNNDilatedPoolingMaxWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_di"
                   "lationRateX_dilationRateY";
          break;
        case -6115:
          uint64_t result = "kDYFEMPSExternalCNNUnary_encodeBatchToCommandBuffer_computeCommandEncoder_options_pluginOptions_sourc"
                   "eTextures_sourceInfo_destinationTextures_destinationInfo_predicationBuffer_predicationOffset";
          break;
        case -6114:
          uint64_t result = "kDYFEMPSExternalCNNConvolutionGradient_encodeBatchToCommandBuffer_computeCommandEncoder_options_plugi"
                   "nOptions_primaryTextures_primaryInfo_secondaryTextures_secondaryInfo_weightsGradient_biasesGradient_a"
                   "ccumulate_predicationBuffer_predicationOffset";
          break;
        case -6113:
          uint64_t result = "kDYFEMPSExternalCNNConvolutionGradient_reloadWeightsWithCommandBuffer_encoder_weights_predicationBuff"
                   "er_predicationOffset";
          break;
        case -6112:
          uint64_t result = "kDYFEMPSExternalCNNConvolution_exportWeightsAndBiasesWithCommandBuffer_encoder_weights_biases_predica"
                   "tionBuffer_predicationOffset";
          break;
        case -6111:
          uint64_t result = "kDYFEMPSPlugin_newCNNConvolutionGradientWithDescriptor_convolutionData";
          break;
        case -6110:
          uint64_t result = "kDYFEMPSPlugin_newMatrixFullyConnected";
          break;
        case -6109:
          uint64_t result = "kDYFEMPSPlugin_newCNNPoolingAverageWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY";
          break;
        case -6108:
          uint64_t result = "kDYFEMPSExternalCNNConvolution_reloadWeightsAndBiasesWithCommandBuffer_encoder_weights_weightsDataTyp"
                   "e_biases_predicationBuffer_predicationOffset";
          break;
        case -6107:
          uint64_t result = "kDYFEMPSExternalCNNConvolutionGradient_reloadWeightsWithCommandBuffer_encoder_weights_weightsDataType"
                   "_predicationBuffer_predicationOffset";
          break;
        case -6106:
          uint64_t result = "kDYFEMPSExternalCNNConvolution_exportWeightsAndBiasesWithCommandBuffer_encoder_weights_weightsDataTyp"
                   "e_biases_predicationBuffer_predicationOffset";
          break;
        case -6105:
          uint64_t result = "kDYFEMPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRowsAndRes"
                   "ultColumnsAndInteriorColumns_alphaAndBeta_A_aInfo_B_bInfo_C_cInfo_predicationBuffer_predicationOffset";
          break;
        case -6104:
          uint64_t result = "kDYFEMPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_optionsAndBatchSize_inputMatrix_in"
                   "putMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_a"
                   "lpha_numberOfFeatureVectorsAndInputFeatureChannelsAndOutputFeatureChannels_neuronType_neuronParameters";
          break;
        case -6103:
          uint64_t result = "kDYFEMPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_optionsAndBatchSize_inputMatrix_in"
                   "putMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_a"
                   "lpha_numberOfFeatureVectorsAndInputFeatureChannelsAndOutputFeatureChannelsAndNeuronTypeAndPredication"
                   "Offset_neuronParameters_predicationBuffer";
          break;
        case -6102:
          uint64_t result = "kDYFEMPSExternalNDArrayConvolution2DGradient_encodePrimaryGradientToCommandBuffer_encoder_options_plu"
                   "ginOptions_primary_primaryInfo_secondary_secondaryInfo_gradient_gradientInfo_destination_destinationI"
                   "nfo_accumulate_predicationBuffer_predicationOffset";
          break;
        case -6101:
          uint64_t result = "kDYFEMPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRows_resul"
                   "tColumns_interiorColumns_alpha_beta_A_aInfo_B_bInfo_C_cInfo_predicationBuffer_predicationOffset_transA_transB";
          break;
        case -6100:
          uint64_t result = "kDYFEMPSExternalNDArrayConvolution2DGradient_encodeSecondaryGradientToCommandBuffer_encoder_options_p"
                   "luginOptions_primary_primaryInfo_secondary_secondaryInfo_gradient_gradientInfo_destination_destinatio"
                   "nInfo_accumulate_predicationBuffer_predicationOffset";
          break;
        case -6099:
          uint64_t result = "kDYFEMPSExternalNDArrayBinaryGradient_encodePrimaryGradientToCommandBuffer_encoder_options_pluginOpti"
                   "ons_primaryBuffer_primaryInfo_secondaryBuffer_secondaryInfo_gradientBuffer_gradientInfo_destination_d"
                   "estinationInfo_accumulate_predicationBuffer_predicationOffset";
          break;
        case -6098:
          uint64_t result = "kDYFEMPSExternalNDArrayBinaryGradient_encodeSecondaryGradientToCommandBuffer_encoder_options_pluginOp"
                   "tions_primaryBuffer_primaryInfo_secondaryBuffer_secondaryInfo_gradientBuffer_gradientInfo_destination"
                   "_destinationInfo_accumulate_predicationBuffer_predicationOffset";
          break;
        case -6097:
          uint64_t result = "kDYFEMPSExternalNDArrayBinary_encodeToCommandBuffer_encoder_options_pluginOptions_primaryBuffer_prima"
                   "ryInfo_secondaryBuffer_secondaryInfo_destinationBuffer_destinationInfo_predicationBuffer_predicationOffset";
          break;
        case -6096:
          uint64_t result = "kDYFEMPSPlugin_newNDArrayConvolution2DGradientWithDescriptor";
          break;
        case -6095:
          uint64_t result = "kDYFEMPSPlugin_newNDArrayConvolution2DWithDescriptor";
          break;
        default:
          switch(a1)
          {
            case -7168:
              uint64_t result = "kDYFECAMetalLayer_setPresentsWithTransaction";
              break;
            case -7167:
              uint64_t result = "kDYFECAMetalDrawable_texture";
              break;
            case -7166:
              uint64_t result = "kDYFECAMetalLayer_nextDrawable";
              break;
            case -7165:
              uint64_t result = "kDYFECAMetalLayer_setPixelFormat";
              break;
            case -7164:
              uint64_t result = "kDYFECAMetalLayer_setDrawableSize";
              break;
            case -7163:
              uint64_t result = "kDYFECAMetalLayer_setDevice";
              break;
            case -7162:
              uint64_t result = "kDYFECAMetalLayer_setBounds_contentsScale";
              break;
            case -7161:
              uint64_t result = "kDYFECAMetalDrawable_dealloc";
              break;
            case -7160:
              uint64_t result = "kDYFECAMetalLayer_setFramebufferOnly";
              break;
            case -7159:
              uint64_t result = "kDYFECAMetalLayer_setBounds_contentsScale_windowBounds_windowProperties";
              break;
            case -7158:
              uint64_t result = "kDYFECAMetalDrawable_present";
              break;
            case -7157:
              uint64_t result = "kDYFECAMetalDrawable_presentAtTime";
              break;
            case -7156:
              uint64_t result = "kDYFECAMetalDrawable_presentAfterMinimumDuration";
              break;
            case -7155:
              uint64_t result = "kDYFEUIScreen_setInterfaceOrientation";
              break;
            case -7154:
              uint64_t result = "kDYFECAMetalLayer_setWantsExtendedDynamicRangeContent";
              break;
            case -7153:
              uint64_t result = "kDYFECAMetalLayer_setColorspace";
              break;
            default:
              switch(a1)
              {
                case -6656:
                  uint64_t result = "kDYFENSHMDMetalSession_setDrawablePixelFormat";
                  break;
                case -6655:
                  uint64_t result = "kDYFENSHMDMetalSession_nextDrawable";
                  break;
                case -6654:
                  uint64_t result = "kDYFENSHMDMetalSession_initWithMetalDevice_deviceReference_hmdName";
                  break;
                case -6653:
                  uint64_t result = "kDYFENSHMDMetalSession_setDrawableSize";
                  break;
                case -6652:
                  uint64_t result = "kDYFENSHMDMetalSession_dealloc";
                  break;
                default:
LABEL_1384:
                  uint64_t result = 0LL;
                  break;
              }

              break;
          }

          break;
      }
    }

    else
    {
      switch(a1)
      {
        case -10240:
          uint64_t result = "kDYFEMTLCommandBuffer_restoreMTLBufferContents";
          break;
        case -10239:
          uint64_t result = "kDYFEMTLDevice_deviceReference";
          break;
        case -10238:
          uint64_t result = "kDYFEMTLTexture_harvested_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage";
          break;
        case -10237:
          uint64_t result = "kDYFEMTLDevice_harvested_newBufferWithBytes_length_options";
          break;
        case -10236:
          uint64_t result = "kDYFEMTLTexture_harvested_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_totalBytes";
          break;
        case -10235:
          uint64_t result = "kDYFEMTLBuffer_resourceUsage";
          break;
        case -10234:
          uint64_t result = "kDYFEMTLTexture_resourceUsage";
          break;
        case -10233:
          uint64_t result = "kDYFEMTLDevice_setSelectedCommandQueueAddress";
          break;
        case -10232:
          uint64_t result = "kDYFEMTLTexture_restoreIOSurfaceData_length_forPlane";
          break;
        case -10231:
          uint64_t result = "kDYFEMTLTexture_mipmapInfo";
          break;
        case -10230:
          uint64_t result = "kDYFEMTLDevice_setCapturingCommandQueueAddress";
          break;
        case -10229:
          uint64_t result = "kDYFEMTLCommandBuffer_indirectArgumentBufferData";
          break;
        case -10228:
          uint64_t result = "kDYFEMTLBuffer_gpuVirtualAddress";
          break;
        case -10227:
          uint64_t result = "kDYFEMTLTexture_uniqueIdentifier";
          break;
        case -10226:
          uint64_t result = "kDYFEMTLSamplerState_uniqueIdentifier";
          break;
        case -10225:
          uint64_t result = "kDYFEMTLCommandBuffer_encodeIndirectArgumentsForBuffer_data";
          break;
        case -10224:
          uint64_t result = "kDYFEFrameEnd";
          break;
        case -10223:
          uint64_t result = "kDYFEMTLBuffer_allocatedSize";
          break;
        case -10222:
          uint64_t result = "kDYFEMTLTexture_allocatedSize";
          break;
        case -10221:
          uint64_t result = "kDYFEMTLBuffer_indirectCommandBufferData";
          break;
        case -10220:
          uint64_t result = "kDYFEMTLRenderPipelineState_uniqueIdentifier";
          break;
        case -10219:
          uint64_t result = "kDYFEMTLIndirectCommandBuffer_restoreData";
          break;
        case -10218:
          uint64_t result = "kDYFEMTLIndirectCommandBuffer_uniqueIdentifier";
          break;
        case -10217:
          uint64_t result = "kDYFEMTLIndirectCommandBuffer_indirectCommandNop";
          break;
        case -10216:
          uint64_t result = "kDYFEMTLIndirectCommandBuffer_restoreOptimizedRanges";
          break;
        case -10215:
          uint64_t result = "kDYFEMTLIndirectCommandBuffer_allocatedSize";
          break;
        case -10214:
          uint64_t result = "kDYFEMTLComputePipelineState_uniqueIdentifier";
          break;
        case -10213:
          uint64_t result = "kDYFEMTLResourceStateCommandEncoder_harvested_updateTextureMapping_mode_region_mipLevel_slice";
          break;
        case -10212:
          uint64_t result = "kDYFEMTLTexture_timeSinceTouched";
          break;
        case -10211:
          uint64_t result = "kDYFEMTLHeap_timeSinceTouched";
          break;
        case -10210:
          uint64_t result = "kDYFEMTLBuffer_timeSinceTouched";
          break;
        case -10209:
          uint64_t result = "kDYFEMTLIndirectCommandBuffer_timeSinceTouched";
          break;
        case -10208:
          uint64_t result = "kDYFEMTLHeap_usedSize";
          break;
        case -10207:
          uint64_t result = "kDYFEMTLHeap_currentAllocatedSize";
          break;
        case -10206:
          uint64_t result = "kDYFEMTLSharedEventHandle_dealloc";
          break;
        case -10205:
          uint64_t result = "kDYFEMTLTexture_compressionFeedback";
          break;
        case -10204:
          uint64_t result = "kDYFEMTLTexture_allocationID";
          break;
        case -10203:
          uint64_t result = "kDYFEMTLBuffer_allocationID";
          break;
        case -10202:
          uint64_t result = "kDYFEMTLIndirectCommandBuffer_allocationID";
          break;
        case -10201:
          uint64_t result = "kDYFEMTLTexture_saveSlice_level_zPlane_normalize_blitOption_toPath";
          break;
        case -10200:
          uint64_t result = "kDYFEMTLBuffer_saveContentsToPath";
          break;
        case -10199:
          uint64_t result = "kDYFEMTLRenderPipelineState_resourceIndex";
          break;
        case -10198:
          uint64_t result = "kDYFEMTLTexture_resourceIndex";
          break;
        case -10197:
          uint64_t result = "kDYFEMTLAccelerationStructure_allocationID";
          break;
        case -10196:
          uint64_t result = "kDYFEMTLAccelerationStructure_allocatedSize";
          break;
        case -10195:
          uint64_t result = "kDYFEMTLAccelerationStructure_resourceUsage";
          break;
        case -10194:
          uint64_t result = "kDYFEMTLAccelerationStructure_restoreMTLAccelerationStructure";
          break;
        case -10193:
          uint64_t result = "kDYFEMTLVisibleFunctionTable_uniqueIdentifier";
          break;
        case -10192:
          uint64_t result = "kDYFEMTLRenderPipelineState_allocatedSize";
          break;
        case -10191:
          uint64_t result = "kDYFEMTLComputePipelineState_allocatedSize";
          break;
        case -10190:
          uint64_t result = "kDYFEMTLAccelerationStructure_restoreMTLAccelerationStructure_instance";
          break;
        case -10189:
          uint64_t result = "kDYFEMTLDynamicLibrary_installName";
          break;
        case -10188:
          uint64_t result = "kDYFEMTLLibrary_libraryIdentifier";
          break;
        case -10187:
          uint64_t result = "kDYFEMTLBuffer_heapOffset";
          break;
        case -10186:
          uint64_t result = "kDYFEMTLBuffer_parentGPUAddress_parentGPUSize";
          break;
        case -10185:
          uint64_t result = "kDYFEMTLTexture_heapOffset";
          break;
        case -10184:
          uint64_t result = "kDYFEMTLRenderPipelineState_imageblockSampleLength";
          break;
        case -10183:
          uint64_t result = "kDYFEMTLLibrary_type";
          break;
        case -10182:
          uint64_t result = "kDYFEMTLAccelerationStructure_allocationInfo";
          break;
        case -10181:
          uint64_t result = "kDYFEMTLAccelerationStructure_uniqueIdentifier";
          break;
        case -10180:
          uint64_t result = "kDYFEMTLIntersectionFunctionTable_timeSinceTouched";
          break;
        case -10179:
          uint64_t result = "kDYFEMTLIntersectionFunctionTable_allocatedSize";
          break;
        case -10178:
          uint64_t result = "kDYFEMTLVisibleFunctionTable_timeSinceTouched";
          break;
        case -10177:
          uint64_t result = "kDYFEMTLVisibleFunctionTable_allocationID";
          break;
        case -10176:
          uint64_t result = "kDYFEMTLIntersectionFunctionTable_allocationID";
          break;
        case -10175:
          uint64_t result = "kDYFEMTLIntersectionFunctionTable_uniqueIdentifier";
          break;
        case -10174:
          uint64_t result = "kDYFEMTLVisibleFunctionTable_allocatedSize";
          break;
        case -10173:
          uint64_t result = "kDYFEMTLAccelerationStructure_timeSinceTouched";
          break;
        case -10172:
          uint64_t result = "kDYFEMTLRenderPipelineState_timeSinceTouched";
          break;
        case -10171:
          uint64_t result = "kDYFEMTLComputePipelineState_timeSinceTouched";
          break;
        case -10170:
          uint64_t result = "kDYFEMTLAccelerationStructure_resourceIndex";
          break;
        case -10169:
          uint64_t result = "kDYFEMTLAccelerationStructure_heapOffset";
          break;
        case -10168:
          uint64_t result = "kDYFEBoundary_Frame";
          break;
        case -10167:
          uint64_t result = "kDYFEMTLAccelerationStructure_gpuResourceID";
          break;
        case -10166:
          uint64_t result = "kDYFEMTLIndirectCommandBuffer_gpuResourceID";
          break;
        case -10165:
          uint64_t result = "kDYFEMTLRenderPipelineState_gpuResourceID";
          break;
        case -10164:
          uint64_t result = "kDYFEMTLTexture_gpuResourceID";
          break;
        case -10163:
          uint64_t result = "kDYFEMTLSamplerState_gpuResourceID";
          break;
        case -10162:
          uint64_t result = "kDYFEMTLComputePipelineState_gpuResourceID";
          break;
        case -10161:
          uint64_t result = "kDYFEMTLIntersectionFunctionTable_gpuResourceID";
          break;
        case -10160:
          uint64_t result = "kDYFEMTLVisibleFunctionTable_gpuResourceID";
          break;
        case -10159:
          uint64_t result = "kDYFEMTLAccelerationStructure_state";
          break;
        case -10158:
          uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_setAccelerationStructureState";
          break;
        case -10157:
          uint64_t result = "kDYFEMTLFunction_setDescriptor_library";
          break;
        case -10156:
          uint64_t result = "kDYFEMTLAccelerationStructure_children";
          break;
        case -10155:
          uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_setAccelerationStructureChildren";
          break;
        case -10154:
          uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_setAccelerationStructureDescriptor";
          break;
        case -10153:
          uint64_t result = "kDYFEMTLVisibleFunctionTable_gpuAddress";
          break;
        case -10152:
          uint64_t result = "kDYFEMTLIntersectionFunctionTable_setBuffers";
          break;
        case -10151:
          uint64_t result = "kDYFEMTLCaptureManager_sharedCaptureManager";
          break;
        default:
          if (a1 == -12544)
          {
            uint64_t result = "kDYFEMTLCommandQueue_continueCommandBuffer_retainReferences";
          }

          else
          {
            if (a1 != -12543) {
              goto LABEL_1384;
            }
            uint64_t result = "kDYFEMTLIOCommandQueue_continueCommandBuffer_retainReferences";
          }

          break;
      }
    }
  }

  else if (a1 <= -18431)
  {
    switch(a1)
    {
      case -20480:
        uint64_t result = "kDYFEMTLFXSpatialScaler_setColorTexture";
        break;
      case -20479:
        uint64_t result = "kDYFEMTLFXSpatialScaler_setFence";
        break;
      case -20478:
        uint64_t result = "kDYFEMTLFXSpatialScaler_setInputContentHeight";
        break;
      case -20477:
        uint64_t result = "kDYFEMTLFXSpatialScaler_setInputContentWidth";
        break;
      case -20476:
        uint64_t result = "kDYFEMTLFXSpatialScaler_setOutputTexture";
        break;
      case -20475:
        uint64_t result = "kDYFEMTLFXSpatialScaler_dealloc";
        break;
      case -20474:
        uint64_t result = "kDYFEMTLFXSpatialScaler_encodeToCommandBuffer";
        break;
      case -20473:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setColorTexture";
        break;
      case -20472:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setDepthReversed";
        break;
      case -20471:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setDepthTexture";
        break;
      case -20470:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setExposureTexture";
        break;
      case -20469:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setFence";
        break;
      case -20468:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setInputContentHeight";
        break;
      case -20467:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setInputContentWidth";
        break;
      case -20466:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setJitterOffsetX";
        break;
      case -20465:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setJitterOffsetY";
        break;
      case -20464:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setMotionTexture";
        break;
      case -20463:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setMotionVectorScaleX";
        break;
      case -20462:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setMotionVectorScaleY";
        break;
      case -20461:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setOutputTexture";
        break;
      case -20460:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setPreExposure";
        break;
      case -20459:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setReset";
        break;
      case -20458:
        uint64_t result = "kDYFEMTLFXTemporalScaler_dealloc";
        break;
      case -20457:
        uint64_t result = "kDYFEMTLFXTemporalScaler_encodeToCommandBuffer";
        break;
      case -20456:
        uint64_t result = "kDYFEMTLFXTemporalScaler_setReactiveMaskTexture";
        break;
      default:
        if (a1 == -18432)
        {
          uint64_t result = "kDYFEMTLDevice_newSpatialScalerWithDescriptor";
        }

        else
        {
          if (a1 != -18431) {
            goto LABEL_1384;
          }
          uint64_t result = "kDYFEMTLDevice_newTemporalScalerWithDescriptor";
        }

        break;
    }
  }

  else
  {
    int v1 = a1 + 0x4000;
    uint64_t result = "kDYFEMTLBlitCommandEncoder_setLabel";
    switch(v1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_dealloc";
        break;
      case 2:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_de"
                 "stinationSlice_destinationLevel_destinationOrigin";
        break;
      case 3:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize"
                 "_toTexture_destinationSlice_destinationLevel_destinationOrigin";
        break;
      case 4:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_des"
                 "tinationOffset_destinationBytesPerRow_destinationBytesPerImage";
        break;
      case 5:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_generateMipmapsForTexture";
        break;
      case 6:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_fillBuffer_range_value";
        break;
      case 7:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size";
        break;
      case 8:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_endEncoding";
        break;
      case 9:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_insertDebugSignpost";
        break;
      case 10:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_pushDebugGroup";
        break;
      case 11:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_popDebugGroup";
        break;
      case 12:
        uint64_t result = "kDYFEMTLBuffer_setLabel";
        break;
      case 13:
        uint64_t result = "kDYFEMTLBuffer_setResponsibleProcess";
        break;
      case 14:
        uint64_t result = "kDYFEMTLBuffer_dealloc";
        break;
      case 15:
        uint64_t result = "kDYFEMTLBuffer_contents";
        break;
      case 16:
        uint64_t result = "kDYFEMTLBuffer_newTextureWithDescriptor_offset_bytesPerRow";
        break;
      case 17:
        uint64_t result = "kDYFEMTLBuffer_setPurgeableState";
        break;
      case 18:
        uint64_t result = "kDYFEMTLBuffer_isPurgeable";
        break;
      case 19:
        uint64_t result = "kDYFEMTLCommandBuffer_setLabel";
        break;
      case 20:
        uint64_t result = "kDYFEMTLCommandBuffer_setProfilingEnabled";
        break;
      case 21:
        uint64_t result = "kDYFEMTLCommandBuffer_dealloc";
        break;
      case 22:
        uint64_t result = "kDYFEMTLCommandBuffer_enqueue";
        break;
      case 23:
        uint64_t result = "kDYFEMTLCommandBuffer_commit";
        break;
      case 24:
        uint64_t result = "kDYFEMTLCommandBuffer_addScheduledHandler";
        break;
      case 25:
        uint64_t result = "kDYFEMTLCommandBuffer_presentDrawable";
        break;
      case 26:
        uint64_t result = "kDYFEMTLCommandBuffer_presentDrawable_atTime";
        break;
      case 27:
        uint64_t result = "kDYFEMTLCommandBuffer_waitUntilScheduled";
        break;
      case 28:
        uint64_t result = "kDYFEMTLCommandBuffer_addCompletedHandler";
        break;
      case 29:
        uint64_t result = "kDYFEMTLCommandBuffer_waitUntilCompleted";
        break;
      case 30:
        uint64_t result = "kDYFEMTLCommandBuffer_blitCommandEncoder";
        break;
      case 31:
        uint64_t result = "kDYFEMTLCommandBuffer_renderCommandEncoderWithDescriptor";
        break;
      case 32:
        uint64_t result = "kDYFEMTLCommandBuffer_computeCommandEncoder";
        break;
      case 33:
        uint64_t result = "kDYFEMTLCommandBuffer_parallelRenderCommandEncoderWithDescriptor";
        break;
      case 34:
        uint64_t result = "kDYFEMTLCommandBuffer_debugCommandEncoder";
        break;
      case 35:
        uint64_t result = "kDYFEMTLCommandQueue_setLabel";
        break;
      case 36:
        uint64_t result = "kDYFEMTLCommandQueue_setBackgroundTrackingPID";
        break;
      case 37:
        uint64_t result = "kDYFEMTLCommandQueue_setSkipRender";
        break;
      case 38:
        uint64_t result = "kDYFEMTLCommandQueue_setExecutionEnabled";
        break;
      case 39:
        uint64_t result = "kDYFEMTLCommandQueue_setProfilingEnabled";
        break;
      case 40:
        uint64_t result = "kDYFEMTLCommandQueue_dealloc";
        break;
      case 41:
        uint64_t result = "kDYFEMTLCommandQueue_commandBuffer";
        break;
      case 42:
        uint64_t result = "kDYFEMTLCommandQueue_commandBufferWithUnretainedReferences";
        break;
      case 43:
        uint64_t result = "kDYFEMTLCommandQueue_insertDebugCaptureBoundary";
        break;
      case 44:
        uint64_t result = "kDYFEMTLCommandQueue_finish";
        break;
      case 45:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setLabel";
        break;
      case 46:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_dealloc";
        break;
      case 47:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setComputePipelineState";
        break;
      case 48:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setBuffer_offset_atIndex";
        break;
      case 49:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setBuffers_offsets_withRange";
        break;
      case 50:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setTexture_atIndex";
        break;
      case 51:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setTextures_withRange";
        break;
      case 52:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setSamplerState_atIndex";
        break;
      case 53:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setSamplerStates_withRange";
        break;
      case 54:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 55:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 56:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setThreadgroupMemoryLength_atIndex";
        break;
      case 57:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_dispatchThreadgroups_threadsPerThreadgroup";
        break;
      case 58:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_executeBarrier";
        break;
      case 59:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_endEncoding";
        break;
      case 60:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_insertDebugSignpost";
        break;
      case 61:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_pushDebugGroup";
        break;
      case 62:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_popDebugGroup";
        break;
      case 63:
        uint64_t result = "kDYFEMTLComputePipelineState_dealloc";
        break;
      case 64:
        uint64_t result = "kDYFEMTLDepthStencilState_dealloc";
        break;
      case 65:
        uint64_t result = "kDYFEMTLDevice_setShaderDebugInfoCaching";
        break;
      case 66:
        uint64_t result = "kDYFEMTLDevice_setMetalAssertionsEnabled";
        break;
      case 67:
        uint64_t result = "kDYFEMTLDevice_dealloc";
        break;
      case 68:
        uint64_t result = "kDYFEMTLDevice_newCommandQueue";
        break;
      case 69:
        uint64_t result = "kDYFEMTLDevice_newCommandQueueWithMaxCommandBufferCount";
        break;
      case 70:
        uint64_t result = "kDYFEMTLDevice_newBufferWithLength_options";
        break;
      case 71:
        uint64_t result = "kDYFEMTLDevice_newBufferWithBytes_length_options";
        break;
      case 72:
        uint64_t result = "kDYFEMTLDevice_newBufferWithBytesNoCopy_length_options_deallocator";
        break;
      case 73:
        uint64_t result = "kDYFEMTLDevice_newDepthStencilStateWithDescriptor";
        break;
      case 74:
        uint64_t result = "kDYFEMTLDevice_newTextureWithDescriptor";
        break;
      case 75:
        uint64_t result = "kDYFEMTLDevice_newSamplerStateWithDescriptor";
        break;
      case 76:
        uint64_t result = "kDYFEMTLDevice_newDefaultLibrary";
        break;
      case 77:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithFile_error";
        break;
      case 78:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithData_error";
        break;
      case 79:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithSource_options_error";
        break;
      case 80:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithSource_options_completionHandler";
        break;
      case 81:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithDescriptor_error";
        break;
      case 82:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithDescriptor_options_reflection_error";
        break;
      case 83:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithDescriptor_completionHandler";
        break;
      case 84:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithDescriptor_options_completionHandler";
        break;
      case 85:
        uint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithFunction_error";
        break;
      case 86:
        uint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithFunction_options_reflection_error";
        break;
      case 87:
        uint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithFunction_completionHandler";
        break;
      case 88:
        uint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithFunction_options_completionHandler";
        break;
      case 89:
        uint64_t result = "kDYFEMTLDevice_unmapShaderSampleBuffer";
        break;
      case 90:
        uint64_t result = "kDYFEMTLDevice_newTextureWithDescriptor_iosurface_plane";
        break;
      case 91:
        uint64_t result = "kDYFEMTLFunction_dealloc";
        break;
      case 92:
        uint64_t result = "kDYFEMTLLibrary_setLabel";
        break;
      case 93:
        uint64_t result = "kDYFEMTLLibrary_dealloc";
        break;
      case 94:
        uint64_t result = "kDYFEMTLLibrary_newFunctionWithName";
        break;
      case 95:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setSeparateCommits";
        break;
      case 96:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setLabel";
        break;
      case 97:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_dealloc";
        break;
      case 98:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_renderCommandEncoder";
        break;
      case 99:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_endEncoding";
        break;
      case 100:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_insertDebugSignpost";
        break;
      case 101:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_pushDebugGroup";
        break;
      case 102:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_popDebugGroup";
        break;
      case 103:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setLabel";
        break;
      case 104:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_dealloc";
        break;
      case 105:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setRenderPipelineState";
        break;
      case 106:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBuffer_offset_atIndex";
        break;
      case 107:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBuffers_offsets_withRange";
        break;
      case 108:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexTexture_atIndex";
        break;
      case 109:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexTextures_withRange";
        break;
      case 110:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexSamplerState_atIndex";
        break;
      case 111:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexSamplerStates_withRange";
        break;
      case 112:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 113:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 114:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setViewport";
        break;
      case 115:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFrontFacingWinding";
        break;
      case 116:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setCullMode";
        break;
      case 117:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthClipMode";
        break;
      case 118:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthBias_slopeScale_clamp";
        break;
      case 119:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setScissorRect";
        break;
      case 120:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTriangleFillMode";
        break;
      case 121:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentBuffer_offset_atIndex";
        break;
      case 122:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentBuffers_offsets_withRange";
        break;
      case 123:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentTexture_atIndex";
        break;
      case 124:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentTextures_withRange";
        break;
      case 125:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentSamplerState_atIndex";
        break;
      case 126:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentSamplerStates_withRange";
        break;
      case 127:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 128:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 129:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setBlendColorRed_green_blue_alpha";
        break;
      case 130:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthStencilState";
        break;
      case 131:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setStencilReferenceValue";
        break;
      case 132:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVisibilityResultMode_offset";
        break;
      case 133:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawPrimitives_vertexStart_vertexCount_instanceCount";
        break;
      case 134:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawPrimitives_vertexStart_vertexCount";
        break;
      case 135:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount";
        break;
      case 136:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset";
        break;
      case 137:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setLineWidth";
        break;
      case 138:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_endEncoding";
        break;
      case 139:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_insertDebugSignpost";
        break;
      case 140:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_pushDebugGroup";
        break;
      case 141:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_popDebugGroup";
        break;
      case 142:
        uint64_t result = "kDYFEMTLRenderPipelineState_dealloc";
        break;
      case 143:
        uint64_t result = "kDYFEMTLSamplerState_dealloc";
        break;
      case 144:
        uint64_t result = "kDYFEMTLTexture_setLabel";
        break;
      case 145:
        uint64_t result = "kDYFEMTLTexture_setResponsibleProcess";
        break;
      case 146:
        uint64_t result = "kDYFEMTLTexture_dealloc";
        break;
      case 147:
        uint64_t result = "kDYFEMTLTexture_getBytes_bytesPerRow_bytesPerImage_fromRegion_mipmapLevel_slice";
        break;
      case 148:
        uint64_t result = "kDYFEMTLTexture_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage";
        break;
      case 149:
        uint64_t result = "kDYFEMTLTexture_getBytes_bytesPerRow_fromRegion_mipmapLevel";
        break;
      case 150:
        uint64_t result = "kDYFEMTLTexture_replaceRegion_mipmapLevel_withBytes_bytesPerRow";
        break;
      case 151:
        uint64_t result = "kDYFEMTLTexture_newTextureViewWithPixelFormat";
        break;
      case 152:
        uint64_t result = "kDYFEMTLTexture_setPurgeableState";
        break;
      case 153:
        uint64_t result = "kDYFEMTLTexture_isPurgeable";
        break;
      case 154:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_flushResource";
        break;
      case 155:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_flushTexture_slice_mipmapLevel";
        break;
      case 156:
        uint64_t result = "kDYFEMTLBuffer_invalidateRange";
        break;
      case 157:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setBytes_length_atIndex";
        break;
      case 158:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setBufferOffset_atIndex";
        break;
      case 159:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBytes_length_atIndex";
        break;
      case 160:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBufferOffset_atIndex";
        break;
      case 161:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentBytes_length_atIndex";
        break;
      case 162:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentBufferOffset_atIndex";
        break;
      case 163:
        uint64_t result = "kDYFEMTLTexture_invalidateRegion";
        break;
      case 164:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_dispatchThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerThreadgroup";
        break;
      case 165:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setStencilFrontReferenceValue_backReferenceValue";
        break;
      case 166:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance";
        break;
      case 167:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_i"
                 "nstanceCount_baseVertex_baseInstance";
        break;
      case 168:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawPrimitives_indirectBuffer_indirectBufferOffset";
        break;
      case 169:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawIndexedPrimitives_indexType_indexBuffer_indexBufferOffset_indirectBuff"
                 "er_indirectBufferOffset";
        break;
      case 170:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentTexture_atTextureIndex_samplerState_atSamplerIndex";
        break;
      case 171:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_synchronizeResource";
        break;
      case 172:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_synchronizeTexture_slice_level";
        break;
      case 173:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_de"
                 "stinationSlice_destinationLevel_destinationOrigin_options";
        break;
      case 174:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize"
                 "_toTexture_destinationSlice_destinationLevel_destinationOrigin_options";
        break;
      case 175:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_des"
                 "tinationOffset_destinationBytesPerRow_destinationBytesPerImage_options";
        break;
      case 176:
        uint64_t result = "kDYFEMTLBuffer_didModifyRange";
        break;
      case 177:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setTexture_baseLevel_atIndex";
        break;
      case 178:
        uint64_t result = "kDYFEMTLDevice_supportsFeatureSet";
        break;
      case 179:
        uint64_t result = "kDYFEMTLDevice_supportsSampleCount";
        break;
      case 180:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexTexture_baseLevel_atIndex";
        break;
      case 181:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentTexture_baseLevel_atIndex";
        break;
      case 182:
        uint64_t result = "kDYFEMTLCommandBuffer_commitAndHold";
        break;
      case 183:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_textureBarrier";
        break;
      case 184:
        uint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithDescriptor_error";
        break;
      case 185:
        uint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithDescriptor_options_reflection_error";
        break;
      case 186:
        uint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithDescriptor_completionHandler";
        break;
      case 187:
        uint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithDescriptor_options_completionHandler";
        break;
      case 188:
        uint64_t result = "kDYFEMTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices";
        break;
      case 189:
        uint64_t result = "kDYFEMTLCommandBuffer_fragmentRenderCommandEncoderWithDescriptor";
        break;
      case 190:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setLabel";
        break;
      case 191:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_dealloc";
        break;
      case 192:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setRenderPipelineState";
        break;
      case 193:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setDepthBias_slopeScale_clamp";
        break;
      case 194:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setScissorRect";
        break;
      case 195:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentBytes_length_atIndex";
        break;
      case 196:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentBuffer_offset_atIndex";
        break;
      case 197:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentBufferOffset_atIndex";
        break;
      case 198:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentBuffers_offsets_withRange";
        break;
      case 199:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentTexture_atIndex";
        break;
      case 200:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentTextures_withRange";
        break;
      case 201:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentTexture_baseLevel_atIndex";
        break;
      case 202:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentTexture_atTextureIndex_samplerState_atSamplerIndex";
        break;
      case 203:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentSamplerState_atIndex";
        break;
      case 204:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentSamplerStates_withRange";
        break;
      case 205:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 206:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 207:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setBlendColorRed_green_blue_alpha";
        break;
      case 208:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setDepthStencilState";
        break;
      case 209:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setStencilReferenceValue";
        break;
      case 210:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setStencilFrontReferenceValue_backReferenceValue";
        break;
      case 211:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_drawTrianglesWithPositions_vertexCount_triangleIndices_triangleCount";
        break;
      case 212:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_drawTrianglesWithPositions_vertexCount_vertexVaryings_varyingCount"
                 "PerVertex_triangleIndices_triangleCount";
        break;
      case 213:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_drawTrianglesWithPositions_vertexCount_vertexVaryings_varyingCountPerVertex";
        break;
      case 214:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_endEncoding";
        break;
      case 215:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_insertDebugSignpost";
        break;
      case 216:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_pushDebugGroup";
        break;
      case 217:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_popDebugGroup";
        break;
      case 218:
        uint64_t result = "kDYFEMTLDevice_supportsTextureSampleCount";
        break;
      case 219:
        uint64_t result = "kDYFEMTLDevice_newCommandQueueWithDescriptor";
        break;
      case 220:
        uint64_t result = "kDYFEMTLCommandBuffer_setListIndex";
        break;
      case 221:
        uint64_t result = "kDYFEMTLDevice_newBufferWithIOSurface";
        break;
      case 222:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setColorStoreAction_atIndex";
        break;
      case 223:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setDepthStoreAction";
        break;
      case 224:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setStencilStoreAction";
        break;
      case 225:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setColorStoreAction_atIndex";
        break;
      case 226:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthStoreAction";
        break;
      case 227:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setStencilStoreAction";
        break;
      case 228:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setColorResolveTexture_slice_depthPlane_level_atIndex";
        break;
      case 229:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthResolveTexture_slice_depthPlane_level";
        break;
      case 230:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setColorStoreAction_atIndex";
        break;
      case 231:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setDepthStoreAction";
        break;
      case 232:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setStencilStoreAction";
        break;
      case 233:
        uint64_t result = "kDYFEMTLCommandBuffer_computeCommandEncoderWithParallelExecution";
        break;
      case 234:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_dispatchBarrier";
        break;
      case 235:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setImageblockWidth_height";
        break;
      case 236:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTessellationFactorBuffer_offset_instanceStride";
        break;
      case 237:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_"
                 "instanceCount_baseInstance";
        break;
      case 238:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawPatches_patchIndexBuffer_patchIndexBufferOffset_indirectBuffer_indirectBufferOffset";
        break;
      case 239:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBuffer"
                 "Offset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance";
        break;
      case 240:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawIndexedPatches_patchIndexBuffer_patchIndexBufferOffset_controlPointInd"
                 "exBuffer_controlPointIndexBufferOffset_indirectBuffer_indirectBufferOffset";
        break;
      case 241:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileBytes_length_atIndex";
        break;
      case 242:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileBuffer_offset_atIndex";
        break;
      case 243:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileBufferOffset_atIndex";
        break;
      case 244:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileTexture_atIndex";
        break;
      case 245:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileSamplerState_atIndex";
        break;
      case 246:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 247:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_dispatchThreadsPerTile";
        break;
      case 248:
        uint64_t result = "kDYFEMTLFence_setLabel";
        break;
      case 249:
        uint64_t result = "kDYFEMTLFunction_functionConstantIndexByName_type";
        break;
      case 250:
        uint64_t result = "kDYFEMTLCommandQueue_setIsOpenGLQueue";
        break;
      case 251:
        uint64_t result = "kDYFEMTLCommandBuffer_presentDrawable_afterMinimumDuration";
        break;
      case 252:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTessellationFactorScale";
        break;
      case 253:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_waitForFence";
        break;
      case 254:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_updateFence";
        break;
      case 255:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_waitForFence";
        break;
      case 256:
        uint64_t result = "kDYFEMTLDevice_newFence";
        break;
      case 257:
        uint64_t result = "kDYFEMTLFence_dealloc";
        break;
      case 258:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_updateFence_afterStages";
        break;
      case 259:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_waitForFence_beforeStages";
        break;
      case 260:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_updateFence";
        break;
      case 261:
        uint64_t result = "kDYFEMTLFunction_setLabel";
        break;
      case 262:
        uint64_t result = "kDYFEMTLBuffer_makeAliasable";
        break;
      case 263:
        uint64_t result = "kDYFEMTLDevice_heapTextureSizeWithDescriptor";
        break;
      case 264:
        uint64_t result = "kDYFEMTLDevice_newHeapWithDescriptor";
        break;
      case 265:
        uint64_t result = "kDYFEMTLHeap_setLabel";
        break;
      case 266:
        uint64_t result = "kDYFEMTLHeap_dealloc";
        break;
      case 267:
        uint64_t result = "kDYFEMTLHeap_newBufferWithLength_options";
        break;
      case 268:
        uint64_t result = "kDYFEMTLHeap_newTextureWithDescriptor";
        break;
      case 269:
        uint64_t result = "kDYFEMTLHeap_setPurgeableState";
        break;
      case 270:
        uint64_t result = "kDYFEMTLTexture_makeAliasable";
        break;
      case 271:
        uint64_t result = "kDYFEMTLBuffer_isAliasable";
        break;
      case 272:
        uint64_t result = "kDYFEMTLDevice_heapTextureSizeAndAlignWithDescriptor";
        break;
      case 273:
        uint64_t result = "kDYFEMTLDevice_heapBufferSizeAndAlignWithLength_options";
        break;
      case 274:
        uint64_t result = "kDYFEMTLHeap_setResponsibleProcess";
        break;
      case 275:
        uint64_t result = "kDYFEMTLHeap_isPurgeable";
        break;
      case 276:
        uint64_t result = "kDYFEMTLTexture_isAliasable";
        break;
      case 277:
        uint64_t result = "kDYFEMTLLibrary_newFunctionWithName_constantValues_error";
        break;
      case 278:
        uint64_t result = "kDYFEMTLLibrary_newFunctionWithName_constantValues_completionHandler";
        break;
      case 279:
        uint64_t result = "kDYFEMTLHeap_maxAvailableSizeWithAlignment";
        break;
      case 280:
        uint64_t result = "kDYFEMTLBuffer_newTiledTextureWithDescriptor_offset_bytesPerRow";
        break;
      case 281:
        uint64_t result = "kDYFEMTLBuffer_addDebugMarker_range";
        break;
      case 282:
        uint64_t result = "kDYFEMTLBuffer_removeAllDebugMarkers";
        break;
      case 283:
        uint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error";
        break;
      case 284:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setStageInRegion";
        break;
      case 285:
        uint64_t result = "kDYFEMTLDevice_newTextureLayoutWithDescriptor_isHeapOrBufferBacked";
        break;
      case 286:
        uint64_t result = "kDYFEMTLBuffer_newLinearTextureWithDescriptor_offset_bytesPerRow_bytesPerImage";
        break;
      case 287:
        uint64_t result = "kDYFEMTLTextureLayout_dealloc";
        break;
      case 288:
        uint64_t result = "kDYFEMTLDevice_newTextureWithBytesNoCopy_length_descriptor_deallocator";
        break;
      case 289:
        uint64_t result = "kDYFEMTLDevice_newDefaultLibraryWithBundle_error";
        break;
      case 290:
        uint64_t result = "kDYFEMTLTexture_formattedDescription";
        break;
      case 291:
        uint64_t result = "kDYFEMTLDevice_minLinearTextureAlignmentForPixelFormat";
        break;
      case 292:
        uint64_t result = "kDYFEMTLComputePipelineState_getComputeKernelTelemetryID";
        break;
      case 293:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithTileDescriptor_error";
        break;
      case 294:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithTileDescriptor_options_reflection_error";
        break;
      case 295:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithTileDescriptor_completionHandler";
        break;
      case 296:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithTileDescriptor_options_completionHandler";
        break;
      case 297:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileBuffers_offsets_withRange";
        break;
      case 298:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileTextures_withRange";
        break;
      case 299:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileSamplerStates_withRange";
        break;
      case 300:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 301:
        uint64_t result = "kDYFEMTLLibrary_setOverrideTriple";
        break;
      case 302:
        uint64_t result = "kDYFEMTLLibrary_newFunctionWithName_constantValues_pipelineLibrary_error";
        break;
      case 303:
        uint64_t result = "kDYFEMTLLibrary_newFunctionWithName_constantValues_pipelineLibrary_completionHandler";
        break;
      case 304:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setThreadgroupMemoryLength_atIndex";
        break;
      case 305:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_dispatchThreadsWithIndirectBuffer_indirectBufferOffset";
        break;
      case 306:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_dispatchThreads_threadsPerThreadgroup";
        break;
      case 307:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setViewports_count";
        break;
      case 308:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setScissorRects_count";
        break;
      case 309:
        uint64_t result = "kDYFEMTLDevice_newPipelineLibraryWithFilePath_error";
        break;
      case 310:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setThreadgroupMemoryLength_offset_atIndex";
        break;
      case 311:
        uint64_t result = "kDYFEMTLCaptureScope_setLabel";
        break;
      case 312:
        uint64_t result = "kDYFEMTLCaptureScope_dealloc";
        break;
      case 313:
        uint64_t result = "kDYFEMTLCaptureScope_beginScope";
        break;
      case 314:
        uint64_t result = "kDYFEMTLCaptureScope_endScope";
        break;
      case 315:
        uint64_t result = "kDYFEMTLCaptureManager_startCaptureWithDevice";
        break;
      case 316:
        uint64_t result = "kDYFEMTLCaptureManager_startCaptureWithCommandQueue";
        break;
      case 317:
        uint64_t result = "kDYFEMTLCaptureManager_stopCapture";
        break;
      case 318:
        uint64_t result = "kDYFEMTLDevice_startCollectingPipelineDescriptors";
        break;
      case 319:
        uint64_t result = "kDYFEMTLCommandBuffer_pushDebugGroup";
        break;
      case 320:
        uint64_t result = "kDYFEMTLCommandBuffer_popDebugGroup";
        break;
      case 321:
        uint64_t result = "kDYFEMTLArgumentEncoder_setLabel";
        break;
      case 322:
        uint64_t result = "kDYFEMTLArgumentEncoder_dealloc";
        break;
      case 323:
        uint64_t result = "kDYFEMTLArgumentEncoder_setArgumentBuffer_offset";
        break;
      case 324:
        uint64_t result = "kDYFEMTLArgumentEncoder_setBuffer_offset_atIndex";
        break;
      case 325:
        uint64_t result = "kDYFEMTLArgumentEncoder_setBuffers_offsets_withRange";
        break;
      case 326:
        uint64_t result = "kDYFEMTLArgumentEncoder_setTexture_atIndex";
        break;
      case 327:
        uint64_t result = "kDYFEMTLArgumentEncoder_setTextures_withRange";
        break;
      case 328:
        uint64_t result = "kDYFEMTLArgumentEncoder_setSamplerState_atIndex";
        break;
      case 329:
        uint64_t result = "kDYFEMTLArgumentEncoder_setSamplerStates_withRange";
        break;
      case 330:
        uint64_t result = "kDYFEMTLArgumentEncoder_constantDataAtIndex";
        break;
      case 331:
        uint64_t result = "kDYFEMTLArgumentEncoder_newArgumentEncoderForBufferAtIndex";
        break;
      case 332:
        uint64_t result = "kDYFEMTLFunction_newArgumentEncoderWithBufferIndex";
        break;
      case 333:
        uint64_t result = "kDYFEMTLFunction_newArgumentEncoderWithBufferIndex_reflection";
        break;
      case 334:
        uint64_t result = "kDYFEMTLDevice_newArgumentEncoderWithArguments_count";
        break;
      case 335:
        uint64_t result = "kDYFEMTLDevice_newArgumentBufferLayoutWithStructType";
        break;
      case 336:
        uint64_t result = "kDYFEMTLDevice_newArgumentEncoderWithLayout";
        break;
      case 337:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_useResource_usage";
        break;
      case 338:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_useResources_count_usage";
        break;
      case 339:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_useHeap";
        break;
      case 340:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_useHeaps_count";
        break;
      case 341:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useResource_usage";
        break;
      case 342:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useResources_count_usage";
        break;
      case 343:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useHeap";
        break;
      case 344:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useHeaps_count";
        break;
      case 345:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithURL_error";
        break;
      case 346:
        uint64_t result = "kDYFEMTLLibrary_newExternFunctionWithName";
        break;
      case 347:
        uint64_t result = "kDYFEMTLDevice_newArgumentEncoderWithArguments";
        break;
      case 348:
        uint64_t result = "kDYFEMTLDevice_indirectArgumentBufferDecodingData";
        break;
      case 349:
        uint64_t result = "kDYFEMTLDevice_setIndirectArgumentBufferDecodingData";
        break;
      case 350:
        uint64_t result = "kDYFEMTLCaptureManager_notifySubmissionForEyeSPI_iosurface_bounds_submitFlags";
        break;
      case 351:
        uint64_t result = "kDYFEMTLArgumentEncoder_setArgumentBuffer_startOffset_arrayElement";
        break;
      case 352:
        uint64_t result = "kDYFEMTLTextureLayout_initializeTextureMemory";
        break;
      case 353:
        uint64_t result = "kDYFEMTLDevice_newTiledTextureWithBytesNoCopy_length_descriptor_offset_bytesPerRow";
        break;
      case 354:
        uint64_t result = "kDYFEMTLDevice_newTiledTextureWithBytesNoCopy_length_deallocator_descriptor_offset_bytesPerRow";
        break;
      case 355:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithCIFilters_imageFilterFunctionInfo_error";
        break;
      case 356:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setColorStoreActionOptions_atIndex";
        break;
      case 357:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setDepthStoreActionOptions";
        break;
      case 358:
        uint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setStencilStoreActionOptions";
        break;
      case 359:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setColorStoreActionOptions_atIndex";
        break;
      case 360:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setDepthStoreActionOptions";
        break;
      case 361:
        uint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setStencilStoreActionOptions";
        break;
      case 362:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setColorStoreActionOptions_atIndex";
        break;
      case 363:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthStoreActionOptions";
        break;
      case 364:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setStencilStoreActionOptions";
        break;
      case 365:
        uint64_t result = "kDYFEMTLCaptureManager_notifyPostPresentHandoffSPI";
        break;
      case 366:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithCIFiltersForComputePipeline_imageFilterFunctionInfo_error";
        break;
      case 367:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setStageInRegionWithIndirectBuffer_indirectBufferOffset";
        break;
      case 368:
        uint64_t result = "kDYFEMTLDevice_newIndirectRenderCommandEncoderWithBuffer";
        break;
      case 369:
        uint64_t result = "kDYFEMTLDevice_newIndirectComputeCommandEncoderWithBuffer";
        break;
      case 370:
        uint64_t result = "kDYFEMTLCommandBuffer_computeCommandEncoderWithDispatchType";
        break;
      case 371:
        uint64_t result = "kDYFEMTLCommandBuffer_videoCommandEncoder";
        break;
      case 372:
        uint64_t result = "kDYFEMTLCommandBuffer_doCorruptCBSPI";
        break;
      case 373:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_useComputePipelineState";
        break;
      case 374:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_useComputePipelineStates_count";
        break;
      case 375:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_memoryBarrierWithScope";
        break;
      case 376:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_memoryBarrierWithResources_count";
        break;
      case 377:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useRenderPipelineState";
        break;
      case 378:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useRenderPipelineStates_count";
        break;
      case 379:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_executeCommandsInBuffer_startIndex";
        break;
      case 380:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_memoryBarrierWithScope_afterStages_beforeStages";
        break;
      case 381:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_memoryBarrierWithResources_count_afterStages_beforeStages";
        break;
      case 382:
        uint64_t result = "kDYFEMTLArgumentEncoder_setRenderPipelineState_atIndex";
        break;
      case 383:
        uint64_t result = "kDYFEMTLArgumentEncoder_setRenderPipelineStates_withRange";
        break;
      case 384:
        uint64_t result = "kDYFEMTLArgumentEncoder_setComputePipelineState_atIndex";
        break;
      case 385:
        uint64_t result = "kDYFEMTLArgumentEncoder_setComputePipelineStates_withRange";
        break;
      case 386:
        uint64_t result = "kDYFEMTLDevice_minimumTextureBufferAlignmentForPixelFormat";
        break;
      case 387:
        uint64_t result = "kDYFEMTLDevice_newEvent";
        break;
      case 388:
        uint64_t result = "kDYFEMTLDevice_newSharedEvent";
        break;
      case 389:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_optimizeContentsForGPUAccess";
        break;
      case 390:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_optimizeContentsForGPUAccess_slice_level";
        break;
      case 391:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_optimizeContentsForCPUAccess";
        break;
      case 392:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_optimizeContentsForCPUAccess_slice_level";
        break;
      case 393:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeWaitForEvent_value";
        break;
      case 394:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeSignalEvent_value";
        break;
      case 395:
        uint64_t result = "kDYFEMTLComputePipelineState_resourceIndex";
        break;
      case 396:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setPointSize";
        break;
      case 397:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setClipPlane_p2_p3_p4_atIndex";
        break;
      case 398:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexSamplerState_lodMinClamp_lodMaxClamp_lodBias_atIndex";
        break;
      case 399:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentSamplerState_lodMinClamp_lodMaxClamp_lodBias_atIndex";
        break;
      case 400:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setPrimitiveRestartEnabled_index";
        break;
      case 401:
        uint64_t result = "kDYFEMTLSamplerState_resourceIndex";
        break;
      case 402:
        uint64_t result = "kDYFEMTLSharedTextureHandle_dealloc";
        break;
      case 403:
        uint64_t result = "kDYFEMTLTexture_newSharedHandle";
        break;
      case 404:
        uint64_t result = "kDYFEMTLDevice_newSharedTextureWithDescriptor";
        break;
      case 405:
        uint64_t result = "kDYFEMTLDevice_newSharedTextureWithHandle";
        break;
      case 406:
        uint64_t result = "kDYFEMTLDevice_tileSizeWithTextureType_pixelFormat_sampleCount";
        break;
      case 407:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_getTextureAccessCounters_region_mipLevel_slice_resetCounters_countersBuffer_"
                 "countersBufferOffset";
        break;
      case 408:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_resetTextureAccessCounters_region_mipLevel_slice";
        break;
      case 409:
        uint64_t result = "kDYFEMTLSharedEvent_setSignaledValue";
        break;
      case 410:
        uint64_t result = "kDYFEMTLSharedEvent_setLabel";
        break;
      case 411:
        uint64_t result = "kDYFEMTLSharedEvent_dealloc";
        break;
      case 412:
        uint64_t result = "kDYFEMTLDevice_newIndirectCommandBufferWithDescriptor_maxCount_options";
        break;
      case 413:
        uint64_t result = "kDYFEMTLDevice_reserveResourceIndicesForResourceType_indices_indexCount";
        break;
      case 414:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setPrimitiveRestartEnabled";
        break;
      case 415:
        uint64_t result = "kDYFEMTLDevice_newIndirectCommandBufferWithDescriptor_maxCommandCount_options";
        break;
      case 416:
        uint64_t result = "kDYFEMTLDevice_getIndirectCommandBufferHeaderSize";
        break;
      case 417:
        uint64_t result = "kDYFEMTLCommandBuffer_addPurgedResource";
        break;
      case 418:
        uint64_t result = "kDYFEMTLCommandBuffer_addPurgedHeap";
        break;
      case 419:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_executeCommandsInBuffer_startIndex";
        break;
      case 420:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_executeCommandsInBuffer_withRange";
        break;
      case 421:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_executeCommandsInBuffer_indirectBuffer_indirectBufferOffset";
        break;
      case 422:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_executeCommandsInBuffer_withRange";
        break;
      case 423:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_executeCommandsInBuffer_indirectBuffer_indirectBufferOffset";
        break;
      case 424:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_resetCommandsInBuffer_withRange";
        break;
      case 425:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_copyIndirectCommandBuffer_sourceRange_destination_destinationIndex";
        break;
      case 426:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_optimizeIndirectCommandBuffer_withRange";
        break;
      case 427:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_dealloc";
        break;
      case 428:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setRenderPipelineState";
        break;
      case 429:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setVertexBuffer_offset_atIndex";
        break;
      case 430:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setFragmentBuffer_offset_atIndex";
        break;
      case 431:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset"
                 "_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorB"
                 "ufferInstanceStride_tessellationFactorBufferScale";
        break;
      case 432:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset"
                 "_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorB"
                 "ufferInstanceStride";
        break;
      case 433:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBuffe"
                 "rOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance_tessellationFa"
                 "ctorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride_tessellationFactorBufferScale";
        break;
      case 434:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBuffe"
                 "rOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance_tessellationFa"
                 "ctorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride";
        break;
      case 435:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance";
        break;
      case 436:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_"
                 "instanceCount_baseVertex_baseInstance";
        break;
      case 437:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_nop";
        break;
      case 438:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_end";
        break;
      case 439:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setTessellationFactorBuffer_offset_instanceStride";
        break;
      case 440:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setTessellationFactorScale";
        break;
      case 441:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset"
                 "_instanceCount_baseInstance";
        break;
      case 442:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBuffe"
                 "rOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance";
        break;
      case 443:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_dispatchThreadsPerTile";
        break;
      case 444:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setVertexArgument_offset_atIndex";
        break;
      case 445:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setFragmentArgument_offset_atIndex";
        break;
      case 446:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setTileArgument_offset_atIndex";
        break;
      case 447:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setThreadgroupMemoryLength_offset_atIndex";
        break;
      case 448:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_endIndirectCommandBuffer";
        break;
      case 449:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_dealloc";
        break;
      case 450:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_setComputePipelineState";
        break;
      case 451:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_setKernelBuffer_offset_atIndex";
        break;
      case 452:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_dispatchThreadgroups_threadsPerThreadgroup";
        break;
      case 453:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_concurrentDispatchThreadgroups_threadsPerThreadgroup";
        break;
      case 454:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_nop";
        break;
      case 455:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_endIndirectCommandBuffer";
        break;
      case 456:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_setKernelArgument_offset_atIndex";
        break;
      case 457:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_setThreadgroupMemoryLength_atIndex";
        break;
      case 458:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_setStageInRegion";
        break;
      case 459:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_setLabel";
        break;
      case 460:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_setResponsibleProcess";
        break;
      case 461:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_dealloc";
        break;
      case 462:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_indirectRenderCommandAtIndex";
        break;
      case 463:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_indirectComputeCommandAtIndex";
        break;
      case 464:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_setPurgeableState";
        break;
      case 465:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_makeAliasable";
        break;
      case 466:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_isAliasable";
        break;
      case 467:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_isPurgeable";
        break;
      case 468:
        uint64_t result = "kDYFEMTLArgumentEncoder_setIndirectCommandBuffer_atIndex";
        break;
      case 469:
        uint64_t result = "kDYFEMTLArgumentEncoder_setIndirectCommandBuffers_withRange";
        break;
      case 470:
        uint64_t result = "kDYFEMTLBuffer_newRemoteBufferViewForDevice";
        break;
      case 471:
        uint64_t result = "kDYFEMTLTexture_newRemoteTextureViewForDevice";
        break;
      case 472:
        uint64_t result = "kDYFEMTLDevice_newSharedEventWithMachPort";
        break;
      case 473:
        uint64_t result = "kDYFEMTLSharedEvent_eventPort";
        break;
      case 474:
        uint64_t result = "kDYFEMTLTexture_newSharedTextureHandle";
        break;
      case 475:
        uint64_t result = "kDYFEMTLDevice_newSharedEventWithHandle";
        break;
      case 476:
        uint64_t result = "kDYFEMTLCommandBuffer_commitAndWaitUntilSubmitted";
        break;
      case 477:
        uint64_t result = "kDYFEMTLSharedEvent_newSharedEventHandle";
        break;
      case 478:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_reset";
        break;
      case 479:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_reset";
        break;
      case 480:
        uint64_t result = "kDYFEMTLBuffer_containsResource";
        break;
      case 481:
        uint64_t result = "kDYFEMTLTexture_containsResource";
        break;
      case 482:
        uint64_t result = "kDYFEMTLDevice_supportsPrimitiveType";
        break;
      case 483:
        uint64_t result = "kDYFEMTLDevice_startCollectingPipelineDescriptorsUsingPrefixForNames";
        break;
      case 484:
        uint64_t result = "kDYFEMTLDevice_newResourceGroupFromResources_count";
        break;
      case 485:
        uint64_t result = "kDYFEMTLCommandBuffer_sampledComputeCommandEncoderWithDispatchType_programInfoBuffer_capacity";
        break;
      case 486:
        uint64_t result = "kDYFEMTLCommandBuffer_setResourceGroups_count";
        break;
      case 487:
        uint64_t result = "kDYFEMTLCommandBuffer_dropResourceGroups_count";
        break;
      case 488:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_resetWithRange";
        break;
      case 489:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_containsResource";
        break;
      case 490:
        uint64_t result = "kDYFEMTLTexture_isShareable";
        break;
      case 491:
        uint64_t result = "kDYFEMTLMotionEstimationPipeline_dealloc";
        break;
      case 492:
        uint64_t result = "kDYFEMTLDevice_motionEstimatorCapabilities";
        break;
      case 493:
        uint64_t result = "kDYFEMTLDevice_newMotionEstimationPipelineWithDescriptor";
        break;
      case 494:
        uint64_t result = "kDYFEMTLVideoCommandEncoder_setLabel";
        break;
      case 495:
        uint64_t result = "kDYFEMTLVideoCommandEncoder_dealloc";
        break;
      case 496:
        uint64_t result = "kDYFEMTLVideoCommandEncoder_setMotionEstimationPipeline";
        break;
      case 497:
        uint64_t result = "kDYFEMTLVideoCommandEncoder_generateMotionVectorsForTexture_previousTexture_resultBuffer_bufferOffset";
        break;
      case 498:
        uint64_t result = "kDYFEMTLVideoCommandEncoder_waitForFence";
        break;
      case 499:
        uint64_t result = "kDYFEMTLVideoCommandEncoder_updateFence";
        break;
      case 500:
        uint64_t result = "kDYFEMTLVideoCommandEncoder_endEncoding";
        break;
      case 501:
        uint64_t result = "kDYFEMTLVideoCommandEncoder_insertDebugSignpost";
        break;
      case 502:
        uint64_t result = "kDYFEMTLVideoCommandEncoder_pushDebugGroup";
        break;
      case 503:
        uint64_t result = "kDYFEMTLVideoCommandEncoder_popDebugGroup";
        break;
      case 504:
        uint64_t result = "kDYFEMTLEvent_setLabel";
        break;
      case 505:
        uint64_t result = "kDYFEMTLEvent_dealloc";
        break;
      case 506:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_toTexture_destinationSlice_destinati"
                 "onLevel_sliceCount_levelCount";
        break;
      case 507:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_toTexture";
        break;
      case 508:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_resolveCountersWithIndexRange_sampleBuffer_resolvedBuffer";
        break;
      case 509:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_sampleCountersInBuffer_atIndex_allowOverlap";
        break;
      case 510:
        uint64_t result = "kDYFEMTLBuffer_setResourceIndex";
        break;
      case 511:
        uint64_t result = "kDYFEMTLCommandBuffer_debugBufferContentsWithLength";
        break;
      case 512:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeCacheControlFinalizeOperation_resourceGroups_count";
        break;
      case 513:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeCacheControlTagOperation_resourceGroups_count";
        break;
      case 514:
        uint64_t result = "kDYFEMTLCommandBuffer_resourceStateCommandEncoder";
        break;
      case 515:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_sampleCountersInBuffer_atIndex_allowOverlap";
        break;
      case 516:
        uint64_t result = "kDYFEMTLComputePipelineState_setResourceIndex";
        break;
      case 517:
        uint64_t result = "kDYFEMTLCounterSampleBuffer_dealloc";
        break;
      case 518:
        uint64_t result = "kDYFEMTLDeserializationContext_dealloc";
        break;
      case 519:
        uint64_t result = "kDYFEMTLDeserializationContext_functionWithFunctionRef";
        break;
      case 520:
        uint64_t result = "kDYFEMTLDevice_setCurrentUtilityBufferIndex";
        break;
      case 521:
        uint64_t result = "kDYFEMTLDevice_setResourceIndirectionEnabled";
        break;
      case 522:
        uint64_t result = "kDYFEMTLDevice_setUtilityBuffers";
        break;
      case 523:
        uint64_t result = "kDYFEMTLDevice_addBufferToGlobalResourceTable";
        break;
      case 524:
        uint64_t result = "kDYFEMTLDevice_addComputePipelineStateToGlobalResourceTable";
        break;
      case 525:
        uint64_t result = "kDYFEMTLDevice_addIndirectCommandBufferToGlobalResourceTable";
        break;
      case 526:
        uint64_t result = "kDYFEMTLDevice_addRenderPipelineStateToGlobalResourceTable";
        break;
      case 527:
        uint64_t result = "kDYFEMTLDevice_addSamplerStateToGlobalResourceTable";
        break;
      case 528:
        uint64_t result = "kDYFEMTLDevice_addTextureToGlobalResourceTable";
        break;
      case 529:
        uint64_t result = "kDYFEMTLDevice_allowLibrariesFromOtherPlatforms";
        break;
      case 530:
        uint64_t result = "kDYFEMTLDevice_createNewUtilityBuffer";
        break;
      case 531:
        uint64_t result = "kDYFEMTLDevice_describeCounter";
        break;
      case 532:
        uint64_t result = "kDYFEMTLDevice_indirectBufferAddressForResourceIndex_offset";
        break;
      case 533:
        uint64_t result = "kDYFEMTLDevice_newBufferWithBytes_length_options_atResourceIndex";
        break;
      case 534:
        uint64_t result = "kDYFEMTLDevice_newBufferWithBytesNoCopy_length_options_atResourceIndex_deallocator";
        break;
      case 535:
        uint64_t result = "kDYFEMTLDevice_newBufferWithLength_options_atResourceIndex";
        break;
      case 536:
        uint64_t result = "kDYFEMTLDevice_newCounterSampleBufferWithDescriptor_error";
        break;
      case 537:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error";
        break;
      case 538:
        uint64_t result = "kDYFEMTLDevice_newRasterizationRateMapWithScreenSize_layerCount_layers";
        break;
      case 539:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineDescriptorWithSerializedData_deserializationContext";
        break;
      case 540:
        uint64_t result = "kDYFEMTLDevice_offsetFromIndirectBufferAddress";
        break;
      case 541:
        uint64_t result = "kDYFEMTLDevice_pollSampleBuffer_resolvedBuffer";
        break;
      case 542:
        uint64_t result = "kDYFEMTLDevice_removeResourceFromGlobalResourceTable_resourceType";
        break;
      case 543:
        uint64_t result = "kDYFEMTLDevice_requiresIndirectionForAllResourceTypes";
        break;
      case 544:
        uint64_t result = "kDYFEMTLDevice_resolveCountersWithIndexRange_sampleBuffer";
        break;
      case 545:
        uint64_t result = "kDYFEMTLDevice_resourceIndexFromIndirectBufferAddress";
        break;
      case 546:
        uint64_t result = "kDYFEMTLDevice_sampleCountersAtInterval_sampleBuffer_error";
        break;
      case 547:
        uint64_t result = "kDYFEMTLDevice_sampleTimeStamps_gpuTimeStamp";
        break;
      case 548:
        uint64_t result = "kDYFEMTLDevice_serializeRenderPipelineDescriptor";
        break;
      case 549:
        uint64_t result = "kDYFEMTLDevice_setGPUAssertionsEnabled";
        break;
      case 550:
        uint64_t result = "kDYFEMTLDevice_setResourcesPurgeableState_newState_oldState_count";
        break;
      case 551:
        uint64_t result = "kDYFEMTLDevice_useDeviceResourceTableForType";
        break;
      case 552:
        uint64_t result = "kDYFEMTLDevice_utilityBufferForComputeCommandEncoder";
        break;
      case 553:
        uint64_t result = "kDYFEMTLDevice_utilityBufferForRenderCommandEncoder";
        break;
      case 554:
        uint64_t result = "kDYFEMTLFunction_newFunctionWithPluginData_bitcodeType";
        break;
      case 555:
        uint64_t result = "kDYFEMTLHeap_newBufferWithLength_options_atOffset";
        break;
      case 556:
        uint64_t result = "kDYFEMTLHeap_newTextureWithDescriptor_atOffset";
        break;
      case 557:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_clearBarrier";
        break;
      case 558:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_concurrentDispatchThreads_threadsPerThreadgroup";
        break;
      case 559:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_setBarrier";
        break;
      case 560:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_setImageBlockWidth_height";
        break;
      case 561:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_sampleCountersInBuffer_atIndex_allowOverlap";
        break;
      case 562:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexAmplificationCount_viewMappings";
        break;
      case 563:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useHeap_stages";
        break;
      case 564:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useHeaps_count_stages";
        break;
      case 565:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useResource_usage_stages";
        break;
      case 566:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useResources_count_usage_stages";
        break;
      case 567:
        uint64_t result = "kDYFEMTLRenderPipelineState_setResourceIndex";
        break;
      case 568:
        uint64_t result = "kDYFEMTLSamplerState_setResourceIndex";
        break;
      case 569:
        uint64_t result = "kDYFEMTLTexture_setResourceIndex";
        break;
      case 570:
        uint64_t result = "kDYFEMTLDevice_newComputePipelineDescriptorWithSerializedData_deserializationContext";
        break;
      case 571:
        uint64_t result = "kDYFEMTLDevice_serializeComputePipelineDescriptor";
        break;
      case 572:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexAmplificationMode_value";
        break;
      case 573:
        uint64_t result = "kDYFEMTLCommandQueue_getBackgroundGPUPriority";
        break;
      case 574:
        uint64_t result = "kDYFEMTLCommandQueue_getGPUPriority";
        break;
      case 575:
        uint64_t result = "kDYFEMTLCommandQueue_setBackgroundGPUPriority";
        break;
      case 576:
        uint64_t result = "kDYFEMTLCommandQueue_setBackgroundGPUPriority_offset";
        break;
      case 577:
        uint64_t result = "kDYFEMTLCommandQueue_setCompletionQueue";
        break;
      case 578:
        uint64_t result = "kDYFEMTLCommandQueue_setGPUPriority";
        break;
      case 579:
        uint64_t result = "kDYFEMTLCommandQueue_setGPUPriority_offset";
        break;
      case 580:
        uint64_t result = "kDYFEMTLCommandQueue_setSubmissionQueue";
        break;
      case 581:
        uint64_t result = "kDYFEMTLRasterizationRateMap_copyParameterDataToBuffer_atOffset";
        break;
      case 582:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_updateTextureMapping_mode_indirectBuffer_indirectBufferOffset";
        break;
      case 583:
        uint64_t result = "kDYFEMTLRasterizationRateMap_dealloc";
        break;
      case 584:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_updateTextureMapping_mode_region_mipLevel_slice";
        break;
      case 585:
        uint64_t result = "kDYFEMTLRasterizationRateMap_physicalCoordinate_forLayer";
        break;
      case 586:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_updateTextureMappings_mode_regions_mipLevels_slices_numRegions";
        break;
      case 587:
        uint64_t result = "kDYFEMTLRasterizationRateMap_physicalSizeForLayer";
        break;
      case 588:
        uint64_t result = "kDYFEMTLDevice_tileSizeWithSparsePageSize_textureType_pixelFormat_sampleCount";
        break;
      case 589:
        uint64_t result = "kDYFEMTLRasterizationRateMap_screenCoordinate_forLayer";
        break;
      case 590:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_setLabel";
        break;
      case 591:
        uint64_t result = "kDYFEMTLDevice_newRasterizationRateMapWithDescriptor";
        break;
      case 592:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_copyMappingStateFromTexture_mipLevel_slice_toBuffer_offset_numTiles";
        break;
      case 593:
        uint64_t result = "kDYFEMTLDevice_supportsRasterizationRateMapWithLayerCount";
        break;
      case 594:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_dealloc";
        break;
      case 595:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_endEncoding";
        break;
      case 596:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_insertDebugSignpost";
        break;
      case 597:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_popDebugGroup";
        break;
      case 598:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_pushDebugGroup";
        break;
      case 599:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_updateFence";
        break;
      case 600:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_updateTextureMapping_mode_indirectBuffer_indirectBufferOffset";
        break;
      case 601:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_updateTextureMapping_mode_region_mipLevel_slice";
        break;
      case 602:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_updateTextureMappings_mode_regions_mipLevels_slices_numRegions";
        break;
      case 603:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_waitForFence";
        break;
      case 604:
        uint64_t result = "kDYFEMTLDevice_supportsFamily";
        break;
      case 605:
        uint64_t result = "kDYFEMTLDevice_supportsVersion";
        break;
      case 606:
        uint64_t result = "kDYFEMTLHeap_newBufferWithLength_options_offset";
        break;
      case 607:
        uint64_t result = "kDYFEMTLHeap_newTextureWithDescriptor_offset";
        break;
      case 608:
        uint64_t result = "kDYFEMTLRasterizationRateMap_copyParameterDataToBuffer_offset";
        break;
      case 609:
        uint64_t result = "kDYFEMTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle";
        break;
      case 610:
        uint64_t result = "kDYFEMTLDevice_newPrecompiledComputePipelineStateWithDescriptor_options_pipelineCache_completionHandler";
        break;
      case 611:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_setImageblockWidth_height";
        break;
      case 612:
        uint64_t result = "kDYFEMTLLibrary_newFunctionWithName_constantValues_functionCache_error";
        break;
      case 613:
        uint64_t result = "kDYFEMTLRasterizationRateMap_mapPhysicalToScreenCoordinates_forLayer";
        break;
      case 614:
        uint64_t result = "kDYFEMTLRasterizationRateMap_mapScreenToPhysicalCoordinates_forLayer";
        break;
      case 615:
        uint64_t result = "kDYFEMTLResourceGroup_dealloc";
        break;
      case 616:
        uint64_t result = "kDYFEMTLBuffer_isComplete";
        break;
      case 617:
        uint64_t result = "kDYFEMTLBuffer_waitUntilComplete";
        break;
      case 618:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_doesAliasAllResources_count";
        break;
      case 619:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_doesAliasAnyResources_count";
        break;
      case 620:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_doesAliasResource";
        break;
      case 621:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_isComplete";
        break;
      case 622:
        uint64_t result = "kDYFEMTLIndirectCommandBuffer_waitUntilComplete";
        break;
      case 623:
        uint64_t result = "kDYFEMTLTexture_isComplete";
        break;
      case 624:
        uint64_t result = "kDYFEMTLTexture_waitUntilComplete";
        break;
      case 625:
        uint64_t result = "kDYFEMTLDevice_convertSparsePixelRegions_toTileRegions_withTileSize_alignmentMode_numRegions";
        break;
      case 626:
        uint64_t result = "kDYFEMTLDevice_convertSparseTileRegions_toPixelRegions_withTileSize_numRegions";
        break;
      case 627:
        uint64_t result = "kDYFEMTLDevice_supportsVertexAmplificationCount";
        break;
      case 628:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_resolveCounters_inRange_destinationBuffer_destinationOffset";
        break;
      case 629:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier";
        break;
      case 630:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier";
        break;
      case 631:
        uint64_t result = "kDYFEMTLCounterSampleBuffer_resolveCounterRange";
        break;
      case 632:
        uint64_t result = "kDYFEMTLCounterSet_dealloc";
        break;
      case 633:
        uint64_t result = "kDYFEMTLDevice_sampleTimestamps_gpuTimestamp";
        break;
      case 634:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier";
        break;
      case 635:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeWaitForEvent_value_timeout";
        break;
      case 636:
        uint64_t result = "kDYFEMTLCounter_dealloc";
        break;
      case 637:
        uint64_t result = "kDYFEMTLDevice_copyShaderCacheToPath";
        break;
      case 638:
        uint64_t result = "kDYFEMTLDevice_serializeStructType_version";
        break;
      case 639:
        uint64_t result = "kDYFEMTLPipelineCache_dealloc";
        break;
      case 640:
        uint64_t result = "kDYFEMTLPipelineLibrary_setDisableRunTimeCompilation";
        break;
      case 641:
        uint64_t result = "kDYFEMTLPipelineLibrary_setLabel";
        break;
      case 642:
        uint64_t result = "kDYFEMTLPipelineLibrary_dealloc";
        break;
      case 643:
        uint64_t result = "kDYFEMTLPipelineLibrary_newComputePipelineDescriptorWithName_error";
        break;
      case 644:
        uint64_t result = "kDYFEMTLPipelineLibrary_newComputePipelineStateWithName_options_reflection_error";
        break;
      case 645:
        uint64_t result = "kDYFEMTLPipelineLibrary_newRenderPipelineDescriptorWithName_error";
        break;
      case 646:
        uint64_t result = "kDYFEMTLPipelineLibrary_newRenderPipelineStateWithName_options_reflection_error";
        break;
      case 647:
        uint64_t result = "kDYFEMTLDevice_sparseTileSizeWithTextureType_pixelFormat_sampleCount";
        break;
      case 648:
        uint64_t result = "kDYFEMTLCaptureManager_startCaptureWithDescriptor_error";
        break;
      case 649:
        uint64_t result = "kDYFEMTLCaptureManager_startCaptureWithScope";
        break;
      case 650:
        uint64_t result = "kDYFEMTLCaptureManager_newCaptureScopeWithDevice";
        break;
      case 651:
        uint64_t result = "kDYFEMTLCaptureManager_newCaptureScopeWithCommandQueue";
        break;
      case 652:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_enableNullBufferBinds";
        break;
      case 653:
        uint64_t result = "kDYFEMTLDevice_newFunctionWithGLIR_functionType";
        break;
      case 654:
        uint64_t result = "kDYFEMTLDevice_newFunctionWithGLIR_inputsDescription_functionType";
        break;
      case 655:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setAlphaTestReferenceValue";
        break;
      case 656:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setColorResolveTexture_slice_depthPlane_level_yInvert_atIndex";
        break;
      case 657:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthCleared";
        break;
      case 658:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthResolveTexture_slice_depthPlane_level_yInvert";
        break;
      case 659:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setProvokingVertexMode";
        break;
      case 660:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setStencilCleared";
        break;
      case 661:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setStencilResolveTexture_slice_depthPlane_level";
        break;
      case 662:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setStencilResolveTexture_slice_depthPlane_level_yInvert";
        break;
      case 663:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTriangleFrontFillMode_backFillMode";
        break;
      case 664:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setViewportTransformEnabled";
        break;
      case 665:
        uint64_t result = "kDYFEMTLDevice_minLinearTextureBaseAddressAlignmentForDescriptor";
        break;
      case 666:
        uint64_t result = "kDYFEMTLDevice_minLinearTexturePitchAlignmentForDescriptor_mustMatchExactly";
        break;
      case 667:
        uint64_t result = "kDYFEMTLDevice_newBinaryArchiveWithDescriptor_error";
        break;
      case 668:
        uint64_t result = "kDYFEMTLDevice_requiredLinearTextureBytesPerRowForDescriptor";
        break;
      case 669:
        uint64_t result = "kDYFEMTLFunction_newArgumentEncoderWithBufferIndex_pipelineLibrary";
        break;
      case 670:
        uint64_t result = "kDYFEMTLFunction_newArgumentEncoderWithBufferIndex_reflection_pipelineLibrary";
        break;
      case 671:
        uint64_t result = "kDYFEMTLFunction_reflectionWithOptions_pipelineLibrary";
        break;
      case 672:
        uint64_t result = "kDYFEMTLCommandBuffer_computeCommandEncoderWithDispatchType_substreamCount";
        break;
      case 673:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setSubstream";
        break;
      case 674:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_signalProgress";
        break;
      case 675:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_waitForProgress";
        break;
      case 676:
        uint64_t result = "kDYFEMTLDevice_maximumComputeSubstreams";
        break;
      case 677:
        uint64_t result = "kDYFEMTLDevice_newBufferWithBytes_length_options_gpuAddress";
        break;
      case 678:
        uint64_t result = "kDYFEMTLDevice_newBufferWithBytesNoCopy_length_options_gpuAddress_deallocator";
        break;
      case 679:
        uint64_t result = "kDYFEMTLDevice_newBufferWithLength_options_gpuAddress";
        break;
      case 680:
        uint64_t result = "kDYFEMTLDevice_reserveGPUAddressRange";
        break;
      case 681:
        uint64_t result = "kDYFEMTLCommandBuffer_addLoggingForType_handler";
        break;
      case 682:
        uint64_t result = "kDYFEMTLCommandBufferEncoderInfo_dealloc";
        break;
      case 683:
        uint64_t result = "kDYFEMTLCommandQueue_commandBufferWithDescriptor";
        break;
      case 684:
        uint64_t result = "kDYFEMTLComputePipelineState_functionPointerHandleWithFunction";
        break;
      case 685:
        uint64_t result = "kDYFEMTLComputePipelineState_functionPointerHandlesWithFunctions_range";
        break;
      case 686:
        uint64_t result = "kDYFEMTLDevice_setCommandBufferErrorOptions";
        break;
      case 687:
        uint64_t result = "kDYFEMTLDevice_newBinaryLibraryWithOptions_url_error";
        break;
      case 688:
        uint64_t result = "kDYFEMTLDevice_newDynamicLibrary_computeDescriptor_error";
        break;
      case 689:
        uint64_t result = "kDYFEMTLDevice_newDynamicLibrary_error";
        break;
      case 690:
        uint64_t result = "kDYFEMTLDevice_newDynamicLibraryFromURL_error";
        break;
      case 691:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithDAG_functions_error";
        break;
      case 692:
        uint64_t result = "kDYFEMTLFunctionLog_dealloc";
        break;
      case 693:
        uint64_t result = "kDYFEMTLStackTraceEntry_dealloc";
        break;
      case 694:
        uint64_t result = "kDYFEMTLTexture_newTextureViewWithPixelFormat_resourceIndex";
        break;
      case 695:
        uint64_t result = "kDYFEMTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_resourceIndex";
        break;
      case 696:
        uint64_t result = "kDYFEMTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle_resourceIndex";
        break;
      case 697:
        uint64_t result = "kDYFEMTLBinaryArchive_addComputePipelineStateWithDescriptor_error";
        break;
      case 698:
        uint64_t result = "kDYFEMTLBinaryArchive_addLibrary_computePipelineDescriptor_error";
        break;
      case 699:
        uint64_t result = "kDYFEMTLBinaryArchive_dealloc";
        break;
      case 700:
        uint64_t result = "kDYFEMTLBinaryArchive_writeToURL_error";
        break;
      case 701:
        uint64_t result = "kDYFEMTLBinaryLibrary_setLabel";
        break;
      case 702:
        uint64_t result = "kDYFEMTLBinaryLibrary_addBinaryEntry";
        break;
      case 703:
        uint64_t result = "kDYFEMTLBinaryLibrary_addComputePipelineFunctionsWithDescriptor_error";
        break;
      case 704:
        uint64_t result = "kDYFEMTLBinaryLibrary_dealloc";
        break;
      case 705:
        uint64_t result = "kDYFEMTLBinaryLibrary_getBinaryDataWithKey";
        break;
      case 706:
        uint64_t result = "kDYFEMTLBinaryLibrary_removeComputePipelineFunctionsWithDescriptor_error";
        break;
      case 707:
        uint64_t result = "kDYFEMTLBinaryLibrary_serializeToURL_error";
        break;
      case 708:
        uint64_t result = "kDYFEMTLDynamicLibrary_setLabel";
        break;
      case 709:
        uint64_t result = "kDYFEMTLDynamicLibrary_dealloc";
        break;
      case 710:
        uint64_t result = "kDYFEMTLDynamicLibrary_serializeToURL_error";
        break;
      case 711:
        uint64_t result = "kDYFEMTLCommandBuffer_accelerationStructureCommandEncoder";
        break;
      case 712:
        uint64_t result = "kDYFEMTLDevice_accelerationStructureSizesWithDescriptor";
        break;
      case 713:
        uint64_t result = "kDYFEMTLDevice_loadDynamicLibrariesForComputeDescriptor_error";
        break;
      case 714:
        uint64_t result = "kDYFEMTLFunction_newArgumentEncoderWithBufferIndex_reflection_binaryArchives";
        break;
      case 715:
        uint64_t result = "kDYFEMTLFunction_reflectionWithOptions_binaryArchives";
        break;
      case 716:
        uint64_t result = "kDYFEMTLBinaryArchive_setLabel";
        break;
      case 717:
        uint64_t result = "kDYFEMTLBinaryArchive_addBinaryEntry_forKey";
        break;
      case 718:
        uint64_t result = "kDYFEMTLBinaryArchive_addComputePipelineFunctionsWithDescriptor_error";
        break;
      case 719:
        uint64_t result = "kDYFEMTLBinaryArchive_addRenderPipelineFunctionsWithDescriptor_error";
        break;
      case 720:
        uint64_t result = "kDYFEMTLBinaryArchive_addTileRenderPipelineFunctionsWithDescriptor_error";
        break;
      case 721:
        uint64_t result = "kDYFEMTLBinaryArchive_getBinaryDataForKey";
        break;
      case 722:
        uint64_t result = "kDYFEMTLBinaryArchive_serializeToURL_error";
        break;
      case 723:
        uint64_t result = "kDYFEMTLAccelerationStructure_setLabel";
        break;
      case 724:
        uint64_t result = "kDYFEMTLAccelerationStructure_setResponsibleProcess";
        break;
      case 725:
        uint64_t result = "kDYFEMTLAccelerationStructure_dealloc";
        break;
      case 726:
        uint64_t result = "kDYFEMTLAccelerationStructure_doesAliasAllResources_count";
        break;
      case 727:
        uint64_t result = "kDYFEMTLAccelerationStructure_doesAliasAnyResources_count";
        break;
      case 728:
        uint64_t result = "kDYFEMTLAccelerationStructure_doesAliasResource";
        break;
      case 729:
        uint64_t result = "kDYFEMTLAccelerationStructure_isAliasable";
        break;
      case 730:
        uint64_t result = "kDYFEMTLAccelerationStructure_isComplete";
        break;
      case 731:
        uint64_t result = "kDYFEMTLAccelerationStructure_isPurgeable";
        break;
      case 732:
        uint64_t result = "kDYFEMTLAccelerationStructure_isWriteComplete";
        break;
      case 733:
        uint64_t result = "kDYFEMTLAccelerationStructure_makeAliasable";
        break;
      case 734:
        uint64_t result = "kDYFEMTLAccelerationStructure_setPurgeableState";
        break;
      case 735:
        uint64_t result = "kDYFEMTLAccelerationStructure_waitUntilComplete";
        break;
      case 736:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_setLabel";
        break;
      case 737:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_buildAccelerationStructure_descriptor_scratchBuffer_scratchBufferOffset";
        break;
      case 738:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_copyAccelerationStructure_toAccelerationStructure";
        break;
      case 739:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_copyAndCompactAccelerationStructure_toAccelerationStructure";
        break;
      case 740:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_dealloc";
        break;
      case 741:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializeAccelerationStructure_fromBuffer_offset";
        break;
      case 742:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_endEncoding";
        break;
      case 743:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_insertDebugSignpost";
        break;
      case 744:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_popDebugGroup";
        break;
      case 745:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_pushDebugGroup";
        break;
      case 746:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_refitAccelerationStructure_descriptor_destination_scratchBu"
                 "ffer_scratchBufferOffset";
        break;
      case 747:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier";
        break;
      case 748:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_serializeAccelerationStructure_toBuffer_offset";
        break;
      case 749:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_updateFence";
        break;
      case 750:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_useHeap";
        break;
      case 751:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_useHeaps_count";
        break;
      case 752:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_useResource_usage";
        break;
      case 753:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_useResources_count_usage";
        break;
      case 754:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_waitForFence";
        break;
      case 755:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeCompactedAccelerationStructureSize_toBuffer_offset";
        break;
      case 756:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeSerializedAccelerationStructureSize_toBuffer_offset";
        break;
      case 757:
        uint64_t result = "kDYFEMTLArgumentEncoder_setAccelerationStructure_atIndex";
        break;
      case 758:
        uint64_t result = "kDYFEMTLArgumentEncoder_setFunctionTable_atIndex";
        break;
      case 759:
        uint64_t result = "kDYFEMTLArgumentEncoder_setFunctionTables_withRange";
        break;
      case 760:
        uint64_t result = "kDYFEMTLCommandQueue_getSPIStats";
        break;
      case 761:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setAccelerationStructure_atBufferIndex";
        break;
      case 762:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setFunctionTable_atIndex";
        break;
      case 763:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setFunctionTables_withRange";
        break;
      case 764:
        uint64_t result = "kDYFEMTLComputePipelineState_functionHandleWithFunction";
        break;
      case 765:
        uint64_t result = "kDYFEMTLComputePipelineState_functionHandlesWithFunctions";
        break;
      case 766:
        uint64_t result = "kDYFEMTLComputePipelineState_newComputePipelineStateWithAdditionalDynamicFunctions";
        break;
      case 767:
        uint64_t result = "kDYFEMTLDevice_compileVisibleFunction_withDescriptor_completionHandler";
        break;
      case 768:
        uint64_t result = "kDYFEMTLDevice_compileVisibleFunction_withDescriptor_error";
        break;
      case 769:
        uint64_t result = "kDYFEMTLDevice_newAccelerationStructureWithDescriptor";
        break;
      case 770:
        uint64_t result = "kDYFEMTLDevice_newAccelerationStructureWithSize";
        break;
      case 771:
        uint64_t result = "kDYFEMTLDevice_newDynamicLibraryWithURL_error";
        break;
      case 772:
        uint64_t result = "kDYFEMTLDevice_newVisibleFunctionTableWithDescriptor";
        break;
      case 773:
        uint64_t result = "kDYFEMTLDynamicLibrary_serializeToURL_options_error";
        break;
      case 774:
        uint64_t result = "kDYFEMTLFunctionHandle_dealloc";
        break;
      case 775:
        uint64_t result = "kDYFEMTLLibrary_newFunctionWithDescriptor_completionHandler";
        break;
      case 776:
        uint64_t result = "kDYFEMTLLibrary_newFunctionWithDescriptor_error";
        break;
      case 777:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setLabel";
        break;
      case 778:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setResponsibleProcess";
        break;
      case 779:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_dealloc";
        break;
      case 780:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_doesAliasAllResources_count";
        break;
      case 781:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_doesAliasAnyResources_count";
        break;
      case 782:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_doesAliasResource";
        break;
      case 783:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_isAliasable";
        break;
      case 784:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_isPurgeable";
        break;
      case 785:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_makeAliasable";
        break;
      case 786:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setFunction_atIndex";
        break;
      case 787:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setFunctions_withRange";
        break;
      case 788:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setPurgeableState";
        break;
      case 789:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializeAccelerationStructure_fromBuffer_serializedBufferOffset";
        break;
      case 790:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializeAccelerationStructure_primitiveAccelerationStruc"
                 "tures_fromBuffer_serializedBufferOffset";
        break;
      case 791:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_serializeAccelerationStructure_toBuffer_serializedBufferOffset";
        break;
      case 792:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeDeserializedAccelerationStructureSize_serializedOffset"
                 "_toBuffer_sizeBufferOffset";
        break;
      case 793:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeDeserializedPrimitiveAccelerationStructureSizes_serial"
                 "izedOffset_toBuffer_sizesBufferOffset";
        break;
      case 794:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeGeometryOfAccelerationStructure_toBuffer_geometryBufferOffset";
        break;
      case 795:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeGeometrySizeOfAccelerationStructure_toBuffer_sizeBufferOffset";
        break;
      case 796:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeSerializedAccelerationStructureSize_toBuffer_sizeBufferOffset";
        break;
      case 797:
        uint64_t result = "kDYFEMTLCommandBuffer_blitCommandEncoderWithDescriptor";
        break;
      case 798:
        uint64_t result = "kDYFEMTLCommandBuffer_computeCommandEncoderWithDescriptor";
        break;
      case 799:
        uint64_t result = "kDYFEMTLCommandBuffer_resourceStateCommandEncoderWithDescriptor";
        break;
      case 800:
        uint64_t result = "kDYFEMTLCommandBuffer_sampledComputeCommandEncoderWithDescriptor_programInfoBuffer_capacity";
        break;
      case 801:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setIntersectionFunctionTable_atBufferIndex";
        break;
      case 802:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setIntersectionFunctionTables_withBufferRange";
        break;
      case 803:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setVisibleFunctionTable_atBufferIndex";
        break;
      case 804:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setVisibleFunctionTables_withBufferRange";
        break;
      case 805:
        uint64_t result = "kDYFEMTLComputePipelineState_newComputePipelineStateWithAdditionalBinaryFunctions";
        break;
      case 806:
        uint64_t result = "kDYFEMTLComputePipelineState_newVisibleFunctionTableWithDescriptor";
        break;
      case 807:
        uint64_t result = "kDYFEMTLDevice_newIntersectionFunctionTableWithDescriptor";
        break;
      case 808:
        uint64_t result = "kDYFEMTLDevice_supportsCounterSampling";
        break;
      case 809:
        uint64_t result = "kDYFEMTLDevice_supportsTextureWriteFPRoundingMode";
        break;
      case 810:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setGlobalBuffer";
        break;
      case 811:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setGlobalBufferOffset";
        break;
      case 812:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setGlobalBuffer";
        break;
      case 813:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setGlobalBufferOffset";
        break;
      case 814:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setLabel";
        break;
      case 815:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setResponsibleProcess";
        break;
      case 816:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_dealloc";
        break;
      case 817:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_doesAliasAllResources_count";
        break;
      case 818:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_doesAliasAnyResources_count";
        break;
      case 819:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_doesAliasResource";
        break;
      case 820:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_isAliasable";
        break;
      case 821:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_isComplete";
        break;
      case 822:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_isPurgeable";
        break;
      case 823:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_isWriteComplete";
        break;
      case 824:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_makeAliasable";
        break;
      case 825:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setFunction_atIndex";
        break;
      case 826:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setFunctions_withRange";
        break;
      case 827:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setPurgeableState";
        break;
      case 828:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_waitUntilComplete";
        break;
      case 829:
        uint64_t result = "kDYFEMTLBinaryArchive_addComputePipelineFunctionsWithDescriptor_options_error";
        break;
      case 830:
        uint64_t result = "kDYFEMTLBinaryArchive_addRenderPipelineFunctionsWithDescriptor_options_error";
        break;
      case 831:
        uint64_t result = "kDYFEMTLBinaryArchive_addTileRenderPipelineFunctionsWithDescriptor_options_error";
        break;
      case 832:
        uint64_t result = "kDYFEMTLAccelerationStructure_setDescriptor";
        break;
      case 833:
        uint64_t result = "kDYFEMTLLibrary_newIntersectionFunctionWithDescriptor_completionHandler";
        break;
      case 834:
        uint64_t result = "kDYFEMTLLibrary_newIntersectionFunctionWithDescriptor_error";
        break;
      case 835:
        uint64_t result = "kDYFEMTLArgumentEncoder_setIntersectionFunctionTable_atBufferIndex";
        break;
      case 836:
        uint64_t result = "kDYFEMTLArgumentEncoder_setIntersectionFunctionTables_withBufferRange";
        break;
      case 837:
        uint64_t result = "kDYFEMTLArgumentEncoder_setVisibleFunctionTable_atBufferIndex";
        break;
      case 838:
        uint64_t result = "kDYFEMTLArgumentEncoder_setVisibleFunctionTables_withBufferRange";
        break;
      case 839:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setBuffer_offset_atIndex";
        break;
      case 840:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setBuffers_offsets_withRange";
        break;
      case 841:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setBuffer_offset_atIndex";
        break;
      case 842:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setBuffers_offsets_withRange";
        break;
      case 843:
        uint64_t result = "kDYFEMTLComputePipelineState_newComputePipelineStateWithAdditionalBinaryFunctions_error";
        break;
      case 844:
        uint64_t result = "kDYFEMTLComputePipelineState_newIntersectionFunctionTableWithDescriptor";
        break;
      case 845:
        uint64_t result = "kDYFEMTLArgumentEncoder_setIntersectionFunctionTable_atIndex";
        break;
      case 846:
        uint64_t result = "kDYFEMTLArgumentEncoder_setIntersectionFunctionTables_withRange";
        break;
      case 847:
        uint64_t result = "kDYFEMTLArgumentEncoder_setVisibleFunctionTable_atIndex";
        break;
      case 848:
        uint64_t result = "kDYFEMTLArgumentEncoder_setVisibleFunctionTables_withRange";
        break;
      case 849:
        uint64_t result = "kDYFEMTLDevice_supportsTextureWriteRoundingMode";
        break;
      case 850:
        uint64_t result = "kDYFEMTLTexture_didModifyData";
        break;
      case 851:
        uint64_t result = "kDYFEMTLCommandBuffer_setSharedIndirectionTable";
        break;
      case 852:
        uint64_t result = "kDYFEMTLDevice_newPrecompiledRenderPipelineStateWithDescriptor_options_pipelineCache_completionHandler";
        break;
      case 853:
        uint64_t result = "kDYFEMTLDevice_newDynamicLibraryWithURL_options_error";
        break;
      case 854:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setOpaqueTriangleIntersectionFunctionWithSignature_atIndex";
        break;
      case 855:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setOpaqueTriangleIntersectionFunctionWithSignature_withRange";
        break;
      case 856:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setValue_atIndex";
        break;
      case 857:
        uint64_t result = "kDYFEMTLVisibleFunctionTable_setValue_withRange";
        break;
      case 858:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setVisibleFunctionTable_atBufferIndex";
        break;
      case 859:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setVisibleFunctionTables_withBufferRange";
        break;
      case 860:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializeInstanceAccelerationStructure_primitiveAccelerat"
                 "ionStructures_fromBuffer_serializedBufferOffset";
        break;
      case 861:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializePrimitiveAccelerationStructure_fromBuffer_serial"
                 "izedBufferOffset";
        break;
      case 862:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_serializeInstanceAccelerationStructure_primitiveAcceleratio"
                 "nStructures_toBuffer_serializedBufferOffset";
        break;
      case 863:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_serializePrimitiveAccelerationStructure_toBuffer_serializedBufferOffset";
        break;
      case 864:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeGenericBVHStructureOfAccelerationStructure_headerBuffe"
                 "r_headerBufferOffset_innerNodeBuffer_innerNodeBufferOffset_leafNodeBuffer_leafNodeBufferOffset_primitiv"
                 "eBuffer_primitiveBufferOffset";
        break;
      case 865:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeGenericBVHStructureSizesOfAccelerationStructure_toBuff"
                 "er_sizesBufferOffset";
        break;
      case 866:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_encodeEndDoWhile_offset_comparison_referenceValue";
        break;
      case 867:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_encodeEndIf";
        break;
      case 868:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_encodeEndWhile";
        break;
      case 869:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_encodeStartDoWhile";
        break;
      case 870:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_encodeStartElse";
        break;
      case 871:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_encodeStartIf_offset_comparison_referenceValue";
        break;
      case 872:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_encodeStartWhile_offset_comparison_referenceValue";
        break;
      case 873:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_insertCompressedTextureReinterpretationFlush";
        break;
      case 874:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_useResourceGroup_usage";
        break;
      case 875:
        uint64_t result = "kDYFEMTLDevice_newBufferWithDescriptor";
        break;
      case 876:
        uint64_t result = "kDYFEMTLRelocation_dealloc";
        break;
      case 877:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useResourceGroup_usage_stages";
        break;
      case 878:
        uint64_t result = "kDYFEMTLDevice_newAccelerationStructureWithSize_resourceIndex";
        break;
      case 879:
        uint64_t result = "kDYFEMTLBuffer_setParentGPUAddress";
        break;
      case 880:
        uint64_t result = "kDYFEMTLBuffer_setParentGPUSize";
        break;
      case 881:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_insertUncompressedToCompressedFlush";
        break;
      case 882:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeCompactedAccelerationStructureSize_toBuffer_offset_sizeDataType";
        break;
      case 883:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeDashboardFinalizeForResourceGroup_dashboard_value_forIndex";
        break;
      case 884:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeDashboardTagForResourceGroup";
        break;
      case 885:
        uint64_t result = "kDYFEMTLDevice_setPluginData";
        break;
      case 886:
        uint64_t result = "kDYFEMTLDevice_loadDynamicLibrariesForComputeDescriptor_options_error";
        break;
      case 887:
        uint64_t result = "kDYFEMTLDevice_loadDynamicLibrariesForFunction_insertLibraries_options_error";
        break;
      case 888:
        uint64_t result = "kDYFEMTLDevice_newLateEvalEvent";
        break;
      case 889:
        uint64_t result = "kDYFEMTLFunctionPointerHandle_dealloc";
        break;
      case 890:
        uint64_t result = "kDYFEMTLFunctionPrivateArgument_dealloc";
        break;
      case 891:
        uint64_t result = "kDYFEMTLFunctionStitchingAttribute_dealloc";
        break;
      case 892:
        uint64_t result = "kDYFEMTLFunctionStitchingNode_dealloc";
        break;
      case 893:
        uint64_t result = "kDYFEMTLLateEvalEvent_setLabel";
        break;
      case 894:
        uint64_t result = "kDYFEMTLLateEvalEvent_setSignaledValue";
        break;
      case 895:
        uint64_t result = "kDYFEMTLLateEvalEvent_dealloc";
        break;
      case 896:
        uint64_t result = "kDYFEMTLLateEvalEvent_newSharedEventHandle";
        break;
      case 897:
        uint64_t result = "kDYFEMTLLibrary_setShaderValidationEnabled";
        break;
      case 898:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_dispatchThreadsPerTile_inRegion";
        break;
      case 899:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshAccelerationStructure_atBufferIndex";
        break;
      case 900:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshIntersectionFunctionTable_atBufferIndex";
        break;
      case 901:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshIntersectionFunctionTables_withBufferRange";
        break;
      case 902:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshVisibleFunctionTable_atBufferIndex";
        break;
      case 903:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshVisibleFunctionTables_withBufferRange";
        break;
      case 904:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectAccelerationStructure_atBufferIndex";
        break;
      case 905:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectIntersectionFunctionTable_atBufferIndex";
        break;
      case 906:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectIntersectionFunctionTables_withBufferRange";
        break;
      case 907:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectVisibleFunctionTable_atBufferIndex";
        break;
      case 908:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectVisibleFunctionTables_withBufferRange";
        break;
      case 909:
        uint64_t result = "kDYFEMTLDevice_compileVisibleFunction_withDescriptor_destinationBinaryArchive_error";
        break;
      case 910:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_fillBuffer_range_pattern4";
        break;
      case 911:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_fillTexture_level_slice_region_bytes_length";
        break;
      case 912:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_fillTexture_level_slice_region_color";
        break;
      case 913:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_fillTexture_level_slice_region_color_pixelFormat";
        break;
      case 914:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_invalidateCompressedTexture";
        break;
      case 915:
        uint64_t result = "kDYFEMTLBlitCommandEncoder_invalidateCompressedTexture_slice_level";
        break;
      case 916:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithGraphs_functions_error";
        break;
      case 917:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithGraphsSPI_functions_error";
        break;
      case 918:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializeInstanceAccelerationStructure_primitiveAccelerat"
                 "ionStructures_fromBuffer_serializedBufferOffset_withDescriptor";
        break;
      case 919:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializePrimitiveAccelerationStructure_fromBuffer_serial"
                 "izedBufferOffset_withDescriptor";
        break;
      case 920:
        uint64_t result = "kDYFEMTLDevice_newAccelerationStructureWithBuffer_offset";
        break;
      case 921:
        uint64_t result = "kDYFEMTLRenderPipelineState_functionHandleWithFunction_stage";
        break;
      case 922:
        uint64_t result = "kDYFEMTLRenderPipelineState_newIntersectionFunctionTableWithDescriptor_stage";
        break;
      case 923:
        uint64_t result = "kDYFEMTLRenderPipelineState_newRenderPipelineStateWithAdditionalBinaryFunctions_error";
        break;
      case 924:
        uint64_t result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableWithDescriptor_stage";
        break;
      case 925:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentAccelerationStructure_atBufferIndex";
        break;
      case 926:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentIntersectionFunctionTable_atBufferIndex";
        break;
      case 927:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentIntersectionFunctionTables_withBufferRange";
        break;
      case 928:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentVisibleFunctionTable_atBufferIndex";
        break;
      case 929:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentVisibleFunctionTables_withBufferRange";
        break;
      case 930:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileAccelerationStructure_atBufferIndex";
        break;
      case 931:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileIntersectionFunctionTable_atBufferIndex";
        break;
      case 932:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileIntersectionFunctionTables_withBufferRange";
        break;
      case 933:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileVisibleFunctionTable_atBufferIndex";
        break;
      case 934:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setTileVisibleFunctionTables_withBufferRange";
        break;
      case 935:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexAccelerationStructure_atBufferIndex";
        break;
      case 936:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexIntersectionFunctionTable_atBufferIndex";
        break;
      case 937:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexIntersectionFunctionTables_withBufferRange";
        break;
      case 938:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexVisibleFunctionTable_atBufferIndex";
        break;
      case 939:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexVisibleFunctionTables_withBufferRange";
        break;
      case 940:
        uint64_t result = "kDYFEMTLRenderPipelineState_fragmentFunctionHandleWithFunction";
        break;
      case 941:
        uint64_t result = "kDYFEMTLRenderPipelineState_newFragmentIntersectionFunctionTableWithDescriptor";
        break;
      case 942:
        uint64_t result = "kDYFEMTLRenderPipelineState_newTileIntersectionFunctionTableWithDescriptor";
        break;
      case 943:
        uint64_t result = "kDYFEMTLRenderPipelineState_newVertexIntersectionFunctionTableWithDescriptor";
        break;
      case 944:
        uint64_t result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableFromFragmentStageWithDescriptor";
        break;
      case 945:
        uint64_t result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableFromTileStageWithDescriptor";
        break;
      case 946:
        uint64_t result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableFromVertexStageWithDescriptor";
        break;
      case 947:
        uint64_t result = "kDYFEMTLRenderPipelineState_tileFunctionHandleWithFunction";
        break;
      case 948:
        uint64_t result = "kDYFEMTLRenderPipelineState_vertexFunctionHandleWithFunction";
        break;
      case 949:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithDescriptor_error";
        break;
      case 950:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithDescriptorSPI_error";
        break;
      case 951:
        uint64_t result = "kDYFEMTLDevice_getBVHBuilderLock";
        break;
      case 952:
        uint64_t result = "kDYFEMTLDevice_getRawBVHBuilderPtr";
        break;
      case 953:
        uint64_t result = "kDYFEMTLDevice_setRawBVHBuilderPtr";
        break;
      case 954:
        uint64_t result = "kDYFEMTLDevice_newFunctionWithGLCoreIR_functionType";
        break;
      case 955:
        uint64_t result = "kDYFEMTLDevice_newFunctionWithGLCoreIR_inputsDescription_functionType";
        break;
      case 956:
        uint64_t result = "kDYFEMTLDevice_newFunctionWithGLESIR_functionType";
        break;
      case 957:
        uint64_t result = "kDYFEMTLDevice_newFunctionWithGLESIR_inputsDescription_functionType";
        break;
      case 958:
        uint64_t result = "kDYFEMTLBinaryArchive_addLibraryWithDescriptor_error";
        break;
      case 959:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithDescriptor_completionHandler";
        break;
      case 960:
        uint64_t result = "kDYFEMTLLateEvalEvent_waitUntilSignaledValue_timeoutMS";
        break;
      case 961:
        uint64_t result = "kDYFEMTLLibrary_serializeToURL_error";
        break;
      case 962:
        uint64_t result = "kDYFEMTLSharedEvent_waitUntilSignaledValue_timeoutMS";
        break;
      case 963:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithStitchedDescriptor_completionHandler";
        break;
      case 964:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithStitchedDescriptor_error";
        break;
      case 965:
        uint64_t result = "kDYFEMTLDevice_newLibraryWithStitchedDescriptorSPI_error";
        break;
      case 966:
        uint64_t result = "kDYFEMTLDevice_deserializeInstanceAccelerationStructureFromBytes_primitiveAccelerationStructures_withDescriptor";
        break;
      case 967:
        uint64_t result = "kDYFEMTLDevice_deserializePrimitiveAccelerationStructureFromBytes_withDescriptor";
        break;
      case 968:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawMeshThreadgroups_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup";
        break;
      case 969:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawMeshThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerObje"
                 "ctThreadgroup_threadsPerMeshThreadgroup";
        break;
      case 970:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_drawMeshThreads_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup";
        break;
      case 971:
        uint64_t result = "kDYFEMTLRenderPipelineState_setUsesMeshShaderEmulation";
        break;
      case 972:
        uint64_t result = "kDYFEMTLRasterizationRateMap_formattedDescription";
        break;
      case 973:
        uint64_t result = "kDYFEMTLRasterizationRateMap_resetUsingDescriptor";
        break;
      case 974:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeDashboardFinalizeForResourceGroup_dashboard_values_indices_count";
        break;
      case 975:
        uint64_t result = "kDYFEMTLBinaryArchive_addMeshRenderPipelineFunctionsWithDescriptor_error";
        break;
      case 976:
        uint64_t result = "kDYFEMTLBinaryArchive_addMeshRenderPipelineFunctionsWithDescriptor_options_error";
        break;
      case 977:
        uint64_t result = "kDYFEMTLBinaryArchive_storeMeshRenderPipelineDescriptor";
        break;
      case 978:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithMeshDescriptor_completionHandler";
        break;
      case 979:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithMeshDescriptor_error";
        break;
      case 980:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithMeshDescriptor_options_completionHandler";
        break;
      case 981:
        uint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithMeshDescriptor_options_reflection_error";
        break;
      case 982:
        uint64_t result = "kDYFEMTLDevice_writeMeshShaderEmulatorDataStructureHeader_meshShaderPSO_scalingFactor";
        break;
      case 983:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshBuffer_offset_atIndex";
        break;
      case 984:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshBufferOffset_atIndex";
        break;
      case 985:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshBuffers_offsets_withRange";
        break;
      case 986:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshBytes_length_atIndex";
        break;
      case 987:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshSamplerState_atIndex";
        break;
      case 988:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 989:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 990:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshSamplerStates_withRange";
        break;
      case 991:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshTexture_atIndex";
        break;
      case 992:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshTextures_withRange";
        break;
      case 993:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectBuffer_offset_atIndex";
        break;
      case 994:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectBufferOffset_atIndex";
        break;
      case 995:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectBuffers_offsets_withRange";
        break;
      case 996:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectBytes_length_atIndex";
        break;
      case 997:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectSamplerState_atIndex";
        break;
      case 998:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 999:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 1000:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectSamplerStates_withRange";
        break;
      case 1001:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectTexture_atIndex";
        break;
      case 1002:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectTextures_withRange";
        break;
      case 1003:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectThreadgroupMemoryLength_atIndex";
        break;
      case 1004:
        uint64_t result = "kDYFEMTLRenderPipelineState_setEmulationMeshMaxPrimitiveCount";
        break;
      case 1005:
        uint64_t result = "kDYFEMTLRenderPipelineState_setEmulationMeshMaxVertexCount";
        break;
      case 1006:
        uint64_t result = "kDYFEMTLRenderPipelineState_setEmulationMeshShaderIntermediateBufferSlot";
        break;
      case 1007:
        uint64_t result = "kDYFEMTLRenderPipelineState_setEmulationMeshShaderPSO";
        break;
      case 1008:
        uint64_t result = "kDYFEMTLRenderPipelineState_setEmulationMeshSize";
        break;
      case 1009:
        uint64_t result = "kDYFEMTLRenderPipelineState_setEmulationObjectShaderIntermediateBufferSlot";
        break;
      case 1010:
        uint64_t result = "kDYFEMTLRenderPipelineState_setEmulationObjectShaderPSO";
        break;
      case 1011:
        uint64_t result = "kDYFEMTLRenderPipelineState_setEmulationVertexShaderIntermediateBufferSlot";
        break;
      case 1012:
        uint64_t result = "kDYFEMTLRenderPipelineState_meshFunctionHandleWithFunction";
        break;
      case 1013:
        uint64_t result = "kDYFEMTLRenderPipelineState_newMeshIntersectionFunctionTableWithDescriptor";
        break;
      case 1014:
        uint64_t result = "kDYFEMTLRenderPipelineState_newObjectIntersectionFunctionTableWithDescriptor";
        break;
      case 1015:
        uint64_t result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableFromMeshStageWithDescriptor";
        break;
      case 1016:
        uint64_t result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableFromObjectStageWithDescriptor";
        break;
      case 1017:
        uint64_t result = "kDYFEMTLRenderPipelineState_objectFunctionHandleWithFunction";
        break;
      case 1018:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_refitAccelerationStructure_descriptor_destination_scratchBu"
                 "ffer_scratchBufferOffset_options";
        break;
      case 1019:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeAccelerationStructureSerializationData_toBuffer_offset";
        break;
      case 1020:
        uint64_t result = "kDYFEMTLCommandBuffer_accelerationStructureCommandEncoderWithDescriptor";
        break;
      case 1021:
        uint64_t result = "kDYFEMTLDevice_deserializeInstanceAccelerationStructure_fromBytes_primitiveAccelerationStructures_withDescriptor";
        break;
      case 1022:
        uint64_t result = "kDYFEMTLDevice_deserializePrimitiveAccelerationStructure_fromBytes_withDescriptor";
        break;
      case 1023:
        uint64_t result = "kDYFEMTLDevice_heapAccelerationStructureSizeAndAlignWithDescriptor";
        break;
      case 1024:
        uint64_t result = "kDYFEMTLDevice_heapAccelerationStructureSizeAndAlignWithSize";
        break;
      case 1025:
        uint64_t result = "kDYFEMTLDevice_newAccelerationStructureWithBuffer_offset_resourceIndex";
        break;
      case 1026:
        uint64_t result = "kDYFEMTLDevice_newAccelerationStructureWithSize_withDescriptor";
        break;
      case 1027:
        uint64_t result = "kDYFEMTLBuffer__aneIOSurface";
        break;
      case 1028:
        uint64_t result = "kDYFEMTLHeap_newAccelerationStructureWithDescriptor";
        break;
      case 1029:
        uint64_t result = "kDYFEMTLHeap_newAccelerationStructureWithDescriptor_offset";
        break;
      case 1030:
        uint64_t result = "kDYFEMTLHeap_newAccelerationStructureWithSize";
        break;
      case 1031:
        uint64_t result = "kDYFEMTLHeap_newAccelerationStructureWithSize_offset";
        break;
      case 1032:
        uint64_t result = "kDYFEMTLHeap_newAccelerationStructureWithSize_offset_resourceIndex";
        break;
      case 1033:
        uint64_t result = "kDYFEMTLHeap_newAccelerationStructureWithSize_resourceIndex";
        break;
      case 1034:
        uint64_t result = "kDYFEMTLDevice_newIOCommandQueueWithDescriptor_error";
        break;
      case 1035:
        uint64_t result = "kDYFEMTLDevice_newIOHandleWithURL_compressionType_error";
        break;
      case 1036:
        uint64_t result = "kDYFEMTLDevice_newIOHandleWithURL_error";
        break;
      case 1037:
        uint64_t result = "kDYFEMTLDevice_newPerformanceStateAssertion_error";
        break;
      case 1038:
        uint64_t result = "kDYFEMTLIOCommandBuffer_setStatus";
        break;
      case 1039:
        uint64_t result = "kDYFEMTLIOCommandBuffer_addCompletedHandler";
        break;
      case 1040:
        uint64_t result = "kDYFEMTLIOCommandBuffer_barrier";
        break;
      case 1041:
        uint64_t result = "kDYFEMTLIOCommandBuffer_commit";
        break;
      case 1042:
        uint64_t result = "kDYFEMTLIOCommandBuffer_copyStatusToBuffer_offset";
        break;
      case 1043:
        uint64_t result = "kDYFEMTLIOCommandBuffer_dealloc";
        break;
      case 1044:
        uint64_t result = "kDYFEMTLIOCommandBuffer_encodeSignalEvent_value";
        break;
      case 1045:
        uint64_t result = "kDYFEMTLIOCommandBuffer_encodeWaitForEvent_value";
        break;
      case 1046:
        uint64_t result = "kDYFEMTLIOCommandBuffer_loadBuffer_offset_size_handle_handleOffset";
        break;
      case 1047:
        uint64_t result = "kDYFEMTLIOCommandBuffer_loadTexture_slice_level_size_bytesPerRow_bytesPerImage_dstOrigin_handle_handleOffset";
        break;
      case 1048:
        uint64_t result = "kDYFEMTLIOCommandBuffer_tryCancel";
        break;
      case 1049:
        uint64_t result = "kDYFEMTLIOCommandBuffer_waitUntilCompleted";
        break;
      case 1050:
        uint64_t result = "kDYFEMTLIOCommandQueue_barrier";
        break;
      case 1051:
        uint64_t result = "kDYFEMTLIOCommandQueue_commandBuffer";
        break;
      case 1052:
        uint64_t result = "kDYFEMTLIOCommandQueue_dealloc";
        break;
      case 1053:
        uint64_t result = "kDYFEMTLIOScratchBuffer_dealloc";
        break;
      case 1054:
        uint64_t result = "kDYFEMTLIOScratchBufferAllocator_allocateScratchBufferWithMinimumSize";
        break;
      case 1055:
        uint64_t result = "kDYFEMTLIOScratchBufferAllocator_dealloc";
        break;
      case 1056:
        uint64_t result = "kDYFEMTLIOHandle_dealloc";
        break;
      case 1057:
        uint64_t result = "kDYFEMTLBinaryArchive_getArchiveIDWithError";
        break;
      case 1058:
        uint64_t result = "kDYFEMTLCommandBuffer_presentDrawable_options";
        break;
      case 1059:
        uint64_t result = "kDYFEMTLEvent_setEnableBarrier";
        break;
      case 1060:
        uint64_t result = "kDYFEMTLLateEvalEvent_setEnableBarrier";
        break;
      case 1061:
        uint64_t result = "kDYFEMTLLibrary_bitCodeListForFunctions";
        break;
      case 1062:
        uint64_t result = "kDYFEMTLLibrary_bitCodeWithHash";
        break;
      case 1063:
        uint64_t result = "kDYFEMTLSharedEvent_setEnableBarrier";
        break;
      case 1064:
        uint64_t result = "kDYFEMTLDeadlineProfile_dealloc";
        break;
      case 1065:
        uint64_t result = "kDYFEMTLRenderPipelineState_setEmulationPrimitiveTopology";
        break;
      case 1066:
        uint64_t result = "kDYFEMTLCommandBuffer_commitWithDeadline";
        break;
      case 1067:
        uint64_t result = "kDYFEMTLDevice_newProfileWithExecutionSize";
        break;
      case 1068:
        uint64_t result = "kDYFEMTLCommandBuffer_commitAndWaitUntilSubmittedWithDeadline";
        break;
      case 1069:
        uint64_t result = "kDYFEMTLDevice_sparseTileSizeInBytesForSparsePageSize";
        break;
      case 1070:
        uint64_t result = "kDYFEMTLDevice_sparseTileSizeWithTextureType_pixelFormat_sampleCount_sparsePageSize";
        break;
      case 1071:
        uint64_t result = "kDYFEMTLIOCommandBuffer_setLabel";
        break;
      case 1072:
        uint64_t result = "kDYFEMTLIOCommandBuffer_enqueue";
        break;
      case 1073:
        uint64_t result = "kDYFEMTLIOCommandBuffer_loadBuffer_offset_size_sourceHandle_sourceHandleOffset";
        break;
      case 1074:
        uint64_t result = "kDYFEMTLIOCommandBuffer_loadTexture_slice_level_size_sourceBytesPerRow_sourceBytesPerImage_destinationO"
                 "rigin_sourceHandle_sourceHandleOffset";
        break;
      case 1075:
        uint64_t result = "kDYFEMTLIOCommandBuffer_signalEvent_value";
        break;
      case 1076:
        uint64_t result = "kDYFEMTLIOCommandBuffer_waitForEvent_value";
        break;
      case 1077:
        uint64_t result = "kDYFEMTLIOCommandQueue_setLabel";
        break;
      case 1078:
        uint64_t result = "kDYFEMTLIOCommandQueue_commandBufferWithUnretainedReferences";
        break;
      case 1079:
        uint64_t result = "kDYFEMTLIOHandle_setLabel";
        break;
      case 1080:
        uint64_t result = "kDYFEMTLIOHandle_decompress_size_offset_stagingBuffer_stagingBufferSize";
        break;
      case 1081:
        uint64_t result = "kDYFEMTLIOHandle_getHandleOffset_offset";
        break;
      case 1082:
        uint64_t result = "kDYFEMTLIOHandle_read_size_offset_stagingBuffer_stagingBufferSize";
        break;
      case 1083:
        uint64_t result = "kDYFEMTLIOHandle_readIntoStagingBuffer_offset_stagingBuffer_stagingBufferSize";
        break;
      case 1084:
        uint64_t result = "kDYFEMTLIOHandle_stagingBufferSize_offset";
        break;
      case 1085:
        uint64_t result = "kDYFEMTLIOScratchBufferAllocator_newScratchBufferWithMinimumSize";
        break;
      case 1086:
        uint64_t result = "kDYFEMTLDevice_getMostCompatibleArchitecture";
        break;
      case 1087:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_dispatchThreadsPerTile_inRegion_withRenderTargetArrayIndex";
        break;
      case 1088:
        uint64_t result = "kDYFEMTLDevice_newIOHandleWithURL_compressionMethod_error";
        break;
      case 1089:
        uint64_t result = "kDYFEMTLIOCommandBuffer_addBarrier";
        break;
      case 1090:
        uint64_t result = "kDYFEMTLIOCommandBuffer_loadBytes_size_sourceHandle_sourceHandleOffset";
        break;
      case 1091:
        uint64_t result = "kDYFEMTLIOCommandBuffer_popDebugGroup";
        break;
      case 1092:
        uint64_t result = "kDYFEMTLIOCommandBuffer_pushDebugGroup";
        break;
      case 1093:
        uint64_t result = "kDYFEMTLIOCommandQueue_enqueueBarrier";
        break;
      case 1094:
        uint64_t result = "kDYFEMTLIOFileHandle_setLabel";
        break;
      case 1095:
        uint64_t result = "kDYFEMTLIOFileHandle_dealloc";
        break;
      case 1096:
        uint64_t result = "kDYFEMTLRenderPipelineState_setEmulationPayloadMemoryLength";
        break;
      case 1097:
        uint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeAccelerationStructureTraversalDepth_toBuffer_offset";
        break;
      case 1098:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeConditionalAbortEvent";
        break;
      case 1099:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeSignalEvent_value_agentMask";
        break;
      case 1100:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setBuffer_offset_attributeStride_atIndex";
        break;
      case 1101:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setBufferOffset_attributeStride_atIndex";
        break;
      case 1102:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setBuffers_offsets_attributeStrides_withRange";
        break;
      case 1103:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setBytes_length_attributeStride_atIndex";
        break;
      case 1104:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setThreadgroupDistributionMode";
        break;
      case 1105:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setThreadgroupDistributionModeWithClusterGroupIndex";
        break;
      case 1106:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_setThreadgroupPackingDisabled";
        break;
      case 1107:
        uint64_t result = "kDYFEMTLIndirectComputeCommand_setKernelBuffer_offset_attributeStride_atIndex";
        break;
      case 1108:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setVertexBuffer_offset_attributeStride_atIndex";
        break;
      case 1109:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBuffer_offset_attributeStride_atIndex";
        break;
      case 1110:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBufferOffset_attributeStride_atIndex";
        break;
      case 1111:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBuffers_offsets_attributeStrides_withRange";
        break;
      case 1112:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBytes_length_attributeStride_atIndex";
        break;
      case 1113:
        uint64_t result = "kDYFEMTLResourceStateCommandEncoder_moveTextureMappingsFromTexture_sourceSlice_sourceLevel_sourceOrigin"
                 "_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin";
        break;
      case 1114:
        uint64_t result = "kDYFEMTLDevice_setShouldMaximizeConcurrentCompilation";
        break;
      case 1115:
        uint64_t result = "kDYFEMTLDevice_newEventWithOptions";
        break;
      case 1116:
        uint64_t result = "kDYFEMTLDevice_newSharedEventWithOptions";
        break;
      case 1117:
        uint64_t result = "kDYFEMTLDevice_setCompilerProcessesCount";
        break;
      case 1118:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_drawMeshThreadgroups_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup";
        break;
      case 1119:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_drawMeshThreads_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup";
        break;
      case 1120:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setMeshBuffer_offset_atIndex";
        break;
      case 1121:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setObjectBuffer_offset_atIndex";
        break;
      case 1122:
        uint64_t result = "kDYFEMTLIndirectRenderCommand_setObjectThreadgroupMemoryLength_atIndex";
        break;
      case 1123:
        uint64_t result = "kDYFEMTLDevice_newArgumentEncoderWithBufferBinding";
        break;
      case 1124:
        uint64_t result = "kDYFEMTLDevice_newIOFileHandleWithURL_compressionMethod_error";
        break;
      case 1125:
        uint64_t result = "kDYFEMTLDevice_newIOFileHandleWithURL_error";
        break;
      case 1126:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setOpaqueCurveIntersectionFunctionWithSignature_atIndex";
        break;
      case 1127:
        uint64_t result = "kDYFEMTLIntersectionFunctionTable_setOpaqueCurveIntersectionFunctionWithSignature_withRange";
        break;
      case 1128:
        uint64_t result = "kDYFEMTLCommandBuffer_setPrivateLoggingBuffer";
        break;
      case 1129:
        uint64_t result = "kDYFEMTLCommandBuffer_setResponsibleTaskIDs_count";
        break;
      case 1130:
        uint64_t result = "kDYFEMTLCommandBuffer_useResidencySet";
        break;
      case 1131:
        uint64_t result = "kDYFEMTLCommandBuffer_useResidencySets_count";
        break;
      case 1132:
        uint64_t result = "kDYFEMTLCommandQueue_addResidencySet";
        break;
      case 1133:
        uint64_t result = "kDYFEMTLCommandQueue_addResidencySets_count";
        break;
      case 1134:
        uint64_t result = "kDYFEMTLCommandQueue_removeResidencySet";
        break;
      case 1135:
        uint64_t result = "kDYFEMTLCommandQueue_removeResidencySets_count";
        break;
      case 1136:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_useResidencySet";
        break;
      case 1137:
        uint64_t result = "kDYFEMTLComputeCommandEncoder_useResidencySets_count";
        break;
      case 1138:
        uint64_t result = "kDYFEMTLDevice_setWritableHeapsEnabled";
        break;
      case 1139:
        uint64_t result = "kDYFEMTLDevice_newResidencySetWithDescriptor_error";
        break;
      case 1140:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useResidencySet";
        break;
      case 1141:
        uint64_t result = "kDYFEMTLRenderCommandEncoder_useResidencySets_count";
        break;
      case 1142:
        uint64_t result = "kDYFEMTLResidencySet_addHeap";
        break;
      case 1143:
        uint64_t result = "kDYFEMTLResidencySet_addHeaps_count";
        break;
      case 1144:
        uint64_t result = "kDYFEMTLResidencySet_addResource";
        break;
      case 1145:
        uint64_t result = "kDYFEMTLResidencySet_addResources_count";
        break;
      case 1146:
        uint64_t result = "kDYFEMTLResidencySet_commitAdds";
        break;
      case 1147:
        uint64_t result = "kDYFEMTLResidencySet_commitRemoves";
        break;
      case 1148:
        uint64_t result = "kDYFEMTLResidencySet_commitResidency";
        break;
      case 1149:
        uint64_t result = "kDYFEMTLResidencySet_containsHeap";
        break;
      case 1150:
        uint64_t result = "kDYFEMTLResidencySet_containsResource";
        break;
      case 1151:
        uint64_t result = "kDYFEMTLResidencySet_countForHeap";
        break;
      case 1152:
        uint64_t result = "kDYFEMTLResidencySet_countForResource";
        break;
      case 1153:
        uint64_t result = "kDYFEMTLResidencySet_dealloc";
        break;
      case 1154:
        uint64_t result = "kDYFEMTLResidencySet_endResidency";
        break;
      case 1155:
        uint64_t result = "kDYFEMTLResidencySet_removeAllHeaps";
        break;
      case 1156:
        uint64_t result = "kDYFEMTLResidencySet_removeAllResources";
        break;
      case 1157:
        uint64_t result = "kDYFEMTLResidencySet_removeHeap";
        break;
      case 1158:
        uint64_t result = "kDYFEMTLResidencySet_removeHeaps_count";
        break;
      case 1159:
        uint64_t result = "kDYFEMTLResidencySet_removeResource";
        break;
      case 1160:
        uint64_t result = "kDYFEMTLResidencySet_removeResources_count";
        break;
      case 1161:
        uint64_t result = "kDYFEMTLResidencySet_requestResidency";
        break;
      case 1162:
        uint64_t result = "kDYFEMTLResidencySet_setCurrentGeneration";
        break;
      case 1163:
        uint64_t result = "kDYFEMTLResidencySet_setExpiredGeneration";
        break;
      case 1164:
        uint64_t result = "kDYFEMTLResidencySet_commit";
        break;
      case 1165:
        uint64_t result = "kDYFEMTLResidencySet_generationForHeap";
        break;
      case 1166:
        uint64_t result = "kDYFEMTLResidencySet_generationForResource";
        break;
      case 1167:
        uint64_t result = "kDYFEMTLCommandBuffer_encodeSignalEventScheduled_value";
        break;
      case 1168:
        uint64_t result = "kDYFEMTLCommandBuffer_setPrivateData";
        break;
      case 1169:
        uint64_t result = "kDYFEMTLCommandBuffer_setPrivateDataOffset";
        break;
      case 1170:
        uint64_t result = "kDYFEMTLDevice_newLogStateWithDescriptor_error";
        break;
      case 1171:
        uint64_t result = "kDYFEMTLLogState_dealloc";
        break;
      case 1172:
        uint64_t result = "kDYFEMTLResidencySet_addAllocation";
        break;
      case 1173:
        uint64_t result = "kDYFEMTLResidencySet_addAllocations_count";
        break;
      case 1174:
        uint64_t result = "kDYFEMTLResidencySet_containsAllocation";
        break;
      case 1175:
        uint64_t result = "kDYFEMTLResidencySet_generationForAllocation";
        break;
      case 1176:
        uint64_t result = "kDYFEMTLResidencySet_removeAllAllocations";
        break;
      case 1177:
        uint64_t result = "kDYFEMTLResidencySet_removeAllocation";
        break;
      case 1178:
        uint64_t result = "kDYFEMTLResidencySet_removeAllocations_count";
        break;
      default:
        uint64_t result = "kDYFEMTLFXTemporalScaler_executionMode";
        break;
    }
  }

  return result;
}

uint64_t GetFuncEnumReceiverType(int a1)
{
  if (a1 > -12545)
  {
    if (a1 > -7169)
    {
      switch(a1)
      {
        case -6144:
        case -6132:
        case -6130:
        case -6105:
        case -6101:
          uint64_t result = 10LL;
          break;
        case -6143:
        case -6141:
        case -6134:
        case -6133:
        case -6131:
        case -6129:
        case -6122:
        case -6119:
        case -6116:
        case -6111:
        case -6110:
        case -6109:
        case -6096:
        case -6095:
LABEL_4:
          uint64_t result = 36LL;
          break;
        case -6142:
        case -6126:
        case -6121:
          uint64_t result = 7LL;
          break;
        case -6140:
        case -6137:
          uint64_t result = 11LL;
          break;
        case -6139:
          uint64_t result = 15LL;
          break;
        case -6138:
        case -6135:
        case -6117:
        case -6115:
          uint64_t result = 8LL;
          break;
        case -6136:
        case -6120:
        case -6112:
        case -6108:
        case -6106:
          uint64_t result = 5LL;
          break;
        case -6128:
        case -6124:
        case -6104:
        case -6103:
          uint64_t result = 9LL;
          break;
        case -6127:
        case -6114:
        case -6113:
        case -6107:
          uint64_t result = 6LL;
          break;
        case -6125:
        case -6123:
        case -6118:
          uint64_t result = 4LL;
          break;
        case -6102:
        case -6100:
          uint64_t result = 14LL;
          break;
        case -6099:
        case -6098:
          uint64_t result = 13LL;
          break;
        case -6097:
          uint64_t result = 12LL;
          break;
        default:
          switch(a1)
          {
            case -7168:
            case -7166:
            case -7165:
            case -7164:
            case -7163:
            case -7162:
            case -7160:
            case -7159:
            case -7154:
            case -7153:
              uint64_t result = 3LL;
              break;
            case -7167:
            case -7161:
            case -7158:
            case -7157:
            case -7156:
              uint64_t result = 2LL;
              break;
            case -7155:
              uint64_t result = 85LL;
              break;
            default:
              switch(a1)
              {
                case -6656:
                case -6655:
                case -6654:
                case -6653:
                case -6652:
                  uint64_t result = 84LL;
                  break;
                default:
LABEL_75:
                  uint64_t result = 0LL;
                  break;
              }

              break;
          }

          break;
      }
    }

    else
    {
      int v2 = a1 + 10240;
      uint64_t result = 1LL;
      switch(v2)
      {
        case 0:
        case 11:
        case 15:
LABEL_12:
          uint64_t result = 25LL;
          break;
        case 1:
        case 3:
        case 7:
        case 10:
          goto LABEL_4;
        case 2:
        case 4:
        case 6:
        case 8:
        case 9:
        case 13:
        case 18:
        case 28:
        case 35:
        case 36:
        case 39:
        case 42:
        case 55:
        case 76:
LABEL_8:
          uint64_t result = 80LL;
          break;
        case 5:
        case 12:
        case 17:
        case 19:
        case 30:
        case 37:
        case 40:
        case 53:
        case 54:
LABEL_18:
          uint64_t result = 22LL;
          break;
        case 14:
        case 77:
LABEL_50:
          uint64_t result = 75LL;
          break;
        case 20:
        case 41:
        case 48:
        case 56:
        case 68:
        case 75:
LABEL_15:
          uint64_t result = 71LL;
          break;
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 31:
        case 38:
        case 74:
LABEL_25:
          uint64_t result = 57LL;
          break;
        case 26:
        case 49:
        case 69:
        case 78:
LABEL_34:
          uint64_t result = 29LL;
          break;
        case 27:
LABEL_36:
          uint64_t result = 74LL;
          break;
        case 29:
        case 32:
        case 33:
LABEL_30:
          uint64_t result = 50LL;
          break;
        case 34:
          uint64_t result = 77LL;
          break;
        case 43:
        case 44:
        case 45:
        case 46:
        case 50:
        case 58:
        case 59:
        case 67:
        case 70:
        case 71:
        case 73:
        case 81:
        case 84:
LABEL_24:
          uint64_t result = 16LL;
          break;
        case 47:
        case 62:
        case 63:
        case 66:
        case 80:
        case 87:
LABEL_26:
          uint64_t result = 83LL;
          break;
        case 51:
LABEL_49:
          uint64_t result = 37LL;
          break;
        case 52:
        case 57:
LABEL_31:
          uint64_t result = 62LL;
          break;
        case 60:
        case 61:
        case 64:
        case 65:
        case 79:
        case 88:
LABEL_19:
          uint64_t result = 60LL;
          break;
        case 72:
          return result;
        case 82:
        case 85:
        case 86:
LABEL_14:
          uint64_t result = 17LL;
          break;
        case 83:
LABEL_37:
          uint64_t result = 43LL;
          break;
        case 89:
LABEL_40:
          uint64_t result = 23LL;
          break;
        default:
          goto LABEL_75;
      }
    }
  }

  else if (a1 <= -18431)
  {
    switch(a1)
    {
      case -20480:
      case -20479:
      case -20478:
      case -20477:
      case -20476:
      case -20475:
      case -20474:
        uint64_t result = 39LL;
        break;
      case -20473:
      case -20472:
      case -20471:
      case -20470:
      case -20469:
      case -20468:
      case -20467:
      case -20466:
      case -20465:
      case -20464:
      case -20463:
      case -20462:
      case -20461:
      case -20460:
      case -20459:
      case -20458:
      case -20457:
      case -20456:
LABEL_23:
        uint64_t result = 40LL;
        break;
      default:
        if (a1 != -18432 && a1 != -18431) {
          goto LABEL_75;
        }
        goto LABEL_4;
    }
  }

  else
  {
    switch(a1)
    {
      case -16384:
      case -16383:
      case -16382:
      case -16381:
      case -16380:
      case -16379:
      case -16378:
      case -16377:
      case -16376:
      case -16375:
      case -16374:
      case -16373:
      case -16230:
      case -16229:
      case -16213:
      case -16212:
      case -16211:
      case -16210:
      case -16209:
      case -16131:
      case -16124:
      case -15995:
      case -15994:
      case -15993:
      case -15992:
      case -15977:
      case -15976:
      case -15960:
      case -15959:
      case -15958:
      case -15878:
      case -15877:
      case -15876:
      case -15875:
      case -15802:
      case -15800:
      case -15798:
      case -15756:
      case -15755:
      case -15474:
      case -15473:
      case -15472:
      case -15471:
      case -15470:
      case -15469:
        uint64_t result = 21LL;
        break;
      case -16372:
      case -16371:
      case -16370:
      case -16369:
      case -16368:
      case -16367:
      case -16366:
      case -16228:
      case -16208:
      case -16122:
      case -16113:
      case -16104:
      case -16103:
      case -16102:
      case -16098:
      case -15914:
      case -15904:
      case -15874:
      case -15768:
      case -15767:
      case -15505:
      case -15504:
      case -15357:
        goto LABEL_18;
      case -16365:
      case -16364:
      case -16363:
      case -16362:
      case -16361:
      case -16360:
      case -16359:
      case -16358:
      case -16357:
      case -16356:
      case -16355:
      case -16354:
      case -16353:
      case -16352:
      case -16351:
      case -16350:
      case -16202:
      case -16195:
      case -16164:
      case -16151:
      case -16133:
      case -16065:
      case -16064:
      case -16014:
      case -16013:
      case -16012:
      case -15991:
      case -15990:
      case -15967:
      case -15966:
      case -15908:
      case -15899:
      case -15898:
      case -15897:
      case -15873:
      case -15872:
      case -15871:
      case -15870:
      case -15749:
      case -15712:
      case -15703:
      case -15673:
      case -15587:
      case -15586:
      case -15585:
      case -15584:
      case -15533:
      case -15501:
      case -15500:
      case -15410:
      case -15364:
      case -15326:
      case -15318:
      case -15316:
      case -15286:
      case -15285:
      case -15256:
      case -15255:
      case -15254:
      case -15253:
      case -15217:
      case -15216:
      case -15215:
        goto LABEL_12;
      case -16349:
      case -16348:
      case -16347:
      case -16346:
      case -16345:
      case -16344:
      case -16343:
      case -16342:
      case -16341:
      case -16340:
      case -16134:
      case -15811:
      case -15810:
      case -15809:
      case -15808:
      case -15807:
      case -15806:
      case -15805:
      case -15804:
      case -15701:
      case -15624:
      case -15252:
      case -15251:
      case -15250:
      case -15249:
        uint64_t result = 27LL;
        break;
      case -16339:
      case -16338:
      case -16337:
      case -16336:
      case -16335:
      case -16334:
      case -16333:
      case -16332:
      case -16331:
      case -16330:
      case -16329:
      case -16328:
      case -16327:
      case -16326:
      case -16325:
      case -16324:
      case -16323:
      case -16322:
      case -16227:
      case -16226:
      case -16220:
      case -16207:
      case -16150:
      case -16149:
      case -16130:
      case -16129:
      case -16100:
      case -16079:
      case -16078:
      case -16047:
      case -16046:
      case -16045:
      case -16044:
      case -16017:
      case -16011:
      case -16010:
      case -16009:
      case -16008:
      case -15965:
      case -15964:
      case -15963:
      case -15869:
      case -15754:
      case -15732:
      case -15711:
      case -15710:
      case -15709:
      case -15623:
      case -15622:
      case -15621:
      case -15583:
      case -15582:
      case -15581:
      case -15580:
      case -15518:
      case -15517:
      case -15516:
      case -15515:
      case -15514:
      case -15513:
      case -15512:
      case -15511:
      case -15510:
      case -15503:
      case -15284:
      case -15283:
      case -15282:
      case -15281:
      case -15280:
      case -15279:
      case -15278:
      case -15248:
      case -15247:
        uint64_t result = 28LL;
        break;
      case -16321:
      case -16092:
      case -15989:
      case -15868:
      case -15700:
      case -15699:
      case -15620:
      case -15619:
      case -15618:
      case -15579:
      case -15578:
      case -15541:
      case -15540:
        goto LABEL_34;
      case -16320:
        uint64_t result = 34LL;
        break;
      case -16319:
      case -16318:
      case -16317:
      case -16316:
      case -16315:
      case -16314:
      case -16313:
      case -16312:
      case -16311:
      case -16310:
      case -16309:
      case -16308:
      case -16307:
      case -16306:
      case -16305:
      case -16304:
      case -16303:
      case -16302:
      case -16301:
      case -16300:
      case -16299:
      case -16298:
      case -16297:
      case -16296:
      case -16295:
      case -16294:
      case -16206:
      case -16205:
      case -16200:
      case -16199:
      case -16198:
      case -16197:
      case -16166:
      case -16165:
      case -16163:
      case -16128:
      case -16121:
      case -16120:
      case -16112:
      case -16111:
      case -16101:
      case -16099:
      case -16096:
      case -16095:
      case -16093:
      case -16091:
      case -16090:
      case -16089:
      case -16088:
      case -16075:
      case -16066:
      case -16050:
      case -16049:
      case -16048:
      case -16039:
      case -16037:
      case -16036:
      case -16035:
      case -16031:
      case -16030:
      case -16029:
      case -16018:
      case -16016:
      case -16015:
      case -15998:
      case -15997:
      case -15996:
      case -15980:
      case -15979:
      case -15978:
      case -15972:
      case -15971:
      case -15969:
      case -15968:
      case -15912:
      case -15909:
      case -15902:
      case -15901:
      case -15900:
      case -15892:
      case -15891:
      case -15864:
      case -15863:
      case -15862:
      case -15861:
      case -15860:
      case -15859:
      case -15858:
      case -15857:
      case -15856:
      case -15855:
      case -15854:
      case -15853:
      case -15852:
      case -15851:
      case -15850:
      case -15849:
      case -15848:
      case -15847:
      case -15846:
      case -15845:
      case -15844:
      case -15843:
      case -15842:
      case -15841:
      case -15840:
      case -15839:
      case -15838:
      case -15837:
      case -15836:
      case -15835:
      case -15834:
      case -15833:
      case -15832:
      case -15831:
      case -15814:
      case -15813:
      case -15796:
      case -15793:
      case -15791:
      case -15780:
      case -15779:
      case -15774:
      case -15759:
      case -15758:
      case -15757:
      case -15751:
      case -15747:
      case -15746:
      case -15737:
      case -15731:
      case -15730:
      case -15719:
      case -15718:
      case -15717:
      case -15716:
      case -15708:
      case -15707:
      case -15706:
      case -15705:
      case -15704:
      case -15698:
      case -15697:
      case -15696:
      case -15695:
      case -15694:
      case -15693:
      case -15672:
      case -15671:
      case -15617:
      case -15616:
      case -15615:
      case -15614:
      case -15613:
      case -15612:
      case -15577:
      case -15576:
      case -15575:
      case -15535:
      case -15532:
      case -15531:
      case -15509:
      case -15506:
      case -15499:
      case -15498:
      case -15497:
      case -15496:
      case -15475:
      case -15468:
      case -15467:
      case -15464:
      case -15435:
      case -15434:
      case -15433:
      case -15432:
      case -15431:
      case -15430:
      case -15429:
      case -15428:
      case -15427:
      case -15425:
      case -15421:
      case -15420:
      case -15419:
      case -15418:
      case -15417:
      case -15406:
      case -15405:
      case -15404:
      case -15403:
      case -15402:
      case -15363:
      case -15362:
      case -15361:
      case -15360:
      case -15359:
      case -15358:
      case -15350:
      case -15349:
      case -15348:
      case -15347:
      case -15317:
      case -15315:
      case -15314:
      case -15298:
      case -15296:
      case -15270:
      case -15269:
      case -15268:
      case -15267:
      case -15261:
      case -15260:
      case -15259:
      case -15246:
      case -15245:
      case -15214:
        goto LABEL_4;
      case -16293:
      case -16135:
      case -16123:
      case -16052:
      case -16051:
      case -15830:
      case -15715:
      case -15714:
      case -15713:
      case -15670:
      case -15669:
        goto LABEL_37;
      case -16292:
      case -16291:
      case -16290:
      case -16107:
      case -16106:
      case -16083:
      case -16082:
      case -16081:
      case -16038:
      case -15772:
      case -15609:
      case -15608:
      case -15551:
      case -15550:
      case -15487:
      case -15423:
      case -15323:
      case -15322:
        goto LABEL_31;
      case -16289:
      case -16288:
      case -16287:
      case -16286:
      case -16285:
      case -16284:
      case -16283:
      case -16282:
      case -16162:
      case -16161:
      case -16160:
      case -16028:
      case -16027:
      case -16026:
        uint64_t result = 65LL;
        break;
      case -16281:
      case -16280:
      case -16279:
      case -16278:
      case -16277:
      case -16276:
      case -16275:
      case -16274:
      case -16273:
      case -16272:
      case -16271:
      case -16270:
      case -16269:
      case -16268:
      case -16267:
      case -16266:
      case -16265:
      case -16264:
      case -16263:
      case -16262:
      case -16261:
      case -16260:
      case -16259:
      case -16258:
      case -16257:
      case -16256:
      case -16255:
      case -16254:
      case -16253:
      case -16252:
      case -16251:
      case -16250:
      case -16249:
      case -16248:
      case -16247:
      case -16246:
      case -16245:
      case -16244:
      case -16243:
      case -16225:
      case -16224:
      case -16223:
      case -16222:
      case -16219:
      case -16218:
      case -16217:
      case -16216:
      case -16215:
      case -16214:
      case -16204:
      case -16203:
      case -16201:
      case -16159:
      case -16158:
      case -16157:
      case -16156:
      case -16155:
      case -16148:
      case -16147:
      case -16146:
      case -16145:
      case -16144:
      case -16143:
      case -16142:
      case -16141:
      case -16140:
      case -16139:
      case -16138:
      case -16137:
      case -16132:
      case -16126:
      case -16125:
      case -16087:
      case -16086:
      case -16085:
      case -16084:
      case -16080:
      case -16077:
      case -16076:
      case -16074:
      case -16043:
      case -16042:
      case -16041:
      case -16040:
      case -16022:
      case -16021:
      case -16020:
      case -16007:
      case -16006:
      case -16005:
      case -16004:
      case -16003:
      case -15988:
      case -15987:
      case -15986:
      case -15985:
      case -15984:
      case -15970:
      case -15962:
      case -15961:
      case -15823:
      case -15822:
      case -15821:
      case -15820:
      case -15819:
      case -15818:
      case -15812:
      case -15750:
      case -15729:
      case -15728:
      case -15727:
      case -15726:
      case -15725:
      case -15724:
      case -15723:
      case -15722:
      case -15721:
      case -15720:
      case -15507:
      case -15486:
      case -15485:
      case -15484:
      case -15483:
      case -15482:
      case -15481:
      case -15480:
      case -15479:
      case -15478:
      case -15477:
      case -15476:
      case -15459:
      case -15458:
      case -15457:
      case -15456:
      case -15455:
      case -15454:
      case -15453:
      case -15452:
      case -15451:
      case -15450:
      case -15449:
      case -15448:
      case -15447:
      case -15446:
      case -15445:
      case -15416:
      case -15415:
      case -15414:
      case -15401:
      case -15400:
      case -15399:
      case -15398:
      case -15397:
      case -15396:
      case -15395:
      case -15394:
      case -15393:
      case -15392:
      case -15391:
      case -15390:
      case -15389:
      case -15388:
      case -15387:
      case -15386:
      case -15385:
      case -15384:
      case -15383:
      case -15382:
      case -15381:
      case -15297:
      case -15275:
      case -15274:
      case -15273:
      case -15272:
      case -15244:
      case -15243:
        uint64_t result = 70LL;
        break;
      case -16242:
      case -15817:
      case -15463:
      case -15462:
      case -15461:
      case -15460:
      case -15444:
      case -15443:
      case -15442:
      case -15441:
      case -15440:
      case -15439:
      case -15438:
      case -15437:
      case -15436:
      case -15413:
      case -15380:
      case -15379:
      case -15378:
      case -15377:
      case -15376:
      case -15375:
      case -15374:
      case -15373:
      case -15372:
      case -15371:
      case -15370:
      case -15369:
      case -15368:
      case -15367:
      case -15319:
      case -15288:
        goto LABEL_15;
      case -16241:
      case -15983:
      case -15816:
        goto LABEL_50;
      case -16240:
      case -16239:
      case -16238:
      case -16237:
      case -16236:
      case -16235:
      case -16234:
      case -16233:
      case -16232:
      case -16231:
      case -16221:
      case -16196:
      case -16114:
      case -16108:
      case -16094:
      case -15981:
      case -15913:
      case -15910:
      case -15903:
      case -15894:
      case -15815:
      case -15775:
      case -15761:
      case -15760:
      case -15690:
      case -15689:
      case -15688:
      case -15534:
        goto LABEL_8;
      case -16194:
      case -16193:
      case -16192:
      case -16191:
      case -16190:
      case -16189:
      case -16188:
      case -16187:
      case -16186:
      case -16185:
      case -16184:
      case -16183:
      case -16182:
      case -16181:
      case -16180:
      case -16179:
      case -16178:
      case -16177:
      case -16176:
      case -16175:
      case -16174:
      case -16173:
      case -16172:
      case -16171:
      case -16170:
      case -16169:
      case -16168:
      case -16167:
      case -16154:
      case -16153:
      case -16152:
      case -16025:
      case -16024:
      case -16023:
        uint64_t result = 42LL;
        break;
      case -16136:
      case -16127:
        uint64_t result = 41LL;
        break;
      case -16119:
      case -16118:
      case -16117:
      case -16116:
      case -16115:
      case -16110:
      case -16109:
      case -16105:
      case -15829:
      case -15828:
      case -15778:
      case -15777:
      case -15356:
      case -15355:
      case -15354:
      case -15353:
      case -15352:
      case -15351:
        goto LABEL_30;
      case -16097:
      case -16032:
        uint64_t result = 81LL;
        break;
      case -16073:
      case -16072:
      case -16071:
      case -16070:
        uint64_t result = 24LL;
        break;
      case -16069:
      case -16068:
      case -16067:
      case -16034:
      case -16019:
      case -15736:
      case -15735:
      case -15734:
      case -15733:
        goto LABEL_40;
      case -16063:
      case -16062:
      case -16061:
      case -16060:
      case -16059:
      case -16058:
      case -16057:
      case -16056:
      case -16055:
      case -16054:
      case -16053:
      case -16033:
      case -16002:
      case -16001:
      case -16000:
      case -15999:
      case -15916:
      case -15915:
      case -15627:
      case -15626:
      case -15625:
      case -15549:
      case -15548:
      case -15547:
      case -15546:
      case -15539:
      case -15538:
      case -15537:
      case -15536:
        uint64_t result = 18LL;
        break;
      case -15982:
        uint64_t result = 78LL;
        break;
      case -15975:
      case -15974:
      case -15973:
      case -15911:
      case -15907:
      case -15422:
      case -15321:
        uint64_t result = 76LL;
        break;
      case -15957:
      case -15956:
      case -15955:
      case -15954:
      case -15953:
      case -15952:
      case -15951:
      case -15950:
      case -15949:
      case -15948:
      case -15947:
      case -15946:
      case -15945:
      case -15944:
      case -15943:
      case -15942:
      case -15941:
      case -15940:
      case -15939:
      case -15938:
      case -15937:
      case -15936:
      case -15906:
      case -15276:
      case -15266:
      case -15265:
      case -15264:
      case -15263:
      case -15262:
        uint64_t result = 59LL;
        break;
      case -15935:
      case -15934:
      case -15933:
      case -15932:
      case -15931:
      case -15930:
      case -15929:
      case -15928:
      case -15927:
      case -15926:
      case -15905:
      case -15827:
      case -15826:
      case -15825:
      case -15824:
      case -15773:
      case -15277:
        uint64_t result = 58LL;
        break;
      case -15925:
      case -15924:
      case -15923:
      case -15922:
      case -15921:
      case -15920:
      case -15919:
      case -15918:
      case -15917:
      case -15896:
      case -15895:
      case -15766:
      case -15765:
      case -15764:
      case -15763:
      case -15762:
        goto LABEL_25;
      case -15893:
        uint64_t result = 64LL;
        break;
      case -15890:
      case -15889:
      case -15888:
      case -15887:
      case -15886:
      case -15885:
      case -15884:
      case -15883:
      case -15882:
      case -15881:
        uint64_t result = 82LL;
        break;
      case -15880:
      case -15879:
      case -15325:
        uint64_t result = 38LL;
        break;
      case -15867:
      case -15753:
        uint64_t result = 31LL;
        break;
      case -15866:
      case -15865:
        uint64_t result = 35LL;
        break;
      case -15803:
      case -15801:
      case -15799:
      case -15797:
      case -15795:
      case -15776:
      case -15771:
      case -15770:
      case -15412:
      case -15411:
        uint64_t result = 68LL;
        break;
      case -15794:
      case -15792:
      case -15790:
      case -15789:
      case -15788:
      case -15787:
      case -15786:
      case -15785:
      case -15784:
      case -15783:
      case -15782:
      case -15781:
      case -15271:
        goto LABEL_36;
      case -15769:
        uint64_t result = 73LL;
        break;
      case -15752:
        uint64_t result = 32LL;
        break;
      case -15748:
        uint64_t result = 30LL;
        break;
      case -15745:
        uint64_t result = 66LL;
        break;
      case -15744:
      case -15743:
      case -15742:
      case -15741:
      case -15740:
      case -15739:
      case -15738:
        uint64_t result = 67LL;
        break;
      case -15702:
        uint64_t result = 26LL;
        break;
      case -15692:
        uint64_t result = 45LL;
        break;
      case -15691:
        uint64_t result = 79LL;
        break;
      case -15687:
      case -15686:
      case -15685:
      case -15684:
      case -15668:
      case -15667:
      case -15666:
      case -15665:
      case -15664:
      case -15663:
      case -15662:
      case -15555:
      case -15554:
      case -15553:
      case -15426:
      case -15409:
      case -15408:
      case -15407:
      case -15327:
        uint64_t result = 19LL;
        break;
      case -15683:
      case -15682:
      case -15681:
      case -15680:
      case -15679:
      case -15678:
      case -15677:
        uint64_t result = 20LL;
        break;
      case -15676:
      case -15675:
      case -15674:
      case -15611:
        goto LABEL_49;
      case -15661:
      case -15660:
      case -15659:
      case -15658:
      case -15657:
      case -15656:
      case -15655:
      case -15654:
      case -15653:
      case -15652:
      case -15651:
      case -15650:
      case -15649:
      case -15552:
        goto LABEL_24;
      case -15648:
      case -15647:
      case -15646:
      case -15645:
      case -15644:
      case -15643:
      case -15642:
      case -15641:
      case -15640:
      case -15639:
      case -15638:
      case -15637:
      case -15636:
      case -15635:
      case -15634:
      case -15633:
      case -15632:
      case -15631:
      case -15630:
      case -15629:
      case -15628:
      case -15595:
      case -15594:
      case -15593:
      case -15592:
      case -15591:
      case -15590:
      case -15589:
      case -15588:
      case -15524:
      case -15523:
      case -15522:
      case -15521:
      case -15520:
      case -15519:
      case -15502:
      case -15466:
      case -15465:
      case -15366:
      case -15365:
      case -15287:
        goto LABEL_14;
      case -15610:
        uint64_t result = 44LL;
        break;
      case -15607:
      case -15606:
      case -15605:
      case -15604:
      case -15603:
      case -15602:
      case -15601:
      case -15600:
      case -15599:
      case -15598:
      case -15597:
      case -15596:
      case -15574:
      case -15573:
      case -15543:
      case -15542:
      case -15528:
      case -15527:
        goto LABEL_26;
      case -15572:
      case -15571:
      case -15570:
      case -15569:
      case -15568:
      case -15567:
      case -15566:
      case -15565:
      case -15564:
      case -15563:
      case -15562:
      case -15561:
      case -15560:
      case -15559:
      case -15558:
      case -15557:
      case -15556:
      case -15545:
      case -15544:
      case -15530:
      case -15529:
      case -15526:
      case -15525:
      case -15258:
      case -15257:
        goto LABEL_19;
      case -15508:
        uint64_t result = 69LL;
        break;
      case -15495:
        uint64_t result = 46LL;
        break;
      case -15494:
        uint64_t result = 47LL;
        break;
      case -15493:
        uint64_t result = 48LL;
        break;
      case -15492:
        uint64_t result = 49LL;
        break;
      case -15491:
      case -15490:
      case -15489:
      case -15488:
      case -15424:
      case -15324:
        uint64_t result = 61LL;
        break;
      case -15346:
      case -15345:
      case -15344:
      case -15343:
      case -15342:
      case -15341:
      case -15340:
      case -15339:
      case -15338:
      case -15337:
      case -15336:
      case -15335:
      case -15313:
      case -15312:
      case -15311:
      case -15310:
      case -15309:
      case -15308:
      case -15295:
      case -15294:
      case -15293:
      case -15292:
        uint64_t result = 51LL;
        break;
      case -15334:
      case -15333:
      case -15332:
      case -15307:
      case -15306:
      case -15291:
        uint64_t result = 52LL;
        break;
      case -15331:
        uint64_t result = 55LL;
        break;
      case -15330:
      case -15329:
      case -15299:
        uint64_t result = 56LL;
        break;
      case -15328:
      case -15305:
      case -15304:
      case -15303:
      case -15302:
      case -15301:
      case -15300:
        uint64_t result = 54LL;
        break;
      case -15320:
        uint64_t result = 33LL;
        break;
      case -15290:
      case -15289:
        uint64_t result = 53LL;
        break;
      case -15242:
      case -15241:
      case -15240:
      case -15239:
      case -15238:
      case -15237:
      case -15236:
      case -15235:
      case -15234:
      case -15233:
      case -15232:
      case -15231:
      case -15230:
      case -15229:
      case -15228:
      case -15227:
      case -15226:
      case -15225:
      case -15224:
      case -15223:
      case -15222:
      case -15221:
      case -15220:
      case -15219:
      case -15218:
      case -15212:
      case -15211:
      case -15210:
      case -15209:
      case -15208:
      case -15207:
      case -15206:
        uint64_t result = 72LL;
        break;
      case -15213:
        uint64_t result = 63LL;
        break;
      default:
        if (a1 != -18430) {
          goto LABEL_75;
        }
        goto LABEL_23;
    }
  }

  return result;
}

BOOL IsFuncEnumCreateCommandEncoder(int a1)
{
  int FuncEnumConstructorType = GetFuncEnumConstructorType(a1);
  BOOL result = 1LL;
  if ((FuncEnumConstructorType - 21) > 0x3D
    || ((1LL << (FuncEnumConstructorType - 21)) & 0x2022100000000081LL) == 0)
  {
    return FuncEnumConstructorType == 17;
  }

  return result;
}

uint64_t IsFuncEnumSharedResourceConstructor(int a1)
{
  uint64_t result = 1LL;
  if (a1 <= -16097)
  {
    if (a1 > -16164)
    {
      if (a1 == -16163) {
        return result;
      }
      int v3 = -16104;
    }

    else
    {
      if (a1 == -16312) {
        return result;
      }
      int v3 = -16294;
    }

    goto LABEL_11;
  }

  if (((a1 + 16031) > 0x34 || ((1LL << (a1 - 97)) & 0x18000000000003LL) == 0)
    && (a1 + 15914) >= 2)
  {
    int v3 = -16096;
LABEL_11:
    if (a1 != v3) {
      return 0LL;
    }
  }

  return result;
}

uint64_t IsFuncEnumParallelCommandEncoderCall(int a1)
{
  uint64_t result = 1LL;
  if (a1 > -16163)
  {
  }

  else if (((a1 + 16289) > 7 || a1 == -16286) && a1 != -16351)
  {
    return 0LL;
  }

  return result;
}

uint64_t GTTraceStoreAllocNode(int *a1, unint64_t a2, char a3, uint64_t a4)
{
  unint64_t v7 = a2 + 64;
  if (a2 < 0xC1)
  {
    id v12 = (pthread_mutex_t *)(a1 + 66);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 66));
    int v11 = 0;
    goto LABEL_8;
  }

  unsigned int v8 = -1;
  unint64_t v9 = 256LL;
  do
  {
    unsigned int v10 = v8;
    v9 *= 2LL;
    ++v8;
  }

  while (v9 < v7);
  int v11 = v10 + 2;
  id v12 = (pthread_mutex_t *)(a1 + 66);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 66));
  if (v8 <= 0x1D)
  {
LABEL_8:
    id v13 = (vm_address_t *)v11;
    while (!*(void *)&a1[2 * (void)v13 + 4])
    {
      id v13 = (vm_address_t *)((char *)v13 + 1);
    }

    goto LABEL_26;
  }

  if (v11 != 31)
  {
LABEL_30:
    uint64_t v25 = v11;
    goto LABEL_31;
  }

  int v11 = 31;
LABEL_11:
  int v14 = 0;
  unint64_t v15 = 0x800000LL;
  if (v7 > 0x800000) {
    unint64_t v15 = v7;
  }
  for (unint64_t i = 256LL; i < v15; i *= 2LL)
    ++v14;
  memory_object_size_t v17 = 256LL;
  do
  {
    v17 *= 2LL;
    --v14;
  }

  while (v14);
  vm_address_t v18 = GTCoreAlloc(v17);
  int v19 = *a1;
  int v20 = a1[1];
  if (v20 == *a1)
  {
    int v21 = 2 * v20;
    if (!v20) {
      int v21 = 8;
    }
    a1[1] = v21;
    int v22 = (char *)realloc(*((void **)a1 + 1), 16LL * v21);
    *((void *)a1 + 1) = v22;
    int v19 = *a1;
  }

  else
  {
    int v22 = (char *)*((void *)a1 + 1);
  }

  *a1 = v19 + 1;
  id v13 = (vm_address_t *)&v22[16 * v19];
  *id v13 = v18;
  v13[1] = v17;
  *(_DWORD *)vm_address_t v18 = v17;
  *(_DWORD *)(v18 + 4) = 64;
  *(void *)(v18 + 8) = 0LL;
  *(void *)(v18 + 16) = 0LL;
  *(void *)(v18 + 24) = 0LL;
  *(void *)(v18 + 32) = v18;
  *(void *)(v18 + 48) = 0LL;
  *(void *)(v18 + 56) = 0LL;
  *(void *)(v18 + 40) = 0LL;
  LODWORD(v13) = 0;
  if (v17)
  {
    unint64_t v23 = 256LL;
    do
    {
      v23 *= 2LL;
      LODWORD(v13) = (_DWORD)v13 + 1;
    }

    while (v23 < v17);
  }

  *(void *)&a1[2 * (int)v13 + 4] = v18;
LABEL_26:
  uint64_t v24 = (int)v13;
  uint64_t v25 = v11;
  int v26 = *(unsigned int **)&a1[2 * (int)v13 + 4];
  do
  {
    char v27 = &a1[2 * v24];
    *((void *)v27 + 2) = *((void *)v26 + 5);
    unint64_t v28 = (unint64_t)*v26 >> 1;
    *v26 >>= 1;
    v26[1] = 64;
    *((void *)v26 + 2) = 0LL;
    *((void *)v26 + 3) = 0LL;
    *((void *)v26 + 1) = 0LL;
    *((void *)v26 + 4) = v26;
    *((void *)v26 + 6) = 0LL;
    *((void *)v26 + 7) = 0LL;
    char v29 = (char *)v26 + v28;
    *(_DWORD *)char v29 = v28;
    *((_DWORD *)v29 + 1) = 64;
    *((void *)v29 + 1) = 0LL;
    *((void *)v29 + 2) = 0LL;
    *((void *)v29 + 3) = 0LL;
    *((void *)v29 + 4) = v29;
    *((void *)v29 + 6) = 0LL;
    *((void *)v29 + 7) = 0LL;
    *((void *)v29 + 5) = 0LL;
    *((void *)v26 + 5) = (char *)v26 + v28;
    --v24;
    *((void *)v27 + 1) = v26;
  }

  while (v24 > v11);
LABEL_31:
  int v30 = &a1[2 * v25];
  uint64_t v31 = *((void *)v30 + 2);
  *((void *)v30 + 2) = *(void *)(v31 + 40);
  *(_BYTE *)(v31 + 8) = a3;
  *(void *)(v31 + 16) = a4;
  *(void *)(v31 + 24) = a1;
  *(void *)(v31 + 40) = 0LL;
  pthread_mutex_unlock(v12);
  return v31;
}

char *GTTraceMemPool_allocateBytes(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = (HIDWORD(a3) + 23) & 0x1FFFFFFF8LL;
  unint64_t v7 = (unsigned int *)(a1 + 24);
  do
    unsigned int v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  do
    unsigned int v9 = atomic_load((unsigned int *)(a1 + 28));
  while (v9 != v8);
  unsigned int v10 = *(unsigned int **)(a1 + 8);
  if (!v10) {
    goto LABEL_16;
  }
  int v11 = v10 + 1;
  uint64_t v12 = atomic_load(v10 + 1);
  while (1)
  {
    uint64_t v13 = v12;
    unint64_t v14 = v6 + v12;
    unint64_t v15 = *v10;
    if (v14 > v15) {
      break;
    }
    uint64_t v12 = __ldaxr(v11);
    if (v12 == v13)
    {
      if (!__stlxr(v14, v11))
      {
        unint64_t v15 = *v10;
        break;
      }
    }

    else
    {
      __clrex();
    }
  }

  id v16 = (char *)v10 + v13;
  uint64_t result = v14 <= v15 ? v16 : 0LL;
  if (v14 > v15)
  {
LABEL_16:
    vm_address_t v18 = (unsigned int *)GTTraceStoreAllocNode( *(int **)a1,  (HIDWORD(a3) + 23) & 0x1FFFFFFF8LL,  2,  *(void *)(a1 + 32));
    uint64_t v19 = *(void *)(a1 + 16);
    if (v19) {
      int v20 = (void *)(v19 + 40);
    }
    else {
      int v20 = (void *)(a1 + 8);
    }
    *int v20 = v18;
    *(void *)(a1 + 16) = v18;
    *((void *)v18 + 5) = 0LL;
    int v21 = v18 + 1;
    uint64_t v22 = atomic_load(v18 + 1);
    while (1)
    {
      uint64_t v23 = v22;
      unint64_t v24 = v6 + v22;
      unint64_t v25 = *v18;
      if (v24 > v25) {
        break;
      }
      uint64_t v22 = __ldaxr(v21);
      if (v22 == v23)
      {
        if (!__stlxr(v24, v21))
        {
          unint64_t v25 = *v18;
          break;
        }
      }

      else
      {
        __clrex();
      }
    }

    int v26 = (char *)v18 + v23;
    if (v24 <= v25) {
      uint64_t result = v26;
    }
    else {
      uint64_t result = 0LL;
    }
  }

  atomic_store(v8 + 1, (unsigned int *)(a1 + 28));
  *(void *)uint64_t result = a2;
  *((void *)result + 1) = a3;
  return result;
}

uint64_t FBDecoder_DecodeArguments(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  int v7 = a2;
  unint64_t v9 = a2 + a3;
  uint64_t v10 = *a1;
  int v11 = (char *)(a2 + v10);
  uint64_t v12 = (char *)memchr((const void *)(a2 + v10), 0, a3 - v10);
  if (!v12) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v13 = v12;
  int v39 = v7;
  uint8x8_t v40 = a1;
  unsigned int v14 = a1[1];
  unint64_t v15 = v12 + 1;
  if (v11 == v12)
  {
LABEL_36:
    uint64_t result = 0LL;
    _DWORD *v40 = (((_DWORD)v15 + 3) & 0xFFFFFFFC) - v39;
    v40[1] = v14;
    return result;
  }

  while (1)
  {
    uint64_t v16 = v14;
    if (v14 >= a5) {
      return 2LL;
    }
    memory_object_size_t v17 = (unint64_t *)(a4 + 16LL * v14);
    uint64_t v18 = a4 + 16 * v16;
    *(_BYTE *)(v18 + 11) = 0;
    uint64_t v19 = (char *)(v18 + 11);
    uint64_t v20 = a4 + 16 * v16;
    *(_WORD *)(v20 + 8) = 1;
    int v21 = (unsigned __int16 *)(v20 + 8);
    int v22 = *v11;
    if (v22 == 64)
    {
      unsigned __int16 v23 = 0;
      unint64_t v25 = v11 + 1;
      int v24 = v11[1];
      if (v11 + 1 != v13)
      {
        __int16 v26 = v24 - 48;
        if ((v24 - 48) <= 9)
        {
          unsigned __int16 v23 = 0;
          char v27 = v11 + 2;
          do
          {
            unsigned __int16 v23 = v26 + 10 * v23;
            BOOL v28 = v27 == v13;
            int v30 = *v27++;
            int v29 = v30;
            if (v28) {
              break;
            }
            __int16 v26 = v29 - 48;
          }

          while ((v29 - 48) < 0xA);
          unint64_t v25 = v27 - 1;
        }
      }

      *uint64_t v19 = 1;
      uint64_t v31 = v23;
      *int v21 = v23;
      int v22 = *v25;
      char v32 = 3;
      int v11 = v25;
    }

    else
    {
      char v32 = 2;
      uint64_t v31 = 1LL;
    }

    if (v22 == 117)
    {
      *uint64_t v19 = v32;
      char v33 = *++v11;
      LOBYTE(v22) = v33;
    }

    *(_BYTE *)(a4 + 16 * v16 + 10) = v22;
    uint64_t result = 0xFFFFFFFFLL;
    if ((char)v22 <= 97)
    {
      if ((char)v22 != 67)
      {
        if (v9 - (unint64_t)v15 >= 8 && *v15 == 0xFFFFFFFFLL)
        {
          *memory_object_size_t v17 = 0LL;
          *int v21 = 0;
          ++v15;
        }

        else
        {
          *memory_object_size_t v17 = (unint64_t)v15;
          int v37 = (char *)memchr(v15, 0, v9 - (void)v15);
          if (!v37) {
            return 0xFFFFFFFFLL;
          }
          *int v21 = (_WORD)v37 - (_WORD)v15;
          unint64_t v15 = v37 + 1;
        }

        goto LABEL_31;
      }
    }

    else
    {
      unsigned int v35 = (char)v22 - 98;
      if (v35 > 0x15) {
        return result;
      }
      if (((1 << v35) & 0x244404) == 0)
      {
        if (((1 << v35) & 0x90) != 0)
        {
          unint64_t v38 = ((unint64_t)v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          *memory_object_size_t v17 = v38;
          unint64_t v15 = (void *)(v38 + 4 * v31);
        }

        else
        {
          *memory_object_size_t v17 = (unint64_t)v15;
          unint64_t v15 = (void *)((char *)v15 + v31);
        }

        goto LABEL_31;
      }
    }

    unint64_t v36 = ((unint64_t)v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    *memory_object_size_t v17 = v36;
    unint64_t v15 = (void *)(v36 + 8 * v31);
LABEL_31:
    unsigned int v14 = v16 + 1;
    if (++v11 == v13) {
      goto LABEL_36;
    }
  }

uint64_t PerformanceStatisticsURL(unsigned int *a1)
{
  if ((*((_BYTE *)a1 + 33) & 0x10) != 0)
  {
    do
    {
      int v2 = (unsigned int *)((char *)a1 + *a1);
      if (v2[1] != -12272) {
        break;
      }
      uint64_t v4 = 0LL;
      if (FBDecoder_DecodeArguments( (unsigned int *)&v4,  (uint64_t)(v2 + 9),  *v2 - 36,  (uint64_t)v5,  0xDuLL)
        || HIDWORD(v4) < 2)
      {
        break;
      }

      if (*v6 == 116) {
        return v7;
      }
      a1 = InternalDataArgumentChainEnd(v2, 0LL);
    }

    while ((*((_BYTE *)a1 + 33) & 0x20) == 0);
  }

  return 0LL;
}

unsigned int *InternalDataArgumentChainEnd(unsigned int *a1, int *a2)
{
  int v3 = a1;
  unsigned int v4 = a1[1];
  if (a2)
  {
    if (v4 != -12272)
    {
      int v5 = *a2;
      __int128 v31 = 0u;
      __int128 v32 = 0u;
      v29[0] = v5;
      v29[1] = 500;
      int v30 = "header->fenum == kDYFEInternalData";
      uint64_t v6 = (__int128 *)v29;
LABEL_21:
      GTError_addError(a2, (uint64_t)v6);
      return v3;
    }
  }

  else if (v4 != -12272)
  {
    return v3;
  }

  uint64_t v28 = 0LL;
  int v7 = FBDecoder_DecodeArguments((unsigned int *)&v28, (uint64_t)(a1 + 9), *a1 - 36, (uint64_t)v29, 0xDuLL) & 0xFFFFFFFD;
  if (a2)
  {
    if (v7)
    {
      unsigned int v8 = *a2;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      *(void *)&__int128 v16 = v8 | 0x1F400000000LL;
      unint64_t v9 = "err == 0 || err == 2";
LABEL_20:
      *((void *)&v16 + 1) = v9;
      uint64_t v6 = &v16;
      goto LABEL_21;
    }

    if (HIDWORD(v28) <= 1)
    {
      unsigned int v14 = *a2;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      *(void *)&__int128 v16 = v14 | 0x1F400000000LL;
      unint64_t v9 = "2 <= parser.ntokens";
      goto LABEL_20;
    }

    goto LABEL_14;
  }

  if (v7) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = HIDWORD(v28) > 1;
  }
  if (v10)
  {
LABEL_14:
    unsigned int v11 = *(_DWORD *)v31 - 102;
    BOOL v10 = v11 > 0x20;
    uint64_t v12 = (1LL << v11) & 0x1B008001FLL;
    if (!v10 && v12 != 0)
    {
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      return DecodeDYMTLBinding(0LL, v3, &v16, 0LL, a2);
    }
  }

  return v3;
}

unsigned int *DecodeDYMTLBinding(uint64_t a1, unsigned int *a2, void *a3, uint64_t a4, int *a5)
{
  uint64_t v6 = a4;
  unsigned int v8 = a2;
  char v115 = 0;
  __int16 v114 = 0;
  unsigned int v10 = a2[1];
  unsigned int v107 = a4;
  if (a5)
  {
    if (v10 != -12272)
    {
      int v11 = *a5;
      __int128 v112 = 0u;
      __int128 v113 = 0u;
      int v109 = v11;
      int v110 = 500;
      uint64_t v12 = "it->fenum == kDYFEInternalData";
LABEL_18:
      unint64_t v111 = v12;
      GTError_addError(a5, (uint64_t)&v109);
      goto LABEL_19;
    }
  }

  else if (v10 != -12272)
  {
LABEL_19:
    char v24 = 0;
    LOWORD(v6) = 0;
    LOWORD(v25) = 0;
    uint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    unint64_t v28 = 0LL;
    char v29 = 0;
    char v30 = 0;
    char v31 = 0;
    LOBYTE(v32) = 0;
    uint64_t v33 = 0LL;
    __int128 v21 = 0LL;
    goto LABEL_20;
  }

  uint64_t v108 = 0LL;
  int v13 = FBDecoder_DecodeArguments((unsigned int *)&v108, (uint64_t)(a2 + 9), *a2 - 36, (uint64_t)v116, 0xDuLL);
  if (a5)
  {
    if (v13)
    {
      int v14 = *a5;
      __int128 v112 = 0u;
      __int128 v113 = 0u;
      int v109 = v14;
      int v110 = 500;
      uint64_t v12 = "err == FBUF_SUCCESS";
      goto LABEL_18;
    }

    unsigned int v15 = HIDWORD(v108);
    if (HIDWORD(v108) <= 6)
    {
      int v23 = *a5;
      __int128 v112 = 0u;
      __int128 v113 = 0u;
      int v109 = v23;
      int v110 = 500;
      uint64_t v12 = "7 <= parser.ntokens";
      goto LABEL_18;
    }
  }

  else
  {
    unsigned int v15 = HIDWORD(v108);
    if (v13) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = HIDWORD(v108) > 6;
    }
    if (!v16) {
      goto LABEL_19;
    }
  }

  __int128 v17 = __s;
  if (!__s)
  {
    size_t v22 = 0LL;
    __int128 v19 = a3 + 23;
    __int128 v20 = (char *)a3[23];
    goto LABEL_24;
  }

  size_t v18 = strlen(__s);
  __int128 v19 = a3 + 23;
  __int128 v20 = (char *)a3[23];
  __int128 v21 = v20;
  size_t v22 = v18 + 1;
  if (v18 == -1LL) {
LABEL_24:
  }
    __int128 v21 = 0LL;
  *__int128 v19 = &v20[v22];
  if ((_DWORD)v6)
  {
    unsigned int v35 = v21;
    memcpy(v21, v17, v22);
    __int128 v21 = v35;
  }

  uint64_t v26 = 0LL;
  char v24 = 0;
  unsigned int v32 = *v118;
  char v31 = *v119;
  char v29 = *v120 & 1;
  char v30 = *v121;
  if (v32 > 0xF)
  {
    if (v32 != 16)
    {
      if (v32 != 17)
      {
        if (v32 != 35) {
          goto LABEL_52;
        }
        if (a5)
        {
          if (v15 <= 0xB)
          {
            int v41 = *a5;
            __int128 v112 = 0u;
            __int128 v113 = 0u;
            int v109 = v41;
            int v110 = 500;
            unint64_t v111 = "12 <= parser.ntokens";
            unsigned int v42 = v21;
            char v43 = v29;
            char v44 = v31;
            char v45 = v30;
            GTError_addError(a5, (uint64_t)&v109);
            char v30 = v45;
            char v31 = v44;
            char v29 = v43;
            __int128 v21 = v42;
LABEL_59:
            char v24 = 0;
            LOWORD(v6) = 0;
            LOWORD(v25) = 0;
            uint64_t v26 = 0LL;
            uint64_t v27 = 0LL;
            unint64_t v28 = 0LL;
            goto LABEL_60;
          }
        }

        else if (v15 < 0xC)
        {
          goto LABEL_59;
        }

        char v100 = v21;
        unint64_t v103 = *(unsigned __int8 *)v122 | ((unint64_t)*(unsigned __int8 *)v123 << 8);
        int v25 = *v124;
        LODWORD(v6) = *v125;
        char v24 = *v126;
        uint64_t v27 = a3[16];
        a3[16] = v27 + 24;
        char v94 = v31;
        char v97 = v29;
        char v67 = v30;
        uint64_t v68 = DecodeDYMTLStructType(v27, (unsigned int *)((char *)v8 + *v8), a3, v107, a5);
        uint64_t v26 = a3[16];
        a3[16] = v26 + 24;
        uint64_t v69 = DecodeDYMTLStructType(v26, (unsigned int *)((char *)v68 + *v68), a3, v107, a5);
        __int128 v21 = v100;
        unint64_t v28 = v103;
        char v30 = v67;
        char v31 = v94;
        char v29 = v97;
        unsigned int v8 = v69;
LABEL_60:
        uint64_t v33 = 0LL;
        LOBYTE(v32) = 35;
        goto LABEL_20;
      }

      if (a5)
      {
        if (v15 <= 0xC)
        {
          int v61 = *a5;
          __int128 v112 = 0u;
          __int128 v113 = 0u;
          int v109 = v61;
          int v110 = 500;
          unint64_t v111 = "13 <= parser.ntokens";
          unint64_t v62 = v21;
          char v63 = v29;
          char v64 = v31;
          char v65 = v30;
          GTError_addError(a5, (uint64_t)&v109);
          char v30 = v65;
          char v31 = v64;
          char v29 = v63;
          __int128 v21 = v62;
LABEL_90:
          char v24 = 0;
          LOWORD(v6) = 0;
          LOWORD(v25) = 0;
          uint64_t v26 = 0LL;
          uint64_t v27 = 0LL;
          unint64_t v28 = 0LL;
          uint64_t v33 = 0LL;
LABEL_91:
          LOBYTE(v32) = 17;
          goto LABEL_20;
        }
      }

      else if (v15 < 0xD)
      {
        goto LABEL_90;
      }

      uint64_t v27 = *v124 | ((unint64_t)*v123 << 48) | ((unint64_t)*v126 << 40) | ((unint64_t)*v127 << 32);
      uint64_t v81 = a3[16];
      if (*(_BYTE *)v125) {
        unint64_t v82 = a3[16];
      }
      else {
        unint64_t v82 = 0LL;
      }
      unint64_t v106 = v82;
      if (*(_BYTE *)v125) {
        uint64_t v33 = 0LL;
      }
      else {
        uint64_t v33 = a3[16];
      }
      a3[16] = v81 + 24;
      int v83 = (unsigned int *)((char *)v8 + *v8);
      uint64_t v84 = v21;
      char v85 = v29;
      char v86 = v31;
      char v87 = v30;
      uint64_t v88 = DecodeDYMTLStructType(v81, v83, a3, v6, a5);
      unint64_t v28 = v106;
      char v30 = v87;
      char v31 = v86;
      char v29 = v85;
      __int128 v21 = v84;
      unsigned int v8 = v88;
      char v24 = 0;
      LOWORD(v6) = 0;
      LOWORD(v25) = 0;
      uint64_t v26 = 0LL;
      goto LABEL_91;
    }

    if (a5)
    {
      if (v15 <= 9)
      {
        int v56 = *a5;
        __int128 v112 = 0u;
        __int128 v113 = 0u;
        int v109 = v56;
        int v110 = 500;
        unint64_t v111 = "10 <= parser.ntokens";
        uint64_t v57 = v21;
        char v58 = v29;
        char v59 = v31;
        char v60 = v30;
        GTError_addError(a5, (uint64_t)&v109);
        char v30 = v60;
        char v31 = v59;
        char v29 = v58;
        __int128 v21 = v57;
LABEL_81:
        char v24 = 0;
        LOWORD(v6) = 0;
        LOWORD(v25) = 0;
        uint64_t v26 = 0LL;
        uint64_t v27 = 0LL;
        unint64_t v28 = 0LL;
        uint64_t v33 = 0LL;
        LOBYTE(v32) = 16;
        goto LABEL_20;
      }
    }

    else if (v15 < 0xA)
    {
      goto LABEL_81;
    }

    uint64_t v102 = v21;
    uint64_t v80 = *(unsigned int *)v123;
    char v96 = *v119;
    char v99 = *v120 & 1;
    char v93 = *v121;
    if (v15 < 0xC) {
      uint64_t v27 = v80 | 0xFF00000000LL;
    }
    else {
      uint64_t v27 = ((unint64_t)*(unsigned __int8 *)v125 << 40) | ((unint64_t)*(void *)v126 << 32) | v80;
    }
    uint64_t v89 = a3[16];
    if (*(_BYTE *)v124) {
      unint64_t v90 = a3[16];
    }
    else {
      unint64_t v90 = 0LL;
    }
    if (*(_BYTE *)v124) {
      uint64_t v33 = 0LL;
    }
    else {
      uint64_t v33 = a3[16];
    }
    a3[16] = v89 + 24;
    uint64_t v91 = DecodeDYMTLStructType(v89, (unsigned int *)((char *)v8 + *v8), a3, v6, a5);
    unint64_t v28 = v90;
    unsigned int v8 = v91;
    char v24 = 0;
    LOWORD(v6) = 0;
    LOWORD(v25) = 0;
    uint64_t v26 = 0LL;
    LOBYTE(v32) = 16;
    __int128 v21 = v102;
    char v31 = v96;
    char v29 = v99;
    char v30 = v93;
    goto LABEL_20;
  }

  if (*v118)
  {
    if (v32 != 1)
    {
      if (v32 == 2)
      {
        if (a5)
        {
          if (v15 <= 8)
          {
            int v36 = *a5;
            __int128 v112 = 0u;
            __int128 v113 = 0u;
            int v109 = v36;
            int v110 = 500;
            unint64_t v111 = "9 <= parser.ntokens";
            int v37 = v21;
            char v38 = v29;
            char v39 = v31;
            char v40 = v30;
            GTError_addError(a5, (uint64_t)&v109);
            char v30 = v40;
            char v31 = v39;
            char v29 = v38;
            __int128 v21 = v37;
LABEL_56:
            char v24 = 0;
            LOWORD(v6) = 0;
            LOWORD(v25) = 0;
            uint64_t v26 = 0LL;
            uint64_t v27 = 0LL;
            unint64_t v28 = 0LL;
            uint64_t v33 = 0LL;
LABEL_95:
            LOBYTE(v32) = 2;
            goto LABEL_20;
          }
        }

        else if (v15 < 9)
        {
          goto LABEL_56;
        }

        unint64_t v66 = *(unsigned __int8 *)v123 | ((unint64_t)*v122 << 8);
        char v24 = 0;
        LOWORD(v6) = 0;
        if (v15 < 0xB)
        {
          LOWORD(v25) = 0;
          uint64_t v26 = 0LL;
          uint64_t v27 = 0LL;
          uint64_t v33 = 0LL;
          unint64_t v28 = v66 | 0x10000;
        }

        else
        {
          LOWORD(v25) = 0;
          uint64_t v26 = 0LL;
          uint64_t v27 = 0LL;
          uint64_t v33 = 0LL;
          unint64_t v28 = ((unint64_t)*v124 << 16) | ((unint64_t)*(unsigned __int8 *)v125 << 24) | v66;
        }

        goto LABEL_95;
      }

unsigned int *DecodeDYMTLStructType(uint64_t a1, unsigned int *a2, void *a3, uint64_t a4, int *a5)
{
  int v7 = a2;
  unsigned int v9 = a2[1];
  if (a5)
  {
    if (v9 != -12272)
    {
      int v10 = *a5;
      __int128 v83 = 0u;
      __int128 __s = 0u;
      int v80 = v10;
      int v81 = 500;
      int v11 = "it->fenum == kDYFEInternalData";
LABEL_95:
      unint64_t v82 = v11;
      GTError_addError(a5, (uint64_t)&v80);
      goto LABEL_96;
    }

    goto LABEL_5;
  }

  if (v9 == -12272)
  {
LABEL_5:
    uint64_t v67 = 0LL;
    int v12 = FBDecoder_DecodeArguments((unsigned int *)&v67, (uint64_t)(a2 + 9), *a2 - 36, (uint64_t)v78, 2uLL);
    if (a5)
    {
      if (v12)
      {
        int v13 = *a5;
        __int128 v83 = 0u;
        __int128 __s = 0u;
        int v80 = v13;
        int v81 = 500;
        int v11 = "err == FBUF_SUCCESS";
        goto LABEL_95;
      }

      if (HIDWORD(v67) <= 1)
      {
        int v57 = *a5;
        __int128 v83 = 0u;
        __int128 __s = 0u;
        int v80 = v57;
        int v81 = 500;
        int v11 = "2 <= parser.ntokens";
        goto LABEL_95;
      }
    }

    else
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = HIDWORD(v67) > 1;
      }
      if (!v14) {
        goto LABEL_96;
      }
    }

    uint64_t v15 = *v79;
    uint64_t v65 = a3[17];
    a3[17] = v65 + 32 * v15;
    int v16 = v15;
    int v60 = v15;
    uint64_t v61 = a1;
    uint64_t v17 = 0LL;
    uint64_t v66 = 32LL * v15;
    while (1)
    {
      int v7 = (unsigned int *)((char *)v7 + *v7);
      __int16 v77 = 0;
      int v76 = 0;
      unsigned int v18 = v7[1];
      if (a5)
      {
        if (v18 != -12272)
        {
          int v19 = *a5;
          __int128 v83 = 0uLL;
          __int128 __s = 0uLL;
          int v80 = v19;
          int v81 = 500;
          unint64_t v82 = "it->fenum == kDYFEInternalData";
          __int128 v20 = &v80;
LABEL_34:
          GTError_addError(a5, (uint64_t)v20);
          goto LABEL_35;
        }
      }

      else if (v18 != -12272)
      {
        goto LABEL_35;
      }

      uint64_t v75 = 0LL;
      int v21 = FBDecoder_DecodeArguments((unsigned int *)&v75, (uint64_t)(v7 + 9), *v7 - 36, (uint64_t)&v80, 9uLL);
      if (a5)
      {
        if (v21)
        {
          int v22 = *a5;
          uint64_t v71 = 0LL;
          uint64_t v72 = 0LL;
          uint64_t v73 = 0LL;
          int v68 = v22;
          int v69 = 500;
          int v23 = "err == FBUF_SUCCESS";
        }

        else
        {
          int v24 = HIDWORD(v75);
          if (HIDWORD(v75) > 5) {
            goto LABEL_29;
          }
          int v32 = *a5;
          uint64_t v71 = 0LL;
          uint64_t v72 = 0LL;
          uint64_t v73 = 0LL;
          int v68 = v32;
          int v69 = 500;
          int v23 = "6 <= parser.ntokens";
        }

        char v70 = v23;
        uint64_t v74 = 0LL;
        __int128 v20 = &v68;
        goto LABEL_34;
      }

      int v24 = HIDWORD(v75);
      if (v21) {
        BOOL v25 = 0;
      }
      else {
        BOOL v25 = HIDWORD(v75) > 5;
      }
      if (v25)
      {
LABEL_29:
        uint64_t v26 = (const void *)__s;
        int v27 = *(_DWORD *)v83;
        if ((void)__s)
        {
          size_t v28 = strlen((const char *)__s);
          char v29 = (char *)a3[23];
          char v30 = v29;
          size_t v31 = v28 + 1;
          if (v28 != -1LL)
          {
LABEL_42:
            a3[23] = &v29[v31];
            if ((_DWORD)a4) {
              memcpy(v30, v26, v31);
            }
            int v35 = *v85;
            int v38 = *v86;
            int v39 = *v87;
            if (v24 != 6)
            {
              if (v24 != 7)
              {
                if (v24 == 8)
                {
                  __int16 v34 = *v88;
                  if (*v89)
                  {
                    int v62 = *v87;
                    int v63 = *v86;
                    goto LABEL_51;
                  }

unsigned int *DecodeDYMTLArrayType(uint64_t a1, unsigned int *a2, void *a3, uint64_t a4, int *a5)
{
  unsigned int v8 = a2;
  unsigned int v10 = a2[1];
  if (a5)
  {
    if (v10 != -12272)
    {
      int v11 = *a5;
      __int128 v45 = 0u;
      __int128 v46 = 0u;
      int v42 = v11;
      int v43 = 500;
      int v12 = "it->fenum == kDYFEInternalData";
LABEL_20:
      int v44 = v12;
      GTError_addError(a5, (uint64_t)&v42);
      goto LABEL_21;
    }
  }

  else if (v10 != -12272)
  {
LABEL_21:
    char v26 = 0;
    uint64_t v27 = 0LL;
    int v19 = 0;
    LOWORD(v17) = 0;
    __int16 v23 = 0;
    char v18 = 0;
    char v24 = 0;
    goto LABEL_22;
  }

  uint64_t v41 = 0LL;
  int v13 = FBDecoder_DecodeArguments((unsigned int *)&v41, (uint64_t)(a2 + 9), *a2 - 36, (uint64_t)v47, 9uLL);
  if (a5)
  {
    if (v13)
    {
      int v14 = *a5;
      __int128 v45 = 0u;
      __int128 v46 = 0u;
      int v42 = v14;
      int v43 = 500;
      int v12 = "err == FBUF_SUCCESS";
      goto LABEL_20;
    }

    unsigned int v15 = HIDWORD(v41);
    if (HIDWORD(v41) <= 5)
    {
      int v25 = *a5;
      __int128 v45 = 0u;
      __int128 v46 = 0u;
      int v42 = v25;
      int v43 = 500;
      int v12 = "6 <= parser.ntokens";
      goto LABEL_20;
    }
  }

  else
  {
    unsigned int v15 = HIDWORD(v41);
    if (v13) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = HIDWORD(v41) > 5;
    }
    if (!v16) {
      goto LABEL_21;
    }
  }

  int v17 = *v48;
  char v18 = *v49;
  int v19 = *v50;
  int v20 = *v51;
  int v21 = *v52;
  if (v15 < 7)
  {
    __int16 v23 = 0;
    char v24 = 0;
    BOOL v22 = 1;
    goto LABEL_43;
  }

  if (v15 != 7)
  {
    __int16 v23 = *v54;
    if (v15 < 9)
    {
      BOOL v22 = 1;
      if (!*v53)
      {
LABEL_36:
        char v24 = 0;
        goto LABEL_43;
      }
    }

    else
    {
      BOOL v22 = *v55 == 0;
      if (!*v53) {
        goto LABEL_36;
      }
    }

    int v38 = *v52;
    int v39 = *v51;
    int v40 = *v48;
    goto LABEL_30;
  }

  BOOL v22 = 1;
  if (!*v53)
  {
    __int16 v23 = 0;
    goto LABEL_36;
  }

  int v38 = *v52;
  int v39 = *v51;
  int v40 = *v48;
  __int16 v23 = 0;
LABEL_30:
  unsigned int v8 = (unsigned int *)((char *)v8 + *v8);
  uint64_t v41 = 0LL;
  int v29 = FBDecoder_DecodeArguments((unsigned int *)&v41, (uint64_t)(v8 + 9), *v8 - 36, (uint64_t)v47, 9uLL);
  if (a5)
  {
    if (v29)
    {
      int v30 = *a5;
      __int128 v45 = 0u;
      __int128 v46 = 0u;
      int v42 = v30;
      int v43 = 500;
      int v44 = "err == FBUF_SUCCESS";
      GTError_addError(a5, (uint64_t)&v42);
LABEL_34:
      uint64_t v27 = 0LL;
      char v24 = 0;
LABEL_65:
      char v26 = 2;
LABEL_66:
      LOWORD(v17) = v40;
      goto LABEL_22;
    }

    else {
      uint64_t v31 = asc_317218[(v18 - 62)];
    }
    if (*(void *)v48 != v31)
    {
      int v32 = *a5;
      __int128 v45 = 0u;
      __int128 v46 = 0u;
      int v42 = v32;
      int v43 = 500;
      int v44 = "pixelFormat == DataTypeToPixelFormat(result.elementType)";
      GTError_addError(a5, (uint64_t)&v42);
    }
  }

  else if (v29)
  {
    goto LABEL_34;
  }

  char v24 = *v49;
  int v20 = v39;
  LOWORD(v17) = v40;
  int v21 = v38;
LABEL_43:
  switch(v18)
  {
    case 60:
      if (v22)
      {
        uint64_t v27 = 0LL;
      }

      else
      {
        uint64_t v27 = a3[15];
        a3[15] = v27 + 24;
        __int16 v33 = v17;
        unsigned int v8 = DecodeDYMTLPointerType(v27, (unsigned int *)((char *)v8 + *v8), (uint64_t)a3, a4, a5);
        LOWORD(v17) = v33;
      }

      char v18 = 60;
      break;
    case 2:
      if (!a5)
      {
        if (v21)
        {
          uint64_t v27 = a3[18];
          a3[18] = v27 + 32;
          __int16 v34 = v17;
          unsigned int v8 = (unsigned int *)DecodeDYMTLArrayType(v27, (char *)v8 + *v8, a3, a4, 0LL);
          LOWORD(v17) = v34;
        }

        else
        {
          uint64_t v27 = 0LL;
        }

        char v26 = 2;
        char v18 = 2;
        goto LABEL_22;
      }

      LOWORD(v40) = v17;
      if (v21)
      {
        uint64_t v27 = a3[18];
        a3[18] = v27 + 32;
        unsigned int v8 = (unsigned int *)DecodeDYMTLArrayType(v27, (char *)v8 + *v8, a3, a4, a5);
      }

      else
      {
        int v36 = *a5;
        __int128 v45 = 0u;
        __int128 v46 = 0u;
        int v42 = v36;
        int v43 = 500;
        int v44 = "isArrayType";
        GTError_addError(a5, (uint64_t)&v42);
        uint64_t v27 = 0LL;
      }

      char v26 = 2;
      char v18 = 2;
      goto LABEL_66;
    case 1:
      if (a5)
      {
        LOWORD(v40) = v17;
        if (v20)
        {
          uint64_t v27 = a3[16];
          a3[16] = v27 + 24;
          unsigned int v8 = (unsigned int *)DecodeDYMTLStructType(v27, (char *)v8 + *v8, a3, a4, a5);
        }

        else
        {
          int v37 = *a5;
          __int128 v45 = 0u;
          __int128 v46 = 0u;
          int v42 = v37;
          int v43 = 500;
          int v44 = "isStructType";
          GTError_addError(a5, (uint64_t)&v42);
          uint64_t v27 = 0LL;
        }

        char v18 = 1;
        goto LABEL_65;
      }

      if (v20)
      {
        uint64_t v27 = a3[16];
        a3[16] = v27 + 24;
        __int16 v35 = v17;
        unsigned int v8 = (unsigned int *)DecodeDYMTLStructType(v27, (char *)v8 + *v8, a3, a4, 0LL);
        LOWORD(v17) = v35;
      }

      else
      {
        uint64_t v27 = 0LL;
      }

      char v18 = 1;
      break;
    default:
      uint64_t v27 = 0LL;
      break;
  }

  char v26 = 2;
LABEL_22:
  if ((_DWORD)a4)
  {
    *(_BYTE *)a1 = v26;
    *(_DWORD *)(a1 + 1) = 0;
    *(_DWORD *)(a1 + 4) = 0;
    *(void *)(a1 + 8) = v27;
    *(_DWORD *)(a1 + 16) = v19;
    *(_WORD *)(a1 + 20) = v17;
    *(_WORD *)(a1 + 22) = v23;
    *(_BYTE *)(a1 + 24) = v18;
    *(_BYTE *)(a1 + 25) = v24;
    *(_DWORD *)(a1 + 26) = 0;
    *(_WORD *)(a1 + 30) = 0;
  }

  return v8;
}

unsigned int *DecodeDYMTLPointerType(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, int *a5)
{
  unsigned int v8 = a2;
  unsigned int v10 = a2[1];
  if (a5)
  {
    if (v10 != -12272)
    {
      int v11 = *a5;
      __int128 v40 = 0u;
      __int128 v41 = 0u;
      int v37 = v11;
      int v38 = 500;
      int v12 = "it->fenum == kDYFEInternalData";
LABEL_20:
      int v39 = v12;
      GTError_addError(a5, (uint64_t)&v37);
      goto LABEL_21;
    }
  }

  else if (v10 != -12272)
  {
    goto LABEL_21;
  }

  uint64_t v36 = 0LL;
  int v13 = FBDecoder_DecodeArguments((unsigned int *)&v36, (uint64_t)(a2 + 9), *a2 - 36, (uint64_t)v42, 8uLL);
  if (a5)
  {
    if (v13)
    {
      int v14 = *a5;
      __int128 v40 = 0u;
      __int128 v41 = 0u;
      int v37 = v14;
      int v38 = 500;
      int v12 = "err == FBUF_SUCCESS";
      goto LABEL_20;
    }

    if (HIDWORD(v36) <= 6)
    {
      int v26 = *a5;
      __int128 v40 = 0u;
      __int128 v41 = 0u;
      int v37 = v26;
      int v38 = 500;
      int v12 = "7 <= parser.ntokens";
      goto LABEL_20;
    }

uint64_t DecodeDYMTLComputePipelineReflection(unsigned int *a1, void *a2, uint64_t a3, int *a4)
{
  int v7 = a1;
  __int128 v86 = 0u;
  __int128 v87 = 0u;
  int v88 = 0;
  __int128 v83 = 0u;
  __int128 v84 = 0u;
  memset(v85, 0, 26);
  unsigned int v8 = a1[8];
  if (a4)
  {
    if ((v8 & 0x1000) == 0)
    {
      int v9 = *a4;
      __int128 v92 = 0uLL;
      __int128 __s = 0uLL;
      int v89 = v9;
      int v90 = 500;
      uint64_t v91 = "header->flags & 0x00001000";
      GTError_addError(a4, (uint64_t)&v89);
LABEL_5:
      uint64_t v75 = 0LL;
      unsigned __int16 v10 = 0;
      uint64_t v11 = a2[14];
      goto LABEL_35;
    }
  }

  else if ((v8 & 0x1000) == 0)
  {
    goto LABEL_5;
  }

  unsigned __int16 v12 = 0;
  unsigned __int16 v13 = 0;
  unsigned __int16 v10 = 0;
  while (1)
  {
    int v14 = (unsigned int *)((char *)a1 + *a1);
    unsigned int v15 = v14[1];
    if (a4)
    {
      if (v15 != -12272)
      {
        int v19 = *a4;
        __int128 v92 = 0u;
        __int128 __s = 0u;
        int v89 = v19;
        int v90 = 500;
        uint64_t v91 = "header->fenum == kDYFEInternalData";
        uint64_t v20 = &v89;
        goto LABEL_30;
      }
    }

    else if (v15 != -12272)
    {
      goto LABEL_31;
    }

    uint64_t v82 = 0LL;
    int v16 = FBDecoder_DecodeArguments((unsigned int *)&v82, (uint64_t)(v14 + 9), *v14 - 36, (uint64_t)&v89, 0xDuLL) & 0xFFFFFFFD;
    if (!a4)
    {
      if (v16) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = HIDWORD(v82) > 1;
      }
      if (!v17) {
        goto LABEL_31;
      }
      goto LABEL_20;
    }

    if (v16) {
      break;
    }
    if (HIDWORD(v82) <= 1)
    {
      int v22 = *a4;
      __int128 v80 = 0u;
      __int128 v81 = 0u;
      int v77 = v22;
      int v78 = 500;
      uint64_t v23 = "2 <= parser.ntokens";
      goto LABEL_29;
    }

uint64_t DecodeDYMTLRenderPipelineReflection(unsigned int *a1, void *a2, unsigned int a3, int *a4)
{
  int v5 = a2;
  uint64_t v6 = a1;
  __int128 v104 = 0uLL;
  __int128 v111 = 0u;
  __int128 v112 = 0u;
  __int128 v113 = 0u;
  __int128 v114 = 0u;
  memset(v115, 0, sizeof(v115));
  memset(__src, 0, sizeof(__src));
  unsigned int v7 = a1[8];
  if (a4)
  {
    if ((v7 & 0x1000) == 0)
    {
      int v8 = *a4;
      __int128 v119 = 0uLL;
      __int128 __s = 0uLL;
      int v116 = v8;
      int v117 = 500;
      unint64_t v118 = "header->flags & 0x00001000";
      GTError_addError(a4, (uint64_t)&v116);
LABEL_5:
      uint64_t v91 = 0LL;
      LOWORD(v9) = 0;
      unsigned __int16 v10 = 0;
      unsigned __int16 v11 = 0;
      unsigned __int16 v12 = 0;
      unsigned __int16 v13 = 0;
      unsigned __int16 v14 = 0;
      unsigned __int16 v15 = 0;
      uint64_t v16 = v5[14];
      goto LABEL_48;
    }
  }

  else if ((v7 & 0x1000) == 0)
  {
    goto LABEL_5;
  }

  unsigned __int16 v95 = 0;
  int v17 = 0;
  int v9 = 0;
  unsigned __int16 v97 = 0;
  unsigned __int16 v99 = 0;
  unsigned __int16 v11 = 0;
  unsigned __int16 v18 = 0;
  unsigned __int16 v13 = 0;
  unsigned __int16 v15 = 0;
  while (1)
  {
    int v19 = (unsigned int *)((char *)a1 + *a1);
    unsigned int v20 = v19[1];
    if (a4)
    {
      if (v20 != -12272)
      {
        int v26 = *a4;
        __int128 v119 = 0u;
        __int128 __s = 0u;
        int v116 = v26;
        int v117 = 500;
        unint64_t v118 = "header->fenum == kDYFEInternalData";
        unsigned int v27 = &v116;
        goto LABEL_43;
      }
    }

    else if (v20 != -12272)
    {
      goto LABEL_44;
    }

    uint64_t v110 = 0LL;
    int v21 = FBDecoder_DecodeArguments((unsigned int *)&v110, (uint64_t)(v19 + 9), *v19 - 36, (uint64_t)&v116, 0xDuLL);
    if (!a4)
    {
      if (v21) {
        BOOL v22 = 0;
      }
      else {
        BOOL v22 = HIDWORD(v110) > 1;
      }
      if (!v22) {
        goto LABEL_44;
      }
      goto LABEL_20;
    }

    if (v21) {
      break;
    }
    if (HIDWORD(v110) <= 1)
    {
      int v29 = *a4;
      __int128 v108 = 0u;
      __int128 v109 = 0u;
      int v105 = v29;
      int v106 = 500;
      uint64_t v30 = "2 <= parser.ntokens";
      goto LABEL_42;
    }

LABEL_134:
  uint64_t result = v5[12];
  v5[12] = result + 496;
  return result;
}

void DecodeDYMTLFunctionInfo(unsigned int *a1, void *a2, int a3, int *a4)
{
  unsigned int v4 = a1[8];
  if ((v4 & 0x1000) == 0) {
    return;
  }
  int v8 = a1;
  if (a4)
  {
    if ((v4 & 0x2000) != 0)
    {
      int v9 = *a4;
      *(_OWORD *)__int128 __s = 0u;
      *(_OWORD *)BOOL v55 = 0u;
      int v51 = v9;
      int v52 = 500;
      int v53 = "!(header->flags & FBUF_ASSOCIATION_CHAIN_END)";
      GTError_addError(a4, (uint64_t)&v51);
      goto LABEL_62;
    }

    goto LABEL_6;
  }

  if ((v4 & 0x2000) == 0)
  {
LABEL_6:
    uint64_t v47 = 0LL;
    uint64_t v48 = 0LL;
    char v10 = 0;
    char v11 = 0;
    uint64_t v45 = 0LL;
    uint64_t v46 = 0LL;
    unsigned __int16 v12 = 0LL;
    unsigned __int16 v49 = 0LL;
    __dst = 0LL;
    while (1)
    {
      int v8 = (unsigned int *)((char *)v8 + *v8);
      unsigned int v13 = v8[1];
      if (a4)
      {
        if (v13 != -12272)
        {
          int v44 = *a4;
          *(_OWORD *)__int128 __s = 0u;
          *(_OWORD *)BOOL v55 = 0u;
          int v51 = v44;
          int v52 = 500;
          int v53 = "header->fenum == kDYFEInternalData";
          GTError_addError(a4, (uint64_t)&v51);
          if (!a3) {
            goto LABEL_65;
          }
LABEL_64:
          uint64_t v43 = a2[3];
          *(void *)uint64_t v43 = v49;
          *(void *)(v43 + 8) = __dst;
          *(void *)(v43 + 16) = v12;
          *(void *)(v43 + 24) = v45;
          *(void *)(v43 + 32) = v46;
          *(_WORD *)(v43 + 40) = WORD2(v47);
          *(_WORD *)(v43 + 42) = v47;
          *(_WORD *)(v43 + 44) = v48;
          *(_BYTE *)(v43 + 46) = v11;
          *(_BYTE *)(v43 + 4memset(v56, 0, 7) = v10;
          *(_BYTE *)(v43 + 48) = BYTE4(v48);
          *(_DWORD *)(v43 + 49) = v56[0];
          *(_DWORD *)(v43 + 52) = *(_DWORD *)((char *)v56 + 3);
          goto LABEL_65;
        }
      }

      else if (v13 != -12272)
      {
        goto LABEL_63;
      }

      DYTraceDecode_InternalData((uint64_t)&v51, (uint64_t)v8, *v8 - 36, 0LL);
      switch((_DWORD)v53)
      {
        case 'n':
          LOWORD(v48) = __s[1];
          BYTE4(v48) = __s[0];
          break;
        case 'x':
          if (!v10) {
            uint64_t v46 = a2[21];
          }
          int v23 = v55[0];
          if (v55[0])
          {
            size_t v24 = strlen(v55[0]);
            int v25 = (char *)a2[23];
            int v26 = v25;
            size_t v27 = v24 + 1;
            if (v24 != -1LL) {
              goto LABEL_45;
            }
          }

          else
          {
            size_t v27 = 0LL;
            int v25 = (char *)a2[23];
          }

          int v26 = 0LL;
LABEL_45:
          a2[23] = &v25[v27];
          if (a3)
          {
            memcpy(v26, v23, v27);
            uint64_t v37 = a2[21];
            int v38 = (int)__s[0];
            char v39 = (char)__s[1];
            char v40 = (char)v55[1];
            *(void *)uint64_t v37 = v26;
            *(_DWORD *)(v37 + 8) = v38;
            *(_BYTE *)(v37 + 12) = v39;
            *(_BYTE *)(v37 + 13) = v40;
            *(_WORD *)(v37 + 14) = 0;
          }

          ++v10;
          a2[21] += 16LL;
          break;
        case 'u':
          unsigned __int16 v14 = __s[0];
          if (__s[0])
          {
            size_t v15 = strlen(__s[0]);
            uint64_t v16 = (char *)a2[23];
            unsigned __int16 v49 = v16;
            size_t v17 = v15 + 1;
            if (v15 != -1LL)
            {
LABEL_36:
              a2[23] = &v16[v17];
              if (a3)
              {
                uint64_t v32 = v49;
LABEL_59:
                memcpy(v32, v14, v17);
                break;
              }

              break;
            }
          }

          else
          {
            size_t v17 = 0LL;
            uint64_t v16 = (char *)a2[23];
          }

          unsigned __int16 v49 = 0LL;
          goto LABEL_36;
      }

void DecodeDYMTLDynamicLibraryInfo(unsigned int *a1, void *a2, int a3, int *a4)
{
  __int16 v38 = 0;
  int v37 = 0;
  unsigned int v4 = a1[8];
  if ((v4 & 0x1000) == 0) {
    return;
  }
  int v8 = a1;
  if (a4)
  {
    if ((v4 & 0x2000) != 0)
    {
      int v9 = *a4;
      *(_OWORD *)__int128 __s = 0u;
      __int128 v36 = 0u;
      int v32 = v9;
      int v33 = 500;
      int v34 = "!(header->flags & FBUF_ASSOCIATION_CHAIN_END)";
      GTError_addError(a4, (uint64_t)&v32);
      goto LABEL_43;
    }

    goto LABEL_6;
  }

  if ((v4 & 0x2000) == 0)
  {
LABEL_6:
    __int16 v10 = 0;
    uint64_t v31 = 0LL;
    char v11 = 0LL;
    unsigned __int16 v12 = 0LL;
    while (1)
    {
      int v8 = (unsigned int *)((char *)v8 + *v8);
      unsigned int v13 = v8[1];
      if (a4)
      {
        if (v13 != -12272)
        {
          int v30 = *a4;
          *(_OWORD *)__int128 __s = 0u;
          __int128 v36 = 0u;
          int v32 = v30;
          int v33 = 500;
          int v34 = "header->fenum == kDYFEInternalData";
          GTError_addError(a4, (uint64_t)&v32);
          if (!a3) {
            goto LABEL_46;
          }
LABEL_45:
          uint64_t v29 = a2[2];
          *(void *)uint64_t v29 = v12;
          *(void *)(v29 + 8) = v11;
          *(void *)(v29 + 16) = v31;
          *(_WORD *)(v29 + 24) = v10;
          *(_DWORD *)(v29 + 26) = v37;
          *(_WORD *)(v29 + 30) = v38;
          goto LABEL_46;
        }

        unint64_t v14 = *v8 - 36;
        uint64_t v15 = (uint64_t)v8;
        uint64_t v16 = a4;
      }

      else
      {
        if (v13 != -12272) {
          goto LABEL_44;
        }
        unint64_t v14 = *v8 - 36;
        uint64_t v15 = (uint64_t)v8;
        uint64_t v16 = 0LL;
      }

      DYTraceDecode_InternalData((uint64_t)&v32, v15, v14, v16);
      if ((_DWORD)v34 == 129)
      {
        if (!v10) {
          uint64_t v31 = a2[22];
        }
        int v21 = __s[0];
        if (__s[0])
        {
          size_t v22 = strlen(__s[0]);
          int v23 = (char *)a2[23];
          size_t v24 = v23;
          size_t v25 = v22 + 1;
          if (v22 != -1LL) {
            goto LABEL_33;
          }
        }

        else
        {
          size_t v25 = 0LL;
          int v23 = (char *)a2[23];
        }

        size_t v24 = 0LL;
LABEL_33:
        a2[23] = &v23[v25];
        if (a3)
        {
          memcpy(v24, v21, v25);
          *(void *)a2[22] = v24;
        }

        ++v10;
        a2[22] += 8LL;
        goto LABEL_41;
      }

      if ((_DWORD)v34 != 128)
      {
        if ((_DWORD)v34 != 127) {
          goto LABEL_41;
        }
        size_t v17 = __s[0];
        if (__s[0])
        {
          size_t v18 = strlen(__s[0]);
          size_t v19 = (char *)a2[23];
          char v11 = v19;
          size_t v20 = v18 + 1;
          if (v18 != -1LL)
          {
LABEL_29:
            a2[23] = &v19[v20];
            if (a3)
            {
              int v28 = v11;
LABEL_40:
              memcpy(v28, v17, v20);
              goto LABEL_41;
            }

            goto LABEL_41;
          }
        }

        else
        {
          size_t v20 = 0LL;
          size_t v19 = (char *)a2[23];
        }

        char v11 = 0LL;
        goto LABEL_29;
      }

      size_t v17 = __s[0];
      if (!__s[0]) {
        break;
      }
      size_t v26 = strlen(__s[0]);
      size_t v27 = (char *)a2[23];
      unsigned __int16 v12 = v27;
      size_t v20 = v26 + 1;
      if (v26 == -1LL) {
        goto LABEL_37;
      }
LABEL_38:
      a2[23] = &v27[v20];
      if (a3)
      {
        int v28 = v12;
        goto LABEL_40;
      }

uint64_t DecodeDYMTLLibraryInfo(unsigned int *a1, uint64_t a2, int a3, int *a4)
{
  __int128 v29 = 0uLL;
  unsigned int v4 = a1[8];
  if ((v4 & 0x1000) == 0) {
    return 0LL;
  }
  int v9 = a1;
  if (a4)
  {
    if ((v4 & 0x2000) != 0)
    {
      int v10 = *a4;
      *(_OWORD *)__int128 __s = 0u;
      __int128 v28 = 0u;
      int v24 = v10;
      int v25 = 500;
      size_t v26 = "!(header->flags & FBUF_ASSOCIATION_CHAIN_END)";
      GTError_addError(a4, (uint64_t)&v24);
      goto LABEL_27;
    }

    goto LABEL_7;
  }

  if ((v4 & 0x2000) == 0)
  {
LABEL_7:
    uint64_t v5 = 0LL;
    char v11 = 0LL;
    while (1)
    {
      int v9 = (unsigned int *)((char *)v9 + *v9);
      unsigned int v12 = v9[1];
      if (a4)
      {
        if (v12 != -12272)
        {
          int v23 = *a4;
          *(_OWORD *)__int128 __s = 0u;
          __int128 v28 = 0u;
          int v24 = v23;
          int v25 = 500;
          size_t v26 = "header->fenum == kDYFEInternalData";
          GTError_addError(a4, (uint64_t)&v24);
          if (!a3) {
            goto LABEL_30;
          }
LABEL_29:
          uint64_t v21 = *(void *)(a2 + 48);
          *(void *)uint64_t v21 = v11;
          *(_OWORD *)(v21 + 8) = v29;
          goto LABEL_30;
        }

        unint64_t v13 = *v9 - 36;
        uint64_t v14 = (uint64_t)v9;
        uint64_t v15 = a4;
      }

      else
      {
        if (v12 != -12272) {
          goto LABEL_28;
        }
        unint64_t v13 = *v9 - 36;
        uint64_t v14 = (uint64_t)v9;
        uint64_t v15 = 0LL;
      }

      DYTraceDecode_InternalData((uint64_t)&v24, v14, v13, v15);
      uint64_t v16 = v26;
      if ((_DWORD)v26 == 127) {
        break;
      }
      if ((_DWORD)v26 == 108)
      {
        size_t v17 = __s[1];
        if (__s[1]) {
          goto LABEL_17;
        }
LABEL_20:
        size_t v20 = 0LL;
        size_t v17 = 0LL;
        size_t v19 = *(char **)(a2 + 184);
        goto LABEL_21;
      }

void DecodeDYMTLPipelineLibraryInfo(unsigned int *a1, void *a2, int a3, int *a4)
{
  __int16 v56 = 0;
  int v55 = 0;
  unsigned int v4 = a1[8];
  if ((v4 & 0x1000) == 0) {
    return;
  }
  int v8 = a1;
  if (a4)
  {
    if ((v4 & 0x2000) != 0)
    {
      unsigned int v9 = *a4;
      *(_OWORD *)__int128 __s = 0u;
      __int128 v54 = 0u;
      newpool = (apr_pool_t *)(v9 | 0x1F400000000LL);
      int v52 = "!(header->flags & FBUF_ASSOCIATION_CHAIN_END)";
      GTError_addError(a4, (uint64_t)&newpool);
LABEL_41:
      unsigned __int16 v10 = 0;
      char v11 = 0LL;
      uint64_t v50 = 0LL;
      unsigned int v12 = 0LL;
LABEL_42:
      if (a3) {
        goto LABEL_43;
      }
      goto LABEL_55;
    }
  }

  else if ((v4 & 0x2000) != 0)
  {
    goto LABEL_41;
  }

  unsigned __int16 v10 = 0;
  char v11 = 0LL;
  uint64_t v50 = 0LL;
  unsigned int v12 = 0LL;
  while (1)
  {
    int v8 = (unsigned int *)((char *)v8 + *v8);
    unsigned int v13 = v8[1];
    if (a4) {
      break;
    }
    if (v13 != -12272) {
      goto LABEL_42;
    }
    unint64_t v14 = *v8 - 36;
    uint64_t v15 = (uint64_t)v8;
    uint64_t v16 = 0LL;
LABEL_13:
    DYTraceDecode_InternalData((uint64_t)&newpool, v15, v14, v16);
    if ((_DWORD)v52 == 135)
    {
      if (!v10)
      {
        uint64_t v50 = (void *)a2[22];
        char v11 = v50 + 1;
      }

      uint64_t v21 = __s[0];
      if (__s[0])
      {
        size_t v22 = strlen(__s[0]);
        int v23 = (char *)a2[23];
        int v24 = v23;
        size_t v25 = v22 + 1;
        if (v22 != -1LL)
        {
LABEL_29:
          a2[23] = &v23[v25];
          if (a3) {
            memcpy(v24, v21, v25);
          }
          size_t v26 = __s[1];
          if (__s[1])
          {
            size_t v27 = strlen(__s[1]);
            __int128 v28 = (char *)a2[23];
            __int128 v29 = v28;
            size_t v30 = v27 + 1;
            if (v27 != -1LL) {
              goto LABEL_36;
            }
          }

          else
          {
            size_t v30 = 0LL;
            __int128 v28 = (char *)a2[23];
          }

          __int128 v29 = 0LL;
LABEL_36:
          a2[23] = &v28[v30];
          if (a3)
          {
            memcpy(v29, v26, v30);
            *(void *)a2[22] = v24;
            *(void *)(a2[22] + 8LL) = v29;
          }

          ++v10;
          a2[22] += 16LL;
          goto LABEL_39;
        }
      }

      else
      {
        size_t v25 = 0LL;
        int v23 = (char *)a2[23];
      }

      int v24 = 0LL;
      goto LABEL_29;
    }

    if ((_DWORD)v52 == 132)
    {
      size_t v17 = __s[0];
      if (__s[0])
      {
        size_t v18 = strlen(__s[0]);
        size_t v19 = (char *)a2[23];
        unsigned int v12 = v19;
        size_t v20 = v18 + 1;
        if (v18 != -1LL)
        {
LABEL_25:
          a2[23] = &v19[v20];
          if (a3) {
            memcpy(v12, v17, v20);
          }
          goto LABEL_39;
        }
      }

      else
      {
        size_t v20 = 0LL;
        size_t v19 = (char *)a2[23];
      }

      unsigned int v12 = 0LL;
      goto LABEL_25;
    }

void *DecodeDYMTLRenderPassDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  int v8 = a4;
  uint64_t result = a5;
  unsigned int v10 = *(_DWORD *)a1;
  char v11 = (uint64_t *)(a1 + 16);
  __dst[99] = *(void *)(a1 + 8);
  uint64_t v108 = (uint64_t)result;
  unsigned int v88 = v10;
  int v89 = a4;
  while (1)
  {
    unsigned int v12 = v11;
    uint64_t v13 = *v11;
    uint64_t v14 = v11[1];
    char v15 = *((_BYTE *)v11 + 16);
    __int16 v16 = *((unsigned __int8 *)v11 + 24);
    __int16 v17 = *((unsigned __int8 *)v11 + 32);
    uint64_t v18 = v11[5];
    char v19 = *((_BYTE *)v11 + 48);
    __int16 v20 = *((_WORD *)v11 + 28);
    if (*v11 == -1) {
      break;
    }
    if (v10 <= 0x12)
    {
      char v21 = 0;
      char v24 = 0;
      __int128 v22 = *(_OWORD *)(v11 + 11);
      __int128 v23 = *(_OWORD *)(v11 + 13);
      v11 += 15;
      if (v8)
      {
LABEL_10:
        __int16 v25 = *((_WORD *)v12 + 32);
        char v26 = *((_BYTE *)v12 + 72);
        char v27 = *((_BYTE *)v12 + 80);
        if (result)
        {
          char v90 = *((_BYTE *)v12 + 72);
          char v91 = *((_BYTE *)v12 + 80);
          char v92 = v24;
          char v96 = v21;
          __int128 v100 = v23;
          __int128 v104 = v22;
          AliasStream2 = (uint64_t *)GetAliasStream2((uint64_t)result, v14);
          if (AliasStream2) {
            uint64_t v14 = *AliasStream2;
          }
          else {
            uint64_t v14 = 0LL;
          }
          __int128 v29 = (uint64_t *)GetAliasStream2(v108, v18);
          if (v29) {
            uint64_t v18 = *v29;
          }
          else {
            uint64_t v18 = 0LL;
          }
          uint64_t result = (void *)v108;
          unsigned int v10 = v88;
          int v8 = v89;
          __int128 v23 = v100;
          __int128 v22 = v104;
          char v24 = v92;
          char v21 = v96;
          char v26 = v90;
          char v27 = v91;
        }

        size_t v30 = &__dst[8 * v13];
        *size_t v30 = v18;
        v30[1] = v14;
        *((_WORD *)v30 + 8) = v17;
        *((_WORD *)v30 + 9) = v25;
        *((_WORD *)v30 + 10) = v20;
        *((_WORD *)v30 + 11) = v16;
        *((_BYTE *)v30 + 24) = v15;
        *((_BYTE *)v30 + 25) = v26;
        *((_BYTE *)v30 + 26) = v19;
        *((_BYTE *)v30 + 2memset(v56, 0, 7) = v27;
        *((_BYTE *)v30 + 28) = v21;
        *((_BYTE *)v30 + 29) = v24;
        *((_WORD *)v30 + 15) = 0;
        *((_OWORD *)v30 + 2) = v22;
        *((_OWORD *)v30 + 3) = v23;
      }
    }

    else
    {
      char v21 = *((_BYTE *)v11 + 88);
      __int128 v22 = *((_OWORD *)v11 + 6);
      __int128 v23 = *((_OWORD *)v11 + 7);
      if (v10 < 0x27)
      {
        char v24 = 0;
        v11 += 16;
        if (v8) {
          goto LABEL_10;
        }
      }

      else
      {
        v11 += 17;
        char v24 = *((_BYTE *)v12 + 128);
        if (v8) {
          goto LABEL_10;
        }
      }
    }
  }

  if (v10 >= 0x13)
  {
    char v31 = *((_BYTE *)v11 + 88);
    uint64_t v32 = v11[12];
    if (v10 < 0x27)
    {
      char v34 = 0;
      int v33 = v11 + 16;
    }

    else
    {
      int v33 = v11 + 17;
      char v34 = *((_BYTE *)v11 + 128);
    }

    goto LABEL_26;
  }

  char v34 = 0;
  char v31 = 0;
  char v35 = 0;
  uint64_t v32 = v12[11];
  int v33 = v12 + 15;
  if (v10 >= 5)
  {
LABEL_26:
    uint64_t v36 = *v33++;
    char v37 = v36;
    else {
      char v35 = v37;
    }
    if (v8) {
      goto LABEL_30;
    }
  }

  else
  {
    if (!v8) {
      goto LABEL_39;
    }
LABEL_30:
    __int16 v38 = *((_WORD *)v12 + 32);
    char v39 = *((_BYTE *)v12 + 72);
    char v40 = *((_BYTE *)v12 + 80);
    if (result)
    {
      char v93 = *((_BYTE *)v12 + 80);
      char v97 = v34;
      char v101 = v31;
      int v105 = v33;
      size_t v41 = (uint64_t *)GetAliasStream2((uint64_t)result, v14);
      if (v41) {
        uint64_t v14 = *v41;
      }
      else {
        uint64_t v14 = 0LL;
      }
      uint64_t v42 = (uint64_t *)GetAliasStream2(v108, v18);
      if (v42) {
        uint64_t v18 = *v42;
      }
      else {
        uint64_t v18 = 0LL;
      }
      uint64_t result = (void *)v108;
      unsigned int v10 = v88;
      int v8 = v89;
      int v33 = v105;
      char v34 = v97;
      char v31 = v101;
      char v40 = v93;
    }

    __dst[84] = v18;
    __dst[85] = v14;
    LOWORD(__dst[86]) = v17;
    WORD1(__dst[86]) = v38;
    WORD2(__dst[86]) = v20;
    HIWORD(__dst[86]) = v16;
    LOBYTE(__dst[87]) = v15;
    BYTE1(__dst[87]) = v39;
    BYTE2(__dst[87]) = v19;
    BYTE3(__dst[87]) = v40;
    BYTE4(__dst[87]) = v31;
    BYTE5(__dst[87]) = v34;
    HIWORD(__dst[87]) = 0;
    __dst[88] = v32;
    LOBYTE(__dst[89]) = v35;
    *(_DWORD *)((char *)&__dst[89] + 1) = 0;
    HIDWORD(__dst[89]) = 0;
  }

size_t DecodeDYMTLRenderPipelineDescriptor(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  v102[1] = a2;
  memcpy(v101, &GTMTLRenderPipelineDescriptorDefaults, sizeof(v101));
  unsigned int v9 = *(_DWORD *)a1;
  v101[162] = *(void *)(a1 + 8);
  v101[147] = *(void *)(a1 + 16);
  bzero(__src, 0x2E8uLL);
  if (v9 < 0x1A)
  {
    char v11 = (uint64_t *)(a1 + 24);
    uint64_t v10 = 31LL;
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 24);
    char v11 = (uint64_t *)(a1 + 32);
    uint64_t v10 = v10;
  }

  unsigned int v12 = &__src[11];
  do
  {
    if (a4)
    {
      uint64_t v13 = *v11;
      uint64_t v14 = v11[1];
      uint64_t v15 = v11[2];
      if (*v11 == 0xFFFFFFFFLL) {
        uint64_t v13 = -1LL;
      }
      *(void *)(v12 - 11) = v13;
      *(_WORD *)(v12 - 3) = v14;
      *(v12 - 1) = v15;
      *(_DWORD *)unsigned int v12 = 0;
      v12[4] = 0;
    }

    v11 += 3;
    v12 += 16;
    --v10;
  }

  while (v10);
  v102[0] = v11;
  if (v9 <= 0x19)
  {
    uint64_t v16 = 31LL;
    goto LABEL_15;
  }

void **MakeDYMTLRenderPipelineColorAttachmentDescriptor(void **result, uint64_t a2, int a3)
{
  int v3 = *result;
  uint64_t v4 = *(*result)++;
  uint64_t v5 = v3[1];
  *size_t result = v3 + 2;
  uint64_t v6 = v3[2];
  *size_t result = v3 + 3;
  uint64_t v7 = v3[3];
  *size_t result = v3 + 4;
  uint64_t v8 = v3[4];
  *size_t result = v3 + 5;
  uint64_t v9 = v3[5];
  *size_t result = v3 + 6;
  uint64_t v10 = v3[6];
  *size_t result = v3 + 7;
  uint64_t v11 = v3[7];
  *size_t result = v3 + 8;
  uint64_t v12 = v3[8];
  *size_t result = v3 + 9;
  if (a3)
  {
    *(_WORD *)a2 = v12;
    *(_BYTE *)(a2 + 2) = v10;
    *(_BYTE *)(a2 + 3) = v4;
    *(_BYTE *)(a2 + 4) = v9;
    *(_BYTE *)(a2 + 5) = v6;
    *(_BYTE *)(a2 + 6) = v7;
    *(_BYTE *)(a2 + memset(v56, 0, 7) = v8;
    *(_BYTE *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 9) = v11;
    *(_DWORD *)(a2 + 10) = 0;
    *(_WORD *)(a2 + 14) = 0;
  }

  return result;
}

size_t MakeDYMTLLinkedFunctions(size_t result, void *a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v9 = (const char **)result;
  uint64_t v10 = (const char *)(*(void *)result + 8LL);
  uint64_t v11 = **(void **)result;
  *(void *)size_t result = v10;
  if (v11)
  {
    uint64_t v46 = a3[50];
    uint64_t v12 = v11;
    do
    {
      uint64_t v13 = *(uint64_t **)*v9;
      *v9 += 8;
      if ((a4 & 1) != 0)
      {
        if (a5)
        {
          size_t result = GetAliasStream2(a5, (uint64_t)v13);
          if (result) {
            uint64_t v13 = *(uint64_t **)result;
          }
          else {
            uint64_t v13 = 0LL;
          }
        }

        uint64_t v14 = (uint64_t **)a3[50];
        *uint64_t v14 = v13;
      }

      else
      {
        uint64_t v14 = (uint64_t **)a3[50];
      }

      a3[50] = v14 + 1;
      --v12;
    }

    while (v12);
    uint64_t v10 = *v9;
  }

  else
  {
    uint64_t v46 = 0LL;
  }

  uint64_t v17 = *(void *)v10;
  uint64_t v15 = v10 + 8;
  uint64_t v16 = v17;
  unsigned int *v9 = v15;
  uint64_t v49 = v17;
  if (v17)
  {
    uint64_t v45 = a3[50];
    uint64_t v18 = v16;
    do
    {
      uint64_t v19 = *(uint64_t **)*v9;
      *v9 += 8;
      if ((a4 & 1) != 0)
      {
        if (a5)
        {
          size_t result = GetAliasStream2(a5, (uint64_t)v19);
          if (result) {
            uint64_t v19 = *(uint64_t **)result;
          }
          else {
            uint64_t v19 = 0LL;
          }
        }

        uint64_t v20 = (uint64_t **)a3[50];
        *uint64_t v20 = v19;
      }

      else
      {
        uint64_t v20 = (uint64_t **)a3[50];
      }

      a3[50] = v20 + 1;
      --v18;
    }

    while (v18);
    uint64_t v15 = *v9;
  }

  else
  {
    uint64_t v45 = 0LL;
  }

  uint64_t v22 = v15 + 8;
  uint64_t v21 = *(void *)v15;
  unsigned int *v9 = v15 + 8;
  uint64_t v47 = v11;
  uint64_t v48 = a2;
  if (v21)
  {
    uint64_t v23 = *((void *)v15 + 1);
    uint64_t v22 = v15 + 16;
    unsigned int *v9 = v15 + 16;
    if (v23)
    {
      uint64_t v24 = 0LL;
      uint64_t v50 = a3[42];
      size_t v51 = v15 + 16;
      unsigned int *v9 = &v22[8 * v23];
      a3[42] += 24 * v23;
      while (1)
      {
        __int16 v25 = *v9;
        size_t result = strlen(*v9);
        *v9 += (result & 0xFFFFFFFFFFFFFFF8LL) + 8;
        if (*v25) {
          int v26 = v25;
        }
        else {
          int v26 = 0LL;
        }
        if (*v25)
        {
          size_t result = strlen(v26);
          uint64_t v27 = a3[52];
          size_t v28 = result + 1;
          if (result != -1LL)
          {
            size_t v29 = (void *)a3[52];
            goto LABEL_36;
          }
        }

        else
        {
          uint64_t v27 = a3[52];
        }

        size_t v28 = 0LL;
        size_t v29 = 0LL;
LABEL_36:
        a3[52] = v27 + v28;
        if (a4) {
          size_t result = (size_t)memcpy(v29, v26, v28);
        }
        uint64_t v30 = *(void *)&v22[8 * v24];
        if ((_DWORD)v30)
        {
          uint64_t v31 = v23;
          uint64_t v32 = a3[50];
          int v33 = v30;
          do
          {
            char v34 = *(uint64_t **)*v9;
            *v9 += 8;
            if ((a4 & 1) != 0)
            {
              if (a5)
              {
                size_t result = GetAliasStream2(a5, (uint64_t)v34);
                if (result) {
                  char v34 = *(uint64_t **)result;
                }
                else {
                  char v34 = 0LL;
                }
              }

              char v35 = (uint64_t **)a3[50];
              *char v35 = v34;
            }

            else
            {
              char v35 = (uint64_t **)a3[50];
            }

            a3[50] = v35 + 1;
            --v33;
          }

          while (v33);
          uint64_t v23 = v31;
          uint64_t v22 = v51;
          if ((a4 & 1) == 0) {
            goto LABEL_50;
          }
        }

        else
        {
          uint64_t v32 = 0LL;
          if ((a4 & 1) == 0) {
            goto LABEL_50;
          }
        }

        uint64_t v36 = v50 + 24 * v24;
        *(void *)uint64_t v36 = v29;
        *(void *)(v36 + 8) = v32;
        *(_DWORD *)(v36 + 16) = v30;
LABEL_50:
        if (++v24 == v23)
        {
          uint64_t v22 = *v9;
          uint64_t v37 = v50;
          goto LABEL_56;
        }
      }
    }

    uint64_t v37 = 0LL;
LABEL_56:
    if (a4) {
      uint64_t v38 = v37;
    }
    else {
      uint64_t v38 = 0LL;
    }
    if (a4) {
      uint64_t v39 = v23;
    }
    else {
      uint64_t v39 = 0LL;
    }
  }

  else
  {
    uint64_t v38 = 0LL;
    uint64_t v39 = 0LL;
  }

  uint64_t v40 = *(void *)v22;
  unsigned int *v9 = v22 + 8;
  if (v40)
  {
    uint64_t v41 = a3[50];
    uint64_t v42 = v40;
    do
    {
      size_t v43 = *(uint64_t **)*v9;
      *v9 += 8;
      if ((a4 & 1) != 0)
      {
        if (a5)
        {
          size_t result = GetAliasStream2(a5, (uint64_t)v43);
          if (result) {
            size_t v43 = *(uint64_t **)result;
          }
          else {
            size_t v43 = 0LL;
          }
        }

        double v44 = (uint64_t **)a3[50];
        void *v44 = v43;
      }

      else
      {
        double v44 = (uint64_t **)a3[50];
      }

      a3[50] = v44 + 1;
      --v42;
    }

    while (v42);
  }

  else
  {
    uint64_t v41 = 0LL;
  }

  if (a4)
  {
    *uint64_t v48 = v45;
    v48[1] = v49;
    v48[2] = v46;
    v48[3] = v47;
    v48[4] = v38;
    v48[5] = v39;
    v48[6] = v41;
    v48[7] = v40;
  }

  return result;
}

size_t DecodeDYMTLMeshRenderPipelineDescriptor(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  v47[1] = a2;
  memcpy(v46, &GTMTLMeshRenderPipelineDescriptorDefaults, sizeof(v46));
  unsigned int v9 = *(_DWORD *)a1;
  size_t result = strlen((const char *)(a1 + 8));
  v47[0] = (void *)((result & 0xFFFFFFFFFFFFFFF8LL) + a1 + 8 + 8);
  int v11 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8)) {
    uint64_t v12 = (const char *)(a1 + 8);
  }
  else {
    uint64_t v12 = 0LL;
  }
  if (v11)
  {
    size_t result = strlen(v12);
    uint64_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
    size_t v15 = result + 1;
    if (result != -1LL)
    {
      uint64_t v16 = (void *)a3[52];
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
  }

  size_t v15 = 0LL;
  uint64_t v16 = 0LL;
LABEL_9:
  *uint64_t v13 = v14 + v15;
  if (a4) {
    size_t result = (size_t)memcpy(v16, v12, v15);
  }
  *(int8x16_t *)((char *)&v46[22] + 8) = vextq_s8(*(int8x16_t *)v47[0], *(int8x16_t *)v47[0], 8uLL);
  uint64_t v17 = v47[0][2];
  WORD3(v46[25]) = v47[0][3];
  uint64_t v18 = v47[0][5];
  WORD2(v46[25]) = v47[0][4];
  uint64_t v19 = v47[0][7];
  __int128 v20 = *((_OWORD *)v47[0] + 4);
  uint64_t v22 = v47[0][10];
  uint64_t v21 = v47[0][11];
  uint64_t v23 = v47[0] + 12;
  uint64_t v24 = v47[0][6];
  v47[0] += 6;
  BYTE11(v46[31]) = v18;
  BYTE10(v46[31]) = v24;
  *((void *)&v46[21] + 1) = v17;
  *(void *)&v46[22] = v16;
  *((void *)&v46[23] + 1) = v19;
  v46[20] = v20;
  *(void *)&v46[21] = v22;
  if (v21)
  {
    __int16 v25 = (char *)&v46[29] + 8;
    do
    {
      if (a4) {
        *__int16 v25 = *v23;
      }
      ++v23;
      ++v25;
      --v21;
    }

    while (v21);
  }

  uint64_t v28 = *v23;
  int v26 = v23 + 1;
  uint64_t v27 = v28;
  v47[0] = v26;
  if (v28)
  {
    size_t v29 = (char *)&v46[27] + 9;
    do
    {
      if (a4) {
        *size_t v29 = *v26;
      }
      ++v26;
      ++v29;
      --v27;
    }

    while (v27);
  }

  uint64_t v32 = *v26;
  uint64_t v30 = v26 + 1;
  uint64_t v31 = v32;
  v47[0] = v30;
  if (v32)
  {
    int v33 = (char *)&v46[25] + 10;
    do
    {
      if (a4) {
        _BYTE *v33 = *v30;
      }
      ++v30;
      ++v33;
      --v31;
    }

    while (v31);
  }

  BYTE12(v46[31]) = *v30;
  BYTE7(v46[31]) = v30[1];
  BYTE8(v46[31]) = v30[2];
  BYTE13(v46[31]) = v30[3];
  BYTE9(v46[31]) = v30[4];
  HIDWORD(v46[24]) = v30[5];
  uint64_t v34 = v30[6];
  char v35 = v30 + 7;
  v47[0] = v35;
  if (v34)
  {
    uint64_t v36 = v46;
    do
    {
      size_t result = (size_t)MakeDYMTLRenderPipelineColorAttachmentDescriptor(v47, (uint64_t)v36++, a4);
      --v34;
    }

    while (v34);
    char v35 = v47[0];
  }

  LOWORD(v46[25]) = *v35;
  WORD4(v46[25]) = v35[1];
  BYTE14(v46[31]) = v35[2];
  if (v9 > 0x43)
  {
    uint64_t v37 = v35[3];
    v47[0] = v35 + 4;
    DWORD2(v46[24]) = v37;
    if (v9 >= 0x46)
    {
      MakeDYMTLLinkedFunctions((size_t)v47, &v46[16], a3, a4, a5);
      MakeDYMTLLinkedFunctions((size_t)v47, &v46[12], a3, a4, a5);
      size_t result = MakeDYMTLLinkedFunctions((size_t)v47, &v46[8], a3, a4, a5);
      if (v9 >= 0x4B)
      {
        uint64_t v38 = v47[0][1];
        WORD1(v46[25]) = *v47[0];
        *(void *)&v46[24] = v38;
      }
    }
  }

  uint64_t v39 = (char *)a3[26];
  a3[26] = v39 + 512;
  if (a4)
  {
    if (a5)
    {
      AliasStream2 = (uint64_t *)GetAliasStream2(a5, *(uint64_t *)&v46[23]);
      if (AliasStream2) {
        uint64_t v41 = *AliasStream2;
      }
      else {
        uint64_t v41 = 0LL;
      }
      *(void *)&v46[23] = v41;
      size_t v43 = (uint64_t *)GetAliasStream2(a5, *((uint64_t *)&v46[22] + 1));
      if (v43) {
        uint64_t v44 = *v43;
      }
      else {
        uint64_t v44 = 0LL;
      }
      *((void *)&v46[22] + 1) = v44;
      uint64_t v42 = (uint64_t *)GetAliasStream2(a5, *((uint64_t *)&v46[21] + 1));
      if (!v42)
      {
        uint64_t v45 = 0LL;
        goto LABEL_46;
      }
    }

    else
    {
      uint64_t v42 = (uint64_t *)&v46[21] + 1;
    }

    uint64_t v45 = *v42;
LABEL_46:
    *((void *)&v46[21] + 1) = v45;
    return (size_t)memcpy(v39, v46, 0x200uLL);
  }

  return result;
}

size_t DecodeDYMTLDepthStencilDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7 = *(_BYTE *)(a1 + 8);
  uint64_t v8 = (const char *)(a1 + 24);
  char v9 = *(_BYTE *)(a1 + 16);
  size_t result = strlen((const char *)(a1 + 24));
  size_t v11 = result;
  int v12 = *(unsigned __int8 *)(a1 + 24);
  if (*(_BYTE *)(a1 + 24)) {
    uint64_t v13 = v8;
  }
  else {
    uint64_t v13 = 0LL;
  }
  if (v12)
  {
    size_t result = strlen(v13);
    uint64_t v14 = (void *)(a3 + 416);
    uint64_t v15 = *(void *)(a3 + 416);
    size_t v16 = result + 1;
    if (result != -1LL)
    {
      uint64_t v17 = *(void **)(a3 + 416);
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v14 = (void *)(a3 + 416);
    uint64_t v15 = *(void *)(a3 + 416);
  }

  size_t v16 = 0LL;
  uint64_t v17 = 0LL;
LABEL_9:
  *uint64_t v14 = v15 + v16;
  if ((a4 & 1) != 0)
  {
    size_t result = (size_t)memcpy(v17, v13, v16);
    uint64_t v19 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8LL) + 32];
    uint64_t v18 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8LL) + 40];
    uint64_t v21 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8LL) + 16];
    uint64_t v20 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8LL) + 24];
    int32x2_t v22 = vmovn_s64(*(int64x2_t *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8LL) + 48]);
    uint64_t v24 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8LL) + 88];
    uint64_t v23 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8LL) + 96];
    uint64_t v26 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8LL) + 72];
    uint64_t v25 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8LL) + 80];
    uint64_t v27 = *(void *)(a3 + 200);
    int32x2_t v28 = vmovn_s64(*(int64x2_t *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8LL) + 104]);
    *(void *)(a3 + 200) = v27 + 48;
    *(int32x2_t *)uint64_t v27 = v28;
    *(_BYTE *)(v27 + 8) = v24;
    *(_BYTE *)(v27 + 9) = v23;
    *(_BYTE *)(v27 + 10) = v26;
    *(_BYTE *)(v27 + 11) = v25;
    *(_DWORD *)(v27 + 12) = 0;
    *(int32x2_t *)(v27 + 16) = v22;
    *(_BYTE *)(v27 + 24) = v19;
    *(_BYTE *)(v27 + 25) = v18;
    *(_BYTE *)(v27 + 26) = v21;
    *(_BYTE *)(v27 + 2memset(v56, 0, 7) = v20;
    *(_DWORD *)(v27 + 28) = 0;
    *(void *)(v27 + 32) = v17;
    *(_BYTE *)(v27 + 40) = v7;
    *(_BYTE *)(v27 + 41) = v9;
    *(_WORD *)(v27 + 46) = 0;
    *(_DWORD *)(v27 + 42) = 0;
  }

  else
  {
    *(void *)(a3 + 200) += 48LL;
  }

  return result;
}

uint64_t DecodeDYMTLSamplerDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v7 = *(_DWORD *)a1;
  char v34 = *(_BYTE *)(a1 + 16);
  char v35 = *(_BYTE *)(a1 + 24);
  char v36 = *(_BYTE *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 32);
  char v37 = *(_BYTE *)(a1 + 40);
  char v38 = *(_BYTE *)(a1 + 48);
  char v9 = *(_BYTE *)(a1 + 56);
  char v10 = *(_BYTE *)(a1 + 64);
  int v11 = *(_DWORD *)(a1 + 72);
  int v12 = (const char *)(a1 + 88);
  int v13 = *(_DWORD *)(a1 + 80);
  size_t v14 = strlen((const char *)(a1 + 88));
  if (*(_BYTE *)(a1 + 88)) {
    uint64_t v15 = v12;
  }
  else {
    uint64_t v15 = 0LL;
  }
  if (*(_BYTE *)(a1 + 88))
  {
    size_t v16 = strlen(v15);
    uint64_t v17 = (void *)(a3 + 416);
    uint64_t v18 = *(void *)(a3 + 416);
    size_t v19 = v16 + 1;
    if (v16 != -1LL)
    {
      uint64_t v20 = *(void **)(a3 + 416);
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v17 = (void *)(a3 + 416);
    uint64_t v18 = *(void *)(a3 + 416);
  }

  size_t v19 = 0LL;
  uint64_t v20 = 0LL;
LABEL_9:
  *uint64_t v17 = v18 + v19;
  if (a4) {
    memcpy(v20, v15, v19);
  }
  int32x4_t v21 = 0uLL;
  if (v7 < 2)
  {
    int v24 = 0;
    char v29 = 0;
    uint64_t v26 = 0LL;
    int v27 = 0;
    int v22 = 0;
LABEL_22:
    char v23 = 0;
LABEL_23:
    int v25 = 0;
LABEL_24:
    char v28 = 0;
    goto LABEL_25;
  }

  int v22 = v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 8];
  if (v7 < 8)
  {
    int v24 = 0;
    char v29 = 0;
    uint64_t v26 = 0LL;
    int v27 = 0;
    goto LABEL_22;
  }

  char v23 = v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 16];
  if (v7 < 0xA)
  {
    int v24 = 0;
    goto LABEL_41;
  }

  int v24 = v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 24];
  if (v7 < 0x11)
  {
LABEL_41:
    char v29 = 0;
    uint64_t v26 = 0LL;
    int v27 = 0;
    goto LABEL_23;
  }

  int v25 = v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 32];
  if (v7 < 0x16)
  {
    char v29 = 0;
    uint64_t v26 = 0LL;
    int v27 = 0;
    goto LABEL_24;
  }

  uint64_t v26 = *(void *)&v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 40];
  int v27 = v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 48];
  if (v7 < 0x1C)
  {
    char v29 = 0;
    goto LABEL_24;
  }

  char v28 = v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 56];
  if (v7 < 0x27)
  {
    char v29 = 0;
  }

  else
  {
    int v24 = v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 64];
    int32x4_t v21 = vuzp1q_s32( *(int32x4_t *)&v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 72],  *(int32x4_t *)&v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 88]);
    char v29 = v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 104];
    if (v7 >= 0x2A)
    {
      __int16 v30 = *(_WORD *)&v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 112];
      goto LABEL_26;
    }
  }

unint64_t EncodeDYMTLSamplerDescriptor(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *(void *)a2 = 81LL;
    if (a3 >= 0x10)
    {
      *(void *)(a2 + 8) = *(unsigned __int8 *)(a1 + 56);
      if (a3 >= 0x18)
      {
        *(void *)(a2 + 16) = *(unsigned __int8 *)(a1 + 55);
        if (a3 >= 0x20)
        {
          *(void *)(a2 + 24) = *(unsigned __int8 *)(a1 + 57);
          if (a3 >= 0x28)
          {
            *(void *)(a2 + 32) = *(void *)(a1 + 8);
            if (a3 >= 0x30)
            {
              *(void *)(a2 + 40) = *(unsigned __int8 *)(a1 + 61);
              if (a3 >= 0x38)
              {
                *(void *)(a2 + 48) = *(unsigned __int8 *)(a1 + 63);
                if (a3 >= 0x40)
                {
                  *(void *)(a2 + 56) = *(unsigned __int8 *)(a1 + 59);
                  if (a3 >= 0x48)
                  {
                    *(void *)(a2 + 64) = *(unsigned __int8 *)(a1 + 58);
                    if (a3 >= 0x4C)
                    {
                      *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 44);
                      if (a3 >= 0x4D)
                      {
                        uint64_t v6 = (void *)(a2 + 76);
                        size_t v7 = a3 - 76 >= 4 ? 4LL : a3 - 76;
                        bzero(v6, v7);
                        if (a3 >= 0x54)
                        {
                          *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 40);
                          if (a3 >= 0x55)
                          {
                            if (a3 - 84 >= 4) {
                              size_t v8 = 4LL;
                            }
                            else {
                              size_t v8 = a3 - 84;
                            }
                            bzero((void *)(a2 + 84), v8);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  if (*(void *)a1) {
    char v9 = *(const char **)a1;
  }
  else {
    char v9 = "";
  }
  size_t v10 = strlen(v9);
  size_t v11 = v10;
  size_t v12 = v10 + 89;
  if (a3 >= v10 + 89) {
    memcpy((void *)(a2 + 88), v9, v10 + 1);
  }
  unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFF8LL;
  if (a3 > v12)
  {
    if (a3 - v12 >= v13 + ~v11 + 8) {
      size_t v14 = v13 + ~v11 + 8;
    }
    else {
      size_t v14 = a3 - v12;
    }
    bzero((void *)(a2 + v12), v14);
  }

  if (v13 + 104 <= a3) {
    *(void *)(v13 + a2 + 96) = *(unsigned __int8 *)(a1 + 54);
  }
  if (v13 + 112 <= a3) {
    *(void *)(a2 + v13 + 104) = *(unsigned __int8 *)(a1 + 51);
  }
  if (v13 + 120 <= a3) {
    *(void *)(a2 + v13 + 112) = *(unsigned __int8 *)(a1 + 50);
  }
  if (v13 + 128 <= a3) {
    *(void *)(a2 + v13 + 120) = *(unsigned __int8 *)(a1 + 62);
  }
  if (v13 + 136 <= a3) {
    *(void *)(a2 + v13 + 128) = *(void *)(a1 + 16);
  }
  if (v13 + 144 <= a3) {
    *(void *)(a2 + v13 + 136) = *(unsigned __int8 *)(a1 + 52);
  }
  if (v13 + 152 <= a3) {
    *(void *)(a2 + v13 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v20 - 144) = *(unsigned __int8 *)(a1 + 60);
  }
  if (v13 + 160 <= a3) {
    *(void *)(a2 + v13 + 152) = *(unsigned __int8 *)(a1 + 50);
  }
  if (v13 + 168 <= a3) {
    *(void *)(a2 + v13 + 160) = *(unsigned int *)(a1 + 24);
  }
  if (v13 + 176 <= a3) {
    *(void *)(a2 + v13 + 168) = *(unsigned int *)(a1 + 28);
  }
  if (v13 + 184 <= a3) {
    *(void *)(a2 + v13 + 176) = *(unsigned int *)(a1 + 32);
  }
  if (v13 + 192 <= a3) {
    *(void *)(a2 + v13 + 184) = *(unsigned int *)(a1 + 36);
  }
  if (v13 + 200 <= a3) {
    *(void *)(a2 + v13 + 192) = *(unsigned __int8 *)(a1 + 53);
  }
  unint64_t result = v13 + 208;
  if (v13 + 208 <= a3) {
    *(void *)(a2 + v13 + 200) = *(unsigned __int16 *)(a1 + 48);
  }
  return result;
}

void DecodeDYMTLComputePipelineDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  v66[1] = a2;
  memcpy(v65, &GTMTLComputePipelineDescriptorDefaults, sizeof(v65));
  unsigned int v9 = *(_DWORD *)a1;
  uint64_t v10 = *(void *)(a1 + 16);
  v65[106] = *(void *)(a1 + 8);
  BYTE6(v65[119]) = v10;
  v66[0] = (strlen((const char *)(a1 + 24)) & 0xFFFFFFFFFFFFFFF8LL) + a1 + 24 + 8;
  int v11 = *(unsigned __int8 *)(a1 + 24);
  if (*(_BYTE *)(a1 + 24)) {
    size_t v12 = (const char *)(a1 + 24);
  }
  else {
    size_t v12 = 0LL;
  }
  if (v11)
  {
    size_t v13 = strlen(v12);
    size_t v14 = a3 + 52;
    uint64_t v15 = a3[52];
    size_t v16 = v13 + 1;
    if (v13 != -1LL)
    {
      uint64_t v17 = (void *)a3[52];
      goto LABEL_9;
    }
  }

  else
  {
    size_t v14 = a3 + 52;
    uint64_t v15 = a3[52];
  }

  size_t v16 = 0LL;
  uint64_t v17 = 0LL;
LABEL_9:
  *size_t v14 = v15 + v16;
  if (a4) {
    memcpy(v17, v12, v16);
  }
  v65[109] = v17;
  if (v9 < 0xB) {
    goto LABEL_87;
  }
  bzero(__src, 0x2F0uLL);
  uint64_t v18 = (uint64_t *)v66[0];
  if (v9 < 0x1A)
  {
    uint64_t v19 = 31LL;
  }

  else
  {
    uint64_t v18 = (uint64_t *)(v66[0] + 8LL);
    uint64_t v19 = *(unsigned int *)v66[0];
    if (!*(_DWORD *)v66[0]) {
      goto LABEL_23;
    }
  }

  uint64_t v20 = &__src[11];
  do
  {
    if (a4)
    {
      uint64_t v22 = v18[1];
      uint64_t v21 = v18[2];
      uint64_t v23 = *v18;
      if (*v18 == 0xFFFFFFFFLL) {
        uint64_t v23 = -1LL;
      }
      *(void *)(v20 - 11) = v23;
      *(_WORD *)(v20 - 3) = v22;
      *(v20 - 1) = v21;
      *(_DWORD *)uint64_t v20 = 0;
      v20[4] = 0;
    }

    v18 += 3;
    v20 += 16;
    --v19;
  }

  while (v19);
  v66[0] = v18;
  if (v9 > 0x19)
  {
LABEL_23:
    unsigned int v25 = *(_DWORD *)v18++;
    uint64_t v24 = v25;
    v66[0] = v18;
    if (!v25) {
      goto LABEL_30;
    }
    goto LABEL_26;
  }

  uint64_t v24 = 31LL;
LABEL_26:
  uint64_t v26 = &__src[502];
  do
  {
    if (a4)
    {
      uint64_t v27 = v18[2];
      uint64_t v28 = *v18;
      *(_DWORD *)(v26 - 3) = v18[1];
      *((_BYTE *)v26 - 2) = v27;
      *((_BYTE *)v26 - 1) = v28;
      *uint64_t v26 = 0;
    }

    v18 += 3;
    v26 += 4;
    --v24;
  }

  while (v24);
LABEL_30:
  __src[745] = *v18;
  uint64_t v29 = v18[1];
  __int16 v30 = v18 + 2;
  v66[0] = v18 + 2;
  _BYTE __src[744] = v29;
  if ((a4 & 1) != 0) {
    memcpy(v65, __src, 0x2F0uLL);
  }
  HIBYTE(v65[118]) = -1;
  if (v9 >= 0x12)
  {
    if (v9 < 0x1A)
    {
      uint64_t v31 = 31LL;
    }

    else
    {
      uint64_t v31 = v18[2];
      __int16 v30 = v18 + 3;
      v66[0] = v18 + 3;
      uint64_t v31 = v31;
    }

    uint64_t v32 = &v65[115];
    do
    {
      uint64_t v33 = *v30++;
      *v32++ = v33;
      --v31;
    }

    while (v31);
LABEL_39:
    if (v9 >= 0x1B)
    {
      BYTE4(v65[119]) = *v30;
      if (v9 >= 0x25)
      {
        HIWORD(v65[114]) = v30[1];
        if (v9 != 37)
        {
          v65[110] = v30[2];
          if (v9 >= 0x28)
          {
            uint64_t v34 = v30[3];
            char v35 = v30 + 4;
            v66[0] = v35;
            v65[108] = v34;
            if (v34)
            {
              char v36 = (uint64_t *)a3[50];
              v65[107] = v36;
              do
              {
                uint64_t v38 = *v35++;
                uint64_t v37 = v38;
                if (a4)
                {
                  if (a5)
                  {
                    AliasStream2 = (uint64_t *)GetAliasStream2(a5, v37);
                    if (AliasStream2) {
                      uint64_t v37 = *AliasStream2;
                    }
                    else {
                      uint64_t v37 = 0LL;
                    }
                  }

                  char v36 = (uint64_t *)a3[50];
                  *char v36 = v37;
                }

                a3[50] = ++v36;
                --v34;
              }

              while (v34);
            }

            else
            {
              v65[107] = 0LL;
            }

            if (v9 >= 0x29)
            {
              v65[113] = *v35;
              if (v9 != 41)
              {
                BYTE5(v65[119]) = v35[1];
                LOWORD(v65[114]) = v35[2];
                BYTE2(v65[119]) = v35[3];
                BYTE1(v65[119]) = v35[4];
                LOBYTE(v65[119]) = v35[5];
                size_t v40 = v35[6];
                uint64_t v41 = v35 + 7;
                uint64_t v42 = (size_t *)((char *)v35 + ((v40 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 56);
                v66[0] = v42;
                if (v40) {
                  size_t v43 = (void *)a3[52];
                }
                else {
                  size_t v43 = 0LL;
                }
                uint64_t v44 = (char *)(a3[52] + v40);
                a3[52] = v44;
                if (a4)
                {
                  if (v40) {
                    uint64_t v45 = v41;
                  }
                  else {
                    uint64_t v45 = 0LL;
                  }
                  memcpy(v43, v45, v40);
                  uint64_t v44 = (char *)a3[52];
                }

                v65[104] = v43;
                v65[105] = v40;
                size_t v48 = *v42;
                uint64_t v47 = v42 + 1;
                size_t v46 = v48;
                uint64_t v49 = (void *)((char *)v47 + ((v48 + 7) & 0xFFFFFFFFFFFFFFF8LL));
                v66[0] = v49;
                if (v48) {
                  uint64_t v50 = v44;
                }
                else {
                  uint64_t v50 = 0LL;
                }
                a3[52] = &v44[v46];
                if (a4)
                {
                  if (v46) {
                    size_t v51 = v47;
                  }
                  else {
                    size_t v51 = 0LL;
                  }
                  memcpy(v50, v51, v46);
                }

                v65[102] = v50;
                v65[103] = v46;
                if (v9 >= 0x2D)
                {
                  uint64_t v52 = *v49;
                  v66[0] = v49 + 1;
                  WORD2(v65[114]) = v52;
                  uint64_t v53 = v49[1];
                  v66[0] = v49 + 2;
                  BYTE3(v65[119]) = v53;
                  MakeDYMTLLinkedFunctions((size_t)v66, &v65[94], a3, a4, a5);
                  if (v9 >= 0x30)
                  {
                    __int16 v54 = (uint64_t *)(v66[0] + 8LL);
                    uint64_t v55 = *(void *)v66[0];
                    v65[112] = v55;
                    if (v55)
                    {
                      char v56 = (uint64_t *)a3[50];
                      v65[111] = v56;
                      do
                      {
                        uint64_t v58 = *v54++;
                        uint64_t v57 = v58;
                        if (a4)
                        {
                          if (a5)
                          {
                            size_t v59 = (uint64_t *)GetAliasStream2(a5, v57);
                            if (v59) {
                              uint64_t v57 = *v59;
                            }
                            else {
                              uint64_t v57 = 0LL;
                            }
                          }

                          char v56 = (uint64_t *)a3[50];
                          uint64_t *v56 = v57;
                        }

                        a3[50] = ++v56;
                        --v55;
                      }

                      while (v55);
                    }

                    else
                    {
                      v65[111] = 0LL;
                    }

                    if (v9 >= 0x4B) {
                      WORD1(v65[114]) = *v54;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

double DecodeDYMTLTileRenderPipelineDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  v59[1] = a2;
  __int128 v56 = xmmword_317CC0;
  __int128 v57 = unk_317CD0;
  __int128 v58 = xmmword_317CE0;
  __int128 v52 = xmmword_317C80;
  __int128 v53 = unk_317C90;
  __int128 v54 = xmmword_317CA0;
  __int128 v55 = unk_317CB0;
  __int128 v48 = GTMTLTileRenderPipelineDescriptorDefaults;
  __int128 v49 = *(_OWORD *)algn_317C50;
  __int128 v50 = xmmword_317C60;
  __int128 v51 = unk_317C70;
  unsigned int v9 = (const char *)(a1 + 8);
  unsigned int v10 = *(_DWORD *)a1;
  v59[0] = (strlen((const char *)(a1 + 8)) & 0xFFFFFFFFFFFFFFF8LL) + a1 + 8 + 8;
  int v12 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8)) {
    size_t v13 = v9;
  }
  else {
    size_t v13 = 0LL;
  }
  if (v12)
  {
    size_t v14 = strlen(v13);
    uint64_t v15 = a3 + 52;
    uint64_t v16 = a3[52];
    size_t v17 = v14 + 1;
    if (v14 != -1LL)
    {
      uint64_t v18 = (void *)a3[52];
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v15 = a3 + 52;
    uint64_t v16 = a3[52];
  }

  size_t v17 = 0LL;
  uint64_t v18 = 0LL;
LABEL_9:
  *uint64_t v15 = v16 + v17;
  if (a4) {
    memcpy(v18, v13, v17);
  }
  uint64_t v19 = *(void *)v59[0];
  uint64_t v20 = *(void *)(v59[0] + 8LL);
  *(void *)&__int128 v54 = v18;
  *((void *)&v55 + 1) = v19;
  WORD3(v56) = v20;
  uint64_t v21 = *(void *)(v59[0] + 16LL);
  uint64_t v22 = (void *)(v59[0] + 24LL);
  if (v21)
  {
    uint64_t v23 = &v52;
    do
    {
      if (a4) {
        *(_WORD *)uint64_t v23 = *v22;
      }
      ++v22;
      uint64_t v23 = (__int128 *)((char *)v23 + 2);
      --v21;
    }

    while (v21);
  }

  BYTE9(v58) = *v22;
  uint64_t v24 = v22[1];
  unsigned int v25 = v22 + 2;
  v59[0] = v25;
  if (v24)
  {
    uint64_t v26 = (char *)&v56 + 8;
    do
    {
      if (a4) {
        *uint64_t v26 = *v25;
      }
      ++v25;
      ++v26;
      --v24;
    }

    while (v24);
  }

  if (v10 > 0x2D)
  {
    size_t v29 = *v25;
    uint64_t v27 = v25 + 1;
    size_t v28 = v29;
    __int16 v30 = (void *)((char *)v27 + ((v29 + 7) & 0xFFFFFFFFFFFFFFF8LL));
    v59[0] = v30;
    if (v29) {
      uint64_t v31 = (void *)a3[52];
    }
    else {
      uint64_t v31 = 0LL;
    }
    a3[52] += v28;
    if (a4)
    {
      if (v28) {
        uint64_t v32 = v27;
      }
      else {
        uint64_t v32 = 0LL;
      }
      memcpy(v31, v32, v28);
    }

    *(void *)&__int128 v53 = v31;
    *((void *)&v53 + 1) = v28;
    if (v10 >= 0x33)
    {
      uint64_t v35 = *v30;
      uint64_t v34 = v30 + 1;
      uint64_t v33 = v35;
      v59[0] = v34;
      *(void *)&__int128 v55 = v35;
      if (v35)
      {
        char v36 = (uint64_t *)a3[50];
        *((void *)&v54 + 1) = v36;
        do
        {
          uint64_t v38 = *v34++;
          uint64_t v37 = v38;
          if (a4)
          {
            if (a5)
            {
              AliasStream2 = (uint64_t *)GetAliasStream2(a5, v37);
              if (AliasStream2) {
                uint64_t v37 = *AliasStream2;
              }
              else {
                uint64_t v37 = 0LL;
              }
            }

            char v36 = (uint64_t *)a3[50];
            *char v36 = v37;
          }

          a3[50] = ++v36;
          --v33;
        }

        while (v33);
        v59[0] = v34;
      }

      else
      {
        *((void *)&v54 + 1) = 0LL;
      }

      if (v10 >= 0x37)
      {
        MakeDYMTLLinkedFunctions((size_t)v59, &v48, a3, a4, a5);
        if (v10 >= 0x42)
        {
          BYTE8(v58) = *(void *)v59[0];
          if (v10 >= 0x45)
          {
            WORD1(v56) = *(void *)(v59[0] + 8LL);
            if (v10 >= 0x4B) {
              LOWORD(v56) = *(void *)(v59[0] + 16LL);
            }
          }
        }
      }
    }
  }

  size_t v40 = (__int128 *)a3[20];
  a3[20] = v40 + 11;
  if (a4)
  {
    uint64_t v41 = *((void *)&v55 + 1);
    if (a5)
    {
      uint64_t v42 = (uint64_t *)GetAliasStream2(a5, *((uint64_t *)&v55 + 1));
      if (v42) {
        uint64_t v41 = *v42;
      }
      else {
        uint64_t v41 = 0LL;
      }
    }

    *((void *)&v55 + 1) = v41;
    __int128 v43 = v57;
    v40[8] = v56;
    v40[9] = v43;
    v40[10] = v58;
    __int128 v44 = v53;
    v40[4] = v52;
    v40[5] = v44;
    __int128 v45 = v49;
    __int128 *v40 = v48;
    v40[1] = v45;
    __int128 v46 = v51;
    v40[2] = v50;
    v40[3] = v46;
    double result = *(double *)&v54;
    __int128 v47 = v55;
    v40[6] = v54;
    v40[7] = v47;
  }

  return result;
}

size_t DecodeDYMTLFunctionConstantValues(size_t result, uint64_t a2, void *a3, int a4)
{
  unint64_t v6 = result + 8;
  uint64_t v28 = a3[40];
  if (*(void *)(result + 8) != -1LL)
  {
    uint64_t v7 = 0LL;
    while (1)
    {
      uint64_t v8 = a3[40];
      a3[40] = v8 + 32;
      uint64_t v9 = *(void *)v6;
      unint64_t v10 = v6 + 8;
      double result = strlen((const char *)(v6 + 8));
      size_t v11 = result;
      int v12 = *(unsigned __int8 *)(v6 + 8);
      size_t v13 = *(_BYTE *)(v6 + 8) ? (const char *)(v6 + 8) : 0LL;
      if (!v12) {
        break;
      }
      double result = strlen(v13);
      uint64_t v14 = a3[52];
      size_t v15 = result + 1;
      if (result == -1LL) {
        goto LABEL_10;
      }
      uint64_t v16 = (void *)a3[52];
LABEL_11:
      size_t v17 = (v11 & 0xFFFFFFFFFFFFFFF8LL) + v10;
      uint64_t v18 = (uint64_t *)(v17 + 8);
      size_t v19 = v14 + v15;
      a3[52] = v19;
      if ((a4 & 1) != 0)
      {
        memcpy(v16, v13, v15);
        uint64_t v20 = (char *)a3[52];
        uint64_t v21 = v18[1];
        uint64_t v29 = *v18;
        size_t v22 = v18[2];
        uint64_t v23 = v18 + 3;
        unint64_t v6 = (unint64_t)v18 + ((v22 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 24;
        a3[52] = &v20[v22];
        if (v22) {
          uint64_t v24 = v20;
        }
        else {
          uint64_t v24 = 0LL;
        }
        if (v22) {
          unsigned int v25 = v23;
        }
        else {
          unsigned int v25 = 0LL;
        }
        double result = (size_t)memcpy(v24, v25, v22);
        *(void *)uint64_t v8 = v24;
        *(void *)(v8 + 8) = v22;
        *(void *)(v8 + 16) = v16;
        *(_WORD *)(v8 + 24) = v9;
        *(_BYTE *)(v8 + 26) = v21;
        *(_BYTE *)(v8 + 2memset(v56, 0, 7) = v29;
        *(_DWORD *)(v8 + 28) = 0;
      }

      else
      {
        uint64_t v26 = *(void *)(v17 + 24);
        unint64_t v6 = (unint64_t)v18 + ((v26 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 24;
        a3[52] = v19 + v26;
      }

      ++v7;
      if (*(void *)v6 == -1LL) {
        goto LABEL_23;
      }
    }

    uint64_t v14 = a3[52];
LABEL_10:
    size_t v15 = 0LL;
    uint64_t v16 = 0LL;
    goto LABEL_11;
  }

  uint64_t v7 = 0LL;
LABEL_23:
  uint64_t v27 = (void *)a3[15];
  a3[15] = v27 + 2;
  if (a4)
  {
    *uint64_t v27 = v28;
    v27[1] = v7;
  }

  return result;
}

size_t DecodeDYMTLRasterizationRateMapDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  unsigned int v7 = *(_DWORD *)a1;
  uint64_t v8 = (const char *)(a1 + 8);
  size_t result = strlen((const char *)(a1 + 8));
  unint64_t v10 = (unint64_t)&v8[(result & 0xFFFFFFFFFFFFFFF8LL) + 8];
  if (*(_BYTE *)(a1 + 8))
  {
    size_t result = strlen(v8);
    size_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
    size_t v11 = result + 1;
    if (result != -1LL)
    {
      int v12 = (void *)a3[52];
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
    size_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
  }

  size_t v11 = 0LL;
  int v12 = 0LL;
LABEL_6:
  *size_t v13 = v14 + v11;
  if (a4) {
    size_t result = (size_t)memcpy(v12, v8, v11);
  }
  __int16 v15 = *(_WORD *)v10;
  __int16 v16 = *(_WORD *)(v10 + 8);
  __int16 v17 = *(_WORD *)(v10 + 16);
  unint64_t v18 = v10 + 32;
  uint64_t v19 = *(void *)(v10 + 24);
  if (v19)
  {
    uint64_t v20 = 0LL;
    uint64_t v21 = a3[36];
    while (1)
    {
      uint64_t v22 = a3[36];
      a3[36] = v22 + 24;
      uint64_t v24 = *(void *)v18;
      uint64_t v23 = *(void *)(v18 + 8);
      size_t result = *(unsigned __int16 *)(v18 + 16);
      v18 += 24LL;
      if ((_WORD)v24)
      {
        uint64_t v25 = 0LL;
        uint64_t v26 = a3[51];
        do
        {
          if (a4) {
            *(_DWORD *)(v26 + v25) = *(_DWORD *)v18;
          }
          v18 += 8LL;
          a3[51] = v26 + v25 + 4;
          v25 += 4LL;
        }

        while (4 * (unsigned __int16)v24 != (_DWORD)v25);
      }

      else
      {
        uint64_t v26 = 0LL;
      }

      if ((_WORD)v23)
      {
        uint64_t v27 = 0LL;
        uint64_t v28 = a3[51];
        do
        {
          if (a4) {
            *(_DWORD *)(v28 + v2memset(v56, 0, 7) = *(_DWORD *)v18;
          }
          v18 += 8LL;
          a3[51] = v28 + v27 + 4;
          v27 += 4LL;
        }

        while (4 * (unsigned __int16)v23 != (_DWORD)v27);
        if ((a4 & 1) == 0) {
          goto LABEL_24;
        }
      }

      else
      {
        uint64_t v28 = 0LL;
        if ((a4 & 1) == 0) {
          goto LABEL_24;
        }
      }

      *(void *)uint64_t v22 = v26;
      *(void *)(v22 + 8) = v28;
      *(_WORD *)(v22 + 16) = v24;
      *(_WORD *)(v22 + 18) = result;
      *(_WORD *)(v22 + 20) = v23;
      *(_WORD *)(v22 + 22) = 0;
LABEL_24:
      if (++v20 == v19) {
        goto LABEL_29;
      }
    }
  }

  uint64_t v21 = 0LL;
LABEL_29:
  if (v7 <= 0x39)
  {
    char v31 = 0;
    int v29 = 0;
    char v30 = 2;
  }

  else
  {
    int v29 = *(_DWORD *)v18;
    char v30 = *(_BYTE *)(v18 + 8);
    if (v7 < 0x44) {
      char v31 = 0;
    }
    else {
      char v31 = *(_BYTE *)(v18 + 16);
    }
  }

  uint64_t v32 = a3[13];
  a3[13] = v32 + 40;
  if (a4)
  {
    *(void *)uint64_t v32 = v12;
    *(void *)(v32 + 8) = v21;
    *(void *)(v32 + 16) = v19;
    *(_DWORD *)(v32 + 24) = v29;
    *(_WORD *)(v32 + 28) = v17;
    *(_WORD *)(v32 + 30) = v16;
    *(_WORD *)(v32 + 32) = v15;
    *(_BYTE *)(v32 + 34) = v30;
    *(_BYTE *)(v32 + 35) = v31;
    *(_DWORD *)(v32 + 36) = 0;
  }

  return result;
}

size_t DecodeDYMTLFunctionDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v9 = (const char *)(a1 + 16);
  char v38 = *(_BYTE *)(a1 + 8);
  unsigned int v39 = *(_DWORD *)a1;
  size_t v10 = strlen((const char *)(a1 + 16)) & 0xFFFFFFFFFFFFFFF8LL;
  size_t v11 = &v9[v10 + 8];
  if (*(_BYTE *)(a1 + 16)) {
    int v12 = v9;
  }
  else {
    int v12 = 0LL;
  }
  if (*(_BYTE *)(a1 + 16))
  {
    size_t v13 = strlen(v12);
    uint64_t v14 = a3 + 52;
    uint64_t v15 = a3[52];
    size_t v16 = v13 + 1;
    if (v13 != -1LL)
    {
      __int16 v17 = (void *)a3[52];
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v14 = a3 + 52;
    uint64_t v15 = a3[52];
  }

  size_t v16 = 0LL;
  __int16 v17 = 0LL;
LABEL_9:
  *uint64_t v14 = v15 + v16;
  if (a4) {
    memcpy(v17, v12, v16);
  }
  size_t result = strlen(v11);
  unint64_t v19 = result & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = &v11[result & 0xFFFFFFFFFFFFFFF8LL];
  if (*v11) {
    uint64_t v21 = v11;
  }
  else {
    uint64_t v21 = 0LL;
  }
  uint64_t v37 = v17;
  if (*v11)
  {
    size_t result = strlen(v21);
    uint64_t v22 = a3 + 52;
    uint64_t v23 = a3[52];
    size_t v24 = result + 1;
    if (result != -1LL)
    {
      uint64_t v25 = (void *)a3[52];
      goto LABEL_19;
    }
  }

  else
  {
    uint64_t v22 = a3 + 52;
    uint64_t v23 = a3[52];
  }

  size_t v24 = 0LL;
  uint64_t v25 = 0LL;
LABEL_19:
  *uint64_t v22 = v23 + v24;
  if (a4) {
    size_t result = (size_t)memcpy(v25, v21, v24);
  }
  size_t v27 = (size_t)(v20 + 16);
  uint64_t v26 = *((void *)v20 + 1);
  if (v26)
  {
    uint64_t v28 = a3[15];
    size_t result = DecodeDYMTLFunctionConstantValues(v27, v26, a3, a4);
  }

  else
  {
    uint64_t v28 = 0LL;
  }

  if (v39 < 0x3E)
  {
    uint64_t v30 = 0LL;
    goto LABEL_36;
  }

  unint64_t v29 = (v26 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v30 = *(void *)(v27 + v29);
  if (!v30)
  {
LABEL_36:
    uint64_t v32 = 0LL;
    goto LABEL_37;
  }

  uint64_t v40 = v28;
  uint64_t v31 = 0LL;
  uint64_t v32 = (uint64_t *)a3[50];
  uint64_t v33 = v10 + v19 + v29 + a1 + 48;
  uint64_t v34 = v32;
  do
  {
    if (a4)
    {
      uint64_t v35 = *(void *)(v33 + 8 * v31);
      if (a5)
      {
        size_t result = GetAliasStream2(a5, v35);
        if (result) {
          uint64_t v35 = *(void *)result;
        }
        else {
          uint64_t v35 = 0LL;
        }
      }

      uint64_t v34 = (uint64_t *)a3[50];
      uint64_t *v34 = v35;
    }

    a3[50] = ++v34;
    ++v31;
  }

  while (v30 != v31);
  uint64_t v28 = v40;
LABEL_37:
  uint64_t v36 = a3[12];
  a3[12] = v36 + 48;
  if (a4)
  {
    *(void *)uint64_t v36 = v28;
    *(void *)(v36 + 8) = v37;
    *(void *)(v36 + 16) = v32;
    *(void *)(v36 + 24) = v30;
    *(void *)(v36 + 32) = v25;
    *(_BYTE *)(v36 + 40) = v38;
    *(_DWORD *)(v36 + 41) = 0;
    *(_DWORD *)(v36 + 44) = 0;
  }

  return result;
}

uint64_t DecodeDYMTLCompileOptions(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  unsigned int v8 = *(_DWORD *)a1;
  size_t v9 = *(void *)(a1 + 8);
  unint64_t v10 = a1 + 16 + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  if (v9) {
    size_t v11 = (void *)a3[52];
  }
  else {
    size_t v11 = 0LL;
  }
  a3[52] += v9;
  if (a4)
  {
    if (v9) {
      int v12 = (const void *)(a1 + 16);
    }
    else {
      int v12 = 0LL;
    }
    memcpy(v11, v12, v9);
  }

  char v13 = *(_BYTE *)v10;
  char v15 = *(_BYTE *)v10 == 0;
  BOOL v14 = *(_BYTE *)v10 != 0;
  char v16 = 2 * v14;
  uint64_t result = *(unsigned __int8 *)(v10 + 8);
  if (v8 <= 0xF)
  {
    __int16 v18 = 0;
    char v19 = 0;
    char v20 = 0;
    char v21 = 0;
    char v22 = 0;
    if (v8 < 6)
    {
      int v28 = 0;
      unint64_t v29 = 0LL;
      uint64_t v23 = 0LL;
      size_t v24 = 0LL;
      uint64_t v25 = 0LL;
      char v26 = 0;
      char v27 = 0;
    }

    else
    {
      uint64_t v23 = 0LL;
      size_t v24 = 0LL;
      uint64_t v25 = 0LL;
      char v26 = 0;
      char v27 = 0;
      int v28 = *(_DWORD *)(v10 + 40);
      unint64_t v29 = 0LL;
    }

    goto LABEL_62;
  }

  int v58 = *(_DWORD *)(v10 + 16);
  if (v8 < 0x28)
  {
    __int16 v18 = 0;
    char v19 = 0;
    char v20 = 0;
    char v21 = 0;
    char v22 = 0;
    unint64_t v29 = 0LL;
    uint64_t v23 = 0LL;
    size_t v24 = 0LL;
    uint64_t v25 = 0LL;
    char v26 = 0;
    char v27 = 0;
LABEL_34:
    int v28 = v58;
    goto LABEL_62;
  }

  unsigned int v54 = *(unsigned __int8 *)(v10 + 8);
  char v55 = 2 * v14;
  BOOL v56 = *(_BYTE *)v10 == 0;
  char v57 = *(_BYTE *)v10;
  __int128 v53 = v11;
  unint64_t v30 = v10 + 24;
  size_t v31 = strlen((const char *)(v10 + 24));
  if (*(_BYTE *)(v10 + 24)) {
    uint64_t v32 = (const char *)(v10 + 24);
  }
  else {
    uint64_t v32 = 0LL;
  }
  if (*(_BYTE *)(v10 + 24))
  {
    size_t v33 = strlen(v32);
    uint64_t v34 = a3[52];
    size_t v35 = v33 + 1;
    if (v33 != -1LL)
    {
      unint64_t v29 = (void *)a3[52];
      char v15 = v56;
      char v13 = v57;
      uint64_t result = v54;
      char v16 = v55;
      goto LABEL_23;
    }
  }

  else
  {
    uint64_t v34 = a3[52];
  }

  char v15 = *(_BYTE *)v10 == 0;
  char v13 = *(_BYTE *)v10;
  uint64_t result = *(unsigned __int8 *)(v10 + 8);
  char v16 = v55;
  size_t v35 = 0LL;
  unint64_t v29 = 0LL;
LABEL_23:
  a3[52] = v34 + v35;
  if (a4)
  {
    memcpy(v29, v32, v35);
    uint64_t result = v54;
    char v16 = v55;
    char v15 = v56;
    char v13 = v57;
  }

  if (v8 < 0x2B)
  {
    __int16 v18 = 0;
    char v19 = 0;
    char v20 = 0;
    char v21 = 0;
    char v22 = 0;
    uint64_t v23 = 0LL;
    size_t v24 = 0LL;
    uint64_t v25 = 0LL;
    char v26 = 0;
    char v27 = 0;
    size_t v11 = v53;
    goto LABEL_34;
  }

  unint64_t v36 = (v31 & 0xFFFFFFFFFFFFFFF8LL) + v30 + 8;
  char v52 = *(_BYTE *)v36;
  if (v8 < 0x30)
  {
    __int16 v18 = 0;
    char v19 = 0;
    char v20 = 0;
    char v21 = 0;
    uint64_t v23 = 0LL;
    size_t v24 = 0LL;
    uint64_t v25 = 0LL;
    char v26 = 0;
    char v27 = 0;
    size_t v11 = v53;
    int v28 = v58;
LABEL_61:
    char v22 = v52;
    goto LABEL_62;
  }

  size_t v37 = (strlen((const char *)(v36 + 8)) & 0xFFFFFFFFFFFFFFF8LL) + v36 + 8 + 8;
  int v38 = *(unsigned __int8 *)(v36 + 8);
  if (*(_BYTE *)(v36 + 8)) {
    unsigned int v39 = (const char *)(v36 + 8);
  }
  else {
    unsigned int v39 = 0LL;
  }
  if (v38)
  {
    size_t v40 = strlen(v39);
    uint64_t v41 = a3[52];
    size_t v42 = v40 + 1;
    if (v40 != -1LL)
    {
      __dst = (void *)a3[52];
      char v15 = v56;
      char v13 = v57;
      uint64_t result = v54;
      char v16 = v55;
      goto LABEL_38;
    }
  }

  else
  {
    uint64_t v41 = a3[52];
  }

  char v15 = v56;
  char v13 = v57;
  uint64_t result = v54;
  char v16 = v55;
  size_t v42 = 0LL;
  __dst = 0LL;
LABEL_38:
  __int128 v50 = v29;
  a3[52] = v41 + v42;
  if (a4)
  {
    memcpy(__dst, v39, v42);
    uint64_t result = v54;
    char v16 = v55;
    char v15 = v56;
    char v13 = v57;
  }

  char v26 = *(_BYTE *)v37;
  uint64_t v23 = *(void *)(v37 + 8);
  size_t v43 = v37 + 16;
  if (v23)
  {
    size_t v24 = (uint64_t *)a3[50];
    uint64_t v44 = v23;
    __int128 v45 = v24;
    do
    {
      uint64_t v47 = *(void *)v43;
      v43 += 8LL;
      uint64_t v46 = v47;
      if (a4)
      {
        if (a5)
        {
          AliasStream2 = (uint64_t *)GetAliasStream2(a5, v46);
          if (AliasStream2) {
            uint64_t v46 = *AliasStream2;
          }
          else {
            uint64_t v46 = 0LL;
          }
        }

        __int128 v45 = (uint64_t *)a3[50];
        uint64_t *v45 = v46;
      }

      a3[50] = ++v45;
      --v44;
    }

    while (v44);
    size_t v11 = v53;
    char v15 = v56;
    char v13 = v57;
    uint64_t result = v54;
    char v16 = v55;
  }

  else
  {
    size_t v24 = 0LL;
    size_t v11 = v53;
  }

  if (v8 < 0x3B)
  {
    __int16 v18 = 0;
    char v19 = 0;
    char v20 = 0;
    char v21 = 0;
LABEL_59:
    char v27 = 0;
LABEL_60:
    int v28 = v58;
    unint64_t v29 = v50;
    uint64_t v25 = __dst;
    goto LABEL_61;
  }

  char v21 = *(_BYTE *)v43;
  if (v8 < 0x40)
  {
    __int16 v18 = 0;
    char v19 = 0;
    char v20 = 0;
    goto LABEL_59;
  }

  char v27 = *(_BYTE *)(v43 + 8);
  if (v8 < 0x47)
  {
    __int16 v18 = 0;
    char v19 = 0;
    char v20 = 0;
    goto LABEL_60;
  }

  char v20 = *(_BYTE *)(v43 + 16);
  char v19 = *(_BYTE *)(v43 + 24);
  __int16 v18 = *(_WORD *)(v43 + 32);
  int v28 = v58;
  char v22 = v52;
  uint64_t v25 = __dst;
  if (v8 >= 0x4C)
  {
    char v15 = *(_BYTE *)(v43 + 40);
    char v16 = *(_BYTE *)(v43 + 48);
  }

  unint64_t v29 = v50;
LABEL_62:
  uint64_t v49 = a3[11];
  a3[11] = v49 + 64;
  if (a4)
  {
    *(void *)uint64_t v49 = v11;
    *(void *)(v49 + 8) = v9;
    *(void *)(v49 + 16) = v29;
    *(void *)(v49 + 24) = v25;
    *(void *)(v49 + 32) = v24;
    *(void *)(v49 + 40) = v23;
    *(_DWORD *)(v49 + 48) = v28;
    *(_WORD *)(v49 + 52) = v18;
    *(_BYTE *)(v49 + 54) = v19;
    *(_BYTE *)(v49 + 55) = v20;
    *(_BYTE *)(v49 + 56) = result;
    *(_BYTE *)(v49 + 5memset(v56, 0, 7) = v13;
    *(_BYTE *)(v49 + 58) = v26;
    *(_BYTE *)(v49 + 59) = v15;
    *(_BYTE *)(v49 + 60) = v16;
    *(_BYTE *)(v49 + 61) = v27;
    *(_BYTE *)(v49 + 62) = v22;
    *(_BYTE *)(v49 + 63) = v21;
  }

  return result;
}

uint64_t *DecodeDYMTLRenderPipelineFunctionsDescriptor( uint64_t *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v8 = result[1];
  size_t v9 = result + 2;
  uint64_t v46 = v8;
  if (v8)
  {
    unint64_t v10 = *(uint64_t **)(a3 + 400);
    __int128 v45 = v10;
    do
    {
      uint64_t v12 = *v9++;
      uint64_t v11 = v12;
      if (a4)
      {
        if (a5)
        {
          uint64_t result = (uint64_t *)GetAliasStream2(a5, v11);
          if (result) {
            uint64_t v11 = *result;
          }
          else {
            uint64_t v11 = 0LL;
          }
        }

        unint64_t v10 = *(uint64_t **)(a3 + 400);
        *unint64_t v10 = v11;
      }

      *(void *)(a3 + 400) = ++v10;
      --v8;
    }

    while (v8);
  }

  else
  {
    __int128 v45 = 0LL;
  }

  uint64_t v15 = *v9;
  BOOL v14 = v9 + 1;
  uint64_t v13 = v15;
  uint64_t v44 = (uint64_t *)v15;
  if (v15)
  {
    char v16 = *(uint64_t **)(a3 + 400);
    size_t v43 = v16;
    do
    {
      uint64_t v18 = *v14++;
      uint64_t v17 = v18;
      if (a4)
      {
        if (a5)
        {
          uint64_t result = (uint64_t *)GetAliasStream2(a5, v17);
          if (result) {
            uint64_t v17 = *result;
          }
          else {
            uint64_t v17 = 0LL;
          }
        }

        char v16 = *(uint64_t **)(a3 + 400);
        uint64_t *v16 = v17;
      }

      *(void *)(a3 + 400) = ++v16;
      --v13;
    }

    while (v13);
  }

  else
  {
    size_t v43 = 0LL;
  }

  uint64_t v21 = *v14;
  char v19 = v14 + 1;
  char v20 = (uint64_t *)v21;
  if (v21)
  {
    char v22 = *(uint64_t **)(a3 + 400);
    uint64_t v23 = v20;
    size_t v42 = v22;
    do
    {
      uint64_t v25 = *v19++;
      uint64_t v24 = v25;
      if (a4)
      {
        if (a5)
        {
          uint64_t result = (uint64_t *)GetAliasStream2(a5, v24);
          if (result) {
            uint64_t v24 = *result;
          }
          else {
            uint64_t v24 = 0LL;
          }
        }

        char v22 = *(uint64_t **)(a3 + 400);
        *char v22 = v24;
      }

      *(void *)(a3 + 400) = ++v22;
      uint64_t v23 = (uint64_t *)((char *)v23 - 1);
    }

    while (v23);
  }

  else
  {
    size_t v42 = 0LL;
  }

  uint64_t v28 = *v19;
  char v27 = v19 + 1;
  char v26 = (uint64_t *)v28;
  if (v28)
  {
    unint64_t v29 = *(uint64_t **)(a3 + 400);
    unint64_t v30 = v26;
    size_t v31 = v29;
    do
    {
      uint64_t v33 = *v27++;
      uint64_t v32 = v33;
      if (a4)
      {
        if (a5)
        {
          uint64_t result = (uint64_t *)GetAliasStream2(a5, v32);
          if (result) {
            uint64_t v32 = *result;
          }
          else {
            uint64_t v32 = 0LL;
          }
        }

        size_t v31 = *(uint64_t **)(a3 + 400);
        *size_t v31 = v32;
      }

      *(void *)(a3 + 400) = ++v31;
      unint64_t v30 = (uint64_t *)((char *)v30 - 1);
    }

    while (v30);
  }

  else
  {
    unint64_t v29 = 0LL;
  }

  uint64_t v34 = *v27;
  if (*v27)
  {
    size_t v35 = *(uint64_t **)(a3 + 400);
    unint64_t v36 = v27 + 1;
    uint64_t v37 = v34;
    int v38 = v35;
    do
    {
      uint64_t v40 = *v36++;
      uint64_t v39 = v40;
      if (a4)
      {
        if (a5)
        {
          uint64_t result = (uint64_t *)GetAliasStream2(a5, v39);
          if (result) {
            uint64_t v39 = *result;
          }
          else {
            uint64_t v39 = 0LL;
          }
        }

        int v38 = *(uint64_t **)(a3 + 400);
        *int v38 = v39;
      }

      *(void *)(a3 + 400) = ++v38;
      --v37;
    }

    while (v37);
  }

  else
  {
    size_t v35 = 0LL;
  }

  uint64_t v41 = *(uint64_t ***)(a3 + 24);
  *(void *)(a3 + 24) = v41 + 10;
  if ((a4 & 1) != 0)
  {
    void *v41 = v43;
    v41[1] = v44;
    v41[2] = v29;
    v41[3] = v26;
    v41[4] = v35;
    v41[5] = (uint64_t *)v34;
    _DWORD v41[6] = v42;
    v41[7] = v20;
    v41[8] = v45;
    v41[9] = (uint64_t *)v46;
  }

  return result;
}

size_t DecodeDYMTLIntersectionFunctionDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  unsigned int v7 = (const char *)(a1 + 16);
  char v8 = *(_BYTE *)(a1 + 8);
  size_t v9 = (const char *)((strlen((const char *)(a1 + 16)) & 0xFFFFFFFFFFFFFFF8LL) + a1 + 16 + 8);
  if (*(_BYTE *)(a1 + 16))
  {
    size_t v10 = strlen(v7);
    uint64_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
    size_t v11 = v10 + 1;
    if (v10 != -1LL)
    {
      uint64_t v12 = (void *)a3[52];
      goto LABEL_6;
    }
  }

  else
  {
    unsigned int v7 = 0LL;
    uint64_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
  }

  size_t v11 = 0LL;
  uint64_t v12 = 0LL;
LABEL_6:
  *uint64_t v13 = v14 + v11;
  if (a4) {
    memcpy(v12, v7, v11);
  }
  size_t result = strlen(v9);
  char v16 = (uint64_t *)&v9[(result & 0xFFFFFFFFFFFFFFF8LL) + 8];
  int v17 = *(unsigned __int8 *)v9;
  if (!*v9) {
    size_t v9 = 0LL;
  }
  if (v17)
  {
    size_t result = strlen(v9);
    uint64_t v18 = a3 + 52;
    uint64_t v19 = a3[52];
    size_t v20 = result + 1;
    if (result != -1LL)
    {
      uint64_t v21 = (void *)a3[52];
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v18 = a3 + 52;
    uint64_t v19 = a3[52];
  }

  size_t v20 = 0LL;
  uint64_t v21 = 0LL;
LABEL_15:
  *uint64_t v18 = v19 + v20;
  if (a4) {
    size_t result = (size_t)memcpy(v21, v9, v20);
  }
  if (*v16)
  {
    uint64_t v22 = a3[15];
    size_t result = DecodeDYMTLFunctionConstantValues((size_t)(v16 + 1), *v16, a3, a4);
  }

  else
  {
    uint64_t v22 = 0LL;
  }

  uint64_t v23 = a3[1];
  a3[1] = v23 + 48;
  if (a4)
  {
    *(void *)uint64_t v23 = v22;
    *(void *)(v23 + 8) = v12;
    *(void *)(v23 + 16) = 0LL;
    *(void *)(v23 + 24) = 0LL;
    *(void *)(v23 + 32) = v21;
    *(_BYTE *)(v23 + 40) = v8;
    *(_DWORD *)(v23 + 41) = 0;
    *(_DWORD *)(v23 + 44) = 0;
  }

  return result;
}

size_t DecodeDYMTLResidencySetDescriptor(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  int v8 = *(unsigned __int8 *)(a1 + 24);
  size_t result = a1 + 24;
  int v7 = v8;
  uint64_t v9 = *(void *)(result - 16);
  uint64_t v10 = *(void *)(result - 8);
  if (v8) {
    size_t v11 = (const char *)result;
  }
  else {
    size_t v11 = 0LL;
  }
  if (v7)
  {
    size_t result = strlen(v11);
    uint64_t v12 = a3 + 52;
    uint64_t v13 = a3[52];
    size_t v14 = result + 1;
    if (result != -1LL)
    {
      uint64_t v15 = (void *)a3[52];
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v12 = a3 + 52;
    uint64_t v13 = a3[52];
  }

  size_t v14 = 0LL;
  uint64_t v15 = 0LL;
LABEL_9:
  *uint64_t v12 = v13 + v14;
  if ((a4 & 1) != 0)
  {
    size_t result = (size_t)memcpy(v15, v11, v14);
    uint64_t v16 = *a3;
    *a3 += 24LL;
    *(void *)uint64_t v16 = v10;
    *(void *)(v16 + 8) = v15;
    *(_BYTE *)(v16 + 16) = v9;
    *(_DWORD *)(v16 + 1memset(v56, 0, 7) = 0;
    *(_DWORD *)(v16 + 20) = 0;
  }

  else
  {
    *a3 += 24LL;
  }

  return result;
}

int16x4_t DecodeDYIOSurface(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  size_t v43 = 0LL;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  unsigned int v6 = *(_DWORD *)a1;
  __int128 v37 = *(_OWORD *)(a1 + 8);
  WORD6(v42[0]) = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 48);
  int16x4_t result = vmovn_s32(vuzp1q_s32(*(int32x4_t *)(a1 + 32), *(int32x4_t *)(a1 + 56)));
  *(int16x4_t *)((char *)v42 + 14) = result;
  uint64_t v9 = *(void *)(a1 + 80);
  *(void *)&v42[0] = __PAIR64__(*(void *)(a1 + 72), v7);
  uint64_t v10 = (int32x4_t *)(a1 + 88);
  BYTE6(v42[1]) = v9;
  uint64_t v11 = v9;
  if ((_BYTE)v9)
  {
    uint64_t v12 = (int16x4_t *)((char *)&v38 + 12);
    do
    {
      int32x4_t v13 = *v10;
      v12[-2].i32[1] = v10[1].i64[1];
      *(int32x2_t *)v13.i8 = vmovn_s64((int64x2_t)v13);
      LODWORD(v14) = v10[1].i32[0];
      HIDWORD(v14) = v10[2].i32[0];
      v13.i64[1] = v14;
      int16x4_t result = vmovn_s32(v13);
      v12[-1] = result;
      uint64_t v15 = v10[2].i64[1];
      v10 += 3;
      v12->i16[0] = v15;
      v12 += 2;
      --v11;
    }

    while (v11);
  }

  DWORD2(v42[0]) = v10->i64[0];
  if (v6 <= 0x29)
  {
    uint64_t v18 = (int32x4_t *)*((void *)&v42[1] + 1);
    size_t v16 = v43;
  }

  else
  {
    size_t v16 = v10->u64[1];
    int v17 = v10 + 1;
    if (v16) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0LL;
    }
    if (v6 >= 0x2E)
    {
      if (v16) {
        uint64_t v19 = *(void **)(a3 + 416);
      }
      else {
        uint64_t v19 = 0LL;
      }
      *(void *)(a3 + 416) += v16;
      if (a4) {
        memcpy(v19, v18, v16);
      }
      goto LABEL_30;
    }
  }

  if (!v18) {
    goto LABEL_29;
  }
  CFErrorRef error = 0LL;
  size_t v20 = -[NSData initWithBytesNoCopy:length:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytesNoCopy:length:freeWhenDone:",  v18,  v16,  0LL);
  uint64_t v21 = (void *)CFPropertyListCreateWithData(0LL, (CFDataRef)v20, 0LL, 0LL, &error);
  if (error)
  {
    uint64_t v22 = CFErrorCopyDescription(error);
    uint64_t v23 = v22;
    if (s_logUsingOsLog)
    {
      id v24 = gt_default_log();
      uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        CStringPtr = CFStringGetCStringPtr(v23, 0x8000100u);
        *(_DWORD *)__int128 buf = 136315138;
        uint64_t v46 = CStringPtr;
        _os_log_error_impl(&dword_0, v25, OS_LOG_TYPE_ERROR, "warning: %s", buf, 0xCu);
      }
    }

    else
    {
      char v27 = __stderrp;
      uint64_t v28 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"warning: %s",  CFStringGetCStringPtr(v22, 0x8000100u));
      uint64_t v25 = (os_log_s *) objc_claimAutoreleasedReturnValue(v28);
      fprintf(v27, "%s\n", (const char *)-[os_log_s UTF8String](v25, "UTF8String"));
    }

    CFRelease(v23);
    CFRelease(error);
  }

  if (v21)
  {
    unint64_t v29 = objc_autoreleasePoolPush();
    id v30 = objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v21, 1LL, 0LL));
    id v31 = [v30 bytes];
    size_t v32 = (size_t)[v30 length];
    size_t v16 = v32;
    if (v32) {
      uint64_t v19 = *(void **)(a3 + 416);
    }
    else {
      uint64_t v19 = 0LL;
    }
    *(void *)(a3 + 416) += v32;
    if (a4) {
      memcpy(v19, v31, v32);
    }

    objc_autoreleasePoolPop(v29);
  }

  else
  {
LABEL_29:
    uint64_t v19 = 0LL;
    size_t v16 = 0LL;
  }

size_t DecodeDYMTLDeviceDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  size_t v7 = *(void *)a1;
  uint64_t v8 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v9 = (const char *)(a1 + 16);
  size_t result = strlen((const char *)(a1 + 16));
  uint64_t v11 = &v9[result & 0xFFFFFFFFFFFFFFF8LL];
  int v12 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16)) {
    int32x4_t v13 = v9;
  }
  else {
    int32x4_t v13 = 0LL;
  }
  uint64_t v60 = v13;
  uint64_t v14 = v11 + 40;
  __int16 v57 = *((_WORD *)v11 + 4);
  char v58 = v11[32];
  __int16 v55 = *((_WORD *)v11 + 12);
  __int16 v56 = *((_WORD *)v11 + 8);
  if (v8 == 1)
  {
    uint64_t v15 = 0LL;
    size_t v16 = 0LL;
    int v17 = 0LL;
    char v18 = 0;
    char v54 = 0;
  }

  else
  {
    uint64_t v19 = &v14[strlen(v14) & 0xFFFFFFFFFFFFFFF8LL];
    if (*v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0LL;
    }
    char v20 = v8;
    char v21 = v7;
    size_t v7 = (size_t)&v19[(strlen(v19 + 8) & 0xFFFFFFFFFFFFFFF8LL) + 8];
    uint64_t v22 = (const char *)(v7 + 8);
    if (v19[8]) {
      size_t v16 = v19 + 8;
    }
    else {
      size_t v16 = 0LL;
    }
    size_t result = strlen((const char *)(v7 + 8));
    uint64_t v23 = &v22[result & 0xFFFFFFFFFFFFFFF8LL];
    int v24 = *(unsigned __int8 *)(v7 + 8);
    LOBYTE(vmemset(v56, 0, 7) = v21;
    LOBYTE(v8) = v20;
    if (v24) {
      int v17 = v22;
    }
    else {
      int v17 = 0LL;
    }
    char v18 = v23[8];
    uint64_t v14 = v23 + 24;
    char v54 = v23[16];
  }

  if (v7 < 0xCu)
  {
    uint64_t v47 = 0LL;
    uint64_t v49 = 0LL;
    uint64_t v50 = 0LL;
    char v52 = 0;
    char v48 = 0;
    __int128 v53 = 0u;
    int16x8_t v51 = 0u;
    __int128 v59 = 0u;
    if (v12) {
      goto LABEL_34;
    }
    goto LABEL_39;
  }

  __int128 v53 = *(_OWORD *)v14;
  if (v7 < 0xFu)
  {
    uint64_t v47 = 0LL;
    BYTE4(v49) = 0;
    char v52 = 0;
    goto LABEL_25;
  }

  char v52 = v14[16];
  if (v7 < 0x19u)
  {
    uint64_t v47 = 0LL;
    BYTE4(v49) = 0;
LABEL_25:
    uint64_t v50 = 0LL;
    char v48 = 0;
    LOBYTE(v49) = 0;
    __int128 v59 = 0u;
    int16x8_t v51 = 0u;
    if (v12) {
      goto LABEL_34;
    }
    goto LABEL_39;
  }

  uint64_t v25 = v14 + 32;
  int16x8_t v26 = 0uLL;
  __int128 v59 = 0u;
  if (*((void *)v14 + 3) == -1LL)
  {
    uint64_t v50 = 0LL;
  }

  else
  {
    v27.i32[0] = *((void *)v14 + 3);
    v27.i32[1] = *(_DWORD *)v25;
    int16x8_t v26 = vuzp1q_s16( (int16x8_t)vmovn_hight_s64(v27, *(int64x2_t *)(v14 + 40)),  (int16x8_t)vuzp1q_s32(*(int32x4_t *)(v14 + 56), *(int32x4_t *)(v14 + 72)));
    uint64_t v25 = v14 + 104;
    LOWORD(v50) = *((_WORD *)v14 + 48);
    WORD2(v50) = *((_WORD *)v14 + 44);
  }

  int16x8_t v51 = v26;
  if (v7 < 0x1Cu)
  {
    uint64_t v47 = 0LL;
    BYTE4(v49) = 0;
    goto LABEL_32;
  }

  BYTE4(v49) = *v25;
  if (v7 == 28)
  {
    uint64_t v47 = 0LL;
LABEL_32:
    LOBYTE(v49) = 0;
    goto LABEL_33;
  }

  LOBYTE(v49) = v25[8];
  if (v7 < 0x2Cu)
  {
    uint64_t v47 = 0LL;
LABEL_33:
    char v48 = 0;
    if (v12) {
      goto LABEL_34;
    }
LABEL_39:
    unint64_t v29 = (void *)(a3 + 416);
    uint64_t v30 = *(void *)(a3 + 416);
    uint64_t v28 = v60;
    goto LABEL_40;
  }

  uint64_t v47 = *((void *)v25 + 2);
  __int128 v59 = *(_OWORD *)(v25 + 24);
  char v48 = v25[40];
  if (!v12) {
    goto LABEL_39;
  }
LABEL_34:
  uint64_t v28 = v60;
  size_t result = strlen(v60);
  unint64_t v29 = (void *)(a3 + 416);
  uint64_t v30 = *(void *)(a3 + 416);
  size_t v31 = result + 1;
  if (result != -1LL)
  {
    size_t v32 = *(void **)(a3 + 416);
    goto LABEL_41;
  }

size_t DecodeDYMTLCounterSampleBufferDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  size_t v7 = (char *)(a1 + 8);
  size_t v8 = (strlen((const char *)(a1 + 8)) & 0xFFFFFFFFFFFFFFF8LL) + a1 + 8;
  int v9 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8)) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = 0LL;
  }
  __int128 __s = v10;
  size_t v11 = (strlen((const char *)(v8 + 8)) & 0xFFFFFFFFFFFFFFF8LL) + v8 + 8;
  int v53 = *(unsigned __int8 *)(v8 + 8);
  if (*(_BYTE *)(v8 + 8)) {
    int v12 = (char *)(v8 + 8);
  }
  else {
    int v12 = 0LL;
  }
  __int16 v55 = v12;
  unsigned int v13 = *(_DWORD *)(v11 + 16);
  uint64_t v14 = (const char *)(v11 + 24);
  unsigned int v52 = v13;
  if (v13)
  {
    uint64_t v51 = a3[49];
    while (1)
    {
      uint64_t v15 = &v14[strlen(v14) & 0xFFFFFFFFFFFFFFF8LL];
      size_t v16 = v15 + 8;
      int v17 = *(unsigned __int8 *)v14;
      if (*v14) {
        char v18 = v14;
      }
      else {
        char v18 = 0LL;
      }
      size_t v19 = strlen(v15 + 8);
      int v20 = *((unsigned __int8 *)v15 + 8);
      if (v20) {
        char v21 = v16;
      }
      else {
        char v21 = 0LL;
      }
      if (v17)
      {
        size_t v22 = strlen(v18);
        uint64_t v23 = a3[52];
        size_t v24 = v22 + 1;
        if (v22 != -1LL)
        {
          uint64_t v25 = (void *)a3[52];
          goto LABEL_20;
        }
      }

      else
      {
        uint64_t v23 = a3[52];
      }

      size_t v24 = 0LL;
      uint64_t v25 = 0LL;
LABEL_20:
      a3[52] = v23 + v24;
      if (a4) {
        memcpy(v25, v18, v24);
      }
      if (!v20)
      {
        uint64_t v27 = a3[52];
LABEL_26:
        size_t v28 = 0LL;
        unint64_t v29 = 0LL;
        goto LABEL_27;
      }

      size_t v26 = strlen(v21);
      uint64_t v27 = a3[52];
      size_t v28 = v26 + 1;
      if (v26 == -1LL) {
        goto LABEL_26;
      }
      unint64_t v29 = (void *)a3[52];
LABEL_27:
      a3[52] = v27 + v28;
      if ((a4 & 1) != 0)
      {
        memcpy(v29, v21, v28);
        uint64_t v30 = (void *)a3[49];
        a3[49] = v30 + 2;
        *uint64_t v30 = v25;
        v30[1] = v29;
      }

      else
      {
        a3[49] += 16LL;
      }

      uint64_t v14 = &v16[(v19 & 0xFFFFFFFFFFFFFFF8LL) + 8];
      if (!--v13) {
        goto LABEL_33;
      }
    }
  }

  uint64_t v51 = 0LL;
LABEL_33:
  size_t result = strlen(v14);
  size_t v32 = &v14[result & 0xFFFFFFFFFFFFFFF8LL];
  int v33 = *(unsigned __int8 *)v14;
  if (*v14) {
    uint64_t v34 = v14;
  }
  else {
    uint64_t v34 = 0LL;
  }
  uint64_t v35 = *((void *)v32 + 1);
  uint64_t v36 = *((void *)v32 + 2);
  if (v9)
  {
    size_t result = strlen(__s);
    __int128 v37 = a3 + 52;
    uint64_t v38 = a3[52];
    size_t v39 = result + 1;
    if (result != -1LL)
    {
      size_t v40 = (void *)a3[52];
      __int128 v41 = v55;
      goto LABEL_41;
    }
  }

  else
  {
    __int128 v37 = a3 + 52;
    uint64_t v38 = a3[52];
  }

  __int128 v41 = v55;
  size_t v39 = 0LL;
  size_t v40 = 0LL;
LABEL_41:
  *__int128 v37 = v38 + v39;
  if (a4) {
    size_t result = (size_t)memcpy(v40, __s, v39);
  }
  if (v53)
  {
    size_t result = strlen(v41);
    size_t v42 = a3 + 52;
    uint64_t v43 = a3[52];
    size_t v44 = result + 1;
    if (result != -1LL)
    {
      __int128 v45 = (void *)a3[52];
      goto LABEL_48;
    }
  }

  else
  {
    size_t v42 = a3 + 52;
    uint64_t v43 = a3[52];
  }

  size_t v44 = 0LL;
  __int128 v45 = 0LL;
LABEL_48:
  *size_t v42 = v43 + v44;
  if (a4) {
    size_t result = (size_t)memcpy(v45, v41, v44);
  }
  if (v33)
  {
    size_t result = strlen(v34);
    uint64_t v46 = a3 + 52;
    uint64_t v47 = a3[52];
    size_t v48 = result + 1;
    if (result != -1LL)
    {
      uint64_t v49 = (void *)a3[52];
      goto LABEL_55;
    }
  }

  else
  {
    uint64_t v46 = a3 + 52;
    uint64_t v47 = a3[52];
  }

  size_t v48 = 0LL;
  uint64_t v49 = 0LL;
LABEL_55:
  void *v46 = v47 + v48;
  if ((a4 & 1) != 0)
  {
    size_t result = (size_t)memcpy(v49, v34, v48);
    uint64_t v50 = a3[38];
    a3[38] = v50 + 48;
    *(void *)uint64_t v50 = v49;
    *(void *)(v50 + 8) = v40;
    *(void *)(v50 + 16) = v45;
    *(void *)(v50 + 24) = v51;
    *(void *)(v50 + 32) = v52;
    *(_DWORD *)(v50 + 40) = v36;
    *(_BYTE *)(v50 + 44) = v35;
    *(_WORD *)(v50 + 45) = 0;
    *(_BYTE *)(v50 + 4memset(v56, 0, 7) = 0;
  }

  else
  {
    a3[38] += 48LL;
  }

  return result;
}

size_t DecodeDYMTLAccelerationStructureDescriptor(size_t result, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  unsigned int v8 = *(_DWORD *)result;
  int v9 = *(unsigned __int8 *)(result + 8);
  unsigned int v104 = *(unsigned __int8 *)(result + 16);
  char v105 = *(_BYTE *)(result + 8);
  if (v9 == 3)
  {
    if (v8 < 0x4E)
    {
      unint64_t v65 = 0LL;
      char v66 = 0;
      char v67 = 0;
      if (!a4) {
        goto LABEL_193;
      }
    }

    else
    {
      unint64_t v65 = *(void *)(result + 120);
      char v66 = *(_BYTE *)(result + 128);
      char v67 = *(_BYTE *)(result + 136);
      if (!a4) {
        goto LABEL_193;
      }
    }

    uint64_t v94 = *(void *)(result + 24);
    uint64_t v107 = *(void *)(result + 32);
    unint64_t v92 = *(void *)(result + 40);
    unint64_t v90 = *(void *)(result + 48);
    uint64_t v86 = *(void *)(result + 56);
    uint64_t v85 = *(void *)(result + 64);
    unint64_t v70 = *(void *)(result + 72);
    unint64_t v69 = *(void *)(result + 80);
    int64x2_t v95 = *(int64x2_t *)(result + 88);
    int v79 = *(_DWORD *)(result + 104);
    char v78 = *(_BYTE *)(result + 112);
    if (a5)
    {
      int64x2_t v125 = *(int64x2_t *)(result + 88);
      char v127 = *(_BYTE *)(result + 112);
      uint64_t v129 = *(void *)(result + 64);
      char v132 = v67;
      AliasStream2 = (uint64_t *)GetAliasStream2(a5, v94);
      char v136 = v66;
      if (AliasStream2) {
        uint64_t v97 = *AliasStream2;
      }
      else {
        uint64_t v97 = 0LL;
      }
      uint64_t v99 = (unint64_t *)GetAliasStream2(a5, v92);
      if (v99) {
        unint64_t v92 = *v99;
      }
      else {
        unint64_t v92 = 0LL;
      }
      uint64_t v100 = (uint64_t *)GetAliasStream2(a5, v86);
      if (v100) {
        uint64_t v86 = *v100;
      }
      else {
        uint64_t v86 = 0LL;
      }
      char v101 = (unint64_t *)GetAliasStream2(a5, v70);
      if (v101) {
        unint64_t v70 = *v101;
      }
      else {
        unint64_t v70 = 0LL;
      }
      size_t result = v104;
      uint64_t v93 = v97;
      char v66 = v136;
      char v67 = v132;
      uint64_t v85 = v129;
      char v78 = v127;
      int64x2_t v95 = v125;
    }

    else
    {
      size_t result = *(unsigned __int8 *)(result + 16);
      uint64_t v93 = v94;
    }

    int32x2_t v98 = vmovn_s64(v95);
    unint64_t v91 = HIDWORD(v92);
    unint64_t v89 = HIDWORD(v90);
    unint64_t v88 = v90 >> 40;
    unint64_t v87 = HIWORD(v90);
    unint64_t v84 = HIDWORD(v70);
    uint64_t v83 = HIDWORD(v69);
    uint64_t v82 = v65 >> 8;
    unint64_t v80 = v65 & 0xFFFFFFFFFF000000LL;
    uint64_t v81 = v65 >> 16;
    goto LABEL_192;
  }

  unsigned int v126 = *(_DWORD *)result;
  if (v9 == 2)
  {
    uint64_t v107 = *(void *)(result + 24);
    unint64_t v135 = *(void *)(result + 32);
    int v68 = *(_DWORD *)(result + 40);
    LODWORD(v69) = *(_DWORD *)(result + 48);
    unint64_t v70 = *(unsigned int *)(result + 56);
    unint64_t v71 = (uint64_t *)(result + 64);
    uint64_t v72 = (uint64_t *)a3[50];
    a3[50] = &v72[v70];
    if (!a4) {
      goto LABEL_151;
    }
    if (a5)
    {
      size_t result = GetAliasStream2(a5, v107);
      if (!result)
      {
        uint64_t v107 = 0LL;
        if (!v70) {
          goto LABEL_151;
        }
        goto LABEL_145;
      }

      uint64_t v107 = *(void *)result;
    }

    if (!v70) {
      goto LABEL_151;
    }
LABEL_145:
    __int128 v73 = v72;
    unint64_t v74 = v70;
    do
    {
      uint64_t v76 = *v71++;
      uint64_t v75 = v76;
      if (a5)
      {
        size_t result = GetAliasStream2(a5, v75);
        if (result) {
          uint64_t v75 = *(void *)result;
        }
        else {
          uint64_t v75 = 0LL;
        }
      }

      *v73++ = v75;
      --v74;
    }

    while (v74);
LABEL_151:
    if (v126 < 0x39)
    {
      LOBYTE(v65) = 0;
      LODWORD(v83) = 0;
      uint64_t v86 = 0LL;
      unint64_t v77 = 0LL;
      uint64_t v85 = 0LL;
      LOBYTE(v82) = 0;
      LOBYTE(v81) = 0;
      uint64_t v93 = (uint64_t)v72;
      LODWORD(v84) = v68;
      if (!a4) {
        goto LABEL_193;
      }
    }

    else
    {
      LOBYTE(v65) = *(_BYTE *)v71;
      unint64_t v77 = v71[1];
      if (a5)
      {
        size_t result = GetAliasStream2(a5, v77);
        if (result) {
          unint64_t v77 = *(void *)result;
        }
        else {
          unint64_t v77 = 0LL;
        }
      }

      uint64_t v93 = (uint64_t)v72;
      LODWORD(v84) = v68;
      uint64_t v86 = v71[2];
      uint64_t v83 = v71[3];
      if (v126 < 0x4E)
      {
        uint64_t v85 = 0LL;
        LOBYTE(v82) = 0;
        LOBYTE(v81) = 0;
        if (!a4) {
          goto LABEL_193;
        }
      }

      else
      {
        uint64_t v85 = v71[4];
        uint64_t v82 = v71[5];
        uint64_t v81 = v71[6];
        if (!a4) {
          goto LABEL_193;
        }
      }
    }

    char v67 = 0;
    char v66 = 0;
    char v78 = 0;
    int v79 = 0;
    unint64_t v80 = 0LL;
    unint64_t v91 = HIDWORD(v77);
    LODWORD(v90) = v135;
    unint64_t v89 = HIDWORD(v135);
    unint64_t v88 = v135 >> 40;
    unint64_t v87 = HIWORD(v135);
    int32x2_t v98 = 0LL;
    LODWORD(v92) = v77;
    goto LABEL_179;
  }

  if (v9 == 1)
  {
    unint64_t v10 = result + 32;
    uint64_t v107 = *(void *)(result + 24);
    if (v107)
    {
      uint64_t v11 = 0LL;
      uint64_t v103 = a3[37];
      while (2)
      {
        int v12 = (int32x2_t *)a3[37];
        a3[37] = v12 + 17;
        __int8 v115 = *(_BYTE *)(v10 + 16);
        __int8 v116 = *(_BYTE *)v10;
        __int32 v113 = *(_DWORD *)(v10 + 8);
        __int8 v114 = *(_BYTE *)(v10 + 24);
        switch(*(_BYTE *)v10)
        {
          case 1:
            if (v8 < 0x3C)
            {
              uint64_t v15 = 0LL;
              uint64_t v14 = 0LL;
              uint64_t v16 = 0LL;
              int v17 = (const char *)(v10 + 88);
              uint64_t v13 = 30LL;
              if (!a4) {
                goto LABEL_85;
              }
            }

            else
            {
              uint64_t v13 = *(unsigned __int8 *)(v10 + 88);
              uint64_t v15 = *(void *)(v10 + 96);
              uint64_t v14 = *(void *)(v10 + 104);
              if (v8 < 0x4E)
              {
                uint64_t v16 = 0LL;
                int v17 = (const char *)(v10 + 112);
                if (!a4) {
                  goto LABEL_85;
                }
              }

              else
              {
                uint64_t v16 = *(unsigned __int8 *)(v10 + 112);
                int v17 = (const char *)(v10 + 120);
                if (!a4) {
                  goto LABEL_85;
                }
              }
            }

            uint64_t v119 = v13;
            uint64_t v117 = v16;
            uint64_t v128 = v15;
            uint64_t v120 = v14;
            int32x2_t v130 = *(int32x2_t *)(v10 + 40);
            uint64_t v48 = *(void *)(v10 + 56);
            uint64_t v121 = *(void *)(v10 + 48);
            v124.i8[0] = *(_BYTE *)(v10 + 72);
            int32x2_t v122 = *(int32x2_t *)(v10 + 64);
            uint64_t v123 = *(void *)(v10 + 80);
            if (!a5)
            {
              uint64_t v118 = *(void *)(v10 + 32);
              uint64_t v133 = *(void *)(v10 + 56);
              goto LABEL_87;
            }

            uint64_t v49 = (uint64_t *)GetAliasStream2(a5, *(void *)(v10 + 32));
            if (v49) {
              uint64_t v118 = *v49;
            }
            else {
              uint64_t v118 = 0LL;
            }
            unsigned int v52 = (uint64_t *)GetAliasStream2(a5, v48);
            if (v52) {
              uint64_t v53 = *v52;
            }
            else {
              uint64_t v53 = 0LL;
            }
            uint64_t v55 = v128;
            uint64_t v133 = v53;
            uint64_t v54 = a5;
            goto LABEL_109;
          case 2:
            int v17 = (const char *)(v10 + 64);
            if (!a4) {
              goto LABEL_85;
            }
            int32x2_t v122 = *(int32x2_t *)(v10 + 40);
            uint64_t v120 = *(void *)(v10 + 48);
            uint64_t v128 = *(void *)(v10 + 56);
            if (a5)
            {
              size_t result = GetAliasStream2(a5, *(void *)(v10 + 32));
              if (result)
              {
                uint64_t v123 = 0LL;
                uint64_t v118 = 0LL;
                int32x2_t v130 = 0LL;
                uint64_t v121 = 0LL;
                v124.i8[0] = 0;
                uint64_t v117 = 0LL;
                uint64_t v119 = 0LL;
                unint64_t v18 = 0LL;
                uint64_t v111 = 0LL;
                uint64_t v112 = 0LL;
                uint64_t v109 = 0LL;
                uint64_t v110 = 0LL;
                uint64_t v108 = 0LL;
                uint64_t v133 = *(void *)result;
                goto LABEL_111;
              }

              uint64_t v133 = 0LL;
            }

            else
            {
              uint64_t v133 = *(void *)(v10 + 32);
            }

            goto LABEL_86;
          case 3:
            int32x2_t v19 = *(int32x2_t *)(v10 + 32);
            unint64_t v20 = v10 + 40;
            int32x2_t v130 = v19;
            if (v19)
            {
              uint64_t v118 = a3[43];
              do
              {
                char v21 = (uint64_t *)a3[43];
                a3[43] = v21 + 2;
                if (a4)
                {
                  uint64_t v22 = *(void *)v20;
                  uint64_t v23 = *(void *)(v20 + 8);
                  if (a5)
                  {
                    size_t result = GetAliasStream2(a5, v22);
                    if (result) {
                      uint64_t v22 = *(void *)result;
                    }
                    else {
                      uint64_t v22 = 0LL;
                    }
                  }

                  *char v21 = v22;
                  v21[1] = v23;
                }

                v20 += 16LL;
                --*(void *)&v19;
              }

              while (v19);
            }

            else
            {
              uint64_t v118 = 0LL;
            }

            uint64_t v121 = *(void *)(v20 + 8);
            uint64_t v133 = *(void *)(v20 + 16);
            v124.i8[0] = *(_BYTE *)(v20 + 32);
            uint64_t v123 = *(void *)(v20 + 40);
            if (v8 <= 0x3B)
            {
              uint64_t v128 = 0LL;
              uint64_t v117 = 0LL;
              int v17 = (const char *)(v20 + 48);
              uint64_t v119 = 30LL;
              uint64_t v120 = 0LL;
              if (!a4) {
                goto LABEL_85;
              }
            }

            else
            {
              uint64_t v119 = *(unsigned __int8 *)(v20 + 48);
              uint64_t v128 = *(void *)(v20 + 56);
              uint64_t v120 = *(void *)(v20 + 64);
              if (v8 < 0x4E)
              {
                uint64_t v117 = 0LL;
                int v17 = (const char *)(v20 + 72);
                if (!a4)
                {
LABEL_85:
                  uint64_t v133 = 0LL;
                  int32x2_t v122 = 0LL;
                  uint64_t v128 = 0LL;
                  uint64_t v120 = 0LL;
LABEL_86:
                  uint64_t v123 = 0LL;
                  uint64_t v118 = 0LL;
                  int32x2_t v130 = 0LL;
                  uint64_t v121 = 0LL;
                  v124.i8[0] = 0;
                  uint64_t v117 = 0LL;
                  uint64_t v119 = 0LL;
                  goto LABEL_87;
                }
              }

              else
              {
                uint64_t v117 = *(unsigned __int8 *)(v20 + 72);
                int v17 = (const char *)(v20 + 80);
                if (!a4) {
                  goto LABEL_85;
                }
              }
            }

            int32x2_t v122 = *(int32x2_t *)(v20 + 24);
            if (!a5) {
              goto LABEL_87;
            }
            uint64_t v50 = (uint64_t *)GetAliasStream2(a5, v133);
            if (v50) {
              uint64_t v133 = *v50;
            }
            else {
              uint64_t v133 = 0LL;
            }
            uint64_t v54 = a5;
            uint64_t v55 = v128;
LABEL_109:
            size_t result = GetAliasStream2(v54, v55);
            if (!result)
            {
              uint64_t v128 = 0LL;
LABEL_87:
              unint64_t v18 = 0LL;
              uint64_t v111 = 0LL;
              uint64_t v112 = 0LL;
              uint64_t v109 = 0LL;
              uint64_t v110 = 0LL;
              uint64_t v108 = 0LL;
              goto LABEL_111;
            }

            unint64_t v18 = 0LL;
            uint64_t v111 = 0LL;
            uint64_t v112 = 0LL;
            uint64_t v109 = 0LL;
            uint64_t v110 = 0LL;
            uint64_t v108 = 0LL;
            uint64_t v128 = *(void *)result;
LABEL_111:
            if (v8 < 0x38)
            {
              uint64_t v60 = 0LL;
              uint64_t v61 = 0LL;
              int32x2_t v62 = 0LL;
              int32x2_t v63 = 0LL;
              unint64_t v10 = (unint64_t)v17;
              if (!a4) {
                goto LABEL_134;
              }
              goto LABEL_128;
            }

            size_t result = strlen(v17);
            size_t v56 = result;
            if (*v17) {
              __int16 v57 = v17;
            }
            else {
              __int16 v57 = 0LL;
            }
            if (*v17)
            {
              size_t result = strlen(v57);
              uint64_t v58 = a3[52];
              size_t v59 = result + 1;
              if (result != -1LL)
              {
                uint64_t v60 = (void *)a3[52];
                goto LABEL_122;
              }
            }

            else
            {
              uint64_t v58 = a3[52];
            }

            size_t v59 = 0LL;
            uint64_t v60 = 0LL;
LABEL_122:
            a3[52] = v58 + v59;
            if (a4) {
              size_t result = (size_t)memcpy(v60, v57, v59);
            }
            unint64_t v10 = (unint64_t)&v17[(v56 & 0xFFFFFFFFFFFFFFF8LL) + 8];
            if (v126 < 0x3D)
            {
              uint64_t v61 = 0LL;
              int32x2_t v62 = 0LL;
              int32x2_t v63 = 0LL;
              if (!a4) {
                goto LABEL_134;
              }
            }

            else
            {
              uint64_t v61 = *(void *)v10;
              int32x2_t v62 = *(int32x2_t *)&v17[(v56 & 0xFFFFFFFFFFFFFFF8LL) + 16];
              int64x2_t v64 = *(int64x2_t *)(v10 + 16);
              v10 += 32LL;
              int32x2_t v63 = vmovn_s64(v64);
              if (!a4) {
                goto LABEL_134;
              }
            }

LABEL_128:
            if (a5)
            {
              int32x2_t v106 = v63;
              size_t result = GetAliasStream2(a5, v61);
              if (result) {
                uint64_t v61 = *(void *)result;
              }
              else {
                uint64_t v61 = 0LL;
              }
              int32x2_t v63 = v106;
            }

            *int v12 = (int32x2_t)v60;
            v12[1] = (int32x2_t)v61;
            v12[2] = v62;
            v12[3] = v63;
            v12[4].i32[0] = v113;
            v12[4].i8[4] = v116;
            v12[4].i8[5] = v115;
            v12[4].i8[6] = v114;
            v12[4].i8[7] = 0;
            v12[5] = (int32x2_t)v133;
            v12[6] = v122;
            v12[7] = (int32x2_t)v128;
            v12[8] = (int32x2_t)v120;
            v12[9] = (int32x2_t)v123;
            v12[10] = (int32x2_t)v118;
            v12[11] = v130;
            v12[12] = (int32x2_t)v121;
            v12[13] = (int32x2_t)(v18 | (v119 << 16) | (v117 << 8) | v124.u8[0]);
            v12[14] = (int32x2_t)v112;
            v12[15] = (int32x2_t)v111;
            v12[16].i8[0] = BYTE4(v110);
            v12[16].i8[1] = v110;
            v12[16].i8[2] = BYTE4(v109);
            v12[16].i8[3] = v109;
            v12[16].i8[4] = BYTE4(v108);
            v12[16].i8[5] = v108;
            v12[16].i16[3] = 0;
LABEL_134:
            ++v11;
            unsigned int v8 = v126;
            if (v11 != v107) {
              continue;
            }
            uint64_t v93 = v103;
            break;
          case 4:
            int32x2_t v24 = *(int32x2_t *)(v10 + 32);
            uint64_t v25 = (uint64_t *)(v10 + 40);
            int32x2_t v122 = v24;
            if (v24)
            {
              uint64_t v133 = a3[43];
              do
              {
                size_t v26 = (uint64_t *)a3[43];
                a3[43] = v26 + 2;
                if (a4)
                {
                  uint64_t v27 = *v25;
                  uint64_t v28 = v25[1];
                  if (a5)
                  {
                    size_t result = GetAliasStream2(a5, v27);
                    if (result) {
                      uint64_t v27 = *(void *)result;
                    }
                    else {
                      uint64_t v27 = 0LL;
                    }
                  }

                  *size_t v26 = v27;
                  v26[1] = v28;
                }

                v25 += 2;
                --*(void *)&v24;
              }

              while (v24);
            }

            else
            {
              uint64_t v133 = 0LL;
            }

            int v17 = (const char *)(v25 + 3);
            if ((a4 & 1) == 0) {
              goto LABEL_85;
            }
            uint64_t v123 = 0LL;
            uint64_t v118 = 0LL;
            int32x2_t v130 = 0LL;
            uint64_t v121 = 0LL;
            v124.i8[0] = 0;
            uint64_t v117 = 0LL;
            uint64_t v119 = 0LL;
            unint64_t v18 = 0LL;
            uint64_t v111 = 0LL;
            uint64_t v112 = 0LL;
            uint64_t v109 = 0LL;
            uint64_t v110 = 0LL;
            uint64_t v108 = 0LL;
            uint64_t v128 = v25[2];
            uint64_t v120 = v25[1];
            goto LABEL_111;
          case 5:
            int v17 = (const char *)(v10 + 168);
            if (!a4) {
              goto LABEL_85;
            }
            uint64_t v29 = *(void *)(v10 + 32);
            v124.i64[0] = *(void *)(v10 + 80);
            size_t result = *(unsigned __int8 *)(v10 + 144);
            uint64_t v121 = *(void *)(v10 + 56);
            int32x2_t v122 = *(int32x2_t *)(v10 + 40);
            uint64_t v120 = *(void *)(v10 + 72);
            uint64_t v128 = *(void *)(v10 + 64);
            uint64_t v118 = *(void *)(v10 + 96);
            uint64_t v123 = *(void *)(v10 + 88);
            uint64_t v111 = *(void *)(v10 + 104);
            uint64_t v112 = *(void *)(v10 + 112);
            LOBYTE(v110) = *(_BYTE *)(v10 + 152);
            BYTE4(v110) = *(_BYTE *)(v10 + 120);
            LOBYTE(v109) = *(_BYTE *)(v10 + 160);
            BYTE4(v109) = *(_BYTE *)(v10 + 144);
            LOBYTE(v108) = *(_BYTE *)(v10 + 128);
            BYTE4(v108) = *(_BYTE *)(v10 + 136);
            if (!a5)
            {
              int32x2_t v130 = *(int32x2_t *)(v10 + 48);
              uint64_t v133 = *(void *)(v10 + 32);
              goto LABEL_106;
            }

            uint64_t v30 = *(void *)(v10 + 48);
            size_t v31 = (uint64_t *)GetAliasStream2(a5, v29);
            if (v31) {
              uint64_t v32 = *v31;
            }
            else {
              uint64_t v32 = 0LL;
            }
            uint64_t v51 = (int32x2_t *)GetAliasStream2(a5, v30);
            if (v51) {
              int32x2_t v130 = *v51;
            }
            else {
              int32x2_t v130 = 0LL;
            }
            uint64_t v133 = v32;
            uint64_t v47 = a5;
            uint64_t v46 = v123;
            goto LABEL_103;
          case 6:
            int32x2_t v33 = *(int32x2_t *)(v10 + 32);
            uint64_t v34 = (uint64_t *)(v10 + 40);
            int32x2_t v122 = v33;
            if (v33)
            {
              uint64_t v134 = a3[43];
              do
              {
                uint64_t v35 = (uint64_t *)a3[43];
                a3[43] = v35 + 2;
                if (a4)
                {
                  uint64_t v36 = *v34;
                  uint64_t v37 = v34[1];
                  if (a5)
                  {
                    size_t result = GetAliasStream2(a5, v36);
                    if (result) {
                      uint64_t v36 = *(void *)result;
                    }
                    else {
                      uint64_t v36 = 0LL;
                    }
                  }

                  *uint64_t v35 = v36;
                  v35[1] = v37;
                }

                v34 += 2;
                --*(void *)&v33;
              }

              while (v33);
              uint64_t v38 = v134;
            }

            else
            {
              uint64_t v38 = 0LL;
            }

            uint64_t v41 = *v34;
            size_t v39 = v34 + 1;
            uint64_t v40 = v41;
            uint64_t v133 = v38;
            uint64_t v121 = v41;
            if (v41)
            {
              int32x2_t v131 = (int32x2_t)a3[43];
              do
              {
                size_t v42 = (uint64_t *)a3[43];
                a3[43] = v42 + 2;
                if (a4)
                {
                  uint64_t v43 = *v39;
                  uint64_t v44 = v39[1];
                  if (a5)
                  {
                    size_t result = GetAliasStream2(a5, v43);
                    if (result) {
                      uint64_t v43 = *(void *)result;
                    }
                    else {
                      uint64_t v43 = 0LL;
                    }
                  }

                  *size_t v42 = v43;
                  v42[1] = v44;
                }

                v39 += 2;
                --v40;
              }

              while (v40);
              int32x2_t v45 = v131;
            }

            else
            {
              int32x2_t v45 = 0LL;
            }

            int v17 = (const char *)(v39 + 13);
            if ((a4 & 1) == 0) {
              goto LABEL_85;
            }
            uint64_t v128 = *v39;
            v124.i64[0] = v39[2];
            uint64_t v46 = v39[3];
            uint64_t v118 = v39[4];
            BYTE4(v110) = *((_BYTE *)v39 + 48);
            LOBYTE(v108) = *((_BYTE *)v39 + 56);
            BYTE4(v108) = *((_BYTE *)v39 + 64);
            uint64_t v111 = v39[5];
            uint64_t v112 = v39[9];
            BYTE4(v109) = *((_BYTE *)v39 + 80);
            LOBYTE(v110) = *((_BYTE *)v39 + 88);
            LOBYTE(v109) = *((_BYTE *)v39 + 96);
            int32x2_t v130 = v45;
            uint64_t v120 = v39[1];
            if (a5)
            {
              uint64_t v47 = a5;
LABEL_103:
              size_t result = GetAliasStream2(v47, v46);
              if (result) {
                uint64_t v123 = *(void *)result;
              }
              else {
                uint64_t v123 = 0LL;
              }
            }

            else
            {
              uint64_t v123 = v39[3];
            }

LABEL_106:
            uint64_t v117 = v124.u8[1];
            uint64_t v119 = v124.u8[2];
            unint64_t v18 = v124.i64[0] & 0xFFFFFFFFFF000000LL;
            goto LABEL_111;
          default:
            uint64_t v133 = 0LL;
            int32x2_t v122 = 0LL;
            uint64_t v128 = 0LL;
            uint64_t v120 = 0LL;
            uint64_t v123 = 0LL;
            uint64_t v118 = 0LL;
            int32x2_t v130 = 0LL;
            uint64_t v121 = 0LL;
            v124.i8[0] = 0;
            uint64_t v117 = 0LL;
            uint64_t v119 = 0LL;
            unint64_t v18 = 0LL;
            uint64_t v111 = 0LL;
            uint64_t v112 = 0LL;
            uint64_t v109 = 0LL;
            uint64_t v110 = 0LL;
            uint64_t v108 = 0LL;
            int v17 = (const char *)(v10 + 32);
            goto LABEL_111;
        }

        break;
      }
    }

    else
    {
      uint64_t v93 = 0LL;
    }

    if (v8 > 0x38)
    {
      LODWORD(v90) = *(_DWORD *)v10;
      LODWORD(v92) = *(_DWORD *)(v10 + 8);
      LOBYTE(v88) = *(_BYTE *)(v10 + 16);
      LOBYTE(v89) = *(_BYTE *)(v10 + 24);
      LODWORD(v91) = *(_DWORD *)(v10 + 32);
      if ((a4 & 1) == 0) {
        goto LABEL_193;
      }
      goto LABEL_168;
    }

    LOBYTE(v89) = 0;
    LODWORD(v90) = 0;
    LODWORD(v92) = 0;
    LOBYTE(v88) = 0;
    LODWORD(v91) = 1;
    if ((a4 & 1) != 0)
    {
LABEL_168:
      char v67 = 0;
      char v66 = 0;
      char v78 = 0;
      int v79 = 0;
      unint64_t v80 = 0LL;
      LOBYTE(v81) = 0;
      LOBYTE(v82) = 0;
      LOBYTE(v65) = 0;
      LODWORD(v83) = 0;
      LODWORD(v69) = 0;
      LODWORD(v84) = 0;
      LODWORD(v70) = 0;
      uint64_t v85 = 0LL;
      uint64_t v86 = 0LL;
      LOWORD(v8memset(v56, 0, 7) = 0;
      goto LABEL_169;
    }
  }

  else if (a4)
  {
    char v67 = 0;
    char v66 = 0;
    char v78 = 0;
    int v79 = 0;
    unint64_t v80 = 0LL;
    LOBYTE(v81) = 0;
    LOBYTE(v82) = 0;
    LOBYTE(v65) = 0;
    LODWORD(v83) = 0;
    LODWORD(v69) = 0;
    LODWORD(v84) = 0;
    LODWORD(v70) = 0;
    uint64_t v85 = 0LL;
    uint64_t v86 = 0LL;
    LOWORD(v8memset(v56, 0, 7) = 0;
    LOBYTE(v88) = 0;
    LOBYTE(v89) = 0;
    LODWORD(v90) = 0;
    LODWORD(v91) = 0;
    LODWORD(v92) = 0;
    uint64_t v107 = 0LL;
    uint64_t v93 = 0LL;
LABEL_169:
    int32x2_t v98 = 0LL;
LABEL_179:
    size_t result = v104;
LABEL_192:
    uint64_t v102 = a3[10];
    *(_BYTE *)uint64_t v102 = v105;
    *(_BYTE *)(v102 + 1) = result;
    *(_DWORD *)(v102 + 2) = 0;
    *(_WORD *)(v102 + 6) = 0;
    *(void *)(v102 + 8) = v93;
    *(void *)(v102 + 16) = v107;
    *(_DWORD *)(v102 + 24) = v92;
    *(_DWORD *)(v102 + 28) = v91;
    *(_DWORD *)(v102 + 32) = v90;
    *(_BYTE *)(v102 + 36) = v89;
    *(_BYTE *)(v102 + 3memset(v56, 0, 7) = v88;
    *(_WORD *)(v102 + 38) = v87;
    *(void *)(v102 + 40) = v86;
    *(void *)(v102 + 48) = v85;
    *(void *)(v102 + 56) = v70 | ((unint64_t)v84 << 32);
    *(void *)(v102 + 64) = v69 | ((unint64_t)v83 << 32);
    *(void *)(v102 + 72) = ((unint64_t)v81 << 16) | v80 | ((unint64_t)v82 << 8) | v65;
    *(int32x2_t *)(v102 + 80) = v98;
    *(_DWORD *)(v102 + 88) = v79;
    *(_BYTE *)(v102 + 92) = v78;
    *(_BYTE *)(v102 + 93) = v66;
    *(_BYTE *)(v102 + 94) = v67;
    *(_BYTE *)(v102 + 95) = 0;
  }

uint64_t DecodeDYMTLImageFilterFunctionInfoSPI(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    uint64_t v6 = 0LL;
    size_t v7 = (char *)(a1 + 16);
    do
    {
      char v8 = *v7;
      uint64_t v9 = *((void *)v7 + 1);
      v7 += 16;
      uint64_t v10 = *(void *)(a3 + 328);
      uint64_t v11 = v9;
      for (uint64_t i = v10; v11; --v11)
      {
        if (a4)
        {
          uint64_t v13 = *((void *)v7 + 2);
          *(_OWORD *)uint64_t i = *(_OWORD *)v7;
          *(void *)(i + 16) = v13;
          uint64_t i = *(void *)(a3 + 328);
        }

        v7 += 24;
        i += 24LL;
        *(void *)(a3 + 328) = i;
      }

      uint64_t v14 = *(void *)(a3 + 256);
      if ((a4 & 1) != 0)
      {
        *(_BYTE *)uint64_t v14 = v8;
        *(void *)(v14 + 8) = v9;
        *(void *)(v14 + 16) = v10;
        uint64_t v14 = *(void *)(a3 + 256);
      }

      *(void *)(a3 + 256) = v14 + 24;
      ++v6;
    }

    while (v6 != result);
  }

  return result;
}

size_t DecodeDYMTLStitchedLibraryDescriptor(size_t result, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v5 = a5;
  char v8 = (_DWORD *)(result + 8);
  unsigned int v9 = *(_DWORD *)result;
  if (*(_DWORD *)result < 0x4Fu)
  {
    char v10 = 4;
  }

  else
  {
    char v8 = (_DWORD *)(result + 32);
    char v10 = *(_BYTE *)(result + 24);
  }

  int v12 = *v8;
  uint64_t v11 = (const char *)(v8 + 2);
  size_t v59 = v11;
  __int16 v54 = v12;
  int v55 = (unsigned __int16)v12;
  if ((_WORD)v12)
  {
    char v52 = v10;
    int v13 = 0;
    uint64_t v53 = a3[45];
    while (1)
    {
      uint64_t v14 = v59;
      uint64_t v15 = v59 + 8;
      char v16 = *v59;
      size_t v59 = v15;
      uint64_t result = strlen(v15);
      int v17 = &v15[(result & 0xFFFFFFFFFFFFFFF8LL) + 8];
      size_t v59 = v17;
      int v18 = *((unsigned __int8 *)v14 + 8);
      int32x2_t v19 = v14[8] ? v15 : 0LL;
      if (!v18) {
        break;
      }
      uint64_t result = strlen(v19);
      uint64_t v20 = a3[52];
      size_t v21 = result + 1;
      if (result == -1LL) {
        goto LABEL_13;
      }
      uint64_t v22 = (void *)a3[52];
LABEL_14:
      a3[52] = v20 + v21;
      if (a4)
      {
        uint64_t result = (size_t)memcpy(v22, v19, v21);
        int v17 = v59;
      }

      uint64_t v25 = *(void *)v17;
      uint64_t v23 = v17 + 8;
      __int16 v24 = v25;
      size_t v59 = v23;
      size_t v26 = (_OWORD *)a3[46];
      a3[46] = &v26[3 * (unsigned __int16)v25];
      int v27 = (unsigned __int16)v25;
      if ((_WORD)v25)
      {
        uint64_t v28 = v26;
        do
        {
          int v29 = *(unsigned __int8 *)v59;
          v59 += 8;
          uint64_t result = DecodeDYMTLFunctionStitchingFunctionNode((uint64_t)&v56, &v59, v29, v9, (uint64_t)a3, a4);
          if (a4)
          {
            __int128 v30 = v56;
            __int128 v31 = v58;
            v28[1] = v57;
            v28[2] = v31;
            *uint64_t v28 = v30;
            v28 += 3;
          }

          --v27;
        }

        while (v27);
        uint64_t v23 = v59;
      }

      else
      {
        size_t v26 = 0LL;
      }

      int v34 = *(unsigned __int8 *)v23;
      int32x2_t v33 = v23 + 8;
      int v32 = v34;
      size_t v59 = v33;
      if (v34)
      {
        uint64_t v35 = (_OWORD *)a3[46];
        a3[46] = v35 + 3;
        uint64_t result = DecodeDYMTLFunctionStitchingFunctionNode((uint64_t)&v56, &v59, v32, v9, (uint64_t)a3, a4);
        if (a4)
        {
          __int128 v36 = v57;
          *uint64_t v35 = v56;
          v35[1] = v36;
          uint64_t v35[2] = v58;
        }

        int32x2_t v33 = v59;
      }

      else
      {
        uint64_t v35 = 0LL;
      }

      int v37 = *(_DWORD *)v33;
      size_t v59 = v33 + 8;
      uint64_t v38 = a3[47];
      int v39 = (unsigned __int16)v37;
      if ((_WORD)v37)
      {
        uint64_t v40 = v38 + 8;
        uint64_t v41 = v33 + 16;
        do
        {
          uint64_t v42 = *((void *)v41 - 1);
          size_t v59 = v41;
          if (a4) {
            *(_BYTE *)(v40 - 8) = v42;
          }
          v41 += 8;
          a3[47] = v40;
          v40 += 8LL;
          --v39;
        }

        while (v39);
      }

      uint64_t v43 = a3[45];
      if ((a4 & 1) != 0)
      {
        *(void *)uint64_t v43 = v22;
        *(void *)(v43 + 8) = v26;
        *(void *)(v43 + 16) = v35;
        *(void *)(v43 + 24) = v38;
        *(_WORD *)(v43 + 32) = v24;
        *(_WORD *)(v43 + 34) = v37;
        *(_BYTE *)(v43 + 36) = v16;
        *(_WORD *)(v43 + 3memset(v56, 0, 7) = 0;
        *(_BYTE *)(v43 + 39) = 0;
        uint64_t v43 = a3[45];
      }

      a3[45] = v43 + 40;
      if (++v13 == v55)
      {
        uint64_t v11 = v59;
        char v10 = v52;
        uint64_t v5 = a5;
        goto LABEL_38;
      }
    }

    uint64_t v20 = a3[52];
LABEL_13:
    size_t v21 = 0LL;
    uint64_t v22 = 0LL;
    goto LABEL_14;
  }

  uint64_t v53 = 0LL;
LABEL_38:
  int v45 = *(_DWORD *)v11;
  int v44 = *(_DWORD *)v11;
  size_t v59 = v11 + 8;
  int v46 = (unsigned __int16)v45;
  if (!(_WORD)v45)
  {
    uint64_t v47 = 0LL;
    if ((a4 & 1) == 0) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }

  uint64_t v47 = (uint64_t *)a3[50];
  uint64_t v48 = v47;
  do
  {
    uint64_t v49 = *(void *)v59;
    v59 += 8;
    if (a4)
    {
      if (v5)
      {
        uint64_t result = GetAliasStream2(v5, v49);
        if (result) {
          uint64_t v49 = *(void *)result;
        }
        else {
          uint64_t v49 = 0LL;
        }
      }

      uint64_t v48 = (uint64_t *)a3[50];
      *uint64_t v48 = v49;
    }

    a3[50] = ++v48;
    --v46;
  }

  while (v46);
  if ((a4 & 1) != 0)
  {
LABEL_48:
    uint64_t v50 = a3[33];
    *(void *)uint64_t v50 = v53;
    *(void *)(v50 + 8) = v47;
    *(_WORD *)(v50 + 16) = v54;
    *(_WORD *)(v50 + 18) = v44;
    *(_BYTE *)(v50 + 20) = v10;
  }

uint64_t DecodeDYMTLFunctionStitchingFunctionNode( uint64_t a1, const char **a2, int a3, unsigned int a4, uint64_t a5, int a6)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)a1 = a3;
  char v10 = *a2;
  if (a4 >= 0x4F)
  {
    uint64_t v11 = *(void *)v10;
    v10 += 8;
    *a2 = v10;
    *(void *)(a1 + 32) = v11;
  }

  if (a3 == 2)
  {
    uint64_t v12 = *(void *)v10;
    v10 += 8;
    *a2 = v10;
    *(_BYTE *)(a1 + 44) = v12;
  }

  *a2 = &v10[(strlen(v10) & 0xFFFFFFFFFFFFFFF8LL) + 8];
  if (*v10) {
    int v13 = v10;
  }
  else {
    int v13 = "";
  }
  uint64_t result = strlen(v13);
  size_t v15 = result + 1;
  if (result == -1) {
    char v16 = 0LL;
  }
  else {
    char v16 = *(void **)(a5 + 416);
  }
  *(void *)(a5 + 416) += v15;
  if (a6) {
    uint64_t result = (uint64_t)memcpy(v16, v13, v15);
  }
  uint64_t v17 = *(void *)*a2;
  *a2 += 8;
  unsigned int v18 = (unsigned __int16)v17;
  *(_WORD *)(a1 + 40) = v17;
  if ((_WORD)v17) {
    uint64_t v19 = *(void *)(a5 + 368);
  }
  else {
    uint64_t v19 = 0LL;
  }
  *(void *)(a5 + 368) += 48LL * (unsigned __int16)v17;
  *(void *)(a1 + 8) = v16;
  *(void *)(a1 + 16) = v19;
  if ((_WORD)v17)
  {
    int v20 = 0;
    __int128 v21 = 0uLL;
    while (2)
    {
      int v22 = 0;
      memset(v35, 0, 7);
      __int128 v37 = v21;
      __int128 v38 = v21;
      char v39 = 0;
      uint64_t v23 = *a2;
      int v24 = *(unsigned __int8 *)*a2;
      *a2 += 8;
      __int16 v25 = 0;
      char v26 = 0;
      switch(v24)
      {
        case 1:
        case 2:
        case 12:
          uint64_t result = DecodeDYMTLFunctionStitchingFunctionNode(v36, a2);
          __int128 v21 = 0uLL;
          LOBYTE(v24) = v36[0];
          v35[0] = *(_DWORD *)&v36[1];
          *(_DWORD *)((char *)v35 + 3) = *(_DWORD *)&v36[4];
          int v22 = *(_DWORD *)&v36[8];
          __int16 v25 = *(_WORD *)&v36[12];
          char v26 = v36[14];
          __int128 v37 = *(_OWORD *)&v36[15];
          __int128 v38 = *(_OWORD *)&v36[31];
          char v39 = v36[47];
          if (a6) {
            goto LABEL_27;
          }
          goto LABEL_28;
        case 3:
          int v22 = 0;
          char v26 = 0;
          __int16 v25 = *((_WORD *)v23 + 4);
          *a2 = v23 + 16;
          LOBYTE(v24) = 3;
          if (a6) {
            goto LABEL_27;
          }
          goto LABEL_28;
        case 4:
        case 6:
        case 7:
        case 8:
        case 9:
          int v22 = 0;
          char v26 = 0;
          __int16 v25 = *((_WORD *)v23 + 4);
          *a2 = v23 + 16;
          if (a6) {
            goto LABEL_27;
          }
          goto LABEL_28;
        case 5:
          __int16 v25 = *((_WORD *)v23 + 4);
          *a2 = v23 + 16;
          int v22 = *((_DWORD *)v23 + 4);
          *a2 = v23 + 24;
          char v26 = v23[24];
          *a2 = v23 + 32;
          LOBYTE(v24) = 5;
          goto LABEL_26;
        case 10:
        case 11:
LABEL_26:
          if (a6) {
            goto LABEL_27;
          }
          goto LABEL_28;
        default:
          __int16 v25 = 0;
          char v26 = 0;
          if (!a6) {
            goto LABEL_28;
          }
LABEL_27:
          *(_BYTE *)uint64_t v19 = v24;
          *(_DWORD *)(v19 + 4) = *(_DWORD *)((char *)v35 + 3);
          *(_DWORD *)(v19 + 8) = v22;
          *(_DWORD *)(v19 + 1) = v35[0];
          *(_WORD *)(v19 + 12) = v25;
          *(_BYTE *)(v19 + 14) = v26;
          __int128 v27 = v37;
          __int128 v28 = v38;
          *(_BYTE *)(v19 + 4memset(v56, 0, 7) = v39;
          *(_OWORD *)(v19 + 31) = v28;
          *(_OWORD *)(v19 + 15) = v27;
          v19 += 48LL;
          unsigned int v18 = *(unsigned __int16 *)(a1 + 40);
LABEL_28:
          if (++v20 >= v18) {
            break;
          }
          continue;
      }

      break;
    }
  }

  uint64_t v29 = *(void *)*a2;
  *a2 += 8;
  unsigned int v30 = (unsigned __int16)v29;
  *(_WORD *)(a1 + 42) = v29;
  if ((_WORD)v29) {
    __int128 v31 = *(_OWORD **)(a5 + 368);
  }
  else {
    __int128 v31 = 0LL;
  }
  *(void *)(a5 + 368) += 48LL * (unsigned __int16)v29;
  *(void *)(a1 + 24) = v31;
  if ((_WORD)v29)
  {
    unsigned int v32 = 0;
    do
    {
      *a2 += 8;
      uint64_t result = DecodeDYMTLFunctionStitchingFunctionNode(v36, a2);
      if (a6)
      {
        __int128 v33 = *(_OWORD *)v36;
        __int128 v34 = *(_OWORD *)&v36[32];
        v31[1] = *(_OWORD *)&v36[16];
        v31[2] = v34;
        *__int128 v31 = v33;
        v31 += 3;
        unsigned int v30 = *(unsigned __int16 *)(a1 + 42);
      }

      ++v32;
    }

    while (v32 < v30);
  }

  return result;
}

void *DecodeDYMPSPluginCNNConvolutionDescriptor(void *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = result[1];
  int v6 = *((_DWORD *)result + 4);
  int v7 = *((_DWORD *)result + 6);
  int v8 = *((_DWORD *)result + 8);
  size_t v9 = result[5];
  unint64_t v10 = (unint64_t)result + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 48;
  int32x4_t v11 = *(int32x4_t *)v10;
  int64x2_t v12 = *(int64x2_t *)(v10 + 16);
  int32x4_t v13 = *(int32x4_t *)(v10 + 32);
  int64x2_t v14 = *(int64x2_t *)(v10 + 48);
  uint64_t v15 = *(void *)(v10 + 64);
  int64x2_t v16 = *(int64x2_t *)(v10 + 72);
  uint64_t v18 = *(void *)(v10 + 88);
  uint64_t v17 = *(void *)(v10 + 96);
  uint64_t v19 = *(char **)(a3 + 72);
  *(void *)(a3 + 72) = &v19[v9];
  if (a4)
  {
    if (v9) {
      int v20 = v19;
    }
    else {
      int v20 = 0LL;
    }
    if (v9) {
      __int128 v21 = result + 6;
    }
    else {
      __int128 v21 = 0LL;
    }
    int32x4_t v28 = v13;
    int32x4_t v29 = v11;
    int64x2_t v26 = v12;
    int64x2_t v27 = v14;
    int64x2_t v25 = v16;
    uint64_t result = memcpy(v20, v21, v9);
    v22.i64[1] = v26.i64[1];
    int32x2_t v23 = vmovn_s64(v25);
    *(int32x2_t *)v22.i8 = vmovn_s64(v26);
    uint64_t v24 = *(void *)(a3 + 16);
    *(void *)uint64_t v24 = v20;
    *(_DWORD *)(v24 + 8) = v9;
    *(_DWORD *)(v24 + 12) = v6;
    *(_DWORD *)(v24 + 16) = v7;
    *(_DWORD *)(v24 + 20) = v8;
    *(int32x4_t *)(v24 + 24) = vuzp1q_s32(v29, v28);
    *(int32x2_t *)(v24 + 40) = vmovn_s64(v27);
    *(_DWORD *)(v24 + 48) = v15;
    *(_BYTE *)(v24 + 52) = v5;
    v22.i16[1] = v22.i16[2];
    v22.i16[2] = v23.i16[0];
    v22.i16[3] = v23.i16[2];
    *(_DWORD *)(v24 + 53) = vmovn_s16(v22).u32[0];
    *(_BYTE *)(v24 + 5memset(v56, 0, 7) = v18;
    *(_BYTE *)(v24 + 58) = v17;
    *(_BYTE *)(v24 + 63) = 0;
    *(_DWORD *)(v24 + 59) = 0;
  }

  *(void *)(a3 + 16) += 64LL;
  return result;
}

void *DecodeDYMPSPluginCNNConvolutionData(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  int32x2_t v6 = vmovn_s64(*(int64x2_t *)(a1 + 8));
  __int32 v7 = *(_DWORD *)(a1 + 24);
  size_t v8 = *(void *)(a1 + 32);
  size_t v9 = (const void *)(a1 + 40);
  unint64_t v10 = (unint64_t *)(a1 + 40 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  unint64_t v13 = *v10;
  int32x4_t v11 = v10 + 1;
  unint64_t v12 = v13;
  int64x2_t v14 = (void *)((char *)v11 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v17 = *v14;
  uint64_t v15 = v14 + 1;
  uint64_t v16 = v17;
  if (v17) {
    uint64_t v18 = v15;
  }
  else {
    uint64_t v18 = 0LL;
  }
  uint64_t v19 = (void *)((char *)v15 + ((v16 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v22 = *v19;
  int v20 = v19 + 1;
  uint64_t v21 = v22;
  if (v22) {
    int32x2_t v23 = v20;
  }
  else {
    int32x2_t v23 = 0LL;
  }
  uint64_t v24 = (void *)((char *)v20 + ((v21 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v27 = *v24;
  int64x2_t v25 = v24 + 1;
  uint64_t v26 = v27;
  if (v27) {
    int32x4_t v28 = v25;
  }
  else {
    int32x4_t v28 = 0LL;
  }
  int32x4_t v29 = (void *)((char *)v25 + ((v26 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v32 = *v29;
  unsigned int v30 = v29 + 1;
  uint64_t v31 = v32;
  if (v32) {
    __int128 v33 = v30;
  }
  else {
    __int128 v33 = 0LL;
  }
  if (v8) {
    uint64_t result = (void *)a3[9];
  }
  else {
    uint64_t result = 0LL;
  }
  a3[9] += v8;
  __int32 v53 = v7;
  int32x2_t v54 = v6;
  int32x2_t v52 = (int32x2_t)result;
  __srapr_vformatter_buff_t c = v28;
  uint64_t v50 = v33;
  if ((a4 & 1) != 0)
  {
    if (v12) {
      uint64_t v35 = v11;
    }
    else {
      uint64_t v35 = 0LL;
    }
    if (v8) {
      __int128 v36 = v9;
    }
    else {
      __int128 v36 = 0LL;
    }
    memcpy(result, v36, v8);
    uint64_t v37 = (v12 >> 2);
    else {
      __int128 v38 = 0LL;
    }
    a3[8] += 4 * v37;
    int32x2_t v51 = (int32x2_t)v38;
    uint64_t result = memcpy(v38, v35, 4 * v37);
    int32x2_t v6 = v54;
  }

  else
  {
    uint64_t v37 = (v12 >> 2);
    else {
      int32x2_t v39 = 0LL;
    }
    int32x2_t v51 = v39;
    a3[8] += 4 * v37;
  }

  if (v6.i32[0] == 2)
  {
    uint64_t v41 = (char *)a3[8];
    a3[8] = v41 + 1024;
    if (a4)
    {
      uint64_t result = memcpy(v41, v18, 0x400uLL);
      int32x2_t v6 = v54;
    }

    uint64_t v40 = 0LL;
  }

  else
  {
    if (v6.i32[0] == 1)
    {
      if (v37) {
        uint64_t v40 = (void *)a3[7];
      }
      else {
        uint64_t v40 = 0LL;
      }
      a3[7] += 8 * v37;
      if (a4)
      {
        uint64_t result = memcpy(v40, v23, 8 * v37);
        int32x2_t v6 = v54;
      }
    }

    else
    {
      uint64_t v40 = 0LL;
    }

    uint64_t v41 = 0LL;
  }

  if (!(v26 + v31))
  {
    int32x2_t v42 = 0LL;
    if (!a4) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }

  uint64_t v43 = (char *)a3[8];
  int v44 = &v43[4 * v37];
  a3[8] = v44;
  if ((a4 & 1) != 0)
  {
    if (v37) {
      int v45 = v43;
    }
    else {
      int v45 = 0LL;
    }
    memcpy(v45, __src, 4 * v37);
    if (v37) {
      int v46 = (void *)a3[8];
    }
    else {
      int v46 = 0LL;
    }
    a3[8] += 4 * v37;
    uint64_t result = memcpy(v46, v50, 4 * v37);
    int32x2_t v6 = v54;
    uint64_t v47 = (void *)a3[6];
    void *v47 = v45;
    v47[1] = v46;
  }

  else
  {
    a3[8] = &v44[4 * v37];
  }

  int32x2_t v42 = (int32x2_t)a3[6];
  a3[6] = *(void *)&v42 + 16LL;
  if (a4)
  {
LABEL_56:
    uint64_t v48 = (int32x2_t *)a3[3];
    *uint64_t v48 = v6;
    v48[1].i32[0] = v53;
    v48[1].i32[1] = 0;
    v48[2] = v52;
    v48[3] = v51;
    v48[4] = (int32x2_t)v41;
    v48[5] = (int32x2_t)v40;
    v48[6] = v42;
    v48[7].i32[0] = v8;
    v48[7].i32[1] = v12 >> 2;
  }

LABEL_57:
  a3[3] += 64LL;
  return result;
}

void GroupBuilder_popGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2
    && (uint64_t v3 = *(int *)(v2 + 12), (_DWORD)v3)
    && (v4 = *(void *)(v2 + 24), v5 = *(int *)(v2 + 8), uint64_t v6 = v3 - 1, *(_DWORD *)(v2 + 12) = v6, v4))
  {
    uint64_t v7 = v6 * v5;
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = *(int *)(v4 + v7);
    uint64_t v10 = *(void *)(v8 + 24) + 32 * v9;
    *(void *)(v10 + 8) = a2;
    *(_DWORD *)(v10 + 20) = *(_DWORD *)(v8 + 12) + ~(_DWORD)v9;
  }

  else
  {
    int v11 = *(_DWORD *)a1;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    v12[0] = v11;
    v12[1] = 500;
    unint64_t v13 = "last != ((void *)0)";
    GTError_addError((int *)a1, (uint64_t)v12);
  }

void *GroupBuilder_findInclusiveRange(int a1, void *a2, unint64_t a3)
{
  if (a1 < 1) {
    return 0LL;
  }
  uint64_t v3 = a2;
  do
  {
    uint64_t v4 = &v3[4 * (a1 >> 1)];
    unint64_t v6 = *v4;
    uint64_t v5 = v4 + 4;
    BOOL v7 = v6 > a3;
    if (v6 <= a3) {
      a1 += ~(a1 >> 1);
    }
    else {
      a1 = a1 >> 1;
    }
    if (!v7) {
      uint64_t v3 = v5;
    }
  }

  while (a1 > 0);
  if (v3 == a2) {
    return 0LL;
  }
  uint64_t result = v3 - 4;
  while (result[1] < a3)
  {
    uint64_t v9 = *((unsigned int *)result + 4);
    if ((_DWORD)v9) {
      BOOL v10 = result == 0LL;
    }
    else {
      BOOL v10 = 1;
    }
    result -= 4 * v9;
    if (v10) {
      return 0LL;
    }
  }

  return result;
}

void *GroupBuilder_findExclusiveRange(int a1, void *a2, unint64_t a3)
{
  uint64_t result = GroupBuilder_findInclusiveRange(a1, a2, a3);
  if (result)
  {
    while (result[1] <= a3)
    {
      uint64_t v5 = *((unsigned int *)result + 4);
      if ((_DWORD)v5) {
        BOOL v6 = result == 0LL;
      }
      else {
        BOOL v6 = 1;
      }
      result -= 4 * v5;
      if (v6) {
        return 0LL;
      }
    }
  }

  return result;
}

void *GroupBuilder_getCommandBuffer(int a1, void *a2, unint64_t a3)
{
  uint64_t result = GroupBuilder_findInclusiveRange(a1, a2, a3);
  if (result)
  {
    uint64_t v4 = result;
    while (1)
    {
      uint64_t v5 = v4;
      int FuncEnumConstructorType = GetFuncEnumConstructorType(*((_DWORD *)v4 + 7));
      uint64_t result = 0LL;
      uint64_t v7 = *((unsigned int *)v5 + 4);
      if ((_DWORD)v7)
      {
        uint64_t v4 = &v5[-4 * v7];
        if (v5) {
          continue;
        }
      }

      return result;
    }

    return v5;
  }

  return result;
}

uint64_t GetAliasStream(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = a2;
  uint64_t v4 = (void *)*find_entry(a1, &v6, 8uLL, 0LL);
  if (v4)
  {
    while (1)
    {
      uint64_t v4 = (void *)v4[4];
      if (!v4) {
        break;
      }
      if (v4[2] <= a3)
      {
        if (v4[3] < a3) {
          return 0LL;
        }
        return v4[1];
      }
    }
  }

  return 0LL;
}

#error "1BE394: too big function (funcsize=0)"
void CloseStream(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  char v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  __int128 v18;
  void *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t i;
  unsigned int *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  unsigned int v35[4];
  if (!a2) {
    return;
  }
  uint64_t v4 = *(void *)(*find_entry(*(void *)(a1 + 24), (_BYTE *)a2 + 8, 8uLL, 0LL) + 32LL);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = atomic_load((unint64_t *)(v5 + 72));
  *(void *)(v4 + 24) = v6;
  pthread_mutex_lock((pthread_mutex_t *)v5);
  uint64_t v7 = atomic_load((unsigned int *)(v5 + 104));
  if (v7 == 1 || v7 == 2 && (uint64_t v8 = atomic_load(a2 + 7), (v8 & 0x10) != 0))
  {
    __int128 v14 = a2 + 7;
    __int128 v15 = atomic_load(a2 + 7);
    while (1)
    {
      uint64_t v16 = __ldaxr(v14);
      if (v16 != v15) {
        break;
      }
      if (__stlxr(v15 | 4, v14)) {
        goto LABEL_14;
      }
      uint64_t v17 = 1;
LABEL_15:
      __int128 v15 = v16;
      if (v17)
      {
        pthread_mutex_unlock((pthread_mutex_t *)v5);
        return;
      }
    }

    __clrex();
LABEL_14:
    uint64_t v17 = 0;
    goto LABEL_15;
  }

  __int128 v34 = 0uLL;
  *(void *)uint64_t v35 = 0LL;
  apr_hash_set(*(apr_hash_t **)(v5 + 88), a2, 8LL, 0LL);
  uint64_t v9 = *(_DWORD *)(*(void *)(v5 + 88) + 48LL);
  BOOL v10 = a2[3];
  int v11 = (unsigned int *)(v10 + 40);
  do
  {
    unint64_t v12 = __ldaxr(v11);
    unint64_t v13 = v12 - 1;
  }

  while (__stlxr(v13, v11));
  if (!v13)
  {
    uint64_t v18 = *(_OWORD *)(v10 + 8);
    *(void *)uint64_t v35 = *(void *)(v10 + 24);
    __int128 v34 = v18;
    *(void *)(v10 + 8) = 0LL;
    *(void *)(v10 + 16) = 0LL;
    *(void *)(v10 + 24) = 0LL;
    *(void *)BOOL v10 = *(void *)(v5 + 96);
    *(void *)(v5 + 96) = v10;
  }

  uint64_t v19 = a2 + 4;
  if (*((void *)&v34 + 1))
  {
    int v20 = atomic_load((unsigned int *)a2 + 12);
    do
      uint64_t v21 = __ldaxr(v35);
    while (__stlxr(v21 + v20, v35));
    uint64_t v22 = atomic_load((unsigned int *)a2 + 13);
    do
      int32x2_t v23 = __ldaxr(&v35[1]);
    while (__stlxr(v23 + v22, &v35[1]));
    *(void *)(*((void *)&v34 + 1) + 4gettimeofday(&v6, 0LL) = *v19;
  }

  else
  {
    __int128 v34 = *(_OWORD *)v19;
    *(void *)uint64_t v35 = a2[6];
  }

  *uint64_t v19 = 0LL;
  a2[5] = 0LL;
  a2[6] = 0LL;
  *a2 = *(void *)(v5 + 96);
  *(void *)(v5 + 96) = a2;
  pthread_mutex_unlock((pthread_mutex_t *)v5);
  uint64_t v24 = (unsigned int *)v34;
  if ((void)v34)
  {
    int64x2_t v25 = *(void *)(v5 + 64);
    pthread_mutex_lock((pthread_mutex_t *)(v25 + 264));
    do
    {
      uint64_t v26 = *v24;
      if (v26 < 0x101)
      {
        uint64_t v27 = 0;
      }

      else
      {
        uint64_t v27 = 0;
        for (uint64_t i = 256LL; i < v26; i *= 2LL)
          ++v27;
      }

      int32x4_t v29 = (unsigned int *)*((void *)v24 + 5);
      v24[1] = 64;
      *((void *)v24 + 1) = 0LL;
      *((void *)v24 + 2) = 0LL;
      *((void *)v24 + 3) = 0LL;
      *((void *)v24 + 4) = v24;
      *((void *)v24 + 6) = 0LL;
      *((void *)v24 + memset(v56, 0, 7) = 0LL;
      *((void *)v24 + 5) = 0LL;
      unsigned int v30 = v25 + 8LL * v27;
      *((void *)v24 + 5) = *(void *)(v30 + 16);
      *(void *)(v30 + 16) = v24;
      uint64_t v24 = v29;
    }

    while (v29);
    pthread_mutex_unlock((pthread_mutex_t *)(v25 + 264));
  }

  if (!v9)
  {
    pthread_mutex_destroy((pthread_mutex_t *)v5);
    uint64_t v31 = *(int **)(v5 + 64);
    if (*v31 >= 1)
    {
      uint64_t v32 = 0LL;
      __int128 v33 = 0LL;
      do
      {
        vm_deallocate( mach_task_self_,  *(void *)(*((void *)v31 + 1) + v32),  *(void *)(*((void *)v31 + 1) + v32 + 8));
        ++v33;
        v32 += 16LL;
      }

      while (v33 < *v31);
    }

    pthread_mutex_destroy((pthread_mutex_t *)(v31 + 66));
    free(*((void **)v31 + 1));
    vm_deallocate(mach_task_self_, (vm_address_t)v31, 0x148uLL);
    apr_pool_destroy(**(apr_pool_t ***)(v5 + 88));
    if ((shared_initialized & 1) == 0
      && !--initialized
      && (apr_pools_shared_initialized & 1) == 0
      && apr_pools_initialized
      && !--apr_pools_initialized)
    {
      apr_pool_destroy((apr_pool_t *)global_pool);
      global_pool = 0LL;
      global_allocator = 0LL;
    }
  }

unint64_t *OpenStream(uint64_t a1, unint64_t a2)
{
  unint64_t v9 = a2;
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = GTTraceContext_openStream(*(void *)(a1 + 16), a2);
  uint64_t v5 = apr_palloc(**(apr_pool_t ***)(a1 + 24), 0x28uLL);
  *uint64_t v5 = a2;
  v5[1] = v4;
  unint64_t v6 = atomic_load((unint64_t *)(*(void *)(a1 + 16) + 72LL));
  v5[2] = v6;
  v5[3] = -1LL;
  uint64_t v7 = *find_entry(*(void *)(a1 + 24), &v9, 8uLL, 0LL);
  if (v7) {
    uint64_t v7 = *(void *)(v7 + 32);
  }
  void v5[4] = v7;
  apr_hash_set(*(apr_hash_t **)(a1 + 24), v5, 8LL, v5);
  return v4;
}

uint64_t StoreBlob(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = GTTraceEncoder_storeBlob(a2, Data, v7);
  apr_pool_clear(v5);
  return v8;
}

uint64_t UnwrapMTLAccelerationStructureDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0LL;
  }
  size_t v9 = (size_t)Data;
  uint64_t v10 = v8;
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLAccelerationStructureDescriptor((size_t)Data, v8, v13, 0, a1);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x5Bu, 1u);
  DecodeDYMTLAccelerationStructureDescriptor(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t StreamNSArray(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = (unsigned int *)(a1 + 48);
  Data = GTCaptureArchive_readData( *(const char ***)a1,  *(apr_pool_t ***)(a1 + 8),  a3,  **(apr_pool_t ***)(a1 + 8),  (int *)(a1 + 48));
  if (v7 <= 0xF)
  {
    unsigned int v19 = *v5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    *(void *)&__int128 v23 = v19 | 0x1F400000000LL;
    int v20 = "sizeof(uint64_t) * 2 <= data.length";
LABEL_12:
    *((void *)&v23 + 1) = v20;
    GTError_addError((int *)(a1 + 48), (uint64_t)&v23);
    return 0LL;
  }

  uint64_t v8 = Data;
  uint64_t v9 = *((void *)Data + 1);
  if (v7 != ((v9 << 32) + 0x200000000LL) >> 29)
  {
    unsigned int v21 = *v5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    *(void *)&__int128 v23 = v21 | 0x1F400000000LL;
    int v20 = "sizeof(uint64_t) * (2 + count) == data.length";
    goto LABEL_12;
  }

  uint64_t v10 = *((void *)Data + 1);
  uint64_t v11 = v9 << 32;
  __int128 v47 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  uint64_t v49 = 0LL;
  __int128 v48 = (unint64_t)(((v9 << 32) + 0x100000000LL) >> 29);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)&v23, 0, 1u);
  uint64_t v13 = v48;
  *(void *)__int128 v48 = v11 >> 32;
  if ((int)v10 >= 1)
  {
    uint64_t v14 = (void *)(v13 + 8);
    __int128 v15 = (uint64_t *)(v8 + 16);
    do
    {
      uint64_t v16 = *v15++;
      AliasStream2 = (uint64_t *)GetAliasStream2(a1, v16);
      if (AliasStream2) {
        uint64_t v18 = *AliasStream2;
      }
      else {
        uint64_t v18 = 0LL;
      }
      *v14++ = v18;
      --v10;
    }

    while (v10);
  }

  return DescriptorWithCount;
}

uint64_t StreamArray(uint64_t a1, uint64_t a2, void *__src, uint64_t *a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v10 = __src;
    uint64_t v11 = a5;
    do
    {
      uint64_t v12 = *a4++;
      AliasStream2 = (uint64_t *)GetAliasStream2(a1, v12);
      if (AliasStream2) {
        uint64_t v14 = *AliasStream2;
      }
      else {
        uint64_t v14 = 0LL;
      }
      *v10++ = v14;
      --v11;
    }

    while (v11);
  }

  return GTTraceEncoder_storeBytes(a2, __src, 8 * a5);
}

uint64_t UnwrapMTLComputePipelineDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0LL;
  }
  uint64_t v9 = (uint64_t)Data;
  uint64_t v10 = v8;
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLComputePipelineDescriptor((uint64_t)Data, v8, v13, 0, a1);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x3Du, 1u);
  DecodeDYMTLComputePipelineDescriptor(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLStitchedLibraryDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0LL;
  }
  size_t v9 = (size_t)Data;
  uint64_t v10 = v8;
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLStitchedLibraryDescriptor((size_t)Data, v8, v13, 0, a1);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x66u, 1u);
  DecodeDYMTLStitchedLibraryDescriptor(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLRenderPipelineDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0LL;
  }
  uint64_t v9 = (uint64_t)Data;
  uint64_t v10 = v8;
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLRenderPipelineDescriptor((uint64_t)Data, v8, v13, 0, a1);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x32u, 1u);
  DecodeDYMTLRenderPipelineDescriptor(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLTileRenderPipelineDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0LL;
  }
  uint64_t v9 = (uint64_t)Data;
  uint64_t v10 = v8;
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLTileRenderPipelineDescriptor((uint64_t)Data, v8, v13, 0, a1);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x39u, 1u);
  DecodeDYMTLTileRenderPipelineDescriptor(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t StoreMTLTextureDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v30 = 0LL;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  uint64_t v17 = 0LL;
  __int128 v19 = 0u;
  memset(v16, 0, sizeof(v16));
  uint64_t v18 = 56LL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v16, 0x29u, 1u);
  uint64_t v8 = v18;
  v18 += 56LL;
  *(void *)(v8 + 48) = 512LL;
  *(_OWORD *)uint64_t v8 = GTMTLTextureDescriptorDefaults;
  *(_OWORD *)(v8 + 16) = xmmword_317C18;
  *(_OWORD *)(v8 + 32) = xmmword_317C28;
  unsigned int v9 = *(_DWORD *)Data;
  *(_BYTE *)(v8 + 49) = *((void *)Data + 1);
  *(_WORD *)(v8 + 34) = *((void *)Data + 2);
  *(_DWORD *)(v8 + 24) = *((void *)Data + 3);
  *(_WORD *)(v8 + 32) = *((void *)Data + 4);
  *(_WORD *)(v8 + 30) = *((void *)Data + 5);
  *(_BYTE *)(v8 + 45) = *((void *)Data + 6);
  *(_BYTE *)(v8 + 4memset(v56, 0, 7) = *((void *)Data + 7);
  *(_WORD *)(v8 + 28) = *((void *)Data + 8);
  uint64_t v10 = 72LL;
  if (v9 < 3) {
    uint64_t v10 = 80LL;
  }
  uint64_t v11 = &Data[v10];
  *(_BYTE *)(v8 + 43) = *(void *)v11;
  *(_BYTE *)(v8 + 44) = *((void *)v11 + 1);
  if (v9)
  {
    *(_DWORD *)(v8 + 20) = *((void *)v11 + 2);
    if (v9 <= 3)
    {
      if (v9 == 3) {
        *(_WORD *)(v8 + 36) = *((_WORD *)v11 + 16) | (16 * *((_WORD *)v11 + 12));
      }
    }

    else
    {
      int v12 = v11[24];
      *(_BYTE *)(v8 + 46) = v12;
      int v13 = *((_DWORD *)v11 + 10);
      int v14 = v13 | (16 * *((_DWORD *)v11 + 8));
      *(_WORD *)(v8 + 36) = v13 | (16 * *((_WORD *)v11 + 16));
      if (v9 >= 0x15)
      {
        *(_BYTE *)(v8 + 38) = *((void *)v11 + 6);
        *(_BYTE *)(v8 + 40) = *((void *)v11 + 7);
        if (v9 != 21)
        {
          *(void *)(v8 + 8) = *((void *)v11 + 8);
          *(_BYTE *)(v8 + 42) = *((void *)v11 + 9);
          if (v9 >= 0x23)
          {
            *(_DWORD *)(v8 + 16) = v11[80] | (unsigned __int16)(*((_DWORD *)v11 + 22) << 8) | (*((_DWORD *)v11 + 24) << 16) | (*((_DWORD *)v11 + 26) << 24);
            if (v9 >= 0x27)
            {
              *(_DWORD *)(v8 + 16) = *((void *)v11 + 14);
              if (v9 >= 0x2A)
              {
                *(_WORD *)(v8 + 36) = v14 | (*((_WORD *)v11 + 60) << 8);
                *(void *)uint64_t v8 = *((void *)v11 + 16);
                *(_BYTE *)(v8 + 48) = *((void *)v11 + 17);
                *(_BYTE *)(v8 + 50) = *((void *)v11 + 18);
                if (v9 >= 0x31)
                {
                  *(_BYTE *)(v8 + 41) = *((void *)v11 + 19);
                  *(_BYTE *)(v8 + 39) = *((void *)v11 + 20);
                }
              }
            }
          }
        }
      }

      if (v12 == 255) {
        *(_BYTE *)(v8 + 46) = 0;
      }
    }
  }

  apr_pool_clear(v5);
  return DescriptorWithCount;
}

unint64_t *OpenEncoderStream(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v25 = a2;
  uint64_t AliasStream2 = GetAliasStream2(a1, a3);
  if (a4)
  {
    if (!AliasStream2)
    {
      int v8 = *a4;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      v21[0] = v8;
      v21[1] = 500;
      __int128 v22 = "stream != ((void *)0)";
      GTError_addError(a4, (uint64_t)v21);
      return 0LL;
    }
  }

  else if (!AliasStream2)
  {
    return 0LL;
  }

  unint64_t v9 = *(void *)(AliasStream2 + 24);
  uint64_t v10 = *(void *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)v10);
  RetainFreeNode(v10);
  int v12 = v11;
  int v13 = (unint64_t *)(v10 + 80);
  do
    unint64_t v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *uint64_t v11 = v14;
  v11[1] = a2;
  __int128 v15 = (unsigned int *)(v9 + 40);
  v11[3] = v9;
  do
    unsigned int v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  atomic_store(0LL, v11 + 7);
  apr_hash_set(*(apr_hash_t **)(v10 + 88), v11, 8LL, v11);
  pthread_mutex_unlock((pthread_mutex_t *)v10);
  uint64_t v17 = apr_palloc(**(apr_pool_t ***)(a1 + 24), 0x28uLL);
  *uint64_t v17 = a2;
  v17[1] = v12;
  unint64_t v18 = atomic_load((unint64_t *)(*(void *)(a1 + 16) + 72LL));
  v17[2] = v18;
  v17[3] = -1LL;
  uint64_t v19 = *find_entry(*(void *)(a1 + 24), &v25, 8uLL, 0LL);
  if (v19) {
    uint64_t v19 = *(void *)(v19 + 32);
  }
  v17[4] = v19;
  apr_hash_set(*(apr_hash_t **)(a1 + 24), v17, 8LL, v17);
  return v12;
}

uint64_t UnwrapMTLAccelerationStructurePassDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0LL;
  }
  int v8 = Data;
  uint64_t v45 = 0LL;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  uint64_t v20 = 0LL;
  __int128 v22 = 0u;
  memset(v19, 0, sizeof(v19));
  __int128 v21 = (_OWORD *)(&stru_20 + 64);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v19, 0x86u, 1u);
  uint64_t v10 = v21;
  *__int128 v21 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  void v10[4] = 0u;
  v10[5] = 0u;
  for (uint64_t i = (uint64_t *)(v8 + 8); ; i += 4)
  {
    uint64_t v12 = *i;
    if (*i == -1) {
      break;
    }
    uint64_t v13 = i[2];
    uint64_t v14 = i[3];
    uint64_t AliasStream2 = (uint64_t *)GetAliasStream2(a1, i[1]);
    if (AliasStream2) {
      uint64_t v16 = *AliasStream2;
    }
    else {
      uint64_t v16 = 0LL;
    }
    uint64_t v17 = (void *)v10 + 3 * v12;
    *uint64_t v17 = v14;
    v17[1] = v16;
    v17[2] = v13;
  }

  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLBlitPassDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0LL;
  }
  int v8 = Data;
  uint64_t v42 = 0LL;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v21 = 0u;
  memset(v19, 0, sizeof(v19));
  __int128 v20 = 0x60uLL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v19, 0x24u, 1u);
  uint64_t v10 = (_OWORD *)v20;
  *(_OWORD *)__int128 v20 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  void v10[4] = 0u;
  v10[5] = 0u;
  for (uint64_t i = (uint64_t *)(v8 + 8); ; i += 4)
  {
    uint64_t v12 = *i;
    if (*i == -1) {
      break;
    }
    uint64_t v13 = i[2];
    uint64_t v14 = i[3];
    uint64_t AliasStream2 = (uint64_t *)GetAliasStream2(a1, i[1]);
    if (AliasStream2) {
      uint64_t v16 = *AliasStream2;
    }
    else {
      uint64_t v16 = 0LL;
    }
    uint64_t v17 = (void *)v10 + 3 * v12;
    *uint64_t v17 = v14;
    v17[1] = v16;
    v17[2] = v13;
  }

  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLComputePassDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0LL;
  }
  int v8 = Data;
  uint64_t v45 = 0LL;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  uint64_t v21 = 0LL;
  memset(v20, 0, sizeof(v20));
  __int128 v22 = (_OWORD *)&stru_68;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v20, 0x26u, 1u);
  uint64_t v10 = v22;
  *__int128 v22 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  void v10[4] = 0u;
  v10[5] = 0u;
  *((void *)v10 + 12) = 0LL;
  uint64_t v11 = *((void *)v8 + 1);
  uint64_t v12 = (uint64_t *)(v8 + 16);
  *((_BYTE *)v10 + 96) = v11;
  while (1)
  {
    uint64_t v13 = *v12;
    if (*v12 == -1) {
      break;
    }
    uint64_t v14 = v12[2];
    uint64_t v15 = v12[3];
    uint64_t AliasStream2 = (uint64_t *)GetAliasStream2(a1, v12[1]);
    if (AliasStream2) {
      uint64_t v17 = *AliasStream2;
    }
    else {
      uint64_t v17 = 0LL;
    }
    unint64_t v18 = (void *)v10 + 3 * v13;
    *unint64_t v18 = v15;
    v18[1] = v17;
    v18[2] = v14;
    v12 += 4;
  }

  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLRenderPassDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0LL;
  }
  uint64_t v9 = (uint64_t)Data;
  uint64_t v10 = v8;
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLRenderPassDescriptor((uint64_t)Data, v8, (uint64_t)v13, 0, (void *)a1);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x22u, 1u);
  DecodeDYMTLRenderPassDescriptor(v9, v10, (uint64_t)v13, 1, (void *)a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLResourceStatePassDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0LL;
  }
  uint64_t v8 = Data;
  uint64_t v43 = 0LL;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  memset(v19, 0, sizeof(v19));
  __int128 v20 = 0x60uLL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v19, 0x28u, 1u);
  uint64_t v10 = (_OWORD *)v20;
  *(_OWORD *)__int128 v20 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  void v10[4] = 0u;
  v10[5] = 0u;
  for (uint64_t i = (uint64_t *)(v8 + 8); ; i += 4)
  {
    uint64_t v12 = *i;
    if (*i == -1) {
      break;
    }
    uint64_t v13 = i[2];
    uint64_t v14 = i[3];
    uint64_t AliasStream2 = (uint64_t *)GetAliasStream2(a1, i[1]);
    if (AliasStream2) {
      uint64_t v16 = *AliasStream2;
    }
    else {
      uint64_t v16 = 0LL;
    }
    uint64_t v17 = (void *)v10 + 3 * v12;
    *uint64_t v17 = v14;
    v17[1] = v16;
    v17[2] = v13;
  }

  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLCommandBufferDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0LL;
  }
  uint64_t v8 = Data;
  uint64_t v34 = 0LL;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v17 = 0u;
  memset(v15, 0, sizeof(v15));
  __int128 v16 = 0x10uLL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v15, 0x4Eu, 1u);
  uint64_t v10 = v16;
  *(_OWORD *)__int128 v16 = GTMTLCommandBufferDescriptorDefaults;
  *(_BYTE *)(v10 + 8) = *((void *)v8 + 1);
  *(_BYTE *)(v10 + 9) = *((void *)v8 + 2);
  uint64_t v11 = *((void *)v8 + 3);
  *(void *)uint64_t v10 = v11;
  uint64_t AliasStream2 = (uint64_t *)GetAliasStream2(a1, v11);
  if (AliasStream2) {
    uint64_t v13 = *AliasStream2;
  }
  else {
    uint64_t v13 = 0LL;
  }
  *(void *)uint64_t v10 = v13;
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

double SaveMTLComputePipelineReflection_(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  __int128 v26 = 0u;
  unint64_t v6 = (int *)(a1 + 48);
  memset(v25, 0, sizeof(v25));
  DecodeDYMTLComputePipelineReflection(a3, v25, 0LL, (int *)(a1 + 48));
  unint64_t v7 = (char *)PerformanceStatisticsURL(a3);
  if (v7)
  {
    FileWithFilename = (unsigned int *)GTCaptureArchive_getFileWithFilename(*(void *)a1, v7);
    uint64_t v9 = FileWithFilename;
    if (FileWithFilename)
    {
      char v10 = 0;
      uint64_t v11 = *FileWithFilename;
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  uint64_t v11 = 0LL;
  char v10 = 1;
LABEL_6:
  *((void *)&v26 + 1) += v11;
  *(_BYTE *)(*(void *)(a2 + 16) + 14LL) = AllocatePipelineReflectionWithType(a2, (uint64_t)v25, 0x78u);
  uint64_t v12 = DecodeDYMTLComputePipelineReflection(a3, v25, 1LL, v6);
  if ((v10 & 1) == 0)
  {
    uint64_t v13 = *(void *)a1;
    uint64_t v14 = *(apr_pool_t ***)(a1 + 8);
    uint64_t v15 = *((void *)&v26 + 1);
    GTCaptureArchive_fillBuffer(v13, v14, v7, *((char **)&v26 + 1), *v9, v6);
    uint64_t v16 = *v9;
    *(void *)(v12 + 56) = v15;
    *(void *)(v12 + 64) = v16;
  }

  uint64_t v24 = 0LL;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v21 = 0u;
  uint64_t v17 = *(void *)(v12 + 24);
  if (v17) {
    CalculateBindingsAccess(v17, *(unsigned __int16 *)(v12 + 92), (uint64_t)&v21);
  }
  uint64_t v18 = *(void *)(v12 + 32);
  if (v18) {
    CalculateBindingsAccess(v18, *(unsigned __int16 *)(v12 + 94), (uint64_t)&v21);
  }
  __int128 v19 = v22;
  *(_OWORD *)(v12 + 104) = v21;
  *(_OWORD *)(v12 + 120) = v19;
  double result = *(double *)&v23;
  *(_OWORD *)(v12 + 136) = v23;
  *(void *)(v12 + 152) = v24;
  return result;
}

uint64_t StoreMTLIntersectionFunctionTableDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v36 = 0LL;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v13 = 0u;
  memset(v11, 0, sizeof(v11));
  __int128 v12 = 0x10uLL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x5Cu, 1u);
  uint64_t v8 = v12;
  unsigned int v9 = *(_DWORD *)Data;
  *(_DWORD *)(v12 + 8) = *((void *)Data + 1);
  if (v9 >= 0x36)
  {
    *(void *)uint64_t v8 = *((void *)Data + 2);
    *(_BYTE *)(v8 + 12) = *((void *)Data + 3);
  }

  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLVisibleFunctionTableDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v31 = 0LL;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  memset(v11, 0, sizeof(v11));
  __int128 v12 = 0x18uLL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x52u, 1u);
  uint64_t v8 = v12;
  unsigned int v9 = *(_DWORD *)Data;
  *(void *)__int128 v12 = *((void *)Data + 1);
  if (v9 >= 0x2F)
  {
    *(void *)(v8 + 8) = *((void *)Data + 2);
    if (v9 >= 0x36) {
      *(_BYTE *)(v8 + 16) = *((void *)Data + 3);
    }
  }

  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLFunctionDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0LL;
  }
  uint64_t v9 = (uint64_t)Data;
  uint64_t v10 = v8;
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLFunctionDescriptor((uint64_t)Data, v8, v13, 0, a1);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x51u, 1u);
  DecodeDYMTLFunctionDescriptor(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

void SaveMTLFunctionInfo_(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5 = (int *)(a1 + 48);
  memset(v6, 0, sizeof(v6));
  DecodeDYMTLFunctionInfo(a3, v6, 0, (int *)(a1 + 48));
  *(_BYTE *)(*(void *)(a2 + 16) + 14LL) = AllocatePipelineReflectionWithType(a2, (uint64_t)v6, 0x7Bu);
  DecodeDYMTLFunctionInfo(a3, v6, 1, v5);
}

uint64_t StoreMTLAccelerationStructureAllocationDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v36 = 0LL;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0x10uLL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)&v10, 0x87u, 1u);
  uint64_t v8 = v11;
  *(_BYTE *)(v11 + 9) = *((void *)Data + 1);
  *(_BYTE *)(v8 + 8) = *((void *)Data + 2);
  *(void *)uint64_t v8 = *((void *)Data + 3);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLBufferDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v23 = 0LL;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v12 = 0u;
  memset(v10, 0, sizeof(v10));
  __int128 v11 = 0x28uLL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v10, 0x2Au, 1u);
  uint64_t v8 = v11;
  *(_OWORD *)__int128 v11 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(void *)(v8 + 32) = 0LL;
  *(void *)uint64_t v8 = *((void *)Data + 1);
  *(_WORD *)(v8 + 32) = *((void *)Data + 2);
  *(_BYTE *)(v8 + 34) = *((void *)Data + 6);
  *(void *)(v8 + 24) = *((void *)Data + 8);
  *(void *)(v8 + 8) = *((void *)Data + 9);
  *(void *)(v8 + 16) = *((void *)Data + 10);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreIOSurfaceUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  uint64_t v12 = 0LL;
  memset(v11, 0, sizeof(v11));
  DecodeDYIOSurface((uint64_t)Data, v7, (uint64_t)v11, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x3Fu, 1u);
  DecodeDYIOSurface((uint64_t)Data, v8, (uint64_t)v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLCommandQueueDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  memset(v11, 0, sizeof(v11));
  __int128 v12 = 0x10uLL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x43u, 1u);
  uint64_t v8 = v12;
  *(_OWORD *)__int128 v12 = GTMTLCommandQueueDescriptorDefaults;
  unsigned int v9 = *(_DWORD *)Data;
  *(_DWORD *)uint64_t v8 = *((void *)Data + 1);
  *(_BYTE *)(v8 + 8) = *((void *)Data + 2);
  *(_BYTE *)(v8 + 4) = *((void *)Data + 3);
  *(_BYTE *)(v8 + memset(v56, 0, 7) = *((void *)Data + 4);
  if (v9 >= 0x2A)
  {
    *(_BYTE *)(v8 + 6) = *((void *)Data + 5);
    if (v9 >= 0x51) {
      *(_BYTE *)(v8 + 5) = *((void *)Data + 6);
    }
  }

  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLImageFilterFunctionInfoSPIUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  uint64_t v13 = 0LL;
  memset(v12, 0, sizeof(v12));
  unsigned __int8 v9 = DecodeDYMTLImageFilterFunctionInfoSPI((uint64_t)Data, v7, (uint64_t)v12, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v12, 0x14u, v9);
  DecodeDYMTLImageFilterFunctionInfoSPI((uint64_t)Data, v8, (uint64_t)v12, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLCounterSampleBufferDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  uint64_t v12 = 0LL;
  memset(v11, 0, sizeof(v11));
  DecodeDYMTLCounterSampleBufferDescriptor((uint64_t)Data, v7, v11, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x48u, 1u);
  DecodeDYMTLCounterSampleBufferDescriptor((uint64_t)Data, v8, v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLDepthStencilDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  uint64_t v12 = 0LL;
  memset(v11, 0, sizeof(v11));
  DecodeDYMTLDepthStencilDescriptor((uint64_t)Data, v7, (uint64_t)v11, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x34u, 1u);
  DecodeDYMTLDepthStencilDescriptor((uint64_t)Data, v8, (uint64_t)v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

void SaveMTLDynamicLibraryInfo_(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5 = (int *)(a1 + 48);
  memset(v6, 0, sizeof(v6));
  DecodeDYMTLDynamicLibraryInfo(a3, v6, 0, (int *)(a1 + 48));
  *(_BYTE *)(*(void *)(a2 + 16) + 14LL) = AllocatePipelineReflectionWithType(a2, (uint64_t)v6, 0x7Cu);
  DecodeDYMTLDynamicLibraryInfo(a3, v6, 1, v5);
}

uint64_t StoreMTLIOCommandQueueDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v30 = 0LL;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  uint64_t v11 = 0LL;
  __int128 v13 = 0u;
  memset(v10, 0, sizeof(v10));
  uint64_t v12 = (void *)&dword_8;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v10, 0x89u, 1u);
  uint64_t v8 = v12;
  *uint64_t v12 = 64LL;
  *(_DWORD *)uint64_t v8 = *((void *)Data + 1);
  *((_BYTE *)v8 + 4) = *((void *)Data + 2);
  *((_BYTE *)v8 + 5) = *((void *)Data + 3);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLIndirectCommandBufferDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v27 = 0LL;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  memset(v11, 0, sizeof(v11));
  __int128 v12 = 0x18uLL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x37u, 1u);
  uint64_t v8 = v12;
  *(void *)(v12 + 8) = 0LL;
  *(void *)(v8 + 16) = 0LL;
  *(void *)uint64_t v8 = 0LL;
  unsigned int v9 = *(_DWORD *)Data;
  *(_WORD *)(v8 + 8) = *((void *)Data + 1);
  *(_BYTE *)(v8 + 11) = *((void *)Data + 2);
  *(_BYTE *)(v8 + 10) = *((void *)Data + 3);
  *(_BYTE *)(v8 + 18) = *((void *)Data + 4);
  *(_BYTE *)(v8 + 12) = *((void *)Data + 5);
  if (v9 >= 0x1B)
  {
    *(_BYTE *)(v8 + 13) = *((void *)Data + 6);
    *(_BYTE *)(v8 + 14) = *((void *)Data + 7);
    if (v9 >= 0x29)
    {
      *(void *)uint64_t v8 = *((void *)Data + 8);
      if (v9 >= 0x3C)
      {
        *(_BYTE *)(v8 + 20) = *((void *)Data + 9);
        if (v9 >= 0x48)
        {
          *(_BYTE *)(v8 + 16) = *((void *)Data + 10);
          *(_BYTE *)(v8 + 15) = *((void *)Data + 11);
          *(_BYTE *)(v8 + 1memset(v56, 0, 7) = *((void *)Data + 12);
          if (v9 != 72)
          {
            *(_BYTE *)(v8 + 19) = *((void *)Data + 13);
            if (v9 >= 0x4A) {
              *(_BYTE *)(v8 + 21) = *((void *)Data + 14);
            }
          }
        }
      }
    }
  }

  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLMotionEstimationPipelineDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  uint64_t v11 = 0LL;
  memset(v10, 0, sizeof(v10));
  __int128 v12 = &dword_4;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v10, 0x42u, 1u);
  uint64_t v8 = v12;
  *__int128 v12 = 0;
  v8[1] = *((void *)Data + 1);
  *uint64_t v8 = *((void *)Data + 2);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

void SaveMTLPipelineLibraryInfo_(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5 = (int *)(a1 + 48);
  memset(v6, 0, sizeof(v6));
  DecodeDYMTLPipelineLibraryInfo(a3, v6, 0, (int *)(a1 + 48));
  *(_BYTE *)(*(void *)(a2 + 16) + 14LL) = AllocatePipelineReflectionWithType(a2, (uint64_t)v6, 0x8Au);
  DecodeDYMTLPipelineLibraryInfo(a3, v6, 1, v5);
}

uint64_t StoreMTLRasterizationRateMapDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  uint64_t v12 = 0LL;
  memset(v11, 0, sizeof(v11));
  DecodeDYMTLRasterizationRateMapDescriptor((uint64_t)Data, v7, v11, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x45u, 1u);
  DecodeDYMTLRasterizationRateMapDescriptor((uint64_t)Data, v8, v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

void *SaveMTLRenderPipelineReflection_(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  __int128 v28 = 0u;
  unint64_t v6 = (int *)(a1 + 48);
  memset(v27, 0, sizeof(v27));
  DecodeDYMTLRenderPipelineReflection(a3, v27, 0, (int *)(a1 + 48));
  uint64_t v7 = (char *)PerformanceStatisticsURL(a3);
  if (v7)
  {
    FileWithFilename = (unsigned int *)GTCaptureArchive_getFileWithFilename(*(void *)a1, v7);
    unsigned int v9 = FileWithFilename;
    if (FileWithFilename)
    {
      char v10 = 0;
      uint64_t v11 = *FileWithFilename;
      goto LABEL_6;
    }
  }

  else
  {
    unsigned int v9 = 0LL;
  }

  uint64_t v11 = 0LL;
  char v10 = 1;
LABEL_6:
  *((void *)&v28 + 1) += v11;
  *(_BYTE *)(*(void *)(a2 + 16) + 14LL) = AllocatePipelineReflectionWithType(a2, (uint64_t)v27, 0x77u);
  uint64_t v12 = DecodeDYMTLRenderPipelineReflection(a3, v27, 1u, v6);
  if ((v10 & 1) == 0)
  {
    uint64_t v13 = *(void *)a1;
    __int128 v14 = *(apr_pool_t ***)(a1 + 8);
    uint64_t v15 = *((void *)&v28 + 1);
    GTCaptureArchive_fillBuffer(v13, v14, v7, *((char **)&v28 + 1), *v9, v6);
    uint64_t v16 = *v9;
    *(void *)(v12 + 112) = v15;
    *(void *)(v12 + 120) = v16;
  }

  memset(v26, 0, 280);
  uint64_t v17 = *(void *)(v12 + 72);
  if (v17) {
    CalculateBindingsAccess(v17, *(unsigned __int16 *)(v12 + 208), (uint64_t)v26);
  }
  uint64_t v18 = *(void *)(v12 + 24);
  if (v18) {
    CalculateBindingsAccess(v18, *(unsigned __int16 *)(v12 + 198), (uint64_t)v26);
  }
  uint64_t v19 = *(void *)(v12 + 32);
  if (v19) {
    CalculateBindingsAccess(v19, *(unsigned __int16 *)(v12 + 200), (uint64_t)&v26[3] + 8);
  }
  uint64_t v20 = *(void *)(v12 + 40);
  if (v20) {
    CalculateBindingsAccess(v20, *(unsigned __int16 *)(v12 + 204), (uint64_t)&v26[7]);
  }
  uint64_t v21 = *(void *)(v12 + 80);
  if (v21) {
    CalculateBindingsAccess(v21, *(unsigned __int16 *)(v12 + 210), (uint64_t)&v26[7]);
  }
  uint64_t v22 = *(void *)(v12 + 48);
  if (v22) {
    CalculateBindingsAccess(v22, *(unsigned __int16 *)(v12 + 206), (uint64_t)&v26[10] + 8);
  }
  uint64_t v23 = *(void *)(v12 + 88);
  if (v23) {
    CalculateBindingsAccess(v23, *(unsigned __int16 *)(v12 + 212), (uint64_t)&v26[10] + 8);
  }
  uint64_t v24 = *(void *)(v12 + 56);
  if (v24) {
    CalculateBindingsAccess(v24, *(unsigned __int16 *)(v12 + 202), (uint64_t)&v26[14]);
  }
  return memcpy((void *)(v12 + 216), v26, 0x118uLL);
}

uint64_t UnwrapMTLMeshRenderPipelineDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0LL;
  }
  uint64_t v9 = (uint64_t)Data;
  char v10 = v8;
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLMeshRenderPipelineDescriptor((uint64_t)Data, v8, v13, 0, a1);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x88u, 1u);
  DecodeDYMTLMeshRenderPipelineDescriptor(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t StoreMTLResidencySetDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  uint64_t v12 = 0LL;
  memset(v11, 0, sizeof(v11));
  DecodeDYMTLResidencySetDescriptor((uint64_t)Data, v7, (uint64_t *)v11, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x8Eu, 1u);
  DecodeDYMTLResidencySetDescriptor((uint64_t)Data, v8, (uint64_t *)v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLSamplerDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  uint64_t v12 = 0LL;
  memset(v11, 0, sizeof(v11));
  DecodeDYMTLSamplerDescriptor((uint64_t)Data, v7, (uint64_t)v11, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x35u, 1u);
  DecodeDYMTLSamplerDescriptor((uint64_t)Data, v8, (uint64_t)v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLFunctionConstantValuesUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  uint64_t v12 = 0LL;
  memset(v11, 0, sizeof(v11));
  DecodeDYMTLFunctionConstantValues((size_t)Data, v7, v11, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x50u, 1u);
  DecodeDYMTLFunctionConstantValues((size_t)Data, v8, v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLIntersectionFunctionDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  if (!Data) {
    return 0LL;
  }
  uint64_t v8 = (uint64_t)Data;
  uint64_t v9 = v7;
  uint64_t v13 = 0LL;
  memset(v12, 0, sizeof(v12));
  DecodeDYMTLIntersectionFunctionDescriptor((uint64_t)Data, v7, v12, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v12, 0x5Du, 1u);
  DecodeDYMTLIntersectionFunctionDescriptor(v8, v9, v12, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreBlobWithoutCaptureVersion(uint64_t a1, uint64_t a2, char *a3)
{
  if (a3)
  {
    uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
    uint64_t v5 = *v4;
    unint64_t v6 = (int *)(a1 + 48);
    Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
    if (v8 >= 8)
    {
      uint64_t v9 = GTTraceEncoder_storeBlob(a2, Data + 8, v8 - 8);
      apr_pool_clear(v5);
      return v9;
    }

    int v11 = *v6;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    v12[0] = v11;
    v12[1] = 500;
    uint64_t v13 = "data.length >= sizeof(uint64_t)";
    GTError_addError(v6, (uint64_t)v12);
  }

  return 0LL;
}

uint64_t UnwrapMTLRenderPipelineFunctionsDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = (uint64_t *)GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0LL;
  }
  uint64_t v9 = Data;
  uint64_t v10 = v8;
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLRenderPipelineFunctionsDescriptor(Data, v8, (uint64_t)v13, 0, a1);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x60u, 1u);
  DecodeDYMTLRenderPipelineFunctionsDescriptor(v9, v10, (uint64_t)v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t StoreMTLDeviceDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  uint64_t v12 = 0LL;
  memset(v11, 0, sizeof(v11));
  DecodeDYMTLDeviceDescriptor((uint64_t)Data, v7, (uint64_t)v11, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x41u, 1u);
  DecodeDYMTLDeviceDescriptor((uint64_t)Data, v8, (uint64_t)v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMPSPluginCNNConvolutionDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  memset(v11, 0, sizeof(v11));
  DecodeDYMPSPluginCNNConvolutionDescriptor(Data, v7, (uint64_t)v11, 0);
  uint64_t MPSDescriptorWithType = AllocateMPSDescriptorWithType(a2, (uint64_t)v11, 0x4Au);
  DecodeDYMPSPluginCNNConvolutionDescriptor(Data, v8, (uint64_t)v11, 1);
  apr_pool_clear(v5);
  return MPSDescriptorWithType;
}

uint64_t StoreMPSPluginCNNConvolutionDataUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v8 = v7;
  memset(v11, 0, sizeof(v11));
  DecodeDYMPSPluginCNNConvolutionData((uint64_t)Data, v7, v11, 0);
  uint64_t MPSDescriptorWithType = AllocateMPSDescriptorWithType(a2, (uint64_t)v11, 0x1Bu);
  DecodeDYMPSPluginCNNConvolutionData((uint64_t)Data, v8, v11, 1);
  apr_pool_clear(v5);
  return MPSDescriptorWithType;
}

uint64_t StoreMPSPluginNDArrayConvolutionDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  memset(v19, 0, sizeof(v19));
  __int128 v20 = 0x2CuLL;
  uint64_t MPSDescriptorWithType = AllocateMPSDescriptorWithType(a2, (uint64_t)v19, 0x4Cu);
  uint64_t v8 = 0LL;
  uint64_t v9 = (_BYTE *)v20;
  *(void *)&__int128 v20 = v20 + 44;
  uint64_t v10 = (uint64_t *)(Data + 8);
  do
  {
    int v11 = v10;
    uint64_t v12 = *v10++;
    *(_DWORD *)&v9[v8] = v12;
    v8 += 4LL;
  }

  while (v8 != 12);
  uint64_t v13 = 0LL;
  v9[36] = *v10;
  uint64_t v14 = v11 + 3;
  v9[37] = v10[1];
  do
  {
    uint64_t v15 = *v14++;
    *(_DWORD *)&v9[v13 + 12] = v15;
    v13 += 4LL;
  }

  while (v13 != 12);
  for (uint64_t i = 0LL; i != 12; i += 4LL)
  {
    uint64_t v17 = *v14++;
    *(_DWORD *)&v9[i + 24] = v17;
  }

  v9[38] = *v14;
  v9[39] = v14[1];
  v9[40] = v14[2];
  v9[41] = v14[3];
  v9[42] = v14[4];
  apr_pool_clear(v5);
  return MPSDescriptorWithType;
}

uint64_t StoreMPSSourceTextureInfoUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v15 = 0LL;
  __int128 v14 = 0u;
  __int128 v13 = 0u;
  __int128 v12 = 0u;
  __int128 v11 = 0u;
  uint64_t v10 = (void *)(&stru_20 + 48);
  uint64_t MPSDescriptorWithType = AllocateMPSDescriptorWithType(a2, (uint64_t)&v10, 0x18u);
  uint64_t v8 = v10;
  *uint64_t v10 = *((void *)Data + 1);
  v8[1] = *((void *)Data + 2);
  v8[2] = *((void *)Data + 3);
  v8[3] = *((void *)Data + 4);
  v8[4] = *((void *)Data + 5);
  v8[5] = *((void *)Data + 6);
  v8[6] = *((void *)Data + 7);
  v8[7] = *((void *)Data + 8);
  v8[8] = *((void *)Data + 9);
  v8[9] = *((void *)Data + 10);
  apr_pool_clear(v5);
  return MPSDescriptorWithType;
}

uint64_t StoreMPSDestinationTextureInfoUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  uint64_t v10 = 0LL;
  __int128 v11 = (void *)(&stru_20 + 48);
  uint64_t MPSDescriptorWithType = AllocateMPSDescriptorWithType(a2, (uint64_t)&v10, 0x19u);
  uint64_t v8 = v11;
  *__int128 v11 = *((void *)Data + 1);
  v8[1] = *((void *)Data + 2);
  v8[2] = *((void *)Data + 3);
  v8[3] = *((void *)Data + 4);
  v8[4] = *((void *)Data + 5);
  v8[5] = *((void *)Data + 6);
  v8[6] = *((void *)Data + 7);
  v8[7] = *((void *)Data + 8);
  v8[8] = *((void *)Data + 9);
  v8[9] = *((void *)Data + 10);
  apr_pool_clear(v5);
  return MPSDescriptorWithType;
}

uint64_t StoreMPSNDArrayStructureUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  uint64_t v17 = 0LL;
  memset(v16, 0, sizeof(v16));
  uint64_t v18 = (void *)(&stru_20 + 16);
  uint64_t MPSDescriptorWithType = AllocateMPSDescriptorWithType(a2, (uint64_t)v16, 0x1Cu);
  uint64_t v8 = 0LL;
  uint64_t v9 = v18;
  uint64_t v10 = v18;
  *uint64_t v18 = *((void *)Data + 1);
  uint64_t v18 = v10 + 6;
  __int128 v11 = (uint64_t *)(Data + 16);
  do
  {
    uint64_t v12 = *v11++;
    *(_DWORD *)((char *)v9 + v8 + 8) = v12;
    v8 += 4LL;
  }

  while (v8 != 16);
  uint64_t v13 = 0LL;
  __int128 v14 = v9 + 3;
  do
    *v14++ = v11[v13++];
  while (v13 != 4);
  *((_DWORD *)v9 + 10) = v11[4];
  apr_pool_clear(v5);
  return MPSDescriptorWithType;
}

uint64_t StoreMTLFXSpatialScalerDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v20 = 0LL;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  memset(v10, 0, sizeof(v10));
  __int128 v11 = 0x28uLL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v10, 0x8Bu, 1u);
  uint64_t v8 = v11;
  *(void *)__int128 v11 = *((void *)Data + 1);
  *(void *)(v8 + 8) = *((void *)Data + 2);
  *(void *)(v8 + 16) = *((void *)Data + 3);
  *(void *)(v8 + 24) = *((void *)Data + 4);
  *(_WORD *)(v8 + 32) = *((void *)Data + 5);
  *(_WORD *)(v8 + 34) = *((void *)Data + 6);
  *(_BYTE *)(v8 + 36) = *((void *)Data + 7);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLFXTemporalScalerDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v22 = 0LL;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  uint64_t v12 = 0LL;
  memset(v11, 0, sizeof(v11));
  __int128 v13 = (_WORD *)(&stru_20 + 32);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x8Cu, 1u);
  unsigned int v8 = *(_DWORD *)Data;
  uint64_t v9 = v13;
  *__int128 v13 = *((void *)Data + 1);
  v9[1] = *((void *)Data + 2);
  v9[2] = *((void *)Data + 3);
  v9[3] = *((void *)Data + 4);
  *((void *)v9 + 2) = *((void *)Data + 5);
  *((void *)v9 + 3) = *((void *)Data + 6);
  *((void *)v9 + 4) = *((void *)Data + 7);
  *((void *)v9 + 5) = *((void *)Data + 8);
  *((_DWORD *)v9 + 12) = *((_DWORD *)Data + 18);
  *((_DWORD *)v9 + 13) = *((_DWORD *)Data + 20);
  *((_BYTE *)v9 + 56) = *((void *)Data + 11);
  *((_BYTE *)v9 + 5memset(v56, 0, 7) = *((void *)Data + 12);
  if (v8 >= 0x4D)
  {
    *((_BYTE *)v9 + 58) = *((void *)Data + 13);
    void v9[4] = *((void *)Data + 14);
    if (v8 >= 0x50) {
      *((_BYTE *)v9 + 59) = *((void *)Data + 15);
    }
  }

  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreSnapshot(uint64_t a1, uint64_t a2, char *__s, void *a4)
{
  unsigned int v8 = *(apr_pool_t **)(a1 + 40);
  size_t v9 = strlen(__s);
  uint64_t v10 = *find_entry(*(void *)(a1 + 32), __s, v9, 0LL);
  if (v10)
  {
    __int128 v11 = *(unsigned __int8 **)(v10 + 32);
    if (v11)
    {
      uint64_t v12 = v11[8];
      if (!a4) {
        return v12;
      }
      goto LABEL_11;
    }
  }

  Data = GTCaptureArchive_readData(*(const char ***)a1, *(apr_pool_t ***)(a1 + 8), __s, v8, (int *)(a1 + 48));
  if (v14 < 8)
  {
    int v16 = *(_DWORD *)(a1 + 48);
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    v18[0] = v16;
    v18[1] = 500;
    __int128 v19 = "data.length >= sizeof(uint64_t)";
    GTError_addError((int *)(a1 + 48), (uint64_t)v18);
    return 0LL;
  }

  else
  {
    uint64_t v12 = GTTraceEncoder_storeBlob(a2, Data, v14);
    __int128 v11 = (unsigned __int8 *)apr_palloc(v8, 0x10uLL);
    *(void *)__int128 v11 = **(void **)(a2 + 16);
    v11[8] = v12;
    if (__s)
    {
      __int128 v15 = apr_palloc(v8, v9 + 1);
      memcpy(v15, __s, v9 + 1);
    }

    else
    {
      __int128 v15 = 0LL;
    }

    apr_hash_set(*(apr_hash_t **)(a1 + 32), v15, v9, v11);
    if (a4) {
LABEL_11:
    }
      *a4 = *(void *)v11;
  }

  return v12;
}

uint64_t StoreMTLHeapDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v28 = 0LL;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  uint64_t v12 = 0LL;
  memset(v11, 0, sizeof(v11));
  uint64_t v13 = 24LL;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x36u, 1u);
  uint64_t v8 = v13;
  *(void *)(v13 + 16) = 32LL;
  *(_OWORD *)uint64_t v8 = GTMTLHeapDescriptorDefaults;
  unsigned int v9 = *(_DWORD *)Data;
  *(void *)(v8 + 8) = *((void *)Data + 1);
  *(_BYTE *)(v8 + 19) = *((void *)Data + 4);
  *(_WORD *)(v8 + 16) = *((void *)Data + 7);
  if (v9 >= 0x2A)
  {
    *(_BYTE *)(v8 + 18) = *((void *)Data + 8);
    if (v9 >= 0x34) {
      *(void *)uint64_t v8 = *((void *)Data + 9);
    }
  }

  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t SaveMTLLibraryInfo_(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5 = (int *)(a1 + 48);
  memset(v7, 0, sizeof(v7));
  DecodeDYMTLLibraryInfo(a3, (uint64_t)v7, 0, (int *)(a1 + 48));
  *(_BYTE *)(*(void *)(a2 + 16) + 14LL) = AllocatePipelineReflectionWithType(a2, (uint64_t)v7, 0x85u);
  return DecodeDYMTLLibraryInfo(a3, (uint64_t)v7, 1, v5);
}

uint64_t UnwrapMTLCompileOptionsUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(apr_pool_t ***)(a1 + 8);
  unint64_t v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data) {
    return 0LL;
  }
  uint64_t v9 = (uint64_t)Data;
  uint64_t v10 = v8;
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLCompileOptions((uint64_t)Data, v8, v13, 0, a1);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x49u, 1u);
  DecodeDYMTLCompileOptions(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t StoreMTLTextureMipmapInfoUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(apr_pool_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v18 = 0u;
  memset(v17, 0, sizeof(v17));
  uint64_t v7 = Data[8];
  *((void *)&v18 + 1) = 16LL;
  *(void *)&__int128 v25 = 16 * v7;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v17, 0x5Fu, 1u);
  uint64_t v9 = *((void *)Data + 1);
  uint64_t v10 = (void *)*((void *)&v18 + 1);
  uint64_t v11 = v25;
  *(_BYTE *)(*((void *)&v18 + 1) + 8LL) = *((void *)Data + 1);
  if (v9) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0LL;
  }
  *uint64_t v10 = v12;
  if (v9)
  {
    uint64_t v13 = (_DWORD *)(v11 + 8);
    uint64_t v14 = (uint64_t *)(Data + 40);
    do
    {
      *(v13 - 2) = *(v14 - 2);
      *(v13 - 1) = *(v14 - 1);
      uint64_t v15 = *v14;
      v14 += 4;
      *uint64_t v13 = v15;
      v13 += 4;
      --v9;
    }

    while (v9);
  }

  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StreamArrayFromFile(uint64_t a1, uint64_t a2, char *a3, int a4)
{
  uint64_t v7 = (int *)(a1 + 48);
  GTCaptureArchive_readData( *(const char ***)a1,  *(apr_pool_t ***)(a1 + 8),  a3,  **(apr_pool_t ***)(a1 + 8),  (int *)(a1 + 48));
  if (v8 >= 8LL * a4)
  {
    __chkstk_darwin();
    return StreamArray(a1, a2, (_DWORD *)((char *)&v15[-2] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)), v12, v13);
  }

  else
  {
    int v9 = *v7;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    v15[0] = v9;
    v15[1] = 500;
    __int128 v16 = "data.length >= count * sizeof(uint64_t)";
    GTError_addError((int *)(a1 + 48), (uint64_t)v15);
    return 0LL;
  }

uint64_t AllocateDescriptorWithCount(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  do
  {
    v6 += (*(void *)(a2 + v5) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    v5 += 8LL;
  }

  while (v5 != 424);
  uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 24LL);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 42);
  *(_BYTE *)(a1 + 42) = v9 + 1;
  Bytes = GTTraceMemPool_allocateBytes( v7,  v8,  (v6 << 32) | ((unint64_t)a3 << 16) | ((unint64_t)a4 << 8) | v9);
  uint64_t v11 = 0LL;
  uint64_t v12 = Bytes + 16;
  do
  {
    if (((*(void *)(a2 + v11) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) != 0) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0LL;
    }
    v12 += (*(void *)(a2 + v11) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    *(void *)(a2 + v11) = v13;
    v11 += 8LL;
  }

  while (v11 != 424);
  return Bytes[8];
}

uint64_t AllocatePipelineReflectionWithType(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = 0LL;
  int64x2_t v5 = 0uLL;
  int64x2_t v6 = vdupq_n_s64(7uLL);
  int8x16_t v7 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFF8LL);
  do
  {
    int64x2_t v5 = vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(*(int64x2_t *)(a2 + v4), v6), v7), v5);
    v4 += 16LL;
  }

  while (v4 != 192);
  uint64_t v8 = vaddvq_s64(v5);
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 24LL);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 42);
  *(_BYTE *)(a1 + 42) = v11 + 1;
  Bytes = GTTraceMemPool_allocateBytes(v9, v10, (v8 << 32) | ((unint64_t)a3 << 16) | v11 | 0x100);
  uint64_t v13 = 0LL;
  uint64_t v14 = Bytes + 16;
  do
  {
    if (((*(void *)(a2 + v13) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) != 0) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0LL;
    }
    v14 += (*(void *)(a2 + v13) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    *(void *)(a2 + v13) = v15;
    v13 += 8LL;
  }

  while (v13 != 192);
  return Bytes[8];
}

uint64_t AllocateMPSDescriptorWithType(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = 0LL;
  int64x2_t v5 = 0uLL;
  int64x2_t v6 = vdupq_n_s64(0xFuLL);
  int8x16_t v7 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFF0LL);
  do
  {
    int64x2_t v5 = vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(*(int64x2_t *)(a2 + v4), v6), v7), v5);
    v4 += 16LL;
  }

  while (v4 != 80);
  uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 24LL);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 42);
  *(_BYTE *)(a1 + 42) = v10 + 1;
  Bytes = GTTraceMemPool_allocateBytes(v8, v9, (vaddvq_s64(v5) << 32) | ((unint64_t)a3 << 16) | v10 | 0x100);
  uint64_t v12 = 0LL;
  uint64_t v13 = Bytes + 16;
  do
  {
    if (((*(void *)(a2 + v12) + 15LL) & 0xFFFFFFFFFFFFFFF0LL) != 0) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0LL;
    }
    v13 += (*(void *)(a2 + v12) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
    *(void *)(a2 + v12) = v14;
    v12 += 8LL;
  }

  while (v12 != 80);
  return Bytes[8];
}

unint64_t *GTTraceContext_openStream(uint64_t a1, unint64_t a2)
{
  int64x2_t v5 = v4;
  RetainFreeNode(a1);
  v5[3] = v6;
  int8x16_t v7 = (unint64_t *)(a1 + 80);
  do
    unint64_t v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *int64x2_t v5 = v8;
  v5[1] = a2;
  v5[2] = 0LL;
  uint64_t v9 = (void *)v5[3];
  void *v9 = *(void *)(a1 + 64);
  void v9[4] = v8;
  uint64_t v10 = (unsigned int *)(v9 + 5);
  do
    unsigned int v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  atomic_store(0LL, v5 + 7);
  apr_hash_set(*(apr_hash_t **)(a1 + 88), v5, 8LL, v5);
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v5;
}

double RetainFreeNode(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 96);
  if (!v2)
  {
    uint64_t v2 = apr_palloc(**(apr_pool_t ***)(a1 + 88), 0x1000uLL);
    for (uint64_t i = 0LL; i != 504; i += 8LL)
      v2[i] = &v2[i + 8];
    v2[504] = 0LL;
    *(void *)(a1 + 96) = v2;
  }

  *(void *)(a1 + 96) = *v2;
  double result = 0.0;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *(_OWORD *)uint64_t v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  return result;
}

uint64_t GTTraceFunc_argumentBlobWithMap(void *a1, unsigned int a2, uint64_t a3)
{
  if (a2 < 0x40) {
    return 0LL;
  }
  v7[2] = v3;
  v7[3] = v4;
  v7[0] = *a1;
  v7[1] = a2;
  entry = find_entry(a3, v7, 9uLL, 0LL);
  if (*entry) {
    return *(void *)(*entry + 32LL);
  }
  else {
    return 0LL;
  }
}

char *GTTraceFunc_argumentBytesWithPool(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0x40) {
    return (char *)a1 + a2;
  }
  uint64_t v3 = *(void *)(a3 + 8);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *a1;
  while (1)
  {
    unsigned int v5 = atomic_load((unsigned int *)(v3 + 4));
    int v6 = v5 - 64;
    if (v6 >= 1) {
      break;
    }
LABEL_11:
    double result = 0LL;
    uint64_t v3 = *(void *)(v3 + 40);
    if (!v3) {
      return result;
    }
  }

  uint64_t v7 = v3 + 64;
  while (v4 != *(void *)v7 || *(unsigned __int8 *)(v7 + 8) != a2)
  {
    signed int v8 = (*(_DWORD *)(v7 + 12) + 23) & 0xFFFFFFF8;
    v7 += v8;
    BOOL v9 = __OFSUB__(v6, v8);
    v6 -= v8;
    if ((v6 < 0) ^ v9 | (v6 == 0)) {
      goto LABEL_11;
    }
  }

  return (char *)(v7 + 16);
}

char *GTTraceFunc_argumentBytesWithMap(void *a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0x40) {
    return (char *)a1 + a2;
  }
  v8[2] = v3;
  v8[3] = v4;
  v8[0] = *a1;
  v8[1] = a2;
  entry = find_entry(a3, v8, 9uLL, 0LL);
  if (!*entry) {
    return 0LL;
  }
  uint64_t v6 = *(void *)(*entry + 32LL);
  if (v6) {
    return (char *)(v6 + 16);
  }
  else {
    return 0LL;
  }
}

char *GTTraceFunc_targetContext(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  double result = GTTraceFunc_argumentBytesWithMap((void *)a1, *(unsigned __int8 *)(a1 + 13), a2);
  if (v2 >> 1 == 2147475691)
  {
    result += 16;
  }

  else if (!result)
  {
    return result;
  }

  return *(char **)result;
}

uint64_t GTTraceMemoryMap_argumentBlobAtIndex(unsigned int a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0x40) {
    return 0LL;
  }
  v7[2] = v3;
  v7[3] = v4;
  v7[0] = a3;
  v7[1] = a1;
  entry = find_entry(a2, v7, 9uLL, 0LL);
  if (*entry) {
    return *(void *)(*entry + 32LL);
  }
  else {
    return 0LL;
  }
}

void GTTraceContext_pushEncoderWithStream(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unint64_t *)(a2 + 72);
  do
    unint64_t v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *(void *)a1 = a2;
  *(void *)(a1 + 24) = v5;
  s();
  unint64_t v8 = *v7;
  *(void *)(a1 + 32) = *v7;
  *uint64_t v7 = v5;
  char v9 = *((_BYTE *)v7 + 8);
  *(_BYTE *)(a1 + 40) = v9;
  *(_WORD *)(a1 + 41) = 16400;
  *(_DWORD *)(a1 + 43) = 0;
  *(_BYTE *)(a1 + 4memset(v56, 0, 7) = 0;
  if (!v6) {
    uint64_t v6 = *(void *)(a2 + 112);
  }
  *(void *)(a1 + 8) = v6;
  PushFunc(v6);
  *(void *)(a1 + 16) = v10;
  *(void *)uint64_t v10 = v5;
  *(_DWORD *)(v10 + 11) = 0;
  *(_DWORD *)(v10 + 8) = 0;
  *(_BYTE *)(v10 + 15) = v9;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  if (v8)
  {
    char v11 = GTTraceEncoder_storeBytes(a1, (void *)(a1 + 32), 8uLL);
    uint64_t v10 = *(void *)(a1 + 16);
  }

  else
  {
    char v11 = 0;
  }

  *(_BYTE *)(v10 + 12) = v11;
  unsigned __int8 v12 = atomic_load((unsigned __int8 *)(a2 + 120));
  if ((v12 & 1) != 0)
  {
    uint64_t v13 = *(void *)a1;
    uint64_t v14 = *(void *)(a1 + 24);
    GTTraceContext_backtrace_callstack();
    __int128 v16 = v15;
    int v17 = backtrace(v15, 512);
    if (v17 >= 1)
    {
      uint64_t v18 = v17 - 2;
      size_t v19 = 8 * v18;
      pthread_threadid_np(0LL, &v45);
      unsigned int v20 = v45 & 0xF;
      __int128 v21 = (unsigned int *)(v13 + 24 * (v45 & 0xF) + 144);
      do
        unsigned int v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
      __int128 v23 = (unsigned int *)(v13 + 24LL * v20 + 148);
      do
        unsigned int v24 = atomic_load(v23);
      while (v24 != v22);
      unint64_t v25 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v26 = v13 + 24LL * v20;
      uint64_t v29 = *(unsigned int **)(v26 + 128);
      __int128 v28 = (void *)(v26 + 128);
      __int128 v27 = v29;
      if (!v29) {
        goto LABEL_23;
      }
      uint64_t v30 = v27 + 1;
      uint64_t v31 = atomic_load(v27 + 1);
      while (1)
      {
        uint64_t v32 = v31;
        unint64_t v33 = v25 + v31;
        unint64_t v34 = *v27;
        if (v33 > v34) {
          break;
        }
        uint64_t v31 = __ldaxr(v30);
        if (v31 == v32)
        {
          if (!__stlxr(v33, v30))
          {
            unint64_t v34 = *v27;
            break;
          }
        }

        else
        {
          __clrex();
        }
      }

      __int128 v35 = (void *)((char *)v27 + v32);
      if (v33 > v34)
      {
LABEL_23:
        uint64_t v36 = (unsigned int *)GTTraceStoreAllocNode(*(int **)(v13 + 64), 0x3FC0uLL, 3, 0LL);
        *((void *)v36 + 5) = *v28;
        *__int128 v28 = v36;
        uint64_t v37 = v13 + 24LL * v20;
        uint64_t v39 = *(void *)(v37 + 136);
        __int128 v38 = (void *)(v37 + 136);
        if (!v39) {
          *__int128 v38 = v36;
        }
        __int128 v40 = v36 + 1;
        uint64_t v41 = atomic_load(v36 + 1);
        while (1)
        {
          uint64_t v42 = v41;
          unint64_t v43 = v25 + v41;
          unint64_t v44 = *v36;
          if (v43 > v44) {
            break;
          }
          uint64_t v41 = __ldaxr(v40);
          if (v41 == v42)
          {
            if (!__stlxr(v43, v40))
            {
              unint64_t v44 = *v36;
              break;
            }
          }

          else
          {
            __clrex();
          }
        }

        __int128 v35 = (void *)((char *)v36 + v42);
        if (v43 > v44) {
          __int128 v35 = 0LL;
        }
      }

      atomic_store(v22 + 1, v23);
      *__int128 v35 = v14;
      v35[1] = v18 | 0x800000000LL;
      memcpy(v35 + 2, v16 + 2, v19);
    }
  }

double PushFunc(uint64_t a1)
{
  unsigned int v2 = (unsigned int *)(a1 + 48);
  do
    unsigned int v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  do
    unsigned int v4 = atomic_load((unsigned int *)(a1 + 52));
  while (v4 != v3);
  unint64_t v5 = *(unsigned int **)(a1 + 40);
  if (!v5) {
    goto LABEL_13;
  }
  uint64_t v6 = v5 + 1;
  uint64_t v7 = atomic_load(v5 + 1);
  while (1)
  {
    uint64_t v8 = v7;
    unint64_t v9 = v7 + 64;
    unint64_t v10 = *v5;
    if (v9 > v10) {
      break;
    }
    uint64_t v7 = __ldaxr(v6);
    if (v7 == v8)
    {
      if (!__stlxr(v9, v6))
      {
        unint64_t v10 = *v5;
        break;
      }
    }

    else
    {
      __clrex();
    }
  }

  if (v9 <= v10)
  {
    unsigned int v22 = (_OWORD *)((char *)v5 + v8);
    signed int v11 = v3 + 1;
  }

  else
  {
LABEL_13:
    signed int v11 = v3 + 1;
    else {
      unint64_t v12 = (uint64_t)v11 << 7;
    }
    uint64_t v13 = (unsigned int *)GTTraceStoreAllocNode(**(int ***)(a1 + 24), v12, 1, *(void *)a1);
    uint64_t v14 = *(void *)(a1 + 40);
    if (v14) {
      uint64_t v15 = (void *)(v14 + 40);
    }
    else {
      uint64_t v15 = (void *)(a1 + 32);
    }
    *uint64_t v15 = v13;
    *(void *)(a1 + 40) = v13;
    *((void *)v13 + 5) = 0LL;
    __int128 v16 = v13 + 1;
    uint64_t v17 = atomic_load(v13 + 1);
    while (1)
    {
      uint64_t v18 = v17;
      unint64_t v19 = v17 + 64;
      unint64_t v20 = *v13;
      if (v19 > v20) {
        break;
      }
      uint64_t v17 = __ldaxr(v16);
      if (v17 == v18)
      {
        if (!__stlxr(v19, v16))
        {
          unint64_t v20 = *v13;
          break;
        }
      }

      else
      {
        __clrex();
      }
    }

    __int128 v21 = (_OWORD *)((char *)v13 + v18);
    if (v19 <= v20) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0LL;
    }
  }

  double result = 0.0;
  v22[2] = 0u;
  v22[3] = 0u;
  *unsigned int v22 = 0u;
  v22[1] = 0u;
  atomic_store(v11, (unsigned int *)(a1 + 52));
  return result;
}

uint64_t GTTraceEncoder_storeBytes(uint64_t a1, void *__src, size_t __n)
{
  uint64_t v3 = 0LL;
  if (__src)
  {
    unsigned int v4 = __n;
    if (__n)
    {
      uint64_t v3 = *(unsigned __int8 *)(a1 + 41);
      if (v3 + __n > 0x40)
      {
        uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 24LL);
        uint64_t v3 = *(unsigned __int8 *)(a1 + 42);
        *(_BYTE *)(a1 + 42) = v3 + 1;
        if ((_DWORD)__n)
        {
          Bytes = GTTraceMemPool_allocateBytes( v7,  *(void *)(a1 + 24),  v3 | ((unint64_t)__n << 32));
          memcpy(Bytes + 16, __src, v4);
        }
      }

      else
      {
        memcpy((void *)(*(void *)(a1 + 16) + v3), __src, __n);
        *(_BYTE *)(a1 + 41) += (v4 + 7) & 0xF8;
      }
    }
  }

  return v3;
}

char *GTTraceEncoder_allocateArguments(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  *(_DWORD *)(v3 + 8) = a2;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 41);
  if ((unint64_t)(v4 + a3) > 0x40)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 24LL);
    uint64_t v7 = *(unsigned __int8 *)(a1 + 42);
    *(_BYTE *)(a1 + 42) = v7 + 1;
    unint64_t v5 = GTTraceMemPool_allocateBytes(v6, *(void *)(a1 + 24), v7 | (a3 << 32)) + 16;
    LOBYTE(v4) = v7;
  }

  else
  {
    unint64_t v5 = (char *)(v3 + v4);
    *(_BYTE *)(a1 + 41) = v4 + a3;
  }

  *(_BYTE *)(v3 + 13) = v4;
  return v5;
}

uint64_t GTTraceEncoder_storeBlob(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v3 = 0LL;
  if (a2)
  {
    if (a3)
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 24LL);
      uint64_t v3 = *(unsigned __int8 *)(a1 + 42);
      *(_BYTE *)(a1 + 42) = v3 + 1;
      if ((_DWORD)a3)
      {
        size_t v6 = a3;
        Bytes = GTTraceMemPool_allocateBytes( v4,  *(void *)(a1 + 24),  v3 | ((unint64_t)a3 << 32));
        memcpy(Bytes + 16, a2, v6);
      }
    }
  }

  return v3;
}

uint64_t GTTraceStream_lastFunc(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    unsigned int v2 = atomic_load((unsigned int *)(v1 + 4));
    if (v2 < 0x80)
    {
LABEL_7:
      uint64_t v1 = *(void *)(a1 + 32);
      if (v1)
      {
        unsigned int v6 = 0;
        while (1)
        {
          unsigned int v7 = atomic_load((unsigned int *)(v1 + 4));
          int v8 = v6 + (v7 >> 6) - 1;
          if (v8 > 0) {
            break;
          }
          uint64_t v1 = *(void *)(v1 + 40);
          unsigned int v6 = v8;
          if (!v1) {
            return v1;
          }
        }

        uint64_t v9 = v6;
        uint64_t v10 = (uint64_t)(0xFFFFFFFF00000001LL * v6) >> 32;
        if ((*(_BYTE *)(v1 + (v10 << 6) + 79) & 8) != 0)
        {
          do
          {
            uint64_t v11 = v1;
            uint64_t v12 = v10;
            unsigned int v13 = atomic_load((unsigned int *)(v1 + 4));
            uint64_t v14 = (HIDWORD(v9) + 1);
            if ((_DWORD)v14 == (_DWORD)v9 + (v13 >> 6) - 1)
            {
              uint64_t v1 = *(void *)(v11 + 40);
              if (!v1) {
                return v11 + (v12 << 6) + 64;
              }
              uint64_t v9 = (HIDWORD(v9) + 1);
            }

            else
            {
              uint64_t v9 = v9;
              uint64_t v1 = v11;
            }

            v9 |= v14 << 32;
            uint64_t v10 = (uint64_t)(0xFFFFFFFF00000001LL * v9) >> 32;
          }

          while ((*(_BYTE *)(v1 + (v10 << 6) + 79) & 8) != 0);
          return v11 + (v12 << 6) + 64;
        }

        else
        {
          return 0LL;
        }
      }
    }

    else
    {
      int v3 = (v2 >> 6) - 2;
      uint64_t v4 = v1 + 64;
      while (1)
      {
        uint64_t v1 = v4 + ((unint64_t)v3 << 6);
        if ((*(_BYTE *)(v1 + 15) & 8) != 0) {
          break;
        }
        BOOL v5 = __OFSUB__(v3--, 1);
        if (v3 < 0 != v5) {
          goto LABEL_7;
        }
      }
    }
  }

  return v1;
}

uint64_t GTMTLGPUAddressResource_compare(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 != *a2;
  }
}

void *GTMTLGPUAddressResource_resourceForGPUAddress(void *a1, unint64_t a2, unint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  int v3 = a1;
  do
  {
    uint64_t v4 = &a1[3 * (a2 >> 1)];
    unint64_t v6 = *v4;
    BOOL v5 = v4 + 3;
    BOOL v7 = v6 > a3;
    if (v6 <= a3) {
      a2 += ~(a2 >> 1);
    }
    else {
      a2 >>= 1;
    }
    if (!v7) {
      a1 = v5;
    }
  }

  while (a2);
  if (a1 == v3) {
    return 0LL;
  }
  uint64_t v9 = *(a1 - 3);
  uint64_t v10 = *(a1 - 2);
  double result = a1 - 3;
  if (v10 + v9 <= a3) {
    return 0LL;
  }
  return result;
}

uint64_t GTMTLIndirectResources_renderPipelineIdForUniqueIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  entry = find_entry(a1, &v5, 8uLL, 0LL);
  if (*entry && (uint64_t v3 = *(void *)(*entry + 32LL)) != 0) {
    return *(void *)(v3 + 8);
  }
  else {
    return 0LL;
  }
}

void GTMTLIndirectResources_optimizeByKey(uint64_t *a1, uint64_t *a2, int a3, apr_pool_t *pool)
{
  uint64_t v49 = *a2;
  *a1 = *a2;
  BOOL v7 = apr_hash_make(pool);
  a1[1] = (uint64_t)v7;
  int v8 = apr_hash_make(pool);
  a1[2] = (uint64_t)v8;
  uint64_t v9 = apr_hash_make(pool);
  a1[3] = (uint64_t)v9;
  uint64_t v10 = apr_hash_make(pool);
  a1[4] = (uint64_t)v10;
  uint64_t v11 = apr_hash_make(pool);
  a1[5] = (uint64_t)v11;
  uint64_t v12 = apr_hash_make(pool);
  a1[6] = (uint64_t)v12;
  unsigned int v13 = apr_hash_make(pool);
  a1[7] = (uint64_t)v13;
  ht = apr_hash_make(pool);
  a1[8] = (uint64_t)ht;
  uint64_t v50 = apr_hash_make(pool);
  a1[9] = (uint64_t)v50;
  a1[10] = 0LL;
  qsort( *(void **)(v49 + 24),  *(int *)(v49 + 12),  *(int *)(v49 + 8),  (int (__cdecl *)(const void *, const void *))GTMTLGPUAddressResource_compare);
  uint64_t v14 = a2[1];
  uint64_t v15 = *(unsigned int *)(v14 + 12);
  if ((int)v15 >= 1)
  {
    __int128 v16 = *(char **)(v14 + 24);
    do
    {
      if (a3 == 1) {
        uint64_t v17 = v16 + 16;
      }
      else {
        uint64_t v17 = v16;
      }
      apr_hash_set(v7, v17, 8LL, v16);
      v16 += 32;
      --v15;
    }

    while (v15);
  }

  uint64_t v18 = a2[2];
  uint64_t v19 = *(unsigned int *)(v18 + 12);
  if ((int)v19 >= 1)
  {
    unint64_t v20 = *(char **)(v18 + 24);
    do
    {
      if (a3 == 1) {
        __int128 v21 = v20 + 16;
      }
      else {
        __int128 v21 = v20;
      }
      apr_hash_set(v8, v21, 8LL, v20);
      v20 += 32;
      --v19;
    }

    while (v19);
  }

  uint64_t v22 = a2[3];
  uint64_t v23 = *(unsigned int *)(v22 + 12);
  if ((int)v23 >= 1)
  {
    unsigned int v24 = *(char **)(v22 + 24);
    do
    {
      if (a3 == 1) {
        unint64_t v25 = v24 + 16;
      }
      else {
        unint64_t v25 = v24;
      }
      apr_hash_set(v9, v25, 8LL, v24);
      v24 += 32;
      --v23;
    }

    while (v23);
  }

  uint64_t v26 = a2[4];
  uint64_t v27 = *(unsigned int *)(v26 + 12);
  if ((int)v27 >= 1)
  {
    __int128 v28 = *(char **)(v26 + 24);
    do
    {
      if (a3 == 1) {
        uint64_t v29 = v28 + 16;
      }
      else {
        uint64_t v29 = v28;
      }
      apr_hash_set(v10, v29, 8LL, v28);
      v28 += 32;
      --v27;
    }

    while (v27);
  }

  uint64_t v30 = a2[5];
  uint64_t v31 = *(unsigned int *)(v30 + 12);
  if ((int)v31 >= 1)
  {
    uint64_t v32 = *(char **)(v30 + 24);
    do
    {
      if (a3 == 1) {
        unint64_t v33 = v32 + 16;
      }
      else {
        unint64_t v33 = v32;
      }
      apr_hash_set(v11, v33, 8LL, v32);
      v32 += 32;
      --v31;
    }

    while (v31);
  }

  uint64_t v34 = a2[6];
  uint64_t v35 = *(unsigned int *)(v34 + 12);
  if ((int)v35 >= 1)
  {
    uint64_t v36 = *(char **)(v34 + 24);
    do
    {
      if (a3 == 1) {
        uint64_t v37 = v36 + 16;
      }
      else {
        uint64_t v37 = v36;
      }
      apr_hash_set(v12, v37, 8LL, v36);
      v36 += 32;
      --v35;
    }

    while (v35);
    uint64_t v38 = a2[6];
    uint64_t v39 = *(unsigned int *)(v38 + 12);
    if ((int)v39 >= 1)
    {
      uint64_t v40 = *(void *)(v38 + 24);
      do
      {
        apr_hash_set(v50, (const void *)(v40 + 24), 8LL, (const void *)v40);
        v40 += 32LL;
        --v39;
      }

      while (v39);
    }
  }

  uint64_t v41 = a2[7];
  uint64_t v42 = *(unsigned int *)(v41 + 12);
  if ((int)v42 >= 1)
  {
    unint64_t v43 = *(char **)(v41 + 24);
    do
    {
      if (a3 == 1) {
        unint64_t v44 = v43 + 16;
      }
      else {
        unint64_t v44 = v43;
      }
      apr_hash_set(v13, v44, 8LL, v43);
      v43 += 32;
      --v42;
    }

    while (v42);
  }

  uint64_t v45 = a2[8];
  uint64_t v46 = *(unsigned int *)(v45 + 12);
  if ((int)v46 >= 1)
  {
    __int128 v47 = *(char **)(v45 + 24);
    do
    {
      if (a3 == 1) {
        __int128 v48 = v47 + 16;
      }
      else {
        __int128 v48 = v47;
      }
      apr_hash_set(ht, v48, 8LL, v47);
      v47 += 32;
      --v46;
    }

    while (v46);
  }

void GTMTLIndirectResources_allResourcesByKey( uint64_t *a1, _DWORD **a2, unint64_t a3, int a4, apr_pool_t *p)
{
  uint64_t v10 = apr_array_make(p, 32, 8);
  v10->int nelts = 0;
  GTMTLSMContext_getObjects(a2[1], a3, v10);
  uint64_t v11 = apr_array_make(p, v10->nelts, 24);
  v60[0] = (uint64_t)v11;
  if (v10->nelts >= 1)
  {
    uint64_t v12 = v11;
    uint64_t v13 = 0LL;
    do
    {
      uint64_t v14 = *(void *)&v10->elts[8 * v13];
      uint64_t v15 = (int8x16_t *)apr_array_push(v12);
      *uint64_t v15 = vextq_s8(*(int8x16_t *)(v14 + 104), *(int8x16_t *)(v14 + 104), 8uLL);
      v15[1].i64[0] = *(void *)(v14 + 8);
      ++v13;
    }

    while (v13 < v10->nelts);
  }

  v10->int nelts = 0;
  GTMTLSMContext_getObjects(a2[2], a3, v10);
  __int128 v16 = apr_array_make(p, v10->nelts, 32);
  v60[1] = (uint64_t)v16;
  if (v10->nelts >= 1)
  {
    uint64_t v17 = v16;
    uint64_t v18 = 0LL;
    do
    {
      uint64_t v19 = *(void **)&v10->elts[8 * v18];
      unint64_t v20 = apr_array_push(v17);
      v20[1] = v19[1];
      *unint64_t v20 = v19[21];
      v20[2] = v19[25];
      ++v18;
    }

    while (v18 < v10->nelts);
  }

  v10->int nelts = 0;
  GTMTLSMContext_getObjects(a2[3], a3, v10);
  __int128 v21 = apr_array_make(p, v10->nelts, 32);
  v60[2] = (uint64_t)v21;
  int nelts = v10->nelts;
  if (nelts >= 1)
  {
    uint64_t v23 = v21;
    for (uint64_t i = 0LL; i < nelts; ++i)
    {
      unint64_t v25 = *(void **)&v10->elts[8 * i];
      uint64_t v26 = v25[6];
      if (v26 && *(_BYTE *)(v26 + 62))
      {
        uint64_t v27 = apr_array_push(v23);
        v27[1] = v25[1];
        *uint64_t v27 = v25[8];
        v27[2] = v25[9];
        int nelts = v10->nelts;
      }
    }
  }

  v10->int nelts = 0;
  GTMTLSMContext_getObjects(a2[4], a3, v10);
  __int128 v28 = apr_array_make(p, v10->nelts, 32);
  v60[3] = (uint64_t)v28;
  int v29 = v10->nelts;
  if (v29 >= 1)
  {
    uint64_t v30 = v28;
    for (uint64_t j = 0LL; j < v29; ++j)
    {
      uint64_t v32 = *(void **)&v10->elts[8 * j];
      if (GTMTLSMPipelineState_supportsIndirectCommandBuffers((uint64_t)v32))
      {
        unint64_t v33 = apr_array_push(v30);
        v33[1] = v32[1];
        void *v33 = v32[12];
        v33[2] = v32[14];
        int v29 = v10->nelts;
      }
    }
  }

  v10->int nelts = 0;
  GTMTLSMContext_getObjects(a2[5], a3, v10);
  uint64_t v34 = apr_array_make(p, v10->nelts, 32);
  v60[4] = (uint64_t)v34;
  int v35 = v10->nelts;
  if (v35 >= 1)
  {
    uint64_t v36 = v34;
    for (uint64_t k = 0LL; k < v35; ++k)
    {
      uint64_t v38 = *(void **)&v10->elts[8 * k];
      if (GTMTLSMPipelineState_supportsIndirectCommandBuffers((uint64_t)v38))
      {
        uint64_t v39 = apr_array_push(v36);
        v39[1] = v38[1];
        void *v39 = v38[12];
        v39[2] = v38[14];
        int v35 = v10->nelts;
      }
    }
  }

  v10->int nelts = 0;
  GTMTLSMContext_getObjects(a2[6], a3, v10);
  uint64_t v40 = apr_array_make(p, v10->nelts, 32);
  v60[5] = (uint64_t)v40;
  if (v10->nelts >= 1)
  {
    uint64_t v41 = v40;
    uint64_t v42 = 0LL;
    do
    {
      unint64_t v43 = *(void **)&v10->elts[8 * v42];
      unint64_t v44 = apr_array_push(v41);
      v44[1] = v43[1];
      void *v44 = v43[15];
      v44[2] = v43[16];
      ++v42;
    }

    while (v42 < v10->nelts);
  }

  v10->int nelts = 0;
  GTMTLSMContext_getObjects(a2[7], a3, v10);
  uint64_t v45 = apr_array_make(p, v10->nelts, 32);
  v60[6] = (uint64_t)v45;
  if (v10->nelts >= 1)
  {
    uint64_t v46 = v45;
    uint64_t v47 = 0LL;
    do
    {
      uint64_t v48 = *(void *)&v10->elts[8 * v47];
      uint64_t v49 = apr_array_push(v46);
      v49[1] = *(void *)(v48 + 8);
      void *v49 = *(void *)(v48 + 136);
      *((_OWORD *)v49 + 1) = *(_OWORD *)(v48 + 152);
      ++v47;
    }

    while (v47 < v10->nelts);
  }

  v10->int nelts = 0;
  GTMTLSMContext_getObjects(a2[8], a3, v10);
  uint64_t v50 = apr_array_make(p, v10->nelts, 32);
  v60[7] = (uint64_t)v50;
  if (v10->nelts >= 1)
  {
    int32x2_t v51 = v50;
    uint64_t v52 = 0LL;
    do
    {
      __int32 v53 = *(void **)&v10->elts[8 * v52];
      int32x2_t v54 = apr_array_push(v51);
      v54[1] = v53[1];
      void *v54 = v53[18];
      v54[2] = v53[19];
      ++v52;
    }

    while (v52 < v10->nelts);
  }

  v10->int nelts = 0;
  GTMTLSMContext_getObjects(a2[9], a3, v10);
  int v55 = apr_array_make(p, v10->nelts, 32);
  v60[8] = (uint64_t)v55;
  if (v10->nelts >= 1)
  {
    __int128 v56 = v55;
    uint64_t v57 = 0LL;
    do
    {
      __int128 v58 = *(void **)&v10->elts[8 * v57];
      size_t v59 = apr_array_push(v56);
      v59[1] = v58[1];
      *size_t v59 = v58[16];
      void v59[2] = v58[17];
      ++v57;
    }

    while (v57 < v10->nelts);
  }

  GTMTLIndirectResources_optimizeByKey(a1, v60, a4, p);
}

apr_hash_index_t *GTMTLIndirectResources_rehash(apr_hash_index_t *result, uint64_t a2, int a3, apr_pool_t *p)
{
  uint64_t v5 = result;
  if (*(unsigned __int8 *)(a2 + 80) == a3)
  {
    __int128 v6 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)result + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)result + 3) = v6;
    *((_OWORD *)result + 4) = *(_OWORD *)(a2 + 64);
    *((void *)result + 10) = *(void *)(a2 + 80);
    __int128 v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)double result = *(_OWORD *)a2;
    *((_OWORD *)result + 1) = v7;
  }

  else
  {
    *(void *)double result = apr_array_copy(p, *(const apr_array_header_t **)a2);
    uint64_t v10 = apr_hash_make(p);
    *((void *)v5 + 1) = v10;
    uint64_t v11 = apr_hash_make(p);
    *((void *)v5 + 2) = v11;
    uint64_t v12 = apr_hash_make(p);
    *((void *)v5 + 3) = v12;
    uint64_t v13 = apr_hash_make(p);
    *((void *)v5 + 4) = v13;
    uint64_t v14 = apr_hash_make(p);
    *((void *)v5 + 5) = v14;
    uint64_t v15 = apr_hash_make(p);
    *((void *)v5 + 6) = v15;
    uint64_t v18 = apr_hash_make(p);
    *((void *)v5 + memset(v56, 0, 7) = v18;
    uint64_t v17 = apr_hash_make(p);
    *((void *)v5 + 8) = v17;
    __int128 v16 = apr_hash_make(p);
    *((void *)v5 + 9) = v16;
    *((_BYTE *)v5 + 80) = a3;
    *(_DWORD *)((char *)v5 + 81) = 0;
    *((_DWORD *)v5 + 21) = 0;
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(void *)(a2 + 8), a3, v10);
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(void *)(a2 + 16), a3, v11);
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(void *)(a2 + 24), a3, v12);
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(void *)(a2 + 32), a3, v13);
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(void *)(a2 + 40), a3, v14);
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(void *)(a2 + 48), a3, v15);
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(void *)(a2 + 72), 2, v16);
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(void *)(a2 + 56), a3, v18);
    return GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(void *)(a2 + 64), a3, v17);
  }

  return result;
}

apr_hash_index_t *GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(uint64_t a1, int a2, apr_hash_t *a3)
{
  uint64_t v5 = *(apr_pool_t **)a3;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = a1;
  *(_DWORD *)(a1 + 40) = 0;
  double result = apr_hash_next((apr_hash_index_t *)(a1 + 16));
  if (result)
  {
    __int128 v7 = result;
    do
    {
      int v8 = *(_OWORD **)(*((void *)v7 + 1) + 32LL);
      uint64_t v9 = apr_palloc(v5, 0x20uLL);
      __int128 v10 = v8[1];
      _OWORD *v9 = *v8;
      v9[1] = v10;
      uint64_t v11 = v9 + 1;
      if (a2 != 1) {
        uint64_t v11 = v9;
      }
      if (a2 == 2) {
        uint64_t v12 = (char *)v9 + 24;
      }
      else {
        uint64_t v12 = v11;
      }
      apr_hash_set(a3, v12, 8LL, v9);
      double result = apr_hash_next(v7);
      __int128 v7 = result;
    }

    while (result);
  }

  return result;
}

uint64_t GTCaptureArchive_cleanup(uint64_t a1)
{
  return 0LL;
}

size_t GTCaptureArchive_getFileWithFilename(uint64_t a1, char *a2)
{
  uint64_t v4 = *find_entry(*(void *)(a1 + 88), a2, 0xFFFFFFFFFFFFFFFFLL, 0LL);
  if (!v4 || (size_t result = *(void *)(v4 + 32)) == 0)
  {
    size_t result = strlen(a2);
    if (result)
    {
      unsigned int v6 = -1640531527;
      size_t v7 = result - 1;
      if (result == 1) {
        goto LABEL_8;
      }
      size_t v8 = 0LL;
      do
      {
        unsigned int v9 = v6 + a2[v8];
        int v10 = (v9 << 16) ^ (a2[v8 + 1] << 11);
        unsigned int v6 = (v10 ^ v9) + ((v10 ^ v9) >> 11);
        v8 += 2LL;
      }

      while (v8 < v7);
      if ((result & 1) != 0) {
LABEL_8:
      }
      unsigned int v11 = (v6 ^ (8 * v6)) + ((v6 ^ (8 * v6)) >> 5);
      unsigned int v12 = (v11 ^ (4 * v11)) + ((v11 ^ (4 * v11)) >> 15);
      unsigned int v13 = v12 ^ (v12 << 10);
      if (!v13) {
        unsigned int v13 = 0x40000000;
      }
      unsigned int v14 = *(_DWORD *)(a1 + 56);
      uint64_t v15 = *(void *)(a1 + 32);
      unsigned int v16 = v13 % v14;
      uint64_t v17 = (int)(v13 % v14);
      while (1)
      {
        unsigned int v18 = *(_DWORD *)(v15 + 12 * v17);
        if (v18 == -1) {
          return 0LL;
        }
        uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 24LL);
        if (v14 <= ++v17)
        {
          if (v16)
          {
            uint64_t v20 = 0LL;
            for (uint64_t i = (unsigned int *)(v15 + 4); ; i += 3)
            {
              unsigned int v18 = *(i - 1);
              if (v18 == -1) {
                break;
              }
              size_t result = 0LL;
            }
          }

          return 0LL;
        }
      }

      return *(void *)(a1 + 40) + 24LL * v18;
    }
  }

  return result;
}

void *GTCaptureArchiveDecompressor_create(apr_pool_t *a1)
{
  unsigned int v2 = apr_palloc(a1, 0x10uLL);
  uint64_t v4 = v2;
  if (v2)
  {
    *unsigned int v2 = 0LL;
    v2[1] = 0LL;
  }

  apr_pool_create_ex((apr_pool_t **)v2, a1, 0LL, v3);
  apr_size_t v5 = compression_decode_scratch_buffer_size(COMPRESSION_ZLIB);
  v4[1] = apr_palloc(a1, v5);
  return v4;
}

void *GTCaptureArchive_mapDataSeperateFile(uint64_t a1, unsigned int *a2, apr_pool_t *a3, int *a4)
{
  unsigned int v7 = a2[4];
  if (!a4)
  {
    if ((v7 & 2) == 0) {
      return 0LL;
    }
    unsigned int v10 = a2[1];
    uint64_t v11 = *(void *)(a1 + 48);
    if (v10 >= *(_DWORD *)(v11 + 12)) {
      return 0LL;
    }
    goto LABEL_8;
  }

  if ((v7 & 2) != 0)
  {
    unsigned int v10 = a2[1];
    uint64_t v11 = *(void *)(a1 + 48);
    if (v10 >= *(_DWORD *)(v11 + 12))
    {
      int v16 = *a4;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      int v22 = v16;
      int v23 = 500;
      unsigned int v9 = "0 <= entry->name_entry && entry->name_entry < self->index.string_table->nelts";
      goto LABEL_12;
    }

uint64_t GTData_munmap(uint64_t a1)
{
  return 0LL;
}

unint64_t GTCaptureArchive_fileBackingStore(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *(_DWORD *)(a2 + 16);
  if (!a3)
  {
    if ((v3 & 2) != 0) {
      return 0LL;
    }
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4 > *(void *)(a1 + 72)) {
      return 0LL;
    }
    return *(void *)(a1 + 64) + v4;
  }

  if ((v3 & 2) != 0)
  {
    int v8 = *a3;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    int v9 = v8;
    int v10 = 500;
    unsigned int v6 = "!(entry->flags & 0x00000002)";
    goto LABEL_9;
  }

  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 <= *(void *)(a1 + 72)) {
    return *(void *)(a1 + 64) + v4;
  }
  int v5 = *a3;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  int v9 = v5;
  int v10 = 500;
  unsigned int v6 = "entry->storage_offset <= archive->backingStore.length";
LABEL_9:
  uint64_t v11 = v6;
  GTError_addError(a3, (uint64_t)&v9);
  return 0LL;
}

void GTCaptureArchive_fillBufferCompressedDeflate( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, size_t a5, int *a6)
{
  if (!a2 && a6)
  {
    int v12 = *a6;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v12;
    int v19 = 500;
    uint64_t v20 = "decompressor != NULL";
    GTError_addError(a6, (uint64_t)&v18);
LABEL_14:
    bzero(a4, a5);
    return;
  }

  if (!a2) {
    goto LABEL_14;
  }
  if (a6 && *(_DWORD *)(a3 + 4) <= 5u)
  {
    int v13 = *a6;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v13;
    int v19 = 500;
    uint64_t v20 = "ZLIB_HEADER_SIZE + ZLIB_ADLER_SIZE <= entry->storage_size";
    GTError_addError(a6, (uint64_t)&v18);
  }

  if (*(_DWORD *)(a3 + 4) < 6u) {
    goto LABEL_14;
  }
  unint64_t v14 = GTCaptureArchive_fileBackingStore(a1, a3, a6);
  if (!v14) {
    goto LABEL_14;
  }
  size_t v15 = compression_decode_buffer( (uint8_t *)a4,  a5,  (const uint8_t *)(v14 + 2),  (*(_DWORD *)(a3 + 4) - 6),  *(void **)(a2 + 8),  COMPRESSION_ZLIB);
  size_t v16 = v15;
  if (a6)
  {
    if (v15 != a5)
    {
      int v17 = *a6;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      uint64_t v20 = "total_out == destSize";
      GTError_addError(a6, (uint64_t)&v18);
    }
  }

  if (v16 != a5) {
    goto LABEL_14;
  }
}

void GTCaptureArchive_fillBuffer(uint64_t a1, apr_pool_t **a2, char *a3, char *a4, size_t a5, int *a6)
{
  FileWithFilename = (unsigned int *)GTCaptureArchive_getFileWithFilename(a1, a3);
  size_t v12 = *FileWithFilename;
  if (a6 && v12 < a5)
  {
    int v13 = *a6;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    v14[0] = v13;
    v14[1] = 500;
    size_t v15 = "destSize <= entry->size";
    GTError_addError(a6, (uint64_t)v14);
    size_t v12 = *FileWithFilename;
  }

  if (v12 >= a5)
  {
    if ((FileWithFilename[4] & 2) != 0) {
      GTCaptureArchive_fillBufferSeperateFile( *(const char **)a1,  *(const char **)(*(void *)(*(void *)(a1 + 48) + 24LL) + 8LL * FileWithFilename[1]),  a4,  a5,  *a2,  a6);
    }
    else {
      GTCaptureArchive_fillBufferCompressedDeflate(a1, (uint64_t)a2, (uint64_t)FileWithFilename, a4, a5, a6);
    }
  }

  else
  {
    bzero(a4, a5);
  }

void GTCaptureArchive_fillBufferSeperateFile( const char *a1, const char *a2, char *a3, size_t a4, apr_pool_t *a5, int *a6)
{
  int v9 = gt_filepath_merge(a1, a2, a5);
  int v10 = open(v9, 0, 0LL);
  if (v10 < 0)
  {
    char v15 = 0;
    if (!a6) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }

  int v11 = v10;
  uint64_t v12 = 0LL;
  while (1)
  {
    size_t v13 = a4 - v12 >= 0x100000 ? 0x100000LL : a4 - v12;
    ssize_t v14 = read(v11, &a3[v12], v13);
    v12 += v14;
    if (v12 == a4)
    {
      char v15 = 1;
      goto LABEL_10;
    }
  }

  char v15 = 0;
LABEL_10:
  close(v11);
  if (a6)
  {
LABEL_13:
    if ((v15 & 1) == 0)
    {
      int v16 = *a6;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      v17[0] = v16;
      v17[1] = 500;
      int v18 = "mapped";
      GTError_addError(a6, (uint64_t)v17);
    }
  }

char *GTCaptureArchive_readData(const char **a1, apr_pool_t **a2, char *a3, apr_pool_t *a4, int *a5)
{
  if (!a3) {
    return 0LL;
  }
  FileWithFilename = (unsigned int *)GTCaptureArchive_getFileWithFilename((uint64_t)a1, a3);
  if (!FileWithFilename) {
    return 0LL;
  }
  uint64_t v11 = (uint64_t)FileWithFilename;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v17 = 0u;
  unsigned int v12 = FileWithFilename[4];
  apr_size_t v13 = *FileWithFilename;
  ssize_t v14 = (char *)apr_palloc(a4, v13);
  if ((v12 & 2) != 0) {
    GTCaptureArchive_fillBufferSeperateFile(*a1, a3, v14, v13, *a2, (int *)&v17);
  }
  else {
    GTCaptureArchive_fillBufferCompressedDeflate((uint64_t)a1, (uint64_t)a2, v11, v14, v13, (int *)&v17);
  }
  if (DWORD1(v17))
  {
    v16[0] = v17;
    v16[1] = v18;
    _OWORD v16[2] = v19;
    GTError_addError(a5, (uint64_t)v16);
    return 0LL;
  }

  return v14;
}

unsigned int *GTCaptureArchive_mapData(uint64_t a1, uint64_t a2, char *a3, apr_pool_t *a4)
{
  size_t result = (unsigned int *)GTCaptureArchive_getFileWithFilename(a1, a3);
  if (result)
  {
    uint64_t v8 = (uint64_t)result;
    memset(v11, 0, sizeof(v11));
    if ((result[4] & 2) != 0)
    {
      int v10 = GTCaptureArchive_mapDataSeperateFile(a1, result, a4, (int *)v11);
    }

    else
    {
      apr_size_t v9 = *result;
      int v10 = apr_palloc(a4, v9);
      GTCaptureArchive_fillBufferCompressedDeflate(a1, a2, v8, v10, v9, (int *)v11);
    }

    if (DWORD1(v11[0])) {
      return 0LL;
    }
    else {
      return (unsigned int *)v10;
    }
  }

  return result;
}

uint64_t GTCaptureArchive_strcmp(const char **a1, const char **a2)
{
  return strcmp(*a1, *a2);
}

uint64_t GTCaptureArchive_filenamesWithPrefix(int a1, const char **a2, char *__s, apr_array_header_t *a4)
{
  uint64_t result = strlen(__s);
  size_t v9 = result;
  int v10 = &a2[a1];
  if (a1 >= 1)
  {
    unint64_t v11 = a1;
    do
    {
      unsigned int v12 = &a2[v11 >> 1];
      ssize_t v14 = *v12;
      apr_size_t v13 = v12 + 1;
      uint64_t result = strncmp(v14, __s, v9);
      else {
        v11 += ~(v11 >> 1);
      }
    }

    while ((uint64_t)v11 > 0);
  }

  while (a2 != v10)
  {
    char v15 = *a2;
    uint64_t result = strncmp(*a2, __s, v9);
    if ((_DWORD)result) {
      break;
    }
    uint64_t result = (uint64_t)apr_array_push(a4);
    *(void *)uint64_t result = v15;
    ++a2;
  }

  return result;
}

__n128 DYTraceDecode_CALayer_setAnchorPoint(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if ((*(unsigned __int8 *)(a2 + 36) | 4) != 0x74)
    {
      int v8 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v8;
      int v13 = 500;
      ssize_t v14 = "*(const char*)bytes == 'p' || *(const char*)bytes == 't'";
      GTError_addError(a4, (uint64_t)&v12);
    }

    if (*(_DWORD *)(a2 + 37) != 6566464)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      ssize_t v14 = "(memcmp((const char*)bytes + offset + 1, (p@2d) + 1, sizeof(p@2d) - 1) == 0)";
      GTError_addError(a4, (uint64_t)&v12);
    }

    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x1F)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      ssize_t v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    *(__n128 *)(a1 + 8) = result;
  }

  return result;
}

void DYTraceDecode_CALayer_setTransform(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if ((*(unsigned __int8 *)(a2 + 36) | 4) != 0x74)
    {
      int v8 = *a4;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v8;
      int v19 = 500;
      __int128 v20 = "*(const char*)bytes == 'p' || *(const char*)bytes == 't'";
      GTError_addError(a4, (uint64_t)&v18);
    }

    if (*(_DWORD *)(a2 + 37) != 1681273152 || *(_DWORD *)(a2 + 40) != 6579300)
    {
      int v10 = *a4;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v10;
      int v19 = 500;
      __int128 v20 = "(memcmp((const char*)bytes + offset + 1, (p@16ddd) + 1, sizeof(p@16ddd) - 1) == 0)";
      GTError_addError(a4, (uint64_t)&v18);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  __int128 v11 = *(_OWORD *)(a2 + 52);
  __int128 v12 = *(_OWORD *)(a2 + 68);
  __int128 v13 = *(_OWORD *)(a2 + 84);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 100);
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 8) = v11;
  __int128 v14 = *(_OWORD *)(a2 + 116);
  __int128 v15 = *(_OWORD *)(a2 + 132);
  __int128 v16 = *(_OWORD *)(a2 + 148);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 104) = v16;
  *(_OWORD *)(a1 + 88) = v15;
  *(_OWORD *)(a1 + 72) = v14;
  *(void *)(a1 + 136) = *(void *)(a2 + 180);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v20 - 144) = *(void *)(a2 + 188);
  if (a4)
  {
    if (a3 <= 0x9F)
    {
      int v17 = *a4;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      __int128 v20 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v18);
    }
  }

void DYTraceDecode_CAMetalLayer_setBounds_contentsScale_windowBounds_windowProperties( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = a2 + 36;
  int v8 = strcmp((const char *)(a2 + 36), "C@4dd@4dulil");
  if (v8)
  {
    if (a4)
    {
      if (*(void *)v7 != 0x6434406464344043LL || *(_DWORD *)(v7 + 8) != 7105653)
      {
        int v10 = *a4;
        __int128 v22 = 0u;
        __int128 v23 = 0u;
        int v19 = v10;
        int v20 = 500;
        __int128 v21 = "memcmp((const char*)bytes + offset, (C@4dd@4dull), sizeof(C@4dd@4dull)) == 0";
        GTError_addError(a4, (uint64_t)&v19);
      }
    }

    uint64_t v11 = 12LL;
  }

  else
  {
    if (a4)
    {
      if (*(void *)v7 != 0x6434406464344043LL || *(void *)(v7 + 5) != 0x6C696C75643440LL)
      {
        int v13 = *a4;
        __int128 v22 = 0u;
        __int128 v23 = 0u;
        int v19 = v13;
        int v20 = 500;
        __int128 v21 = "memcmp((const char*)bytes + offset, (C@4dd@4dulil), sizeof(C@4dd@4dulil)) == 0";
        GTError_addError(a4, (uint64_t)&v19);
      }
    }

    uint64_t v11 = 16LL;
  }

  *(void *)a1 = *(void *)(v7 + v11);
  __int128 v14 = *(_OWORD *)(v7 + v11 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v7 + v11 + 24);
  *(_OWORD *)(a1 + 8) = v14;
  *(void *)(a1 + 40) = *(void *)(v7 + v11 + 40);
  __int128 v15 = *(_OWORD *)(v7 + v11 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v7 + v11 + 48);
  *(_OWORD *)(a1 + 64) = v15;
  *(void *)(a1 + 80) = *(void *)(v7 + v11 + 80);
  uint64_t v16 = v11 + 88;
  if (v8)
  {
    unint64_t v17 = v11 | 0x60;
    *(_DWORD *)(a1 + 96) = *(void *)(v7 + v16);
    if (!a4) {
      return;
    }
  }

  else
  {
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(v7 + v16);
    *(void *)(a1 + 88) = *(void *)(v11 + v7 + 92);
    unint64_t v17 = v11 + 100;
    if (!a4) {
      return;
    }
  }

  if (v17 > a3)
  {
    int v18 = *a4;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v18;
    int v20 = 500;
    __int128 v21 = "offset <= length";
    GTError_addError(a4, (uint64_t)&v19);
  }

const char *AppendString_10195(const char **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (*(void *)(a2 + *a3) == g_null_string_token_10196) {
    int v5 = 0LL;
  }
  else {
    int v5 = (const char *)(a2 + *a3);
  }
  *a1 = v5;
  if (v5) {
    size_t v6 = strlen(v5) + 1;
  }
  else {
    size_t v6 = 8LL;
  }
  *a3 = v6 + v4;
  return v5;
}

void DYTraceDecode_InternalData(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (unsigned __int16 *)(a2 + 36);
  size_t v9 = (strlen((const char *)(a2 + 36)) & 0xFFFFFFFFFFFFFFFCLL) + a2 + 36;
  *(void *)a1 = *(void *)(v9 + 4);
  int v10 = *(_DWORD *)(v9 + 12);
  *(_DWORD *)(a1 + 8) = v10;
  uint64_t v48 = 0LL;
  switch(v10)
  {
    case 101:
      int v20 = strcmp((const char *)v8, "CiulSlS");
      *(void *)(a1 + 40) = 0LL;
      if (v20)
      {
        if (!a4) {
          goto LABEL_89;
        }
        int v22 = *a4;
        __int128 v46 = 0u;
        __int128 v47 = 0u;
        int v43 = v22;
        int v44 = 500;
        __int128 v23 = "memcmp((const char*)bytes + offset, (CiulSl), sizeof(CiulSl)) == 0";
      }

      else
      {
        if (!a4 || *(void *)v8 == 0x536C536C756943LL) {
          goto LABEL_89;
        }
        int v41 = *a4;
        __int128 v46 = 0u;
        __int128 v47 = 0u;
        int v43 = v41;
        int v44 = 500;
        __int128 v23 = "memcmp((const char*)bytes + offset, (CiulSlS), sizeof(CiulSlS)) == 0";
      }

      uint64_t v45 = v23;
      GTError_addError(a4, (uint64_t)&v43);
LABEL_89:
      *(void *)a1 = *(void *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      *(void *)(a1 + 16) = *(void *)(a2 + 56);
      uint64_t v48 = 28LL;
      *(void *)(a1 + 32) = AppendString_10195((const char **)(a1 + 32), (uint64_t)v8, &v48);
      unint64_t v42 = (v48 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      *(void *)(a1 + 24) = *(void *)((char *)v8 + v42);
      uint64_t v39 = v42 + 8;
      uint64_t v48 = v39;
      if (v20) {
        goto LABEL_79;
      }
      *(void *)(a1 + 40) = AppendString_10195((const char **)(a1 + 40), (uint64_t)v8, &v48);
      goto LABEL_78;
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 112:
    case 113:
    case 114:
    case 115:
    case 121:
    case 122:
    case 123:
    case 124:
    case 130:
    case 131:
    case 133:
    case 134:
      goto LABEL_16;
    case 107:
      if (a4)
      {
        if (*(_DWORD *)v8 != 1819633987 || *(_DWORD *)((char *)v8 + 3) != 7107948)
        {
          int v25 = *a4;
          __int128 v46 = 0u;
          __int128 v47 = 0u;
          int v43 = v25;
          int v44 = 500;
          uint64_t v45 = "memcmp((const char*)bytes + offset, (Ciulul), sizeof(Ciulul)) == 0";
          GTError_addError(a4, (uint64_t)&v43);
        }
      }

      *(void *)a1 = *(void *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      *(void *)(a1 + 16) = *(void *)(a2 + 56);
      *(void *)(a1 + 24) = *(void *)(a2 + 64);
      unint64_t v18 = 36LL;
      goto LABEL_81;
    case 108:
      if (a4 && *(_DWORD *)v8 ^ 0x53746943 | *((unsigned __int8 *)v8 + 4))
      {
        int v26 = *a4;
        __int128 v46 = 0u;
        __int128 v47 = 0u;
        int v43 = v26;
        int v44 = 500;
        uint64_t v45 = "memcmp((const char*)bytes + offset, (CitS), sizeof(CitS)) == 0";
        GTError_addError(a4, (uint64_t)&v43);
      }

      *(void *)a1 = *(void *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      *(void *)(a1 + 16) = *(void *)(a2 + 56);
      unint64_t v27 = 28LL;
      goto LABEL_76;
    case 109:
    case 120:
      if (a4 && *(void *)v8 ^ 0x626C756C75536943LL | *((unsigned __int8 *)v8 + 8))
      {
        int v13 = *a4;
        __int128 v46 = 0u;
        __int128 v47 = 0u;
        int v43 = v13;
        int v44 = 500;
        uint64_t v45 = "memcmp((const char*)bytes + offset, (CiSululb), sizeof(CiSululb)) == 0";
        GTError_addError(a4, (uint64_t)&v43);
      }

      *(void *)a1 = *(void *)(a2 + 48);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 56);
      uint64_t v48 = 24LL;
      *(void *)(a1 + 32) = AppendString_10195((const char **)(a1 + 32), (uint64_t)v8, &v48);
      uint64_t v14 = v48;
      __int128 v15 = (char *)v8 + ((v48 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(void *)(a1 + 16) = *(void *)v15;
      *(void *)(a1 + 24) = *((void *)v15 + 1);
      *(_BYTE *)(a1 + 40) = v15[16];
      uint64_t v16 = v14 + 23;
      goto LABEL_80;
    case 110:
      if (a4)
      {
        if (*(_DWORD *)v8 != 1819633987 || v8[2] != 105)
        {
          int v29 = *a4;
          __int128 v46 = 0u;
          __int128 v47 = 0u;
          int v43 = v29;
          int v44 = 500;
          uint64_t v45 = "memcmp((const char*)bytes + offset, (Ciuli), sizeof(Ciuli)) == 0";
          GTError_addError(a4, (uint64_t)&v43);
        }
      }

      *(void *)a1 = *(void *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      *(void *)(a1 + 16) = *(void *)(a2 + 56);
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 64);
      unint64_t v18 = 32LL;
      goto LABEL_81;
    case 111:
      if (!a4 || *(_DWORD *)v8 == 5597507) {
        goto LABEL_6;
      }
      int v30 = *a4;
      __int128 v46 = 0u;
      __int128 v47 = 0u;
      int v43 = v30;
      int v44 = 500;
      __int128 v12 = "memcmp((const char*)bytes + offset, (CiU), sizeof(CiU)) == 0";
      goto LABEL_5;
    case 116:
      if (a4)
      {
        if (*(_DWORD *)v8 != 1968531779 || v8[2] != 108)
        {
          int v32 = *a4;
          __int128 v46 = 0u;
          __int128 v47 = 0u;
          int v43 = v32;
          int v44 = 500;
          uint64_t v45 = "memcmp((const char*)bytes + offset, (CiUul), sizeof(CiUul)) == 0";
          GTError_addError(a4, (uint64_t)&v43);
        }
      }

      *(void *)a1 = *(void *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      uint64_t v48 = 20LL;
      *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v48);
      unint64_t v33 = (v48 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      *(void *)(a1 + 24) = *(void *)((char *)v8 + v33);
      unint64_t v18 = v33 + 8;
      goto LABEL_81;
    case 117:
    case 127:
    case 128:
    case 129:
    case 132:
      if (!a4 || *(_DWORD *)v8 == 5466435) {
        goto LABEL_6;
      }
      int v11 = *a4;
      __int128 v46 = 0u;
      __int128 v47 = 0u;
      int v43 = v11;
      int v44 = 500;
      __int128 v12 = "memcmp((const char*)bytes + offset, (CiS), sizeof(CiS)) == 0";
LABEL_5:
      uint64_t v45 = v12;
      GTError_addError(a4, (uint64_t)&v43);
LABEL_6:
      *(void *)a1 = *(void *)(a2 + 40);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
      uint64_t v48 = 16LL;
      *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v48);
      goto LABEL_78;
    case 118:
      if (a4 && *(_DWORD *)v8 ^ 0x6C756943 | *((unsigned __int8 *)v8 + 4))
      {
        int v34 = *a4;
        __int128 v46 = 0u;
        __int128 v47 = 0u;
        int v43 = v34;
        int v44 = 500;
        uint64_t v45 = "memcmp((const char*)bytes + offset, (Ciul), sizeof(Ciul)) == 0";
        GTError_addError(a4, (uint64_t)&v43);
      }

      *(void *)a1 = *(void *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      *(void *)(a1 + 16) = *(void *)(a2 + 56);
      goto LABEL_67;
    case 119:
      if (a4 && *(void *)v8 != 0x53535369756943LL)
      {
        int v35 = *a4;
        __int128 v46 = 0u;
        __int128 v47 = 0u;
        int v43 = v35;
        int v44 = 500;
        uint64_t v45 = "memcmp((const char*)bytes + offset, (CiuiSSS), sizeof(CiuiSSS)) == 0";
        GTError_addError(a4, (uint64_t)&v43);
      }

      *(void *)a1 = *(void *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 56);
      uint64_t v48 = 24LL;
      *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v48);
      *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, &v48);
      *(void *)(a1 + 32) = AppendString_10195((const char **)(a1 + 32), (uint64_t)v8, &v48);
      goto LABEL_78;
    case 125:
      if (a4 && *(_DWORD *)v8 ^ 0x6C756943 | *((unsigned __int8 *)v8 + 4))
      {
        int v36 = *a4;
        __int128 v46 = 0u;
        __int128 v47 = 0u;
        int v43 = v36;
        int v44 = 500;
        uint64_t v45 = "memcmp((const char*)bytes + offset, (Ciul), sizeof(Ciul)) == 0";
        GTError_addError(a4, (uint64_t)&v43);
      }

      *(void *)a1 = *(void *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      *(void *)(a1 + 24) = *(void *)(a2 + 56);
LABEL_67:
      unint64_t v18 = 28LL;
      goto LABEL_81;
    case 126:
      if (a4 && *(_DWORD *)v8 ^ 0x53536943 | *((unsigned __int8 *)v8 + 4))
      {
        int v37 = *a4;
        __int128 v46 = 0u;
        __int128 v47 = 0u;
        int v43 = v37;
        int v44 = 500;
        uint64_t v45 = "memcmp((const char*)bytes + offset, (CiSS), sizeof(CiSS)) == 0";
        GTError_addError(a4, (uint64_t)&v43);
      }

      *(void *)a1 = *(void *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      uint64_t v48 = 20LL;
      *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v48);
      goto LABEL_77;
    case 135:
      if (a4 && *(_DWORD *)v8 ^ 0x53536943 | *((unsigned __int8 *)v8 + 4))
      {
        int v38 = *a4;
        __int128 v46 = 0u;
        __int128 v47 = 0u;
        int v43 = v38;
        int v44 = 500;
        uint64_t v45 = "memcmp((const char*)bytes + offset, (CiSS), sizeof(CiSS)) == 0";
        GTError_addError(a4, (uint64_t)&v43);
      }

      *(void *)a1 = *(void *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      uint64_t v48 = 20LL;
      *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v48);
      unint64_t v27 = (v48 + 3) & 0xFFFFFFFFFFFFFFFCLL;
LABEL_76:
      uint64_t v48 = v27;
LABEL_77:
      *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, &v48);
LABEL_78:
      uint64_t v39 = v48;
LABEL_79:
      uint64_t v16 = v39 + 3;
LABEL_80:
      unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      goto LABEL_81;
    default:
      if (v10 == 7)
      {
        if (a4 && *(_DWORD *)v8 ^ 0x69756943 | *((unsigned __int8 *)v8 + 4))
        {
          int v17 = *a4;
          __int128 v46 = 0u;
          __int128 v47 = 0u;
          int v43 = v17;
          int v44 = 500;
          uint64_t v45 = "memcmp((const char*)bytes + offset, (Ciui), sizeof(Ciui)) == 0";
          GTError_addError(a4, (uint64_t)&v43);
        }

        *(void *)a1 = *(void *)(a2 + 44);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 56);
        unint64_t v18 = 24LL;
      }

      else
      {
LABEL_16:
        if (a4 && *v8 ^ 0x6943 | *((unsigned __int8 *)v8 + 2))
        {
          int v19 = *a4;
          __int128 v46 = 0u;
          __int128 v47 = 0u;
          int v43 = v19;
          int v44 = 500;
          uint64_t v45 = "memcmp((const char*)bytes + offset, (Ci), sizeof(Ci)) == 0";
          GTError_addError(a4, (uint64_t)&v43);
        }

        *(void *)a1 = *(void *)(a2 + 40);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
        unint64_t v18 = 16LL;
      }

void DYTraceDecode_MTLAccelerationStructure_allocatedSize( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (strcmp((const char *)(a2 + 36), "Cui"))
  {
    if (a4 && *v8 != 7107907)
    {
      int v9 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v9;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (Cul), sizeof(Cul)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }

    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 48);
    unint64_t v10 = 20LL;
    if (!a4) {
      return;
    }
LABEL_11:
    if (v10 > a3)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      __int128 v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }

    return;
  }

  if (a4 && *v8 != 6911299)
  {
    int v11 = *a4;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    int v13 = v11;
    int v14 = 500;
    __int128 v15 = "memcmp((const char*)bytes + offset, (Cui), sizeof(Cui)) == 0";
    GTError_addError(a4, (uint64_t)&v13);
  }

  *a1 = *(void *)(a2 + 40);
  a1[1] = *(unsigned int *)(a2 + 48);
  unint64_t v10 = 16LL;
  if (a4) {
    goto LABEL_11;
  }
}

void DYTraceDecode_MTLBuffer_newTextureWithDescriptor_offset_bytesPerRow( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = a2 + 36;
  if (!strcmp((const char *)(a2 + 36), "CUululul"))
  {
    if (a4 && *(void *)v7 ^ 0x6C756C756C755543LL | *(unsigned __int8 *)(v7 + 8))
    {
      int v12 = *a4;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v12;
      int v19 = 500;
      int v20 = "memcmp((const char*)bytes + offset, (CUululul), sizeof(CUululul)) == 0";
      GTError_addError(a4, (uint64_t)&v18);
    }

    uint64_t v10 = 12LL;
    uint64_t v11 = 24LL;
  }

  else
  {
    if (a4)
    {
      if (*(_DWORD *)v7 != 1819628867 || *(_DWORD *)(v7 + 3) != 7107948)
      {
        int v9 = *a4;
        __int128 v21 = 0u;
        __int128 v22 = 0u;
        int v18 = v9;
        int v19 = 500;
        int v20 = "memcmp((const char*)bytes + offset, (CUulul), sizeof(CUulul)) == 0";
        GTError_addError(a4, (uint64_t)&v18);
      }
    }

    uint64_t v10 = 8LL;
    uint64_t v11 = 16LL;
  }

  *(void *)a1 = *(void *)(v7 + v10);
  uint64_t v23 = v10 + 8;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), v7, &v23);
  unint64_t v13 = (v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)(v7 + v13);
  *(void *)(a1 + 32) = *(void *)(v7 + v13 + 8);
  unint64_t v14 = v13 + v11;
  if (a4 && *(_WORD *)(v7 + v14) != 116)
  {
    int v15 = *a4;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v15;
    int v19 = 500;
    int v20 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v18);
  }

  unint64_t v16 = (v14 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)(v7 + v16);
  if (a4)
  {
    if (v16 + 8 > a3)
    {
      int v17 = *a4;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v18);
    }
  }

void DYTraceDecode_MTLBuffer_setPurgeableState(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7107907)
    {
      int v8 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v8;
      int v11 = 500;
      int v12 = "memcmp((const char*)bytes + offset, (Cul), sizeof(Cul)) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }

    *a1 = *(void *)(a2 + 40);
    a1[2] = *(void *)(a2 + 48);
    if (a3 <= 0x13)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[2] = *(void *)(a2 + 48);
  }

void DYTraceDecode_MTLCommandQueue_continueCommandBuffer_retainReferences( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 6911043)
    {
      int v8 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (Cti), sizeof(Cti)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *(void *)a1 = *(void *)(a2 + 40);
    *(void *)(a1 + 16) = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 56);
    if (*(_WORD *)(a2 + 60) != 116)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *(void *)(a1 + 8) = *(void *)(a2 + 64);
    if (a3 <= 0x23)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 40);
    *(void *)(a1 + 16) = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 56);
    *(void *)(a1 + 8) = *(void *)(a2 + 64);
  }

void DYTraceDecode_MTLComputePipelineState_resourceIndex( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = a2 + 36;
  size_t v8 = strlen((const char *)(a2 + 36));
  *a1 = *(void *)(v8 + v7 + 1);
  a1[1] = *(void *)(v8 + v7 + 9);
  if (a4)
  {
    if (v8 + 17 > a3)
    {
      int v9 = *a4;
      __int128 v12 = 0u;
      __int128 v13 = 0u;
      v10[0] = v9;
      v10[1] = 500;
      int v11 = "offset <= length";
      GTError_addError(a4, (uint64_t)v10);
    }
  }

void DYTraceDecode_MTLDevice_newBufferWithLength_options( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v8 = a2 + 36;
  int v9 = strcmp((const char *)(a2 + 36), "Culult");
  a1[4] = 0LL;
  int v10 = a1 + 4;
  if (v9)
  {
    if (a4)
    {
      if (*(_DWORD *)v8 != 1970042179 || *(_WORD *)(v8 + 4) != 108)
      {
        int v12 = *a4;
        __int128 v22 = 0u;
        __int128 v23 = 0u;
        int v19 = v12;
        int v20 = 500;
        __int128 v21 = "memcmp((const char*)bytes + offset, (Culul), sizeof(Culul)) == 0";
        GTError_addError(a4, (uint64_t)&v19);
      }
    }

    *a1 = *(void *)(a2 + 44);
    a1[2] = *(void *)(a2 + 52);
    int v10 = a1 + 3;
    uint64_t v13 = 32LL;
    uint64_t v14 = 60LL;
  }

  else
  {
    if (a4)
    {
      if (*(_DWORD *)v8 != 1970042179 || *(_DWORD *)(v8 + 3) != 7629941)
      {
        int v16 = *a4;
        __int128 v22 = 0u;
        __int128 v23 = 0u;
        int v19 = v16;
        int v20 = 500;
        __int128 v21 = "memcmp((const char*)bytes + offset, (Culult), sizeof(Culult)) == 0";
        GTError_addError(a4, (uint64_t)&v19);
      }
    }

    *a1 = *(void *)(a2 + 44);
    a1[2] = *(void *)(a2 + 52);
    a1[3] = *(void *)(a2 + 60);
    uint64_t v13 = 40LL;
    uint64_t v14 = 68LL;
  }

  *int v10 = *(void *)(a2 + v14);
  if (a4)
  {
    if (*(_WORD *)(v8 + v13) != 116)
    {
      int v17 = *a4;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v17;
      int v20 = 500;
      __int128 v21 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v19);
    }

    a1[1] = *(void *)(v8 + (v13 | 4));
    if (v13 + 12 > a3)
    {
      int v18 = *a4;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      __int128 v21 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v19);
    }
  }

  else
  {
    a1[1] = *(void *)(v8 + (v13 | 4));
  }

void DYTraceDecode_MTLDevice_newBufferWithBytes_length_options( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v8 = a2 + 36;
  int v9 = strcmp((const char *)(a2 + 36), "CU<b>ulult");
  *(void *)(a1 + 40) = 0LL;
  if (v9)
  {
    if (a4)
    {
      if (*(void *)v8 != 0x756C753E623C5543LL || *(_WORD *)(v8 + 8) != 108)
      {
        int v11 = *a4;
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        int v20 = v11;
        int v21 = 500;
        int v12 = "memcmp((const char*)bytes + offset, (CU<b>ulul), sizeof(CU<b>ulul)) == 0";
LABEL_14:
        __int128 v22 = v12;
        GTError_addError(a4, (uint64_t)&v20);
      }
    }
  }

  else if (a4)
  {
    if (*(void *)v8 != 0x756C753E623C5543LL || *(void *)(v8 + 3) != 0x746C756C753E62LL)
    {
      int v14 = *a4;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v14;
      int v21 = 500;
      int v12 = "memcmp((const char*)bytes + offset, (CU<b>ulult), sizeof(CU<b>ulult)) == 0";
      goto LABEL_14;
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  uint64_t v25 = 20LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), v8, &v25);
  unint64_t v15 = (v25 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)(v8 + v15);
  *(void *)(a1 + 32) = *(void *)(v8 + v15 + 8);
  unint64_t v16 = v15 + 16;
  if (!v9)
  {
    *(void *)(a1 + 40) = *(void *)(v8 + v16);
    unint64_t v16 = v15 + 24;
  }

  if (a4 && *(_WORD *)(v8 + v16) != 116)
  {
    int v17 = *a4;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v17;
    int v21 = 500;
    __int128 v22 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v20);
  }

  unint64_t v18 = (v16 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)(v8 + v18);
  if (a4)
  {
    if (v18 + 8 > a3)
    {
      int v19 = *a4;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v20);
    }
  }

void DYTraceDecode_MTLDevice_newComputePipelineStateWithDescriptor_options_reflection_error( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  *(void *)(a1 + 32) = 0LL;
  uint64_t v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1819628867 || *(_DWORD *)(a2 + 39) != 7631980)
    {
      int v10 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      int v17 = "memcmp((const char*)bytes + offset, (CUultt), sizeof(CUultt)) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v20 = 16LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v11 + 16);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 24) != 116)
  {
    int v12 = *a4;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    int v17 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }

  unint64_t v13 = (v11 + 29) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

void DYTraceDecode_MTLDevice_newComputePipelineStateWithFunction_options_reflection_error( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  a1[4] = 0LL;
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1819636803 || *(_DWORD *)(a2 + 39) != 7631980)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (Ctultt), sizeof(Ctultt)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  *a1 = *(void *)(a2 + 44);
  a1[2] = *(void *)(a2 + 52);
  a1[3] = *(void *)(a2 + 60);
  a1[5] = *(void *)(a2 + 76);
  if (a4)
  {
    if (*(_WORD *)(a2 + 84) != 116)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    a1[1] = *(void *)(a2 + 88);
    if (a3 <= 0x3B)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    a1[1] = *(void *)(a2 + 88);
  }

void DYTraceDecode_MTLDevice_newComputePipelineStateWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = a2 + 36;
  if (!strcmp((const char *)(a2 + 36), "CUUt"))
  {
    if (a4 && *(_DWORD *)v7 ^ 0x74555543 | *(unsigned __int8 *)(v7 + 4))
    {
      int v11 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v11;
      int v17 = 500;
      __int128 v18 = "memcmp((const char*)bytes + offset, (CUUt), sizeof(CUUt)) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }

    uint64_t v10 = 8LL;
  }

  else
  {
    if (a4)
    {
      if (*(void *)v7 != 0x623C553E623C5543LL || *(void *)(v7 + 3) != 0x743E623C553E62LL)
      {
        int v9 = *a4;
        __int128 v19 = 0u;
        __int128 v20 = 0u;
        int v16 = v9;
        int v17 = 500;
        __int128 v18 = "memcmp((const char*)bytes + offset, (CU<b>U<b>t), sizeof(CU<b>U<b>t)) == 0";
        GTError_addError(a4, (uint64_t)&v16);
      }
    }

    uint64_t v10 = 12LL;
  }

  *(void *)a1 = *(void *)(v7 + v10);
  uint64_t v21 = v10 + 8;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), v7, &v21);
  *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), v7, &v21);
  unint64_t v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)(v7 + v12);
  if (a4 && *(_WORD *)(v12 + v7 + 8) != 116)
  {
    int v13 = *a4;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v13;
    int v17 = 500;
    __int128 v18 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }

  unint64_t v14 = (v12 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)(v7 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      int v15 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

void DYTraceDecode_MTLDevice_newIndirectCommandBufferWithDescriptor_maxCommandCount_options( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x756C753E623C5543LL || *(_WORD *)(a2 + 44) != 108)
    {
      int v10 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      int v17 = "memcmp((const char*)bytes + offset, (CU<b>ulul), sizeof(CU<b>ulul)) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  uint64_t v20 = 20LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 16) != 116)
  {
    int v12 = *a4;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    int v17 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }

  unint64_t v13 = (v11 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

void DYTraceDecode_MTLDevice_newLibraryWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "C@%llutU<b>t", a1 + 24);
  size_t v8 = strlen(v7);
  *(void *)a1 = *(void *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *(void *)(a1 + 16) = &v7[v9];
  unint64_t v19 = v9 + 8LL * *(void *)(a1 + 24);
  *(void *)(a1 + 32) = AppendString_10195((const char **)(a1 + 32), (uint64_t)v7, (uint64_t *)&v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 40) = *(void *)&v7[v10];
  if (a4 && *(_WORD *)&v7[v10 + 8] != 116)
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)&v7[v12];
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLDevice_newLibraryWithFile_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 != 7624003)
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (CUt), sizeof(CUt)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v19 = 12LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLDevice_newLibraryWithSource_options_error( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  int v9 = strcmp((const char *)(a2 + 36), "CU<b>tt");
  *(void *)(a1 + 24) = 0LL;
  if (v9)
  {
    if (!a4 || *v8 == 0x74553E623C5543LL) {
      goto LABEL_9;
    }
    int v10 = *a4;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    int v11 = "memcmp((const char*)bytes + offset, (CU<b>Ut), sizeof(CU<b>Ut)) == 0";
  }

  else
  {
    if (!a4 || *v8 == 0x74743E623C5543LL) {
      goto LABEL_9;
    }
    int v12 = *a4;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v12;
    int v18 = 500;
    int v11 = "memcmp((const char*)bytes + offset, (CU<b>tt), sizeof(CU<b>tt)) == 0";
  }

  uint64_t v19 = v11;
  GTError_addError(a4, (uint64_t)&v17);
LABEL_9:
  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v22 = 16LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v22);
  if (v9)
  {
    *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, &v22);
    unint64_t v13 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  }

  else
  {
    unint64_t v13 = ((v22 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 8;
  }

  *(void *)(a1 + 32) = *(void *)((char *)v8 + v13);
  if (a4 && *(_WORD *)((char *)v8 + v13 + 8) != 116)
  {
    int v14 = *a4;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v14;
    int v18 = 500;
    uint64_t v19 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v17);
  }

  unint64_t v15 = (v13 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v15);
  if (a4)
  {
    if (v15 + 8 > a3)
    {
      int v16 = *a4;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      uint64_t v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }

void DYTraceDecode_MTLDevice_newTextureWithDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (unsigned __int16 *)(a2 + 36);
  int v9 = strcmp((const char *)(a2 + 36), "CUt");
  *(void *)(a1 + 24) = 0LL;
  if (v9)
  {
    if (a4 && *v8 ^ 0x5543 | *((unsigned __int8 *)v8 + 2))
    {
      int v10 = *a4;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v10;
      int v18 = 500;
      int v11 = "memcmp((const char*)bytes + offset, (CU), sizeof(CU)) == 0";
LABEL_8:
      uint64_t v19 = v11;
      GTError_addError(a4, (uint64_t)&v17);
    }
  }

  else if (a4 && *(_DWORD *)v8 != 7624003)
  {
    int v12 = *a4;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v12;
    int v18 = 500;
    int v11 = "memcmp((const char*)bytes + offset, (CUt), sizeof(CUt)) == 0";
    goto LABEL_8;
  }

  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v22 = 12LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v22);
  unint64_t v13 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (!v9)
  {
    *(void *)(a1 + 24) = *(void *)((char *)v8 + v13);
    v13 += 8LL;
  }

  if (a4 && *(unsigned __int16 *)((char *)v8 + v13) != 116)
  {
    int v14 = *a4;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v14;
    int v18 = 500;
    uint64_t v19 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v17);
  }

  unint64_t v15 = (v13 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v15);
  if (a4)
  {
    if (v15 + 8 > a3)
    {
      int v16 = *a4;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      uint64_t v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }

void DYTraceDecode_MTLFunction_newArgumentEncoderWithBufferIndex_reflection( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  a1[3] = 0LL;
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) ^ 0x746C7543 | *(unsigned __int8 *)(a2 + 40))
    {
      int v8 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      unint64_t v13 = "memcmp((const char*)bytes + offset, (Cult), sizeof(Cult)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *a1 = *(void *)(a2 + 41);
    a1[2] = *(void *)(a2 + 49);
    if (*(_WORD *)(a2 + 65) != 116)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      unint64_t v13 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    a1[1] = *(void *)(a2 + 68);
    if (a3 <= 0x27)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      unint64_t v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  else
  {
    *a1 = *(void *)(a2 + 41);
    a1[2] = *(void *)(a2 + 49);
    a1[1] = *(void *)(a2 + 68);
  }

void DYTraceDecode_MTLRenderCommandEncoder_setVertexAmplificationCount_viewMappings( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v8 = a2 + 36;
  int v9 = strcmp((const char *)(a2 + 36), "Cult");
  *(void *)(a1 + 16) = 0LL;
  if (v9)
  {
    if (a4 && *(void *)v8 != 0x3E623C556C7543LL)
    {
      int v10 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      int v17 = "memcmp((const char*)bytes + offset, (CulU<b>), sizeof(CulU<b>)) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }

    *(void *)a1 = *(void *)(a2 + 44);
    *(void *)(a1 + 8) = *(void *)(a2 + 52);
    uint64_t v20 = 24LL;
    *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), v8, &v20);
    unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  }

  else
  {
    if (a4 && *(_DWORD *)v8 ^ 0x746C7543 | *(unsigned __int8 *)(v8 + 4))
    {
      int v12 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v12;
      int v16 = 500;
      int v17 = "memcmp((const char*)bytes + offset, (Cult), sizeof(Cult)) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }

    *(void *)a1 = *(void *)(a2 + 44);
    *(void *)(a1 + 8) = *(void *)(a2 + 52);
    unint64_t v11 = 32LL;
    if (a4 && *(void *)(a2 + 60))
    {
      int v13 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v13;
      int v16 = 500;
      int v17 = "viewMappings == 0";
      GTError_addError(a4, (uint64_t)&v15);
      unint64_t v11 = 32LL;
    }
  }

  if (a4)
  {
    if (v11 > a3)
    {
      int v14 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

void DYTraceDecode_MTLLibrary_newFunctionWithName_constantValues_error( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x74555343 | *(unsigned __int8 *)(a2 + 40))
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (CSUt), sizeof(CSUt)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v19 = 16LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v19);
  *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLLibrary_newIntersectionFunctionWithDescriptor_completionHandler( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1953781059 || *(_WORD *)(a2 + 40) != 116)
    {
      int v10 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      int v15 = "memcmp((const char*)bytes + offset, (CUttt), sizeof(CUttt)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  *(void *)a1 = *(void *)(a2 + 42);
  uint64_t v18 = 14LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v18);
  unint64_t v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11 + 8);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 16);
  if (a4)
  {
    if (v11 + 24 > a3)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      int v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

void DYTraceDecode_MTLPipelineLibrary_newComputePipelineStateWithName_options_reflection_error( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  *(void *)(a1 + 32) = 0LL;
  uint64_t v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1819628355 || *(_DWORD *)(a2 + 39) != 7631980)
    {
      int v10 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v10;
      int v17 = 500;
      uint64_t v18 = "memcmp((const char*)bytes + offset, (CSultt), sizeof(CSultt)) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v21 = 16LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v21);
  unint64_t v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  unint64_t v12 = (v11 + 19) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v12);
  if (a4 && *(_WORD *)((char *)v8 + v12 + 8) != 116)
  {
    int v13 = *a4;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v13;
    int v17 = 500;
    uint64_t v18 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }

  unint64_t v14 = (v12 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      int v15 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

__n128 DYTraceDecode_MTLRenderCommandEncoder_setScissorRect( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) ^ 0x6C344043 | *(unsigned __int8 *)(a2 + 40))
    {
      int v8 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (C@4l), sizeof(C@4l)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 68);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x2F)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 68);
    *(__n128 *)(a1 + 8) = result;
  }

  return result;
}

void DYTraceDecode_MTLRenderCommandEncoder_setScissorRects_count( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x6C755543 | *(unsigned __int8 *)(a2 + 40))
  {
    int v9 = *a4;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    int v12 = v9;
    int v13 = 500;
    __int128 v14 = "memcmp((const char*)bytes + offset, (CUul), sizeof(CUul)) == 0";
    GTError_addError(a4, (uint64_t)&v12);
  }

  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v17 = 16LL;
  *(void *)(a1 + 8) = AppendString_10195((const char **)(a1 + 8), (uint64_t)v8, &v17);
  unint64_t v10 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 16) = *(void *)((char *)v8 + v10);
  if (a4)
  {
    if (v10 + 8 > a3)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      __int128 v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

void DYTraceDecode_MTLTexture_getBytes_bytesPerRow_bytesPerImage_fromRegion_mipmapLevel_slice( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v8 = a2 + 36;
  if (!strcmp((const char *)(a2 + 36), "CU<b>ulul@6ulululul"))
  {
    if (a4)
    {
      BOOL v13 = *(void *)v8 == 0x756C753E623C5543LL && *(void *)(v8 + 8) == 0x756C756C7536406CLL;
      if (!v13 || *(_DWORD *)(v8 + 16) != 7107948)
      {
        int v15 = *a4;
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        int v20 = v15;
        int v21 = 500;
        uint64_t v22 = "memcmp((const char*)bytes + offset, (CU<b>ulul@6ulululul), sizeof(CU<b>ulul@6ulululul)) == 0";
        GTError_addError(a4, (uint64_t)&v20);
      }
    }

    uint64_t v12 = 88LL;
  }

  else
  {
    if (a4)
    {
      BOOL v9 = *(void *)v8 == 0x756C753E623C5543LL && *(void *)(v8 + 8) == 0x756C756C7536406CLL;
      if (!v9 || *(_WORD *)(v8 + 16) != 108)
      {
        int v11 = *a4;
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        int v20 = v11;
        int v21 = 500;
        uint64_t v22 = "memcmp((const char*)bytes + offset, (CU<b>ulul@6ululul), sizeof(CU<b>ulul@6ululul)) == 0";
        GTError_addError(a4, (uint64_t)&v20);
      }
    }

    uint64_t v12 = 80LL;
  }

  *(void *)a1 = *(void *)(a2 + 56);
  uint64_t v25 = 28LL;
  *(void *)(a1 + 8) = AppendString_10195((const char **)(a1 + 8), v8, &v25);
  unint64_t v16 = (v25 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 16) = *(void *)(v8 + v16);
  *(void *)(a1 + 24) = *(void *)(v8 + v16 + 8);
  __int128 v17 = *(_OWORD *)(v8 + v16 + 16);
  __int128 v18 = *(_OWORD *)(v8 + v16 + 48);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v8 + v16 + 32);
  *(_OWORD *)(a1 + 64) = v18;
  *(_OWORD *)(a1 + 32) = v17;
  *(void *)(a1 + 80) = *(void *)(v8 + v16 + 64);
  *(void *)(a1 + 88) = *(void *)(v8 + v16 + 72);
  if (a4)
  {
    if (v16 + v12 > a3)
    {
      int v19 = *a4;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      uint64_t v22 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v20);
    }
  }

void DYTraceDecode_MTLTexture_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v8 = a2 + 36;
  int v9 = strcmp((const char *)(a2 + 36), "C@6ulululU<b>ulul");
  if (v9)
  {
    if (a4)
    {
      BOOL v10 = *(void *)v8 == 0x756C756C75364043LL && *(void *)(v8 + 8) == 0x756C753E623C556CLL;
      if (!v10 || *(_DWORD *)(v8 + 16) != 7107948)
      {
        int v12 = *a4;
        __int128 v25 = 0u;
        __int128 v26 = 0u;
        int v22 = v12;
        int v23 = 500;
        BOOL v13 = "memcmp((const char*)bytes + offset, (C@6ulululU<b>ululul), sizeof(C@6ulululU<b>ululul)) == 0";
LABEL_20:
        __int128 v24 = v13;
        GTError_addError(a4, (uint64_t)&v22);
      }
    }
  }

  else if (a4)
  {
    BOOL v14 = *(void *)v8 == 0x756C756C75364043LL && *(void *)(v8 + 8) == 0x756C753E623C556CLL;
    if (!v14 || *(_WORD *)(v8 + 16) != 108)
    {
      int v16 = *a4;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      int v22 = v16;
      int v23 = 500;
      BOOL v13 = "memcmp((const char*)bytes + offset, (C@6ulululU<b>ulul), sizeof(C@6ulululU<b>ulul)) == 0";
      goto LABEL_20;
    }
  }

  *(void *)a1 = *(void *)(a2 + 56);
  __int128 v17 = *(_OWORD *)(a2 + 64);
  __int128 v18 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 24) = v18;
  *(_OWORD *)(a1 + 8) = v17;
  *(void *)(a1 + 56) = *(void *)(a2 + 112);
  *(void *)(a1 + 64) = *(void *)(a2 + 120);
  uint64_t v27 = 92LL;
  *(void *)(a1 + 72) = AppendString_10195((const char **)(a1 + 72), v8, &v27);
  unint64_t v19 = (v27 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 80) = *(void *)(v8 + v19);
  *(void *)(a1 + 88) = *(void *)(v8 + v19 + 8);
  unint64_t v20 = v19 + 16;
  if (v9)
  {
    *(void *)(a1 + 96) = *(void *)(v8 + v20);
    unint64_t v20 = v19 + 24;
    if (!a4) {
      return;
    }
  }

  else
  {
    *(void *)(a1 + 96) = 0LL;
    if (!a4) {
      return;
    }
  }

  if (v20 > a3)
  {
    int v21 = *a4;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    int v22 = v21;
    int v23 = 500;
    __int128 v24 = "offset <= length";
    GTError_addError(a4, (uint64_t)&v22);
  }

void DYTraceDecode_Boundary_Frame(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) != 0x74747474747443LL)
  {
    int v8 = *a4;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (Ctttttt), sizeof(Ctttttt)) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }

  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  a1[3] = *(void *)(a2 + 68);
  a1[4] = *(void *)(a2 + 76);
  a1[5] = *(void *)(a2 + 84);
  a1[6] = *(void *)(a2 + 92);
  if (a4)
  {
    if (a3 <= 0x3F)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

void DYTraceDecode_CAMetalDrawable_dealloc(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_WORD *)(a2 + 36) != 67)
    {
      int v8 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v8;
      int v11 = 500;
      int v12 = "memcmp((const char*)bytes + offset, (C), sizeof(C)) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }

    *a1 = *(void *)(a2 + 40);
    if (a3 <= 0xB)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

  else
  {
    *a1 = *(void *)(a2 + 40);
  }

void DYTraceDecode_CAMetalDrawable_presentAfterMinimumDuration( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 36) ^ 0x6443 | *(unsigned __int8 *)(a2 + 38))
    {
      int v8 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v8;
      int v11 = 500;
      int v12 = "memcmp((const char*)bytes + offset, (Cd), sizeof(Cd)) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }

    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 48);
    if (a3 <= 0x13)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 48);
  }

void DYTraceDecode_CAMetalDrawable_texture(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_WORD *)(a2 + 36) != 67)
    {
      int v8 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (C), sizeof(C)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *a1 = *(void *)(a2 + 40);
    if (*(_WORD *)(a2 + 48) != 116)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    a1[1] = *(void *)(a2 + 52);
    if (a3 <= 0x17)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 52);
  }

void DYTraceDecode_CAMetalLayer_setBounds_contentsScale( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1681145923 || *(_WORD *)(a2 + 40) != 100)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (C@4dd), sizeof(C@4dd)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  __int128 v10 = *(_OWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 68);
  *(_OWORD *)(a1 + 8) = v10;
  *(void *)(a1 + 40) = *(void *)(a2 + 84);
  if (a4)
  {
    if (a3 <= 0x37)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      __int128 v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

void DYTraceDecode_CAMetalLayer_setColorspace(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (unsigned __int16 *)(a2 + 36);
  if (a4 && *v8 ^ 0x5543 | *(unsigned __int8 *)(a2 + 38))
  {
    int v9 = *a4;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    int v11 = v9;
    int v12 = 500;
    int v13 = "memcmp((const char*)bytes + offset, (CU), sizeof(CU)) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }

  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v16 = 12LL;
  *(void *)(a1 + 8) = AppendString_10195((const char **)(a1 + 8), (uint64_t)v8, &v16);
  if (a4)
  {
    if (((v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_CAMetalLayer_setDevice(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 != 5600323)
  {
    int v9 = *a4;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    int v11 = v9;
    int v12 = 500;
    int v13 = "memcmp((const char*)bytes + offset, (CtU), sizeof(CtU)) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }

  *(void *)a1 = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 48);
  uint64_t v16 = 20LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v16);
  if (a4)
  {
    if (((v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

__n128 DYTraceDecode_CAMetalLayer_setDrawableSize(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) ^ 0x64324043 | *(unsigned __int8 *)(a2 + 40))
    {
      int v8 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (C@2d), sizeof(C@2d)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x1F)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    *(__n128 *)(a1 + 8) = result;
  }

  return result;
}

void DYTraceDecode_CAMetalLayer_setFramebufferOnly(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 6911299)
    {
      int v8 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v8;
      int v11 = 500;
      int v12 = "memcmp((const char*)bytes + offset, (Cui), sizeof(Cui)) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }

    *(void *)a1 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
    if (a3 <= 0xF)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
  }

void DYTraceDecode_CAMetalLayer_setPixelFormat(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7107907)
    {
      int v8 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v8;
      int v11 = 500;
      int v12 = "memcmp((const char*)bytes + offset, (Cul), sizeof(Cul)) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }

    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 48);
    if (a3 <= 0x13)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 48);
  }

void DYTraceDecode_MTLAccelerationStructure_allocationID( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7828803)
    {
      int v8 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v8;
      int v11 = 500;
      int v12 = "memcmp((const char*)bytes + offset, (Cuw), sizeof(Cuw)) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }

    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 48);
    if (a3 <= 0x13)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 48);
  }

void DYTraceDecode_MTLAccelerationStructure_allocationInfo( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x7577757775777543LL || *(void *)(a2 + 42) != 0x6C756C756C7577LL)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (Cuwuwuwululul), sizeof(Cuwuwuwululul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = *(void *)(a2 + 52);
  a1[1] = *(void *)(a2 + 60);
  a1[2] = *(void *)(a2 + 68);
  a1[3] = *(void *)(a2 + 76);
  a1[4] = *(void *)(a2 + 84);
  a1[5] = *(void *)(a2 + 92);
  a1[6] = *(void *)(a2 + 100);
  if (a4)
  {
    if (a3 <= 0x47)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLAccelerationStructure_state(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x7569756975697543LL || *(_WORD *)(a2 + 44) != 105)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (Cuiuiuiui), sizeof(Cuiuiuiui)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x23)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLAccelerationStructure_uniqueIdentifier( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_WORD *)(a2 + 36) != 67)
    {
      int v8 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (C), sizeof(C)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *a1 = *(void *)(a2 + 40);
    if (*(unsigned __int16 *)(a2 + 48) ^ 0x7775 | *(unsigned __int8 *)(a2 + 50))
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (uw), sizeof(uw)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    a1[1] = *(void *)(a2 + 52);
    if (a3 <= 0x17)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 52);
  }

void DYTraceDecode_MTLAccelerationStructure_setLabel(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (unsigned __int16 *)(a2 + 36);
  if (a4 && *v8 ^ 0x5343 | *(unsigned __int8 *)(a2 + 38))
  {
    int v9 = *a4;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    int v11 = v9;
    int v12 = 500;
    __int128 v13 = "memcmp((const char*)bytes + offset, (CS), sizeof(CS)) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }

  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v16 = 12LL;
  *(void *)(a1 + 8) = AppendString_10195((const char **)(a1 + 8), (uint64_t)v8, &v16);
  if (a4)
  {
    if (((v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLAccelerationStructure_setResponsibleProcess( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 36) ^ 0x6943 | *(unsigned __int8 *)(a2 + 38))
    {
      int v8 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v8;
      int v11 = 500;
      int v12 = "memcmp((const char*)bytes + offset, (Ci), sizeof(Ci)) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }

    *(void *)a1 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
    if (a3 <= 0xF)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
  }

void DYTraceDecode_MTLAccelerationStructure_setPurgeableState( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7107907)
    {
      int v8 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (Cul), sizeof(Cul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *a1 = *(void *)(a2 + 40);
    a1[2] = *(void *)(a2 + 48);
    if (*(unsigned __int16 *)(a2 + 56) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 58))
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (ul), sizeof(ul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    a1[1] = *(void *)(a2 + 60);
    if (a3 <= 0x1F)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[2] = *(void *)(a2 + 48);
    a1[1] = *(void *)(a2 + 60);
  }

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_setAccelerationStructureState( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x6975697569757443LL || *(void *)(a2 + 39) != 0x69756975697569LL)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (Ctuiuiuiui), sizeof(Ctuiuiuiui)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 76);
  if (a4)
  {
    if (a3 <= 0x2B)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_buildAccelerationStructure_descriptor_scratchBuffer_scratchBufferOffset( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1951757379 || *(_DWORD *)(a2 + 39) != 7107956)
    {
      int v10 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (CtUtul), sizeof(CtUtul)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  uint64_t v18 = 24LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v18);
  unint64_t v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 8);
  if (a4)
  {
    if (v11 + 16 > a3)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      __int128 v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_copyAccelerationStructure_toAccelerationStructure( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(_DWORD *)(a2 + 36) != 7631939)
  {
    int v8 = *a4;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (Ctt), sizeof(Ctt)) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }

  *a1 = *(void *)(a2 + 40);
  a1[1] = *(void *)(a2 + 48);
  a1[2] = *(void *)(a2 + 56);
  if (a4)
  {
    if (a3 <= 0x1B)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_deserializeInstanceAccelerationStructure_primitiveAccelerationStructures_fromBuffer_serializedBufferOffset_withDescriptor( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 != 0x556C7574557443LL)
  {
    int v9 = *a4;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    int v12 = v9;
    int v13 = 500;
    __int128 v14 = "memcmp((const char*)bytes + offset, (CtUtulU), sizeof(CtUtulU)) == 0";
    GTError_addError(a4, (uint64_t)&v12);
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  unint64_t v17 = 24LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v17);
  unint64_t v10 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v10);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v10 + 8);
  unint64_t v17 = v10 + 16;
  *(void *)(a1 + 40) = AppendString_10195((const char **)(a1 + 40), (uint64_t)v8, (uint64_t *)&v17);
  if (a4)
  {
    if (((v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      __int128 v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_deserializePrimitiveAccelerationStructure_fromBuffer_serializedBufferOffset( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970566211 || *(_WORD *)(a2 + 40) != 108)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Cttul), sizeof(Cttul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  a1[3] = *(void *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x27)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_deserializePrimitiveAccelerationStructure_fromBuffer_serializedBufferOffset_withDescriptor( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1970566211 || *(_DWORD *)(a2 + 39) != 5598325)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (CttulU), sizeof(CttulU)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  *(void *)(a1 + 16) = *(void *)(a2 + 60);
  *(void *)(a1 + 24) = *(void *)(a2 + 68);
  uint64_t v17 = 40LL;
  *(void *)(a1 + 32) = AppendString_10195((const char **)(a1 + 32), (uint64_t)v8, &v17);
  if (a4)
  {
    if (((v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      __int128 v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_refitAccelerationStructure_descriptor_destination_scratchBuffer_scratchBufferOffset( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 != 0x6C757474557443LL)
  {
    int v9 = *a4;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    int v12 = v9;
    int v13 = 500;
    __int128 v14 = "memcmp((const char*)bytes + offset, (CtUttul), sizeof(CtUttul)) == 0";
    GTError_addError(a4, (uint64_t)&v12);
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  uint64_t v17 = 24LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v17);
  unint64_t v10 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v10);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v10 + 8);
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v10 + 16);
  if (a4)
  {
    if (v10 + 24 > a3)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      __int128 v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_refitAccelerationStructure_descriptor_destination_scratchBuffer_scratchBufferOffset_options( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x756C757474557443LL || *(_WORD *)(a2 + 44) != 108)
    {
      int v10 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (CtUttulul), sizeof(CtUttulul)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  uint64_t v18 = 28LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v18);
  unint64_t v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 8);
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v11 + 16);
  *(void *)(a1 + 48) = *(void *)((char *)v8 + v11 + 24);
  if (a4)
  {
    if (v11 + 32 > a3)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      __int128 v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1819636803 || *(_DWORD *)(a2 + 39) != 6911340)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Ctului), sizeof(Ctului)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  *(void *)(a1 + 16) = *(void *)(a2 + 60);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x23)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_updateFence( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 36) ^ 0x7443 | *(unsigned __int8 *)(a2 + 38))
    {
      int v8 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v8;
      int v11 = 500;
      int v12 = "memcmp((const char*)bytes + offset, (Ct), sizeof(Ct)) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }

    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 48);
    if (a3 <= 0x13)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 48);
  }

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_useHeaps_count( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "C@%zutul", &v16);
  size_t v8 = strlen(v7);
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *a1 = *(void *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  a1[1] = &v7[v9];
  unint64_t v10 = v9 + 8 * v16;
  a1[2] = *(void *)&v7[v10];
  if (a4)
  {
    if (v10 + 8 > a3)
    {
      int v11 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      v12[0] = v11;
      v12[1] = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)v12);
    }
  }

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_useResource_usage( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(_DWORD *)(a2 + 36) ^ 0x6C757443 | *(unsigned __int8 *)(a2 + 40))
  {
    int v8 = *a4;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (Ctul), sizeof(Ctul)) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }

  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  if (a4)
  {
    if (a3 <= 0x1F)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_useResources_count_usage( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "C@%zutulul", &v16);
  size_t v8 = strlen(v7);
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *a1 = *(void *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  a1[1] = &v7[v9];
  unint64_t v10 = v9 + 8 * v16;
  a1[2] = *(void *)&v7[v10];
  a1[3] = *(void *)&v7[v10 + 8];
  if (a4)
  {
    if (v10 + 16 > a3)
    {
      int v11 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      v12[0] = v11;
      v12[1] = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)v12);
    }
  }

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_writeCompactedAccelerationStructureSize_toBuffer_offset_sizeDataType( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) != 0x6C756C75747443LL)
  {
    int v8 = *a4;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (Cttulul), sizeof(Cttulul)) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }

  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  a1[3] = *(void *)(a2 + 68);
  a1[4] = *(void *)(a2 + 76);
  if (a4)
  {
    if (a3 <= 0x2F)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_writeDeserializedAccelerationStructureSize_serializedOffset_toBuffer_sizeBufferOffset( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) != 0x6C75746C757443LL)
  {
    int v8 = *a4;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (Ctultul), sizeof(Ctultul)) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }

  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  a1[3] = *(void *)(a2 + 68);
  a1[4] = *(void *)(a2 + 76);
  if (a4)
  {
    if (a3 <= 0x2F)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

void DYTraceDecode_MTLArgumentEncoder_newArgumentEncoderForBufferAtIndex( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7107907)
    {
      int v8 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (Cul), sizeof(Cul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *a1 = *(void *)(a2 + 40);
    a1[2] = *(void *)(a2 + 48);
    if (*(_WORD *)(a2 + 56) != 116)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    a1[1] = *(void *)(a2 + 60);
    if (a3 <= 0x1F)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[2] = *(void *)(a2 + 48);
    a1[1] = *(void *)(a2 + 60);
  }

void DYTraceDecode_MTLArgumentEncoder_setArgumentBuffer_startOffset_arrayElement( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1819636803 || *(_DWORD *)(a2 + 39) != 7107948)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (Ctulul), sizeof(Ctulul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  a1[3] = *(void *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x27)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLArgumentEncoder_setBuffers_offsets_withRange( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "C@%zut@%zuul@2ul", &v18, &v17);
  size_t v8 = strlen(v7);
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *(void *)a1 = *(void *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  *(void *)(a1 + 8) = &v7[v9];
  uint64_t v10 = v18;
  *(void *)(a1 + 16) = &v7[8 * v18 + v9];
  unint64_t v11 = v9 + 8 * (v10 + v17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v7[v11];
  if (a4)
  {
    if (v11 + 16 > a3)
    {
      int v12 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      v13[0] = v12;
      v13[1] = 500;
      __int128 v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)v13);
    }
  }

void DYTraceDecode_MTLArgumentEncoder_setIndirectCommandBuffers_withRange( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "C@%zut@2ul", &v16);
  size_t v8 = strlen(v7);
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *(void *)a1 = *(void *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  *(void *)(a1 + 8) = &v7[v9];
  unint64_t v10 = v9 + 8 * v16;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)&v7[v10];
  if (a4)
  {
    if (v10 + 16 > a3)
    {
      int v11 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      v12[0] = v11;
      v12[1] = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)v12);
    }
  }

void DYTraceDecode_MTLBinaryArchive_addComputePipelineFunctionsWithDescriptor_error( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 != 7624003)
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    uint64_t v16 = "memcmp((const char*)bytes + offset, (CUt), sizeof(CUt)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v19 = 12LL;
  *(void *)(a1 + 8) = AppendString_10195((const char **)(a1 + 8), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 16) = *(void *)((char *)v8 + v10);
  if (a4 && *(unsigned __int16 *)((char *)v8 + v10 + 8) ^ 0x6975 | *((unsigned __int8 *)v8 + v10 + 10))
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    uint64_t v16 = "memcmp((const char*)bytes + offset, (ui), sizeof(ui)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 14) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 4 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      uint64_t v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLBlitCommandEncoder_resolveCounters_inRange_destinationBuffer_destinationOffset( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x75746C7532407443LL || *(void *)(a2 + 42) != 0x3E623C556C7574LL)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (Ct@2ultulU<b>), sizeof(Ct@2ultulU<b>)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 8) = *(void *)(a2 + 60);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 68);
  *(void *)(a1 + 32) = *(void *)(a2 + 84);
  *(void *)(a1 + 40) = *(void *)(a2 + 92);
  uint64_t v17 = 64LL;
  *(void *)(a1 + 48) = AppendString_10195((const char **)(a1 + 48), (uint64_t)v8, &v17);
  if (a4)
  {
    if (((v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

void DYTraceDecode_MTLBlitCommandEncoder_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x6C756C756C757443LL && *(void *)(a2 + 44) == 0x756C75746C753340LL;
    if (!v8 || *(void *)(a2 + 50) != 0x6C7533406C756CLL)
    {
      int v10 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v10;
      int v15 = 500;
      __int128 v16 = "memcmp((const char*)bytes + offset, (Ctululul@3ultulul@3ul), sizeof(Ctululul@3ultulul@3ul)) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

  *(void *)a1 = *(void *)(a2 + 60);
  *(void *)(a1 + 8) = *(void *)(a2 + 68);
  *(void *)(a1 + 16) = *(void *)(a2 + 76);
  *(void *)(a1 + 24) = *(void *)(a2 + 84);
  *(void *)(a1 + 32) = *(void *)(a2 + 92);
  __int128 v11 = *(_OWORD *)(a2 + 100);
  *(void *)(a1 + 56) = *(void *)(a2 + 116);
  *(_OWORD *)(a1 + 40) = v11;
  *(void *)(a1 + 64) = *(void *)(a2 + 124);
  *(void *)(a1 + 72) = *(void *)(a2 + 132);
  *(void *)(a1 + 80) = *(void *)(a2 + 140);
  __int128 v12 = *(_OWORD *)(a2 + 148);
  *(void *)(a1 + 104) = *(void *)(a2 + 164);
  *(_OWORD *)(a1 + 88) = v12;
  if (a4)
  {
    if (a3 <= 0x87)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLBlitCommandEncoder_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_options( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x6C756C756C757443LL && *(void *)(a2 + 44) == 0x756C75746C753340LL;
    if (!v8 || *(void *)(a2 + 52) != 0x6C756C7533406CLL)
    {
      int v10 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v10;
      int v15 = 500;
      __int128 v16 = "memcmp((const char*)bytes + offset, (Ctululul@3ultulul@3ulul), sizeof(Ctululul@3ultulul@3ulul)) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

  *(void *)a1 = *(void *)(a2 + 60);
  *(void *)(a1 + 8) = *(void *)(a2 + 68);
  *(void *)(a1 + 16) = *(void *)(a2 + 76);
  *(void *)(a1 + 24) = *(void *)(a2 + 84);
  *(void *)(a1 + 32) = *(void *)(a2 + 92);
  __int128 v11 = *(_OWORD *)(a2 + 100);
  *(void *)(a1 + 56) = *(void *)(a2 + 116);
  *(_OWORD *)(a1 + 40) = v11;
  *(void *)(a1 + 64) = *(void *)(a2 + 124);
  *(void *)(a1 + 72) = *(void *)(a2 + 132);
  *(void *)(a1 + 80) = *(void *)(a2 + 140);
  __int128 v12 = *(_OWORD *)(a2 + 148);
  *(void *)(a1 + 104) = *(void *)(a2 + 164);
  *(_OWORD *)(a1 + 88) = v12;
  *(void *)(a1 + 112) = *(void *)(a2 + 172);
  if (a4)
  {
    if (a3 <= 0x8F)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLBlitCommandEncoder_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x756C75746C757443LL || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Ctultulul), sizeof(Ctultulul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = *(void *)(a2 + 48);
  a1[1] = *(void *)(a2 + 56);
  a1[2] = *(void *)(a2 + 64);
  a1[3] = *(void *)(a2 + 72);
  a1[4] = *(void *)(a2 + 80);
  a1[5] = *(void *)(a2 + 88);
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x33406C756C757443LL && *(void *)(a2 + 44) == 0x75746C7533406C75LL;
    if (!v8 || *(void *)(a2 + 50) != 0x6C756C756C7574LL)
    {
      int v10 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v10;
      int v15 = 500;
      __int128 v16 = "memcmp((const char*)bytes + offset, (Ctulul@3ul@3ultululul), sizeof(Ctulul@3ul@3ultululul)) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

  *(void *)a1 = *(void *)(a2 + 60);
  *(void *)(a1 + 8) = *(void *)(a2 + 68);
  *(void *)(a1 + 16) = *(void *)(a2 + 76);
  *(void *)(a1 + 24) = *(void *)(a2 + 84);
  __int128 v11 = *(_OWORD *)(a2 + 92);
  *(void *)(a1 + 48) = *(void *)(a2 + 108);
  *(_OWORD *)(a1 + 32) = v11;
  __int128 v12 = *(_OWORD *)(a2 + 116);
  *(void *)(a1 + 72) = *(void *)(a2 + 132);
  *(_OWORD *)(a1 + 56) = v12;
  *(void *)(a1 + 80) = *(void *)(a2 + 140);
  *(void *)(a1 + 88) = *(void *)(a2 + 148);
  *(void *)(a1 + 96) = *(void *)(a2 + 156);
  *(void *)(a1 + 104) = *(void *)(a2 + 164);
  if (a4)
  {
    if (a3 <= 0x87)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage_options( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x33406C756C757443LL && *(void *)(a2 + 44) == 0x75746C7533406C75LL;
    if (!v8 || *(void *)(a2 + 52) != 0x6C756C756C756CLL)
    {
      int v10 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v10;
      int v15 = 500;
      __int128 v16 = "memcmp((const char*)bytes + offset, (Ctulul@3ul@3ultulululul), sizeof(Ctulul@3ul@3ultulululul)) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

  *(void *)a1 = *(void *)(a2 + 60);
  *(void *)(a1 + 8) = *(void *)(a2 + 68);
  *(void *)(a1 + 16) = *(void *)(a2 + 76);
  *(void *)(a1 + 24) = *(void *)(a2 + 84);
  __int128 v11 = *(_OWORD *)(a2 + 92);
  *(void *)(a1 + 48) = *(void *)(a2 + 108);
  *(_OWORD *)(a1 + 32) = v11;
  __int128 v12 = *(_OWORD *)(a2 + 116);
  *(void *)(a1 + 72) = *(void *)(a2 + 132);
  *(_OWORD *)(a1 + 56) = v12;
  *(void *)(a1 + 80) = *(void *)(a2 + 140);
  *(void *)(a1 + 88) = *(void *)(a2 + 148);
  *(void *)(a1 + 96) = *(void *)(a2 + 156);
  *(void *)(a1 + 104) = *(void *)(a2 + 164);
  *(void *)(a1 + 112) = *(void *)(a2 + 172);
  if (a4)
  {
    if (a3 <= 0x8F)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x33406C756C757443LL && *(void *)(a2 + 44) == 0x75746C7533406C75LL;
    if (!v8 || *(void *)(a2 + 52) != 0x6C7533406C756CLL)
    {
      int v10 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      __int128 v17 = "memcmp((const char*)bytes + offset, (Ctulul@3ul@3ultulul@3ul), sizeof(Ctulul@3ul@3ultulul@3ul)) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

  *(void *)a1 = *(void *)(a2 + 60);
  *(void *)(a1 + 8) = *(void *)(a2 + 68);
  *(void *)(a1 + 16) = *(void *)(a2 + 76);
  *(void *)(a1 + 24) = *(void *)(a2 + 84);
  __int128 v11 = *(_OWORD *)(a2 + 92);
  *(void *)(a1 + 48) = *(void *)(a2 + 108);
  *(_OWORD *)(a1 + 32) = v11;
  __int128 v12 = *(_OWORD *)(a2 + 116);
  *(void *)(a1 + 72) = *(void *)(a2 + 132);
  *(_OWORD *)(a1 + 56) = v12;
  *(void *)(a1 + 80) = *(void *)(a2 + 140);
  *(void *)(a1 + 88) = *(void *)(a2 + 148);
  *(void *)(a1 + 96) = *(void *)(a2 + 156);
  __int128 v13 = *(_OWORD *)(a2 + 164);
  *(void *)(a1 + 120) = *(void *)(a2 + 180);
  *(_OWORD *)(a1 + 104) = v13;
  if (a4)
  {
    if (a3 <= 0x97)
    {
      int v14 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      __int128 v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

void DYTraceDecode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_options( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x33406C756C757443LL && *(void *)(a2 + 44) == 0x75746C7533406C75LL;
    BOOL v9 = v8 && *(void *)(a2 + 52) == 0x756C7533406C756CLL;
    if (!v9 || *(_WORD *)(a2 + 60) != 108)
    {
      int v11 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v11;
      int v17 = 500;
      __int128 v18 = "memcmp((const char*)bytes + offset, (Ctulul@3ul@3ultulul@3ulul), sizeof(Ctulul@3ul@3ultulul@3ulul)) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

  *(void *)a1 = *(void *)(a2 + 64);
  *(void *)(a1 + 8) = *(void *)(a2 + 72);
  *(void *)(a1 + 16) = *(void *)(a2 + 80);
  *(void *)(a1 + 24) = *(void *)(a2 + 88);
  __int128 v12 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 48) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 32) = v12;
  __int128 v13 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 72) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 56) = v13;
  *(void *)(a1 + 80) = *(void *)(a2 + 144);
  *(void *)(a1 + 88) = *(void *)(a2 + 152);
  *(void *)(a1 + 96) = *(void *)(a2 + 160);
  __int128 v14 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 120) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 104) = v14;
  *(void *)(a1 + 128) = *(void *)(a2 + 192);
  if (a4)
  {
    if (a3 <= 0xA3)
    {
      int v15 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

void DYTraceDecode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_toTexture_destinationSlice_destinationLevel_sliceCount_levelCount( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x75746C756C757443LL || *(void *)(a2 + 44) != 0x6C756C756C756CLL)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (Ctulultulululul), sizeof(Ctulultulululul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = *(void *)(a2 + 52);
  a1[1] = *(void *)(a2 + 60);
  a1[2] = *(void *)(a2 + 68);
  a1[3] = *(void *)(a2 + 76);
  a1[4] = *(void *)(a2 + 84);
  a1[5] = *(void *)(a2 + 92);
  a1[6] = *(void *)(a2 + 100);
  a1[7] = *(void *)(a2 + 108);
  a1[8] = *(void *)(a2 + 116);
  if (a4)
  {
    if (a3 <= 0x57)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLBlitCommandEncoder_copyIndirectCommandBuffer_sourceRange_destination_destinationIndex( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x75746C7532407443LL || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (Ct@2ultul), sizeof(Ct@2ultul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 32) = *(void *)(a2 + 80);
  *(void *)(a1 + 40) = *(void *)(a2 + 88);
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLBlitCommandEncoder_fillBuffer_range_pattern4( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) ^ 0x69756C7532407443LL | *(unsigned __int8 *)(a2 + 44))
  {
    int v8 = *a4;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (Ct@2ului), sizeof(Ct@2ului)) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }

  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 80);
  if (a4)
  {
    if (a3 <= 0x2F)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

void DYTraceDecode_MTLBlitCommandEncoder_fillBuffer_range_value( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) ^ 0x62756C7532407443LL | *(unsigned __int8 *)(a2 + 44))
  {
    int v8 = *a4;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (Ct@2ulub), sizeof(Ct@2ulub)) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }

  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 80);
  if (a4)
  {
    if (a3 <= 0x2F)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

void DYTraceDecode_MTLBlitCommandEncoder_fillTexture_level_slice_region_bytes_length( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 ^ 0x36406C756C757443LL | *(void *)(a2 + 44) ^ 0x6C753E623C556C75LL | *(unsigned __int8 *)(a2 + 52))
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (Ctulul@6ulU<b>ul), sizeof(Ctulul@6ulU<b>ul)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 56);
  *(void *)(a1 + 8) = *(void *)(a2 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 72);
  *(void *)(a1 + 24) = *(void *)(a2 + 80);
  __int128 v10 = *(_OWORD *)(a2 + 88);
  __int128 v11 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 32) = v10;
  uint64_t v19 = 100LL;
  *(void *)(a1 + 80) = AppendString_10195((const char **)(a1 + 80), (uint64_t)v8, &v19);
  unint64_t v12 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 88) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLBlitCommandEncoder_fillTexture_level_slice_region_color( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x36406C756C757443LL || *(void *)(a2 + 42) != 0x6434406C753640LL)
    {
      int v9 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v9;
      int v15 = 500;
      int v16 = "memcmp((const char*)bytes + offset, (Ctulul@6ul@4d), sizeof(Ctulul@6ul@4d)) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 8) = *(void *)(a2 + 60);
  *(void *)(a1 + 16) = *(void *)(a2 + 68);
  *(void *)(a1 + 24) = *(void *)(a2 + 76);
  __int128 v10 = *(_OWORD *)(a2 + 84);
  __int128 v11 = *(_OWORD *)(a2 + 116);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 100);
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 32) = v10;
  __int128 v12 = *(_OWORD *)(a2 + 148);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 132);
  *(_OWORD *)(a1 + 96) = v12;
  if (a4)
  {
    if (a3 <= 0x7F)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLBlitCommandEncoder_fillTexture_level_slice_region_color_pixelFormat( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x36406C756C757443LL || *(void *)(a2 + 44) != 0x6C756434406C75LL)
    {
      int v9 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v9;
      int v15 = 500;
      int v16 = "memcmp((const char*)bytes + offset, (Ctulul@6ul@4dul), sizeof(Ctulul@6ul@4dul)) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 8) = *(void *)(a2 + 60);
  *(void *)(a1 + 16) = *(void *)(a2 + 68);
  *(void *)(a1 + 24) = *(void *)(a2 + 76);
  __int128 v10 = *(_OWORD *)(a2 + 84);
  __int128 v11 = *(_OWORD *)(a2 + 116);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 100);
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 32) = v10;
  __int128 v12 = *(_OWORD *)(a2 + 148);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 132);
  *(_OWORD *)(a1 + 96) = v12;
  *(void *)(a1 + 112) = *(void *)(a2 + 164);
  if (a4)
  {
    if (a3 <= 0x87)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLBlitCommandEncoder_getTextureAccessCounters_region_mipLevel_slice_resetCounters_countersBuffer_countersBufferOffset( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x6C756C7536407443LL || *(void *)(a2 + 44) != 0x6C757469756C75LL)
    {
      int v9 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v9;
      int v14 = 500;
      int v15 = "memcmp((const char*)bytes + offset, (Ct@6ulululuitul), sizeof(Ct@6ulululuitul)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 8) = *(void *)(a2 + 60);
  __int128 v10 = *(_OWORD *)(a2 + 68);
  __int128 v11 = *(_OWORD *)(a2 + 100);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 84);
  *(_OWORD *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 16) = v10;
  *(void *)(a1 + 64) = *(void *)(a2 + 116);
  *(void *)(a1 + 72) = *(void *)(a2 + 124);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 132);
  *(void *)(a1 + 80) = *(void *)(a2 + 136);
  *(void *)(a1 + 88) = *(void *)(a2 + 144);
  if (a4)
  {
    if (a3 <= 0x73)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      int v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

void DYTraceDecode_MTLBlitCommandEncoder_optimizeIndirectCommandBuffer_withRange( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 843084867 || *(_DWORD *)(a2 + 39) != 7107890)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Ct@2ul), sizeof(Ct@2ul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 60);
  if (a4)
  {
    if (a3 <= 0x27)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLBlitCommandEncoder_resetTextureAccessCounters_region_mipLevel_slice( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x6C756C7536407443LL || *(void *)(a2 + 39) != 0x6C756C756C7536LL)
    {
      int v9 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v9;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (Ct@6ululul), sizeof(Ct@6ululul)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  __int128 v10 = *(_OWORD *)(a2 + 64);
  __int128 v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 16) = v10;
  *(void *)(a1 + 64) = *(void *)(a2 + 112);
  *(void *)(a1 + 72) = *(void *)(a2 + 120);
  if (a4)
  {
    if (a3 <= 0x5B)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      __int128 v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

void DYTraceDecode_MTLBuffer_parentGPUAddress_parentGPUSize( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970763075 || *(_WORD *)(a2 + 40) != 119)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Cuwuw), sizeof(Cuwuw)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  if (a4)
  {
    if (a3 <= 0x1F)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLBuffer_addDebugMarker_range(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 843076419 || *(_DWORD *)(a2 + 39) != 7107890)
    {
      int v10 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (CS@2ul), sizeof(CS@2ul)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v18 = 16LL;
  *(void *)(a1 + 8) = AppendString_10195((const char **)(a1 + 8), (uint64_t)v8, &v18);
  unint64_t v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)((char *)v8 + v11);
  if (a4)
  {
    if (v11 + 16 > a3)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      __int128 v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

__n128 DYTraceDecode_MTLBuffer_didModifyRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1966227523 || *(_WORD *)(a2 + 40) != 108)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (C@2ul), sizeof(C@2ul)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x1F)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    *(__n128 *)(a1 + 8) = result;
  }

  return result;
}

void DYTraceDecode_MTLBuffer_isAliasable(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_WORD *)(a2 + 36) != 67)
    {
      int v8 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (C), sizeof(C)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *(void *)a1 = *(void *)(a2 + 40);
    if (*(unsigned __int16 *)(a2 + 48) ^ 0x6975 | *(unsigned __int8 *)(a2 + 50))
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (ui), sizeof(ui)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
    if (a3 <= 0x13)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
  }

void DYTraceDecode_MTLBuffer_newLinearTextureWithDescriptor_offset_bytesPerRow_bytesPerImage( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 ^ 0x6C756C756C755543LL | *(unsigned __int8 *)(a2 + 44))
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (CUululul), sizeof(CUululul)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 48);
  uint64_t v19 = 20LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v10);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v10 + 8);
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v10 + 16);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 24) != 116)
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 29) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLBuffer_newRemoteBufferViewForDevice( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 36) ^ 0x7443 | *(unsigned __int8 *)(a2 + 38))
    {
      int v8 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Ct), sizeof(Ct)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *a1 = *(void *)(a2 + 40);
    a1[2] = *(void *)(a2 + 48);
    if (*(_WORD *)(a2 + 56) != 116)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    a1[1] = *(void *)(a2 + 60);
    if (a3 <= 0x1F)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[2] = *(void *)(a2 + 48);
    a1[1] = *(void *)(a2 + 60);
  }

void DYTraceDecode_MTLBuffer_newTiledTextureWithDescriptor_offset_bytesPerRow( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1819628867 || *(_DWORD *)(a2 + 39) != 7107948)
    {
      int v10 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      __int128 v17 = "memcmp((const char*)bytes + offset, (CUulul), sizeof(CUulul)) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v20 = 16LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 16) != 116)
  {
    int v12 = *a4;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    __int128 v17 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }

  unint64_t v13 = (v11 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      __int128 v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

void DYTraceDecode_MTLCaptureManager_notifySubmissionForEyeSPI_iosurface_bounds_submitFlags( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x75643440746C7543LL || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (Cult@4dul), sizeof(Cult@4dul)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  *(void *)(a1 + 16) = *(void *)(a2 + 64);
  __int128 v10 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = v10;
  *(void *)(a1 + 56) = *(void *)(a2 + 104);
  if (a4)
  {
    if (a3 <= 0x4B)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

const char *DYTraceDecode_MTLCommandBuffer_restoreMTLBufferContents(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 36;
  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  uint64_t v6 = 28LL;
  __n128 result = AppendString_10195((const char **)(a1 + 16), a2 + 36, &v6);
  *(void *)(a1 + 16) = result;
  int v5 = (void *)(v3 + ((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL));
  *(void *)(a1 + 24) = *v5;
  *(void *)(a1 + 32) = v5[1];
  return result;
}

void DYTraceDecode_MTLCommandBuffer_accelerationStructureCommandEncoderWithDescriptor( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (unsigned __int16 *)(a2 + 36);
  if (a4 && *v8 ^ 0x5543 | *(unsigned __int8 *)(a2 + 38))
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (CU), sizeof(CU)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v19 = 12LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(unsigned __int16 *)((char *)v8 + v10) != 116)
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLCommandBuffer_commitAndWaitUntilSubmittedWithDeadline( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7828803)
    {
      int v8 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Cuw), sizeof(Cuw)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *(void *)a1 = *(void *)(a2 + 40);
    *(void *)(a1 + 8) = *(void *)(a2 + 48);
    if (*(unsigned __int16 *)(a2 + 56) ^ 0x6975 | *(unsigned __int8 *)(a2 + 58))
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (ui), sizeof(ui)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 60);
    if (a3 <= 0x1B)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 40);
    *(void *)(a1 + 8) = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 60);
  }

void DYTraceDecode_MTLCommandBuffer_computeCommandEncoderWithDispatchType_substreamCount( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970042179 || *(_WORD *)(a2 + 40) != 105)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (Cului), sizeof(Cului)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    *(void *)a1 = *(void *)(a2 + 44);
    *(void *)(a1 + 16) = *(void *)(a2 + 52);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 60);
    if (*(_WORD *)(a2 + 64) != 116)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    *(void *)(a1 + 8) = *(void *)(a2 + 68);
    if (a3 <= 0x27)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      __int128 v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    *(void *)(a1 + 16) = *(void *)(a2 + 52);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 60);
    *(void *)(a1 + 8) = *(void *)(a2 + 68);
  }

void DYTraceDecode_MTLCommandBuffer_encodeDashboardFinalizeForResourceGroup_dashboard_value_forIndex( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) ^ 0x6C756C756C757443LL | *(unsigned __int8 *)(a2 + 44))
  {
    int v8 = *a4;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (Ctululul), sizeof(Ctululul)) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }

  *a1 = *(void *)(a2 + 48);
  a1[1] = *(void *)(a2 + 56);
  a1[2] = *(void *)(a2 + 64);
  a1[3] = *(void *)(a2 + 72);
  a1[4] = *(void *)(a2 + 80);
  if (a4)
  {
    if (a3 <= 0x33)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

void DYTraceDecode_MTLCommandBuffer_encodeDashboardFinalizeForResourceGroup_dashboard_values_indices_count( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "Ctul@%zuul@%zuulul", &v19, &v18);
  size_t v8 = strlen(v7);
  int v9 = &v7[v8 & 0xFFFFFFFFFFFFFFFCLL];
  *a1 = *(void *)(v9 + 4);
  a1[1] = *(void *)(v9 + 12);
  unint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 28;
  a1[2] = *(void *)(v9 + 20);
  a1[3] = &v7[v10];
  uint64_t v11 = v19;
  a1[4] = &v7[8 * v19 + v10];
  unint64_t v12 = v10 + 8 * (v11 + v18);
  a1[5] = *(void *)&v7[v12];
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      v14[0] = v13;
      v14[1] = 500;
      __int128 v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)v14);
    }
  }

void DYTraceDecode_MTLCommandBuffer_encodeSignalEvent_value( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(_DWORD *)(a2 + 36) ^ 0x77757443 | *(unsigned __int8 *)(a2 + 40))
  {
    int v8 = *a4;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    unint64_t v12 = "memcmp((const char*)bytes + offset, (Ctuw), sizeof(Ctuw)) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }

  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  if (a4)
  {
    if (a3 <= 0x1F)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      unint64_t v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

void DYTraceDecode_MTLCommandBuffer_encodeWaitForEvent_value_timeout( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 2004186179 || *(_DWORD *)(a2 + 39) != 6911351)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (Ctuwui), sizeof(Ctuwui)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  *(void *)(a1 + 16) = *(void *)(a2 + 60);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x23)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLCommandBuffer_presentDrawable_afterMinimumDuration( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(_DWORD *)(a2 + 36) != 6583363)
  {
    int v8 = *a4;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (Ctd), sizeof(Ctd)) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }

  *a1 = *(void *)(a2 + 40);
  a1[1] = *(void *)(a2 + 48);
  a1[2] = *(void *)(a2 + 56);
  if (a4)
  {
    if (a3 <= 0x1B)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

void DYTraceDecode_MTLCommandBuffer_sampledComputeCommandEncoderWithDescriptor_programInfoBuffer_capacity( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 ^ 0x6C753E623C555543LL | *(unsigned __int8 *)(a2 + 44))
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (CUU<b>ul), sizeof(CUU<b>ul)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 48);
  uint64_t v19 = 20LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v19);
  *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLCommandQueue_getSPIStats(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_WORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 67)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (C), sizeof(C)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    *(void *)a1 = *(void *)(a2 + 40);
    if (*(_DWORD *)(a2 + 48) ^ 0x3E623C55 | *(unsigned __int8 *)(a2 + 52))
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (U<b>), sizeof(U<b>)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 40);
  }

  uint64_t v17 = 20LL;
  *(void *)(a1 + 8) = AppendString_10195((const char **)(a1 + 8), (uint64_t)v8, &v17);
  if (a4)
  {
    if (((v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

void DYTraceDecode_MTLCommandQueue_setBackgroundGPUPriority( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7107907)
    {
      int v8 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Cul), sizeof(Cul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *(void *)a1 = *(void *)(a2 + 40);
    *(void *)(a1 + 8) = *(void *)(a2 + 48);
    if (*(unsigned __int16 *)(a2 + 56) ^ 0x6975 | *(unsigned __int8 *)(a2 + 58))
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (ui), sizeof(ui)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 60);
    if (a3 <= 0x1B)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 40);
    *(void *)(a1 + 8) = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 60);
  }

void DYTraceDecode_MTLCommandQueue_setBackgroundGPUPriority_offset( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970042179 || *(_WORD *)(a2 + 40) != 115)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (Culus), sizeof(Culus)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    *(void *)a1 = *(void *)(a2 + 44);
    *(void *)(a1 + 8) = *(void *)(a2 + 52);
    *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 60);
    if (*(unsigned __int16 *)(a2 + 64) ^ 0x6975 | *(unsigned __int8 *)(a2 + 66))
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (ui), sizeof(ui)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 68);
    if (a3 <= 0x23)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      __int128 v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    *(void *)(a1 + 8) = *(void *)(a2 + 52);
    *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 60);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 68);
  }

void DYTraceDecode_MTLComputeCommandEncoder_executeCommandsInBuffer_indirectBuffer_indirectBufferOffset( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 != 0x55556C75747443LL)
  {
    int v9 = *a4;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    int v11 = v9;
    int v12 = 500;
    int v13 = "memcmp((const char*)bytes + offset, (CttulUU), sizeof(CttulUU)) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  *(void *)(a1 + 16) = *(void *)(a2 + 60);
  *(void *)(a1 + 24) = *(void *)(a2 + 68);
  uint64_t v16 = 40LL;
  *(void *)(a1 + 40) = AppendString_10195((const char **)(a1 + 40), (uint64_t)v8, &v16);
  *(void *)(a1 + 48) = AppendString_10195((const char **)(a1 + 48), (uint64_t)v8, &v16);
  if (a4)
  {
    if (((v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLComputeCommandEncoder_executeCommandsInBuffer_withRange( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 != 0x556C7532407443LL)
  {
    int v9 = *a4;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    int v11 = v9;
    int v12 = 500;
    int v13 = "memcmp((const char*)bytes + offset, (Ct@2ulU), sizeof(Ct@2ulU)) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 60);
  uint64_t v16 = 40LL;
  *(void *)(a1 + 40) = AppendString_10195((const char **)(a1 + 40), (uint64_t)v8, &v16);
  if (a4)
  {
    if (((v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLComputeCommandEncoder_dispatchThreadgroups_threadsPerThreadgroup( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x7533406C75334043LL || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v9;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (C@3ul@3ul), sizeof(C@3ul@3ul)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  __int128 v10 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 24) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 8) = v10;
  __int128 v11 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 48) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 32) = v11;
  if (a4)
  {
    if (a3 <= 0x43)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      __int128 v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

void DYTraceDecode_MTLComputeCommandEncoder_dispatchThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerThreadgroup( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) ^ 0x6C7533406C757443LL | *(unsigned __int8 *)(a2 + 44))
  {
    int v8 = *a4;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    int v11 = v8;
    int v12 = 500;
    int v13 = "memcmp((const char*)bytes + offset, (Ctul@3ul), sizeof(Ctul@3ul)) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }

  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  *(void *)(a1 + 16) = *(void *)(a2 + 64);
  __int128 v9 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 40) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = v9;
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLComputeCommandEncoder_setBufferOffset_atIndex( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970042179 || *(_WORD *)(a2 + 40) != 108)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Culul), sizeof(Culul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  if (a4)
  {
    if (a3 <= 0x1F)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLComputeCommandEncoder_setBufferOffset_attributeStride_atIndex( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) != 0x6C756C756C7543LL)
  {
    int v8 = *a4;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (Cululul), sizeof(Cululul)) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }

  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  a1[3] = *(void *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x27)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

void DYTraceDecode_MTLComputeCommandEncoder_setBuffers_offsets_attributeStrides_withRange( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "C@%zutU<b>U<b>@2ul", &v16);
  size_t v8 = strlen(v7);
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *(void *)a1 = *(void *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  *(void *)(a1 + 8) = &v7[v9];
  unint64_t v17 = v9 + 8 * v16;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v7, (uint64_t *)&v17);
  *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v7, (uint64_t *)&v17);
  unint64_t v10 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v7[v10];
  if (a4)
  {
    if (v10 + 16 > a3)
    {
      int v11 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      v12[0] = v11;
      v12[1] = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)v12);
    }
  }

void DYTraceDecode_MTLComputeCommandEncoder_setBytes_length_atIndex( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x756C753E623C5543LL || *(_WORD *)(a2 + 44) != 108)
    {
      int v10 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (CU<b>ulul), sizeof(CU<b>ulul)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  uint64_t v18 = 20LL;
  *(void *)(a1 + 8) = AppendString_10195((const char **)(a1 + 8), (uint64_t)v8, &v18);
  unint64_t v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 16) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11 + 8);
  if (a4)
  {
    if (v11 + 16 > a3)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      __int128 v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

void DYTraceDecode_MTLComputeCommandEncoder_setBytes_length_attributeStride_atIndex( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x756C753E623C5543LL || *(_DWORD *)(a2 + 44) != 7107948)
    {
      int v10 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (CU<b>ululul), sizeof(CU<b>ululul)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  uint64_t v18 = 20LL;
  *(void *)(a1 + 8) = AppendString_10195((const char **)(a1 + 8), (uint64_t)v8, &v18);
  unint64_t v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 16) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11 + 8);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 16);
  if (a4)
  {
    if (v11 + 24 > a3)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      __int128 v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

void DYTraceDecode_MTLComputeCommandEncoder_setSamplerState_lodMinClamp_lodMaxClamp_atIndex( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1717990467 || *(_DWORD *)(a2 + 39) != 7107942)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Ctfful), sizeof(Ctfful)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x27)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLComputeCommandEncoder_setSamplerStates_lodMinClamps_lodMaxClamps_withRange( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "C@%zut@%zuf@%zuf@2ul", &v21, &v20, &v19);
  size_t v8 = strlen(v7);
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *(void *)a1 = *(void *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  *(void *)(a1 + 8) = &v7[v9];
  uint64_t v10 = v20;
  unint64_t v11 = v9 + 8 * v21;
  int v12 = &v7[4 * v20 + v11];
  *(void *)(a1 + 32) = &v7[v11];
  *(void *)(a1 + 40) = v12;
  unint64_t v13 = v11 + 4 * (v10 + v19);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)&v7[v13];
  if (a4)
  {
    if (v13 + 16 > a3)
    {
      int v14 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      v15[0] = v14;
      v15[1] = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)v15);
    }
  }

__n128 DYTraceDecode_MTLComputeCommandEncoder_setStageInRegion( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1966489667 || *(_WORD *)(a2 + 40) != 108)
    {
      int v9 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v9;
      int v15 = 500;
      __int128 v16 = "memcmp((const char*)bytes + offset, (C@6ul), sizeof(C@6ul)) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }

    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    __int128 v11 = *(_OWORD *)(a2 + 68);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 84);
    *(_OWORD *)(a1 + 24) = v11;
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x3F)
    {
      int v12 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v12;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    __int128 v13 = *(_OWORD *)(a2 + 68);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 84);
    *(_OWORD *)(a1 + 24) = v13;
    *(__n128 *)(a1 + 8) = result;
  }

  return result;
}

void DYTraceDecode_MTLCounterSampleBuffer_resolveCounterRange( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1966227523 || *(_WORD *)(a2 + 40) != 108)
    {
      int v10 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      int v15 = "memcmp((const char*)bytes + offset, (C@2ul), sizeof(C@2ul)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }

    *(void *)a1 = *(void *)(a2 + 44);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 52);
    if (*(_DWORD *)(a2 + 68) ^ 0x3E623C55 | *(unsigned __int8 *)(a2 + 72))
    {
      int v11 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v11;
      int v14 = 500;
      int v15 = "memcmp((const char*)bytes + offset, (U<b>), sizeof(U<b>)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 52);
  }

  uint64_t v18 = 40LL;
  *(void *)(a1 + 8) = AppendString_10195((const char **)(a1 + 8), (uint64_t)v8, &v18);
  if (a4)
  {
    if (((v18 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      int v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

void DYTraceDecode_MTLDevice_compileVisibleFunction_withDescriptor_completionHandler( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x74557443 | *(unsigned __int8 *)(a2 + 40))
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (CtUt), sizeof(CtUt)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 16) = *(void *)(a2 + 52);
  uint64_t v19 = 24LL;
  *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLDevice_newBufferWithDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 != 5592387)
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (CUU), sizeof(CUU)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v19 = 12LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v19);
  *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(_WORD *)((char *)v8 + v10) != 116)
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLDevice_newSharedEvent(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 6911299)
    {
      int v8 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Cui), sizeof(Cui)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *(void *)a1 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 48);
    if (*(_WORD *)(a2 + 52) != 116)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *(void *)(a1 + 8) = *(void *)(a2 + 56);
    if (a3 <= 0x1B)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 48);
    *(void *)(a1 + 8) = *(void *)(a2 + 56);
  }

void DYTraceDecode_MTLDevice_newSharedEventWithHandle(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1769305155 || *(_DWORD *)(a2 + 39) != 7828841)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (Ctuiuw), sizeof(Ctuiuw)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 16) = *(void *)(a2 + 52);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 24) = *(void *)(a2 + 64);
  if (a4)
  {
    if (*(_WORD *)(a2 + 72) != 116)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    *(void *)(a1 + 8) = *(void *)(a2 + 76);
    if (a3 <= 0x2F)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      __int128 v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 76);
  }

void DYTraceDecode_MTLDevice_newSharedEventWithMachPort( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1969845571 || *(_WORD *)(a2 + 40) != 119)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (Cuiuw), sizeof(Cuiuw)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    *(void *)a1 = *(void *)(a2 + 44);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 52);
    *(void *)(a1 + 16) = *(void *)(a2 + 56);
    if (*(_WORD *)(a2 + 64) != 116)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    *(void *)(a1 + 8) = *(void *)(a2 + 68);
    if (a3 <= 0x27)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      __int128 v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 52);
    *(void *)(a1 + 16) = *(void *)(a2 + 56);
    *(void *)(a1 + 8) = *(void *)(a2 + 68);
  }

void DYTraceDecode_MTLDevice_setPluginData(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1648121155 || *(_WORD *)(a2 + 40) != 62)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (CU<b>), sizeof(CU<b>)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v17 = 16LL;
  *(void *)(a1 + 8) = AppendString_10195((const char **)(a1 + 8), (uint64_t)v8, &v17);
  if (a4)
  {
    if (((v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      __int128 v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

void DYTraceDecode_MTLDevice_compileVisibleFunction_withDescriptor_destinationBinaryArchive_error( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1951757379 || *(_WORD *)(a2 + 40) != 116)
    {
      int v10 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (CtUtt), sizeof(CtUtt)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  uint64_t v18 = 24LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v18);
  unint64_t v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 8);
  if (a4)
  {
    if (v11 + 16 > a3)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      __int128 v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

void DYTraceDecode_MTLDevice_copyShaderCacheToPath(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (unsigned __int16 *)(a2 + 36);
  if (a4 && *v8 ^ 0x5343 | *(unsigned __int8 *)(a2 + 38))
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (CS), sizeof(CS)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v19 = 12LL;
  *(void *)(a1 + 8) = AppendString_10195((const char **)(a1 + 8), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(unsigned __int16 *)((char *)v8 + v10) ^ 0x6975 | *((unsigned __int8 *)v8 + v10 + 2))
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (ui), sizeof(ui)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 6) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 4 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLDevice_deserializeInstanceAccelerationStructure_fromBytes_primitiveAccelerationStructures_withDescriptor( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 ^ 0x55553E623C557443LL | *(unsigned __int8 *)(a2 + 44))
  {
    int v9 = *a4;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    int v11 = v9;
    int v12 = 500;
    int v13 = "memcmp((const char*)bytes + offset, (CtU<b>UU), sizeof(CtU<b>UU)) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }

  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  uint64_t v16 = 28LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v16);
  *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, &v16);
  *(void *)(a1 + 32) = AppendString_10195((const char **)(a1 + 32), (uint64_t)v8, &v16);
  if (a4)
  {
    if (((v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLDevice_deserializePrimitiveAccelerationStructure_fromBytes_withDescriptor( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 != 0x553E623C557443LL)
  {
    int v9 = *a4;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    int v11 = v9;
    int v12 = 500;
    int v13 = "memcmp((const char*)bytes + offset, (CtU<b>U), sizeof(CtU<b>U)) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  uint64_t v16 = 24LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v16);
  *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, &v16);
  if (a4)
  {
    if (((v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

__n128 DYTraceDecode_MTLDevice_heapBufferSizeAndAlignWithLength_options( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970042179 || *(_WORD *)(a2 + 40) != 108)
    {
      int v9 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v9;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (Culul), sizeof(Culul)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }

    *(void *)a1 = *(void *)(a2 + 44);
    *(void *)(a1 + 24) = *(void *)(a2 + 52);
    *(void *)(a1 + 32) = *(void *)(a2 + 60);
    if (*(_DWORD *)(a2 + 68) ^ 0x6C753240 | *(unsigned __int8 *)(a2 + 72))
    {
      int v10 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (@2ul), sizeof(@2ul)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }

    __n128 result = *(__n128 *)(a2 + 76);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x37)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      __int128 v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    *(void *)(a1 + 24) = *(void *)(a2 + 52);
    *(void *)(a1 + 32) = *(void *)(a2 + 60);
    __n128 result = *(__n128 *)(a2 + 76);
    *(__n128 *)(a1 + 8) = result;
  }

  return result;
}

__n128 DYTraceDecode_MTLDevice_heapTextureSizeAndAlignWithDescriptor( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (unsigned __int16 *)(a2 + 36);
  if (a4 && *v8 ^ 0x5543 | *(unsigned __int8 *)(a2 + 38))
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (CU), sizeof(CU)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v19 = 12LL;
  *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4)
  {
    if (*(_DWORD *)((char *)v8 + v10) ^ 0x6C753240 | *((unsigned __int8 *)v8 + v10 + 4))
    {
      int v11 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v11;
      int v15 = 500;
      __int128 v16 = "memcmp((const char*)bytes + offset, (@2ul), sizeof(@2ul)) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }

    __n128 result = *(__n128 *)((char *)v8 + v10 + 8);
    *(__n128 *)(a1 + 8) = result;
    if (v10 + 24 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

  else
  {
    __n128 result = *(__n128 *)((char *)v8 + v10 + 8);
    *(__n128 *)(a1 + 8) = result;
  }

  return result;
}

void DYTraceDecode_MTLDevice_loadDynamicLibrariesForComputeDescriptor_options_error( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1819628867 || *(_WORD *)(a2 + 40) != 116)
    {
      int v10 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v10;
      int v15 = 500;
      __int128 v16 = "memcmp((const char*)bytes + offset, (CUult), sizeof(CUult)) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  unint64_t v19 = 16LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v19);
  unint64_t v11 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 16) != 85)
  {
    int v12 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v12;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (U), sizeof(U)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v19 = (v11 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = AppendString_10195((const char **)(a1 + 8), (uint64_t)v8, (uint64_t *)&v19);
  if (a4)
  {
    if (((v19 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLDevice_loadDynamicLibrariesForFunction_insertLibraries_options_error( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x6C75553E623C5543LL || *(_WORD *)(a2 + 44) != 116)
    {
      int v10 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v10;
      int v15 = 500;
      __int128 v16 = "memcmp((const char*)bytes + offset, (CU<b>Uult), sizeof(CU<b>Uult)) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  unint64_t v19 = 20LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v19);
  *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, (uint64_t *)&v19);
  unint64_t v11 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v11 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 16) != 85)
  {
    int v12 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v12;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (U), sizeof(U)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v19 = (v11 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = AppendString_10195((const char **)(a1 + 8), (uint64_t)v8, (uint64_t *)&v19);
  if (a4)
  {
    if (((v19 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLDevice_minLinearTextureBaseAddressAlignmentForDescriptor( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (unsigned __int16 *)(a2 + 36);
  if (a4 && *v8 ^ 0x5543 | *(unsigned __int8 *)(a2 + 38))
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (CU), sizeof(CU)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v19 = 12LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(unsigned __int16 *)((char *)v8 + v10) ^ 0x6C75 | *((unsigned __int8 *)v8 + v10 + 2))
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (ul), sizeof(ul)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 6) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLDevice_newAccelerationStructureWithBuffer_offset( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) ^ 0x6C757443 | *(unsigned __int8 *)(a2 + 40))
    {
      int v8 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Ctul), sizeof(Ctul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *a1 = *(void *)(a2 + 44);
    a1[2] = *(void *)(a2 + 52);
    a1[3] = *(void *)(a2 + 60);
    if (*(_WORD *)(a2 + 68) != 116)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    a1[1] = *(void *)(a2 + 72);
    if (a3 <= 0x2B)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  else
  {
    *a1 = *(void *)(a2 + 44);
    a1[2] = *(void *)(a2 + 52);
    a1[3] = *(void *)(a2 + 60);
    a1[1] = *(void *)(a2 + 72);
  }

void DYTraceDecode_MTLDevice_newAccelerationStructureWithBuffer_offset_resourceIndex( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1819636803 || *(_DWORD *)(a2 + 39) != 7828844)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (Ctuluw), sizeof(Ctuluw)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  *a1 = *(void *)(a2 + 44);
  a1[2] = *(void *)(a2 + 52);
  a1[3] = *(void *)(a2 + 60);
  a1[4] = *(void *)(a2 + 68);
  if (a4)
  {
    if (*(_WORD *)(a2 + 76) != 116)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    a1[1] = *(void *)(a2 + 80);
    if (a3 <= 0x33)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      __int128 v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    a1[1] = *(void *)(a2 + 80);
  }

void DYTraceDecode_MTLDevice_newAccelerationStructureWithSize_resourceIndex( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970042179 || *(_WORD *)(a2 + 40) != 119)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (Culuw), sizeof(Culuw)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    *a1 = *(void *)(a2 + 44);
    a1[2] = *(void *)(a2 + 52);
    a1[3] = *(void *)(a2 + 60);
    if (*(_WORD *)(a2 + 68) != 116)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    a1[1] = *(void *)(a2 + 72);
    if (a3 <= 0x2B)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      __int128 v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    *a1 = *(void *)(a2 + 44);
    a1[2] = *(void *)(a2 + 52);
    a1[3] = *(void *)(a2 + 60);
    a1[1] = *(void *)(a2 + 72);
  }

void DYTraceDecode_MTLDevice_newAccelerationStructureWithSize_withDescriptor( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x556C7543 | *(unsigned __int8 *)(a2 + 40))
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (CulU), sizeof(CulU)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 16) = *(void *)(a2 + 52);
  uint64_t v19 = 24LL;
  *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(_WORD *)((char *)v8 + v10) != 116)
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLDevice_newBufferWithBytes_length_options_gpuAddress( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x756C753E623C5543LL || *(_DWORD *)(a2 + 44) != 7828844)
    {
      int v10 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      __int128 v17 = "memcmp((const char*)bytes + offset, (CU<b>ululuw), sizeof(CU<b>ululuw)) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  uint64_t v20 = 20LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 8);
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v11 + 16);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 24) != 116)
  {
    int v12 = *a4;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    __int128 v17 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }

  unint64_t v13 = (v11 + 29) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      __int128 v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

void DYTraceDecode_MTLDevice_newBufferWithBytesNoCopy_length_options_deallocator( uint64_t a1, void *a2, unint64_t a3, int *a4)
{
  int v8 = (void *)((char *)a2 + 36);
  if (a4)
  {
    if (*v8 != 0x756C753E623C5543LL || *(void *)((char *)a2 + 39) != 0x746C756C753E62LL)
    {
      int v10 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      __int128 v17 = "memcmp((const char*)bytes + offset, (CU<b>ulult), sizeof(CU<b>ulult)) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

  *(void *)a1 = a2[6];
  uint64_t v20 = 20LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 8);
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v11 + 16);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 24) != 116)
  {
    int v12 = *a4;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    __int128 v17 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }

  unint64_t v13 = (v11 + 29) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      __int128 v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

void DYTraceDecode_MTLDevice_newBufferWithLength_options_gpuAddress( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) != 0x77756C756C7543LL)
  {
    int v8 = *a4;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    int v11 = v8;
    int v12 = 500;
    unint64_t v13 = "memcmp((const char*)bytes + offset, (Cululuw), sizeof(Cululuw)) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }

  *a1 = *(void *)(a2 + 44);
  a1[2] = *(void *)(a2 + 52);
  a1[3] = *(void *)(a2 + 60);
  a1[4] = *(void *)(a2 + 68);
  if (a4)
  {
    if (*(_WORD *)(a2 + 76) != 116)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      unint64_t v13 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    a1[1] = *(void *)(a2 + 80);
    if (a3 <= 0x33)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      unint64_t v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  else
  {
    a1[1] = *(void *)(a2 + 80);
  }

void DYTraceDecode_MTLDevice_newComputePipelineStateWithDescriptor_options_completionHandler( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1819628867 || *(_WORD *)(a2 + 40) != 116)
    {
      int v10 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      __int128 v17 = "memcmp((const char*)bytes + offset, (CUult), sizeof(CUult)) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v20 = 16LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 16) != 116)
  {
    int v12 = *a4;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    __int128 v17 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }

  unint64_t v13 = (v11 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      __int128 v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

void DYTraceDecode_MTLDevice_newComputePipelineStateWithFunction_completionHandler( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7631939)
    {
      int v8 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      unint64_t v13 = "memcmp((const char*)bytes + offset, (Ctt), sizeof(Ctt)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *a1 = *(void *)(a2 + 40);
    a1[2] = *(void *)(a2 + 48);
    a1[3] = *(void *)(a2 + 56);
    if (*(_WORD *)(a2 + 64) != 116)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      unint64_t v13 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    a1[1] = *(void *)(a2 + 68);
    if (a3 <= 0x27)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      unint64_t v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[2] = *(void *)(a2 + 48);
    a1[3] = *(void *)(a2 + 56);
    a1[1] = *(void *)(a2 + 68);
  }

void DYTraceDecode_MTLDevice_newComputePipelineStateWithFunction_options_completionHandler( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1819636803 || *(_WORD *)(a2 + 40) != 116)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (Ctult), sizeof(Ctult)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  *a1 = *(void *)(a2 + 44);
  a1[2] = *(void *)(a2 + 52);
  a1[3] = *(void *)(a2 + 60);
  a1[4] = *(void *)(a2 + 68);
  if (a4)
  {
    if (*(_WORD *)(a2 + 76) != 116)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    a1[1] = *(void *)(a2 + 80);
    if (a3 <= 0x33)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      __int128 v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    a1[1] = *(void *)(a2 + 80);
  }

void DYTraceDecode_MTLDevice_newDefaultLibraryWithBundle_error( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1648121155 || *(_DWORD *)(a2 + 39) != 7618146)
    {
      int v10 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      __int128 v17 = "memcmp((const char*)bytes + offset, (CU<b>t), sizeof(CU<b>t)) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v20 = 16LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 8) != 116)
  {
    int v12 = *a4;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    __int128 v17 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }

  unint64_t v13 = (v11 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      __int128 v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

void DYTraceDecode_MTLDevice_newDynamicLibraryWithURL_options_error( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 ^ 0x746C753E623C5543LL | *(unsigned __int8 *)(a2 + 44))
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (CU<b>ult), sizeof(CU<b>ult)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 48);
  uint64_t v19 = 20LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v10);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v10 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 16) != 116)
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLDevice_newFunctionWithGLCoreIR_functionType( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 != 0x6C753E623C5543LL)
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (CU<b>ul), sizeof(CU<b>ul)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v19 = 16LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLDevice_newFunctionWithGLCoreIR_inputsDescription_functionType( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x623C553E623C5543LL || *(_DWORD *)(a2 + 44) != 7107902)
    {
      int v10 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      __int128 v17 = "memcmp((const char*)bytes + offset, (CU<b>U<b>ul), sizeof(CU<b>U<b>ul)) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  uint64_t v20 = 20LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v20);
  *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 8) != 116)
  {
    int v12 = *a4;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    __int128 v17 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }

  unint64_t v13 = (v11 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      __int128 v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

void DYTraceDecode_MTLDevice_newLibraryWithCIFilters_imageFilterFunctionInfo_error( uint64_t a1, void *a2, unint64_t a3, int *a4)
{
  int v8 = (void *)((char *)a2 + 36);
  if (a4)
  {
    if (*v8 != 0x623C553E623C5543LL || *(void *)((char *)a2 + 39) != 0x743E623C553E62LL)
    {
      int v10 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      __int128 v17 = "memcmp((const char*)bytes + offset, (CU<b>U<b>t), sizeof(CU<b>U<b>t)) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

  *(void *)a1 = a2[6];
  uint64_t v20 = 20LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v20);
  *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 8) != 116)
  {
    int v12 = *a4;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    __int128 v17 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }

  unint64_t v13 = (v11 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      __int128 v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

void DYTraceDecode_MTLDevice_newRenderPipelineStateWithMeshDescriptor_options_reflection_error( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x3E623C556C755543LL || *(_WORD *)(a2 + 44) != 116)
    {
      int v10 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v10;
      int v17 = 500;
      __int128 v18 = "memcmp((const char*)bytes + offset, (CUulU<b>t), sizeof(CUulU<b>t)) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  unint64_t v21 = 20LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  unint64_t v21 = v11 + 8;
  *(void *)(a1 + 32) = AppendString_10195((const char **)(a1 + 32), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v12);
  if (a4 && *(_WORD *)((char *)v8 + v12 + 8) != 116)
  {
    int v13 = *a4;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v13;
    int v17 = 500;
    __int128 v18 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }

  unint64_t v14 = (v12 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      int v15 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

void DYTraceDecode_MTLDevice_newResourceGroupFromResources_count( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "C@%zutul", &v19);
  size_t v8 = strlen(v7);
  *a1 = *(void *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  a1[2] = &v7[v9];
  unint64_t v10 = v9 + 8 * v19;
  a1[3] = *(void *)&v7[v10];
  if (a4 && *(_WORD *)&v7[v10 + 8] != 116)
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  a1[1] = *(void *)&v7[v12];
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLDevice_newTextureLayoutWithDescriptor_isHeapOrBufferBacked( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x69755543 | *(unsigned __int8 *)(a2 + 40))
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (CUui), sizeof(CUui)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v19 = 16LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 4) != 116)
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 9) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLDevice_newTextureWithBytesNoCopy_length_descriptor_deallocator( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x556C753E623C5543LL || *(_WORD *)(a2 + 44) != 116)
    {
      int v10 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v10;
      int v17 = 500;
      __int128 v18 = "memcmp((const char*)bytes + offset, (CU<b>ulUt), sizeof(CU<b>ulUt)) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  unint64_t v21 = 20LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  unint64_t v21 = v11 + 8;
  *(void *)(a1 + 32) = AppendString_10195((const char **)(a1 + 32), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v12);
  if (a4 && *(_WORD *)((char *)v8 + v12 + 8) != 116)
  {
    int v13 = *a4;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v13;
    int v17 = 500;
    __int128 v18 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }

  unint64_t v14 = (v12 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      int v15 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

void DYTraceDecode_MTLDevice_newTextureWithDescriptor_iosurface_plane( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1968526659 || *(_WORD *)(a2 + 40) != 108)
    {
      int v10 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      int v17 = "memcmp((const char*)bytes + offset, (CUUul), sizeof(CUUul)) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v20 = 16LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v20);
  *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 8) != 116)
  {
    int v12 = *a4;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    int v17 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }

  unint64_t v13 = (v11 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

void DYTraceDecode_MTLDevice_newTiledTextureWithBytesNoCopy_length_deallocator_descriptor_offset_bytesPerRow( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x746C753E623C5543LL || *(void *)(a2 + 42) != 0x6C756C7555746CLL)
    {
      int v10 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v10;
      int v17 = 500;
      __int128 v18 = "memcmp((const char*)bytes + offset, (CU<b>ultUulul), sizeof(CU<b>ultUulul)) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

  *(void *)a1 = *(void *)(a2 + 52);
  unint64_t v21 = 24LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 8);
  unint64_t v21 = v11 + 16;
  *(void *)(a1 + 40) = AppendString_10195((const char **)(a1 + 40), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 48) = *(void *)((char *)v8 + v12);
  *(void *)(a1 + 56) = *(void *)((char *)v8 + v12 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v12 + 16) != 116)
  {
    int v13 = *a4;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v13;
    int v17 = 500;
    __int128 v18 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }

  unint64_t v14 = (v12 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      int v15 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

void DYTraceDecode_MTLDevice_newTiledTextureWithBytesNoCopy_length_descriptor_offset_bytesPerRow( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x556C753E623C5543LL || *(void *)(a2 + 41) != 0x6C756C75556C75LL)
    {
      int v10 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v10;
      int v17 = 500;
      __int128 v18 = "memcmp((const char*)bytes + offset, (CU<b>ulUulul), sizeof(CU<b>ulUulul)) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

  *(void *)a1 = *(void *)(a2 + 52);
  unint64_t v21 = 24LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11);
  unint64_t v21 = v11 + 8;
  *(void *)(a1 + 32) = AppendString_10195((const char **)(a1 + 32), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v12);
  *(void *)(a1 + 48) = *(void *)((char *)v8 + v12 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v12 + 16) != 116)
  {
    int v13 = *a4;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v13;
    int v17 = 500;
    __int128 v18 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }

  unint64_t v14 = (v12 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      int v15 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

void DYTraceDecode_MTLDevice_serializeStructType_version( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  if (a4 && *v8 != 0x69753E623C5543LL)
  {
    int v9 = *a4;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    int v13 = v9;
    int v14 = 500;
    int v15 = "memcmp((const char*)bytes + offset, (CU<b>ui), sizeof(CU<b>ui)) == 0";
    GTError_addError(a4, (uint64_t)&v13);
  }

  *(void *)a1 = *(void *)(a2 + 44);
  unint64_t v18 = 16LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v18);
  unint64_t v10 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)((char *)v8 + v10);
  if (a4 && *(_DWORD *)((char *)v8 + v10 + 4) ^ 0x3E623C55 | *((unsigned __int8 *)v8 + v10 + 8))
  {
    int v11 = *a4;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    int v13 = v11;
    int v14 = 500;
    int v15 = "memcmp((const char*)bytes + offset, (U<b>), sizeof(U<b>)) == 0";
    GTError_addError(a4, (uint64_t)&v13);
  }

  unint64_t v18 = v10 + 12;
  *(void *)(a1 + 8) = AppendString_10195((const char **)(a1 + 8), (uint64_t)v8, (uint64_t *)&v18);
  if (a4)
  {
    if (((v18 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      int v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

__n128 DYTraceDecode_MTLDevice_sparseTileSizeWithTextureType_pixelFormat_sampleCount( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) != 0x6C756C756C7543LL)
  {
    int v8 = *a4;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    int v12 = v8;
    int v13 = 500;
    int v14 = "memcmp((const char*)bytes + offset, (Cululul), sizeof(Cululul)) == 0";
    GTError_addError(a4, (uint64_t)&v12);
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 32) = *(void *)(a2 + 52);
  *(void *)(a1 + 40) = *(void *)(a2 + 60);
  *(void *)(a1 + 48) = *(void *)(a2 + 68);
  if (a4)
  {
    if (*(_DWORD *)(a2 + 76) ^ 0x6C753340 | *(unsigned __int8 *)(a2 + 80))
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (@3ul), sizeof(@3ul)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    __n128 result = *(__n128 *)(a2 + 84);
    *(void *)(a1 + 24) = *(void *)(a2 + 100);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x47)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    __n128 result = *(__n128 *)(a2 + 84);
    *(void *)(a1 + 24) = *(void *)(a2 + 100);
    *(__n128 *)(a1 + 8) = result;
  }

  return result;
}

__n128 DYTraceDecode_MTLDevice_sparseTileSizeWithTextureType_pixelFormat_sampleCount_sparsePageSize( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x756C756C756C7543LL || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v9;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (Culululul), sizeof(Culululul)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 32) = *(void *)(a2 + 56);
  *(void *)(a1 + 40) = *(void *)(a2 + 64);
  *(void *)(a1 + 48) = *(void *)(a2 + 72);
  *(void *)(a1 + 56) = *(void *)(a2 + 80);
  if (a4)
  {
    if (*(_DWORD *)(a2 + 88) ^ 0x6C753340 | *(unsigned __int8 *)(a2 + 92))
    {
      int v10 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (@3ul), sizeof(@3ul)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }

    __n128 result = *(__n128 *)(a2 + 96);
    *(void *)(a1 + 24) = *(void *)(a2 + 112);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x53)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      __int128 v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  else
  {
    __n128 result = *(__n128 *)(a2 + 96);
    *(void *)(a1 + 24) = *(void *)(a2 + 112);
    *(__n128 *)(a1 + 8) = result;
  }

  return result;
}

void DYTraceDecode_MTLDynamicLibrary_serializeToURL_error( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1648121155 || *(_DWORD *)(a2 + 39) != 7618146)
    {
      int v10 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      __int128 v17 = "memcmp((const char*)bytes + offset, (CU<b>t), sizeof(CU<b>t)) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v20 = 16LL;
  *(void *)(a1 + 8) = AppendString_10195((const char **)(a1 + 8), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 16) = *(void *)((char *)v8 + v11);
  if (a4 && *(unsigned __int16 *)((char *)v8 + v11 + 8) ^ 0x6975 | *((unsigned __int8 *)v8 + v11 + 10))
  {
    int v12 = *a4;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    __int128 v17 = "memcmp((const char*)bytes + offset, (ui), sizeof(ui)) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }

  unint64_t v13 = (v11 + 14) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 4 > a3)
    {
      int v14 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      __int128 v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

void DYTraceDecode_MTLFunction_setDescriptor_library(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 != 7624003)
  {
    int v9 = *a4;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    int v12 = v9;
    int v13 = 500;
    int v14 = "memcmp((const char*)bytes + offset, (CUt), sizeof(CUt)) == 0";
    GTError_addError(a4, (uint64_t)&v12);
  }

  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v17 = 12LL;
  *(void *)(a1 + 8) = AppendString_10195((const char **)(a1 + 8), (uint64_t)v8, &v17);
  unint64_t v10 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 16) = *(void *)((char *)v8 + v10);
  if (a4)
  {
    if (v10 + 8 > a3)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

void DYTraceDecode_MTLFunction_newArgumentEncoderWithBufferIndex_pipelineLibrary( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) ^ 0x746C7543 | *(unsigned __int8 *)(a2 + 40))
    {
      int v8 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Cult), sizeof(Cult)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *a1 = *(void *)(a2 + 44);
    a1[2] = *(void *)(a2 + 52);
    a1[3] = *(void *)(a2 + 60);
    if (*(_WORD *)(a2 + 68) != 116)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    a1[1] = *(void *)(a2 + 72);
    if (a3 <= 0x2B)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  else
  {
    *a1 = *(void *)(a2 + 44);
    a1[2] = *(void *)(a2 + 52);
    a1[3] = *(void *)(a2 + 60);
    a1[1] = *(void *)(a2 + 72);
  }

void DYTraceDecode_MTLFunction_newArgumentEncoderWithBufferIndex_reflection_pipelineLibrary( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 ^ 0x743E623C556C7543LL | *(unsigned __int8 *)(a2 + 44))
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (CulU<b>t), sizeof(CulU<b>t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 16) = *(void *)(a2 + 56);
  uint64_t v19 = 28LL;
  *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLFunction_newFunctionWithPluginData_bitcodeType( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 != 0x62753E623C5543LL)
  {
    int v9 = *a4;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v9;
    int v16 = 500;
    __int128 v17 = "memcmp((const char*)bytes + offset, (CU<b>ub), sizeof(CU<b>ub)) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }

  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v20 = 16LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v20);
  uint64_t v10 = v20;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)v8 + v20);
  unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(_WORD *)((char *)v8 + v11 + 4) != 116)
  {
    int v12 = *a4;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    __int128 v17 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }

  unint64_t v13 = (v11 + 9) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      __int128 v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

void DYTraceDecode_MTLHeap_newAccelerationStructureWithDescriptor_offset( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x6C755543 | *(unsigned __int8 *)(a2 + 40))
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (CUul), sizeof(CUul)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v19 = 16LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    int v16 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      int v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLHeap_newAccelerationStructureWithSize_offset( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970042179 || *(_WORD *)(a2 + 40) != 108)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (Culul), sizeof(Culul)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    *a1 = *(void *)(a2 + 44);
    a1[2] = *(void *)(a2 + 52);
    a1[3] = *(void *)(a2 + 60);
    if (*(_WORD *)(a2 + 68) != 116)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    a1[1] = *(void *)(a2 + 72);
    if (a3 <= 0x2B)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    *a1 = *(void *)(a2 + 44);
    a1[2] = *(void *)(a2 + 52);
    a1[3] = *(void *)(a2 + 60);
    a1[1] = *(void *)(a2 + 72);
  }

void DYTraceDecode_MTLHeap_newBufferWithLength_options_offset( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) != 0x6C756C756C7543LL)
  {
    int v8 = *a4;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    int v11 = v8;
    int v12 = 500;
    int v13 = "memcmp((const char*)bytes + offset, (Cululul), sizeof(Cululul)) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }

  *a1 = *(void *)(a2 + 44);
  a1[2] = *(void *)(a2 + 52);
  a1[3] = *(void *)(a2 + 60);
  a1[4] = *(void *)(a2 + 68);
  if (a4)
  {
    if (*(_WORD *)(a2 + 76) != 116)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    a1[1] = *(void *)(a2 + 80);
    if (a3 <= 0x33)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  else
  {
    a1[1] = *(void *)(a2 + 80);
  }

void DYTraceDecode_MTLIOCommandBuffer_loadBuffer_offset_size_sourceHandle_sourceHandleOffset( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x75746C756C757443LL || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Ctulultul), sizeof(Ctulultul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = *(void *)(a2 + 48);
  a1[1] = *(void *)(a2 + 56);
  a1[2] = *(void *)(a2 + 64);
  a1[3] = *(void *)(a2 + 72);
  a1[4] = *(void *)(a2 + 80);
  a1[5] = *(void *)(a2 + 88);
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLIOCommandBuffer_loadBytes_size_sourceHandle_sourceHandleOffset( uint64_t a1, void *a2, unint64_t a3, int *a4)
{
  int v8 = (void *)((char *)a2 + 36);
  if (a4)
  {
    if (*v8 != 0x746C753E623C5543LL || *(void *)((char *)a2 + 39) != 0x6C75746C753E62LL)
    {
      int v10 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (CU<b>ultul), sizeof(CU<b>ultul)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  *(void *)a1 = a2[6];
  uint64_t v18 = 20LL;
  *(void *)(a1 + 8) = AppendString_10195((const char **)(a1 + 8), (uint64_t)v8, &v18);
  unint64_t v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 16) = *(void *)((char *)v8 + v11);
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v11 + 8);
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11 + 16);
  if (a4)
  {
    if (v11 + 24 > a3)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      __int128 v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

void DYTraceDecode_MTLIOCommandBuffer_loadTexture_slice_level_size_sourceBytesPerRow_sourceBytesPerImage_destinationOrigin_sourceHandle_sourceHandleOffset( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x33406C756C757443LL && *(void *)(a2 + 44) == 0x33406C756C756C75LL;
    if (!v8 || *(void *)(a2 + 50) != 0x6C75746C753340LL)
    {
      int v10 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v10;
      int v15 = 500;
      __int128 v16 = "memcmp((const char*)bytes + offset, (Ctulul@3ululul@3ultul), sizeof(Ctulul@3ululul@3ultul)) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

  *(void *)a1 = *(void *)(a2 + 60);
  *(void *)(a1 + 8) = *(void *)(a2 + 68);
  *(void *)(a1 + 16) = *(void *)(a2 + 76);
  *(void *)(a1 + 24) = *(void *)(a2 + 84);
  __int128 v11 = *(_OWORD *)(a2 + 92);
  *(void *)(a1 + 48) = *(void *)(a2 + 108);
  *(_OWORD *)(a1 + 32) = v11;
  *(void *)(a1 + 56) = *(void *)(a2 + 116);
  *(void *)(a1 + 64) = *(void *)(a2 + 124);
  __int128 v12 = *(_OWORD *)(a2 + 132);
  *(void *)(a1 + 88) = *(void *)(a2 + 148);
  *(_OWORD *)(a1 + 72) = v12;
  *(void *)(a1 + 96) = *(void *)(a2 + 156);
  *(void *)(a1 + 104) = *(void *)(a2 + 164);
  if (a4)
  {
    if (a3 <= 0x87)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLIndirectRenderCommand_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x746C756C756C7543LL && *(void *)(a2 + 44) == 0x756C756C75746C75LL;
    if (!v8 || *(void *)(a2 + 51) != 0x6C756C75746C75LL)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (Cululultultululultulul), sizeof(Cululultultululultulul)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  *a1 = *(void *)(a2 + 60);
  a1[1] = *(void *)(a2 + 68);
  a1[2] = *(void *)(a2 + 76);
  a1[3] = *(void *)(a2 + 84);
  a1[4] = *(void *)(a2 + 92);
  a1[5] = *(void *)(a2 + 100);
  a1[6] = *(void *)(a2 + 108);
  a1[7] = *(void *)(a2 + 116);
  a1[8] = *(void *)(a2 + 124);
  a1[9] = *(void *)(a2 + 132);
  a1[10] = *(void *)(a2 + 140);
  a1[11] = *(void *)(a2 + 148);
  a1[12] = *(void *)(a2 + 156);
  if (a4)
  {
    if (a3 <= 0x7F)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

void DYTraceDecode_MTLIndirectRenderCommand_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x746C756C756C7543LL || *(void *)(a2 + 44) != 0x6C756C6C756C75LL)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Cululultulullul), sizeof(Cululultulullul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = *(void *)(a2 + 52);
  a1[1] = *(void *)(a2 + 60);
  a1[2] = *(void *)(a2 + 68);
  a1[3] = *(void *)(a2 + 76);
  a1[4] = *(void *)(a2 + 84);
  a1[5] = *(void *)(a2 + 92);
  a1[6] = *(void *)(a2 + 100);
  a1[7] = *(void *)(a2 + 108);
  a1[8] = *(void *)(a2 + 116);
  if (a4)
  {
    if (a3 <= 0x57)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLIndirectRenderCommand_drawMeshThreadgroups_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x7533406C75334043LL || *(void *)(a2 + 42) != 0x6C7533406C7533LL)
    {
      int v9 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v9;
      int v15 = 500;
      __int128 v16 = "memcmp((const char*)bytes + offset, (C@3ul@3ul@3ul), sizeof(C@3ul@3ul@3ul)) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

  *(void *)a1 = *(void *)(a2 + 52);
  __int128 v10 = *(_OWORD *)(a2 + 60);
  *(void *)(a1 + 24) = *(void *)(a2 + 76);
  *(_OWORD *)(a1 + 8) = v10;
  __int128 v11 = *(_OWORD *)(a2 + 84);
  *(void *)(a1 + 48) = *(void *)(a2 + 100);
  *(_OWORD *)(a1 + 32) = v11;
  __int128 v12 = *(_OWORD *)(a2 + 108);
  *(void *)(a1 + 72) = *(void *)(a2 + 124);
  *(_OWORD *)(a1 + 56) = v12;
  if (a4)
  {
    if (a3 <= 0x5F)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLIndirectRenderCommand_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x746C756C756C7543LL && *(void *)(a2 + 44) == 0x75746C756C756C75LL;
    if (!v8 || *(_DWORD *)(a2 + 52) != 7107948)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (Cululultululultulul), sizeof(Cululultululultulul)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  *a1 = *(void *)(a2 + 56);
  a1[1] = *(void *)(a2 + 64);
  a1[2] = *(void *)(a2 + 72);
  a1[3] = *(void *)(a2 + 80);
  a1[4] = *(void *)(a2 + 88);
  a1[5] = *(void *)(a2 + 96);
  a1[6] = *(void *)(a2 + 104);
  a1[7] = *(void *)(a2 + 112);
  a1[8] = *(void *)(a2 + 120);
  a1[9] = *(void *)(a2 + 128);
  a1[10] = *(void *)(a2 + 136);
  if (a4)
  {
    if (a3 <= 0x6B)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

void DYTraceDecode_MTLIndirectRenderCommand_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x756C756C756C7543LL || *(_DWORD *)(a2 + 44) != 7107948)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Cululululul), sizeof(Cululululul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = *(void *)(a2 + 48);
  a1[1] = *(void *)(a2 + 56);
  a1[2] = *(void *)(a2 + 64);
  a1[3] = *(void *)(a2 + 72);
  a1[4] = *(void *)(a2 + 80);
  a1[5] = *(void *)(a2 + 88);
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLIntersectionFunctionTable_setOpaqueCurveIntersectionFunctionWithSignature_withRange( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) != 0x6C7532406C7543LL)
  {
    int v8 = *a4;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (Cul@2ul), sizeof(Cul@2ul)) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 52);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 60);
  if (a4)
  {
    if (a3 <= 0x27)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

void DYTraceDecode_MTLLateEvalEvent_waitUntilSignaledValue_timeoutMS( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970763075 || *(_WORD *)(a2 + 40) != 119)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (Cuwuw), sizeof(Cuwuw)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    *(void *)a1 = *(void *)(a2 + 44);
    *(void *)(a1 + 8) = *(void *)(a2 + 52);
    *(void *)(a1 + 16) = *(void *)(a2 + 60);
    if (*(unsigned __int16 *)(a2 + 68) ^ 0x6975 | *(unsigned __int8 *)(a2 + 70))
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (ui), sizeof(ui)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 72);
    if (a3 <= 0x27)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      __int128 v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    *(void *)(a1 + 8) = *(void *)(a2 + 52);
    *(void *)(a1 + 16) = *(void *)(a2 + 60);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 72);
  }

void DYTraceDecode_MTLLibrary_type(void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_WORD *)(a2 + 36) != 67)
    {
      int v8 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v8;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (C), sizeof(C)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *a1 = *(void *)(a2 + 40);
    if (*(unsigned __int16 *)(a2 + 48) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 50))
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (ul), sizeof(ul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    a1[1] = *(void *)(a2 + 52);
    if (a3 <= 0x17)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  else
  {
    *a1 = *(void *)(a2 + 40);
    a1[1] = *(void *)(a2 + 52);
  }

void DYTraceDecode_MTLLibrary_newExternFunctionWithName( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (unsigned __int16 *)(a2 + 36);
  if (a4 && *v8 ^ 0x5343 | *(unsigned __int8 *)(a2 + 38))
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (CS), sizeof(CS)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 40);
  uint64_t v19 = 12LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(unsigned __int16 *)((char *)v8 + v10) != 116)
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLLibrary_newFunctionWithName_constantValues_completionHandler( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 != 0x743E623C555343LL)
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (CSU<b>t), sizeof(CSU<b>t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v19 = 16LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v19);
  *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLLibrary_newFunctionWithName_constantValues_pipelineLibrary_completionHandler( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4 && *v8 ^ 0x74743E623C555343LL | *(unsigned __int8 *)(a2 + 44))
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (CSU<b>tt), sizeof(CSU<b>tt)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 48);
  uint64_t v19 = 20LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v19);
  *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v10);
  *(void *)(a1 + 40) = *(void *)((char *)v8 + v10 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 16) != 116)
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLPipelineLibrary_newComputePipelineDescriptorWithName_error( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 != 7623491)
  {
    int v9 = *a4;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    int v13 = v9;
    int v14 = 500;
    int v15 = "memcmp((const char*)bytes + offset, (CSt), sizeof(CSt)) == 0";
    GTError_addError(a4, (uint64_t)&v13);
  }

  *(void *)a1 = *(void *)(a2 + 40);
  unint64_t v18 = 12LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v18);
  unint64_t v10 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 24) = *(void *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 85)
  {
    int v11 = *a4;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    int v13 = v11;
    int v14 = 500;
    int v15 = "memcmp((const char*)bytes + offset, (U), sizeof(U)) == 0";
    GTError_addError(a4, (uint64_t)&v13);
  }

  unint64_t v18 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = AppendString_10195((const char **)(a1 + 8), (uint64_t)v8, (uint64_t *)&v18);
  if (a4)
  {
    if (((v18 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      int v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

void DYTraceDecode_MTLRasterizationRateMap_mapScreenToPhysicalCoordinates_forLayer( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1714569283 || *(_DWORD *)(a2 + 39) != 7107942)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (C@2ful), sizeof(C@2ful)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    *a1 = *(void *)(a2 + 44);
    a1[3] = *(void *)(a2 + 52);
    a1[1] = *(void *)(a2 + 60);
    if (*(_DWORD *)(a2 + 68) != 6697536)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (@2f), sizeof(@2f)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    a1[2] = *(void *)(a2 + 72);
    if (a3 <= 0x2B)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    *a1 = *(void *)(a2 + 44);
    a1[3] = *(void *)(a2 + 52);
    a1[1] = *(void *)(a2 + 60);
    a1[2] = *(void *)(a2 + 72);
  }

__n128 DYTraceDecode_MTLRasterizationRateMap_physicalSizeForLayer( uint64_t a1, __n128 *a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (a2[2].n128_u32[1] != 7107907)
    {
      int v8 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v8;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (Cul), sizeof(Cul)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    *(void *)a1 = a2[2].n128_u64[1];
    *(void *)(a1 + 32) = a2[3].n128_u64[0];
    if (a2[3].n128_u32[2] ^ 0x6C753340 | a2[3].n128_u8[12])
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (@3ul), sizeof(@3ul)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    __n128 result = a2[4];
    *(void *)(a1 + 24) = a2[5].n128_u64[0];
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x33)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    *(void *)a1 = a2[2].n128_u64[1];
    *(void *)(a1 + 32) = a2[3].n128_u64[0];
    __n128 result = a2[4];
    *(void *)(a1 + 24) = a2[5].n128_u64[0];
    *(__n128 *)(a1 + 8) = result;
  }

  return result;
}

__n128 DYTraceDecode_MTLRenderCommandEncoder_dispatchThreadsPerTile( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1966293059 || *(_WORD *)(a2 + 40) != 108)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (C@3ul), sizeof(C@3ul)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    *(void *)(a1 + 24) = *(void *)(a2 + 68);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x27)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    *(void *)(a1 + 24) = *(void *)(a2 + 68);
    *(__n128 *)(a1 + 8) = result;
  }

  return result;
}

void DYTraceDecode_MTLRenderCommandEncoder_dispatchThreadsPerTile_inRegion( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x7536406C75334043LL || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v9;
      int v15 = 500;
      __int128 v16 = "memcmp((const char*)bytes + offset, (C@3ul@6ul), sizeof(C@3ul@6ul)) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  __int128 v10 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 24) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 8) = v10;
  __int128 v11 = *(_OWORD *)(a2 + 80);
  __int128 v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 32) = v11;
  if (a4)
  {
    if (a3 <= 0x5B)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLRenderCommandEncoder_dispatchThreadsPerTile_inRegion_withRenderTargetArrayIndex( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x7536406C75334043LL || *(_DWORD *)(a2 + 44) != 6911340)
    {
      int v9 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v9;
      int v15 = 500;
      __int128 v16 = "memcmp((const char*)bytes + offset, (C@3ul@6ului), sizeof(C@3ul@6ului)) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  __int128 v10 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 24) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 8) = v10;
  __int128 v11 = *(_OWORD *)(a2 + 80);
  __int128 v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 32) = v11;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 128);
  if (a4)
  {
    if (a3 <= 0x5F)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLRenderCommandEncoder_drawIndexedPatches_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_indirectBuffer_indirectBufferOffset( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x75746C75746C7543LL || *(void *)(a2 + 41) != 0x6C75746C75746CLL)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Cultultultul), sizeof(Cultultultul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = *(void *)(a2 + 52);
  a1[1] = *(void *)(a2 + 60);
  a1[2] = *(void *)(a2 + 68);
  a1[3] = *(void *)(a2 + 76);
  a1[4] = *(void *)(a2 + 84);
  a1[5] = *(void *)(a2 + 92);
  a1[6] = *(void *)(a2 + 100);
  a1[7] = *(void *)(a2 + 108);
  if (a4)
  {
    if (a3 <= 0x4F)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLRenderCommandEncoder_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x746C756C756C7543LL && *(void *)(a2 + 44) == 0x756C756C75746C75LL;
    if (!v8 || *(_WORD *)(a2 + 52) != 108)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (Cululultultululul), sizeof(Cululultultululul)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  *a1 = *(void *)(a2 + 56);
  a1[1] = *(void *)(a2 + 64);
  a1[2] = *(void *)(a2 + 72);
  a1[3] = *(void *)(a2 + 80);
  a1[4] = *(void *)(a2 + 88);
  a1[5] = *(void *)(a2 + 96);
  a1[6] = *(void *)(a2 + 104);
  a1[7] = *(void *)(a2 + 112);
  a1[8] = *(void *)(a2 + 120);
  a1[9] = *(void *)(a2 + 128);
  if (a4)
  {
    if (a3 <= 0x63)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      __int128 v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

void DYTraceDecode_MTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset( void *a1, void *a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)((char *)a2 + 36) != 0x746C756C756C7543LL || *(void *)((char *)a2 + 39) != 0x6C75746C756C75LL)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Cululultul), sizeof(Cululultul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = a2[6];
  a1[1] = a2[7];
  a1[2] = a2[8];
  a1[3] = a2[9];
  a1[4] = a2[10];
  a1[5] = a2[11];
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x746C756C756C7543LL || *(void *)(a2 + 41) != 0x6C756C75746C75LL)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Cululultulul), sizeof(Cululultulul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = *(void *)(a2 + 52);
  a1[1] = *(void *)(a2 + 60);
  a1[2] = *(void *)(a2 + 68);
  a1[3] = *(void *)(a2 + 76);
  a1[4] = *(void *)(a2 + 84);
  a1[5] = *(void *)(a2 + 92);
  a1[6] = *(void *)(a2 + 100);
  if (a4)
  {
    if (a3 <= 0x47)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLRenderCommandEncoder_drawIndexedPrimitives_indexType_indexBuffer_indexBufferOffset_indirectBuffer_indirectBufferOffset( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x6C75746C756C7543LL || *(_DWORD *)(a2 + 44) != 7107956)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Culultultul), sizeof(Culultultul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = *(void *)(a2 + 48);
  a1[1] = *(void *)(a2 + 56);
  a1[2] = *(void *)(a2 + 64);
  a1[3] = *(void *)(a2 + 72);
  a1[4] = *(void *)(a2 + 80);
  a1[5] = *(void *)(a2 + 88);
  a1[6] = *(void *)(a2 + 96);
  if (a4)
  {
    if (a3 <= 0x43)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLRenderCommandEncoder_drawMeshThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x6C7533406C757443LL || *(void *)(a2 + 41) != 0x6C7533406C7533LL)
    {
      int v9 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v9;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (Ctul@3ul@3ul), sizeof(Ctul@3ul@3ul)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 8) = *(void *)(a2 + 60);
  *(void *)(a1 + 16) = *(void *)(a2 + 68);
  __int128 v10 = *(_OWORD *)(a2 + 76);
  *(void *)(a1 + 40) = *(void *)(a2 + 92);
  *(_OWORD *)(a1 + 24) = v10;
  __int128 v11 = *(_OWORD *)(a2 + 100);
  *(void *)(a1 + 64) = *(void *)(a2 + 116);
  *(_OWORD *)(a1 + 48) = v11;
  if (a4)
  {
    if (a3 <= 0x57)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      __int128 v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

void DYTraceDecode_MTLRenderCommandEncoder_drawPatches_patchIndexBuffer_patchIndexBufferOffset_indirectBuffer_indirectBufferOffset( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x75746C75746C7543LL || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Cultultul), sizeof(Cultultul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = *(void *)(a2 + 48);
  a1[1] = *(void *)(a2 + 56);
  a1[2] = *(void *)(a2 + 64);
  a1[3] = *(void *)(a2 + 72);
  a1[4] = *(void *)(a2 + 80);
  a1[5] = *(void *)(a2 + 88);
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLRenderCommandEncoder_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x746C756C756C7543LL || *(void *)(a2 + 43) != 0x6C756C756C7574LL)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Cululultululul), sizeof(Cululultululul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = *(void *)(a2 + 52);
  a1[1] = *(void *)(a2 + 60);
  a1[2] = *(void *)(a2 + 68);
  a1[3] = *(void *)(a2 + 76);
  a1[4] = *(void *)(a2 + 84);
  a1[5] = *(void *)(a2 + 92);
  a1[6] = *(void *)(a2 + 100);
  a1[7] = *(void *)(a2 + 108);
  if (a4)
  {
    if (a3 <= 0x4F)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLRenderCommandEncoder_drawPrimitives_indirectBuffer_indirectBufferOffset( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1953264963 || *(_DWORD *)(a2 + 39) != 7107956)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Cultul), sizeof(Cultul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  a1[3] = *(void *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x27)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLRenderCommandEncoder_drawPrimitives_vertexStart_vertexCount_instanceCount( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x756C756C756C7543LL || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Culululul), sizeof(Culululul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = *(void *)(a2 + 48);
  a1[1] = *(void *)(a2 + 56);
  a1[2] = *(void *)(a2 + 64);
  a1[3] = *(void *)(a2 + 72);
  a1[4] = *(void *)(a2 + 80);
  if (a4)
  {
    if (a3 <= 0x33)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLRenderCommandEncoder_memoryBarrierWithResources_count_afterStages_beforeStages( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "C@%zutululul", &v16);
  size_t v8 = strlen(v7);
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *a1 = *(void *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  a1[1] = &v7[v9];
  unint64_t v10 = v9 + 8 * v16;
  a1[2] = *(void *)&v7[v10];
  a1[3] = *(void *)&v7[v10 + 8];
  a1[4] = *(void *)&v7[v10 + 16];
  if (a4)
  {
    if (v10 + 24 > a3)
    {
      int v11 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      v12[0] = v11;
      v12[1] = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)v12);
    }
  }

void DYTraceDecode_MTLRenderCommandEncoder_setAlphaTestReferenceValue( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 36) ^ 0x6643 | *(unsigned __int8 *)(a2 + 38))
    {
      int v8 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v8;
      int v11 = 500;
      int v12 = "memcmp((const char*)bytes + offset, (Cf), sizeof(Cf)) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }

    *(void *)a1 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
    if (a3 <= 0xF)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
  }

void DYTraceDecode_MTLRenderCommandEncoder_setBlendColorRed_green_blue_alpha( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1717986883 || *(_WORD *)(a2 + 40) != 102)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (Cffff), sizeof(Cffff)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 64);
  if (a4)
  {
    if (a3 <= 0x1F)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLRenderCommandEncoder_setColorResolveTexture_slice_depthPlane_level_atIndex( void *a1, void *a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)((char *)a2 + 36) != 0x6C756C756C757443LL || *(void *)((char *)a2 + 39) != 0x6C756C756C756CLL)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (Ctulululul), sizeof(Ctulululul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = a2[6];
  a1[1] = a2[7];
  a1[2] = a2[8];
  a1[3] = a2[9];
  a1[4] = a2[10];
  a1[5] = a2[11];
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLRenderCommandEncoder_setColorResolveTexture_slice_depthPlane_level_yInvert_atIndex( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x6C756C756C757443LL || *(void *)(a2 + 41) != 0x6C7569756C756CLL)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (Ctulululuiul), sizeof(Ctulululuiul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 8) = *(void *)(a2 + 60);
  *(void *)(a1 + 16) = *(void *)(a2 + 68);
  *(void *)(a1 + 24) = *(void *)(a2 + 76);
  *(void *)(a1 + 32) = *(void *)(a2 + 84);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 92);
  *(void *)(a1 + 40) = *(void *)(a2 + 96);
  if (a4)
  {
    if (a3 <= 0x43)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLRenderCommandEncoder_setDepthBias_slopeScale_clamp( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(_DWORD *)(a2 + 36) ^ 0x66666643 | *(unsigned __int8 *)(a2 + 40))
  {
    int v8 = *a4;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (Cfff), sizeof(Cfff)) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 60);
  if (a4)
  {
    if (a3 <= 0x1B)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

void DYTraceDecode_MTLRenderCommandEncoder_setDepthResolveTexture_slice_depthPlane_level_yInvert( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x6C756C756C757443LL || *(void *)(a2 + 39) != 0x69756C756C756CLL)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (Ctululului), sizeof(Ctululului)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  *(void *)(a1 + 16) = *(void *)(a2 + 64);
  *(void *)(a1 + 24) = *(void *)(a2 + 72);
  *(void *)(a1 + 32) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 88);
  if (a4)
  {
    if (a3 <= 0x37)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLRenderCommandEncoder_setMeshBuffers_offsets_withRange( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "C@%zutU<b>@2ul", &v16);
  size_t v8 = strlen(v7);
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *(void *)a1 = *(void *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  *(void *)(a1 + 8) = &v7[v9];
  unint64_t v17 = v9 + 8 * v16;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v7, (uint64_t *)&v17);
  unint64_t v10 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v7[v10];
  if (a4)
  {
    if (v10 + 16 > a3)
    {
      int v11 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      v12[0] = v11;
      v12[1] = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)v12);
    }
  }

void DYTraceDecode_MTLRenderCommandEncoder_setPrimitiveRestartEnabled_index( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1969845571 || *(_WORD *)(a2 + 40) != 108)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (Cuiul), sizeof(Cuiul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 8) = *(void *)(a2 + 56);
  if (a4)
  {
    if (a3 <= 0x1B)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLRenderCommandEncoder_setStencilFrontReferenceValue_backReferenceValue( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1969845571 || *(_WORD *)(a2 + 40) != 105)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (Cuiui), sizeof(Cuiui)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 56);
  if (a4)
  {
    if (a3 <= 0x17)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

__n128 DYTraceDecode_MTLRenderCommandEncoder_setViewport( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) ^ 0x64364043 | *(unsigned __int8 *)(a2 + 40))
    {
      int v8 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v8;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (C@6d), sizeof(C@6d)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }

    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    __int128 v10 = *(_OWORD *)(a2 + 68);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 84);
    *(_OWORD *)(a1 + 24) = v10;
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x3F)
    {
      int v11 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v11;
      int v14 = 500;
      __int128 v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  else
  {
    *(void *)a1 = *(void *)(a2 + 44);
    __n128 result = *(__n128 *)(a2 + 52);
    __int128 v12 = *(_OWORD *)(a2 + 68);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 84);
    *(_OWORD *)(a1 + 24) = v12;
    *(__n128 *)(a1 + 8) = result;
  }

  return result;
}

void DYTraceDecode_MTLResourceStateCommandEncoder_copyMappingStateFromTexture_mipLevel_slice_toBuffer_offset_numTiles( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x75746C756C757443LL || *(_DWORD *)(a2 + 44) != 7107948)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (Ctulultulul), sizeof(Ctulultulul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = *(void *)(a2 + 48);
  a1[1] = *(void *)(a2 + 56);
  a1[2] = *(void *)(a2 + 64);
  a1[3] = *(void *)(a2 + 72);
  a1[4] = *(void *)(a2 + 80);
  a1[5] = *(void *)(a2 + 88);
  a1[6] = *(void *)(a2 + 96);
  if (a4)
  {
    if (a3 <= 0x43)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLResourceStateCommandEncoder_updateTextureMapping_mode_region_mipLevel_slice( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x6C7536406C757443LL || *(void *)(a2 + 41) != 0x6C756C756C7536LL)
    {
      int v9 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v9;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (Ctul@6ululul), sizeof(Ctul@6ululul)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 8) = *(void *)(a2 + 60);
  *(void *)(a1 + 16) = *(void *)(a2 + 68);
  __int128 v10 = *(_OWORD *)(a2 + 76);
  __int128 v11 = *(_OWORD *)(a2 + 92);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 40) = v11;
  *(_OWORD *)(a1 + 24) = v10;
  *(void *)(a1 + 72) = *(void *)(a2 + 124);
  *(void *)(a1 + 80) = *(void *)(a2 + 132);
  if (a4)
  {
    if (a3 <= 0x67)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      __int128 v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

void DYTraceDecode_MTLResourceStateCommandEncoder_updateTextureMappings_mode_regions_mipLevels_slices_numRegions( uint64_t a1, void *a2, unint64_t a3, int *a4)
{
  int v8 = (void *)((char *)a2 + 36);
  if (a4)
  {
    BOOL v9 = *v8 == 0x3E623C556C757443LL && *(void *)((char *)a2 + 44) == 0x3E623C553E623C55LL;
    if (!v9 || *(void *)((char *)a2 + 47) != 0x6C753E623C553ELL)
    {
      int v11 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v11;
      int v15 = 500;
      __int128 v16 = "memcmp((const char*)bytes + offset, (CtulU<b>U<b>U<b>ul), sizeof(CtulU<b>U<b>U<b>ul)) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

  *(void *)a1 = a2[7];
  *(void *)(a1 + 8) = a2[8];
  *(void *)(a1 + 16) = a2[9];
  uint64_t v19 = 44LL;
  *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, &v19);
  *(void *)(a1 + 32) = AppendString_10195((const char **)(a1 + 32), (uint64_t)v8, &v19);
  *(void *)(a1 + 40) = AppendString_10195((const char **)(a1 + 40), (uint64_t)v8, &v19);
  unint64_t v12 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 48) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MTLTexture_saveSlice_level_zPlane_normalize_blitOption_toPath( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x756C756C756C7543LL || *(void *)(a2 + 41) != 0x536C7569756C75LL)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (CulululuiulS), sizeof(CulululuiulS)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 8) = *(void *)(a2 + 60);
  *(void *)(a1 + 16) = *(void *)(a2 + 68);
  *(void *)(a1 + 24) = *(void *)(a2 + 76);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 84);
  *(void *)(a1 + 32) = *(void *)(a2 + 88);
  uint64_t v17 = 60LL;
  *(void *)(a1 + 40) = AppendString_10195((const char **)(a1 + 40), (uint64_t)v8, &v17);
  if (a4)
  {
    if (((v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

void DYTraceDecode_MTLTexture_getBytes_bytesPerRow_fromRegion_mipmapLevel( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x406C753E623C5543LL || *(void *)(a2 + 42) != 0x6C756C7536406CLL)
    {
      int v10 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      uint64_t v17 = "memcmp((const char*)bytes + offset, (CU<b>ul@6ulul), sizeof(CU<b>ul@6ulul)) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

  *(void *)a1 = *(void *)(a2 + 52);
  uint64_t v20 = 24LL;
  *(void *)(a1 + 8) = AppendString_10195((const char **)(a1 + 8), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 16) = *(void *)((char *)v8 + v11);
  __int128 v12 = *(_OWORD *)((char *)v8 + v11 + 24);
  __int128 v13 = *(_OWORD *)((char *)v8 + v11 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)((char *)v8 + v11 + 8);
  *(_OWORD *)(a1 + 56) = v13;
  *(_OWORD *)(a1 + 40) = v12;
  *(void *)(a1 + 72) = *(void *)((char *)v8 + v11 + 56);
  if (a4)
  {
    if (v11 + 64 > a3)
    {
      int v14 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

void DYTraceDecode_MTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x7532406C756C7543LL || *(void *)(a2 + 42) != 0x6C7532406C7532LL)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (Culul@2ul@2ul), sizeof(Culul@2ul@2ul)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 16) = *(void *)(a2 + 60);
  *(void *)(a1 + 24) = *(void *)(a2 + 68);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 92);
  if (a4)
  {
    if (*(_WORD *)(a2 + 108) != 116)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    *(void *)(a1 + 8) = *(void *)(a2 + 112);
    if (a3 <= 0x53)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 112);
  }

void DYTraceDecode_MTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_resourceIndex( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x7532406C756C7543LL || *(void *)(a2 + 44) != 0x77756C7532406CLL)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (Culul@2ul@2uluw), sizeof(Culul@2ul@2uluw)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 16) = *(void *)(a2 + 60);
  *(void *)(a1 + 24) = *(void *)(a2 + 68);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 92);
  *(void *)(a1 + 64) = *(void *)(a2 + 108);
  if (a4)
  {
    if (*(_WORD *)(a2 + 116) != 116)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    *(void *)(a1 + 8) = *(void *)(a2 + 120);
    if (a3 <= 0x5B)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 120);
  }

void DYTraceDecode_MTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x7532406C756C7543LL && *(void *)(a2 + 44) == 0x7534406C7532406CLL;
    if (!v8 || *(_WORD *)(a2 + 52) != 98)
    {
      int v10 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (Culul@2ul@2ul@4ub), sizeof(Culul@2ul@2ul@4ub)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  *(void *)a1 = *(void *)(a2 + 56);
  *(void *)(a1 + 16) = *(void *)(a2 + 64);
  *(void *)(a1 + 24) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 112);
  if (a4)
  {
    if (*(_WORD *)(a2 + 116) != 116)
    {
      int v11 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v11;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }

    *(void *)(a1 + 8) = *(void *)(a2 + 120);
    if (a3 <= 0x5B)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      __int128 v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 120);
  }

void DYTraceDecode_MTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle_resourceIndex( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x7532406C756C7543LL && *(void *)(a2 + 44) == 0x7534406C7532406CLL;
    if (!v8 || *(_DWORD *)(a2 + 52) != 7828834)
    {
      int v10 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (Culul@2ul@2ul@4ubuw), sizeof(Culul@2ul@2ul@4ubuw)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  *(void *)a1 = *(void *)(a2 + 56);
  *(void *)(a1 + 16) = *(void *)(a2 + 64);
  *(void *)(a1 + 24) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 112);
  *(void *)(a1 + 64) = *(void *)(a2 + 116);
  if (a4)
  {
    if (*(_WORD *)(a2 + 124) != 116)
    {
      int v11 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v11;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }

    *(void *)(a1 + 8) = *(void *)(a2 + 128);
    if (a3 <= 0x63)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      __int128 v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 128);
  }

void DYTraceDecode_MTLTexture_replaceRegion_mipmapLevel_withBytes_bytesPerRow( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x556C756C75364043LL || *(void *)(a2 + 42) != 0x6C753E623C556CLL)
    {
      int v10 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      __int128 v17 = "memcmp((const char*)bytes + offset, (C@6ululU<b>ul), sizeof(C@6ululU<b>ul)) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

  *(void *)a1 = *(void *)(a2 + 52);
  __int128 v11 = *(_OWORD *)(a2 + 60);
  __int128 v12 = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 92);
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 8) = v11;
  *(void *)(a1 + 56) = *(void *)(a2 + 108);
  uint64_t v20 = 80LL;
  *(void *)(a1 + 64) = AppendString_10195((const char **)(a1 + 64), (uint64_t)v8, &v20);
  unint64_t v13 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 72) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      __int128 v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

void DYTraceDecode_MTLVideoCommandEncoder_generateMotionVectorsForTexture_previousTexture_resultBuffer_bufferOffset( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1953788995 || *(_DWORD *)(a2 + 39) != 7107956)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      unint64_t v13 = "memcmp((const char*)bytes + offset, (Ctttul), sizeof(Ctttul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  a1[3] = *(void *)(a2 + 68);
  a1[4] = *(void *)(a2 + 76);
  if (a4)
  {
    if (a3 <= 0x2F)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      unint64_t v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MTLVisibleFunctionTable_setFunctions_withRange( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 843076931 || *(_DWORD *)(a2 + 39) != 7107890)
    {
      int v10 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v10;
      int v14 = 500;
      __int128 v15 = "memcmp((const char*)bytes + offset, (CU@2ul), sizeof(CU@2ul)) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v18 = 16LL;
  *(void *)(a1 + 8) = AppendString_10195((const char **)(a1 + 8), (uint64_t)v8, &v18);
  unint64_t v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)((char *)v8 + v11);
  if (a4)
  {
    if (v11 + 16 > a3)
    {
      int v12 = *a4;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v13 = v12;
      int v14 = 500;
      __int128 v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }

void DYTraceDecode_NSHMDMetalSession_initWithMetalDevice_deviceReference_hmdName( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x53557443 | *(unsigned __int8 *)(a2 + 40))
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (CtUS), sizeof(CtUS)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(void *)(a1 + 16) = *(void *)(a2 + 52);
  uint64_t v19 = 24LL;
  *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, &v19);
  *(void *)(a1 + 32) = AppendString_10195((const char **)(a1 + 32), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(_WORD *)((char *)v8 + v10) != 116)
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MPSPlugin_newCNNConvolutionWithDescriptor_dataSource_fullyConnected( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x69555543 | *(unsigned __int8 *)(a2 + 40))
  {
    int v9 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v9;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (CUUi), sizeof(CUUi)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  *(void *)a1 = *(void *)(a2 + 44);
  uint64_t v19 = 16LL;
  *(void *)(a1 + 16) = AppendString_10195((const char **)(a1 + 16), (uint64_t)v8, &v19);
  *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, &v19);
  unint64_t v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 4) != 116)
  {
    int v11 = *a4;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    int v14 = v11;
    int v15 = 500;
    __int128 v16 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }

  unint64_t v12 = (v10 + 9) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      int v13 = *a4;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v14 = v13;
      int v15 = 500;
      __int128 v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }

void DYTraceDecode_MPSPlugin_newCNNNeuronWithNeuronType_neuronParameterA_neuronParameterB_neuronParameterC( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1717987651 || *(_WORD *)(a2 + 40) != 102)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (Cifff), sizeof(Cifff)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 64);
  if (a4)
  {
    if (*(_WORD *)(a2 + 68) != 116)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    *(void *)(a1 + 8) = *(void *)(a2 + 72);
    if (a3 <= 0x2B)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 72);
  }

void DYTraceDecode_MPSPlugin_newCNNNeuronWithNeuronType_neuronParameterAArray_count( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1968531779 || *(_WORD *)(a2 + 40) != 108)
    {
      int v10 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v10;
      int v16 = 500;
      __int128 v17 = "memcmp((const char*)bytes + offset, (CiUul), sizeof(CiUul)) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

  *(void *)a1 = *(void *)(a2 + 44);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 52);
  uint64_t v20 = 20LL;
  *(void *)(a1 + 24) = AppendString_10195((const char **)(a1 + 24), (uint64_t)v8, &v20);
  unint64_t v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 32) = *(void *)((char *)v8 + v11);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 8) != 116)
  {
    int v12 = *a4;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v12;
    int v16 = 500;
    __int128 v17 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }

  unint64_t v13 = (v11 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      int v14 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      __int128 v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

void DYTraceDecode_MPSPlugin_newMatrixMultiplicationWithTransposeLeft_transposeRight_resultRows_resultColumns_interiorColumns_alpha_beta( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x756C756C75696943LL || *(_DWORD *)(a2 + 44) != 6579308)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (Ciiulululdd), sizeof(Ciiulululdd)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 24) = *(void *)(a2 + 64);
  *(void *)(a1 + 32) = *(void *)(a2 + 72);
  *(void *)(a1 + 40) = *(void *)(a2 + 80);
  *(void *)(a1 + 48) = *(void *)(a2 + 88);
  *(void *)(a1 + 56) = *(void *)(a2 + 96);
  if (a4)
  {
    if (*(_WORD *)(a2 + 104) != 116)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      int v14 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    *(void *)(a1 + 8) = *(void *)(a2 + 108);
    if (a3 <= 0x4F)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      int v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 108);
  }

void DYTraceDecode_MPSPlugin_newMatrixVectorMultiplicationWithTranspose_rows_columns_alpha_beta( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) ^ 0x64646C756C756943LL | *(unsigned __int8 *)(a2 + 44))
  {
    int v8 = *a4;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    int v11 = v8;
    int v12 = 500;
    int v13 = "memcmp((const char*)bytes + offset, (Ciululdd), sizeof(Ciululdd)) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }

  *(void *)a1 = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 24) = *(void *)(a2 + 60);
  *(void *)(a1 + 32) = *(void *)(a2 + 68);
  *(void *)(a1 + 40) = *(void *)(a2 + 76);
  *(void *)(a1 + 48) = *(void *)(a2 + 84);
  if (a4)
  {
    if (*(_WORD *)(a2 + 92) != 116)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      int v13 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }

    *(void *)(a1 + 8) = *(void *)(a2 + 96);
    if (a3 <= 0x43)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      int v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 96);
  }

void DYTraceDecode_MPSPlugin_newCNNPoolingMaxWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x756C756C756C7543LL || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (Culululul), sizeof(Culululul)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  *a1 = *(void *)(a2 + 48);
  a1[2] = *(void *)(a2 + 56);
  a1[3] = *(void *)(a2 + 64);
  a1[4] = *(void *)(a2 + 72);
  a1[5] = *(void *)(a2 + 80);
  if (a4)
  {
    if (*(_WORD *)(a2 + 88) != 116)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    a1[1] = *(void *)(a2 + 92);
    if (a3 <= 0x3F)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      __int128 v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    a1[1] = *(void *)(a2 + 92);
  }

void DYTraceDecode_MPSPlugin_newCNNDilatedPoolingMaxWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_dilationRateX_dilationRateY( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x756C756C756C7543LL || *(void *)(a2 + 42) != 0x6C756C756C756CLL)
    {
      int v9 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v9;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (Culululululul), sizeof(Culululululul)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  *a1 = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  a1[3] = *(void *)(a2 + 68);
  a1[4] = *(void *)(a2 + 76);
  a1[5] = *(void *)(a2 + 84);
  a1[6] = *(void *)(a2 + 92);
  a1[7] = *(void *)(a2 + 100);
  if (a4)
  {
    if (*(_WORD *)(a2 + 108) != 116)
    {
      int v10 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v10;
      int v13 = 500;
      __int128 v14 = "memcmp((const char*)bytes + offset, (t), sizeof(t)) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }

    a1[1] = *(void *)(a2 + 112);
    if (a3 <= 0x53)
    {
      int v11 = *a4;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      int v12 = v11;
      int v13 = 500;
      __int128 v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }

  else
  {
    a1[1] = *(void *)(a2 + 112);
  }

void DYTraceDecode_MPSExternalCNNUnary_encodeToCommandBuffer_computeCommandEncoder_options_sourceTexture_sourceInfo_destinationTexture_destinationInfo( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x7455746C75747443LL || *(_WORD *)(a2 + 44) != 85)
    {
      int v10 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v10;
      int v17 = 500;
      __int128 v18 = "memcmp((const char*)bytes + offset, (CttultUtU), sizeof(CttultUtU)) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 16) = *(void *)(a2 + 56);
  *(void *)(a1 + 24) = *(void *)(a2 + 64);
  *(void *)(a1 + 32) = *(void *)(a2 + 72);
  *(void *)(a1 + 40) = *(void *)(a2 + 80);
  unint64_t v21 = 52LL;
  *(void *)(a1 + 48) = AppendString_10195((const char **)(a1 + 48), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 56) = *(void *)((char *)v8 + v11);
  unint64_t v21 = v11 + 8;
  *(void *)(a1 + 64) = AppendString_10195((const char **)(a1 + 64), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(unsigned __int16 *)((char *)v8 + v12) ^ 0x6C75 | *((unsigned __int8 *)v8 + v12 + 2))
  {
    int v13 = *a4;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v13;
    int v17 = 500;
    __int128 v18 = "memcmp((const char*)bytes + offset, (ul), sizeof(ul)) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }

  unint64_t v14 = (v12 + 6) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      int v15 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

void DYTraceDecode_MPSExternalCNNUnary_encodeToCommandBuffer_computeCommandEncoder_options_pluginOptions_sourceTexture_sourceInfo_destinationTexture_destinationInfo( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x746C756C75747443LL || *(_DWORD *)(a2 + 44) != 5600341)
    {
      int v10 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v10;
      int v17 = 500;
      __int128 v18 = "memcmp((const char*)bytes + offset, (CttulultUtU), sizeof(CttulultUtU)) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

  *(void *)a1 = *(void *)(a2 + 48);
  *(void *)(a1 + 16) = *(void *)(a2 + 56);
  *(void *)(a1 + 24) = *(void *)(a2 + 64);
  *(void *)(a1 + 32) = *(void *)(a2 + 72);
  *(void *)(a1 + 40) = *(void *)(a2 + 80);
  *(void *)(a1 + 48) = *(void *)(a2 + 88);
  unint64_t v21 = 60LL;
  *(void *)(a1 + 56) = AppendString_10195((const char **)(a1 + 56), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 64) = *(void *)((char *)v8 + v11);
  unint64_t v21 = v11 + 8;
  *(void *)(a1 + 72) = AppendString_10195((const char **)(a1 + 72), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(unsigned __int16 *)((char *)v8 + v12) ^ 0x6C75 | *((unsigned __int8 *)v8 + v12 + 2))
  {
    int v13 = *a4;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v13;
    int v17 = 500;
    __int128 v18 = "memcmp((const char*)bytes + offset, (ul), sizeof(ul)) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }

  unint64_t v14 = (v12 + 6) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      int v15 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

void DYTraceDecode_MPSExternalCNNUnary_encodeBatchToCommandBuffer_computeCommandEncoder_options_pluginOptions_sourceTextures_sourceInfo_destinationTextures_destinationInfo_predicationBuffer_predicationOffset( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "Cttulul@%llutU@%llutUtul", a1 + 56, a1 + 80);
  size_t v8 = strlen(v7);
  int v9 = &v7[v8 & 0xFFFFFFFFFFFFFFFCLL];
  *(void *)a1 = *(void *)(v9 + 4);
  *(void *)(a1 + 16) = *(void *)(v9 + 12);
  *(void *)(a1 + 24) = *(void *)(v9 + 20);
  *(void *)(a1 + 32) = *(void *)(v9 + 28);
  unint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 44;
  *(void *)(a1 + 40) = *(void *)(v9 + 36);
  *(void *)(a1 + 48) = &v7[v10];
  unint64_t v22 = v10 + 8LL * *(void *)(a1 + 56);
  appended = AppendString_10195((const char **)(a1 + 64), (uint64_t)v7, (uint64_t *)&v22);
  unint64_t v12 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 64) = appended;
  *(void *)(a1 + 72) = &v7[v12];
  unint64_t v22 = v12 + 8LL * *(void *)(a1 + 80);
  *(void *)(a1 + 88) = AppendString_10195((const char **)(a1 + 88), (uint64_t)v7, (uint64_t *)&v22);
  unint64_t v13 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 96) = *(void *)&v7[v13];
  *(void *)(a1 + 104) = *(void *)&v7[v13 + 8];
  if (a4 && *(unsigned __int16 *)&v7[v13 + 16] ^ 0x6C75 | v7[v13 + 18])
  {
    int v14 = *a4;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v14;
    int v18 = 500;
    __int128 v19 = "memcmp((const char*)bytes + offset, (ul), sizeof(ul)) == 0";
    GTError_addError(a4, (uint64_t)&v17);
  }

  unint64_t v15 = (v13 + 22) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)&v7[v15];
  if (a4)
  {
    if (v15 + 8 > a3)
    {
      int v16 = *a4;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }

void DYTraceDecode_MPSExternalCNNBinary_encodeToCommandBuffer_computeCommandEncoder_options_pluginOptions_primaryTexture_primaryInfo_secondaryTexture_secondaryInfo_destinationTexture_destinationInfo( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x746C756C75747443LL || *(void *)(a2 + 42) != 0x5574557455746CLL)
    {
      int v10 = *a4;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v10;
      int v18 = 500;
      __int128 v19 = "memcmp((const char*)bytes + offset, (CttulultUtUtU), sizeof(CttulultUtUtU)) == 0";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }

  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 16) = *(void *)(a2 + 60);
  *(void *)(a1 + 24) = *(void *)(a2 + 68);
  *(void *)(a1 + 32) = *(void *)(a2 + 76);
  *(void *)(a1 + 40) = *(void *)(a2 + 84);
  *(void *)(a1 + 48) = *(void *)(a2 + 92);
  unint64_t v22 = 64LL;
  *(void *)(a1 + 56) = AppendString_10195((const char **)(a1 + 56), (uint64_t)v8, (uint64_t *)&v22);
  unint64_t v11 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 64) = *(void *)((char *)v8 + v11);
  unint64_t v22 = v11 + 8;
  *(void *)(a1 + 72) = AppendString_10195((const char **)(a1 + 72), (uint64_t)v8, (uint64_t *)&v22);
  unint64_t v12 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 80) = *(void *)((char *)v8 + v12);
  unint64_t v22 = v12 + 8;
  *(void *)(a1 + 88) = AppendString_10195((const char **)(a1 + 88), (uint64_t)v8, (uint64_t *)&v22);
  unint64_t v13 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(unsigned __int16 *)((char *)v8 + v13) ^ 0x6C75 | *((unsigned __int8 *)v8 + v13 + 2))
  {
    int v14 = *a4;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v14;
    int v18 = 500;
    __int128 v19 = "memcmp((const char*)bytes + offset, (ul), sizeof(ul)) == 0";
    GTError_addError(a4, (uint64_t)&v17);
  }

  unint64_t v15 = (v13 + 6) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v15);
  if (a4)
  {
    if (v15 + 8 > a3)
    {
      int v16 = *a4;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }

void DYTraceDecode_MPSExternalCNNBinary_encodeBatchToCommandBuffer_computeCommandEncoder_options_pluginOptions_primaryTextures_primaryInfo_secondaryTextures_secondaryInfo_destinationTextures_destinationInfo_predicationBuffer_predicationOffset( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "Cttulul@%llutU@%llutU@%llutUtul", a1 + 56, a1 + 80, a1 + 104);
  size_t v8 = strlen(v7);
  int v9 = &v7[v8 & 0xFFFFFFFFFFFFFFFCLL];
  *(void *)a1 = *(void *)(v9 + 4);
  *(void *)(a1 + 16) = *(void *)(v9 + 12);
  *(void *)(a1 + 24) = *(void *)(v9 + 20);
  *(void *)(a1 + 32) = *(void *)(v9 + 28);
  unint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 44;
  *(void *)(a1 + 40) = *(void *)(v9 + 36);
  *(void *)(a1 + 48) = &v7[v10];
  unint64_t v24 = v10 + 8LL * *(void *)(a1 + 56);
  appended = AppendString_10195((const char **)(a1 + 64), (uint64_t)v7, (uint64_t *)&v24);
  unint64_t v12 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 64) = appended;
  *(void *)(a1 + 72) = &v7[v12];
  unint64_t v24 = v12 + 8LL * *(void *)(a1 + 80);
  unint64_t v13 = AppendString_10195((const char **)(a1 + 88), (uint64_t)v7, (uint64_t *)&v24);
  unint64_t v14 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 88) = v13;
  *(void *)(a1 + 96) = &v7[v14];
  unint64_t v24 = v14 + 8LL * *(void *)(a1 + 104);
  *(void *)(a1 + 112) = AppendString_10195((const char **)(a1 + 112), (uint64_t)v7, (uint64_t *)&v24);
  unint64_t v15 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 120) = *(void *)&v7[v15];
  *(void *)(a1 + 128) = *(void *)&v7[v15 + 8];
  if (a4 && *(unsigned __int16 *)&v7[v15 + 16] ^ 0x6C75 | v7[v15 + 18])
  {
    int v16 = *a4;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v16;
    int v20 = 500;
    __int128 v21 = "memcmp((const char*)bytes + offset, (ul), sizeof(ul)) == 0";
    GTError_addError(a4, (uint64_t)&v19);
  }

  unint64_t v17 = (v15 + 22) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)&v7[v17];
  if (a4)
  {
    if (v17 + 8 > a3)
    {
      int v18 = *a4;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      __int128 v21 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v19);
    }
  }

void DYTraceDecode_MPSExternalCNNConvolution_reloadWeightsAndBiasesWithCommandBuffer_encoder_weights_biases_predicationBuffer_predicationOffset( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) ^ 0x6C75747474747443LL | *(unsigned __int8 *)(a2 + 44))
  {
    int v8 = *a4;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    unint64_t v12 = "memcmp((const char*)bytes + offset, (Ctttttul), sizeof(Ctttttul)) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }

  *a1 = *(void *)(a2 + 48);
  a1[1] = *(void *)(a2 + 56);
  a1[2] = *(void *)(a2 + 64);
  a1[3] = *(void *)(a2 + 72);
  a1[4] = *(void *)(a2 + 80);
  a1[5] = *(void *)(a2 + 88);
  a1[6] = *(void *)(a2 + 96);
  if (a4)
  {
    if (a3 <= 0x43)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      unint64_t v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

void DYTraceDecode_MPSExternalCNNConvolution_reloadWeightsAndBiasesWithCommandBuffer_encoder_weights_weightsDataType_biases_predicationBuffer_predicationOffset( void *a1, void *a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)((char *)a2 + 36) != 0x74746C7574747443LL || *(void *)((char *)a2 + 39) != 0x6C7574746C7574LL)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (Ctttulttul), sizeof(Ctttulttul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = a2[6];
  a1[1] = a2[7];
  a1[2] = a2[8];
  a1[3] = a2[9];
  a1[4] = a2[10];
  a1[5] = a2[11];
  a1[6] = a2[12];
  a1[7] = a2[13];
  if (a4)
  {
    if (a3 <= 0x4B)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MPSExternalCNNConvolutionGradient_reloadWeightsWithCommandBuffer_encoder_weights_predicationBuffer_predicationOffset( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && *(void *)(a2 + 36) != 0x6C757474747443LL)
  {
    int v8 = *a4;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    int v10 = v8;
    int v11 = 500;
    int v12 = "memcmp((const char*)bytes + offset, (Cttttul), sizeof(Cttttul)) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }

  *a1 = *(void *)(a2 + 44);
  a1[1] = *(void *)(a2 + 52);
  a1[2] = *(void *)(a2 + 60);
  a1[3] = *(void *)(a2 + 68);
  a1[4] = *(void *)(a2 + 76);
  a1[5] = *(void *)(a2 + 84);
  if (a4)
  {
    if (a3 <= 0x37)
    {
      int v9 = *a4;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      int v10 = v9;
      int v11 = 500;
      int v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }

void DYTraceDecode_MPSExternalCNNConvolutionGradient_reloadWeightsWithCommandBuffer_encoder_weights_weightsDataType_predicationBuffer_predicationOffset( void *a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    if (*(void *)(a2 + 36) != 0x75746C7574747443LL || *(_WORD *)(a2 + 44) != 108)
    {
      int v9 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v9;
      int v12 = 500;
      __int128 v13 = "memcmp((const char*)bytes + offset, (Ctttultul), sizeof(Ctttultul)) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

  *a1 = *(void *)(a2 + 48);
  a1[1] = *(void *)(a2 + 56);
  a1[2] = *(void *)(a2 + 64);
  a1[3] = *(void *)(a2 + 72);
  a1[4] = *(void *)(a2 + 80);
  a1[5] = *(void *)(a2 + 88);
  a1[6] = *(void *)(a2 + 96);
  if (a4)
  {
    if (a3 <= 0x43)
    {
      int v10 = *a4;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      __int128 v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }

void DYTraceDecode_MPSExternalCNNConvolutionGradient_encodeBatchToCommandBuffer_computeCommandEncoder_options_pluginOptions_primaryTextures_primaryInfo_secondaryTextures_secondaryInfo_weightsGradient_biasesGradient_accumulate_predicationBuffer_predicationOffset( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "Cttulul@%llutU@%llutUttitul", a1 + 56, a1 + 80);
  size_t v8 = strlen(v7);
  int v9 = &v7[v8 & 0xFFFFFFFFFFFFFFFCLL];
  *(void *)a1 = *(void *)(v9 + 4);
  *(void *)(a1 + 16) = *(void *)(v9 + 12);
  *(void *)(a1 + 24) = *(void *)(v9 + 20);
  *(void *)(a1 + 32) = *(void *)(v9 + 28);
  unint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 44;
  *(void *)(a1 + 40) = *(void *)(v9 + 36);
  *(void *)(a1 + 48) = &v7[v10];
  unint64_t v22 = v10 + 8LL * *(void *)(a1 + 56);
  appended = AppendString_10195((const char **)(a1 + 64), (uint64_t)v7, (uint64_t *)&v22);
  unint64_t v12 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 64) = appended;
  *(void *)(a1 + 72) = &v7[v12];
  unint64_t v22 = v12 + 8LL * *(void *)(a1 + 80);
  *(void *)(a1 + 88) = AppendString_10195((const char **)(a1 + 88), (uint64_t)v7, (uint64_t *)&v22);
  unint64_t v13 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 96) = *(void *)&v7[v13];
  *(void *)(a1 + 104) = *(void *)&v7[v13 + 8];
  *(_DWORD *)(a1 + 112) = *(_DWORD *)&v7[v13 + 16];
  *(void *)(a1 + 120) = *(void *)&v7[v13 + 20];
  *(void *)(a1 + 128) = *(void *)&v7[v13 + 28];
  if (a4 && *(unsigned __int16 *)&v7[v13 + 36] ^ 0x6C75 | v7[v13 + 38])
  {
    int v14 = *a4;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v14;
    int v18 = 500;
    int v19 = "memcmp((const char*)bytes + offset, (ul), sizeof(ul)) == 0";
    GTError_addError(a4, (uint64_t)&v17);
  }

  unint64_t v15 = (v13 + 42) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)&v7[v15];
  if (a4)
  {
    if (v15 + 8 > a3)
    {
      int v16 = *a4;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      int v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }

void DYTraceDecode_MPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_A_aInfo_B_bInfo_C_cInfo( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x746C756C75747443LL && *(void *)(a2 + 44) == 0x753440746C753440LL;
    if (!v8 || *(void *)(a2 + 51) != 0x6C753440746C75LL)
    {
      int v10 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v10;
      int v17 = 500;
      int v18 = "memcmp((const char*)bytes + offset, (Cttulult@4ult@4ult@4ul), sizeof(Cttulult@4ult@4ult@4ul)) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

  *(void *)a1 = *(void *)(a2 + 60);
  *(void *)(a1 + 16) = *(void *)(a2 + 68);
  *(void *)(a1 + 24) = *(void *)(a2 + 76);
  *(void *)(a1 + 32) = *(void *)(a2 + 84);
  *(void *)(a1 + 40) = *(void *)(a2 + 92);
  *(void *)(a1 + 48) = *(void *)(a2 + 100);
  __int128 v11 = *(_OWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 56) = v11;
  *(void *)(a1 + 88) = *(void *)(a2 + 140);
  __int128 v12 = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 148);
  *(_OWORD *)(a1 + 112) = v12;
  *(void *)(a1 + 128) = *(void *)(a2 + 180);
  __int128 v13 = *(_OWORD *)(a2 + 188);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 204);
  *(_OWORD *)(a1 + 136) = v13;
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 220) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 222))
    {
      int v14 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v14;
      int v17 = 500;
      int v18 = "memcmp((const char*)bytes + offset, (ul), sizeof(ul)) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }

    *(void *)(a1 + 8) = *(void *)(a2 + 224);
    if (a3 <= 0xC3)
    {
      int v15 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 224);
  }

void DYTraceDecode_MPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRows_resultColumns_interiorColumns_alpha_beta_A_aInfo_B_bInfo_C_cInfo( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x756C756C75747443LL && *(void *)(a2 + 44) == 0x7464646C756C756CLL;
    BOOL v9 = v8 && *(void *)(a2 + 52) == 0x753440746C753440LL;
    if (!v9 || *(void *)(a2 + 59) != 0x6C753440746C75LL)
    {
      int v11 = *a4;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v11;
      int v18 = 500;
      __int128 v19 = "memcmp((const char*)bytes + offset, (Cttulululululddt@4ult@4ult@4ul), sizeof(Cttulululululddt@4ult@4ult@4ul)) == 0";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }

  *(void *)a1 = *(void *)(a2 + 68);
  *(void *)(a1 + 16) = *(void *)(a2 + 76);
  *(void *)(a1 + 24) = *(void *)(a2 + 84);
  *(void *)(a1 + 32) = *(void *)(a2 + 92);
  *(void *)(a1 + 40) = *(void *)(a2 + 100);
  *(void *)(a1 + 48) = *(void *)(a2 + 108);
  *(void *)(a1 + 56) = *(void *)(a2 + 116);
  *(void *)(a1 + 64) = *(void *)(a2 + 124);
  *(void *)(a1 + 72) = *(void *)(a2 + 132);
  *(void *)(a1 + 80) = *(void *)(a2 + 140);
  *(void *)(a1 + 88) = *(void *)(a2 + 148);
  __int128 v12 = *(_OWORD *)(a2 + 172);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 156);
  *(_OWORD *)(a1 + 112) = v12;
  *(void *)(a1 + 128) = *(void *)(a2 + 188);
  __int128 v13 = *(_OWORD *)(a2 + 196);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 212);
  *(_OWORD *)(a1 + 136) = v13;
  *(void *)(a1 + 168) = *(void *)(a2 + 228);
  __int128 v14 = *(_OWORD *)(a2 + 252);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 236);
  *(_OWORD *)(a1 + 192) = v14;
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 268) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 270))
    {
      int v15 = *a4;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v15;
      int v18 = 500;
      __int128 v19 = "memcmp((const char*)bytes + offset, (ul), sizeof(ul)) == 0";
      GTError_addError(a4, (uint64_t)&v17);
    }

    *(void *)(a1 + 8) = *(void *)(a2 + 272);
    if (a3 <= 0xF3)
    {
      int v16 = *a4;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }

  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 272);
  }

void DYTraceDecode_MPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRowsAndResultColumnsAndInteriorColumns_alphaAndBeta_A_aInfo_B_bInfo_C_cInfo_predicationBuffer_predicationOffset( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && strcmp((const char *)(a2 + 36), "Cttulul@3ul@2dt@4ult@4ult@4ultul"))
  {
    int v8 = *a4;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v8;
    int v16 = 500;
    int v17 = "memcmp((const char*)bytes + offset, (Cttulul@3ul@2dt@4ult@4ult@4ultul), sizeof(Cttulul@3ul@2dt@4ult@4ult"
          "@4ultul)) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }

  *(void *)a1 = *(void *)(a2 + 72);
  *(void *)(a1 + 16) = *(void *)(a2 + 80);
  *(void *)(a1 + 24) = *(void *)(a2 + 88);
  *(void *)(a1 + 32) = *(void *)(a2 + 96);
  *(void *)(a1 + 40) = *(void *)(a2 + 104);
  __int128 v9 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 64) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 88) = *(void *)(a2 + 152);
  __int128 v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 112) = v10;
  *(void *)(a1 + 128) = *(void *)(a2 + 192);
  __int128 v11 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 136) = v11;
  *(void *)(a1 + 168) = *(void *)(a2 + 232);
  __int128 v12 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 192) = v12;
  *(void *)(a1 + 208) = *(void *)(a2 + 272);
  *(void *)(a1 + 216) = *(void *)(a2 + 280);
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 288) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 290))
    {
      int v13 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v13;
      int v16 = 500;
      int v17 = "memcmp((const char*)bytes + offset, (ul), sizeof(ul)) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }

    *(void *)(a1 + 8) = *(void *)(a2 + 292);
    if (a3 <= 0x107)
    {
      int v14 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 292);
  }

void DYTraceDecode_MPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRows_resultColumns_interiorColumns_alpha_beta_A_aInfo_B_bInfo_C_cInfo_predicationBuffer_predicationOffset_transA_transB( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && strcmp((const char *)(a2 + 36), "Cttulul@3ul@2dt@4ult@4ult@4ultulii"))
  {
    int v8 = *a4;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v8;
    int v16 = 500;
    int v17 = "memcmp((const char*)bytes + offset, (Cttulul@3ul@2dt@4ult@4ult@4ultulii), sizeof(Cttulul@3ul@2dt@4ult@4u"
          "lt@4ultulii)) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }

  *(void *)a1 = *(void *)(a2 + 72);
  *(void *)(a1 + 16) = *(void *)(a2 + 80);
  *(void *)(a1 + 24) = *(void *)(a2 + 88);
  *(void *)(a1 + 32) = *(void *)(a2 + 96);
  *(void *)(a1 + 40) = *(void *)(a2 + 104);
  __int128 v9 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 64) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 88) = *(void *)(a2 + 152);
  __int128 v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 112) = v10;
  *(void *)(a1 + 128) = *(void *)(a2 + 192);
  __int128 v11 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 136) = v11;
  *(void *)(a1 + 168) = *(void *)(a2 + 232);
  __int128 v12 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 192) = v12;
  *(void *)(a1 + 208) = *(void *)(a2 + 272);
  *(void *)(a1 + 216) = *(void *)(a2 + 280);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 292);
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 296) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 298))
    {
      int v13 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v13;
      int v16 = 500;
      int v17 = "memcmp((const char*)bytes + offset, (ul), sizeof(ul)) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }

    *(void *)(a1 + 8) = *(void *)(a2 + 300);
    if (a3 <= 0x10F)
    {
      int v14 = *a4;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }

  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 300);
  }

void DYTraceDecode_MPSExternalMatrixVectorMultiplication_encodeToCommandBuffer_encoder_options_batchSize_matrix_matrixStructure_vector_vectorStructure_result_resultStructure( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x746C756C75747443LL && *(void *)(a2 + 44) == 0x753340746C753440LL;
    if (!v8 || *(void *)(a2 + 51) != 0x6C753340746C75LL)
    {
      int v10 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v10;
      int v17 = 500;
      __int128 v18 = "memcmp((const char*)bytes + offset, (Cttulult@4ult@3ult@3ul), sizeof(Cttulult@4ult@3ult@3ul)) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

  *(void *)a1 = *(void *)(a2 + 60);
  *(void *)(a1 + 16) = *(void *)(a2 + 68);
  *(void *)(a1 + 24) = *(void *)(a2 + 76);
  *(void *)(a1 + 32) = *(void *)(a2 + 84);
  *(void *)(a1 + 40) = *(void *)(a2 + 92);
  *(void *)(a1 + 48) = *(void *)(a2 + 100);
  __int128 v11 = *(_OWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 56) = v11;
  *(void *)(a1 + 88) = *(void *)(a2 + 140);
  __int128 v12 = *(_OWORD *)(a2 + 148);
  *(void *)(a1 + 112) = *(void *)(a2 + 164);
  *(_OWORD *)(a1 + 96) = v12;
  *(void *)(a1 + 120) = *(void *)(a2 + 172);
  __int128 v13 = *(_OWORD *)(a2 + 180);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v20 - 144) = *(void *)(a2 + 196);
  *(_OWORD *)(a1 + 128) = v13;
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 204) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 206))
    {
      int v14 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v14;
      int v17 = 500;
      __int128 v18 = "memcmp((const char*)bytes + offset, (ul), sizeof(ul)) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }

    *(void *)(a1 + 8) = *(void *)(a2 + 208);
    if (a3 <= 0xB3)
    {
      int v15 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 208);
  }

void DYTraceDecode_MPSExternalMatrixVectorMultiplication_encodeToCommandBuffer_encoder_options_batchSize_matrix_matrixStructure_vector_vectorStructure_result_resultStructure_predicationBuffer_predicationOffset( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4)
  {
    BOOL v8 = *(void *)(a2 + 36) == 0x746C756C75747443LL && *(void *)(a2 + 44) == 0x753340746C753440LL;
    BOOL v9 = v8 && *(void *)(a2 + 52) == 0x75746C753340746CLL;
    if (!v9 || *(_WORD *)(a2 + 60) != 108)
    {
      int v11 = *a4;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v11;
      int v18 = 500;
      __int128 v19 = "memcmp((const char*)bytes + offset, (Cttulult@4ult@3ult@3ultul), sizeof(Cttulult@4ult@3ult@3ultul)) == 0";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }

  *(void *)a1 = *(void *)(a2 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 72);
  *(void *)(a1 + 24) = *(void *)(a2 + 80);
  *(void *)(a1 + 32) = *(void *)(a2 + 88);
  *(void *)(a1 + 40) = *(void *)(a2 + 96);
  *(void *)(a1 + 48) = *(void *)(a2 + 104);
  __int128 v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 56) = v12;
  *(void *)(a1 + 88) = *(void *)(a2 + 144);
  __int128 v13 = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 112) = *(void *)(a2 + 168);
  *(_OWORD *)(a1 + 96) = v13;
  *(void *)(a1 + 120) = *(void *)(a2 + 176);
  __int128 v14 = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v20 - 144) = *(void *)(a2 + 200);
  *(_OWORD *)(a1 + 128) = v14;
  *(void *)(a1 + 152) = *(void *)(a2 + 208);
  *(void *)(a1 + 160) = *(void *)(a2 + 216);
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 224) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 226))
    {
      int v15 = *a4;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v15;
      int v18 = 500;
      __int128 v19 = "memcmp((const char*)bytes + offset, (ul), sizeof(ul)) == 0";
      GTError_addError(a4, (uint64_t)&v17);
    }

    *(void *)(a1 + 8) = *(void *)(a2 + 228);
    if (a3 <= 0xC7)
    {
      int v16 = *a4;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }

  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 228);
  }

void DYTraceDecode_MPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_optionsAndBatchSize_inputMatrix_inputMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_alpha_numberOfFeatureVectorsAndInputFeatureChannelsAndOutputFeatureChannels_neuronType_neuronParameters( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  if (a4 && strcmp((const char *)(a2 + 36), "Ctt@2ult@4ult@4ult@3ult@4uld@3uli@3f"))
  {
    int v8 = *a4;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v8;
    int v18 = 500;
    __int128 v19 = "memcmp((const char*)bytes + offset, (Ctt@2ult@4ult@4ult@3ult@4uld@3uli@3f), sizeof(Ctt@2ult@4ult@4ult@3u"
          "lt@4uld@3uli@3f)) == 0";
    GTError_addError(a4, (uint64_t)&v17);
  }

  *(void *)a1 = *(void *)(a2 + 76);
  *(void *)(a1 + 16) = *(void *)(a2 + 84);
  *(void *)(a1 + 24) = *(void *)(a2 + 92);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 100);
  *(void *)(a1 + 48) = *(void *)(a2 + 116);
  __int128 v9 = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 56) = v9;
  *(void *)(a1 + 88) = *(void *)(a2 + 156);
  __int128 v10 = *(_OWORD *)(a2 + 180);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 112) = v10;
  *(void *)(a1 + 128) = *(void *)(a2 + 196);
  __int128 v11 = *(_OWORD *)(a2 + 204);
  *(void *)(a1 + 152) = *(void *)(a2 + 220);
  *(_OWORD *)(a1 + 136) = v11;
  *(void *)(a1 + 160) = *(void *)(a2 + 228);
  __int128 v12 = *(_OWORD *)(a2 + 236);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 252);
  *(_OWORD *)(a1 + 168) = v12;
  *(void *)(a1 + 200) = *(void *)(a2 + 268);
  __int128 v13 = *(_OWORD *)(a2 + 276);
  *(void *)(a1 + 224) = *(void *)(a2 + 292);
  *(_OWORD *)(a1 + 208) = v13;
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 300);
  uint64_t v14 = *(void *)(a2 + 304);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 312);
  *(void *)(a1 + 236) = v14;
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 316) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 318))
    {
      int v15 = *a4;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v15;
      int v18 = 500;
      __int128 v19 = "memcmp((const char*)bytes + offset, (ul), sizeof(ul)) == 0";
      GTError_addError(a4, (uint64_t)&v17);
    }

    *(void *)(a1 + 8) = *(void *)(a2 + 320);
    if (a3 <= 0x123)
    {
      int v16 = *a4;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }

  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 320);
  }

void DYTraceDecode_MPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_optionsAndBatchSize_inputMatrix_inputMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_alpha_numberOfFeatureVectorsAndInputFeatureChannelsAndOutputFeatureChannelsAndNeuronTypeAndPredicationOffset_neuronParameters_predicationBuffer( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 268);
  if (a4 && strcmp((const char *)(a2 + 36), "Ctt@2ult@4ult@4ult@3ult@4uld@5ul@3ft"))
  {
    int v9 = *a4;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v9;
    int v20 = 500;
    __int128 v21 = "memcmp((const char*)bytes + offset, (Ctt@2ult@4ult@4ult@3ult@4uld@5ul@3ft), sizeof(Ctt@2ult@4ult@4ult@3u"
          "lt@4uld@5ul@3ft)) == 0";
    GTError_addError(a4, (uint64_t)&v19);
  }

  *(void *)a1 = *(void *)(a2 + 76);
  *(void *)(a1 + 16) = *(void *)(a2 + 84);
  *(void *)(a1 + 24) = *(void *)(a2 + 92);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 100);
  *(void *)(a1 + 48) = *(void *)(a2 + 116);
  __int128 v10 = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 56) = v10;
  *(void *)(a1 + 88) = *(void *)(a2 + 156);
  __int128 v11 = *(_OWORD *)(a2 + 180);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 112) = v11;
  *(void *)(a1 + 128) = *(void *)(a2 + 196);
  __int128 v12 = *(_OWORD *)(a2 + 204);
  *(void *)(a1 + 152) = *(void *)(a2 + 220);
  *(_OWORD *)(a1 + 136) = v12;
  *(void *)(a1 + 160) = *(void *)(a2 + 228);
  __int128 v13 = *(_OWORD *)(a2 + 236);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 252);
  *(_OWORD *)(a1 + 168) = v13;
  *(void *)(a1 + 200) = *v8;
  __int128 v14 = *(_OWORD *)(a2 + 276);
  __int128 v15 = *(_OWORD *)(a2 + 292);
  *(void *)(a1 + 240) = *(void *)(a2 + 308);
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 224) = v15;
  uint64_t v16 = *(void *)(a2 + 316);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 324);
  *(void *)(a1 + 248) = v16;
  *(void *)(a1 + 264) = *(void *)(a2 + 328);
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 336) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 338))
    {
      int v17 = *a4;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v17;
      int v20 = 500;
      __int128 v21 = "memcmp((const char*)bytes + offset, (ul), sizeof(ul)) == 0";
      GTError_addError(a4, (uint64_t)&v19);
    }

    *(void *)(a1 + 8) = v8[9];
    if (a3 <= 0x137)
    {
      int v18 = *a4;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      __int128 v21 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v19);
    }
  }

  else
  {
    *(void *)(a1 + 8) = v8[9];
  }

void DYTraceDecode_MPSExternalCNNPoolingAverage_encodeToCommandBuffer_computeCommandEncoder_options_sourceTexture_sourceInfo_destinationTexture_destinationInfo_zeroPadSizeX_zeroPadSizeY( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8 = (void *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x7455746C75747443LL || *(void *)(a2 + 42) != 0x6C756C75557455LL)
    {
      int v10 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v10;
      int v17 = 500;
      int v18 = "memcmp((const char*)bytes + offset, (CttultUtUulul), sizeof(CttultUtUulul)) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

  *(void *)a1 = *(void *)(a2 + 52);
  *(void *)(a1 + 16) = *(void *)(a2 + 60);
  *(void *)(a1 + 24) = *(void *)(a2 + 68);
  *(void *)(a1 + 32) = *(void *)(a2 + 76);
  *(void *)(a1 + 40) = *(void *)(a2 + 84);
  unint64_t v21 = 56LL;
  *(void *)(a1 + 48) = AppendString_10195((const char **)(a1 + 48), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 56) = *(void *)((char *)v8 + v11);
  unint64_t v21 = v11 + 8;
  *(void *)(a1 + 64) = AppendString_10195((const char **)(a1 + 64), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 72) = *(void *)((char *)v8 + v12);
  *(void *)(a1 + 80) = *(void *)((char *)v8 + v12 + 8);
  if (a4 && *(unsigned __int16 *)((char *)v8 + v12 + 16) ^ 0x6C75 | *((unsigned __int8 *)v8 + v12 + 18))
  {
    int v13 = *a4;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v13;
    int v17 = 500;
    int v18 = "memcmp((const char*)bytes + offset, (ul), sizeof(ul)) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }

  unint64_t v14 = (v12 + 22) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      int v15 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

void DYTraceDecode_MPSExternalCNNPoolingAverage_encodeBatchToCommandBuffer_computeCommandEncoder_options_sourceTextures_sourceInfo_destinationTextures_destinationInfo_zeroPadSizeX_zeroPadSizeY_predicationBuffer_predicationOffset( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "Cttul@%llutU@%llutUulultul", a1 + 48, a1 + 72);
  size_t v8 = strlen(v7);
  int v9 = &v7[v8 & 0xFFFFFFFFFFFFFFFCLL];
  *(void *)a1 = *(void *)(v9 + 4);
  *(void *)(a1 + 16) = *(void *)(v9 + 12);
  *(void *)(a1 + 24) = *(void *)(v9 + 20);
  unint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 36;
  *(void *)(a1 + 32) = *(void *)(v9 + 28);
  *(void *)(a1 + 40) = &v7[v10];
  unint64_t v22 = v10 + 8LL * *(void *)(a1 + 48);
  appended = AppendString_10195((const char **)(a1 + 56), (uint64_t)v7, (uint64_t *)&v22);
  unint64_t v12 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 56) = appended;
  *(void *)(a1 + 64) = &v7[v12];
  unint64_t v22 = v12 + 8LL * *(void *)(a1 + 72);
  *(void *)(a1 + 80) = AppendString_10195((const char **)(a1 + 80), (uint64_t)v7, (uint64_t *)&v22);
  unint64_t v13 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 88) = *(void *)&v7[v13];
  *(void *)(a1 + 96) = *(void *)&v7[v13 + 8];
  *(void *)(a1 + 104) = *(void *)&v7[v13 + 16];
  *(void *)(a1 + 112) = *(void *)&v7[v13 + 24];
  if (a4 && *(unsigned __int16 *)&v7[v13 + 32] ^ 0x6C75 | v7[v13 + 34])
  {
    int v14 = *a4;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v14;
    int v18 = 500;
    __int128 v19 = "memcmp((const char*)bytes + offset, (ul), sizeof(ul)) == 0";
    GTError_addError(a4, (uint64_t)&v17);
  }

  unint64_t v15 = (v13 + 38) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)&v7[v15];
  if (a4)
  {
    if (v15 + 8 > a3)
    {
      int v16 = *a4;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }

void DYTraceDecode_MPSExternalNDArrayBinary_encodeToCommandBuffer_encoder_options_pluginOptions_primaryBuffer_primaryInfo_secondaryBuffer_secondaryInfo_destinationBuffer_destinationInfo_predicationBuffer_predicationOffset( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  if (a4 && *v8 ^ 0x746C756C75747443LL | *(void *)(a2 + 44) ^ 0x6C75745574557455LL | *(unsigned __int8 *)(a2 + 52))
  {
    int v9 = *a4;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v9;
    int v17 = 500;
    int v18 = "memcmp((const char*)bytes + offset, (CttulultUtUtUtul), sizeof(CttulultUtUtUtul)) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }

  *(void *)a1 = *(void *)(a2 + 56);
  *(void *)(a1 + 16) = *(void *)(a2 + 64);
  *(void *)(a1 + 24) = *(void *)(a2 + 72);
  *(void *)(a1 + 32) = *(void *)(a2 + 80);
  *(void *)(a1 + 40) = *(void *)(a2 + 88);
  *(void *)(a1 + 48) = *(void *)(a2 + 96);
  unint64_t v21 = 68LL;
  *(void *)(a1 + 56) = AppendString_10195((const char **)(a1 + 56), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v10 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 64) = *(void *)((char *)v8 + v10);
  unint64_t v21 = v10 + 8;
  *(void *)(a1 + 72) = AppendString_10195((const char **)(a1 + 72), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 80) = *(void *)((char *)v8 + v11);
  unint64_t v21 = v11 + 8;
  *(void *)(a1 + 88) = AppendString_10195((const char **)(a1 + 88), (uint64_t)v8, (uint64_t *)&v21);
  unint64_t v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 96) = *(void *)((char *)v8 + v12);
  *(void *)(a1 + 104) = *(void *)((char *)v8 + v12 + 8);
  if (a4 && *(unsigned __int16 *)((char *)v8 + v12 + 16) ^ 0x6C75 | *((unsigned __int8 *)v8 + v12 + 18))
  {
    int v13 = *a4;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v13;
    int v17 = 500;
    int v18 = "memcmp((const char*)bytes + offset, (ul), sizeof(ul)) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }

  unint64_t v14 = (v12 + 22) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      int v15 = *a4;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }

void DYTraceDecode_MPSExternalNDArrayBinaryGradient_encodePrimaryGradientToCommandBuffer_encoder_options_pluginOptions_primaryBuffer_primaryInfo_secondaryBuffer_secondaryInfo_gradientBuffer_gradientInfo_destination_destinationInfo_accumulate_predicationBuffer_predicationOffset( uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  size_t v8 = (void *)(a2 + 36);
  if (a4)
  {
    BOOL v9 = *v8 == 0x746C756C75747443LL && *(void *)(a2 + 44) == 0x6955745574557455LL;
    if (!v9 || *(_DWORD *)(a2 + 52) != 7107956)
    {
      int v11 = *a4;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v11;
      int v20 = 500;
      unint64_t v21 = "memcmp((const char*)bytes + offset, (CttulultUtUtUtUitul), sizeof(CttulultUtUtUtUitul)) == 0";
      GTError_addError(a4, (uint64_t)&v19);
    }
  }

  *(void *)a1 = *(void *)(a2 + 56);
  *(void *)(a1 + 16) = *(void *)(a2 + 64);
  *(void *)(a1 + 24) = *(void *)(a2 + 72);
  *(void *)(a1 + 32) = *(void *)(a2 + 80);
  *(void *)(a1 + 40) = *(void *)(a2 + 88);
  *(void *)(a1 + 48) = *(void *)(a2 + 96);
  unint64_t v24 = 68LL;
  *(void *)(a1 + 56) = AppendString_10195((const char **)(a1 + 56), (uint64_t)v8, (uint64_t *)&v24);
  unint64_t v12 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 64) = *(void *)((char *)v8 + v12);
  unint64_t v24 = v12 + 8;
  *(void *)(a1 + 72) = AppendString_10195((const char **)(a1 + 72), (uint64_t)v8, (uint64_t *)&v24);
  unint64_t v13 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 80) = *(void *)((char *)v8 + v13);
  unint64_t v24 = v13 + 8;
  *(void *)(a1 + 88) = AppendString_10195((const char **)(a1 + 88), (uint64_t)v8, (uint64_t *)&v24);
  unint64_t v14 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 96) = *(void *)((char *)v8 + v14);
  unint64_t v24 = v14 + 8;
  *(void *)(a1 + 104) = AppendString_10195((const char **)(a1 + 104), (uint64_t)v8, (uint64_t *)&v24);
  unint64_t v15 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)((char *)v8 + v15);
  *(void *)(a1 + 120) = *(void *)((char *)v8 + v15 + 4);
  *(void *)(a1 + 128) = *(void *)((char *)v8 + v15 + 12);
  if (a4 && *(unsigned __int16 *)((char *)v8 + v15 + 20) ^ 0x6C75 | *((unsigned __int8 *)v8 + v15 + 22))
  {
    int v16 = *a4;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v16;
    int v20 = 500;
    unint64_t v21 = "memcmp((const char*)bytes + offset, (ul), sizeof(ul)) == 0";
    GTError_addError(a4, (uint64_t)&v19);
  }

  unint64_t v17 = (v15 + 26) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a1 + 8) = *(void *)((char *)v8 + v17);
  if (a4)
  {
    if (v17 + 8 > a3)
    {
      int v18 = *a4;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      unint64_t v21 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v19);
    }
  }

void *GTMTLSMContext_getObject(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v8 = a2;
  entry = find_entry(a1, &v8, 8uLL, 0LL);
  if (!*entry) {
    return 0LL;
  }
  int v5 = *(void **)(*entry + 32LL);
  if (!v5) {
    return 0LL;
  }
  __n128 result = 0LL;
  do
  {
    if (v5[2] > a3 || (uint64_t v7 = v5, v5[3] <= a3))
    {
      if (result) {
        return result;
      }
      uint64_t v7 = 0LL;
    }

    int v5 = (void *)v5[4];
    __n128 result = v7;
  }

  while (v5);
  return result;
}

uint64_t GTMTLSMContext_lastObject(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = a2;
  entry = find_entry(a1, &v6, 8uLL, 0LL);
  if (!*entry) {
    return 0LL;
  }
  for (uint64_t result = *(void *)(*entry + 32LL); result; uint64_t result = *(void *)(result + 32))
  {
    if (*(void *)(result + 16) <= a3) {
      break;
    }
  }

  return result;
}

uint64_t GTMTLSMContext_getDrawableTexture(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v9 = *(void *)(a2 + 48);
  entry = find_entry(a1, &v9, 8uLL, 0LL);
  if (!*entry) {
    return 0LL;
  }
  uint64_t v6 = *(void *)(*entry + 32LL);
  if (!v6) {
    return 0LL;
  }
  uint64_t result = 0LL;
  do
  {
    if (*(void *)(a2 + 16) > a3 || (uint64_t v8 = v6, *(void *)(v6 + 24) <= a3))
    {
      if (result) {
        return result;
      }
      uint64_t v8 = 0LL;
    }

    uint64_t v6 = *(void *)(v6 + 32);
    uint64_t result = v8;
  }

  while (v6);
  return result;
}

_DWORD *GTMTLSMContext_getObjects(_DWORD *result, unint64_t a2, apr_array_header_t *arr)
{
  int v3 = result[3];
  if (v3 >= 1)
  {
    uint64_t v6 = result;
    for (uint64_t i = 0LL; i < v3; ++i)
    {
      uint64_t v8 = *(void **)(*((void *)v6 + 3) + 8 * i);
      if (v8[2] > a2) {
        break;
      }
      if (v8[3] > a2)
      {
        uint64_t v9 = 0LL;
        do
        {
          if (v8[2] > a2 || (unint64_t v10 = v8, v8[3] <= a2))
          {
            if (v9) {
              break;
            }
            unint64_t v10 = 0LL;
          }

          uint64_t v8 = (void *)v8[4];
          uint64_t v9 = v10;
        }

        while (v8);
        uint64_t result = apr_array_push(arr);
        *(void *)uint64_t result = v9;
        int v3 = *((_DWORD *)v6 + 3);
      }
    }
  }

  return result;
}

uint64_t GTMTLSMObjectPtr_compare(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 != *a2;
  }
}

void GTMTLSMContext_buildResourceChildrenMap2(uint64_t *a1, uint64_t a2, unint64_t a3, apr_hash_t *a4)
{
  uint64_t v6 = *(apr_pool_t **)a4;
  uint64_t v7 = apr_array_make(*(apr_pool_t **)a2, 4, 8);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = v7;
    uint64_t v9 = 0LL;
    do
    {
      uint64_t v10 = *(void *)(*(void *)(a2 + 24) + 8 * v9);
      uint64_t v11 = *find_entry((uint64_t)a4, (_BYTE *)(v10 + 8), 8uLL, 0LL);
      if (!v11 || !*(void *)(v11 + 32))
      {
        v8->int nelts = 0;
        AddObjectAncestors(a1, (void *)v10, a3, v8);
        if (v8->nelts >= 2)
        {
          uint64_t v12 = 1LL;
          while (1)
          {
            uint64_t v13 = *(void *)&v8->elts[8 * v12];
            uint64_t v14 = *find_entry((uint64_t)a4, (_BYTE *)(v13 + 8), 8uLL, 0LL);
            if (v14)
            {
              unint64_t v15 = *(apr_array_header_t **)(v14 + 32);
              if (v15) {
                break;
              }
            }

            int v16 = apr_array_make(v6, 1, 8);
            *(void *)apr_array_push(v16) = v10;
            apr_hash_set(a4, (const void *)(v13 + 8), 8LL, v16);
            ++v12;
            uint64_t v10 = v13;
            if (v12 >= v8->nelts) {
              goto LABEL_12;
            }
          }

          *(void *)apr_array_push(v15) = v10;
        }
      }

void *AddObjectAncestors(uint64_t *a1, void *a2, unint64_t a3, apr_array_header_t *a4)
{
  while (1)
  {
    uint64_t result = apr_array_push(a4);
    *uint64_t result = a2;
    int v9 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 == 16)
    {
      uint64_t v10 = a2[18];
      if (v10)
      {
        uint64_t Object = GTMTLSMContext_getObject(*a1, v10, a3);
        uint64_t result = (void *)AddObjectAncestors(a1, Object, a3, a4);
      }

      goto LABEL_7;
    }

    if (v9 != 80) {
      break;
    }
    uint64_t v12 = a2[17];
    if (!v12)
    {
      uint64_t v12 = a2[18];
      if (!v12) {
        goto LABEL_7;
      }
    }

apr_hash_index_t *GTMTLSMContext_buildResourceChildrenMap( uint64_t *a1, unint64_t a2, uint64_t a3, apr_allocator_t *a4)
{
  uint64_t v7 = newpool;
  int v8 = *(_DWORD *)(a1[1] + 12);
  if (v8 <= *(_DWORD *)(a1[2] + 12)) {
    int v8 = *(_DWORD *)(a1[2] + 12);
  }
  if (v8 <= *(_DWORD *)(a1[9] + 12)) {
    int v9 = *(_DWORD *)(a1[9] + 12);
  }
  else {
    int v9 = v8;
  }
  uint64_t v10 = apr_array_make(newpool, v9, 8);
  GTMTLSMContext_getObjects((_DWORD *)a1[1], a2, v10);
  GTMTLSMContext_buildResourceChildrenMap2(a1, (uint64_t)v10, a2, (apr_hash_t *)a3);
  v10->int nelts = 0;
  GTMTLSMContext_getObjects((_DWORD *)a1[2], a2, v10);
  GTMTLSMContext_buildResourceChildrenMap2(a1, (uint64_t)v10, a2, (apr_hash_t *)a3);
  v10->int nelts = 0;
  GTMTLSMContext_getObjects((_DWORD *)a1[9], a2, v10);
  GTMTLSMContext_buildResourceChildrenMap2(a1, (uint64_t)v10, a2, (apr_hash_t *)a3);
  apr_pool_destroy(v7);
  *(void *)(a3 + 24) = 0LL;
  *(void *)(a3 + 32) = 0LL;
  *(void *)(a3 + 16) = a3;
  *(_DWORD *)(a3 + 40) = 0;
  uint64_t result = apr_hash_next((apr_hash_index_t *)(a3 + 16));
  if (result)
  {
    uint64_t v12 = result;
    do
    {
      uint64_t v13 = *(void *)(*((void *)v12 + 1) + 32LL);
      size_t v14 = *(unsigned int *)(v13 + 12);
      if ((int)v14 >= 2)
      {
        qsort( *(void **)(v13 + 24),  v14,  *(int *)(v13 + 8),  (int (__cdecl *)(const void *, const void *))GTMTLSMObjectPtr_compare);
        uint64_t v15 = *(unsigned int *)(v13 + 12);
        if ((int)v15 < 2)
        {
          int v20 = 1;
        }

        else
        {
          int v16 = *(uint64_t **)(v13 + 24);
          unint64_t v17 = v16 + 1;
          uint64_t v18 = *v16;
          uint64_t v19 = v15 - 1;
          int v20 = 1;
          do
          {
            uint64_t v21 = v18;
            uint64_t v18 = *v17;
            if (*v17 != v21)
            {
              uint64_t v22 = v16[v20];
              v16[v20++] = v18;
              *unint64_t v17 = v22;
            }

            ++v17;
            --v19;
          }

          while (v19);
        }

        *(_DWORD *)(v13 + 12) = v20;
      }

      uint64_t result = apr_hash_next(v12);
      uint64_t v12 = result;
    }

    while (result);
  }

  return result;
}

void *GTMTLSMContext_getTextureDescriptor(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 48) = 0LL;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  uint64_t result = GTMTLSMContext_getObject(*a1, a2, a3);
  if (result)
  {
    int v8 = result;
    uint64_t v9 = result[18];
    if (v9)
    {
      uint64_t result = (void *)GTMTLSMContext_getTextureDescriptor(a1, v9, a3, a4);
      *(_WORD *)(a4 + 34) = *((_WORD *)v8 + 76);
      int v10 = *((unsigned __int8 *)v8 + 158);
      *(_BYTE *)(a4 + 49) = v10;
      if (*((_BYTE *)v8 + 160)) {
        *(_BYTE *)(a4 + 45) = *((_BYTE *)v8 + 160);
      }
      int v11 = *((_DWORD *)v8 + 52);
      if (v11 != -1) {
        *(_DWORD *)(a4 + 16) = v11;
      }
      unsigned int v12 = *((unsigned __int16 *)v8 + 78);
      if (*((_WORD *)v8 + 78))
      {
        if ((v10 - 5) > 1)
        {
          *(_WORD *)(a4 + 28) = v12;
        }

        else
        {
          int v13 = *((unsigned __int16 *)v8 + 78) / 6;
          if (v12 < 6) {
            LOWORD(v13) = 1;
          }
          *(_WORD *)(a4 + 28) = v13;
        }
      }
    }

    else
    {
      size_t v14 = (__int128 *)result[13];
      if (v14)
      {
        __int128 v15 = *v14;
        __int128 v16 = v14[1];
        __int128 v17 = v14[2];
        *(void *)(a4 + 48) = *((void *)v14 + 6);
        *(_OWORD *)(a4 + 16) = v16;
        *(_OWORD *)(a4 + 32) = v17;
        *(_OWORD *)a4 = v15;
      }

      else
      {
        uint64_t v18 = result[24];
        if (v18)
        {
          *(_BYTE *)(a4 + 49) = 2;
          *(_BYTE *)(a4 + 4memset(v56, 0, 7) = 1;
          *(_DWORD *)(a4 + 28) = 65537;
          *(_WORD *)(a4 + 44) = 257;
          *(_DWORD *)(a4 + 16) = 84148994;
          uint64_t result = GTMTLSMContext_getObject(*a1, v18, result[2]);
          if (result)
          {
            uint64_t result = GTMTLSMContext_getObject(*a1, result[5], result[2]);
            if (result)
            {
              *(_WORD *)(a4 + 34) = *((_WORD *)result + 136);
              unint64_t v19 = (unint64_t)*((double *)result + 22);
              *(_WORD *)(a4 + 32) = (unint64_t)*((double *)result + 23);
              BOOL v20 = *((_BYTE *)result + 274) != 0;
              *(_BYTE *)(a4 + 43) = *((_BYTE *)result + 274);
              *(_DWORD *)(a4 + 20) = 4 * v20;
              *(_DWORD *)(a4 + 24) = v19;
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t *GTMTLSMComputePipelineState_computePipelineDescriptor( uint64_t *result, uint64_t a2, void *a3, apr_pool_t *a4)
{
  uint64_t v6 = *(const void **)(a2 + 56);
  if (v6) {
    return (uint64_t *)memcpy(a3, v6, 0x3C0uLL);
  }
  if (*(void *)(a2 + 48))
  {
    uint64_t result = (uint64_t *)memcpy(a3, &GTMTLComputePipelineDescriptorDefaults, 0x3C0uLL);
    a3[106] = *(void *)(a2 + 48);
LABEL_5:
    a3[113] = *(void *)(a2 + 104);
    return result;
  }

  uint64_t v7 = *(void *)(a2 + 40);
  if (v7 && *(void *)(a2 + 184))
  {
    uint64_t v9 = result;
    uint64_t Object = GTMTLSMContext_getObject(*result, v7, *(void *)(a2 + 16));
    uint64_t result = (uint64_t *)GTMTLSMComputePipelineState_computePipelineDescriptor(v9, Object, a3, a4);
    uint64_t v11 = **(void **)(a2 + 184);
    if (v11)
    {
      uint64_t v12 = a3[95] + v11;
      uint64_t result = (uint64_t *)apr_palloc(a4, 8 * v12);
      if (a3[95])
      {
        unint64_t v13 = 0LL;
        uint64_t v14 = a3[94];
        do
        {
          result[v13] = *(void *)(v14 + 8 * v13);
          ++v13;
        }

        while (a3[95] > v13);
      }

      __int128 v15 = *(unint64_t **)(a2 + 184);
      if (*v15)
      {
        unint64_t v16 = 0LL;
        do
        {
          result[v16 + a3[95]] = v15[v16 + 1];
          ++v16;
        }

        while (*v15 > v16);
      }

      a3[94] = result;
      a3[95] = v12;
    }

    goto LABEL_5;
  }

  if (*(_DWORD *)(a2 + 4) == -16101)
  {
    uint64_t result = (uint64_t *)memcpy(a3, &GTMTLComputePipelineDescriptorDefaults, 0x3C0uLL);
    goto LABEL_5;
  }

  return result;
}

uint64_t GTMTLSMRenderPipelineState_renderPipelineDescriptorType(uint64_t *a1, void *a2)
{
  unsigned int v2 = a2;
  if (a1)
  {
    uint64_t v4 = a2[5];
    for (unint64_t i = v2[2]; ; unint64_t i = Object[2])
    {
      uint64_t Object = GTMTLSMContext_getObject(*a1, v4, i);
      if (!Object || *(_DWORD *)Object != 71) {
        break;
      }
      unsigned int v2 = Object;
      uint64_t v4 = Object[5];
    }
  }

  if (v2[6]) {
    return 1LL;
  }
  if (v2[8]) {
    return 2LL;
  }
  if (v2[9]) {
    return 3LL;
  }
  return 0LL;
}

_DWORD *GTMTLSMRenderPipelineState_renderPipelineDescriptor( uint64_t *a1, void *a2, uint64_t a3, apr_pool_t *a4)
{
  uint64_t v6 = (const void *)a2[6];
  if (v6) {
    return memcpy((void *)a3, v6, 0x5E8uLL);
  }
  uint64_t result = GTMTLSMContext_getObject(*a1, a2[5], a2[2]);
  if (result && *result == 71)
  {
    uint64_t result = (_DWORD *)GTMTLSMRenderPipelineState_renderPipelineDescriptor(a1, result, a3, a4);
    int v10 = (void *)a2[10];
    uint64_t v11 = v10[9];
    if (v11)
    {
      uint64_t v12 = (unsigned __int16)(*(_WORD *)(a3 + 1072) + v11);
      uint64_t result = apr_palloc(a4, 8 * v12);
      if (*(void *)(a3 + 1072))
      {
        unint64_t v13 = 0LL;
        uint64_t v14 = *(void *)(a3 + 1064);
        do
        {
          *(void *)&result[2 * v13] = *(void *)(v14 + 8 * v13);
          ++v13;
        }

        while (*(void *)(a3 + 1072) > v13);
      }

      int v10 = (void *)a2[10];
      if (v10[9])
      {
        unint64_t v15 = 0LL;
        uint64_t v16 = v10[8];
        do
        {
          *(void *)&result[2 * v15 + 2 * *(void *)(a3 + 1072)] = *(void *)(v16 + 8 * v15);
          ++v15;
        }

        while (v10[9] > v15);
      }

      *(void *)(a3 + 1064) = result;
      *(void *)(a3 + 1072) = v12;
    }

    uint64_t v17 = v10[1];
    if (v17)
    {
      uint64_t v18 = (unsigned __int16)(*(_DWORD *)(a3 + 880) + v17);
      uint64_t result = apr_palloc(a4, 8 * v18);
      if (*(void *)(a3 + 880))
      {
        unint64_t v19 = 0LL;
        uint64_t v20 = *(void *)(a3 + 872);
        do
        {
          *(void *)&result[2 * v19] = *(void *)(v20 + 8 * v19);
          ++v19;
        }

        while (*(void *)(a3 + 880) > v19);
      }

      uint64_t v21 = (uint64_t *)a2[10];
      if (v21[1])
      {
        unint64_t v22 = 0LL;
        uint64_t v23 = *v21;
        do
        {
          *(void *)&result[2 * v22 + 2 * *(void *)(a3 + 880)] = *(void *)(v23 + 8 * v22);
          ++v22;
        }

        while (v21[1] > v22);
      }

      *(void *)(a3 + 872) = result;
      *(void *)(a3 + 880) = v18;
    }

    *(void *)(a3 + 1280) = a2[13];
  }

  return result;
}

uint64_t *GTMTLSMRenderPipelineState_tilePipelineDescriptor( uint64_t *result, void *a2, uint64_t **a3, apr_pool_t *a4)
{
  int v5 = (__int128 *)a2[8];
  if (v5)
  {
    __int128 v6 = *v5;
    __int128 v7 = v5[2];
    *((_OWORD *)a3 + 1) = v5[1];
    *((_OWORD *)a3 + 2) = v7;
    *(_OWORD *)a3 = v6;
    __int128 v8 = v5[3];
    __int128 v9 = v5[4];
    __int128 v10 = v5[6];
    *((_OWORD *)a3 + 5) = v5[5];
    *((_OWORD *)a3 + 6) = v10;
    *((_OWORD *)a3 + 3) = v8;
    *((_OWORD *)a3 + 4) = v9;
    __int128 v11 = v5[7];
    __int128 v12 = v5[8];
    __int128 v13 = v5[10];
    *((_OWORD *)a3 + 9) = v5[9];
    *((_OWORD *)a3 + 10) = v13;
    *((_OWORD *)a3 + memset(v56, 0, 7) = v11;
    *((_OWORD *)a3 + 8) = v12;
  }

  else
  {
    uint64_t v16 = result;
    uint64_t result = GTMTLSMContext_getObject(*result, a2[5], a2[2]);
    if (result && *(_DWORD *)result == 71)
    {
      GTMTLSMRenderPipelineState_tilePipelineDescriptor(v16, result, a3, a4);
      uint64_t v17 = (uint64_t *)(unsigned __int16)(*(_DWORD *)(a2[10] + 56LL) + *((_WORD *)a3 + 4));
      uint64_t result = (uint64_t *)apr_palloc(a4, 8LL * (void)v17);
      if (a3[1])
      {
        unint64_t v18 = 0LL;
        unint64_t v19 = *a3;
        do
        {
          result[v18] = v19[v18];
          ++v18;
        }

        while ((unint64_t)a3[1] > v18);
      }

      uint64_t v20 = a2[10];
      if (*(void *)(v20 + 56))
      {
        unint64_t v21 = 0LL;
        uint64_t v22 = *(void *)(v20 + 48);
        do
        {
          result[(void)a3[1] + v21] = *(void *)(v22 + 8 * v21);
          ++v21;
        }

        while (*(void *)(v20 + 56) > v21);
      }

      *a3 = result;
      a3[1] = v17;
    }
  }

  return result;
}

uint64_t GTMTLSMRenderPipelineState_fragmentFunction(uint64_t *a1, void *a2)
{
  if (a2[11]) {
    return 0LL;
  }
  uint64_t Object = a2;
  while (1)
  {
    uint64_t v5 = Object[6];
    if (v5)
    {
      uint64_t v7 = v5 + 1176;
      return *(void *)v7;
    }

    uint64_t v6 = Object[9];
    if (v6) {
      break;
    }
    uint64_t Object = GTMTLSMContext_getObject(*a1, Object[5], Object[2]);
    if (Object[11]) {
      return 0LL;
    }
  }

  uint64_t v7 = v6 + 344;
  return *(void *)v7;
}

BOOL GTMTLSMPipelineState_supportsIndirectCommandBuffers(uint64_t a1)
{
  if (*(_DWORD *)a1 == 29)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    if (v3)
    {
      int v2 = *(unsigned __int8 *)(v3 + 956);
      return v2 != 0;
    }
  }

  else if (*(_DWORD *)a1 == 71)
  {
    uint64_t v1 = *(void *)(a1 + 48);
    if (v1)
    {
      int v2 = *(unsigned __int8 *)(v1 + 1499);
      return v2 != 0;
    }

    uint64_t v4 = *(void *)(a1 + 72);
    if (v4)
    {
      int v2 = *(unsigned __int8 *)(v4 + 510);
      return v2 != 0;
    }
  }

  return 0LL;
}

uint64_t GTMTLSMPipelineState_sortIndirectResources(uint64_t *a1, int a2)
{
  if (a2 < 1) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  do
  {
    uint64_t v6 = *v5;
    if (GTMTLSMPipelineState_supportsIndirectCommandBuffers(*v5))
    {
      *uint64_t v5 = a1[(int)v3];
      a1[(int)v3] = v6;
      uint64_t v3 = (v3 + 1);
    }

    ++v5;
    --v4;
  }

  while (v4);
  return v3;
}

void GTMTLSMContext_indirectCommandBufferResources( uint64_t a1, _DWORD **a2, unint64_t a3, apr_pool_t *p)
{
  __int128 v8 = apr_array_make(p, 128, 8);
  GTMTLSMContext_getObjects(a2[1], a3, v8);
  elts = v8->elts;
  uint64_t nelts = v8->nelts;
  __int128 v11 = apr_array_make(p, v8->nelts, 24);
  if ((int)nelts >= 1)
  {
    do
    {
      uint64_t v12 = *(void *)elts;
      elts += 8;
      __int128 v13 = (int8x16_t *)apr_array_push(v11);
      *__int128 v13 = vextq_s8(*(int8x16_t *)(v12 + 104), *(int8x16_t *)(v12 + 104), 8uLL);
      v13[1].i64[0] = *(void *)(v12 + 8);
      --nelts;
    }

    while (nelts);
  }

  qsort( v11->elts,  v11->nelts,  v11->elt_size,  (int (__cdecl *)(const void *, const void *))GTMTLGPUAddressResource_compare);
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = v11;
  uint64_t v14 = apr_hash_make(p);
  *(void *)(a1 + 24) = v14;
  unint64_t v15 = apr_hash_make(p);
  *(void *)(a1 + 32) = v15;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v8->uint64_t nelts = 0;
  GTMTLSMContext_getObjects(a2[4], a3, v8);
  uint64_t v16 = (uint64_t *)v8->elts;
  LODWORD(v1memset(v56, 0, 7) = GTMTLSMPipelineState_sortIndirectResources(v16, v8->nelts);
  v8->uint64_t nelts = v17;
  unint64_t v18 = apr_array_make(p, v17, 32);
  if ((int)v17 >= 1)
  {
    uint64_t v17 = v17;
    do
    {
      unint64_t v19 = (void *)*v16++;
      uint64_t v20 = apr_array_push(v18);
      uint64_t v21 = v19[1];
      *uint64_t v20 = v19[12];
      v20[1] = v21;
      v20[2] = v19[14];
      --v17;
    }

    while (v17);
  }

  uint64_t v22 = v18->nelts;
  if ((int)v22 >= 1)
  {
    uint64_t v23 = v18->elts;
    do
    {
      apr_hash_set(v14, v23, 8LL, v23);
      v23 += 32;
      --v22;
    }

    while (v22);
  }

  v8->uint64_t nelts = 0;
  GTMTLSMContext_getObjects(a2[5], a3, v8);
  unint64_t v24 = (uint64_t *)v8->elts;
  int v25 = GTMTLSMPipelineState_sortIndirectResources(v24, v8->nelts);
  v8->uint64_t nelts = v25;
  __int128 v26 = apr_array_make(p, v25, 32);
  if (v25 >= 1)
  {
    uint64_t v27 = v25;
    do
    {
      __int128 v28 = (void *)*v24++;
      int v29 = apr_array_push(v26);
      uint64_t v30 = v28[1];
      *int v29 = v28[12];
      v29[1] = v30;
      _DWORD v29[2] = v28[14];
      --v27;
    }

    while (v27);
  }

  uint64_t v31 = v26->nelts;
  if ((int)v31 >= 1)
  {
    int v32 = v26->elts;
    do
    {
      apr_hash_set(v15, v32, 8LL, v32);
      v32 += 32;
      --v31;
    }

    while (v31);
  }

void GTMTLSMCommandEncoder_processTraceFunc(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 8616;
  int v7 = *((_DWORD *)a2 + 2);
  if (v7 <= -16088)
  {
    if (v7 <= -16163)
    {
      switch(v7)
      {
        case -16354:
          uint64_t v12 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          uint64_t v13 = *((void *)v12 + 1);
          if (!v13) {
            return;
          }
          int v14 = 21;
          goto LABEL_433;
        case -16353:
          int v239 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          uint64_t v240 = *((void *)v239 + 1);
          if (!v240) {
            return;
          }
          *(_DWORD *)a1 = 70;
          uint64_t v241 = *a2;
          *(void *)(a1 + 8) = v240;
          *(void *)(a1 + 16) = v241;
          *(void *)(a1 + 24) = -1LL;
          *(void *)(a1 + 40) = *(void *)v239;
          id v242 = GTTraceFunc_argumentBytesWithMap(a2, v239[16], a3);
          uint64_t v243 = a1 + 56;
          goto LABEL_276;
        case -16352:
          unint64_t v244 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          uint64_t v245 = *((void *)v244 + 1);
          if (v245)
          {
            *(_DWORD *)a1 = 28;
            uint64_t v246 = *a2;
            *(void *)(a1 + 8) = v245;
            *(void *)(a1 + 16) = v246;
            *(void *)(a1 + 24) = -1LL;
            *(void *)(a1 + 40) = *(void *)v244;
            bzero((void *)(a1 + 56), 0x888uLL);
            memset_pattern16((void *)(a1 + 2240), &unk_318430, 0x100uLL);
            *(void *)(a1 + 824) = -1LL;
            *(void *)&__int128 v247 = -1LL;
            *((void *)&v247 + 1) = -1LL;
            *(_OWORD *)(a1 + 792) = v247;
            *(_OWORD *)(a1 + 808) = v247;
            *(_OWORD *)(a1 + 760) = v247;
            *(_OWORD *)(a1 + 776) = v247;
            *(_OWORD *)(a1 + 728) = v247;
            *(_OWORD *)(a1 + 744) = v247;
            *(_OWORD *)(a1 + 696) = v247;
            *(_OWORD *)(a1 + 712) = v247;
            *(_OWORD *)(a1 + 664) = v247;
            *(_OWORD *)(a1 + 680) = v247;
            *(_OWORD *)(a1 + 632) = v247;
            *(_OWORD *)(a1 + 648) = v247;
            *(_OWORD *)(a1 + 600) = v247;
            *(_OWORD *)(a1 + 616) = v247;
            *(_OWORD *)(a1 + 584) = v247;
            *(_BYTE *)(a1 + 2304) = -1;
          }

          return;
        case -16351:
          BOOL v248 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          uint64_t v249 = *((void *)v248 + 1);
          if (v249)
          {
            *(_DWORD *)a1 = 65;
            uint64_t v250 = *a2;
            *(void *)(a1 + 8) = v249;
            *(void *)(a1 + 16) = v250;
            *(void *)(a1 + 24) = -1LL;
            *(void *)(a1 + 40) = *(void *)v248;
            char v251 = GTTraceFunc_argumentBytesWithMap(a2, v248[16], a3);
            *(_OWORD *)(a1 + 128) = 0u;
            *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v20 - 144) = 0u;
            *(_OWORD *)(a1 + 160) = 0u;
            *(_OWORD *)(a1 + 176) = 0u;
            *(void *)(a1 + 192) = 0LL;
            *(void *)(a1 + 56) = v251;
            memset_pattern16((void *)(a1 + 64), &unk_318440, 0x40uLL);
            *(_WORD *)(a1 + 192) = 1028;
          }

          return;
        case -16350:
        case -16349:
        case -16348:
        case -16347:
        case -16346:
        case -16345:
        case -16344:
        case -16343:
        case -16342:
        case -16341:
        case -16340:
        case -16338:
        case -16327:
        case -16326:
        case -16324:
        case -16323:
        case -16322:
        case -16321:
        case -16320:
        case -16319:
        case -16318:
        case -16317:
        case -16316:
        case -16315:
        case -16314:
        case -16313:
        case -16312:
        case -16311:
        case -16310:
        case -16309:
        case -16308:
        case -16307:
        case -16306:
        case -16305:
        case -16304:
        case -16303:
        case -16302:
        case -16301:
        case -16300:
        case -16299:
        case -16298:
        case -16297:
        case -16296:
        case -16295:
        case -16294:
        case -16293:
        case -16292:
        case -16291:
        case -16290:
        case -16289:
        case -16287:
        case -16284:
        case -16283:
        case -16282:
        case -16280:
        case -16251:
        case -16250:
        case -16249:
        case -16248:
        case -16245:
        case -16244:
        case -16243:
        case -16242:
        case -16241:
        case -16240:
        case -16239:
        case -16238:
        case -16237:
        case -16236:
        case -16235:
        case -16234:
        case -16233:
        case -16232:
        case -16231:
        case -16230:
        case -16229:
        case -16228:
        case -16221:
        case -16220:
        case -16218:
        case -16217:
        case -16216:
        case -16215:
          return;
        case -16339:
        case -16288:
        case -16281:
          goto LABEL_54;
        case -16337:
          *(void *)(a1 + 64) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
          return;
        case -16336:
          uint64_t v252 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v253 = *((void *)v252 + 3);
          uint64_t v254 = 1LL << v253;
          uint64_t v255 = a1 + 8LL * (int)(v253 >> 6);
          *(void *)(v255 + 72) &= ~v254;
          *(void *)(a1 + 80 + 8LL * *((void *)v252 + 3) + 8) = *((void *)v252 + 1);
          *(void *)(a1 + 80 + 8LL * (int)(*((void *)v252 + 3) >> 6)) &= ~(1LL << *((void *)v252 + 3));
          *(void *)(a1 + 80 + 8LL * *((void *)v252 + 3) + 256) = *((void *)v252 + 2);
          return;
        case -16335:
          size_t v256 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v27 = v256;
          unint64_t v257 = *((void *)v256 + 1);
          unint64_t v258 = *((void *)v256 + 2) + v257;
          unint64_t v259 = 64LL;
          if (v258 >= 0x40) {
            unint64_t v258 = 64LL;
          }
          char v260 = v258 - v257;
          if (v258 < v257) {
            char v260 = 0;
          }
          uint64_t v261 = ~(-1LL << v260);
          if (v257 <= v258) {
            char v262 = v257 & 0x3F;
          }
          else {
            char v262 = 0;
          }
          int v264 = (uint64_t *)(a1 + 80);
          uint64_t v263 = *(void *)(a1 + 80);
          *(void *)(a1 + 72) &= ~(v261 << v262);
          unint64_t v265 = *((void *)v256 + 1);
          if (*((void *)v256 + 2) + v265 < 0x40) {
            unint64_t v259 = *((void *)v256 + 2) + v265;
          }
          char v266 = v259 - v265;
          if (v259 < v265) {
            char v266 = 0;
          }
          uint64_t v267 = ~(-1LL << v266);
          if (v265 <= v259) {
            char v268 = v265 & 0x3F;
          }
          else {
            char v268 = 0;
          }
          *int v264 = v263 & ~(v267 << v268);
          uint64_t v269 = *((void *)v256 + 1);
          unint64_t v270 = GTTraceFunc_argumentBytesWithMap(a2, v256[24], a3);
          if ((int)*((void *)v27 + 2) >= 1)
          {
            __int128 v271 = &v264[v269 + 1];
            uint64_t v272 = *((void *)v27 + 2);
            do
            {
              uint64_t v273 = *(void *)v270;
              v270 += 8;
              *v271++ = v273;
              --v272;
            }

            while (v272);
          }

          uint64_t v162 = a1 + 8LL * *((void *)v27 + 1) + 336;
          goto LABEL_352;
        case -16334:
          unint64_t v274 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8LL * *((void *)v274 + 2) + 832) = *((void *)v274 + 1);
          return;
        case -16333:
          char v275 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v276 = v275;
          unint64_t v277 = *((void *)v275 + 1);
          unint64_t v278 = *((void *)v275 + 2) + v277;
          if (v278 >= 0x40) {
            unint64_t v278 = 64LL;
          }
          char v279 = v278 - v277;
          if (v278 < v277) {
            char v279 = 0;
          }
          uint64_t v280 = ~(-1LL << v279);
          if (v277 <= v278) {
            char v281 = v277 & 0x3F;
          }
          else {
            char v281 = 0;
          }
          *(void *)(a1 + 80) &= ~(v280 << v281);
          uint64_t v282 = *((void *)v275 + 1);
          __int128 v283 = GTTraceFunc_argumentBytesWithMap(a2, v275[24], a3);
          if ((int)*((void *)v276 + 2) >= 1)
          {
            id v284 = (void *)(a1 + 8 * v282 + 832);
            uint64_t v285 = *((void *)v276 + 2);
            do
            {
              uint64_t v286 = *(void *)v283;
              v283 += 8;
              *v284++ = v286;
              --v285;
            }

            while (v285);
          }

          return;
        case -16332:
          uint64_t v287 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8LL * *((void *)v287 + 2) + 1856) = *((void *)v287 + 1);
          return;
        case -16331:
          uint64_t v288 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v289 = v288;
          unint64_t v290 = *((void *)v288 + 1);
          unint64_t v291 = *((void *)v288 + 2) + v290;
          if (v291 >= 0x40) {
            unint64_t v291 = 64LL;
          }
          char v292 = v291 - v290;
          if (v291 < v290) {
            char v292 = 0;
          }
          uint64_t v293 = ~(-1LL << v292);
          if (v290 <= v291) {
            char v294 = v290 & 0x3F;
          }
          else {
            char v294 = 0;
          }
          *(void *)(a1 + 80) &= ~(v293 << v294);
          uint64_t v295 = *((void *)v288 + 1);
          unsigned int v296 = GTTraceFunc_argumentBytesWithMap(a2, v288[24], a3);
          if ((int)*((void *)v289 + 2) >= 1)
          {
            uint64_t v297 = (void *)(a1 + 8 * v295 + 1856);
            uint64_t v298 = *((void *)v289 + 2);
            do
            {
              uint64_t v299 = *(void *)v296;
              v296 += 8;
              *v297++ = v299;
              --v298;
            }

            while (v298);
          }

          return;
        case -16330:
          int v300 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8LL * *((void *)v300 + 2) + 1856) = *((void *)v300 + 1);
          *(_DWORD *)(a1 + 1984 + 4LL * *((void *)v300 + 2) + 192) = *((_DWORD *)v300 + 6);
          *(_DWORD *)(a1 + 1984 + 4LL * *((void *)v300 + 2) + 256) = *((_DWORD *)v300 + 7);
          return;
        case -16329:
          unint64_t v301 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v171 = v301;
          unint64_t v302 = *((void *)v301 + 1);
          unint64_t v303 = *((void *)v301 + 2) + v302;
          if (v303 >= 0x40) {
            unint64_t v303 = 64LL;
          }
          char v304 = v303 - v302;
          if (v303 < v302) {
            char v304 = 0;
          }
          uint64_t v305 = ~(-1LL << v304);
          if (v302 <= v303) {
            char v306 = v302 & 0x3F;
          }
          else {
            char v306 = 0;
          }
          *(void *)(a1 + 80) &= ~(v305 << v306);
          uint64_t v307 = *((void *)v301 + 1);
          unint64_t v308 = GTTraceFunc_argumentBytesWithMap(a2, v301[24], a3);
          if ((int)*((void *)v171 + 2) >= 1)
          {
            uint64_t v309 = (void *)(a1 + 8 * v307 + 1856);
            uint64_t v310 = *((void *)v171 + 2);
            do
            {
              uint64_t v311 = *(void *)v308;
              v308 += 8;
              *v309++ = v311;
              --v310;
            }

            while (v310);
          }

          uint64_t v312 = a1 + 1984;
          int v313 = (void *)(a1 + 1984 + 4LL * *((void *)v171 + 1) + 192);
          unint64_t v314 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
          memcpy(v313, v314, 4LL * *((void *)v171 + 2));
          uint64_t v162 = v312 + 4LL * *((void *)v171 + 1) + 256;
          goto LABEL_512;
        case -16328:
          uint64_t v315 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 4LL * *((void *)v315 + 2) + 2040) = *((void *)v315 + 1);
          return;
        case -16325:
        case -16285:
        case -16246:
          goto LABEL_65;
        case -16286:
          uint64_t v316 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          uint64_t v317 = *((void *)v316 + 1);
          if (!v317) {
            return;
          }
          *(_DWORD *)a1 = 70;
          uint64_t v318 = *a2;
          *(void *)(a1 + 8) = v317;
          *(void *)(a1 + 16) = v318;
          *(void *)(a1 + 24) = -1LL;
          *(void *)(a1 + 40) = *(void *)v316;
          uint64_t v243 = a1 + 56;
          id v242 = 0LL;
LABEL_276:
          GTMTLSMRenderCommandEncoder_init(v243, (uint64_t)v242);
          return;
        case -16279:
          return;
        case -16278:
          unint64_t v319 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v320 = *((void *)v319 + 3);
          uint64_t v321 = 1LL << v320;
          uint64_t v322 = a1 + 56 + 8LL * (int)(v320 >> 6);
          *(void *)(v322 + 8) &= ~v321;
          *(void *)(a1 + 80 + 8LL * *((void *)v319 + 3)) = *((void *)v319 + 1);
          unint64_t v323 = *((void *)v319 + 3);
          uint64_t v324 = 1LL << v323;
          uint64_t v325 = a1 + 56 + 8LL * (int)(v323 >> 6);
          *(void *)(v325 + 16) &= ~v324;
          uint64_t v326 = *((void *)v319 + 2);
          uint64_t v327 = a1 + 80 + 8LL * *((void *)v319 + 3);
          goto LABEL_448;
        case -16277:
          uint64_t v328 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v27 = v328;
          unint64_t v329 = *((void *)v328 + 1);
          unint64_t v330 = *((void *)v328 + 2) + v329;
          if (v330 >= 0x40) {
            unint64_t v330 = 64LL;
          }
          char v331 = v330 - v329;
          if (v330 < v329) {
            char v331 = 0;
          }
          uint64_t v332 = ~(-1LL << v331);
          if (v329 <= v330) {
            char v333 = v329 & 0x3F;
          }
          else {
            char v333 = 0;
          }
          uint64_t v334 = *(void *)(a1 + 72);
          *(void *)(a1 + 64) &= ~(v332 << v333);
          unint64_t v335 = *((void *)v328 + 1);
          unint64_t v336 = *((void *)v328 + 2) + v335;
          if (v336 >= 0x40) {
            unint64_t v336 = 64LL;
          }
          char v337 = v336 - v335;
          if (v336 < v335) {
            char v337 = 0;
          }
          uint64_t v338 = ~(-1LL << v337);
          if (v335 <= v336) {
            char v339 = v335 & 0x3F;
          }
          else {
            char v339 = 0;
          }
          *(void *)(a1 + 72) = v334 & ~(v338 << v339);
          uint64_t v340 = *((void *)v328 + 1);
          uint64_t v341 = GTTraceFunc_argumentBytesWithMap(a2, v328[24], a3);
          if ((int)*((void *)v27 + 2) >= 1)
          {
            uint64_t v342 = (void *)(a1 + 8 * v340 + 80);
            uint64_t v343 = *((void *)v27 + 2);
            do
            {
              uint64_t v344 = *(void *)v341;
              v341 += 8;
              *v342++ = v344;
              --v343;
            }

            while (v343);
          }

          uint64_t v162 = a1 + 8LL * *((void *)v27 + 1) + 328;
          goto LABEL_352;
        case -16276:
          uint64_t v345 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8LL * *((void *)v345 + 2) + 824) = *((void *)v345 + 1);
          return;
        case -16275:
          uint64_t v346 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v347 = v346;
          unint64_t v348 = *((void *)v346 + 1);
          unint64_t v349 = *((void *)v346 + 2) + v348;
          if (v349 >= 0x40) {
            unint64_t v349 = 64LL;
          }
          char v350 = v349 - v348;
          if (v349 < v348) {
            char v350 = 0;
          }
          uint64_t v351 = ~(-1LL << v350);
          if (v348 <= v349) {
            char v352 = v348 & 0x3F;
          }
          else {
            char v352 = 0;
          }
          *(void *)(a1 + 72) &= ~(v351 << v352);
          uint64_t v353 = *((void *)v346 + 1);
          uint64_t v354 = GTTraceFunc_argumentBytesWithMap(a2, v346[24], a3);
          if ((int)*((void *)v347 + 2) >= 1)
          {
            uint64_t v355 = (void *)(a1 + 8 * v353 + 824);
            uint64_t v356 = *((void *)v347 + 2);
            do
            {
              uint64_t v357 = *(void *)v354;
              v354 += 8;
              *v355++ = v357;
              --v356;
            }

            while (v356);
          }

          return;
        case -16274:
          unint64_t v358 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8LL * *((void *)v358 + 2) + 1848) = *((void *)v358 + 1);
          return;
        case -16273:
          uint64_t v359 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v360 = v359;
          unint64_t v361 = *((void *)v359 + 1);
          unint64_t v362 = *((void *)v359 + 2) + v361;
          if (v362 >= 0x40) {
            unint64_t v362 = 64LL;
          }
          char v363 = v362 - v361;
          if (v362 < v361) {
            char v363 = 0;
          }
          uint64_t v364 = ~(-1LL << v363);
          if (v361 <= v362) {
            char v365 = v361 & 0x3F;
          }
          else {
            char v365 = 0;
          }
          *(void *)(a1 + 72) &= ~(v364 << v365);
          uint64_t v366 = *((void *)v359 + 1);
          uint64_t v367 = GTTraceFunc_argumentBytesWithMap(a2, v359[24], a3);
          if ((int)*((void *)v360 + 2) >= 1)
          {
            uint64_t v368 = (void *)(a1 + 8 * v366 + 1848);
            uint64_t v369 = *((void *)v360 + 2);
            do
            {
              uint64_t v370 = *(void *)v367;
              v367 += 8;
              *v368++ = v370;
              --v369;
            }

            while (v369);
          }

          return;
        case -16272:
          uint64_t v371 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 56 + 8LL * *((void *)v371 + 2) + 1792) = *((void *)v371 + 1);
          *(_DWORD *)(a1 + 56 + 4LL * *((void *)v371 + 2) + 10036) = *((_DWORD *)v371 + 6);
          *(_DWORD *)(a1 + 56 + 4LL * *((void *)v371 + 2) + 10100) = *((_DWORD *)v371 + 7);
          return;
        case -16271:
          uint64_t v372 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v171 = v372;
          unint64_t v373 = *((void *)v372 + 1);
          unint64_t v374 = *((void *)v372 + 2) + v373;
          if (v374 >= 0x40) {
            unint64_t v374 = 64LL;
          }
          char v375 = v374 - v373;
          if (v374 < v373) {
            char v375 = 0;
          }
          uint64_t v376 = ~(-1LL << v375);
          if (v373 <= v374) {
            char v377 = v373 & 0x3F;
          }
          else {
            char v377 = 0;
          }
          *(void *)(a1 + 72) &= ~(v376 << v377);
          uint64_t v378 = *((void *)v372 + 1);
          uint64_t v379 = GTTraceFunc_argumentBytesWithMap(a2, v372[24], a3);
          if ((int)*((void *)v171 + 2) >= 1)
          {
            uint64_t v380 = (void *)(a1 + 8 * v378 + 1848);
            uint64_t v381 = *((void *)v171 + 2);
            do
            {
              uint64_t v382 = *(void *)v379;
              v379 += 8;
              *v380++ = v382;
              --v381;
            }

            while (v381);
          }

          uint64_t v383 = a1 + 56;
          uint64_t v384 = (void *)(a1 + 56 + 4LL * *((void *)v171 + 1) + 10036);
          unsigned int v385 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
          memcpy(v384, v385, 4LL * *((void *)v171 + 2));
          uint64_t v180 = v383 + 4LL * *((void *)v171 + 1);
          uint64_t v181 = 10100LL;
          goto LABEL_511;
        case -16270:
          uint64_t v386 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8608) = 1LL;
          __int128 v387 = *(_OWORD *)(v386 + 24);
          __int128 v388 = *(_OWORD *)(v386 + 40);
          *(_OWORD *)uint64_t v6 = *(_OWORD *)(v386 + 8);
          *(_OWORD *)(v6 + 16) = v387;
          *(_OWORD *)(v6 + 32) = v388;
          return;
        case -16269:
          return;
        case -16268:
          return;
        case -16267:
          return;
        case -16266:
          uint64_t v389 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 10056) = *((_DWORD *)v389 + 2);
          *(_DWORD *)(a1 + 10060) = *((_DWORD *)v389 + 3);
          *(_DWORD *)(a1 + 10064) = *((_DWORD *)v389 + 4);
          return;
        case -16265:
          uint64_t v390 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 9384) = 1LL;
          __int128 v391 = *(_OWORD *)(v390 + 24);
          *(_OWORD *)(a1 + 9392) = *(_OWORD *)(v390 + 8);
          *(_OWORD *)(a1 + 9408) = v391;
          return;
        case -16264:
          return;
        case -16263:
          unint64_t v144 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v392 = *((void *)v144 + 3);
          uint64_t v393 = 1LL << v392;
          uint64_t v394 = a1 + 8LL * (int)(v392 >> 6);
          *(void *)(v394 + 1976) &= ~v393;
          uint64_t v148 = *((void *)v144 + 1);
          uint64_t v198 = a1 + 1984;
          goto LABEL_447;
        case -16262:
          uint64_t v395 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v27 = v395;
          unint64_t v396 = *((void *)v395 + 1);
          unint64_t v397 = *((void *)v395 + 2) + v396;
          if (v397 >= 0x40) {
            unint64_t v397 = 64LL;
          }
          char v398 = v397 - v396;
          if (v397 < v396) {
            char v398 = 0;
          }
          uint64_t v399 = ~(-1LL << v398);
          if (v396 <= v397) {
            char v400 = v396 & 0x3F;
          }
          else {
            char v400 = 0;
          }
          *(void *)(a1 + 1976) &= ~(v399 << v400);
          uint64_t v401 = *((void *)v395 + 1);
          int v402 = GTTraceFunc_argumentBytesWithMap(a2, v395[24], a3);
          if ((int)*((void *)v27 + 2) >= 1)
          {
            unint64_t v403 = (void *)(a1 + 8 * v401 + 1984);
            uint64_t v404 = *((void *)v27 + 2);
            do
            {
              uint64_t v405 = *(void *)v402;
              v402 += 8;
              *v403++ = v405;
              --v404;
            }

            while (v404);
          }

          uint64_t v162 = a1 + 8LL * *((void *)v27 + 1) + 2232;
LABEL_352:
          unsigned int v406 = v27[25];
LABEL_496:
          __int128 v572 = GTTraceFunc_argumentBytesWithMap(a2, v406, a3);
          size_t v573 = 8LL * *((void *)v27 + 2);
          goto LABEL_513;
        case -16261:
          uint64_t v407 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8LL * *((void *)v407 + 2) + 2480) = *((void *)v407 + 1);
          return;
        case -16260:
          unint64_t v408 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v409 = *((void *)v408 + 1);
          uint64_t v410 = GTTraceFunc_argumentBytesWithMap(a2, v408[24], a3);
          if ((int)*((void *)v408 + 2) >= 1)
          {
            unint64_t v411 = (void *)(a1 + 8 * v409 + 2480);
            uint64_t v412 = *((void *)v408 + 2);
            do
            {
              uint64_t v413 = *(void *)v410;
              v410 += 8;
              *v411++ = v413;
              --v412;
            }

            while (v412);
          }

          return;
        case -16259:
          uint64_t v414 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8LL * *((void *)v414 + 2) + 3504) = *((void *)v414 + 1);
          return;
        case -16258:
          __int128 v415 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v416 = *((void *)v415 + 1);
          uint64_t v417 = GTTraceFunc_argumentBytesWithMap(a2, v415[24], a3);
          if ((int)*((void *)v415 + 2) >= 1)
          {
            __int128 v418 = (void *)(a1 + 8 * v416 + 3504);
            uint64_t v419 = *((void *)v415 + 2);
            do
            {
              uint64_t v420 = *(void *)v417;
              v417 += 8;
              *v418++ = v420;
              --v419;
            }

            while (v419);
          }

          return;
        case -16257:
          __int128 v421 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 56 + 8LL * *((void *)v421 + 2) + 3448) = *((void *)v421 + 1);
          *(_DWORD *)(a1 + 56 + 4LL * *((void *)v421 + 2) + 10164) = *((_DWORD *)v421 + 6);
          *(_DWORD *)(a1 + 56 + 4LL * *((void *)v421 + 2) + 10228) = *((_DWORD *)v421 + 7);
          return;
        case -16256:
          uint64_t v171 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v422 = *((void *)v171 + 1);
          char v423 = GTTraceFunc_argumentBytesWithMap(a2, v171[24], a3);
          if ((int)*((void *)v171 + 2) >= 1)
          {
            uint64_t v424 = (void *)(a1 + 8 * v422 + 3504);
            uint64_t v425 = *((void *)v171 + 2);
            do
            {
              uint64_t v426 = *(void *)v423;
              v423 += 8;
              *v424++ = v426;
              --v425;
            }

            while (v425);
          }

          uint64_t v427 = a1 + 56;
          uint64_t v428 = (void *)(a1 + 56 + 4LL * *((void *)v171 + 1) + 10164);
          char v429 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
          memcpy(v428, v429, 4LL * *((void *)v171 + 2));
          uint64_t v180 = v427 + 4LL * *((void *)v171 + 1);
          uint64_t v181 = 10228LL;
LABEL_511:
          uint64_t v162 = v180 + v181;
LABEL_512:
          __int128 v572 = GTTraceFunc_argumentBytesWithMap(a2, v171[26], a3);
          size_t v573 = 4LL * *((void *)v171 + 2);
LABEL_513:
          v601 = (void *)v162;
LABEL_514:
          memcpy(v601, v572, v573);
          return;
        case -16255:
          char v430 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 10068) = *((_DWORD *)v430 + 2);
          *(_DWORD *)(a1 + 10072) = *((_DWORD *)v430 + 3);
          *(_DWORD *)(a1 + 10076) = *((_DWORD *)v430 + 4);
          *(_DWORD *)(a1 + 10080) = *((_DWORD *)v430 + 5);
          return;
        case -16254:
          return;
        case -16253:
          int v431 = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 2);
          *(_DWORD *)(a1 + 10088) = v431;
          *(_DWORD *)(a1 + 10084) = v431;
          return;
        case -16252:
          char v432 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_BYTE *)(v6 + 2525) = *((void *)v432 + 1);
          *(_DWORD *)(a1 + 11132) = *((void *)v432 + 2);
          return;
        case -16247:
          return;
        case -16227:
          unint64_t v433 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v434 = *((void *)v433 + 2);
          uint64_t v435 = 1LL << v434;
          uint64_t v436 = a1 + 8LL * (int)(v434 >> 6);
          *(void *)(v436 + 72) |= v435;
          *(void *)(a1 + 80 + 8LL * *((void *)v433 + 2) + 8) = GTTraceFunc_argumentBytesWithMap( a2,  v433[24],  a3);
          *(void *)(a1 + 80 + 8LL * (int)(*((void *)v433 + 2) >> 6)) &= ~(1LL << *((void *)v433 + 2));
          *(void *)(a1 + 80 + 8LL * *((void *)v433 + 2) + 256) = *((void *)v433 + 1);
          return;
        case -16226:
          uint64_t v437 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8LL * *((void *)v437 + 2) + 336) = *((void *)v437 + 1);
          return;
        case -16225:
          uint64_t v163 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v438 = *((void *)v163 + 2);
          uint64_t v439 = 1LL << v438;
          uint64_t v440 = a1 + 56 + 8LL * (int)(v438 >> 6);
          *(void *)(v440 + 8) |= v439;
          uint64_t v441 = GTTraceFunc_argumentBytesWithMap(a2, v163[24], a3);
          uint64_t v214 = a1 + 80;
          *(void *)(a1 + 80 + 8LL * *((void *)v163 + 2)) = v441;
          unint64_t v442 = *((void *)v163 + 2);
          uint64_t v443 = 1LL << v442;
          uint64_t v444 = a1 + 56 + 8LL * (int)(v442 >> 6);
          *(void *)(v444 + 16) &= ~v443;
          goto LABEL_444;
        case -16224:
          unint64_t v445 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8LL * *((void *)v445 + 2) + 328) = *((void *)v445 + 1);
          return;
        case -16223:
          uint64_t v163 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v446 = *((void *)v163 + 2);
          uint64_t v447 = 1LL << v446;
          uint64_t v448 = a1 + 8LL * (int)(v446 >> 6);
          *(void *)(v448 + 1976) |= v447;
          int v167 = GTTraceFunc_argumentBytesWithMap(a2, v163[24], a3);
          uint64_t v214 = a1 + 1984;
          goto LABEL_443;
        case -16222:
          unint64_t v449 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8LL * *((void *)v449 + 2) + 2232) = *((void *)v449 + 1);
          return;
        case -16219:
          uint64_t v450 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 10084) = *((_DWORD *)v450 + 2);
          *(_DWORD *)(a1 + 10088) = *((_DWORD *)v450 + 3);
          return;
        case -16214:
          uint64_t v451 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 56 + 8LL * *((void *)v451 + 2) + 2424) = *((void *)v451 + 1);
          *(void *)(a1 + 56 + 8LL * *((void *)v451 + 4) + 3448) = *((void *)v451 + 3);
          return;
        default:
          if (v7 == -16384) {
            goto LABEL_54;
          }
          if (v7 != -16376) {
            return;
          }
          goto LABEL_65;
      }
    }

    switch(v7)
    {
      case -16162:
        unint64_t v19 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 8LL * *((void *)v19 + 2) + 64) = *((void *)v19 + 1);
        break;
      case -16161:
        *(_BYTE *)(a1 + 192) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
        break;
      case -16160:
        *(_BYTE *)(a1 + 193) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
        break;
      case -16159:
        uint64_t v503 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 8LL * *((void *)v503 + 2) + 9928) = *((void *)v503 + 1);
        break;
      case -16158:
        *(_BYTE *)(a1 + 11142) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
        break;
      case -16157:
        *(_BYTE *)(a1 + 11143) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
        break;
      case -16156:
      case -16155:
      case -16154:
      case -16153:
      case -16152:
      case -16151:
      case -16150:
      case -16147:
      case -16146:
      case -16145:
      case -16144:
      case -16137:
      case -16136:
      case -16135:
      case -16134:
      case -16133:
        return;
      case -16149:
        __int128 v504 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(_DWORD *)(a1 + 2164) = *((void *)v504 + 1);
        *(_DWORD *)(a1 + 2168) = *((void *)v504 + 2);
        break;
      case -16148:
        uint64_t v505 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 9920) = *((void *)v505 + 1);
        *(_DWORD *)(a1 + 10744) = *((void *)v505 + 2);
        *(_DWORD *)(a1 + 10748) = *((void *)v505 + 3);
        break;
      case -16143:
        uint64_t v163 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        unint64_t v506 = *((void *)v163 + 2);
        uint64_t v507 = 1LL << v506;
        uint64_t v508 = a1 + 8LL * (int)(v506 >> 6);
        *(void *)(v508 + 6944) |= v507;
        int v167 = GTTraceFunc_argumentBytesWithMap(a2, v163[24], a3);
        uint64_t v168 = 6952LL;
LABEL_442:
        uint64_t v214 = a1 + v168;
LABEL_443:
        *(void *)(v214 + 8LL * *((void *)v163 + 2)) = v167;
LABEL_444:
        *(void *)(v214 + 8LL * *((void *)v163 + 2) + 248) = *((void *)v163 + 1);
        break;
      case -16142:
        unint64_t v144 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        unint64_t v509 = *((void *)v144 + 3);
        uint64_t v510 = 1LL << v509;
        uint64_t v511 = a1 + 8LL * (int)(v509 >> 6);
        *(void *)(v511 + 6944) &= ~v510;
        uint64_t v148 = *((void *)v144 + 1);
        uint64_t v149 = 6952LL;
LABEL_446:
        uint64_t v198 = a1 + v149;
LABEL_447:
        *(void *)(v198 + 8LL * *((void *)v144 + 3)) = v148;
        uint64_t v326 = *((void *)v144 + 2);
        uint64_t v327 = v198 + 8LL * *((void *)v144 + 3);
LABEL_448:
        *(void *)(v327 + 248) = v326;
        break;
      case -16141:
        uint64_t v512 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 8LL * *((void *)v512 + 2) + 7200) = *((void *)v512 + 1);
        break;
      case -16140:
        JSValueRef v513 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 8LL * *((void *)v513 + 2) + 7448) = *((void *)v513 + 1);
        break;
      case -16139:
        uint64_t v514 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 8LL * *((void *)v514 + 2) + 8472) = *((void *)v514 + 1);
        break;
      case -16138:
        id v515 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 56 + 8LL * *((void *)v515 + 2) + 8416) = *((void *)v515 + 1);
        *(_DWORD *)(a1 + 56 + 4LL * *((void *)v515 + 2) + 10548) = *((_DWORD *)v515 + 6);
        *(_DWORD *)(a1 + 56 + 4LL * *((void *)v515 + 2) + 10612) = *((_DWORD *)v515 + 7);
        break;
      case -16132:
        *(_DWORD *)(a1 + 10732) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 2);
        break;
      default:
        if (v7 == -16100)
        {
          uint64_t v57 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v58 = *((void *)v57 + 3);
          *(_OWORD *)(a1 + 1984) = *(_OWORD *)(v57 + 8);
          *(void *)(a1 + 2000) = v58;
          uint64_t v59 = *((void *)v57 + 6);
          *(_OWORD *)(a1 + 2008) = *((_OWORD *)v57 + 2);
          *(void *)(a1 + 2024) = v59;
        }

        break;
    }
  }

  else
  {
    if (v7 > -15460)
    {
      switch(v7)
      {
        case -15459:
        case -15458:
        case -15456:
          __int128 v8 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v9 = *((void *)v8 + 2);
          uint64_t v10 = 1LL << v9;
          uint64_t v11 = a1 + 56 + 8LL * (int)(v9 >> 6);
          *(void *)(v11 + 1920) &= ~v10;
          *(void *)(a1 + 56 + 8LL * *((void *)v8 + 2) + 1928) = *((void *)v8 + 1);
          break;
        case -15457:
          uint64_t v60 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v61 = v60;
          unint64_t v62 = *((void *)v60 + 1);
          unint64_t v63 = *((void *)v60 + 2) + v62;
          if (v63 >= 0x40) {
            unint64_t v63 = 64LL;
          }
          char v64 = v63 - v62;
          if (v63 < v62) {
            char v64 = 0;
          }
          uint64_t v65 = ~(-1LL << v64);
          if (v62 <= v63) {
            char v66 = v62 & 0x3F;
          }
          else {
            char v66 = 0;
          }
          *(void *)(a1 + 1976) &= ~(v65 << v66);
          uint64_t v67 = *((void *)v60 + 1);
          int v68 = GTTraceFunc_argumentBytesWithMap(a2, v60[24], a3);
          if ((int)*((void *)v61 + 2) >= 1)
          {
            unint64_t v69 = (void *)(a1 + 8 * v67 + 1984);
            uint64_t v70 = *((void *)v61 + 2);
            do
            {
              uint64_t v71 = *(void *)v68;
              v68 += 8;
              *v69++ = v71;
              --v70;
            }

            while (v70);
          }

          break;
        case -15455:
          uint64_t v72 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          __int128 v73 = v72;
          unint64_t v74 = *((void *)v72 + 1);
          unint64_t v75 = *((void *)v72 + 2) + v74;
          if (v75 >= 0x40) {
            unint64_t v75 = 64LL;
          }
          char v76 = v75 - v74;
          if (v75 < v74) {
            char v76 = 0;
          }
          uint64_t v77 = ~(-1LL << v76);
          if (v74 <= v75) {
            char v78 = v74 & 0x3F;
          }
          else {
            char v78 = 0;
          }
          *(void *)(a1 + 1976) &= ~(v77 << v78);
          uint64_t v79 = *((void *)v72 + 1);
          unint64_t v80 = GTTraceFunc_argumentBytesWithMap(a2, v72[24], a3);
          if ((int)*((void *)v73 + 2) >= 1)
          {
            uint64_t v81 = (void *)(a1 + 8 * v79 + 1984);
            uint64_t v82 = *((void *)v73 + 2);
            do
            {
              uint64_t v83 = *(void *)v80;
              v80 += 8;
              *v81++ = v83;
              --v82;
            }

            while (v82);
          }

          break;
        case -15454:
        case -15453:
        case -15451:
          int v40 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v41 = *((void *)v40 + 2);
          uint64_t v42 = 1LL << v41;
          uint64_t v43 = a1 + 56 + 8LL * (int)(v41 >> 6);
          *(void *)(v43 + 6888) &= ~v42;
          *(void *)(a1 + 56 + 8LL * *((void *)v40 + 2) + 6896) = *((void *)v40 + 1);
          break;
        case -15452:
          unint64_t v84 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v85 = v84;
          unint64_t v86 = *((void *)v84 + 1);
          unint64_t v87 = *((void *)v84 + 2) + v86;
          if (v87 >= 0x40) {
            unint64_t v87 = 64LL;
          }
          char v88 = v87 - v86;
          if (v87 < v86) {
            char v88 = 0;
          }
          uint64_t v89 = ~(-1LL << v88);
          if (v86 <= v87) {
            char v90 = v86 & 0x3F;
          }
          else {
            char v90 = 0;
          }
          *(void *)(a1 + 6944) &= ~(v89 << v90);
          uint64_t v91 = *((void *)v84 + 1);
          unint64_t v92 = GTTraceFunc_argumentBytesWithMap(a2, v84[24], a3);
          if ((int)*((void *)v85 + 2) >= 1)
          {
            uint64_t v93 = (void *)(a1 + 8 * v91 + 6952);
            uint64_t v94 = *((void *)v85 + 2);
            do
            {
              uint64_t v95 = *(void *)v92;
              v92 += 8;
              *v93++ = v95;
              --v94;
            }

            while (v94);
          }

          break;
        case -15450:
          char v96 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v97 = v96;
          unint64_t v98 = *((void *)v96 + 1);
          unint64_t v99 = *((void *)v96 + 2) + v98;
          if (v99 >= 0x40) {
            unint64_t v99 = 64LL;
          }
          char v100 = v99 - v98;
          if (v99 < v98) {
            char v100 = 0;
          }
          uint64_t v101 = ~(-1LL << v100);
          if (v98 <= v99) {
            char v102 = v98 & 0x3F;
          }
          else {
            char v102 = 0;
          }
          *(void *)(a1 + 6944) &= ~(v101 << v102);
          uint64_t v103 = *((void *)v96 + 1);
          unsigned int v104 = GTTraceFunc_argumentBytesWithMap(a2, v96[24], a3);
          if ((int)*((void *)v97 + 2) >= 1)
          {
            char v105 = (void *)(a1 + 8 * v103 + 6952);
            uint64_t v106 = *((void *)v97 + 2);
            do
            {
              uint64_t v107 = *(void *)v104;
              v104 += 8;
              *v105++ = v107;
              --v106;
            }

            while (v106);
          }

          break;
        case -15449:
        case -15448:
        case -15446:
          int v44 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v45 = *((void *)v44 + 2);
          uint64_t v46 = 1LL << v45;
          uint64_t v47 = a1 + 56 + 8LL * (int)(v45 >> 6);
          *(void *)(v47 + 8) &= ~v46;
          *(void *)(a1 + 56 + 8LL * *((void *)v44 + 2) + 24) = *((void *)v44 + 1);
          unint64_t v48 = *((void *)v44 + 2);
          uint64_t v49 = 1LL << v48;
          uint64_t v50 = a1 + 56 + 8LL * (int)(v48 >> 6);
          *(void *)(v50 + 16) &= ~v49;
          break;
        case -15447:
          uint64_t v108 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v109 = v108;
          unint64_t v110 = *((void *)v108 + 1);
          unint64_t v111 = *((void *)v108 + 2) + v110;
          if (v111 >= 0x40) {
            unint64_t v111 = 64LL;
          }
          char v112 = v111 - v110;
          if (v111 < v110) {
            char v112 = 0;
          }
          uint64_t v113 = ~(-1LL << v112);
          if (v110 <= v111) {
            char v114 = v110 & 0x3F;
          }
          else {
            char v114 = 0;
          }
          uint64_t v115 = *(void *)(a1 + 72);
          *(void *)(a1 + 64) &= ~(v113 << v114);
          unint64_t v116 = *((void *)v108 + 1);
          unint64_t v117 = *((void *)v108 + 2) + v116;
          if (v117 >= 0x40) {
            unint64_t v117 = 64LL;
          }
          char v118 = v117 - v116;
          if (v117 < v116) {
            char v118 = 0;
          }
          uint64_t v119 = ~(-1LL << v118);
          if (v116 <= v117) {
            char v120 = v116 & 0x3F;
          }
          else {
            char v120 = 0;
          }
          *(void *)(a1 + 72) = v115 & ~(v119 << v120);
          uint64_t v121 = *((void *)v108 + 1);
          int32x2_t v122 = GTTraceFunc_argumentBytesWithMap(a2, v108[24], a3);
          if ((int)*((void *)v109 + 2) >= 1)
          {
            uint64_t v123 = (void *)(a1 + 8 * v121 + 80);
            uint64_t v124 = *((void *)v109 + 2);
            do
            {
              uint64_t v125 = *(void *)v122;
              v122 += 8;
              *v123++ = v125;
              --v124;
            }

            while (v124);
          }

          break;
        case -15445:
          unsigned int v126 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          char v127 = v126;
          unint64_t v128 = *((void *)v126 + 1);
          unint64_t v129 = *((void *)v126 + 2) + v128;
          if (v129 >= 0x40) {
            unint64_t v129 = 64LL;
          }
          char v130 = v129 - v128;
          if (v129 < v128) {
            char v130 = 0;
          }
          uint64_t v131 = ~(-1LL << v130);
          if (v128 <= v129) {
            char v132 = v128 & 0x3F;
          }
          else {
            char v132 = 0;
          }
          uint64_t v133 = *(void *)(a1 + 72);
          *(void *)(a1 + 64) &= ~(v131 << v132);
          unint64_t v134 = *((void *)v126 + 1);
          unint64_t v135 = *((void *)v126 + 2) + v134;
          if (v135 >= 0x40) {
            unint64_t v135 = 64LL;
          }
          char v136 = v135 - v134;
          if (v135 < v134) {
            char v136 = 0;
          }
          uint64_t v137 = ~(-1LL << v136);
          if (v134 <= v135) {
            char v138 = v134 & 0x3F;
          }
          else {
            char v138 = 0;
          }
          *(void *)(a1 + 72) = v133 & ~(v137 << v138);
          uint64_t v139 = *((void *)v126 + 1);
          __int128 v140 = GTTraceFunc_argumentBytesWithMap(a2, v126[24], a3);
          if ((int)*((void *)v127 + 2) >= 1)
          {
            uint64_t v141 = (void *)(a1 + 8 * v139 + 80);
            uint64_t v142 = *((void *)v127 + 2);
            do
            {
              uint64_t v143 = *(void *)v140;
              v140 += 8;
              *v141++ = v143;
              --v142;
            }

            while (v142);
          }

          break;
        case -15444:
        case -15443:
        case -15442:
        case -15441:
        case -15440:
        case -15439:
        case -15438:
        case -15437:
        case -15436:
        case -15435:
        case -15434:
        case -15433:
        case -15432:
        case -15431:
        case -15430:
        case -15429:
        case -15428:
        case -15427:
        case -15426:
        case -15425:
        case -15424:
        case -15423:
        case -15422:
        case -15421:
        case -15420:
        case -15419:
        case -15418:
        case -15417:
        case -15416:
        case -15415:
        case -15414:
        case -15413:
        case -15412:
        case -15411:
        case -15410:
        case -15409:
        case -15408:
        case -15407:
        case -15406:
        case -15405:
        case -15404:
        case -15403:
        case -15402:
          return;
        case -15401:
          unint64_t v144 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v145 = *((void *)v144 + 3);
          uint64_t v146 = 1LL << v145;
          uint64_t v147 = a1 + 8LL * (int)(v145 >> 6);
          *(void *)(v147 + 5288) &= ~v146;
          uint64_t v148 = *((void *)v144 + 1);
          uint64_t v149 = 5296LL;
          goto LABEL_446;
        case -15400:
          unint64_t v150 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8LL * *((void *)v150 + 2) + 5544) = *((void *)v150 + 1);
          break;
        case -15399:
          unint64_t v151 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v27 = v151;
          unint64_t v152 = *((void *)v151 + 1);
          unint64_t v153 = *((void *)v151 + 2) + v152;
          if (v153 >= 0x40) {
            unint64_t v153 = 64LL;
          }
          char v154 = v153 - v152;
          if (v153 < v152) {
            char v154 = 0;
          }
          uint64_t v155 = ~(-1LL << v154);
          if (v152 <= v153) {
            char v156 = v152 & 0x3F;
          }
          else {
            char v156 = 0;
          }
          *(void *)(a1 + 5288) &= ~(v155 << v156);
          uint64_t v157 = *((void *)v151 + 1);
          uint64_t v158 = GTTraceFunc_argumentBytesWithMap(a2, v151[24], a3);
          if ((int)*((void *)v27 + 2) >= 1)
          {
            uint64_t v159 = (void *)(a1 + 8 * v157 + 5296);
            uint64_t v160 = *((void *)v27 + 2);
            do
            {
              uint64_t v161 = *(void *)v158;
              v158 += 8;
              *v159++ = v161;
              --v160;
            }

            while (v160);
          }

          uint64_t v38 = a1 + 8LL * *((void *)v27 + 1);
          uint64_t v39 = 5544LL;
          goto LABEL_164;
        case -15398:
          uint64_t v163 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v164 = *((void *)v163 + 2);
          uint64_t v165 = 1LL << v164;
          uint64_t v166 = a1 + 8LL * (int)(v164 >> 6);
          *(void *)(v166 + 5288) |= v165;
          int v167 = GTTraceFunc_argumentBytesWithMap(a2, v163[24], a3);
          uint64_t v168 = 5296LL;
          goto LABEL_442;
        case -15397:
          int v169 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8LL * *((void *)v169 + 2) + 6816) = *((void *)v169 + 1);
          break;
        case -15396:
          unsigned int v170 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 56 + 8LL * *((void *)v170 + 2) + 6760) = *((void *)v170 + 1);
          *(_DWORD *)(a1 + 56 + 4LL * *((void *)v170 + 2) + 10420) = *((_DWORD *)v170 + 6);
          *(_DWORD *)(a1 + 56 + 4LL * *((void *)v170 + 2) + 10484) = *((_DWORD *)v170 + 7);
          break;
        case -15395:
          uint64_t v171 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v172 = *((void *)v171 + 1);
          uint64_t v173 = GTTraceFunc_argumentBytesWithMap(a2, v171[24], a3);
          if ((int)*((void *)v171 + 2) >= 1)
          {
            char v174 = (void *)(a1 + 8 * v172 + 6816);
            uint64_t v175 = *((void *)v171 + 2);
            do
            {
              uint64_t v176 = *(void *)v173;
              v173 += 8;
              *v174++ = v176;
              --v175;
            }

            while (v175);
          }

          uint64_t v177 = a1 + 56;
          char v178 = (void *)(a1 + 56 + 4LL * *((void *)v171 + 1) + 10420);
          char v179 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
          memcpy(v178, v179, 4LL * *((void *)v171 + 2));
          uint64_t v180 = v177 + 4LL * *((void *)v171 + 1);
          uint64_t v181 = 10484LL;
          goto LABEL_511;
        case -15394:
          int v182 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v183 = *((void *)v182 + 1);
          int v184 = GTTraceFunc_argumentBytesWithMap(a2, v182[24], a3);
          if ((int)*((void *)v182 + 2) >= 1)
          {
            int v185 = (void *)(a1 + 8 * v183 + 6816);
            uint64_t v186 = *((void *)v182 + 2);
            do
            {
              uint64_t v187 = *(void *)v184;
              v184 += 8;
              *v185++ = v187;
              --v186;
            }

            while (v186);
          }

          break;
        case -15393:
          uint64_t v188 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8LL * *((void *)v188 + 2) + 5792) = *((void *)v188 + 1);
          break;
        case -15392:
          unint64_t v189 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v190 = *((void *)v189 + 1);
          int v191 = GTTraceFunc_argumentBytesWithMap(a2, v189[24], a3);
          if ((int)*((void *)v189 + 2) >= 1)
          {
            int v192 = (void *)(a1 + 8 * v190 + 5792);
            uint64_t v193 = *((void *)v189 + 2);
            do
            {
              uint64_t v194 = *(void *)v191;
              v191 += 8;
              *v192++ = v194;
              --v193;
            }

            while (v193);
          }

          break;
        case -15391:
          unint64_t v144 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v195 = *((void *)v144 + 3);
          uint64_t v196 = 1LL << v195;
          uint64_t v197 = a1 + 8LL * (int)(v195 >> 6);
          *(void *)(v197 + 3632) &= ~v196;
          uint64_t v148 = *((void *)v144 + 1);
          uint64_t v198 = a1 + 3640;
          goto LABEL_447;
        case -15390:
          uint64_t v199 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8LL * *((void *)v199 + 2) + 3888) = *((void *)v199 + 1);
          break;
        case -15389:
          unint64_t v200 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v27 = v200;
          unint64_t v201 = *((void *)v200 + 1);
          unint64_t v202 = *((void *)v200 + 2) + v201;
          if (v202 >= 0x40) {
            unint64_t v202 = 64LL;
          }
          char v203 = v202 - v201;
          if (v202 < v201) {
            char v203 = 0;
          }
          uint64_t v204 = ~(-1LL << v203);
          if (v201 <= v202) {
            char v205 = v201 & 0x3F;
          }
          else {
            char v205 = 0;
          }
          *(void *)(a1 + 3632) &= ~(v204 << v205);
          uint64_t v206 = *((void *)v200 + 1);
          uint64_t v207 = GTTraceFunc_argumentBytesWithMap(a2, v200[24], a3);
          if ((int)*((void *)v27 + 2) >= 1)
          {
            uint64_t v208 = (void *)(a1 + 8 * v206 + 3640);
            uint64_t v209 = *((void *)v27 + 2);
            do
            {
              uint64_t v210 = *(void *)v207;
              v207 += 8;
              *v208++ = v210;
              --v209;
            }

            while (v209);
          }

          uint64_t v162 = a1 + 8LL * *((void *)v27 + 1) + 3888;
          goto LABEL_352;
        case -15388:
          uint64_t v163 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v211 = *((void *)v163 + 2);
          uint64_t v212 = 1LL << v211;
          uint64_t v213 = a1 + 8LL * (int)(v211 >> 6);
          *(void *)(v213 + 3632) |= v212;
          int v167 = GTTraceFunc_argumentBytesWithMap(a2, v163[24], a3);
          uint64_t v214 = a1 + 3640;
          goto LABEL_443;
        case -15387:
          uint64_t v215 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8LL * *((void *)v215 + 2) + 5160) = *((void *)v215 + 1);
          break;
        case -15386:
          __int128 v216 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 56 + 8LL * *((void *)v216 + 2) + 5104) = *((void *)v216 + 1);
          *(_DWORD *)(a1 + 56 + 4LL * *((void *)v216 + 2) + 10292) = *((_DWORD *)v216 + 6);
          *(_DWORD *)(a1 + 56 + 4LL * *((void *)v216 + 2) + 10356) = *((_DWORD *)v216 + 7);
          break;
        case -15385:
          uint64_t v171 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v217 = *((void *)v171 + 1);
          uint64_t v218 = GTTraceFunc_argumentBytesWithMap(a2, v171[24], a3);
          if ((int)*((void *)v171 + 2) >= 1)
          {
            uint64_t v219 = (void *)(a1 + 8 * v217 + 5160);
            uint64_t v220 = *((void *)v171 + 2);
            do
            {
              uint64_t v221 = *(void *)v218;
              v218 += 8;
              *v219++ = v221;
              --v220;
            }

            while (v220);
          }

          uint64_t v222 = a1 + 56;
          id v223 = (void *)(a1 + 56 + 4LL * *((void *)v171 + 1) + 10292);
          uint64_t v224 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
          memcpy(v223, v224, 4LL * *((void *)v171 + 2));
          uint64_t v180 = v222 + 4LL * *((void *)v171 + 1);
          uint64_t v181 = 10356LL;
          goto LABEL_511;
        case -15384:
          uint64_t v225 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v226 = *((void *)v225 + 1);
          BOOL v227 = GTTraceFunc_argumentBytesWithMap(a2, v225[24], a3);
          if ((int)*((void *)v225 + 2) >= 1)
          {
            uint64_t v228 = (void *)(a1 + 8 * v226 + 5160);
            uint64_t v229 = *((void *)v225 + 2);
            do
            {
              uint64_t v230 = *(void *)v227;
              v227 += 8;
              *v228++ = v230;
              --v229;
            }

            while (v229);
          }

          break;
        case -15383:
          char v231 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8LL * *((void *)v231 + 2) + 4136) = *((void *)v231 + 1);
          break;
        case -15382:
          uint64_t v232 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v233 = *((void *)v232 + 1);
          size_t v234 = GTTraceFunc_argumentBytesWithMap(a2, v232[24], a3);
          if ((int)*((void *)v232 + 2) >= 1)
          {
            uint64_t v235 = (void *)(a1 + 8 * v233 + 4136);
            uint64_t v236 = *((void *)v232 + 2);
            do
            {
              uint64_t v237 = *(void *)v234;
              v234 += 8;
              *v235++ = v237;
              --v236;
            }

            while (v236);
          }

          break;
        case -15381:
          int v238 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 4LL * *((void *)v238 + 2) + 11000) = *((void *)v238 + 1);
          break;
        default:
          switch(v7)
          {
            case -15284:
              uint64_t v20 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              unint64_t v21 = *((void *)v20 + 4);
              uint64_t v22 = 1LL << v21;
              uint64_t v23 = a1 + 56 + 8LL * (int)(v21 >> 6);
              *(void *)(v23 + 16) &= ~v22;
              *(void *)(a1 + 80 + 8LL * *((void *)v20 + 4) + 8) = *((void *)v20 + 1);
              *(void *)(a1 + 80 + 8LL * (int)(*((void *)v20 + 4) >> 6)) |= 1LL << *((void *)v20 + 4);
              *(void *)(a1 + 80 + 8LL * *((void *)v20 + 4) + 256) = *((void *)v20 + 2);
              uint64_t v24 = *((void *)v20 + 3);
              uint64_t v25 = a1 + 56 + 8LL * *((void *)v20 + 4);
              goto LABEL_474;
            case -15283:
              uint64_t v516 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              *(void *)(a1 + 56 + 8LL * *((void *)v516 + 3) + 280) = *((void *)v516 + 1);
              uint64_t v24 = *((void *)v516 + 2);
              uint64_t v25 = a1 + 56 + 8LL * *((void *)v516 + 3);
              goto LABEL_474;
            case -15282:
              size_t v517 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              uint64_t v27 = v517;
              unint64_t v518 = *((void *)v517 + 1);
              unint64_t v519 = *((void *)v517 + 2) + v518;
              unint64_t v520 = 64LL;
              if (v519 >= 0x40) {
                unint64_t v519 = 64LL;
              }
              char v521 = v519 - v518;
              if (v519 < v518) {
                char v521 = 0;
              }
              uint64_t v522 = ~(-1LL << v521);
              if (v518 <= v519) {
                char v523 = v518 & 0x3F;
              }
              else {
                char v523 = 0;
              }
              id v525 = (uint64_t *)(a1 + 80);
              uint64_t v524 = *(void *)(a1 + 80);
              *(void *)(a1 + 72) &= ~(v522 << v523);
              unint64_t v526 = *((void *)v517 + 1);
              if (*((void *)v517 + 2) + v526 < 0x40) {
                unint64_t v520 = *((void *)v517 + 2) + v526;
              }
              char v527 = v520 - v526;
              if (v520 < v526) {
                char v527 = 0;
              }
              uint64_t v528 = ~(-1LL << v527);
              if (v526 <= v520) {
                char v529 = v526 & 0x3F;
              }
              else {
                char v529 = 0;
              }
              *id v525 = (v528 << v529) | v524;
              uint64_t v530 = *((void *)v517 + 1);
              unint64_t v531 = GTTraceFunc_argumentBytesWithMap(a2, v517[24], a3);
              if ((int)*((void *)v27 + 2) >= 1)
              {
                v532 = &v525[v530 + 1];
                uint64_t v533 = *((void *)v27 + 2);
                do
                {
                  uint64_t v534 = *(void *)v531;
                  v531 += 8;
                  *v532++ = v534;
                  --v533;
                }

                while (v533);
              }

              uint64_t v535 = a1 + 56;
              __int128 v536 = (void *)(a1 + 56 + 8LL * *((void *)v27 + 1) + 280);
              v537 = GTTraceFunc_argumentBytesWithMap(a2, v27[25], a3);
              memcpy(v536, v537, 8LL * *((void *)v27 + 2));
              uint64_t v162 = v535 + 8LL * *((void *)v27 + 1) + 528;
              goto LABEL_495;
            case -15281:
              id v538 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              unint64_t v539 = *((void *)v538 + 3);
              uint64_t v540 = 1LL << v539;
              uint64_t v541 = a1 + 56 + 8LL * (int)(v539 >> 6);
              *(void *)(v541 + 16) |= v540;
              *(void *)(a1 + 80 + 8LL * *((void *)v538 + 3) + 8) = GTTraceFunc_argumentBytesWithMap( a2,  v538[32],  a3);
              *(void *)(a1 + 80 + 8LL * (int)(*((void *)v538 + 3) >> 6)) |= 1LL << *((void *)v538 + 3);
              *(void *)(a1 + 80 + 8LL * *((void *)v538 + 3) + 256) = *((void *)v538 + 1);
              uint64_t v24 = *((void *)v538 + 2);
              uint64_t v25 = a1 + 56 + 8LL * *((void *)v538 + 3);
LABEL_474:
              *(void *)(v25 + 528) = v24;
              return;
            case -15280:
            case -15279:
            case -15278:
            case -15277:
            case -15276:
              return;
            case -15275:
              v542 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              unint64_t v543 = *((void *)v542 + 4);
              uint64_t v544 = 1LL << v543;
              uint64_t v545 = a1 + 56 + 8LL * (int)(v543 >> 6);
              *(void *)(v545 + 8) &= ~v544;
              *(void *)(a1 + 80 + 8LL * *((void *)v542 + 4)) = *((void *)v542 + 1);
              unint64_t v546 = *((void *)v542 + 4);
              uint64_t v547 = 1LL << v546;
              uint64_t v548 = a1 + 56 + 8LL * (int)(v546 >> 6);
              *(void *)(v548 + 16) |= v547;
              *(void *)(a1 + 80 + 8LL * *((void *)v542 + 4) + 248) = *((void *)v542 + 2);
              uint64_t v549 = *((void *)v542 + 3);
              uint64_t v550 = a1 + 56 + 8LL * *((void *)v542 + 4);
              goto LABEL_498;
            case -15274:
              v551 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              *(void *)(a1 + 56 + 8LL * *((void *)v551 + 3) + 272) = *((void *)v551 + 1);
              uint64_t v549 = *((void *)v551 + 2);
              uint64_t v550 = a1 + 56 + 8LL * *((void *)v551 + 3);
              goto LABEL_498;
            case -15273:
              id v552 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              uint64_t v27 = v552;
              unint64_t v553 = *((void *)v552 + 1);
              unint64_t v554 = *((void *)v552 + 2) + v553;
              if (v554 >= 0x40) {
                unint64_t v554 = 64LL;
              }
              char v555 = v554 - v553;
              if (v554 < v553) {
                char v555 = 0;
              }
              uint64_t v556 = ~(-1LL << v555);
              if (v553 <= v554) {
                char v557 = v553 & 0x3F;
              }
              else {
                char v557 = 0;
              }
              uint64_t v558 = *(void *)(a1 + 72);
              *(void *)(a1 + 64) &= ~(v556 << v557);
              unint64_t v559 = *((void *)v552 + 1);
              unint64_t v560 = *((void *)v552 + 2) + v559;
              if (v560 >= 0x40) {
                unint64_t v560 = 64LL;
              }
              char v561 = v560 - v559;
              if (v560 < v559) {
                char v561 = 0;
              }
              uint64_t v562 = ~(-1LL << v561);
              if (v559 <= v560) {
                char v563 = v559 & 0x3F;
              }
              else {
                char v563 = 0;
              }
              *(void *)(a1 + 72) = (v562 << v563) | v558;
              uint64_t v564 = *((void *)v552 + 1);
              v565 = GTTraceFunc_argumentBytesWithMap(a2, v552[24], a3);
              if ((int)*((void *)v27 + 2) >= 1)
              {
                v566 = (void *)(a1 + 8 * v564 + 80);
                uint64_t v567 = *((void *)v27 + 2);
                do
                {
                  uint64_t v568 = *(void *)v565;
                  v565 += 8;
                  *v566++ = v568;
                  --v567;
                }

                while (v567);
              }

              uint64_t v569 = a1 + 56;
              unint64_t v570 = (void *)(a1 + 56 + 8LL * *((void *)v27 + 1) + 272);
              int64x2_t v571 = GTTraceFunc_argumentBytesWithMap(a2, v27[25], a3);
              memcpy(v570, v571, 8LL * *((void *)v27 + 2));
              uint64_t v162 = v569 + 8LL * *((void *)v27 + 1) + 520;
LABEL_495:
              unsigned int v406 = v27[26];
              goto LABEL_496;
            case -15272:
              v574 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              unint64_t v575 = *((void *)v574 + 3);
              uint64_t v576 = 1LL << v575;
              uint64_t v577 = a1 + 56 + 8LL * (int)(v575 >> 6);
              *(void *)(v577 + 8) |= v576;
              *(void *)(a1 + 80 + 8LL * *((void *)v574 + 3)) = GTTraceFunc_argumentBytesWithMap( a2,  v574[32],  a3);
              unint64_t v578 = *((void *)v574 + 3);
              uint64_t v579 = 1LL << v578;
              uint64_t v580 = a1 + 56 + 8LL * (int)(v578 >> 6);
              *(void *)(v580 + 16) |= v579;
              *(void *)(a1 + 80 + 8LL * *((void *)v574 + 3) + 248) = *((void *)v574 + 1);
              uint64_t v549 = *((void *)v574 + 2);
              uint64_t v550 = a1 + 56 + 8LL * *((void *)v574 + 3);
LABEL_498:
              *(void *)(v550 + 520) = v549;
              return;
            default:
              if (v7 != -15364) {
                return;
              }
              unint64_t v15 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              bzero((void *)a1, 0x2B90uLL);
              uint64_t v16 = *((void *)v15 + 1);
              if (!v16) {
                return;
              }
              int v17 = 17;
              break;
          }

          goto LABEL_385;
      }

      return;
    }

    if (v7 <= -15891)
    {
      if (v7 <= -16029)
      {
        switch(v7)
        {
          case -16087:
            __int128 v26 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            uint64_t v27 = v26;
            unint64_t v28 = *((void *)v26 + 1);
            unint64_t v29 = *((void *)v26 + 2) + v28;
            if (v29 >= 0x40) {
              unint64_t v29 = 64LL;
            }
            char v30 = v29 - v28;
            if (v29 < v28) {
              char v30 = 0;
            }
            uint64_t v31 = ~(-1LL << v30);
            if (v28 <= v29) {
              char v32 = v28 & 0x3F;
            }
            else {
              char v32 = 0;
            }
            *(void *)(a1 + 6944) &= ~(v31 << v32);
            uint64_t v33 = *((void *)v26 + 1);
            int v34 = GTTraceFunc_argumentBytesWithMap(a2, v26[24], a3);
            if ((int)*((void *)v27 + 2) >= 1)
            {
              int v35 = (void *)(a1 + 8 * v33 + 6952);
              uint64_t v36 = *((void *)v27 + 2);
              do
              {
                uint64_t v37 = *(void *)v34;
                v34 += 8;
                *v35++ = v37;
                --v36;
              }

              while (v36);
            }

            uint64_t v38 = a1 + 8LL * *((void *)v27 + 1);
            uint64_t v39 = 7200LL;
LABEL_164:
            uint64_t v162 = v38 + v39;
            goto LABEL_352;
          case -16086:
            v581 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            uint64_t v582 = *((void *)v581 + 1);
            v583 = GTTraceFunc_argumentBytesWithMap(a2, v581[24], a3);
            if ((int)*((void *)v581 + 2) >= 1)
            {
              unint64_t v584 = (void *)(a1 + 8 * v582 + 7448);
              uint64_t v585 = *((void *)v581 + 2);
              do
              {
                uint64_t v586 = *(void *)v583;
                v583 += 8;
                *v584++ = v586;
                --v585;
              }

              while (v585);
            }

            break;
          case -16085:
            v587 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            uint64_t v588 = *((void *)v587 + 1);
            v589 = GTTraceFunc_argumentBytesWithMap(a2, v587[24], a3);
            if ((int)*((void *)v587 + 2) >= 1)
            {
              __int128 v590 = (void *)(a1 + 8 * v588 + 8472);
              uint64_t v591 = *((void *)v587 + 2);
              do
              {
                uint64_t v592 = *(void *)v589;
                v589 += 8;
                *v590++ = v592;
                --v591;
              }

              while (v591);
            }

            break;
          case -16084:
            uint64_t v171 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            uint64_t v593 = *((void *)v171 + 1);
            v594 = GTTraceFunc_argumentBytesWithMap(a2, v171[24], a3);
            if ((int)*((void *)v171 + 2) >= 1)
            {
              v595 = (void *)(a1 + 8 * v593 + 8472);
              uint64_t v596 = *((void *)v171 + 2);
              do
              {
                uint64_t v597 = *(void *)v594;
                v594 += 8;
                *v595++ = v597;
                --v596;
              }

              while (v596);
            }

            uint64_t v598 = a1 + 56;
            v599 = (void *)(a1 + 56 + 4LL * *((void *)v171 + 1) + 10548);
            v600 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
            memcpy(v599, v600, 4LL * *((void *)v171 + 2));
            uint64_t v180 = v598 + 4LL * *((void *)v171 + 1);
            uint64_t v181 = 10612LL;
            goto LABEL_511;
          case -16077:
            v602 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(void *)(a1 + 8608) = *((void *)v602 + 1);
            __int128 v572 = GTTraceFunc_argumentBytesWithMap(a2, v602[16], a3);
            v601 = (void *)(a1 + 8616);
            size_t v573 = 48LL * *((void *)v602 + 1);
            goto LABEL_514;
          case -16076:
            int64x2_t v603 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(void *)(a1 + 9384) = *((void *)v603 + 1);
            __int128 v572 = GTTraceFunc_argumentBytesWithMap(a2, v603[16], a3);
            v601 = (void *)(a1 + 9392);
            size_t v573 = 32LL * *((void *)v603 + 1);
            goto LABEL_514;
          case -16074:
            v604 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(_DWORD *)(a1 + 56 + 4LL * *((void *)v604 + 3) + 10696) = *((void *)v604 + 1);
            *(_DWORD *)(a1 + 56 + 4LL * *((void *)v604 + 3) + 10820) = *((void *)v604 + 2);
            break;
          default:
            return;
        }
      }

      else
      {
        switch(v7)
        {
          case -16028:
            unint64_t v18 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(void *)(a1 + 8LL * *((void *)v18 + 2) + 128) = *((void *)v18 + 1);
            break;
          case -16027:
            break;
          case -16026:
            break;
          case -16025:
          case -16024:
          case -16023:
          case -16019:
          case -16018:
          case -16016:
          case -16015:
            return;
          case -16022:
            uint64_t v496 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(void *)(a1 + 8LL * *((void *)v496 + 2) + 9992) = *((void *)v496 + 1);
            break;
          case -16021:
            break;
          case -16020:
            break;
          case -16017:
            unint64_t v497 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(void *)(a1 + 2032) = *((void *)v497 + 1);
            *(_DWORD *)(a1 + 2172) = *((void *)v497 + 2);
            break;
          case -16014:
            uint64_t v498 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            bzero((void *)a1, 0x2B90uLL);
            uint64_t v499 = *((void *)v498 + 1);
            if (v499)
            {
              *(_DWORD *)a1 = 28;
              uint64_t v500 = *a2;
              *(void *)(a1 + 8) = v499;
              *(void *)(a1 + 16) = v500;
              *(void *)(a1 + 24) = -1LL;
              *(void *)(a1 + 40) = *(void *)v498;
              bzero((void *)(a1 + 56), 0x888uLL);
              memset_pattern16((void *)(a1 + 2240), &unk_318430, 0x100uLL);
              *(void *)(a1 + 824) = -1LL;
              *(void *)&__int128 v501 = -1LL;
              *((void *)&v501 + 1) = -1LL;
              *(_OWORD *)(a1 + 792) = v501;
              *(_OWORD *)(a1 + 808) = v501;
              *(_OWORD *)(a1 + 760) = v501;
              *(_OWORD *)(a1 + 776) = v501;
              *(_OWORD *)(a1 + 728) = v501;
              *(_OWORD *)(a1 + 744) = v501;
              *(_OWORD *)(a1 + 696) = v501;
              *(_OWORD *)(a1 + 712) = v501;
              *(_OWORD *)(a1 + 664) = v501;
              *(_OWORD *)(a1 + 680) = v501;
              *(_OWORD *)(a1 + 632) = v501;
              *(_OWORD *)(a1 + 648) = v501;
              *(_OWORD *)(a1 + 600) = v501;
              *(_OWORD *)(a1 + 616) = v501;
              *(_OWORD *)(a1 + 584) = v501;
              *(_BYTE *)(a1 + 2304) = *((void *)v498 + 2);
            }

            break;
          case -16013:
            uint64_t v12 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            bzero((void *)a1, 0x2B90uLL);
            uint64_t v13 = *((void *)v12 + 1);
            if (v13)
            {
              int v14 = 82;
              goto LABEL_433;
            }

            break;
          default:
            if (v7 == -15984)
            {
              v605 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              *(_BYTE *)(v6 + 2530) = *((_DWORD *)v605 + 4);
              *(_DWORD *)(a1 + 10740) = *((void *)v605 + 1);
            }

            else if (v7 == -15970)
            {
              *(_BYTE *)(a1 + 11146) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap( a2,  *((unsigned __int8 *)a2 + 13),  a3)
                                       + 2);
            }

            break;
        }
      }
    }

    else
    {
      if (v7 > -15649)
      {
        if (v7 > -15588)
        {
          switch(v7)
          {
            case -15587:
              unint64_t v15 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              bzero((void *)a1, 0x2B90uLL);
              uint64_t v16 = *((void *)v15 + 1);
              if (!v16) {
                return;
              }
              int v17 = 21;
              goto LABEL_385;
            case -15586:
              unint64_t v15 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              bzero((void *)a1, 0x2B90uLL);
              uint64_t v452 = *((void *)v15 + 1);
              if (!v452) {
                return;
              }
              *(_DWORD *)a1 = 28;
              uint64_t v453 = *a2;
              *(void *)(a1 + 8) = v452;
              *(void *)(a1 + 16) = v453;
              *(void *)(a1 + 24) = -1LL;
              *(void *)(a1 + 40) = *(void *)v15;
              bzero((void *)(a1 + 56), 0x888uLL);
              memset_pattern16((void *)(a1 + 2240), &unk_318430, 0x100uLL);
              *(void *)(a1 + 824) = -1LL;
              *(void *)&__int128 v454 = -1LL;
              *((void *)&v454 + 1) = -1LL;
              *(_OWORD *)(a1 + 792) = v454;
              *(_OWORD *)(a1 + 808) = v454;
              *(_OWORD *)(a1 + 760) = v454;
              *(_OWORD *)(a1 + 776) = v454;
              *(_OWORD *)(a1 + 728) = v454;
              *(_OWORD *)(a1 + 744) = v454;
              *(_OWORD *)(a1 + 696) = v454;
              *(_OWORD *)(a1 + 712) = v454;
              *(_OWORD *)(a1 + 664) = v454;
              *(_OWORD *)(a1 + 680) = v454;
              *(_OWORD *)(a1 + 632) = v454;
              *(_OWORD *)(a1 + 648) = v454;
              *(_OWORD *)(a1 + 600) = v454;
              *(_OWORD *)(a1 + 616) = v454;
              *(_OWORD *)(a1 + 584) = v454;
              *(_BYTE *)(a1 + 2304) = -1;
              goto LABEL_386;
            case -15585:
              unint64_t v15 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              bzero((void *)a1, 0x2B90uLL);
              uint64_t v16 = *((void *)v15 + 1);
              if (!v16) {
                return;
              }
              int v17 = 74;
LABEL_385:
              *(_DWORD *)a1 = v17;
              uint64_t v455 = *a2;
              *(void *)(a1 + 8) = v16;
              *(void *)(a1 + 16) = v455;
              *(void *)(a1 + 24) = -1LL;
              *(void *)(a1 + 40) = *(void *)v15;
LABEL_386:
              *(void *)(a1 + 56) = GTTraceFunc_argumentBytesWithMap(a2, v15[16], a3);
              break;
            case -15583:
            case -15581:
              goto LABEL_50;
            case -15582:
              int v456 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              uint64_t v457 = v456;
              unint64_t v458 = *((void *)v456 + 1);
              unint64_t v459 = *((void *)v456 + 2) + v458;
              unint64_t v460 = 64LL;
              if (v459 >= 0x40) {
                unint64_t v459 = 64LL;
              }
              char v461 = v459 - v458;
              if (v459 < v458) {
                char v461 = 0;
              }
              uint64_t v462 = ~(-1LL << v461);
              if (v458 <= v459) {
                char v463 = v458 & 0x3F;
              }
              else {
                char v463 = 0;
              }
              uint64_t v466 = *(void *)(a1 + 80);
              __int128 v465 = (uint64_t *)(a1 + 80);
              uint64_t v464 = v466;
              *(v465 - 1) &= ~(v462 << v463);
              unint64_t v467 = *((void *)v456 + 1);
              if (*((void *)v456 + 2) + v467 < 0x40) {
                unint64_t v460 = *((void *)v456 + 2) + v467;
              }
              char v468 = v460 - v467;
              if (v460 < v467) {
                char v468 = 0;
              }
              uint64_t v469 = ~(-1LL << v468);
              if (v467 <= v460) {
                char v470 = v467 & 0x3F;
              }
              else {
                char v470 = 0;
              }
              *__int128 v465 = v464 & ~(v469 << v470);
              uint64_t v471 = *((void *)v456 + 1);
              uint64_t v472 = GTTraceFunc_argumentBytesWithMap(a2, v456[24], a3);
              if ((int)*((void *)v457 + 2) >= 1)
              {
                uint64_t v473 = &v465[v471 + 1];
                uint64_t v474 = *((void *)v457 + 2);
                do
                {
                  uint64_t v475 = *(void *)v472;
                  v472 += 8;
                  *v473++ = v475;
                  --v474;
                }

                while (v474);
              }

              return;
            case -15580:
              uint64_t v476 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              uint64_t v477 = v476;
              unint64_t v478 = *((void *)v476 + 1);
              unint64_t v479 = *((void *)v476 + 2) + v478;
              unint64_t v480 = 64LL;
              if (v479 >= 0x40) {
                unint64_t v479 = 64LL;
              }
              char v481 = v479 - v478;
              if (v479 < v478) {
                char v481 = 0;
              }
              uint64_t v482 = ~(-1LL << v481);
              if (v478 <= v479) {
                char v483 = v478 & 0x3F;
              }
              else {
                char v483 = 0;
              }
              uint64_t v486 = *(void *)(a1 + 80);
              unint64_t v485 = (uint64_t *)(a1 + 80);
              uint64_t v484 = v486;
              *(v485 - 1) &= ~(v482 << v483);
              unint64_t v487 = *((void *)v476 + 1);
              if (*((void *)v476 + 2) + v487 < 0x40) {
                unint64_t v480 = *((void *)v476 + 2) + v487;
              }
              char v488 = v480 - v487;
              if (v480 < v487) {
                char v488 = 0;
              }
              uint64_t v489 = ~(-1LL << v488);
              if (v487 <= v480) {
                char v490 = v487 & 0x3F;
              }
              else {
                char v490 = 0;
              }
              *unint64_t v485 = v484 & ~(v489 << v490);
              uint64_t v491 = *((void *)v476 + 1);
              uint64_t v492 = GTTraceFunc_argumentBytesWithMap(a2, v476[24], a3);
              if ((int)*((void *)v477 + 2) >= 1)
              {
                uint64_t v493 = &v485[v491 + 1];
                uint64_t v494 = *((void *)v477 + 2);
                do
                {
                  uint64_t v495 = *(void *)v492;
                  v492 += 8;
                  *v493++ = v495;
                  --v494;
                }

                while (v494);
              }

              return;
            default:
              return;
          }

          return;
        }

        if (v7 != -15648)
        {
          if (v7 != -15642)
          {
            if (v7 == -15623)
            {
LABEL_50:
              int32x2_t v51 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              unint64_t v52 = *((void *)v51 + 2);
              uint64_t v53 = 1LL << v52;
              uint64_t v54 = a1 + 8LL * (int)(v52 >> 6);
              *(void *)(v54 + 72) &= ~v53;
              *(void *)(a1 + 80 + 8LL * *((void *)v51 + 2) + 8) = *((void *)v51 + 1);
              *(void *)(a1 + 80 + 8LL * (int)(*((void *)v51 + 2) >> 6)) &= ~(1LL << *((void *)v51 + 2));
            }

            return;
          }

BOOL GTMTLSMBuilder_streamIntersectionRange(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(a3 + 32);
  if (v5 && (*(_BYTE *)(v5 + 79) & 8) != 0) {
    uint64_t v6 = (void *)(v5 + 64);
  }
  else {
    uint64_t v6 = 0LL;
  }
  Funapr_vformatter_buff_t c = GTTraceStream_lastFunc(a3);
  if (*v6 >= a1 + a2) {
    return 0LL;
  }
  unint64_t v9 = (unint64_t *)Func;
  return !IsFuncEnumDestructor(*(_DWORD *)(Func + 8)) || a1 <= *v9;
}

uint64_t GTMTLSMBuilder_compareStreams(void **a1, void **a2)
{
  int v2 = *a1;
  if (*a1) {
    int v2 = (void *)*v2;
  }
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (void *)*v3;
  }
  BOOL v4 = v2 >= v3;
  BOOL v5 = v2 != v3;
  if (v4) {
    return v5;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t *GTMTLSMContext_buildDeviceMirrorWithIgnoreFlags( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, apr_pool_t *pool)
{
  __int128 v1247 = 0u;
  __int128 v1248 = 0u;
  __int128 v1245 = 0u;
  __int128 v1246 = 0u;
  __int128 v1243 = 0u;
  __int128 v1244 = 0u;
  __int128 v1241 = 0u;
  __int128 v1242 = 0u;
  __int128 v1240 = 0u;
  uint64_t v1234 = 1LL;
  unint64_t v1235 = a4;
  uint64_t v1236 = a5;
  p = pool;
  ht = apr_hash_make(pool);
  uint64_t v1239 = a2;
  v1218 = pool;
  unint64_t v9 = apr_array_make(pool, *(_DWORD *)(a1 + 48), 8);
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = a1;
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v10 = apr_hash_next((apr_hash_index_t *)(a1 + 16));
  if (v10)
  {
    uint64_t v11 = v10;
    do
    {
      uint64_t v12 = *(void *)(*((void *)v11 + 1) + 32LL);
      *(void *)apr_array_push(v9) = v12;
      uint64_t v11 = apr_hash_next(v11);
    }

    while (v11);
  }

  qsort(v9->elts, v9->nelts, v9->elt_size, (int (__cdecl *)(const void *, const void *))GTMTLSMBuilder_compareStreams);
  uint64_t v1233 = 0LL;
  __int128 v1232 = 0u;
  __int128 v1231 = 0u;
  __int128 v1230 = 0u;
  uint64_t v1229 = 1LL;
  __key = &v1229;
  uint64_t v13 = (uint64_t *)bsearch( &__key,  v9->elts,  v9->nelts,  v9->elt_size,  (int (__cdecl *)(const void *, const void *))GTMTLSMBuilder_compareStreams);
  if (!v13) {
    goto LABEL_1306;
  }
  int v14 = v13 + 1;
  uint64_t v15 = *v13;
  if (*(_DWORD *)(*(void *)(*v13 + 32) + 72LL) != -10239) {
    return 0LL;
  }
  uint64_t v16 = (uint64_t)&v9->elts[8 * v9->nelts];
  uint64_t v1219 = v16;
  if (GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v15))
  {
    LODWORD(v124memset(v56, 0, 7) = v1247 + 1;
    uint64_t v17 = *(void *)(v15 + 32);
    if (v17)
    {
      unsigned int v18 = 0;
      while (1)
      {
        unsigned int v19 = atomic_load((unsigned int *)(v17 + 4));
        uint64_t v20 = v18 + (v19 >> 6) - 1;
        uint64_t v17 = *(void *)(v17 + 40);
        unsigned int v18 = v20;
        if (!v17)
        {
          unsigned int v18 = v20;
          goto LABEL_15;
        }
      }
    }

    else
    {
      unsigned int v18 = 0;
    }

    uint64_t v20 = 0LL;
LABEL_15:
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    unint64_t v24 = v18 | (unint64_t)(v20 << 32);
LABEL_16:
    uint64_t v25 = v17 + 64;
    while (v17)
    {
      int v26 = HIDWORD(v24) - v24;
      uint64_t v27 = v25 + ((uint64_t)v26 << 6);
      unint64_t v28 = *(void *)v27;
      if (*(void *)v27 >= v1236 + v1235) {
        break;
      }
      int v29 = *(_DWORD *)(v27 + 8);
      if (v29 == -10239)
      {
        uint64_t v30 = v1239;
        uint64_t v31 = GTTraceFunc_argumentBytesWithMap( (void *)v27,  *(unsigned __int8 *)(v25 + ((uint64_t)v26 << 6) + 13),  v1239);
        uint64_t v22 = *(void *)v31;
        uint64_t v23 = GTTraceFunc_argumentBytesWithMap((void *)v27, v31[8], v30);
      }

      else if (v29 == -16317)
      {
        if (v1235 <= v28)
        {
          v1063 = apr_palloc(p, 0x30uLL);
          void *v1063 = 36LL;
          v1063[1] = v22;
          *((_OWORD *)v1063 + 1) = xmmword_318410;
          v1063[4] = 0LL;
          v1063[5] = v23;
          uint64_t v1064 = *find_entry((uint64_t)ht, (_BYTE *)v1063 + 8, 8uLL, 0LL);
          if (v1064) {
            uint64_t v1064 = *(void *)(v1064 + 32);
          }
          v1063[4] = v1064;
          apr_hash_set(ht, v1063 + 1, 8LL, v1063);
          v1063[3] = v28;
        }

        goto LABEL_29;
      }

      unsigned int v32 = atomic_load((unsigned int *)(v17 + 4));
      int v33 = v24 + (v32 >> 6);
      uint64_t v34 = (HIDWORD(v24) + 1);
      unint64_t v24 = (v34 << 32) | v24;
      if ((_DWORD)v34 == v33 - 1)
      {
        unint64_t v24 = (v34 << 32) | v34;
        uint64_t v17 = *(void *)(v17 + 40);
        goto LABEL_16;
      }
    }

    int v35 = apr_palloc(p, 0x30uLL);
    *int v35 = 36LL;
    v35[1] = v22;
    *((_OWORD *)v35 + 1) = xmmword_318410;
    v35[4] = 0LL;
    v35[5] = v23;
    uint64_t v36 = *find_entry((uint64_t)ht, (_BYTE *)v35 + 8, 8uLL, 0LL);
    if (v36) {
      uint64_t v36 = *(void *)(v36 + 32);
    }
    v35[4] = v36;
    apr_hash_set(ht, v35 + 1, 8LL, v35);
    v35[3] = -1LL;
  }

LABEL_1079:
        unint64_t v816 = v813 | (unint64_t)(v815 << 32);
        while (2)
        {
          uint64_t v817 = v812 + 64;
LABEL_1081:
          if (!v812
            || (*(_BYTE *)(v817 + ((uint64_t)(HIDWORD(v816) - (int)v816) << 6) + 15) & 8) == 0
            || (uint64_t v818 = v817 + ((uint64_t)(HIDWORD(v816) - (int)v816) << 6),
                unint64_t v262 = *(void *)v818,
                *(void *)v818 >= v1236 + v1235))
          {
            unint64_t v278 = apr_palloc(p, 0xA0uLL);
            __int128 v833 = __src[1];
            *unint64_t v278 = __src[0];
            v278[1] = v833;
            __int128 v834 = __src[5];
            __int128 v836 = __src[2];
            __int128 v835 = __src[3];
            v278[4] = __src[4];
            v278[5] = v834;
            v278[2] = v836;
            v278[3] = v835;
            __int128 v837 = __src[9];
            __int128 v839 = __src[6];
            __int128 v838 = __src[7];
            v278[8] = __src[8];
            v278[9] = v837;
            v278[6] = v839;
            v278[7] = v838;
            goto LABEL_1155;
          }

          int v819 = *(_DWORD *)(v818 + 8);
          if (v819 <= -16368)
          {
            if (v819 != -16372)
            {
              if (v819 == -16370)
              {
                if (v1235 <= v262)
                {
                  unint64_t v278 = apr_palloc(p, 0xA0uLL);
                  __int128 v1005 = __src[1];
                  *unint64_t v278 = __src[0];
                  v278[1] = v1005;
                  __int128 v1006 = __src[5];
                  __int128 v1008 = __src[2];
                  __int128 v1007 = __src[3];
                  v278[4] = __src[4];
                  v278[5] = v1006;
                  v278[2] = v1008;
                  v278[3] = v1007;
                  __int128 v1009 = __src[9];
                  __int128 v1011 = __src[6];
                  __int128 v1010 = __src[7];
                  v278[8] = __src[8];
                  v278[9] = v1009;
                  v278[6] = v1011;
                  v278[7] = v1010;
                  goto LABEL_1303;
                }

                goto LABEL_1211;
              }

LABEL_1096:
              GTMTLSMBuffer_processTraceFuncWithMap((char *)__src, v1239, (uint64_t *)v818);
              unsigned int v830 = atomic_load((unsigned int *)(v812 + 4));
              int v831 = v816 + (v830 >> 6);
              uint64_t v832 = (HIDWORD(v816) + 1);
              unint64_t v816 = (v832 << 32) | v816;
              if ((_DWORD)v832 == v831 - 1)
              {
                unint64_t v816 = (v832 << 32) | v832;
                uint64_t v812 = *(void *)(v812 + 40);
                continue;
              }

              goto LABEL_1081;
            }
          }

          else if (v819 != -16122 && v819 != -16367)
          {
            goto LABEL_1096;
          }

          break;
        }

        if (v1235 <= v262)
        {
          v821 = apr_palloc(p, 0xA0uLL);
          __int128 v822 = __src[1];
          *(_OWORD *)v821 = __src[0];
          *((_OWORD *)v821 + 1) = v822;
          __int128 v823 = __src[5];
          __int128 v825 = __src[2];
          __int128 v824 = __src[3];
          *((_OWORD *)v821 + 4) = __src[4];
          *((_OWORD *)v821 + 5) = v823;
          *((_OWORD *)v821 + 2) = v825;
          *((_OWORD *)v821 + 3) = v824;
          __int128 v826 = __src[9];
          __int128 v828 = __src[6];
          __int128 v827 = __src[7];
          *((_OWORD *)v821 + 8) = __src[8];
          *((_OWORD *)v821 + 9) = v826;
          *((_OWORD *)v821 + 6) = v828;
          *((_OWORD *)v821 + memset(v56, 0, 7) = v827;
          uint64_t v829 = *find_entry((uint64_t)ht, (_BYTE *)v821 + 8, 8uLL, 0LL);
          if (v829) {
            uint64_t v829 = *(void *)(v829 + 32);
          }
          v821[4] = v829;
          apr_hash_set(ht, v821 + 1, 8LL, v821);
          v821[3] = v262;
        }

        goto LABEL_1096;
      case 1:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        memset(__src, 0, 24);
        memset(&__src[5], 0, 128);
        __src[3] = 0u;
        *(void *)&__src[2] = 0LL;
        LODWORD(__src[0]) = 80;
        *((void *)&__src[1] + 1) = -1LL;
        WORD1(__src[6]) = 2;
        __src[4] = 0xFFFFFFFFFFFFFFFFLL;
        *(void *)&__src[13] = 0xFFFFFFFFLL;
        *((void *)&__src[2] + 1) = v1234;
        ++DWORD1(v1240);
        uint64_t v48 = *(void *)(v37 + 32);
        if (v48 && (*(_BYTE *)(v48 + 79) & 8) != 0) {
          uint64_t v49 = (uint64_t *)(v48 + 64);
        }
        else {
          uint64_t v49 = 0LL;
        }
        GTMTLSMTexture_processTraceFuncWithMap((char *)__src, v1239, v49);
        uint64_t v840 = *(void *)(v37 + 32);
        if (v840)
        {
          unsigned int v841 = 0;
          while (1)
          {
            unsigned int v842 = atomic_load((unsigned int *)(v840 + 4));
            uint64_t v843 = v841 + (v842 >> 6) - 1;
            uint64_t v840 = *(void *)(v840 + 40);
            unsigned int v841 = v843;
            if (!v840)
            {
              unsigned int v841 = v843;
              goto LABEL_1107;
            }
          }

          uint64_t v843 = 1LL;
        }

        else
        {
          unsigned int v841 = 0;
          uint64_t v843 = 0LL;
        }

LABEL_1107:
        unint64_t v844 = v841 | (unint64_t)(v843 << 32);
        while (2)
        {
          uint64_t v845 = v840 + 64;
LABEL_1109:
          if (!v840
            || (*(_BYTE *)(v845 + ((uint64_t)(HIDWORD(v844) - (int)v844) << 6) + 15) & 8) == 0
            || (uint64_t v846 = v845 + ((uint64_t)(HIDWORD(v844) - (int)v844) << 6),
                unint64_t v262 = *(void *)v846,
                *(void *)v846 >= v1236 + v1235))
          {
            unint64_t v278 = apr_palloc(p, 0xD8uLL);
            __int128 v864 = __src[1];
            *unint64_t v278 = __src[0];
            v278[1] = v864;
            __int128 v865 = __src[5];
            __int128 v867 = __src[2];
            __int128 v866 = __src[3];
            v278[4] = __src[4];
            v278[5] = v865;
            v278[2] = v867;
            v278[3] = v866;
            __int128 v868 = __src[9];
            __int128 v870 = __src[6];
            __int128 v869 = __src[7];
            v278[8] = __src[8];
            v278[9] = v868;
            v278[6] = v870;
            v278[7] = v869;
            __int128 v872 = __src[11];
            __int128 v871 = __src[12];
            uint64_t v873 = *(void *)&__src[13];
            v278[10] = __src[10];
            v278[11] = v872;
            *((void *)v278 + 26) = v873;
            v278[12] = v871;
            goto LABEL_1155;
          }

          int v847 = *(_DWORD *)(v846 + 8);
          if (v847 <= -16233)
          {
            if (v847 != -16240)
            {
              if (v847 == -16238)
              {
                if (v1235 <= v262)
                {
                  unint64_t v278 = apr_palloc(p, 0xD8uLL);
                  __int128 v1012 = __src[1];
                  *unint64_t v278 = __src[0];
                  v278[1] = v1012;
                  __int128 v1013 = __src[5];
                  __int128 v1015 = __src[2];
                  __int128 v1014 = __src[3];
                  v278[4] = __src[4];
                  v278[5] = v1013;
                  v278[2] = v1015;
                  v278[3] = v1014;
                  __int128 v1016 = __src[9];
                  __int128 v1018 = __src[6];
                  __int128 v1017 = __src[7];
                  v278[8] = __src[8];
                  v278[9] = v1016;
                  v278[6] = v1018;
                  v278[7] = v1017;
                  __int128 v1020 = __src[11];
                  __int128 v1019 = __src[12];
                  uint64_t v1021 = *(void *)&__src[13];
                  v278[10] = __src[10];
                  v278[11] = v1020;
                  *((void *)v278 + 26) = v1021;
                  v278[12] = v1019;
                  goto LABEL_1303;
                }

                goto LABEL_1211;
              }

LABEL_1124:
              GTMTLSMTexture_processTraceFuncWithMap((char *)__src, v1239, (uint64_t *)v846);
              unsigned int v861 = atomic_load((unsigned int *)(v840 + 4));
              int v862 = v844 + (v861 >> 6);
              uint64_t v863 = (HIDWORD(v844) + 1);
              unint64_t v844 = (v863 << 32) | v844;
              if ((_DWORD)v863 == v862 - 1)
              {
                unint64_t v844 = (v863 << 32) | v863;
                uint64_t v840 = *(void *)(v840 + 40);
                continue;
              }

              goto LABEL_1109;
            }
          }

          else if (v847 != -16232 && v847 != -16114)
          {
            goto LABEL_1124;
          }

          break;
        }

        if (v1235 <= v262)
        {
          v849 = apr_palloc(p, 0xD8uLL);
          __int128 v850 = __src[1];
          *(_OWORD *)v849 = __src[0];
          *((_OWORD *)v849 + 1) = v850;
          __int128 v851 = __src[5];
          __int128 v853 = __src[2];
          __int128 v852 = __src[3];
          *((_OWORD *)v849 + 4) = __src[4];
          *((_OWORD *)v849 + 5) = v851;
          *((_OWORD *)v849 + 2) = v853;
          *((_OWORD *)v849 + 3) = v852;
          __int128 v854 = __src[9];
          __int128 v856 = __src[6];
          __int128 v855 = __src[7];
          *((_OWORD *)v849 + 8) = __src[8];
          *((_OWORD *)v849 + 9) = v854;
          *((_OWORD *)v849 + 6) = v856;
          *((_OWORD *)v849 + memset(v56, 0, 7) = v855;
          __int128 v858 = __src[11];
          __int128 v857 = __src[12];
          uint64_t v859 = *(void *)&__src[13];
          *((_OWORD *)v849 + 10) = __src[10];
          *((_OWORD *)v849 + 11) = v858;
          v849[26] = v859;
          *((_OWORD *)v849 + 12) = v857;
          uint64_t v860 = *find_entry((uint64_t)ht, (_BYTE *)v849 + 8, 8uLL, 0LL);
          if (v860) {
            uint64_t v860 = *(void *)(v860 + 32);
          }
          v849[4] = v860;
          apr_hash_set(ht, v849 + 1, 8LL, v849);
          v849[3] = v262;
        }

        goto LABEL_1124;
      case 2:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        ++DWORD2(v1240);
        uint64_t v50 = *(void *)(v37 + 32);
        if (v50)
        {
          unsigned int v51 = 0;
          while (1)
          {
            unsigned int v52 = atomic_load((unsigned int *)(v50 + 4));
            uint64_t v53 = v51 + (v52 >> 6) - 1;
            uint64_t v50 = *(void *)(v50 + 40);
            unsigned int v51 = v53;
            if (!v50)
            {
              unsigned int v51 = v53;
              goto LABEL_257;
            }
          }
        }

        else
        {
          unsigned int v51 = 0;
        }

        uint64_t v53 = 0LL;
LABEL_257:
        int v1156 = 0;
        uint64_t v1169 = 0LL;
        uint64_t v1183 = 0LL;
        uint64_t v1124 = 0LL;
        uint64_t v1138 = 0LL;
        int v191 = 0LL;
        int v192 = 0LL;
        unint64_t v193 = v51 | (unint64_t)(v53 << 32);
        __int128 v1202 = xmmword_3183F0;
        while (2)
        {
          uint64_t v194 = v50 + 64;
LABEL_259:
          if (v50
            && (int v195 = HIDWORD(v193) - v193,
                (*(_BYTE *)(v194 + ((uint64_t)(HIDWORD(v193) - (int)v193) << 6) + 15) & 8) != 0)
            && (uint64_t v196 = (uint64_t *)(v194 + ((uint64_t)v195 << 6)), v197 = *v196, *v196 < v1236 + v1235))
          {
            int v198 = *((_DWORD *)v196 + 2);
            if (v198 != -16241)
            {
              uint64_t v199 = v1239;
              if (v198 == -10163)
              {
                char v203 = GTTraceFunc_argumentBytesWithMap( v196,  *(unsigned __int8 *)(v194 + ((uint64_t)v195 << 6) + 13),  v1239);
                *(void *)&__int128 v204 = v1202;
                *((void *)&v204 + 1) = *((void *)v203 + 1);
              }

              else
              {
                if (v198 != -10226)
                {
                  if (v198 == -16309)
                  {
                    uint64_t v200 = v194 + ((uint64_t)v195 << 6);
                    unint64_t v201 = GTTraceFunc_argumentBytesWithMap((void *)v200, *(unsigned __int8 *)(v200 + 13), v1239);
                    uint64_t v1169 = *((void *)v201 + 1);
                    uint64_t v1183 = *v196;
                    int v1156 = *((_DWORD *)v196 + 2);
                    unint64_t v202 = GTTraceFunc_argumentBytesWithMap(v196, *(unsigned __int8 *)(v200 + 14), v199);
                    int v192 = v202;
                    if (v202)
                    {
                      uint64_t v1124 = *((void *)v202 + 2);
                      __int128 v1202 = *(_OWORD *)v202;
                    }

                    uint64_t v1138 = *(void *)v201;
                    int v191 = GTTraceFunc_argumentBytesWithMap(v196, v201[16], v199);
                  }

LABEL_366:
                  GTMTLSMVisibleFunctionTable_processTraceFuncWithMap((char *)__src, v1239, (uint64_t *)v261);
                  unsigned int v275 = atomic_load((unsigned int *)(v66 + 4));
                  int v276 = v259 + (v275 >> 6);
                  uint64_t v277 = (HIDWORD(v259) + 1);
                  unint64_t v259 = (v277 << 32) | v259;
                  if ((_DWORD)v277 == v276 - 1)
                  {
                    unint64_t v259 = (v277 << 32) | v277;
                    uint64_t v66 = *(void *)(v66 + 40);
                    continue;
                  }

                  goto LABEL_351;
                }

                if (v263 != -15605) {
                  goto LABEL_366;
                }
                unint64_t v278 = apr_palloc(p, 0xB0uLL);
                __int128 v998 = __src[1];
                __int128 v997 = __src[2];
                *unint64_t v278 = __src[0];
                v278[1] = v998;
                v278[2] = v997;
                __int128 v999 = __src[6];
                __int128 v1001 = __src[3];
                __int128 v1000 = __src[4];
                v278[5] = __src[5];
                v278[6] = v999;
                v278[3] = v1001;
                v278[4] = v1000;
                __int128 v1002 = __src[10];
                __int128 v1004 = __src[7];
                __int128 v1003 = __src[8];
                v278[9] = __src[9];
                v278[10] = v1002;
                v278[7] = v1004;
                v278[8] = v1003;
                goto LABEL_1303;
              }
            }
          }

          break;
        }

        unint64_t v278 = apr_palloc(p, 0xB0uLL);
        __int128 v280 = __src[1];
        __int128 v279 = __src[2];
        *unint64_t v278 = __src[0];
        v278[1] = v280;
        v278[2] = v279;
        __int128 v281 = __src[6];
        __int128 v283 = __src[3];
        __int128 v282 = __src[4];
        v278[5] = __src[5];
        v278[6] = v281;
        v278[3] = v283;
        v278[4] = v282;
        __int128 v284 = __src[10];
        __int128 v286 = __src[7];
        __int128 v285 = __src[8];
        v278[9] = __src[9];
        v278[10] = v284;
        v278[7] = v286;
        v278[8] = v285;
        goto LABEL_1155;
      case 7:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        memset(__src, 0, 24);
        memset(&__src[5], 0, 88);
        memset(&__src[2], 0, 32);
        LODWORD(__src[0]) = 60;
        *((void *)&__src[1] + 1) = -1LL;
        WORD1(__src[6]) = 2;
        __src[4] = 0xFFFFFFFFFFFFFFFFLL;
        ++HIDWORD(v1241);
        uint64_t v70 = *(void *)(v37 + 32);
        if (v70 && (*(_BYTE *)(v70 + 79) & 8) != 0) {
          uint64_t v71 = (uint64_t *)(v70 + 64);
        }
        else {
          uint64_t v71 = 0LL;
        }
        GTMTLSMIntersectionFunctionTable_processTraceFuncWithMap((char *)__src, v1239, v71);
        uint64_t v874 = *(void *)(v37 + 32);
        if (v874)
        {
          unsigned int v875 = 0;
          while (1)
          {
            unsigned int v876 = atomic_load((unsigned int *)(v874 + 4));
            uint64_t v877 = v875 + (v876 >> 6) - 1;
            uint64_t v874 = *(void *)(v874 + 40);
            unsigned int v875 = v877;
            if (!v874)
            {
              unsigned int v875 = v877;
              goto LABEL_1135;
            }
          }

          uint64_t v877 = 1LL;
        }

        else
        {
          unsigned int v875 = 0;
          uint64_t v877 = 0LL;
        }

LABEL_1135:
        unint64_t v878 = v875 | (unint64_t)(v877 << 32);
        while (2)
        {
          uint64_t v879 = v874 + 64;
LABEL_1137:
          if (v874)
          {
            if ((*(_BYTE *)(v879 + ((uint64_t)(HIDWORD(v878) - (int)v878) << 6) + 15) & 8) != 0)
            {
              uint64_t v880 = v879 + ((uint64_t)(HIDWORD(v878) - (int)v878) << 6);
              unint64_t v262 = *(void *)v880;
              if (*(void *)v880 < v1236 + v1235)
              {
                int v881 = *(_DWORD *)(v880 + 8);
                if (v881 > -15561)
                {
                  if (v881 != -15557 && v881 != -15560) {
                    goto LABEL_1152;
                  }
                  goto LABEL_1147;
                }

                if (v881 == -15570)
                {
LABEL_1147:
                  if (v1235 <= v262)
                  {
                    v883 = apr_palloc(p, 0xA8uLL);
                    __int128 v885 = __src[1];
                    __int128 v884 = __src[2];
                    *(_OWORD *)v883 = __src[0];
                    *((_OWORD *)v883 + 1) = v885;
                    *((_OWORD *)v883 + 2) = v884;
                    __int128 v886 = __src[6];
                    __int128 v888 = __src[3];
                    __int128 v887 = __src[4];
                    *((_OWORD *)v883 + 5) = __src[5];
                    *((_OWORD *)v883 + 6) = v886;
                    *((_OWORD *)v883 + 3) = v888;
                    *((_OWORD *)v883 + 4) = v887;
                    __int128 v890 = __src[8];
                    __int128 v889 = __src[9];
                    __int128 v891 = __src[7];
                    v883[20] = *(void *)&__src[10];
                    *((_OWORD *)v883 + 8) = v890;
                    *((_OWORD *)v883 + 9) = v889;
                    *((_OWORD *)v883 + memset(v56, 0, 7) = v891;
                    uint64_t v892 = *find_entry((uint64_t)ht, (_BYTE *)v883 + 8, 8uLL, 0LL);
                    if (v892) {
                      uint64_t v892 = *(void *)(v892 + 32);
                    }
                    v883[4] = v892;
                    apr_hash_set(ht, v883 + 1, 8LL, v883);
                    v883[3] = v262;
                  }

LABEL_1152:
                  GTMTLSMIntersectionFunctionTable_processTraceFuncWithMap((char *)__src, v1239, (uint64_t *)v880);
                  unsigned int v893 = atomic_load((unsigned int *)(v874 + 4));
                  int v894 = v878 + (v893 >> 6);
                  uint64_t v895 = (HIDWORD(v878) + 1);
                  unint64_t v878 = (v895 << 32) | v878;
                  if ((_DWORD)v895 == v894 - 1)
                  {
                    unint64_t v878 = (v895 << 32) | v895;
                    uint64_t v874 = *(void *)(v874 + 40);
                    continue;
                  }

                  goto LABEL_1137;
                }

                if (v881 != -15568) {
                  goto LABEL_1152;
                }
                if (v1235 > v262) {
                  goto LABEL_1211;
                }
                unint64_t v278 = apr_palloc(p, 0xA8uLL);
                __int128 v1023 = __src[1];
                __int128 v1022 = __src[2];
                *unint64_t v278 = __src[0];
                v278[1] = v1023;
                v278[2] = v1022;
                __int128 v1024 = __src[6];
                __int128 v1026 = __src[3];
                __int128 v1025 = __src[4];
                v278[5] = __src[5];
                v278[6] = v1024;
                v278[3] = v1026;
                v278[4] = v1025;
                __int128 v1028 = __src[8];
                __int128 v1027 = __src[9];
                __int128 v1029 = __src[7];
                *((void *)v278 + 20) = *(void *)&__src[10];
                v278[8] = v1028;
                v278[9] = v1027;
                v278[7] = v1029;
LABEL_1303:
                uint64_t v1044 = *find_entry((uint64_t)ht, (_BYTE *)v278 + 8, 8uLL, 0LL);
                if (v1044) {
                  uint64_t v1044 = *(void *)(v1044 + 32);
                }
                *((void *)v278 + 4) = v1044;
                apr_hash_set(ht, (char *)v278 + 8, 8LL, v278);
LABEL_1158:
                *((void *)v278 + 3) = v262;
                goto LABEL_1211;
              }
            }
          }

          break;
        }

        unint64_t v278 = apr_palloc(p, 0xA8uLL);
        __int128 v897 = __src[1];
        __int128 v896 = __src[2];
        *unint64_t v278 = __src[0];
        v278[1] = v897;
        v278[2] = v896;
        __int128 v898 = __src[6];
        __int128 v900 = __src[3];
        __int128 v899 = __src[4];
        v278[5] = __src[5];
        v278[6] = v898;
        v278[3] = v900;
        v278[4] = v899;
        __int128 v902 = __src[8];
        __int128 v901 = __src[9];
        __int128 v903 = __src[7];
        *((void *)v278 + 20) = *(void *)&__src[10];
        v278[8] = v902;
        v278[9] = v901;
        v278[7] = v903;
        goto LABEL_1155;
      case 8:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        memset(__src, 0, 24);
        memset(&__src[5], 0, 128);
        memset(&__src[2], 0, 32);
        LODWORD(__src[0]) = 16;
        *((void *)&__src[1] + 1) = -1LL;
        WORD1(__src[6]) = 2;
        __src[4] = 0xFFFFFFFFFFFFFFFFLL;
        LODWORD(v1242) = v1242 + 1;
        uint64_t v72 = *(void *)(v37 + 32);
        if (v72 && (*(_BYTE *)(v72 + 79) & 8) != 0) {
          __int128 v73 = (uint64_t *)(v72 + 64);
        }
        else {
          __int128 v73 = 0LL;
        }
        GTMTLSMAccelerationStructure_processTraceFuncWithMap((char *)__src, v1239, v73);
        v905 = *(void **)(a3 + 24);
        uint64_t v906 = *(void *)(v37 + 32);
        if (v906)
        {
          unsigned int v907 = 0;
          while (1)
          {
            unsigned int v908 = atomic_load((unsigned int *)(v906 + 4));
            uint64_t v909 = v907 + (v908 >> 6) - 1;
            uint64_t v906 = *(void *)(v906 + 40);
            unsigned int v907 = v909;
            if (!v906)
            {
              unsigned int v907 = v909;
              goto LABEL_1167;
            }
          }

          uint64_t v909 = 1LL;
        }

        else
        {
          unsigned int v907 = 0;
          uint64_t v909 = 0LL;
        }

LABEL_1167:
        v910 = &v905[8 * (uint64_t)*(int *)(a3 + 12)];
        unint64_t v911 = v907 | (unint64_t)(v909 << 32);
        do
        {
LABEL_1168:
          if (v906
            && (uint64_t v912 = v906 + ((uint64_t)(0xFFFFFFFF00000001LL * v911) >> 32 << 6), (*(_BYTE *)(v912 + 79) & 8) != 0))
          {
            uint64_t v913 = v912 + 64;
          }

          else
          {
            uint64_t v913 = 0LL;
          }

          if (v905 >= v910)
          {
            if (!v913) {
              goto LABEL_1207;
            }
            unint64_t v914 = HIDWORD(v911);
            else {
              uint64_t v913 = 0LL;
            }
            unsigned int v918 = atomic_load((unsigned int *)(v906 + 4));
            int v917 = v911 + (v918 >> 6);
          }

          else
          {
            if (!v913) {
              goto LABEL_1181;
            }
            if (*v905 == *(void *)v913)
            {
              v905 += 8;
            }

            else if (*v905 < *(void *)v913)
            {
LABEL_1181:
              uint64_t v913 = (uint64_t)v905;
              v905 += 8;
              goto LABEL_1188;
            }

            unsigned int v916 = atomic_load((unsigned int *)(v906 + 4));
            int v917 = v911 + (v916 >> 6);
            unint64_t v914 = HIDWORD(v911);
          }

          uint64_t v919 = (v914 + 1);
          if ((_DWORD)v919 == v917 - 1)
          {
            unint64_t v911 = (v919 << 32) | v919;
            uint64_t v906 = *(void *)(v906 + 40);
          }

          else
          {
            unint64_t v911 = (v919 << 32) | v911;
          }

LABEL_1188:
          if (*(void *)v913 >= v1236 + v1235)
          {
LABEL_1207:
            uint64_t v530 = (char *)apr_palloc(p, 0xD0uLL);
            *(_OWORD *)uint64_t v530 = __src[0];
            __int128 v935 = __src[4];
            __int128 v937 = __src[1];
            __int128 v936 = __src[2];
            *((_OWORD *)v530 + 3) = __src[3];
            *((_OWORD *)v530 + 4) = v935;
            *((_OWORD *)v530 + 1) = v937;
            *((_OWORD *)v530 + 2) = v936;
            __int128 v938 = __src[8];
            __int128 v940 = __src[5];
            __int128 v939 = __src[6];
            *((_OWORD *)v530 + memset(v56, 0, 7) = __src[7];
            *((_OWORD *)v530 + 8) = v938;
            *((_OWORD *)v530 + 5) = v940;
            *((_OWORD *)v530 + 6) = v939;
            __int128 v942 = __src[11];
            __int128 v941 = __src[12];
            __int128 v943 = __src[10];
            *((_OWORD *)v530 + 9) = __src[9];
            *((_OWORD *)v530 + 10) = v943;
            *((_OWORD *)v530 + 11) = v942;
            *((_OWORD *)v530 + 12) = v941;
            uint64_t v944 = *find_entry((uint64_t)ht, v530 + 8, 8uLL, 0LL);
            if (v944) {
              uint64_t v944 = *(void *)(v944 + 32);
            }
            *((void *)v530 + 4) = v944;
            apr_hash_set(ht, v530 + 8, 8LL, v530);
            uint64_t v544 = -1LL;
            goto LABEL_1210;
          }

          int v920 = *(_DWORD *)(v913 + 8);
          if (v920 == -10154 || v920 == -10158) {
            v921 = (char *)*((void *)GTTraceFunc_argumentBytesWithMap( (void *)v913,  *(unsigned __int8 *)(v913 + 13),  v1239)
          }
                           + 1);
          else {
            v921 = GTTraceFunc_targetContext(v913, v1239);
          }
        }

        while (v921 != *((char **)&__src[0] + 1));
        int v922 = *(_DWORD *)(v913 + 8);
        if (v922 > -15553)
        {
          if (v922 == -15552 || v922 == -10154 || v922 == -10158)
          {
LABEL_1202:
            uint64_t v923 = *(void *)v913;
            if (v1235 <= *(void *)v913)
            {
              v924 = apr_palloc(p, 0xD0uLL);
              *(_OWORD *)v924 = __src[0];
              __int128 v925 = __src[4];
              __int128 v927 = __src[1];
              __int128 v926 = __src[2];
              *((_OWORD *)v924 + 3) = __src[3];
              *((_OWORD *)v924 + 4) = v925;
              *((_OWORD *)v924 + 1) = v927;
              *((_OWORD *)v924 + 2) = v926;
              __int128 v928 = __src[8];
              __int128 v930 = __src[5];
              __int128 v929 = __src[6];
              *((_OWORD *)v924 + memset(v56, 0, 7) = __src[7];
              *((_OWORD *)v924 + 8) = v928;
              *((_OWORD *)v924 + 5) = v930;
              *((_OWORD *)v924 + 6) = v929;
              __int128 v932 = __src[11];
              __int128 v931 = __src[12];
              __int128 v933 = __src[10];
              *((_OWORD *)v924 + 9) = __src[9];
              *((_OWORD *)v924 + 10) = v933;
              *((_OWORD *)v924 + 11) = v932;
              *((_OWORD *)v924 + 12) = v931;
              uint64_t v934 = *find_entry((uint64_t)ht, (_BYTE *)v924 + 8, 8uLL, 0LL);
              if (v934) {
                uint64_t v934 = *(void *)(v934 + 32);
              }
              v924[4] = v934;
              apr_hash_set(ht, v924 + 1, 8LL, v924);
              v924[3] = v923;
            }
          }

LABEL_1206:
          GTMTLSMAccelerationStructure_processTraceFuncWithMap((char *)__src, v1239, (uint64_t *)v913);
          goto LABEL_1168;
        }

        if (v922 != -15659) {
          goto LABEL_1206;
        }
        uint64_t v544 = *(void *)v913;
        if (v1235 <= *(void *)v913)
        {
          uint64_t v530 = (char *)apr_palloc(p, 0xD0uLL);
          *(_OWORD *)uint64_t v530 = __src[0];
          __int128 v1034 = __src[4];
          __int128 v1036 = __src[1];
          __int128 v1035 = __src[2];
          *((_OWORD *)v530 + 3) = __src[3];
          *((_OWORD *)v530 + 4) = v1034;
          *((_OWORD *)v530 + 1) = v1036;
          *((_OWORD *)v530 + 2) = v1035;
          __int128 v1037 = __src[8];
          __int128 v1039 = __src[5];
          __int128 v1038 = __src[6];
          *((_OWORD *)v530 + memset(v56, 0, 7) = __src[7];
          *((_OWORD *)v530 + 8) = v1037;
          *((_OWORD *)v530 + 5) = v1039;
          *((_OWORD *)v530 + 6) = v1038;
          __int128 v1041 = __src[11];
          __int128 v1040 = __src[12];
          __int128 v1042 = __src[10];
          *((_OWORD *)v530 + 9) = __src[9];
          *((_OWORD *)v530 + 10) = v1042;
          *((_OWORD *)v530 + 11) = v1041;
          *((_OWORD *)v530 + 12) = v1040;
          v777 = ht;
          unint64_t v543 = v530 + 8;
LABEL_1009:
          uint64_t v778 = *find_entry((uint64_t)v777, v543, 8uLL, 0LL);
          if (v778) {
            uint64_t v778 = *(void *)(v778 + 32);
          }
          *((void *)v530 + 4) = v778;
          apr_hash_set(ht, v543, 8LL, v530);
LABEL_1210:
          *((void *)v530 + 3) = v544;
        }

LABEL_1211:
        uint64_t v16 = v1219;
LABEL_1212:
LABEL_1306:
        v1045 = (char *)apr_palloc(v1218, 0x120uLL);
        unint64_t v21 = (uint64_t *)v1045;
        if (v1045)
        {
          *(_OWORD *)(v1045 + 8) = 0u;
          *((void *)v1045 + 35) = 0LL;
          *(_OWORD *)(v1045 + 248) = 0u;
          *(_OWORD *)(v1045 + 264) = 0u;
          *(_OWORD *)(v1045 + 216) = 0u;
          *(_OWORD *)(v1045 + 232) = 0u;
          *(_OWORD *)(v1045 + 184) = 0u;
          *(_OWORD *)(v1045 + 200) = 0u;
          *(_OWORD *)(v1045 + 152) = 0u;
          *(_OWORD *)(v1045 + 168) = 0u;
          *(_OWORD *)(v1045 + 120) = 0u;
          *(_OWORD *)(v1045 + 136) = 0u;
          *(_OWORD *)(v1045 + 88) = 0u;
          *(_OWORD *)(v1045 + 104) = 0u;
          *(_OWORD *)(v1045 + 56) = 0u;
          *(_OWORD *)(v1045 + 72) = 0u;
          *(_OWORD *)(v1045 + 24) = 0u;
          *(_OWORD *)(v1045 + 40) = 0u;
        }

        uint64_t v1046 = 0LL;
        *(void *)v1045 = ht;
        do
        {
          v21[v1046 + 1] = (uint64_t)apr_array_make(v1218, *((_DWORD *)&v1240 + v1046), 8);
          ++v1046;
        }

        while (v1046 != 35);
        uint64_t v1047 = *v21;
        v1048 = (apr_hash_index_t *)(*v21 + 16);
        *(void *)(v1047 + 24) = 0LL;
        *(void *)(v1047 + 32) = 0LL;
        *(void *)(v1047 + 16) = v1047;
        *(_DWORD *)(v1047 + 40) = 0;
        v1049 = apr_hash_next(v1048);
        if (v1049)
        {
          v1050 = v1049;
          do
          {
            v1051 = *(_DWORD **)(*((void *)v1050 + 1) + 32LL);
            unsigned int v1052 = *v1051 - 2;
            if (v1052 <= 0x51)
            {
              uint64_t v1053 = byte_3182B0[v1052];
              if (v1053 != -1) {
                *(void *)apr_array_push((apr_array_header_t *)v21[v1053 + 1]) = v1051;
              }
            }

            v1050 = apr_hash_next(v1050);
          }

          while (v1050);
        }

        uint64_t v1054 = v21[30];
        uint64_t v1055 = *(unsigned int *)(v1054 + 12);
        if ((int)v1055 >= 1)
        {
          unint64_t v1056 = v1055 + 1;
          do
          {
            uint64_t v1057 = (v1056 - 2);
            uint64_t v1058 = *(void *)(*(void *)(v1054 + 24) + 8LL * v1057);
            *(void *)&__src[0] = *(void *)(v1058 + 48);
            uint64_t v1059 = *find_entry(*v21, __src, 8uLL, 0LL);
            if (!v1059 || !*(void *)(v1059 + 32))
            {
              apr_hash_set((apr_hash_t *)*v21, (const void *)(v1058 + 8), 8LL, 0LL);
              int v1060 = *(_DWORD *)(v1054 + 12);
              *(void *)(*(void *)(v1054 + 24) + 8 * v105memset(v56, 0, 7) = *(void *)(*(void *)(v1054 + 24) + 8LL * (v1060 - 1));
              if (v1060) {
                *(_DWORD *)(v1054 + 12) = v1060 - 1;
              }
            }

            --v1056;
          }

          while (v1056 > 1);
        }

        for (uint64_t i = 1LL; i != 36; ++i)
          qsort( *(void **)(v21[i] + 24),  *(int *)(v21[i] + 12),  *(int *)(v21[i] + 8),  (int (__cdecl *)(const void *, const void *))GTMTLSMObject_compare);
        return v21;
      case 9:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        WORD2(__src[0]) = 0;
        LODWORD(__src[0]) = 0;
        ++DWORD1(v1242);
        uint64_t v74 = *(void *)(v37 + 32);
        if (v74)
        {
          unsigned int v75 = 0;
          while (1)
          {
            unsigned int v76 = atomic_load((unsigned int *)(v74 + 4));
            uint64_t v77 = v75 + (v76 >> 6) - 1;
            uint64_t v74 = *(void *)(v74 + 40);
            unsigned int v75 = v77;
            if (!v74)
            {
              unsigned int v75 = v77;
              goto LABEL_371;
            }
          }
        }

        else
        {
          unsigned int v75 = 0;
        }

        uint64_t v77 = 0LL;
LABEL_371:
        int v1118 = 0;
        uint64_t v1126 = 0LL;
        v1140 = 0LL;
        uint64_t v1185 = 0LL;
        v1204 = 0LL;
        uint64_t v1099 = 0LL;
        int v1104 = 0;
        int v1111 = 0;
        int v1221 = 2;
        unint64_t v1158 = 0LL;
        uint64_t v1171 = -1LL;
        unint64_t v287 = v75 | (unint64_t)(v77 << 32);
        while (2)
        {
          uint64_t v288 = v74 + 64;
LABEL_373:
          if (v74)
          {
            int v289 = HIDWORD(v287) - v287;
            if ((*(_BYTE *)(v288 + ((uint64_t)(HIDWORD(v287) - (int)v287) << 6) + 15) & 8) != 0)
            {
              uint64_t v290 = v289;
              uint64_t v291 = v288 + ((uint64_t)v289 << 6);
              unint64_t v292 = *(void *)v291;
              if (*(void *)v291 < v1236 + v1235)
              {
                char v294 = (int *)(v291 + 8);
                int v293 = *(_DWORD *)(v291 + 8);
                if (v293 > -10209)
                {
                }

                else if (v293 != -16119 && v293 != -16115)
                {
                  if (v293 == -16118)
                  {
                    if (v1235 > v292) {
                      goto LABEL_1211;
                    }
                    v1030 = (char *)apr_palloc(p, 0x58uLL);
                    *(_DWORD *)v1030 = 50;
                    *((_DWORD *)v1030 + 1) = v1118;
                    *((void *)v1030 + 1) = v1126;
                    v1031 = v1030 + 8;
                    *((void *)v1030 + 2) = v1158;
                    *((void *)v1030 + 3) = v1171;
                    *((void *)v1030 + 4) = 0LL;
                    *((void *)v1030 + 5) = v1185;
                    *((void *)v1030 + 6) = v1140;
                    *((void *)v1030 + memset(v56, 0, 7) = v1204;
                    *((void *)v1030 + 8) = v1099;
                    *((_DWORD *)v1030 + 18) = v1104;
                    *((_DWORD *)v1030 + 19) = v1111;
                    *((_WORD *)v1030 + 40) = v1221;
                    *(_DWORD *)(v1030 + 82) = __src[0];
                    *((_WORD *)v1030 + 43) = WORD2(__src[0]);
LABEL_1296:
                    uint64_t v1033 = *find_entry((uint64_t)ht, v1031, 8uLL, 0LL);
                    if (v1033) {
                      uint64_t v1033 = *(void *)(v1033 + 32);
                    }
                    *((void *)v1030 + 4) = v1033;
                    apr_hash_set(ht, v1031, 8LL, v1030);
                    *((void *)v1030 + 3) = v292;
                    goto LABEL_1211;
                  }

LABEL_388:
                  uint64_t v298 = v1239;
                  if (v293 > -10212)
                  {
                    switch(v293)
                    {
                      case -10211:
                        uint64_t v1099 = *((void *)GTTraceFunc_argumentBytesWithMap( (void *)v291,  *(unsigned __int8 *)(v288 + (v290 << 6) + 13),  v1239)
                                + 1);
                        break;
                      case -10208:
                        int v1104 = *((_DWORD *)GTTraceFunc_argumentBytesWithMap( (void *)v291,  *(unsigned __int8 *)(v288 + (v290 << 6) + 13),  v1239)
                                + 2);
                        break;
                      case -10207:
                        int v1111 = *((_DWORD *)GTTraceFunc_argumentBytesWithMap( (void *)v291,  *(unsigned __int8 *)(v288 + (v290 << 6) + 13),  v1239)
                                + 2);
                        break;
                    }
                  }

                  else
                  {
                    switch(v293)
                    {
                      case -16120:
                        uint64_t v299 = GTTraceFunc_argumentBytesWithMap( (void *)v291,  *(unsigned __int8 *)(v288 + (v290 << 6) + 13),  v1239);
                        unint64_t v1158 = *(void *)v291;
                        int v1118 = *v294;
                        uint64_t v1126 = *((void *)v299 + 1);
                        uint64_t v1185 = *(void *)v299;
                        v1140 = GTTraceFunc_argumentBytesWithMap((void *)v291, v299[16], v298);
                        break;
                      case -16119:
                        int v300 = GTTraceFunc_argumentBytesWithMap( (void *)v291,  *(unsigned __int8 *)(v288 + (v290 << 6) + 13),  v1239);
                        v1204 = GTTraceFunc_argumentBytesWithMap((void *)v291, v300[8], v298);
                        break;
                      case -16118:
                        uint64_t v1171 = *(void *)v291;
                        break;
                      case -16115:
                        uint64_t v301 = *((void *)GTTraceFunc_argumentBytesWithMap( (void *)v291,  *(unsigned __int8 *)(v288 + (v290 << 6) + 13),  v1239)
                               + 2);
                        int v302 = v1221;
                        if (v301 != 1) {
                          int v302 = v301;
                        }
                        int v1221 = v302;
                        break;
                      default:
                        break;
                    }
                  }

                  unsigned int v303 = atomic_load((unsigned int *)(v74 + 4));
                  int v304 = v287 + (v303 >> 6);
                  uint64_t v305 = (HIDWORD(v287) + 1);
                  unint64_t v287 = (v305 << 32) | v287;
                  if ((_DWORD)v305 == v304 - 1)
                  {
                    unint64_t v287 = (v305 << 32) | v305;
                    uint64_t v74 = *(void *)(v74 + 40);
                    continue;
                  }

                  goto LABEL_373;
                }

                if (v1235 <= v292)
                {
                  unsigned int v296 = apr_palloc(p, 0x58uLL);
                  *(_DWORD *)unsigned int v296 = 50;
                  *((_DWORD *)v296 + 1) = v1118;
                  v296[1] = v1126;
                  v296[2] = v1158;
                  v296[3] = v1171;
                  v296[4] = 0LL;
                  v296[5] = v1185;
                  v296[6] = v1140;
                  v296[7] = v1204;
                  v296[8] = v1099;
                  *((_DWORD *)v296 + 18) = v1104;
                  *((_DWORD *)v296 + 19) = v1111;
                  *((_WORD *)v296 + 40) = v1221;
                  *(_DWORD *)((char *)v296 + 82) = __src[0];
                  *((_WORD *)v296 + 43) = WORD2(__src[0]);
                  uint64_t v297 = *find_entry((uint64_t)ht, (_BYTE *)v296 + 8, 8uLL, 0LL);
                  if (v297) {
                    uint64_t v297 = *(void *)(v297 + 32);
                  }
                  v296[4] = v297;
                  apr_hash_set(ht, v296 + 1, 8LL, v296);
                  v296[3] = v292;
                  int v293 = *v294;
                  uint64_t v288 = v74 + 64;
                }

                goto LABEL_388;
              }
            }
          }

          break;
        }

        char v306 = apr_palloc(p, 0x58uLL);
        *(_DWORD *)char v306 = 50;
        *((_DWORD *)v306 + 1) = v1118;
        v306[1] = v1126;
        uint64_t v307 = v306 + 1;
        v306[2] = v1158;
        v306[3] = v1171;
        v306[4] = 0LL;
        v306[5] = v1185;
        v306[6] = v1140;
        v306[7] = v1204;
        v306[8] = v1099;
        *((_DWORD *)v306 + 18) = v1104;
        *((_DWORD *)v306 + 19) = v1111;
        *((_WORD *)v306 + 40) = v1221;
        *(_DWORD *)((char *)v306 + 82) = __src[0];
        *((_WORD *)v306 + 43) = WORD2(__src[0]);
        goto LABEL_922;
      case 10:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        WORD2(__src[0]) = 0;
        LODWORD(__src[0]) = 0;
        ++DWORD2(v1242);
        uint64_t v78 = *(void *)(v37 + 32);
        if (v78)
        {
          unsigned int v79 = 0;
          while (1)
          {
            unsigned int v80 = atomic_load((unsigned int *)(v78 + 4));
            uint64_t v81 = v79 + (v80 >> 6) - 1;
            uint64_t v78 = *(void *)(v78 + 40);
            unsigned int v79 = v81;
            if (!v78)
            {
              unsigned int v79 = v81;
              goto LABEL_407;
            }
          }
        }

        else
        {
          unsigned int v79 = 0;
        }

        uint64_t v81 = 0LL;
LABEL_407:
        int v1205 = 0;
        uint64_t v1172 = 0LL;
        uint64_t v1186 = 0LL;
        unint64_t v1222 = 0LL;
        v1075 = 0LL;
        v1078 = 0LL;
        v1084 = 0LL;
        v1087 = 0LL;
        v1159 = 0LL;
        v1091 = 0LL;
        v1105 = 0LL;
        v1112 = 0LL;
        v1068 = 0LL;
        uint64_t v1070 = 0LL;
        v1127 = 0LL;
        uint64_t v1072 = 0LL;
        int v1081 = 0;
        int v1095 = 0;
        char v1119 = 0;
        char v1141 = 0;
        unint64_t v308 = v79 | (unint64_t)(v81 << 32);
        v1066 = 0LL;
        uint64_t v1067 = -1LL;
        while (2)
        {
          uint64_t v309 = v78 + 64;
LABEL_409:
          if (v78)
          {
            unint64_t v310 = HIDWORD(v308);
            int v311 = HIDWORD(v308) - v308;
            if ((*(_BYTE *)(v309 + ((uint64_t)(HIDWORD(v308) - (int)v308) << 6) + 15) & 8) != 0)
            {
              uint64_t v312 = v311;
              uint64_t v313 = v309 + ((uint64_t)v311 << 6);
              unint64_t v314 = *(void *)v313;
              if (*(void *)v313 < v1236 + v1235)
              {
                uint64_t v316 = (int *)(v313 + 8);
                int v315 = *(_DWORD *)(v313 + 8);
                if (v315 == -16292)
                {
                  if (v1235 > v314)
                  {
                    uint64_t v317 = v1239;
                    goto LABEL_417;
                  }

                  int v1065 = v308;
                  v308 >>= 32;
                  unint64_t v319 = apr_palloc(p, 0xA8uLL);
                  *(_DWORD *)unint64_t v319 = 62;
                  *((_DWORD *)v319 + 1) = v1205;
                  v319[1] = v1186;
                  v319[2] = v1222;
                  v319[3] = v1067;
                  v319[4] = 0LL;
                  v319[5] = v1172;
                  v319[6] = v1078;
                  v319[7] = v1084;
                  v319[8] = v1159;
                  v319[9] = v1087;
                  v319[10] = v1066;
                  v319[11] = v1091;
                  v319[12] = v1105;
                  v319[13] = v1075;
                  v319[14] = v1112;
                  v319[15] = v1068;
                  v319[16] = v1127;
                  v319[17] = v1072;
                  v319[18] = v1070;
                  *((_DWORD *)v319 + 38) = v1081;
                  *((_DWORD *)v319 + 39) = v1095;
                  *((_BYTE *)v319 + 160) = v1119;
                  *((_BYTE *)v319 + 161) = v1141;
                  *((_WORD *)v319 + 83) = WORD2(__src[0]);
                  *(_DWORD *)((char *)v319 + 162) = __src[0];
                  uint64_t v320 = *find_entry((uint64_t)ht, (_BYTE *)v319 + 8, 8uLL, 0LL);
                  if (v320) {
                    uint64_t v320 = *(void *)(v320 + 32);
                  }
                  v319[4] = v320;
                  apr_hash_set(ht, v319 + 1, 8LL, v319);
                  v319[3] = v314;
                  int v315 = *v316;
                  LODWORD(v310) = v308;
                  LODWORD(v308) = v1065;
                }

                else if (v315 == -16291)
                {
                  v966 = (char *)apr_palloc(p, 0xA8uLL);
                  *(_DWORD *)v966 = 62;
                  *((_DWORD *)v966 + 1) = v1205;
                  *((void *)v966 + 1) = v1186;
                  *((void *)v966 + 2) = v1222;
                  *((void *)v966 + 3) = v1067;
                  *((void *)v966 + 4) = 0LL;
                  *((void *)v966 + 5) = v1172;
                  *((void *)v966 + 6) = v1078;
                  *((void *)v966 + memset(v56, 0, 7) = v1084;
                  *((void *)v966 + 8) = v1159;
                  *((void *)v966 + 9) = v1087;
                  *((void *)v966 + 10) = v1066;
                  *((void *)v966 + 11) = v1091;
                  *((void *)v966 + 12) = v1105;
                  *((void *)v966 + 13) = v1075;
                  *((void *)v966 + 14) = v1112;
                  *((void *)v966 + 15) = v1068;
                  *((void *)v966 + 16) = v1127;
                  *((void *)v966 + 1memset(v56, 0, 7) = v1072;
                  *((void *)v966 + 18) = v1070;
                  *((_DWORD *)v966 + 38) = v1081;
                  *((_DWORD *)v966 + 39) = v1095;
                  v966[160] = v1119;
                  v966[161] = v1141;
                  *((_WORD *)v966 + 83) = WORD2(__src[0]);
                  *(_DWORD *)(v966 + 162) = __src[0];
                  entry = find_entry((uint64_t)ht, v966 + 8, 8uLL, 0LL);
                  uint64_t v968 = *entry;
                  if (*entry) {
                    uint64_t v968 = *(void *)(v968 + 32);
                  }
                  *((void *)v966 + 4) = v968;
                  v969 = ht;
                  v970 = v966 + 8;
LABEL_1264:
                  apr_hash_set(v969, v970, 8LL, v966);
                  *((void *)v966 + 3) = v314;
                  goto LABEL_1211;
                }

                uint64_t v317 = v1239;
                if (v315 > -16030)
                {
                  if (v315 > -15435)
                  {
                    if (v315 <= -15420)
                    {
                      if (v315 != -15434 && v315 != -15421)
                      {
                        int v321 = -15420;
LABEL_436:
                        if (v315 != v321) {
                          goto LABEL_483;
                        }
                      }

LABEL_449:
                      uint64_t v331 = v309 + (v312 << 6);
                      uint64_t v332 = GTTraceFunc_argumentBytesWithMap((void *)v313, *(unsigned __int8 *)(v331 + 13), v1239);
                      unint64_t v1222 = *(void *)v313;
                      int v1205 = *v316;
                      uint64_t v1172 = *(void *)v332;
                      uint64_t v1186 = *((void *)v332 + 1);
                      char v333 = GTTraceFunc_argumentBytesWithMap((void *)v313, *(unsigned __int8 *)(v331 + 14), v317);
                      if (v333)
                      {
                        v1127 = (char *)*((void *)v333 + 1);
                        char v1119 = v333[16];
                      }

                      v1159 = v333;
                      v1087 = GTTraceFunc_argumentBytesWithMap((void *)v313, v332[24], v317);
                      v1091 = (char *)*((void *)v1087 + 1);
                      int v334 = *((unsigned __int16 *)v1087 + 9);
LABEL_452:
                      int v1095 = v334;
                      char v1141 = 6;
                      uint64_t v309 = v78 + 64;
                      goto LABEL_483;
                    }

                    switch(v315)
                    {
                      case -15419:
                        goto LABEL_449;
                      case -10188:
                        unint64_t v358 = GTTraceFunc_argumentBytesWithMap( (void *)v313,  *(unsigned __int8 *)(v309 + (v312 << 6) + 13),  v1239);
                        v1127 = GTTraceFunc_argumentBytesWithMap((void *)v313, v358[8], v317);
                        break;
                      case -10183:
                        char v1119 = GTTraceFunc_argumentBytesWithMap( (void *)v313,  *(unsigned __int8 *)(v309 + (v312 << 6) + 13),  v1239)[8];
                        break;
                    }

LABEL_417:
                uint64_t v318 = GTTraceFunc_argumentBytesWithMap( (void *)v313,  *(unsigned __int8 *)(v309 + (v312 << 6) + 13),  v317);
                v1112 = GTTraceFunc_argumentBytesWithMap((void *)v313, v318[8], v317);
                goto LABEL_483;
              }
            }
          }

          break;
        }

        char v363 = apr_palloc(p, 0xA8uLL);
        *(_DWORD *)char v363 = 62;
        *((_DWORD *)v363 + 1) = v1205;
        v363[1] = v1186;
        v363[2] = v1222;
        v363[3] = v1067;
        v363[4] = 0LL;
        v363[5] = v1172;
        v363[6] = v1078;
        v363[7] = v1084;
        v363[8] = v1159;
        v363[9] = v1087;
        v363[10] = v1066;
        v363[11] = v1091;
        v363[12] = v1105;
        v363[13] = v1075;
        v363[14] = v1112;
        v363[15] = v1068;
        v363[16] = v1127;
        v363[17] = v1072;
        v363[18] = v1070;
        *((_DWORD *)v363 + 38) = v1081;
        *((_DWORD *)v363 + 39) = v1095;
        *((_BYTE *)v363 + 160) = v1119;
        *((_BYTE *)v363 + 161) = v1141;
        *((_WORD *)v363 + 83) = WORD2(__src[0]);
        *(_DWORD *)((char *)v363 + 162) = __src[0];
        uint64_t v364 = *find_entry((uint64_t)ht, (_BYTE *)v363 + 8, 8uLL, 0LL);
        if (v364) {
          uint64_t v364 = *(void *)(v364 + 32);
        }
        v363[4] = v364;
        char v365 = ht;
        uint64_t v366 = v363 + 1;
        goto LABEL_781;
      case 11:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        WORD2(__src[0]) = 0;
        LODWORD(__src[0]) = 0;
        ++HIDWORD(v1242);
        uint64_t v82 = *(void *)(v37 + 32);
        if (v82)
        {
          unsigned int v83 = 0;
          while (1)
          {
            unsigned int v84 = atomic_load((unsigned int *)(v82 + 4));
            uint64_t v85 = v83 + (v84 >> 6) - 1;
            uint64_t v82 = *(void *)(v82 + 40);
            unsigned int v83 = v85;
            if (!v82)
            {
              unsigned int v83 = v85;
              goto LABEL_493;
            }
          }
        }

        else
        {
          unsigned int v83 = 0;
        }

        uint64_t v85 = 0LL;
LABEL_493:
        int v1160 = 0;
        uint64_t v1173 = 0LL;
        unint64_t v1187 = 0LL;
        uint64_t v1206 = 0LL;
        v1100 = 0LL;
        uint64_t v1106 = 0LL;
        v1223 = 0LL;
        uint64_t v1142 = 0LL;
        __int16 v1128 = 0;
        __int128 v1120 = 0u;
        uint64_t v1113 = -1LL;
        unint64_t v367 = v83 | (unint64_t)(v85 << 32);
        while (2)
        {
          uint64_t v368 = v82 + 64;
LABEL_495:
          if (v82)
          {
            int v369 = HIDWORD(v367) - v367;
            if ((*(_BYTE *)(v368 + ((uint64_t)(HIDWORD(v367) - (int)v367) << 6) + 15) & 8) != 0)
            {
              uint64_t v370 = v369;
              uint64_t v371 = v368 + ((uint64_t)v369 << 6);
              unint64_t v372 = *(void *)v371;
              if (*(void *)v371 < v1236 + v1235)
              {
                unint64_t v374 = (int *)(v371 + 8);
                int v373 = *(_DWORD *)(v371 + 8);
                if (v373 == -15676)
                {
                  if (v1235 > v372)
                  {
                    uint64_t v375 = v1239;
LABEL_509:
                    uint64_t v378 = GTTraceFunc_argumentBytesWithMap( (void *)v371,  *(unsigned __int8 *)(v368 + (v370 << 6) + 13),  v375);
                    v1223 = GTTraceFunc_argumentBytesWithMap((void *)v371, v378[8], v375);
                    goto LABEL_519;
                  }

                  uint64_t v376 = apr_palloc(p, 0x70uLL);
                  *(_DWORD *)uint64_t v376 = 37;
                  *((_DWORD *)v376 + 1) = v1160;
                  v376[1] = v1173;
                  v376[2] = v1187;
                  v376[3] = v1113;
                  v376[4] = 0LL;
                  v376[5] = v1206;
                  v376[6] = v1106;
                  v376[7] = 0LL;
                  v376[8] = v1223;
                  v376[9] = v1142;
                  v376[10] = v1100;
                  *(_OWORD *)(v376 + 11) = v1120;
                  *((_WORD *)v376 + 52) = v1128;
                  *(_DWORD *)((char *)v376 + 106) = __src[0];
                  *((_WORD *)v376 + 55) = WORD2(__src[0]);
                  uint64_t v377 = *find_entry((uint64_t)ht, (_BYTE *)v376 + 8, 8uLL, 0LL);
                  if (v377) {
                    uint64_t v377 = *(void *)(v377 + 32);
                  }
                  v376[4] = v377;
                  apr_hash_set(ht, v376 + 1, 8LL, v376);
                  v376[3] = v372;
                  int v373 = *v374;
                  uint64_t v368 = v82 + 64;
                }

                else if (v373 == -15675)
                {
                  v971 = apr_palloc(p, 0x70uLL);
                  *(_DWORD *)v971 = 37;
                  *((_DWORD *)v971 + 1) = v1160;
                  v971[1] = v1173;
                  v971[2] = v1187;
                  v971[3] = v1113;
                  v971[4] = 0LL;
                  v971[5] = v1206;
                  v971[6] = v1106;
                  v971[7] = 0LL;
                  v971[8] = v1223;
                  v971[9] = v1142;
                  v971[10] = v1100;
                  *(_OWORD *)(v971 + 11) = v1120;
                  *((_WORD *)v971 + 52) = v1128;
                  *(_DWORD *)((char *)v971 + 106) = __src[0];
                  *((_WORD *)v971 + 55) = WORD2(__src[0]);
                  v972 = find_entry((uint64_t)ht, (_BYTE *)v971 + 8, 8uLL, 0LL);
                  uint64_t v973 = *v972;
                  if (*v972) {
                    uint64_t v973 = *(void *)(v973 + 32);
                  }
                  v971[4] = v973;
                  apr_hash_set(ht, v971 + 1, 8LL, v971);
                  v971[3] = v372;
                  goto LABEL_1211;
                }

                uint64_t v375 = v1239;
                if (v373 > -15676)
                {
                  if (v373 == -15675)
                  {
                    uint64_t v1113 = *(void *)v371;
                  }

                  else if (v373 == -15613)
                  {
                    uint64_t v379 = v368 + (v370 << 6);
                    uint64_t v380 = GTTraceFunc_argumentBytesWithMap((void *)v371, *(unsigned __int8 *)(v379 + 13), v1239);
                    int v1160 = *v374;
                    uint64_t v1173 = *((void *)v380 + 1);
                    unint64_t v1187 = *(void *)v371;
                    uint64_t v1206 = *(void *)v380;
                    uint64_t v381 = GTTraceFunc_argumentBytesWithMap((void *)v371, *(unsigned __int8 *)(v379 + 14), v375);
                    if (v381)
                    {
                      uint64_t v1142 = *(void *)v381;
                      __int128 v1120 = *(_OWORD *)(v381 + 8);
                      __int16 v1128 = *((_WORD *)v381 + 12);
                    }

                    v1100 = GTTraceFunc_argumentBytesWithMap((void *)v371, v380[24], v375);
                  }
                }

                else
                {
                  if (v373 != -15695)
                  {
                    if (v373 != -15676) {
                      goto LABEL_519;
                    }
                    goto LABEL_509;
                  }

                  uint64_t v382 = v368 + (v370 << 6);
                  uint64_t v383 = GTTraceFunc_argumentBytesWithMap((void *)v371, *(unsigned __int8 *)(v382 + 13), v1239);
                  int v1160 = *v374;
                  uint64_t v1173 = *((void *)v383 + 1);
                  unint64_t v1187 = *(void *)v371;
                  uint64_t v1206 = *(void *)v383;
                  uint64_t v384 = GTTraceFunc_argumentBytesWithMap((void *)v371, *(unsigned __int8 *)(v382 + 14), v375);
                  if (v384)
                  {
                    uint64_t v1142 = *(void *)v384;
                    __int128 v1120 = *(_OWORD *)(v384 + 8);
                    __int16 v1128 = *((_WORD *)v384 + 12);
                  }

                  uint64_t v1106 = *((void *)v383 + 2);
                  uint64_t v368 = v82 + 64;
                }

LABEL_519:
                unsigned int v385 = atomic_load((unsigned int *)(v82 + 4));
                int v386 = v367 + (v385 >> 6);
                uint64_t v387 = (HIDWORD(v367) + 1);
                unint64_t v367 = (v387 << 32) | v367;
                if ((_DWORD)v387 == v386 - 1)
                {
                  unint64_t v367 = (v387 << 32) | v387;
                  uint64_t v82 = *(void *)(v82 + 40);
                  continue;
                }

                goto LABEL_495;
              }
            }
          }

          break;
        }

        char v306 = apr_palloc(p, 0x70uLL);
        *(_DWORD *)char v306 = 37;
        *((_DWORD *)v306 + 1) = v1160;
        v306[1] = v1173;
        uint64_t v307 = v306 + 1;
        v306[2] = v1187;
        v306[3] = v1113;
        v306[4] = 0LL;
        v306[5] = v1206;
        v306[6] = v1106;
        v306[7] = 0LL;
        v306[8] = v1223;
        v306[9] = v1142;
        v306[10] = v1100;
        *(_OWORD *)(v306 + 11) = v1120;
        *((_WORD *)v306 + 52) = v1128;
        *(_DWORD *)((char *)v306 + 106) = __src[0];
        *((_WORD *)v306 + 55) = WORD2(__src[0]);
        goto LABEL_922;
      case 12:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        BYTE4(__src[0]) = 0;
        LODWORD(__src[0]) = 0;
        LODWORD(v1243) = v1243 + 1;
        uint64_t v86 = *(void *)(v37 + 32);
        if (v86)
        {
          unsigned int v87 = 0;
          while (1)
          {
            unsigned int v88 = atomic_load((unsigned int *)(v86 + 4));
            uint64_t v89 = v87 + (v88 >> 6) - 1;
            uint64_t v86 = *(void *)(v86 + 40);
            unsigned int v87 = v89;
            if (!v86)
            {
              unsigned int v87 = v89;
              goto LABEL_524;
            }
          }
        }

        else
        {
          unsigned int v87 = 0;
        }

        uint64_t v89 = 0LL;
LABEL_524:
        int v388 = 0;
        uint64_t v1121 = 0LL;
        v1129 = 0LL;
        unint64_t v1143 = 0LL;
        v1207 = 0LL;
        __int16 v1114 = 0;
        LOBYTE(v1188) = 0;
        __int128 v1107 = 0u;
        uint64_t v1161 = -1LL;
        uint64_t v1174 = 0LL;
        unint64_t v389 = v87 | (unint64_t)(v89 << 32);
        while (2)
        {
          uint64_t v390 = v86 + 64;
LABEL_526:
          if (v86)
          {
            int v391 = HIDWORD(v389) - v389;
            if ((*(_BYTE *)(v390 + ((uint64_t)(HIDWORD(v389) - (int)v389) << 6) + 15) & 8) != 0)
            {
              uint64_t v392 = v391;
              uint64_t v393 = v390 + ((uint64_t)v391 << 6);
              unint64_t v394 = *(void *)v393;
              if (*(void *)v393 < v1236 + v1235)
              {
                unint64_t v396 = (int *)(v393 + 8);
                int v395 = *(_DWORD *)(v393 + 8);
                if (v395 == -15743)
                {
                  if (v1235 > v394)
                  {
                    uint64_t v397 = v1239;
                    goto LABEL_545;
                  }

                  char v398 = apr_palloc(p, 0x58uLL);
                  *(_DWORD *)char v398 = 67;
                  *((_DWORD *)v398 + 1) = v388;
                  v398[1] = v1121;
                  v398[2] = v1143;
                  v398[3] = v1161;
                  v398[4] = 0LL;
                  v398[5] = v1174;
                  v398[6] = v1129;
                  v398[7] = v1207;
                  *((_OWORD *)v398 + 4) = v1107;
                  *((_WORD *)v398 + 40) = v1114;
                  *((_BYTE *)v398 + 82) = v1188;
                  *(_DWORD *)((char *)v398 + 83) = __src[0];
                  *((_BYTE *)v398 + 8memset(v56, 0, 7) = BYTE4(__src[0]);
                  uint64_t v399 = *find_entry((uint64_t)ht, (_BYTE *)v398 + 8, 8uLL, 0LL);
                  if (v399) {
                    uint64_t v399 = *(void *)(v399 + 32);
                  }
                  v398[4] = v399;
                  apr_hash_set(ht, v398 + 1, 8LL, v398);
                  v398[3] = v394;
                  int v395 = *v396;
                  uint64_t v390 = v86 + 64;
                }

                else if (v395 == -15742)
                {
                  if (v1235 > v394) {
                    goto LABEL_1211;
                  }
                  v974 = apr_palloc(p, 0x58uLL);
                  *(_DWORD *)v974 = 67;
                  *((_DWORD *)v974 + 1) = v388;
                  v974[1] = v1121;
                  v975 = v974 + 1;
                  v974[2] = v1143;
                  v974[3] = v1161;
                  v974[4] = 0LL;
                  v974[5] = v1174;
                  v974[6] = v1129;
                  v974[7] = v1207;
                  *((_OWORD *)v974 + 4) = v1107;
                  *((_WORD *)v974 + 40) = v1114;
                  *((_BYTE *)v974 + 82) = v1188;
                  *(_DWORD *)((char *)v974 + 83) = __src[0];
                  *((_BYTE *)v974 + 8memset(v56, 0, 7) = BYTE4(__src[0]);
                  goto LABEL_1282;
                }

                uint64_t v397 = v1239;
                if (v395 <= -15745)
                {
                  if (v395 == -16291)
                  {
                    uint64_t v1161 = *(void *)v393;
                  }

                  else if (v395 == -16075)
                  {
                    uint64_t v400 = v390 + (v392 << 6);
                    uint64_t v401 = GTTraceFunc_argumentBytesWithMap((void *)v393, *(unsigned __int8 *)(v400 + 13), v1239);
                    unint64_t v1143 = *(void *)v393;
                    int v388 = *v396;
                    uint64_t v1121 = *((void *)v401 + 1);
                    uint64_t v1174 = *(void *)v401;
                    v1129 = GTTraceFunc_argumentBytesWithMap((void *)v393, v401[24], v397);
                    int v402 = GTTraceFunc_argumentBytesWithMap((void *)v393, *(unsigned __int8 *)(v400 + 14), v397);
                    if (v402)
                    {
                      __int16 v1114 = *((_WORD *)v402 + 12);
                      __int128 v1107 = *(_OWORD *)(v402 + 8);
                    }

                    uint64_t v390 = v86 + 64;
                  }

LABEL_548:
                  unsigned int v406 = atomic_load((unsigned int *)(v86 + 4));
                  int v407 = v389 + (v406 >> 6);
                  uint64_t v408 = (HIDWORD(v389) + 1);
                  unint64_t v389 = (v408 << 32) | v389;
                  if ((_DWORD)v408 == v407 - 1)
                  {
                    unint64_t v389 = (v408 << 32) | v408;
                    uint64_t v86 = *(void *)(v86 + 40);
                    continue;
                  }

                  goto LABEL_526;
                }

                if (v395 == -15744)
                {
                  uint64_t v405 = GTTraceFunc_argumentBytesWithMap( (void *)v393,  *(unsigned __int8 *)(v390 + (v392 << 6) + 13),  v1239);
                  uint64_t v390 = v86 + 64;
                  int v1188 = *((_DWORD *)v405 + 2);
                  goto LABEL_548;
                }

                if (v395 != -15743) {
                  goto LABEL_548;
                }
LABEL_545:
                unint64_t v403 = GTTraceFunc_argumentBytesWithMap( (void *)v393,  *(unsigned __int8 *)(v390 + (v392 << 6) + 13),  v397);
                uint64_t v404 = GTTraceFunc_argumentBytesWithMap((void *)v393, v403[8], v397);
                uint64_t v390 = v86 + 64;
                v1207 = v404;
                goto LABEL_548;
              }
            }
          }

          break;
        }

        char v306 = apr_palloc(p, 0x58uLL);
        *(_DWORD *)char v306 = 67;
        *((_DWORD *)v306 + 1) = v388;
        v306[1] = v1121;
        uint64_t v307 = v306 + 1;
        v306[2] = v1143;
        v306[3] = v1161;
        v306[4] = 0LL;
        v306[5] = v1174;
        v306[6] = v1129;
        v306[7] = v1207;
        *((_OWORD *)v306 + 4) = v1107;
        *((_WORD *)v306 + 40) = v1114;
        *((_BYTE *)v306 + 82) = v1188;
        *(_DWORD *)((char *)v306 + 83) = __src[0];
        *((_BYTE *)v306 + 8memset(v56, 0, 7) = BYTE4(__src[0]);
        goto LABEL_922;
      case 13:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        ++DWORD1(v1243);
        uint64_t v90 = *(void *)(v37 + 32);
        if (v90)
        {
          unsigned int v91 = 0;
          while (1)
          {
            unsigned int v92 = atomic_load((unsigned int *)(v90 + 4));
            uint64_t v93 = v91 + (v92 >> 6) - 1;
            uint64_t v90 = *(void *)(v90 + 40);
            unsigned int v91 = v93;
            if (!v90)
            {
              unsigned int v91 = v93;
              goto LABEL_553;
            }
          }
        }

        else
        {
          unsigned int v91 = 0;
        }

        uint64_t v93 = 0LL;
LABEL_553:
        int v409 = 0;
        uint64_t v410 = 0LL;
        unint64_t v411 = 0LL;
        uint64_t v1189 = 0LL;
        v1208 = 0LL;
        unint64_t v412 = v91 | (unint64_t)(v93 << 32);
        while (2)
        {
          uint64_t v413 = v90 + 64;
LABEL_555:
          if (!v90
            || (int v414 = HIDWORD(v412) - v412,
                (*(_BYTE *)(v413 + ((uint64_t)(HIDWORD(v412) - (int)v412) << 6) + 15) & 8) == 0)
            || (uint64_t v415 = v413 + ((uint64_t)v414 << 6), v416 = *(void *)v415, *(void *)v415 >= v1236 + v1235))
          {
            uint64_t v424 = (char *)apr_palloc(p, 0x38uLL);
            unint64_t v189 = v424;
            *(_DWORD *)uint64_t v424 = 41;
            *((_DWORD *)v424 + 1) = v409;
            *((void *)v424 + 1) = v410;
            uint64_t v190 = v424 + 8;
            unint64_t v425 = -1LL;
            *((void *)v424 + 2) = v411;
            *((void *)v424 + 3) = -1LL;
            *((void *)v424 + 4) = 0LL;
            uint64_t v426 = v1189;
            goto LABEL_566;
          }

          int v417 = *(_DWORD *)(v415 + 8);
          if (v417 != -16127)
          {
            uint64_t v418 = v1239;
            if (v417 == -16136)
            {
              uint64_t v420 = GTTraceFunc_argumentBytesWithMap( (void *)v415,  *(unsigned __int8 *)(v413 + ((uint64_t)v414 << 6) + 13),  v1239);
              v1208 = GTTraceFunc_argumentBytesWithMap((void *)v415, v420[8], v418);
            }

            else if (v417 == -16128)
            {
              uint64_t v419 = GTTraceFunc_argumentBytesWithMap( (void *)v415,  *(unsigned __int8 *)(v413 + ((uint64_t)v414 << 6) + 13),  v1239);
              unint64_t v411 = *(void *)v415;
              int v409 = *(_DWORD *)(v415 + 8);
              uint64_t v410 = *((void *)v419 + 1);
              uint64_t v1189 = *(void *)v419;
            }

            unsigned int v421 = atomic_load((unsigned int *)(v90 + 4));
            int v422 = v412 + (v421 >> 6);
            uint64_t v423 = (HIDWORD(v412) + 1);
            unint64_t v412 = (v423 << 32) | v412;
            int v14 = v1220;
            if ((_DWORD)v423 == v422 - 1)
            {
              unint64_t v412 = (v423 << 32) | v423;
              uint64_t v90 = *(void *)(v90 + 40);
              continue;
            }

            goto LABEL_555;
          }

          break;
        }

        int v14 = v1220;
        if (v1235 > v416) {
          goto LABEL_1211;
        }
        v989 = apr_palloc(p, 0x38uLL);
        *(_DWORD *)v989 = 41;
        *((_DWORD *)v989 + 1) = v409;
        v989[1] = v410;
        v990 = v989 + 1;
        v989[2] = v411;
        v989[3] = -1LL;
        v989[4] = 0LL;
        v989[5] = v1189;
        v989[6] = v1208;
        goto LABEL_1267;
      case 14:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        ++DWORD2(v1243);
        uint64_t v94 = *(void *)(v37 + 32);
        if (v94)
        {
          unsigned int v95 = 0;
          while (1)
          {
            unsigned int v96 = atomic_load((unsigned int *)(v94 + 4));
            uint64_t v97 = v95 + (v96 >> 6) - 1;
            uint64_t v94 = *(void *)(v94 + 40);
            unsigned int v95 = v97;
            if (!v94)
            {
              unsigned int v95 = v97;
              goto LABEL_569;
            }
          }
        }

        else
        {
          unsigned int v95 = 0;
        }

        uint64_t v97 = 0LL;
LABEL_569:
        int v427 = 0;
        uint64_t v1144 = 0LL;
        unint64_t v1162 = 0LL;
        v1208 = 0LL;
        unint64_t v428 = v95 | (unint64_t)(v97 << 32);
        uint64_t v1175 = 0LL;
        uint64_t v1190 = -1LL;
        while (2)
        {
          uint64_t v429 = v94 + 64;
LABEL_571:
          if (v94)
          {
            int v430 = HIDWORD(v428) - v428;
            if ((*(_BYTE *)(v429 + ((uint64_t)(HIDWORD(v428) - (int)v428) << 6) + 15) & 8) != 0)
            {
              uint64_t v431 = v430;
              uint64_t v432 = v429 + ((uint64_t)v430 << 6);
              unint64_t v425 = *(void *)v432;
              if (*(void *)v432 < v1236 + v1235)
              {
                unint64_t v434 = (int *)(v432 + 8);
                int v433 = *(_DWORD *)(v432 + 8);
                if (v433 == -15880)
                {
                  if (v1235 > v425)
                  {
                    uint64_t v435 = v1239;
                    goto LABEL_586;
                  }

                  uint64_t v436 = apr_palloc(p, 0x38uLL);
                  *(_DWORD *)uint64_t v436 = 38;
                  *((_DWORD *)v436 + 1) = v427;
                  v436[1] = v1144;
                  v436[2] = v1162;
                  v436[3] = v1190;
                  v436[4] = 0LL;
                  v436[5] = v1175;
                  v436[6] = v1208;
                  uint64_t v437 = *find_entry((uint64_t)ht, (_BYTE *)v436 + 8, 8uLL, 0LL);
                  if (v437) {
                    uint64_t v437 = *(void *)(v437 + 32);
                  }
                  v436[4] = v437;
                  apr_hash_set(ht, v436 + 1, 8LL, v436);
                  v436[3] = v425;
                  int v433 = *v434;
                  uint64_t v429 = v94 + 64;
                }

                else if (v433 == -15879)
                {
                  if (v1235 > v425) {
                    goto LABEL_1211;
                  }
                  uint64_t v424 = (char *)apr_palloc(p, 0x38uLL);
                  unint64_t v189 = v424;
                  *(_DWORD *)uint64_t v424 = 38;
                  *((_DWORD *)v424 + 1) = v427;
                  *((void *)v424 + 1) = v1144;
                  uint64_t v190 = v424 + 8;
                  *((void *)v424 + 2) = v1162;
                  *((void *)v424 + 3) = v1190;
                  *((void *)v424 + 4) = 0LL;
                  uint64_t v426 = v1175;
LABEL_566:
                  *((void *)v424 + 5) = v426;
                  *((void *)v424 + 6) = v1208;
                  goto LABEL_1068;
                }

                if (v433 == -15879)
                {
                  uint64_t v1190 = *(void *)v432;
                  goto LABEL_588;
                }

                uint64_t v435 = v1239;
                if (v433 != -15880)
                {
                  if (v433 == -15997)
                  {
                    unint64_t v438 = GTTraceFunc_argumentBytesWithMap( (void *)v432,  *(unsigned __int8 *)(v429 + (v431 << 6) + 13),  v1239);
                    uint64_t v429 = v94 + 64;
                    int v427 = *v434;
                    uint64_t v1144 = *((void *)v438 + 1);
                    unint64_t v1162 = *(void *)v432;
                    uint64_t v1175 = *(void *)v438;
                  }

LABEL_588:
                  unsigned int v441 = atomic_load((unsigned int *)(v94 + 4));
                  int v442 = v428 + (v441 >> 6);
                  uint64_t v443 = (HIDWORD(v428) + 1);
                  unint64_t v428 = (v443 << 32) | v428;
                  if ((_DWORD)v443 == v442 - 1)
                  {
                    unint64_t v428 = (v443 << 32) | v443;
                    uint64_t v94 = *(void *)(v94 + 40);
                    continue;
                  }

                  goto LABEL_571;
                }

LABEL_586:
                uint64_t v439 = GTTraceFunc_argumentBytesWithMap( (void *)v432,  *(unsigned __int8 *)(v429 + (v431 << 6) + 13),  v435);
                uint64_t v440 = GTTraceFunc_argumentBytesWithMap((void *)v432, v439[8], v435);
                uint64_t v429 = v94 + 64;
                v1208 = v440;
                goto LABEL_588;
              }
            }
          }

          break;
        }

        char v363 = apr_palloc(p, 0x38uLL);
        *(_DWORD *)char v363 = 38;
        *((_DWORD *)v363 + 1) = v427;
        v363[1] = v1144;
        uint64_t v444 = v363 + 1;
        v363[2] = v1162;
        v363[3] = v1190;
        v363[4] = 0LL;
        v363[5] = v1175;
        v363[6] = v1208;
        goto LABEL_778;
      case 15:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        ++HIDWORD(v1243);
        uint64_t v98 = *(void *)(v37 + 32);
        if (v98)
        {
          unsigned int v99 = 0;
          while (1)
          {
            unsigned int v100 = atomic_load((unsigned int *)(v98 + 4));
            uint64_t v101 = v99 + (v100 >> 6) - 1;
            uint64_t v98 = *(void *)(v98 + 40);
            unsigned int v99 = v101;
            if (!v98)
            {
              unsigned int v99 = v101;
              goto LABEL_593;
            }
          }
        }

        else
        {
          unsigned int v99 = 0;
        }

        uint64_t v101 = 0LL;
LABEL_593:
        int v445 = 0;
        v1130 = 0LL;
        uint64_t v1145 = 0LL;
        uint64_t v1176 = 0LL;
        unint64_t v1191 = 0LL;
        unsigned int v1163 = 0;
        unint64_t v446 = v99 | (unint64_t)(v101 << 32);
        __int128 v1224 = 0u;
        uint64_t v1122 = -1LL;
        while (2)
        {
          uint64_t v447 = v98 + 64;
LABEL_595:
          if (v98)
          {
            int v448 = HIDWORD(v446) - v446;
            if ((*(_BYTE *)(v447 + ((uint64_t)(HIDWORD(v446) - (int)v446) << 6) + 15) & 8) != 0)
            {
              uint64_t v449 = v448;
              uint64_t v450 = v447 + ((uint64_t)v448 << 6);
              unint64_t v451 = *(void *)v450;
              if (*(void *)v450 < v1236 + v1235)
              {
                uint64_t v453 = (int *)(v450 + 8);
                int v452 = *(_DWORD *)(v450 + 8);
                if ((v452 + 15975) < 2)
                {
                  if (v1235 <= v451)
                  {
                    __int128 v454 = apr_palloc(p, 0x50uLL);
                    *(_DWORD *)__int128 v454 = 76;
                    *((_DWORD *)v454 + 1) = v445;
                    v454[1] = v1145;
                    v454[2] = v1191;
                    v454[3] = v1122;
                    v454[4] = 0LL;
                    v454[5] = v1176;
                    v454[6] = v1130;
                    *(_OWORD *)(v454 + memset(v56, 0, 7) = v1224;
                    v454[9] = v1163;
                    uint64_t v455 = *find_entry((uint64_t)ht, (_BYTE *)v454 + 8, 8uLL, 0LL);
                    if (v455) {
                      uint64_t v455 = *(void *)(v455 + 32);
                    }
                    v454[4] = v455;
                    apr_hash_set(ht, v454 + 1, 8LL, v454);
                    v454[3] = v451;
                    int v452 = *v453;
                    uint64_t v447 = v98 + 64;
                  }

LABEL_604:
                  uint64_t v456 = v1239;
                  if (v452 <= -15974)
                  {
                    if (v452 == -15996)
                    {
                      char v463 = GTTraceFunc_argumentBytesWithMap( (void *)v450,  *(unsigned __int8 *)(v447 + (v449 << 6) + 13),  v1239);
                      uint64_t v447 = v98 + 64;
                      int v445 = *v453;
                      uint64_t v1145 = *((void *)v463 + 1);
                      uint64_t v1176 = *(void *)v463;
                      unint64_t v1191 = *(void *)v450;
                      unsigned int v1163 = *((_DWORD *)v463 + 6);
                      *(void *)&__int128 v462 = *((void *)v463 + 2);
LABEL_621:
                      __int128 v1224 = v462;
                      goto LABEL_622;
                    }

                    if (v452 != -15975)
                    {
                      if (v452 == -15974)
                      {
                        unint64_t v459 = GTTraceFunc_argumentBytesWithMap( (void *)v450,  *(unsigned __int8 *)(v447 + (v449 << 6) + 13),  v1239);
                        unint64_t v460 = GTTraceFunc_argumentBytesWithMap((void *)v450, v459[8], v456);
                        uint64_t v447 = v98 + 64;
                        v1130 = v460;
                      }

LABEL_622:
                      unsigned int v466 = atomic_load((unsigned int *)(v98 + 4));
                      int v467 = v446 + (v466 >> 6);
                      uint64_t v468 = (HIDWORD(v446) + 1);
                      unint64_t v446 = (v468 << 32) | v446;
                      if ((_DWORD)v468 == v467 - 1)
                      {
                        unint64_t v446 = (v468 << 32) | v468;
                        uint64_t v98 = *(void *)(v98 + 40);
                        continue;
                      }

                      goto LABEL_595;
                    }

                    uint64_t v464 = GTTraceFunc_argumentBytesWithMap( (void *)v450,  *(unsigned __int8 *)(v447 + (v449 << 6) + 13),  v1239);
                    uint64_t v447 = v98 + 64;
                    unint64_t v458 = v464 + 8;
                  }

                  else
                  {
                    if (v452 > -15910)
                    {
                      if (v452 == -15909)
                      {
                        __int128 v465 = GTTraceFunc_argumentBytesWithMap( (void *)v450,  *(unsigned __int8 *)(v447 + (v449 << 6) + 13),  v1239);
                        uint64_t v447 = v98 + 64;
                        int v445 = *v453;
                        uint64_t v1145 = *((void *)v465 + 1);
                        uint64_t v1176 = *(void *)v465;
                        unint64_t v1191 = *(void *)v450;
                        unsigned int v1163 = *((_DWORD *)v465 + 8);
                        __int128 v462 = *((_OWORD *)v465 + 1);
                      }

                      else
                      {
                        if (v452 != -15907) {
                          goto LABEL_622;
                        }
                        char v461 = GTTraceFunc_argumentBytesWithMap( (void *)v450,  *(unsigned __int8 *)(v447 + (v449 << 6) + 13),  v1239);
                        uint64_t v447 = v98 + 64;
                        *((void *)&v462 + 1) = *((void *)&v1224 + 1);
                        *(void *)&__int128 v462 = *((void *)v461 + 1);
                      }

                      goto LABEL_621;
                    }

                    if (v452 == -15973)
                    {
                      uint64_t v1122 = *(void *)v450;
                      goto LABEL_622;
                    }

                    if (v452 != -15912) {
                      goto LABEL_622;
                    }
                    uint64_t v457 = GTTraceFunc_argumentBytesWithMap( (void *)v450,  *(unsigned __int8 *)(v447 + (v449 << 6) + 13),  v1239);
                    uint64_t v447 = v98 + 64;
                    int v445 = *v453;
                    uint64_t v1145 = *((void *)v457 + 1);
                    uint64_t v1176 = *(void *)v457;
                    unint64_t v1191 = *(void *)v450;
                    unsigned int v1163 = *((_DWORD *)v457 + 6);
                    unint64_t v458 = v457 + 16;
                  }

                  *(void *)&__int128 v462 = v1224;
                  *((void *)&v462 + 1) = *v458;
                  goto LABEL_621;
                }

                if (v452 != -15973) {
                  goto LABEL_604;
                }
                if (v1235 > v451) {
                  goto LABEL_1211;
                }
                v977 = (char *)apr_palloc(p, 0x50uLL);
                *(_DWORD *)v977 = 76;
                *((_DWORD *)v977 + 1) = v445;
                *((void *)v977 + 1) = v1145;
                v979 = v977 + 8;
                *((void *)v977 + 2) = v1191;
                *((void *)v977 + 3) = v1122;
                *((void *)v977 + 4) = 0LL;
                *((void *)v977 + 5) = v1176;
                *((void *)v977 + 6) = v1130;
                *(_OWORD *)(v977 + 56) = v1224;
                *((void *)v977 + 9) = v1163;
LABEL_1278:
                uint64_t v995 = *find_entry((uint64_t)ht, v979, 8uLL, 0LL);
                if (v995) {
                  uint64_t v995 = *(void *)(v995 + 32);
                }
                *((void *)v977 + 4) = v995;
                apr_hash_set(ht, v979, 8LL, v977);
                *((void *)v977 + 3) = v451;
                goto LABEL_1211;
              }
            }
          }

          break;
        }

        char v363 = apr_palloc(p, 0x50uLL);
        *(_DWORD *)char v363 = 76;
        *((_DWORD *)v363 + 1) = v445;
        v363[1] = v1145;
        uint64_t v444 = v363 + 1;
        v363[2] = v1191;
        v363[3] = v1122;
        v363[4] = 0LL;
        v363[5] = v1176;
        v363[6] = v1130;
        *(_OWORD *)(v363 + memset(v56, 0, 7) = v1224;
        v363[9] = v1163;
        goto LABEL_778;
      case 16:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        *(void *)&__src[0] = 0LL;
        LODWORD(v1244) = v1244 + 1;
        uint64_t v102 = *(void *)(v37 + 32);
        if (v102)
        {
          unsigned int v103 = 0;
          while (1)
          {
            unsigned int v104 = atomic_load((unsigned int *)(v102 + 4));
            uint64_t v105 = v103 + (v104 >> 6) - 1;
            uint64_t v102 = *(void *)(v102 + 40);
            unsigned int v103 = v105;
            if (!v102)
            {
              unsigned int v103 = v105;
              goto LABEL_627;
            }
          }
        }

        else
        {
          unsigned int v103 = 0;
        }

        uint64_t v105 = 0LL;
LABEL_627:
        int v469 = 0;
        uint64_t v1131 = 0LL;
        unint64_t v1146 = 0LL;
        uint64_t v1164 = 0LL;
        v1177 = 0LL;
        unint64_t v470 = v103 | (unint64_t)(v105 << 32);
        uint64_t v1192 = -1LL;
        uint64_t v1209 = 0LL;
        while (2)
        {
          uint64_t v471 = v102 + 64;
LABEL_629:
          if (v102)
          {
            int v472 = HIDWORD(v470) - v470;
            if ((*(_BYTE *)(v471 + ((uint64_t)(HIDWORD(v470) - (int)v470) << 6) + 15) & 8) != 0)
            {
              uint64_t v473 = v472;
              uint64_t v474 = v471 + ((uint64_t)v472 << 6);
              unint64_t v451 = *(void *)v474;
              if (*(void *)v474 < v1236 + v1235)
              {
                uint64_t v476 = (int *)(v474 + 8);
                int v475 = *(_DWORD *)(v474 + 8);
                if ((v475 + 15491) >= 2)
                {
                  if (v475 == -15489)
                  {
                    if (v1235 > v451) {
                      goto LABEL_1211;
                    }
                    v977 = (char *)apr_palloc(p, 0x50uLL);
                    *(_DWORD *)v977 = 61;
                    *((_DWORD *)v977 + 1) = v469;
                    *((void *)v977 + 1) = v1131;
                    v979 = v977 + 8;
                    *((void *)v977 + 2) = v1146;
                    *((void *)v977 + 3) = v1192;
                    *((void *)v977 + 4) = 0LL;
                    *((void *)v977 + 5) = v1164;
                    *((void *)v977 + 6) = v1177;
                    *((void *)v977 + memset(v56, 0, 7) = 0LL;
                    uint64_t v994 = *(void *)&__src[0];
                    *((void *)v977 + 8) = v1209;
                    *((void *)v977 + 9) = v994;
                    goto LABEL_1278;
                  }
                }

                else if (v1235 <= v451)
                {
                  uint64_t v477 = apr_palloc(p, 0x50uLL);
                  *(_DWORD *)uint64_t v477 = 61;
                  *((_DWORD *)v477 + 1) = v469;
                  v477[1] = v1131;
                  v477[2] = v1146;
                  v477[3] = v1192;
                  v477[4] = 0LL;
                  v477[5] = v1164;
                  v477[6] = v1177;
                  v477[7] = 0LL;
                  uint64_t v478 = *(void *)&__src[0];
                  v477[8] = v1209;
                  v477[9] = v478;
                  uint64_t v479 = *find_entry((uint64_t)ht, (_BYTE *)v477 + 8, 8uLL, 0LL);
                  if (v479) {
                    uint64_t v479 = *(void *)(v479 + 32);
                  }
                  v477[4] = v479;
                  apr_hash_set(ht, v477 + 1, 8LL, v477);
                  v477[3] = v451;
                  int v475 = *v476;
                  uint64_t v471 = v102 + 64;
                }

                uint64_t v480 = v1239;
                switch(v475)
                {
                  case -15496:
                    char v481 = GTTraceFunc_argumentBytesWithMap( (void *)v474,  *(unsigned __int8 *)(v471 + (v473 << 6) + 13),  v1239);
                    uint64_t v471 = v102 + 64;
                    uint64_t v1209 = 0LL;
                    int v469 = *v476;
                    uint64_t v1131 = *((void *)v481 + 1);
                    unint64_t v1146 = *(void *)v474;
                    uint64_t v1164 = *(void *)v481;
                    break;
                  case -15491:
                    uint64_t v482 = GTTraceFunc_argumentBytesWithMap( (void *)v474,  *(unsigned __int8 *)(v471 + (v473 << 6) + 13),  v1239);
                    char v483 = GTTraceFunc_argumentBytesWithMap((void *)v474, v482[8], v480);
                    uint64_t v471 = v102 + 64;
                    v1177 = v483;
                    break;
                  case -15490:
                    uint64_t v484 = GTTraceFunc_argumentBytesWithMap( (void *)v474,  *(unsigned __int8 *)(v471 + (v473 << 6) + 13),  v1239);
                    uint64_t v471 = v102 + 64;
                    uint64_t v1209 = *((void *)v484 + 1);
                    break;
                  case -15489:
                    uint64_t v1192 = *(void *)v474;
                    break;
                  default:
                    break;
                }

                unsigned int v485 = atomic_load((unsigned int *)(v102 + 4));
                int v486 = v470 + (v485 >> 6);
                uint64_t v487 = (HIDWORD(v470) + 1);
                unint64_t v470 = (v487 << 32) | v470;
                if ((_DWORD)v487 == v486 - 1)
                {
                  unint64_t v470 = (v487 << 32) | v487;
                  uint64_t v102 = *(void *)(v102 + 40);
                  continue;
                }

                goto LABEL_629;
              }
            }
          }

          break;
        }

        char v363 = apr_palloc(p, 0x50uLL);
        *(_DWORD *)char v363 = 61;
        *((_DWORD *)v363 + 1) = v469;
        v363[1] = v1131;
        uint64_t v444 = v363 + 1;
        v363[2] = v1146;
        v363[3] = v1192;
        v363[4] = 0LL;
        v363[5] = v1164;
        v363[6] = v1177;
        v363[7] = 0LL;
        uint64_t v488 = *(void *)&__src[0];
        v363[8] = v1209;
        v363[9] = v488;
        goto LABEL_778;
      case 17:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        ++DWORD1(v1244);
        uint64_t v106 = *(void *)(v37 + 32);
        if (v106)
        {
          unsigned int v107 = 0;
          while (1)
          {
            unsigned int v108 = atomic_load((unsigned int *)(v106 + 4));
            uint64_t v109 = v107 + (v108 >> 6) - 1;
            uint64_t v106 = *(void *)(v106 + 40);
            unsigned int v107 = v109;
            if (!v106)
            {
              unsigned int v107 = v109;
              goto LABEL_648;
            }
          }
        }

        else
        {
          unsigned int v107 = 0;
        }

        uint64_t v109 = 0LL;
LABEL_648:
        int v489 = 0;
        uint64_t v490 = 0LL;
        unint64_t v1182 = 0LL;
        uint64_t v1201 = 0LL;
        uint64_t v176 = 0LL;
        unint64_t v491 = v107 | (unint64_t)(v109 << 32);
        while (2)
        {
          uint64_t v492 = v106 + 64;
LABEL_650:
          if (v106)
          {
            int v493 = HIDWORD(v491) - v491;
            if ((*(_BYTE *)(v492 + ((uint64_t)(HIDWORD(v491) - (int)v491) << 6) + 15) & 8) != 0)
            {
              uint64_t v494 = v492 + ((uint64_t)v493 << 6);
              unint64_t v451 = *(void *)v494;
              if (*(void *)v494 < v1236 + v1235)
              {
                int v495 = *(_DWORD *)(v494 + 8);
                if (v495 == -15891)
                {
                  uint64_t v496 = v1239;
                  unint64_t v497 = GTTraceFunc_argumentBytesWithMap( (void *)v494,  *(unsigned __int8 *)(v492 + ((uint64_t)v493 << 6) + 13),  v1239);
                  int v489 = *(_DWORD *)(v494 + 8);
                  uint64_t v490 = *((void *)v497 + 1);
                  unint64_t v1182 = *(void *)v494;
                  uint64_t v1201 = *(void *)v497;
                  uint64_t v176 = GTTraceFunc_argumentBytesWithMap((void *)v494, v497[16], v496);
                }

                else if (v495 == -15893)
                {
                  int v14 = v1220;
                  if (v1235 > v451) {
                    goto LABEL_1211;
                  }
                  v976 = (char *)apr_palloc(p, 0x38uLL);
                  v977 = v976;
                  int v978 = 64;
LABEL_1250:
                  *(_DWORD *)v976 = v978;
                  *((_DWORD *)v976 + 1) = v489;
                  *((void *)v976 + 1) = v490;
                  v979 = v976 + 8;
                  *((void *)v976 + 2) = v1182;
                  *((void *)v976 + 3) = -1LL;
                  *((void *)v976 + 4) = 0LL;
                  *((void *)v976 + 5) = v1201;
                  *((void *)v976 + 6) = v176;
                  goto LABEL_1278;
                }

                int v14 = v1220;
                unsigned int v498 = atomic_load((unsigned int *)(v106 + 4));
                int v499 = v491 + (v498 >> 6);
                uint64_t v500 = (HIDWORD(v491) + 1);
                unint64_t v491 = (v500 << 32) | v491;
                if ((_DWORD)v500 == v499 - 1)
                {
                  unint64_t v491 = (v500 << 32) | v500;
                  uint64_t v106 = *(void *)(v106 + 40);
                  continue;
                }

                goto LABEL_650;
              }
            }
          }

          break;
        }

        uint64_t v188 = (char *)apr_palloc(p, 0x38uLL);
        unint64_t v189 = v188;
        int v501 = 64;
        goto LABEL_674;
      case 18:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        ++DWORD2(v1244);
        uint64_t v110 = *(void *)(v37 + 32);
        if (v110)
        {
          unsigned int v111 = 0;
          while (1)
          {
            unsigned int v112 = atomic_load((unsigned int *)(v110 + 4));
            uint64_t v113 = v111 + (v112 >> 6) - 1;
            uint64_t v110 = *(void *)(v110 + 40);
            unsigned int v111 = v113;
            if (!v110)
            {
              unsigned int v111 = v113;
              goto LABEL_662;
            }
          }
        }

        else
        {
          unsigned int v111 = 0;
        }

        uint64_t v113 = 0LL;
LABEL_662:
        int v489 = 0;
        uint64_t v490 = 0LL;
        unint64_t v1182 = 0LL;
        uint64_t v1201 = 0LL;
        uint64_t v176 = 0LL;
        unint64_t v502 = v111 | (unint64_t)(v113 << 32);
        while (2)
        {
          uint64_t v503 = v110 + 64;
LABEL_664:
          if (v110)
          {
            int v504 = HIDWORD(v502) - v502;
            if ((*(_BYTE *)(v503 + ((uint64_t)(HIDWORD(v502) - (int)v502) << 6) + 15) & 8) != 0)
            {
              uint64_t v505 = v503 + ((uint64_t)v504 << 6);
              unint64_t v451 = *(void *)v505;
              if (*(void *)v505 < v1236 + v1235)
              {
                int v506 = *(_DWORD *)(v505 + 8);
                if (v506 == -16311)
                {
                  uint64_t v507 = v1239;
                  uint64_t v508 = GTTraceFunc_argumentBytesWithMap( (void *)v505,  *(unsigned __int8 *)(v503 + ((uint64_t)v504 << 6) + 13),  v1239);
                  int v489 = *(_DWORD *)(v505 + 8);
                  uint64_t v490 = *((void *)v508 + 1);
                  unint64_t v1182 = *(void *)v505;
                  uint64_t v1201 = *(void *)v508;
                  uint64_t v176 = GTTraceFunc_argumentBytesWithMap((void *)v505, v508[16], v507);
                }

                else if (v506 == -16320)
                {
                  int v14 = v1220;
                  if (v1235 > v451) {
                    goto LABEL_1211;
                  }
                  v976 = (char *)apr_palloc(p, 0x38uLL);
                  v977 = v976;
                  int v978 = 34;
                  goto LABEL_1250;
                }

                int v14 = v1220;
                unsigned int v509 = atomic_load((unsigned int *)(v110 + 4));
                int v510 = v502 + (v509 >> 6);
                uint64_t v511 = (HIDWORD(v502) + 1);
                unint64_t v502 = (v511 << 32) | v502;
                if ((_DWORD)v511 == v510 - 1)
                {
                  unint64_t v502 = (v511 << 32) | v511;
                  uint64_t v110 = *(void *)(v110 + 40);
                  continue;
                }

                goto LABEL_664;
              }
            }
          }

          break;
        }

        uint64_t v188 = (char *)apr_palloc(p, 0x38uLL);
        unint64_t v189 = v188;
        int v501 = 34;
LABEL_674:
        *(_DWORD *)uint64_t v188 = v501;
        *((_DWORD *)v188 + 1) = v489;
        *((void *)v188 + 1) = v490;
        uint64_t v190 = v188 + 8;
LABEL_675:
        unint64_t v425 = -1LL;
        *((void *)v188 + 2) = v1182;
        *((void *)v188 + 3) = -1LL;
        *((void *)v188 + 4) = 0LL;
        *((void *)v188 + 5) = v1201;
        goto LABEL_1067;
      case 19:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        ++HIDWORD(v1244);
        uint64_t v114 = *(void *)(v37 + 32);
        uint64_t v1201 = v1234;
        unsigned int v115 = 0;
        if (!v114) {
          goto LABEL_242;
        }
        while (1)
        {
          unsigned int v116 = atomic_load((unsigned int *)(v114 + 4));
          uint64_t v117 = v115 + (v116 >> 6) - 1;
          uint64_t v114 = *(void *)(v114 + 40);
          unsigned int v115 = v117;
          if (!v114)
          {
            unsigned int v115 = v117;
LABEL_243:
            int v174 = 0;
            uint64_t v175 = 0LL;
            unint64_t v1182 = 0LL;
            uint64_t v176 = 0LL;
            unint64_t v177 = v115 | (unint64_t)(v117 << 32);
            while (1)
            {
              uint64_t v178 = v114 + 64;
              do
              {
                if (!v114
                  || (int v179 = HIDWORD(v177) - v177,
                      (*(_BYTE *)(v178 + ((uint64_t)(HIDWORD(v177) - (int)v177) << 6) + 15) & 8) == 0)
                  || (v180 = v178 + ((uint64_t)v179 << 6), unint64_t v181 = *(void *)v180, *(void *)v180 >= v1236 + v1235))
                {
                  uint64_t v188 = (char *)apr_palloc(p, 0x38uLL);
                  unint64_t v189 = v188;
                  *(_DWORD *)uint64_t v188 = 31;
                  *((_DWORD *)v188 + 1) = v174;
                  *((void *)v188 + 1) = v175;
                  uint64_t v190 = v188 + 8;
                  goto LABEL_675;
                }

                int v182 = *(_DWORD *)(v180 + 8);
                if (v182 == -15848)
                {
                  uint64_t v183 = v1239;
                  int v184 = GTTraceFunc_argumentBytesWithMap( (void *)v180,  *(unsigned __int8 *)(v178 + ((uint64_t)v179 << 6) + 13),  v1239);
                  int v174 = *(_DWORD *)(v180 + 8);
                  uint64_t v175 = *((void *)v184 + 1);
                  unint64_t v1182 = *(void *)v180;
                  uint64_t v1201 = *(void *)v184;
                  uint64_t v176 = GTTraceFunc_argumentBytesWithMap((void *)v180, v184[24], v183);
                }

                else if (v182 == -15867)
                {
                  int v14 = v1220;
                  if (v1235 <= v181)
                  {
                    v964 = apr_palloc(p, 0x38uLL);
                    *(_DWORD *)v964 = 31;
                    *((_DWORD *)v964 + 1) = v174;
                    v964[1] = v175;
                    v964[2] = v1182;
                    v964[3] = -1LL;
                    v964[4] = 0LL;
                    v964[5] = v1201;
                    v964[6] = v176;
                    uint64_t v965 = *find_entry((uint64_t)ht, (_BYTE *)v964 + 8, 8uLL, 0LL);
                    if (v965) {
                      uint64_t v965 = *(void *)(v965 + 32);
                    }
                    v964[4] = v965;
                    apr_hash_set(ht, v964 + 1, 8LL, v964);
                    v964[3] = v181;
                  }

                  goto LABEL_1211;
                }

                int v14 = v1220;
                unsigned int v185 = atomic_load((unsigned int *)(v114 + 4));
                int v186 = v177 + (v185 >> 6);
                uint64_t v187 = (HIDWORD(v177) + 1);
                unint64_t v177 = (v187 << 32) | v177;
              }

              while ((_DWORD)v187 != v186 - 1);
              unint64_t v177 = (v187 << 32) | v187;
              uint64_t v114 = *(void *)(v114 + 40);
            }
          }
        }

LABEL_242:
        uint64_t v117 = 0LL;
        goto LABEL_243;
      case 20:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        LODWORD(v1245) = v1245 + 1;
        uint64_t v118 = *(void *)(v37 + 32);
        if (v118)
        {
          unsigned int v119 = 0;
          while (1)
          {
            unsigned int v120 = atomic_load((unsigned int *)(v118 + 4));
            uint64_t v121 = v119 + (v120 >> 6) - 1;
            uint64_t v118 = *(void *)(v118 + 40);
            unsigned int v119 = v121;
            if (!v118)
            {
              unsigned int v119 = v121;
              goto LABEL_678;
            }
          }
        }

        else
        {
          unsigned int v119 = 0;
        }

        uint64_t v121 = 0LL;
LABEL_678:
        int v512 = 0;
        uint64_t v513 = 0LL;
        unint64_t v514 = 0LL;
        uint64_t v515 = 0LL;
        uint64_t v516 = 0LL;
        unint64_t v517 = v119 | (unint64_t)(v121 << 32);
        while (2)
        {
          uint64_t v518 = v118 + 64;
LABEL_680:
          if (v118)
          {
            int v519 = HIDWORD(v517) - v517;
            if ((*(_BYTE *)(v518 + ((uint64_t)(HIDWORD(v517) - (int)v517) << 6) + 15) & 8) != 0)
            {
              uint64_t v520 = v518 + ((uint64_t)v519 << 6);
              unint64_t v521 = *(void *)v520;
              if (*(void *)v520 < v1236 + v1235)
              {
                int v522 = *(_DWORD *)(v520 + 8);
                if (v522 == -15922)
                {
                  char v523 = GTTraceFunc_argumentBytesWithMap( (void *)v520,  *(unsigned __int8 *)(v518 + ((uint64_t)v519 << 6) + 13),  v1239);
                  unint64_t v514 = *(void *)v520;
                  int v512 = *(_DWORD *)(v520 + 8);
                  uint64_t v515 = *(void *)v523;
                  uint64_t v513 = *((void *)v523 + 1);
                  uint64_t v516 = *((void *)v523 + 2);
                }

                else if (v522 == -15957)
                {
                  int v14 = v1220;
                  if (v1235 > v521) {
                    goto LABEL_1211;
                  }
                  uint64_t v980 = v516;
                  uint64_t v981 = v515;
                  v982 = apr_palloc(p, 0x38uLL);
                  v983 = v982;
                  int v984 = 59;
LABEL_1255:
                  *(_DWORD *)v982 = v984;
                  *((_DWORD *)v982 + 1) = v512;
                  v982[1] = v513;
                  v985 = v982 + 1;
                  v982[2] = v514;
                  v982[3] = -1LL;
                  v982[4] = 0LL;
                  v982[5] = v981;
                  v982[6] = v980;
                  uint64_t v986 = *find_entry((uint64_t)ht, (_BYTE *)v982 + 8, 8uLL, 0LL);
                  if (v986) {
                    uint64_t v986 = *(void *)(v986 + 32);
                  }
                  v983[4] = v986;
                  apr_hash_set(ht, v985, 8LL, v983);
                  v983[3] = v521;
                  goto LABEL_1211;
                }

                int v14 = v1220;
                unsigned int v524 = atomic_load((unsigned int *)(v118 + 4));
                int v525 = v517 + (v524 >> 6);
                uint64_t v526 = (HIDWORD(v517) + 1);
                unint64_t v517 = (v526 << 32) | v517;
                if ((_DWORD)v526 == v525 - 1)
                {
                  unint64_t v517 = (v526 << 32) | v526;
                  uint64_t v118 = *(void *)(v118 + 40);
                  continue;
                }

                goto LABEL_680;
              }
            }
          }

          break;
        }

        uint64_t v527 = v515;
        uint64_t v528 = v516;
        char v529 = (char *)apr_palloc(p, 0x38uLL);
        uint64_t v530 = v529;
        int v531 = 59;
        goto LABEL_704;
      case 21:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        ++DWORD1(v1245);
        uint64_t v122 = *(void *)(v37 + 32);
        if (v122)
        {
          unsigned int v123 = 0;
          while (1)
          {
            unsigned int v124 = atomic_load((unsigned int *)(v122 + 4));
            uint64_t v125 = v123 + (v124 >> 6) - 1;
            uint64_t v122 = *(void *)(v122 + 40);
            unsigned int v123 = v125;
            if (!v122)
            {
              unsigned int v123 = v125;
              goto LABEL_692;
            }
          }
        }

        else
        {
          unsigned int v123 = 0;
        }

        uint64_t v125 = 0LL;
LABEL_692:
        int v512 = 0;
        uint64_t v513 = 0LL;
        unint64_t v514 = 0LL;
        uint64_t v532 = 0LL;
        uint64_t v533 = 0LL;
        unint64_t v534 = v123 | (unint64_t)(v125 << 32);
        while (2)
        {
          uint64_t v535 = v122 + 64;
LABEL_694:
          if (v122)
          {
            int v536 = HIDWORD(v534) - v534;
            if ((*(_BYTE *)(v535 + ((uint64_t)(HIDWORD(v534) - (int)v534) << 6) + 15) & 8) != 0)
            {
              uint64_t v537 = v535 + ((uint64_t)v536 << 6);
              unint64_t v521 = *(void *)v537;
              if (*(void *)v537 < v1236 + v1235)
              {
                int v538 = *(_DWORD *)(v537 + 8);
                if (v538 == -15921)
                {
                  unint64_t v539 = GTTraceFunc_argumentBytesWithMap( (void *)v537,  *(unsigned __int8 *)(v535 + ((uint64_t)v536 << 6) + 13),  v1239);
                  unint64_t v514 = *(void *)v537;
                  int v512 = *(_DWORD *)(v537 + 8);
                  uint64_t v532 = *(void *)v539;
                  uint64_t v513 = *((void *)v539 + 1);
                  uint64_t v533 = *((void *)v539 + 2);
                }

                else if (v538 == -15935)
                {
                  int v14 = v1220;
                  if (v1235 > v521) {
                    goto LABEL_1211;
                  }
                  uint64_t v980 = v533;
                  uint64_t v981 = v532;
                  v982 = apr_palloc(p, 0x38uLL);
                  v983 = v982;
                  int v984 = 58;
                  goto LABEL_1255;
                }

                int v14 = v1220;
                unsigned int v540 = atomic_load((unsigned int *)(v122 + 4));
                int v541 = v534 + (v540 >> 6);
                uint64_t v542 = (HIDWORD(v534) + 1);
                unint64_t v534 = (v542 << 32) | v534;
                if ((_DWORD)v542 == v541 - 1)
                {
                  unint64_t v534 = (v542 << 32) | v542;
                  uint64_t v122 = *(void *)(v122 + 40);
                  continue;
                }

                goto LABEL_694;
              }
            }
          }

          break;
        }

        uint64_t v527 = v532;
        uint64_t v528 = v533;
        char v529 = (char *)apr_palloc(p, 0x38uLL);
        uint64_t v530 = v529;
        int v531 = 58;
LABEL_704:
        *(_DWORD *)char v529 = v531;
        *((_DWORD *)v529 + 1) = v512;
        *((void *)v529 + 1) = v513;
        unint64_t v543 = v529 + 8;
        uint64_t v544 = -1LL;
        *((void *)v529 + 2) = v514;
        *((void *)v529 + 3) = -1LL;
        *((void *)v529 + 4) = 0LL;
        *((void *)v529 + 5) = v527;
        *((void *)v529 + 6) = v528;
        goto LABEL_1008;
      case 22:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        BYTE2(__src[0]) = 0;
        LOWORD(__src[0]) = 0;
        ++DWORD2(v1245);
        uint64_t v126 = *(void *)(v37 + 32);
        if (v126)
        {
          unsigned int v127 = 0;
          while (1)
          {
            unsigned int v128 = atomic_load((unsigned int *)(v126 + 4));
            uint64_t v129 = v127 + (v128 >> 6) - 1;
            uint64_t v126 = *(void *)(v126 + 40);
            unsigned int v127 = v129;
            if (!v126)
            {
              unsigned int v127 = v129;
              goto LABEL_707;
            }
          }
        }

        else
        {
          unsigned int v127 = 0;
        }

        uint64_t v129 = 0LL;
LABEL_707:
        int v545 = 0;
        uint64_t v1178 = 0LL;
        uint64_t v1193 = 0LL;
        unint64_t v1210 = 0LL;
        v1123 = 0LL;
        int v1165 = 0;
        int v1108 = 0;
        LOBYTE(v1115) = 0;
        LOBYTE(v1092) = 0;
        unint64_t v546 = v127 | (unint64_t)(v129 << 32);
        char v1147 = 3;
        char v1132 = 1;
        uint64_t v1096 = -1LL;
        v1101 = 0LL;
        LOBYTE(v1088) = 1;
        while (2)
        {
          uint64_t v547 = v126 + 64;
LABEL_709:
          if (v126)
          {
            int v548 = HIDWORD(v546) - v546;
            if ((*(_BYTE *)(v547 + ((uint64_t)(HIDWORD(v546) - (int)v546) << 6) + 15) & 8) != 0)
            {
              uint64_t v549 = v548;
              uint64_t v550 = v547 + ((uint64_t)v548 << 6);
              unint64_t v292 = *(void *)v550;
              if (*(void *)v550 < v1236 + v1235)
              {
                id v552 = (int *)(v550 + 8);
                int v551 = *(_DWORD *)(v550 + 8);
                if ((v551 + 16349) >= 5)
                {
                  if (v551 == -16344)
                  {
                    if (v1235 > v292) {
                      goto LABEL_1211;
                    }
                    v1030 = (char *)apr_palloc(p, 0x50uLL);
                    *(_DWORD *)v1030 = 27;
                    *((_DWORD *)v1030 + 1) = v545;
                    *((void *)v1030 + 1) = v1178;
                    v1031 = v1030 + 8;
                    *((void *)v1030 + 2) = v1210;
                    *((void *)v1030 + 3) = v1096;
                    *((void *)v1030 + 4) = 0LL;
                    *((void *)v1030 + 5) = v1193;
                    *((void *)v1030 + 6) = v1101;
                    *((void *)v1030 + memset(v56, 0, 7) = v1123;
                    *((_DWORD *)v1030 + 16) = v1165;
                    *((_DWORD *)v1030 + 1memset(v56, 0, 7) = v1108;
                    v1030[72] = v1132;
                    v1030[73] = v1147;
                    v1030[74] = v1115;
                    v1030[75] = v1092;
                    v1030[76] = v1088;
                    __int16 v1032 = __src[0];
                    v1030[79] = BYTE2(__src[0]);
                    *(_WORD *)(v1030 + 7memset(v56, 0, 7) = v1032;
                    goto LABEL_1296;
                  }
                }

                else if (v1235 <= v292)
                {
                  unint64_t v553 = apr_palloc(p, 0x50uLL);
                  *(_DWORD *)unint64_t v553 = 27;
                  *((_DWORD *)v553 + 1) = v545;
                  v553[1] = v1178;
                  v553[2] = v1210;
                  v553[3] = v1096;
                  v553[4] = 0LL;
                  v553[5] = v1193;
                  v553[6] = v1101;
                  v553[7] = v1123;
                  *((_DWORD *)v553 + 16) = v1165;
                  *((_DWORD *)v553 + 1memset(v56, 0, 7) = v1108;
                  *((_BYTE *)v553 + 72) = v1132;
                  *((_BYTE *)v553 + 73) = v1147;
                  *((_BYTE *)v553 + 74) = v1115;
                  *((_BYTE *)v553 + 75) = v1092;
                  *((_BYTE *)v553 + 76) = v1088;
                  __int16 v554 = __src[0];
                  *((_BYTE *)v553 + 79) = BYTE2(__src[0]);
                  *(_WORD *)((char *)v553 + 7memset(v56, 0, 7) = v554;
                  uint64_t v555 = *find_entry((uint64_t)ht, (_BYTE *)v553 + 8, 8uLL, 0LL);
                  if (v555) {
                    uint64_t v555 = *(void *)(v555 + 32);
                  }
                  v553[4] = v555;
                  apr_hash_set(ht, v553 + 1, 8LL, v553);
                  v553[3] = v292;
                  int v551 = *v552;
                  uint64_t v547 = v126 + 64;
                }

                uint64_t v556 = v1239;
                if (v551 <= -16316)
                {
                  switch(v551)
                  {
                    case -16349:
                      uint64_t v558 = GTTraceFunc_argumentBytesWithMap( (void *)v550,  *(unsigned __int8 *)(v547 + (v549 << 6) + 13),  v1239);
                      v1101 = GTTraceFunc_argumentBytesWithMap((void *)v550, v558[8], v556);
                      break;
                    case -16348:
                      int v1108 = *((_DWORD *)GTTraceFunc_argumentBytesWithMap( (void *)v550,  *(unsigned __int8 *)(v547 + (v549 << 6) + 13),  v1239)
                              + 2);
                      break;
                    case -16347:
                      int v1092 = *((_DWORD *)GTTraceFunc_argumentBytesWithMap( (void *)v550,  *(unsigned __int8 *)(v547 + (v549 << 6) + 13),  v1239)
                              + 2);
                      break;
                    case -16346:
                      int v1088 = *((_DWORD *)GTTraceFunc_argumentBytesWithMap( (void *)v550,  *(unsigned __int8 *)(v547 + (v549 << 6) + 13),  v1239)
                              + 2);
                      break;
                    case -16345:
                      int v1115 = *((_DWORD *)GTTraceFunc_argumentBytesWithMap( (void *)v550,  *(unsigned __int8 *)(v547 + (v549 << 6) + 13),  v1239)
                              + 2);
                      break;
                    case -16344:
                      uint64_t v1096 = *(void *)v550;
                      break;
                    default:
                      if (v551 == -16316)
                      {
                        char v561 = GTTraceFunc_argumentBytesWithMap( (void *)v550,  *(unsigned __int8 *)(v547 + (v549 << 6) + 13),  v1239);
                        int v545 = *v552;
                        uint64_t v1178 = *((void *)v561 + 1);
                        uint64_t v1193 = *(void *)v561;
                        unint64_t v1210 = *(void *)v550;
                        int v560 = 64;
LABEL_730:
                        int v1165 = v560;
                      }

                      break;
                  }

LABEL_736:
                  int v557 = HIDWORD(v546);
                }

                else
                {
                  int v557 = HIDWORD(v546);
                  switch(v551)
                  {
                    case -15809:
                    case -15808:
                      char v1147 = GTTraceFunc_argumentBytesWithMap( (void *)v550,  *(unsigned __int8 *)(v547 + (v549 << 6) + 13),  v1239)[8];
                      break;
                    case -15807:
                      break;
                    case -15806:
                    case -15805:
                      char v1132 = GTTraceFunc_argumentBytesWithMap( (void *)v550,  *(unsigned __int8 *)(v547 + (v549 << 6) + 13),  v1239)[8];
                      break;
                    default:
                      if (v551 == -16315)
                      {
                        uint64_t v562 = GTTraceFunc_argumentBytesWithMap( (void *)v550,  *(unsigned __int8 *)(v547 + (v549 << 6) + 13),  v1239);
                        int v545 = *v552;
                        uint64_t v1178 = *((void *)v562 + 1);
                        uint64_t v1193 = *(void *)v562;
                        unint64_t v1210 = *(void *)v550;
                        int v560 = *((_DWORD *)v562 + 4);
                      }

                      else
                      {
                        if (v551 != -16165) {
                          goto LABEL_736;
                        }
                        unint64_t v559 = GTTraceFunc_argumentBytesWithMap( (void *)v550,  *(unsigned __int8 *)(v547 + (v549 << 6) + 13),  v1239);
                        int v545 = *v552;
                        uint64_t v1178 = *((void *)v559 + 1);
                        uint64_t v1193 = *(void *)v559;
                        unint64_t v1210 = *(void *)v550;
                        v1123 = GTTraceFunc_argumentBytesWithMap((void *)v550, v559[16], v556);
                        int v560 = *(_DWORD *)v1123;
                      }

                      goto LABEL_730;
                  }
                }

                unsigned int v563 = atomic_load((unsigned int *)(v126 + 4));
                int v564 = v546 + (v563 >> 6);
                uint64_t v565 = (v557 + 1);
                unint64_t v546 = (v565 << 32) | v546;
                if ((_DWORD)v565 == v564 - 1)
                {
                  unint64_t v546 = (v565 << 32) | v565;
                  uint64_t v126 = *(void *)(v126 + 40);
                  continue;
                }

                goto LABEL_709;
              }
            }
          }

          break;
        }

        char v306 = apr_palloc(p, 0x50uLL);
        *(_DWORD *)char v306 = 27;
        *((_DWORD *)v306 + 1) = v545;
        v306[1] = v1178;
        uint64_t v307 = v306 + 1;
        v306[2] = v1210;
        v306[3] = v1096;
        v306[4] = 0LL;
        v306[5] = v1193;
        v306[6] = v1101;
        v306[7] = v1123;
        *((_DWORD *)v306 + 16) = v1165;
        *((_DWORD *)v306 + 1memset(v56, 0, 7) = v1108;
        *((_BYTE *)v306 + 72) = v1132;
        *((_BYTE *)v306 + 73) = v1147;
        *((_BYTE *)v306 + 74) = v1115;
        *((_BYTE *)v306 + 75) = v1092;
        *((_BYTE *)v306 + 76) = v1088;
        __int16 v566 = __src[0];
        *((_BYTE *)v306 + 79) = BYTE2(__src[0]);
        *(_WORD *)((char *)v306 + 7memset(v56, 0, 7) = v566;
        goto LABEL_922;
      case 23:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        ++HIDWORD(v1245);
        uint64_t v130 = *(void *)(v37 + 32);
        if (v130)
        {
          unsigned int v131 = 0;
          while (1)
          {
            unsigned int v132 = atomic_load((unsigned int *)(v130 + 4));
            uint64_t v133 = v131 + (v132 >> 6) - 1;
            uint64_t v130 = *(void *)(v130 + 40);
            unsigned int v131 = v133;
            if (!v130)
            {
              unsigned int v131 = v133;
              goto LABEL_742;
            }
          }
        }

        else
        {
          unsigned int v131 = 0;
        }

        uint64_t v133 = 0LL;
LABEL_742:
        int v567 = 0;
        uint64_t v568 = 0LL;
        unint64_t v1194 = 0LL;
        uint64_t v1211 = 0LL;
        uint64_t v569 = 0LL;
        unint64_t v570 = v131 | (unint64_t)(v133 << 32);
        while (2)
        {
          uint64_t v571 = v130 + 64;
LABEL_744:
          if (v130)
          {
            int v572 = HIDWORD(v570) - v570;
            if ((*(_BYTE *)(v571 + ((uint64_t)(HIDWORD(v570) - (int)v570) << 6) + 15) & 8) != 0)
            {
              uint64_t v573 = v571 + ((uint64_t)v572 << 6);
              unint64_t v451 = *(void *)v573;
              if (*(void *)v573 < v1236 + v1235)
              {
                int v574 = *(_DWORD *)(v573 + 8);
                if (v574 == -15350)
                {
                  uint64_t v575 = v1239;
                  uint64_t v576 = GTTraceFunc_argumentBytesWithMap( (void *)v573,  *(unsigned __int8 *)(v571 + ((uint64_t)v572 << 6) + 13),  v1239);
                  int v567 = *(_DWORD *)(v573 + 8);
                  uint64_t v568 = *((void *)v576 + 1);
                  unint64_t v1194 = *(void *)v573;
                  uint64_t v1211 = *(void *)v576;
                  uint64_t v569 = GTTraceFunc_argumentBytesWithMap((void *)v573, v576[24], v575);
                }

                else if (v574 == -15332)
                {
                  int v14 = v1220;
                  if (v1235 > v451) {
                    goto LABEL_1211;
                  }
                  v977 = (char *)apr_palloc(p, 0x40uLL);
                  *(_DWORD *)v977 = 52;
                  *((_DWORD *)v977 + 1) = v567;
                  *((void *)v977 + 1) = v568;
                  v979 = v977 + 8;
                  *((void *)v977 + 2) = v1194;
                  *((void *)v977 + 3) = -1LL;
                  *((void *)v977 + 4) = 0LL;
                  *((void *)v977 + 5) = v1211;
                  *((void *)v977 + 6) = 0LL;
                  *((void *)v977 + memset(v56, 0, 7) = v569;
                  goto LABEL_1278;
                }

                int v14 = v1220;
                unsigned int v577 = atomic_load((unsigned int *)(v130 + 4));
                int v578 = v570 + (v577 >> 6);
                uint64_t v579 = (HIDWORD(v570) + 1);
                unint64_t v570 = (v579 << 32) | v570;
                if ((_DWORD)v579 == v578 - 1)
                {
                  unint64_t v570 = (v579 << 32) | v579;
                  uint64_t v130 = *(void *)(v130 + 40);
                  continue;
                }

                goto LABEL_744;
              }
            }
          }

          break;
        }

        unint64_t v189 = apr_palloc(p, 0x40uLL);
        *(_DWORD *)unint64_t v189 = 52;
        *((_DWORD *)v189 + 1) = v567;
        v189[1] = v568;
        uint64_t v190 = v189 + 1;
        unint64_t v425 = -1LL;
        v189[2] = v1194;
        v189[3] = -1LL;
        v189[4] = 0LL;
        v189[5] = v1211;
        v189[6] = 0LL;
        v189[7] = v569;
        goto LABEL_1068;
      case 24:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        BYTE2(__src[0]) = 0;
        LOWORD(__src[0]) = 0;
        LODWORD(v1246) = v1246 + 1;
        uint64_t v134 = *(void *)(v37 + 32);
        if (v134)
        {
          unsigned int v135 = 0;
          while (1)
          {
            unsigned int v136 = atomic_load((unsigned int *)(v134 + 4));
            uint64_t v137 = v135 + (v136 >> 6) - 1;
            uint64_t v134 = *(void *)(v134 + 40);
            unsigned int v135 = v137;
            if (!v134)
            {
              unsigned int v135 = v137;
              goto LABEL_756;
            }
          }
        }

        else
        {
          unsigned int v135 = 0;
        }

        uint64_t v137 = 0LL;
LABEL_756:
        int v580 = 0;
        uint64_t v1133 = 0LL;
        uint64_t v1195 = 0LL;
        v1225 = 0LL;
        char v1148 = 0;
        unint64_t v581 = v135 | (unint64_t)(v137 << 32);
        int v582 = 0;
        unint64_t v1166 = 0LL;
        uint64_t v1179 = -1LL;
        while (2)
        {
          uint64_t v583 = v134 + 64;
LABEL_758:
          if (!v134
            || (int v584 = HIDWORD(v581) - v581,
                (*(_BYTE *)(v583 + ((uint64_t)(HIDWORD(v581) - (int)v581) << 6) + 15) & 8) == 0)
            || (uint64_t v585 = v584, v586 = v583 + ((uint64_t)v584 << 6),
                             unint64_t v314 = *(void *)v586,
                             *(void *)v586 >= v1236 + v1235))
          {
            char v363 = apr_palloc(p, 0x40uLL);
            *(_DWORD *)char v363 = 68;
            *((_DWORD *)v363 + 1) = v580;
            v363[1] = v1133;
            uint64_t v444 = v363 + 1;
            v363[2] = v1166;
            v363[3] = v1179;
            v363[4] = 0LL;
            v363[5] = v1195;
            v363[6] = v1225;
            *((_DWORD *)v363 + 14) = v582;
            *((_BYTE *)v363 + 60) = v1148;
            *(_WORD *)((char *)v363 + 61) = __src[0];
            *((_BYTE *)v363 + 63) = BYTE2(__src[0]);
LABEL_778:
            uint64_t v599 = *find_entry((uint64_t)ht, v444, 8uLL, 0LL);
            if (v599) {
              uint64_t v599 = *(void *)(v599 + 32);
            }
            v363[4] = v599;
            char v365 = ht;
            uint64_t v366 = v444;
LABEL_781:
            apr_hash_set(v365, v366, 8LL, v363);
            v363[3] = -1LL;
            goto LABEL_1211;
          }

          uint64_t v588 = (int *)(v586 + 8);
          int v587 = *(_DWORD *)(v586 + 8);
          if (v587 == -15411)
          {
            if (v1235 > v314)
            {
              uint64_t v589 = v1239;
              break;
            }

            __int128 v590 = apr_palloc(p, 0x40uLL);
            *(_DWORD *)__int128 v590 = 68;
            *((_DWORD *)v590 + 1) = v580;
            v590[1] = v1133;
            v590[2] = v1166;
            v590[3] = v1179;
            v590[4] = 0LL;
            v590[5] = v1195;
            v590[6] = v1225;
            *((_DWORD *)v590 + 14) = v582;
            *((_BYTE *)v590 + 60) = v1148;
            *(_WORD *)((char *)v590 + 61) = __src[0];
            *((_BYTE *)v590 + 63) = BYTE2(__src[0]);
            uint64_t v591 = *find_entry((uint64_t)ht, (_BYTE *)v590 + 8, 8uLL, 0LL);
            if (v591) {
              uint64_t v591 = *(void *)(v591 + 32);
            }
            v590[4] = v591;
            apr_hash_set(ht, v590 + 1, 8LL, v590);
            v590[3] = v314;
            int v587 = *v588;
            uint64_t v583 = v134 + 64;
          }

          else if (v587 == -15801)
          {
            if (v1235 > v314) {
              goto LABEL_1211;
            }
            v966 = (char *)apr_palloc(p, 0x40uLL);
            *(_DWORD *)v966 = 68;
            *((_DWORD *)v966 + 1) = v580;
            *((void *)v966 + 1) = v1133;
            *((void *)v966 + 2) = v1166;
            *((void *)v966 + 3) = v1179;
            *((void *)v966 + 4) = 0LL;
            *((void *)v966 + 5) = v1195;
            *((void *)v966 + 6) = v1225;
            *((_DWORD *)v966 + 14) = v582;
            v966[60] = v1148;
            *(_WORD *)(v966 + 61) = __src[0];
            v966[63] = BYTE2(__src[0]);
            uint64_t v987 = *find_entry((uint64_t)ht, v966 + 8, 8uLL, 0LL);
            if (v987) {
              uint64_t v987 = *(void *)(v987 + 32);
            }
            *((void *)v966 + 4) = v987;
            v969 = ht;
            v970 = v966 + 8;
            goto LABEL_1264;
          }

          if (v587 == -15801)
          {
            uint64_t v1179 = *(void *)v586;
            goto LABEL_775;
          }

          uint64_t v589 = v1239;
          if (v587 != -15411)
          {
            if (v587 == -15793)
            {
              uint64_t v592 = GTTraceFunc_argumentBytesWithMap( (void *)v586,  *(unsigned __int8 *)(v583 + (v585 << 6) + 13),  v1239);
              unint64_t v1166 = *(void *)v586;
              int v580 = *v588;
              uint64_t v1133 = *((void *)v592 + 1);
              uint64_t v1195 = *(void *)v592;
              uint64_t v593 = GTTraceFunc_argumentBytesWithMap((void *)v586, v592[16], v589);
              uint64_t v583 = v134 + 64;
              int v582 = *((_DWORD *)v593 + 6);
              v1225 = v593;
              char v1148 = v593[34];
            }

LABEL_775:
            unsigned int v596 = atomic_load((unsigned int *)(v134 + 4));
            int v597 = v581 + (v596 >> 6);
            uint64_t v598 = (HIDWORD(v581) + 1);
            unint64_t v581 = (v598 << 32) | v581;
            if ((_DWORD)v598 == v597 - 1)
            {
              unint64_t v581 = (v598 << 32) | v598;
              uint64_t v134 = *(void *)(v134 + 40);
              continue;
            }

            goto LABEL_758;
          }

          break;
        }

        v594 = GTTraceFunc_argumentBytesWithMap((void *)v586, *(unsigned __int8 *)(v583 + (v585 << 6) + 13), v589);
        v595 = GTTraceFunc_argumentBytesWithMap((void *)v586, v594[8], v589);
        uint64_t v583 = v134 + 64;
        v1225 = v595;
        goto LABEL_775;
      case 25:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        ++DWORD1(v1246);
        uint64_t v138 = *(void *)(v37 + 32);
        if (v138)
        {
          unsigned int v139 = 0;
          while (1)
          {
            unsigned int v140 = atomic_load((unsigned int *)(v138 + 4));
            uint64_t v141 = v139 + (v140 >> 6) - 1;
            uint64_t v138 = *(void *)(v138 + 40);
            unsigned int v139 = v141;
            if (!v138)
            {
              unsigned int v139 = v141;
              goto LABEL_784;
            }
          }
        }

        else
        {
          unsigned int v139 = 0;
        }

        uint64_t v141 = 0LL;
LABEL_784:
        int v600 = 0;
        uint64_t v601 = 0LL;
        unint64_t v1196 = 0LL;
        uint64_t v1212 = 0LL;
        v602 = 0LL;
        int v603 = 0;
        unint64_t v604 = v139 | (unint64_t)(v141 << 32);
        while (2)
        {
          uint64_t v605 = v138 + 64;
LABEL_786:
          if (v138)
          {
            int v606 = HIDWORD(v604) - v604;
            if ((*(_BYTE *)(v605 + ((uint64_t)(HIDWORD(v604) - (int)v604) << 6) + 15) & 8) != 0)
            {
              uint64_t v607 = v605 + ((uint64_t)v606 << 6);
              unint64_t v416 = *(void *)v607;
              if (*(void *)v607 < v1236 + v1235)
              {
                int v608 = *(_DWORD *)(v607 + 8);
                if (v608 == -15900)
                {
                  uint64_t v609 = v1239;
                  v610 = GTTraceFunc_argumentBytesWithMap( (void *)v607,  *(unsigned __int8 *)(v605 + ((uint64_t)v606 << 6) + 13),  v1239);
                  int v600 = *(_DWORD *)(v607 + 8);
                  uint64_t v601 = *((void *)v610 + 1);
                  unint64_t v1196 = *(void *)v607;
                  uint64_t v1212 = *(void *)v610;
                  v602 = GTTraceFunc_argumentBytesWithMap((void *)v607, v610[24], v609);
                  int v603 = *((_DWORD *)v610 + 4);
                }

                else if (v608 == -15769)
                {
                  int v14 = v1220;
                  if (v1235 > v416) {
                    goto LABEL_1211;
                  }
                  int v988 = v603;
                  v989 = apr_palloc(p, 0x40uLL);
                  *(_DWORD *)v989 = 73;
                  *((_DWORD *)v989 + 1) = v600;
                  v989[1] = v601;
                  v990 = v989 + 1;
                  v989[2] = v1196;
                  v989[3] = -1LL;
                  v989[4] = 0LL;
                  v989[5] = v1212;
                  v989[6] = v602;
                  *((_DWORD *)v989 + 14) = v988;
                  *((_DWORD *)v989 + 15) = 0;
                  goto LABEL_1267;
                }

                int v14 = v1220;
                unsigned int v611 = atomic_load((unsigned int *)(v138 + 4));
                int v612 = v604 + (v611 >> 6);
                uint64_t v613 = (HIDWORD(v604) + 1);
                unint64_t v604 = (v613 << 32) | v604;
                if ((_DWORD)v613 == v612 - 1)
                {
                  unint64_t v604 = (v613 << 32) | v613;
                  uint64_t v138 = *(void *)(v138 + 40);
                  continue;
                }

                goto LABEL_786;
              }
            }
          }

          break;
        }

        int v614 = v603;
        unint64_t v189 = apr_palloc(p, 0x40uLL);
        *(_DWORD *)unint64_t v189 = 73;
        *((_DWORD *)v189 + 1) = v600;
        v189[1] = v601;
        uint64_t v190 = v189 + 1;
        unint64_t v425 = -1LL;
        v189[2] = v1196;
        v189[3] = -1LL;
        v189[4] = 0LL;
        v189[5] = v1212;
        v189[6] = v602;
        *((_DWORD *)v189 + 14) = v614;
        *((_DWORD *)v189 + 15) = 0;
        goto LABEL_1068;
      case 26:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        ++DWORD2(v1246);
        uint64_t v142 = *(void *)(v37 + 32);
        if (v142)
        {
          unsigned int v143 = 0;
          while (1)
          {
            unsigned int v144 = atomic_load((unsigned int *)(v142 + 4));
            uint64_t v145 = v143 + (v144 >> 6) - 1;
            uint64_t v142 = *(void *)(v142 + 40);
            unsigned int v143 = v145;
            if (!v142)
            {
              unsigned int v143 = v145;
              goto LABEL_798;
            }
          }
        }

        else
        {
          unsigned int v143 = 0;
        }

        uint64_t v145 = 0LL;
LABEL_798:
        int v615 = 0;
        uint64_t v616 = 0LL;
        uint64_t v617 = 0LL;
        uint64_t v618 = 0LL;
        uint64_t v619 = 0LL;
        v620 = 0LL;
        v621 = 0LL;
        unint64_t v622 = 0LL;
        int v1213 = 0;
        unint64_t v1180 = 0LL;
        int v1197 = 0;
        LODWORD(v116memset(v56, 0, 7) = 0;
        unint64_t v623 = v143 | (unint64_t)(v145 << 32);
        uint64_t v624 = 0LL;
        uint64_t v625 = 0LL;
        while (2)
        {
          uint64_t v626 = v142 + 64;
LABEL_800:
          if (v142
            && (int v627 = HIDWORD(v623) - v623,
                (*(_BYTE *)(v626 + ((uint64_t)(HIDWORD(v623) - (int)v623) << 6) + 15) & 8) != 0)
            && (v628 = (uint64_t *)(v626 + ((uint64_t)v627 << 6)), unint64_t v197 = *v628, *v628 < v1236 + v1235))
          {
            v630 = (unsigned int *)(v628 + 1);
            int v629 = *((_DWORD *)v628 + 2);
            if (v629 != -6139)
            {
              uint64_t v631 = v1239;
              if (v629 <= -6123)
              {
                switch(v629)
                {
                  case -6143:
                    v635 = GTTraceFunc_argumentBytesWithMap( v628,  *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13),  v1239);
                    uint64_t v1149 = *v628;
                    uint64_t v636 = *v630;
                    uint64_t v638 = *(void *)v635;
                    uint64_t v637 = *((void *)v635 + 1);
                    v639 = GTTraceFunc_argumentBytesWithMap(v628, v635[16], v631);
                    unsigned int v640 = v635[24];
                    v620 = v639;
                    v641 = GTTraceFunc_argumentBytesWithMap(v628, v640, v631);
                    int v615 = v636;
                    uint64_t v619 = v638;
                    uint64_t v616 = v637;
                    uint64_t v617 = v1149;
                    uint64_t v626 = v142 + 64;
                    v621 = v641;
                    unint64_t v622 = (unint64_t)v641 >> 32;
                    uint64_t v618 = v636;
                    break;
                  case -6141:
LABEL_812:
                    v648 = GTTraceFunc_argumentBytesWithMap( v628,  *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13),  v1239);
                    uint64_t v626 = v142 + 64;
                    uint64_t v617 = *v628;
                    uint64_t v618 = *v630;
                    uint64_t v619 = *(void *)v648;
                    uint64_t v616 = *((void *)v648 + 1);
                    v620 = (char *)*((void *)v648 + 2);
                    v621 = (char *)*((unsigned int *)v648 + 6);
                    unint64_t v622 = *((unsigned int *)v648 + 7);
                    LODWORD(v116memset(v56, 0, 7) = *((_DWORD *)v648 + 9);
                    int v1213 = *((_DWORD *)v648 + 8);
                    int v1197 = *((_DWORD *)v648 + 8) >> 8;
                    uint64_t v624 = *((void *)v648 + 5);
                    goto LABEL_821;
                  case -6134:
                    v659 = GTTraceFunc_argumentBytesWithMap( v628,  *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13),  v1239);
                    uint64_t v626 = v142 + 64;
                    uint64_t v617 = *v628;
                    uint64_t v618 = *v630;
                    uint64_t v619 = *(void *)v659;
                    uint64_t v616 = *((void *)v659 + 1);
                    unint64_t v1180 = v1180 & 0xFFFFFFFFFFFFFF00LL | v659[16];
                    v620 = (char *)*((void *)v659 + 3);
                    v621 = (char *)*((unsigned int *)v659 + 8);
                    unint64_t v622 = *((unsigned int *)v659 + 9);
                    uint64_t v624 = *((void *)v659 + 5);
                    uint64_t v625 = *((void *)v659 + 6);
                    goto LABEL_821;
                  case -6133:
                    v660 = GTTraceFunc_argumentBytesWithMap( v628,  *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13),  v1239);
                    uint64_t v626 = v142 + 64;
                    uint64_t v617 = *v628;
                    uint64_t v618 = *v630;
                    uint64_t v619 = *(void *)v660;
                    uint64_t v616 = *((void *)v660 + 1);
                    v621 = (char *)*((unsigned int *)v660 + 5);
                    v620 = (char *)*((int *)v660 + 4);
                    unint64_t v622 = *((unsigned int *)v660 + 6);
                    int v1213 = *((_DWORD *)v660 + 7);
                    int v1197 = *((_DWORD *)v660 + 7) >> 8;
                    goto LABEL_821;
                  case -6131:
                    v661 = GTTraceFunc_argumentBytesWithMap( v628,  *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13),  v1239);
                    uint64_t v1135 = *v630;
                    uint64_t v1152 = *v628;
                    uint64_t v663 = *(void *)v661;
                    uint64_t v662 = *((void *)v661 + 1);
                    v664 = GTTraceFunc_argumentBytesWithMap(v628, v661[16], v631);
                    v657 = GTTraceFunc_argumentBytesWithMap(v628, v661[24], v631);
                    uint64_t v619 = v663;
                    uint64_t v618 = v1135;
                    uint64_t v617 = v1152;
                    uint64_t v616 = v662;
                    uint64_t v626 = v142 + 64;
                    unint64_t v658 = (unint64_t)v657 >> 32;
                    int v665 = v661[32];
                    v620 = v664;
                    int v1213 = v665;
LABEL_819:
                    int v615 = v618;
                    v621 = v657;
                    unint64_t v622 = v658;
                    break;
                  case -6129:
                    v666 = GTTraceFunc_argumentBytesWithMap( v628,  *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13),  v1239);
                    uint64_t v1136 = *v630;
                    uint64_t v1153 = *v628;
                    uint64_t v668 = *(void *)v666;
                    uint64_t v667 = *((void *)v666 + 1);
                    v620 = (char *)*((int *)v666 + 4);
                    v669 = GTTraceFunc_argumentBytesWithMap(v628, v666[24], v631);
                    uint64_t v619 = v668;
                    uint64_t v616 = v667;
                    uint64_t v626 = v142 + 64;
                    int v1213 = v669;
                    int v1197 = v669 >> 8;
                    unint64_t v1167 = (unint64_t)v669 >> 32;
                    v621 = (char *)*((unsigned int *)v666 + 8);
                    unint64_t v622 = *((unsigned int *)v666 + 9);
                    uint64_t v618 = v1136;
                    uint64_t v617 = v1153;
                    goto LABEL_821;
                  default:
                    break;
                }
              }

              else
              {
                switch(v629)
                {
                  case -6122:
                    v649 = GTTraceFunc_argumentBytesWithMap( v628,  *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13),  v1239);
                    uint64_t v626 = v142 + 64;
                    uint64_t v617 = *v628;
                    uint64_t v618 = *v630;
                    uint64_t v619 = *(void *)v649;
                    uint64_t v616 = *((void *)v649 + 1);
                    unint64_t v1180 = v1180 & 0xFFFFFFFFFFFF0000LL | v649[16] | ((unint64_t)*((_DWORD *)v649 + 5) << 8);
                    v620 = (char *)*((void *)v649 + 3);
                    v621 = (char *)*((unsigned int *)v649 + 8);
                    unint64_t v622 = *((unsigned int *)v649 + 9);
                    LODWORD(v116memset(v56, 0, 7) = *((_DWORD *)v649 + 11);
                    int v1213 = *((_DWORD *)v649 + 10);
                    int v1197 = *((_DWORD *)v649 + 10) >> 8;
                    uint64_t v624 = *((void *)v649 + 6);
                    uint64_t v625 = *((void *)v649 + 7);
                    break;
                  case -6121:
                  case -6120:
                  case -6118:
                  case -6117:
                  case -6115:
                  case -6114:
                  case -6113:
                  case -6112:
                    goto LABEL_822;
                  case -6119:
                  case -6110:
                    unint64_t v632 = v622;
                    v633 = v621;
                    v634 = GTTraceFunc_argumentBytesWithMap( v628,  *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13),  v1239);
                    unint64_t v622 = v632;
                    v621 = v633;
                    uint64_t v626 = v142 + 64;
                    uint64_t v617 = *v628;
                    uint64_t v618 = *v630;
                    uint64_t v619 = *(void *)v634;
                    uint64_t v616 = *((void *)v634 + 1);
                    break;
                  case -6116:
                    v650 = GTTraceFunc_argumentBytesWithMap( v628,  *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13),  v1239);
                    uint64_t v626 = v142 + 64;
                    uint64_t v617 = *v628;
                    uint64_t v618 = *v630;
                    uint64_t v619 = *(void *)v650;
                    uint64_t v616 = *((void *)v650 + 1);
                    v620 = (char *)*((void *)v650 + 2);
                    v621 = (char *)*((unsigned int *)v650 + 6);
                    unint64_t v622 = *((unsigned int *)v650 + 7);
                    int v1213 = *((_DWORD *)v650 + 8);
                    int v1197 = *((_DWORD *)v650 + 8) >> 8;
                    uint64_t v624 = *((void *)v650 + 5);
                    uint64_t v625 = *((void *)v650 + 6);
                    LODWORD(v116memset(v56, 0, 7) = *((_DWORD *)v650 + 9);
                    unint64_t v1180 = *((void *)v650 + 7);
                    break;
                  case -6111:
                    v651 = GTTraceFunc_argumentBytesWithMap( v628,  *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13),  v1239);
                    uint64_t v1151 = *v628;
                    uint64_t v652 = *v630;
                    uint64_t v654 = *(void *)v651;
                    uint64_t v653 = *((void *)v651 + 1);
                    v655 = GTTraceFunc_argumentBytesWithMap(v628, v651[16], v631);
                    unsigned int v656 = v651[24];
                    v620 = v655;
                    v657 = GTTraceFunc_argumentBytesWithMap(v628, v656, v631);
                    uint64_t v619 = v654;
                    uint64_t v618 = v652;
                    uint64_t v616 = v653;
                    uint64_t v617 = v1151;
                    uint64_t v626 = v142 + 64;
                    unint64_t v658 = (unint64_t)v657 >> 32;
                    goto LABEL_819;
                  case -6109:
                    goto LABEL_812;
                  default:
                    if (v629 != -6096 && v629 != -6095) {
                      goto LABEL_822;
                    }
                    v1134 = v621;
                    unint64_t v1150 = v622;
                    v642 = GTTraceFunc_argumentBytesWithMap( v628,  *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13),  v1239);
                    uint64_t v643 = *v628;
                    uint64_t v644 = *v630;
                    uint64_t v646 = *(void *)v642;
                    uint64_t v645 = *((void *)v642 + 1);
                    v647 = GTTraceFunc_argumentBytesWithMap(v628, v642[16], v631);
                    v621 = v1134;
                    unint64_t v622 = v1150;
                    uint64_t v619 = v646;
                    uint64_t v618 = v644;
                    uint64_t v616 = v645;
                    uint64_t v617 = v643;
                    uint64_t v626 = v142 + 64;
                    v620 = v647;
                    break;
                }

LABEL_821:
                int v615 = v618;
              }

LABEL_822:
              unsigned int v670 = atomic_load((unsigned int *)(v142 + 4));
              int v671 = v623 + (v670 >> 6);
              uint64_t v672 = (HIDWORD(v623) + 1);
              unint64_t v623 = (v672 << 32) | v623;
              if ((_DWORD)v672 == v671 - 1)
              {
                unint64_t v623 = (v672 << 32) | v672;
                uint64_t v142 = *(void *)(v142 + 40);
                continue;
              }

              goto LABEL_800;
            }

            int v1155 = v622;
            if (v1235 > v197) {
              goto LABEL_1211;
            }
            int v954 = v615;
            int v955 = (int)v621;
            uint64_t v956 = v619;
            uint64_t v957 = v616;
            uint64_t v958 = v617;
            v679 = (char *)apr_palloc(p, 0x68uLL);
            uint64_t v210 = v679;
            *(_DWORD *)v679 = 15;
            *((_DWORD *)v679 + 1) = v954;
            *((void *)v679 + 1) = v957;
            unint64_t v211 = v679 + 8;
            *((void *)v679 + 2) = v958;
            *((void *)v679 + 3) = -1LL;
            *((void *)v679 + 4) = 0LL;
            *((void *)v679 + 5) = v618;
            *((void *)v679 + 6) = v956;
            *((void *)v679 + memset(v56, 0, 7) = v620;
            *((_DWORD *)v679 + 16) = v955;
            *((_DWORD *)v679 + 1memset(v56, 0, 7) = v1155;
          }

          else
          {
            int v673 = v622;
            uint64_t v674 = v617;
            uint64_t v675 = v616;
            uint64_t v676 = v619;
            int v677 = (int)v621;
            int v678 = v615;
            v679 = (char *)apr_palloc(p, 0x68uLL);
            uint64_t v210 = v679;
            *(_DWORD *)v679 = 15;
            *((_DWORD *)v679 + 1) = v678;
            *((void *)v679 + 1) = v675;
            unint64_t v211 = v679 + 8;
            unint64_t v197 = -1LL;
            *((void *)v679 + 2) = v674;
            *((void *)v679 + 3) = -1LL;
            *((void *)v679 + 4) = 0LL;
            *((void *)v679 + 5) = v618;
            *((void *)v679 + 6) = v676;
            *((void *)v679 + memset(v56, 0, 7) = v620;
            *((_DWORD *)v679 + 16) = v677;
            *((_DWORD *)v679 + 1memset(v56, 0, 7) = v673;
          }

          break;
        }

        *((_DWORD *)v679 + 18) = v1213 | (v1197 << 8);
        *((_DWORD *)v679 + 19) = v1167;
        *((void *)v679 + 10) = v624;
        *((void *)v679 + 11) = v625;
        *((void *)v679 + 12) = v1180;
LABEL_826:
        uint64_t v680 = *find_entry((uint64_t)ht, v211, 8uLL, 0LL);
        if (v680) {
          uint64_t v680 = *(void *)(v680 + 32);
        }
        v210[4] = v680;
        apr_hash_set(ht, v211, 8LL, v210);
        v210[3] = v197;
        goto LABEL_1211;
      case 27:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        BYTE2(__src[0]) = 0;
        LOWORD(__src[0]) = 0;
        ++HIDWORD(v1246);
        uint64_t v146 = *(void *)(v37 + 32);
        if (v146)
        {
          unsigned int v147 = 0;
          while (1)
          {
            unsigned int v148 = atomic_load((unsigned int *)(v146 + 4));
            uint64_t v149 = v147 + (v148 >> 6) - 1;
            uint64_t v146 = *(void *)(v146 + 40);
            unsigned int v147 = v149;
            if (!v146)
            {
              unsigned int v147 = v149;
              goto LABEL_831;
            }
          }
        }

        else
        {
          unsigned int v147 = 0;
        }

        uint64_t v149 = 0LL;
LABEL_831:
        int v1181 = 0;
        uint64_t v1154 = 0LL;
        uint64_t v1168 = 0LL;
        unint64_t v1198 = 0LL;
        v1214 = 0LL;
        uint64_t v1079 = 0LL;
        v1082 = 0LL;
        v1116 = 0LL;
        v1089 = 0LL;
        v1093 = 0LL;
        v1137 = 0LL;
        v1102 = 0LL;
        v1085 = 0LL;
        v1069 = 0LL;
        __int16 v1097 = 0;
        char v1071 = 0;
        char v1073 = 0;
        char v1109 = 0;
        unint64_t v681 = v147 | (unint64_t)(v149 << 32);
        uint64_t v1076 = -1LL;
        while (2)
        {
          uint64_t v682 = v146 + 64;
LABEL_833:
          if (!v146
            || (int v683 = HIDWORD(v681) - v681,
                (*(_BYTE *)(v682 + ((uint64_t)(HIDWORD(v681) - (int)v681) << 6) + 15) & 8) == 0)
            || (uint64_t v684 = v683, v685 = v682 + ((uint64_t)v683 << 6),
                             unint64_t v394 = *(void *)v685,
                             *(void *)v685 >= v1236 + v1235))
          {
            char v306 = apr_palloc(p, 0x88uLL);
            v306[1] = v1154;
            uint64_t v307 = v306 + 1;
            *(_DWORD *)char v306 = 43;
            *((_DWORD *)v306 + 1) = v1181;
            v306[2] = v1198;
            v306[3] = v1076;
            v306[4] = 0LL;
            v306[5] = v1168;
            v306[6] = v1079;
            v306[7] = v1116;
            v306[8] = v1214;
            v306[9] = v1093;
            v306[10] = v1137;
            v306[11] = v1102;
            v306[12] = v1085;
            v306[13] = v1069;
            v306[14] = v1089;
            v306[15] = v1082;
            *((_WORD *)v306 + 64) = v1097;
            *((_BYTE *)v306 + 130) = v1071;
            *((_BYTE *)v306 + 131) = v1073;
            *((_BYTE *)v306 + 132) = v1109;
            *((_BYTE *)v306 + 135) = BYTE2(__src[0]);
            *(_WORD *)((char *)v306 + 133) = __src[0];
LABEL_922:
            uint64_t v728 = *find_entry((uint64_t)ht, v307, 8uLL, 0LL);
            if (v728) {
              uint64_t v728 = *(void *)(v728 + 32);
            }
            v306[4] = v728;
            apr_hash_set(ht, v307, 8LL, v306);
            v306[3] = -1LL;
            goto LABEL_1211;
          }

          v687 = (int *)(v685 + 8);
          int v686 = *(_DWORD *)(v685 + 8);
          if (v686 == -16123 || v686 == -10157)
          {
            if (v1235 <= v394)
            {
              v689 = apr_palloc(p, 0x88uLL);
              v689[1] = v1154;
              *(_DWORD *)v689 = 43;
              *((_DWORD *)v689 + 1) = v1181;
              v689[2] = v1198;
              v689[3] = v1076;
              v689[4] = 0LL;
              v689[5] = v1168;
              v689[6] = v1079;
              v689[7] = v1116;
              v689[8] = v1214;
              v689[9] = v1093;
              v689[10] = v1137;
              v689[11] = v1102;
              v689[12] = v1085;
              v689[13] = v1069;
              v689[14] = v1089;
              v689[15] = v1082;
              *((_WORD *)v689 + 64) = v1097;
              *((_BYTE *)v689 + 130) = v1071;
              *((_BYTE *)v689 + 131) = v1073;
              *((_BYTE *)v689 + 132) = v1109;
              *((_BYTE *)v689 + 135) = BYTE2(__src[0]);
              *(_WORD *)((char *)v689 + 133) = __src[0];
              uint64_t v690 = *find_entry((uint64_t)ht, (_BYTE *)v689 + 8, 8uLL, 0LL);
              if (v690) {
                uint64_t v690 = *(void *)(v690 + 32);
              }
              v689[4] = v690;
              apr_hash_set(ht, v689 + 1, 8LL, v689);
              v689[3] = v394;
              int v686 = *v687;
            }
          }

          else if (v686 == -16293)
          {
            v974 = apr_palloc(p, 0x88uLL);
            v974[1] = v1154;
            v975 = v974 + 1;
            *(_DWORD *)v974 = 43;
            *((_DWORD *)v974 + 1) = v1181;
            v974[2] = v1198;
            v974[3] = v1076;
            v974[4] = 0LL;
            v974[5] = v1168;
            v974[6] = v1079;
            v974[7] = v1116;
            v974[8] = v1214;
            v974[9] = v1093;
            v974[10] = v1137;
            v974[11] = v1102;
            v974[12] = v1085;
            v974[13] = v1069;
            v974[14] = v1089;
            v974[15] = v1082;
            *((_WORD *)v974 + 64) = v1097;
            *((_BYTE *)v974 + 130) = v1071;
            *((_BYTE *)v974 + 131) = v1073;
            *((_BYTE *)v974 + 132) = v1109;
            *((_BYTE *)v974 + 135) = BYTE2(__src[0]);
            *(_WORD *)((char *)v974 + 133) = __src[0];
LABEL_1282:
            uint64_t v996 = *find_entry((uint64_t)ht, v975, 8uLL, 0LL);
            if (v996) {
              uint64_t v996 = *(void *)(v996 + 32);
            }
            v974[4] = v996;
            apr_hash_set(ht, v975, 8LL, v974);
            v974[3] = v394;
            goto LABEL_1211;
          }

          uint64_t v691 = v1239;
          if (v686 <= -15731)
          {
            if (v686 <= -16083)
            {
              if (v686 <= -16124)
              {
                if (v686 == -16293)
                {
                  uint64_t v1076 = *(void *)v685;
                }

                else if (v686 == -16290)
                {
                  uint64_t v706 = v682 + (v684 << 6);
                  v707 = GTTraceFunc_argumentBytesWithMap((void *)v685, *(unsigned __int8 *)(v706 + 13), v1239);
                  unint64_t v1198 = *(void *)v685;
                  int v1181 = *v687;
                  uint64_t v1154 = *((void *)v707 + 1);
                  uint64_t v1168 = *(void *)v707;
                  v708 = GTTraceFunc_argumentBytesWithMap((void *)v685, *(unsigned __int8 *)(v706 + 14), v691);
                  v1137 = v708;
                  if (v708) {
                    v1214 = *(char **)v708;
                  }
                  else {
                    v1214 = 0LL;
                  }
                  int v713 = HIDWORD(v681);
                  v1116 = GTTraceFunc_argumentBytesWithMap((void *)v685, v707[16], v691);
                  goto LABEL_918;
                }
              }

              else if (v686 == -16123)
              {
                v714 = GTTraceFunc_argumentBytesWithMap( (void *)v685,  *(unsigned __int8 *)(v682 + (v684 << 6) + 13),  v1239);
                v1214 = GTTraceFunc_argumentBytesWithMap((void *)v685, v714[8], v691);
              }

              else if (v686 == -16107 || v686 == -16106)
              {
                uint64_t v692 = v682 + (v684 << 6);
                v693 = GTTraceFunc_argumentBytesWithMap((void *)v685, *(unsigned __int8 *)(v692 + 13), v1239);
                unint64_t v1198 = *(void *)v685;
                int v1181 = *v687;
                uint64_t v1154 = *((void *)v693 + 1);
                uint64_t v1168 = *(void *)v693;
                v694 = GTTraceFunc_argumentBytesWithMap((void *)v685, *(unsigned __int8 *)(v692 + 14), v691);
                v1137 = v694;
                if (v694) {
                  v1214 = *(char **)v694;
                }
                else {
                  v1214 = 0LL;
                }
                int v713 = HIDWORD(v681);
                v1116 = GTTraceFunc_argumentBytesWithMap((void *)v685, v693[24], v691);
                v1093 = GTTraceFunc_argumentBytesWithMap((void *)v685, v693[25], v691);
                goto LABEL_918;
              }

LABEL_898:
              int v713 = HIDWORD(v681);
              goto LABEL_919;
            }

            if (v686 <= -16039)
            {
              if (v686 == -16082 || v686 == -16081)
              {
                uint64_t v709 = v682 + (v684 << 6);
                v710 = GTTraceFunc_argumentBytesWithMap((void *)v685, *(unsigned __int8 *)(v709 + 13), v1239);
                unint64_t v1198 = *(void *)v685;
                int v1181 = *v687;
                uint64_t v1154 = *((void *)v710 + 1);
                uint64_t v1168 = *(void *)v710;
                v711 = GTTraceFunc_argumentBytesWithMap((void *)v685, *(unsigned __int8 *)(v709 + 14), v691);
                v1137 = v711;
                if (v711) {
                  v1214 = *(char **)v711;
                }
                else {
                  v1214 = 0LL;
                }
                int v713 = HIDWORD(v681);
                v1116 = GTTraceFunc_argumentBytesWithMap((void *)v685, v710[32], v691);
                v1093 = GTTraceFunc_argumentBytesWithMap((void *)v685, v710[33], v691);
                uint64_t v1079 = *((void *)v710 + 2);
                goto LABEL_918;
              }

              goto LABEL_898;
            }

            if (v686 == -16038)
            {
              uint64_t v715 = v682 + (v684 << 6);
              v716 = GTTraceFunc_argumentBytesWithMap((void *)v685, *(unsigned __int8 *)(v715 + 13), v1239);
              unint64_t v1198 = *(void *)v685;
              int v1181 = *v687;
              uint64_t v1154 = *((void *)v716 + 1);
              uint64_t v1168 = *(void *)v716;
              v717 = GTTraceFunc_argumentBytesWithMap((void *)v685, *(unsigned __int8 *)(v715 + 14), v691);
              v1137 = v717;
              if (v717) {
                v1214 = *(char **)v717;
              }
              else {
                v1214 = 0LL;
              }
              int v713 = HIDWORD(v681);
              v1116 = GTTraceFunc_argumentBytesWithMap((void *)v685, v716[16], v691);
              char v1073 = 1;
              goto LABEL_918;
            }

            if (v686 == -15830)
            {
              uint64_t v718 = v682 + (v684 << 6);
              v719 = GTTraceFunc_argumentBytesWithMap((void *)v685, *(unsigned __int8 *)(v718 + 13), v1239);
              unint64_t v1198 = *(void *)v685;
              int v1181 = *v687;
              uint64_t v1154 = *((void *)v719 + 1);
              uint64_t v1168 = *(void *)v719;
              v720 = GTTraceFunc_argumentBytesWithMap((void *)v685, *(unsigned __int8 *)(v718 + 14), v691);
              v1137 = v720;
              if (v720) {
                v1214 = *(char **)v720;
              }
              else {
                v1214 = 0LL;
              }
              int v713 = HIDWORD(v681);
              v1116 = GTTraceFunc_argumentBytesWithMap((void *)v685, v719[18], v691);
              v1069 = GTTraceFunc_argumentBytesWithMap((void *)v685, v719[16], v691);
              char v1071 = v719[17];
              goto LABEL_891;
            }

            if (v686 != -15731) {
              goto LABEL_898;
            }
LABEL_865:
            uint64_t v695 = v682 + (v684 << 6);
            v696 = GTTraceFunc_argumentBytesWithMap((void *)v685, *(unsigned __int8 *)(v695 + 13), v1239);
            unint64_t v1198 = *(void *)v685;
            int v1181 = *v687;
            uint64_t v1154 = *((void *)v696 + 1);
            uint64_t v1168 = *(void *)v696;
            v697 = GTTraceFunc_argumentBytesWithMap((void *)v685, *(unsigned __int8 *)(v695 + 14), v691);
            v1137 = v697;
            if (v697) {
              v1214 = *(char **)v697;
            }
            else {
              v1214 = 0LL;
            }
            int v713 = HIDWORD(v681);
            v1102 = GTTraceFunc_argumentBytesWithMap((void *)v685, v696[24], v691);
LABEL_890:
            __int16 v1097 = *((_WORD *)v696 + 8);
LABEL_891:
            char v1109 = 1;
LABEL_918:
            uint64_t v682 = v146 + 64;
LABEL_919:
            unsigned int v725 = atomic_load((unsigned int *)(v146 + 4));
            int v726 = v681 + (v725 >> 6);
            uint64_t v727 = (v713 + 1);
            unint64_t v681 = (v727 << 32) | v681;
            if ((_DWORD)v727 == v726 - 1)
            {
              unint64_t v681 = (v727 << 32) | v727;
              uint64_t v146 = *(void *)(v146 + 40);
              continue;
            }

            goto LABEL_833;
          }

          break;
        }

        if (v686 > -15551)
        {
          switch(v686)
          {
            case -15430:
            case -15428:
              goto LABEL_865;
            case -15429:
            case -15427:
              goto LABEL_867;
            default:
              if (v686 == -15550)
              {
                uint64_t v721 = v682 + (v684 << 6);
                v722 = GTTraceFunc_argumentBytesWithMap((void *)v685, *(unsigned __int8 *)(v721 + 13), v1239);
                unint64_t v1198 = *(void *)v685;
                int v1181 = *v687;
                uint64_t v1154 = *((void *)v722 + 1);
                uint64_t v1168 = *(void *)v722;
                v723 = GTTraceFunc_argumentBytesWithMap((void *)v685, *(unsigned __int8 *)(v721 + 14), v691);
                v1137 = v723;
                if (v723) {
                  v1214 = *(char **)v723;
                }
                else {
                  v1214 = 0LL;
                }
                int v713 = HIDWORD(v681);
                unsigned int v724 = v722[24];
                goto LABEL_917;
              }

              if (v686 == -10157)
              {
                v712 = GTTraceFunc_argumentBytesWithMap( (void *)v685,  *(unsigned __int8 *)(v682 + (v684 << 6) + 13),  v1239);
                v1089 = GTTraceFunc_argumentBytesWithMap((void *)v685, v712[16], v691);
              }

              break;
          }

          goto LABEL_898;
        }

        if (v686 > -15609)
        {
          if (v686 != -15608)
          {
            if (v686 == -15551)
            {
              uint64_t v700 = v682 + (v684 << 6);
              v701 = GTTraceFunc_argumentBytesWithMap((void *)v685, *(unsigned __int8 *)(v700 + 13), v1239);
              unint64_t v1198 = *(void *)v685;
              int v1181 = *v687;
              uint64_t v1154 = *((void *)v701 + 1);
              uint64_t v1168 = *(void *)v701;
              v702 = GTTraceFunc_argumentBytesWithMap((void *)v685, *(unsigned __int8 *)(v700 + 14), v691);
              v1137 = v702;
              if (v702) {
                v1214 = *(char **)v702;
              }
              else {
                v1214 = 0LL;
              }
              int v713 = HIDWORD(v681);
              unsigned int v724 = v701[32];
LABEL_917:
              v1082 = GTTraceFunc_argumentBytesWithMap((void *)v685, v724, v691);
              goto LABEL_918;
            }

            goto LABEL_898;
          }
        }

        else
        {
          if (v686 == -15730)
          {
LABEL_867:
            uint64_t v698 = v682 + (v684 << 6);
            v696 = GTTraceFunc_argumentBytesWithMap((void *)v685, *(unsigned __int8 *)(v698 + 13), v1239);
            unint64_t v1198 = *(void *)v685;
            int v1181 = *v687;
            uint64_t v1154 = *((void *)v696 + 1);
            uint64_t v1168 = *(void *)v696;
            v699 = GTTraceFunc_argumentBytesWithMap((void *)v685, *(unsigned __int8 *)(v698 + 14), v691);
            v1137 = v699;
            if (v699) {
              v1214 = *(char **)v699;
            }
            else {
              v1214 = 0LL;
            }
            int v713 = HIDWORD(v681);
            v1102 = GTTraceFunc_argumentBytesWithMap((void *)v685, v696[24], v691);
            v1085 = GTTraceFunc_argumentBytesWithMap((void *)v685, v696[25], v691);
            goto LABEL_890;
          }

          if (v686 != -15609) {
            goto LABEL_898;
          }
        }

        uint64_t v703 = v682 + (v684 << 6);
        v704 = GTTraceFunc_argumentBytesWithMap((void *)v685, *(unsigned __int8 *)(v703 + 13), v1239);
        unint64_t v1198 = *(void *)v685;
        int v1181 = *v687;
        uint64_t v1154 = *((void *)v704 + 1);
        uint64_t v1168 = *(void *)v704;
        v705 = GTTraceFunc_argumentBytesWithMap((void *)v685, *(unsigned __int8 *)(v703 + 14), v691);
        v1137 = v705;
        if (v705) {
          v1214 = *(char **)v705;
        }
        else {
          v1214 = 0LL;
        }
        int v713 = HIDWORD(v681);
        v1089 = GTTraceFunc_argumentBytesWithMap((void *)v685, v704[24], v691);
        goto LABEL_918;
      case 29:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        memset(__src, 0, 24);
        memset(&__src[2], 0, 24);
        LODWORD(__src[0]) = 2;
        *((void *)&__src[1] + 1) = -1LL;
        ++DWORD1(v1247);
        uint64_t v150 = *(void *)(v37 + 32);
        if (v150)
        {
          unsigned int v151 = 0;
          while (1)
          {
            unsigned int v152 = atomic_load((unsigned int *)(v150 + 4));
            uint64_t v153 = v151 + (v152 >> 6) - 1;
            uint64_t v150 = *(void *)(v150 + 40);
            unsigned int v151 = v153;
            if (!v150)
            {
              unsigned int v151 = v153;
              goto LABEL_927;
            }
          }
        }

        else
        {
          unsigned int v151 = 0;
        }

        uint64_t v153 = 0LL;
LABEL_927:
        unint64_t v729 = v151 | (unint64_t)(v153 << 32);
        while (2)
        {
          uint64_t v730 = v150 + 64;
LABEL_929:
          if (v150
            && (*(_BYTE *)(v730 + ((uint64_t)(HIDWORD(v729) - (int)v729) << 6) + 15) & 8) != 0
            && (uint64_t v731 = v730 + ((uint64_t)(HIDWORD(v729) - (int)v729) << 6),
                unint64_t v215 = *(void *)v731,
                *(void *)v731 < v1236 + v1235))
          {
            if (*(_DWORD *)(v731 + 8) != -7161)
            {
              GTMTLSMDrawable_processTraceFuncWithMap((char *)__src, v1239, (uint64_t *)v731);
              unsigned int v732 = atomic_load((unsigned int *)(v150 + 4));
              int v733 = v729 + (v732 >> 6);
              uint64_t v734 = (HIDWORD(v729) + 1);
              unint64_t v729 = (v734 << 32) | v729;
              if ((_DWORD)v734 == v733 - 1)
              {
                unint64_t v729 = (v734 << 32) | v734;
                uint64_t v150 = *(void *)(v150 + 40);
                continue;
              }

              goto LABEL_929;
            }

            int v14 = v1220;
            if (v1235 > v215) {
              goto LABEL_1211;
            }
            uint64_t v219 = apr_palloc(p, 0x38uLL);
            *uint64_t v219 = __src[0];
            v219[1] = __src[1];
            v219[2] = __src[2];
            *((void *)v219 + 6) = *(void *)&__src[3];
LABEL_1226:
            uint64_t v959 = *find_entry((uint64_t)ht, (_BYTE *)v219 + 8, 8uLL, 0LL);
            if (v959) {
              uint64_t v959 = *(void *)(v959 + 32);
            }
            *((void *)v219 + 4) = v959;
            apr_hash_set(ht, (char *)v219 + 8, 8LL, v219);
          }

          else
          {
            uint64_t v219 = apr_palloc(p, 0x38uLL);
            *uint64_t v219 = __src[0];
            v219[1] = __src[1];
            v219[2] = __src[2];
            *((void *)v219 + 6) = *(void *)&__src[3];
LABEL_936:
            uint64_t v735 = *find_entry((uint64_t)ht, (_BYTE *)v219 + 8, 8uLL, 0LL);
            if (v735) {
              uint64_t v735 = *(void *)(v735 + 32);
            }
            int v14 = v1220;
            *((void *)v219 + 4) = v735;
            apr_hash_set(ht, (char *)v219 + 8, 8LL, v219);
            unint64_t v215 = -1LL;
          }

          break;
        }

        *((void *)v219 + 3) = v215;
        goto LABEL_1211;
      case 30:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        memset(&__src[2], 0, 248);
        memset(__src, 0, 24);
        LODWORD(__src[0]) = 3;
        *((void *)&__src[1] + 1) = -1LL;
        ++DWORD2(v1247);
        uint64_t v154 = *(void *)(v37 + 32);
        if (v154)
        {
          unsigned int v155 = 0;
          while (1)
          {
            unsigned int v156 = atomic_load((unsigned int *)(v154 + 4));
            uint64_t v157 = v155 + (v156 >> 6) - 1;
            uint64_t v154 = *(void *)(v154 + 40);
            unsigned int v155 = v157;
            if (!v154)
            {
              unsigned int v155 = v157;
              goto LABEL_942;
            }
          }
        }

        else
        {
          unsigned int v155 = 0;
        }

        uint64_t v157 = 0LL;
LABEL_942:
        unint64_t v736 = v155 | (unint64_t)(v157 << 32);
        while (2)
        {
          uint64_t v737 = v154 + 64;
LABEL_944:
          if (!v154
            || (int v738 = HIDWORD(v736) - v736,
                (*(_BYTE *)(v737 + ((uint64_t)(HIDWORD(v736) - (int)v736) << 6) + 15) & 8) == 0)
            || (uint64_t v739 = v738, v740 = v737 + ((uint64_t)v738 << 6),
                             unint64_t v741 = *(void *)v740,
                             *(void *)v740 >= v1236 + v1235))
          {
            v756 = (char *)apr_palloc(p, 0x118uLL);
            memcpy(v756, __src, 0x118uLL);
            uint64_t v757 = *find_entry((uint64_t)ht, v756 + 8, 8uLL, 0LL);
            if (v757) {
              uint64_t v757 = *(void *)(v757 + 32);
            }
            *((void *)v756 + 4) = v757;
            apr_hash_set(ht, v756 + 8, 8LL, v756);
            *((void *)v756 + 3) = -1LL;
            goto LABEL_1211;
          }

          int v742 = *(_DWORD *)(v740 + 8);
          if (((1 << (v742 - 3)) & 0x86B) != 0) {
            goto LABEL_961;
          }
          if (v742 == -7163)
          {
            if (v1235 > v741 || *((void *)&__src[0] + 1) == 0LL)
            {
              uint64_t v744 = v1239;
LABEL_970:
              v749 = GTTraceFunc_argumentBytesWithMap( (void *)v740,  *(unsigned __int8 *)(v737 + (v739 << 6) + 13),  v744);
              *((void *)&__src[0] + 1) = *(void *)v749;
              *(void *)&__src[1] = *(void *)v740;
              *((void *)&__src[2] + 1) = *((void *)v749 + 1);
              goto LABEL_979;
            }

            goto LABEL_962;
          }

LABEL_956:
          if (v742 == -8183 || v742 == -8181)
          {
LABEL_961:
            if (v1235 <= v741)
            {
LABEL_962:
              v746 = (char *)apr_palloc(p, 0x118uLL);
              memcpy(v746, __src, 0x118uLL);
              uint64_t v747 = *find_entry((uint64_t)ht, v746 + 8, 8uLL, 0LL);
              if (v747) {
                uint64_t v747 = *(void *)(v747 + 32);
              }
              *((void *)v746 + 4) = v747;
              apr_hash_set(ht, v746 + 8, 8LL, v746);
              *((void *)v746 + 3) = v741;
              int v742 = *(_DWORD *)(v740 + 8);
              uint64_t v737 = v154 + 64;
            }
          }

          uint64_t v744 = v1239;
          switch(v742)
          {
            case -7165:
              LOWORD(__src[17]) = *((void *)GTTraceFunc_argumentBytesWithMap( (void *)v740,  *(unsigned __int8 *)(v737 + (v739 << 6) + 13),  v1239)
                                  + 1);
              break;
            case -7164:
              __src[11] = *(_OWORD *)(GTTraceFunc_argumentBytesWithMap( (void *)v740,  *(unsigned __int8 *)(v737 + (v739 << 6) + 13),  v1239)
                                    + 8);
              break;
            case -7163:
              goto LABEL_970;
            case -7162:
            case -7159:
              v748 = GTTraceFunc_argumentBytesWithMap( (void *)v740,  *(unsigned __int8 *)(v737 + (v739 << 6) + 13),  v1239);
              *(_OWORD *)((char *)&__src[13] + 8) = *(_OWORD *)(v748 + 8);
              *(_OWORD *)((char *)&__src[14] + 8) = *(_OWORD *)(v748 + 24);
              *(void *)&__src[13] = *((void *)v748 + 5);
              break;
            case -7161:
            case -7158:
            case -7157:
            case -7156:
            case -7155:
              break;
            case -7160:
              BYTE2(__src[17]) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap( (void *)v740,  *(unsigned __int8 *)(v737 + (v739 << 6) + 13),  v1239)
                                 + 2);
              break;
            case -7154:
              BYTE3(__src[17]) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap( (void *)v740,  *(unsigned __int8 *)(v737 + (v739 << 6) + 13),  v1239)
                                 + 2);
              break;
            case -7153:
              v750 = GTTraceFunc_argumentBytesWithMap( (void *)v740,  *(unsigned __int8 *)(v737 + (v739 << 6) + 13),  v1239);
              *((void *)&__src[16] + 1) = GTTraceFunc_argumentBytesWithMap( (void *)v740,  v750[8],  v744);
              break;
            default:
              if (v742 == -8183)
              {
                v751 = GTTraceFunc_argumentBytesWithMap( (void *)v740,  *(unsigned __int8 *)(v737 + (v739 << 6) + 13),  v1239);
                for (uint64_t j = 0LL; j != 8; ++j)
                  __src[j + 3] = *(_OWORD *)&v751[j * 16 + 8];
                *(_OWORD *)((char *)&__src[15] + 8) = *(_OWORD *)(v751 + 136);
              }

              else if (v742 == -8181)
              {
                __src[12] = *(_OWORD *)(GTTraceFunc_argumentBytesWithMap( (void *)v740,  *(unsigned __int8 *)(v737 + (v739 << 6) + 13),  v1239)
                                      + 8);
              }

              break;
          }

LABEL_979:
          unsigned int v753 = atomic_load((unsigned int *)(v154 + 4));
          int v754 = v736 + (v753 >> 6);
          uint64_t v755 = (HIDWORD(v736) + 1);
          unint64_t v736 = (v755 << 32) | v736;
          if ((_DWORD)v755 == v754 - 1)
          {
            unint64_t v736 = (v755 << 32) | v755;
            uint64_t v154 = *(void *)(v154 + 40);
            continue;
          }

          goto LABEL_944;
        }

      case 31:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        *(_DWORD *)((char *)__src + 3) = 0;
        LODWORD(__src[0]) = 0;
        ++HIDWORD(v1247);
        uint64_t v158 = *(void *)(v37 + 32);
        if (v158)
        {
          unsigned int v159 = 0;
          while (1)
          {
            unsigned int v160 = atomic_load((unsigned int *)(v158 + 4));
            uint64_t v161 = v159 + (v160 >> 6) - 1;
            uint64_t v158 = *(void *)(v158 + 40);
            unsigned int v159 = v161;
            if (!v158)
            {
              unsigned int v159 = v161;
              goto LABEL_986;
            }
          }
        }

        else
        {
          unsigned int v159 = 0;
        }

        uint64_t v161 = 0LL;
LABEL_986:
        char v1215 = 0;
        uint64_t v1226 = 0LL;
        uint64_t v1199 = 0LL;
        uint64_t v758 = 0LL;
        uint64_t v759 = 0LL;
        uint64_t v760 = 0LL;
        int v761 = 0;
        unint64_t v762 = v159 | (unint64_t)(v161 << 32);
        while (2)
        {
          uint64_t v763 = v158 + 64;
LABEL_988:
          if (!v158
            || (int v764 = HIDWORD(v762) - v762,
                (*(_BYTE *)(v763 + ((uint64_t)(HIDWORD(v762) - (int)v762) << 6) + 15) & 8) == 0)
            || (v765 = (uint64_t *)(v763 + ((uint64_t)v764 << 6)), uint64_t v766 = *v765, *v765 >= v1236 + v1235))
          {
            uint64_t v775 = v759;
            uint64_t v776 = v760;
            uint64_t v530 = (char *)apr_palloc(p, 0x48uLL);
            *(_DWORD *)uint64_t v530 = 44;
            *((_DWORD *)v530 + 1) = v761;
            *((void *)v530 + 1) = v776;
            unint64_t v543 = v530 + 8;
            uint64_t v544 = -1LL;
            *((void *)v530 + 2) = v775;
            *((void *)v530 + 3) = -1LL;
            *((void *)v530 + 4) = 0LL;
            *((void *)v530 + 5) = v758;
            *((void *)v530 + 6) = v1199;
            *((void *)v530 + memset(v56, 0, 7) = v1226;
            v530[64] = v1215;
            *(_DWORD *)(v530 + 65) = __src[0];
            *((_DWORD *)v530 + 1memset(v56, 0, 7) = *(_DWORD *)((char *)__src + 3);
LABEL_1008:
            v777 = ht;
            goto LABEL_1009;
          }

          v768 = (int *)(v765 + 1);
          int v767 = *((_DWORD *)v765 + 2);
          if (v767 == -15610)
          {
            uint64_t v960 = v759;
            uint64_t v961 = v760;
            v962 = apr_palloc(p, 0x48uLL);
            *(_DWORD *)v962 = 44;
            *((_DWORD *)v962 + 1) = v761;
            v962[1] = v961;
            v962[2] = v960;
            v962[3] = -1LL;
            v962[4] = 0LL;
            v962[5] = v758;
            v962[6] = v1199;
            v962[7] = v1226;
            *((_BYTE *)v962 + 64) = v1215;
            *(_DWORD *)((char *)v962 + 65) = __src[0];
            *((_DWORD *)v962 + 1memset(v56, 0, 7) = *(_DWORD *)((char *)__src + 3);
            uint64_t v963 = *find_entry((uint64_t)ht, (_BYTE *)v962 + 8, 8uLL, 0LL);
            if (v963) {
              uint64_t v963 = *(void *)(v963 + 32);
            }
            v962[4] = v963;
            apr_hash_set(ht, v962 + 1, 8LL, v962);
            v962[3] = v766;
            goto LABEL_1211;
          }

          if (v767 <= -15445)
          {
            if (v767 != -15620)
            {
              if (v767 == -15463)
              {
                v771 = GTTraceFunc_argumentBytesWithMap( v765,  *(unsigned __int8 *)(v763 + ((uint64_t)v764 << 6) + 13),  v1239);
                uint64_t v759 = *v765;
                int v761 = *v768;
                uint64_t v760 = *((void *)v771 + 1);
                uint64_t v1226 = *(void *)v771;
                uint64_t v758 = *((void *)v771 + 2);
                char v1215 = v771[24];
              }

LABEL_1005:
              unsigned int v772 = atomic_load((unsigned int *)(v158 + 4));
              int v773 = v762 + (v772 >> 6);
              uint64_t v774 = (HIDWORD(v762) + 1);
              unint64_t v762 = (v774 << 32) | v762;
              if ((_DWORD)v774 == v773 - 1)
              {
                unint64_t v762 = (v774 << 32) | v774;
                uint64_t v158 = *(void *)(v158 + 40);
                continue;
              }

              goto LABEL_988;
            }

            v769 = GTTraceFunc_argumentBytesWithMap(v765, *(unsigned __int8 *)(v763 + ((uint64_t)v764 << 6) + 13), v1239);
            uint64_t v759 = *v765;
            int v761 = *v768;
            uint64_t v760 = *((void *)v769 + 1);
            uint64_t v1199 = *(void *)v769;
          }

          else
          {
            switch(v767)
            {
              case -15444:
                v769 = GTTraceFunc_argumentBytesWithMap( v765,  *(unsigned __int8 *)(v763 + ((uint64_t)v764 << 6) + 13),  v1239);
                uint64_t v759 = *v765;
                int v761 = *v768;
                uint64_t v760 = *((void *)v769 + 1);
                uint64_t v1226 = *(void *)v769;
                char v770 = 2;
                break;
              case -15437:
                v769 = GTTraceFunc_argumentBytesWithMap( v765,  *(unsigned __int8 *)(v763 + ((uint64_t)v764 << 6) + 13),  v1239);
                uint64_t v759 = *v765;
                int v761 = *v768;
                uint64_t v760 = *((void *)v769 + 1);
                uint64_t v1226 = *(void *)v769;
                char v770 = 4;
                break;
              case -15436:
                v769 = GTTraceFunc_argumentBytesWithMap( v765,  *(unsigned __int8 *)(v763 + ((uint64_t)v764 << 6) + 13),  v1239);
                uint64_t v759 = *v765;
                int v761 = *v768;
                uint64_t v760 = *((void *)v769 + 1);
                uint64_t v1226 = *(void *)v769;
                char v770 = 1;
                break;
              default:
                goto LABEL_1005;
            }

            char v1215 = v770;
          }

          break;
        }

        uint64_t v758 = *((void *)v769 + 2);
        goto LABEL_1005;
      case 32:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        LODWORD(v1248) = v1248 + 1;
        memset(__src, 0, 24);
        memset(&__src[2], 0, 64);
        LODWORD(__src[0]) = 39;
        *((void *)&__src[1] + 1) = -1LL;
        uint64_t v162 = *(void *)(v37 + 32);
        if (v162)
        {
          unsigned int v163 = 0;
          while (1)
          {
            unsigned int v164 = atomic_load((unsigned int *)(v162 + 4));
            uint64_t v165 = v163 + (v164 >> 6) - 1;
            uint64_t v162 = *(void *)(v162 + 40);
            unsigned int v163 = v165;
            if (!v162)
            {
              unsigned int v163 = v165;
              goto LABEL_1014;
            }
          }
        }

        else
        {
          unsigned int v163 = 0;
        }

        uint64_t v165 = 0LL;
LABEL_1014:
        unint64_t v779 = v163 | (unint64_t)(v165 << 32);
        while (2)
        {
          uint64_t v780 = v162 + 64;
LABEL_1016:
          if (v162)
          {
            if ((*(_BYTE *)(v780 + ((uint64_t)(HIDWORD(v779) - (int)v779) << 6) + 15) & 8) != 0)
            {
              uint64_t v781 = v780 + ((uint64_t)(HIDWORD(v779) - (int)v779) << 6);
              unint64_t v262 = *(void *)v781;
              if (*(void *)v781 < v1236 + v1235)
              {
                int v782 = *(_DWORD *)(v781 + 8);
                if ((v782 + 20480) < 5)
                {
                  if (v1235 <= v262)
                  {
                    v783 = apr_palloc(p, 0x60uLL);
                    *((_OWORD *)v783 + 2) = __src[2];
                    *((_OWORD *)v783 + 3) = __src[3];
                    *((_OWORD *)v783 + 4) = __src[4];
                    *((_OWORD *)v783 + 5) = __src[5];
                    *(_OWORD *)v783 = __src[0];
                    *((_OWORD *)v783 + 1) = __src[1];
                    uint64_t v784 = *find_entry((uint64_t)ht, (_BYTE *)v783 + 8, 8uLL, 0LL);
                    if (v784) {
                      uint64_t v784 = *(void *)(v784 + 32);
                    }
                    v783[4] = v784;
                    apr_hash_set(ht, v783 + 1, 8LL, v783);
                    v783[3] = v262;
                  }

LABEL_1025:
                  GTMTLFXSMSpatialScaler_processTraceFuncWithMap((char *)__src, v1239, (uint64_t *)v781);
                  unsigned int v785 = atomic_load((unsigned int *)(v162 + 4));
                  int v786 = v779 + (v785 >> 6);
                  uint64_t v787 = (HIDWORD(v779) + 1);
                  unint64_t v779 = (v787 << 32) | v779;
                  if ((_DWORD)v787 == v786 - 1)
                  {
                    unint64_t v779 = (v787 << 32) | v787;
                    uint64_t v162 = *(void *)(v162 + 40);
                    continue;
                  }

                  goto LABEL_1016;
                }

                if (v782 != -20475) {
                  goto LABEL_1025;
                }
                v1043 = apr_palloc(p, 0x60uLL);
                unint64_t v278 = v1043;
LABEL_1302:
                v1043[2] = __src[2];
                v1043[3] = __src[3];
                v1043[4] = __src[4];
                v1043[5] = __src[5];
                _OWORD *v1043 = __src[0];
                v1043[1] = __src[1];
                goto LABEL_1303;
              }
            }
          }

          break;
        }

        v788 = apr_palloc(p, 0x60uLL);
        unint64_t v278 = v788;
        goto LABEL_1052;
      case 33:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        ++DWORD1(v1248);
        memset(__src, 0, 24);
        memset(&__src[2], 0, 120);
        LODWORD(__src[0]) = 40;
        *((void *)&__src[1] + 1) = -1LL;
        uint64_t v166 = *(void *)(v37 + 32);
        if (v166)
        {
          unsigned int v167 = 0;
          while (1)
          {
            unsigned int v168 = atomic_load((unsigned int *)(v166 + 4));
            uint64_t v169 = v167 + (v168 >> 6) - 1;
            uint64_t v166 = *(void *)(v166 + 40);
            unsigned int v167 = v169;
            if (!v166)
            {
              unsigned int v167 = v169;
              goto LABEL_1030;
            }
          }
        }

        else
        {
          unsigned int v167 = 0;
        }

        uint64_t v169 = 0LL;
LABEL_1030:
        unint64_t v789 = v167 | (unint64_t)(v169 << 32);
        while (2)
        {
          uint64_t v790 = v166 + 64;
LABEL_1032:
          if (!v166
            || (*(_BYTE *)(v790 + ((uint64_t)(HIDWORD(v789) - (int)v789) << 6) + 15) & 8) == 0
            || (uint64_t v791 = v790 + ((uint64_t)(HIDWORD(v789) - (int)v789) << 6),
                unint64_t v262 = *(void *)v791,
                *(void *)v791 >= v1236 + v1235))
          {
            v788 = apr_palloc(p, 0x98uLL);
            unint64_t v278 = v788;
            v788[6] = __src[6];
            v788[7] = __src[7];
            v788[8] = __src[8];
            *((void *)v788 + 18) = *(void *)&__src[9];
LABEL_1052:
            v788[2] = __src[2];
            v788[3] = __src[3];
            v788[4] = __src[4];
            v788[5] = __src[5];
            _OWORD *v788 = __src[0];
            v788[1] = __src[1];
LABEL_1155:
            uint64_t v904 = *find_entry((uint64_t)ht, (_BYTE *)v278 + 8, 8uLL, 0LL);
            if (v904) {
              uint64_t v904 = *(void *)(v904 + 32);
            }
            *((void *)v278 + 4) = v904;
            apr_hash_set(ht, (char *)v278 + 8, 8LL, v278);
            unint64_t v262 = -1LL;
            goto LABEL_1158;
          }

          int v792 = *(_DWORD *)(v791 + 8);
          if (v792 <= -20458)
          {
            if (v792 != -20473)
            {
              if (v792 == -20475)
              {
                v1043 = apr_palloc(p, 0x98uLL);
                unint64_t v278 = v1043;
                v1043[6] = __src[6];
                v1043[7] = __src[7];
                v1043[8] = __src[8];
                *((void *)v1043 + 18) = *(void *)&__src[9];
                goto LABEL_1302;
              }

LABEL_1040:
              GTMTLFXSMTemporalScaler_processTraceFuncWithMap((uint64_t)__src, v1239, (uint64_t *)v791);
              unsigned int v795 = atomic_load((unsigned int *)(v166 + 4));
              int v796 = v789 + (v795 >> 6);
              uint64_t v797 = (HIDWORD(v789) + 1);
              unint64_t v789 = (v797 << 32) | v789;
              if ((_DWORD)v797 == v796 - 1)
              {
                unint64_t v789 = (v797 << 32) | v797;
                uint64_t v166 = *(void *)(v166 + 40);
                continue;
              }

              goto LABEL_1032;
            }
          }

          else if ((v792 + 20457) >= 2 && v792 != -18430)
          {
            goto LABEL_1040;
          }

          break;
        }

        if (v1235 <= v262)
        {
          v793 = apr_palloc(p, 0x98uLL);
          *((_OWORD *)v793 + 6) = __src[6];
          *((_OWORD *)v793 + memset(v56, 0, 7) = __src[7];
          *((_OWORD *)v793 + 8) = __src[8];
          v793[18] = *(void *)&__src[9];
          *((_OWORD *)v793 + 2) = __src[2];
          *((_OWORD *)v793 + 3) = __src[3];
          *((_OWORD *)v793 + 4) = __src[4];
          *((_OWORD *)v793 + 5) = __src[5];
          *(_OWORD *)v793 = __src[0];
          *((_OWORD *)v793 + 1) = __src[1];
          uint64_t v794 = *find_entry((uint64_t)ht, (_BYTE *)v793 + 8, 8uLL, 0LL);
          if (v794) {
            uint64_t v794 = *(void *)(v794 + 32);
          }
          v793[4] = v794;
          apr_hash_set(ht, v793 + 1, 8LL, v793);
          v793[3] = v262;
        }

        goto LABEL_1040;
      case 34:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37)) {
          goto LABEL_1211;
        }
        ++DWORD2(v1248);
        uint64_t v170 = *(void *)(v37 + 32);
        if (v170)
        {
          unsigned int v171 = 0;
          while (1)
          {
            unsigned int v172 = atomic_load((unsigned int *)(v170 + 4));
            uint64_t v173 = v171 + (v172 >> 6) - 1;
            uint64_t v170 = *(void *)(v170 + 40);
            unsigned int v171 = v173;
            if (!v170)
            {
              unsigned int v171 = v173;
              goto LABEL_1055;
            }
          }
        }

        else
        {
          unsigned int v171 = 0;
        }

        uint64_t v173 = 0LL;
LABEL_1055:
        uint64_t v176 = 0LL;
        uint64_t v799 = 0LL;
        uint64_t v1200 = 0LL;
        unint64_t v1216 = 0LL;
        int v800 = 0;
        unint64_t v801 = v171 | (unint64_t)(v173 << 32);
        while (2)
        {
          uint64_t v802 = v170 + 64;
LABEL_1057:
          if (v170)
          {
            int v803 = HIDWORD(v801) - v801;
            if ((*(_BYTE *)(v802 + ((uint64_t)(HIDWORD(v801) - (int)v801) << 6) + 15) & 8) != 0)
            {
              uint64_t v804 = v802 + ((uint64_t)v803 << 6);
              unint64_t v416 = *(void *)v804;
              if (*(void *)v804 < v1236 + v1235)
              {
                int v805 = *(_DWORD *)(v804 + 8);
                if (v805 == -15245)
                {
                  uint64_t v806 = v1239;
                  v807 = GTTraceFunc_argumentBytesWithMap( (void *)v804,  *(unsigned __int8 *)(v802 + ((uint64_t)v803 << 6) + 13),  v1239);
                  uint64_t v1200 = *((void *)v807 + 1);
                  unint64_t v1216 = *(void *)v804;
                  int v800 = *(_DWORD *)(v804 + 8);
                  uint64_t v176 = GTTraceFunc_argumentBytesWithMap((void *)v804, v807[24], v806);
                  uint64_t v799 = *(void *)v807;
                  int v14 = v1220;
                }

                else
                {
                  int v14 = v1220;
                  if (v805 == -15231)
                  {
                    v989 = apr_palloc(p, 0x38uLL);
                    *(_DWORD *)v989 = 72;
                    *((_DWORD *)v989 + 1) = v800;
                    v989[1] = v1200;
                    v990 = v989 + 1;
                    v989[2] = v1216;
                    v989[3] = -1LL;
                    v989[4] = 0LL;
                    v989[5] = v799;
                    v989[6] = v176;
LABEL_1267:
                    uint64_t v991 = *find_entry((uint64_t)ht, v990, 8uLL, 0LL);
                    if (v991) {
                      uint64_t v991 = *(void *)(v991 + 32);
                    }
                    v989[4] = v991;
                    apr_hash_set(ht, v990, 8LL, v989);
                    v989[3] = v416;
                    goto LABEL_1211;
                  }
                }

                unsigned int v808 = atomic_load((unsigned int *)(v170 + 4));
                int v809 = v801 + (v808 >> 6);
                uint64_t v810 = (HIDWORD(v801) + 1);
                unint64_t v801 = (v810 << 32) | v801;
                if ((_DWORD)v810 == v809 - 1)
                {
                  unint64_t v801 = (v810 << 32) | v810;
                  uint64_t v170 = *(void *)(v170 + 40);
                  continue;
                }

                goto LABEL_1057;
              }
            }
          }

          break;
        }

        uint64_t v188 = (char *)apr_palloc(p, 0x38uLL);
        unint64_t v189 = v188;
        *(_DWORD *)uint64_t v188 = 72;
        *((_DWORD *)v188 + 1) = v800;
        *((void *)v188 + 1) = v1200;
        uint64_t v190 = v188 + 8;
        unint64_t v425 = -1LL;
        *((void *)v188 + 2) = v1216;
        *((void *)v188 + 3) = -1LL;
        *((void *)v188 + 4) = 0LL;
        *((void *)v188 + 5) = v799;
LABEL_1067:
        *((void *)v188 + 6) = v176;
LABEL_1068:
        uint64_t v811 = *find_entry((uint64_t)ht, v190, 8uLL, 0LL);
        if (v811) {
          uint64_t v811 = *(void *)(v811 + 32);
        }
        v189[4] = v811;
        apr_hash_set(ht, v190, 8LL, v189);
        v189[3] = v425;
        goto LABEL_1211;
      default:
        goto LABEL_1211;
    }
  }

uint64_t GTMTLSMObject_compare(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)a1 + 16LL);
  unint64_t v3 = *(void *)(*(void *)a2 + 16LL);
  BOOL v4 = v2 >= v3;
  BOOL v5 = v2 != v3;
  if (v4) {
    return v5;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

__n128 GTMTLSMRenderCommandEncoder_init(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  memset_pattern16((void *)(a1 + 10100), &unk_318430, 0x40uLL);
  memset_pattern16((void *)(a1 + 10228), &unk_318430, 0x40uLL);
  memset_pattern16((void *)(a1 + 10612), &unk_318430, 0x40uLL);
  *(void *)(a1 + 10676) = 0x3F8000003F800000LL;
  *(void *)(a1 + 11068) = 0x100000001LL;
  memset_pattern16((void *)(a1 + 9872), &unk_318440, 0x40uLL);
  *(void *)(a1 + 760) = -1LL;
  result.n128_u64[0] = -1LL;
  result.n128_u64[1] = -1LL;
  *(__n128 *)(a1 + 728) = result;
  *(__n128 *)(a1 + 744) = result;
  *(__n128 *)(a1 + 696) = result;
  *(__n128 *)(a1 + 712) = result;
  *(__n128 *)(a1 + 664) = result;
  *(__n128 *)(a1 + 680) = result;
  *(__n128 *)(a1 + 632) = result;
  *(__n128 *)(a1 + 648) = result;
  *(__n128 *)(a1 + 600) = result;
  *(__n128 *)(a1 + 616) = result;
  *(__n128 *)(a1 + 568) = result;
  *(__n128 *)(a1 + 584) = result;
  *(__n128 *)(a1 + 536) = result;
  *(__n128 *)(a1 + 552) = result;
  *(__n128 *)(a1 + 520) = result;
  *(_WORD *)(a1 + 11086) = 1028;
  return result;
}

uint64_t GTMTLSMRenderCommandEncoder_loadIndirectCommand(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a3 + a2[1]);
  if (!v4) {
    return 0LL;
  }
  unint64_t v9 = (_BYTE *)*a2;
  if (*(_BYTE *)(*a2 + 11LL)
    || (uint64_t result = GTMTLIndirectResources_renderPipelineIdForUniqueIdentifier(a4[3], *(void *)(a3 + a2[2])),
        (*(void *)(a1 + 8544) = result) != 0LL))
  {
    if (!v9[10])
    {
      unsigned int v11 = v9[18];
      if (v11 >= 0x40) {
        char v12 = 64;
      }
      else {
        char v12 = v9[18];
      }
      *(void *)(a1 + 8) &= -1LL << v12;
      if (v11)
      {
        unint64_t v13 = 0LL;
        uint64_t v14 = a3 + a2[3];
        do
        {
          unint64_t v15 = *(void *)(v14 + 8 * v13);
          uint64_t v16 = GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*a4 + 24), *(int *)(*a4 + 12), v15);
          if (v16)
          {
            unint64_t v17 = v15 - *v16;
            uint64_t v18 = v16[2];
          }

          else
          {
            unint64_t v17 = 0LL;
            uint64_t v18 = 0LL;
          }

          uint64_t v19 = a1 + 8 * v13;
          *(void *)(v19 + 24) = v18;
          *(void *)(v19 + 272) = v17;
          ++v13;
        }

        while (v13 < v9[18]);
      }

      unsigned int v20 = v9[12];
      if (v20 >= 0x40) {
        char v21 = 64;
      }
      else {
        char v21 = v9[12];
      }
      *(void *)(a1 + 1920) &= -1LL << v21;
      if (v20)
      {
        unint64_t v22 = 0LL;
        uint64_t v23 = a3 + a2[4];
        do
        {
          unint64_t v24 = *(void *)(v23 + 8 * v22);
          uint64_t v25 = GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*a4 + 24), *(int *)(*a4 + 12), v24);
          if (v25)
          {
            unint64_t v26 = v24 - *v25;
            uint64_t v27 = v25[2];
          }

          else
          {
            unint64_t v26 = 0LL;
            uint64_t v27 = 0LL;
          }

          uint64_t v28 = a1 + 8 * v22;
          *(void *)(v28 + 1928) = v27;
          *(void *)(v28 + 2176) = v26;
          ++v22;
        }

        while (v22 < v9[12]);
      }

      unsigned int v29 = v9[16];
      if (v29 >= 0x40) {
        char v30 = 64;
      }
      else {
        char v30 = v9[16];
      }
      *(void *)(a1 + 3576) &= -1LL << v30;
      if (v29)
      {
        unint64_t v31 = 0LL;
        uint64_t v32 = a3 + a2[5];
        do
        {
          unint64_t v33 = *(void *)(v32 + 8 * v31);
          uint64_t v34 = GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*a4 + 24), *(int *)(*a4 + 12), v33);
          if (v34)
          {
            unint64_t v35 = v33 - *v34;
            uint64_t v36 = v34[2];
          }

          else
          {
            unint64_t v35 = 0LL;
            uint64_t v36 = 0LL;
          }

          uint64_t v37 = a1 + 8 * v31;
          *(void *)(v37 + 3584) = v36;
          *(void *)(v37 + 3832) = v35;
          ++v31;
        }

        while (v31 < v9[16]);
      }

      unsigned int v38 = v9[15];
      if (v38 >= 0x40) {
        char v39 = 64;
      }
      else {
        char v39 = v9[15];
      }
      *(void *)(a1 + 5232) &= -1LL << v39;
      if (v38)
      {
        int v40 = (unint64_t *)(a3 + a2[6]);
        unsigned int v41 = (unint64_t *)(a1 + 5488);
        uint64_t v42 = 655LL;
        do
        {
          unint64_t v44 = *v40++;
          unint64_t v43 = v44;
          uint64_t v45 = GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*a4 + 24), *(int *)(*a4 + 12), v44);
          if (v45)
          {
            unint64_t v46 = v43 - *v45;
            unint64_t v47 = v45[2];
          }

          else
          {
            unint64_t v46 = 0LL;
            unint64_t v47 = 0LL;
          }

          *(v41 - 31) = v47;
          *v41++ = v46;
          unint64_t v48 = v42 - 654;
          ++v42;
        }

        while (v48 < v9[15]);
      }
    }

    uint64_t v49 = v9[17];
    if (v9[17])
    {
      uint64_t v50 = (uint64_t *)(a3 + a2[8]);
      unsigned int v51 = (_DWORD *)(a1 + 10944);
      do
      {
        uint64_t v52 = *v50++;
        *v51++ = v52;
        --v49;
      }

      while (v49);
    }

    if (v9[19])
    {
      uint64_t v53 = v9[18];
      char v54 = v53 >= 0x40 ? 64 : v9[18];
      *(void *)(a1 + 16) |= ~(-1LL << v54);
      if (v53)
      {
        unsigned int v55 = (uint64_t *)(a3 + a2[10]);
        unsigned int v56 = (void *)(a1 + 520);
        do
        {
          uint64_t v57 = *v55++;
          *v56++ = v57;
          --v53;
        }

        while (v53);
      }
    }

    if (v4 == 8 || v4 == 4)
    {
      uint64_t v58 = a3 + a2[12];
      unsigned int v59 = *(void **)(*a4 + 24);
      unint64_t v60 = *(int *)(*a4 + 12);
      unint64_t v61 = *(void *)v58;
      uint64_t v62 = GTMTLGPUAddressResource_resourceForGPUAddress(v59, v60, *(void *)v58);
      if (v62)
      {
        int v63 = v61 - *(_DWORD *)v62;
        uint64_t v64 = v62[2];
      }

      else
      {
        int v63 = 0;
        uint64_t v64 = 0LL;
      }

      *(void *)(a1 + 9864) = v64;
      *(_DWORD *)(a1 + 10688) = v63;
      *(_DWORD *)(a1 + 10692) = *(void *)(v58 + 8);
      *(_DWORD *)(a1 + 10676) = *(_DWORD *)(v58 + 16);
      return v4 != 8 || v64 != 0;
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

uint64_t GTMTLSMComputeCommandEncoder_loadIndirectCommand(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a3 + a2[1]);
  if (!v4) {
    return 0LL;
  }
  unint64_t v9 = (_BYTE *)*a2;
  if (*(_BYTE *)(*a2 + 11LL)
    || (uint64_t result = GTMTLIndirectResources_renderPipelineIdForUniqueIdentifier(a4[4], *(void *)(a3 + a2[2])),
        (*(void *)(a1 + 8) = result) != 0LL))
  {
    if (!v9[10])
    {
      unsigned int v11 = v9[13];
      char v12 = v11 >= 0x40 ? 64 : v9[13];
      *(void *)(a1 + 16) &= -1LL << v12;
      if (v11)
      {
        unint64_t v13 = 0LL;
        uint64_t v14 = a3 + a2[7];
        do
        {
          unint64_t v15 = *(void *)(v14 + 8 * v13);
          uint64_t v16 = GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*a4 + 24), *(int *)(*a4 + 12), v15);
          if (v16)
          {
            unint64_t v17 = v15 - *v16;
            uint64_t v18 = v16[2];
          }

          else
          {
            unint64_t v17 = 0LL;
            uint64_t v18 = 0LL;
          }

          uint64_t v19 = a1 + 8 * v13;
          *(void *)(v19 + 32) = v18;
          *(void *)(v19 + 280) = v17;
          ++v13;
        }

        while (v13 < v9[13]);
      }
    }

    if (v9[19])
    {
      uint64_t v20 = v9[13];
      char v21 = v20 >= 0x40 ? 64 : v9[13];
      *(void *)(a1 + 24) |= ~(-1LL << v21);
      if (v20)
      {
        unint64_t v22 = (uint64_t *)(a3 + a2[10]);
        uint64_t v23 = (void *)(a1 + 528);
        do
        {
          uint64_t v24 = *v22++;
          *v23++ = v24;
          --v20;
        }

        while (v20);
      }
    }

    uint64_t v25 = v9[14];
    if (v9[14])
    {
      unint64_t v26 = (uint64_t *)(a3 + a2[9]);
      uint64_t v27 = (_DWORD *)(a1 + 1984);
      do
      {
        uint64_t v28 = *v26++;
        *v27++ = v28;
        --v25;
      }

      while (v25);
    }

    if (v4 == 32 || v4 == 64)
    {
      unsigned int v29 = (__int128 *)(a3 + a2[12]);
      __int128 v30 = *v29;
      *(void *)(a1 + 1944) = *((void *)v29 + 2);
      *(_OWORD *)(a1 + 1928) = v30;
      __int128 v31 = *(__int128 *)((char *)v29 + 24);
      *(void *)(a1 + 1968) = *((void *)v29 + 5);
      *(_OWORD *)(a1 + 1952) = v31;
    }

    return 1LL;
  }

  return result;
}

char *GTMTLSMBuffer_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  BOOL v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 <= -15779)
  {
    if (v6 <= -16313)
    {
      switch(v6)
      {
        case -16372:
          int v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v7[8], a2);
          *((void *)v5 + 9) = result;
          break;
        case -16371:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_DWORD *)v5 + 22) = *((_DWORD *)result + 2);
          break;
        case -16370:
          *((void *)result + 3) = *a3;
          break;
        case -16369:
        case -16368:
          return result;
        case -16367:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v28 = *((void *)result + 2);
          if (v28 != 1) {
            *((_WORD *)v5 + 49) = v28;
          }
          break;
        default:
          if (v6 == -16314 || v6 == -16313) {
            goto LABEL_35;
          }
          break;
      }

      return result;
    }

    if (v6 > -16123)
    {
      switch(v6)
      {
        case -16122:
          result[100] = 1;
          break;
        case -16117:
          unsigned int v29 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v30 = *a3;
          uint64_t v31 = *((void *)v29 + 2);
          *((void *)v5 + 1) = *((void *)v29 + 1);
          *((void *)v5 + 2) = v30;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          *((_WORD *)v5 + 48) = *((void *)v29 + 3);
          *((void *)v5 + 13) = v31;
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 19) = result;
          if (result)
          {
            uint64_t v32 = *((void *)result + 1);
            *((void *)v5 + memset(v56, 0, 7) = *(void *)result;
            int v33 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v32;
            *((_DWORD *)v5 + 22) = v33;
            *((void *)v5 + 14) = *((void *)result + 3);
            *((_OWORD *)v5 + 8) = *((_OWORD *)result + 2);
          }

          *((void *)v5 + 6) = *(void *)v29;
          break;
        case -15914:
          __int128 v8 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v9 = *a3;
          uint64_t v10 = *(void *)v8;
          *((void *)v5 + 1) = *((void *)v8 + 1);
          *((void *)v5 + 2) = v9;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          *((void *)v5 + 5) = *((void *)v8 + 2);
          *((void *)v5 + 15) = v10;
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          uint64_t v11 = *((void *)result + 3);
          *((void *)v5 + 13) = *((void *)result + 2);
          *((_WORD *)v5 + 48) = v11;
          break;
      }

      return result;
    }

    if (v6 != -16312)
    {
      if (v6 != -16163) {
        return result;
      }
      uint64_t v18 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v19 = *a3;
      *((void *)v5 + 1) = *((void *)v18 + 1);
      *((void *)v5 + 2) = v19;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      uint64_t v20 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((void *)v5 + 19) = v20;
      if (v20)
      {
        uint64_t v21 = *((void *)v20 + 1);
        *((void *)v5 + memset(v56, 0, 7) = *(void *)v20;
        int v22 = *((_DWORD *)v20 + 4);
        *((_DWORD *)v5 + 21) = v21;
        *((_DWORD *)v5 + 22) = v22;
        *((void *)v5 + 14) = *((void *)v20 + 3);
        *((_OWORD *)v5 + 8) = *((_OWORD *)v20 + 2);
      }

      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v18[16], a2);
      *((void *)v5 + 18) = result;
      if (result) {
        uint64_t v23 = *((void *)result + 1);
      }
      else {
        uint64_t v23 = 0LL;
      }
      *((void *)v5 + 13) = v23;
      goto LABEL_58;
    }

char *GTMTLSMTexture_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  BOOL v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 > -15914)
  {
    if (v6 <= -10228)
    {
      if (v6 > -15690)
      {
        if (v6 > -10235)
        {
          if (v6 == -10234)
          {
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((_DWORD *)v5 + 23) = *((_DWORD *)result + 2);
          }

          else if (v6 == -10231)
          {
            uint64_t v69 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v69[8], a2);
            *((void *)v5 + 14) = result;
          }

          return result;
        }

        if (v6 == -15689)
        {
          uint64_t v36 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v103 = *a3;
          *((void *)v5 + 1) = *((void *)v36 + 1);
          *((void *)v5 + 2) = v103;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 16) = result;
          if (result)
          {
            uint64_t v104 = *((void *)result + 1);
            *((void *)v5 + memset(v56, 0, 7) = *(void *)result;
            int v105 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v104;
            *((_DWORD *)v5 + 22) = v105;
            uint64_t v107 = *((void *)result + 6);
            uint64_t v106 = *((void *)result + 7);
            *((void *)v5 + 21) = *((void *)result + 5);
            *((void *)v5 + 22) = v106;
            *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
            *((void *)v5 + 14) = result + 24;
            *((void *)v5 + 25) = v107;
          }

          *((_WORD *)v5 + 76) = *((void *)v36 + 2);
          v5[158] = *((void *)v36 + 3);
          v5[159] = *((void *)v36 + 4);
          v5[160] = *((void *)v36 + 5);
          *((_WORD *)v5 + 7memset(v56, 0, 7) = *((void *)v36 + 6);
          *((_WORD *)v5 + 78) = *((void *)v36 + 7);
        }

        else
        {
          if (v6 != -15688) {
            return result;
          }
          uint64_t v36 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v37 = *a3;
          *((void *)v5 + 1) = *((void *)v36 + 1);
          *((void *)v5 + 2) = v37;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 16) = result;
          if (result)
          {
            uint64_t v38 = *((void *)result + 1);
            *((void *)v5 + memset(v56, 0, 7) = *(void *)result;
            int v39 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v38;
            *((_DWORD *)v5 + 22) = v39;
            uint64_t v41 = *((void *)result + 6);
            uint64_t v40 = *((void *)result + 7);
            *((void *)v5 + 21) = *((void *)result + 5);
            *((void *)v5 + 22) = v40;
            *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
            *((void *)v5 + 14) = result + 24;
            *((void *)v5 + 25) = v41;
          }

          *((_WORD *)v5 + 76) = *((void *)v36 + 2);
          v5[158] = *((void *)v36 + 3);
          v5[159] = *((void *)v36 + 4);
          v5[160] = *((void *)v36 + 5);
          *((_WORD *)v5 + 7memset(v56, 0, 7) = *((void *)v36 + 6);
          *((_WORD *)v5 + 78) = *((void *)v36 + 7);
          *((_DWORD *)v5 + 52) = *((_DWORD *)v36 + 18);
        }

        *((void *)v5 + 18) = *(void *)v36;
        uint64_t v56 = *((void *)v36 + 8);
      }

      else
      {
        if (v6 <= -15776)
        {
          if (v6 == -15913)
          {
            uint64_t v90 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            uint64_t v91 = *a3;
            *((void *)v5 + 1) = *((void *)v90 + 1);
            *((void *)v5 + 2) = v91;
            *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
            unsigned int v92 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *((void *)v5 + 16) = v92;
            if (v92)
            {
              uint64_t v93 = *((void *)v92 + 1);
              *((void *)v5 + memset(v56, 0, 7) = *(void *)v92;
              int v94 = *((_DWORD *)v92 + 4);
              *((_DWORD *)v5 + 21) = v93;
              *((_DWORD *)v5 + 22) = v94;
              uint64_t v96 = *((void *)v92 + 6);
              uint64_t v95 = *((void *)v92 + 7);
              *((void *)v5 + 21) = *((void *)v92 + 5);
              *((void *)v5 + 22) = v95;
              *((_WORD *)v5 + 106) = *((_WORD *)v92 + 40);
              *((void *)v5 + 14) = v92 + 24;
              *((void *)v5 + 25) = v96;
            }

            *((void *)v5 + 5) = *((void *)v90 + 2);
            *((void *)v5 + 23) = *(void *)v90;
            uint64_t v97 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v97[24], a2);
            *((void *)v5 + 13) = result;
            return result;
          }

          if (v6 != -15777) {
            return result;
          }
          uint64_t v21 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v22 = *a3;
          *((void *)v5 + 1) = *((void *)v21 + 1);
          *((void *)v5 + 2) = v22;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t v23 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 16) = v23;
          if (v23)
          {
            uint64_t v24 = *((void *)v23 + 1);
            *((void *)v5 + memset(v56, 0, 7) = *(void *)v23;
            int v25 = *((_DWORD *)v23 + 4);
            *((_DWORD *)v5 + 21) = v24;
            *((_DWORD *)v5 + 22) = v25;
            uint64_t v27 = *((void *)v23 + 6);
            uint64_t v26 = *((void *)v23 + 7);
            *((void *)v5 + 21) = *((void *)v23 + 5);
            *((void *)v5 + 22) = v26;
            *((_WORD *)v5 + 106) = *((_WORD *)v23 + 40);
            *((void *)v5 + 14) = v23 + 24;
            *((void *)v5 + 25) = v27;
          }

          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v21[24], a2);
          *((void *)v5 + 13) = result;
          *((void *)v5 + 6) = *(void *)v21;
          uint64_t v28 = *((void *)v21 + 2);
LABEL_91:
          *((_DWORD *)v5 + 20) = v28;
          return result;
        }

        if (v6 == -15775)
        {
          uint64_t v70 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v121 = *a3;
          *((void *)v5 + 1) = *((void *)v70 + 1);
          *((void *)v5 + 2) = v121;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 16) = result;
          if (result)
          {
            uint64_t v122 = *((void *)result + 1);
            *((void *)v5 + memset(v56, 0, 7) = *(void *)result;
            int v123 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v122;
            *((_DWORD *)v5 + 22) = v123;
            uint64_t v125 = *((void *)result + 6);
            uint64_t v124 = *((void *)result + 7);
            *((void *)v5 + 21) = *((void *)result + 5);
            *((void *)v5 + 22) = v124;
            *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
            *((void *)v5 + 14) = result + 24;
            *((void *)v5 + 25) = v125;
          }

          *((_WORD *)v5 + 76) = *((void *)v70 + 2);
          v5[158] = *((void *)v70 + 3);
          v5[159] = *((void *)v70 + 4);
          v5[160] = *((void *)v70 + 5);
          *((_WORD *)v5 + 7memset(v56, 0, 7) = *((void *)v70 + 6);
          *((_WORD *)v5 + 78) = *((void *)v70 + 7);
          *((_DWORD *)v5 + 52) = *((_DWORD *)v70 + 16);
          goto LABEL_117;
        }

        if (v6 != -15690) {
          return result;
        }
        uint64_t v57 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v58 = *a3;
        *((void *)v5 + 1) = *((void *)v57 + 1);
        *((void *)v5 + 2) = v58;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 16) = result;
        if (result)
        {
          uint64_t v59 = *((void *)result + 1);
          *((void *)v5 + memset(v56, 0, 7) = *(void *)result;
          int v60 = *((_DWORD *)result + 4);
          *((_DWORD *)v5 + 21) = v59;
          *((_DWORD *)v5 + 22) = v60;
          uint64_t v61 = *((void *)result + 6);
          *((void *)v5 + 21) = *((void *)result + 5);
          *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
          *((void *)v5 + 14) = result + 24;
          *((void *)v5 + 25) = v61;
        }

        *((_WORD *)v5 + 76) = *((void *)v57 + 2);
        *((void *)v5 + 18) = *(void *)v57;
        uint64_t v56 = *((void *)v57 + 3);
      }
    }

    else
    {
      if (v6 <= -10205)
      {
        if (v6 > -10213)
        {
          if (v6 == -10212)
          {
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((void *)v5 + 8) = *((void *)result + 1);
          }

          else if (v6 == -10205)
          {
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((_WORD *)v5 + 106) = *((_DWORD *)result + 2);
          }
        }

        else if (v6 == -10227)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 21) = *((void *)result + 1);
        }

        else if (v6 == -10222)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_DWORD *)v5 + 21) = *((_DWORD *)result + 2);
        }

        return result;
      }

      if (v6 > -10186)
      {
        if (v6 != -10185)
        {
          if (v6 == -10164)
          {
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((void *)v5 + 25) = *((void *)result + 1);
          }

          else if (v6 == -7167)
          {
            uint64_t v14 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            uint64_t v15 = *a3;
            *((void *)v5 + 1) = *((void *)v14 + 1);
            *((void *)v5 + 2) = v15;
            *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *((void *)v5 + 16) = result;
            if (result)
            {
              uint64_t v16 = *((void *)result + 1);
              *((void *)v5 + memset(v56, 0, 7) = *(void *)result;
              int v17 = *((_DWORD *)result + 4);
              *((_DWORD *)v5 + 21) = v16;
              *((_DWORD *)v5 + 22) = v17;
              uint64_t v19 = *((void *)result + 6);
              uint64_t v18 = *((void *)result + 7);
              *((void *)v5 + 21) = *((void *)result + 5);
              *((void *)v5 + 22) = v18;
              *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
              *((void *)v5 + 14) = result + 24;
              *((void *)v5 + 25) = v19;
            }

            *((void *)v5 + 24) = *(void *)v14;
          }

          return result;
        }

        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v28 = *((void *)result + 1);
        goto LABEL_91;
      }

      if (v6 == -10204)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((void *)v5 + memset(v56, 0, 7) = *((void *)result + 1);
        return result;
      }

      if (v6 != -10198) {
        return result;
      }
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v56 = *((void *)result + 1);
    }

    *((void *)v5 + 22) = v56;
    return result;
  }

  if (v6 <= -16197)
  {
    if (v6 > -16241)
    {
      switch(v6)
      {
        case -16240:
          uint64_t v20 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v20[8], a2);
          *((void *)v5 + 9) = result;
          break;
        case -16239:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_DWORD *)v5 + 22) = *((_DWORD *)result + 2);
          break;
        case -16238:
          *((void *)result + 3) = *a3;
          break;
        case -16233:
          uint64_t v70 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v71 = *a3;
          *((void *)v5 + 1) = *((void *)v70 + 1);
          *((void *)v5 + 2) = v71;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 16) = result;
          if (result)
          {
            uint64_t v72 = *((void *)result + 1);
            *((void *)v5 + memset(v56, 0, 7) = *(void *)result;
            int v73 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v72;
            *((_DWORD *)v5 + 22) = v73;
            uint64_t v75 = *((void *)result + 6);
            uint64_t v74 = *((void *)result + 7);
            *((void *)v5 + 21) = *((void *)result + 5);
            *((void *)v5 + 22) = v74;
            *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
            *((void *)v5 + 14) = result + 24;
            *((void *)v5 + 25) = v75;
          }

          *((_WORD *)v5 + 76) = *((void *)v70 + 2);
          goto LABEL_117;
        case -16232:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v76 = *((void *)result + 2);
          if (v76 != 1) {
            *((_WORD *)v5 + 49) = v76;
          }
          break;
        default:
          return result;
      }

      return result;
    }

    if (v6 != -16368)
    {
      if (v6 != -16310)
      {
        if (v6 != -16294) {
          return result;
        }
        uint64_t v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v43 = *a3;
        *((void *)v5 + 1) = *((void *)v42 + 1);
        *((void *)v5 + 2) = v43;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        unint64_t v44 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 16) = v44;
        if (v44)
        {
          uint64_t v45 = *((void *)v44 + 1);
          *((void *)v5 + memset(v56, 0, 7) = *(void *)v44;
          int v46 = *((_DWORD *)v44 + 4);
          *((_DWORD *)v5 + 21) = v45;
          *((_DWORD *)v5 + 22) = v46;
          uint64_t v48 = *((void *)v44 + 6);
          uint64_t v47 = *((void *)v44 + 7);
          *((void *)v5 + 21) = *((void *)v44 + 5);
          *((void *)v5 + 22) = v47;
          *((_WORD *)v5 + 106) = *((_WORD *)v44 + 40);
          *((void *)v5 + 14) = v44 + 24;
          *((void *)v5 + 25) = v48;
        }

        *((void *)v5 + 13) = GTTraceFunc_argumentBytesWithMap(a3, v42[24], a2);
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v42[25], a2);
        *((void *)v5 + 15) = result;
        *((void *)v5 + 19) = *((void *)v42 + 2);
        goto LABEL_109;
      }

      uint64_t v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v108 = *a3;
      *((void *)v5 + 1) = *((void *)v42 + 1);
      *((void *)v5 + 2) = v108;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      uint64_t v109 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((void *)v5 + 16) = v109;
      if (v109)
      {
        uint64_t v110 = *((void *)v109 + 1);
        *((void *)v5 + memset(v56, 0, 7) = *(void *)v109;
        int v111 = *((_DWORD *)v109 + 4);
        *((_DWORD *)v5 + 21) = v110;
        *((_DWORD *)v5 + 22) = v111;
        uint64_t v113 = *((void *)v109 + 6);
        uint64_t v112 = *((void *)v109 + 7);
        *((void *)v5 + 21) = *((void *)v109 + 5);
        *((void *)v5 + 22) = v112;
        *((_WORD *)v5 + 106) = *((_WORD *)v109 + 40);
        *((void *)v5 + 14) = v109 + 24;
        *((void *)v5 + 25) = v113;
      }

      unsigned int v55 = v42[24];
      goto LABEL_108;
    }

    goto LABEL_67;
  }

  if (v6 <= -16099)
  {
    if (v6 <= -16115)
    {
      if (v6 != -16196)
      {
        if (v6 == -16116)
        {
          unsigned int v29 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v30 = *a3;
          *((void *)v5 + 1) = *((void *)v29 + 1);
          *((void *)v5 + 2) = v30;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t v31 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 16) = v31;
          if (v31)
          {
            uint64_t v32 = *((void *)v31 + 1);
            *((void *)v5 + memset(v56, 0, 7) = *(void *)v31;
            int v33 = *((_DWORD *)v31 + 4);
            *((_DWORD *)v5 + 21) = v32;
            *((_DWORD *)v5 + 22) = v33;
            uint64_t v35 = *((void *)v31 + 6);
            uint64_t v34 = *((void *)v31 + 7);
            *((void *)v5 + 21) = *((void *)v31 + 5);
            *((void *)v5 + 22) = v34;
            *((_WORD *)v5 + 106) = *((_WORD *)v31 + 40);
            *((void *)v5 + 14) = v31 + 24;
            *((void *)v5 + 25) = v35;
          }

          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v29[16], a2);
          *((void *)v5 + 13) = result;
          *((void *)v5 + 6) = *(void *)v29;
        }

        return result;
      }

      uint64_t v70 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v98 = *a3;
      *((void *)v5 + 1) = *((void *)v70 + 1);
      *((void *)v5 + 2) = v98;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((void *)v5 + 16) = result;
      if (result)
      {
        uint64_t v99 = *((void *)result + 1);
        *((void *)v5 + memset(v56, 0, 7) = *(void *)result;
        int v100 = *((_DWORD *)result + 4);
        *((_DWORD *)v5 + 21) = v99;
        *((_DWORD *)v5 + 22) = v100;
        uint64_t v102 = *((void *)result + 6);
        uint64_t v101 = *((void *)result + 7);
        *((void *)v5 + 21) = *((void *)result + 5);
        *((void *)v5 + 22) = v101;
        *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
        *((void *)v5 + 14) = result + 24;
        *((void *)v5 + 25) = v102;
      }

      *((_WORD *)v5 + 76) = *((void *)v70 + 2);
      v5[158] = *((void *)v70 + 3);
      v5[159] = *((void *)v70 + 4);
      v5[160] = *((void *)v70 + 5);
      *((_WORD *)v5 + 7memset(v56, 0, 7) = *((void *)v70 + 6);
      *((_WORD *)v5 + 78) = *((void *)v70 + 7);
LABEL_117:
      *((void *)v5 + 18) = *(void *)v70;
      return result;
    }

    if (v6 == -16114)
    {
      result[100] = 1;
      return result;
    }

    if (v6 != -16104) {
      return result;
    }
LABEL_67:
    uint64_t v62 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v63 = *a3;
    *((void *)v5 + 1) = *((void *)v62 + 1);
    *((void *)v5 + 2) = v63;
    *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
    uint64_t v64 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
    *((void *)v5 + 16) = v64;
    if (v64)
    {
      uint64_t v65 = *((void *)v64 + 1);
      *((void *)v5 + memset(v56, 0, 7) = *(void *)v64;
      int v66 = *((_DWORD *)v64 + 4);
      *((_DWORD *)v5 + 21) = v65;
      *((_DWORD *)v5 + 22) = v66;
      uint64_t v68 = *((void *)v64 + 6);
      uint64_t v67 = *((void *)v64 + 7);
      *((void *)v5 + 21) = *((void *)v64 + 5);
      *((void *)v5 + 22) = v67;
      *((_WORD *)v5 + 106) = *((_WORD *)v64 + 40);
      *((void *)v5 + 14) = v64 + 24;
      *((void *)v5 + 25) = v68;
    }

    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v62[32], a2);
    *((void *)v5 + 13) = result;
    *((void *)v5 + 1memset(v56, 0, 7) = *(void *)v62;
    *((_DWORD *)v5 + 38) = *((void *)v62 + 2);
    *((_DWORD *)v5 + 39) = *((void *)v62 + 3);
    return result;
  }

  if (v6 > -16032)
  {
    if (v6 == -16031)
    {
      uint64_t v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v77 = *a3;
      *((void *)v5 + 1) = *((void *)v42 + 1);
      *((void *)v5 + 2) = v77;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      uint64_t v78 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((void *)v5 + 16) = v78;
      if (v78)
      {
        uint64_t v79 = *((void *)v78 + 1);
        *((void *)v5 + memset(v56, 0, 7) = *(void *)v78;
        int v80 = *((_DWORD *)v78 + 4);
        *((_DWORD *)v5 + 21) = v79;
        *((_DWORD *)v5 + 22) = v80;
        uint64_t v82 = *((void *)v78 + 6);
        uint64_t v81 = *((void *)v78 + 7);
        *((void *)v5 + 21) = *((void *)v78 + 5);
        *((void *)v5 + 22) = v81;
        *((_WORD *)v5 + 106) = *((_WORD *)v78 + 40);
        *((void *)v5 + 14) = v78 + 24;
        *((void *)v5 + 25) = v82;
      }

      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v42[41], a2);
      *((void *)v5 + 13) = result;
      *((_DWORD *)v5 + 38) = *((void *)v42 + 3);
      uint64_t v83 = *((void *)v42 + 4);
    }

    else
    {
      if (v6 != -16030)
      {
        if (v6 == -15980)
        {
          int v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v8 = *a3;
          *((void *)v5 + 1) = *((void *)v7 + 1);
          *((void *)v5 + 2) = v8;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t v9 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 16) = v9;
          if (v9)
          {
            uint64_t v10 = *((void *)v9 + 1);
            *((void *)v5 + memset(v56, 0, 7) = *(void *)v9;
            int v11 = *((_DWORD *)v9 + 4);
            *((_DWORD *)v5 + 21) = v10;
            *((_DWORD *)v5 + 22) = v11;
            uint64_t v13 = *((void *)v9 + 6);
            uint64_t v12 = *((void *)v9 + 7);
            *((void *)v5 + 21) = *((void *)v9 + 5);
            *((void *)v5 + 22) = v12;
            *((_WORD *)v5 + 106) = *((_WORD *)v9 + 40);
            *((void *)v5 + 14) = v9 + 24;
            *((void *)v5 + 25) = v13;
          }

          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v7[24], a2);
          *((void *)v5 + 13) = result;
          *((void *)v5 + 5) = *(void *)v7;
          v5[214] = 1;
        }

        return result;
      }

      uint64_t v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v84 = *a3;
      *((void *)v5 + 1) = *((void *)v42 + 1);
      *((void *)v5 + 2) = v84;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      uint64_t v85 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((void *)v5 + 16) = v85;
      if (v85)
      {
        uint64_t v86 = *((void *)v85 + 1);
        *((void *)v5 + memset(v56, 0, 7) = *(void *)v85;
        int v87 = *((_DWORD *)v85 + 4);
        *((_DWORD *)v5 + 21) = v86;
        *((_DWORD *)v5 + 22) = v87;
        uint64_t v89 = *((void *)v85 + 6);
        uint64_t v88 = *((void *)v85 + 7);
        *((void *)v5 + 21) = *((void *)v85 + 5);
        *((void *)v5 + 22) = v88;
        *((_WORD *)v5 + 106) = *((_WORD *)v85 + 40);
        *((void *)v5 + 14) = v85 + 24;
        *((void *)v5 + 25) = v89;
      }

      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v42[49], a2);
      *((void *)v5 + 13) = result;
      *((_DWORD *)v5 + 38) = *((void *)v42 + 4);
      uint64_t v83 = *((void *)v42 + 5);
    }

    *((_DWORD *)v5 + 39) = v83;
LABEL_109:
    *((void *)v5 + 5) = *(void *)v42;
    return result;
  }

  if (v6 != -16098)
  {
    if (v6 != -16096) {
      return result;
    }
    uint64_t v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v49 = *a3;
    *((void *)v5 + 1) = *((void *)v42 + 1);
    *((void *)v5 + 2) = v49;
    *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
    uint64_t v50 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
    *((void *)v5 + 16) = v50;
    if (v50)
    {
      uint64_t v51 = *((void *)v50 + 1);
      *((void *)v5 + memset(v56, 0, 7) = *(void *)v50;
      int v52 = *((_DWORD *)v50 + 4);
      *((_DWORD *)v5 + 21) = v51;
      *((_DWORD *)v5 + 22) = v52;
      uint64_t v54 = *((void *)v50 + 6);
      uint64_t v53 = *((void *)v50 + 7);
      *((void *)v5 + 21) = *((void *)v50 + 5);
      *((void *)v5 + 22) = v53;
      *((_WORD *)v5 + 106) = *((_WORD *)v50 + 40);
      *((void *)v5 + 14) = v50 + 24;
      *((void *)v5 + 25) = v54;
    }

    unsigned int v55 = v42[33];
LABEL_108:
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v55, a2);
    *((void *)v5 + 13) = result;
    goto LABEL_109;
  }

  uint64_t v114 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
  uint64_t v115 = *a3;
  *((void *)v5 + 1) = *((void *)v114 + 1);
  *((void *)v5 + 2) = v115;
  *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
  unsigned int v116 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
  *((void *)v5 + 16) = v116;
  if (v116)
  {
    uint64_t v117 = *((void *)v116 + 1);
    *((void *)v5 + memset(v56, 0, 7) = *(void *)v116;
    int v118 = *((_DWORD *)v116 + 4);
    *((_DWORD *)v5 + 21) = v117;
    *((_DWORD *)v5 + 22) = v118;
    uint64_t v120 = *((void *)v116 + 6);
    uint64_t v119 = *((void *)v116 + 7);
    *((void *)v5 + 21) = *((void *)v116 + 5);
    *((void *)v5 + 22) = v119;
    *((_WORD *)v5 + 106) = *((_WORD *)v116 + 40);
    *((void *)v5 + 14) = v116 + 24;
    *((void *)v5 + 25) = v120;
  }

  uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v114[40], a2);
  *((void *)v5 + 13) = result;
  *((void *)v5 + 1memset(v56, 0, 7) = *(void *)v114;
  *((_DWORD *)v5 + 38) = *((void *)v114 + 2);
  *((_DWORD *)v5 + 39) = *((void *)v114 + 3);
  *((_DWORD *)v5 + 40) = *((void *)v114 + 4);
  return result;
}

char *GTMTLSMRenderPipelineState_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  BOOL v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 > -15462)
  {
    if (v6 > -10221)
    {
      if (v6 <= -10185)
      {
        if (v6 == -10220)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 12) = *((void *)result + 1);
        }

        else if (v6 == -10192)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_DWORD *)v5 + 102) = *((_DWORD *)result + 2);
        }
      }

      else
      {
        switch(v6)
        {
          case -10184:
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((_DWORD *)v5 + 103) = *((void *)result + 1);
            break;
          case -10172:
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((void *)v5 + 50) = *((void *)result + 1);
            break;
          case -10165:
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((void *)v5 + 14) = *((void *)result + 1);
            break;
        }
      }
    }

    else
    {
      switch(v6)
      {
        case -15406:
        case -15405:
          uint64_t v13 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v14 = *a3;
          uint64_t v15 = *(void *)v13;
          *((void *)v5 + 1) = *((void *)v13 + 1);
          *((void *)v5 + 2) = v14;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          *((void *)v5 + 5) = v15;
          uint64_t v16 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + memset(v56, 0, 7) = v16;
          if (v16)
          {
            int v17 = v16;
            memcpy(v5 + 120, v16 + 216, 0x118uLL);
            *((_OWORD *)v5 + 6) = *(_OWORD *)v17;
            *((_DWORD *)v5 + 102) = *((_DWORD *)v17 + 48);
            *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v17 + 98);
            *((void *)v5 + 14) = *((void *)v17 + 2);
          }

          unsigned int v18 = v13[24];
          goto LABEL_31;
        case -15404:
        case -15403:
          uint64_t v30 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v31 = *a3;
          uint64_t v32 = *(void *)v30;
          *((void *)v5 + 1) = *((void *)v30 + 1);
          *((void *)v5 + 2) = v31;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          *((void *)v5 + 5) = v32;
          int v33 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + memset(v56, 0, 7) = v33;
          if (v33)
          {
            uint64_t v34 = v33;
            memcpy(v5 + 120, v33 + 216, 0x118uLL);
            *((_OWORD *)v5 + 6) = *(_OWORD *)v34;
            *((_DWORD *)v5 + 102) = *((_DWORD *)v34 + 48);
            *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v34 + 98);
            *((void *)v5 + 14) = *((void *)v34 + 2);
          }

          unsigned int v18 = v30[32];
LABEL_31:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v18, a2);
          *((void *)v5 + 9) = result;
          break;
        default:
          if (v6 == -15461)
          {
            uint64_t v40 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            uint64_t v41 = *a3;
            uint64_t v42 = *(void *)v40;
            *((void *)v5 + 1) = *((void *)v40 + 1);
            *((void *)v5 + 2) = v41;
            *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
            *((void *)v5 + 5) = v42;
            uint64_t v43 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *((void *)v5 + memset(v56, 0, 7) = v43;
            if (v43)
            {
              unint64_t v44 = v43;
              memcpy(v5 + 120, v43 + 216, 0x118uLL);
              *((_OWORD *)v5 + 6) = *(_OWORD *)v44;
              *((_DWORD *)v5 + 102) = *((_DWORD *)v44 + 48);
              *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v44 + 98);
              *((void *)v5 + 14) = *((void *)v44 + 2);
            }

            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v40[24], a2);
            *((void *)v5 + 10) = result;
          }

          break;
      }
    }
  }

  else if (v6 > -16092)
  {
    switch(v6)
    {
      case -16091:
      case -16089:
        uint64_t v19 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v20 = *a3;
        uint64_t v21 = *(void *)v19;
        *((void *)v5 + 1) = *((void *)v19 + 1);
        *((void *)v5 + 2) = v20;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((void *)v5 + 5) = v21;
        uint64_t v22 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + memset(v56, 0, 7) = v22;
        if (v22)
        {
          uint64_t v23 = v22;
          memcpy(v5 + 120, v22 + 216, 0x118uLL);
          *((_OWORD *)v5 + 6) = *(_OWORD *)v23;
          *((_DWORD *)v5 + 102) = *((_DWORD *)v23 + 48);
          *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v23 + 98);
          *((void *)v5 + 14) = *((void *)v23 + 2);
        }

        unsigned int v24 = v19[24];
        goto LABEL_35;
      case -16090:
      case -16088:
        uint64_t v35 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v36 = *a3;
        uint64_t v37 = *(void *)v35;
        *((void *)v5 + 1) = *((void *)v35 + 1);
        *((void *)v5 + 2) = v36;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((void *)v5 + 5) = v37;
        uint64_t v38 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + memset(v56, 0, 7) = v38;
        if (v38)
        {
          int v39 = v38;
          memcpy(v5 + 120, v38 + 216, 0x118uLL);
          *((_OWORD *)v5 + 6) = *(_OWORD *)v39;
          *((_DWORD *)v5 + 102) = *((_DWORD *)v39 + 48);
          *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v39 + 98);
          *((void *)v5 + 14) = *((void *)v39 + 2);
        }

        unsigned int v24 = v35[32];
LABEL_35:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v24, a2);
        *((void *)v5 + 8) = result;
        break;
      default:
        if (v6 == -15738)
        {
          uint64_t v45 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v46 = *a3;
          uint64_t v47 = *(void *)v45;
          *((void *)v5 + 1) = *((void *)v45 + 1);
          *((void *)v5 + 2) = v46;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          *((void *)v5 + 5) = v47;
          uint64_t v48 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + memset(v56, 0, 7) = v48;
          if (v48)
          {
            uint64_t v49 = v48;
            memcpy(v5 + 120, v48 + 216, 0x118uLL);
            *((_OWORD *)v5 + 6) = *(_OWORD *)v49;
            *((_DWORD *)v5 + 102) = *((_DWORD *)v49 + 48);
            *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v49 + 98);
            *((void *)v5 + 14) = *((void *)v49 + 2);
          }

          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v45[32], a2);
          *((void *)v5 + 11) = result;
        }

        break;
    }
  }

  else
  {
    switch(v6)
    {
      case -16303:
      case -16301:
        int v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v8 = *a3;
        uint64_t v9 = *(void *)v7;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v8;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((void *)v5 + 5) = v9;
        uint64_t v10 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + memset(v56, 0, 7) = v10;
        if (v10)
        {
          int v11 = v10;
          memcpy(v5 + 120, v10 + 216, 0x118uLL);
          *((_OWORD *)v5 + 6) = *(_OWORD *)v11;
          *((_DWORD *)v5 + 102) = *((_DWORD *)v11 + 48);
          *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v11 + 98);
          *((void *)v5 + 14) = *((void *)v11 + 2);
        }

        unsigned int v12 = v7[24];
        goto LABEL_27;
      case -16302:
      case -16300:
        int v25 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v26 = *a3;
        uint64_t v27 = *(void *)v25;
        *((void *)v5 + 1) = *((void *)v25 + 1);
        *((void *)v5 + 2) = v26;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((void *)v5 + 5) = v27;
        uint64_t v28 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + memset(v56, 0, 7) = v28;
        if (v28)
        {
          unsigned int v29 = v28;
          memcpy(v5 + 120, v28 + 216, 0x118uLL);
          *((_OWORD *)v5 + 6) = *(_OWORD *)v29;
          *((_DWORD *)v5 + 102) = *((_DWORD *)v29 + 48);
          *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v29 + 98);
          *((void *)v5 + 14) = *((void *)v29 + 2);
        }

        unsigned int v12 = v25[32];
LABEL_27:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v12, a2);
        *((void *)v5 + 6) = result;
        break;
      default:
        if (v6 == -16242) {
          *((void *)result + 3) = *a3;
        }
        break;
    }
  }

  return result;
}

char *GTMTLSMComputePipelineState_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  BOOL v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 > -16102)
  {
    if (v6 > -10215)
    {
      if (v6 > -10172)
      {
        if (v6 == -10171)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 22) = *((void *)result + 1);
        }

        else if (v6 == -10162)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 14) = *((void *)result + 1);
        }
      }

      else if (v6 == -10214)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((void *)v5 + 12) = *((void *)result + 1);
      }

      else if (v6 == -10191)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_DWORD *)v5 + 48) = *((_DWORD *)result + 2);
      }
    }

    else if (v6 > -15741)
    {
      if (v6 == -15740)
      {
        uint64_t v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v43 = *a3;
        uint64_t v44 = *(void *)v42;
        *((void *)v5 + 1) = *((void *)v42 + 1);
        *((void *)v5 + 2) = v43;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((void *)v5 + 5) = v44;
        uint64_t v45 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 8) = v45;
        if (v45)
        {
          __int128 v46 = *(_OWORD *)(v45 + 104);
          __int128 v47 = *(_OWORD *)(v45 + 120);
          __int128 v48 = *(_OWORD *)(v45 + 136);
          *((void *)v5 + 21) = *((void *)v45 + 19);
          *(_OWORD *)(v5 + 152) = v48;
          *(_OWORD *)(v5 + 136) = v47;
          *(_OWORD *)(v5 + 120) = v46;
          *((_OWORD *)v5 + 6) = *(_OWORD *)v45;
          *((_DWORD *)v5 + 48) = *((_DWORD *)v45 + 22);
          *((void *)v5 + 14) = *((void *)v45 + 2);
        }

        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v42[32], a2);
        *((void *)v5 + 11) = result;
      }

      else if (v6 == -15541)
      {
        uint64_t v21 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v22 = *a3;
        uint64_t v23 = *(void *)v21;
        *((void *)v5 + 1) = *((void *)v21 + 1);
        *((void *)v5 + 2) = v22;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((void *)v5 + 5) = v23;
        unsigned int v24 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 8) = v24;
        if (v24)
        {
          __int128 v25 = *(_OWORD *)(v24 + 104);
          __int128 v26 = *(_OWORD *)(v24 + 120);
          __int128 v27 = *(_OWORD *)(v24 + 136);
          *((void *)v5 + 21) = *((void *)v24 + 19);
          *(_OWORD *)(v5 + 152) = v27;
          *(_OWORD *)(v5 + 136) = v26;
          *(_OWORD *)(v5 + 120) = v25;
          *((_OWORD *)v5 + 6) = *(_OWORD *)v24;
          *((_DWORD *)v5 + 48) = *((_DWORD *)v24 + 22);
          *((void *)v5 + 14) = *((void *)v24 + 2);
        }

        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v21[24], a2);
        *((void *)v5 + 23) = result;
      }
    }

    else if (v6 == -16101)
    {
      uint64_t v35 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v36 = *a3;
      uint64_t v37 = *(void *)v35;
      *((void *)v5 + 1) = *((void *)v35 + 1);
      *((void *)v5 + 2) = v36;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      *((void *)v5 + 5) = v37;
      uint64_t v38 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((void *)v5 + 8) = v38;
      if (v38)
      {
        __int128 v39 = *(_OWORD *)(v38 + 104);
        __int128 v40 = *(_OWORD *)(v38 + 120);
        __int128 v41 = *(_OWORD *)(v38 + 136);
        *((void *)v5 + 21) = *((void *)v38 + 19);
        *(_OWORD *)(v5 + 152) = v41;
        *(_OWORD *)(v5 + 136) = v40;
        *(_OWORD *)(v5 + 120) = v39;
        *((_OWORD *)v5 + 6) = *(_OWORD *)v38;
        *((_DWORD *)v5 + 48) = *((_DWORD *)v38 + 22);
        *((void *)v5 + 14) = *((void *)v38 + 2);
      }

      *((void *)v5 + 9) = GTTraceFunc_argumentBytesWithMap(a3, v35[24], a2);
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v35[25], a2);
      *((void *)v5 + 10) = result;
    }

    else if (v6 == -15989)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((void *)v5 + 13) = *((void *)result + 1);
    }
  }

  else
  {
    switch(v6)
    {
      case -16299:
      case -16298:
      case -16297:
      case -16296:
        uint64_t v15 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v16 = *a3;
        uint64_t v17 = *(void *)v15;
        *((void *)v5 + 1) = *((void *)v15 + 1);
        *((void *)v5 + 2) = v16;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((void *)v5 + 5) = v17;
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 8) = result;
        if (result)
        {
          __int128 v18 = *(_OWORD *)(result + 104);
          __int128 v19 = *(_OWORD *)(result + 120);
          __int128 v20 = *(_OWORD *)(result + 136);
          *((void *)v5 + 21) = *((void *)result + 19);
          *(_OWORD *)(v5 + 152) = v20;
          *(_OWORD *)(v5 + 136) = v19;
          *(_OWORD *)(v5 + 120) = v18;
          *((_OWORD *)v5 + 6) = *(_OWORD *)result;
          *((_DWORD *)v5 + 48) = *((_DWORD *)result + 22);
          *((void *)v5 + 14) = *((void *)result + 2);
        }

        *((void *)v5 + 6) = *((void *)v15 + 2);
        break;
      default:
        switch(v6)
        {
          case -16200:
          case -16198:
            int v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            uint64_t v8 = *a3;
            uint64_t v9 = *(void *)v7;
            *((void *)v5 + 1) = *((void *)v7 + 1);
            *((void *)v5 + 2) = v8;
            *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
            *((void *)v5 + 5) = v9;
            uint64_t v10 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *((void *)v5 + 8) = v10;
            if (v10)
            {
              __int128 v11 = *(_OWORD *)(v10 + 104);
              __int128 v12 = *(_OWORD *)(v10 + 120);
              __int128 v13 = *(_OWORD *)(v10 + 136);
              *((void *)v5 + 21) = *((void *)v10 + 19);
              *(_OWORD *)(v5 + 152) = v13;
              *(_OWORD *)(v5 + 136) = v12;
              *(_OWORD *)(v5 + 120) = v11;
              *((_OWORD *)v5 + 6) = *(_OWORD *)v10;
              *((_DWORD *)v5 + 48) = *((_DWORD *)v10 + 22);
              *((void *)v5 + 14) = *((void *)v10 + 2);
            }

            unsigned int v14 = v7[24];
            goto LABEL_31;
          case -16199:
          case -16197:
            uint64_t v28 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            uint64_t v29 = *a3;
            uint64_t v30 = *(void *)v28;
            *((void *)v5 + 1) = *((void *)v28 + 1);
            *((void *)v5 + 2) = v29;
            *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
            *((void *)v5 + 5) = v30;
            uint64_t v31 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *((void *)v5 + 8) = v31;
            if (v31)
            {
              __int128 v32 = *(_OWORD *)(v31 + 104);
              __int128 v33 = *(_OWORD *)(v31 + 120);
              __int128 v34 = *(_OWORD *)(v31 + 136);
              *((void *)v5 + 21) = *((void *)v31 + 19);
              *(_OWORD *)(v5 + 152) = v34;
              *(_OWORD *)(v5 + 136) = v33;
              *(_OWORD *)(v5 + 120) = v32;
              *((_OWORD *)v5 + 6) = *(_OWORD *)v31;
              *((_DWORD *)v5 + 48) = *((_DWORD *)v31 + 22);
              *((void *)v5 + 14) = *((void *)v31 + 2);
            }

            unsigned int v14 = v28[32];
LABEL_31:
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v14, a2);
            *((void *)v5 + 6) = *((void *)result + 106);
            *((void *)v5 + memset(v56, 0, 7) = result;
            break;
          default:
            if (v6 == -16321) {
              *((void *)result + 3) = *a3;
            }
            break;
        }

        break;
    }
  }

  return result;
}

char *GTMTLSMDrawable_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = result;
  int v5 = *((_DWORD *)a3 + 2);
  if (v5 > -7162)
  {
    if (v5 == -7161)
    {
      *((void *)result + 3) = *a3;
    }

    else if (v5 == -6655)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v8 = *a3;
      *((void *)v4 + 1) = *((void *)result + 1);
      *((void *)v4 + 2) = v8;
      *((_DWORD *)v4 + 1) = *((_DWORD *)a3 + 2);
    }
  }

  else if (v5 == -7167)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    *((void *)v4 + 6) = *((void *)result + 1);
  }

  else if (v5 == -7166)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v6 = *a3;
    uint64_t v7 = *(void *)result;
    *((void *)v4 + 1) = *((void *)result + 1);
    *((void *)v4 + 2) = v6;
    *((_DWORD *)v4 + 1) = *((_DWORD *)a3 + 2);
    *((void *)v4 + 5) = v7;
  }

  return result;
}

char *GTMTLSMAccelerationStructure_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  int v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 <= -10198)
  {
    if (v6 > -15507)
    {
      switch(v6)
      {
        case -15359:
          uint64_t v8 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v9 = *a3;
          *((void *)v5 + 1) = *((void *)v8 + 1);
          *((void *)v5 + 2) = v9;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v10 = *((void *)result + 1);
            *((void *)v5 + memset(v56, 0, 7) = *(void *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            uint64_t v11 = *((void *)result + 4);
            *((void *)v5 + 16) = *((void *)result + 3);
            *((void *)v5 + 23) = v11;
            uint64_t v12 = *((void *)result + 9);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            *((void *)v5 + 20) = v12;
            __int128 v13 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v13;
            *((_DWORD *)v5 + 20) = v12 - v13;
            *((_DWORD *)v5 + 21) = v10;
            *((void *)v5 + 24) = *((void *)result + 12);
            *((void *)v5 + 1memset(v56, 0, 7) = *((void *)result + 7);
          }

          *((void *)v5 + 5) = *(void *)v8;
          uint64_t v14 = *((void *)v8 + 2);
          *((void *)v5 + 25) = *((void *)v8 + 3);
          uint64_t v15 = *((void *)v8 + 4);
          *((void *)v5 + 18) = v14;
          *((void *)v5 + 19) = v15;
          return result;
        case -15358:
          goto LABEL_31;
        case -15357:
          return result;
        case -15356:
          uint64_t v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v43 = *a3;
          *((void *)v5 + 1) = *((void *)v42 + 1);
          *((void *)v5 + 2) = v43;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v44 = *((void *)result + 1);
            *((void *)v5 + memset(v56, 0, 7) = *(void *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            uint64_t v45 = *((void *)result + 4);
            *((void *)v5 + 16) = *((void *)result + 3);
            *((void *)v5 + 23) = v45;
            uint64_t v46 = *((void *)result + 5);
            *((void *)v5 + 25) = *((void *)result + 6);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            uint64_t v47 = *((void *)result + 9);
            *((void *)v5 + 19) = v46;
            *((void *)v5 + 20) = v47;
            __int128 v48 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v48;
            *((_DWORD *)v5 + 20) = v47 - v48;
            *((_DWORD *)v5 + 21) = v44;
            *((void *)v5 + 24) = *((void *)result + 12);
            *((void *)v5 + 1memset(v56, 0, 7) = *((void *)result + 7);
          }

          goto LABEL_62;
        case -15355:
          uint64_t v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v49 = *a3;
          *((void *)v5 + 1) = *((void *)v42 + 1);
          *((void *)v5 + 2) = v49;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v50 = *((void *)result + 1);
            *((void *)v5 + memset(v56, 0, 7) = *(void *)result;
            int v51 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v50;
            *((_DWORD *)v5 + 22) = v51;
            uint64_t v52 = *((void *)result + 4);
            *((void *)v5 + 16) = *((void *)result + 3);
            uint64_t v53 = *((void *)result + 6);
            *((void *)v5 + 19) = *((void *)result + 5);
            *((void *)v5 + 23) = v52;
            *((void *)v5 + 25) = v53;
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            *((_OWORD *)v5 + 10) = *(_OWORD *)(result + 72);
            uint64_t v54 = *((void *)result + 12);
            *((void *)v5 + 22) = *((void *)result + 11);
            *((void *)v5 + 24) = v54;
            *((void *)v5 + 1memset(v56, 0, 7) = *((void *)result + 7);
          }

          *((_DWORD *)v5 + 20) = *((void *)v42 + 2);
LABEL_62:
          *((void *)v5 + 6) = *(void *)v42;
          return result;
        case -15354:
          __int128 v33 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v55 = *a3;
          *((void *)v5 + 1) = *((void *)v33 + 1);
          *((void *)v5 + 2) = v55;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v56 = *((void *)result + 1);
            *((void *)v5 + memset(v56, 0, 7) = *(void *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            *((void *)v5 + 16) = *((void *)result + 3);
            uint64_t v57 = *((void *)result + 5);
            *((void *)v5 + 25) = *((void *)result + 6);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            uint64_t v58 = *((void *)result + 9);
            *((void *)v5 + 19) = v57;
            *((void *)v5 + 20) = v58;
            __int128 v59 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v59;
            *((_DWORD *)v5 + 20) = v58 - v59;
            *((_DWORD *)v5 + 21) = v56;
            *((void *)v5 + 24) = *((void *)result + 12);
            *((void *)v5 + 1memset(v56, 0, 7) = *((void *)result + 7);
          }

          *((void *)v5 + 6) = *(void *)v33;
          goto LABEL_66;
        case -15353:
          int v60 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v61 = *a3;
          *((void *)v5 + 1) = *((void *)v60 + 1);
          *((void *)v5 + 2) = v61;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v62 = *((void *)result + 1);
            *((void *)v5 + memset(v56, 0, 7) = *(void *)result;
            int v63 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v62;
            *((_DWORD *)v5 + 22) = v63;
            *((void *)v5 + 16) = *((void *)result + 3);
            uint64_t v64 = *((void *)result + 6);
            *((void *)v5 + 19) = *((void *)result + 5);
            *((void *)v5 + 25) = v64;
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            *((_OWORD *)v5 + 10) = *(_OWORD *)(result + 72);
            uint64_t v65 = *((void *)result + 12);
            *((void *)v5 + 22) = *((void *)result + 11);
            *((void *)v5 + 24) = v65;
            *((void *)v5 + 1memset(v56, 0, 7) = *((void *)result + 7);
          }

          *((void *)v5 + 6) = *(void *)v60;
          uint64_t v66 = *((void *)v60 + 2);
          *((_DWORD *)v5 + 20) = *((void *)v60 + 3);
          *((void *)v5 + 23) = v66;
          return result;
        case -15352:
          uint64_t v67 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v68 = *a3;
          *((void *)v5 + 1) = *((void *)v67 + 1);
          *((void *)v5 + 2) = v68;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v69 = *((void *)result + 1);
            *((void *)v5 + memset(v56, 0, 7) = *(void *)result;
            int v70 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v69;
            *((_DWORD *)v5 + 22) = v70;
            *((void *)v5 + 16) = *((void *)result + 3);
            *((void *)v5 + 25) = *((void *)result + 6);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            *((_OWORD *)v5 + 10) = *(_OWORD *)(result + 72);
            uint64_t v71 = *((void *)result + 12);
            *((void *)v5 + 22) = *((void *)result + 11);
            *((void *)v5 + 24) = v71;
            *((void *)v5 + 1memset(v56, 0, 7) = *((void *)result + 7);
          }

          *((void *)v5 + 6) = *(void *)v67;
          uint64_t v72 = *((void *)v67 + 2);
          *((_DWORD *)v5 + 20) = *((void *)v67 + 3);
          *((void *)v5 + 23) = v72;
          uint64_t v39 = *((void *)v67 + 4);
          goto LABEL_73;
        case -15351:
          int v73 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v74 = *a3;
          *((void *)v5 + 1) = *((void *)v73 + 1);
          *((void *)v5 + 2) = v74;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v75 = *((void *)result + 1);
            *((void *)v5 + memset(v56, 0, 7) = *(void *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            *((void *)v5 + 16) = *((void *)result + 3);
            *((void *)v5 + 25) = *((void *)result + 6);
            uint64_t v76 = *((void *)result + 9);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            *((void *)v5 + 20) = v76;
            __int128 v77 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v77;
            *((_DWORD *)v5 + 20) = v76 - v77;
            *((_DWORD *)v5 + 21) = v75;
            *((void *)v5 + 24) = *((void *)result + 12);
            *((void *)v5 + 1memset(v56, 0, 7) = *((void *)result + 7);
          }

          *((void *)v5 + 6) = *(void *)v73;
          goto LABEL_80;
        default:
          if (v6 == -15506)
          {
            int v73 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            uint64_t v78 = *a3;
            *((void *)v5 + 1) = *((void *)v73 + 1);
            *((void *)v5 + 2) = v78;
            *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *((void *)v5 + 15) = result;
            if (result)
            {
              uint64_t v79 = *((void *)result + 1);
              *((void *)v5 + memset(v56, 0, 7) = *(void *)result;
              *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
              *((void *)v5 + 16) = *((void *)result + 3);
              *((void *)v5 + 25) = *((void *)result + 6);
              uint64_t v80 = *((void *)result + 9);
              *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
              *((void *)v5 + 20) = v80;
              __int128 v81 = *((_OWORD *)result + 5);
              *(_OWORD *)(v5 + 168) = v81;
              *((_DWORD *)v5 + 20) = v80 - v81;
              *((_DWORD *)v5 + 21) = v79;
              *((void *)v5 + 24) = *((void *)result + 12);
              *((void *)v5 + 1memset(v56, 0, 7) = *((void *)result + 7);
            }

            *((void *)v5 + 5) = *(void *)v73;
LABEL_80:
            uint64_t v82 = *((void *)v73 + 3);
            *((void *)v5 + 23) = *((void *)v73 + 2);
            *((void *)v5 + 19) = v82;
          }

          else if (v6 == -15464)
          {
            unsigned int v24 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            uint64_t v25 = *a3;
            *((void *)v5 + 1) = *((void *)v24 + 1);
            *((void *)v5 + 2) = v25;
            *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *((void *)v5 + 15) = result;
            if (result)
            {
              uint64_t v26 = *((void *)result + 1);
              *((void *)v5 + memset(v56, 0, 7) = *(void *)result;
              *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
              uint64_t v27 = *((void *)result + 4);
              *((void *)v5 + 16) = *((void *)result + 3);
              uint64_t v28 = *((void *)result + 5);
              *((void *)v5 + 23) = v27;
              *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
              uint64_t v29 = *((void *)result + 9);
              *((void *)v5 + 19) = v28;
              *((void *)v5 + 20) = v29;
              __int128 v30 = *((_OWORD *)result + 5);
              *(_OWORD *)(v5 + 168) = v30;
              *((_DWORD *)v5 + 20) = v29 - v30;
              *((_DWORD *)v5 + 21) = v26;
              *((void *)v5 + 24) = *((void *)result + 12);
              *((void *)v5 + 1memset(v56, 0, 7) = *((void *)result + 7);
            }

            *((void *)v5 + 5) = *(void *)v24;
            uint64_t v31 = *((void *)v24 + 3);
            *((void *)v5 + 18) = *((void *)v24 + 2);
            *((void *)v5 + 25) = v31;
          }

          break;
      }
    }

    else if (v6 > -15616)
    {
      switch(v6)
      {
        case -15615:
LABEL_31:
          uint64_t v17 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v18 = *a3;
          *((void *)v5 + 1) = *((void *)v17 + 1);
          *((void *)v5 + 2) = v18;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v19 = *((void *)result + 1);
            *((void *)v5 + memset(v56, 0, 7) = *(void *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            uint64_t v20 = *((void *)result + 4);
            *((void *)v5 + 16) = *((void *)result + 3);
            *((void *)v5 + 23) = v20;
            uint64_t v21 = *((void *)result + 5);
            *((void *)v5 + 25) = *((void *)result + 6);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            uint64_t v22 = *((void *)result + 9);
            *((void *)v5 + 19) = v21;
            *((void *)v5 + 20) = v22;
            __int128 v23 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v23;
            *((_DWORD *)v5 + 20) = v22 - v23;
            *((_DWORD *)v5 + 21) = v19;
            *((void *)v5 + 24) = *((void *)result + 12);
            *((void *)v5 + 1memset(v56, 0, 7) = *((void *)result + 7);
          }

          *((void *)v5 + 5) = *(void *)v17;
          break;
        case -15614:
          __int128 v33 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v34 = *a3;
          *((void *)v5 + 1) = *((void *)v33 + 1);
          *((void *)v5 + 2) = v34;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v35 = *((void *)result + 1);
            *((void *)v5 + memset(v56, 0, 7) = *(void *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            *((void *)v5 + 16) = *((void *)result + 3);
            uint64_t v36 = *((void *)result + 5);
            *((void *)v5 + 25) = *((void *)result + 6);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            uint64_t v37 = *((void *)result + 9);
            *((void *)v5 + 19) = v36;
            *((void *)v5 + 20) = v37;
            __int128 v38 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v38;
            *((_DWORD *)v5 + 20) = v37 - v38;
            *((_DWORD *)v5 + 21) = v35;
            *((void *)v5 + 24) = *((void *)result + 12);
            *((void *)v5 + 1memset(v56, 0, 7) = *((void *)result + 7);
          }

          *((void *)v5 + 5) = *(void *)v33;
LABEL_66:
          *((void *)v5 + 23) = *((void *)v33 + 2);
          break;
        case -15552:
          uint64_t v16 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v16[8], a2);
          *((void *)v5 + 14) = result;
          if (result)
          {
            v5[104] = (*result & 0xFE) == 2;
            v5[105] = 1;
            v5[107] = (result[1] & 4) != 0;
          }

          break;
      }
    }

    else
    {
      switch(v6)
      {
        case -15661:
          uint64_t v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v7[8], a2);
          *((void *)v5 + 9) = result;
          break;
        case -15660:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_DWORD *)v5 + 22) = *((_DWORD *)result + 2);
          break;
        case -15659:
          *((void *)result + 3) = *a3;
          break;
        case -15651:
          result[100] = 1;
          break;
        case -15650:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v32 = *((void *)result + 2);
          if (v32 != 1) {
            *((_WORD *)v5 + 49) = v32;
          }
          break;
        default:
          return result;
      }
    }

    return result;
  }

  if (v6 > -10174)
  {
    if (v6 <= -10160)
    {
      switch(v6)
      {
        case -10173:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 8) = *((void *)result + 1);
          break;
        case -10170:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v39 = *((void *)result + 1);
LABEL_73:
          *((void *)v5 + 19) = v39;
          break;
        case -10169:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_DWORD *)v5 + 20) = *((void *)result + 1);
          break;
        case -10167:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 1memset(v56, 0, 7) = *((void *)result + 1);
          break;
        default:
          return result;
      }

      return result;
    }

    if (v6 == -10159)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      int16x8_t v41 = *(int16x8_t *)(result + 8);
    }

    else
    {
      if (v6 != -10158)
      {
        if (v6 == -10154)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          if (*((void *)v5 + 1) == *((void *)result + 1))
          {
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, result[16], a2);
            *((void *)v5 + 14) = result;
          }
        }

        return result;
      }

      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      if (*((void *)v5 + 1) != *((void *)result + 1)) {
        return result;
      }
      int16x8_t v41 = *((int16x8_t *)result + 1);
    }

    *(int16x4_t *)v41.i8 = vmovn_s32((int32x4_t)v41);
    *((_DWORD *)v5 + 26) = vmovn_s16(v41).u32[0];
    return result;
  }

  if (v6 <= -10196)
  {
    if (v6 == -10197)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((void *)v5 + memset(v56, 0, 7) = *((void *)result + 1);
    }

    else
    {
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((_DWORD *)v5 + 21) = *((void *)result + 1);
    }
  }

  else
  {
    switch(v6)
    {
      case -10195:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_DWORD *)v5 + 23) = *((_DWORD *)result + 2);
        break;
      case -10182:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_OWORD *)v5 + 10) = *(_OWORD *)(result + 8);
        uint64_t v40 = *((void *)result + 4);
        *((void *)v5 + 22) = *((void *)result + 3);
        *((_WORD *)v5 + 48) = v40;
        *((_OWORD *)v5 + 12) = *(_OWORD *)(result + 40);
        break;
      case -10181:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((void *)v5 + 16) = *((void *)result + 1);
        break;
    }
  }

  return result;
}

char *GTMTLSMIntersectionFunctionTable_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  int v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 > -15444)
  {
    if (v6 <= -10181)
    {
      switch(v6)
      {
        case -15443:
          __int128 v30 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v31 = *a3;
          *((void *)v5 + 1) = *((void *)v30 + 1);
          *((void *)v5 + 2) = v31;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t v32 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 14) = v32;
          if (v32)
          {
            uint64_t v33 = *((void *)v32 + 1);
            *((void *)v5 + memset(v56, 0, 7) = *(void *)v32;
            int v34 = *((_DWORD *)v32 + 4);
            *((_DWORD *)v5 + 21) = v33;
            *((_DWORD *)v5 + 22) = v34;
            *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v32 + 24), *(int8x16_t *)(v32 + 24), 8uLL);
            *((void *)v5 + 19) = *((void *)v32 + 5);
          }

          *((void *)v5 + 16) = *(void *)v30;
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v30[16], a2);
          *((void *)v5 + 13) = result;
          char v18 = 2;
          break;
        case -15442:
          uint64_t v25 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v26 = *a3;
          *((void *)v5 + 1) = *((void *)v25 + 1);
          *((void *)v5 + 2) = v26;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t v27 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 14) = v27;
          if (v27)
          {
            uint64_t v28 = *((void *)v27 + 1);
            *((void *)v5 + memset(v56, 0, 7) = *(void *)v27;
            int v29 = *((_DWORD *)v27 + 4);
            *((_DWORD *)v5 + 21) = v28;
            *((_DWORD *)v5 + 22) = v29;
            *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v27 + 24), *(int8x16_t *)(v27 + 24), 8uLL);
            *((void *)v5 + 19) = *((void *)v27 + 5);
          }

          *((void *)v5 + 16) = *(void *)v25;
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v25[16], a2);
          *((void *)v5 + 13) = result;
          char v18 = 4;
          break;
        case -15441:
          __int128 v13 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v14 = *a3;
          *((void *)v5 + 1) = *((void *)v13 + 1);
          *((void *)v5 + 2) = v14;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t v15 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 14) = v15;
          if (v15)
          {
            uint64_t v16 = *((void *)v15 + 1);
            *((void *)v5 + memset(v56, 0, 7) = *(void *)v15;
            int v17 = *((_DWORD *)v15 + 4);
            *((_DWORD *)v5 + 21) = v16;
            *((_DWORD *)v5 + 22) = v17;
            *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v15 + 24), *(int8x16_t *)(v15 + 24), 8uLL);
            *((void *)v5 + 19) = *((void *)v15 + 5);
          }

          *((void *)v5 + 16) = *(void *)v13;
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v13[16], a2);
          *((void *)v5 + 13) = result;
          char v18 = 1;
          break;
        default:
          return result;
      }

      v5[160] = v18;
    }

    else
    {
      switch(v6)
      {
        case -10180:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 8) = *((void *)result + 1);
          break;
        case -10179:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_DWORD *)v5 + 21) = *((void *)result + 1);
          break;
        case -10178:
        case -10177:
          return result;
        case -10176:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + memset(v56, 0, 7) = *((void *)result + 1);
          break;
        case -10175:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 18) = *((void *)result + 1);
          break;
        default:
          if (v6 == -10161)
          {
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((void *)v5 + 19) = *((void *)result + 1);
          }

          break;
      }
    }
  }

  else if (v6 > -15561)
  {
    if (v6 > -15541)
    {
      if (v6 == -15540)
      {
        uint64_t v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v35 = *a3;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v35;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        uint64_t v36 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 14) = v36;
        if (v36)
        {
          uint64_t v37 = *((void *)v36 + 1);
          *((void *)v5 + memset(v56, 0, 7) = *(void *)v36;
          int v38 = *((_DWORD *)v36 + 4);
          *((_DWORD *)v5 + 21) = v37;
          *((_DWORD *)v5 + 22) = v38;
          *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v36 + 24), *(int8x16_t *)(v36 + 24), 8uLL);
          *((void *)v5 + 19) = *((void *)v36 + 5);
        }

        *((void *)v5 + 15) = *(void *)v7;
LABEL_45:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v7[16], a2);
        *((void *)v5 + 13) = result;
      }

      else if (v6 == -15462)
      {
        uint64_t v19 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v20 = *a3;
        *((void *)v5 + 1) = *((void *)v19 + 1);
        *((void *)v5 + 2) = v20;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        uint64_t v21 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 14) = v21;
        if (v21)
        {
          uint64_t v22 = *((void *)v21 + 1);
          *((void *)v5 + memset(v56, 0, 7) = *(void *)v21;
          int v23 = *((_DWORD *)v21 + 4);
          *((_DWORD *)v5 + 21) = v22;
          *((_DWORD *)v5 + 22) = v23;
          *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v21 + 24), *(int8x16_t *)(v21 + 24), 8uLL);
          *((void *)v5 + 19) = *((void *)v21 + 5);
        }

        *((void *)v5 + 16) = *(void *)v19;
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v19[24], a2);
        *((void *)v5 + 13) = result;
        v5[160] = *((void *)v19 + 2);
      }
    }

    else if (v6 == -15560)
    {
      result[100] = 1;
    }

    else if (v6 == -15557)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v12 = *((void *)result + 2);
      if (v12 != 1) {
        *((_WORD *)v5 + 49) = v12;
      }
    }
  }

  else
  {
    switch(v6)
    {
      case -15577:
        uint64_t v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v8 = *a3;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v8;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        uint64_t v9 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 14) = v9;
        if (v9)
        {
          uint64_t v10 = *((void *)v9 + 1);
          *((void *)v5 + memset(v56, 0, 7) = *(void *)v9;
          int v11 = *((_DWORD *)v9 + 4);
          *((_DWORD *)v5 + 21) = v10;
          *((_DWORD *)v5 + 22) = v11;
          *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v9 + 24), *(int8x16_t *)(v9 + 24), 8uLL);
          *((void *)v5 + 19) = *((void *)v9 + 5);
        }

        *((void *)v5 + 5) = *(void *)v7;
        goto LABEL_45;
      case -15570:
        unsigned int v24 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v24[8], a2);
        *((void *)v5 + 9) = result;
        break;
      case -15569:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_DWORD *)v5 + 22) = *((_DWORD *)result + 2);
        break;
      case -15568:
        *((void *)result + 3) = *a3;
        break;
      default:
        return result;
    }
  }

  return result;
}

char *GTMTLSMIntersectionFunctionTableStateful_processTraceFuncWithMap( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v7 = *(_DWORD *)(a3 + 8);
  if (v7 <= -15531)
  {
    if (v7 > -15546)
    {
      if (v7 == -15545)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v45 = *((void *)result + 1);
        uint64_t v46 = a1 + 184 + 24LL * *((void *)result + 3);
        *(_DWORD *)uint64_t v46 = v45 != 0;
        *(void *)(v46 + 8) = v45;
        *(void *)(a1 + 184 + 24LL * *((void *)result + 3) + 16) = *((void *)result + 2);
        return result;
      }

      if (v7 != -15544) {
        return GTMTLSMIntersectionFunctionTable_processTraceFuncWithMap((char *)a1, a2, (uint64_t *)a3);
      }
      uint64_t v26 = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v27 = GTTraceFunc_argumentBytesWithMap((void *)a3, v26[24], a2);
      uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, v26[25], a2);
      if (*((void *)v26 + 2))
      {
        unint64_t v28 = 0LL;
        do
        {
          uint64_t v29 = *(void *)&v27[8 * v28];
          uint64_t v30 = a1 + 184 + 24 * (v28 + *((void *)v26 + 1));
          *(_DWORD *)uint64_t v30 = v29 != 0;
          *(void *)(v30 + 8) = v29;
          *(void *)(a1 + 184 + 24 * (v28 + *((void *)v26 + 1)) + 16) = *(void *)&result[8 * v28];
          ++v28;
        }

        while (*((void *)v26 + 2) > v28);
      }

      return result;
    }

    if (v7 != -15559)
    {
      if (v7 != -15558) {
        return GTMTLSMIntersectionFunctionTable_processTraceFuncWithMap((char *)a1, a2, (uint64_t *)a3);
      }
      uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      if (*(void *)(a1 + 168))
      {
        __int128 v13 = result;
        uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, result[24], a2);
        if (*((void *)v13 + 2))
        {
          unint64_t v14 = 0LL;
          do
          {
            uint64_t v15 = *(void *)(a1 + 168) + 16 * (v14 + *((void *)v13 + 1));
            *(_DWORD *)uint64_t v15 = 1;
            *(void *)(v15 + 8) = *(void *)&result[8 * v14++];
          }

          while (*((void *)v13 + 2) > v14);
        }
      }

      return result;
    }

    uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v40 = *(void *)(a1 + 168);
    if (!v40) {
      return result;
    }
    uint64_t v10 = *((void *)result + 1);
    uint64_t v11 = v40 + 16LL * *((void *)result + 2);
    int v12 = 1;
LABEL_51:
    *(_DWORD *)uint64_t v11 = v12;
    *(void *)(v11 + 8) = v10;
    return result;
  }

  if (v7 <= -15259)
  {
    switch(v7)
    {
      case -15530:
        uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v9 = *(void *)(a1 + 168);
        if (!v9) {
          return result;
        }
        uint64_t v10 = *((void *)result + 1);
        uint64_t v11 = v9 + 16LL * *((void *)result + 2);
        int v12 = 2;
        break;
      case -15529:
        uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        if (*(void *)(a1 + 168) && *((void *)result + 3))
        {
          unint64_t v31 = 0LL;
          do
          {
            uint64_t v32 = *((void *)result + 1);
            uint64_t v33 = *(void *)(a1 + 168) + 16 * (v31 + *((void *)result + 2));
            *(_DWORD *)uint64_t v33 = 2;
            *(void *)(v33 + 8) = v32;
            ++v31;
          }

          while (*((void *)result + 3) > v31);
        }

        return result;
      case -15526:
        uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v25 = *((void *)result + 1);
        int v34 = 2 * (v25 != 0);
        uint64_t v35 = a1 + 24LL * *((void *)result + 2);
        goto LABEL_42;
      case -15525:
        uint64_t v36 = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, v36[24], a2);
        if (*((void *)v36 + 2))
        {
          unint64_t v37 = 0LL;
          do
          {
            uint64_t v38 = *(void *)&result[8 * v37];
            uint64_t v39 = a1 + 24 * (v37 + *((void *)v36 + 1));
            *(_DWORD *)(v39 + 184) = 2 * (v38 != 0);
            *(void *)(v39 + 192) = v38;
            ++v37;
          }

          while (*((void *)v36 + 2) > v37);
        }

        return result;
      default:
        return GTMTLSMIntersectionFunctionTable_processTraceFuncWithMap((char *)a1, a2, (uint64_t *)a3);
    }

    goto LABEL_51;
  }

  if (v7 == -15258)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v41 = *(void *)(a1 + 168);
    if (!v41) {
      return result;
    }
    uint64_t v10 = *((void *)result + 1);
    uint64_t v11 = v41 + 16LL * *((void *)result + 2);
    int v12 = 3;
    goto LABEL_51;
  }

  if (v7 != -15257)
  {
    if (v7 == -10152)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      if (!a4) {
        return result;
      }
      uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, result[8], a2);
      unint64_t v17 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      char v18 = result;
      uint64_t v19 = 0LL;
      for (uint64_t i = (_DWORD *)(a1 + 184); ; i += 6)
      {
        uint64_t v21 = &v18[8 * v19];
        uint64_t v22 = *((void *)v21 + 1);
        if (v22)
        {
          uint64_t result = (char *)GTMTLGPUAddressResource_resourceForGPUAddress( *(void **)(*a4 + 24),  *(int *)(*a4 + 12),  *((void *)v21 + 1));
          if (result)
          {
            uint64_t v23 = *((void *)result + 2);
            if (v23)
            {
              unint64_t v47 = *(void *)result;
              uint64_t v48 = a1 + 24 * v19;
              *(_DWORD *)(v48 + 184) = 1;
              *(void *)(v48 + 192) = v23;
              *(void *)(v48 + 200) = v22 - v47;
              return result;
            }
          }

          uint64_t v49 = v22;
          uint64_t result = (char *)find_entry(a4[9], &v49, 8uLL, 0LL);
          if (*(void *)result)
          {
            uint64_t v24 = *(void *)(*(void *)result + 32LL);
            if (v24)
            {
              uint64_t v25 = *(void *)(v24 + 8);
              if (v25)
              {
                uint64_t v35 = a1 + 24 * v19;
                int v34 = 2;
LABEL_42:
                *(_DWORD *)(v35 + 184) = v34;
                *(void *)(v35 + 192) = v25;
                return result;
              }
            }
          }

          unint64_t v17 = *(void *)v18;
        }

        else
        {
          _DWORD *i = 0;
        }

        if (v17 <= ++v19) {
          return result;
        }
      }
    }

    return GTMTLSMIntersectionFunctionTable_processTraceFuncWithMap((char *)a1, a2, (uint64_t *)a3);
  }

  uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
  if (*(void *)(a1 + 168) && *((void *)result + 3))
  {
    unint64_t v42 = 0LL;
    do
    {
      uint64_t v43 = *((void *)result + 1);
      uint64_t v44 = *(void *)(a1 + 168) + 16 * (v42 + *((void *)result + 2));
      *(_DWORD *)uint64_t v44 = 3;
      *(void *)(v44 + 8) = v43;
      ++v42;
    }

    while (*((void *)result + 3) > v42);
  }

  return result;
}

char *GTMTLSMVisibleFunctionTable_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  int v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 > -15439)
  {
    if (v6 > -10178)
    {
      if (v6 > -10161)
      {
        if (v6 == -10160)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 19) = *((void *)result + 1);
        }

        else if (v6 == -10153)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 20) = *((void *)result + 1);
        }
      }

      else if (v6 == -10177)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((void *)v5 + memset(v56, 0, 7) = *((void *)result + 1);
      }

      else if (v6 == -10174)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_DWORD *)v5 + 21) = *((void *)result + 1);
      }

      return result;
    }

    if (v6 != -15438)
    {
      if (v6 == -10193)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((void *)v5 + 1memset(v56, 0, 7) = *((void *)result + 1);
      }

      else if (v6 == -10178)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((void *)v5 + 8) = *((void *)result + 1);
      }

      return result;
    }

    int v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v18 = *a3;
    *((void *)v5 + 1) = *((void *)v7 + 1);
    *((void *)v5 + 2) = v18;
    *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
    uint64_t v19 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
    *((void *)v5 + 14) = v19;
    if (v19)
    {
      uint64_t v20 = *((void *)v19 + 1);
      *((void *)v5 + memset(v56, 0, 7) = *(void *)v19;
      int v21 = *((_DWORD *)v19 + 4);
      *((_DWORD *)v5 + 21) = v20;
      *((_DWORD *)v5 + 22) = v21;
      *(_OWORD *)(v5 + 136) = *(_OWORD *)(v19 + 24);
      *(_OWORD *)(v5 + 152) = *(_OWORD *)(v19 + 40);
    }

    *((void *)v5 + 16) = *(void *)v7;
    char v16 = 1;
LABEL_40:
    v5[168] = v16;
LABEL_41:
    unsigned int v27 = v7[16];
LABEL_42:
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v27, a2);
    *((void *)v5 + 13) = result;
    return result;
  }

  if (v6 > -15461)
  {
    switch(v6)
    {
      case -15460:
        uint64_t v22 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v23 = *a3;
        *((void *)v5 + 1) = *((void *)v22 + 1);
        *((void *)v5 + 2) = v23;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        uint64_t v24 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 14) = v24;
        if (v24)
        {
          uint64_t v25 = *((void *)v24 + 1);
          *((void *)v5 + memset(v56, 0, 7) = *(void *)v24;
          int v26 = *((_DWORD *)v24 + 4);
          *((_DWORD *)v5 + 21) = v25;
          *((_DWORD *)v5 + 22) = v26;
          *(_OWORD *)(v5 + 136) = *(_OWORD *)(v24 + 24);
          *(_OWORD *)(v5 + 152) = *(_OWORD *)(v24 + 40);
        }

        *((void *)v5 + 16) = *(void *)v22;
        v5[168] = *((void *)v22 + 2);
        unsigned int v27 = v22[24];
        goto LABEL_42;
      case -15440:
        int v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v28 = *a3;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v28;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        uint64_t v29 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 14) = v29;
        if (v29)
        {
          uint64_t v30 = *((void *)v29 + 1);
          *((void *)v5 + memset(v56, 0, 7) = *(void *)v29;
          int v31 = *((_DWORD *)v29 + 4);
          *((_DWORD *)v5 + 21) = v30;
          *((_DWORD *)v5 + 22) = v31;
          *(_OWORD *)(v5 + 136) = *(_OWORD *)(v29 + 24);
          *(_OWORD *)(v5 + 152) = *(_OWORD *)(v29 + 40);
        }

        *((void *)v5 + 16) = *(void *)v7;
        char v16 = 2;
        break;
      case -15439:
        int v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v12 = *a3;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v12;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        __int128 v13 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 14) = v13;
        if (v13)
        {
          uint64_t v14 = *((void *)v13 + 1);
          *((void *)v5 + memset(v56, 0, 7) = *(void *)v13;
          int v15 = *((_DWORD *)v13 + 4);
          *((_DWORD *)v5 + 21) = v14;
          *((_DWORD *)v5 + 22) = v15;
          *(_OWORD *)(v5 + 136) = *(_OWORD *)(v13 + 24);
          *(_OWORD *)(v5 + 152) = *(_OWORD *)(v13 + 40);
        }

        *((void *)v5 + 16) = *(void *)v7;
        char v16 = 4;
        break;
      default:
        return result;
    }

    goto LABEL_40;
  }

  switch(v6)
  {
    case -15607:
      unint64_t v17 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v17[8], a2);
      *((void *)v5 + 9) = result;
      return result;
    case -15605:
      *((void *)result + 3) = *a3;
      return result;
    case -15578:
      int v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v8 = *a3;
      *((void *)v5 + 1) = *((void *)v7 + 1);
      *((void *)v5 + 2) = v8;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      uint64_t v9 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((void *)v5 + 14) = v9;
      if (v9)
      {
        uint64_t v10 = *((void *)v9 + 1);
        *((void *)v5 + memset(v56, 0, 7) = *(void *)v9;
        int v11 = *((_DWORD *)v9 + 4);
        *((_DWORD *)v5 + 21) = v10;
        *((_DWORD *)v5 + 22) = v11;
        *(_OWORD *)(v5 + 136) = *(_OWORD *)(v9 + 24);
        *(_OWORD *)(v5 + 152) = *(_OWORD *)(v9 + 40);
      }

      *((void *)v5 + 15) = *(void *)v7;
      goto LABEL_41;
  }

  return result;
}

char *GTMTLSMVisibleFunctionTableStateful_processTraceFuncWithMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 == -15597)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    if (*(void *)(a1 + 176))
    {
      uint64_t v9 = result;
      uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, result[24], a2);
      if (*((void *)v9 + 2))
      {
        unint64_t v10 = 0LL;
        uint64_t v11 = *(void *)(a1 + 176);
        do
        {
          *(void *)(v11 + 8 * (v10 + *((void *)v9 + 1))) = *(void *)&result[8 * v10];
          ++v10;
        }

        while (*((void *)v9 + 2) > v10);
      }
    }
  }

  else if (v6 == -15598)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v8 = *(void *)(a1 + 176);
    if (v8) {
      *(void *)(v8 + 8LL * *((void *)result + 2)) = *((void *)result + 1);
    }
  }

  else
  {
    return GTMTLSMVisibleFunctionTable_processTraceFuncWithMap((char *)a1, a2, (uint64_t *)a3);
  }

  return result;
}

char *GTMTLFXSMSpatialScaler_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  int v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  switch(v6)
  {
    case -20480:
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((void *)v5 + 8) = *((void *)result + 1);
      break;
    case -20479:
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((void *)v5 + memset(v56, 0, 7) = *((void *)result + 1);
      break;
    case -20478:
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((void *)v5 + 11) = *((void *)result + 1);
      break;
    case -20477:
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((void *)v5 + 10) = *((void *)result + 1);
      break;
    case -20476:
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((void *)v5 + 9) = *((void *)result + 1);
      break;
    case -20475:
      *((void *)result + 3) = *a3;
      break;
    default:
      if (v6 == -18432)
      {
        int v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v8 = *a3;
        uint64_t v9 = *(void *)v7;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v8;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((void *)v5 + 5) = v9;
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v7[16], a2);
        *((void *)v5 + 6) = result;
        *((_OWORD *)v5 + 5) = *(_OWORD *)result;
      }

      break;
  }

  return result;
}

float32_t GTMTLFXSMTemporalScaler_processTraceFuncWithMap(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v6 = *((_DWORD *)a3 + 2);
  switch(v6)
  {
    case -20473:
      *(void *)(a1 + 64) = *((void *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20472:
      *(_BYTE *)(a1 + 148) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 2);
      break;
    case -20471:
      *(void *)(a1 + 72) = *((void *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20470:
      *(void *)(a1 + 88) = *((void *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20469:
      *(void *)(a1 + 56) = *((void *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20468:
      *(void *)(a1 + 120) = *((void *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20467:
      *(void *)(a1 + 112) = *((void *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20466:
      v7.i32[0] = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 2);
      *(_DWORD *)(a1 + 128) = v7.i32[0];
      break;
    case -20465:
      v7.i32[0] = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 2);
      *(_DWORD *)(a1 + 132) = v7.i32[0];
      break;
    case -20464:
      *(void *)(a1 + 80) = *((void *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20463:
      v7.i32[0] = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 2);
      *(_DWORD *)(a1 + 136) = v7.i32[0];
      break;
    case -20462:
      v7.i32[0] = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 2);
      *(_DWORD *)(a1 + 140) = v7.i32[0];
      break;
    case -20461:
      *(void *)(a1 + 96) = *((void *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20460:
      v7.i32[0] = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 2);
      *(_DWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v20 - 144) = v7.i32[0];
      break;
    case -20459:
      *(_BYTE *)(a1 + 149) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 2);
      break;
    case -20458:
      *(void *)(a1 + 24) = *a3;
      break;
    case -20457:
      *(_BYTE *)(a1 + 149) = 0;
      break;
    case -20456:
      *(void *)(a1 + 104) = *((void *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    default:
      if (v6 == -18430)
      {
        *(_BYTE *)(a1 + 150) = *((void *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      }

      else if (v6 == -18431)
      {
        uint64_t v8 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v9 = *a3;
        uint64_t v10 = *(void *)v8;
        *(void *)(a1 + 8) = *((void *)v8 + 1);
        *(void *)(a1 + 16) = v9;
        *(_DWORD *)(a1 + 4) = *((_DWORD *)a3 + 2);
        *(void *)(a1 + 40) = v10;
        uint64_t v11 = GTTraceFunc_argumentBytesWithMap(a3, v8[16], a2);
        *(void *)(a1 + 48) = v11;
        *(void *)(a1 + 128) = 0LL;
        uint64x2_t v12 = *((uint64x2_t *)v11 + 1);
        *(uint64x2_t *)(a1 + 112) = v12;
        float32x2_t v7 = vneg_f32(vcvt_f32_f64(vcvtq_f64_u64(v12)));
        *(float32x2_t *)(a1 + 136) = v7;
        *(_DWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v20 - 144) = 1065353216;
        *(_WORD *)(a1 + 148) = 257;
      }

      break;
  }

  return v7.f32[0];
}

void *GTMTLSMRenderPipelineState_resourceAccess(void *a1, uint64_t a2, uint64_t a3)
{
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v8 = 0u;
  uint64_t v9 = 0LL;
  LODWORD(v8) = 71;
  uint64_t v10 = -1LL;
  __int128 v15 = 0xFFFFFFFFFFFFFFFFLL;
  if (a2 && (uint64_t v5 = *(void *)(a2 + 32)) != 0 && (*(_BYTE *)(v5 + 79) & 8) != 0) {
    int v6 = (uint64_t *)(v5 + 64);
  }
  else {
    int v6 = 0LL;
  }
  GTMTLSMRenderPipelineState_processTraceFuncWithMap((char *)&v8, a3, v6);
  return memcpy(a1, (char *)v16 + 8, 0x118uLL);
}

void operator delete[](void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

id objc_msgSend__ProcessLineList_forFileCostMap_forDebugInfo_andCost_forAddr_andDrawIndex_andTargetIndex_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_ProcessLineList:forFileCostMap:forDebugInfo:andCost:forAddr:andDrawIndex:andTargetIndex:");
}

id objc_msgSend__analyzeBinary_uscSamples_targetIndex_withTextSegment_withKey_withShaderSourcePath_forDataMaster_withPerDrawLimiterData_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_analyzeBinary:uscSamples:targetIndex:withTextSegment:withKey:withShaderSourcePath:forDataMaster:withPerDrawLimiterData:");
}

id objc_msgSend__calculatePerLineCostWithSampleData_binary_targetIndex_withKey_withShaderSourcePath_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_calculatePerLineCostWithSampleData:binary:targetIndex:withKey:withShaderSourcePath:");
}

id objc_msgSend__calculatePerLineCostWithSampleData_binary_targetIndex_withTextSegment_withKey_withShaderSourcePath_forDataMaster_withPerDrawLimiterData_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_calculatePerLineCostWithSampleData:binary:targetIndex:withTextSegment:withKey:withShaderSourcePath:forDataMa ster:withPerDrawLimiterData:");
}

id objc_msgSend__calculatePerSampleActiveShaders_withShaderProfilerResult_forWorkloadInfo_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_calculatePerSampleActiveShaders:withShaderProfilerResult:forWorkloadInfo:");
}

id objc_msgSend__calculatePerSampleAggregatedActiveShaders_withShaderProfilerResult_forWorkloadInfo_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_calculatePerSampleAggregatedActiveShaders:withShaderProfilerResult:forWorkloadInfo:");
}

id objc_msgSend__computeSampleNormFactorForSample_forProgramStartAddress_forProgramEndAddress_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_computeSampleNormFactorForSample:forProgramStartAddress:forProgramEndAddress:");
}

id objc_msgSend__dumpTraceBufferPacketsInFile_usingTracePackets_withExtractedSamples_withTraceBufferCount_forTargetIndex_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_dumpTraceBufferPacketsInFile:usingTracePackets:withExtractedSamples:withTraceBufferCount:forTargetIndex:");
}

id objc_msgSend__generateSamplesForResult_withProgramAddressLUT_withBatchIndexMin_andBatchIndexMax_andMinIndex_withProgramAddressList_withUSCSampleList_withUSCSampleNum_withBatchIDToEncoderIndex_andEncoderIndexToBatchIdMap_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_generateSamplesForResult:withProgramAddressLUT:withBatchIndexMin:andBatchIndexMax:andMinIndex:withProgramAdd ressList:withUSCSampleList:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:");
}

id objc_msgSend__latencyAdjustmentFactorWithLimiterData_forIndex_withLimiterTypeIndexMap_forLimiterType_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_latencyAdjustmentFactorWithLimiterData:forIndex:withLimiterTypeIndexMap:forLimiterType:");
}

id objc_msgSend__latencyAdjustmentFactorWithLimiterData_forIndex_withLimiterTypeIndexMap_forLimiterTypeLoad_forLimiterTypeStore_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_latencyAdjustmentFactorWithLimiterData:forIndex:withLimiterTypeIndexMap:forLimiterTypeLoad:forLimiterTypeStore:");
}

id objc_msgSend__latencyAdjustmentFactorWithLimiterDataForDraw_forDataMaster_forLimiterType_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_latencyAdjustmentFactorWithLimiterDataForDraw:forDataMaster:forLimiterType:");
}

id objc_msgSend__latencyAdjustmentFactorWithLimiterDataWithLerp_forIndex_withLimiterTypeIndexMap_forLimiterType_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_latencyAdjustmentFactorWithLimiterDataWithLerp:forIndex:withLimiterTypeIndexMap:forLimiterType:");
}

id objc_msgSend__preProcessStreamingUSCSampleData_result_withAddressData_sampleData_frameIndex_ringBufferIdx_targetIndex_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_preProcessStreamingUSCSampleData:result:withAddressData:sampleData:frameIndex:ringBufferIdx:targetIndex:");
}

id objc_msgSend__preProcessStreamingUSCSampleData_result_withAddressMappings_sampleData_frameIndex_ringBufferIdx_targetIndex_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_preProcessStreamingUSCSampleData:result:withAddressMappings:sampleData:frameIndex:ringBufferIdx:targetIndex:");
}

id objc_msgSend__prepareAndEvaluateCounterValues_numElementsPerSample_numSamples_withContext_withGPUCyclesCounterIndex_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_prepareAndEvaluateCounterValues:numElementsPerSample:numSamples:withContext:withGPUCyclesCounterIndex:");
}

id objc_msgSend__processDerivedEncoderCounterData_forDerivedEncoderData_withEffectivePerDrawKickTimes_withShaderInfo_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_processDerivedEncoderCounterData:forDerivedEncoderData:withEffectivePerDrawKickTimes:withShaderInfo:");
}

id objc_msgSend__processPerLineCostDataForLineTable_withFileCost_withDebugInfo_andAllDrawCost_withKey_withShaderSourcePath_withDrawCost_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_processPerLineCostDataForLineTable:withFileCost:withDebugInfo:andAllDrawCost:withKey:withShaderSourcePath:withDrawCost:");
}

id objc_msgSend__processTracePackets_forRenderIndex_andGenerateSampleList_forTargetIndex_forLimiterIndex_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_processTracePackets:forRenderIndex:andGenerateSampleList:forTargetIndex:forLimiterIndex:");
}

id objc_msgSend__updateShaderTimelineInfo_withShaderTimelineDataEx_forGPUTimelineInfo_withEncoderGlobalTraceIdToStateMirrorIdMapping_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_updateShaderTimelineInfo:withShaderTimelineDataEx:forGPUTimelineInfo:withEncoderGlobalTraceIdToStateMirrorIdMapping:");
}

id objc_msgSend_analyzedBinary_processedUscSamples_targetIndex_withKey_withShaderSourcePath_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "analyzedBinary:processedUscSamples:targetIndex:withKey:withShaderSourcePath:");
}

id objc_msgSend_convertSparsePixelRegions_toTileRegions_withTileSize_alignmentMode_numRegions_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convertSparsePixelRegions:toTileRegions:withTileSize:alignmentMode:numRegions:");
}

id objc_msgSend_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:desti nationLevel:destinationOrigin:");
}

id objc_msgSend_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_options_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:desti nationLevel:destinationOrigin:options:");
}

id objc_msgSend_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPe rRow:destinationBytesPerImage:");
}

id objc_msgSend_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage_options_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPe rRow:destinationBytesPerImage:options:");
}

id objc_msgSend_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:d estinationOrigin:");
}

id objc_msgSend_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_options_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:d estinationOrigin:options:");
}

id objc_msgSend_copyFromTexture_sourceSlice_sourceLevel_toTexture_destinationSlice_destinationLevel_sliceCount_levelCount_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "copyFromTexture:sourceSlice:sourceLevel:toTexture:destinationSlice:destinationLevel:sliceCount:levelCount:");
}

id objc_msgSend_deserializeInstanceAccelerationStructure_fromBytes_primitiveAccelerationStructures_withDescriptor_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "deserializeInstanceAccelerationStructure:fromBytes:primitiveAccelerationStructures:withDescriptor:");
}

id objc_msgSend_deserializeInstanceAccelerationStructure_primitiveAccelerationStructures_fromBuffer_serializedBufferOffset_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "deserializeInstanceAccelerationStructure:primitiveAccelerationStructures:fromBuffer:serializedBufferOffset:");
}

id objc_msgSend_deserializeInstanceAccelerationStructure_primitiveAccelerationStructures_fromBuffer_serializedBufferOffset_withDescriptor_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "deserializeInstanceAccelerationStructure:primitiveAccelerationStructures:fromBuffer:serializedBufferOffset:withDescriptor:");
}

id objc_msgSend_deserializePrimitiveAccelerationStructure_fromBuffer_serializedBufferOffset_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deserializePrimitiveAccelerationStructure:fromBuffer:serializedBufferOffset:");
}

id objc_msgSend_deserializePrimitiveAccelerationStructure_fromBuffer_serializedBufferOffset_withDescriptor_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deserializePrimitiveAccelerationStructure:fromBuffer:serializedBufferOffset:withDescriptor:");
}

id objc_msgSend_dispatchThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerThreadgroup_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:");
}

id objc_msgSend_drawIndexedPatches_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_indirectBuffer_indirectBufferOffset_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "drawIndexedPatches:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOff set:indirectBuffer:indirectBufferOffset:");
}

id objc_msgSend_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:cont rolPointIndexBufferOffset:instanceCount:baseInstance:");
}

id objc_msgSend_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:cont rolPointIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset: tessellationFactorBufferInstanceStride:");
}

id objc_msgSend_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:");
}

id objc_msgSend_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:");
}

id objc_msgSend_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:");
}

id objc_msgSend_drawIndexedPrimitives_indexType_indexBuffer_indexBufferOffset_indirectBuffer_indirectBufferOffset_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:");
}

id objc_msgSend_drawMeshThreadgroups_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawMeshThreadgroups:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:");
}

id objc_msgSend_drawMeshThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "drawMeshThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:");
}

id objc_msgSend_drawPatches_patchIndexBuffer_patchIndexBufferOffset_indirectBuffer_indirectBufferOffset_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawPatches:patchIndexBuffer:patchIndexBufferOffset:indirectBuffer:indirectBufferOffset:");
}

id objc_msgSend_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:");
}

id objc_msgSend_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:tessella tionFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:");
}

id objc_msgSend_evaluateStreamingSamples_withUSCSampleNum_withProgramAddressLUT_targetIndex_forRingBufferIndex_withMinEncoderIndex_withMaxEncoderIndex_withEncoderIdToEncoderIndexMap_withProfilingData_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "evaluateStreamingSamples:withUSCSampleNum:withProgramAddressLUT:targetIndex:forRingBufferIndex:withMinEncoder Index:withMaxEncoderIndex:withEncoderIdToEncoderIndexMap:withProfilingData:");
}

id objc_msgSend_generateTargetSamplesForResult_withProgramAddressLUT_withBatchIndexMin_withProgramAddressList_withUSCSampleBuffer_withUSCSampleNum_withBatchIDToEncoderIndex_andEncoderIndexToBatchIdMap_targetIndex_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBu ffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:");
}

id objc_msgSend_getTextureAccessCounters_region_mipLevel_slice_resetCounters_countersBuffer_countersBufferOffset_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "getTextureAccessCounters:region:mipLevel:slice:resetCounters:countersBuffer:countersBufferOffset:");
}

id objc_msgSend_loadTexture_slice_level_size_sourceBytesPerRow_sourceBytesPerImage_destinationOrigin_sourceHandle_sourceHandleOffset_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "loadTexture:slice:level:size:sourceBytesPerRow:sourceBytesPerImage:destinationOrigin:sourceHandle:sourceHandleOffset:");
}

id objc_msgSend_newComputePipelineStateWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newComputePipelineStateWithImageFilterFunctionsSPI:imageFilterFunctionInfo:error:");
}

id objc_msgSend_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle_resourceIndex_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:resourceIndex:");
}

id objc_msgSend_postProcessRawDataWithRingBufferIndex_source_sourceSize_sourceRead_sourceWrite_output_outputSize_outputRead_outputWrite_isLast_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "postProcessRawDataWithRingBufferIndex:source:sourceSize:sourceRead:sourceWrite:output:outputSize:outputRead:o utputWrite:isLast:");
}

id objc_msgSend_postProcessRawDataWithSource_sourceSize_sourceRead_output_outputSize_outputWritten_isLast_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postProcessRawDataWithSource:sourceSize:sourceRead:output:outputSize:outputWritten:isLast:");
}

id objc_msgSend_refitAccelerationStructure_descriptor_destination_scratchBuffer_scratchBufferOffset_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "refitAccelerationStructure:descriptor:destination:scratchBuffer:scratchBufferOffset:");
}

id objc_msgSend_refitAccelerationStructure_descriptor_destination_scratchBuffer_scratchBufferOffset_options_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "refitAccelerationStructure:descriptor:destination:scratchBuffer:scratchBufferOffset:options:");
}

id objc_msgSend_renderOverlay_color_shrinkToFit_withEncoder_withFormat_transform_anchor_bounds_renderTargetSize_viewContentsScale_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "renderOverlay:color:shrinkToFit:withEncoder:withFormat:transform:anchor:bounds:renderTargetSize:viewContentsScale:");
}

id objc_msgSend_renderTexture_isDepthStencil_shrinkToFit_withEncoder_withFormat_transform_anchor_bounds_renderTargetSize_viewContentsScale_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "renderTexture:isDepthStencil:shrinkToFit:withEncoder:withFormat:transform:anchor:bounds:renderTargetSize:viewContentsScale:");
}

id objc_msgSend_serializeInstanceAccelerationStructure_primitiveAccelerationStructures_toBuffer_serializedBufferOffset_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "serializeInstanceAccelerationStructure:primitiveAccelerationStructures:toBuffer:serializedBufferOffset:");
}

id objc_msgSend_setMTLCounterSampleLocationWithBuffer_vertexStartIndex_vertexEndIndex_fragmentStartIndex_fragmentEndIndex_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "setMTLCounterSampleLocationWithBuffer:vertexStartIndex:vertexEndIndex:fragmentStartIndex:fragmentEndIndex:");
}

id objc_msgSend_setupDataForEvaluatingStreamingSamples_forRingBufferCount_forTargetIndex_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupDataForEvaluatingStreamingSamples:forRingBufferCount:forTargetIndex:");
}

id objc_msgSend_uniqueIdentifierForComputePipelineAtIndex_inIndirectArgumentBuffer_atOffset_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueIdentifierForComputePipelineAtIndex:inIndirectArgumentBuffer:atOffset:");
}

id objc_msgSend_uniqueIdentifierForIndirectCommandBufferAtIndex_inIndirectArgumentBuffer_atOffset_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueIdentifierForIndirectCommandBufferAtIndex:inIndirectArgumentBuffer:atOffset:");
}

id objc_msgSend_uniqueIdentifierForInstanceAccelerationStructureAtIndex_inIndirectArgumentBuffer_atOffset_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueIdentifierForInstanceAccelerationStructureAtIndex:inIndirectArgumentBuffer:atOffset:");
}

id objc_msgSend_uniqueIdentifierForIntersectionFunctionTableAtIndex_inIndirectArgumentBuffer_atOffset_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueIdentifierForIntersectionFunctionTableAtIndex:inIndirectArgumentBuffer:atOffset:");
}

id objc_msgSend_uniqueIdentifierForPrimitiveAccelerationStructureAtIndex_inIndirectArgumentBuffer_atOffset_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueIdentifierForPrimitiveAccelerationStructureAtIndex:inIndirectArgumentBuffer:atOffset:");
}

id objc_msgSend_uniqueIdentifierForRenderPipelineAtIndex_inIndirectArgumentBuffer_atOffset_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueIdentifierForRenderPipelineAtIndex:inIndirectArgumentBuffer:atOffset:");
}

id objc_msgSend_uniqueIdentifierForVisibleFunctionTableAtIndex_inIndirectArgumentBuffer_atOffset_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueIdentifierForVisibleFunctionTableAtIndex:inIndirectArgumentBuffer:atOffset:");
}

id objc_msgSend_writeDeserializedAccelerationStructureSize_serializedOffset_toBuffer_sizeBufferOffset_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeDeserializedAccelerationStructureSize:serializedOffset:toBuffer:sizeBufferOffset:");
}

id objc_msgSend_writeDeserializedPrimitiveAccelerationStructureSizes_serializedOffset_toBuffer_sizesBufferOffset_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "writeDeserializedPrimitiveAccelerationStructureSizes:serializedOffset:toBuffer:sizesBufferOffset:");
}