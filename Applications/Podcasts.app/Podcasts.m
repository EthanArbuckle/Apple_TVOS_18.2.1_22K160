BOOL sub_100007608(id a1, MTTVEpisodeActionController *a2)
{
  void *v2;
  void *v3;
  BOOL v4;
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  v3 = v2;
  v4 = v2
    && ([v2 isExternalType] & 1) == 0
    && ![v3 isRestricted];

  return v4;
}

void sub_100007660(id a1, MTTVEpisodeActionController *a2, id a3)
{
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uuid]);
  v6 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v6, 1LL));
  +[MTRemoteSetPlaybackQueueUtil insertEpisodeUuids:intoPlaybackQueueAtPosition:]( &OBJC_CLASS___MTRemoteSetPlaybackQueueUtil,  "insertEpisodeUuids:intoPlaybackQueueAtPosition:",  v5,  0LL);
}

BOOL sub_1000077D8(id a1, MTTVEpisodeActionController *a2)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  v3 = v2;
  BOOL v4 = v2
    && ([v2 isExternalType] & 1) == 0
    && ![v3 isRestricted];

  return v4;
}

void sub_100007830(id a1, MTTVEpisodeActionController *a2, id a3)
{
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject", a3));
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uuid]);
  v6 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v6, 1LL));
  +[MTRemoteSetPlaybackQueueUtil insertEpisodeUuids:intoPlaybackQueueAtPosition:]( &OBJC_CLASS___MTRemoteSetPlaybackQueueUtil,  "insertEpisodeUuids:intoPlaybackQueueAtPosition:",  v5,  1LL);
}

BOOL sub_1000079A8(id a1, MTTVEpisodeActionController *a2)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[MTTVEpisodeActionController responseItem](a2, "responseItem"));
  v3 = (void *)objc_claimAutoreleasedReturnValue([v2 remove]);
  BOOL v4 = v3 != 0LL;

  return v4;
}

void sub_1000079EC(id a1, MTTVEpisodeActionController *a2, id a3)
{
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[MTTVEpisodeActionController responseItem](a2, "responseItem", a3));
  id v4 = (id)objc_claimAutoreleasedReturnValue([v3 remove]);

  +[MPCPlayerChangeRequest performRequest:completion:]( &OBJC_CLASS___MPCPlayerChangeRequest,  "performRequest:completion:",  v4,  0LL);
}

NSString *__cdecl sub_100007A9C(id a1, MTTVEpisodeActionController *a2)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  unsigned int v3 = [v2 isVideo];
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  v5 = v4;
  if (v3) {
    v6 = @"MARK_UNPLAYED_SINGLE_VIDEO";
  }
  else {
    v6 = @"MARK_UNPLAYED_SINGLE_AUDIO";
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue([v4 localizedStringForKey:v6 value:&stru_100248948 table:0]);

  return (NSString *)v7;
}

BOOL sub_100007B24(id a1, MTTVEpisodeActionController *a2)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  unsigned __int8 v3 = [v2 isVisuallyPlayed];

  return v3;
}

void sub_100007B5C(id a1, MTTVEpisodeActionController *a2, id a3)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject", a3));
  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTLibrary sharedInstance](&OBJC_CLASS___MTLibrary, "sharedInstance"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v5 uuid]);
  [v3 setPlayed:0 manually:1 forUserActionOnEpisodeUuid:v4];
}

NSString *__cdecl sub_100007C28(id a1, MTTVEpisodeActionController *a2)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  unsigned int v3 = [v2 isVideo];
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  id v5 = v4;
  if (v3) {
    v6 = @"MARK_PLAYED_SINGLE_VIDEO";
  }
  else {
    v6 = @"MARK_PLAYED_SINGLE_AUDIO";
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue([v4 localizedStringForKey:v6 value:&stru_100248948 table:0]);

  return (NSString *)v7;
}

BOOL sub_100007CB0(id a1, MTTVEpisodeActionController *a2)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  char v3 = [v2 isVisuallyPlayed] ^ 1;

  return v3;
}

void sub_100007CE8(id a1, MTTVEpisodeActionController *a2, id a3)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject", a3));
  char v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTLibrary sharedInstance](&OBJC_CLASS___MTLibrary, "sharedInstance"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v5 uuid]);
  [v3 setPlayed:1 manually:0 forUserActionOnEpisodeUuid:v4];
}

NSString *__cdecl sub_100007DB4(id a1, MTTVEpisodeActionController *a2)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  char v3 = (void *)objc_claimAutoreleasedReturnValue( [v2 localizedStringForKey:@"SAVE_EPISODE_SINGULAR" value:&stru_100248948 table:0]);

  return (NSString *)v3;
}

BOOL sub_100007E08(id a1, MTTVEpisodeActionController *a2)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  char v3 = [v2 isBookmarked] ^ 1;

  return v3;
}

void sub_100007E40(id a1, MTTVEpisodeActionController *a2, id a3)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject", a3));
  [v6 markAsBookmarked];
  char v3 = (void *)objc_claimAutoreleasedReturnValue([v6 managedObjectContext]);
  [v3 saveInCurrentBlock];

  id v4 = [v6 bookmarksSyncType];
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[SyncKeysRepository shared](&OBJC_CLASS____TtC18PodcastsFoundation18SyncKeysRepository, "shared"));
  [v5 markBookmarksSyncDirty:1 for:v4];
}

NSString *__cdecl sub_100007F18(id a1, MTTVEpisodeActionController *a2)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  char v3 = (void *)objc_claimAutoreleasedReturnValue([v2 localizedStringForKey:@"UNSAVE_EPISODE" value:&stru_100248948 table:0]);

  return (NSString *)v3;
}

BOOL sub_100007F6C(id a1, MTTVEpisodeActionController *a2)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  unsigned __int8 v3 = [v2 isBookmarked];

  return v3;
}

void sub_100007FA4(id a1, MTTVEpisodeActionController *a2, id a3)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject", a3));
  [v6 markAsUnbookmarked];
  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue([v6 managedObjectContext]);
  [v3 saveInCurrentBlock];

  id v4 = [v6 bookmarksSyncType];
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[SyncKeysRepository shared](&OBJC_CLASS____TtC18PodcastsFoundation18SyncKeysRepository, "shared"));
  [v5 markBookmarksSyncDirty:1 for:v4];
}

BOOL sub_1000080C8(id a1, MTTVEpisodeActionController *a2)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  unsigned __int8 v3 = [v2 isExternalType];

  return v3;
}

void sub_100008100(id a1, MTTVEpisodeActionController *a2, id a3)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject", a3));
  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue([v5 bestUrl]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](&OBJC_CLASS___UIApplication, "sharedApplication"));
  [v4 openURL:v3 options:&__NSDictionary0__struct completionHandler:0];
}

BOOL sub_100008214(id a1, MTTVEpisodeActionController *a2)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue([v2 itemDescription]);
  BOOL v4 = [v3 length] != 0;

  return v4;
}

void sub_100008268(id a1, MTTVEpisodeActionController *a2, id a3)
{
  v10 = a2;
  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](v10, "actionObject"));
  BOOL v4 = -[MTTVEpisodeDescriptionViewController initWithEpisode:]( objc_alloc(&OBJC_CLASS___MTTVEpisodeDescriptionViewController),  "initWithEpisode:",  v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController delegate](v10, "delegate"));
  char v6 = objc_opt_respondsToSelector(v5, "rootNavigationController");

  if ((v6 & 1) == 0
    || (v7 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController delegate](v10, "delegate")),
        v8 = (void *)objc_claimAutoreleasedReturnValue([v7 rootNavigationController]),
        v7,
        !v8))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[MTApplication_ATV appController](&OBJC_CLASS___MTApplication_ATV, "appController"));
    v8 = (void *)objc_claimAutoreleasedReturnValue([v9 rootViewController]);
  }

  [v8 pushViewController:v4 animated:1];
}

BOOL sub_1000083F0(id a1, MTTVEpisodeActionController *a2)
{
  return 1;
}

void sub_1000083F8(id a1, MTTVEpisodeActionController *a2, id a3)
{
  v11 = a2;
  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](v11, "actionObject"));
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 podcast]);
  id v5 = -[MTTVPodcastDetailViewController initWithPodcast:]( objc_alloc(&OBJC_CLASS___MTTVPodcastDetailViewController),  "initWithPodcast:",  v4);
  char v6 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController delegate](v11, "delegate"));
  char v7 = objc_opt_respondsToSelector(v6, "rootNavigationController");

  if ((v7 & 1) == 0
    || (v8 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController delegate](v11, "delegate")),
        v9 = (void *)objc_claimAutoreleasedReturnValue([v8 rootNavigationController]),
        v8,
        !v9))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[MTApplication_ATV appController](&OBJC_CLASS___MTApplication_ATV, "appController"));
    v9 = (void *)objc_claimAutoreleasedReturnValue([v10 rootViewController]);
  }

  [v9 pushViewController:v5 animated:1];
}

LABEL_16:
  return v7;
}

  if ([v6 length]) {
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSData MZStringByMD5HashingString:](&OBJC_CLASS___NSData, "MZStringByMD5HashingString:", v6));
  }
  else {
LABEL_19:
  }
    v19 = 0LL;

  return v19;
}

    -[MTTVPlayback didChangeValueForKey:](self, "didChangeValueForKey:", @"selectedSubtitleOption");
  }
}

  if (v12)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v18 postNotificationName:TVPPlaybackMediaItemDidBecomePreparedNotification object:self];
  }
}

  return v9;
}

  -[_MTTVKTSpecialAnimatingView setFrame:](self->_containerView, "setFrame:", v4, v6, v8, v10);
  -[_MTTVKTSpecialAnimatingView setFrame:](self->_highlightView, "setFrame:", v4, v6, v8, v10);
  -[UIView setFrame:](self->_contentView, "setFrame:", v4, v6, v8, v10);
}
}

void sub_1000088A4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[MTApplication appController](&OBJC_CLASS___MTApplication, "appController"));
  [v2 handleiTMSUrlScheme:*(void *)(a1 + 32)];
}

void sub_1000088E8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[MTApplication appController](&OBJC_CLASS___MTApplication, "appController"));
  [v2 handlePodcastsUrlScheme:*(void *)(a1 + 32)];
}

void sub_10000892C(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___MTAddPodcastOrStationController);
  -[MTAddPodcastOrStationController presentAddPodcastUIWithUrl:]( v2,  "presentAddPodcastUIWithUrl:",  *(void *)(a1 + 32));
}

void sub_100008CB4(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[IMAVPlayer sharedPlayer](&OBJC_CLASS___IMAVPlayer, "sharedPlayer"));
  [v1 registerAVSessionCategoryAndMode];
}

void sub_100008CE8(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  uint64_t v2 = kMTExternalCookiesHaveBeenPurged;
  unsigned __int8 v3 = [v1 BOOLForKey:kMTExternalCookiesHaveBeenPurged];

  if ((v3 & 1) == 0)
  {
    +[MTURLSessionManager purgeExternalCookies](&OBJC_CLASS___MTURLSessionManager, "purgeExternalCookies");
    id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
    [v4 setBool:1 forKey:v2];
  }
}

void sub_100008D84(uint64_t a1)
{
  int v2 = os_feature_enabled_disable_siri_plist_dumper();
  unsigned __int8 v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([v3 siriDonator]);
    [v4 startDonation];
  }

  else
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([v3 siriDumper]);
    [v4 dumpPlist];
  }
}

void sub_100008DE0(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcastDerivedPropertyObserver sharedInstance]( &OBJC_CLASS___MTPodcastDerivedPropertyObserver,  "sharedInstance"));
  [v1 startObserving];

  id v2 = (id)objc_claimAutoreleasedReturnValue( +[SyncControllerFactory resolvedSyncController]( &OBJC_CLASS____TtC8Podcasts21SyncControllerFactory,  "resolvedSyncController"));
  [v2 start];
}

void sub_100009044(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue( +[SyncControllerFactory resolvedSyncController]( &OBJC_CLASS____TtC8Podcasts21SyncControllerFactory,  "resolvedSyncController"));
  [v1 applicationDidEnterBackground];
}

void sub_1000092B8(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue( +[SyncControllerFactory resolvedSyncController]( &OBJC_CLASS____TtC8Podcasts21SyncControllerFactory,  "resolvedSyncController"));
  [v1 applicationWillEnterForeground];
}

id sub_1000092EC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _submitForegroundAnalytics];
}

id sub_1000095F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _validateFairPlayEpisodesWithCompletionHandler:&stru_100240078];
}

id sub_100009608(uint64_t a1)
{
  return [*(id *)(a1 + 32) _verifyFairPlayMigrationWithCompletionHandler:&stru_100240098];
}

uint64_t sub_100009750(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10000975C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100009804(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](&OBJC_CLASS___UIApplication, "sharedApplication"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1000099A8;
  v15[3] = &unk_10023FF98;
  v15[4] = *(void *)(a1 + 32);
  objc_msgSend( *(id *)(a1 + 32),  "setFairPlayMigrationBackgroundTask:",  objc_msgSend( v2,  "beginBackgroundTaskWithName:expirationHandler:",  @"com.apple.podcasts.FairPlayMigration",  v15));

  unsigned __int8 v3 = dispatch_group_create();
  dispatch_group_enter(v3);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[PFFairPlayRolloutController sharedInstance]( &OBJC_CLASS___PFFairPlayRolloutController,  "sharedInstance"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100009A00;
  v13[3] = &unk_100240110;
  id v5 = v3;
  v14 = v5;
  [v4 didRollbackStatusChangeWithCompletion:v13];

  dispatch_group_enter(v5);
  char v6 = (void *)objc_claimAutoreleasedReturnValue( +[PFFairPlayMigrationController sharedInstance]( &OBJC_CLASS___PFFairPlayMigrationController,  "sharedInstance"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100009B54;
  v11[3] = &unk_10023FF98;
  v12 = v5;
  char v7 = v5;
  [v6 migrateIfNecessaryWithCompletion:v11];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100009B5C;
  block[3] = &unk_100240138;
  v8 = *(void **)(a1 + 40);
  block[4] = *(void *)(a1 + 32);
  id v10 = v8;
  dispatch_group_notify(v7, &_dispatch_main_q, block);
}

id sub_1000099A8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](&OBJC_CLASS___UIApplication, "sharedApplication"));
  objc_msgSend(v2, "endBackgroundTask:", objc_msgSend(*(id *)(a1 + 32), "fairPlayMigrationBackgroundTask"));

  return [*(id *)(a1 + 32) setFairPlayMigrationBackgroundTask:UIBackgroundTaskInvalid];
}

void sub_100009A00(uint64_t a1, int a2)
{
  if (a2)
  {
    unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue( +[PFFairPlayMigrationController sharedInstance]( &OBJC_CLASS___PFFairPlayMigrationController,  "sharedInstance"));
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_100009AA0;
    v4[3] = &unk_10023FF98;
    id v5 = *(id *)(a1 + 32);
    [v3 rollbackIfNecessaryWithCompletion:v4];
  }

  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }

void sub_100009AA0(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryDRM();
  unsigned __int8 v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[MTAppDelegate_Shared]: Processing pending key invalidations.",  v6,  2u);
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICUserIdentity activeAccount](&OBJC_CLASS___ICUserIdentity, "activeAccount"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[MPCloudController controllerWithUserIdentity:]( &OBJC_CLASS___MPCloudController,  "controllerWithUserIdentity:",  v4));
  [v5 processPendingKeyInvalidations];

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100009B54(uint64_t a1)
{
}

uint64_t sub_100009B5C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](&OBJC_CLASS___UIApplication, "sharedApplication"));
  objc_msgSend(v2, "endBackgroundTask:", objc_msgSend(*(id *)(a1 + 32), "fairPlayMigrationBackgroundTask"));

  [*(id *)(a1 + 32) setFairPlayMigrationBackgroundTask:UIBackgroundTaskInvalid];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100009DDC(id a1)
{
  uint64_t v1 = _MTLogCategoryDefault(a1);
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[Foreground Sync] Application is Active! Starting all processors",  v4,  2u);
  }

  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue( +[PFDeferredLaunchTaskCoordinator sharedInstance]( &OBJC_CLASS___PFDeferredLaunchTaskCoordinator,  "sharedInstance"));
  [v3 deferWork:&stru_100240178];
}

void sub_100009E64(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[MTProcessorManager sharedInstance](&OBJC_CLASS___MTProcessorManager, "sharedInstance"));
  [v1 startAllProcessors];

  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTBaseProcessor sharedInstance](&OBJC_CLASS___MTFeedUpdateProcessor, "sharedInstance"));
  [v2 startIfNeeded];

  id v3 = (id)objc_claimAutoreleasedReturnValue(+[MTBaseProcessor sharedInstance](&OBJC_CLASS___MTPlaylistQueryManager, "sharedInstance"));
  [v3 updateAllPlaylistsWithCompletion:&stru_100240198];
}

void sub_100009EE4(id a1)
{
  if (qword_1002B68B8 != -1) {
    dispatch_once(&qword_1002B68B8, &stru_1002401D8);
  }
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[MTPurchaseControllerWrapper sharedInstance](&OBJC_CLASS___MTPurchaseControllerWrapper, "sharedInstance"));
  [v1 fetchChannelUpdatesCheckingEntitlementsNotification];
}

void sub_100009F40(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[MTPurchaseControllerWrapper sharedInstance](&OBJC_CLASS___MTPurchaseControllerWrapper, "sharedInstance"));
  [v1 forceFetchLatestChannelUpdates];
}

void sub_100009F74(id a1)
{
  uint64_t v1 = _MTLogCategoryDatabase(a1);
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "Enqueuing hidden podcasts deletion operation",  v5,  2u);
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTLibrary sharedInstance](&OBJC_CLASS___MTLibrary, "sharedInstance"));
  [v3 cleanUpOldHiddenPodcasts];

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTLibrary sharedInstance](&OBJC_CLASS___MTLibrary, "sharedInstance"));
  [v4 cleanUpNeutralInterests];
}

void sub_10000A01C(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[MTForegroundSyncUtil sharedInstance](&OBJC_CLASS___MTForegroundSyncUtil, "sharedInstance"));
  [v1 updatePlaybackSettingIfNeeded];

  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[SyncControllerFactory resolvedSyncController]( &OBJC_CLASS____TtC8Podcasts21SyncControllerFactory,  "resolvedSyncController"));
  [v2 syncEverything];

  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[AnalyticsIdentifierManager sharedInstance]( &OBJC_CLASS____TtC18PodcastsFoundation26AnalyticsIdentifierManager,  "sharedInstance"));
  [v3 updateIdentifiers];

  +[MTMusicSubscriptionInfoLoader deleteMusicSubscriptionInfoIfNeeded]( &OBJC_CLASS___MTMusicSubscriptionInfoLoader,  "deleteMusicSubscriptionInfoIfNeeded");
  id v4 = (id)objc_claimAutoreleasedReturnValue( +[NSUserDefaults _applePodcastsFoundationSharedUserDefaults]( &OBJC_CLASS___NSUserDefaults,  "_applePodcastsFoundationSharedUserDefaults"));
  [v4 setInteger:0 forKey:kMTUserAppSessionsUserDefaultKey];
}

id sub_10000A19C(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSOperationQueue);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 24);
  *(void *)(v3 + 24) = v2;

  [*(id *)(*(void *)(a1 + 32) + 24) setMaxConcurrentOperationCount:1];
  return [*(id *)(*(void *)(a1 + 32) + 24) setName:@"com.apple.podcasts.libraryupdate"];
}

LABEL_6:
  return 1;
}

    v8 = kMTLibraryDefaultImageKey;
    goto LABEL_7;
  }

  v9 = (void *)objc_claimAutoreleasedReturnValue([v3 artworkUrl]);

  if (!v9) {
    goto LABEL_6;
  }
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 artworkUrl]);
  v11 = (void *)objc_claimAutoreleasedReturnValue([v10 absoluteString]);

LABEL_8:
  return v11;
}
}
}

    if (CGRectIsEmpty(a5))
    {
      -[MTEpisodeLockup _layoutMargins](self, "_layoutMargins");
      return v12;
    }

    v13 = a5.origin.x;
    v14 = a5.origin.y;
    v15 = a5.size.width;
    v16 = a5.size.height;
    return CGRectGetMaxX(*(CGRect *)&v13) + 8.0;
  }

  if (a6 <= 1)
  {
    if (!-[MTEpisodeLockup _isRTL](self, "_isRTL", result, a4.origin.x, a4.origin.y, a4.size.width, a4.size.height))
    {
      -[MTEpisodeLockup _layoutMargins](self, "_layoutMargins");
      return v7;
    }

    goto LABEL_6;
  }

  return result;
}
}

  v11 = v10;

  return v11;
}
}

  [v9 setFeedChangedDate:v4];
}

  return v7;
}

void sub_10000ABB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10000AC38;
  v6[3] = &unk_100240240;
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = v3;
  uint64_t v8 = v4;
  id v5 = v3;
  dispatch_async(&_dispatch_main_q, v6);
}

void sub_10000AC38(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](&OBJC_CLASS___MTDB, "sharedInstance"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 mainQueueContext]);
  id v9 = (id)objc_claimAutoreleasedReturnValue([v3 podcastForUuid:*(void *)(a1 + 32)]);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) indexPathForObject:v9]);
  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) collectionView]);
    char v6 = (void *)objc_claimAutoreleasedReturnValue([v5 cellForItemAtIndexPath:v4]);

    if (v6)
    {
      id v7 = *(void **)(a1 + 40);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 collectionView]);
      [v7 collectionView:v8 configureCell:v6 withObject:v9 atIndexPath:v4];
    }
  }
}

void sub_10000B778( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10000B79C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _showChangeSortUI];
}

void sub_10000BC64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, id *a10, id *a11, id *location, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, id a49)
{
}

void sub_10000BCF4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _changeSortingTo:0];
}

void sub_10000BD24(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _changeSortingTo:1];
}

void sub_10000BD54(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _changeSortingTo:3];
}

void sub_10000BD84(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _changeSortingTo:5];
}

void sub_10000C454(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) presentingViewController]);

  if (v2)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) presentingViewController]);
    [v3 dismissViewControllerAnimated:0 completion:0];
  }

void sub_10000C814(uint64_t a1)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) controller]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) actionBlock]);

  if (v2)
  {
    id v3 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) actionBlock]);
    ((void (**)(void, id, void))v3)[2](v3, v7, *(void *)(a1 + 40));
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v7 delegate]);
  char v5 = objc_opt_respondsToSelector(v4, "didPerformActionInSheet:");

  if ((v5 & 1) != 0)
  {
    char v6 = (void *)objc_claimAutoreleasedReturnValue([v7 delegate]);
    [v6 didPerformActionInSheet:*(void *)(a1 + 32)];
  }
}

void sub_10000C9F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10000CA1C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained actions]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 presentingButton]);
    [v4 showActionSheetWithActions:v2 fromButton:v3];

    id WeakRetained = v4;
  }
}

void sub_10000CD9C(uint64_t a1)
{
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)&OBJC_METACLASS___MTLibrary;
  id v1 = objc_msgSend(objc_msgSendSuper2(&v3, "allocWithZone:", 0), "init");
  uint64_t v2 = (void *)qword_1002B68D0;
  qword_1002B68D0 = (uint64_t)v1;
}

id sub_10000CFB0(uint64_t a1, void *a2)
{
  id v3 = [a2 iTunesMatchEnabled];
  id result = [*(id *)(a1 + 32) iTunesMatchEnabled];
  if ((_DWORD)v3 != (_DWORD)result)
  {
    [*(id *)(a1 + 32) setITunesMatchEnabled:v3];
    return _[*(id *)(a1 + 32) updateiTunesPlaylistForiTunesMatchState];
  }

  return result;
}

void sub_10000D0D4(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playlistForUuid:kPlaylistITunesPlaylistUuid]);
  unsigned int v2 = [v4 hidden];
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 != v2)
  {
    [v4 setHidden:v3 != 0];
    [*(id *)(a1 + 32) saveInCurrentBlock];
  }
}

uint64_t sub_10000D580(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 && !*(_BYTE *)(a1 + 40)) {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, id))(v4 + 16))(v4, v3);
  }
  else {
    uint64_t v5 = 0LL;
  }

  return v5;
}

void sub_10000E0F8(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) tableView]);
  [v1 setAdjustContentOffsetForRefreshControlAsNeeded:0];
}

void sub_10000E12C(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) refreshControl]);
  unsigned __int8 v3 = [v2 isRefreshing];

  if ((v3 & 1) == 0)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) refreshControl]);
    [v4 beginRefreshing];

    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) refreshControl]);
    [v5 endRefreshing];
  }

void sub_10000E9F8(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  id v4 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), v3), "defaultsKey");
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v9 = (id)objc_claimAutoreleasedReturnValue([v2 objectForKey:v5]);

  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) selectedUuid]);
  if (v9 == v6)
  {
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) selectedUuid]);
    unsigned __int8 v8 = [v9 isEqualToString:v7];

    if ((v8 & 1) == 0) {
      [*(id *)(a1 + 32) restoreSelection];
    }
  }
}

void sub_10000EF74(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  if (v4)
  {
    id v5 = *(void **)(a1 + 40);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_10000F00C;
    v6[3] = &unk_1002403A8;
    id v7 = v4;
    id v8 = v3;
    [v5 evaluate:v6 completionBlock:0];
  }
}

void sub_10000F00C(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) value]);
  id v5 = v2;
  if (*(void *)(a1 + 40)) {
    id v3 = *(void **)(a1 + 40);
  }
  else {
    id v3 = &__NSArray0__struct;
  }
  id v4 = [v2 callWithArguments:v3];
}

void sub_10000F2D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

BOOL sub_10000F2F0(id a1, MTTVEpisodeActionController *a2)
{
  return 1;
}

void sub_10000F2F8(uint64_t a1, void *a2)
{
  unsigned int v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  id v6 = (id)objc_claimAutoreleasedReturnValue([WeakRetained playlist]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 actionObject]);
  if (v6 && v5) {
    [v6 removeEpisode:v5];
  }
}

void sub_10000FCE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10000FD10(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v1 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained tableView]);
  [v1 reloadData];
}

LABEL_31:
}

  swift_bridgeObjectRetain(v13);
  v15 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_release(v13);
  if (!v15) {
    goto LABEL_30;
  }
LABEL_22:
  sub_1001366B0(0, v15 & ~(v15 >> 63), 0);
  if ((v15 & 0x8000000000000000LL) == 0)
  {
    v16 = 0LL;
    do
    {
      if ((v13 & 0xC000000000000001LL) != 0) {
        v17 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v13);
      }
      else {
        v17 = (char *)*(id *)(v13 + 8 * v16 + 32);
      }
      v18 = v17;
      v20 = *(void *)&v17[OBJC_IVAR___MTKeyProcessorPair_key];
      v19 = *(void *)&v17[OBJC_IVAR___MTKeyProcessorPair_key + 8];
      swift_bridgeObjectRetain(v19);

      v22 = _swiftEmptyArrayStorage[2];
      v21 = _swiftEmptyArrayStorage[3];
      if (v22 >= v21 >> 1) {
        sub_1001366B0(v21 > 1, v22 + 1, 1);
      }
      ++v16;
      _swiftEmptyArrayStorage[2] = v22 + 1;
      v23 = &_swiftEmptyArrayStorage[2 * v22];
      v23[4] = v20;
      v23[5] = v19;
    }

    while (v15 != v16);
    goto LABEL_30;
  }

LABEL_15:
}

  return v7;
}

  v42[0] = NSLocalizedDescriptionKey;
  v42[1] = NSUnderlyingErrorKey;
  v43[0] = @"Feed download failed";
  v43[1] = @"[no error]";
  v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v43,  v42,  2LL));
  v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.podcasts.externalfeeddownloader",  -1LL,  v21));

  v23 = (void *)objc_claimAutoreleasedReturnValue(-[MTExternalFeedDownloader delegate](self, "delegate"));
  objc_msgSend( v23,  "didDownloadFeedWithError:data:task:requestedUrl:useBackgroundFetch:",  v22,  0,  v8,  v11,  objc_msgSend(v8, "useBackgroundFetch"));
}
}
            }

            id v6 = v34;
          }
        }

        id v8 = (char *)v8 + 1;
      }

      while (v36 != v8);
      v31 = [obj countByEnumeratingWithState:&v37 objects:v41 count:16];
      v36 = v31;
      if (!v31)
      {
LABEL_21:

        (*(void (**)(void))(*(void *)(v32 + 40) + 16LL))();
        break;
      }
    }
  }
}

void sub_100011D6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100011D90(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v8 = WeakRetained;
  if (!v5)
  {
    uint64_t v11 = _MTLogCategoryDRM();
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    BOOL v12 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (!v12) {
        goto LABEL_9;
      }
      v13 = (void *)objc_claimAutoreleasedReturnValue([a1[5] URL]);
      id v14 = [a1[4] episodeStoreId];
      v15 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
      int v17 = 138412802;
      v18 = v13;
      __int16 v19 = 2048;
      id v20 = v14;
      __int16 v21 = 2114;
      v22 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "DRM/MTPlayerItem: Failed to create content key session for asset: %@, adamID: %lld with error: %{public}@.",  (uint8_t *)&v17,  0x20u);
    }

    else
    {
      if (!v12) {
        goto LABEL_9;
      }
      v13 = (void *)objc_claimAutoreleasedReturnValue([a1[5] URL]);
      id v16 = [a1[4] episodeStoreId];
      int v17 = 138412546;
      v18 = v13;
      __int16 v19 = 2048;
      id v20 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "DRM/MTPlayerItem: No session or error returned for asset: %@, adamID: %lld.",  (uint8_t *)&v17,  0x16u);
    }

    goto LABEL_9;
  }

  [WeakRetained setFairPlayKeySession:v5];
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 fairPlayKeyLoader]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([a1[4] fairPlayKeySession]);
  -[os_log_s startKeyRequestWithSession:completion:](v9, "startKeyRequestWithSession:completion:", v10, 0LL);

LABEL_9:
}

void sub_100012644(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  if (v1)
  {
    id v12 = 0LL;
    unsigned __int8 v2 = [v1 completeAndReturnError:&v12];
    id v3 = v12;
    uint64_t v5 = _MTLogCategoryPlayback(v3, v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    id v7 = v6;
    if ((v2 & 1) != 0)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        id v8 = "Stream written to disk";
        id v9 = v7;
        os_log_type_t v10 = OS_LOG_TYPE_DEBUG;
        uint32_t v11 = 2;
LABEL_7:
        _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, buf, v11);
      }
    }

    else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v14 = v3;
      id v8 = "Error completing cache: %@";
      id v9 = v7;
      os_log_type_t v10 = OS_LOG_TYPE_ERROR;
      uint32_t v11 = 12;
      goto LABEL_7;
    }
  }

void sub_100012880( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100012898(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000128A8(uint64_t a1)
{
}

void sub_1000128B0(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) episodeForPlayerItem:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

LABEL_9:
      int v17 = 0;
      goto LABEL_10;
    }
  }

  else
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[MTReachability sharedInstance](&OBJC_CLASS___MTReachability, "sharedInstance"));
    id v14 = [v13 isReachable];

    if ((v14 & 1) == 0)
    {
      v18 = _MTLogCategoryPlayback(v15, v16);
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v20) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "MTPlayerItem not playable. No episode found and network isn't reachable",  (uint8_t *)&v20,  2u);
      }

      goto LABEL_9;
    }
  }

  int v17 = 1;
LABEL_10:

  return v17;
}

  return v11;
}

    id v8 = 0;
    goto LABEL_10;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 domain]);

  if (!v7)
  {
    if (a4)
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue( +[MZKeyValueStoreError transactionMissingDomainErrorWithTransaction:underlyingError:]( &OBJC_CLASS___MZKeyValueStoreError,  "transactionMissingDomainErrorWithTransaction:underlyingError:",  v5,  0LL));
      goto LABEL_8;
    }

    goto LABEL_9;
  }

  id v8 = 1;
LABEL_10:

  return v8;
}

    id v6 = 0LL;
    goto LABEL_10;
  }

  return 1;
}

    id v12 = _MTLogCategoryDefault(v4);
    v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v14 = *(void *)(a1 + 48);
      id v16 = 138412290;
      int v17 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "Failed to authenticate user with error: %@",  (uint8_t *)&v16,  0xCu);
    }
  }

  v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) inFlightAuthRequests]);
  [v15 removeObject:*(void *)(a1 + 40)];
}

    id v12 = 110LL;
    goto LABEL_10;
  }

  os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue(-[MTMediaRemoteController player](self, "player"));
  [v10 nextRemote];
LABEL_7:

LABEL_8:
  id v12 = 0LL;
LABEL_10:

  return v12;
}
}

      if (++v3 >= -[UITableView numberOfSections](self, "numberOfSections")) {
        goto LABEL_10;
      }
    }
  }

  return v5;
}

    id v8 = 0LL;
    goto LABEL_10;
  }

  id v7 = objc_claimAutoreleasedReturnValue(-[MTTVApplicationController listenNowNavigationController](self, "listenNowNavigationController"));
LABEL_8:
  id v8 = (void *)v7;
LABEL_10:

  return v8;
}
}

  id v12 = 0;
LABEL_10:

  return v12;
}

  if (-[MTTVFloatingView isContentOpaque](self, "isContentOpaque")
    || self->_shadowMaskLayer
    || !-[MTTVFloatingView isShadowEnabled](self, "isShadowEnabled"))
  {
    if (-[MTTVFloatingView isContentOpaque](self, "isContentOpaque")
      || !-[MTTVFloatingView isShadowEnabled](self, "isShadowEnabled"))
    {
      shadowMaskLayer = self->_shadowMaskLayer;
      if (shadowMaskLayer)
      {
        -[CALayer removeFromSuperlayer](shadowMaskLayer, "removeFromSuperlayer");
        v18 = self->_shadowMaskLayer;
        self->_shadowMaskLayer = 0LL;
      }
    }
  }

  else
  {
    os_log_type_t v10 = (CALayer *)objc_claimAutoreleasedReturnValue(+[CALayer layer](&OBJC_CLASS___CALayer, "layer"));
    uint32_t v11 = self->_shadowMaskLayer;
    self->_shadowMaskLayer = v10;

    id v12 = self->_shadowMaskLayer;
    v13 = objc_claimAutoreleasedReturnValue(+[UIColor blackColor](&OBJC_CLASS___UIColor, "blackColor"));
    -[CALayer setBackgroundColor:](v12, "setBackgroundColor:", [v13 CGColor]);

    -[CALayer setCompositingFilter:](self->_shadowMaskLayer, "setCompositingFilter:", kCAFilterDestOut);
    id v14 = self->_shadowMaskLayer;
    v15 = -[MTTVFloatingView isSelected](self, "isSelected");
    LODWORD(v16) = 0;
    if (v15) {
      *(float *)&id v16 = 1.0;
    }
    -[CALayer setOpacity:](v14, "setOpacity:", v16);
    -[CALayer setCornerRadius:](self->_shadowMaskLayer, "setCornerRadius:", self->_cornerRadius);
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(-[_MTTVKTSpecialAnimatingView layer](self->_shadowView, "layer"));
    [v19 addSublayer:self->_shadowMaskLayer];
  }
}

  v28 = v5;
  -[NSMutableArray addObjectsFromArray:](v7, "addObjectsFromArray:", v6, v12);
  v30 = (uint64_t)-[NSMutableArray count](v7, "count");
  if (v30 >= 1)
  {
    int v17 = 0LL;
    v18 = v30;
    do
    {
      __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndexedSubscript:](v7, "objectAtIndexedSubscript:", v17));
      id v20 = _MTLogCategoryCloudSync(v19);
      __int16 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      v22 = v18;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v29 + 48) logPrefix]);
        v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v19 sortOrder]));
        v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v18));
        v33 = (void *)objc_claimAutoreleasedReturnValue([v19 title]);
        v24 = (void *)objc_claimAutoreleasedReturnValue([v19 feedURL]);
        v31 = [v19 storeCollectionId];
        v25 = objc_claimAutoreleasedReturnValue([v19 uuid]);
        *(_DWORD *)buf = 138544899;
        v38 = v34;
        v39 = 2112;
        v40 = v32;
        v41 = 2112;
        v42 = v23;
        v43 = 2113;
        v44 = v33;
        v45 = 2113;
        v46 = v24;
        v47 = 2049;
        v48 = v31;
        v49 = 2114;
        v50 = v25;
        v26 = (void *)v25;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Reordering local podcast to match remote order: from %@ to %@. Podcast: %{private}@, %{private} @, %{private}lld, %{public}@",  buf,  0x48u);

        v22 = v30 - v17;
      }

      [v19 setSortOrder:v22];
      ++v17;
      --v18;
    }

    while (v18);
  }
}

  while (2)
  {
    v44 = sub_10013004C(a1);
    if (!v44)
    {
LABEL_15:
      v51 = (uint64_t)sub_100130288(a1);
      if (!v51) {
        goto LABEL_103;
      }
      v32 = v51;
      v123[0] = _swiftEmptyArrayStorage;
      if ((unint64_t)v51 >> 62)
      {
        if (v51 >= 0) {
          a5 = v51 & 0xFFFFFFFFFFFFFF8LL;
        }
        else {
          a5 = v51;
        }
        swift_bridgeObjectRetain(v51);
        v29 = _CocoaArrayWrapper.endIndex.getter(a5);
        if (v29) {
          goto LABEL_18;
        }
      }

      else
      {
        v29 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain(v51);
        if (v29)
        {
LABEL_18:
          if (v29 < 1)
          {
            __break(1u);
            goto LABEL_73;
          }

          v36 = 0LL;
          __int16 v21 = &OBJC_IVAR___MTSyncController__episodeObservers;
          v22 = &selRef_remotePause_;
          while (1)
          {
            if ((v32 & 0xC000000000000001LL) != 0) {
              v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v32);
            }
            else {
              v53 = *(id *)(v32 + 8 * v36 + 32);
            }
            v24 = (int *)v53;
            v54 = dispatch thunk of ServerPodcastEpisode.relationships.getter(v24);
            if (!v54)
            {
              a1 = 0LL;
              goto LABEL_35;
            }

            v55 = (void *)v54;
            a1 = PodcastEpisodeRelationships.podcast.getter();

            if (a1) {
              break;
            }
LABEL_35:
            id v20 = (uint64_t *)[objc_allocWithZone((Class)MTPlayerItem) initWithPodcastEpisode:v24 podcast:a1];

            if (v20)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              v58 = *(void *)((v123[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              v57 = *(void *)((v123[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v58 >= v57 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1LL);
              }
              v52 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v58, v20);
              specialized Array._endMutation()(v52);
            }

            if (v29 == ++v36)
            {
              swift_bridgeObjectRelease(v32);
              v29 = v123[0];
              goto LABEL_64;
            }
          }

          a5 = PodcastRelationshipContainer.data.getter();

          if ((unint64_t)a5 >> 62)
          {
            if (a5 < 0) {
              v59 = a5;
            }
            else {
              v59 = a5 & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain(a5);
            a1 = _CocoaArrayWrapper.endIndex.getter(v59);
            swift_bridgeObjectRelease(a5);
            if (a1) {
              goto LABEL_29;
            }
          }

          else
          {
            a1 = *(void *)((a5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
            if (a1)
            {
LABEL_29:
              if ((a5 & 0xC000000000000001LL) != 0)
              {
                v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a5);
              }

              else
              {
                v37 = *(void *)((a5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
                if (!v37)
                {
                  __break(1u);
LABEL_54:
                  if (a1 >= 0) {
                    v65 = v37;
                  }
                  else {
                    v65 = a1;
                  }
                  swift_bridgeObjectRetain(a1);
                  a8 = _CocoaArrayWrapper.endIndex.getter(v65);
                  v33 = swift_bridgeObjectRelease(a1);
                  if (a8 <= 0) {
                    goto LABEL_5;
                  }
                  continue;
                }

                v56 = *(id *)(a5 + 32);
              }

              a1 = (int64_t)v56;
            }
          }

          swift_bridgeObjectRelease(a5);
          goto LABEL_35;
        }
      }

      swift_bridgeObjectRelease(v32);
      v29 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_64:
      swift_bridgeObjectRelease(v32);
      swift_beginAccess(v117, v123, 33LL, 0LL);
      v66 = swift_bridgeObjectRetain(v29);
      sub_10012F23C(v66);
      v67 = swift_endAccess(v123);
      id result = (id)_MTLogCategoryPlayback(v67, v68);
      if (result)
      {
        v69 = result;
        v36 = static os_log_type_t.default.getter(result);
        v70 = sub_100126450((uint64_t *)&unk_1002B5E60);
        v71 = swift_allocObject(v70, 72LL, 7LL);
        *(_OWORD *)(v71 + 16) = xmmword_1001C3C20;
        if ((unint64_t)v29 >> 62)
        {
          if (v29 < 0) {
            v73 = v29;
          }
          else {
            v73 = v29 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(v29);
          v72 = _CocoaArrayWrapper.endIndex.getter(v73);
          swift_bridgeObjectRelease(v29);
        }

        else
        {
          v72 = *(void *)((v29 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        }

        swift_bridgeObjectRelease(v29);
        *(void *)(v71 + 56) = &type metadata for Int;
        *(void *)(v71 + 64) = &protocol witness table for Int;
        *(void *)(v71 + 32) = v72;
        os_log(_:dso:log:type:_:)("NetworkMediaManifest: Performed fetch for library episodes, added %d episodes", v109);
        goto LABEL_102;
      }

      goto LABEL_122;
    }

    break;
  }

  a5 = (uint64_t)v44;
  if (!v44[2])
  {
    swift_bridgeObjectRelease(v44);
    goto LABEL_15;
  }

  id v20 = (uint64_t *)v44[4];
  v45 = v44[5];
  swift_unknownObjectRetain(v20);
  swift_bridgeObjectRelease(a5);
  v46 = type metadata accessor for ServerPodcast(0LL);
  v47 = swift_dynamicCastClass(v20, v46);
  if (!v47) {
    goto LABEL_98;
  }
  v48 = v47;
  v49 = v115;
  swift_beginAccess(v115, v120, 0LL, 0LL);
  if ((*v49 & 1) == 0)
  {
    v60 = swift_unknownObjectRetain(v20);
    v111 = v48;
    v61 = ServerPodcastBase.attributes.getter(v60);
    if (!v61) {
      goto LABEL_78;
    }
    v62 = v61;
    a5 = PodcastAttributes.offers.getter();
    swift_release(v62);
    if (!a5) {
      goto LABEL_78;
    }
    v110 = v45;
    a8 = a5 & 0xFFFFFFFFFFFFFF8LL;
    if (!((unint64_t)a5 >> 62))
    {
      if (*(void *)((a5 & 0xFFFFFFFFFFFFFF8LL) + 0x10))
      {
LABEL_49:
        if ((a5 & 0xC000000000000001LL) != 0)
        {
          v63 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a5);
        }

        else
        {
          if (!*(void *)(a8 + 16))
          {
            __break(1u);
            goto LABEL_114;
          }

          v63 = *(void *)(a5 + 32);
          swift_retain(v63);
        }

        v64 = swift_bridgeObjectRelease(a5);
        dispatch thunk of PodcastShowOffer.typeResolved.getter(v64);
        swift_release(v63);
LABEL_79:
        ((void (*)(uint64_t, void, int *))v22[13])(v32, enum case for PriceType.psub(_:), v21);
        ((void (*)(uint64_t, void, uint64_t, int *))v22[7])(v32, 0LL, 1LL, v21);
        v76 = v24[12];
        v77 = v113;
        v78 = v113 + v76;
        sub_10012A418(v36, v113, &qword_1002B4E60);
        sub_10012A418(v32, v78, &qword_1002B4E60);
        v79 = v22[6];
        if (((unsigned int (*)(uint64_t, uint64_t, int *))v79)(v77, 1LL, v21) == 1)
        {
          sub_10012A4A0(v32, &qword_1002B4E60);
          sub_10012A4A0(v36, &qword_1002B4E60);
          if (((unsigned int (*)(uint64_t, uint64_t, int *))v79)(v78, 1LL, v21) == 1)
          {
            v80 = sub_10012A4A0(v77, &qword_1002B4E60);
LABEL_86:
            v50 = ServerPodcastBase.relationships.getter(v80);
            if (!v50)
            {
              swift_unknownObjectRelease(v20);
              goto LABEL_97;
            }

            v84 = PodcastRelationships.channel.getter();
            v85 = swift_release(v50);
            if (v84)
            {
              v32 = PodcastChannelRelationshipContainer.data.getter(v85);
              id result = (id)swift_release(v84);
              if (!((unint64_t)v32 >> 62))
              {
                if (*(void *)((v32 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
                  goto LABEL_90;
                }
                goto LABEL_118;
              }

  __break(1u);
}

  v28 = static Logger.podcastsStatesCoordination.getter(v14);
  v29 = static os_log_type_t.default.getter(v28);
  v30 = a1;
  v31 = v13;
  v32 = (os_log_s *)Logger.logObject.getter(v30);
  if (os_log_type_enabled(v32, (os_log_type_t)v29))
  {
    v140 = v31;
    v141 = v11;
    v138 = v9;
    v33 = swift_slowAlloc(62LL, -1LL);
    v34 = swift_slowAlloc(160LL, -1LL);
    v145 = v34;
    *(_DWORD *)v33 = 134219267;
    v143 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v33 + 4, v33 + 12);
    *(_WORD *)(v33 + 12) = 2081;
    v35 = [v30 title];
    v139 = a3;
    v142 = (uint64_t)a2;
    v137 = v34;
    if (v35)
    {
      v36 = v35;
      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      v39 = v38;
    }

    else
    {
      v37 = 0LL;
      v39 = 0LL;
    }

    v143 = (id)v37;
    v144 = v39;
    v41 = sub_100126450(&qword_1002B5820);
    v42 = String.init<A>(describing:)(&v143, v41);
    v44 = v43;
    v143 = (id)sub_100178E7C(v42, v43, &v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v33 + 14, v33 + 22);

    swift_bridgeObjectRelease(v44);
    *(_WORD *)(v33 + 22) = 2080;
    v45 = [v30 uuid];
    LODWORD(v136) = v29;
    if (v45)
    {
      v46 = v45;
      v47 = v4;
      v48 = v8;
      v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v51 = v50;
    }

    else
    {
      v47 = v4;
      v48 = v8;
      v49 = 0LL;
      v51 = 0LL;
    }

    v143 = (id)v49;
    v144 = v51;
    v52 = String.init<A>(describing:)(&v143, v41);
    v54 = v53;
    v143 = (id)sub_100178E7C(v52, v53, &v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v33 + 24, v33 + 32);

    swift_bridgeObjectRelease(v54);
    *(_WORD *)(v33 + 32) = 2081;
    v143 = [v30 storeTrackId];
    v55 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
    v57 = v56;
    v143 = (id)sub_100178E7C(v55, v56, &v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v33 + 34, v33 + 42);

    swift_bridgeObjectRelease(v57);
    *(_WORD *)(v33 + 42) = 2081;
    v58 = [v30 guid];
    if (v58)
    {
      v59 = v58;
      v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
      v62 = v61;
    }

    else
    {
      v60 = 0LL;
      v62 = 0LL;
    }

    id v8 = v48;
    uint64_t v4 = v47;
    v63 = v136;
    v143 = (id)v60;
    v144 = v62;
    v64 = String.init<A>(describing:)(&v143, v41);
    v66 = v65;
    v143 = (id)sub_100178E7C(v64, v65, &v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v33 + 44, v33 + 52);

    swift_bridgeObjectRelease(v66);
    *(_WORD *)(v33 + 52) = 2080;
    a3 = v139;
    v67 = PodcastsStateChangeOrigin.description.getter(v139);
    v69 = v68;
    v143 = (id)sub_100178E7C(v67, v68, &v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v33 + 54, v33 + 62);
    swift_bridgeObjectRelease(v69);
    _os_log_impl( (void *)&_mh_execute_header,  v32,  v63,  "Marking as playState = %lld episode: %{private}s, uuid: %s, adamID: %{private}s, guid: %{private}s.; From origin: %s.",
      (uint8_t *)v33,
      0x3Eu);
    v70 = v137;
    swift_arrayDestroy(v137, 5LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1LL, -1LL);
    swift_slowDealloc(v33, -1LL, -1LL);

    v40 = *(void (**)(char *, uint64_t))(v138 + 8);
    v40(v140, v8);
    uint32_t v11 = v141;
    a2 = (void *)v142;
  }

  else
  {

    v40 = *(void (**)(char *, uint64_t))(v9 + 8);
    v40(v31, v8);
  }

  [*(id *)(v4 + OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_library) setPlayState:a2 fromContextActions:1 manually:1 forUserActionOnEpisode:v30 saveChanges:1];
  if (a2 == (void *)2)
  {
    v71 = [v30 podcast];
    if (v71)
    {
      v72 = v71;
      sub_10014F148(v71, 7LL, 4, a3);
    }

    else
    {
      static Logger.podcastsStatesCoordination.getter(0LL);
      v73 = v30;
      v74 = (os_log_s *)Logger.logObject.getter(v73);
      v75 = static os_log_type_t.error.getter(v74);
      if (os_log_type_enabled(v74, v75))
      {
        v141 = v11;
        v76 = swift_slowAlloc(42LL, -1LL);
        v77 = swift_slowAlloc(128LL, -1LL);
        v145 = v77;
        *(_DWORD *)v76 = 136381443;
        v78 = [v73 title];
        v142 = v77;
        if (v78)
        {
          v79 = v78;
          v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
          v82 = v81;
        }

        else
        {
          v80 = 0LL;
          v82 = 0LL;
        }

        v143 = (id)v80;
        v144 = v82;
        v84 = sub_100126450(&qword_1002B5820);
        v85 = String.init<A>(describing:)(&v143, v84);
        v87 = v86;
        v143 = (id)sub_100178E7C(v85, v86, &v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v76 + 4, v76 + 12);

        swift_bridgeObjectRelease(v87);
        *(_WORD *)(v76 + 12) = 2080;
        v88 = [v73 uuid];
        v135 = v8;
        if (v88)
        {
          v89 = v88;
          v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
          v92 = v91;
        }

        else
        {
          v90 = 0LL;
          v92 = 0LL;
        }

        v143 = (id)v90;
        v144 = v92;
        v93 = String.init<A>(describing:)(&v143, v84);
        v95 = v94;
        v143 = (id)sub_100178E7C(v93, v94, &v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v76 + 14, v76 + 22);

        swift_bridgeObjectRelease(v95);
        *(_WORD *)(v76 + 22) = 2081;
        v143 = [v73 storeTrackId];
        v96 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
        v98 = v97;
        v143 = (id)sub_100178E7C(v96, v97, &v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v76 + 24, v76 + 32);

        swift_bridgeObjectRelease(v98);
        *(_WORD *)(v76 + 32) = 2081;
        v99 = [v73 guid];
        if (v99)
        {
          v100 = v99;
          v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
          v103 = v102;
        }

        else
        {
          v101 = 0LL;
          v103 = 0LL;
        }

        id v8 = v135;
        v143 = (id)v101;
        v144 = v103;
        v104 = String.init<A>(describing:)(&v143, v84);
        v106 = v105;
        v143 = (id)sub_100178E7C(v104, v105, &v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v76 + 34, v76 + 42);

        swift_bridgeObjectRelease(v106);
        _os_log_impl( (void *)&_mh_execute_header,  v74,  v75,  "We can't transition podcast. MTEpisode without an associated podcast: %{private}s, uuid: %s, adamID: %{private }s, guid: %{private}s.",  (uint8_t *)v76,  0x2Au);
        v107 = v142;
        swift_arrayDestroy(v142, 4LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v107, -1LL, -1LL);
        swift_slowDealloc(v76, -1LL, -1LL);

        v83 = v141;
      }

      else
      {

        v83 = v11;
      }

      v40(v83, v8);
    }
  }

void sub_100012CE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100012CF8(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) episode]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v6 podcast]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 bestAvailableStoreCleanURL]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1000131B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_1000131DC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48) && ([*(id *)(a1 + 32) isDownloaded] & 1) == 0)
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) enclosureURL]);
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    uint64_t v10 = _MTLogCategoryPlayback(v8, v9);
    uint32_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
      int v13 = 138412290;
      uint64_t v14 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "invalidate asset is local but missing downloads. Switched to streaming URL %@",  (uint8_t *)&v13,  0xCu);
    }
  }

  else
  {
    uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) assetURL]);
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;
  }

void sub_1000135B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_1000135E8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) channelForStoreId:*(void *)(a1 + 48)]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 subscriptionActive];
}

void sub_100013634(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) episodeUuid]);
  id v7 = (id)objc_claimAutoreleasedReturnValue([v2 episodeForUuid:v3]);

  uint64_t v4 = objc_claimAutoreleasedReturnValue([v7 bestUrl]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_1000137AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100013834;
  v5[3] = &unk_1002405A8;
  v5[4] = *(void *)(a1 + 32);
  id v6 = v3;
  __int128 v7 = *(_OWORD *)(a1 + 40);
  id v4 = v3;
  dispatch_async(&_dispatch_main_q, v5);
}

void sub_100013834(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1000138A8;
  v3[3] = &unk_100240580;
  id v2 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  objc_msgSend(v2, "retrieveArtwork:withSize:", v3, *(double *)(a1 + 48), *(double *)(a1 + 56));
}

void sub_1000138A8(uint64_t a1, UIImage *image)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = UIImagePNGRepresentation(image);
  id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t, id, void))(v2 + 16))(v2, v4, 0LL);
}

void sub_100013B08(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100013B98;
  v6[3] = &unk_1002405F8;
  id v4 = *(id *)(a1 + 32);
  id v7 = v3;
  id v8 = v4;
  id v5 = v3;
  dispatch_async(&_dispatch_main_q, v6);
}

uint64_t sub_100013B98(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100013BA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100013C38;
  v6[3] = &unk_1002405F8;
  id v4 = *(id *)(a1 + 32);
  id v7 = v3;
  id v8 = v4;
  id v5 = v3;
  dispatch_async(&_dispatch_main_q, v6);
}

uint64_t sub_100013C38(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100013C48(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "imageWithSize:", *(double *)(a1 + 40), *(double *)(a1 + 48)));
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_100013F5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100013F9C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) episodeUuid]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v2 episodeForUuid:v3]);

  id v4 = v16;
  if (v16)
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue([v16 bestSummary]);
    uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    uint64_t v8 = objc_claimAutoreleasedReturnValue([v16 valueForKey:kEpisodePubDate]);
    uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    unsigned int v11 = [v16 isExplicit];
    id v4 = v16;
    if (v11)
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
      uint64_t v13 = objc_claimAutoreleasedReturnValue([v12 localizedStringForKey:@"ATV_EXPLICIT" value:&stru_100248948 table:0]);
      uint64_t v14 = *(void *)(*(void *)(a1 + 64) + 8LL);
      uint64_t v15 = *(void **)(v14 + 40);
      *(void *)(v14 + 40) = v13;

      id v4 = v16;
    }
  }
}

void sub_100014590( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000145B4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcast]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 title]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueForKey:kEpisodePubDate]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v9 verboseDisplayString]);
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_100014B14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100014B2C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcast predicateForPodcastUUID:]( &OBJC_CLASS___MTPodcast,  "predicateForPodcastUUID:",  *(void *)(a1 + 32)));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcast predicateForSubscribedAndNotHidden]( &OBJC_CLASS___MTPodcast,  "predicateForSubscribedAndNotHidden"));
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 AND:v3]);

  if ([*(id *)(a1 + 40) countOfObjectsInEntity:kMTPodcastEntityName predicate:v4]) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
  }
}

void sub_100014D7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100014D94(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcast predicateForSubscribedAndNotHidden]( &OBJC_CLASS___MTPodcast,  "predicateForSubscribedAndNotHidden"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcast predicateForIdentifer:]( &OBJC_CLASS___MTPodcast,  "predicateForIdentifer:",  *(void *)(a1 + 32)));
  id v5 = (id)objc_claimAutoreleasedReturnValue([v2 AND:v3]);

  id v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) objectsInEntity:kMTPodcastEntityName predicate:v5 sortDescriptors:0]);
  if ([v4 count]) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
  }
}

LABEL_7:
  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v24, 8);
}

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) location]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[MTStoreReportingController sharedInstance]( &OBJC_CLASS___MTStoreReportingController,  "sharedInstance"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v7 dictionaryRepresentation]);
  [v5 reportWithType:4 userInfo:v6 location:v4 reason:0];
}

    uint64_t v8 = 0LL;
    goto LABEL_8;
  }

  uint64_t v7 = v5;
LABEL_6:
  uint64_t v8 = v7;
LABEL_8:

  return v8;
}

  if (v9) {
    -[NSMutableAttributedString appendAttributedString:](v12, "appendAttributedString:", v9);
  }
  if ((a4 & 0x40) != 0)
  {
    if ((a4 & 0x80) != 0) {
      uint64_t v14 = [v6 reasonForNotPlayable];
    }
    else {
      uint64_t v14 = 0LL;
    }
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( -[MTEpisodeDescriptionCache descriptionFooterTextForEpisode:includesSeasonEpisodeType:includesDuration:includesPlayedIfPlayed:hasBodyText:unavailableReason:]( self,  "descriptionFooterTextForEpisode:includesSeasonEpisodeType:includesDuration:includesPlayedIfPlayed: hasBodyText:unavailableReason:",  v6,  (a4 >> 8) & 1,  (a4 >> 9) & 1,  (a4 >> 10) & 1,  [v9 length] != 0,  v14));
    if (v15) {
      -[NSMutableAttributedString appendAttributedString:](v12, "appendAttributedString:", v15);
    }
  }

  uint64_t v16 = -[NSAttributedString initWithAttributedString:]( objc_alloc(&OBJC_CLASS___NSAttributedString),  "initWithAttributedString:",  v12);

  return v16;
}
}
}

  return v11;
}

  if (v5 < 0)
  {
LABEL_19:
    id result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_20;
  }

  uint64_t v13 = v10 + 4;
  uint64_t v14 = a2 + 16 * a3;
  if (v14 >= (unint64_t)&v10[(unint64_t)v8 / 8 + 4] || (unint64_t)v13 >= v14 + v8)
  {
    swift_arrayInitWithCopy(v13);
    return v10;
  }

  id result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_20:
  __break(1u);
  return result;
}

  if (v5 < 0)
  {
LABEL_19:
    id result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_20;
  }

  uint64_t v13 = a2 + 8 * a3;
  if (v13 >= (unint64_t)&v10[(unint64_t)v8 / 8 + 4] || (unint64_t)(v10 + 4) >= v13 + v8)
  {
    sub_100134284(0LL, &qword_1002B4E40, &off_10023E2F8);
    swift_arrayInitWithCopy(v10 + 4);
    return v10;
  }

  id result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_20:
  __break(1u);
  return result;
}

  unsigned int v11 = [v4 textLabel];
  if (v11)
  {
    uint64_t v12 = v11;
    sub_100134284(0LL, (unint64_t *)&qword_1002B5DB8, &OBJC_CLASS___UIFont_ptr);
    uint64_t v13 = (void *)static UIFont.bodyEmph.getter();
    [v12 setFont:v13];
  }

  return (unint64_t)v4;
}

  __break(1u);
}

        swift_bridgeObjectRelease(v8);
        id result = swift_bridgeObjectRelease(v12);
        uint64_t v3 = v13;
        if (v4 == v34) {
          return (uint64_t)v32;
        }
      }

      uint64_t v18 = *(void *)(v3 + 48);
      uint64_t v19 = (void *)(v18 + 16 * v17);
      id v20 = v19[1];
      __int16 v21 = *v19 == v14 && v20 == v12;
      if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, v14, v12, 0LL) & 1) == 0) {
        break;
      }
LABEL_24:
      swift_bridgeObjectRelease(v12);
      v28 = v32;
      id result = swift_isUniquelyReferenced_nonNull_native(v32);
      v38 = v32;
      if ((result & 1) == 0)
      {
        id result = sub_1001366B0(0, v32[2] + 1LL, 1);
        v28 = v38;
      }

      v30 = v28[2];
      v29 = v28[3];
      if (v30 >= v29 >> 1)
      {
        id result = sub_1001366B0(v29 > 1, v30 + 1, 1);
        v28 = v38;
      }

      v28[2] = v30 + 1;
      v32 = v28;
      v31 = &v28[2 * v30];
      v31[4] = v7;
      v31[5] = v8;
      uint64_t v2 = v34;
      uint64_t v3 = v13;
      if (v4 == v34) {
        return (uint64_t)v32;
      }
    }

    v22 = ~v16;
    for (i = v17 + 1; ; i = v24 + 1)
    {
      v24 = i & v22;
      v25 = (void *)(v18 + 16 * v24);
      v26 = v25[1];
      v27 = *v25 == v14 && v26 == v12;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v25, v26, v14, v12, 0LL) & 1) != 0) {
        goto LABEL_24;
      }
    }

    goto LABEL_7;
  }

  return (uint64_t)_swiftEmptyArrayStorage;
}

  uint64_t v13 = sub_100169788(v9, v10, a3);
  swift_bridgeObjectRelease(v8);
  return v13;
}

void sub_100014FFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_100015020(uint64_t a1)
{
  id v8 = (id)objc_claimAutoreleasedReturnValue( +[MTPodcast predicateForPodcastWithFeedUrl:]( &OBJC_CLASS___MTPodcast,  "predicateForPodcastWithFeedUrl:",  *(void *)(a1 + 32)));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectsInEntity:predicate:sortDescriptors:", kMTPodcastEntityName));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 firstObject]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uuid]);
  id v5 = [v4 length];

  if (v5)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
    if ([v3 subscribed])
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
    }

    else
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[PodcastsStateCoordinator shared](&OBJC_CLASS____TtC8Podcasts24PodcastsStateCoordinator, "shared"));
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 uuid]);
      [v6 enableSubscriptionOnPodcastUUID:v7 from:3];
    }
  }
}

void sub_10001512C(uint64_t a1)
{
  uint64_t v2 = objc_opt_new(&OBJC_CLASS___MTAddPodcastParams);
  -[MTAddPodcastParams setUrl:](v2, "setUrl:", *(void *)(a1 + 32));
  -[MTAddPodcastParams setLocation:](v2, "setLocation:", @"pssf");
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000151EC;
  v4[3] = &unk_1002406E8;
  id v5 = *(id *)(a1 + 40);
  -[MTAddPodcastParams setCompletion:](v2, "setCompletion:", v4);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTSubscriptionManager sharedInstance](&OBJC_CLASS___MTSubscriptionManager, "sharedInstance"));
  [v3 subscribeToPodcastWithParams:v2];
}

uint64_t sub_1000151EC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1000152EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100015550( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_100015574(uint64_t a1)
{
  id v8 = (id)objc_claimAutoreleasedReturnValue( +[MTPodcast predicateForIdentifer:]( &OBJC_CLASS___MTPodcast,  "predicateForIdentifer:",  *(void *)(a1 + 32)));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectsInEntity:predicate:sortDescriptors:", kMTPodcastEntityName));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 firstObject]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uuid]);
  id v5 = [v4 length];

  if (v5)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
    if ([v3 subscribed])
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
    }

    else
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[PodcastsStateCoordinator shared](&OBJC_CLASS____TtC8Podcasts24PodcastsStateCoordinator, "shared"));
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 uuid]);
      [v6 enableSubscriptionOnPodcastUUID:v7 from:3];
    }
  }
}

void sub_100015680(uint64_t a1)
{
  uint64_t v2 = objc_opt_new(&OBJC_CLASS___MTAddPodcastParams);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) feedUrl]);
  -[MTAddPodcastParams setUrl:](v2, "setUrl:", v3);

  -[MTAddPodcastParams setLocation:](v2, "setLocation:", @"pssf");
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) storeIdentifier]);
  -[MTAddPodcastParams setStoreCollectionId:](v2, "setStoreCollectionId:", [v4 longLongValue]);

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100015784;
  v6[3] = &unk_1002406E8;
  id v7 = *(id *)(a1 + 40);
  -[MTAddPodcastParams setCompletion:](v2, "setCompletion:", v6);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTSubscriptionManager sharedInstance](&OBJC_CLASS___MTSubscriptionManager, "sharedInstance"));
  [v5 subscribeToPodcastWithParams:v2];
}

uint64_t sub_100015784(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100015860(uint64_t a1)
{
  id v8 = (id)objc_claimAutoreleasedReturnValue( +[MTPodcast predicateForIdentifer:]( &OBJC_CLASS___MTPodcast,  "predicateForIdentifer:",  *(void *)(a1 + 32)));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectsInEntity:predicate:sortDescriptors:", kMTPodcastEntityName));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 firstObject]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uuid]);
  id v5 = [v4 length];

  if (v5)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[PodcastsStateCoordinator shared](&OBJC_CLASS____TtC8Podcasts24PodcastsStateCoordinator, "shared"));
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 uuid]);
    [v6 disableSubscriptionOnPodcastUUID:v7 from:3];
  }
}

LABEL_14:
    switch((unint64_t)[v6 downloadPhase])
    {
      case 1uLL:
        id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
        uint64_t v12 = v20;
        __int16 v21 = @"Preparing to download...";
        goto LABEL_21;
      case 2uLL:
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v6 downloadDescription]);
        goto LABEL_23;
      case 3uLL:
        id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
        uint64_t v12 = v20;
        __int16 v21 = @"TAP_TO_RESUME_DOWNLOAD";
        goto LABEL_21;
      case 4uLL:
        id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
        uint64_t v12 = v20;
        __int16 v21 = @"Waiting";
        goto LABEL_21;
      case 5uLL:
        id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
        uint64_t v12 = v20;
        __int16 v21 = @"DOWNLOAD_ERROR_TAP_TO_RETRY";
LABEL_21:
        uint64_t v13 = objc_claimAutoreleasedReturnValue([v20 localizedStringForKey:v21 value:&stru_100248948 table:0]);
        goto LABEL_22;
      default:
        uint64_t v19 = 0LL;
        goto LABEL_23;
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[MTReachability sharedInstance](&OBJC_CLASS___MTReachability, "sharedInstance"));
  uint64_t v13 = objc_claimAutoreleasedReturnValue([v12 reasonTextForNoInternet]);
LABEL_22:
  uint64_t v19 = (void *)v13;

LABEL_23:
  return v19;
}

  return 0;
}

  return v10;
}
}

id sub_100016844(uint64_t a1)
{
  return [*(id *)(a1 + 32) didChangeValueForKey:@"upcomingItems"];
}

void sub_100016F34(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)]);
  unsigned __int8 v2 = [v3 deletePlayedEpisodesResolvedValue];
  [v3 setDeletePlayedEpisodes:*(void *)(a1 + 48)];
}

void sub_100017148(_Unwind_Exception *a1)
{
}

void sub_100017160(uint64_t a1)
{
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread currentThread](&OBJC_CLASS___NSThread, "currentThread"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 threadDictionary]);

  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"kMTUnplayedRssEpisodesRecursionCount"]);
  id v5 = (char *)[v4 integerValue];

  if ((uint64_t)v5 <= 0)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v5 + 1));
    [v3 setObject:v9 forKeyedSubscript:@"kMTUnplayedRssEpisodesRecursionCount"];

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForRSSEpisodes](&OBJC_CLASS___MTEpisode, "predicateForRSSEpisodes"));
    unsigned int v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[MTEpisode predicateForEpisodesOnPodcastUuid:deletePlayedEpisodes:]( &OBJC_CLASS___MTEpisode,  "predicateForEpisodesOnPodcastUuid:deletePlayedEpisodes:",  v11,  1LL));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v10 AND:v12]);

    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 40) countOfObjectsInEntity:kMTEpisodeEntityName predicate:v13];
  }

  else
  {
    uint64_t v7 = _MTLogCategoryDatabase(v6);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "Hit recursion guard for -[MTPodcast countOfUnplayedRssEpisodes]. Short circuiting.",  v14,  2u);
    }
  }

  [v3 setObject:&off_1002546F8 forKeyedSubscript:@"kMTUnplayedRssEpisodesRecursionCount"];
}

LABEL_13:
      v33 = 1;
      goto LABEL_15;
    }
  }

  else
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(-[MTTableViewCell leftAccessoryView](self, "leftAccessoryView"));

    if (v24)
    {
      v25 = (void *)objc_claimAutoreleasedReturnValue(-[MTTableViewCell leftAccessoryView](self, "leftAccessoryView"));
      v26 = (MTTableViewCell *)objc_claimAutoreleasedReturnValue([v25 superview]);

      if (v26 != self)
      {
        v27 = objc_claimAutoreleasedReturnValue(-[MTTableViewCell leftAccessoryView](self, "leftAccessoryView"));
LABEL_12:
        v31 = (void *)v27;
        v32 = (void *)objc_claimAutoreleasedReturnValue(-[MTTableViewCell contentView](self, "contentView"));
        -[MTTableViewCell insertSubview:belowSubview:](self, "insertSubview:belowSubview:", v31, v32);

        goto LABEL_13;
      }

      goto LABEL_13;
    }
  }

  v33 = 0;
LABEL_15:
  else {
    v34 = objc_claimAutoreleasedReturnValue(-[MTTableViewCell leftAccessoryView](self, "leftAccessoryView"));
  }
  v35 = (void *)v34;
  v36 = (void *)objc_claimAutoreleasedReturnValue(-[MTTableViewCell contentView](self, "contentView"));
  [v36 frame];
  v38 = v37;
  v40 = v39;
  v42 = v41;
  MinY = v43;

  if (self->_separator)
  {
    v57.origin.x = x;
    v57.origin.y = y;
    v57.size.width = v18;
    v57.size.height = v20;
    MinY = CGRectGetMinY(v57);
    v45 = (void *)objc_claimAutoreleasedReturnValue(-[MTTableViewCell contentView](self, "contentView"));
    objc_msgSend(v45, "setFrame:", v38, v40, v42, MinY);
  }

  if (v35)
  {
    v46 = objc_msgSend(v35, "sizeThatFits:", v42, MinY);
    IMRectCenteredYInRectScale(v46, 15.0, 0.0, v47, v48, v38, v40, v42, MinY, 0.0);
    objc_msgSend(v35, "setFrame:");
  }

  +[UIView setAnimationsEnabled:](&OBJC_CLASS___UIView, "setAnimationsEnabled:", v23);
  if (v33)
  {
    [v35 frame];
    MaxX = CGRectGetMaxX(v58);
    v50 = v38 + MaxX;
    v51 = v42 - (MaxX + 0.0);
    v52 = (void *)objc_claimAutoreleasedReturnValue(-[MTTableViewCell contentView](self, "contentView"));
    objc_msgSend(v52, "setFrame:", v50, v40 + 0.0, v51, MinY);
  }
}
}

  return v5;
}
}
}

    uint64_t result = sub_100179104(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    id v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  id v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

id sub_100017B3C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateCellShadows:*(unsigned __int8 *)(a1 + 40)];
}

id sub_100017E54()
{
  v0 = objc_opt_new(&OBJC_CLASS___UITableViewCell);
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(-[UITableViewCell _disclosureChevronImage:](v0, "_disclosureChevronImage:", 0LL));

  return v1;
}

void sub_1000182CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000182E4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000182F4(uint64_t a1)
{
}

void sub_1000182FC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7 = [a2 indexOfObject:*(void *)(a1 + 32)];
  if (v7 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v8 = objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForRow:inSection:](&OBJC_CLASS___NSIndexPath, "indexPathForRow:inSection:", v7, a3));
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    *a4 = 1;
  }

void sub_100018524(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = [a2 indexOfObject:*(void *)(a1 + 32)];
  if (v5 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v6 = *(void **)(a1 + 40);
    id v7 = (id)objc_claimAutoreleasedReturnValue( +[NSIndexPath indexPathForRow:inSection:]( &OBJC_CLASS___NSIndexPath,  "indexPathForRow:inSection:",  v5,  a3));
    [v6 addObject:v7];
  }

LABEL_11:
  return (char)v3;
}
}

  return v6;
}

  return v27;
}

  return (char)v3;
}
}
}

  return (char)v7;
}

  return (char)v7;
}

  return (char)v8;
}

  return (char)v4;
}
}

  return v3;
}
}

  if (v1 < 0) {
    id v7 = v1;
  }
  else {
    id v7 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v1);
  id v5 = _CocoaArrayWrapper.endIndex.getter(v7);
  uint64_t result = swift_bridgeObjectRelease(v1);
  if (!v5) {
    return (uint64_t)v4;
  }
LABEL_15:
  uint64_t v8 = 0LL;
  uint64_t v9 = (char *)(v4 + 7);
  v23 = v5;
  while ((v24 & 0xC000000000000001LL) != 0)
  {
    uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v24);
    uint64_t v10 = __OFADD__(v8++, 1LL);
    if (v10) {
      goto LABEL_32;
    }
LABEL_24:
    v25 = result;
    v27 = result;
    unsigned int v11 = v4[5];
    uint64_t v12 = type metadata accessor for AnyCancellable(0LL);
    uint64_t v13 = sub_100127210( &qword_1002B4C48,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v12, v13);
    uint64_t v14 = -1LL << *((_BYTE *)v4 + 32);
    uint64_t v15 = result & ~v14;
    uint64_t v16 = v15 >> 6;
    uint64_t v17 = *(void *)&v9[8 * (v15 >> 6)];
    uint64_t v18 = 1LL << v15;
    if (((1LL << v15) & v17) != 0)
    {
      uint64_t v19 = ~v14;
      id v20 = sub_100127210( &qword_1002B4C50,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
      do
      {
        v26 = *(void *)(v4[6] + 8 * v15);
        uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)(&v26, &v27, v12, v20);
        if ((result & 1) != 0)
        {
          uint64_t result = swift_release(v25);
          id v5 = v23;
          goto LABEL_17;
        }

        uint64_t v15 = (v15 + 1) & v19;
        uint64_t v16 = v15 >> 6;
        uint64_t v17 = *(void *)&v9[8 * (v15 >> 6)];
        uint64_t v18 = 1LL << v15;
      }

      while ((v17 & (1LL << v15)) != 0);
      id v5 = v23;
    }

    *(void *)&v9[8 * v16] = v18 | v17;
    *(void *)(v4[6] + 8 * v15) = v25;
    __int16 v21 = v4[2];
    uint64_t v10 = __OFADD__(v21, 1LL);
    v22 = v21 + 1;
    if (v10) {
      goto LABEL_33;
    }
    v4[2] = v22;
LABEL_17:
    if (v8 == v5) {
      return (uint64_t)v4;
    }
  }

  if (v8 >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_34;
  }
  uint64_t result = swift_retain(*(void *)(v24 + 32 + 8 * v8));
  uint64_t v10 = __OFADD__(v8++, 1LL);
  if (!v10) {
    goto LABEL_24;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

      uint64_t v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10) {
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
      goto LABEL_5;
    }

    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }

void sub_100018B5C(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[MZPreferences storeBookkeeperPreferences](&OBJC_CLASS___MZPreferences, "storeBookkeeperPreferences"));
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"MZKeyValueStoreClamps" withDefaultValue:0]);

  if (v2)
  {
    id v11 = 0LL;
    id v4 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  objc_opt_class(&OBJC_CLASS___MZKeyValueStoreClampsController, v3),  v2,  &v11);
    uint64_t v5 = objc_claimAutoreleasedReturnValue(v4);
    id v6 = v11;
    id v7 = (void *)qword_1002B68E8;
    qword_1002B68E8 = v5;
  }

  else
  {
    id v6 = 0LL;
  }

  if (qword_1002B68E8) {
    BOOL v8 = v6 == 0LL;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8)
  {
    uint64_t v9 = objc_alloc_init(&OBJC_CLASS___MZKeyValueStoreClampsController);
    uint64_t v10 = (void *)qword_1002B68E8;
    qword_1002B68E8 = (uint64_t)v9;
  }
}

void sub_100018F38(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 removeAllObjects];
  [v3 setValuesForKeysWithDictionary:*(void *)(a1 + 32)];
}

void sub_10001906C(_Unwind_Exception *a1)
{
}

void sub_100019084(uint64_t a1)
{
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pendingUserDefaultArchivedData]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v2 == 0LL;

  id v3 = (id)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  *(void *)(a1 + 32),  1LL,  0LL));
  [*(id *)(a1 + 32) setPendingUserDefaultArchivedData:v3];
}

void sub_1000190FC(uint64_t a1)
{
  uint64_t v5 = 0LL;
  id v6 = &v5;
  uint64_t v7 = 0x3032000000LL;
  BOOL v8 = sub_1000191FC;
  uint64_t v9 = sub_10001920C;
  id v10 = 0LL;
  unsigned __int8 v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100019214;
  v4[3] = &unk_1002404E0;
  void v4[4] = *(void *)(a1 + 32);
  v4[5] = &v5;
  dispatch_sync(v2, v4);

  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[MZPreferences storeBookkeeperPreferences](&OBJC_CLASS___MZPreferences, "storeBookkeeperPreferences"));
  [v3 setObject:v6[5] forKey:@"MZKeyValueStoreClamps"];

  _Block_object_dispose(&v5, 8);
}

void sub_1000191E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000191FC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10001920C(uint64_t a1)
{
}

id sub_100019214(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pendingUserDefaultArchivedData]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return [*(id *)(a1 + 32) setPendingUserDefaultArchivedData:0];
}

void sub_1000194CC(uint64_t a1)
{
  id v6 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionClamps]);
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSMutableDictionary, v2);
  if ((objc_opt_isKindOfClass(v6, v3) & 1) == 0)
  {
    if (v6)
    {
      id v4 = (NSMutableDictionary *)-[NSMutableDictionary mutableCopy](v6, "mutableCopy");

      uint64_t v5 = v4;
    }

    else
    {
      uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    }

    id v6 = v5;
    objc_msgSend(*(id *)(a1 + 32), "setTransactionClamps:");
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000195C4(id a1, NSMutableDictionary *a2)
{
}

void sub_10001960C(id a1)
{
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSDate);
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSString);
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v4, 3LL));
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v1, v4, v5));
  uint64_t v3 = (void *)qword_1002B68F0;
  qword_1002B68F0 = v2;
}

void sub_10001974C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v3 setValue:v4 forKey:*(void *)(a1 + 32)];
}

id sub_100019834(uint64_t a1, void *a2)
{
  return [a2 setValue:0 forKey:*(void *)(a1 + 32)];
}

void sub_100019E5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100019E80(uint64_t a1, void *a2)
{
  uint64_t v3 = objc_claimAutoreleasedReturnValue([a2 valueForKey:*(void *)(a1 + 32)]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

LABEL_56:
LABEL_57:
LABEL_58:
      if (a6)
      {
        v91 = [(id)objc_opt_class(self) reportingStringForPlayReason:a6];
        v92 = (void *)objc_claimAutoreleasedReturnValue(v91);
        [v12 setObject:v92 forKey:@"play_source"];
      }

      -[MTStoreReportingController recordMetricsEventForType:withData:]( self,  "recordMetricsEventForType:withData:",  v8,  v12);

      return;
    case 4:
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v93 objectForKey:kPodcastStoreCollectionId]);
      if ([v14 unsignedLongLongValue]) {
        [v12 setObject:v14 forKey:@"podcastId"];
      }
      v58 = kPodcastTitle;
      v59 = (void *)objc_claimAutoreleasedReturnValue([v93 objectForKey:kPodcastTitle]);
      v60 = [v59 length];

      if (v60)
      {
        v61 = (void *)objc_claimAutoreleasedReturnValue([v93 objectForKey:v58]);
        [v12 setObject:v61 forKey:@"podcastName"];
      }

      v62 = kPodcastUpdatedFeedUrl;
      v63 = (void *)objc_claimAutoreleasedReturnValue([v93 objectForKey:kPodcastUpdatedFeedUrl]);
      v64 = [v63 length];

      if (!v64)
      {
        v62 = kPodcastFeedUrl;
        v65 = (void *)objc_claimAutoreleasedReturnValue([v93 objectForKey:kPodcastFeedUrl]);
        v66 = [v65 length];

        if (!v66) {
          goto LABEL_57;
        }
      }

      v67 = (void *)objc_claimAutoreleasedReturnValue([v93 objectForKey:v62]);
      [v12 setObject:v67 forKey:@"feedUrl"];
      goto LABEL_56;
    case 6:
      v68 = kEpisodeRestoredCount;
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v93 objectForKey:kEpisodeRestoredCount]);
      if ([v14 unsignedLongLongValue]) {
        [v12 setObject:v14 forKey:v68];
      }
      v69 = kEpisodeRestoreRequested;
      v70 = (void *)objc_claimAutoreleasedReturnValue([v93 objectForKey:kEpisodeRestoreRequested]);
      v71 = [v70 BOOLValue];

      v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v71));
      [v12 setObject:v72 forKey:v69];

      v73 = kEpisodeRestoreIsRetry;
      v74 = (void *)objc_claimAutoreleasedReturnValue([v93 objectForKey:kEpisodeRestoreIsRetry]);
      else {
        v75 = &__kCFBooleanFalse;
      }
      [v12 setObject:v75 forKey:v73];

      goto LABEL_57;
    default:
      goto LABEL_58;
  }

  v51 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  v52 = swift_unknownObjectRetain_n(v8, 2LL);
  v53 = (void *)swift_dynamicCastClass(v52, v51);
  if (!v53)
  {
    swift_unknownObjectRelease(v8);
    v53 = _swiftEmptyArrayStorage;
  }

  v54 = v53[2];
  v35 = swift_release(v53);
  if (__OFSUB__(v16 >> 1, v10))
  {
LABEL_206:
    __break(1u);
    goto LABEL_207;
  }

  v35 = (unint64_t)v8;
  if (v54 != (v16 >> 1) - v10)
  {
LABEL_207:
    swift_unknownObjectRelease(v35);
    goto LABEL_55;
  }

  v50 = (void *)swift_dynamicCastClass(v8, v51);
  if (!v50)
  {
    swift_unknownObjectRelease(v8);
    v50 = _swiftEmptyArrayStorage;
  }

            v75 = (v81 - 1) & v81;
            v79 = __clz(__rbit64(v81)) + (v76 << 6);
LABEL_57:
            v83 = (uint64_t *)(*(void *)(v121 + 48) + 16 * v79);
            v84 = *v83;
            v85 = v83[1];
            sub_1001343F8(*(void *)(v121 + 56) + 32 * v79, (uint64_t)v129);
            sub_1001343F8((uint64_t)v129, (uint64_t)&v127);
            swift_bridgeObjectRetain(v85);
            v86 = v122;
            v87 = swift_dynamicCast(v77, &v127, v119, v122, 6LL);
            v88 = v123;
            v89 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v123 + 56);
            if (v87)
            {
              v89(v77, 0LL, 1LL, v86);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v77, 1LL, v86) != 1)
              {
                v90 = v122;
                v91 = v123;
                v92 = v114;
                v93 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v123 + 32))(v114, v77, v122);
                v94 = Date.timeIntervalSinceReferenceDate.getter(v93);
                v77 = (uint64_t)v115;
                v128 = &type metadata for Double;
                *(double *)&v127 = v94;
                (*(void (**)(char *, uint64_t))(v91 + 8))(v92, v90);
LABEL_62:
                sub_100136648(v129);
                *(void *)(v120 + ((v79 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v79;
                v95 = (void *)(v71[6] + 16 * v79);
                *v95 = v84;
                v95[1] = v85;
                sub_100136668(&v127, (_OWORD *)(v71[7] + 32 * v79));
                v96 = v71[2];
                v61 = __OFADD__(v96, 1LL);
                v97 = v96 + 1;
                if (v61)
                {
                  __break(1u);
                  goto LABEL_82;
                }

                v71[2] = v97;
                if (v75) {
                  goto LABEL_42;
                }
                goto LABEL_43;
              }
            }

            else
            {
              v89(v77, 1LL, 1LL, v86);
            }

            sub_100136608(v77);
            sub_1001343F8((uint64_t)v129, (uint64_t)&v127);
            goto LABEL_62;
          }

          goto LABEL_3;
        }
      }
    }

void sub_10001B2F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10001B30C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10001B31C(uint64_t a1)
{
}

void sub_10001B324(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)]);
  uint64_t v2 = objc_claimAutoreleasedReturnValue([v5 dictionaryRepresentation]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10001B4DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = objc_claimAutoreleasedReturnValue([v5 userId]);
    BOOL v8 = (void *)v7;
    if (v7) {
      uint64_t v9 = (__CFString *)v7;
    }
    else {
      uint64_t v9 = &stru_100248948;
    }
    id v10 = v9;

    uint64_t v11 = objc_claimAutoreleasedReturnValue([v5 clientId]);
    uint64_t v12 = (void *)v11;
    if (v11) {
      uint64_t v13 = (__CFString *)v11;
    }
    else {
      uint64_t v13 = &stru_100248948;
    }
    uint64_t v14 = v13;

    uint64_t v15 = *(void **)(a1 + 32);
    v21[0] = @"userId";
    v21[1] = @"clientId";
    v22[0] = v10;
    v22[1] = v14;
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v22,  v21,  2LL));
    objc_msgSend(v15, "im_addPropertiesWithDictionary:", v16);
  }

  else
  {
    uint64_t v17 = _MTLogCategoryMetrics();
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
      int v19 = 138412290;
      id v20 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Failed to fetch AnalyticsUserIdentifier from AMS for store reporting with error %@",  (uint8_t *)&v19,  0xCu);
    }
  }

  +[IMMetrics recordEvent:topic:]( &OBJC_CLASS___IMMetrics,  "recordEvent:topic:",  *(void *)(a1 + 32),  @"xp_dzc_main");
}

void sub_10001CCD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_10001CCF4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerItem]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 episodeUuid]);
  id v5 = (id)objc_claimAutoreleasedReturnValue([v2 episodeForUuid:v4]);

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v5 isExplicit];
}

void sub_10001CD70(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerItem]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 episodeUuid]);
  id v5 = (id)objc_claimAutoreleasedReturnValue([v2 episodeForUuid:v4]);

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v5 isExplicit];
}

uint64_t sub_10001CDEC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10001CDFC(uint64_t a1)
{
}

void sub_10001CE04(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerItem]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 episodeUuid]);
  id v8 = (id)objc_claimAutoreleasedReturnValue([v2 episodeForUuid:v4]);

  [v8 pubDate];
  uint64_t v5 = objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:"));
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_10001CE9C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerItem]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 episodeUuid]);
  id v8 = (id)objc_claimAutoreleasedReturnValue([v2 episodeForUuid:v4]);

  uint64_t v5 = objc_claimAutoreleasedReturnValue([v8 bestSummary]);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_10001F8CC(_Unwind_Exception *a1)
{
}

void sub_10001F8F4(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = WeakRetained;
  if (WeakRetained)
  {
    if (v6)
    {
      [WeakRetained _asyncFetchArtworkDidLoadImage:v6 forArtworkKey:*(void *)(a1 + 32)];
    }

    else
    {
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage defaultPodcastArtwork](&OBJC_CLASS___UIImage, "defaultPodcastArtwork"));
      [v4 _asyncFetchArtworkDidLoadImage:v5 forArtworkKey:*(void *)(a1 + 32)];
    }
  }
}

void sub_10001F984(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = WeakRetained;
  if (WeakRetained)
  {
    if (v6)
    {
      [WeakRetained _asyncFetchArtworkDidLoadImage:v6 forArtworkKey:*(void *)(a1 + 32)];
    }

    else
    {
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage defaultPodcastArtwork](&OBJC_CLASS___UIImage, "defaultPodcastArtwork"));
      [v4 _asyncFetchArtworkDidLoadImage:v5 forArtworkKey:*(void *)(a1 + 32)];
    }
  }
}

void sub_10001FAC4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) artworkKey]);
  unsigned int v3 = [v2 isEqual:*(void *)(a1 + 40)];

  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) imageView]);
    [v4 setImage:*(void *)(a1 + 48)];

    [*(id *)(a1 + 32) setNeedsLayout];
  }

void sub_10001FF74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10001FF8C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isAudio];
  if ((result & 1) != 0)
  {
    uint64_t v3 = 1LL;
  }

  else
  {
    id result = [*(id *)(a1 + 32) isVideo];
    if ((result & 1) != 0)
    {
      uint64_t v3 = 2LL;
    }

    else
    {
      id result = [*(id *)(a1 + 32) isExternalType];
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v3 = 3LL;
    }
  }

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v3;
  return result;
}

void sub_1000200AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_1000200C4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isDownloaded];
  if ((result & 1) != 0)
  {
    uint64_t v3 = 2LL;
  }

  else
  {
    if (!*(void *)(a1 + 32)) {
      return result;
    }
    uint64_t v3 = 1LL;
  }

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v3;
  return result;
}

void sub_10002108C(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___MTTVUserSwitchLoadingView);
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](&OBJC_CLASS___UIScreen, "mainScreen"));
  [v4 bounds];
  uint64_t v2 = -[MTTVUserSwitchLoadingView initWithFrame:](v1, "initWithFrame:");
  uint64_t v3 = (void *)qword_1002B6900;
  qword_1002B6900 = (uint64_t)v2;
}

void sub_10002177C(_Unwind_Exception *a1)
{
}

void sub_1000217B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained userSwitchLabel]);
  [v1 setAlpha:1.0];

  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained userSpinnerView]);
  [v2 setAlpha:1.0];
}

void sub_10002181C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [*(id *)(a1 + 32) setAlpha:0.0];
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained userSwitchEffectView]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIBlurEffect effectWithStyle:](&OBJC_CLASS___UIBlurEffect, "effectWithStyle:", 2LL));
  [v2 setEffect:v3];
}

uint64_t sub_100021898(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_1000218AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) startAnimation];
}

void sub_100021AEC(_Unwind_Exception *a1)
{
}

void sub_100021B38(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained userSwitchSnapshotView]);
  [v1 setAlpha:0.0];

  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained userSpinnerView]);
  [v2 stopAnimating];

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained userSwitchLabel]);
  [v3 setAlpha:0.0];
}

void sub_100021BB4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [*(id *)(a1 + 32) setAlpha:1.0];
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained userSwitchEffectView]);
  [v2 setEffect:0];
}

void sub_100021C10(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained userSwitchEffectView]);
  [v2 removeFromSuperview];

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained userSwitchSnapshotView]);
  [v3 removeFromSuperview];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained userSpinnerView]);
  [v4 removeFromSuperview];

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained userSwitchLabel]);
  [v5 removeFromSuperview];

  [WeakRetained setUserSwitchEffectView:0];
  [WeakRetained setUserSwitchSnapshotView:0];
  [WeakRetained setUserSpinnerView:0];
  [WeakRetained setUserSwitchLabel:0];
  id v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained userSwitchOverlayWindow]);
  [v6 setHidden:1];

  *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = 0;
}

id sub_100021FDC(uint64_t a1)
{
  context = objc_autoreleasePoolPush();
  uint64_t v2 = kMTPodcastEntityName;
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"%K in %@",  kPodcastUuid,  *(void *)(a1 + 40)));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectsInEntity:v2 predicate:v4 sortDescriptors:0]);

  id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  id v7 = v5;
  id v8 = [v7 countByEnumeratingWithState:&v30 objects:v35 count:16];
  uint64_t v9 = kPlaylistUuid;
  if (v8)
  {
    id v10 = v8;
    uint64_t v11 = *(void *)v31;
    do
    {
      uint64_t v12 = 0LL;
      do
      {
        if (*(void *)v31 != v11) {
          objc_enumerationMutation(v7);
        }
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v30 + 1) + 8 * (void)v12) playlists]);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 valueForKey:v9]);
        -[NSMutableSet unionSet:](v6, "unionSet:", v14);

        uint64_t v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      id v10 = [v7 countByEnumeratingWithState:&v30 objects:v35 count:16];
    }

    while (v10);
  }

  uint64_t v15 = *(void **)(a1 + 32);
  uint64_t v16 = kMTPlaylistEntityName;
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"%K in %@",  v9,  v6));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v15 objectsInEntity:v16 predicate:v17 sortDescriptors:0]);

  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id v19 = v18;
  id v20 = [v19 countByEnumeratingWithState:&v26 objects:v34 count:16];
  if (v20)
  {
    id v21 = v20;
    uint64_t v22 = *(void *)v27;
    do
    {
      v23 = 0LL;
      do
      {
        if (*(void *)v27 != v22) {
          objc_enumerationMutation(v19);
        }
        [*(id *)(*((void *)&v26 + 1) + 8 * (void)v23) setNeedsUpdate:1];
        v23 = (char *)v23 + 1;
      }

      while (v21 != v23);
      id v21 = [v19 countByEnumeratingWithState:&v26 objects:v34 count:16];
    }

    while (v21);
  }

  objc_autoreleasePoolPop(context);
  return [*(id *)(a1 + 32) saveInCurrentBlock];
}

void sub_100022364( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10002237C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[MTPlaylist topLevelPlaylistsExcludingFoldersPredicate]( &OBJC_CLASS___MTPlaylist,  "topLevelPlaylistsExcludingFoldersPredicate"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectsInEntity:kMTPlaylistEntityName predicate:v2 sortDescriptors:0]);
  if ([v3 count])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKey:kPlaylistUuid]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v4));

    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", *(void *)(a1 + 40)));
    if ([v5 isEqualToSet:v6])
    {
      uint64_t v17 = v6;
      uint64_t v18 = v5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      id v7 = v3;
      id v8 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = *(void *)v20;
        do
        {
          for (i = 0LL; i != v9; i = (char *)i + 1)
          {
            if (*(void *)v20 != v10) {
              objc_enumerationMutation(v7);
            }
            uint64_t v12 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
            uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "uuid", v17, v18, (void)v19));
            uint64_t v14 = (char *)[*(id *)(a1 + 40) count];
            uint64_t v15 = &v14[~(unint64_t)[*(id *)(a1 + 40) indexOfObject:v13]];
            if (v15 != [v12 sortOrder]) {
              [v12 setSortOrder:v15];
            }
          }

          id v9 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
        }

        while (v9);
      }

      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 32) saveInCurrentBlock];
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[SyncKeysRepository shared](&OBJC_CLASS____TtC18PodcastsFoundation18SyncKeysRepository, "shared"));
      [v16 setIsPlaylistSyncDirty:1];

      id v6 = v17;
      uint64_t v5 = v18;
    }
  }
}

void sub_1000226A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000226BC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcast predicateForNotHiddenNotImplicitlyFollowedPodcasts]( &OBJC_CLASS___MTPodcast,  "predicateForNotHiddenNotImplicitlyFollowedPodcasts"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectsInEntity:kMTPodcastEntityName predicate:v2 sortDescriptors:0]);
  if ([v3 count])
  {
    __int128 v22 = v2;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    id v5 = v3;
    id v6 = [v5 countByEnumeratingWithState:&v28 objects:v33 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v29;
      do
      {
        for (i = 0LL; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v29 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void **)(*((void *)&v28 + 1) + 8LL * (void)i);
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 uuid]);
          unint64_t v12 = (unint64_t)[*(id *)(a1 + 40) indexOfObject:v11];
          if (v12 != 0x7FFFFFFFFFFFFFFFLL)
          {
            uint64_t v13 = (char *)[v5 count] + ~v12;
            if (v13 != [v10 sortOrder])
            {
              [v10 setSortOrder:v13];
              [v23 addObject:v11];
              uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v10 syncType]));
              [v4 addObject:v14];
            }
          }
        }

        id v7 = [v5 countByEnumeratingWithState:&v28 objects:v33 count:16];
      }

      while (v7);
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(a1 + 32) saveInCurrentBlock];
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    id v15 = v4;
    id v16 = [v15 countByEnumeratingWithState:&v24 objects:v32 count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = *(void *)v25;
      do
      {
        for (j = 0LL; j != v17; j = (char *)j + 1)
        {
          if (*(void *)v25 != v18) {
            objc_enumerationMutation(v15);
          }
          id v20 = [*(id *)(*((void *)&v24 + 1) + 8 * (void)j) integerValue];
          __int128 v21 = (void *)objc_claimAutoreleasedReturnValue( +[SyncKeysRepository shared]( &OBJC_CLASS____TtC18PodcastsFoundation18SyncKeysRepository,  "shared"));
          [v21 markSubscriptionSyncDirty:1 for:v20];
        }

        id v17 = [v15 countByEnumeratingWithState:&v24 objects:v32 count:16];
      }

      while (v17);
    }

    [*(id *)(a1 + 48) _markPlaylistsForUpdateForPodcastUuids:v23];
    uint64_t v2 = v22;
  }
}

void sub_100022AB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100022AD0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playlistForUuid:*(void *)(a1 + 40)]);
  if (v2)
  {
    id v5 = v2;
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 mutableOrderedSetValueForKey:kPlaylistEpisodes]);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_100022BC4;
    v6[3] = &unk_100240AA8;
    id v7 = *(id *)(a1 + 48);
    [v3 sortUsingComparator:v6];
    [v5 setContainerOrder:2];
    [v5 setNeedsUpdate:1];
    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(a1 + 32) saveInCurrentBlock];
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[SyncKeysRepository shared](&OBJC_CLASS____TtC18PodcastsFoundation18SyncKeysRepository, "shared"));
    [v4 setIsPlaylistSyncDirty:1];

    uint64_t v2 = v5;
  }
}

id sub_100022BC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 uuid]);
  if ([v7 containsObject:v8])
  {
    id v9 = *(void **)(a1 + 32);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 uuid]);
    uint64_t v11 = (uint64_t)[v9 indexOfObject:v10];
  }

  else
  {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }

  unint64_t v12 = *(void **)(a1 + 32);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v6 uuid]);
  if ([v12 containsObject:v13])
  {
    uint64_t v14 = *(void **)(a1 + 32);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v6 uuid]);
    uint64_t v16 = (uint64_t)[v14 indexOfObject:v15];
  }

  else
  {
    uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  }

  id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v11));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v16));
  id v19 = [v17 compare:v18];

  return v19;
}

void sub_100022E18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100022E30(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playlistForUuid:*(void *)(a1 + 40)]);
  if (v2)
  {
    id v8 = v2;
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 mutableOrderedSetValueForKey:kPlaylistSettings]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKey:kPlaylistSettingUuid]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 set]);

    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", *(void *)(a1 + 48)));
    if ([v5 isEqualToSet:v6])
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      v9[2] = sub_100022F84;
      v9[3] = &unk_100240AF8;
      id v10 = *(id *)(a1 + 48);
      [v3 sortUsingComparator:v9];
      [v8 setContainerOrder:2];
      [v8 setNeedsUpdate:1];
      *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(a1 + 32) saveInCurrentBlock];
      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[SyncKeysRepository shared](&OBJC_CLASS____TtC18PodcastsFoundation18SyncKeysRepository, "shared"));
      [v7 setIsPlaylistSyncDirty:1];
    }

    uint64_t v2 = v8;
  }
}

id sub_100022F84(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a2 uuid]);
  id v8 = [v5 indexOfObject:v7];

  id v9 = *(void **)(a1 + 32);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 uuid]);

  id v11 = [v9 indexOfObject:v10];
  unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v8));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v11));
  id v14 = [v12 compare:v13];

  return v14;
}

void sub_10002380C(_Unwind_Exception *a1)
{
}

void sub_100023864(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  id v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10002395C;
  v8[3] = &unk_100240B20;
  objc_copyWeak(&v10, &location);
  char v11 = a3;
  id v9 = *(id *)(a1 + 40);
  v7.receiver = v6;
  v7.super_class = (Class)&OBJC_CLASS___MTStoreManifest;
  objc_msgSendSuper2(&v7, "load:", v8);

  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);
}

void sub_100023940(_Unwind_Exception *a1)
{
}

uint64_t sub_10002395C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _updateLoadStatus:*(unsigned __int8 *)(a1 + 48)];

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000239A8(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = [a1[4] timeIntervalSinceNow];
  uint64_t v6 = v5;
  uint64_t v7 = _MTLogCategoryNetwork(v4);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v26 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "StorePlatform lookup took: %f", buf, 0xCu);
  }

  buf[0] = 0;
  id WeakRetained = objc_loadWeakRetained(a1 + 7);
  BOOL v10 = [WeakRetained playbackOrder] == (id)2;

  id v11 = objc_loadWeakRetained(a1 + 7);
  unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 podcastAdamId]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 stringValue]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v13]);

  id v15 = objc_loadWeakRetained(a1 + 7);
  id v16 = objc_msgSend( (id)objc_opt_class(v15),  "playerItemsFromPodcastStorePlatformDictionary:oldestEpisode:restricted:initiatedByAnotherUser:",  v14,  v10,  buf,  objc_msgSend(a1[5], "initiatedByAnotherUser"));
  id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  id v18 = objc_loadWeakRetained(a1 + 7);
  [v18 setItems:v17];

  id v19 = a1[5];
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  void v21[2] = sub_100023BF0;
  v21[3] = &unk_100240B20;
  objc_copyWeak(&v23, a1 + 7);
  uint8_t v24 = buf[0];
  id v22 = a1[6];
  v20.receiver = v19;
  v20.super_class = (Class)&OBJC_CLASS___MTStoreManifest;
  objc_msgSendSuper2(&v20, "load:", v21);

  objc_destroyWeak(&v23);
}

void sub_100023BD4(_Unwind_Exception *a1)
{
}

uint64_t sub_100023BF0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _updateLoadStatus:*(unsigned __int8 *)(a1 + 48)];

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100023C3C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _updateLoadStatus:0];

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000240C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void sub_100024100(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000241F4;
  v10[3] = &unk_100240BC0;
  objc_copyWeak(v13, (id *)(a1 + 48));
  id v6 = v5;
  uint64_t v7 = *(void **)(a1 + 56);
  id v11 = v6;
  v13[1] = v7;
  __int128 v9 = *(_OWORD *)(a1 + 32);
  id v8 = (id)v9;
  __int128 v12 = v9;
  char v14 = a3;
  +[IMAVPlayer performOnMainQueue:](&OBJC_CLASS___IMAVPlayer, "performOnMainQueue:", v10);

  objc_destroyWeak(v13);
}

void sub_1000241E0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000241F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id *)(a1 + 56);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained setItems:v2];

  unint64_t v5 = *(void *)(a1 + 64);
  if (v5 >= (unint64_t)[*(id *)(a1 + 32) count])
  {
    if (![*(id *)(a1 + 32) count])
    {
      uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_12;
    }

    uint64_t v6 = 0LL;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0LL;
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_12;
    }
  }

  uint64_t v7 = v6;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:v6]);
  __int128 v9 = v8;
  if (v8)
  {
    double v10 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    if (v10 != 0.0)
    {
      [v8 duration];
      if (v10 < v11) {
        [v9 setPlayhead:*(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)];
      }
    }
  }

LABEL_12:
  id v12 = objc_loadWeakRetained(v3);
  [v12 setCurrentIndex:v7];

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 72));
  }
  return result;
}

uint64_t sub_100024954(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v2 = a2;
    uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSNull, v3);
    uint64_t v6 = objc_opt_class(v4, v5);
    char isKindOfClass = objc_opt_isKindOfClass(v2, v6);
  }

  else
  {
    char isKindOfClass = 1;
  }

  return isKindOfClass & 1;
}

void sub_100024C80(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectsInEntity:kMTEpisodeEntityName predicate:*(void *)(a1 + 40) propertiesToFetch:*(void *)(a1 + 48) batchSize:0]);
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id obj = v1;
  id v2 = [v1 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v18;
    uint64_t v5 = kEpisodeUuid;
    uint64_t v14 = kEpisodeAssetURL;
    do
    {
      for (i = 0LL; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v18 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 enclosureURL]);
        if ([v8 length])
        {
          __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v7 uuid]);
          double v10 = (void *)objc_claimAutoreleasedReturnValue([v7 assetURL]);
          double v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObject:forKey:",  v9,  v5));
          if ([v10 length]) {
            [v11 setObject:v10 forKey:v14];
          }
          id v12 = *(void **)(a1 + 56);
          id v13 = [v11 copy];
          [v12 setObject:v13 forKey:v8];
        }
      }

      id v3 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
    }

    while (v3);
  }
}

id sub_100025834(id a1, NSNumber *a2)
{
  return -[NSNumber stringValue](a2, "stringValue");
}

void sub_10002583C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v3 count]);
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  uint64_t v17 = a1;
  id v5 = *(id *)(a1 + 32);
  id v6 = [v5 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v6)
  {
    id v7 = v6;
    unsigned __int8 v8 = 0;
    uint64_t v9 = *(void *)v20;
    double v10 = kMTPreferredArtworkSize;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v20 != v9) {
          objc_enumerationMutation(v5);
        }
        id v12 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v3,  "objectForKeyedSubscript:",  *(void *)(*((void *)&v19 + 1) + 8 * (void)i),  v17));
        if (v12)
        {
          char v18 = 0;
          id v13 = (void *)objc_claimAutoreleasedReturnValue( +[MTStorePlatformUtil storeMediaDictionaryFromStorePlatformDictionary:artworkSize:restricted:]( &OBJC_CLASS___MTStorePlatformUtil,  "storeMediaDictionaryFromStorePlatformDictionary:artworkSize:restricted:",  v12,  &v18,  v10));
          if (v13) {
            -[NSMutableArray addObject:](v4, "addObject:", v13);
          }
          v8 |= v18 != 0;
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v7);
  }

  else
  {
    unsigned __int8 v8 = 0;
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v17 + 48) storeMediaDictionariesToPlayerItems:v4 initiatedByAnotherUser:*(unsigned __int8 *)(v17 + 56)]);
  id v15 = v14;
  uint64_t v16 = *(void *)(v17 + 40);
  if (v16) {
    (*(void (**)(uint64_t, void *, void))(v16 + 16))(v16, v14, ([v14 count] == 0) & v8);
  }
}

void sub_100025EF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
}

uint64_t sub_100025F28(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100025F38(uint64_t a1)
{
}

void sub_100025F40(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = objc_alloc(&OBJC_CLASS___NSFetchRequest);
    id v3 = -[NSFetchRequest initWithEntityName:](v2, "initWithEntityName:", kMTPodcastEntityName);
    -[NSFetchRequest setPredicate:](v3, "setPredicate:", *(void *)(a1 + 32));
    -[NSFetchRequest setResultType:](v3, "setResultType:", 0LL);
    -[NSFetchRequest setSortDescriptors:](v3, "setSortDescriptors:", *(void *)(a1 + 40));
    -[NSFetchRequest setFetchLimit:](v3, "setFetchLimit:", [*(id *)(a1 + 48) fetchLimit]);
    uint64_t v33 = kPodcastChannel;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v33, 1LL));
    -[NSFetchRequest setRelationshipKeyPathsForPrefetching:](v3, "setRelationshipKeyPathsForPrefetching:", v4);

    -[NSFetchRequest setReturnsObjectsAsFaults:](v3, "setReturnsObjectsAsFaults:", 0LL);
    id v5 = *(void **)(a1 + 56);
    id v31 = 0LL;
    uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 executeFetchRequest:v3 error:&v31]);
    id v7 = v31;
    uint64_t v8 = *(void *)(*(void *)(a1 + 96) + 8LL);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v6;

    double v10 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL);
    if (!v10)
    {
      [v7 logAndThrow:1];
      double v10 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL);
    }

    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    id v11 = v10;
    id v12 = [v11 countByEnumeratingWithState:&v27 objects:v32 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v28;
      do
      {
        id v15 = 0LL;
        do
        {
          if (*(void *)v28 != v14) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v27 + 1) + 8 * (void)v15), "channel", (void)v27));
          uint64_t v17 = v16;
          if (v16
            && (uint64_t)[v16 showCount] >= 2
            && ([*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) containsObject:v17] & 1) == 0)
          {
            [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) addObject:v17];
          }

          id v15 = (char *)v15 + 1;
        }

        while (v13 != v15);
        id v13 = [v11 countByEnumeratingWithState:&v27 objects:v32 count:16];
      }

      while (v13);
    }
  }

  uint64_t v18 = *(void *)(a1 + 64);
  if (v18)
  {
    uint64_t v19 = objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 56),  "objectsInEntity:predicate:sortDescriptors:returnsObjectsAsFaults:limit:",  kMTEpisodeEntityName,  v18,  *(void *)(a1 + 72),  0,  objc_msgSend(*(id *)(a1 + 48), "fetchLimit")));
    uint64_t v20 = *(void *)(*(void *)(a1 + 112) + 8LL);
    __int128 v21 = *(void **)(v20 + 40);
    *(void *)(v20 + 40) = v19;
  }

  uint64_t v22 = *(void *)(a1 + 80);
  if (v22)
  {
    id v23 = *(void **)(*(void *)(*(void *)(a1 + 104) + 8LL) + 40LL);
    uint8_t v24 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 56),  "objectsInEntity:predicate:sortDescriptors:returnsObjectsAsFaults:limit:",  kMTChannelEntityName,  v22,  *(void *)(a1 + 88),  0,  objc_msgSend(*(id *)(a1 + 48), "fetchLimit")));
    [v23 addObjectsFromArray:v24];
  }

  objc_msgSend( *(id *)(a1 + 48),  "setPodcastResults:",  *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40),  (void)v27);
  [*(id *)(a1 + 48) setEpisodeResults:*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 40)];
  __int128 v25 = *(void **)(a1 + 48);
  id v26 = [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) copy];
  [v25 setChannelResults:v26];
}

void sub_100026C58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100026C70(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)]);
  uint64_t v2 = objc_claimAutoreleasedReturnValue([v5 title]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_100026E3C(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 valueForKey:@"uuid"]);
  uint64_t v4 = objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](&OBJC_CLASS___NSMutableSet, "setWithArray:", v3));
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 8);
  *(void *)(v5 + _Block_object_dispose(va, 8) = v4;

  id v7 = objc_opt_new(&OBJC_CLASS___NSMutableSet);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(v8 + 16);
  *(void *)(v8 + 16) = v7;

  double v10 = objc_opt_new(&OBJC_CLASS___NSMutableSet);
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(void **)(v11 + 24);
  *(void *)(v11 + 24) = v10;

  return [*(id *)(a1 + 32) notifyObservers];
}

void sub_1000270A0(void *a1, int a2, id a3)
{
  id v4 = objc_retainBlock(a3);
  (*((void (**)(id, void, void, void))v4 + 2))(v4, a1[4], a1[5], a1[6]);
}

void sub_100027534( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100027560(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:@"MTListenNowManagerListenNowContentDidChange" object:0];

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained update];
}

void sub_100027664(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) listenNowQueryObserver]);
  [v1 startObserving];
}

id sub_10002771C(uint64_t a1)
{
  return [*(id *)(a1 + 32) stop];
}

id sub_100027790(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) listenNowQueryObserver]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10002780C;
  v4[3] = &unk_100240D18;
  void v4[4] = *(void *)(a1 + 32);
  [v2 results:v4];

  return [*(id *)(a1 + 32) _endBackgroundTask];
}

id sub_10002780C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) processListenNowEpisodes:a2];
}

void sub_1000278A0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) listenNowQueryObserver]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100027924;
  v3[3] = &unk_100240D70;
  id v4 = *(id *)(a1 + 40);
  [v2 results:v3];
}

uint64_t sub_100027924(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100027A4C(_Unwind_Exception *a1)
{
}

id sub_100027A64(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _endBackgroundTask:1];
}

void sub_100027BF0(_Unwind_Exception *a1)
{
}

void sub_100029684( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10002969C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000296AC(uint64_t a1)
{
}

uint64_t sub_1000296B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = _MTLogCategoryMediaRemote(v6);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    double v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) title]);
    int v13 = 138543618;
    uint64_t v14 = v9;
    __int16 v15 = 2112;
    uint64_t v16 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[InfoCenter] Finished fetching artwork for content item %{public}@ - %@",  (uint8_t *)&v13,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) artworkRequests]);
  [v11 removeObject:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];

  return kdebug_trace(723518112LL, 0LL, 0LL, 0LL, 0LL);
}

uint64_t sub_1000298D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _MTLogCategoryMediaRemote(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) title]);
    int v9 = 138543618;
    double v10 = v6;
    __int16 v11 = 2112;
    id v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[InfoCenter] Did fetch artwork for content item %{public}@ - %@",  (uint8_t *)&v9,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  return kdebug_trace(723518112LL, 0LL, 0LL, 0LL, 0LL);
}

void sub_100029BB8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) episodeUuid]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 episodeForUuid:v3]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 itemDescriptionWithoutHTML]);
  uint64_t v6 = _MTLogCategoryMediaRemote(v5);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) identifier]);
    uint64_t v9 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) title]);
    double v10 = (void *)v9;
    __int16 v11 = &stru_100248948;
    int v12 = 138543874;
    int v13 = v8;
    __int16 v14 = 2112;
    if (!v5) {
      __int16 v11 = @" - NO DESCRIPTION";
    }
    uint64_t v15 = v9;
    __int16 v16 = 2112;
    uint64_t v17 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[InfoCenter] Did fetch info for content item %{public}@ - %@%@",  (uint8_t *)&v12,  0x20u);
  }

  (*(void (**)(void, void *))(*(void *)(a1 + 56) + 16LL))(*(void *)(a1 + 56), v5);
}

void sub_10002A2DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_10002A314(uint64_t a1, void *a2, _BYTE *a3)
{
  id v9 = a2;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v9 instanceIdentifier]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 UUIDString]);
  unsigned int v8 = [v7 isEqualToString:*(void *)(a1 + 32)];

  if (v8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
    *a3 = 1;
  }
}

void sub_10002A3A8(uint64_t a1, void *a2)
{
  id v3 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  id v4 = a2;
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 title]);
  uint64_t v6 = (void *)v5;
  if (v5) {
    uint64_t v7 = (const __CFString *)v5;
  }
  else {
    uint64_t v7 = &stru_100248948;
  }
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v3 stringByAppendingString:v7]);
  uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@":"]);
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8LL);
  __int16 v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  int v12 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  id v20 = (id)objc_claimAutoreleasedReturnValue([v4 instanceIdentifier]);

  uint64_t v13 = objc_claimAutoreleasedReturnValue([v20 UUIDString]);
  __int16 v14 = (void *)v13;
  if (v13) {
    uint64_t v15 = (const __CFString *)v13;
  }
  else {
    uint64_t v15 = &stru_100248948;
  }
  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v12 stringByAppendingString:v15]);
  uint64_t v17 = objc_claimAutoreleasedReturnValue([v16 stringByAppendingString:@","]);
  uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v19 = *(void **)(v18 + 40);
  *(void *)(v18 + 40) = v17;
}

id sub_10002AD98(uint64_t a1)
{
  return [*(id *)(a1 + 32) layoutIfNeeded];
}

void sub_10002B740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

Class sub_10002B7A8(uint64_t a1)
{
  id v3 = 0LL;
  if (!qword_1002B6918)
  {
    __int128 v4 = off_100240E98;
    uint64_t v5 = 0LL;
    qword_1002B6918 = _sl_dlopen(&v4, &v3);
    if (!qword_1002B6918)
    {
      abort_report_np("%s", (const char *)v3);
LABEL_8:
      sub_10017C328();
    }

    if (v3) {
      free(v3);
    }
  }

  Class result = objc_getClass("AFAnalytics");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    goto LABEL_8;
  }
  qword_1002B6910 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

id sub_10002BD54(uint64_t a1, uint64_t a2)
{
  if ((a2 & 1) == 0 && *(_BYTE *)(a1 + 56))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
    [v3 openURL:*(void *)(a1 + 40)];

    a2 = 1LL;
  }

  return _[*(id *)(a1 + 32) completeOpenURLWithSuccess:a2 completionHandler:*(void *)(a1 + 48)];
}

uint64_t sub_10002BE38(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 40));
}

void sub_10002C6D8(id a1, NSError *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[IMLogger sharedLogger](&OBJC_CLASS___IMLogger, "sharedLogger"));
    [v3 logFile:"/Library/Caches/com.apple.xbs/Sources/Marmoset/Source/ATV/MTAppDelegate_ATV.m", 62, @"Unable to register cache directory: %@", v2 lineNumber format];
  }

void sub_10002C740(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[IMAVPlayer sharedPlayer](&OBJC_CLASS___IMAVPlayer, "sharedPlayer"));

  if (v1)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IMLogger sharedLogger](&OBJC_CLASS___IMLogger, "sharedLogger"));
    [v2 logFile:"/Library/Caches/com.apple.xbs/Sources/Marmoset/Source/ATV/MTAppDelegate_ATV.m" lineNumber:72 format:@"Resetting playback speed back to normal"];

    id v3 = (id)objc_claimAutoreleasedReturnValue(+[IMAVPlayer sharedPlayer](&OBJC_CLASS___IMAVPlayer, "sharedPlayer"));
    [v3 setPlaybackSpeed:0];
  }

void sub_10002CAA0(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue( +[AnalyticsIdentifierManager sharedInstance]( &OBJC_CLASS____TtC18PodcastsFoundation26AnalyticsIdentifierManager,  "sharedInstance"));
  [v1 resetIfNeeded];
}

void sub_10002CAE8(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](&OBJC_CLASS___MTPlayerController, "defaultInstance"));
  [v1 presentNowPlayingAnimated:1];
}

void sub_10002CCD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10002CD58;
  v5[3] = &unk_100240240;
  v5[4] = *(void *)(a1 + 32);
  id v6 = v3;
  id v4 = v3;
  dispatch_async(&_dispatch_main_q, v5);
}

id sub_10002CD58(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 launchOptions]);
  [v2 _loadWithBootURL:v3 withLaunchOptions:v4];

  return [*(id *)(a1 + 32) setSetupHelper:0];
}

void sub_10002CF04(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleAccountsChangedOnMainQueue];
}

void sub_10002D17C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10002D198(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained storeAccountDidChange];
}

uint64_t sub_10002D264(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10002D28C(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[MTTVUserSwitchLoadingView loadingScreen](&OBJC_CLASS___MTTVUserSwitchLoadingView, "loadingScreen"));
  [v1 hide];
}

BOOL sub_10002E1A8(id a1, IMActionController *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 episodes]);
  BOOL v4 = [v3 count] != 0;

  return v4;
}

void sub_10002E1FC(id a1, MTTVPodcastActionController *a2, id a3)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject", a3));
  if (v3)
  {
    id v7 = v3;
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uuid]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[MTPlaybackQueueFactory playPodcastUuid:]( &OBJC_CLASS___MTPlaybackQueueFactory,  "playPodcastUuid:",  v4));

    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](&OBJC_CLASS___MTPlayerController, "defaultInstance"));
    [v6 playManifest:v5 reason:3 interactive:1 completion:0];

    uint64_t v3 = v7;
  }
}

BOOL sub_10002E334(id a1, IMActionController *a2)
{
  return 1;
}

void sub_10002E33C(id a1, MTTVPodcastActionController *a2, id a3)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject", a3));
  if (v5)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateManager sharedInstance](&OBJC_CLASS___MTFeedUpdateManager, "sharedInstance"));
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v5 uuid]);
    [v3 updatePodcastWithUUID:v4 userInitiated:1 source:3 completion:0];
  }
}

BOOL sub_10002E45C(id a1, IMActionController *a2)
{
  return 1;
}

void sub_10002E464(id a1, MTTVPodcastActionController *a2, id a3)
{
  id v5 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](v5, "actionObject"));
  if (v3)
  {
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController delegate](v5, "delegate"));
    [v4 performShowSettingsForPodcast:v3];
  }
}

BOOL sub_10002E570(id a1, IMActionController *a2)
{
  return 1;
}

void sub_10002E578(id a1, MTTVPodcastActionController *a2, id a3)
{
  id v5 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](v5, "actionObject"));
  if (v3)
  {
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController delegate](v5, "delegate"));
    [v4 performDeletePodcast:v3];
  }
}

void sub_10002EEFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10002EF14(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) episodeForUuid:*(void *)(a1 + 40)]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(a1 + 48) setPlayed:*(unsigned __int8 *)(a1 + 64) manually:*(unsigned __int8 *)(a1 + 65) forUserActionOnEpis ode:v2 saveChanges:1];
}

void sub_10002F090( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10002F0A8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) episodeForUuid:*(void *)(a1 + 40)]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(a1 + 48) setPlayState:*(void *)(a1 + 64) manually:*(unsigned __int8 *)(a1 + 72) forUserActionOnE pisode:v2 saveChanges:1];
}

id sub_10002FB04(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryAsyncTask();
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[MZAsynchronousTask] WARNING: task timed out: %@",  (uint8_t *)&v6,  0xCu);
  }

  [*(id *)(a1 + 32) _invalidateTaskTimer];
  return [*(id *)(a1 + 32) setCancelType:2];
}

id sub_10002FBBC(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryAsyncTask();
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[MZAsynchronousTask] WARNING: background-task assertion HOLD timed out: %@",  (uint8_t *)&v6,  0xCu);
  }

  [*(id *)(a1 + 32) _invalidateTaskAssertionForced:1];
  return [*(id *)(a1 + 32) _invalidateAssertionTimer];
}

void sub_10002FD98(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) taskTimeoutTimer]);

  if (v2)
  {
    uint64_t v3 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) taskTimeoutTimer]);
    dispatch_source_cancel(v3);

    _[*(id *)(a1 + 32) setTaskTimeoutTimer:0];
  }

void sub_10002FE50(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) assertionTimeoutTimer]);

  if (v2)
  {
    uint64_t v3 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) assertionTimeoutTimer]);
    dispatch_source_cancel(v3);

    _[*(id *)(a1 + 32) setAssertionTimeoutTimer:0];
  }

void sub_10002FFBC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2 != *(void **)(*(void *)(a1 + 32) + 16LL))
  {
    id v3 = [v2 copy];
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = v3;

    uint64_t v8 = _MTLogCategoryAsyncTask(v6, v7);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      id v10 = objc_retainBlock(*(id *)(a1 + 40));
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138412546;
      id v13 = v10;
      __int16 v14 = 2112;
      uint64_t v15 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "set expirationHandler %@ for task: %@",  (uint8_t *)&v12,  0x16u);
    }
  }

id sub_100030160(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_100030188(uint64_t a1)
{
}

void sub_100030190(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100030244(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  if (v2 != *(void **)(*(void *)(a1 + 32) + 24LL))
  {
    id v3 = [v2 copy];
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = v3;

    uint64_t v8 = _MTLogCategoryAsyncTask(v6, v7);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      id v10 = objc_retainBlock(*(id *)(a1 + 40));
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138412546;
      id v13 = v10;
      __int16 v14 = 2112;
      uint64_t v15 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "set finishedHandler %@ for task: %@",  (uint8_t *)&v12,  0x16u);
    }
  }

void sub_1000303E8(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

uint64_t sub_1000304C4(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryAsyncTask();
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(_DWORD *)(a1 + 48);
    int v7 = 138412546;
    uint64_t v8 = v4;
    __int16 v9 = 1024;
    int v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "Invoking expiration handler for %@, with cancelType = %d",  (uint8_t *)&v7,  0x12u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

_DWORD *sub_1000305E0(_DWORD *result)
{
  int v1 = result[10];
  uint64_t v2 = *((void *)result + 4);
  if (v1 != *(_DWORD *)(v2 + 12))
  {
    *(_DWORD *)(v2 + 12) = v1;
    id result = (_DWORD *)*((void *)result + 4);
    if (result[3]) {
      return _[result _onQueueFireExpirationHandlerIfNecesary];
    }
  }

  return result;
}

uint64_t sub_10003069C(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(result + 32) + 12LL);
  return result;
}

void sub_10003072C(uint64_t a1)
{
}

uint64_t sub_1000307EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000307FC(uint64_t a1)
{
}

void sub_100030804(uint64_t a1)
{
}

void sub_100030894(uint64_t a1)
{
}

void sub_100030954(uint64_t a1)
{
}

id sub_100030AB4(uint64_t a1)
{
  return [*(id *)(a1 + 32) setCancelType:1];
}

void sub_100030AE8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) taskTimeoutTimer]);

  if (v2)
  {
    uint64_t v3 = (dispatch_object_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) taskTimeoutTimer]);
    dispatch_suspend(v3);

    uint64_t v4 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) taskTimeoutTimer]);
    [*(id *)(a1 + 32) taskTimeout];
    dispatch_time_t v6 = dispatch_time(0LL, (unint64_t)(v5 * 1000000000.0));
    dispatch_source_set_timer(v4, v6, 0xFFFFFFFFFFFFFFFFLL, 0LL);

    int v7 = (dispatch_object_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) taskTimeoutTimer]);
    dispatch_resume(v7);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) assertionTimeoutTimer]);

  if (v8)
  {
    __int16 v9 = (dispatch_object_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) assertionTimeoutTimer]);
    dispatch_suspend(v9);

    int v10 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) assertionTimeoutTimer]);
    [*(id *)(a1 + 32) assertionTimeout];
    dispatch_time_t v12 = dispatch_time(0LL, (unint64_t)(v11 * 1000000000.0));
    dispatch_source_set_timer(v10, v12, 0xFFFFFFFFFFFFFFFFLL, 0LL);

    id v13 = (dispatch_object_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) assertionTimeoutTimer]);
    dispatch_resume(v13);
  }

void sub_100030D14(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) finishedHandler]);
  uint64_t v4 = (void (**)(void))v2;
  if (v2)
  {
    uint64_t v5 = _MTLogCategoryAsyncTask(v2, v3);
    dispatch_time_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 48);
      int v10 = 138412802;
      uint64_t v11 = v7;
      __int16 v12 = 2112;
      uint64_t v13 = v8;
      __int16 v14 = 2112;
      uint64_t v15 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Invoking completion handler for %@, id result = %@, error = %@",  (uint8_t *)&v10,  0x20u);
    }

    v4[2](v4);
  }

  [*(id *)(a1 + 32) invalidate];
}

void sub_100030F74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_100030F98(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) taskInvalidationDisabled];
  if (!(_DWORD)result || *(_BYTE *)(a1 + 48))
  {
    [*(id *)(a1 + 32) setTaskInvalidationDisabled:0];
    uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) taskAssertion]);
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    return [*(id *)(a1 + 32) setTaskAssertion:0];
  }

  return result;
}

void sub_1000312A0(_Unwind_Exception *a1)
{
}

id sub_1000312B8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) taskInvalidationDisabled];
  if ((result & 1) == 0)
  {
    id result = [*(id *)(a1 + 32) setTaskInvalidationDisabled:1];
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  return result;
}

void sub_1000312FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  uint64_t v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000313F0;
  block[3] = &unk_1002411D0;
  id v12 = *(id *)(a1 + 56);
  id v8 = v3;
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 32);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_1000313F0(uint64_t a1)
{
}

id *sub_100031424(id *result)
{
  if (*(_BYTE *)(*((void *)result[5] + 1) + 24LL)) {
    return (id *)[result[4] _invalidateTaskAssertionForced:1];
  }
  return result;
}

id sub_100031924(double a1)
{
  if (qword_1002B6928 != -1) {
    dispatch_once(&qword_1002B6928, &stru_100241288);
  }
  uint64_t v2 = (void *)qword_1002B6920;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  a1));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 stringFromDate:v3]);

  return v4;
}

id sub_100031E78(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithCapacity:]( NSMutableDictionary,  "dictionaryWithCapacity:",  [v3 count]));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v3));

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100032E38;
  v9[3] = &unk_100241268;
  id v7 = v5;
  id v10 = v7;
  [v4 enumerateValuesForProperties:v6 usingBlock:v9];

  return v7;
}

id sub_100031F50(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_100031E78(*(void **)(a1 + 32), v3);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v7 = v3;
  id v8 = [v7 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (!v8) {
    goto LABEL_16;
  }
  id v9 = v8;
  uint64_t v10 = *(void *)v23;
  id v11 = &selRef_setValue_;
  while (2)
  {
    id v12 = 0LL;
    __int128 v21 = v11[306];
    do
    {
      if (*(void *)v23 != v10) {
        objc_enumerationMutation(v7);
      }
      uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSURL);
      if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0)
      {
        uint64_t v15 = objc_claimAutoreleasedReturnValue([v13 absoluteString]);
LABEL_11:
        uint64_t v17 = (void *)v15;

        uint64_t v13 = v17;
        goto LABEL_12;
      }

      uint64_t v16 = objc_opt_class(&OBJC_CLASS___NSString);
      if ((objc_opt_isKindOfClass(v13, v16) & 1) == 0 && (objc_opt_respondsToSelector(v13, v21) & 1) != 0)
      {
        uint64_t v15 = objc_claimAutoreleasedReturnValue([v13 stringValue]);
        goto LABEL_11;
      }

LABEL_12:
      uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSString);
      if ((objc_opt_isKindOfClass(v13, v18) & 1) == 0 || ![v13 length])
      {

        goto LABEL_19;
      }

      [v6 appendString:v13];

      id v12 = (char *)v12 + 1;
    }

    while (v9 != v12);
    id v9 = [v7 countByEnumeratingWithState:&v22 objects:v26 count:16];
    id v11 = &selRef_setValue_;
    if (v9) {
      continue;
    }
    break;
  }

        uint64_t v17 = MinY;
        break;
      default:
        break;
    }

    v36.origin.x = a4;
    v36.origin.y = a5;
    v36.size.width = a6;
    v36.size.height = a7;
    CGRectGetMinY(v36);
    v37.origin.x = a4;
    v37.origin.y = a5;
    v37.size.width = a6;
    v37.size.height = a7;
    MinX = CGRectGetMinX(v37);
    v38.origin.x = a4;
    v38.origin.y = a5;
    v38.size.width = a6;
    v38.size.height = a7;
    Width = CGRectGetWidth(v38);
    v39.origin.x = a4;
    v39.origin.y = a5;
    v39.size.width = a6;
    v39.size.height = a7;
    CGRectGetHeight(v39);
    switch(a2)
    {
      case 1LL:
        __int128 v29 = 0.0;
        if (a1) {
          __int128 v29 = Width;
        }
        goto LABEL_19;
      case 3LL:
        __int128 v29 = 0.0;
        if (!a1) {
          __int128 v29 = Width;
        }
LABEL_19:
        MinX = v17 + a12 - v29;
        break;
      default:
        return MinX;
    }
  }

  else
  {
    __int128 v25 = _MTLogCategoryDefault();
    id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Incompatible Edges", v31, 2u);
    }

    return a4;
  }

  return MinX;
}
  }

id *sub_1000325B0(id *result, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return (id *)[result[4] setObject:a3 forKey:a2];
  }
  return result;
}

LABEL_26:
        goto LABEL_27;
      }
    }

    else
    {
      if (!v23) {
        goto LABEL_25;
      }
      __int128 v22 = objc_claimAutoreleasedReturnValue([v8 objectForKey:@"hbpl"]);
      __int128 v25 = objc_opt_class(&OBJC_CLASS___NSNumber);
      if ((objc_opt_isKindOfClass(v22, v25) & 1) != 0) {
        goto LABEL_25;
      }
    }

    __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:@"hbpl"]);
    -[MZUniversalPlaybackPositionMetadata setHasBeenPlayed:](v15, "setHasBeenPlayed:", [v27 BOOLValue]);

    goto LABEL_26;
  }

  return v5;
}

  return v8 < v10;
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

        id v9 = (v19 - 1) & v19;
        uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      __int128 v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      __int128 v22 = *v21;
      __int128 v23 = v21[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      id result = Hasher._finalize()();
      __int128 v24 = -1LL << *(_BYTE *)(v6 + 32);
      __int128 v25 = result & ~v24;
      id v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        __int128 v27 = 0;
        __int128 v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          __int128 v29 = v26 == v28;
          if (v26 == v28) {
            id v26 = 0LL;
          }
          v27 |= v29;
          __int128 v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      id *v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  id result = swift_release(v3);
  void *v2 = v6;
  return result;
}

    uint64_t v10 = (v19 - 1) & v19;
    uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    __int128 v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    __int128 v22 = *v21;
    __int128 v23 = v21[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    id result = Hasher._finalize()();
    __int128 v24 = -1LL << *(_BYTE *)(v6 + 32);
    __int128 v25 = result & ~v24;
    id v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int128 v27 = 0;
      __int128 v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        __int128 v29 = v26 == v28;
        if (v26 == v28) {
          id v26 = 0LL;
        }
        v27 |= v29;
        __int128 v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    id *v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  id v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    id result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    uint64_t v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

LABEL_10:
  uint64_t v15 = 0LL;
LABEL_11:

  return v15;
}

      uint64_t v16 = (id)os_feature_enabled_skip_empty_upp_sync(v15);
      if ((_DWORD)v16)
      {
        uint64_t v16 = [v11 isNew];
        if (!(_DWORD)v16 || (uint64_t v16 = [v11 bookmarkTime], v17 > 0.0))
        {
          uint64_t v18 = _MTLogCategoryUPPSync(v16);
          uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
          if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_25;
          }
          *(_DWORD *)buf = 138543362;
          v39 = v11;
          id v20 = v19;
          __int128 v21 = "Preventing UPP sync item...%{public}@";
          goto LABEL_24;
        }
      }

      __int128 v28 = _MTLogCategoryUPPSync(v16);
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        v39 = v11;
        id v20 = v19;
        __int128 v21 = "Skipping UPP sync item...%{public}@";
LABEL_24:
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v21, buf, 0xCu);
      }

        goto LABEL_11;
      }
    }

    else
    {
      id v12 = (void *)objc_opt_class(self);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(-[MZKeyValueStoreNode key](self, "key"));
      [v12 setServerRevisionNewerThanClient:v13];
    }
  }
}

    id v12 = 0LL;
    goto LABEL_11;
  }

  uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSObject);
  char isKindOfClass = objc_opt_isKindOfClass(v8, v10);
  if ((isKindOfClass & 1) == 0
    || (char isKindOfClass = (uint64_t)[v8 conformsToProtocol:&OBJC_PROTOCOL___NSCoding],
        (isKindOfClass & 1) == 0))
  {
    uint64_t v13 = _MTLogCategoryCloudSync(isKindOfClass);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = 138412290;
      uint64_t v19 = v6;
      uint64_t v15 = "Processor was asked for value for key %@ that doesn't conform to NSCoding!";
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v18, 0xCu);
      goto LABEL_10;
    }

    goto LABEL_10;
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v8,  1LL,  0LL));
LABEL_11:

  return v12;
}

  objc_sync_exit(v8);
  if (v6) {
    uint64_t v17 = v6;
  }
  else {
    uint64_t v17 = &stru_100248948;
  }
  uint64_t v19 = @"MTBaseFeedManagerFeedUrlKey";
  id v20 = v17;
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v20,  &v19,  1LL));
  [a1 postNotificationName:@"MTBaseFeedManagerDidEndUpdatingFeed" userInfo:v18];

  if (v10) {
    [a1 didFinishUpdatingAllFeeds:1];
  }
}

  id v31 = 0LL;
  __int128 v30 = 0LL;
LABEL_11:
  v54 = v21;
  v55 = v20;
  v46 = a9;
  if (v26)
  {
    __int128 v32 = (MTFeedManager *)swift_allocObject(&unk_100246C88, 24LL, 7LL);
    *(void *)v32->_system = v26;
    uint64_t v33 = sub_100142BC8;
  }

  else
  {
    uint64_t v33 = 0LL;
    __int128 v32 = 0LL;
  }

  if (v27)
  {
    v34 = swift_allocObject(&unk_100246C60, 24LL, 7LL);
    *(void *)(v34 + 16) = v27;
    __int128 v27 = sub_100142BC0;
  }

  else
  {
    v34 = 0LL;
  }

  v35 = v50;
  v44 = (uint64_t)v32;
  v50 = v32;
  v36 = v30;
  v42 = (uint64_t)v31;
  v43 = v30;
  v37 = (uint64_t)v31;
  v38 = v45;
  v39 = v47;
  v40 = (uint64_t)v55;
  v41 = v49;
  FeedManager.updateFeed(forFeedUrl:cloudSyncFeedUrl:podcastStoreId:triggerBy:userInitiated:forceBootstrap:useBackgroundFetch:source:isSubscribing:feedDownloadedHook:preProcessFeedHook:postProcessFeedHook:completion:)( (uint64_t)v56,  (uint64_t)v55,  v51,  v48,  v49,  v52,  v53,  v46,  a10,  a11,  (uint64_t)v47,  v45,  v42,  v43,  (uint64_t)v33,  v44,  (uint64_t)v27,  v34);
  sub_1001341FC((uint64_t)v27, v34);
  sub_1001341FC((uint64_t)v33, (uint64_t)v50);
  sub_1001341FC(v37, v36);
  sub_1001341FC((uint64_t)v39, v38);

  swift_bridgeObjectRelease(v41);
  sub_10012A4A0(v40, &qword_1002B4DB8);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v54);
}

void sub_100032DF0(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  uint64_t v2 = (void *)qword_1002B6920;
  qword_1002B6920 = (uint64_t)v1;

  [(id)qword_1002B6920 setTimeStyle:3];
  [(id)qword_1002B6920 setDateStyle:1];
}

id *sub_100032E38(id *result, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return (id *)[result[4] setObject:a3 forKey:a2];
  }
  return result;
}

void sub_100033174(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) presentingViewController]);

  if (v2)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) presentingViewController]);
    [v3 dismissViewControllerAnimated:0 completion:0];
  }

void sub_10003333C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100033360(id *a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([a1[5] popoverPresentationController]);
  [v3 setPermittedArrowDirections:3];
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  [v3 setDelegate:WeakRetained];
}

void sub_1000335F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100033620(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained podcastsObserver]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uuids]);
  BOOL v4 = [v3 count] == 0;
  id v5 = objc_loadWeakRetained(v1);
  [v5 setPodcastState:v4];
}

void sub_10003404C(_Unwind_Exception *a1)
{
}

void sub_100034068(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && [*(id *)(a1 + 32) isEqualToString:v5])
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained artworkView]);
    [v7 setArtwork:v12];

    id v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained episode]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 podcast]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 title]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained artworkView]);
    [v11 setAccessibilityLabel:v10];
  }
}

id sub_100035040(uint64_t a1)
{
  return [*(id *)(a1 + 32) layoutIfNeeded];
}

void sub_100035970( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

id sub_100035994(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isActive];
  if ((_DWORD)result) {
    return _[*(id *)(a1 + 32) _onQueueScheduleTimer];
  }
  return result;
}

void sub_1000359CC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateAutorefreshRateSettingAndRestartTimer:1];
}

id sub_100035BEC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isActive];
  if ((result & 1) == 0)
  {
    [*(id *)(a1 + 32) setIsActive:1];
    return [*(id *)(a1 + 32) _onQueueUpdateTimerForActiveChanges];
  }

  return result;
}

id sub_100035C88(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isActive];
  if ((_DWORD)result)
  {
    [*(id *)(a1 + 32) setIsActive:0];
    [*(id *)(a1 + 32) _onQueueUpdateTimerForActiveChanges];
    id result = [*(id *)(a1 + 32) hasLocalChangesToSync];
    if ((_DWORD)result)
    {
      id result = [*(id *)(a1 + 32) _automaticallySynchronizeLocalChangesOnResignActive];
      if ((_DWORD)result)
      {
        uint64_t v3 = _MTLogCategoryCloudSync(result);
        BOOL v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id v5 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "starting synchronizing changes for resignActive",  v5,  2u);
        }

        return [*(id *)(a1 + 32) _onQueueSynchronizeWithAutosynchronizeMask:2 withCompletionBlock:&stru_1002413C8];
      }
    }
  }

  return result;
}

void sub_100035D3C(id a1)
{
  uint64_t v1 = _MTLogCategoryCloudSync(a1);
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "finished synchronizing changes for resignActive",  v3,  2u);
  }
}

id sub_100035E18(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _onQueueSetHasLocalChangesToSync:*(unsigned __int8 *)(a1 + 40)];
}

void sub_100035F4C(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100035FD8;
  v3[3] = &unk_1002400E8;
  uint64_t v2 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  [v2 _onQueueSynchronizeImmediatelyWithCompletionBlock:v3];
}

uint64_t sub_100035FD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    (*(void (**)(void))(v1 + 16))();
  }
  return kdebug_trace(723517496LL, 0LL, 0LL, 0LL, 0LL);
}

void sub_100036090(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_1000360FC;
  v2[3] = &unk_1002413F0;
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  [v1 _onQueueLoadBagContextWithCompletionHandler:v2];
}

uint64_t sub_1000360FC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    unsigned int v5 = [a2 UPPDisabled] ^ 1;
    if (a3) {
      a2 = 0LL;
    }
    else {
      a2 = (void *)v5;
    }
  }

  return (*(uint64_t (**)(uint64_t, void *))(v3 + 16))(v3, a2);
}

void sub_10003646C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, id location)
{
}

uint64_t sub_1000364B8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000364CC(uint64_t a1)
{
  uint64_t v2 = kdebug_trace(723517688LL, 0LL, 0LL, 0LL, 0LL);
  uint64_t v3 = _MTLogCategoryUPPSync(v2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v9[0] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "_onQueueSync - UPP synchronizeTask did expire",  (uint8_t *)v9,  2u);
  }

  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  id v6 = WeakRetained;
  if (WeakRetained)
  {
    unsigned int v7 = [WeakRetained[4] cancelType];
    id v8 = v6[6];
    if (v7 == 2) {
      [v8 timeout];
    }
    else {
      [v8 cancel];
    }
    [v6[4] finishTaskOperationWithResult:&__kCFBooleanFalse error:0];
  }
}

void sub_10003659C(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = _MTLogCategoryUPPSync(WeakRetained);
    unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v5[4] error]);
      if (v8)
      {
        uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([v5[4] error]);
        uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 localizedFailureReason]);
        id v9 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @" ERROR = '%@'.",  v2));
      }

      else
      {
        id v9 = &stru_100248948;
      }

      *(_DWORD *)buf = 138412290;
      uint64_t v16 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "_onQueueSync - UPP synchronize completed. %@",  buf,  0xCu);
      if (v8)
      {
      }
    }

    [v5[4] invokeTaskCompletionBlocksWithBlock:&stru_100241430];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5[4] result]);
    unsigned __int8 v11 = [v10 BOOLValue];

    char v12 = v11 ^ 1;
    if (!*((_BYTE *)v5 + 8)) {
      char v12 = 0;
    }
    *((_BYTE *)v5 + _Block_object_dispose((const void *)(v1 - 128), 8) = v12;
    id v13 = v5[6];
    v5[6] = 0LL;

    id v14 = v5[4];
    v5[4] = 0LL;

    [v5 _onQueueStartNewTimer];
  }
}

void sub_100036750(id a1, id a2)
{
}

void sub_10003675C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
    double v10 = v9;
    unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue([*((id *)WeakRetained + 4) metrics]);
    [v11 setBagLookupEndTime:v10];

    char v12 = (dispatch_queue_s *)*((void *)WeakRetained + 9);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100036870;
    block[3] = &unk_1002414A8;
    objc_copyWeak(&v16, v7);
    id v14 = v6;
    id v15 = v5;
    dispatch_async(v12, block);

    objc_destroyWeak(&v16);
  }
}

void sub_100036870(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 48);
  id WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v4 = *(id *)(a1 + 32);
    if (v4)
    {
LABEL_3:
      id v5 = (void *)*((void *)WeakRetained + 4);
      id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
      [v5 finishTaskOperationWithResult:v6 error:v4];

      goto LABEL_4;
    }

    unsigned int v7 = *(void **)(a1 + 40);
    if (!v7)
    {
      id v15 = sub_100036A98(*(void **)(a1 + 32));
      id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      id v4 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"MZKeyValueStoreErrorDomain",  -2008LL,  v16));

      if (v4) {
        goto LABEL_3;
      }
      unsigned int v7 = *(void **)(a1 + 40);
    }

    if ([v7 UPPDisabled])
    {
      id v8 = sub_100036A98(*(void **)(a1 + 32));
      double v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      id v4 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"MZKeyValueStoreErrorDomain",  -2007LL,  v9));

      if (v4) {
        goto LABEL_3;
      }
    }

    [*((id *)WeakRetained + 4) beginTaskOperation];
    double v10 = -[MZUniversalPlaybackPositionSyncHandler initWithDataSource:bagContext:andTask:]( objc_alloc(&OBJC_CLASS___MZUniversalPlaybackPositionSyncHandler),  "initWithDataSource:bagContext:andTask:",  *((void *)WeakRetained + 2),  *(void *)(a1 + 40),  *((void *)WeakRetained + 4));
    unsigned __int8 v11 = (void *)*((void *)WeakRetained + 6);
    *((void *)WeakRetained + 6) = v10;

    uint64_t v12 = _MTLogCategoryUPPSync([*((id *)WeakRetained + 6) setCanRequestStoreSignIn:WeakRetained[9]]);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "_onQueueSync - UPP synchronize operation beginning...",  buf,  2u);
    }

    id v14 = (void *)*((void *)WeakRetained + 6);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_100036B1C;
    v17[3] = &unk_100241480;
    objc_copyWeak(&v18, v2);
    [v14 synchronizeWithCompletionHandler:v17];
    objc_destroyWeak(&v18);
  }

LABEL_4:
}

void sub_100036A84(_Unwind_Exception *a1)
{
}

NSMutableDictionary *sub_100036A98(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([0 objectForKey:NSUnderlyingErrorKey]);

    uint64_t v3 = 0LL;
    if (!v2)
    {
      uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v1, NSUnderlyingErrorKey);
    }
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  return v3;
}

void sub_100036B1C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v7 = WeakRetained;
  if (WeakRetained)
  {
    id v8 = (dispatch_queue_s *)WeakRetained[9];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100036BCC;
    block[3] = &unk_100241458;
    double v10 = WeakRetained;
    char v12 = a2;
    id v11 = v5;
    dispatch_async(v8, block);
  }
}

void sub_100036BCC(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
  [v2 finishTaskOperationWithResult:v3 error:*(void *)(a1 + 40)];
}

id sub_100036CE0(uint64_t a1)
{
  double v3 = v2;
  if ([*(id *)(a1 + 32) initialAutosyncNeeded])
  {
    BOOL v4 = 0LL;
  }

  else
  {
    [*(id *)(a1 + 32) autorefreshRate];
    BOOL v4 = v3 != v5;
  }

  return [*(id *)(a1 + 32) _updateAutorefreshRateSettingAndRestartTimer:v4];
}

void sub_100037070( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, id location)
{
}

void sub_1000370B8(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  [*(id *)(a1 + 32) _updateSettingsFromLoadedBagContext:v7];
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
  }
}

uint64_t sub_10003711C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  *(void *)(a1 + 32));
}

void sub_100037130(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryCloudSync(a1);
  double v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v6[0] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "_onQueueLoadBag - UPP bagLookupTask did expire",  (uint8_t *)v6,  2u);
  }

  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained[5] finishTaskOperationWithResult:0 error:0];
  }
}

void sub_1000371BC(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  BOOL v4 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v5 = _MTLogCategoryCloudSync(WeakRetained);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v4[5] error]);
      if (v7)
      {
        id v1 = (void *)objc_claimAutoreleasedReturnValue([v4[5] error]);
        uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 localizedFailureReason]);
        id v8 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @" ERROR = '%@'.",  v2));
      }

      else
      {
        id v8 = &stru_100248948;
      }

      *(_DWORD *)buf = 138412290;
      id v11 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "_onQueueLoadBag - UPP load bag completed.%@",  buf,  0xCu);
      if (v7)
      {
      }
    }

    [v4[5] invokeTaskCompletionBlocksWithBlock:&stru_100241518];
    id v9 = v4[5];
    void v4[5] = 0LL;
  }
}

void sub_10003730C(id a1, id a2)
{
}

void sub_100037320(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (id *)(a1 + 32);
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  id v9 = WeakRetained;
  if (WeakRetained)
  {
    if (v5)
    {
      uint64_t v10 = _MTLogCategoryCloudSync(WeakRetained);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "_onQueueLoadBag - load bag operation beginning...",  buf,  2u);
      }

      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      v12[2] = sub_100037458;
      v12[3] = &unk_1002414D0;
      objc_copyWeak(&v13, v7);
      +[MZUPPBagContext loadBagContextFromIMURLBag:completionBlock:]( &OBJC_CLASS___MZUPPBagContext,  "loadBagContextFromIMURLBag:completionBlock:",  v5,  v12);
      objc_destroyWeak(&v13);
    }

    else
    {
      [WeakRetained[5] finishTaskOperationWithResult:0 error:v6];
    }
  }
}

void sub_100037444(_Unwind_Exception *a1)
{
}

void sub_100037458(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (id *)(a1 + 32);
  id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained((id *)(a1 + 32));
  id v9 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v10 = WeakRetained[9];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100037538;
    block[3] = &unk_1002414A8;
    objc_copyWeak(&v14, v7);
    id v12 = v5;
    id v13 = v6;
    dispatch_async(v10, block);

    objc_destroyWeak(&v14);
  }
}

void sub_100037538(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    double v3 = WeakRetained;
    [WeakRetained[5] finishTaskOperationWithResult:*(void *)(a1 + 32) error:*(void *)(a1 + 40)];
    id WeakRetained = v3;
  }
}

void sub_1000375F8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IMURLBag sharedInstance](&OBJC_CLASS___IMURLBag, "sharedInstance"));
  if (v2)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    NSErrorUserInfoKey v6 = NSLocalizedDescriptionKey;
    double v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Could not load bag context due to bag failure to load."));
    id v7 = v3;
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL));
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSCocoaErrorDomain,  100LL,  v4));

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

id sub_1000377B4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _onQueueResumeTimer];
}

id sub_1000377BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onQueueSuspendTimer];
}

id sub_1000378F0(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "setAutorefreshRate:");
  if (*(_BYTE *)(a1 + 40)) {
    return [*(id *)(a1 + 32) _onQueueStartNewTimer];
  }
  return result;
}

id sub_10003798C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onQueueSynchronizeWithAutosynchronizeMask:1 withCompletionBlock:0];
}

void sub_100037A94(uint64_t a1)
{
  double v2 = *(double *)(a1 + 40);
  uint64_t v3 = _MTLogCategoryCloudSync(a1);
  BOOL v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2 >= 0.0)
  {
    if (v5)
    {
      NSErrorUserInfoKey v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 40)));
      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v6 timeIntervalSinceNow];
      double v9 = v8;
      [v7 timeIntervalSinceNow];
      double v11 = v9 - v10;
      if (v11 <= 60.0) {
        id v12 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%.2f seconds",  *(void *)&v11,  v16);
      }
      else {
        id v12 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%ld minutes, %ld seconds",  (uint64_t)v11 / 60,  (uint64_t)v11 % 60);
      }
      id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ (%@ from now)",  v6,  v13));

      *(_DWORD *)buf = 138412290;
      id v18 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "scheduling next timer update at %@",  buf,  0xCu);
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:]( &OBJC_CLASS___NSTimer,  "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:",  *(void *)(a1 + 32),  "_timerFired:",  0LL,  0LL,  *(double *)(a1 + 40)));
    [*(id *)(a1 + 32) setTimer:v15];
  }

  else
  {
    if (v5)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "scheduled timer date already passed.  Firing immediately",  buf,  2u);
    }

    [*(id *)(a1 + 32) _timerFired:0];
  }

LABEL_71:
      *v218 = v78;
      goto LABEL_73;
    }

    v121 = -[MZUniversalPlaybackPositionSyncHandler _shouldStop](self, "_shouldStop");
    if (v121) {
      goto LABEL_73;
    }
    v123 = _MTLogCategoryUPPSync(v121);
    v124 = (os_log_s *)objc_claimAutoreleasedReturnValue(v123);
    if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_DEFAULT, "Finish STEP 2.1.", buf, 2u);
    }

    v126 = _MTLogCategoryUPPSync(v125);
    v127 = (os_log_s *)objc_claimAutoreleasedReturnValue(v126);
    if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_DEFAULT,  "Begin STEP 2.2. Merge local and remote deltas.",  buf,  2u);
    }

    v128 = (void *)objc_claimAutoreleasedReturnValue(-[MZUniversalPlaybackPositionSyncHandler task](self, "task"));
    v129 = (void *)objc_claimAutoreleasedReturnValue([v128 metrics]);
    [v129 setLatestUPPSubtask:4];

    v130 = (void *)objc_claimAutoreleasedReturnValue(-[MZUniversalPlaybackPositionSyncHandler transactionProcessor](self, "transactionProcessor"));
    [v130 mergeMetadataItemsFromGetResponse];

    v131 = kdebug_trace(723517720LL, 0LL, 0LL, 0LL, 0LL);
    v132 = _MTLogCategoryUPPSync(v131);
    v133 = (os_log_s *)objc_claimAutoreleasedReturnValue(v132);
    if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_DEFAULT, "Finish STEP 2.2.", buf, 2u);
    }

    v135 = _MTLogCategoryUPPSync(v134);
    v136 = (os_log_s *)objc_claimAutoreleasedReturnValue(v135);
    v137 = v136;
    if (v90 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v136))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v137,  OS_SIGNPOST_INTERVAL_END,  v90,  "UPP.Sync.Step.2.End",  "",  buf,  2u);
    }

    v139 = _MTLogCategoryCloudSync(v138);
    v140 = (os_log_s *)objc_claimAutoreleasedReturnValue(v139);
    v141 = os_signpost_id_generate(v140);

    v143 = _MTLogCategoryUPPSync(v142);
    v144 = (os_log_s *)objc_claimAutoreleasedReturnValue(v143);
    v145 = v144;
    if (v141 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v144))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v145,  OS_SIGNPOST_INTERVAL_BEGIN,  v141,  "UPP.Sync.Step.3.Begin",  "",  buf,  2u);
    }

    v146 = kdebug_trace(723517724LL, 0LL, 0LL, 0LL, 0LL);
    v147 = _MTLogCategoryUPPSync(v146);
    v148 = (os_log_s *)objc_claimAutoreleasedReturnValue(v147);
    if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v148,  OS_LOG_TYPE_DEFAULT,  "Begin STEP 3. Push changes to server.",  buf,  2u);
    }

    v149 = (void *)objc_claimAutoreleasedReturnValue(-[MZUniversalPlaybackPositionSyncHandler task](self, "task"));
    v150 = (void *)objc_claimAutoreleasedReturnValue([v149 metrics]);
    [v150 setLatestUPPSubtask:5];

    v151 = (void *)objc_claimAutoreleasedReturnValue(-[MZUniversalPlaybackPositionSyncHandler transactionProcessor](self, "transactionProcessor"));
    v152 = (void *)objc_claimAutoreleasedReturnValue([v151 metadataItemsToCommitToKVSStorage]);
    v153 = [v152 count];

    if (v153)
    {
      v155 = _MTLogCategoryUPPSync(v154);
      v156 = (os_log_s *)objc_claimAutoreleasedReturnValue(v155);
      if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT))
      {
        v157 = (void *)objc_claimAutoreleasedReturnValue(-[MZUniversalPlaybackPositionSyncHandler transactionProcessor](self, "transactionProcessor"));
        v158 = (void *)objc_claimAutoreleasedReturnValue([v157 metadataItemsToCommitToKVSStorage]);
        v159 = (id)objc_claimAutoreleasedReturnValue([v158 allKeys]);
        *(_DWORD *)buf = 138543362;
        *(void *)v236 = v159;
        _os_log_impl( (void *)&_mh_execute_header,  v156,  OS_LOG_TYPE_DEFAULT,  "Sending merged items to server: %{public}@",  buf,  0xCu);
      }

      v160 = (void *)objc_claimAutoreleasedReturnValue(-[MZUniversalPlaybackPositionSyncHandler transactionProcessor](self, "transactionProcessor"));
      v161 = (void *)objc_claimAutoreleasedReturnValue([v160 metadataItemsToCommitToKVSStorage]);
      v162 = (void *)objc_claimAutoreleasedReturnValue([v161 allValues]);
      v163 = -[MZUniversalPlaybackPositionSyncHandler newKVSPutAllTransactionWithMetadataItems:]( self,  "newKVSPutAllTransactionWithMetadataItems:",  v162);
      -[MZUniversalPlaybackPositionSyncHandler setCurrentKVSTransaction:](self, "setCurrentKVSTransaction:", v163);

      v164 = (void *)objc_claimAutoreleasedReturnValue(-[MZUniversalPlaybackPositionSyncHandler currentKVSTransaction](self, "currentKVSTransaction"));
      v165 = (id)objc_claimAutoreleasedReturnValue( -[MZUniversalPlaybackPositionSyncHandler _synchronouslyRunKVSTransaction:]( self,  "_synchronouslyRunKVSTransaction:",  v164));

      if (v165)
      {
        if (v218) {
          *v218 = v165;
        }
        goto LABEL_99;
      }

      if (-[MZUniversalPlaybackPositionSyncHandler _shouldStop](self, "_shouldStop"))
      {
LABEL_99:
        -[MZUniversalPlaybackPositionSyncHandler _dataSourceCancelTransaction]( self,  "_dataSourceCancelTransaction",  v218);
        NSErrorUserInfoKey v6 = 0;
LABEL_124:

        goto LABEL_74;
      }
    }

    v166 = (void *)objc_claimAutoreleasedReturnValue(-[MZUniversalPlaybackPositionSyncHandler transactionProcessor](self, "transactionProcessor", v218));
    v167 = (void *)objc_claimAutoreleasedReturnValue([v166 responseDomainVersion]);
    v168 = v167 == 0LL;

    if (v168)
    {
      v170 = _MTLogCategoryUPPSync(v169);
      v171 = (os_log_s *)objc_claimAutoreleasedReturnValue(v170);
      if (os_log_type_enabled(v171, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v171,  OS_LOG_TYPE_DEFAULT,  "[StoreBookkeeper] ERROR: expected to get a domainVersion in server response",  buf,  2u);
      }

      v172 = (void *)objc_claimAutoreleasedReturnValue( -[MZUniversalPlaybackPositionSyncHandler dataSourceTransactionContext]( self,  "dataSourceTransactionContext"));
      v173 = (void *)objc_claimAutoreleasedReturnValue([v172 lastSyncedDomainVersion]);
      v174 = (void *)objc_claimAutoreleasedReturnValue(-[MZUniversalPlaybackPositionSyncHandler transactionProcessor](self, "transactionProcessor"));
      [v174 setResponseDomainVersion:v173];
    }

    v175 = kdebug_trace(723517728LL, 0LL, 0LL, 0LL, 0LL);
    v176 = _MTLogCategoryUPPSync(v175);
    v177 = (os_log_s *)objc_claimAutoreleasedReturnValue(v176);
    if (os_log_type_enabled(v177, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v177, OS_LOG_TYPE_DEFAULT, "Finish STEP 3.", buf, 2u);
    }

    v179 = _MTLogCategoryUPPSync(v178);
    v180 = (os_log_s *)objc_claimAutoreleasedReturnValue(v179);
    v181 = v180;
    if (v141 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v180))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v181,  OS_SIGNPOST_INTERVAL_END,  v141,  "UPP.Sync.Step.3.End",  "",  buf,  2u);
    }

    v183 = _MTLogCategoryCloudSync(v182);
    v184 = (os_log_s *)objc_claimAutoreleasedReturnValue(v183);
    v185 = os_signpost_id_generate(v184);

    v187 = _MTLogCategoryUPPSync(v186);
    v188 = (os_log_s *)objc_claimAutoreleasedReturnValue(v187);
    v189 = v188;
    if (v185 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v188))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v189,  OS_SIGNPOST_INTERVAL_BEGIN,  v185,  "UPP.Sync.Step.4.Begin",  "",  buf,  2u);
    }

    v190 = kdebug_trace(723517732LL, 0LL, 0LL, 0LL, 0LL);
    v191 = _MTLogCategoryUPPSync(v190);
    v192 = (os_log_s *)objc_claimAutoreleasedReturnValue(v191);
    if (os_log_type_enabled(v192, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v192,  OS_LOG_TYPE_DEFAULT,  "Begin STEP 4. Commit changes to data source.",  buf,  2u);
    }

    v194 = _MTLogCategoryUPPSync(v193);
    v195 = (os_log_s *)objc_claimAutoreleasedReturnValue(v194);
    if (os_log_type_enabled(v195, OS_LOG_TYPE_DEFAULT))
    {
      v196 = (void *)objc_claimAutoreleasedReturnValue(-[MZUniversalPlaybackPositionSyncHandler transactionProcessor](self, "transactionProcessor"));
      v197 = (void *)objc_claimAutoreleasedReturnValue([v196 responseDomainVersion]);
      v198 = (void *)objc_claimAutoreleasedReturnValue(-[MZUniversalPlaybackPositionSyncHandler transactionProcessor](self, "transactionProcessor"));
      v199 = (void *)objc_claimAutoreleasedReturnValue([v198 metadataItemsToCommitToDataSource]);
      *(_DWORD *)buf = 138543618;
      *(void *)v236 = v197;
      *(_WORD *)&v236[8] = 2114;
      *(void *)&v236[10] = v199;
      _os_log_impl( (void *)&_mh_execute_header,  v195,  OS_LOG_TYPE_DEFAULT,  "Committing merged items with domainRevision: %{public}@ to local database: %{public}@",  buf,  0x16u);
    }

    v200 = (void *)objc_claimAutoreleasedReturnValue(-[MZUniversalPlaybackPositionSyncHandler task](self, "task"));
    v201 = (void *)objc_claimAutoreleasedReturnValue([v200 metrics]);
    [v201 setLatestUPPSubtask:6];

    v202 = (void *)objc_claimAutoreleasedReturnValue(-[MZUniversalPlaybackPositionSyncHandler transactionProcessor](self, "transactionProcessor"));
    v203 = (void *)objc_claimAutoreleasedReturnValue([v202 metadataItemsToCommitToDataSource]);
    v204 = (void *)objc_claimAutoreleasedReturnValue([v203 objectEnumerator]);

    v205 = (void *)objc_claimAutoreleasedReturnValue(-[MZUniversalPlaybackPositionSyncHandler dataSource](self, "dataSource"));
    v206 = (void *)objc_claimAutoreleasedReturnValue( -[MZUniversalPlaybackPositionSyncHandler dataSourceTransactionContext]( self,  "dataSourceTransactionContext"));
    v207 = (void *)objc_claimAutoreleasedReturnValue(-[MZUniversalPlaybackPositionSyncHandler transactionProcessor](self, "transactionProcessor"));
    v208 = (void *)objc_claimAutoreleasedReturnValue([v207 responseDomainVersion]);
    v221[0] = _NSConcreteStackBlock;
    v221[1] = 3221225472LL;
    v221[2] = sub_100039A4C;
    v221[3] = &unk_1002415C0;
    v165 = v204;
    v222 = v165;
    [v205 commitUniversalPlaybackPositionTransaction:v206 domainVersion:v208 metadataEnumerationBlock:v221];

    v209 = _MTLogCategoryUPPSync(-[MZUniversalPlaybackPositionSyncHandler _resetState](self, "_resetState"));
    v210 = (os_log_s *)objc_claimAutoreleasedReturnValue(v209);
    if (os_log_type_enabled(v210, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v210, OS_LOG_TYPE_DEFAULT, "Finished synchronization", buf, 2u);
    }

    v211 = kdebug_trace(723517736LL, 0LL, 0LL, 0LL, 0LL);
    v212 = _MTLogCategoryUPPSync(v211);
    v213 = (os_log_s *)objc_claimAutoreleasedReturnValue(v212);
    if (os_log_type_enabled(v213, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v213, OS_LOG_TYPE_DEFAULT, "Finish STEP 4.", buf, 2u);
    }

    v215 = _MTLogCategoryUPPSync(v214);
    v216 = (os_log_s *)objc_claimAutoreleasedReturnValue(v215);
    v217 = v216;
    if (v185 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v216))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v217,  OS_SIGNPOST_INTERVAL_END,  v185,  "UPP.Sync.Step.4.End",  "",  buf,  2u);
    }

    NSErrorUserInfoKey v6 = 1;
    goto LABEL_124;
  }

  NSErrorUserInfoKey v6 = 1;
LABEL_77:
  _Block_object_dispose(&v231, 8);
  return v6;
}

void sub_1000397AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, id a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

id sub_1000398C4(uint64_t a1)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) syncInProgress];
  return _[*(id *)(a1 + 32) setSyncInProgress:1];
}

void sub_1000398FC(uint64_t a1, void *a2)
{
  double v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue( +[MZUniversalPlaybackPositionMetadata metadataWithValuesFromDataSourceItem:]( &OBJC_CLASS___MZUniversalPlaybackPositionMetadata,  "metadataWithValuesFromDataSourceItem:",  v3));

  NSErrorUserInfoKey v6 = (void *)objc_claimAutoreleasedReturnValue([v5 itemIdentifier]);
  id v7 = [v6 length];

  if (v7)
  {
    double v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained transactionProcessor]);
    double v10 = (void *)objc_claimAutoreleasedReturnValue([v9 metadataItemsFromDataSource]);
    double v11 = (void *)objc_claimAutoreleasedReturnValue([v5 itemIdentifier]);
    [v10 setObject:v5 forKey:v11];
  }

  else
  {
    uint64_t v12 = _MTLogCategoryUPPSync(v8);
    double v9 = (void *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
    {
      int v13 = 138543362;
      id v14 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v9,  OS_LOG_TYPE_ERROR,  "Will skip syncing item with no sync metadataIdentifier: %{public}@",  (uint8_t *)&v13,  0xCu);
    }
  }
}

id sub_100039A4C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) nextObject];
}

void sub_100039B14(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectsInEntity:kMTEpisodeEntityName predicate:*(void *)(a1 + 40) sortDescriptors:0]);
  id v2 = [v1 count];
  if (v2)
  {
    uint64_t v3 = _MTLogCategoryUPPSync(v2);
    BOOL v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      double v25 = COERCE_DOUBLE([v1 count]);
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Found %{public}ld local episodes with nil metadataIdentifier. Proceeding to populate the metadataIdentifiers",  buf,  0xCu);
    }

    +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
    double v6 = v5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    id v7 = v1;
    id v8 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v20;
      double v11 = v6;
      do
      {
        for (i = 0LL; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v20 != v10) {
            objc_enumerationMutation(v7);
          }
          int v13 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
          objc_msgSend(v13, "updateUPPIdentifierIfNeeded", (void)v19);
          [v13 metadataTimestamp];
          if (v14 < v11 && v14 > 0.0) {
            double v11 = v14;
          }
        }

        id v9 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
      }

      while (v9);
    }

    else
    {
      double v11 = v6;
    }

    if (v11 != v6)
    {
      uint64_t v17 = _MTLogCategoryUPPSync(v16);
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        double v25 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Changing UppLastSyncTime to the oldest timestamp of updated episodes to force pushing their changes to server: %f",  buf,  0xCu);
      }

      +[MTUniversalPlaybackPositionDataSource setUppLastSyncTime:]( &OBJC_CLASS___MTUniversalPlaybackPositionDataSource,  "setUppLastSyncTime:",  v11);
    }
  }
}

void sub_100039DCC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) canceled])
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  else
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fatalSyncError]);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v2 != 0LL;
  }

void sub_10003A0F0(_Unwind_Exception *a1)
{
}

id sub_10003A108(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) syncInProgress];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

void sub_10003A138(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10003A1DC;
  v4[3] = &unk_100240138;
  uint64_t v3 = *(void **)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  [v2 performBlockAndWait:v4];
}

void sub_10003A1DC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v4 = 0LL;
  [v2 _synchronize:&v4];
  id v3 = v4;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

LABEL_25:
      uint64_t v10 = (char *)v10 + 1;
    }

    while (v8 != v10);
    __int128 v29 = [v6 countByEnumeratingWithState:&v34 objects:v40 count:16];
    id v8 = v29;
  }

  while (v29);
LABEL_30:

  self = v32;
  id v4 = v33;
LABEL_32:
  __int128 v30 = -[MZUniversalPlaybackPositionSyncHandler newKVSTransactionWithType:keys:]( self,  "newKVSTransactionWithType:keys:",  2LL,  v5,  v32);

  return v30;
}
}

    uint64_t v12 = (v20 - 1) & v20;
    id v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    id v18 = 32 * v15;
    sub_1001343F8(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    sub_100136668(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    id result = v17;
  }

  __int128 v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  __int128 v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    id v9 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    __int128 v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v22 - 1) & v22;
    id v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_1001275AC(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_1001343F8(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    id v18 = *(void *)(v4 + 48) + v16;
    __int128 v19 = v25[0];
    __int128 v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)id v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    id result = sub_100136668(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }

  __int128 v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  __int128 v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    id v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    __int128 v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    id v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    id v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    __int128 v19 = v17;
    id result = v18;
  }

  __int128 v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  __int128 v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    id v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    __int128 v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    id v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    id v18 = v17[1];
    __int128 v19 = 8 * v15;
    __int128 v20 = *(void **)(*(void *)(v2 + 56) + v19);
    __int128 v21 = (void *)(*(void *)(v4 + 48) + v16);
    *__int128 v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    id result = v20;
  }

  __int128 v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  __int128 v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    id v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    __int128 v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

LABEL_8:
  uint64_t v16 = 0;
LABEL_13:

  return v16;
}

    return;
  }

  id v4 = +[PFClientUtil isRunningOnHomepod](&OBJC_CLASS___PFClientUtil, "isRunningOnHomepod");
  if ((_DWORD)v4)
  {
    id v5 = _MTLogCategoryCloudSync(v4);
    double v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      id v7 = "Not doing UPP Sync on HomePod.";
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, buf, 2u);
      goto LABEL_8;
    }

    goto LABEL_8;
  }

  *(void *)buf = 0LL;
  uint64_t v17 = buf;
  id v18 = 0x2020000000LL;
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](&OBJC_CLASS___UIApplication, "sharedApplication"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_10008ADDC;
  v15[3] = &unk_100240E78;
  v15[4] = buf;
  uint64_t v10 = [v9 beginBackgroundTaskWithName:@"MTSyncController.UPPEnabled" expirationHandler:v15];

  *((void *)v17 + 3) = v10;
  objc_initWeak(&location, self);
  double v11 = (void *)objc_claimAutoreleasedReturnValue(-[MTSyncController UPPEnabled](self, "UPPEnabled"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10008AE38;
  v12[3] = &unk_100242CC8;
  objc_copyWeak(&v13, &location);
  void v12[4] = buf;
  [v11 addFinishBlock:v12];

  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);
  _Block_object_dispose(buf, 8);
}
}

  id v15 = _MTLogCategoryFeedUpdate(v9);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v7 localizedDescription]);
    *(_DWORD *)buf = 138412802;
    __int128 v22 = v6;
    __int128 v23 = 2112;
    __int128 v24 = v16;
    double v25 = 1024;
    id v26 = [(id)qword_1002B6B40 count];
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "didFinishUpdatingFeedUrl: %@, with error: %@, remaining count = %d",  buf,  0x1Cu);
  }

    ((void (*)(void *, void))v13[2])(v13, 0LL);
    goto LABEL_9;
  }

  __int128 v23 = os_feature_enabled_batch_feed_fetch(v20, v21);
  if ((v23 & 1) != 0)
  {
    __int128 v28 = (void *)objc_claimAutoreleasedReturnValue(+[IMURLBag sharedInstance](&OBJC_CLASS___IMURLBag, "sharedInstance"));
    __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v28 batchFeedFetchIsEnabled]);
    double v25 = (void *)objc_claimAutoreleasedReturnValue(-[MTFeedUpdateManager workQueue](self, "workQueue"));
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_1000FF5A0;
    v29[3] = &unk_100244E20;
    __int128 v32 = v10;
    uint64_t v33 = v9;
    v34 = v8;
    v29[4] = self;
    id v31 = a6;
    __int128 v30 = v12;
    [v24 asyncValueOnQueue:v25 withCompletion:v29];
  }

  else
  {
    id v26 = _MTLogCategoryFeedUpdate(v23);
    __int128 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Batch fetch ff is off. Updating all podcasts through legacy path.",  buf,  2u);
    }

    -[MTFeedUpdateManager _unsafe_updateAllPodcastsUserInitiated:forced:useBackgroundFetch:source:startedUpdatesCallback:]( self,  "_unsafe_updateAllPodcastsUserInitiated:forced:useBackgroundFetch:source:startedUpdatesCallback:",  v10,  v9,  v8,  a6,  v12);
  }
}
}

  return a3;
}

uint64_t sub_10003AE00(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 itemWithPersistentID:*(void *)(a1 + 32)]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[MTMediaLibraryTransactionManager sharedInstance]( &OBJC_CLASS___MTMediaLibraryTransactionManager,  "sharedInstance"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10003AEBC;
  v7[3] = &unk_1002415E8;
  id v8 = v3;
  uint64_t v9 = *(void *)(a1 + 40);
  __int128 v10 = *(_OWORD *)(a1 + 48);
  id v5 = v3;
  [v4 requestMediaLibraryWriteTransaction:v7];

  return 1LL;
}

uint64_t sub_10003AEBC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueForProperty:MPMediaItemPropertyBookmarkTime]);
  [v2 doubleValue];
  double v4 = v3;

  if (*(double *)(a1 + 40) != v4)
  {
    id v5 = *(void **)(a1 + 32);
    double v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v5 setValue:v6 forProperty:MPMediaItemPropertyBookmarkTime];
  }

  uint64_t v7 = MPMediaItemPropertyHasBeenPlayed;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueForProperty:MPMediaItemPropertyHasBeenPlayed]);
  unsigned int v9 = [v8 BOOLValue];

  BOOL v10 = +[MTLibraryLegacyUtil hasBeenPlayedForPlayState:]( &OBJC_CLASS___MTLibraryLegacyUtil,  "hasBeenPlayedForPlayState:",  *(void *)(a1 + 48));
  if (v9 != v10)
  {
    double v11 = *(void **)(a1 + 32);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v10));
    [v11 setValue:v12 forProperty:v7];
  }

  int64_t v13 = +[MTLibraryLegacyUtil legacyPlayCountForPlayState:playCount:]( &OBJC_CLASS___MTLibraryLegacyUtil,  "legacyPlayCountForPlayState:playCount:",  *(void *)(a1 + 48),  *(void *)(a1 + 56));
  double v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueForProperty:MPMediaItemPropertyPlayCount]);
  id v15 = [v14 longLongValue];

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueForProperty:MPMediaItemPropertyLastPlayedDate]);
  [v16 timeIntervalSinceNow];
  if ((id)v13 != v15 && (!v16 || fabs(v17) > 5.0))
  {
    id v18 = *(void **)(a1 + 32);
    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v18 setValue:v19 forProperty:MPMediaItemPropertyLastPlayedDate];

    __int128 v20 = *(void **)(a1 + 32);
    __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v13));
    [v20 setValue:v21 forProperty:MPMediaItemPropertyPlayCount];

    if (!v13)
    {
      id v31 = *(void **)(a1 + 32);
      __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", 0LL));
      uint64_t v30 = MPMediaItemPropertyPlayCountSinceSync;
      __int128 v28 = v31;
      __int128 v29 = v27;
      goto LABEL_12;
    }

    int64_t v22 = v13 - (void)v15;
    if (v13 > (uint64_t)v15)
    {
      uint64_t v23 = MPMediaItemPropertyPlayCountSinceSync;
      __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueForProperty:MPMediaItemPropertyPlayCountSinceSync]);
      double v25 = (char *)[v24 unsignedIntegerValue];

      id v26 = *(void **)(a1 + 32);
      __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", &v25[v22]));
      __int128 v28 = v26;
      __int128 v29 = v27;
      uint64_t v30 = v23;
LABEL_12:
      [v28 setValue:v29 forProperty:v30];
    }
  }

  return 1LL;
}

void sub_10003B184(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  id v2 = (void *)qword_1002B6930;
  qword_1002B6930 = v1;
}

void sub_10003B2C8(_Unwind_Exception *a1)
{
}

void sub_10003B3EC(_Unwind_Exception *a1)
{
}

void sub_10003B510(_Unwind_Exception *a1)
{
}

uint64_t sub_10003B728(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v5 = *(id *)(a1 + 32);
  id v6 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v17;
    do
    {
      unsigned int v9 = 0LL;
      do
      {
        if (*(void *)v17 != v8) {
          objc_enumerationMutation(v5);
        }
        BOOL v10 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v3,  "itemWithPersistentID:",  objc_msgSend(*(id *)(*((void *)&v16 + 1) + 8 * (void)v9), "unsignedLongLongValue")));
        if (v10) {
          -[NSMutableArray addObject:](v4, "addObject:", v10);
        }

        unsigned int v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v7);
  }

  if (-[NSMutableArray count](v4, "count"))
  {
    double v11 = (void *)objc_claimAutoreleasedReturnValue( +[MTMediaLibraryTransactionManager sharedInstance]( &OBJC_CLASS___MTMediaLibraryTransactionManager,  "sharedInstance"));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10003B8F8;
    v14[3] = &unk_100241650;
    id v15 = v4;
    [v11 requestMediaLibraryWriteTransaction:v14 completion:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t v12 = *(void *)(a1 + 40);
    if (v12) {
      (*(void (**)(uint64_t, void))(v12 + 16))(v12, 0LL);
    }
  }

  return 1LL;
}

uint64_t sub_10003B8F8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[MPMediaLibrary defaultMediaLibrary](&OBJC_CLASS___MPMediaLibrary, "defaultMediaLibrary"));
    [v2 removeItems:*(void *)(a1 + 32)];

    __int128 v11 = 0u;
    __int128 v12 = 0u;
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    id v3 = *(id *)(a1 + 32);
    id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v10;
      do
      {
        id v7 = 0LL;
        do
        {
          if (*(void *)v10 != v6) {
            objc_enumerationMutation(v3);
          }
          +[MTMediaLibraryUtil didDeletePersistentId:]( MTMediaLibraryUtil,  "didDeletePersistentId:",  objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * (void)v7), "persistentID", (void)v9));
          id v7 = (char *)v7 + 1;
        }

        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }

      while (v5);
    }
  }

  return 1LL;
}

void sub_10003BD24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

uint64_t sub_10003BD60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10003BD70(uint64_t a1)
{
}

void sub_10003BD78(uint64_t a1)
{
  uint64_t v2 = kMTEpisodeEntityName;
  id v3 = *(void **)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) persistentId]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForPersistentId:](&OBJC_CLASS___MTEpisode, "predicateForPersistentId:", v4));
  id v10 = (id)objc_claimAutoreleasedReturnValue([v3 objectsInEntity:v2 predicate:v5 sortDescriptors:0]);

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v10 firstObject]);
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v6 uuid]);
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
  __int128 v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_10003C8CC(_Unwind_Exception *a1)
{
}

UITableViewCell *sub_10003C8FC(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 dequeueReusableCellWithIdentifier:@"SpecialCellID"]);
  id v4 = v3;
  if (v3) {
    id v5 = v3;
  }
  else {
    id v5 = -[UITableViewCell initWithStyle:reuseIdentifier:]( objc_alloc(&OBJC_CLASS___UITableViewCell),  "initWithStyle:reuseIdentifier:",  1LL,  @"SpecialCellID");
  }
  uint64_t v6 = v5;

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( [v7 localizedStringForKey:@"All Podcasts Button" value:&stru_100248948 table:0]);
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(-[UITableViewCell textLabel](v6, "textLabel"));
  [v9 setText:v8];

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  LODWORD(v7) = [WeakRetained allPodcastsSelected];

  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  __int128 v12 = v11;
  if ((_DWORD)v7) {
    int64_t v13 = @"INCLUDE_PODCAST_ON";
  }
  else {
    int64_t v13 = @"INCLUDE_PODCAST_Off";
  }
  double v14 = (void *)objc_claimAutoreleasedReturnValue([v11 localizedStringForKey:v13 value:&stru_100248948 table:0]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue(-[UITableViewCell detailTextLabel](v6, "detailTextLabel"));
  [v15 setText:v14];

  return v6;
}

void sub_10003CA4C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained toggleAllPodcastsSelected];
}

void sub_10003CC38(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = kMTPodcastEntityName;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcast predicateForNotHiddenNotImplicitlyFollowedPodcasts]( &OBJC_CLASS___MTPodcast,  "predicateForNotHiddenNotImplicitlyFollowedPodcasts"));
  id v7 = (id)objc_claimAutoreleasedReturnValue([v2 objectsInEntity:v3 predicate:v4 sortDescriptors:0]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue([v7 valueForKey:@"uuid"]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](&OBJC_CLASS___NSMutableSet, "setWithArray:", v5));
  [*(id *)(a1 + 40) setPodcastUuids:v6];
}

void sub_10003D558( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34)
{
}

uint64_t sub_10003D584(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10003D594(uint64_t a1)
{
}

void sub_10003D59C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = *(dispatch_queue_s **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10003D698;
  block[3] = &unk_1002416C8;
  id v18 = v8;
  id v19 = v7;
  uint64_t v11 = *(void *)(a1 + 56);
  __int128 v16 = *(_OWORD *)(a1 + 40);
  id v20 = v9;
  uint64_t v22 = v11;
  id v12 = (id)v16;
  __int128 v21 = v16;
  id v13 = v9;
  id v14 = v7;
  id v15 = v8;
  dispatch_async(v10, block);
}

void sub_10003D698(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setValue:v2 forKey:*(void *)(a1 + 40)];
  }
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 72) + 8LL);
    uint64_t v6 = *(void *)(v4 + 40);
    id v5 = (id *)(v4 + 40);
    if (!v6) {
      objc_storeStrong(v5, v3);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_10003D6F0(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a5;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  uint64_t v11 = v9[2](v9, *(void *)(a1 + 40), v8);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_10003D814;
  v17[3] = &unk_100241740;
  id v18 = v10;
  uint64_t v13 = *(void *)(a1 + 48);
  id v21 = *(id *)(a1 + 56);
  id v22 = v9;
  id v19 = v8;
  id v20 = *(id *)(a1 + 40);
  id v14 = v9;
  id v15 = v8;
  id v16 = v10;
  [v12 asyncValueOnQueue:v13 withCompletion:v17];
}

void sub_10003D814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (a2 || !v5)
  {
    uint64_t v8 = *(void *)(a1 + 56);
    if (v5) {
      a4 = 0LL;
    }
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 16))(v8, *(void *)(a1 + 40), a2, a4);
  }

  else
  {
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_10003D8EC;
    v9[3] = &unk_100241718;
    id v11 = *(id *)(a1 + 56);
    id v10 = *(id *)(a1 + 40);
    [v7 valueWithCompletion:v9];
  }

uint64_t sub_10003D8EC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  a2);
}

AMSBagValue *__cdecl sub_10003D900(id a1, IMURLBag *a2, NSString *a3)
{
  return (AMSBagValue *)-[IMURLBag URLForKey:](a2, "URLForKey:", a3);
}

AMSBagValue *__cdecl sub_10003D908(id a1, IMURLBag *a2, NSString *a3)
{
  return (AMSBagValue *)-[IMURLBag BOOLForKey:](a2, "BOOLForKey:", a3);
}

AMSBagValue *__cdecl sub_10003D910(id a1, IMURLBag *a2, NSString *a3)
{
  return (AMSBagValue *)-[IMURLBag doubleForKey:](a2, "doubleForKey:", a3);
}

uint64_t sub_10003D918(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v3 = *(void **)(v2 + 40);
    *(void *)(v2 + 40) = 0LL;
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10003E988(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a1 + 32);
  id v5 = v4;
  if (!a2)
  {
    id v7 = v4;
    id v6 = kMTLibraryDefaultImageKey;

    id v5 = v6;
  }

  id v8 = v5;
  objc_msgSend( *(id *)(a1 + 40),  "_performLoadImageForKey:scaleToSize:completionHandler:",  v5,  *(void *)(a1 + 48),  *(double *)(a1 + 56),  *(double *)(a1 + 64));
}

void sub_10003F8C4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentMarqueeView]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 layer]);
  [v3 contentsRect];
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;

  double v12 = *(double *)(a1 + 40);
  double v13 = 0.0;
  if (v5 > v12 / *(double *)(a1 + 56) - v5)
  {
    [*(id *)(a1 + 32) replicationPadding];
    double v13 = (v12 + v14) / *(double *)(a1 + 56);
  }

  id v16 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentMarqueeView]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v16 layer]);
  objc_msgSend(v15, "setContentsRect:", v13, v7, v9, v11);
}

id sub_10003F9A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAnimating:0];
}

id sub_10003F9B4(uint64_t a1)
{
  double v2 = *(double *)(a1 + 56) + 20.0;
  id v3 = *(id *)(*(void *)(a1 + 32) + 120LL);
  [v3 bounds];
  objc_msgSend(v3, "setBounds:", 0.0, 0.0, v2);
  double v4 = (*(double *)(a1 + 56) + -20.0) * 0.5;
  [v3 position];
  [v3 setPosition:v4];

  return +[CATransaction commit](&OBJC_CLASS___CATransaction, "commit");
}

void sub_10003FBE8(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](&OBJC_CLASS___UIImage, "imageNamed:", @"UILabelMarqueeRightFade.png"));
  double v2 = (void *)qword_1002B6940;
  qword_1002B6940 = v1;
}

id sub_100040024(uint64_t a1)
{
  return [*(id *)(a1 + 40) setAlpha:1.0];
}

id sub_100040054(id *a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] nextMarqueeView]);
  [v2 setHidden:1];

  id v3 = a1[4];
  double v4 = (void *)objc_claimAutoreleasedReturnValue([v3 currentMarqueeView]);
  [v3 bringSubviewToFront:v4];

  id v5 = a1[4];
  [v5 marqueeDelay];
  return objc_msgSend(v5, "performSelector:withObject:afterDelay:", "_startMarqueeIfNeeded", 0);
}

id sub_10004119C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isAnimating];
  if ((_DWORD)result)
  {
    if ([*(id *)(a1 + 32) _shouldCycle])
    {
      id v3 = "_prepareNextMarquee";
      +[NSObject cancelPreviousPerformRequestsWithTarget:selector:object:]( &OBJC_CLASS___NSObject,  "cancelPreviousPerformRequestsWithTarget:selector:object:",  *(void *)(a1 + 32),  "_prepareNextMarquee",  0LL);
      double v4 = *(void **)(a1 + 32);
      double v5 = *(double *)(a1 + 40);
      return [v4 performSelector:v3 withObject:0 afterDelay:v5];
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 113LL) = 0;
    id result = [*(id *)(a1 + 32) isPaused];
    if ((result & 1) == 0)
    {
      id v3 = "_startMarqueeIfNeeded";
      +[NSObject cancelPreviousPerformRequestsWithTarget:selector:object:]( &OBJC_CLASS___NSObject,  "cancelPreviousPerformRequestsWithTarget:selector:object:",  *(void *)(a1 + 32),  "_startMarqueeIfNeeded",  0LL);
      double v4 = *(void **)(a1 + 32);
      double v5 = *(double *)(a1 + 40) + *(double *)(a1 + 40);
      return [v4 performSelector:v3 withObject:0 afterDelay:v5];
    }
  }

  return result;
}

void sub_100041258(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](&OBJC_CLASS___UIImage, "imageNamed:", @"UILabelMarqueeMask.png"));
  double v2 = (void *)qword_1002B6950;
  qword_1002B6950 = v1;
}

void sub_100041844(_Unwind_Exception *a1)
{
}

CGFloat sub_1000418B0( int a1, uint64_t a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11)
{
  return sub_1000418D0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0.0);
}

CGFloat sub_1000418D0( int a1, uint64_t a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, double a12)
{
  if (((a2 & 0xFFFFFFFFFFFFFFFDLL) != 1) != ((a3 & 0xFFFFFFFFFFFFFFFDLL) == 1))
  {
    switch(a3)
    {
      case 0LL:
        v32.origin.x = a8;
        v32.origin.y = a9;
        v32.size.width = a10;
        v32.size.height = a11;
        double MinY = CGRectGetMinY(v32);
        goto LABEL_12;
      case 1LL:
        if ((a1 & 1) != 0) {
          goto LABEL_8;
        }
        goto LABEL_11;
      case 2LL:
        v34.origin.x = a8;
        v34.origin.y = a9;
        v34.size.width = a10;
        v34.size.height = a11;
        double MinY = CGRectGetMaxY(v34);
        goto LABEL_12;
      case 3LL:
        if ((a1 & 1) != 0)
        {
LABEL_11:
          v35.origin.x = a8;
          v35.origin.y = a9;
          v35.size.width = a10;
          v35.size.height = a11;
          double MinY = CGRectGetMinX(v35);
        }

        else
        {
LABEL_8:
          v33.origin.x = a8;
          v33.origin.y = a9;
          v33.size.width = a10;
          v33.size.height = a11;
          double MinY = CGRectGetMaxX(v33);
        }

void sub_1000432F4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) isEnabled];
  if ((_DWORD)v2)
  {
    [*(id *)(a1 + 32) _processPendingTransactions];
  }

  else
  {
    uint64_t v3 = _MTLogCategoryCloudSync(v2);
    double v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      double v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentTransaction]);
      int v8 = 138412290;
      double v9 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%@ Domain is disabled. Cancelling all pending transactions",  (uint8_t *)&v8,  0xCu);
    }

    double v6 = *(void **)(a1 + 32);
    double v7 = (void *)objc_claimAutoreleasedReturnValue( +[MZKeyValueStoreError keyValueStoreDisabledErrorWithTransaction:underlyingError:]( &OBJC_CLASS___MZKeyValueStoreError,  "keyValueStoreDisabledErrorWithTransaction:underlyingError:",  0LL,  0LL));
    [v6 _cancelAllPendingTransactions:v7];
  }

void sub_100043494(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clampsController]);
  [v1 clearNetworkingBlocked];
}

id sub_1000437A0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _scheduleTransaction:*(void *)(a1 + 40)];
}

void sub_100043824(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[MZKeyValueStoreError transactionCancelledErrorWithTransaction:underlyingError:]( &OBJC_CLASS___MZKeyValueStoreError,  "transactionCancelledErrorWithTransaction:underlyingError:",  v2,  0LL));
  [v1 _cancelTransaction:v2 error:v3];
}

void sub_1000438C8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[MZKeyValueStoreError transactionCancelledErrorWithTransaction:underlyingError:]( &OBJC_CLASS___MZKeyValueStoreError,  "transactionCancelledErrorWithTransaction:underlyingError:",  0LL,  0LL));
  [v2 _cancelAllPendingTransactions:v3];

  double v4 = *(void **)(a1 + 32);
  id v7 = (id)objc_claimAutoreleasedReturnValue([v4 currentTransaction]);
  double v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentTransaction]);
  double v6 = (void *)objc_claimAutoreleasedReturnValue( +[MZKeyValueStoreError transactionCancelledErrorWithTransaction:underlyingError:]( &OBJC_CLASS___MZKeyValueStoreError,  "transactionCancelledErrorWithTransaction:underlyingError:",  v5,  0LL));
  [v4 _cancelTransaction:v7 error:v6];
}

void sub_1000439D0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[MZKeyValueStoreError transactionCancelledErrorWithTransaction:code:underlyingError:]( &OBJC_CLASS___MZKeyValueStoreError,  "transactionCancelledErrorWithTransaction:code:underlyingError:",  0LL,  *(void *)(a1 + 40),  0LL));
  [v2 _cancelAllPendingTransactions:v3];

  double v4 = *(void **)(a1 + 32);
  id v7 = (id)objc_claimAutoreleasedReturnValue([v4 currentTransaction]);
  double v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentTransaction]);
  double v6 = (void *)objc_claimAutoreleasedReturnValue( +[MZKeyValueStoreError transactionCancelledErrorWithTransaction:code:underlyingError:]( &OBJC_CLASS___MZKeyValueStoreError,  "transactionCancelledErrorWithTransaction:code:underlyingError:",  v5,  *(void *)(a1 + 40),  0LL));
  [v4 _cancelTransaction:v7 error:v6];
}

id sub_100043B38(uint64_t a1)
{
  return [*(id *)(a1 + 32) _resolveError:*(void *)(a1 + 40) transaction:*(void *)(a1 + 48) resolution:*(unsigned int *)(a1 + 56)];
}

void sub_100043B9C(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clampsController]);
  [v1 reset];
}

void sub_100043C50(_Unwind_Exception *a1)
{
}

void sub_100043EB4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x100043F04LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_100044074(_Unwind_Exception *a1)
{
  if (v2) {
    objc_end_catch();
  }
  _Unwind_Resume(a1);
}

void sub_100044098()
{
}

void sub_100044168(_Unwind_Exception *a1)
{
}

void sub_1000445F0(_Unwind_Exception *a1)
{
}

void sub_100044B0C(_Unwind_Exception *a1)
{
}

id sub_100044C18(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _delegateTransactionDidFail:*(void *)(a1 + 40) withError:*(void *)(a1 + 48)];
  if ((result & 1) == 0) {
    return [*(id *)(a1 + 32) resolveError:*(void *)(a1 + 48) transaction:*(void *)(a1 + 40) resolution:0];
  }
  return result;
}

id sub_100044D4C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _delegateTransactionDidCancel:*(void *)(a1 + 40) withError:*(void *)(a1 + 48)];
}

LABEL_42:
}

          if (*(_BYTE *)(a1 + 80))
          {
            [v127 timestamp];
            v68 = v67;
            v69 = *(double *)(a1 + 72);
            [v127 bookmarkTime];
            if (v70 != 0.0
              || [v127 playCount]
              || ([v127 hasBeenPlayed] & 1) != 0)
            {
              v126 = v21;
              v71 = v16;
              v72 = v69 - v68;
              v73 = _MTLogCategoryMetrics();
              v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
              if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
              {
                v75 = (NSMutableSet *)objc_claimAutoreleasedReturnValue([v127 metadataIdentifier]);
                v76 = *(void **)(a1 + 72);
                v77 = (NSMutableSet *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  v68));
                v78 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) _metricsDateFormatter]);
                v79 = (void *)objc_claimAutoreleasedReturnValue([v78 stringFromTimeInterval:v72]);
                *(_DWORD *)buf = 138413570;
                v154 = v75;
                v155 = 2048;
                v156 = v76;
                v157 = 2048;
                v158 = v68;
                v159 = 2112;
                v160 = v77;
                v161 = 2048;
                v162 = v72;
                v163 = 2112;
                v164 = v79;
                _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "Metrics event for %@ - current time %f - creation date %f - %@ - insert delta %f - %@",  buf,  0x3Eu);
              }

              v80 = objc_alloc_init(&OBJC_CLASS___PFCoreAnalyticsChannel);
              v81 = objc_alloc(&OBJC_CLASS___PFAnalyticsEvent);
              v151 = @"metadataInsertDelta";
              v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v72));
              v152 = v82;
              v83 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v152,  &v151,  1LL));
              v84 = [v81 initWithName:v120 payload:v83];
              [v80 sendEvent:v84];

              id v16 = v71;
              id v21 = v126;
            }

            else
            {
              v86 = _MTLogCategoryMetrics();
              v80 = (id)objc_claimAutoreleasedReturnValue(v86);
              if (os_log_type_enabled((os_log_t)v80, OS_LOG_TYPE_DEFAULT))
              {
                v87 = (NSMutableSet *)objc_claimAutoreleasedReturnValue([v127 metadataIdentifier]);
                *(_DWORD *)buf = 138412290;
                v154 = v87;
                _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v80,  OS_LOG_TYPE_DEFAULT,  "Metrics event for %@ skipped. Empty update.",  buf,  0xCu);
              }
            }
          }

          HIDWORD(v85) = -1030792151 * v16 + 85899344;
          LODWORD(v85) = HIDWORD(v85);
          goto LABEL_52;
        }

        v48 = _MTLogCategoryUPPSync(v37);
        v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
        {
          v50 = (NSMutableSet *)objc_claimAutoreleasedReturnValue([v22 title]);
          v125 = v21;
          v51 = (void *)objc_claimAutoreleasedReturnValue([v22 uuid]);
          v52 = v16;
          v53 = [v22 storeTrackId];
          [v22 metadataTimestamp];
          *(_DWORD *)buf = 138478851;
          v154 = v50;
          v155 = 2114;
          v156 = v51;
          v157 = 2049;
          v158 = *(double *)&v53;
          id v16 = v52;
          v159 = 2050;
          v160 = v54;
          v161 = 2114;
          v162 = *(double *)&v17;
          _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "Not updating episode because local T is newer: Episode: %{private}@, UUID: %{public}@, adamID: %{private}lld , episode.metadataTimestamp: %{public}f, remoteMetadata: %{public}@",  buf,  0x34u);

          id v21 = v125;
        }

LABEL_52:
        objc_autoreleasePoolPop(v18);
        id v15 = (char *)v15 + 1;
      }

      while (v15 != v124);
      double v14 = v116 + (_DWORD)v124;
      v88 = [obj countByEnumeratingWithState:&v141 objects:v166 count:16];
      v124 = v88;
    }

    while (v88);
  }

  v90 = _MTLogCategoryUPPSync(v89);
  v91 = (os_log_s *)objc_claimAutoreleasedReturnValue(v90);
  if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    v154 = v117;
    _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEFAULT,  "Schedule an Episode Bookkeeper sync so we get our additional state for feedURLs: %{private}@",  buf,  0xCu);
  }

  v92 = (void *)objc_claimAutoreleasedReturnValue( +[SyncControllerFactory resolvedSyncController]( &OBJC_CLASS____TtC8Podcasts21SyncControllerFactory,  "resolvedSyncController"));
  [v92 scheduleEpisodeStateGetWithFeedUrls:v117];

  v94 = _MTLogCategoryUPPSync(v93);
  v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
  if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v154 = v118;
    _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_DEFAULT,  "Updating unplayed count for playlists: %{public}@",  buf,  0xCu);
  }

  v135 = 0u;
  v136 = 0u;
  v133 = 0u;
  v134 = 0u;
  v96 = v118;
  v97 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v96,  "countByEnumeratingWithState:objects:count:",  &v133,  v150,  16LL);
  if (v97)
  {
    v98 = v97;
    v99 = *(void *)v134;
    do
    {
      for (k = 0LL; k != v98; k = (char *)k + 1)
      {
        if (*(void *)v134 != v99) {
          objc_enumerationMutation(v96);
        }
        [*(id *)(*((void *)&v133 + 1) + 8 * (void)k) updateUnplayedCount];
      }

      v98 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v96,  "countByEnumeratingWithState:objects:count:",  &v133,  v150,  16LL);
    }

    while (v98);
  }

  v102 = _MTLogCategoryUPPSync(v101);
  v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
  if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
  {
    v104 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) mediaItems]);
    v105 = (NSMutableSet *)objc_claimAutoreleasedReturnValue([v104 allValues]);
    *(_DWORD *)buf = 138543362;
    v154 = v105;
    _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEFAULT,  "Consolidating all remote media items to UPP database, so we never lose UPP data for episodes still not fetched fro m feed: %{public}@",  buf,  0xCu);
  }

  v131 = 0u;
  v132 = 0u;
  v129 = 0u;
  v130 = 0u;
  v106 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) mediaItems]);
  v107 = (void *)objc_claimAutoreleasedReturnValue([v106 allValues]);

  v108 = [v107 countByEnumeratingWithState:&v129 objects:v149 count:16];
  if (v108)
  {
    v109 = v108;
    v110 = 0;
    v111 = *(void *)v130;
    do
    {
      for (m = 0LL; m != v109; m = (char *)m + 1)
      {
        if (*(void *)v130 != v111) {
          objc_enumerationMutation(v107);
        }
        v113 =  +[MTUPPMetadata createOrUpdateUPPMetadataFromUPPMediaItem:inCtx:]( &OBJC_CLASS___MTUPPMetadata,  "createOrUpdateUPPMetadataFromUPPMediaItem:inCtx:",  *(void *)(*((void *)&v129 + 1) + 8LL * (void)m),  *(void *)(a1 + 32));
        HIDWORD(v114) = 85899344 - 1030792151 * (v110 + 1 + (_DWORD)m);
        LODWORD(v114) = HIDWORD(v114);
      }

      v110 += (int)v109;
      v109 = [v107 countByEnumeratingWithState:&v129 objects:v149 count:16];
    }

    while (v109);
  }
}

void sub_100045650(_Unwind_Exception *a1)
{
}

void sub_10004566C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100045750;
  v6[3] = &unk_1002414A8;
  objc_copyWeak(&v9, (id *)(a1 + 40));
  id v5 = v3;
  id v7 = v5;
  id v8 = *(id *)(a1 + 32);
  [WeakRetained performBlock:v6];

  objc_destroyWeak(&v9);
}

void sub_10004573C(_Unwind_Exception *a1)
{
}

void sub_100045750(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained _processOperationOutput:*(void *)(a1 + 32) forRequest:*(void *)(a1 + 40)];
}

void sub_100045D24(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 keyValueStoreController:*(void *)(a1 + 32) transactionDidFinish:*(void *)(a1 + 40)];
}

void sub_100045ED8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100045F08(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100045F18(uint64_t a1)
{
}

void sub_100045F20(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v5 = WeakRetained;
    id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained backgroundTaskAssertion]);
    unsigned int v4 = [v3 isEqual:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];

    id WeakRetained = v5;
    if (v4)
    {
      [v5 _endBackgroundTask];
      id WeakRetained = v5;
    }
  }
}

id sub_10004601C(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

id sub_1000460E4(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryCloudSync(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentTransaction]);
    int v9 = 138412290;
    double v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%@ Did receive kill switch response. Cancelling all pending transactions",  (uint8_t *)&v9,  0xCu);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clampsController]);
  [v5 setNetworkingBlocked];

  double v6 = *(void **)(a1 + 32);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[MZKeyValueStoreError killSwitchErrorWithTransaction:underlyingError:]( &OBJC_CLASS___MZKeyValueStoreError,  "killSwitchErrorWithTransaction:underlyingError:",  0LL,  0LL));
  [v6 _cancelAllPendingTransactions:v7];

  return [*(id *)(a1 + 32) setEnabled:0];
}

void sub_1000462B0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clampsController]);
  [v2 setUserCancelledSignIn];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) authenticationController]);
  unsigned int v4 = [v3 shouldAuthenticate];

  if (v4)
  {
    double v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clampsController]);
    [v6 setAuthenticationRequest];
  }

  if (*(void *)(a1 + 40))
  {
    uint64_t v7 = _MTLogCategoryCloudSync(v5);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentTransaction]);
      uint64_t v10 = *(void *)(a1 + 48);
      int v11 = 138412546;
      double v12 = v9;
      __int16 v13 = 2112;
      uint64_t v14 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%@ AMSURLSession authentication error - %@",  (uint8_t *)&v11,  0x16u);
    }

    [*(id *)(a1 + 32) _transactionDidFail:*(void *)(a1 + 40) withError:*(void *)(a1 + 48)];
  }

id sub_1000472DC(void *a1)
{
  id v1 = (const __CFData *)objc_claimAutoreleasedReturnValue([a1 MZDataByInflatingWithGZip]);
  uint64_t v2 = (void *)CFPropertyListCreateWithData(0LL, v1, 0LL, 0LL, 0LL);
  if (!v2)
  {
    v7[0] = objc_opt_class(&OBJC_CLASS___NSDictionary);
    v7[1] = objc_opt_class(&OBJC_CLASS___NSArray);
    v7[2] = objc_opt_class(&OBJC_CLASS___NSString);
    v7[3] = objc_opt_class(&OBJC_CLASS___NSNumber);
    void v7[4] = objc_opt_class(&OBJC_CLASS___NSData);
    v7[5] = objc_opt_class(&OBJC_CLASS___NSDate);
    v7[6] = objc_opt_class(&OBJC_CLASS___NSNull);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v7, 7LL));
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v3));

    uint64_t v6 = 0LL;
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v4,  v1,  &v6));
  }

  return v2;
}

NSMutableArray *sub_10004744C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v3 = v1;
  id v4 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v19;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)v7);
        uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSDictionary);
        if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0)
        {
          uint64_t v10 = sub_1000475F8(v8);
          id v11 = (id)objc_claimAutoreleasedReturnValue(v10);
        }

        else
        {
          uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSArray);
          if ((objc_opt_isKindOfClass(v8, v12) & 1) != 0)
          {
            uint64_t v13 = sub_10004744C(v8);
            id v11 = (id)objc_claimAutoreleasedReturnValue(v13);
          }

          else
          {
            uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSData);
            if ((objc_opt_isKindOfClass(v8, v14) & 1) != 0)
            {
              id v15 = sub_1000472DC(v8);
              id v11 = (id)objc_claimAutoreleasedReturnValue(v15);
            }

            else
            {
              id v11 = v8;
            }
          }
        }

        id v16 = v11;
        -[NSMutableArray addObject:](v2, "addObject:", v11, (void)v18);

        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }

    while (v5);
  }

  return v2;
}

NSMutableDictionary *sub_1000475F8(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "allKeys", 0));
  id v4 = [v3 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v20;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v20 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v19 + 1) + 8LL * (void)i);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:v8]);
        uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSDictionary);
        if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
        {
          uint64_t v11 = sub_1000475F8(v9);
          uint64_t v12 = objc_claimAutoreleasedReturnValue(v11);
        }

        else
        {
          uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSArray);
          if ((objc_opt_isKindOfClass(v9, v13) & 1) != 0)
          {
            uint64_t v14 = sub_10004744C(v9);
            uint64_t v12 = objc_claimAutoreleasedReturnValue(v14);
          }

          else
          {
            uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSData);
            if ((objc_opt_isKindOfClass(v9, v15) & 1) == 0) {
              goto LABEL_13;
            }
            id v16 = sub_1000472DC(v9);
            uint64_t v12 = objc_claimAutoreleasedReturnValue(v16);
          }
        }

        double v17 = (void *)v12;

        uint64_t v9 = v17;
LABEL_13:
        -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v9, v8);
      }

      id v5 = [v3 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v5);
  }

  return v2;
}

id sub_1000477C4()
{
  return +[MTImageStore defaultStore](&OBJC_CLASS___MTImageStore, "defaultStore");
}

MTImageDownloader *sub_1000477D0()
{
  return +[MTImageDownloader sharedInstance](&OBJC_CLASS___MTImageDownloader, "sharedInstance");
}

id sub_100047D88(uint64_t a1, int a2)
{
  return _[*(id *)(a1 + 32) finishedDeserializationForKey:*(void *)(a1 + 40)];
}

void sub_10004822C(_Unwind_Exception *a1)
{
}

id sub_100048930(uint64_t a1)
{
  return _[*(id *)(a1 + 32) layoutBelowIfNeeded];
}

NSMutableDictionary *sub_100048FF0(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v4
    && (id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:NSUnderlyingErrorKey]),
        v5,
        !v5))
  {
    if (v3) {
      uint64_t v7 = (NSMutableDictionary *)[v3 mutableCopy];
    }
    else {
      uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    }
    uint64_t v6 = v7;
    -[NSMutableDictionary setObject:forKey:](v7, "setObject:forKey:", v4, NSUnderlyingErrorKey);
  }

  else
  {
    uint64_t v6 = (NSMutableDictionary *)v3;
  }

  return v6;
}

id sub_1000491E8(uint64_t a1)
{
  if (a1 > -1010)
  {
    switch(a1)
    {
      case -1009LL:
        uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorClientClamp"));
        uint64_t v2 = (void *)v1;
        uint64_t v3 = 4294966287LL;
        goto LABEL_35;
      case -1008LL:
        uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorValidation"));
        uint64_t v2 = (void *)v1;
        uint64_t v3 = 4294966288LL;
        goto LABEL_35;
      case -1007LL:
        uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorGeneric"));
        uint64_t v2 = (void *)v1;
        uint64_t v3 = 4294966289LL;
        goto LABEL_35;
      case -1006LL:
        uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorStoreAccountUserEnteredWrongCredentials"));
        uint64_t v2 = (void *)v1;
        uint64_t v3 = 4294966290LL;
        goto LABEL_35;
      case -1005LL:
        uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorStoreAccountUserCancelledSignedIn"));
        uint64_t v2 = (void *)v1;
        uint64_t v3 = 4294966291LL;
        goto LABEL_35;
      case -1004LL:
        uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorStoreAccountSessionExpired"));
        uint64_t v2 = (void *)v1;
        uint64_t v3 = 4294966292LL;
        goto LABEL_35;
      case -1003LL:
        uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorStoreAccountMismatch"));
        uint64_t v2 = (void *)v1;
        uint64_t v3 = 4294966293LL;
        goto LABEL_35;
      case -1002LL:
        uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorStoreAccountLoggedOut"));
        uint64_t v2 = (void *)v1;
        uint64_t v3 = 4294966294LL;
        goto LABEL_35;
      case -1001LL:
        uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorNoStoreAccount"));
        uint64_t v2 = (void *)v1;
        uint64_t v3 = 4294966295LL;
        goto LABEL_35;
      default:
        if (a1 != -1) {
          goto LABEL_18;
        }
        uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorUnknown"));
        uint64_t v2 = (void *)v1;
        uint64_t v3 = 0xFFFFFFFFLL;
        break;
    }

    goto LABEL_35;
  }

  if (a1 > -3003)
  {
    switch(a1)
    {
      case -2008LL:
        uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorKeyBagLoadFailure"));
        uint64_t v2 = (void *)v1;
        uint64_t v3 = 4294965288LL;
        goto LABEL_35;
      case -2007LL:
        uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorKeyBagKillSwitch"));
        uint64_t v2 = (void *)v1;
        uint64_t v3 = 4294965289LL;
        goto LABEL_35;
      case -2006LL:
        uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorDisabled"));
        uint64_t v2 = (void *)v1;
        uint64_t v3 = 4294965290LL;
        goto LABEL_35;
      case -2005LL:
        uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorKillSwitch"));
        uint64_t v2 = (void *)v1;
        uint64_t v3 = 4294965291LL;
        goto LABEL_35;
      case -2004LL:
        uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorNetworkingBlocked"));
        uint64_t v2 = (void *)v1;
        uint64_t v3 = 4294965292LL;
        goto LABEL_35;
      case -2003LL:
        uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorUserClamp"));
        uint64_t v2 = (void *)v1;
        uint64_t v3 = 4294965293LL;
        goto LABEL_35;
      case -2002LL:
        uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorServerClamp"));
        uint64_t v2 = (void *)v1;
        uint64_t v3 = 4294965294LL;
        goto LABEL_35;
      case -2001LL:
        uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorAuthenticationClamp"));
        uint64_t v2 = (void *)v1;
        uint64_t v3 = 4294965295LL;
        goto LABEL_35;
      default:
        if (a1 == -3002)
        {
          uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorMissingDomain"));
          uint64_t v2 = (void *)v1;
          uint64_t v3 = 4294964294LL;
        }

        else
        {
          if (a1 != -3001) {
            goto LABEL_18;
          }
          uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorMissingURL"));
          uint64_t v2 = (void *)v1;
          uint64_t v3 = 4294964295LL;
        }

        break;
    }

    goto LABEL_35;
  }

  switch(a1)
  {
    case -4003LL:
      uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorTimeout"));
      uint64_t v2 = (void *)v1;
      uint64_t v3 = 4294963293LL;
      goto LABEL_35;
    case -4002LL:
      uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorDelegateCancelled"));
      uint64_t v2 = (void *)v1;
      uint64_t v3 = 4294963294LL;
      goto LABEL_35;
    case -4001LL:
      uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MZKeyValueStoreErrorCancelled"));
      uint64_t v2 = (void *)v1;
      uint64_t v3 = 4294963295LL;
LABEL_35:
      id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Error Code = %@ (%d)",  v1,  v3));

      return v4;
  }

LABEL_18:
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Error Code = %ld",  a1));
  return v4;
}

NSString *__cdecl sub_10004B0B0(id a1, NSSortDescriptor *a2)
{
  return -[NSSortDescriptor key](a2, "key");
}

void sub_10004B75C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10004B774(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[MTRecencyUtil upNextForPodcastUuid:excludeExplicit:ctx:]( &OBJC_CLASS___MTRecencyUtil,  "upNextForPodcastUuid:excludeExplicit:ctx:",  v2,  0LL,  *(void *)(a1 + 40)));

  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 episodeUuid]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nextEpisodeUuid]);
  uint64_t v6 = _MTLogCategoryDefault(v5);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 episodeUuid]);
    [v3 modifiedDate];
    int v17 = 138543874;
    __int128 v18 = v8;
    __int16 v19 = 2114;
    __int128 v20 = v9;
    __int16 v21 = 2050;
    uint64_t v22 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "UpNext result from update cursor position for podcast %{public}@: episodeUuid: %{public}@ at %{public}f",  (uint8_t *)&v17,  0x20u);
  }

  uint64_t v12 = _MTLogCategoryDefault(v11);
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v3 episodeUuid]);
    int v17 = 138543618;
    __int128 v18 = v5;
    __int16 v19 = 2114;
    __int128 v20 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "UpNext result updating podcast nextEpisodeUuid from %{public}@ to %{public}@",  (uint8_t *)&v17,  0x16u);
  }

  if (v5 != v4 && ([v5 isEqualToString:v4] & 1) == 0)
  {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) episodeForUuid:v4]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) episodeForUuid:v5]);
    if ([v16 listenNowEpisode])
    {
      [v16 setListenNowEpisode:0];
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
    }

    if (v15 && ([v15 listenNowEpisode] & 1) == 0)
    {
      [v15 setListenNowEpisode:1];
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
      [v3 modifiedDate];
      objc_msgSend(*(id *)(a1 + 32), "setModifiedDate:");
    }
  }

  if (*(_BYTE *)(a1 + 56) && *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 40) saveInCurrentBlock];
  }
}

void sub_10004BB24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10004BB3C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10004BB4C(uint64_t a1)
{
}

void sub_10004BB54(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForFeedUrl:*(void *)(a1 + 40)]);
  uint64_t v2 = objc_claimAutoreleasedReturnValue([v5 uuid]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10004BF1C(_Unwind_Exception *a1)
{
}

void sub_10004BF34(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  kMTEpisodeEntityName));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[MTEpisode predicateForEpisodesWithSeasonNumbersOnPodcastUuid:]( &OBJC_CLASS___MTEpisode,  "predicateForEpisodesWithSeasonNumbersOnPodcastUuid:",  v3));
  [v2 setPredicate:v4];

  [v2 setFetchLimit:1];
  id v5 = *(void **)(a1 + 40);
  id v8 = 0LL;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 executeFetchRequest:v2 error:&v8]);
  id v7 = v8;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v6 count] != 0;

  [v7 logAndThrow:0];
}

void sub_10004C144( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10004C15C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _fetchRequestForDistinctSeasons]);
  uint64_t v3 = *(void **)(a1 + 40);
  id v9 = 0LL;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 executeFetchRequest:v2 error:&v9]);
  id v5 = v9;
  [v5 logAndThrow:0];
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v4 valueForKey:kEpisodeSeasonNumber]);
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_10004C324( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10004C33C(uint64_t a1)
{
  id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) predicateForPodcast:*(void *)(a1 + 40)]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForEpisodeType:](&OBJC_CLASS___MTEpisode, "predicateForEpisodeType:", 1LL));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[MTEpisode predicateForSeasonNumberWithNoEpisodeNumber:]( &OBJC_CLASS___MTEpisode,  "predicateForSeasonNumberWithNoEpisodeNumber:",  *(void *)(a1 + 64)));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v10 AND:v2]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 AND:v3]);

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[MTEpisode sortDescriptorsForPubDateAscending:]( &OBJC_CLASS___MTEpisode,  "sortDescriptorsForPubDateAscending:",  0LL));
  uint64_t v7 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 48) objectsInEntity:kMTEpisodeEntityName predicate:v5 sortDescriptors:v6 returnsObjectsAsFaults:0 limit:1]);
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

id sub_10004C774(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateEmptyView];
}

id sub_10004C820(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateEmptyView];
}

LABEL_5:
}

    *p_count = a4;
    goto _objc_msgSend$_updateLabelText;
  }

  p_count = &self->_count;
  if (self->_count != a4) {
    goto LABEL_5;
  }
}

        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[MTSubscriptionSyncProcessor storageProvider](self, "storageProvider"));
        [v23 recordUserAction:@"cloud_sync_add_podcast" dataSource:0 withData:v20];

        goto LABEL_6;
      }
    }

    else if (!v11)
    {
      goto LABEL_4;
    }

    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(-[MTSubscriptionSyncProcessor storageProvider](self, "storageProvider"));
    v28[0] = @"version";
    v28[1] = @"mismatch";
    v29[0] = v17;
    id v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v9));
    v29[1] = v26;
    __int128 v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v29,  v28,  2LL));
    [v25 recordUserAction:@"cloud_sync_delete_podcast" dataSource:v16 withData:v27];

    if (!v12) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

        id v31 = v33 + 1;
        ((void (*)(char *, uint64_t))v32)(v28, v19);
        if (v31 == v246)
        {
          swift_bridgeObjectRelease(v225);
          return;
        }

        continue;
      }
    }

    break;
  }

  __break(1u);
}

  CGRect v38 = static Logger.cloudSync.getter(v36);
  CGRect v39 = static os_log_type_t.default.getter(v38);
  swift_bridgeObjectRetain_n(a2, 2LL);
  v40 = swift_bridgeObjectRetain_n(v35, 2LL);
  v41 = (os_log_s *)Logger.logObject.getter(v40);
  if (os_log_type_enabled(v41, v39))
  {
    v42 = swift_slowAlloc(22LL, -1LL);
    v43 = swift_slowAlloc(64LL, -1LL);
    v111[0] = v43;
    *(_DWORD *)v42 = 136315394;
    swift_bridgeObjectRetain(v35);
    v44 = sub_100126450(&qword_1002B5060);
    v45 = Array.description.getter(v35, v44);
    v46 = v32;
    v48 = v47;
    swift_bridgeObjectRelease(v35);
    v108 = sub_100178E7C(v45, v48, v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease_n(v35, 2LL);
    v49 = v48;
    CGRect v32 = v46;
    swift_bridgeObjectRelease(v49);
    *(_WORD *)(v42 + 12) = 2080;
    swift_bridgeObjectRetain(a2);
    v108 = sub_100178E7C(v101, a2, v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v42 + 14, v42 + 22);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v41,  v39,  "[NonFollowedShows] Providing data for SET transaction. implicitlyFollowedShows: %s, key: %s",  (uint8_t *)v42,  0x16u);
    swift_arrayDestroy(v43, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);

    (*(void (**)(_BYTE *, uint64_t))(v98 + 8))(v106, v99);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease_n(v35, 2LL);
    (*(void (**)(_BYTE *, uint64_t))(v98 + 8))(v37, v99);
  }

  v50 = v100;
  sub_1001376A4(v32, (uint64_t)v111);
  v51 = v112;
  v52 = v113;
  sub_1001361FC(v111, v112);
  (*(void (**)(uint64_t, uint64_t))(v52 + 64))(v51, v52);
  if (v53)
  {
    v54 = v53;
    v55 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v54);
  }

  else
  {
    v55 = 0LL;
  }

  sub_100136648(v111);
  v70 = v55;
  *v50 = v55;
  v71 = [objc_allocWithZone((Class)MZKeyValueStoreNode) init];
  v72 = sub_100136480(v35);
  swift_bridgeObjectRelease(v35);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v72);
  [v71 setArrayValue:isa];

  v74 = [v71 value];
  if (v74)
  {
    v75 = v74;
    v76 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }

  else
  {

    return 0LL;
  }

  return v76;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    __int128 v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v25 = *v24;
    id v26 = (-1LL << v3) - 1;
  }

  else
  {
    __int128 v24 = (uint64_t *)(v4 + 8 * (result >> 6));
    id v26 = *v24;
    uint64_t v25 = (-1LL << result) - 1;
  }

  *__int128 v24 = v26 & v25;
  __int128 v27 = *(void *)(a2 + 16);
  __int128 v28 = __OFSUB__(v27, 1LL);
  double v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  CGRect v37 = static Logger.cloudSync.getter(v35);
  CGRect v38 = static os_log_type_t.default.getter(v37);
  swift_bridgeObjectRetain_n(a2, 2LL);
  CGRect v39 = swift_bridgeObjectRetain_n(v34, 2LL);
  v40 = (os_log_s *)Logger.logObject.getter(v39);
  if (os_log_type_enabled(v40, v38))
  {
    v41 = swift_slowAlloc(22LL, -1LL);
    v42 = swift_slowAlloc(64LL, -1LL);
    v110[0] = v42;
    *(_DWORD *)v41 = 136315394;
    swift_bridgeObjectRetain(v34);
    v43 = sub_100126450(&qword_1002B5060);
    v44 = Array.description.getter(v34, v43);
    v45 = v31;
    v47 = v46;
    swift_bridgeObjectRelease(v34);
    v107 = sub_100178E7C(v44, v47, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease_n(v34, 2LL);
    v48 = v47;
    id v31 = v45;
    swift_bridgeObjectRelease(v48);
    *(_WORD *)(v41 + 12) = 2080;
    swift_bridgeObjectRetain(a2);
    v107 = sub_100178E7C(v100, a2, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v41 + 14, v41 + 22);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v40,  v38,  "[Interests] Providing data for SET transaction. interests: %s, key: %s",  (uint8_t *)v41,  0x16u);
    swift_arrayDestroy(v42, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1LL, -1LL);
    swift_slowDealloc(v41, -1LL, -1LL);

    (*(void (**)(_BYTE *, uint64_t))(v97 + 8))(v105, v98);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease_n(v34, 2LL);
    (*(void (**)(_BYTE *, uint64_t))(v97 + 8))(v36, v98);
  }

  v49 = v99;
  sub_1001376A4(v31, (uint64_t)v110);
  v50 = v111;
  v51 = v112;
  sub_1001361FC(v110, v111);
  (*(void (**)(uint64_t, uint64_t))(v51 + 64))(v50, v51);
  if (v52)
  {
    v53 = v52;
    v54 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v53);
  }

  else
  {
    v54 = 0LL;
  }

  sub_100136648(v110);
  v69 = v54;
  *v49 = v54;
  v70 = [objc_allocWithZone((Class)MZKeyValueStoreNode) init];
  v71 = sub_100136480(v34);
  swift_bridgeObjectRelease(v34);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v71);
  [v70 setArrayValue:isa];

  v73 = [v70 value];
  if (v73)
  {
    v74 = v73;
    v75 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v73);
  }

  else
  {

    return 0LL;
  }

  return v75;
}

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

void sub_10004CA4C(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) episodeList]);
  [v1 setSelectedIndexPath:0];
}

void sub_10004CC10(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fastScrollTimer]);

  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fastScrollTimer]);
    [v3 invalidate];

    [*(id *)(a1 + 32) setFastScrollTimer:0];
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:]( &OBJC_CLASS___NSTimer,  "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:",  *(void *)(a1 + 32),  "_masterListFocusChangeDidBecomeIdle",  0LL,  0LL,  0.300000012));
  [*(id *)(a1 + 32) setFastScrollTimer:v4];

  id v6 = (id)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](&OBJC_CLASS___NSRunLoop, "mainRunLoop"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fastScrollTimer]);
  [v6 addTimer:v5 forMode:NSRunLoopCommonModes];
}

void sub_10004E4C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2 == 1)
  {
    id v10 = objc_begin_catch(exception_object);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 name]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 reason]);
    objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@ - %@"));

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[IMLogger sharedLogger](&OBJC_CLASS___IMLogger, "sharedLogger"));
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v10 name]);
    int v17 = (void *)objc_claimAutoreleasedReturnValue([v10 reason]);
    [v13 logFile:"/Library/Caches/com.apple.xbs/Sources/Marmoset/Source/ATV/MTTVFetchedTableWithSectionsViewController.m" lineNumber:306 format:@"FRC - Exception occured: %@ - %@"];

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[IMLogger sharedLogger](&OBJC_CLASS___IMLogger, "sharedLogger"));
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v10 callStackSymbols]);
    [v15 logFile:"/Library/Caches/com.apple.xbs/Sources/Marmoset/Source/ATV/MTTVFetchedTableWithSectionsViewController.m" lineNumber:307 format:@"Exception Stack Trace: %@"];

    abort();
  }

  _Unwind_Resume(exception_object);
}

void sub_100050320(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    [*(id *)(a1 + 32) finishWithStatus:0];
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7) {
      uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(v7 + 16))(v7, 0LL);
    }
    uint64_t v8 = _MTLogCategoryMediaRemote(v7);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v19 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Failed to resolve active player path with error: %@",  buf,  0xCu);
    }
  }

  else
  {
    id v9 = (os_log_s *)objc_alloc_init(&OBJC_CLASS___MPCAssistantCommand);
    id v10 = -[MTMPCAssistantGenericPlaybackQueue initWithPlaybackQueueRef:]( objc_alloc(&OBJC_CLASS___MTMPCAssistantGenericPlaybackQueue),  "initWithPlaybackQueueRef:",  *(void *)(a1 + 48));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    id v13[2] = sub_1000504BC;
    v13[3] = &unk_100241CE8;
    id v15 = *(id *)(a1 + 40);
    id v11 = *(id *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 56);
    id v14 = v11;
    uint64_t v16 = v12;
    char v17 = *(_BYTE *)(a1 + 64);
    -[os_log_s sendPlaybackQueue:toDestination:withOptions:completion:]( v9,  "sendPlaybackQueue:toDestination:withOptions:completion:",  v10,  v5,  0LL,  v13);
  }
}

void sub_1000504BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v6 containsObject:&off_100254740])
  {
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7)
    {
      uint64_t v8 = *(void (**)(void))(v7 + 16);
LABEL_4:
      v8();
    }
  }

  else
  {
    if (!v5)
    {
      if ([v6 count])
      {
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v6 objectAtIndex:0]);
        id v13 = [v12 intValue];

        unint64_t v14 = (unint64_t)[*(id *)(a1 + 48) requestStatusForMediaRemoteStatus:v13];
        unint64_t v15 = v14;
        if (v14 <= 5 && ((1LL << v14) & 0x39) != 0)
        {
          uint64_t v16 = *(void **)(a1 + 48);
          uint64_t v17 = *(void *)(a1 + 32);
          if (*(_BYTE *)(a1 + 56)) {
            [v16 promptBeforePerformingRequestAsBufferedAirPlay:v17 queueStatus:1];
          }
          else {
            [v16 performRequestAsBufferedAirPlay:v17];
          }
          goto LABEL_11;
        }

        __int128 v20 = *(void **)(a1 + 32);
      }

      else
      {
        uint64_t v18 = _MTLogCategoryMediaRemote(0LL);
        id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v22) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "No status codes returned after setting remote playback queue",  (uint8_t *)&v22,  2u);
        }

        __int128 v20 = *(void **)(a1 + 32);
        unint64_t v15 = 0LL;
      }

      [v20 finishWithStatus:v15];
      uint64_t v21 = *(void *)(a1 + 40);
      if (!v21) {
        goto LABEL_11;
      }
      uint64_t v8 = *(void (**)(void))(v21 + 16);
      goto LABEL_4;
    }

    [*(id *)(a1 + 32) finishWithStatus:0];
    uint64_t v9 = *(void *)(a1 + 40);
    if (v9) {
      uint64_t v9 = (*(uint64_t (**)(uint64_t, void))(v9 + 16))(v9, 0LL);
    }
    uint64_t v10 = _MTLogCategoryMediaRemote(v9);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v22 = 138412290;
      id v23 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Failed to send item into playback queue with error: %@",  (uint8_t *)&v22,  0xCu);
    }
  }

void sub_100050824(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a3 firstObject]);
  id v5 = [v4 unsignedIntValue];
  id v6 = [*(id *)(a1 + 40) requestStatusForMediaRemoteStatus:v5];
  id v7 = v6;
  if ((_DWORD)v5 && (_DWORD)v5 != 3)
  {
    uint64_t v8 = _MTLogCategoryMediaRemote(v6);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11[0] = 67109120;
      v11[1] = (_DWORD)v5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "MediaRemote command failed to fallback to Airplay with status %u",  (uint8_t *)v11,  8u);
    }
  }

  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    (*(void (**)(uint64_t, id, uint64_t))(v10 + 16))(v10, v7, 6LL);
  }
}

id sub_100050A78(uint64_t a1, int a2)
{
  if (a2) {
    return [*(id *)(a1 + 40) performRequestAsBufferedAirPlay:*(void *)(a1 + 32)];
  }
  else {
    return [*(id *)(a1 + 32) finishWithStatus:2];
  }
}

uint64_t sub_100050BA0(uint64_t a1, uint64_t a2)
{
  if (a2 == 1)
  {
    if (*(_BYTE *)(a1 + 48))
    {
      uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](&OBJC_CLASS___MTPlayerController, "defaultInstance"));
      unsigned int v4 = [v3 playWithReason:*(void *)(a1 + 40)];

      if (v4) {
        a2 = 1LL;
      }
      else {
        a2 = 5LL;
      }
    }

    else
    {
      a2 = 1LL;
    }
  }

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  }
  return result;
}

void sub_100050C28(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (a2)
  {
    [v3 finishWithStatus:0];
  }

  else
  {
    [v3 setStartPlayback:0];
    [*(id *)(a1 + 32) setPlaybackDestination:0];
    id v4 = (id)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](&OBJC_CLASS___MTPlayerController, "defaultInstance"));
    [v4 setPlaybackQueue:*(void *)(a1 + 32)];
  }

void sub_100050DEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    id v8 = 0LL;
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MPAVRoutingController systemRoute](&OBJC_CLASS___MPAVRoutingController, "systemRoute"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](&OBJC_CLASS___MTPlayerController, "defaultInstance"));
    [v6 setPlayerRoute:v5];

    uint64_t v7 = *(void *)(a1 + 32);
    if (v7) {
      (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0LL);
    }

    goto LABEL_7;
  }

  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    id v8 = v3;
    (*(void (**)(void))(v4 + 16))();
LABEL_7:
    id v3 = v8;
  }
}

void sub_1000511B4(uint64_t a1, void *a2, int a3, int a4)
{
  id v7 = a2;
  id v8 = [v7 count];
  if (!v8 || a3)
  {
    uint64_t v11 = _MTLogCategoryMediaRemote(v8);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v13 = @"Found 0 player items";
      uint64_t v14 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412802;
      if (a3) {
        id v13 = @"Target player item not found";
      }
      id v31 = v13;
      __int16 v32 = 1024;
      int v33 = a4;
      __int16 v34 = 2112;
      uint64_t v35 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%@ with restricted (%x) request for identifiers %@",  buf,  0x1Cu);
    }

    uint64_t v15 = *(void *)(a1 + 56);
    if (v15)
    {
      uint64_t v16 = 3LL;
      if (!a3) {
        uint64_t v16 = 0LL;
      }
      if (a4) {
        uint64_t v17 = 4LL;
      }
      else {
        uint64_t v17 = v16;
      }
      (*(void (**)(uint64_t, uint64_t, void))(v15 + 16))(v15, v17, *(void *)(a1 + 64));
    }
  }

  else
  {
    uint64_t v9 = -[MTItemListManifest initWithItems:](objc_alloc(&OBJC_CLASS___MTItemListManifest), "initWithItems:", v7);
    uint64_t v10 = v9;
    if (*(void *)(a1 + 40))
    {
      -[MTItemListManifest setIdentifier:](v9, "setIdentifier:");
    }

    else
    {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 UUIDString]);
      -[MTItemListManifest setIdentifier:](v10, "setIdentifier:", v19);
    }

    -[MTPlayerManifest setNetworkUPPEnabled:]( v10,  "setNetworkUPPEnabled:",  +[PFClientUtil isRunningOnHomepod](&OBJC_CLASS___PFClientUtil, "isRunningOnHomepod"));
    __int128 v20 = objc_alloc_init(&OBJC_CLASS___MTPlaybackContext);
    -[MTPlaybackContext setSource:](v20, "setSource:", 12LL);
    -[MTPlaybackContext setInteractive:](v20, "setInteractive:", 0LL);
    -[MTPlaybackContext setUpNextQueueIntent:](v20, "setUpNextQueueIntent:", *(void *)(a1 + 72));
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[MTSetPlaybackQueueRequest requestWithContext:]( &OBJC_CLASS___MTSetPlaybackQueueRequest,  "requestWithContext:",  v20));
    [v21 setStartPlayback:*(unsigned __int8 *)(a1 + 80)];
    [v21 setPlaybackDestination:0];
    [v21 setManifest:v10];
    __int128 v24 = _NSConcreteStackBlock;
    uint64_t v25 = 3221225472LL;
    id v26 = sub_100051430;
    __int128 v27 = &unk_100241E00;
    id v22 = *(id *)(a1 + 56);
    uint64_t v23 = *(void *)(a1 + 64);
    id v28 = v22;
    uint64_t v29 = v23;
    [v21 setCompletion:&v24];
    objc_msgSend(*(id *)(a1 + 48), "setPlaybackQueue:", v21, v24, v25, v26, v27);
  }
}

uint64_t sub_100051430(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, *(void *)(a1 + 40));
  }
  return result;
}

void sub_10005166C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(unsigned int *)(a1 + 40);
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
    MRMediaRemoteInsertSystemAppPlaybackQueueForPlayer(v6, v7, 0LL, a2, v9, &stru_100241E68);
  }

  else
  {
    uint64_t v10 = _MTLogCategoryMediaRemote();
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = 138412290;
      id v13 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Failed to resolve active player path with error: %@",  (uint8_t *)&v12,  0xCu);
    }
  }
}

void sub_100051774(id a1, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = _MTLogCategoryMediaRemote(a1);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5[0] = 67109120;
      v5[1] = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Failed to insert item into playback queue with error: %d",  (uint8_t *)v5,  8u);
    }
  }

void sub_100051904(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v5)
  {
    if (v6)
    {
      id v9 = v5;
      (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0LL);
LABEL_6:
      id v5 = v9;
    }
  }

  else if (v6)
  {
    id v9 = 0LL;
    id v7 = objc_alloc(&OBJC_CLASS___MPCAssistantMutableRemoteControlDestination);
    id v8 = [v7 initWithAppBundleID:kMTApplicationBundleIdentifier playerID:kPodcastsPlayerID origin:MRNowPlayingPlayerPathGetOrigin(a2)];
    [v8 setSingleGroup:1];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();

    goto LABEL_6;
  }
}

void sub_100051BB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100051BE4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100051BF4(uint64_t a1)
{
}

void sub_100051BFC(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8LL);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v2 executeFetchRequest:v3 error:&obj]);
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = *(void *)(a1[6] + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_100051E68(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v2 = (void *)qword_1002B6960;
  qword_1002B6960 = (uint64_t)v1;
}

void sub_100051F20(_Unwind_Exception *a1)
{
}

void sub_100051FAC(_Unwind_Exception *a1)
{
}

void sub_1000530F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10005311C( void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9)
{
  v13.size.height = a5;
  v13.size.width = a4;
  v13.origin.y = a3;
  v13.origin.x = a2;
  ++*(void *)(*(void *)(a1[4] + 8LL) + 24LL);
  CGRect v12 = CGRectUnion(*(CGRect *)(*(void *)(a1[5] + 8LL) + 32LL), v13);
  unint64_t v11 = a1[6];
  *(CGRect *)(*(void *)(a1[5] + 8LL) + 32LL) = v12;
  if (*(void *)(*(void *)(a1[4] + 8LL) + 24LL) >= v11) {
    *a9 = 1;
  }
}

uint64_t sub_100053298(uint64_t a1, void *a2)
{
  if (*(_BYTE *)(a1 + 32)) {
    return 1LL;
  }
  else {
    return [a2 isExplicit] ^ 1;
  }
}

id sub_100053F04(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryDatabase(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Migration assertion expired while operation is in progress!",  v5,  2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "endBackgroundTask:", objc_msgSend(*(id *)(a1 + 40), "processAssertion"));
}

void sub_100053F80(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryDatabase(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Start CoreData migration.", buf, 2u);
  }

  BOOL v4 = +[MTLibraryMigrator runCoreDataMigration](&OBJC_CLASS___MTLibraryMigrator, "runCoreDataMigration");
  uint64_t v5 = _MTLogCategoryDatabase(v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = v6;
  if (v4)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "CoreData migration completed successfully.",  buf,  2u);
    }

    uint64_t v9 = _MTLogCategoryDatabase(v8);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Start data migration.", buf, 2u);
    }

    BOOL v11 = +[MTLibraryMigrator runDataMigration](&OBJC_CLASS___MTLibraryMigrator, "runDataMigration");
    BOOL v12 = v11;
    uint64_t v13 = _MTLogCategoryDatabase(v11);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      if (v15)
      {
        *(_WORD *)buf = 0;
        uint64_t v16 = "Data migration has been completed.";
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v16, buf, 2u);
      }
    }

    else if (v15)
    {
      *(_WORD *)buf = 0;
      uint64_t v16 = "No need to run data migration.";
      goto LABEL_16;
    }

    +[MTLibraryMigrator runImageStoreMigration](&OBJC_CLASS___MTLibraryMigrator, "runImageStoreMigration");
    block = _NSConcreteStackBlock;
    uint64_t v17 = sub_100054458;
    p_block = &block;
    goto LABEL_18;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CoreData migration failed.", buf, 2u);
  }

  CGRect v37 = _NSConcreteStackBlock;
  uint64_t v17 = sub_100054460;
  p_block = &v37;
LABEL_18:
  p_block[1] = (void **)3221225472LL;
  p_block[2] = (void **)v17;
  p_block[3] = (void **)&unk_10023FF98;
  p_void block[4] = *(void ***)(a1 + 32);
  dispatch_async(&_dispatch_main_q, p_block);
  __uint64_t v19 = (clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) - *(void *)(a1 + 40)) / 0x3B9ACA00;
  __int128 v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSUserDefaults _applePodcastsFoundationSharedUserDefaults]( &OBJC_CLASS___NSUserDefaults,  "_applePodcastsFoundationSharedUserDefaults"));
  id v21 = [v20 integerForKey:@"migrationAttemptCount"];

  id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSUserDefaults _applePodcastsFoundationSharedUserDefaults]( &OBJC_CLASS___NSUserDefaults,  "_applePodcastsFoundationSharedUserDefaults"));
  [v22 removeObjectForKey:@"migrationAttemptCount"];

  id v35 = objc_alloc(&OBJC_CLASS___PFAnalyticsEvent);
  uint64_t v34 = PFAnalyticsEventNameMigration;
  v40[0] = @"oldLibraryDataVersion";
  CGRect v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 48)));
  v41[0] = v36;
  v40[1] = @"newLibraryDataVersion";
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 56)));
  v41[1] = v23;
  v40[2] = @"oldCoreDataVersion";
  __int128 v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 64)));
  v41[2] = v24;
  v40[3] = @"newCoreDataVersion";
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 72)));
  v41[3] = v25;
  v40[4] = @"durationSeconds";
  id v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v19));
  v41[4] = v26;
  v40[5] = @"success";
  __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v4));
  v41[5] = v27;
  v40[6] = @"didBecomeActiveWhileMigrating";
  id v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(a1 + 32) didBecomeActiveWhileMigrating]));
  v41[6] = v28;
  v40[7] = @"migrationAttempts";
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v21));
  v41[7] = v29;
  v40[8] = @"hadCorruptDB";
  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80)));
  v41[8] = v30;
  id v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v41,  v40,  9LL));
  id v32 = [v35 initWithName:v34 payload:v31];

  id v33 = objc_alloc_init(&OBJC_CLASS___PFCoreAnalyticsChannel);
  [v33 sendEvent:v32];

  +[IMMetrics endTimer:](&OBJC_CLASS___IMMetrics, "endTimer:", @"migration");
}

id sub_100054458(uint64_t a1)
{
  return _[*(id *)(a1 + 32) finishMigration];
}

id sub_100054460(uint64_t a1)
{
  return _[*(id *)(a1 + 32) showIncompatibleDBDialog];
}

id sub_100054704(uint64_t a1)
{
  return _[*(id *)(a1 + 32) performIncompatibleDBDialogAction];
}

void sub_1000549CC(_Unwind_Exception *a1)
{
}

void sub_100054B58(_Unwind_Exception *a1)
{
}

void sub_10005579C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100055ED8(_Unwind_Exception *a1)
{
}

void sub_100055F5C(_Unwind_Exception *a1)
{
}

void sub_1000575C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

uint64_t sub_10005765C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10005766C(uint64_t a1)
{
}

void sub_100057674(uint64_t a1)
{
  id v15 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) episodeForUuid:*(void *)(a1 + 40)]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) podcastForUuid:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = v15 != 0LL;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = v2 != 0LL;
  if (!*(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL)
    && +[MTStoreIdentifier isNotEmpty:]( MTStoreIdentifier,  "isNotEmpty:",  [v2 storeCollectionId]))
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%lld",  [v2 storeCollectionId]));
    uint64_t v4 = *(void *)(*(void *)(a1 + 80) + 8LL);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) length] != 0;
  if (!*(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL)
    && +[MTStoreIdentifier isNotEmpty:]( MTStoreIdentifier,  "isNotEmpty:",  [v15 storeTrackId]))
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%lld",  [v15 storeTrackId]));
    uint64_t v7 = *(void *)(*(void *)(a1 + 96) + 8LL);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL))
  {
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) podcastFeedUrl]);
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue([v9 podcastForFeedUrl:v10]);
    uint64_t v12 = objc_claimAutoreleasedReturnValue([v11 uuid]);
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;

    *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) length] != 0;
  }
}

void sub_100057880(uint64_t a1, uint64_t a2)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentItem]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playbackQueueController]);
  [v4 setMagicMomentPlayerItem:v6];

  uint64_t v5 = *(void *)(a1 + 48);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t, void))(v5 + 16))(v5, a2, *(void *)(a1 + 56));
  }
}

void sub_1000578F8(uint64_t a1, uint64_t a2)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentItem]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playbackQueueController]);
  [v4 setMagicMomentPlayerItem:v6];

  uint64_t v5 = *(void *)(a1 + 48);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v5, a2, 4LL);
  }
}

void sub_100057C50(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = _MTLogCategoryMediaRemote(v3);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v13 = 138412290;
      uint64_t v14 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Siri following a show failed with error: %@",  (uint8_t *)&v13,  0xCu);
    }

    if (*(void *)(a1 + 32))
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 domain]);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[MTSubscriptionController subscriptionControllerErrorDomain]( &OBJC_CLASS___MTSubscriptionController,  "subscriptionControllerErrorDomain"));
      if ([v7 isEqualToString:v8])
      {
        id v9 = [v4 code];
        id v10 = +[MTSubscriptionController alreadySubscribedErrorCode]( &OBJC_CLASS___MTSubscriptionController,  "alreadySubscribedErrorCode");

        if (v9 == v10)
        {
          BOOL v11 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
LABEL_12:
          v11();
          goto LABEL_13;
        }
      }

      else
      {
      }

      BOOL v11 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v12 = *(void *)(a1 + 32);
    if (v12)
    {
      BOOL v11 = *(void (**)(void))(v12 + 16);
      goto LABEL_12;
    }
  }

uint64_t sub_100057DBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100058020(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentItem]);
  uint64_t v4 = _MTLogCategoryPlayback(v2, v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v6)
    {
      int v7 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)buf = 67109120;
      int v19 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Restored manifest and there is a current item. startPlayback: %d",  buf,  8u);
    }

    if (*(_BYTE *)(a1 + 72))
    {
      id v8 = [v2 needsNetworkToPlayButNoNetwork];
      if ((_DWORD)v8)
      {
        uint64_t v10 = _MTLogCategoryPlayback(v8, v9);
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "The current item is not downloaded, and we are not connected to the internet. Cannot start playback.",  buf,  2u);
        }

        uint64_t v12 = *(void *)(a1 + 40);
        if (v12)
        {
          int v13 = *(void (**)(void))(v12 + 16);
LABEL_16:
          v13();
          goto LABEL_17;
        }
      }

      [*(id *)(a1 + 32) playWithReason:9];
    }

    uint64_t v16 = *(void *)(a1 + 40);
    if (v16)
    {
      int v13 = *(void (**)(void))(v16 + 16);
      goto LABEL_16;
    }
  }

  else
  {
    if (v6)
    {
      int v14 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)buf = 67109120;
      int v19 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "No manifest to restore. Creating a new play queue and starting playback: %d",  buf,  8u);
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[MTPlaybackQueueFactory playMyPodcastsWithOrder:]( &OBJC_CLASS___MTPlaybackQueueFactory,  "playMyPodcastsWithOrder:",  *(void *)(a1 + 48)));
    LOBYTE(v17) = *(_BYTE *)(a1 + 74);
    [*(id *)(a1 + 56) _setManifest:v15 playerController:*(void *)(a1 + 32) queueType:1 startPlayback:*(unsigned __int8 *)(a1 + 72) forceLocal:*(unsigned __int8 *)(a1 + 73) reason:*(void *)(a1 + 64) interactive:v17 completion:*(void *)(a1 + 40)];
  }

LABEL_17:
}

  return v16;
}

LABEL_18:
      goto LABEL_19;
    }

    if (v24)
    {
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[MTEpisode title](self, "title"));
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[MTEpisode uuid](self, "uuid"));
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(-[MTEpisode metadataIdentifier](self, "metadataIdentifier"));
      v40 = 138543874;
      v41 = v16;
      v42 = 2114;
      v43 = v17;
      v44 = 2114;
      v45 = v18;
      int v19 = "[UpdateUPPID] Skipping, timestamp >0: %{public}@, %{public}@, %{public}@";
      goto LABEL_16;
    }
  }
}
}

      ++v14;
      ++v15;
    }

    while (v10 != v14);
    uint64_t v12 = &v10[(void)v31];
    uint64_t v10 = (char *)[obj countByEnumeratingWithState:&v38 objects:v42 count:16];
  }

  while (v10);

  if ((v11 & 1) != 0) {
    [*(id *)(a1 + 32) saveInCurrentBlock];
  }
  int v7 = v29;
  uint64_t v2 = v30;
  if ((v33 & 1) == 0)
  {
    __int128 v27 = *(void *)(a1 + 64);
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472LL;
    v34[2] = sub_100117754;
    v34[3] = &unk_100245370;
    id v28 = *(void **)(a1 + 40);
    id v35 = *(id *)(a1 + 48);
    CGRect v36 = v28;
    CGRect v37 = *(id *)(a1 + 32);
    [v35 getStoreInfoForEpisodesWithAdamIds:v27 callback:v34];
  }

  BOOL v6 = *a1;
  int v7 = v6 >= 2;
  id v8 = v6 - 2;
  if (!v7) {
    id v8 = -1;
  }
  return (v8 + 1);
}

  BOOL v6 = *a1;
  int v7 = v6 >= 4;
  id v8 = v6 - 4;
  if (!v7) {
    id v8 = -1;
  }
  return (v8 + 1);
}

  BOOL v6 = *(unsigned __int8 *)a1;
  int v7 = v6 >= 2;
  id v8 = v6 - 2;
  if (!v7) {
    id v8 = -1;
  }
  return (v8 + 1);
}

uint64_t sub_1000582F8(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, *(void *)(a1 + 40));
  }
  return result;
}

void sub_100058514(id a1, NSArray *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](&OBJC_CLASS___MTDB, "sharedInstance"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 mainOrPrivateContext]);

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1000585F8;
  v9[3] = &unk_100240980;
  id v10 = v5;
  id v11 = v3;
  uint64_t v12 = v2;
  BOOL v6 = v2;
  id v7 = v3;
  id v8 = v5;
  [v8 performBlockAndWaitWithSave:v9];
}

void sub_1000585F8(uint64_t a1)
{
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlaylist predicateForFlag:isTrue:](&OBJC_CLASS___MTPlaylist, "predicateForFlag:isTrue:", 4LL, 1LL));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:sortDescriptors:", kMTPlaylistEntityName));
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v14;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
        id v8 = *(void **)(a1 + 40);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 podcasts]);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 set]);
        LOBYTE(v_Block_object_dispose((const void *)(v59 - 176), 8) = [v8 isEqual:v10];

        if ((v8 & 1) == 0)
        {
          id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSOrderedSet orderedSetWithArray:]( &OBJC_CLASS___NSOrderedSet,  "orderedSetWithArray:",  *(void *)(a1 + 48)));
          [v7 setPodcasts:v11];

          [v7 setNeedsUpdate:1];
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v4);
  }
}

void sub_1000587DC(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___MZPreferences);
  uint64_t v2 = (void *)qword_1002B6980;
  qword_1002B6980 = (uint64_t)v1;
}

id sub_100058870(uint64_t a1, void *a2)
{
  return _[a2 _preferencesDidChange];
}

void sub_100058D3C(id a1, RBSAssertion *a2, NSError *a3)
{
  id v3 = a3;
  uint64_t v4 = _MTLogCategoryAsyncTask();
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      int v10 = 138412290;
      id v11 = v3;
      id v7 = "Background assertion failed to acquire with error %@. App may sleep if it's in the background.";
      id v8 = v5;
      uint32_t v9 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v10, v9);
    }
  }

  else if (v6)
  {
    LOWORD(v10) = 0;
    id v7 = "Background assertion was automatically invalidated. App may sleep if it's in the background.";
    id v8 = v5;
    uint32_t v9 = 2;
    goto LABEL_6;
  }
}

id sub_100058FD0(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

id sub_1000592E8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) performExpirationHandler];
}

id sub_10005949C(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

void sub_1000595B4(id a1)
{
  dword_1002B6990 = 0;
}

id sub_100059BC8(uint64_t a1, void *a2)
{
  return _[a2 setPodcastEpisode:*(void *)(a1 + 32)];
}

void sub_10005A19C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = -[MTEpisodeManifest initWithEpisodeUuid:]( objc_alloc(&OBJC_CLASS___MTEpisodeManifest),  "initWithEpisodeUuid:",  v3);

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_10005A854(uint64_t a1)
{
  return [*(id *)(a1 + 40) setAlpha:1.0];
}

void sub_10005A994(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) nowPlayingWallPaper]);
  [v2 setAlpha:0.0];
}

uint64_t sub_10005A9E0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) navigationController]);
  [v2 willMoveToParentViewController:0];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nowPlayingWallPaper]);
  [v3 removeFromSuperview];

  [*(id *)(a1 + 32) setNowPlayingWallPaper:0];
  [*(id *)(a1 + 40) removeFromSuperview];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) navigationController]);
  [v4 removeFromParentViewController];

  [*(id *)(a1 + 32) setNavigationController:0];
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10005B130(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectsInEntity:kMTEpisodeEntityName predicate:*(void *)(a1 + 40) sortDescriptors:0]);
  id v2 = [v1 count];
  if (!v2) {
    goto LABEL_32;
  }
  uint64_t v3 = _MTLogCategoryUPPSync(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    v47 = (NSMutableSet *)[v1 count];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Syncing %{public}ld local episodes", buf, 0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithCapacity:]( NSMutableDictionary,  "dictionaryWithCapacity:",  [v1 count]));
  CGRect v39 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  id v35 = v1;
  id obj = v1;
  CGRect v36 = v5;
  id v41 = [obj countByEnumeratingWithState:&v42 objects:v54 count:16];
  char v6 = 0;
  if (!v41) {
    goto LABEL_23;
  }
  uint64_t v40 = *(void *)v43;
  while (2)
  {
    for (i = 0LL; i != v41; i = (char *)i + 1)
    {
      if (*(void *)v43 != v40) {
        objc_enumerationMutation(obj);
      }
      id v8 = *(void **)(*((void *)&v42 + 1) + 8LL * (void)i);
      [v8 updateUPPIdentifierIfNeeded];
      uint32_t v9 = objc_alloc_init(&OBJC_CLASS___MTUniversalPlaybackPositionMediaItem);
      -[MTUniversalPlaybackPositionMediaItem setEpisode:](v9, "setEpisode:", v8);
      int v10 = (void *)objc_claimAutoreleasedReturnValue([v8 metadataIdentifier]);
      if (v10)
      {
        [v5 setObject:v9 forKey:v10];
        buf[0] = 0;
        (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
        if (buf[0])
        {

          goto LABEL_23;
        }
      }

      id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 podcast]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 feedURL]);
      id v13 = [v12 length];

      if (v13)
      {
        __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v8 podcast]);
        __int128 v16 = (NSMutableSet *)objc_claimAutoreleasedReturnValue([v15 feedURL]);
        -[NSMutableSet addObject:](v39, "addObject:", v16);
      }

      else
      {
        uint64_t v17 = _MTLogCategoryUPPSync(v14);
        __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(v17);
        if (!os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_ERROR)) {
          goto LABEL_16;
        }
        __int128 v16 = (NSMutableSet *)objc_claimAutoreleasedReturnValue([v8 title]);
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v8 uuid]);
        id v19 = [v8 storeTrackId];
        __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v8 metadataIdentifier]);
        *(_DWORD *)buf = 138478595;
        v47 = v16;
        __int16 v48 = 2114;
        v49 = v18;
        __int16 v50 = 2049;
        id v51 = v19;
        __int16 v52 = 2114;
        v53 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v15,  OS_LOG_TYPE_ERROR,  "Skipping playState:<feedURL> sync for episode without a feedURL: %{private}@, %{public}@, %{private}lld, %{public}@",  buf,  0x2Au);

        uint64_t v5 = v36;
      }

LABEL_16:
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v8 podcast]);
      if (v21)
      {
        id v22 = (void *)objc_claimAutoreleasedReturnValue([v8 podcast]);
        unsigned int v23 = [v22 subscribed] ^ 1;
      }

      else
      {
        LOBYTE(v23) = 0;
      }

      v6 |= v23;
    }

    id v41 = [obj countByEnumeratingWithState:&v42 objects:v54 count:16];
    if (v41) {
      continue;
    }
    break;
  }

LABEL_23:
  uint64_t v25 = _MTLogCategoryUPPSync(v24);
  id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v27 = (NSMutableSet *)[v5 count];
    *(_DWORD *)buf = 134349314;
    v47 = v27;
    __int16 v48 = 2114;
    v49 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "%{public}lu Media Items to Sync: %{public}@",  buf,  0x16u);
  }

  uint64_t v28 = _MTLogCategoryUPPSync([*(id *)(a1 + 48) setMediaItems:v5]);
  uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    v47 = v39;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Schedule an Episode Bookkeeper sync so we get our additional state for feedURLs: %{private}@",  buf,  0xCu);
  }

  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[SyncControllerFactory resolvedSyncController]( &OBJC_CLASS____TtC8Podcasts21SyncControllerFactory,  "resolvedSyncController"));
  [v30 scheduleEpisodeStatePutWithFeedUrls:v39];

  if ((v6 & 1) != 0)
  {
    uint64_t v32 = _MTLogCategoryUPPSync(v31);
    id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Schedule an NonFollowedShows Bookkeeper sync so we Set our updated lastDatePlayed values.",  buf,  2u);
    }

    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue( +[SyncControllerFactory resolvedSyncController]( &OBJC_CLASS____TtC8Podcasts21SyncControllerFactory,  "resolvedSyncController"));
    [v34 syncNonFollowedShowsIfSyncDirty];
  }

  id v1 = v35;
LABEL_32:
}

  __break(1u);
LABEL_24:
  uint64_t v17 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v17,  1092LL,  0);
  __break(1u);
  return result;
}

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint32_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100134284(0LL, &qword_1002B4E40, &off_10023E2F8);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    CGRect v38 = swift_bridgeObjectRelease(v20);
    static Logger.database.getter(v38);
    swift_bridgeObjectRetain(v20);
    uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
    id v41 = static os_log_type_t.default.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      __int128 v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)__int128 v42 = 134217984;
      if (v3)
      {
        if (v20 < 0) {
          __int128 v44 = v20;
        }
        else {
          __int128 v44 = v20 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v20);
        __int128 v43 = _CocoaArrayWrapper.endIndex.getter(v44);
        swift_bridgeObjectRelease(v20);
      }

      else
      {
        __int128 v43 = *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      swift_bridgeObjectRelease(v20);
      v47 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Finished deleting %ld interests.", v42, 0xCu);
      swift_slowDealloc(v42, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v20, 2LL);
    }

    v33((uint64_t)v7, v26);
    return [a1 saveInCurrentBlock];
  }

  else
  {
    uint64_t v28 = static Logger.database.getter(v17);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    uint64_t v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "Unable to fetch interests when attempting to cleanup. Cannot delete any interests.",  v31,  2u);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    return (id)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

void sub_10005B67C(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___NSDateComponentsFormatter);
  id v2 = (void *)qword_1002B69A0;
  qword_1002B69A0 = (uint64_t)v1;

  [(id)qword_1002B69A0 setAllowedUnits:240];
  _[(id)qword_1002B69A0 setUnitsStyle:1];
}

void sub_10005BA0C(uint64_t a1)
{
  uint64_t v1 = kMTEpisodeEntityName;
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"%K IN %@",  kEpisodeMetadataIdentifier,  *(void *)(a1 + 40)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectsInEntity:v1 predicate:v3 sortDescriptors:0]);

  uint64_t v5 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [v4 count]);
  __int128 v145 = 0u;
  __int128 v146 = 0u;
  __int128 v147 = 0u;
  __int128 v148 = 0u;
  id v6 = v4;
  id v7 = [v6 countByEnumeratingWithState:&v145 objects:v167 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v146;
    do
    {
      for (i = 0LL; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v146 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v145 + 1) + 8LL * (void)i);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 metadataIdentifier]);

        if (v12)
        {
          id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 metadataIdentifier]);
          -[NSMutableDictionary setValue:forKey:](v5, "setValue:forKey:", v11, v13);
        }
      }

      id v8 = [v6 countByEnumeratingWithState:&v145 objects:v167 count:16];
    }

    while (v8);
  }

  v119 = v5;
  v115 = v6;

  v118 = (NSMutableSet *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  v117 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v141 = 0u;
  __int128 v142 = 0u;
  __int128 v143 = 0u;
  __int128 v144 = 0u;
  id obj = *(id *)(a1 + 48);
  id v124 = [obj countByEnumeratingWithState:&v141 objects:v166 count:16];
  if (v124)
  {
    int v14 = 0;
    uint64_t v123 = *(void *)v142;
    uint64_t v120 = PFAnalyticsEventNameUPPMetadataInsert;
    do
    {
      __int128 v15 = 0LL;
      int v116 = v14;
      int v16 = v14;
      do
      {
        if (*(void *)v142 != v123) {
          objc_enumerationMutation(obj);
        }
        uint64_t v17 = *(NSMutableSet **)(*((void *)&v141 + 1) + 8LL * (void)v15);
        uint64_t v18 = objc_autoreleasePoolPush();
        v127 = (void *)objc_claimAutoreleasedReturnValue( +[MTUPPMetadata createOrUpdateUPPMetadataFromUPPRecord:inCtx:]( &OBJC_CLASS___MTUPPMetadata,  "createOrUpdateUPPMetadataFromUPPRecord:inCtx:",  v17,  *(void *)(a1 + 32)));
        id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) mediaItems]);
        __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet itemIdentifier](v17, "itemIdentifier"));
        id v21 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKey:v20]);

        if (v21)
        {
          id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 episode]);
          uint64_t v23 = _MTLogCategoryUPPSync(v22);
          uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v25 = (NSMutableSet *)objc_claimAutoreleasedReturnValue([v22 title]);
            id v26 = (void *)objc_claimAutoreleasedReturnValue([v22 uuid]);
            id v27 = [v22 storeTrackId];
            *(_DWORD *)buf = 138478851;
            v154 = v25;
            __int16 v155 = 2114;
            v156 = v26;
            __int16 v157 = 2049;
            double v158 = *(double *)&v27;
            __int16 v159 = 2114;
            v160 = v17;
            __int16 v161 = 2114;
            double v162 = *(double *)&v21;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Episode: %{private}@, UUID: %{public}@, adamID: %{private}lld, Metadata: %{public}@, extracted from media item: %{public}@",  buf,  0x34u);
          }
        }

        else
        {
          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet itemIdentifier](v17, "itemIdentifier"));
          id v22 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v119, "objectForKey:", v28));

          uint64_t v30 = _MTLogCategoryUPPSync(v29);
          uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v31 = (NSMutableSet *)objc_claimAutoreleasedReturnValue([v22 title]);
            uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v22 uuid]);
            id v33 = [v22 storeTrackId];
            *(_DWORD *)buf = 138478595;
            v154 = v31;
            __int16 v155 = 2114;
            v156 = v32;
            __int16 v157 = 2049;
            double v158 = *(double *)&v33;
            __int16 v159 = 2114;
            v160 = v17;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Episode: %{private}@, UUID: %{public}@, adamID: %{private}lld, Metadata: %{public}@, extracted from local episode dictionary",  buf,  0x2Au);
          }
        }

        ++v16;

        if (!v22)
        {
          uint64_t v46 = _MTLogCategoryUPPSync(v34);
          v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            v154 = v17;
            _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Episode Not Found, Skip: %{public}@",  buf,  0xCu);
          }

          goto LABEL_42;
        }

        [v22 metadataTimestamp];
        double v36 = v35;
        id v37 = -[NSMutableSet timestamp](v17, "timestamp");
        if (v36 < v38)
        {
          int v122 = v16;
          [(id)objc_opt_class(*(void *)(a1 + 64)) updateEpisode:v22 withUPPMetadata:v127];
          CGRect v39 = (void *)objc_claimAutoreleasedReturnValue([v22 playlists]);
          -[NSMutableSet unionSet:](v118, "unionSet:", v39);

          uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v22 podcast]);
          id v41 = (void *)objc_claimAutoreleasedReturnValue([v40 feedURL]);
          id v42 = [v41 length];

          if (v42)
          {
            __int128 v44 = (void *)objc_claimAutoreleasedReturnValue([v22 podcast]);
            __int128 v45 = (NSMutableSet *)objc_claimAutoreleasedReturnValue([v44 feedURL]);
            -[NSMutableSet addObject:](v117, "addObject:", v45);
            goto LABEL_31;
          }

          uint64_t v55 = _MTLogCategoryUPPSync(v43);
          __int128 v44 = (void *)objc_claimAutoreleasedReturnValue(v55);
          if (os_log_type_enabled((os_log_t)v44, OS_LOG_TYPE_DEFAULT))
          {
            __int128 v45 = (NSMutableSet *)objc_claimAutoreleasedReturnValue([v22 title]);
            *(_DWORD *)buf = 138477827;
            v154 = v45;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v44,  OS_LOG_TYPE_DEFAULT,  "Skipping bookkeeper sync for episode without a feedURL: %{private}@",  buf,  0xCu);
LABEL_31:
          }

          int v16 = v122;

          if ((os_feature_enabled_bluemoon(v56) & 1) == 0)
          {
            v57 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](&OBJC_CLASS___MTPlayerController, "defaultInstance"));
            v58 = (void *)objc_claimAutoreleasedReturnValue([v22 uuid]);
            [v22 playhead];
            [v57 updateUPPEpisodeUuid:v58 bookmarkTime:v59];
          }

          __int128 v139 = 0u;
          __int128 v140 = 0u;
          __int128 v137 = 0u;
          __int128 v138 = 0u;
          v47 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) episodeObservers]);
          id v60 = -[os_log_s countByEnumeratingWithState:objects:count:]( v47,  "countByEnumeratingWithState:objects:count:",  &v137,  v165,  16LL);
          if (v60)
          {
            id v61 = v60;
            uint64_t v62 = *(void *)v138;
            do
            {
              for (j = 0LL; j != v61; j = (char *)j + 1)
              {
                if (*(void *)v138 != v62) {
                  objc_enumerationMutation(v47);
                }
                v64 = (void (**)(void, void, double))objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v137 + 1) + 8 * (void)j) block]);
                v65 = (void *)objc_claimAutoreleasedReturnValue([v22 uuid]);
                [v22 playhead];
                ((void (**)(void, void *, double))v64)[2](v64, v65, v66);
              }

              id v61 = -[os_log_s countByEnumeratingWithState:objects:count:]( v47,  "countByEnumeratingWithState:objects:count:",  &v137,  v165,  16LL);
            }

            while (v61);
            int v16 = v122;
          }

void sub_10005C7E4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = kMTEpisodeEntityName;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[MTEpisode predicateForMetadataFirstSyncEligible:]( &OBJC_CLASS___MTEpisode,  "predicateForMetadataFirstSyncEligible:",  1LL));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v2 objectsInEntity:v3 predicate:v4 sortDescriptors:0]);

  id v6 = [v5 count];
  if (v6)
  {
    uint64_t v7 = _MTLogCategoryUPPSync(v6);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      id v21 = [v5 count];
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Marking %lu episodes as metadataFirstSyncEligible = NO",  buf,  0xCu);
    }

    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    id v9 = v5;
    id v10 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v16;
      do
      {
        id v13 = 0LL;
        do
        {
          if (*(void *)v16 != v12) {
            objc_enumerationMutation(v9);
          }
          int v14 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)v13);
          +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate", (void)v15);
          objc_msgSend(v14, "setMetadataTimestamp:");
          [v14 setMetadataFirstSyncEligible:0];
          id v13 = (char *)v13 + 1;
        }

        while (v11 != v13);
        id v11 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }

      while (v11);
    }

    [*(id *)(a1 + 32) saveInCurrentBlock];
  }
}

void sub_10005D108(uint64_t a1)
{
  id v26 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) episode]);
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([v26 podcast]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v1 storeCollectionId]));
  id v19 = v1;
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v1 currentFeedURL]);
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v26 guid]);
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v26 title]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v26 author]);
  uint64_t v4 = v26;
  if (!v3) {
    uint64_t v4 = v1;
  }
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v4 author]);

  id v22 = (void *)objc_claimAutoreleasedReturnValue([v1 title]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  +[MTLibraryLegacyUtil legacyPlayCountForPlayState:playCount:]( MTLibraryLegacyUtil,  "legacyPlayCountForPlayState:playCount:",  [v26 playState],  objc_msgSend(v26, "playCount"))));
  __int128 v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  +[MTLibraryLegacyUtil hasBeenPlayedForPlayState:]( MTLibraryLegacyUtil,  "hasBeenPlayedForPlayState:",  [v26 playState])));
  [v26 playhead];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v6));
  [v26 metadataTimestamp];
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 3LL));
  [v26 importDate];
  double v11 = v10;
  +[MTUniversalPlaybackPositionDataSource uppLastSyncTime]( &OBJC_CLASS___MTUniversalPlaybackPositionDataSource,  "uppLastSyncTime");
  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v11 > v12));
  [v26 lastUserMarkedAsPlayedDate];
  __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  [v26 lastDatePlayed];
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v26 playStateManuallySet]));
  id v13 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  12LL);
  -[NSMutableDictionary setValue:forKey:](v13, "setValue:forKey:", v2, @"storeItemAdamID");
  -[NSMutableDictionary setValue:forKey:](v13, "setValue:forKey:", v25, @"podcastURL");
  -[NSMutableDictionary setValue:forKey:](v13, "setValue:forKey:", v24, @"podcastGUID");
  -[NSMutableDictionary setValue:forKey:](v13, "setValue:forKey:", v23, @"title");
  -[NSMutableDictionary setValue:forKey:](v13, "setValue:forKey:", v21, @"artist");
  -[NSMutableDictionary setValue:forKey:](v13, "setValue:forKey:", v22, @"albumTitle");
  -[NSMutableDictionary setValue:forKey:](v13, "setValue:forKey:", v5, @"playCount");
  -[NSMutableDictionary setValue:forKey:](v13, "setValue:forKey:", v18, @"hasBeenPalyed");
  -[NSMutableDictionary setValue:forKey:](v13, "setValue:forKey:", v7, @"bookmarkTime");
  -[NSMutableDictionary setValue:forKey:](v13, "setValue:forKey:", v8, @"bookmarkMetadataTimestamp");
  -[NSMutableDictionary setValue:forKey:](v13, "setValue:forKey:", v9, @"mediaEntityType");
  -[NSMutableDictionary setValue:forKey:](v13, "setValue:forKey:", v17, @"isNew");
  -[NSMutableDictionary setValue:forKey:](v13, "setValue:forKey:", v16, @"lastUserMarkedAsPlayedDate");
  -[NSMutableDictionary setValue:forKey:](v13, "setValue:forKey:", v15, @"lastDatePlayed");
  -[NSMutableDictionary setValue:forKey:](v13, "setValue:forKey:", v14, @"playStateManuallySet");
  [*(id *)(a1 + 32) setMediaItemDictionary:v13];
}

id sub_10005E024(uint64_t a1)
{
  return [*(id *)(a1 + 32) buttonTapped:0];
}

id sub_10005E688(uint64_t a1)
{
  return _[*(id *)(a1 + 32) presentAddPodcastUI];
}

id sub_10005E690(uint64_t a1)
{
  return _[*(id *)(a1 + 32) presentAddStationUI];
}

void sub_10005E698(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) popoverPresentationController]);
  [v1 setPassthroughViews:0];
}

void sub_10005E9D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
}

uint64_t sub_10005E9F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10005EA00(uint64_t a1)
{
}

void sub_10005EA08(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) absoluteString]);
  [v5 setText:v4];

  [v5 setKeyboardType:3];
}

void sub_10005EA78(uint64_t a1)
{
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472LL;
  v1[2] = sub_10005EAD4;
  v1[3] = &unk_1002404E0;
  __int128 v2 = *(_OWORD *)(a1 + 32);
  dispatch_async(&_dispatch_main_q, v1);
}

void sub_10005EAD4(uint64_t a1)
{
  dispatch_time_t v2 = dispatch_time(0LL, 1000000000LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10005EB5C;
  v3[3] = &unk_1002409A8;
  __int128 v4 = *(_OWORD *)(a1 + 32);
  dispatch_after(v2, &_dispatch_main_q, v3);
}

void sub_10005EB5C(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) text]);
  [v1 performSubscribe:v2];
}

void sub_10005EBA4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) presentingViewController]);
  [v2 presentViewController:*(void *)(a1 + 40) animated:1 completion:0];
}

void sub_10005EF54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
}

void sub_10005EF74(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setPlaceholder:*(void *)(a1 + 32)];
  [v3 setAutocapitalizationType:2];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10005EFBC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) text]);
  id v3 = [v2 length];

  if (v3)
  {
    uint64_t v4 = *(void **)(a1 + 32);
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) text]);
    [v4 presentStationWithTitle:v5];
  }

void sub_10005F04C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) presentingViewController]);
  [v2 presentViewController:*(void *)(a1 + 40) animated:1 completion:0];
}

void sub_10005F268( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10005F28C(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue( +[MTPlaylist insertNewPlaylistInManagedObjectContext:]( &OBJC_CLASS___MTPlaylist,  "insertNewPlaylistInManagedObjectContext:",  a1[4]));
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  [*(id *)(*(void *)(a1[6] + 8) + 40) setTitle:a1[5]];
  [*(id *)(*(void *)(a1[6] + 8) + 40) setIncludesAllPodcasts:0];
  [*(id *)(*(void *)(a1[6] + 8) + 40) setNeedsUpdate:0];
  +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
  objc_msgSend(*(id *)(*(void *)(a1[6] + 8) + 40), "setGeneratedDate:");
  id v5 = (void *)a1[4];
  uint64_t v10 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
  float v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v10, 1LL));
  [v5 obtainPermanentIDsForObjects:v6 error:0];

  uint64_t v7 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[6] + 8) + 40) uuid]);
  uint64_t v8 = *(void *)(a1[7] + 8LL);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

id sub_100061AAC(uint64_t a1)
{
  return [*(id *)(a1 + 32) setSelectedIndexPath:*(void *)(a1 + 40)];
}

id sub_10006209C(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "set_layoutMargins:",  UIEdgeInsetsZero.top,  UIEdgeInsetsZero.left,  UIEdgeInsetsZero.bottom,  UIEdgeInsetsZero.right);
}

void sub_100062498(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) view]);
  [v2 setNeedsLayout];

  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) tableView]);
  [v3 reloadData];
}

id sub_10006368C(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryDefault(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Starting all processors...", v5, 2u);
  }

  return [*(id *)(a1 + 32) startProcessors:-1];
}

id sub_10006376C(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryDefault(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Starting processors needed for Feed Updates...",  v5,  2u);
  }

  return [*(id *)(a1 + 32) startProcessors:209];
}

id sub_10006384C(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryDefault(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Starting processors needed for Playback...",  v5,  2u);
  }

  return [*(id *)(a1 + 32) startProcessors:60];
}

id sub_10006392C(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryDefault(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Starting processors needed for CarPlay...",  v5,  2u);
  }

  return [*(id *)(a1 + 32) startProcessorsForFeedUpdates];
}

void sub_1000657A4(_Unwind_Exception *a1)
{
}

id sub_1000657C0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result = [a2 isPrimarySubtitleDisplayer];
  if ((_DWORD)result)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a3;
    *a4 = 1;
  }

  return result;
}

void *sub_10006580C(void *result, void *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(result[5] + 8LL) + 24LL) != a3) {
    return [a2 setAVPlayer:result[4]];
  }
  return result;
}

void sub_100065B20(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100065B7C;
  block[3] = &unk_10023FF98;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(&_dispatch_main_q, block);
}

void sub_100065B7C(uint64_t a1)
{
  uint64_t v8 = TVPMediaItemMetadataChangesKey;
  uint64_t v7 = TVPMediaItemMetadataContainsClosedCaptions;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v7, 1LL));
  uint64_t v9 = v2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v9,  &v8,  1LL));

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  uint64_t v5 = TVPMediaItemMetadataDidChangeNotification;
  float v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentMediaItem]);
  [v4 postNotificationName:v5 object:v6 userInfo:v3];

  [*(id *)(a1 + 32) updateSubtitleOptionsAndSelection];
}

void sub_100066958( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

id sub_100067EA8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) addEntityToCache:a2];
}

void sub_100068DFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100068E18(id *a1)
{
  uint64_t v2 = objc_alloc(&OBJC_CLASS___MTTVEpisodeDescriptionViewController);
  a1 += 4;
  id WeakRetained = objc_loadWeakRetained(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained episode]);
  uint64_t v8 = -[MTTVEpisodeDescriptionViewController initWithEpisode:](v2, "initWithEpisode:", v4);

  id v5 = objc_loadWeakRetained(a1);
  -[MTTVEpisodeDescriptionViewController setDelegate:](v8, "setDelegate:", v5);

  float v6 = (void *)objc_claimAutoreleasedReturnValue(+[MTApplication_ATV appController](&OBJC_CLASS___MTApplication_ATV, "appController"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 rootNavController]);

  [v7 pushViewController:v8 animated:1];
}

uint64_t sub_100069CB0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100069CC0(uint64_t a1)
{
}

void sub_100069CC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 32);
  if (!v2) {
    uint64_t v2 = *(void **)(v1 + 56);
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v2);
}

void sub_100069D7C(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryDefault();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "MTAccountController: Setting active account: %@",  (uint8_t *)&v5,  0xCu);
  }

  objc_storeStrong((id *)(*(void *)(a1 + 40) + 56LL), *(id *)(a1 + 32));
}

void sub_100069F44(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100069FDC;
    block[3] = &unk_1002400E8;
    id v5 = v2;
    dispatch_async(v3, block);
  }

uint64_t sub_100069FDC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10006A2A0(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryDefault(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "MTAccountController: updating active account",  v8,  2u);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _activeAccountBlocking]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ams_DSID"));
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 stringValue]);

  unint64_t v7 = *(void *)(a1 + 40);
  [*(id *)(a1 + 32) setActiveAccount:v4];
  [*(id *)(a1 + 32) setHasFetchedInitialAccount:1];
}

void sub_10006A388(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v1 postNotificationName:@"AccountDSIDChangedNotification" object:0];
}

void sub_10006A5F4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)) {
    goto LABEL_2;
  }
  id v14 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) inFlightAuthRequests]);
  if ([v14 containsObject:*(void *)(a1 + 40)])
  {
  }

  else
  {
    double v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) declinedAuthRequests]);
    unsigned __int8 v13 = [v12 containsObject:*(void *)(a1 + 40)];

    if ((v13 & 1) == 0)
    {
LABEL_2:
      uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) inFlightAuthRequests]);
      [v2 addObject:*(void *)(a1 + 40)];

      id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeAccount]);
      id v4 = [[AMSAuthenticateOptions alloc] initWithOptionsDictionary:0];
      [v4 setAuthenticationType:0];
      [v4 setAllowServerDialogs:1];
      [v4 setDebugReason:*(void *)(a1 + 40)];
      id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( [v5 localizedStringForKey:@"SIGN_IN_PODCASTS" value:&stru_100248948 table:0]);
      [v4 setPromptTitle:v6];

      unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIViewController mt_rootViewController](&OBJC_CLASS___UIViewController, "mt_rootViewController"));
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "mt_topViewController"));

      id v9 = [[AMSUIAuthenticateTask alloc] initWithAccount:v3 presentingViewController:v8 options:v4];
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 performAuthentication]);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      v15[2] = sub_10006A7F8;
      v15[3] = &unk_100242420;
      double v11 = *(void **)(a1 + 40);
      v15[4] = *(void *)(a1 + 32);
      id v16 = v11;
      [v10 addFinishBlock:v15];
    }
  }

void sub_10006A7F8(uint64_t a1, uint64_t a2, void *a3)
{
  v11[0] = 0LL;
  v11[1] = v11;
  _DWORD v11[2] = 0x3032000000LL;
  v11[3] = sub_100069CB0;
  void v11[4] = sub_100069CC0;
  id v4 = a3;
  id v12 = v4;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10006A8DC;
  v7[3] = &unk_1002423F8;
  id v5 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  uint64_t v10 = v11;
  id v8 = v5;
  id v9 = v4;
  id v6 = v4;
  dispatch_async(&_dispatch_main_q, v7);

  _Block_object_dispose(v11, 8);
}

void sub_10006A8DC(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ams_underlyingError"));

    if (v3)
    {
      uint64_t v5 = AKAppleIDAuthenticationErrorDomain;
      while (1)
      {
        uint64_t v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), "ams_underlyingError"));
        uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8LL);
        id v8 = *(void **)(v7 + 40);
        *(void *)(v7 + 40) = v6;

        id v10 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) code];
        if (v10 == (id)-7003LL) {
          break;
        }
LABEL_8:

        if (!v11) {
          goto LABEL_9;
        }
      }

      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) declinedAuthRequests]);
      [v9 addObject:*(void *)(a1 + 40)];
LABEL_7:

      goto LABEL_8;
    }

void sub_10006AAFC(id a1, BOOL a2, NSError *a3)
{
  id v3 = a3;
  if (v3)
  {
    uint64_t v4 = _MTLogCategoryDefault();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = 138412290;
      uint64_t v7 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Failed to sign out user with error: %@",  (uint8_t *)&v6,  0xCu);
    }
  }
}

id sub_10006BA80(uint64_t a1)
{
  return [*(id *)(a1 + 32) setSelected:0];
}

id sub_10006BB94(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateOverlayForSelectedOrIsNew];
}

void sub_10006C8B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_10006C8D0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10006C8E0(uint64_t a1)
{
}

void sub_10006C8E8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playlistUuid]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 playlistForUuid:v6]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10006C944(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) splitViewController]);
  id v1 = (void *)objc_claimAutoreleasedReturnValue([v3 navigationController]);
  id v2 = [v1 popToRootViewControllerAnimated:1];
}

void sub_10006D150(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) tableView]);
  [v1 reloadData];
}

void sub_10006DBE4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = [a2 indexOfEpisode:*(void *)(a1 + 32)];
  if (v5 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v6 = *(void **)(a1 + 40);
    id v7 = (id)objc_claimAutoreleasedReturnValue( +[NSIndexPath indexPathForRow:inSection:]( &OBJC_CLASS___NSIndexPath,  "indexPathForRow:inSection:",  v5,  a3));
    [v6 addObject:v7];
  }

id sub_10006E118(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateListStateAnimated:0];
}

void sub_10006EDE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_10006EE14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10006EE24(uint64_t a1)
{
}

void sub_10006EE2C(uint64_t a1, void *a2)
{
  uint64_t v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "mt_compactMap:", &stru_1002424D0));
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id sub_10006EE6C(id a1, MTEpisode *a2)
{
  return -[MTEpisode uuid](a2, "uuid");
}

void sub_10006EE74(uint64_t a1, int a2, id a3)
{
  id v4 = objc_retainBlock(a3);
  (*((void (**)(id, void, void))v4 + 2))(v4, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_10006F05C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10006F080(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v15 = a2;
  id v7 = (id *)(a1 + 32);
  id v8 = a3;
  id WeakRetained = objc_loadWeakRetained(v7);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained imageKey]);
  unsigned int v11 = [v8 isEqualToString:v10];

  if (v11)
  {
    id v12 = objc_loadWeakRetained(v7);
    [v12 _setArtwork:v15];

    id v13 = objc_loadWeakRetained(v7);
    [v13 setShowingDefaultImage:a4];

    id v14 = objc_loadWeakRetained(v7);
    [v14 setNeedsLayout];
  }
}

void sub_10006F580(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (MPMediaPlaylistPropertyName == v7)
  {
    [*(id *)(a1 + 32) setName:v5];
  }

  else if (MPMediaEntityPropertyPersistentID == v7)
  {
    [*(id *)(a1 + 32) setMediaLibraryId:v5];
  }

  else if ((NSString *)MPMediaPlaylistPropertyParentPersistentID == v7)
  {
    [*(id *)(a1 + 32) setParentMediaLibraryId:v5];
  }

  else if ((NSString *)MPMediaPlaylistPropertyIsFolder == v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setIsFolder:", objc_msgSend(v5, "BOOLValue"));
  }

  else if (MPMediaPlaylistPropertyPlaylistAttributes == v7)
  {
    unint64_t v6 = (unint64_t)[v5 integerValue];
    [*(id *)(a1 + 32) setIsGenius:(v6 >> 2) & 1];
    [*(id *)(a1 + 32) setIsOnTheGo:v6 & 1];
    [*(id *)(a1 + 32) setIsSmart:(v6 >> 1) & 1];
  }

  else if ((NSString *)MPMediaPlaylistPropertyIsHidden == v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setIsHidden:", objc_msgSend(v5, "BOOLValue"));
  }
}

void sub_10006FBC8(_Unwind_Exception *a1)
{
}

void sub_10006FBFC(uint64_t a1, void *a2, void *a3)
{
  id v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 availableActions]);

  [WeakRetained showActionSheetWithActions:v7 fromButton:v5];
}

BOOL sub_10006FC78(id a1, IMActionController *a2)
{
  return 1;
}

id sub_10006FC80(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = [(id)objc_opt_class(WeakRetained) moreIcon];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTTouchInsetsButton buttonWithType:](&OBJC_CLASS___MTTouchInsetsButton, "buttonWithType:", 0LL));
  [v4 setImage:v3 forState:0];
  objc_msgSend(v4, "setTouchInsets:", -8.0, -12.0, -8.0, -12.0);
  [v4 sizeToFit];

  return v4;
}

NSString *__cdecl sub_10006FD04(id a1, MTMoreActionSheetAction *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMAction controller](a2, "controller"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 actionObject]);

  uint64_t v4 = objc_opt_class(&OBJC_CLASS___MTEpisode);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 bestTitle]);
  }

  else
  {
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___MTPodcast);
    if ((objc_opt_isKindOfClass(v3, v6) & 1) == 0)
    {
      uint64_t v7 = objc_opt_class(&OBJC_CLASS___MTPlaylist);
      if ((objc_opt_isKindOfClass(v3, v7) & 1) == 0)
      {
        uint64_t v8 = objc_opt_class(&OBJC_CLASS___MTPlayerItem);
        if ((objc_opt_isKindOfClass(v3, v8) & 1) == 0)
        {
          id v9 = 0LL;
          goto LABEL_8;
        }
      }
    }

    uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 title]);
  }

  id v9 = (void *)v5;
LABEL_8:

  return (NSString *)v9;
}

void sub_10006FE1C(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](&OBJC_CLASS___UIImage, "imageNamed:", @"more"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](&OBJC_CLASS___UIColor, "clearColor"));
  id v5 = (id)objc_claimAutoreleasedReturnValue( +[UIImage image:inRect:withBacking:opaque:scale:]( &OBJC_CLASS___UIImage,  "image:inRect:withBacking:opaque:scale:",  v1,  v2,  0LL,  0.0,  0.0,  24.0,  28.0,  0.0));

  uint64_t v3 = objc_claimAutoreleasedReturnValue([v5 imageWithRenderingMode:2]);
  uint64_t v4 = (void *)qword_1002B69D0;
  qword_1002B69D0 = v3;
}

id sub_100070228(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateEmptyView];
}

id sub_1000702D4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateEmptyView];
}

id sub_100070B48(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setAvoidenceEnabled:0 forSectionHeaderAtIndexPath:*(void *)(a1 + 40)];
}

id sub_100070B58(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setAvoidenceEnabled:1 forSectionHeaderAtIndexPath:*(void *)(a1 + 40)];
}

void sub_100071AB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100071ACC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100071BA0;
  v8[3] = &unk_100240A08;
  objc_copyWeak(&v10, (id *)(a1 + 32));
  id v7 = v5;
  id v9 = v7;
  +[NSThread mainThread:](&OBJC_CLASS___NSThread, "mainThread:", v8);

  objc_destroyWeak(&v10);
}

void sub_100071B8C(_Unwind_Exception *a1)
{
}

void sub_100071BA0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  if (*(void *)(a1 + 32))
  {
    id v5 = WeakRetained;
    unsigned int v4 = [WeakRetained isPlaceholder];
    uint64_t v3 = v5;
    if (v4)
    {
      [v5 setImage:*(void *)(a1 + 32)];
      uint64_t v3 = v5;
    }
  }
}

void sub_100071D18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100071D34(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100071E2C;
  v12[3] = &unk_1002414A8;
  objc_copyWeak(&v15, (id *)(a1 + 32));
  id v10 = v8;
  id v13 = v10;
  id v11 = v7;
  id v14 = v11;
  +[NSThread mainThread:](&OBJC_CLASS___NSThread, "mainThread:", v12);

  objc_destroyWeak(&v15);
}

void sub_100071E18(_Unwind_Exception *a1)
{
}

void sub_100071E2C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (*(void *)(a1 + 32))
    {
      unsigned int v4 = WeakRetained;
      unsigned int v3 = [*(id *)(a1 + 40) isEqualToString:WeakRetained[3]];
      id WeakRetained = v4;
      if (v3)
      {
        [v4 setImage:*(void *)(a1 + 32)];
        id WeakRetained = v4;
      }
    }
  }
}

void sub_100071F48(id a1)
{
  id v1 = (void *)qword_1002B69E0;
  qword_1002B69E0 = (uint64_t)&off_1002551B8;
}

void sub_100072028(id a1)
{
  v19[0] = &off_100254848;
  __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](&OBJC_CLASS___UIImage, "imageNamed:", @"StateVideo"));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v18 imageWithRenderingMode:2]);
  int v16 = (void *)objc_claimAutoreleasedReturnValue([v17 _imageThatSuppressesAccessibilityHairlineThickening]);
  v20[0] = v16;
  v19[1] = &off_100254830;
  id v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](&OBJC_CLASS___UIImage, "imageNamed:", @"StateExplicit"));
  v20[1] = v15;
  v19[2] = &off_1002548D8;
  id v14 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](&OBJC_CLASS___UIImage, "imageNamed:", @"StateCloud"));
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v14 imageWithRenderingMode:2]);
  v20[2] = v13;
  v19[3] = &off_1002548F0;
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](&OBJC_CLASS___UIImage, "imageNamed:", @"StateDocument"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 imageWithRenderingMode:2]);
  v20[3] = v2;
  v19[4] = &off_100254908;
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](&OBJC_CLASS___UIImage, "imageNamed:", @"StateError"));
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 imageWithRenderingMode:2]);
  v20[4] = v4;
  v19[5] = &off_100254920;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](&OBJC_CLASS___UIImage, "imageNamed:", @"StateAirplane"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 imageFlippedForRightToLeftLayoutDirection]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 imageWithRenderingMode:2]);
  v20[5] = v7;
  v19[6] = &off_100254878;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage halfPlayedIcon](&OBJC_CLASS___UIImage, "halfPlayedIcon"));
  v20[6] = v8;
  v19[7] = &off_100254890;
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage unplayedIcon](&OBJC_CLASS___UIImage, "unplayedIcon"));
  v20[7] = v9;
  v19[8] = &off_100254860;
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage nowPlayingIcon](&OBJC_CLASS___UIImage, "nowPlayingIcon"));
  v20[8] = v10;
  uint64_t v11 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v20,  v19,  9LL));
  id v12 = (void *)qword_1002B69F0;
  qword_1002B69F0 = v11;
}

void sub_100072D58(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[MTEpisodeStateView imageForIconKey:theme:]( &OBJC_CLASS___MTEpisodeStateView,  "imageForIconKey:theme:",  a2,  v4));
  [v6 setImage:v5];

  [v6 sizeToFit];
}

void sub_100073464(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (MPMediaItemPropertyArtist == v9)
  {
    [*(id *)(a1 + 32) setArtist:v5];
  }

  else if ((NSString *)MPMediaItemPropertyPodcastURL == v9)
  {
    [*(id *)(a1 + 32) setFeedUrl:v5];
  }

  else if (MPMediaItemPropertyPodcastTitle == v9)
  {
    [*(id *)(a1 + 32) setPodcastTitle:v5];
  }

  else if (MPMediaItemPropertyPodcastPersistentID == v9)
  {
    [*(id *)(a1 + 32) setPodcastPersistentId:v5];
  }

  else if (MPMediaItemPropertyAssetURL == v9)
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 absoluteString]);
    [v6 setAssetUrl:v7];
  }

  else if ((NSString *)MPMediaItemPropertyIsITunesU == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setIsItunesU:", objc_msgSend(v5, "BOOLValue"));
  }

  else if (MPMediaItemPropertyPersistentID == v9)
  {
    [*(id *)(a1 + 32) setPersistentId:v5];
  }

  else if ((NSString *)MPMediaItemPropertyFileSize == v9)
  {
    [*(id *)(a1 + 32) setByteSize:v5];
  }

  else if (MPMediaItemPropertyGenre == v9)
  {
    [*(id *)(a1 + 32) setCategory:v5];
  }

  else if (MPMediaItemPropertyPlaybackDuration == v9)
  {
    [*(id *)(a1 + 32) setDuration:v5];
  }

  else if (MPMediaItemPropertyTitle == v9)
  {
    [*(id *)(a1 + 32) setTitle:v5];
  }

  else if (MPMediaItemPropertyMediaType == v9)
  {
    id v8 = &kUTTypeMovie;
    [*(id *)(a1 + 32) setUti:*v8];
  }

  else if ((NSString *)MPMediaItemPropertyPodcastGUID == v9)
  {
    [*(id *)(a1 + 32) setGuid:v5];
  }

  else if (MPMediaItemPropertyReleaseDate == v9)
  {
    [*(id *)(a1 + 32) setPubDate:v5];
  }

  else if (MPMediaItemPropertyBookmarkTime == v9)
  {
    [*(id *)(a1 + 32) setPlayhead:v5];
  }

  else if ((NSString *)MPMediaItemPropertyHasBeenPlayed == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setHasBeenPlayed:", objc_msgSend(v5, "BOOLValue"));
  }

  else if (MPMediaItemPropertyPlayCount == v9)
  {
    [*(id *)(a1 + 32) setPlayCount:v5];
  }

  else if ((NSString *)MPMediaItemPropertyDownloadIdentifier == v9)
  {
    [*(id *)(a1 + 32) setDownloadIdentifier:v5];
  }

  else if ((NSString *)MPMediaItemPropertyRestricted == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setIsExplicit:", objc_msgSend(v5, "BOOLValue"));
  }

  else if ((NSString *)MPMediaItemPropertyStoreID == v9)
  {
    [*(id *)(a1 + 32) setStoreTrackId:v5];
  }

  else if ((NSString *)MPMediaItemPropertyStorePlaylistID == v9)
  {
    [*(id *)(a1 + 32) setStoreCollectionId:v5];
  }

  else if (MPMediaItemPropertyLastPlayedDate == v9)
  {
    [*(id *)(a1 + 32) setLastPlayedDate:v5];
  }
}

BOOL sub_100073834(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "itemWithPersistentID:", objc_msgSend(v2, "persistentID")));

  BOOL v5 = +[MTMLMediaItem isMissingAssetForItem:](&OBJC_CLASS___MTMLMediaItem, "isMissingAssetForItem:", v4);
  if (v5)
  {
    id v9 = @"persistantID";
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v4 persistentID]));
    id v10 = v6;
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
    +[IMMetrics recordUserAction:dataSource:withData:]( &OBJC_CLASS___IMMetrics,  "recordUserAction:dataSource:withData:",  @"medialibrary_missing_asset",  0LL,  v7);

    [v4 populateLocationPropertiesWithPath:0];
  }

  return v5;
}

id sub_100074800(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _updatePlayerPathWithRoute:a2];
}

void sub_100074EC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = (os_log_s *)qword_1002B6A00;
    if (os_log_type_enabled((os_log_t)qword_1002B6A00, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 134218242;
      uint64_t v7 = v5;
      __int16 v8 = 2114;
      id v9 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Error performing change to item (%ld) request: %{public}@",  (uint8_t *)&v6,  0x16u);
    }
  }
}

void sub_10007509C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = (os_log_s *)qword_1002B6A00;
    if (os_log_type_enabled((os_log_t)qword_1002B6A00, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v6 = 134349056;
      uint64_t v7 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Error performing set elapsed time to position %{public}g",  (uint8_t *)&v6,  0xCu);
    }

    [*(id *)(a1 + 32) setPendingElapsedTimeChange:0];
    [*(id *)(a1 + 32) setPendingElapsedTime:0.0];
  }
}

void sub_1000753B8(id a1, NSError *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = (os_log_s *)qword_1002B6A00;
    if (os_log_type_enabled((os_log_t)qword_1002B6A00, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138543362;
      uint64_t v5 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Error setting shuffle type: %{public}@",  (uint8_t *)&v4,  0xCu);
    }
  }
}

void sub_10007575C(id a1, NSError *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = (os_log_s *)qword_1002B6A00;
    if (os_log_type_enabled((os_log_t)qword_1002B6A00, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138543362;
      uint64_t v5 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Error setting repeat type: %{public}@",  (uint8_t *)&v4,  0xCu);
    }
  }
}

void sub_100075AA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = qword_1002B6A00;
  if (v3)
  {
    if (!os_log_type_enabled((os_log_t)qword_1002B6A00, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    int v10 = 138543362;
    id v11 = v3;
    uint64_t v5 = "Error clearing queue: %{public}@";
    int v6 = (os_log_s *)v4;
    os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
    uint32_t v8 = 12;
  }

  else
  {
    if (!os_log_type_enabled((os_log_t)qword_1002B6A00, OS_LOG_TYPE_INFO)) {
      goto LABEL_7;
    }
    LOWORD(v10) = 0;
    uint64_t v5 = "Successfully cleared play queue.";
    int v6 = (os_log_s *)v4;
    os_log_type_t v7 = OS_LOG_TYPE_INFO;
    uint32_t v8 = 2;
  }

  _os_log_impl((void *)&_mh_execute_header, v6, v7, v5, (uint8_t *)&v10, v8);
LABEL_7:
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    (*(void (**)(uint64_t, id))(v9 + 16))(v9, v3);
  }
}

void sub_100075F20(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = (os_log_s *)qword_1002B6A00;
    if (os_log_type_enabled((os_log_t)qword_1002B6A00, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2114;
      id v9 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Error inserting into queue with playback intent: %@, error: %{public}@",  (uint8_t *)&v6,  0x16u);
    }
  }
}

void sub_10007623C(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 40LL))
  {
    id v2 = (os_log_s *)qword_1002B6A00;
    if (os_log_type_enabled((os_log_t)qword_1002B6A00, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Cancelling timeout for invalid route error due to valid response received",  v5,  2u);
    }

    dispatch_source_cancel(*(dispatch_source_t *)(*(void *)(a1 + 32) + 40LL));
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = 0LL;
  }

id sub_1000762D8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updatePlayQueue];
}

void sub_10007637C(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 32) + 40LL))
  {
    id v2 = (os_log_s *)qword_1002B6A00;
    if (os_log_type_enabled((os_log_t)qword_1002B6A00, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Got invalid route error; scheduling timeout to revert to local system route",
        buf,
        2u);
    }

    dispatch_source_t v3 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(*(void *)(a1 + 32) + 32LL));
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    dispatch_source_set_timer( *(dispatch_source_t *)(*(void *)(a1 + 32) + 40LL),  0x12A05F200uLL,  0xFFFFFFFFFFFFFFFFLL,  0x1DCD6500uLL);
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(dispatch_source_s **)(v6 + 40);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_1000764A0;
    handler[3] = &unk_10023FF98;
    handler[4] = v6;
    dispatch_source_set_event_handler(v7, handler);
    dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 40LL));
  }

void sub_1000764A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0LL;

  dispatch_source_t v3 = (os_log_s *)qword_1002B6A00;
  if (os_log_type_enabled((os_log_t)qword_1002B6A00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Timeout fired for invalid route error; switching to local system route",
      v5,
      2u);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[MPAVRoutingController systemRoute](&OBJC_CLASS___MPAVRoutingController, "systemRoute"));
  +[MPAVRoutingController setActiveRoute:completion:]( &OBJC_CLASS___MPAVRoutingController,  "setActiveRoute:completion:",  v4,  &stru_1002427D0);
}

void sub_100076548(id a1, NSError *a2)
{
  id v2 = a2;
  if (v2)
  {
    dispatch_source_t v3 = (os_log_s *)qword_1002B6A00;
    if (os_log_type_enabled((os_log_t)qword_1002B6A00, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138543362;
      uint64_t v5 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Error setting active system route: %{public}@",  (uint8_t *)&v4,  0xCu);
    }
  }
}

void sub_10007664C(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 56LL) = 1;
  id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioRoute]);
  if ([v10 isDeviceRoute])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerResponse]);
    dispatch_source_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 playerPath]);
    unsigned int v4 = [v3 isSystemPodcastsPath];

    if (!v4) {
      return;
    }
    uint64_t v5 = *(void **)(a1 + 32);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 audioRoute]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 _createGlobalPlayerPathWithRoute:v6]);
    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requestResponseController]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 request]);
    [v9 setPlayerPath:v7];

    id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requestResponseController]);
    [v10 setNeedsReloadForSignificantRequestChange];
  }
}

void sub_1000767CC(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 56LL) = 0;
  id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioRoute]);
  if ([v10 isDeviceRoute])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerResponse]);
    dispatch_source_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 playerPath]);
    unsigned __int8 v4 = [v3 isSystemPodcastsPath];

    if ((v4 & 1) != 0) {
      return;
    }
    uint64_t v5 = *(void **)(a1 + 32);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 audioRoute]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 _createGlobalPlayerPathWithRoute:v6]);
    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requestResponseController]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 request]);
    [v9 setPlayerPath:v7];

    id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requestResponseController]);
    [v10 setNeedsReloadForSignificantRequestChange];
  }
}

void sub_10007696C(uint64_t a1)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _podcastsPlayerPathWithRoute:*(void *)(a1 + 40)]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](&OBJC_CLASS___MTPlayerController, "defaultInstance"));
  [v2 setPlayerPath:v7];

  dispatch_source_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _createGlobalPlayerPathWithRoute:*(void *)(a1 + 40)]);
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requestResponseController]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 request]);
  [v5 setPlayerPath:v3];

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requestResponseController]);
  [v6 setNeedsReloadForSignificantRequestChange];
}

void sub_100076D80(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = qword_1002B6A00;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_1002B6A00, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v11 = 138543618;
      uint64_t v12 = v6;
      __int16 v13 = 2114;
      id v14 = v3;
      id v7 = "Error performing %{public}@ request: %{public}@";
      __int16 v8 = (os_log_s *)v4;
      uint32_t v9 = 22;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v11, v9);
    }
  }

  else if (v5)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v11 = 138543362;
    uint64_t v12 = v10;
    id v7 = "Successfully completed player command %{public}@";
    __int16 v8 = (os_log_s *)v4;
    uint32_t v9 = 12;
    goto LABEL_6;
  }
}

void sub_100076FCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100076FE4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000770A4;
  v10[3] = &unk_1002427F8;
  uint64_t v15 = a3;
  uint64_t v6 = *(void **)(a1 + 32);
  void v10[4] = *(void *)(a1 + 40);
  id v11 = v5;
  id v12 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  id v13 = v7;
  uint64_t v14 = v8;
  id v9 = v5;
  objc_msgSend(v6, "tvm_enumerateItemsInSectionAtIndex:usingBlock:", a3, v10);
}

void sub_1000770A4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 72);
  id v6 = a2;
  id v9 = (id)objc_claimAutoreleasedReturnValue( +[NSIndexPath indexPathForItem:inSection:]( &OBJC_CLASS___NSIndexPath,  "indexPathForItem:inSection:",  a3,  v5));
  id v7 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "_mediaItemForMPCPlayerResponseItem:section:atIndexPath:",  v6,  *(void *)(a1 + 40)));

  if (v7)
  {
    [*(id *)(a1 + 48) addObject:v7];
    ++*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:"));
    [*(id *)(a1 + 56) setObject:v8 forKeyedSubscript:v9];
  }
}

void sub_1000773F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (uint64_t)[*(id *)(a1 + 32) type];
  if (v4 > 3)
  {
    if (v4 == 4)
    {
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playlist]);
      [v3 setPlaylist:v5];
      goto LABEL_10;
    }

    if (v4 == 13)
    {
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) radioStation]);
      [v3 setRadioStation:v5];
      goto LABEL_10;
    }
  }

  else
  {
    if (v4 == 2)
    {
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) album]);
      [v3 setAlbum:v5];
      goto LABEL_10;
    }

    if (v4 == 3)
    {
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) artist]);
      [v3 setArtist:v5];
LABEL_10:

      goto LABEL_11;
    }
  }

  id v6 = (os_log_s *)qword_1002B6A00;
  if (os_log_type_enabled((os_log_t)qword_1002B6A00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138543362;
    uint64_t v9 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Creating empty play event from generic object [%{public}@]",  (uint8_t *)&v8,  0xCu);
  }

LABEL_66:
        if (([v128 isEqual:v47] & 1) == 0 && v47)
        {
          int v122 = (os_log_s *)qword_1002B6A00;
          if (os_log_type_enabled((os_log_t)qword_1002B6A00, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)v149 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v122,  OS_LOG_TYPE_INFO,  "Player path changed; sending TVMusicPlayQueuePlayerPathChangedNotification",
              v149,
              2u);
          }

          uint64_t v123 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
          [v123 postNotificationName:@"TVMusicPlayQueuePlayerPathChangedNotification" object:self];
        }

        self->_isNewPlayQueue = 0;

        goto LABEL_72;
      }
    }

    else
    {
    }

    v87 = (void *)qword_1002B6A00;
    if (os_log_type_enabled((os_log_t)qword_1002B6A00, OS_LOG_TYPE_INFO))
    {
      id v88 = v87;
      uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue(-[MTTVMusicPlayQueue currentMediaItem](self, "currentMediaItem"));
      uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue(-[MTTVMusicPlayQueue currentPlayingItem](self, "currentPlayingItem"));
      v91 = v19;
      v92 = v47;
      uint64_t v93 = v20;
      uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue([v90 contentItemIdentifier]);
      *(_DWORD *)v149 = 138412546;
      *(void *)&v149[4] = v89;
      *(_WORD *)&v149[12] = 2112;
      *(void *)&v149[14] = v94;
      _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_INFO,  "   > Changed playing item: = %@, content item ID = %@",  v149,  0x16u);

      __int128 v20 = v93;
      v47 = v92;
      id v19 = v91;
    }

    v95 = (void *)objc_claimAutoreleasedReturnValue(-[MTTVMusicPlayQueue delegate](self, "delegate"));
    v96 = objc_opt_respondsToSelector(v95, "playQueue:didChangePlayingItem:");

    if ((v96 & 1) != 0)
    {
      id v97 = (void *)objc_claimAutoreleasedReturnValue(-[MTTVMusicPlayQueue delegate](self, "delegate"));
      id v98 = (void *)objc_claimAutoreleasedReturnValue(-[MTTVMusicPlayQueue currentMediaItem](self, "currentMediaItem"));
      [v97 playQueue:self didChangePlayingItem:v98];
    }

    goto LABEL_41;
  }

  id v33 = (os_log_s *)qword_1002B6A00;
  if (os_log_type_enabled((os_log_t)qword_1002B6A00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Got nil player response.", buf, 2u);
  }

LABEL_73:
}

    if (a5 >= 0) {
      v74 = a8;
    }
    else {
      v74 = a5;
    }
    swift_bridgeObjectRetain(a5);
    v75 = _CocoaArrayWrapper.endIndex.getter(v74);
    swift_bridgeObjectRelease(a5);
    if (v75) {
      goto LABEL_49;
    }
LABEL_77:
    swift_bridgeObjectRelease(a5);
LABEL_78:
    ((void (*)(uint64_t, uint64_t, uint64_t, int *))v22[7])(v36, 1LL, 1LL, v21);
    goto LABEL_79;
  }

  LOBYTE(v50) = 1;
LABEL_97:
  v91 = v115;
  swift_beginAccess(v115, v119, 1LL, 0LL);
  os_log_s *v91 = v50;
LABEL_98:
  swift_getObjectType(v20);
  uint64_t v29 = (uint64_t)sub_100133324((uint64_t)v20);
  swift_beginAccess(v117, v123, 33LL, 0LL);
  v92 = swift_bridgeObjectRetain(v29);
  sub_10012F23C(v92);
  uint64_t v93 = swift_endAccess(v123);
  id result = (id)_MTLogCategoryPlayback(v93, v94);
  if (!result)
  {
LABEL_123:
    __break(1u);
    return result;
  }

  double v69 = result;
  double v36 = static os_log_type_t.default.getter(result);
  v95 = sub_100126450((uint64_t *)&unk_1002B5E60);
  int v71 = swift_allocObject(v95, 112LL, 7LL);
  *(_OWORD *)(v71 + 16) = xmmword_1001C4150;
  v96 = [v20 id];
  id v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
  uint64_t v99 = v98;

  *(void *)(v71 + 56) = &type metadata for String;
  *(void *)(v71 + 64) = sub_100127C90();
  *(void *)(v71 + 32) = v97;
  *(void *)(v71 + 40) = v99;
  v100 = *(void *)((v29 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease(v29);
    *(void *)(v71 + 96) = &type metadata for Int;
    *(void *)(v71 + 104) = &protocol witness table for Int;
    *(void *)(v71 + 72) = v100;
    os_log(_:dso:log:type:_:)( "NetworkMediaManifest: Performed fetch for Podcast %@, added %d episodes",  71LL,  2LL,  &_mh_execute_header,  v69,  v36,  v71);
    swift_unknownObjectRelease(v20);
LABEL_102:

    swift_bridgeObjectRelease(v71);
LABEL_103:
    int v71 = a11;
    swift_beginAccess(a12 + 16, v123, 0LL, 0LL);
    uint64_t v101 = *(void *)(*(void *)(a12 + 16) + 16LL);
    double v69 = (void *)(a11 + v101);
    if (!__OFADD__(a11, v101)) {
      break;
    }
    __break(1u);
LABEL_108:
    if (v29 < 0) {
      v106 = v29;
    }
    else {
      v106 = v29 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v29);
    v100 = _CocoaArrayWrapper.endIndex.getter(v106);
    swift_bridgeObjectRelease(v29);
  }

  uint64_t v102 = v117;
  swift_beginAccess(v117, v122, 0LL, 0LL);
  v103 = *v102;
  v104 = v115;
  swift_beginAccess(v115, v121, 0LL, 0LL);
  v105 = *v104;
  swift_bridgeObjectRetain(v103);
  sub_10012B760(v69, a13, a14, a15, a16, a17, v103, v105, v118, v116);
  return (id)swift_bridgeObjectRelease(v103);
}

void sub_100078534( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100078564(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v12 = a2;
  id v6 = *(void **)(a1 + 32);
  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "indexPathForGlobalIndex:"));
  if (v7)
  {
    int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) itemAtIndexPath:v7]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v12 contentItemIdentifier]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 contentItemIdentifier]);
    unsigned __int8 v11 = [v9 isEqualToString:v10];

    if ((v11 & 1) == 0)
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
      *a4 = 1;
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
    *a4 = 1;
  }
}

id sub_100078784(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 40);
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 _createGlobalPlayerPathWithRoute:v4]);
  [*(id *)(a1 + 32) setPlayerPath:v5];

  [*(id *)(a1 + 40) _updatePlayerPathWithRoute:v4];
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestResponseController]);
  [v7 setRequest:v6];

  return _[*(id *)(a1 + 40) startUpdating];
}

void sub_100078864(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[MPPlaybackUserDefaults standardUserDefaults]( &OBJC_CLASS___MPPlaybackUserDefaults,  "standardUserDefaults"));
  objc_msgSend(v1, "_setRepeatType:", objc_msgSend(v2, "musicRepeatType"));
}

LABEL_28:
    v49 = 0;
    goto LABEL_73;
  }

  uint64_t v5 = -[MTFeedIngester _localPodcastExists](self, "_localPodcastExists");
  if (!v5)
  {
    updated = _MTLogCategoryFeedUpdateIngester(v5);
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(updated);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v4 podcastStoreId]);
      *(_DWORD *)buf = 138412290;
      v128 = v46;
      v47 = "%@ - could not ingest feed podcast because ingester local podcast does not exist";
      goto LABEL_27;
    }

    goto LABEL_28;
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 podcastStoreId]);
  uint64_t v7 = [v6 longLongValue];

  int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 updatedFeedURL]);
  if (+[MTDBUtil isSupportedUrlString:](&OBJC_CLASS___MTDBUtil, "isSupportedUrlString:", v8))
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcast currentFeedURL](self->_localPodcast, "currentFeedURL"));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 absoluteString]);
    unsigned __int8 v11 = -[os_log_s isEqualToString:](v8, "isEqualToString:", v10);

    if ((v11 & 1) == 0)
    {
      uint64_t v13 = _MTLogCategoryFeedUpdateIngester(v12);
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcast currentFeedURL](self->_localPodcast, "currentFeedURL"));
        int v16 = (void *)objc_claimAutoreleasedReturnValue([v15 absoluteString]);
        *(_DWORD *)buf = 134218498;
        v128 = v7;
        __int128 v129 = 2112;
        __int128 v130 = v8;
        __int128 v131 = 2112;
        __int128 v132 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%lld Found different updatedFeedURL %@ from %@",  buf,  0x20u);
      }

      -[MTPodcast setUpdatedFeedURL:](self->_localPodcast, "setUpdatedFeedURL:", v8);
      self->_didUpdateFeedUrl = 1;
    }
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v4 resolvedFeedURL]);
  if ([v17 length])
  {
    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcast currentFeedURL](self->_localPodcast, "currentFeedURL"));
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 absoluteString]);
    __int128 v20 = [v17 isEqualToString:v19];

    if ((v20 & 1) == 0)
    {
      id v22 = _MTLogCategoryFeedUpdateIngester(v21);
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcast currentFeedURL](self->_localPodcast, "currentFeedURL"));
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 absoluteString]);
        *(_DWORD *)buf = 134218498;
        v128 = v7;
        __int128 v129 = 2112;
        __int128 v130 = (os_log_s *)v17;
        __int128 v131 = 2112;
        __int128 v132 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "%lld Found different feedURL %@ from %@",  buf,  0x20u);
      }

      -[MTPodcast setUpdatedFeedURL:](self->_localPodcast, "setUpdatedFeedURL:", v17);
      self->_didUpdateFeedUrl = 1;
    }
  }

  localPodcast = self->_localPodcast;
  id v27 = (void *)objc_claimAutoreleasedReturnValue([v4 title]);
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 stringByStrippingHTML]);
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 stringByRemovingNewlineCharacters]);
  -[MTPodcast setTitle:](localPodcast, "setTitle:", v29);

  uint64_t v30 = self->_localPodcast;
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v4 author]);
  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v31 stringByStrippingHTML]);
  -[MTPodcast setAuthor:](v30, "setAuthor:", v32);

  id v33 = self->_localPodcast;
  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v4 provider]);
  double v35 = (void *)objc_claimAutoreleasedReturnValue([v34 stringByStrippingHTML]);
  -[MTPodcast setProvider:](v33, "setProvider:", v35);

  -[MTPodcast setIsExplicit:](self->_localPodcast, "setIsExplicit:", [v4 isExplicit]);
  double v36 = self->_localPodcast;
  id v37 = (void *)objc_claimAutoreleasedReturnValue([v4 feedDescription]);
  -[MTPodcast setItemDescription:](v36, "setItemDescription:", v37);

  double v38 = (void *)objc_claimAutoreleasedReturnValue([v4 showType]);
  CGRect v39 = +[MTPodcast showTypeFromString:](&OBJC_CLASS___MTPodcast, "showTypeFromString:", v38);
  uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcast showTypeInFeed](self->_localPodcast, "showTypeInFeed"));
  id v41 = +[MTPodcast showTypeFromString:](&OBJC_CLASS___MTPodcast, "showTypeFromString:", v40);

  uint64_t v43 = v39 == (id)2 && v41 != (id)2;
  __int128 v44 = v39 == (id)1 && -[MTPodcast showTypeSetting](self->_localPodcast, "showTypeSetting") == (id)2;
  __int16 v50 = -[MTPodcast subscribed](self->_localPodcast, "subscribed");
  -[MTPodcast setShowTypeInFeed:](self->_localPodcast, "setShowTypeInFeed:", v38);
  if (((v50 ^ 1 | v43) & 1) != 0 || v44) {
    -[MTPodcast setShowTypeSetting:](self->_localPodcast, "setShowTypeSetting:", v39);
  }
  id v51 = self->_localPodcast;
  int v52 = (void *)objc_claimAutoreleasedReturnValue([v4 category]);
  -[MTPodcast setCategory:](v51, "setCategory:", v52);

  id v53 = self->_localPodcast;
  v54 = (void *)objc_claimAutoreleasedReturnValue([v4 webpageURL]);
  -[MTPodcast setWebpageURL:](v53, "setWebpageURL:", v54);

  uint64_t v55 = self->_localPodcast;
  uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v4 shareURL]);
  -[MTPodcast setStoreCleanURL:](v55, "setStoreCleanURL:", v56);

  v57 = self->_localPodcast;
  v58 = (void *)objc_claimAutoreleasedReturnValue([v4 showSpecificUpsellCopy]);
  -[MTPodcast setShowSpecificUpsellCopy:](v57, "setShowSpecificUpsellCopy:", v58);

  -[MTPodcast setOfferTypes:]( self->_localPodcast,  "setOfferTypes:",  [(id)objc_opt_class(self) _offerTypesAsFlagBits:v4]);
  float v59 = objc_claimAutoreleasedReturnValue([v4 displayType]);
  if (v59)
  {
    id v60 = (void *)v59;
    id v61 = (void *)objc_claimAutoreleasedReturnValue([v4 displayType]);
    uint64_t v62 = [v61 isNotEmpty];

    if (v62)
    {
      v63 = (void *)objc_claimAutoreleasedReturnValue([v4 displayType]);
      -[MTPodcast setDisplayType:](self->_localPodcast, "setDisplayType:", v63);
    }
  }

  v64 = (void *)objc_claimAutoreleasedReturnValue([v4 channelItem]);

  if (v64)
  {
    v65 = (void *)objc_claimAutoreleasedReturnValue([v4 channelItem]);
    float v66 = (void *)objc_claimAutoreleasedReturnValue( +[MTChannel createOrFindChannelFromFeedChannelItem:personalizedRequest:context:]( &OBJC_CLASS___MTChannel,  "createOrFindChannelFromFeedChannelItem:personalizedRequest:context:",  v65,  0LL,  self->_ctx));

    -[MTPodcast setChannel:](self->_localPodcast, "setChannel:", v66);
    double v67 = (void *)objc_claimAutoreleasedReturnValue( -[NSManagedObjectContext unsafeInterestForAdamID:]( self->_ctx,  "unsafeInterestForAdamID:",  [v66 storeId]));
    if (v67)
    {
      [v66 setInterest:v67];
      [v67 setChannel:v66];
    }
  }

  else
  {
    -[MTPodcast setChannel:](self->_localPodcast, "setChannel:", 0LL);
  }

  -[MTFeedIngester _setPodcastArtwork:](self, "_setPodcastArtwork:", v4);
  double v68 = objc_claimAutoreleasedReturnValue([v4 categories]);
  if (v68
    && (double v69 = (void *)v68,
        double v70 = (void *)objc_claimAutoreleasedReturnValue([v4 categories]),
        int v71 = [v70 count],
        v70,
        v69,
        v71))
  {
    unint64_t v114 = v38;
    v115 = v17;
    int v116 = v8;
    double v72 = _MTLogCategoryFeedUpdateIngester(v68);
    uint64_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
    {
      v74 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcast uuid](self->_localPodcast, "uuid"));
      v75 = (void *)objc_claimAutoreleasedReturnValue([v4 categories]);
      v76 = (os_log_s *)[v75 count];
      *(_DWORD *)buf = 138543618;
      v128 = v74;
      __int128 v129 = 2048;
      __int128 v130 = v76;
      _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "%{public}@ - Ingesting %lu categories.",  buf,  0x16u);
    }

    v77 = objc_opt_new(&OBJC_CLASS___NSMutableOrderedSet);
    v121 = 0u;
    int v122 = 0u;
    uint64_t v123 = 0u;
    id v124 = 0u;
    id v113 = v4;
    v78 = (void *)objc_claimAutoreleasedReturnValue([v4 categories]);
    v79 = [v78 countByEnumeratingWithState:&v121 objects:v126 count:16];
    if (v79)
    {
      id v80 = v79;
      id v81 = *(void *)v122;
      do
      {
        for (i = 0LL; i != v80; i = (char *)i + 1)
        {
          if (*(void *)v122 != v81) {
            objc_enumerationMutation(v78);
          }
          v83 = (void *)objc_claimAutoreleasedReturnValue( -[MTCategoryIngesterProtocol unsafeIngestFeedCategory:ctx:]( self->_categoryIngester,  "unsafeIngestFeedCategory:ctx:",  *(void *)(*((void *)&v121 + 1) + 8LL * (void)i),  self->_ctx));
          if (v83)
          {
            -[NSMutableOrderedSet addObject:](v77, "addObject:", v83);
            id v84 = (void *)objc_claimAutoreleasedReturnValue([v83 podcasts]);
            unint64_t v85 = (void *)objc_claimAutoreleasedReturnValue([v84 setByAddingObject:self->_localPodcast]);
            [v83 setPodcasts:v85];

            v87 = _MTLogCategoryFeedUpdateIngester(v86);
            id v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);
            if (!os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_56;
            }
            uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcast uuid](self->_localPodcast, "uuid"));
            uint64_t v90 = (os_log_s *)[v83 adamID];
            *(_DWORD *)buf = 138543618;
            v128 = v89;
            __int128 v129 = 2048;
            __int128 v130 = v90;
            v91 = v88;
            v92 = "%{public}@ - Related category to show. Category ID: %llu";
          }

          else
          {
            uint64_t v93 = _MTLogCategoryFeedUpdateIngester(0LL);
            id v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
            if (!os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_56;
            }
            uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcast uuid](self->_localPodcast, "uuid"));
            uint64_t v94 = (os_log_s *)[0 adamID];
            *(_DWORD *)buf = 138543618;
            v128 = v89;
            __int128 v129 = 2048;
            __int128 v130 = v94;
            v91 = v88;
            v92 = "%{public}@ - Could not ingest category for show. Category ID: %llu";
          }

          _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, v92, buf, 0x16u);

LABEL_56:
        }

        id v80 = [v78 countByEnumeratingWithState:&v121 objects:v126 count:16];
      }

      while (v80);
    }

    -[MTPodcast setCategories:](self->_localPodcast, "setCategories:", v77);
    v95 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableOrderedSet firstObject](v77, "firstObject"));
    -[MTPodcast setPrimaryCategory:](self->_localPodcast, "setPrimaryCategory:", v95);

    id v4 = v113;
  }

  else
  {
    v96 = _MTLogCategoryFeedUpdateIngester(v68);
    id v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v96);
    if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
    {
      id v98 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcast uuid](self->_localPodcast, "uuid"));
      *(_DWORD *)buf = 138543362;
      v128 = v98;
      _os_log_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_DEFAULT,  "%{public}@ - Show has no categories. Disassociating categories if needed.",  buf,  0xCu);
    }

    uint64_t v99 = objc_opt_new(&OBJC_CLASS___NSOrderedSet);
    -[MTPodcast setCategories:](self->_localPodcast, "setCategories:", v99);

    -[MTPodcast setPrimaryCategory:](self->_localPodcast, "setPrimaryCategory:", 0LL);
    v77 = (NSMutableOrderedSet *)objc_claimAutoreleasedReturnValue( -[NSManagedObjectContext unsafeCategoriesWithRelationshipToPodcastAdamID:]( self->_ctx,  "unsafeCategoriesWithRelationshipToPodcastAdamID:",  -[MTPodcast storeCollectionId](self->_localPodcast, "storeCollectionId")));
    v117 = 0u;
    v118 = 0u;
    v119 = 0u;
    uint64_t v120 = 0u;
    v100 = -[NSMutableOrderedSet countByEnumeratingWithState:objects:count:]( v77,  "countByEnumeratingWithState:objects:count:",  &v117,  v125,  16LL);
    if (!v100) {
      goto LABEL_70;
    }
    uint64_t v101 = v100;
    unint64_t v114 = v38;
    v115 = v17;
    int v116 = v8;
    uint64_t v102 = v4;
    v103 = *(void *)v118;
    do
    {
      for (j = 0LL; j != v101; j = (char *)j + 1)
      {
        if (*(void *)v118 != v103) {
          objc_enumerationMutation(v77);
        }
        v105 = *(void **)(*((void *)&v117 + 1) + 8LL * (void)j);
        v106 = (void *)objc_claimAutoreleasedReturnValue([v105 podcasts]);
        v107 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithSet:](&OBJC_CLASS___NSMutableSet, "setWithSet:", v106));

        [v107 removeObject:self->_localPodcast];
        [v105 setPodcasts:v107];
      }

      uint64_t v101 = -[NSMutableOrderedSet countByEnumeratingWithState:objects:count:]( v77,  "countByEnumeratingWithState:objects:count:",  &v117,  v125,  16LL);
    }

    while (v101);
    id v4 = v102;
  }

  uint64_t v17 = v115;
  int v8 = v116;
  double v38 = v114;
LABEL_70:

  id v109 = _MTLogCategoryFeedUpdateIngester(v108);
  int v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
  if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v111 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcast uuid](self->_localPodcast, "uuid"));
    *(_DWORD *)buf = 138543362;
    v128 = v111;
    _os_log_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_DEFAULT,  "%{public}@ - updated podcast from feed",  buf,  0xCu);
  }

  v49 = 1;
LABEL_73:

  return v49;
}

          if (+[PFClientUtil isRunningOnHomepod]( &OBJC_CLASS___PFClientUtil,  "isRunningOnHomepod",  *(void *)v50))
          {
            id v33 = (void *)objc_claimAutoreleasedReturnValue(+[MTLibrary sharedInstance](&OBJC_CLASS___MTLibrary, "sharedInstance"));
            uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate truePredicate](&OBJC_CLASS___NSPredicate, "truePredicate"));
            [v33 deleteEpisodes:v34];

            double v36 = _MTLogCategoryDatabase(v35);
            id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__int16 v50 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "[Migration] (Data) (HomePod) Deleted episodes.",  v50,  2u);
            }

            double v38 = _MTLogCategoryDatabase( +[MTBaseFeedManager purgeSubscriptionMetadata]( &OBJC_CLASS___MTBaseFeedManager,  "purgeSubscriptionMetadata"));
            CGRect v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__int16 v50 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "[Migration] (Data) (HomePod) Purged subscription metadata.",  v50,  2u);
            }
          }

          goto LABEL_34;
        }
      }

      __int128 v45 = [obj countByEnumeratingWithState:&v52 objects:v64 count:16];
    }

    while (v45);
  }
}

        v47 = v34;
LABEL_30:
        uint64_t v48 = v34;
        v57(v47);
        sub_10013356C(v38, v41);

        return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v55, v14);
      }
    }

    else
    {
      uint64_t v62 = 0u;
      v63 = 0u;
      double v38 = v25;
      id v41 = v53;
    }

    sub_10012A4A0((uint64_t)&v62, &qword_1002B5408);
    goto LABEL_27;
  }

  swift_bridgeObjectRelease(a2);
  return ((uint64_t (*)(void))a4)(0LL);
}

          uint64_t v7 = 3LL;
        }

        else
        {
          uint64_t v7 = 2LL;
          if (a4 != 1)
          {
            uint64_t v13 = sub_100126450((uint64_t *)&unk_1002B5C38);
            uint64_t v14 = swift_allocObject(v13, 64LL, 7LL);
            *(_OWORD *)(v14 + 16) = xmmword_1001C4150;
            *(void *)(v14 + 32) = 1LL;
            *(_BYTE *)(v14 + 40) = 2;
            *(void *)(v14 + 4_Block_object_dispose(va, 8) = a1;
            *(_BYTE *)(v14 + 56) = 1;
          }
        }
      }

      else
      {
LABEL_6:
        uint64_t v7 = 1LL;
        if (a4 != 1)
        {
          int v8 = sub_100126450((uint64_t *)&unk_1002B5C38);
          uint64_t v9 = swift_allocObject(v8, 48LL, 7LL);
          *(_OWORD *)(v9 + 16) = xmmword_1001C3C20;
          *(void *)(v9 + 32) = a1;
          *(_BYTE *)(v9 + 40) = 1;
        }
      }

      break;
    case 4:
      switch(a1)
      {
        case 1LL:
        case 2LL:
          if ((a3 & 1) == 0) {
            goto LABEL_19;
          }
          if ((a3 & 0x100) != 0) {
            goto LABEL_28;
          }
          uint64_t v7 = 2LL;
          break;
        case 5LL:
        case 6LL:
          if ((a3 & 0x100) == 0) {
            goto LABEL_19;
          }
          return 1LL;
        default:
          goto LABEL_19;
      }

      break;
    default:
LABEL_19:
      uint64_t v7 = 1LL;
      break;
  }

  return v7;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void sub_10007D340(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v2 = (void *)qword_1002B6A08;
  qword_1002B6A08 = (uint64_t)v1;
}

void sub_10007D454(_Unwind_Exception *a1)
{
}

void sub_10007D5DC(_Unwind_Exception *a1)
{
}

void sub_10007D5F8(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 createQueryObserver]);
  [v2 setQueryObserver:v3];

  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 queryObserver]);
  [v4 startObserving];

  [v2 updatePredicateDuration];
  double v6 = v5;
  if (fabs(v5) > 2.22044605e-16)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    int v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained workQueue]);
    dispatch_source_t v9 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, v8);
    [v2 setTimer:v9];

    dispatch_time_t v10 = dispatch_walltime(0LL, 0LL);
    unsigned __int8 v11 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([v2 timer]);
    dispatch_source_set_timer(v11, v10, (unint64_t)(v6 * 1000000000.0), 0LL);

    id v12 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([v2 timer]);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_10007D8AC;
    handler[3] = &unk_100240290;
    objc_copyWeak(&v26, (id *)(a1 + 40));
    dispatch_source_set_event_handler(v12, handler);

    uint64_t v13 = (dispatch_object_s *)objc_claimAutoreleasedReturnValue([v2 timer]);
    dispatch_resume(v13);

    objc_destroyWeak(&v26);
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v2 defaultPropertiesThatAffectPredicate]);
  if ([v14 count])
  {
    uint64_t v15 = objc_alloc(&OBJC_CLASS___MTDefaultsChangeNotifier);
    int v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSUserDefaults _applePodcastsFoundationSettingsUserDefaults]( &OBJC_CLASS___NSUserDefaults,  "_applePodcastsFoundationSettingsUserDefaults"));
    uint64_t v17 = -[MTDefaultsChangeNotifier initWithProperties:defaults:](v15, "initWithProperties:defaults:", v14, v16);
    [v2 setDefaultsNotifier:v17];

    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v2 defaultsNotifier]);
    __int128 v20 = _NSConcreteStackBlock;
    uint64_t v21 = 3221225472LL;
    id v22 = sub_10007D8D8;
    uint64_t v23 = &unk_1002428E0;
    objc_copyWeak(&v24, (id *)(a1 + 40));
    [v18 addCallback:&v20];

    id v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "defaultsNotifier", v20, v21, v22, v23));
    [v19 start];

    objc_destroyWeak(&v24);
  }
}

void sub_10007D890(_Unwind_Exception *a1)
{
}

void sub_10007D8AC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updatePredicate];
}

void sub_10007D8D8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  dispatch_time_t v10 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10007D9B4;
  v12[3] = &unk_100240290;
  objc_copyWeak(&v13, v10);
  [WeakRetained enqueueWorkBlock:v12];

  objc_destroyWeak(&v13);
}

void sub_10007D9A0(_Unwind_Exception *a1)
{
}

void sub_10007D9B4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updatePredicate];
}

void sub_10007DBD8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10007DBF4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  dispatch_time_t v10 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_10007DD0C;
  v15[3] = &unk_100242930;
  objc_copyWeak(&v19, v10);
  id v12 = v7;
  id v16 = v12;
  id v13 = v8;
  id v17 = v13;
  id v14 = v9;
  id v18 = v14;
  [WeakRetained enqueueWorkBlock:v15];

  objc_destroyWeak(&v19);
}

void sub_10007DCF8(_Unwind_Exception *a1)
{
}

void sub_10007DD0C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained resultsChangedWithDeletedIds:*(void *)(a1 + 32) insertIds:*(void *)(a1 + 40) updatedIds:*(void *)(a1 + 48)];
}

void sub_10007E0BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10007E0D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    id v4 = [WeakRetained isStopping];
    if (!(_DWORD)v4)
    {
      (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
      goto LABEL_10;
    }

    uint64_t v5 = _MTLogCategoryDefault(v4);
    double v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v10 = 0;
      id v7 = "Attempting to execute work after the processor has stopped.";
      id v8 = (uint8_t *)&v10;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
    }
  }

  else
  {
    uint64_t v9 = _MTLogCategoryDefault(0LL);
    double v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      id v7 = "Attempting to execute work after the processor has been deallocated.";
      id v8 = buf;
      goto LABEL_7;
    }
  }

LABEL_10:
}

void sub_10007FBF0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if ([v5 isNSDictionary])
  {
    char v7 = 0;
    double v6 = (void *)objc_claimAutoreleasedReturnValue( +[MTStorePlatformUtil storeMediaDictionaryFromStorePlatformDictionary:artworkSize:restricted:]( &OBJC_CLASS___MTStorePlatformUtil,  "storeMediaDictionaryFromStorePlatformDictionary:artworkSize:restricted:",  v5,  &v7,  kMTPreferredArtworkSize));
    if (!a3 && v7) {
      [*(id *)(a1 + 32) setFirstItemIsRestricted:1];
    }
    if (v6) {
      [*(id *)(a1 + 40) addObject:v6];
    }
  }
}

void sub_1000800C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000800DC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    unsigned __int8 v3 = [WeakRetained isCancelled];
    id v2 = v4;
    if ((v3 & 1) == 0)
    {
      [v4 setIsSleepingOnStartDelay:0];
      [v4 main];
      id v2 = v4;
    }
  }
}

uint64_t sub_100080C78(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 40));
  }
  return result;
}

uint64_t sub_100080C94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100080CA4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 40));
  }
  return result;
}

LABEL_55:
      __int128 v45 = v17;
      uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v37 localizedStringForKey:v49 value:&stru_100248948 table:0]);
      v47 = +[NSString localizedStringWithFormat:](&OBJC_CLASS___NSString, "localizedStringWithFormat:", v46, 0LL);
LABEL_56:
      __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(v47);

      id v17 = v45;
    }

    else
    {
      id v27 = isTouch();
      id v22 = v56;
      uint64_t v28 = [v56 isHomePodRoute];
      if (v27)
      {
        if (v28)
        {
          uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
          uint64_t v30 = v29;
          uint64_t v31 = @"SHARED_QUEUE_UNSUPPORTED_TITLE_HOMEPOD_IPOD";
        }

        else
        {
          double v36 = [v56 isAppleTVRoute];
          uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
          uint64_t v30 = v29;
          if (v36) {
            uint64_t v31 = @"SHARED_QUEUE_UNSUPPORTED_TITLE_APPLETV_IPOD";
          }
          else {
            uint64_t v31 = @"SHARED_QUEUE_UNSUPPORTED_TITLE_DEVICE_IPOD";
          }
        }

        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v29 localizedStringForKey:v31 value:&stru_100248948 table:0]);
        uint64_t v23 = v55;

        switch(a5)
        {
          case 0uLL:
            goto LABEL_59;
          case 1uLL:
            id v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
            if (v55)
            {
              double v38 = @"SHARED_QUEUE_UNSUPPORTED_MESSAGE_NOW_PLAYING_ITEM_IPOD";
              goto LABEL_33;
            }

            v49 = @"SHARED_QUEUE_UNSUPPORTED_MESSAGE_NOW_PLAYING_ITEM_IPOD_NO_PROVIDER";
            goto LABEL_55;
          case 2uLL:
            uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
            id v37 = v40;
            id v41 = @"SHARED_QUEUE_UNSUPPORTED_MESSAGE_SINGLE_QUEUE_ITEM_IPOD";
            goto LABEL_45;
          case 3uLL:
            uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
            id v37 = v40;
            id v41 = @"SHARED_QUEUE_UNSUPPORTED_MESSAGE_MULTIPLE_QUEUE_ITEMS_IPOD";
            goto LABEL_45;
          case 4uLL:
            if ([v56 isHomePodRoute])
            {
              uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
              id v37 = v40;
              id v41 = @"SHARED_QUEUE_UNSUPPORTED_MESSAGE_NOT_FOUND_HOMEPOD_IPOD";
              goto LABEL_45;
            }

            id v51 = [v56 isAppleTVRoute];
            id v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
            if (v51) {
              id v41 = @"SHARED_QUEUE_UNSUPPORTED_MESSAGE_NOT_FOUND_APPLETV_IPOD";
            }
            else {
              id v41 = @"SHARED_QUEUE_UNSUPPORTED_MESSAGE_NOT_FOUND_DEVICE_IPOD";
            }
            break;
          default:
            goto LABEL_34;
        }
      }

      else
      {
        if (v28)
        {
          id v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
          uint64_t v34 = v33;
          double v35 = @"SHARED_QUEUE_UNSUPPORTED_TITLE_HOMEPOD_IPHONE";
        }

        else
        {
          CGRect v39 = [v56 isAppleTVRoute];
          id v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
          uint64_t v34 = v33;
          if (v39) {
            double v35 = @"SHARED_QUEUE_UNSUPPORTED_TITLE_APPLETV_IPHONE";
          }
          else {
            double v35 = @"SHARED_QUEUE_UNSUPPORTED_TITLE_DEVICE_IPHONE";
          }
        }

        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v33 localizedStringForKey:v35 value:&stru_100248948 table:0]);
        uint64_t v23 = v55;

        switch(a5)
        {
          case 0uLL:
            goto LABEL_59;
          case 1uLL:
            id v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
            if (!v55)
            {
              v49 = @"SHARED_QUEUE_UNSUPPORTED_MESSAGE_NOW_PLAYING_ITEM_IPHONE_NO_PROVIDER";
              goto LABEL_55;
            }

            double v38 = @"SHARED_QUEUE_UNSUPPORTED_MESSAGE_NOW_PLAYING_ITEM_IPHONE";
LABEL_33:
            __int128 v45 = v17;
            uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v37 localizedStringForKey:v38 value:&stru_100248948 table:0]);
            v47 = +[NSString localizedStringWithFormat:](&OBJC_CLASS___NSString, "localizedStringWithFormat:", v46, v23);
            goto LABEL_56;
          case 2uLL:
            uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
            id v37 = v40;
            id v41 = @"SHARED_QUEUE_UNSUPPORTED_MESSAGE_SINGLE_QUEUE_ITEM_IPHONE";
            goto LABEL_45;
          case 3uLL:
            uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
            id v37 = v40;
            id v41 = @"SHARED_QUEUE_UNSUPPORTED_MESSAGE_MULTIPLE_QUEUE_ITEMS_IPHONE";
            goto LABEL_45;
          case 4uLL:
            if ([v56 isHomePodRoute])
            {
              uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
              id v37 = v40;
              id v41 = @"SHARED_QUEUE_UNSUPPORTED_MESSAGE_NOT_FOUND_HOMEPOD_IPHONE";
              goto LABEL_45;
            }

            int v52 = [v56 isAppleTVRoute];
            id v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
            if (v52) {
              id v41 = @"SHARED_QUEUE_UNSUPPORTED_MESSAGE_NOT_FOUND_APPLETV_IPHONE";
            }
            else {
              id v41 = @"SHARED_QUEUE_UNSUPPORTED_MESSAGE_NOT_FOUND_DEVICE_IPHONE";
            }
            break;
          default:
LABEL_34:
            __int128 v20 = 0LL;
            goto LABEL_58;
        }
      }

      uint64_t v40 = v37;
LABEL_45:
      __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v40 localizedStringForKey:v41 value:&stru_100248948 table:0]);
    }
  }

LABEL_58:
  [v17 setTitle:v21];
  [v17 setMessage:v20];
  id v53 = (void *)objc_claimAutoreleasedReturnValue(+[UIViewController mt_rootViewController](&OBJC_CLASS___UIViewController, "mt_rootViewController"));
  [v53 presentViewController:v17 animated:1 completion:0];

LABEL_59:
}

uint64_t sub_10008153C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10008154C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

NSURLQueryItem *sub_1000816D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc(&OBJC_CLASS___NSURLQueryItem);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v3]);
  double v6 = -[NSURLQueryItem initWithName:value:](v4, "initWithName:value:", v3, v5);

  return v6;
}

NSURLQueryItem *sub_1000818E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc(&OBJC_CLASS___NSURLQueryItem);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v3]);
  double v6 = -[NSURLQueryItem initWithName:value:](v4, "initWithName:value:", v3, v5);

  return v6;
}

void sub_1000819F0(id a1)
{
  v3[0] = @"playPodcast";
  v3[1] = @"playPodcasts";
  v3[2] = @"playStation";
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v3, 3LL));
  id v2 = (void *)qword_1002B6A18;
  qword_1002B6A18 = v1;
}

void sub_1000820F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

uint64_t sub_10008210C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10008211C(uint64_t a1)
{
}

void sub_100082124(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) episodeForUuid:*(void *)(a1 + 40)]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v6 podcast]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 uuid]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1000829EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100082A1C(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[6] + 8LL);
  id obj = *(id *)(v4 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 executeFetchRequest:v3 error:&obj]);
  objc_storeStrong((id *)(v4 + 40), obj);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 firstObject]);
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v6 uuid]);
  uint64_t v8 = *(void *)(a1[7] + 8LL);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

LABEL_45:
  _Block_object_dispose(&v73, 8);
}

    uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_46;
  }

  uint64_t v9 = v7;
LABEL_4:
}

void sub_100083970( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51)
{
}

void sub_1000839F8(uint64_t a1, void *a2, _BYTE *a3)
{
  id v9 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v9 instanceIdentifier]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 UUIDString]);
  unsigned int v8 = [v7 isEqual:*(void *)(a1 + 32)];

  if (v8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
    *a3 = 1;
  }
}

void sub_100083A8C(uint64_t a1, void *a2)
{
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id obj = a2;
  uint64_t v20 = a1;
  id v23 = [obj countByEnumeratingWithState:&v24 objects:v34 count:16];
  char v3 = 0;
  if (v23)
  {
    uint64_t v22 = *(void *)v25;
    do
    {
      for (i = 0LL; i != v23; i = (char *)i + 1)
      {
        if (*(void *)v25 != v22) {
          objc_enumerationMutation(obj);
        }
        id v5 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)i);
        unsigned __int8 v6 = [v5 isExplicit];
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%lld",  [v5 episodeStoreId]));
        unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v7]);
        if (v8)
        {
          id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v8));
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "pf_queryAsDictionary"));
          unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:@"contentItemId"]);
          if ([v11 length])
          {
            uint64_t v12 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", v11);
            [v5 setInstanceIdentifier:v12];

            a1 = v20;
          }

          [*(id *)(a1 + 40) setObject:v5 forKey:v8];
        }

        v3 |= v6;
      }

      id v23 = [obj countByEnumeratingWithState:&v24 objects:v34 count:16];
    }

    while (v23);
  }

  if (*(void *)(a1 + 64))
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) objectsForKeys:*(void *)(a1 + 48) notFoundMarker:*(void *)(a1 + 56)]);
    id v14 = [v13 mutableCopy];

    uint64_t v15 = _MTLogCategoryMediaRemote([v14 removeObject:*(void *)(a1 + 56)]);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      id v17 = [v14 count];
      id v18 = [*(id *)(v20 + 48) count];
      id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v20 + 40) description]);
      *(_DWORD *)buf = 134218498;
      id v29 = v17;
      __int16 v30 = 2048;
      id v31 = v18;
      __int16 v32 = 2112;
      id v33 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Fetched %lu player items for %lu identifiers. %@",  buf,  0x20u);
    }

    if ((v3 & 1) != 0) {
      +[PFRestrictionsController isExplicitContentAllowed]( &OBJC_CLASS___PFRestrictionsController,  "isExplicitContentAllowed");
    }
    (*(void (**)(void))(*(void *)(v20 + 64) + 16LL))();
  }
}

void sub_1000841D4(id a1)
{
  v3[0] = @"playPodcasts";
  v3[1] = @"playPodcast";
  v4[0] = &off_100254968;
  v4[1] = &off_100254980;
  v3[2] = @"playStation";
  v4[2] = &off_100254998;
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  3LL));
  id v2 = (void *)qword_1002B6A30;
  qword_1002B6A30 = v1;
}

void sub_100084ED8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_100084F0C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  char v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained podcastUuid]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 podcastForUuid:v3]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v4 != 0LL;
}

void sub_1000850CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_100085100(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  char v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained episodeUuid]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 episodeForUuid:v3]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v4 != 0LL;
}

void sub_1000852D4(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_1002B6A38;
  qword_1002B6A38 = (uint64_t)v1;
}

id sub_1000857C4(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  char v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)]);

  objc_autoreleasePoolPop(v2);
  return [*(id *)(a1 + 32) saveInCurrentBlock];
}

void sub_100085FA4(uint64_t a1)
{
  if (*(uint64_t *)(a1 + 56) >= 1)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForPodcastStoreId:](&OBJC_CLASS___MTPodcast, "predicateForPodcastStoreId:"));
    char v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectsInEntity:kMTPodcastEntityName predicate:v2 sortDescriptors:0]);
    uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 firstObject]);
    if (v4)
    {
      id v13 = (id)v4;
      if (*(uint64_t *)(a1 + 64) <= 0)
      {
        uint64_t v6 = *(void *)(a1 + 40);
        if (!v6)
        {
          BOOL v10 = 0LL;
          id v9 = 0LL;
          goto LABEL_12;
        }

        uint64_t v5 = objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"%K = %@",  kEpisodeGuid,  v6));
      }

      else
      {
        uint64_t v5 = objc_claimAutoreleasedReturnValue( +[MTEpisode predicateForEpisodeStoreTrackId:]( &OBJC_CLASS___MTEpisode,  "predicateForEpisodeStoreTrackId:"));
      }

      uint64_t v7 = (void *)v5;

      unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectsInEntity:kMTEpisodeEntityName predicate:v7 sortDescriptors:0]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 firstObject]);
      BOOL v10 = v9 == 0LL;

      id v2 = v7;
LABEL_12:

      unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) appController]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 uuid]);
      [v11 presentPodcast:v13 episodeUuid:v12 episodeNotAvailable:v10 podcastTab:1 startPlayback:0 animated:0];

      goto LABEL_13;
    }
  }

  if (*(void *)(a1 + 48))
  {
    id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) appController]);
    [v13 openStoreURL:*(void *)(a1 + 48)];
LABEL_13:
  }

void sub_100086BDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100086C10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100086C20(uint64_t a1)
{
}

void sub_100086C28(uint64_t a1, void *a2)
{
  id v7 = a2;
  if ([v7 hasPrefix:@"pid"])
  {
    char v3 = (void *)objc_claimAutoreleasedReturnValue([v7 componentsSeparatedByString:@"="]);
    uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 lastObject]);
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
}

uint64_t start(int a1, char **a2)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  id v5 = [[IMMetricsController alloc] initWithTopic:@"xp_its_podcasts_main"];
  [v5 setShouldSuppressUserInfo:1];
  id v6 = [[IMMetricsController alloc] initWithTopic:@"xp_dzc_main"];
  [v6 setShouldSuppressUserInfo:1];
  [v6 setShouldIgnoreDNU:1];
  +[IMMetrics addMetricsController:](&OBJC_CLASS___IMMetrics, "addMetricsController:", v6);
  id v7 = [[IMMetricsController alloc] initWithTopic:@"xp_amp_podcasts_main"];
  [v7 setShouldSuppressUserInfo:1];
  [v7 setShouldIgnoreDNU:1];
  +[IMMetrics addMetricsController:](&OBJC_CLASS___IMMetrics, "addMetricsController:", v7);
  id v8 = [[IMMetricsController alloc] initWithTopic:@"xp_amp_podcasts_paf"];
  [v8 setShouldSuppressUserInfo:1];
  [v8 setShouldIgnoreDNU:1];
  +[IMMetrics addMetricsController:](&OBJC_CLASS___IMMetrics, "addMetricsController:", v8);
  +[IMMetrics setDefaultMetricsController:](&OBJC_CLASS___IMMetrics, "setDefaultMetricsController:", v5);
  +[IMMetrics enable](&OBJC_CLASS___IMMetrics, "enable");
  +[IMMetrics startTimer:](&OBJC_CLASS___IMMetrics, "startTimer:", @"app_launch");
  +[MTLibraryMigrationUtil migrateDatabasePropertiesToSharedContainerIfNeeded]( &OBJC_CLASS___MTLibraryMigrationUtil,  "migrateDatabasePropertiesToSharedContainerIfNeeded");
  +[MTLibraryMigrator migrateDatabaseToSharedContainerIfNeeded]( &OBJC_CLASS___MTLibraryMigrator,  "migrateDatabaseToSharedContainerIfNeeded");
  id v9 = (objc_class *)objc_opt_class(&OBJC_CLASS___MTAppDelegate_ATV);
  if (+[MTLibraryMigrator needsMigration](&OBJC_CLASS___MTLibraryMigrator, "needsMigration")) {
    id v9 = (objc_class *)objc_opt_class(&OBJC_CLASS___MTMigrationAppDelegate_ATV);
  }
  BOOL v10 = (objc_class *)objc_opt_class(&OBJC_CLASS___MTApplication_ATV);
  unsigned __int8 v11 = NSStringFromClass(v10);
  uint64_t v12 = (NSString *)objc_claimAutoreleasedReturnValue(v11);
  id v13 = NSStringFromClass(v9);
  id v14 = (NSString *)objc_claimAutoreleasedReturnValue(v13);
  uint64_t v15 = UIApplicationMain(a1, a2, v12, v14);

  objc_autoreleasePoolPop(v4);
  return v15;
}

void sub_100087054(uint64_t a1)
{
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)&OBJC_METACLASS___MTReachability;
  id v1 = objc_msgSend(objc_msgSendSuper2(&v3, "allocWithZone:", 0), "init");
  id v2 = (void *)qword_1002B6A48;
  qword_1002B6A48 = (uint64_t)v1;
}

id sub_1000872DC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateReachability];
}

id sub_1000873F0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateReachability];
}

void sub_100087780(_Unwind_Exception *a1)
{
}

void sub_100087884(_Unwind_Exception *a1)
{
}

void sub_100087904(_Unwind_Exception *a1)
{
}

uint64_t sub_100087F70(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](&OBJC_CLASS___LSApplicationWorkspace, "defaultWorkspace"));
  [v2 openSensitiveURL:*(void *)(a1 + 32) withOptions:0];

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100087FC8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100088360(_Unwind_Exception *a1)
{
}

void sub_1000883BC(id a1)
{
  id v1 = -[NSLocale initWithLocaleIdentifier:]( objc_alloc(&OBJC_CLASS___NSLocale),  "initWithLocaleIdentifier:",  @"en");
  id v2 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [&off_1002551E8 count]);
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v3 = [&off_1002551E8 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v12;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(&off_1002551E8);
        }
        uint64_t v7 = *(void *)(*((void *)&v11 + 1) + 8LL * (void)v6);
        id v8 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
        -[NSDateFormatter setDateFormat:](v8, "setDateFormat:", v7);
        -[NSDateFormatter setLocale:](v8, "setLocale:", v1);
        -[NSMutableArray addObject:](v2, "addObject:", v8);

        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [&off_1002551E8 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v4);
  }

  id v9 = -[NSMutableArray copy](v2, "copy");
  BOOL v10 = (void *)qword_1002B6A58;
  qword_1002B6A58 = (uint64_t)v9;
}

id sub_100088B9C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addSubview:a2];
}

void sub_100088C58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

double sub_100088C70(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  double result = v3 + 30.0 + *(double *)(v4 + 24);
  *(double *)(v4 + 24) = result;
  return result;
}

void sub_100088D6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

CGFloat sub_100088D84(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 frame];
  [*(id *)(a1 + 32) bounds];
  objc_msgSend(v3, "sizeThatFits:", v4, v5);
  CGFloat v7 = v6 + 30.0;
  [*(id *)(a1 + 32) bounds];
  double Height = CGRectGetHeight(v13);
  double v9 = *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  objc_msgSend(v3, "setFrame:", v9, 0.0, v7, Height);

  v14.origin.y = 0.0;
  v14.origin.x = v9;
  v14.size.width = v7;
  v14.size.height = Height;
  CGFloat MaxX = CGRectGetMaxX(v14);
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
  CGFloat result = MaxX + *(double *)(v11 + 24);
  *(CGFloat *)(v11 + 24) = result;
  return result;
}

void sub_1000891D0(uint64_t a1)
{
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)&OBJC_METACLASS___MTSyncController;
  id v1 = objc_msgSend(objc_msgSendSuper2(&v3, "allocWithZone:", 0), "init");
  id v2 = (void *)qword_1002B6A70;
  qword_1002B6A70 = (uint64_t)v1;
}

BOOL sub_1000895B0()
{
  if (+[MTApplication localLibraryUpdatesDisabled](&OBJC_CLASS___MTApplication, "localLibraryUpdatesDisabled")) {
    return 1LL;
  }
  if (qword_1002B6A88 != -1) {
    dispatch_once(&qword_1002B6A88, &stru_100242D50);
  }
  return byte_1002B6A90 != 0;
}

void sub_100089610(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) URLForKey:kMTSyncPutAll]);
  uint64_t v9 = *(void *)(a1 + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_10008970C;
  v14[3] = &unk_100242C58;
  id v15 = v7;
  int8x16_t v13 = *(int8x16_t *)(a1 + 40);
  id v10 = (id)v13.i64[0];
  int8x16_t v16 = vextq_s8(v13, v13, 8uLL);
  id v17 = v6;
  id v11 = v6;
  id v12 = v7;
  [v8 asyncValueOnQueue:v9 withCompletion:v14];
}

void sub_10008970C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  unint64_t v7 = a4;
  id v8 = (void *)v7;
  if (v7 | *(void *)(a1 + 32))
  {
    uint64_t v9 = _MTLogCategoryCloudSync(v7);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      uint64_t v22 = v11;
      __int16 v23 = 2112;
      __int128 v24 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "MTSyncController fetch of GetAll/PutAll bag value failed. Errors=%@ %@",  buf,  0x16u);
    }

    dispatch_time_t v12 = dispatch_time(0LL, 60000000000LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000898A8;
    block[3] = &unk_10023FF98;
    void block[4] = *(void *)(a1 + 40);
    dispatch_after(v12, &_dispatch_main_q, block);
  }

  else
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_1000898B0;
    v16[3] = &unk_100240980;
    int8x16_t v13 = *(dispatch_queue_s **)(a1 + 48);
    id v14 = *(id *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 40);
    id v17 = v14;
    uint64_t v18 = v15;
    id v19 = v6;
    dispatch_async(v13, v16);
  }
}

id sub_1000898A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) start];
}

void sub_1000898B0(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryCloudSync(a1);
  objc_super v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v11 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Starting MTSyncController and the bag has loaded with GetAll=%@. ",  buf,  0xCu);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000899DC;
  block[3] = &unk_100240980;
  int8x16_t v6 = *(int8x16_t *)(a1 + 32);
  id v5 = (id)v6.i64[0];
  int8x16_t v8 = vextq_s8(v6, v6, 8uLL);
  id v9 = *(id *)(a1 + 48);
  if (qword_1002B6A80 != -1) {
    dispatch_once(&qword_1002B6A80, block);
  }
}

void sub_1000899DC(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryCloudSync(a1);
  objc_super v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v15) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Setting up MTSyncController. Will kick off initial syncs.",  (uint8_t *)&v15,  2u);
  }

  uint64_t v4 = _MTLogCategoryCloudSync([*(id *)(a1 + 32) _setupUPP]);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    int v15 = 138412546;
    uint64_t v16 = v6;
    __int16 v17 = 2112;
    uint64_t v18 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "MTSyncController GET URL: %@, PUT URL: %@",  (uint8_t *)&v15,  0x16u);
  }

  int8x16_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudSyncController]);
  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudSyncController]);
    [v9 setDelegate:0];
  }

  id v10 = objc_alloc(&OBJC_CLASS___MZKeyValueStoreController);
  uint64_t v11 = -[MZKeyValueStoreController initWithDomain:baseURLForGETAll:baseURLForPUTAll:]( v10,  "initWithDomain:baseURLForGETAll:baseURLForPUTAll:",  kMTPodcastsDomain,  *(void *)(a1 + 40),  *(void *)(a1 + 48));
  [*(id *)(a1 + 32) setCloudSyncController:v11];

  dispatch_time_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudSyncController]);
  [v12 setDelegate:*(void *)(a1 + 32)];

  int8x16_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudSyncController]);
  [v13 reset];

  [*(id *)(a1 + 32) setIsRunning:1];
  [*(id *)(a1 + 32) syncEverything];
  id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v14 postNotificationName:@"MTSyncControllerDidStartRunningNotification" object:0];
}

void sub_10008A0F0(_Unwind_Exception *a1)
{
}

void sub_10008A114(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v1 postNotificationName:@"MTSyncControllerOperationCompleted" object:0];
}

void sub_10008A408( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10008A45C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained endBackgroundTask];
}

void sub_10008A840(_Unwind_Exception *a1)
{
}

void sub_10008A984( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10008ADAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
}

void sub_10008ADDC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](&OBJC_CLASS___UIApplication, "sharedApplication"));
  [v2 endBackgroundTask:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = UIBackgroundTaskInvalid;
}

void sub_10008AE38(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = [v5 BOOLValue];
  int v9 = (int)v8;
  uint64_t v10 = _MTLogCategoryCloudSync(v8);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v9 && WeakRetained)
  {
    if (v12)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "performUniversalPlaybackPositionSync",  buf,  2u);
    }

    int8x16_t v13 = objc_opt_new(&OBJC_CLASS___MTTimedOperation);
    -[MTTimedOperation setOperationType:](v13, "setOperationType:", 5LL);
    -[MTTimedOperation setStartDelay:](v13, "setStartDelay:", 0.0);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_10008B020;
    v15[3] = &unk_100240290;
    objc_copyWeak(&v16, (id *)(a1 + 40));
    -[MTTimedOperation setMainBlock:](v13, "setMainBlock:", v15);
    [WeakRetained addOperation:v13];
    WeakRetained[33] = 0;
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](&OBJC_CLASS___UIApplication, "sharedApplication"));
    [v14 endBackgroundTask:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];

    objc_destroyWeak(&v16);
  }

  else
  {
    if (v12)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "UPPEnabled bag value is false. Will not sync UPP.",  buf,  2u);
    }

    int8x16_t v13 = (MTTimedOperation *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](&OBJC_CLASS___UIApplication, "sharedApplication"));
    -[MTTimedOperation endBackgroundTask:]( v13,  "endBackgroundTask:",  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
  }
}

void sub_10008B008(_Unwind_Exception *a1)
{
}

void sub_10008B020(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryCloudSync(a1);
  objc_super v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "UPP Sync Started", v6, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained UPPStore]);
  [v5 synchronizeImmediatelyWithCompletionBlock:0];
}

AMSPromise *__cdecl sub_10008B16C(id a1, NSString *a2)
{
  if (-[NSString BOOLValue](a2, "BOOLValue")) {
    uint64_t v2 = 0LL;
  }
  else {
    uint64_t v2 = +[MTApplication localLibraryUpdatesDisabled]( &OBJC_CLASS___MTApplication,  "localLibraryUpdatesDisabled") ^ 1;
  }
  objc_super v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v3));

  return (AMSPromise *)v4;
}

id sub_10008B558(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) uppSyncDirtyFlag];
  if ((_DWORD)result) {
    return [*(id *)(a1 + 32) performUniversalPlaybackPositionSync];
  }
  return result;
}

void sub_10008B708(uint64_t a1)
{
  uint64_t v2 = objc_alloc(&OBJC_CLASS___MTTermsVersionSyncProcessor);
  objc_super v3 = objc_opt_new(&OBJC_CLASS___MTTermsVersionSyncStorage);
  uint64_t v4 = -[MTTermsVersionSyncProcessor initWithStorage:](v2, "initWithStorage:", v3);

  if (+[MTPrivacyUtil cloudSyncIsDirty](&OBJC_CLASS___MTPrivacyUtil, "cloudSyncIsDirty"))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudSyncController]);
    uint64_t v10 = kMTTermsVersionKey;
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v10, 1LL));
    id v7 = [v5 scheduleSetTransactionWithKeys:v6 processor:v4];
LABEL_5:

    goto LABEL_6;
  }

  if (!+[MTPrivacyUtil allowReporting](&OBJC_CLASS___MTPrivacyUtil, "allowReporting"))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudSyncController]);
    uint64_t v9 = kMTTermsVersionKey;
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v9, 1LL));
    id v8 = [v5 scheduleGetTransactionWithKeys:v6 processor:v4];
    goto LABEL_5;
  }

void sub_10008B98C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10008B9B4(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS____TtC8Podcasts29NonFollowedShowsSyncProcessor);
  objc_super v3 = (void *)objc_claimAutoreleasedReturnValue(+[SyncKeysRepository shared](&OBJC_CLASS____TtC18PodcastsFoundation18SyncKeysRepository, "shared"));
  unsigned int v4 = [v3 isNonFollowedShowsSyncDirty];

  uint64_t v6 = _MTLogCategoryCloudSync(v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v8)
    {
      *(_WORD *)id v14 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[NonFollowedShows] SET Implicit Sync Started",  v14,  2u);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained cloudSyncController]);
    uint64_t v16 = kMTNonFollowedShowsSyncKey;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v16, 1LL));
    id v12 = [v10 scheduleSetTransactionWithKeys:v11 processor:v2];
  }

  else
  {
    if (v8)
    {
      *(_WORD *)id v14 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[NonFollowedShows] GET Implicit Sync Started",  v14,  2u);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained cloudSyncController]);
    uint64_t v15 = kMTNonFollowedShowsSyncKey;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v15, 1LL));
    id v13 = [v10 scheduleGetTransactionWithKeys:v11 processor:v2];
  }
}

void sub_10008BF8C(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryCloudSync(a1);
  objc_super v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Episode SET Started", v11, 2u);
  }

  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) expandFeedUrls:*(void *)(a1 + 40)]);
  uint64_t v5 = objc_alloc(&OBJC_CLASS___MTEpisodeSyncProcessor);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) episodeSyncStorage]);
  id v7 = -[MTEpisodeSyncProcessor initWithStorageProvider:](v5, "initWithStorageProvider:", v6);

  BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudSyncController]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 allObjects]);
  id v10 = [v8 scheduleSetTransactionWithKeys:v9 processor:v7];
}

void sub_10008C1BC(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryCloudSync(a1);
  objc_super v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v12 = 138412290;
    uint64_t v13 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Episode GET Started for FeedURLs: %@",  (uint8_t *)&v12,  0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) expandFeedUrls:*(void *)(a1 + 32)]);
  uint64_t v6 = objc_alloc(&OBJC_CLASS___MTEpisodeSyncProcessor);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) episodeSyncStorage]);
  BOOL v8 = -[MTEpisodeSyncProcessor initWithStorageProvider:](v6, "initWithStorageProvider:", v7);

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) cloudSyncController]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 allObjects]);
  id v11 = [v9 scheduleGetTransactionWithKeys:v10 processor:v8];
}

void sub_10008C658(_Unwind_Exception *a1)
{
}

void sub_10008C680(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cleanKeys]);
  id v3 = [v2 count];
  uint64_t v4 = _MTLogCategoryCloudSync(v3);
  id WeakRetained = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  BOOL v6 = os_log_type_enabled(WeakRetained, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v2 description]);
      int v10 = 138412290;
      id v11 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  WeakRetained,  OS_LOG_TYPE_DEFAULT,  "[MultiKey] GET Operation for keys: %@",  (uint8_t *)&v10,  0xCu);
    }

    id WeakRetained = (os_log_s *)objc_loadWeakRetained((id *)(a1 + 40));
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s cloudSyncController](WeakRetained, "cloudSyncController"));
    id v9 = [v8 scheduleGetTransactionWithKeys:v2 processor:*(void *)(a1 + 32)];
  }

  else if (v6)
  {
    LOWORD(v10) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  WeakRetained,  OS_LOG_TYPE_DEFAULT,  "[MultiKey] No clean keys found -> No need to schedule MultiKey GET Operation.",  (uint8_t *)&v10,  2u);
  }
}

void sub_10008C7C0(id *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] dirtyKeys]);
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v15;
    while (2)
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = *(void *)(*((void *)&v14 + 1) + 8LL * (void)i);
        BOOL v8 = objc_alloc_init(&OBJC_CLASS___MTTimedOperation);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([a1[4] processorForKey:v7]);
        if (![v9 hasLocalChanges])
        {

          goto LABEL_11;
        }

        -[MTTimedOperation setOperationType:](v8, "setOperationType:", [v9 operationTypeForSET]);
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472LL;
        _DWORD v11[2] = sub_10008C9BC;
        v11[3] = &unk_100242D30;
        void v11[4] = v7;
        objc_copyWeak(&v13, a1 + 6);
        id v10 = v9;
        id v12 = v10;
        -[MTTimedOperation setMainBlock:](v8, "setMainBlock:", v11);
        [a1[5] addOperation:v8];

        objc_destroyWeak(&v13);
      }

      id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

void sub_10008C99C(_Unwind_Exception *a1)
{
}

void sub_10008C9BC(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryCloudSync(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) description]);
    *(_DWORD *)buf = 138412290;
    id v11 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[MultiKey] SET Operation for key: %@",  buf,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained cloudSyncController]);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v9, 1LL));
  id v8 = [v6 scheduleSetTransactionWithKeys:v7 processor:*(void *)(a1 + 40)];
}

LABEL_27:
    if (v6) {
      (*((void (**)(id, void))v6 + 2))(v6, 0LL);
    }
    id v10 = 0;
LABEL_31:
    objc_sync_exit(v11);

    goto LABEL_32;
  }

  id v8 = _MTLogCategoryCloudSync(v7);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "DEMO MODE Trying to reset to initial state. We say no",  buf,  2u);
  }

  if (v6) {
    (*((void (**)(id, void))v6 + 2))(v6, 0LL);
  }
  id v10 = 0;
LABEL_32:

  return v10;
}

    LOBYTE(v31) = 1;
    goto LABEL_46;
  }

  LOBYTE(v31) = 0;
LABEL_48:

  return v31;
}

        if (!v34)
        {
          v47 = 0LL;
          goto LABEL_30;
        }

  __break(1u);
  return result;
}

    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    id v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      id v11 = a3;
      goto LABEL_33;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

    id v12 = (v21 - 1) & v21;
    __int128 v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    __int128 v16 = 16 * v15;
    __int128 v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    id v19 = (void *)(*(void *)(v4 + 48) + v16);
    *id v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }

  uint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

void sub_10008D0F8(_Unwind_Exception *a1)
{
}

id sub_10008D12C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _finaliseResetToInitial:*(void *)(a1 + 40)];
}

void sub_10008D1F8(uint64_t a1)
{
  if (([*(id *)(a1 + 32) hasPodcastSyncVersion] & 1) != 0
    || [*(id *)(a1 + 32) hasPodcastSyncV3Version])
  {
    uint64_t v2 = objc_autoreleasePoolPush();
    id v3 = *(void **)(a1 + 40);
    uint64_t v4 = kMTPodcastEntityName;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForNotHiddenPodcasts](&OBJC_CLASS___MTPodcast, "predicateForNotHiddenPodcasts"));
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectsInEntity:v4 predicate:v5 sortDescriptors:0]);

    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    id v7 = v6;
    id v8 = [v7 countByEnumeratingWithState:&v35 objects:v40 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v36;
      do
      {
        id v11 = 0LL;
        do
        {
          if (*(void *)v36 != v10) {
            objc_enumerationMutation(v7);
          }
          id v12 = *(void **)(*((void *)&v35 + 1) + 8LL * (void)v11);
          id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) episodeSyncStorage]);
          __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v12 feedURL]);
          [v13 resetVersionForFeedUrl:v14];

          __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) episodeSyncStorage]);
          __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v12 updatedFeedURL]);
          [v15 resetVersionForFeedUrl:v16];

          id v11 = (char *)v11 + 1;
        }

        while (v9 != v11);
        id v9 = [v7 countByEnumeratingWithState:&v35 objects:v40 count:16];
      }

      while (v9);
    }

    objc_autoreleasePoolPop(v2);
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(+[MTLibrary sharedInstance](&OBJC_CLASS___MTLibrary, "sharedInstance"));
    [v17 synchronouslyMarkAsHiddenAllPodcastsWithoutResettingSyncVersions];

    [(id)objc_opt_class(*(void *)(a1 + 32)) resetAllSubscriptionSyncVersion];
    [(id)objc_opt_class(*(void *)(a1 + 32)) resetPlaylistSyncVersion];
  }

  if ([*(id *)(a1 + 32) hasPlaylistSyncVersion])
  {
    uint64_t v18 = objc_autoreleasePoolPush();
    id v19 = (void *)objc_claimAutoreleasedReturnValue(+[MTLibrary sharedInstance](&OBJC_CLASS___MTLibrary, "sharedInstance"));
    [v19 deleteAllTopLevelStationsExcludingFolders];

    objc_autoreleasePoolPop(v18);
    [(id)objc_opt_class(*(void *)(a1 + 32)) resetPlaylistSyncVersion];
  }

  if (+[MTBookmarksSyncStorage hasBookmarksSync](&OBJC_CLASS___MTBookmarksSyncStorage, "hasBookmarksSync"))
  {
    uint64_t v20 = objc_autoreleasePoolPush();
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[MTEpisode predicateForBookmarkedEpisodes]( &OBJC_CLASS___MTEpisode,  "predicateForBookmarkedEpisodes"));
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) objectsInEntity:kMTEpisodeEntityName predicate:v21 sortDescriptors:0]);
    if ([v22 count])
    {
      __int128 v33 = 0u;
      __int128 v34 = 0u;
      __int128 v31 = 0u;
      __int128 v32 = 0u;
      id v23 = v22;
      id v24 = [v23 countByEnumeratingWithState:&v31 objects:v39 count:16];
      if (v24)
      {
        id v25 = v24;
        uint64_t v26 = *(void *)v32;
        do
        {
          __int128 v27 = 0LL;
          do
          {
            if (*(void *)v32 != v26) {
              objc_enumerationMutation(v23);
            }
            objc_msgSend(*(id *)(*((void *)&v31 + 1) + 8 * (void)v27), "markAsUnbookmarked", (void)v31);
            __int128 v27 = (char *)v27 + 1;
          }

          while (v25 != v27);
          id v25 = [v23 countByEnumeratingWithState:&v31 objects:v39 count:16];
        }

        while (v25);
      }

      [*(id *)(a1 + 40) saveInCurrentBlock];
    }

    objc_autoreleasePoolPop(v20);
    +[MTBookmarksSyncStorage resetBookmarksSync](&OBJC_CLASS___MTBookmarksSyncStorage, "resetBookmarksSync");
  }

  objc_msgSend(*(id *)(a1 + 40), "deleteAllUPPMetadata", (void)v31);
  if ([*(id *)(a1 + 32) hasInterestSyncVersion])
  {
    uint64_t v28 = objc_autoreleasePoolPush();
    id v29 = (void *)objc_claimAutoreleasedReturnValue(+[MTLibrary sharedInstance](&OBJC_CLASS___MTLibrary, "sharedInstance"));
    [v29 deleteAllInterestsBlockingCaller];

    objc_autoreleasePoolPop(v28);
    +[InterestSyncStorage resetInterestSync](&OBJC_CLASS____TtC8Podcasts19InterestSyncStorage, "resetInterestSync");
  }

  __int16 v30 = (void *)objc_claimAutoreleasedReturnValue(+[MTLibrary sharedInstance](&OBJC_CLASS___MTLibrary, "sharedInstance"));
  [v30 immediatelyDeleteAllHiddenPodcasts];
}

void sub_10008D7B8(_Unwind_Exception *a1)
{
}

void sub_10008D7D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v2, 1LL);
  }
  id v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  id v4 = [*(id *)(a1 + 32) isSyncing];
  if ((_DWORD)v4)
  {
    uint64_t v5 = _MTLogCategoryCloudSync(v4);
    BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Syncing content for new account when current sync finishes",  buf,  2u);
    }

    [*(id *)(a1 + 32) setResyncWhenDone:1];
  }

  else
  {
    id v7 = [*(id *)(a1 + 32) isUserLoggedIn];
    if ((_DWORD)v7)
    {
      uint64_t v8 = _MTLogCategoryCloudSync(v7);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Syncing Content for New Account", v11, 2u);
      }

      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[MTSyncController sharedInstance](&OBJC_CLASS___MTSyncController, "sharedInstance"));
      [v10 syncEverything];
    }
  }

  objc_sync_exit(v3);
}

void sub_10008D8F8(_Unwind_Exception *a1)
{
}

void sub_10008DED0(_Unwind_Exception *a1)
{
}

void sub_10008E04C(_Unwind_Exception *a1)
{
}

void sub_10008E14C(_Unwind_Exception *a1)
{
}

void sub_10008E34C(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  byte_1002B6A90 = [v1 BOOLForKey:@"MTFeatureDisabled_CloudSync"];
}

void sub_10008E5FC(id a1, MTBaseQueryObserver *a2, unint64_t a3, BOOL *a4)
{
}

void sub_10008E7A0(_Unwind_Exception *a1)
{
}

void sub_10008E7BC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    id v3 = objc_autoreleasePoolPush();
    [WeakRetained removeEpisodeObserverForPodcasts:*(void *)(a1 + 32)];
    objc_autoreleasePoolPop(v3);
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v4 = *(id *)(a1 + 40);
    id v5 = [v4 countByEnumeratingWithState:&v18 objects:v23 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v19;
      do
      {
        uint64_t v8 = 0LL;
        do
        {
          if (*(void *)v19 != v7) {
            objc_enumerationMutation(v4);
          }
          [WeakRetained updateEpisodeObserverForPodcast:*(void *)(*((void *)&v18 + 1) + 8 * (void)v8)];
          uint64_t v8 = (char *)v8 + 1;
        }

        while (v6 != v8);
        id v6 = [v4 countByEnumeratingWithState:&v18 objects:v23 count:16];
      }

      while (v6);
    }

    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v9 = *(id *)(a1 + 48);
    id v10 = [v9 countByEnumeratingWithState:&v14 objects:v22 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v15;
      do
      {
        id v13 = 0LL;
        do
        {
          if (*(void *)v15 != v12) {
            objc_enumerationMutation(v9);
          }
          objc_msgSend( WeakRetained,  "addEpisodeObserverForPodcast:",  *(void *)(*((void *)&v14 + 1) + 8 * (void)v13),  (void)v14);
          id v13 = (char *)v13 + 1;
        }

        while (v11 != v13);
        id v11 = [v9 countByEnumeratingWithState:&v14 objects:v22 count:16];
      }

      while (v11);
    }
  }
}

void sub_10008EA7C(_Unwind_Exception *a1)
{
}

void sub_10008EBEC(_Unwind_Exception *a1)
{
}

void sub_10008EE5C(_Unwind_Exception *a1)
{
}

void sub_10008EFC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_10008EFF4(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 5);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10008F124;
  v10[3] = &unk_100242DB8;
  objc_copyWeak(&v14, a1 + 6);
  objc_copyWeak(&v15, a1 + 5);
  id v11 = a1[4];
  id v8 = v5;
  id v12 = v8;
  id v9 = v6;
  id v13 = v9;
  [WeakRetained enqueueWorkBlock:v10];

  objc_destroyWeak(&v15);
  objc_destroyWeak(&v14);
}

void sub_10008F108(_Unwind_Exception *a1)
{
}

void sub_10008F124(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v2 = objc_loadWeakRetained((id *)(a1 + 64));
  [v2 episodeUuidObserver:WeakRetained resultsChangedForPodcast:*(void *)(a1 + 32) withDeletedIds:*(void *)(a1 + 40) andInsertIds:*(void *)(a1 + 48)];
}

void sub_10008F288(_Unwind_Exception *a1)
{
}

void sub_10008F348( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10008F360(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10008F370(uint64_t a1)
{
}

void sub_10008F378(uint64_t a1, void *a2)
{
  uint64_t v3 = objc_claimAutoreleasedReturnValue([a2 valueForKey:kPodcastUuid]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10008F4B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10008F4D8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  id v4 = (id)objc_claimAutoreleasedReturnValue([a3 uuids]);
  [v3 unionSet:v4];
}

void sub_10008F988(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 managedObjectContext]);
  [v4 deleteObject:v3];
}

void sub_10008F9D4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 managedObjectContext]);
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[MTPodcastPlaylistSettings insertNewSettingsInManagedObjectContext:]( &OBJC_CLASS___MTPodcastPlaylistSettings,  "insertNewSettingsInManagedObjectContext:",  v5));

  [v6 setPodcast:v4];
  [v6 setPlaylist:*(void *)(a1 + 32)];
  objc_msgSend(v6, "setEpisodesToShow:", objc_msgSend(*(id *)(a1 + 40), "episodesToShow"));
  objc_msgSend(v6, "setMediaType:", objc_msgSend(*(id *)(a1 + 40), "mediaType"));
  objc_msgSend(v6, "setShowPlayedEpisodes:", objc_msgSend(*(id *)(a1 + 40), "showPlayedEpisodes"));
  [v6 setTracksDefault:1];
  [v6 setEpisodesToShow:6];
}

void sub_1000902D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000902F4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100090304(uint64_t a1)
{
}

void sub_10009030C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v9 = a2;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v9 podcast]);
  unsigned int v8 = [v7 isEqual:*(void *)(a1 + 32)];

  if (v8)
  {
    *a4 = 1;
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
  }
}

void sub_100090460(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mutableOrderedSetValueForKey:kPlaylistEpisodes]);
  id v3 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v4 = v2;
  id v5 = [v4 countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v23;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v23 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)i);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 podcast]);
        id v11 = *(void **)(a1 + 40);

        if (v10 == v11) {
          -[NSMutableArray addObject:](v3, "addObject:", v9);
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v22 objects:v27 count:16];
    }

    while (v6);
  }

  if (-[NSMutableArray count](v3, "count"))
  {
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v12 = v3;
    id v13 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v18,  v26,  16LL);
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v19;
      do
      {
        for (j = 0LL; j != v14; j = (char *)j + 1)
        {
          if (*(void *)v19 != v15) {
            objc_enumerationMutation(v12);
          }
          __int128 v17 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)j);
          objc_msgSend(v17, "removePlaylistsObject:", *(void *)(a1 + 32), (void)v18);
          [*(id *)(a1 + 32) addDeletedEpisodesObject:v17];
          [v4 removeObject:v17];
        }

        id v14 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v18,  v26,  16LL);
      }

      while (v14);
    }

    [*(id *)(a1 + 32) recalculateEpisodeCounts];
  }

  objc_msgSend(*(id *)(a1 + 32), "setNeedsUpdate:", 1, (void)v18);
  if (*(_BYTE *)(a1 + 56)) {
    [*(id *)(a1 + 48) saveInCurrentBlock];
  }
}

id sub_1000907F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) saveInCurrentBlock];
}

void sub_1000908DC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mutableOrderedSetValueForKey:kPlaylistEpisodes]);
  [v2 removeObject:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) recalculateEpisodeCounts];
  [*(id *)(a1 + 40) removePlaylistsObject:*(void *)(a1 + 32)];
  [*(id *)(a1 + 32) addDeletedEpisodesObject:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) setNeedsUpdate:1];
  if (!*(_BYTE *)(a1 + 56)) {
    [*(id *)(a1 + 48) saveInCurrentBlock];
  }
}

void sub_100090B84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100090B9C(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( NSPredicate,  "predicateWithFormat:",  @"%K = %lld",  kPlaylistParentMediaLibraryId,  [*(id *)(a1 + 32) mediaLibraryId]));
  id v2 = *(void **)(a1 + 40);
  uint64_t v3 = kMTPlaylistEntityName;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", kPlaylistMediaLibraryId, 0LL));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 objectDictionariesInEntity:v3 predicate:v6 sortDescriptors:0 propertiesToFetch:v4 includeObjectId:1]);

  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v5 count];
}

void sub_100090D3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100090D54(uint64_t a1)
{
  uint64_t v2 = kPlaylistMediaLibraryId;
  id v7 = (id)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"%K != 0 AND %K = 0",  kPlaylistMediaLibraryId,  kPlaylistParentMediaLibraryId));
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = kMTPlaylistEntityName;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v2, 0LL));
  id v6 = (void *)objc_claimAutoreleasedReturnValue( [v3 objectDictionariesInEntity:v4 predicate:v7 sortDescriptors:0 propertiesToFetch:v5 includeObjectId:1]);

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v6 count];
}

void sub_100091500(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___MTMediaContentSourceiOSMusicLibrary);
  uint64_t v2 = (void *)qword_1002B6AA0;
  qword_1002B6AA0 = (uint64_t)v1;
}

uint64_t sub_100091694(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000916A8(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___ICCloudClient);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workQueue]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10009175C;
  v6[3] = &unk_100242EF0;
  uint64_t v4 = *(void **)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  [v5 isAuthenticatedWithQueue:v3 completionHandler:v6];
}

uint64_t sub_10009175C(uint64_t a1, char a2)
{
  id v4 = *(id *)(a1 + 32);
  objc_sync_enter(v4);
  *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = a2;
  objc_sync_exit(v4);

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100091964(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uuid]);
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 podcastForUuid:v3]);

  objc_msgSend(*(id *)(a1 + 40), "setIsSerialPodcast:", objc_msgSend(v4, "isSerialShowTypeInFeed"));
}

void sub_100091B30(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) tableView]);
  [v2 reloadData];
}

void sub_10009233C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
}

void sub_1000923A0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100092418;
  block[3] = &unk_100240290;
  objc_copyWeak(&v2, (id *)(a1 + 32));
  dispatch_async(&_dispatch_main_q, block);
  objc_destroyWeak(&v2);
}

void sub_100092418(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained refreshSettings];
}

id sub_100092444(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) updateSubscription:a2];
}

id sub_100092450(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) updateEpisodeOrderSetting:a2];
}

id sub_10009245C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) updateRemovePlayedDownloads:a2];
}

id sub_100092468(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) updateEpisodeLimit:a2];
}

void sub_100092954( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36)
{
}

void sub_1000929C8(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uuid]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 podcastForUuid:v4]);

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v5 subscribed];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v5 notifications];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v5 playbackNewestToOldest];
  *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = [v5 deletePlayedEpisodes];
  *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = [v5 episodeLimit];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = [v5 sortAscending];
  *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = [v5 showTypeSetting];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = [v5 hidesPlayedEpisodes];

  objc_autoreleasePoolPop(v2);
}

NSString *__cdecl sub_100093108(id a1, unint64_t a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 localizedStringForKey:@"LIMIT_HEADER" value:&stru_100248948 table:0]);

  return (NSString *)v3;
}

NSString *__cdecl sub_100093910(id a1, unint64_t a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 localizedStringForKey:@"LIMIT_HEADER" value:&stru_100248948 table:0]);

  return (NSString *)v3;
}

NSAttributedString *sub_100093BF4(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc(&OBJC_CLASS___NSAttributedString);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deletePlayedText:a2]);
  id v6 = -[NSAttributedString initWithString:](v4, "initWithString:", v5);

  return v6;
}

void sub_100094144(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uuid]);
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 podcastForUuid:v3]);

  [v4 setEpisodeLimit:*(void *)(a1 + 48)];
}

void sub_1000943C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1000943D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000943E8(uint64_t a1)
{
}

void sub_1000943F0(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uuid]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 podcastForUuid:v4]);

  [v5 markPlaylistsForUpdate];
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 dictionaryRepresentation]);
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  objc_autoreleasePoolPop(v2);
}

void sub_100094544(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uuid]);
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 podcastForUuid:v3]);

  [v4 setNotifications:*(unsigned __int8 *)(a1 + 48)];
}

void sub_1000946CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000946F0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uuid]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 podcastForUuid:v3]);

  if (v4)
  {
    id v5 = [v4 showTypeSetting];
    if (v5 != *(id *)(a1 + 64))
    {
      uint64_t v6 = _MTLogCategoryDatabase(v5);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 64);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v4 title]);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v4 uuid]);
        int v11 = 134349826;
        uint64_t v12 = v8;
        __int16 v13 = 2114;
        id v14 = v9;
        __int16 v15 = 2114;
        __int128 v16 = v10;
        __int16 v17 = 2050;
        id v18 = [v4 storeCollectionId];
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "MTShowSettingsViewController updateEpisodeOrderSetting about to switch show type setting to %{public}lu, show %{public}@, %{public}@, %{public}lld",  (uint8_t *)&v11,  0x2Au);
      }

      [v4 setShowTypeSetting:*(void *)(a1 + 64)];
      [*(id *)(a1 + 32) saveInCurrentBlock];
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v4 showTypeSetting];
      *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
    }
  }
}

void sub_100095AD4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = [a2 indexOfObject:*(void *)(a1 + 32)];
  if (v5 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v6 = *(void **)(a1 + 40);
    id v7 = (id)objc_claimAutoreleasedReturnValue( +[NSIndexPath indexPathForItem:inSection:]( &OBJC_CLASS___NSIndexPath,  "indexPathForItem:inSection:",  v5,  a3));
    [v6 addObject:v7];
  }

void sub_100095F54(_Unwind_Exception *a1)
{
}

void sub_1000961F0(_Unwind_Exception *a1)
{
}

void sub_10009630C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2 == 1)
  {
    id v13 = objc_begin_catch(a1);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 name]);
    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v13 reason]);
    objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@ - %@"));

    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(+[IMLogger sharedLogger](&OBJC_CLASS___IMLogger, "sharedLogger"));
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v13 name]);
    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v13 reason]);
    [v16 logFile:"/Library/Caches/com.apple.xbs/Sources/Marmoset/Source/ATV/View Controllers/CollectionView/MTFetchedCollectionWithS ectionsViewController.m" lineNumber:358 format:@"Exception occured: %@ - %@"];

    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[IMLogger sharedLogger](&OBJC_CLASS___IMLogger, "sharedLogger"));
    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v13 callStackSymbols]);
    [v18 logFile:"/Library/Caches/com.apple.xbs/Sources/Marmoset/Source/ATV/View Controllers/CollectionView/MTFetchedCollectionWithS ectionsViewController.m" lineNumber:359 format:@"Exception Stack Trace: %@"];

    abort();
  }

  _Unwind_Resume(a1);
}

void sub_1000967E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_1000967FC(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id result = [a3 count];
  if (result)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }

  return result;
}

void sub_1000968D8(uint64_t a1, void *a2, uint64_t a3)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [a2 count]));
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a3));
  [v5 setObject:v7 forKeyedSubscript:v6];
}

id sub_1000969FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateCollectionViewForUpdates:*(void *)(a1 + 40)];
}

void sub_100096AE8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:@"MTFRCDeletions"]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) collectionView]);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___MTCollectionView);
  char isKindOfClass = objc_opt_isKindOfClass(v3, v4);

  if ((isKindOfClass & 1) != 0)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) collectionView]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 swipedCellIndexPath]);
    unsigned int v8 = [v2 containsObject:v7];

    if (v8)
    {
      id v9 = objc_opt_new(&OBJC_CLASS___UICollectionViewFlowLayoutInvalidationContext);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 swipedCellIndexPath]);
      v54 = v10;
      int v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v54, 1LL));
      -[UICollectionViewFlowLayoutInvalidationContext invalidateItemsAtIndexPaths:]( v9,  "invalidateItemsAtIndexPaths:",  v11);

      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) collectionViewLayout]);
      [v12 invalidateLayoutWithContext:v9];
    }
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) collectionView]);
  uint64_t v43 = v2;
  [v13 deleteItemsAtIndexPaths:v2];

  uint64_t v14 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:@"MTFRCInsertions"]);
  __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) collectionView]);
  id v42 = (void *)v14;
  [v15 insertItemsAtIndexPaths:v14];

  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:@"MTFRCMoves"]);
  id v17 = [v16 countByEnumeratingWithState:&v48 objects:v53 count:16];
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = *(void *)v49;
    do
    {
      for (i = 0LL; i != v18; i = (char *)i + 1)
      {
        if (*(void *)v49 != v19) {
          objc_enumerationMutation(v16);
        }
        __int128 v21 = *(void **)(*((void *)&v48 + 1) + 8LL * (void)i);
        __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) collectionView]);
        __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v21 objectAtIndexedSubscript:0]);
        __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v21 objectAtIndexedSubscript:1]);
        [v22 moveItemAtIndexPath:v23 toIndexPath:v24];
      }

      id v18 = [v16 countByEnumeratingWithState:&v48 objects:v53 count:16];
    }

    while (v18);
  }

  __int128 v25 = *(void **)(a1 + 32);
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:@"MTFRCUpdates"]);
  __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v25 validIndexPathsForIndexPaths:v26]);

  if (v27)
  {
    uint64_t v28 = objc_alloc_init(&OBJC_CLASS___UICollectionViewFlowLayoutInvalidationContext);
    -[UICollectionViewFlowLayoutInvalidationContext invalidateItemsAtIndexPaths:]( v28,  "invalidateItemsAtIndexPaths:",  v27);
    id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) collectionView]);
    __int16 v30 = (void *)objc_claimAutoreleasedReturnValue([v29 collectionViewLayout]);
    [v30 invalidateLayoutWithContext:v28];
  }

  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  id v31 = v27;
  id v32 = [v31 countByEnumeratingWithState:&v44 objects:v52 count:16];
  if (v32)
  {
    id v33 = v32;
    uint64_t v34 = *(void *)v45;
    do
    {
      for (j = 0LL; j != v33; j = (char *)j + 1)
      {
        if (*(void *)v45 != v34) {
          objc_enumerationMutation(v31);
        }
        uint64_t v36 = *(void *)(*((void *)&v44 + 1) + 8LL * (void)j);
        __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexPath:v36]);
        __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) collectionView]);
        CGRect v39 = (void *)objc_claimAutoreleasedReturnValue([v38 cellForItemAtIndexPath:v36]);

        uint64_t v40 = *(void **)(a1 + 32);
        id v41 = (void *)objc_claimAutoreleasedReturnValue([v40 collectionView]);
        [v40 collectionView:v41 configureCell:v39 withObject:v37 atIndexPath:v36];
      }

      id v33 = [v31 countByEnumeratingWithState:&v44 objects:v52 count:16];
    }

    while (v33);
  }
}

id sub_100096F1C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _didUpdateCollectionView:*(void *)(a1 + 40)];
}

id sub_100097540(uint64_t a1)
{
  return [*(id *)(a1 + 32) layoutIfNeeded];
}

void sub_10009827C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10009829C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateAllPodcastsTo:a3];
}

void sub_1000983F8(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = kMTPodcastEntityName;
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcast predicateForNotHiddenNotImplicitlyFollowedPodcasts]( &OBJC_CLASS___MTPodcast,  "predicateForNotHiddenNotImplicitlyFollowedPodcasts"));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectsInEntity:v4 predicate:v5 sortDescriptors:0]);

    id v7 = *(void **)(a1 + 40);
    unsigned int v8 = objc_opt_new(&OBJC_CLASS___NSMutableSet);
    [v7 setPodcastUuids:v8];

    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v9 = v6;
    id v10 = [v9 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v17;
      do
      {
        id v13 = 0LL;
        do
        {
          if (*(void *)v17 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = *(void **)(a1 + 40);
          __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v16 + 1) + 8 * (void)v13), "uuid", (void)v16));
          [v14 togglePodcastUuid:v15];

          id v13 = (char *)v13 + 1;
        }

        while (v11 != v13);
        id v11 = [v9 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }

      while (v11);
    }
  }

  objc_autoreleasePoolPop(v2);
}

void sub_100099644(_Unwind_Exception *a1)
{
}

void sub_100099684(id a1, MPRemoteCommandCenter *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[MPRemoteCommandCenter playCommand](v2, "playCommand"));
  [v3 setEnabled:1];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[MPRemoteCommandCenter setPlaybackQueueCommand](v2, "setPlaybackQueueCommand"));
  [v4 setEnabled:1];

  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[MPRemoteCommandCenter setPlaybackQueueCommand](v2, "setPlaybackQueueCommand"));
  [v5 registerSupportedQueueType:5];

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[MPRemoteCommandCenter setPlaybackSessionCommand](v2, "setPlaybackSessionCommand"));
  [v6 setEnabled:1];

  uint64_t v12 = @"com.apple.podcasts.MTPlaybackQueueController.GenericQueue";
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v12, 1LL));
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(-[MPRemoteCommandCenter setPlaybackSessionCommand](v2, "setPlaybackSessionCommand"));
  [v8 setExportableSessionTypes:v7];

  id v11 = @"com.apple.podcasts.MTPlaybackQueueController.GenericQueue";
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v11, 1LL));
  id v10 = (void *)objc_claimAutoreleasedReturnValue(-[MPRemoteCommandCenter setPlaybackSessionCommand](v2, "setPlaybackSessionCommand"));

  [v10 setSupportedSessionTypes:v9];
}

void sub_1000997E4(uint64_t a1, void *a2)
{
  unsigned int v3 = [a2 isEqualToString:kMTRemoteSkipInsteadOfNextTrackDefaultKey];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = WeakRetained;
  if (v3) {
    [WeakRetained updateRemoteSkipPreferenceFromDefaults:v5];
  }
  else {
    [WeakRetained updatePreferredSkipDurationsFromUserDefaults:v5 forCommandCenter:*(void *)(a1 + 40)];
  }
}

void sub_10009993C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _MTLogCategoryMediaRemote(v6);
  unsigned int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Got homeUserId: %@", buf, 0xCu);
    }

    id v10 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", v5);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ic_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ic_sharedAccountStore"));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    id v13[2] = sub_100099B00;
    v13[3] = &unk_1002431B0;
    uint64_t v14 = v10;
    id v15 = *(id *)(a1 + 32);
    uint64_t v12 = v10;
    objc_msgSend(v11, "ic_storeAccountForHomeUserIdentifier:completion:", v12, v13);
  }

  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v17 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Failed to get homeUserId with error %@",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_100099B00(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = _MTLogCategoryMediaRemote(v6);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v20 = 138412290;
      id v21 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Failed to decode requesterUserId with error %@",  (uint8_t *)&v20,  0xCu);
    }
  }

  if (!v5)
  {
    uint64_t v10 = _MTLogCategoryMediaRemote(v6);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v20) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Failed to locate store account for homeUserId",  (uint8_t *)&v20,  2u);
    }
  }

  uint64_t v12 = _MTLogCategoryMediaRemote(v6);
  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 138412290;
    id v21 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Found account %@ from requesterUserId",  (uint8_t *)&v20,  0xCu);
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ic_privateListeningEnabledForHomeUsers"));
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKey:*(void *)(a1 + 32)]);
  unsigned int v16 = [v15 BOOLValue];

  uint64_t v18 = _MTLogCategoryMediaRemote(v17);
  __int128 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 67109120;
    LODWORD(v21) = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Private listening enabled for account: %d",  (uint8_t *)&v20,  8u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10009A1AC(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (v6)
  {
    if ([*(id *)(a1 + 32) insertionPosition])
    {
      if ([*(id *)(a1 + 32) insertionPosition] != (id)1)
      {
LABEL_8:
        id v5 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
        goto LABEL_9;
      }

      unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerController]);
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 upNextController]);
      [v4 addPlayerItemsToUpNext:v6];
    }

    else
    {
      unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerController]);
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 upNextController]);
      [v4 addPlayerItemsToPlayNext:v6];
    }

    goto LABEL_8;
  }

  id v5 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
LABEL_9:
  v5();
}

LABEL_68:
    v103 = _MTLogCategoryMediaRemote(v33);
    v104 = (os_log_s *)objc_claimAutoreleasedReturnValue(v103);
    if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
    {
      v105 = (void *)objc_claimAutoreleasedReturnValue([v8 playbackQueue]);
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v105;
      _os_log_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_ERROR,  "Unhandled Set Playback Queue Command! %@",  buf,  0xCu);
    }

    uint64_t v18 = (void (**)(id, void *))objc_claimAutoreleasedReturnValue( +[MPRemoteCommandStatus statusWithCode:]( &OBJC_CLASS___MPRemoteCommandStatus,  "statusWithCode:",  200LL));
    v9[2](v9, v18);
    goto LABEL_71;
  }

  if (a4) {
    __int16 v30 = 0LL;
  }
  else {
    __int16 v30 = [v29 isRequestingImmediatePlayback];
  }
  __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v18 trackIdentifiers]);
  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v35 firstObject]);

  __int128 v37 = objc_opt_class(&OBJC_CLASS___NSString);
  __int128 v38 = objc_opt_isKindOfClass(v36, v37);
  CGRect v39 = v38;
  uint64_t v40 = _MTLogCategoryMediaRemote(v38);
  id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
  id v42 = v41;
  if ((v39 & 1) != 0)
  {
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v36;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Playback Queue Identifier: %@", buf, 0xCu);
    }

    uint64_t v43 = -[MTURLCommandRequest initWithURLString:]( objc_alloc(&OBJC_CLASS___MTURLCommandRequest),  "initWithURLString:",  v36);
    if ((id)-[MTURLCommandRequest commandType](v43, "commandType") == (id)2)
    {
      __int128 v44 = _MTLogCategoryMediaRemote(2LL);
      __int128 v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v46 = (void *)objc_claimAutoreleasedReturnValue([v18 siriAssetInfo]);
        __int128 v47 = [v46 length];
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v47 != 0LL;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "SetPlaybackQueue has assetInfo: %d",  buf,  8u);
      }

      __int128 v49 = _MTLogCategoryMediaRemote(v48);
      __int128 v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
      {
        __int128 v51 = (void *)objc_claimAutoreleasedReturnValue([v18 siriAssetInfo]);
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v51;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "SetPlaybackQueue assetInfo: %@", buf, 0xCu);
      }

      if (!-[MTURLCommandRequest playReason](v43, "playReason"))
      {
        if (-[MTMediaRemoteController _commandEventIsFromSiri:](self, "_commandEventIsFromSiri:", v8)) {
          int v52 = 9LL;
        }
        else {
          int v52 = 7LL;
        }
        id v53 = -[MTURLCommandRequest copyWithPlayReason:](v43, "copyWithPlayReason:", v52);

        uint64_t v43 = v53;
      }

      v54 = (void *)objc_claimAutoreleasedReturnValue([v18 userInfo]);
      id v109 = (void *)objc_claimAutoreleasedReturnValue([v54 objectForKeyedSubscript:@"requesterUserId"]);

      uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([v18 userInfo]);
      v107 = (void *)objc_claimAutoreleasedReturnValue([v55 objectForKeyedSubscript:@"sharedUserId"]);

      v57 = _MTLogCategoryMediaRemote(v56);
      v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v109;
        _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "SetPlaybackQueue requesterUserId: %@",  buf,  0xCu);
      }

      id v60 = _MTLogCategoryMediaRemote(v59);
      id v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v107;
        _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "SetPlaybackQueue sharedUserId: %@",  buf,  0xCu);
      }

      *(void *)&v150 = 0LL;
      *((void *)&v150 + 1) = &v150;
      v151 = 0x2020000000LL;
      v152 = 0;
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x3032000000LL;
      __int128 v147 = sub_10009B388;
      __int128 v148 = sub_10009B398;
      v149 = 0LL;
      v134[0] = _NSConcreteStackBlock;
      v134[1] = 3221225472LL;
      v134[2] = sub_10009B3A0;
      v134[3] = &unk_100243250;
      uint64_t v43 = v43;
      __int128 v135 = v43;
      __int128 v136 = self;
      __int128 v137 = v18;
      __int128 v140 = buf;
      __int128 v141 = &v150;
      __int128 v142 = (char)v30;
      __int128 v143 = a4;
      __int128 v138 = v36;
      __int128 v139 = v9;
      uint64_t v62 = objc_retainBlock(v134);
      v63 = _MTLogCategoryMediaRemote(v62);
      v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        v65 = (void *)objc_claimAutoreleasedReturnValue(-[MTMediaRemoteController siriMultiUserConnection](self, "siriMultiUserConnection"));
        *(_DWORD *)__int128 v144 = 138412290;
        __int128 v145 = v65;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "Siri connection: %@", v144, 0xCu);
      }

      float v66 = (void *)objc_claimAutoreleasedReturnValue( +[MPPlaybackUserDefaults standardUserDefaults]( &OBJC_CLASS___MPPlaybackUserDefaults,  "standardUserDefaults"));
      double v67 = (void *)objc_claimAutoreleasedReturnValue([v66 isPrivateListeningEnabled]);
      double v68 = [v67 BOOLValue];

      double v69 = objc_claimAutoreleasedReturnValue(-[MTMediaRemoteController siriMultiUserConnection](self, "siriMultiUserConnection"));
      double v70 = (void *)v69;
      if (!v69 || (int v71 = [v109 length] == 0, v70, v71))
      {
        uint64_t v86 = _MTLogCategoryMediaRemote(v69);
        v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
        if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 v144 = 67109120;
          LODWORD(v145) = v68;
          _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEFAULT,  "Device private listening value: %d",  v144,  8u);
        }

        *(_BYTE *)(*((void *)&v150 + 1) + 24LL) = v68 ^ 1;
        ((void (*)(void *))v62[2])(v62);
      }

      else
      {
        v127[0] = _NSConcreteStackBlock;
        v127[1] = 3221225472LL;
        v127[2] = sub_10009B5B8;
        v127[3] = &unk_100243278;
        __int128 v131 = buf;
        v128 = v109;
        __int128 v129 = v107;
        __int128 v132 = &v150;
        __int128 v133 = v68;
        __int128 v130 = v62;
        -[MTMediaRemoteController accountForRequesterUserId:completionHandler:]( self,  "accountForRequesterUserId:completionHandler:",  v128,  v127);
      }

      id v88 = (void *)objc_claimAutoreleasedReturnValue(-[MTMediaRemoteController siriAnalyticsController](self, "siriAnalyticsController"));
      uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue([v8 contextID]);
      [v88 observePlaybackStartEventForRefId:v89];

      _Block_object_dispose(buf, 8);
      _Block_object_dispose(&v150, 8);

LABEL_64:
      goto LABEL_71;
    }

    if ((id)-[MTURLCommandRequest commandType](v43, "commandType") == (id)1)
    {
      v76 = _MTLogCategoryMediaRemote(1LL);
      v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
      if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEFAULT,  "SetPlaybackQueue for following/subscribing",  buf,  2u);
      }

      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x3032000000LL;
      __int128 v147 = sub_10009B388;
      __int128 v148 = sub_10009B398;
      v149 = 0LL;
      v122[0] = _NSConcreteStackBlock;
      v122[1] = 3221225472LL;
      v122[2] = sub_10009B6F0;
      v122[3] = &unk_1002432C8;
      uint64_t v123 = v36;
      v78 = v18;
      id v124 = v78;
      v126 = buf;
      v79 = v9;
      v125 = v79;
      id v80 = objc_retainBlock(v122);
      int v110 = objc_alloc_init(&OBJC_CLASS___AFMultiUserConnection);
      id v81 = (void *)objc_claimAutoreleasedReturnValue([v78 userInfo]);
      v82 = (void *)objc_claimAutoreleasedReturnValue([v81 objectForKeyedSubscript:@"requesterUserId"]);

      id v84 = _MTLogCategoryMediaRemote(v83);
      unint64_t v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
      if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v150) = 138412290;
        *(void *)((char *)&v150 + 4) = v82;
        _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "SetPlaybackQueue requesterUserId: %@",  (uint8_t *)&v150,  0xCu);
      }

      if (v110 && [v82 length])
      {
        v118[0] = _NSConcreteStackBlock;
        v118[1] = 3221225472LL;
        v118[2] = sub_10009B8D4;
        v118[3] = &unk_1002432F0;
        v119 = v79;
        v121 = buf;
        uint64_t v120 = v80;
        -[MTMediaRemoteController accountForRequesterUserId:completionHandler:]( self,  "accountForRequesterUserId:completionHandler:",  v82,  v118);
      }

      else
      {
        ((void (*)(void *))v80[2])(v80);
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_64;
    }

    uint64_t v90 = -[MTURLCommandRequest commandType](v43, "commandType");
    v91 = v90 == (id)3;
    v92 = _MTLogCategoryMediaRemote(v90);
    uint64_t v93 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
    uint64_t v94 = v93;
    if (v91)
    {
      if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEFAULT,  "remoteSetPlaybackQueueCommand with command type MTURLCommandRequestTypeSetRemotePlaybackQueue",  buf,  2u);
      }

      v95 = [v18 replaceIntent];
      v96 = 2LL * (v95 == (id)1);
      if (v95 == (id)2) {
        v96 = 1LL;
      }
      v106 = v96;
      v117 = 0LL;
      id v108 = (void *)objc_claimAutoreleasedReturnValue( -[MTMediaRemoteController accountFromQueueContainingDsid:error:]( self,  "accountFromQueueContainingDsid:error:",  v18,  &v117));
      id v97 = v117;
      uint64_t v111 = v97;
      if (v97)
      {
        id v98 = _MTLogCategoryMediaRemote(v97);
        uint64_t v99 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
        if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v111;
          _os_log_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_ERROR,  "Failed account lookup with error %@",  buf,  0xCu);
        }
      }

      v100 = (void *)objc_claimAutoreleasedReturnValue(-[MTMediaRemoteController playerController](self, "playerController"));
      uint64_t v101 = (void *)objc_claimAutoreleasedReturnValue([v18 trackIdentifiers]);
      uint64_t v102 = (void *)objc_claimAutoreleasedReturnValue([v8 sessionIdentifierOverride]);
      v114[0] = _NSConcreteStackBlock;
      v114[1] = 3221225472LL;
      v114[2] = sub_10009B9AC;
      v114[3] = &unk_100243228;
      v115 = v18;
      int v116 = v9;
      +[MTRemoteSetPlaybackQueueUtil decodeAndSetPlaybackQueueForController:fromIdentifiers:sessionIdentifierOverride:enqueuer:accountLookupFailed:startPlayback:upNextQueueIntent:completion:]( &OBJC_CLASS___MTRemoteSetPlaybackQueueUtil,  "decodeAndSetPlaybackQueueForController:fromIdentifiers:sessionIdentifierOverride:enqueuer:accountLookupFailed:st artPlayback:upNextQueueIntent:completion:",  v100,  v101,  v102,  v108,  v111 != 0LL,  v30,  v106,  v114);

      goto LABEL_64;
    }

    if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v36;
      _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_ERROR,  "Unexpected track identifier for SetPlaybackQueue command: %@",  buf,  0xCu);
    }

    goto LABEL_68;
  }

  if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
  {
    double v72 = (void *)objc_opt_class(v36);
    *(_DWORD *)buf = 138412546;
    *(void *)&uint8_t buf[4] = v72;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v36;
    uint64_t v73 = v72;
    _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "Track identifier for SetPlaybackQueue command was unexpected type: %@ (%@)",  buf,  0x16u);
  }

  v74 = (void *)objc_claimAutoreleasedReturnValue( +[MPRemoteCommandStatus statusWithCode:]( &OBJC_CLASS___MPRemoteCommandStatus,  "statusWithCode:",  200LL));
  v9[2](v9, v74);

LABEL_71:
}

    __int128 v148 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v138));
    v149 = [v371 containsObject:v148];

    if (v149)
    {
      v150 = (void *)objc_claimAutoreleasedReturnValue([v93[72] predicateForEpisodeStoreTrackId:v138]);
      v151 = (void *)objc_claimAutoreleasedReturnValue([v13 objectInEntity:v356 predicate:v150]);

      if (!v151)
      {
        v249 = _MTLogCategoryFeedUpdate(v152);
        v250 = (os_log_s *)objc_claimAutoreleasedReturnValue(v249);
        v78 = v372;
        if (os_log_type_enabled(v250, OS_LOG_TYPE_ERROR))
        {
          v251 = (void *)objc_claimAutoreleasedReturnValue([v14 uuid]);
          v252 = (void *)objc_claimAutoreleasedReturnValue([v14 title]);
          v253 = (void *)objc_claimAutoreleasedReturnValue([0 uuid]);
          v254 = (void *)objc_claimAutoreleasedReturnValue([0 title]);
          *(_DWORD *)buf = 138544130;
          v397 = v251;
          v398 = 2112;
          v399 = v252;
          v400 = 2114;
          v401 = *(double *)&v253;
          v402 = 2112;
          v403 = *(double *)&v254;
          _os_log_impl( (void *)&_mh_execute_header,  v250,  OS_LOG_TYPE_ERROR,  "%{public}@ - %@ failed to update feed-deleted episode %{public}@ - %@",  buf,  0x2Au);

          v87 = v142;
        }

        v151 = 0LL;
        goto LABEL_78;
      }

      v153 = (void *)objc_claimAutoreleasedReturnValue([v151 uuid]);
      [v370 removeObject:v153];

      v154 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v138));
      [v371 removeObject:v154];

      v156 = _MTLogCategoryFeedUpdate(v155);
      __int16 v157 = (os_log_s *)objc_claimAutoreleasedReturnValue(v156);
      if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT))
      {
        double v158 = (void *)objc_claimAutoreleasedReturnValue([v14 uuid]);
        __int16 v159 = (void *)objc_claimAutoreleasedReturnValue([v14 title]);
        v160 = (void *)objc_claimAutoreleasedReturnValue([v151 uuid]);
        __int16 v161 = (void *)objc_claimAutoreleasedReturnValue([v151 title]);
        *(_DWORD *)buf = 138544130;
        v397 = v158;
        v398 = 2112;
        v399 = v159;
        v400 = 2114;
        v401 = *(double *)&v160;
        v402 = 2112;
        v403 = *(double *)&v161;
        _os_log_impl( (void *)&_mh_execute_header,  v157,  OS_LOG_TYPE_DEFAULT,  "%{public}@ - %@ updating feed-deleted episode %{public}@ - %@",  buf,  0x2Au);

        v87 = v142;
      }

      ++v363;

LABEL_74:
      if (v151)
      {
        double v162 = 0;
        v78 = v372;
        goto LABEL_82;
      }

      goto LABEL_77;
    }

    goto LABEL_73;
  }

  v87 = 0LL;
  v381 = 0LL;
  v359 = 0LL;
  v363 = 0LL;
  uint64_t v89 = 0.0;
LABEL_131:
  [v13 saveInCurrentBlock];
  v255 = &OBJC_CLASS___DebugUtil_ptr;
  if (v87 < (unint64_t)[v65 count])
  {
    do
    {
      v256 = (void *)objc_claimAutoreleasedReturnValue([v65 objectAtIndex:v87]);
      v257 = (void *)objc_claimAutoreleasedReturnValue([v256 uuid]);

      if (v257)
      {
        v259 = (void *)objc_claimAutoreleasedReturnValue([v256 uuid]);
        [v370 addObject:v259];

        v260 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v256 storeTrackId]));
        [v371 addObject:v260];
      }

      else
      {
        v261 = _MTLogCategoryFeedUpdate(v258);
        v260 = (os_log_s *)objc_claimAutoreleasedReturnValue(v261);
        if (os_log_type_enabled(v260, OS_LOG_TYPE_ERROR))
        {
          v262 = v87;
          v263 = (void *)objc_claimAutoreleasedReturnValue([v256 title]);
          *(_DWORD *)buf = 138412290;
          v397 = v263;
          _os_log_impl( (void *)&_mh_execute_header,  v260,  OS_LOG_TYPE_ERROR,  "NULL UUID for feedDeletedEpisode removed from the feed, title %@",  buf,  0xCu);

          v87 = v262;
        }
      }

      v265 = _MTLogCategoryFeedUpdate(v264);
      v266 = (os_log_s *)objc_claimAutoreleasedReturnValue(v265);
      if (os_log_type_enabled(v266, OS_LOG_TYPE_DEFAULT))
      {
        v267 = v87;
        v268 = (void *)objc_claimAutoreleasedReturnValue([v14 uuid]);
        v269 = (void *)objc_claimAutoreleasedReturnValue([v14 title]);
        v270 = (void *)objc_claimAutoreleasedReturnValue([v256 uuid]);
        v271 = (void *)objc_claimAutoreleasedReturnValue([v256 title]);
        *(_DWORD *)buf = 138544130;
        v397 = v268;
        v398 = 2112;
        v399 = v269;
        v400 = 2114;
        v401 = *(double *)&v270;
        v402 = 2112;
        v403 = *(double *)&v271;
        _os_log_impl( (void *)&_mh_execute_header,  v266,  OS_LOG_TYPE_DEFAULT,  "%{public}@ - %@ marking episode for deletion from tail end %{public}@ - %@",  buf,  0x2Au);

        uint64_t v14 = v378;
        v255 = &OBJC_CLASS___DebugUtil_ptr;

        v87 = v267;
      }

      ++v87;
      v65 = v373;
    }

    while (v87 < (unint64_t)[v373 count]);
  }

  v272 = (void *)objc_claimAutoreleasedReturnValue([v255[137] fetchRequestWithEntityName:v356]);
  v273 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForEpisodeUuids:](&OBJC_CLASS___MTEpisode, "predicateForEpisodeUuids:", v370));
  [v272 setPredicate:v273];

  v274 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  kEpisodePubDate,  0LL));
  v395 = v274;
  v275 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v395, 1LL));
  [v272 setSortDescriptors:v275];

  [v272 setReturnsObjectsAsFaults:0];
  [v272 setFetchBatchSize:200];
  v387 = 0LL;
  id v13 = v377;
  contexta = v272;
  v276 = (void *)objc_claimAutoreleasedReturnValue([v377 executeFetchRequest:v272 error:&v387]);
  v277 = v387;
  v278 = v277;
  if (v277)
  {
    v279 = _MTLogCategoryFeedUpdate(v277);
    v280 = (os_log_s *)objc_claimAutoreleasedReturnValue(v279);
    if (os_log_type_enabled(v280, OS_LOG_TYPE_ERROR))
    {
      v281 = (void *)objc_claimAutoreleasedReturnValue([v14 uuid]);
      v282 = (void *)objc_claimAutoreleasedReturnValue([v14 title]);
      *(_DWORD *)buf = 138543874;
      v397 = v281;
      v398 = 2112;
      v399 = v282;
      v400 = 2112;
      v401 = *(double *)&v278;
      _os_log_impl( (void *)&_mh_execute_header,  v280,  OS_LOG_TYPE_ERROR,  "%{public}@ - %@ failed to fetch episodes to delete - %@",  buf,  0x20u);
    }
  }

  v361 = v278;
  v367 = [v276 count];
  v383 = 0u;
  v384 = 0u;
  v385 = 0u;
  v386 = 0u;
  id obj = v276;
  v283 = (char *)[obj countByEnumeratingWithState:&v383 objects:v394 count:16];
  v366 = v283;
  if (v283)
  {
    v284 = 0LL;
    v285 = *(void *)v384;
    v286 = v283;
    do
    {
      v287 = 0LL;
      v380 = ~v284;
      v369 = v284;
      v288 = (char *)(v284 + 1);
      do
      {
        if (*(void *)v384 != v285) {
          objc_enumerationMutation(obj);
        }
        v289 = *(void **)(*((void *)&v383 + 1) + 8LL * (void)v287);
        v290 = _MTLogCategoryFeedUpdate(v283);
        v291 = (os_log_s *)objc_claimAutoreleasedReturnValue(v290);
        if (os_log_type_enabled(v291, OS_LOG_TYPE_DEFAULT))
        {
          v292 = v285;
          v293 = (void *)objc_claimAutoreleasedReturnValue([v378 uuid]);
          v294 = (void *)objc_claimAutoreleasedReturnValue([v378 title]);
          v295 = (void *)objc_claimAutoreleasedReturnValue([v289 uuid]);
          v296 = (void *)objc_claimAutoreleasedReturnValue([v289 title]);
          *(_DWORD *)buf = 138544130;
          v397 = v293;
          v398 = 2112;
          v399 = v294;
          v400 = 2114;
          v401 = *(double *)&v295;
          v402 = 2112;
          v403 = *(double *)&v296;
          _os_log_impl( (void *)&_mh_execute_header,  v291,  OS_LOG_TYPE_DEFAULT,  "%{public}@ - %@ deleting episode removed from feed %{public}@ - %@",  buf,  0x2Au);

          id v13 = v377;
          v285 = v292;
        }

        [v289 setFeedDeleted:1];
        v283 = (char *)[v289 setEpisodeLevel:&v287[v381]];
        ++v287;
        ++v288;
      }

      while (v286 != v287);
      v284 = (unint64_t)&v286[v369];
      v283 = (char *)[obj countByEnumeratingWithState:&v383 objects:v394 count:16];
      v286 = v283;
      v381 += (uint64_t)v287;
    }

    while (v283);
  }

  [v13 saveInCurrentBlock];
  uint64_t v10 = v349;
  uint64_t v14 = v378;
  if (v359 && !-[MTBaseFeedManager isSubscribingWithFeedUrl:](v372, "isSubscribingWithFeedUrl:", v358))
  {
    v297 = (void *)objc_claimAutoreleasedReturnValue([v13 episodeForUuid:v359]);
    [v297 metadataTimestamp];
    if (fabs(v298) <= 2.22044605e-16 && [v378 subscribed])
    {
      -[MTBaseFeedManager markEpisodeAsFirstSeen:](v372, "markEpisodeAsFirstSeen:", v297);
      [v297 setPlayState:2 manually:0 source:6];
      [v297 setMetadataTimestamp:0.0];
      [v297 setMetadataFirstSyncEligible:1];
    }
  }

  if ([v345 count])
  {
    v299 = (void *)objc_claimAutoreleasedReturnValue([v378 uuid]);
    v300 = (void *)objc_claimAutoreleasedReturnValue([v378 managedObjectContext]);
    v301 = (void *)objc_claimAutoreleasedReturnValue( +[MTRecencyUtil upNextForPodcastUuid:ctx:]( &OBJC_CLASS___MTRecencyUtil,  "upNextForPodcastUuid:ctx:",  v299,  v300));
    v302 = (void *)objc_claimAutoreleasedReturnValue([v301 episodeUuid]);

    v303 = v359;
    if (v302) {
      v303 = v302;
    }
    v304 = v303;
    if ([v345 containsObject:v304])
    {
      v305 = (void *)objc_claimAutoreleasedReturnValue([v13 episodeForUuid:v302]);
      v306 = _MTLogCategoryFeedUpdate(v305);
      v307 = (os_log_s *)objc_claimAutoreleasedReturnValue(v306);
      if (os_log_type_enabled(v307, OS_LOG_TYPE_DEFAULT))
      {
        v308 = (void *)objc_claimAutoreleasedReturnValue([v378 uuid]);
        v309 = (void *)objc_claimAutoreleasedReturnValue([v378 title]);
        v310 = (void *)objc_claimAutoreleasedReturnValue([v305 uuid]);
        v311 = (void *)objc_claimAutoreleasedReturnValue([v305 title]);
        *(_DWORD *)buf = 138544130;
        v397 = v308;
        v398 = 2112;
        v399 = v309;
        v400 = 2114;
        v401 = *(double *)&v310;
        v402 = 2112;
        v403 = *(double *)&v311;
        _os_log_impl( (void *)&_mh_execute_header,  v307,  OS_LOG_TYPE_DEFAULT,  "%{public}@ - %@ Found new smart play episode from episod entitlement changed %{public}@ - %@",  buf,  0x2Au);

        uint64_t v14 = v378;
        uint64_t v10 = v349;
      }

      -[MTBaseFeedManager markEpisodeAsFirstSeen:](v372, "markEpisodeAsFirstSeen:", v305);
      [v305 setSentNotification:0];
    }
  }

  v312 = (void *)objc_claimAutoreleasedReturnValue([v10 imageURL]);
  if ([v312 length]) {
    v313 = (void *)objc_claimAutoreleasedReturnValue([v10 imageURL]);
  }
  else {
    v313 = (void *)objc_claimAutoreleasedReturnValue([v10 globalImageURL]);
  }
  v65 = v373;
  v314 = v313;

  if ([(id)objc_opt_class(v372) _fetchSmallestPicturePossible])
  {
    v315 = (void *)objc_claimAutoreleasedReturnValue( +[MTResizedArtworkURLProvider sharedInstance]( &OBJC_CLASS___MTResizedArtworkURLProvider,  "sharedInstance"));
    v316 = objc_msgSend( v315,  "resizedArtworkURLString:withDimension:",  v314,  objc_msgSend((id)objc_opt_class(v372), "_maxArtworkSize"));
    v317 = objc_claimAutoreleasedReturnValue(v316);

    v314 = (id)v317;
  }

  if (v314)
  {
    v318 = (void *)objc_claimAutoreleasedReturnValue([v14 imageURL]);
    v319 = [v318 isEqualToString:v314];

    if ((v319 & 1) == 0)
    {
      v321 = _MTLogCategoryFeedUpdate(v320);
      v322 = (os_log_s *)objc_claimAutoreleasedReturnValue(v321);
      if (os_log_type_enabled(v322, OS_LOG_TYPE_DEFAULT))
      {
        v323 = (void *)objc_claimAutoreleasedReturnValue([v14 uuid]);
        v324 = (void *)objc_claimAutoreleasedReturnValue([v14 title]);
        *(_DWORD *)buf = 138543874;
        v397 = v323;
        v398 = 2112;
        v399 = v324;
        v400 = 2112;
        v401 = *(double *)&v314;
        _os_log_impl( (void *)&_mh_execute_header,  v322,  OS_LOG_TYPE_DEFAULT,  "%{public}@ - %@ artwork url did change %@",  buf,  0x20u);
      }

      [v14 setNeedsArtworkUpdate:1];
    }
  }

  [v14 setImageURL:v314];
  v325 = (void *)objc_claimAutoreleasedReturnValue([v10 uberBackgroundImageURL]);
  [v14 setUberBackgroundImageURL:v325];
  v326 = (void *)objc_claimAutoreleasedReturnValue([v10 uberBackgroundJoeColor]);
  [v14 setUberBackgroundJoeColor:v326];

  [v14 feedChangedDate];
  if (v89 > v327) {
    [v14 setFeedChangedDate:v89];
  }
  __int128 v23 = v357;
  __int128 v25 = v355;
  if (v366) {
    [v14 markPlaylistsForUpdate];
  }
  [v13 saveInCurrentBlock];

  __int16 v30 = v344;
  double v67 = 0LL;
  double v72 = v361;
LABEL_183:

  objc_autoreleasePoolPop(v353);
  if (v67)
  {
LABEL_184:
    v328 = 0;
    goto LABEL_188;
  }

  v382 = +[MTFeedUpdateMetricsDataKey newEpisodeCount](&OBJC_CLASS___MTFeedUpdateMetricsDataKey, "newEpisodeCount");
  v392[0] = v382;
  v329 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v363));
  v393[0] = v329;
  v330 = (void *)objc_claimAutoreleasedReturnValue( +[MTFeedUpdateMetricsDataKey deletedEpisodeCount]( &OBJC_CLASS___MTFeedUpdateMetricsDataKey,  "deletedEpisodeCount"));
  v392[1] = v330;
  v331 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v367));
  v393[1] = v331;
  v332 = (void *)objc_claimAutoreleasedReturnValue( +[MTFeedUpdateMetricsDataKey totalEpisodeCount]( &OBJC_CLASS___MTFeedUpdateMetricsDataKey,  "totalEpisodeCount"));
  v392[2] = v332;
  v333 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v346));
  v393[2] = v333;
  v334 = (void *)objc_claimAutoreleasedReturnValue( +[MTFeedUpdateMetricsDataKey podcastStoreId]( &OBJC_CLASS___MTFeedUpdateMetricsDataKey,  "podcastStoreId"));
  v392[3] = v334;
  v335 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v347));
  v393[3] = v335;
  v336 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsDataKey source](&OBJC_CLASS___MTFeedUpdateMetricsDataKey, "source"));
  v392[4] = v336;
  v337 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a6));
  v393[4] = v337;
  v338 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v393,  v392,  5LL));

  v340 = _MTLogCategoryFeedUpdate(v339);
  v341 = (os_log_s *)objc_claimAutoreleasedReturnValue(v340);
  if (os_log_type_enabled(v341, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543618;
    v397 = v357;
    v398 = 2112;
    v399 = v338;
    _os_log_impl( (void *)&_mh_execute_header,  v341,  OS_LOG_TYPE_DEFAULT,  "%{public}@ - processed feed and found new episodes: %@",  buf,  0x16u);
  }

  v342 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsAction parser](&OBJC_CLASS___MTFeedUpdateMetricsAction, "parser"));
  +[IMMetrics recordUserAction:dataSource:withData:]( &OBJC_CLASS___IMMetrics,  "recordUserAction:dataSource:withData:",  v342,  0LL,  v338);

  __int128 v23 = v357;
  uint64_t v10 = v349;
  __int128 v25 = v355;
  v328 = v348;
LABEL_188:

  return v328;
}

  sub_100157320(v52);
  [v92 saveInCurrentBlock];
  int v71 = v95;
  if (!v95)
  {
    v75 = _swiftEmptyArrayStorage;
    double v72 = v99;
    goto LABEL_84;
  }

  double v72 = v99;
  if (v95 < 1)
  {
    __break(1u);
LABEL_96:
    id v88 = sub_100134284(0LL, (unint64_t *)&qword_1002B6750, &OBJC_CLASS___NSManagedObjectID_ptr);
    id result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v88);
    __break(1u);
  }

  else
  {
    uint64_t v73 = v99 & 0xC000000000000001LL;
    swift_bridgeObjectRetain(v99);
    v74 = 0LL;
    v75 = _swiftEmptyArrayStorage;
    do
    {
      if (v73) {
        v76 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v74, v72);
      }
      else {
        v76 = *(id *)(v72 + 8 * v74 + 32);
      }
      v77 = v76;
      v78 = [v76 uuid];
      if (v78)
      {
        v79 = v78;
        id v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
        v82 = v81;

        if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0) {
          v75 = sub_100132460(0LL, v75[2] + 1LL, 1, v75);
        }
        id v84 = v75[2];
        v83 = v75[3];
        if (v84 >= v83 >> 1) {
          v75 = sub_100132460((void *)(v83 > 1), v84 + 1, 1, v75);
        }
        v75[2] = v84 + 1;
        unint64_t v85 = &v75[2 * v84];
        v85[4] = v80;
        v85[5] = v82;
        double v72 = v99;
      }

      else
      {
      }

      ++v74;
    }

    while (v71 != v74);
    swift_bridgeObjectRelease(v72);
LABEL_84:
    swift_bridgeObjectRelease(v72);
    uint64_t v86 = v90;
    os_log_s *v91 = v75;
    return swift_bridgeObjectRelease(v86);
  }

  return result;
}

void sub_10009B33C(_Unwind_Exception *a1)
{
}

uint64_t sub_10009B388(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10009B398(uint64_t a1)
{
}

void sub_10009B3A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerController]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) siriAssetInfo]);
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 88);
  char v8 = *(_BYTE *)(a1 + 89);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10009B4B8;
  v10[3] = &unk_100243228;
  id v11 = *(id *)(a1 + 56);
  id v12 = *(id *)(a1 + 64);
  BYTE1(v9) = v8;
  LOBYTE(v9) = 1;
  +[MTSetPlaybackQueueUtil setPlaybackQueueForRequest:playerController:siriAssetInfo:enqueuer:savePlayHistory:startPlayback:forceLocal:isMagicMoment:completion:]( &OBJC_CLASS___MTSetPlaybackQueueUtil,  "setPlaybackQueueForRequest:playerController:siriAssetInfo:enqueuer:savePlayHistory:startPlayback:forceLocal:isMagicM oment:completion:",  v2,  v3,  v4,  v5,  v6,  v7,  v9,  v10);
}

void sub_10009B4B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _MTLogCategoryMediaRemote(a1);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v10 = 138412802;
    uint64_t v11 = v8;
    __int16 v12 = 2048;
    uint64_t v13 = a2;
    __int16 v14 = 2048;
    uint64_t v15 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "SetPlaybackQueue %@ has status %li and queueType %li",  (uint8_t *)&v10,  0x20u);
  }

  if (*(void *)(a1 + 40))
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[MTSetPlaybackQueueUtil queueCommandCustomStatusForRequestStatus:queueType:]( &OBJC_CLASS___MTSetPlaybackQueueUtil,  "queueCommandCustomStatusForRequestStatus:queueType:",  a2,  a3));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_10009B5B8(uint64_t a1, void *a2, char a3)
{
  id v6 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), a2);
  id v7 = [*(id *)(a1 + 32) length];
  if (v7 && (id v7 = [*(id *)(a1 + 40) length]) != 0)
  {
    id v7 = [*(id *)(a1 + 32) isEqualToString:*(void *)(a1 + 40)];
    BOOL v8 = 0;
    if (v6 && (_DWORD)v7 && (a3 & 1) == 0) {
      BOOL v8 = *(_BYTE *)(a1 + 72) == 0;
    }
  }

  else
  {
    BOOL v8 = 0;
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = v8;
  uint64_t v9 = _MTLogCategoryMediaRemote(v7);
  int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
    v12[0] = 67109120;
    v12[1] = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Saving play history for request: %d",  (uint8_t *)v12,  8u);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10009B6F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) siriAssetInfo]);
  uint64_t v4 = *(void **)(a1 + 48);
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10009B798;
  v6[3] = &unk_1002432A0;
  id v7 = v4;
  +[MTSetPlaybackQueueUtil subscribeWithCommandURL:siriAssetInfo:requester:completion:]( &OBJC_CLASS___MTSetPlaybackQueueUtil,  "subscribeWithCommandURL:siriAssetInfo:requester:completion:",  v2,  v3,  v5,  v6);
}

void sub_10009B798(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = _MTLogCategoryMediaRemote(a1);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v8 = @"FAILED";
    if (a2) {
      BOOL v8 = @"SUCCEEDED";
    }
    int v13 = 138412546;
    __int16 v14 = v8;
    __int16 v15 = 2048;
    uint64_t v16 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Siri Subscribed: command %@ with MTSubscribeErrorCode %li",  (uint8_t *)&v13,  0x16u);
  }

  if (a2)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[SyncControllerFactory resolvedSyncController]( &OBJC_CLASS____TtC8Podcasts21SyncControllerFactory,  "resolvedSyncController"));
    [v9 syncSubscriptions];
  }

  if (*(void *)(a1 + 32))
  {
    int64_t v10 = +[MTSetPlaybackQueueUtil subscribeCommandStatusForErrorCode:]( &OBJC_CLASS___MTSetPlaybackQueueUtil,  "subscribeCommandStatusForErrorCode:",  a3);
    uint64_t v11 = *(void *)(a1 + 32);
    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue( +[MPRemoteCommandStatus statusWithCode:]( &OBJC_CLASS___MPRemoteCommandStatus,  "statusWithCode:",  v10));
    (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v12);
  }

void sub_10009B8D4(void *a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), a2);
    (*(void (**)(void))(a1[5] + 16LL))();
  }

  else
  {
    uint64_t v5 = _MTLogCategoryMediaRemote(0LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Failed to lookup requesterUserId. This is fatal",  v9,  2u);
    }

    uint64_t v7 = a1[4];
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue( +[MPRemoteCommandStatus statusWithCode:]( &OBJC_CLASS___MPRemoteCommandStatus,  "statusWithCode:",  1401LL));
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
}

void sub_10009B9AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _MTLogCategoryMediaRemote(a1);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) trackIdentifiers]);
    int v10 = 138412802;
    uint64_t v11 = v8;
    __int16 v12 = 2048;
    uint64_t v13 = a2;
    __int16 v14 = 2048;
    uint64_t v15 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "RemoteSetPlaybackQueue %@ has status %li and queueType %li",  (uint8_t *)&v10,  0x20u);
  }

  if (*(void *)(a1 + 40))
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[MTSetPlaybackQueueUtil queueCommandCustomStatusForRequestStatus:queueType:]( &OBJC_CLASS___MTSetPlaybackQueueUtil,  "queueCommandCustomStatusForRequestStatus:queueType:",  a2,  a3));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_10009BAC4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[MPRemoteCommandStatus statusWithCode:](&OBJC_CLASS___MPRemoteCommandStatus, "statusWithCode:", 0LL));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10009BE5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = _MTLogCategoryMediaRemote(v6);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      uint64_t v20 = v10;
      __int16 v21 = 2112;
      __int128 v22 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "SetPlaybackSession: Failed to lookup account DSID %@ with error %@",  buf,  0x16u);
    }
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerController]);
  __int16 v12 = *(void **)(a1 + 48);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_10009BFEC;
  v15[3] = &unk_100243318;
  id v13 = v12;
  uint64_t v14 = *(void *)(a1 + 40);
  id v16 = v13;
  uint64_t v17 = v14;
  id v18 = *(id *)(a1 + 56);
  +[MTRemoteSetPlaybackQueueUtil decodeAndSetPlaybackQueueForController:fromIdentifiers:enqueuer:accountLookupFailed:startPlayback:upNextQueueIntent:completion:]( &OBJC_CLASS___MTRemoteSetPlaybackQueueUtil,  "decodeAndSetPlaybackQueueForController:fromIdentifiers:enqueuer:accountLookupFailed:startPlayback:upNextQueueIntent:completion:",  v11,  v13,  v5,  v7 != 0LL,  0LL,  2LL,  v15);
}

void sub_10009BFEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _MTLogCategoryMediaRemote(a1);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = [*(id *)(a1 + 32) count];
    int v11 = 134218496;
    id v12 = v8;
    __int16 v13 = 2048;
    uint64_t v14 = a2;
    __int16 v15 = 2048;
    uint64_t v16 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "SetPlaybackSession set %lu identifiers and has status %li and queueType %li",  (uint8_t *)&v11,  0x20u);
  }

  if (a2 == 1)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerController]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 player]);
    [v10 setPlaybackSpeed:0];
  }

  if (*(void *)(a1 + 48))
  {
    +[MTSetPlaybackQueueUtil queueCommandStatusForRequestStatus:queueType:]( &OBJC_CLASS___MTSetPlaybackQueueUtil,  "queueCommandStatusForRequestStatus:queueType:",  a2,  a3);
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

void sub_10009C330(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) player]);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 manifest]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 currentItem]);

  if (v4)
  {
    unsigned int v5 = [*(id *)(a1 + 32) playWithReason:7 interruptEvent:*(unsigned __int8 *)(a1 + 56)];
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6)
    {
      if (v5) {
        uint64_t v7 = 0LL;
      }
      else {
        uint64_t v7 = 200LL;
      }
      (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v6, v7);
    }
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerController]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_10009C450;
    v9[3] = &unk_100243368;
    id v10 = *(id *)(a1 + 48);
    +[MTSetPlaybackQueueUtil setAutoResumePlaybackQueueAndStartPlayback:playerController:forceLocal:reason:interactive:completion:]( &OBJC_CLASS___MTSetPlaybackQueueUtil,  "setAutoResumePlaybackQueueAndStartPlayback:playerController:forceLocal:reason:interactive:completion:",  1LL,  v8,  0LL,  7LL,  0LL,  v9);
  }

uint64_t sub_10009C450(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    if (a2 == 1) {
      uint64_t v3 = 0LL;
    }
    else {
      uint64_t v3 = 200LL;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, v3);
  }

  return result;
}

uint64_t sub_10009C544(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10009D16C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
  unsigned int v5 = v3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v5, 1LL));
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v4);
}

void sub_10009DCB8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___MTPodcastDerivedPropertyObserver);
  uint64_t v2 = (void *)qword_1002B6AA8;
  qword_1002B6AA8 = (uint64_t)v1;
}

void sub_10009E07C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _processLatestPersistentHistoryTransactions];
}

void sub_10009E144( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10009E1DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10009E26C(uint64_t a1)
{
  if (!*(_BYTE *)(*(void *)(a1 + 32) + 32LL))
  {
    uint64_t v2 = _MTLogCategoryDatabase();
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "MTPodcastDerivedPropertyObserver did pause processing.",  v4,  2u);
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 32LL) = 1;
  }

void *sub_10009E368(void *result)
{
  if (*(_BYTE *)(result[4] + 32LL))
  {
    uint64_t v1 = result;
    uint64_t v2 = _MTLogCategoryDatabase(result);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "MTPodcastDerivedPropertyObserver did resume processing.",  v4,  2u);
    }

    *(_BYTE *)(v1[4] + 32LL) = 0;
    return [(id)v1[4] processLatestPersistentHistoryTransactions];
  }

  return result;
}

void sub_10009E444(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"DerivedPropertyObserverPersistentHistoryToken"]);

  if (v3)
  {
    id v14 = 0LL;
    id v5 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  objc_opt_class(&OBJC_CLASS___NSPersistentHistoryToken),  v3,  &v14);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    uint64_t v7 = (os_log_s *)v14;
    id v8 = v7;
    if (v7)
    {
      uint64_t v9 = _MTLogCategoryDatabase(v7);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v16 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Derived Property Observer encountered error trying to fetch previous history token %@",  buf,  0xCu);
      }
    }

    else
    {
      uint64_t v12 = *(void *)(a1 + 32);
      id v13 = v6;
      id v10 = *(os_log_s **)(v12 + 96);
      *(void *)(v12 + 96) = v13;
    }
  }

  else
  {
    uint64_t v11 = _MTLogCategoryDatabase(v4);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Derived Property Observer has never processed persistent history data.",  buf,  2u);
    }
  }
}

void sub_10009E878(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  id v12 = 0LL;
  id v3 = [v2 executeRequest:v1 error:&v12];
  id v4 = v12;
  uint64_t v5 = _MTLogCategoryDatabase(v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = v6;
  if (v4)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v14 = v4;
      id v8 = "Derived Property Observer encountered error deleting history %@";
      uint64_t v9 = v7;
      os_log_type_t v10 = OS_LOG_TYPE_ERROR;
      uint32_t v11 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, buf, v11);
    }
  }

  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v14) = 14;
    id v8 = "Derived Property Observer deleted persistent history older than %d days ago";
    uint64_t v9 = v7;
    os_log_type_t v10 = OS_LOG_TYPE_INFO;
    uint32_t v11 = 8;
    goto LABEL_6;
  }
}

id sub_10009EA84(uint64_t a1)
{
  return _[*(id *)(a1 + 32) beginBackgroundTask:@"com.apple.podcasts.MTPodcastDerivedPropertyObserver.updateDerivedProperties"];
}

void sub_10009EA94(id *a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v2 = a1[4];
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        [a1[5] episodeResultsChangedForPodcastUuid:*(void *)(*((void *)&v10 + 1) + 8 * (void)v6)];
        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v4);
  }

  dispatch_time_t v7 = dispatch_time(0LL, 5000000000LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10009EBF0;
  block[3] = &unk_10023FF98;
  id v9 = a1[6];
  dispatch_after(v7, &_dispatch_main_q, block);
}

id sub_10009EBF0(uint64_t a1)
{
  return [*(id *)(a1 + 32) endBackgroundTask];
}

void sub_10009EE88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009EEBC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10009EECC(uint64_t a1)
{
}

void sub_10009EED4(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8LL);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v2 executeRequest:v3 error:&obj]);
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = *(void *)(a1[6] + 8LL);
  dispatch_time_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_10009FC4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, id location)
{
}

id sub_10009FCB0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) beginBackgroundTask:@"com.apple.podcasts.MTPodcastDerivedPropertyObserver.processPersistentHistoryTransactions"];
}

void sub_10009FCC0(uint64_t a1)
{
  __int128 v110 = 0u;
  __int128 v111 = 0u;
  __int128 v112 = 0u;
  __int128 v113 = 0u;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v110 objects:v121 count:16];
  if (v2)
  {
    id v4 = v2;
    uint64_t v5 = *(void *)v111;
    uint64_t v88 = kMTPodcastEntityName;
    uint64_t v82 = kPodcastUuid;
    uint64_t v87 = kMTEpisodeEntityName;
    uint64_t v81 = kEpisodePodcastUuid;
    *(void *)&__int128 v3 = 134349056LL;
    __int128 v74 = v3;
    uint64_t v75 = *(void *)v111;
    do
    {
      uint64_t v6 = 0LL;
      id v76 = v4;
      do
      {
        if (*(void *)v111 != v5) {
          objc_enumerationMutation(obj);
        }
        dispatch_time_t v7 = *(void **)(*((void *)&v110 + 1) + 8LL * (void)v6);
        id v8 = objc_autoreleasePoolPush();
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 author]);
        unsigned __int8 v10 = [v9 isEqualToString:@"MTPodcastDerivedPropertyObserver"];

        if ((v10 & 1) == 0)
        {
          v79 = v8;
          id v80 = v6;
          unint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
          id v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
          v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
          __int128 v106 = 0u;
          __int128 v107 = 0u;
          __int128 v108 = 0u;
          __int128 v109 = 0u;
          v78 = v7;
          __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v7 changes]);
          id v12 = [v11 countByEnumeratingWithState:&v106 objects:v120 count:16];
          if (v12)
          {
            id v13 = v12;
            uint64_t v14 = *(void *)v107;
            do
            {
              for (i = 0LL; i != v13; i = (char *)i + 1)
              {
                if (*(void *)v107 != v14) {
                  objc_enumerationMutation(v11);
                }
                uint64_t v16 = *(void **)(*((void *)&v106 + 1) + 8LL * (void)i);
                uint64_t v17 = *(void *)(*(void *)(a1 + 72) + 8LL);
                if (*(_BYTE *)(v17 + 24))
                {
                  unsigned __int8 v18 = 1;
                }

                else
                {
                  unsigned __int8 v18 = [*(id *)(a1 + 40) _shouldUpdatePodcastsStatsForChange:*(void *)(*((void *)&v106 + 1) + 8 * (void)i)];
                  uint64_t v17 = *(void *)(*(void *)(a1 + 72) + 8LL);
                }

                *(_BYTE *)(v17 + 24) = v18;
                if (objc_msgSend(*(id *)(a1 + 40), "_changeContainsRelevantEpisodeChanges:", v16, v74))
                {
                  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v16 changedObjectID]);
                  [v85 addObject:v19];
                }

                if ([*(id *)(a1 + 40) _changeContainsRelevantPodcastChanges:v16])
                {
                  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v16 changedObjectID]);
                  [v84 addObject:v20];
                }

                if ([*(id *)(a1 + 40) _changeContainsRelevantChannelChanges:v16])
                {
                  __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v16 changedObjectID]);
                  [v83 addObject:v21];
                }

                __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v16 changedObjectID]);
                __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v22 entity]);
                __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v23 name]);

                id v25 = [v16 changeType];
                else {
                  BOOL v26 = 0;
                }
                if (v26)
                {
                  __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v16 tombstone]);
                  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKey:v82]);

                  if (v28) {
                    [*(id *)(a1 + 48) addObject:v28];
                  }
                }

                if ([v24 isEqualToString:v87] && v25 == (id)2)
                {
                  id v29 = (void *)objc_claimAutoreleasedReturnValue([v16 tombstone]);
                  __int16 v30 = (void *)objc_claimAutoreleasedReturnValue([v29 objectForKey:v81]);

                  if (v30) {
                    [*(id *)(a1 + 56) addObject:v30];
                  }
                }
              }

              id v13 = [v11 countByEnumeratingWithState:&v106 objects:v120 count:16];
            }

            while (v13);
          }

          __int128 v104 = 0u;
          __int128 v105 = 0u;
          __int128 v102 = 0u;
          __int128 v103 = 0u;
          uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v85 allObjects]);
          id v32 = [v31 countByEnumeratingWithState:&v102 objects:v119 count:16];
          if (v32)
          {
            id v33 = v32;
            uint64_t v34 = *(void *)v103;
            do
            {
              for (j = 0LL; j != v33; j = (char *)j + 1)
              {
                if (*(void *)v103 != v34) {
                  objc_enumerationMutation(v31);
                }
                uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 64),  "objectWithID:",  *(void *)(*((void *)&v102 + 1) + 8 * (void)j),  v74));
                __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([v36 podcastUuid]);

                if (v37)
                {
                  CGRect v39 = (void *)objc_claimAutoreleasedReturnValue([v36 podcast]);
                  unsigned int v40 = [v39 hidden];

                  if (v40) {
                    id v41 = *(void **)(a1 + 48);
                  }
                  else {
                    id v41 = *(void **)(a1 + 56);
                  }
                  uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue([v36 podcastUuid]);
                  [v41 addObject:v43];
                }

                else
                {
                  uint64_t v42 = _MTLogCategoryDatabase(v38);
                  uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                  {
                    __int128 v44 = (void *)objc_claimAutoreleasedReturnValue([v36 uuid]);
                    *(_DWORD *)buf = 138543362;
                    id v118 = v44;
                    _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "Derived Property Observer has no podcast uuid for episode %{public}@",  buf,  0xCu);
                  }
                }
              }

              id v33 = [v31 countByEnumeratingWithState:&v102 objects:v119 count:16];
            }

            while (v33);
          }

          __int128 v100 = 0u;
          __int128 v101 = 0u;
          __int128 v98 = 0u;
          __int128 v99 = 0u;
          __int128 v45 = (void *)objc_claimAutoreleasedReturnValue([v84 allObjects]);
          id v46 = [v45 countByEnumeratingWithState:&v98 objects:v116 count:16];
          if (v46)
          {
            id v47 = v46;
            uint64_t v48 = *(void *)v99;
            do
            {
              for (k = 0LL; k != v47; k = (char *)k + 1)
              {
                if (*(void *)v99 != v48) {
                  objc_enumerationMutation(v45);
                }
                __int128 v50 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 64),  "objectWithID:",  *(void *)(*((void *)&v98 + 1) + 8 * (void)k),  v74));
                __int128 v51 = (void *)objc_claimAutoreleasedReturnValue([v50 uuid]);

                if (v51)
                {
                  else {
                    int v52 = *(void **)(a1 + 56);
                  }
                  id v53 = (void *)objc_claimAutoreleasedReturnValue([v50 uuid]);
                  [v52 addObject:v53];
                }
              }

              id v47 = [v45 countByEnumeratingWithState:&v98 objects:v116 count:16];
            }

            while (v47);
          }

          __int128 v96 = 0u;
          __int128 v97 = 0u;
          __int128 v94 = 0u;
          __int128 v95 = 0u;
          id v86 = (id)objc_claimAutoreleasedReturnValue([v83 allObjects]);
          id v54 = [v86 countByEnumeratingWithState:&v94 objects:v115 count:16];
          if (v54)
          {
            id v55 = v54;
            uint64_t v89 = *(void *)v95;
            do
            {
              for (m = 0LL; m != v55; m = (char *)m + 1)
              {
                if (*(void *)v95 != v89) {
                  objc_enumerationMutation(v86);
                }
                v57 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 64),  "objectWithID:",  *(void *)(*((void *)&v94 + 1) + 8 * (void)m),  v74));
                __int128 v90 = 0u;
                __int128 v91 = 0u;
                __int128 v92 = 0u;
                __int128 v93 = 0u;
                v58 = (void *)objc_claimAutoreleasedReturnValue([v57 podcasts]);
                id v59 = [v58 countByEnumeratingWithState:&v90 objects:v114 count:16];
                if (v59)
                {
                  id v60 = v59;
                  uint64_t v61 = *(void *)v91;
                  do
                  {
                    for (n = 0LL; n != v60; n = (char *)n + 1)
                    {
                      if (*(void *)v91 != v61) {
                        objc_enumerationMutation(v58);
                      }
                      v63 = *(void **)(*((void *)&v90 + 1) + 8LL * (void)n);
                      v64 = (void *)objc_claimAutoreleasedReturnValue([v63 uuid]);

                      if (v64)
                      {
                        else {
                          v65 = *(void **)(a1 + 56);
                        }
                        float v66 = (void *)objc_claimAutoreleasedReturnValue([v63 uuid]);
                        [v65 addObject:v66];
                      }
                    }

                    id v60 = [v58 countByEnumeratingWithState:&v90 objects:v114 count:16];
                  }

                  while (v60);
                }
              }

              id v55 = [v86 countByEnumeratingWithState:&v94 objects:v115 count:16];
            }

            while (v55);
          }

          uint64_t v68 = _MTLogCategoryDatabase(v67);
          double v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
          if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
          {
            id v70 = [v78 transactionNumber];
            *(_DWORD *)buf = v74;
            id v118 = v70;
            _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_INFO,  "Derived Property Observer processed transaction %{public}lld",  buf,  0xCu);
          }

          uint64_t v71 = objc_claimAutoreleasedReturnValue([v78 token]);
          uint64_t v72 = *(void *)(*(void *)(a1 + 80) + 8LL);
          uint64_t v73 = *(void **)(v72 + 40);
          *(void *)(v72 + 40) = v71;

          uint64_t v5 = v75;
          id v4 = v76;
          id v8 = v79;
          uint64_t v6 = v80;
        }

        objc_autoreleasePoolPop(v8);
        uint64_t v6 = (char *)v6 + 1;
      }

      while (v6 != v4);
      id v4 = [obj countByEnumeratingWithState:&v110 objects:v121 count:16];
    }

    while (v4);
  }
}

void sub_1000A053C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = kMTPodcastEntityName;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcast predicateForNotHiddenNotImplicitlyFollowedPodcasts]( &OBJC_CLASS___MTPodcast,  "predicateForNotHiddenNotImplicitlyFollowedPodcasts"));
  uint64_t v5 = kPodcastUuid;
  uint64_t v51 = kPodcastUuid;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v51, 1LL));
  dispatch_time_t v7 = (void *)objc_claimAutoreleasedReturnValue([v2 objectsInEntity:v3 predicate:v4 propertiesToFetch:v6 batchSize:0]);

  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  id v8 = v7;
  id v9 = [v8 countByEnumeratingWithState:&v42 objects:v50 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v43;
    do
    {
      for (i = 0LL; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v43 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v42 + 1) + 8LL * (void)i);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 uuid]);

        if (v14)
        {
          uint64_t v15 = *(void **)(a1 + 40);
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v13 uuid]);
          [v15 addObject:v16];
        }
      }

      id v10 = [v8 countByEnumeratingWithState:&v42 objects:v50 count:16];
    }

    while (v10);
  }

  uint64_t v17 = *(void **)(a1 + 32);
  unsigned __int8 v18 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcast predicateForHiddenOrImplicitlyFollowedPodcasts]( &OBJC_CLASS___MTPodcast,  "predicateForHiddenOrImplicitlyFollowedPodcasts"));
  uint64_t v49 = v5;
  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v49, 1LL));
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v17 objectsInEntity:v3 predicate:v18 propertiesToFetch:v19 batchSize:0]);

  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  id v21 = v20;
  id v22 = [v21 countByEnumeratingWithState:&v38 objects:v48 count:16];
  if (v22)
  {
    id v23 = v22;
    uint64_t v24 = *(void *)v39;
    do
    {
      for (j = 0LL; j != v23; j = (char *)j + 1)
      {
        if (*(void *)v39 != v24) {
          objc_enumerationMutation(v21);
        }
        BOOL v26 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)j);
        __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "uuid", (void)v38));

        if (v27)
        {
          uint64_t v28 = *(void **)(a1 + 48);
          id v29 = (void *)objc_claimAutoreleasedReturnValue([v26 uuid]);
          [v28 addObject:v29];
        }
      }

      id v23 = [v21 countByEnumeratingWithState:&v38 objects:v48 count:16];
    }

    while (v23);
  }

  __int16 v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) persistentStoreCoordinator]);
  uint64_t v31 = objc_claimAutoreleasedReturnValue([v30 currentPersistentHistoryTokenFromStores:0]);
  uint64_t v32 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v33 = *(void **)(v32 + 40);
  *(void *)(v32 + 40) = v31;

  uint64_t v35 = _MTLogCategoryDatabase(v34);
  uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v37 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
    *(_DWORD *)buf = 138412290;
    uint64_t v47 = v37;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Derived Property Observer fetched latest token %@",  buf,  0xCu);
  }
}

void sub_1000A0898(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    id v3 = *(id *)(a1 + 32);
    id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v10;
      do
      {
        uint64_t v6 = 0LL;
        do
        {
          if (*(void *)v10 != v5) {
            objc_enumerationMutation(v3);
          }
          uint64_t v7 = *(void *)(*((void *)&v9 + 1) + 8LL * (void)v6);
          id v8 = WeakRetained[5];
          objc_sync_enter(v8);
          objc_msgSend(WeakRetained[5], "removeObjectForKey:", v7, (void)v9);
          objc_sync_exit(v8);

          [WeakRetained notifyObserversForPodcast:v7];
          uint64_t v6 = (char *)v6 + 1;
        }

        while (v4 != v6);
        id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }

      while (v4);
    }
  }
}

void sub_1000A09D0(_Unwind_Exception *a1)
{
}

void sub_1000A09EC(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryDatabase(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Derived Property Observer will update stats for podcasts",  v5,  2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained reportStatsForPodcasts];
}

void sub_1000A0A68(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _setLastProcessedPersistentHistoryToken:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
}

id sub_1000A0AAC(uint64_t a1)
{
  return [*(id *)(a1 + 32) endBackgroundTask];
}

void sub_1000A0E78( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43)
{
}

void sub_1000A0ED4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[MTEpisode predicateForIsFromiTunesSync:]( &OBJC_CLASS___MTEpisode,  "predicateForIsFromiTunesSync:",  1LL));
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 32) countOfObjectsInEntity:kMTEpisodeEntityName predicate:v2];
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = kMTPodcastEntityName;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcast predicateForNotHiddenNotImplicitlyFollowedPodcasts]( &OBJC_CLASS___MTPodcast,  "predicateForNotHiddenNotImplicitlyFollowedPodcasts"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 88) allObjects]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 objectsInEntity:v4 predicate:v5 propertiesToFetch:v6 batchSize:0]);

  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v7 count];
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v8 = v7;
  id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v15;
    do
    {
      for (i = 0LL; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v15 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
      }

      id v10 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v10);
  }
}

void sub_1000A12B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000A12DC(uint64_t a1)
{
  id v19 = (id)objc_claimAutoreleasedReturnValue( +[MTEpisode predicateForUserEpisodesOnPodcastUuid:ctx:]( &OBJC_CLASS___MTEpisode,  "predicateForUserEpisodesOnPodcastUuid:ctx:",  *(void *)(a1 + 32),  *(void *)(a1 + 40)));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[MTEpisode predicateForEpisodesOnUnplayedTabOnPodcastUuid:ctx:]( &OBJC_CLASS___MTEpisode,  "predicateForEpisodesOnUnplayedTabOnPodcastUuid:ctx:",  *(void *)(a1 + 32),  *(void *)(a1 + 40)));
  kdebug_trace(723517980LL, 0LL, 0LL, 0LL, 0LL);
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = kMTEpisodeEntityName;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForIsNew:](&OBJC_CLASS___MTEpisode, "predicateForIsNew:", 1LL));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[MTEpisode predicateForAllEpisodesOnPodcastUuid:]( &OBJC_CLASS___MTEpisode,  "predicateForAllEpisodesOnPodcastUuid:",  *(void *)(a1 + 32)));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 AND:v6]);
  uint64_t v8 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v3 countOfObjectsInEntity:v4 predicate:v7]));
  uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  uint64_t v11 = *(void **)(a1 + 40);
  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForPlayed:](&OBJC_CLASS___MTEpisode, "predicateForPlayed:", 0LL));
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v2 AND:v12]);
  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue( +[MTEpisode predicateForAllEpisodesOnPodcastUuid:]( &OBJC_CLASS___MTEpisode,  "predicateForAllEpisodesOnPodcastUuid:",  *(void *)(a1 + 32)));
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v13 AND:v14]);
  uint64_t v16 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v11 countOfObjectsInEntity:v4 predicate:v15]));
  uint64_t v17 = *(void *)(*(void *)(a1 + 64) + 8LL);
  unsigned __int8 v18 = *(void **)(v17 + 40);
  *(void *)(v17 + 40) = v16;

  [*(id *)(a1 + 48) updateFlagsForPodcastUuid:*(void *)(a1 + 32) predicateForUnplayedTab:v2 predicateForUserEpisodes:v19];
}

void sub_1000A19F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
}

void sub_1000A1A24(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  kdebug_trace(723518000LL, 0LL, 0LL, 0LL, 0LL);
  uint64_t v36 = kMTEpisodeEntityName;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:propertiesToFetch:batchSize:"));
  kdebug_trace(723518004LL, 0LL, 0LL, 0LL, 0LL);
  kdebug_trace(723518008LL, 0LL, 0LL, 0LL, 0LL);
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  id obj = v2;
  id v3 = (char *)[obj countByEnumeratingWithState:&v44 objects:v57 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = 0LL;
    char v6 = 0;
    uint64_t v7 = *(void *)v45;
    do
    {
      uint64_t v8 = 0LL;
      id v37 = v5;
      uint64_t v9 = v5 + 1;
      do
      {
        if (*(void *)v45 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void **)(*((void *)&v44 + 1) + 8LL * (void)v8);
        uint64_t v11 = objc_autoreleasePoolPush();
        id v12 = [*(id *)(a1 + 48) evaluateWithObject:v10];
        if ((_DWORD)v12 != [v10 unplayedTab]
          && ([*(id *)(a1 + 56) _shouldSkipSettingPropertiesForWatchPPT] & 1) == 0)
        {
          [v10 setUnplayedTab:v12];
          char v6 = 1;
        }

        id v13 = [*(id *)(a1 + 64) evaluateWithObject:v10];
        if ((_DWORD)v13 != [v10 userEpisode]
          && ([*(id *)(a1 + 56) _shouldSkipSettingPropertiesForWatchPPT] & 1) == 0)
        {
          [v10 setUserEpisode:v13];
          char v6 = 1;
        }

        if ((([v10 isNew] ^ 1 | v13) & 1) == 0
          && ([*(id *)(a1 + 56) _shouldSkipSettingPropertiesForWatchPPT] & 1) == 0)
        {
          [v10 setIsNew:0];
          char v6 = 1;
        }

        if (!((unint64_t)v9 % 0xC8) && (v6 & 1) != 0)
        {
          [*(id *)(a1 + 32) setTransactionAuthor:@"MTPodcastDerivedPropertyObserver"];
          [*(id *)(a1 + 32) saveInCurrentBlock];
          [*(id *)(a1 + 32) setTransactionAuthor:0];
          char v6 = 0;
        }

        objc_autoreleasePoolPop(v11);
        ++v8;
        ++v9;
      }

      while (v4 != v8);
      uint64_t v5 = &v4[(void)v37];
      uint64_t v4 = (char *)[obj countByEnumeratingWithState:&v44 objects:v57 count:16];
    }

    while (v4);
  }

  [*(id *)(a1 + 32) setTransactionAuthor:@"MTPodcastDerivedPropertyObserver"];
  [*(id *)(a1 + 32) saveInCurrentBlock];
  [*(id *)(a1 + 32) setTransactionAuthor:0];
  kdebug_trace(723518012LL, 0LL, 0LL, 0LL, 0LL);
  kdebug_trace(723518024LL, 0LL, 0LL, 0LL, 0LL);
  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 72)]);
  uint64_t v15 = *(void *)(a1 + 72);
  id v33 = v14;
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v14 channel]);
  uint64_t v17 = objc_claimAutoreleasedReturnValue( +[MTEpisode predicateForEpisodesWhichNeedEntitlementStateUpdateForShowUUID:subscriptionState:]( MTEpisode,  "predicateForEpisodesWhichNeedEntitlementStateUpdateForShowUUID:subscriptionState:",  v15,  [v16 subscriptionActive]));

  uint64_t v32 = (void *)v17;
  unsigned __int8 v18 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectsInEntity:v36 predicate:v17 propertiesToFetch:0 batchSize:200]);
  [*(id *)(a1 + 32) setTransactionAuthor:@"MTPodcastDerivedPropertyObserver"];
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  id v38 = v18;
  id v19 = (char *)[v38 countByEnumeratingWithState:&v40 objects:v56 count:16];
  if (v19)
  {
    uint64_t v20 = v19;
    id v21 = 0LL;
    uint64_t v22 = *(void *)v41;
    do
    {
      uint64_t v23 = 0LL;
      uint64_t v35 = v21;
      uint64_t v24 = v21 + 1;
      do
      {
        if (*(void *)v41 != v22) {
          objc_enumerationMutation(v38);
        }
        id v25 = *(void **)(*((void *)&v40 + 1) + 8 * v23);
        id v26 = [v25 entitlementState];
        uint64_t v27 = _MTLogCategoryFeedUpdate([v25 updateEntitlementState]);
        uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          id v29 = (void *)objc_claimAutoreleasedReturnValue([v25 uuid]);
          __int16 v30 = (void *)objc_claimAutoreleasedReturnValue([v25 title]);
          id v31 = [v25 entitlementState];
          *(_DWORD *)buf = 138544130;
          uint64_t v49 = v29;
          __int16 v50 = 2112;
          uint64_t v51 = v30;
          __int16 v52 = 2048;
          id v53 = v26;
          __int16 v54 = 2048;
          id v55 = v31;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "%{public}@ - %@ updated entitlement state for episode from %lld to %lld from updateFlagForEpisodes",  buf,  0x2Au);
        }

        if (__ROR8__(0x51EB851EB851EB8LL - 0x70A3D70A3D70A3D7LL * (void)&v24[v23], 3) <= 0x147AE147AE147AEuLL) {
          [*(id *)(a1 + 32) saveInCurrentBlock];
        }
        ++v23;
      }

      while (v20 != (char *)v23);
      id v21 = &v20[(void)v35];
      uint64_t v20 = (char *)[v38 countByEnumeratingWithState:&v40 objects:v56 count:16];
    }

    while (v20);
  }

  [*(id *)(a1 + 32) saveInCurrentBlock];
  [*(id *)(a1 + 32) setTransactionAuthor:0];
  kdebug_trace(723518028LL, 0LL, 0LL, 0LL, 0LL);
}

uint64_t sub_1000A1FC4(uint64_t a1)
{
  if (os_feature_enabled_serial_sort_auto_downloads( +[MTRecencyUtil unsafeUpdateRelatedFieldsIfUpNextChangedForPodcast:upNextResult:ctx:]( &OBJC_CLASS___MTRecencyUtil,  "unsafeUpdateRelatedFieldsIfUpNextChangedForPodcast:upNextResult:ctx:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48)))) {
    [*(id *)(*(void *)(a1 + 56) + 104) unsafeUpdateEpisodeShowTypeSpecificLevelsWithShowUUID:*(void *)(a1 + 32) on:*(void *)(a1 + 48)];
  }
  [*(id *)(a1 + 48) setTransactionAuthor:@"MTPodcastDerivedPropertyObserver"];
  [*(id *)(a1 + 48) saveInCurrentBlock];
  [*(id *)(a1 + 48) setTransactionAuthor:0];
  return kdebug_trace(723518036LL, 0LL, 0LL, 0LL, 0LL);
}

void sub_1000A2384(_Unwind_Exception *a1)
{
}

void sub_1000A242C(_Unwind_Exception *a1)
{
}

void sub_1000A2524(_Unwind_Exception *a1)
{
}

void sub_1000A2704(uint64_t a1, int a2, id a3)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000A27B0;
  block[3] = &unk_100243490;
  id v8 = objc_retainBlock(a3);
  id v6 = *(id *)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v4 = v8;
  dispatch_async(&_dispatch_main_q, block);
}

uint64_t sub_1000A27B0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_1000A280C(_Unwind_Exception *a1)
{
}

void sub_1000A2A40(_Unwind_Exception *a1)
{
}

void sub_1000A2AB4(_Unwind_Exception *a1)
{
}

LABEL_19:
      uint64_t v20 = 1;
      goto LABEL_20;
    }

    if (+[AMSAcknowledgePrivacyTask acknowledgementNeededForPrivacyIdentifier:]( &OBJC_CLASS___AMSAcknowledgePrivacyTask,  "acknowledgementNeededForPrivacyIdentifier:",  kMTPodcastsPrivacyIdentifier))
    {
      id v21 = _MTLogCategoryPrivacy();
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      id v26 = 138412290;
      uint64_t v27 = @"YES";
      id v13 = "shouldShowWelcome = YES. Reason: +[AMSAcknowledgePrivacyTask acknowledgementNeededForPrivacyIdentifier:kMTPo"
            "dcastsPrivacyIdentifier] = %@";
LABEL_17:
      __int128 v14 = v12;
      uint64_t v15 = 12;
      goto LABEL_18;
    }

    uint64_t v22 = +[MTPrivacyUtil shouldShowPodcastsTermsScreen](&OBJC_CLASS___MTPrivacyUtil, "shouldShowPodcastsTermsScreen");
    uint64_t v23 = _MTLogCategoryPrivacy();
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    uint64_t v24 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (v22)
    {
      if (!v24) {
        goto LABEL_19;
      }
      id v26 = 138412290;
      uint64_t v27 = @"YES";
      id v13 = "shouldShowWelcome = YES. Reason: +[MTPrivacyUtil shouldShowPodcastsTermsScreen] = %@";
      goto LABEL_17;
    }

    if (v24)
    {
      LOWORD(v26) = 0;
      uint64_t v17 = "shouldShowWelcome = NO. Reason: Fell through all the checks.";
      unsigned __int8 v18 = v12;
      id v19 = 2;
      goto LABEL_9;
    }
  }

  uint64_t v20 = 0;
LABEL_20:

  return v20;
}

  uint64_t v34 = _MTLogCategoryUPPSync(v33);
  uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
  uint64_t v36 = v35;
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v35))
  {
    LOWORD(v40) = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v36,  OS_SIGNPOST_INTERVAL_END,  v5,  "updateUPPIdentifierIfNeeded",  "",  (uint8_t *)&v40,  2u);
  }
}

  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

void sub_1000A2F30(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _MTLogCategoryPrivacy();
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = v7;
  if ((a2 & 1) != 0)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Acknowledge privacy task has been completed successfully.",  buf,  2u);
    }
  }

  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
    *(_DWORD *)buf = 138543362;
    id v12 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to execute acknowledge task, error %{public}@.",  buf,  0xCu);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000A307C;
  block[3] = &unk_100240300;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(&_dispatch_main_q, block);
}

void sub_1000A307C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSUserDefaults _applePodcastsFoundationSharedUserDefaults]( &OBJC_CLASS___NSUserDefaults,  "_applePodcastsFoundationSharedUserDefaults"));
  [v2 setInteger:qword_1002B3C70 forKey:@"MTWelcomeVersion"];

  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSUserDefaults _applePodcastsFoundationSharedUserDefaults]( &OBJC_CLASS___NSUserDefaults,  "_applePodcastsFoundationSharedUserDefaults"));
  [v3 synchronize];

  if ([*(id *)(a1 + 32) shouldShowWelcome])
  {
    uint64_t v4 = _MTLogCategoryPrivacy();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      __int16 v13 = 0;
      uint64_t v6 = "shouldShowWelcome = YES after +[MTWelcomeUtil markWelcomeAsShown]";
      id v7 = (uint8_t *)&v13;
      id v8 = v5;
      os_log_type_t v9 = OS_LOG_TYPE_ERROR;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v8, v9, v6, v7, 2u);
    }
  }

  else
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v10 postNotificationName:kMTDidMarkWelcomeAsShownNotification object:0];

    uint64_t v11 = _MTLogCategoryPrivacy();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v12 = 0;
      uint64_t v6 = "Marking Welcome screen as shown was successful.";
      id v7 = (uint8_t *)&v12;
      id v8 = v5;
      os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_6;
    }
  }
}

id sub_1000A467C(uint64_t a1)
{
  return [*(id *)(a1 + 32) updatePlaylistsWithUuids:*(void *)(a1 + 40)];
}

int64_t sub_1000A482C(id a1, MTPodcastPlaylistSettings *a2, MTPodcastPlaylistSettings *a3)
{
  uint64_t v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcastPlaylistSettings podcast](a2, "podcast"));
  id v6 = [v5 sortOrder];

  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcastPlaylistSettings podcast](v4, "podcast"));
  id v8 = [v7 sortOrder];

  else {
    return (uint64_t)v6 < (uint64_t)v8;
  }
}

int64_t sub_1000A48A4(id a1, MTPodcastPlaylistSettings *a2, MTPodcastPlaylistSettings *a3)
{
  uint64_t v4 = a3;
  -[MTPodcastPlaylistSettings latestEpisodeDate](a2, "latestEpisodeDate");
  double v6 = v5;
  -[MTPodcastPlaylistSettings latestEpisodeDate](v4, "latestEpisodeDate");
  double v8 = v7;

  if (v6 > v8) {
    return -1LL;
  }
  else {
    return v6 < v8;
  }
}

int64_t sub_1000A48F8(id a1, MTPodcastPlaylistSettings *a2, MTPodcastPlaylistSettings *a3)
{
  uint64_t v4 = a3;
  -[MTPodcastPlaylistSettings oldestEpisodeDate](a2, "oldestEpisodeDate");
  double v6 = v5;
  -[MTPodcastPlaylistSettings oldestEpisodeDate](v4, "oldestEpisodeDate");
  double v8 = v7;

  if (v6 >= v8) {
    int64_t v9 = 0LL;
  }
  else {
    int64_t v9 = -1LL;
  }
  if (v6 > v8) {
    return 1LL;
  }
  else {
    return v9;
  }
}

int64_t sub_1000A494C(id a1, MTPodcastPlaylistSettings *a2, MTPodcastPlaylistSettings *a3)
{
  uint64_t v4 = a3;
  double v5 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcastPlaylistSettings podcast](a2, "podcast"));
  double v6 = (void *)objc_claimAutoreleasedReturnValue([v5 title]);
  double v7 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcastPlaylistSettings podcast](v4, "podcast"));

  double v8 = (void *)objc_claimAutoreleasedReturnValue([v7 title]);
  id v9 = [v6 caseInsensitiveCompare:v8];

  return (int64_t)v9;
}

int64_t sub_1000A49E4(id a1, MTPodcastPlaylistSettings *a2, MTPodcastPlaylistSettings *a3)
{
  uint64_t v4 = a2;
  double v5 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcastPlaylistSettings podcast](a3, "podcast"));
  double v6 = (void *)objc_claimAutoreleasedReturnValue([v5 title]);
  double v7 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcastPlaylistSettings podcast](v4, "podcast"));

  double v8 = (void *)objc_claimAutoreleasedReturnValue([v7 title]);
  id v9 = [v6 caseInsensitiveCompare:v8];

  return (int64_t)v9;
}

LABEL_60:
  return v52;
}

void sub_1000A51D8(_Unwind_Exception *a1)
{
}

int64_t sub_1000A52F8(id a1, MTEpisode *a2, MTEpisode *a3)
{
  uint64_t v4 = a2;
  double v5 = a3;
  double v6 = (void *)objc_claimAutoreleasedReturnValue(-[MTEpisode podcast](v4, "podcast"));
  id v7 = [v6 sortOrder];
  double v8 = (void *)objc_claimAutoreleasedReturnValue(-[MTEpisode podcast](v5, "podcast"));
  id v9 = [v8 sortOrder];

  if ((uint64_t)v7 <= (uint64_t)v9)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[MTEpisode podcast](v4, "podcast"));
    id v12 = [v11 sortOrder];
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(-[MTEpisode podcast](v5, "podcast"));
    int64_t v10 = (uint64_t)v12 < (uint64_t)[v13 sortOrder];
  }

  else
  {
    int64_t v10 = -1LL;
  }

  return v10;
}

int64_t sub_1000A53C4(id a1, MTEpisode *a2, MTEpisode *a3)
{
  uint64_t v4 = a2;
  double v5 = a3;
  -[MTEpisode pubDate](v4, "pubDate");
  double v7 = v6;
  -[MTEpisode pubDate](v5, "pubDate");
  if (v7 <= v8)
  {
    -[MTEpisode pubDate](v4, "pubDate");
    double v11 = v10;
    -[MTEpisode pubDate](v5, "pubDate");
    int64_t v9 = v11 < v12;
  }

  else
  {
    int64_t v9 = -1LL;
  }

  return v9;
}

int64_t sub_1000A544C(id a1, MTEpisode *a2, MTEpisode *a3)
{
  uint64_t v4 = a2;
  double v5 = a3;
  -[MTEpisode pubDate](v4, "pubDate");
  double v7 = v6;
  -[MTEpisode pubDate](v5, "pubDate");
  if (v7 <= v8)
  {
    -[MTEpisode pubDate](v4, "pubDate");
    double v11 = v10;
    -[MTEpisode pubDate](v5, "pubDate");
    if (v11 >= v12) {
      int64_t v9 = 0LL;
    }
    else {
      int64_t v9 = -1LL;
    }
  }

  else
  {
    int64_t v9 = 1LL;
  }

  return v9;
}

int64_t sub_1000A54D4(id a1, MTEpisode *a2, MTEpisode *a3)
{
  uint64_t v4 = a2;
  double v5 = a3;
  double v6 = (void *)objc_claimAutoreleasedReturnValue(-[MTEpisode podcast](v4, "podcast"));
  double v7 = (void *)objc_claimAutoreleasedReturnValue([v6 title]);
  double v8 = (void *)objc_claimAutoreleasedReturnValue(-[MTEpisode podcast](v5, "podcast"));
  int64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 title]);
  id v10 = [v7 caseInsensitiveCompare:v9];

  if (!v10)
  {
    double v11 = (void *)objc_claimAutoreleasedReturnValue(-[MTEpisode title](v4, "title"));
    double v12 = (void *)objc_claimAutoreleasedReturnValue(-[MTEpisode title](v5, "title"));
    id v10 = [v11 caseInsensitiveCompare:v12];
  }

  return (int64_t)v10;
}

void sub_1000A5A24(_Unwind_Exception *a1)
{
}

void sub_1000A5A38(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](&OBJC_CLASS___MTDB, "sharedInstance"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 privateQueueContext]);

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000A5AD8;
  v6[3] = &unk_100240240;
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = v3;
  uint64_t v8 = v4;
  id v5 = v3;
  [v5 performBlockAndWaitWithSave:v6];
}

void sub_1000A5AD8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = kMTPlaylistEntityName;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate truePredicate](&OBJC_CLASS___NSPredicate, "truePredicate"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 objectsInEntity:v3 predicate:v4 sortDescriptors:0]);

  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v6 = v5;
  id v7 = [v6 countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v25;
    do
    {
      for (i = 0LL; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v25 != v9) {
          objc_enumerationMutation(v6);
        }
        double v11 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)i);
        [v11 setNeedsUpdate:1];
        __int128 v22 = 0u;
        __int128 v23 = 0u;
        __int128 v20 = 0u;
        __int128 v21 = 0u;
        double v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "settings", 0));
        id v13 = [v12 countByEnumeratingWithState:&v20 objects:v28 count:16];
        if (v13)
        {
          id v14 = v13;
          uint64_t v15 = *(void *)v21;
          do
          {
            for (j = 0LL; j != v14; j = (char *)j + 1)
            {
              if (*(void *)v21 != v15) {
                objc_enumerationMutation(v12);
              }
              [*(id *)(*((void *)&v20 + 1) + 8 * (void)j) setNeedsUpdate:1];
            }

            id v14 = [v12 countByEnumeratingWithState:&v20 objects:v28 count:16];
          }

          while (v14);
        }
      }

      id v8 = [v6 countByEnumeratingWithState:&v24 objects:v29 count:16];
    }

    while (v8);
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v6 valueForKey:kPodcastUuid]);
  unsigned __int8 v18 = *(void **)(a1 + 40);
  id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v17));
  [v18 updatePlaylistsWithUuids:v19];
}

void sub_1000A5E7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000A5E94(uint64_t a1)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v9 + 1) + 8LL * (void)i);
        *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) |= +[MTPlaylistQueryManager updatePlaylist:inContext:]( &OBJC_CLASS___MTPlaylistQueryManager,  "updatePlaylist:inContext:",  v7,  *(void *)(a1 + 40),  (void)v9);
        if (*(void *)(a1 + 48))
        {
          id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playlistForUuid:v7]);
          (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v4);
  }

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL)) {
    [*(id *)(a1 + 40) saveInCurrentBlock];
  }
}

void sub_1000A6084(uint64_t a1)
{
  uint64_t v2 = kPlaylistITunesPlaylistUuid;
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playlistForUuid:kPlaylistITunesPlaylistUuid]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 localizedStringForKey:@"iTunes Playlists" value:&stru_100248948 table:0]);

  if (!v5)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue( +[MTPlaylist insertNewPlaylistInManagedObjectContext:]( &OBJC_CLASS___MTPlaylist,  "insertNewPlaylistInManagedObjectContext:",  *(void *)(a1 + 32)));
    [v5 setTitle:v4];
    [v5 setMediaLibraryId:0];
    [v5 setIsFolder:1];
    [v5 setIsBuiltIn:1];
    [v5 setSortOrder:1023];
    [v5 setUuid:v2];
    [v5 setHidden:1];
    [*(id *)(a1 + 32) saveInCurrentBlock];
  }
}

void sub_1000A85EC(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) tableView]);
  [v1 reloadData];
}

id sub_1000AAB9C(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateColors];
}

void sub_1000AAD78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000AAD9C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (v8 && [v5 isEqualToString:*(void *)(a1 + 32)])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained leftImageView]);
    [v7 setImage:v8];
  }
}

void sub_1000AB4D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

uint64_t sub_1000AB4F4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000AB504(uint64_t a1)
{
}

void sub_1000AB50C(uint64_t a1)
{
  id v18 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForFeedUrl:*(void *)(a1 + 40)]);
  if (v18)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[PodcastsStateCoordinator shared](&OBJC_CLASS____TtC8Podcasts24PodcastsStateCoordinator, "shared"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v18 uuid]);
    [v2 unsafeEnableSubscriptionOnPodcastUUID:v3 from:3 context:*(void *)(a1 + 32)];
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) showType]);
    id v19 = +[MTPodcast showTypeFromString:](&OBJC_CLASS___MTPodcast, "showTypeFromString:", v4);

    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) showType]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) title]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) author]);
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) provider]);
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) imageURL]);
    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) feedDescription]);
    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) displayType]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) showSpecificUpsellCopy]);
    id v18 = (id)objc_claimAutoreleasedReturnValue( +[MTPodcast insertNewPodcastInManagedObjectContext:subscribed:feedUrl:showType:showTypeInFeed:title:author:provider:imageUrl:description:displayType:showSpecificUpsellCopy:]( &OBJC_CLASS___MTPodcast,  "insertNewPodcastInManagedObjectContext:subscribed:feedUrl:showType:showTypeInFeed:title:author:provide r:imageUrl:description:displayType:showSpecificUpsellCopy:",  v5,  1LL,  v17,  v19,  v6,  v7,  v8,  v9,  v10,  v11,  v12,  v13));

    objc_msgSend(v18, "setStoreCollectionId:", objc_msgSend(*(id *)(a1 + 56), "storeCollectionId"));
    [v18 setImporting:1];
    +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
    objc_msgSend(v18, "setUpdatedDate:");
    +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
    objc_msgSend(v18, "setModifiedDate:");
  }

  uint64_t v14 = objc_claimAutoreleasedReturnValue([v18 uuid]);
  uint64_t v15 = *(void *)(*(void *)(a1 + 64) + 8LL);
  uint64_t v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v14;
}

void sub_1000AB824(uint64_t a1)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)]);
  if (([v7 feedUpdateNeedsRetry] & 1) == 0)
  {
    if ([v7 showTypeInFeedResolvedValue] == (id)2)
    {
      uint64_t v2 = *(void **)(a1 + 48);
    }

    else
    {
      id v3 = [v7 showTypeInFeedResolvedValue];
      uint64_t v2 = *(void **)(a1 + 48);
      if (v3 != (id)4)
      {
        goto LABEL_6;
      }
    }

    if ([v2 _addLatestSeasonToPodcast:v7]) {
LABEL_6:
    }
      [*(id *)(a1 + 32) saveInCurrentBlock];
  }

void sub_1000AB9E0(_Unwind_Exception *a1)
{
}

void sub_1000ABB00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_1000ABB18(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _addLatestSeasonForSerialPodcast:*(void *)(a1 + 40)];
  if ((_DWORD)result)
  {
    id result = [*(id *)(a1 + 48) saveInCurrentBlock];
    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = (_BYTE)result;
  }

  return result;
}

void sub_1000ABD98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000ABDB0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) newestFullEpisode]);
  id v3 = v2;
  if (v2) {
    id v4 = v2;
  }
  else {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) newestEpisode]);
  }
  id v5 = v4;

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 40) _addEpisode:v5 toMyEpisodesInPodcast:*(void *)(a1 + 32) persist:1];
}

void sub_1000ABF30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_1000ABF48(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) metadataTimestamp];
  if (fabs(v3) <= 2.22044605e-16)
  {
    [*(id *)(a1 + 32) setPlayState:2 manually:0 source:6];
    [*(id *)(a1 + 32) unsuppressAutomaticDownloadsIfNeeded];
    [*(id *)(a1 + 32) setMetadataTimestamp:0.0];
    [*(id *)(a1 + 32) setMetadataFirstSyncEligible:1];
    id result = [*(id *)(a1 + 32) setIsNew:1];
    if (*(_BYTE *)(a1 + 56))
    {
      id result = [*(id *)(a1 + 40) saveInCurrentBlock];
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = (_BYTE)result;
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
  }

  return result;
}

id sub_1000AC468(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _MTLogCategoryFeedUpdate(a1);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v6)
    {
      int v9 = 134217984;
      uint64_t v10 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Podcast exists in the store. Using MAPI for feed update for adamId: %ld",  (uint8_t *)&v9,  0xCu);
    }

    [*(id *)(a1 + 40) setStoreCollectionId:a2];
  }

  else
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v9 = 138412290;
      uint64_t v10 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Podcast does not exist in the store. Doing RSS feed update for feedUrl: %@",  (uint8_t *)&v9,  0xCu);
    }
  }

  return [*(id *)(a1 + 48) _feedUpdateAndSubscribeToPodcast:*(void *)(a1 + 40) feedUrl:*(void *)(a1 + 56) adamId:a2];
}

id sub_1000ACA24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) feedDownloadedWithParams:*(void *)(a1 + 40) error:a2 task:a3];
}

id sub_1000ACA38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) preProcessFeedHookWithParams:*(void *)(a1 + 40) feed:a2 requestUrl:*(void *)(a1 + 48) needsUpdate:a3 ctx:a4]);
  uint64_t v6 = _MTLogCategoryFollowing();
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 56);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)__int128 v11 = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v8,  OS_SIGNPOST_EVENT,  v9,  "MTSubscriptionManager pre process complete",  "",  v11,  2u);
  }

  return v5;
}

void sub_1000ACAE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = _MTLogCategoryFollowing([*(id *)(a1 + 32) postProcessFeedHookWithParams:*(void *)(a1 + 40) podcastUuid:a2 ctx:a3]);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = v5;
  os_signpost_id_t v7 = *(void *)(a1 + 48);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    *(_WORD *)id v8 = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_EVENT,  v7,  "MTSubscriptionManager post process complete",  "",  v8,  2u);
  }
}

void sub_1000ACB80(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void **)(a1 + 32);
  os_signpost_id_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) absoluteString]);
  [v6 removeSubscribeParamsForFeedUrl:v7];

  uint64_t v9 = _MTLogCategoryFollowing(v8);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  __int128 v11 = v10;
  os_signpost_id_t v12 = *(void *)(a1 + 48);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    v13[0] = 67109378;
    v13[1] = a2;
    __int16 v14 = 2112;
    id v15 = v5;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_INTERVAL_END,  v12,  "MTSubscriptionManager subscribe",  "success: %i, error: %@",  (uint8_t *)v13,  0x12u);
  }
}

void sub_1000ACD10(_Unwind_Exception *a1)
{
}

void sub_1000ACD9C(_Unwind_Exception *a1)
{
}

void sub_1000ACE80(_Unwind_Exception *a1)
{
}

void sub_1000AD030(_Unwind_Exception *a1)
{
}

void sub_1000AD0D4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  id v14 = (id)objc_claimAutoreleasedReturnValue([v2 localizedStringForKey:@"FOLLOW_FAIL" value:&stru_100248948 table:0]);

  if (+[DebugUtil isInternalInstall](&OBJC_CLASS___DebugUtil, "isInternalInstall"))
  {
    double v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) description]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @" INTERNAL: %@",  v3));

    uint64_t v5 = objc_claimAutoreleasedReturnValue([v14 stringByAppendingString:v4]);
    id v14 = (id)v5;
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  os_signpost_id_t v7 = (void *)objc_claimAutoreleasedReturnValue( [v6 localizedStringForKey:@"FOLLOW_FAIL_TITLE" value:&stru_100248948 table:0]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[UIAlertController alertControllerWithTitle:message:preferredStyle:]( &OBJC_CLASS___UIAlertController,  "alertControllerWithTitle:message:preferredStyle:",  v7,  v14,  1LL));

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 localizedStringForKey:@"OK" value:&stru_100248948 table:0]);
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue( +[UIAlertAction actionWithTitle:style:handler:]( &OBJC_CLASS___UIAlertAction,  "actionWithTitle:style:handler:",  v10,  1LL,  0LL));
  [v8 addAction:v11];

  os_signpost_id_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[MTApplication appController](&OBJC_CLASS___MTApplication, "appController"));
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 rootViewController]);

  [v13 presentViewController:v8 animated:1 completion:0];
}

id sub_1000AEC14(id a1, NSDictionary *a2)
{
  v8[0] = @"box-height";
  uint64_t v2 = a2;
  double v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", @"height"));
  v9[0] = v3;
  v8[1] = @"box-width";
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", @"width"));
  v9[1] = v4;
  v8[2] = @"url";
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:"));

  v9[2] = v5;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v9,  v8,  3LL));

  return v6;
}

BOOL sub_1000B01C4(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a2 episodeUuid]);
  else {
    BOOL v6 = 0LL;
  }

  return v6;
}

BOOL sub_1000B0610(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return (unint64_t)[*(id *)(a1 + 32) upNextOffset] <= a3
      && (unint64_t)[*(id *)(a1 + 32) count] > a3;
}

void sub_1000B0914(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"up_next_%@",  *(void *)(a1 + 32)));
  uint64_t v2 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  *(void *)(a1 + 40));
  double v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 48) count]));
  -[NSMutableDictionary setValue:forKey:](v2, "setValue:forKey:", v3, @"count");

  +[IMMetrics recordUserAction:dataSource:withData:]( &OBJC_CLASS___IMMetrics,  "recordUserAction:dataSource:withData:",  v4,  *(void *)(a1 + 56),  v2);
}

void sub_1000B0ABC(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"up_next_%@",  *(void *)(a1 + 32)));
  uint64_t v2 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  *(void *)(a1 + 40));
  double v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 48) count]));
  -[NSMutableDictionary setValue:forKey:](v2, "setValue:forKey:", v3, @"count");

  id v4 = -[MTPlayerItemList initWithPlayerItems:]( objc_alloc(&OBJC_CLASS___MTPlayerItemList),  "initWithPlayerItems:",  *(void *)(a1 + 56));
  +[IMMetrics recordUserAction:dataSource:withData:]( &OBJC_CLASS___IMMetrics,  "recordUserAction:dataSource:withData:",  v5,  v4,  v2);
}

void sub_1000B0D40(id a1)
{
  v4[0] = objc_opt_class(&OBJC_CLASS___NSString);
  v4[1] = objc_opt_class(&OBJC_CLASS___NSArray);
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v4, 2LL));
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v1));
  double v3 = (void *)qword_1002B6AD0;
  qword_1002B6AD0 = v2;
}

void sub_1000B0E90(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _encodedUpNext]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v5,  1LL,  0LL));
  id v3 = [(id)objc_opt_class(*(void *)(a1 + 32)) _filePath];
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  [v2 writeToFile:v4 atomically:1];
}

void sub_1000B1160( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000B1178(uint64_t a1, void *a2)
{
  id v3 = [a2 mutableCopy];
  [*(id *)(a1 + 32) setPlayerItems:v3];

  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  uint64_t v16 = a1;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerItems]);
  id v5 = [v4 countByEnumeratingWithState:&v17 objects:v25 count:16];
  if (v5)
  {
    id v6 = v5;
    int v7 = 0;
    uint64_t v8 = *(void *)v18;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v18 != v8) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
        id v11 = [v10 setEditingStyleFlags:3];
        uint64_t v13 = _MTLogCategoryPlayback(v11, v12);
        id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v10 title]);
          *(_DWORD *)buf = 67109378;
          int v22 = v7 + (_DWORD)i;
          __int16 v23 = 2112;
          __int128 v24 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "Up Next Controller item at index %d: %@",  buf,  0x12u);
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v17 objects:v25 count:16];
      v7 += (int)i;
    }

    while (v6);
  }

  if (*(_BYTE *)(*(void *)(*(void *)(v16 + 40) + 8LL) + 24LL)) {
    [*(id *)(v16 + 32) _upNextDidChange];
  }
}

void sub_1000B1758(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (!v4) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
  id v3 = -[MTUnplayedManifest initWithInitialEpisodeUuid:]( objc_alloc(&OBJC_CLASS___MTUnplayedManifest),  "initWithInitialEpisodeUuid:",  v4);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1000B2E04(uint64_t a1, void *a2)
{
  return _[a2 isAllowedForController:*(void *)(a1 + 32)];
}

void sub_1000B2F6C(id a1, id a2)
{
  id v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "updateActionSheet") & 1) != 0)
  {
    [v2 updateActionSheet];
  }

  else if ((objc_opt_respondsToSelector(v2, "updatePopover") & 1) != 0)
  {
    [v2 updatePopover];
  }
}

uint64_t sub_1000B2FC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000B3068(id a1, id a2)
{
  id v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "dismissActionSheet") & 1) != 0)
  {
    [v2 dismissActionSheet];
  }

  else if ((objc_opt_respondsToSelector(v2, "dismissPopover") & 1) != 0)
  {
    [v2 dismissPopover];
  }
}

uint64_t sub_1000B30C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1000B3160(uint64_t a1, void *a2)
{
  return [a2 setController:*(void *)(a1 + 32)];
}

void sub_1000B3224(_Unwind_Exception *a1)
{
}

void sub_1000B3244(uint64_t a1, void *a2, void *a3)
{
  id v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 availableActions]);

  [WeakRetained showActionSheetWithActions:v7 fromButton:v5];
}

BOOL sub_1000B32C0(id a1, IMActionController *a2)
{
  return 1;
}

id sub_1000B359C(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateColors];
}

id sub_1000B5030(uint64_t a1)
{
  return [*(id *)(a1 + 32) removeObserver:*(void *)(a1 + 40) forKeyPath:@"playerItem.loadedTimeRanges" context:off_1002B3D38];
}

id sub_1000B504C(uint64_t a1)
{
  return [*(id *)(a1 + 32) addObserver:*(void *)(a1 + 40) forKeyPath:@"playerItem.loadedTimeRanges" options:5 context:off_1002B3D38];
}

id sub_1000B51B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) setBufferedTimeRange:*(void *)(a1 + 40)];
}

void sub_1000B57AC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) state]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[TVPPlaybackState stopped](&OBJC_CLASS___TVPPlaybackState, "stopped"));

  if (v2 == v3)
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 32LL) = 0;
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v4 postNotificationName:TVPPlaybackMediaItemDidBecomePreparedNotification object:*(void *)(a1 + 32)];
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) avPlayer]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 currentItem]);

  if (v6)
  {
    int v7 = *(void **)(a1 + 32);
    id v10 = (id)objc_claimAutoreleasedReturnValue([v7 avPlayer]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v10 currentItem]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentMediaItem]);
    [v7 _populatePlayerItem:v8 withMetadataFromMediaItem:v9];
  }

void sub_1000B5930(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](&OBJC_CLASS___MTPlayerController, "defaultInstance"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v3 currentItem]);
  if (v2)
  {
  }

  else if ([v3 isPlayerTargetLocal])
  {
    [*(id *)(a1 + 32) stop];
  }
}

void sub_1000B6CB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
}

uint64_t sub_1000B6CEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) canDeletePlaylistUUIDBlock]);

  if (v4)
  {
    id v5 = (uint64_t (**)(void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) canDeletePlaylistUUIDBlock]);
    uint64_t v6 = ((uint64_t (**)(void, id))v5)[2](v5, v3);
  }

  else
  {
    uint64_t v6 = 1LL;
  }

  return v6;
}

uint64_t sub_1000B6D64(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000B6D74(uint64_t a1)
{
}

id sub_1000B6D7C(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return objc_msgSend(v2, "performBlockAndWaitWithSave:");
  }
  else {
    return objc_msgSend(v2, "performBlockAndWait:");
  }
}

void sub_1000B6D8C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectsInEntity:kMTPlaylistEntityName predicate:0 sortDescriptors:0]);
  id v3 = (void *)objc_opt_class(*(void *)(a1 + 40));
  uint64_t v4 = kPlaylistUuid;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  void v22[2] = sub_1000B6F8C;
  v22[3] = &unk_100243AD0;
  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 88);
  id v23 = v6;
  uint64_t v27 = v7;
  id v24 = *(id *)(a1 + 64);
  int8x16_t v11 = *(int8x16_t *)(a1 + 32);
  id v8 = (id)v11.i64[0];
  int8x16_t v25 = vextq_s8(v11, v11, 8uLL);
  id v26 = *(id *)(a1 + 72);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_1000B74AC;
  v16[3] = &unk_100243AF8;
  id v17 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v18 = v9;
  uint64_t v19 = v10;
  id v20 = *(id *)(a1 + 64);
  id v21 = *(id *)(a1 + 72);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_1000B788C;
  v12[3] = &unk_100243B20;
  id v15 = *(id *)(a1 + 80);
  id v13 = *(id *)(a1 + 56);
  id v14 = *(id *)(a1 + 32);
  [v3 mergeArray:v2 fromArray:v5 lookupKey:v4 updateBlock:v22 insertBlock:v16 deleteBlock:v12];
}

void sub_1000B6F8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 32);
  if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = kPlaylistUuid;
    id v9 = v7;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v6 valueForKey:v8]);
    int8x16_t v11 = (void *)objc_claimAutoreleasedReturnValue([v6 valueForKey:kPlaylistTitle]);
    *(_DWORD *)buf = 138543618;
    __int16 v50 = v10;
    __int16 v51 = 2112;
    __int16 v52 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "updating playlist (uuid=%{public}@ - title='%@')",  buf,  0x16u);
  }

  id v12 = v5;
  id v13 = v6;
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:@"syncOrderOnly"]);
  unsigned int v15 = [v14 BOOLValue];

  if (v15)
  {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:kPlaylistSortOrder]);
    objc_msgSend(v12, "setSortOrder:", objc_msgSend(v16, "longLongValue"));

    id v17 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:kPlaylistUngroupedList]);
    objc_msgSend(v12, "setIsUngroupedList:", objc_msgSend(v17, "BOOLValue"));
  }

  else
  {
    uint64_t v18 = kPlaylistTitle;
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:kPlaylistTitle]);
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v12 title]);
    unsigned __int8 v21 = [v19 isEqualToString:v20];

    if ((v21 & 1) == 0)
    {
      int v22 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:v18]);
      [v12 setTitle:v22];

      id v23 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
      id v24 = (void *)objc_claimAutoreleasedReturnValue([v12 uuid]);
      [v23 addObject:v24];
    }

    int8x16_t v25 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:kPlaylistIncludesAllPodcasts]);
    objc_msgSend(v12, "setIncludesAllPodcasts:", objc_msgSend(v25, "BOOLValue"));

    [v12 setNeedsUpdate:1];
    id v26 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:kPlaylistSortOrder]);
    objc_msgSend(v12, "setSortOrder:", objc_msgSend(v26, "longLongValue"));

    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:kPlaylistContainerOrder]);
    objc_msgSend(v12, "setContainerOrder:", objc_msgSend(v27, "intValue"));

    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:kPlaylistUngroupedList]);
    objc_msgSend(v12, "setIsUngroupedList:", objc_msgSend(v28, "BOOLValue"));

    id v29 = *(void **)(a1 + 40);
    __int16 v30 = (void *)objc_claimAutoreleasedReturnValue([v12 uuid]);
    [v29 addObject:v30];

    id v31 = *(void **)(a1 + 48);
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v12 defaultSettings]);
    id v33 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:kPlaylistDefaultSettings]);
    [v31 _mergeSetting:v32 syncObj:v33];

    uint64_t v34 = (void *)objc_opt_class(*(void *)(a1 + 48));
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v12 settings]);
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v35 array]);
    id v37 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:kPlaylistSettings]);
    uint64_t v38 = kPlaylistSettingUuid;
    v47[0] = _NSConcreteStackBlock;
    v47[1] = 3221225472LL;
    v47[2] = sub_1000B747C;
    v47[3] = &unk_100243A58;
    v44[2] = sub_1000B748C;
    v44[3] = &unk_100243A80;
    __int128 v39 = *(void **)(a1 + 56);
    uint64_t v48 = *(void *)(a1 + 48);
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472LL;
    v44[4] = v48;
    id v45 = v39;
    id v46 = v12;
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472LL;
    v42[2] = sub_1000B74A0;
    v42[3] = &unk_100243AA8;
    id v43 = *(id *)(a1 + 56);
    [v34 mergeArray:v36 fromArray:v37 lookupKey:v38 updateBlock:v47 insertBlock:v44 deleteBlock:v42];
  }

  __int128 v40 = *(void **)(a1 + 64);
  __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([v12 uuid]);
  [v40 setObject:v13 forKeyedSubscript:v41];
}

id sub_1000B747C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _mergeSetting:a2 syncObj:a3];
}

id sub_1000B748C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _addSetting:*(void *)(a1 + 40) syncObj:a2 playlist:*(void *)(a1 + 48)];
}

id sub_1000B74A0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) deleteObject:a2];
}

void sub_1000B74AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:@"syncOrderOnly"]);
  unsigned __int8 v5 = [v4 BOOLValue];

  if ((v5 & 1) == 0)
  {
    id v6 = *(os_log_s **)(a1 + 32);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    uint64_t v8 = kPlaylistUuid;
    if (v7)
    {
      id v9 = v6;
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKey:v8]);
      uint64_t v11 = kPlaylistTitle;
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKey:kPlaylistTitle]);
      *(_DWORD *)buf = 138543618;
      __int128 v39 = v10;
      __int16 v40 = 2112;
      __int128 v41 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "inserting playlist (uuid=%{public}@ - title='%@')",  buf,  0x16u);
    }

    else
    {
      uint64_t v11 = kPlaylistTitle;
    }

    uint64_t v13 = *(void *)(a1 + 40);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v8]);
    unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue( +[MTPlaylist insertNewPlaylistInManagedObjectContext:uuid:defaultSettings:]( &OBJC_CLASS___MTPlaylist,  "insertNewPlaylistInManagedObjectContext:uuid:defaultSettings:",  v13,  v14,  0LL));

    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v11]);
    [v15 setTitle:v16];

    objc_msgSend(v15, "setHasBeenSynced:", objc_msgSend(*(id *)(a1 + 48), "syncMergeIsFromCloud"));
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:kPlaylistIncludesAllPodcasts]);
    objc_msgSend(v15, "setIncludesAllPodcasts:", objc_msgSend(v17, "BOOLValue"));

    [v15 setNeedsUpdate:1];
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:kPlaylistSortOrder]);
    objc_msgSend(v15, "setSortOrder:", objc_msgSend(v18, "longLongValue"));

    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:kPlaylistContainerOrder]);
    objc_msgSend(v15, "setContainerOrder:", objc_msgSend(v19, "intValue"));

    id v20 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:kPlaylistUngroupedList]);
    objc_msgSend(v15, "setIsUngroupedList:", objc_msgSend(v20, "BOOLValue"));

    unsigned __int8 v21 = *(void **)(a1 + 48);
    int v22 = (void *)objc_claimAutoreleasedReturnValue([v15 defaultSettings]);
    id v23 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:kPlaylistDefaultSettings]);
    [v21 _mergeSetting:v22 syncObj:v23];

    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    id v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", kPlaylistSettings, 0));
    id v25 = [v24 countByEnumeratingWithState:&v33 objects:v37 count:16];
    if (v25)
    {
      id v26 = v25;
      uint64_t v27 = *(void *)v34;
      do
      {
        for (i = 0LL; i != v26; i = (char *)i + 1)
        {
          if (*(void *)v34 != v27) {
            objc_enumerationMutation(v24);
          }
          [*(id *)(a1 + 48) _addSetting:*(void *)(a1 + 40) syncObj:*(void *)(*((void *)&v33 + 1) + 8 * (void)i) playlist:v15];
        }

        id v26 = [v24 countByEnumeratingWithState:&v33 objects:v37 count:16];
      }

      while (v26);
    }

    id v29 = *(void **)(a1 + 56);
    __int16 v30 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v8]);
    [v29 addObject:v30];

    id v31 = *(void **)(a1 + 64);
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v15 uuid]);
    [v31 setObject:v3 forKeyedSubscript:v32];
  }
}

void sub_1000B788C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 hasBeenSynced])
  {
    if (([v3 isItunesPlaylist] & 1) == 0
      && ([v3 isBuiltIn] & 1) == 0)
    {
      uint64_t v4 = *(void *)(a1 + 48);
      unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue([v3 uuid]);
      LOBYTE(v4) = (*(uint64_t (**)(uint64_t, void *))(v4 + 16))(v4, v5);

      if ((v4 & 1) == 0)
      {
        id v6 = *(void **)(a1 + 32);
        if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = kPlaylistUuid;
          uint64_t v8 = v6;
          id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKey:v7]);
          int v10 = 138543362;
          uint64_t v11 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "deleting playlist (uuid=%{public}@)",  (uint8_t *)&v10,  0xCu);
        }

        [*(id *)(a1 + 40) deletePlaylist:v3];
      }
    }
  }
}

id sub_1000B79CC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _applyOrderingInSyncDictionary:*(void *)(a1 + 40) playlist:a2];
}

void sub_1000B7F30(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v9 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a3));
  id v6 = *(void **)(a1 + 32);
  id v7 = [v5 persistentID];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v7));
  [v6 setObject:v9 forKeyedSubscript:v8];
}

uint64_t sub_1000B7FD0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v5 persistentID]));
  uint64_t v9 = objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:v8]);

  int v10 = *(void **)(a1 + 32);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v6 persistentID]));
  uint64_t v12 = objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v11]);

  if (v9) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = v12 == 0;
  }
  if (v13)
  {
    if (!v9 || v12)
    {
      if (!(v9 | v12))
      {
        unsigned int v15 = *(void **)(a1 + 40);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v5 persistentID]));
        uint64_t v9 = objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:v16]);

        id v17 = *(void **)(a1 + 40);
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v6 persistentID]));
        uint64_t v12 = objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:v18]);
      }

      uint64_t v14 = (uint64_t)[(id)v9 compare:v12];
    }

    else
    {
      uint64_t v14 = 1LL;
    }
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v14 = -1LL;
  }

  return v14;
}

uint64_t sub_1000B8900(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000B8C78(_Unwind_Exception *a1)
{
}

void sub_1000B8C94(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _showCreateStationUI];
}

void sub_1000B9054( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000B9078(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _showCreateStationUI];
}

void sub_1000BAD98(_Unwind_Exception *a1)
{
}

id sub_1000BADAC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _cleanUpOldHiddenPodcasts];
}

void sub_1000BAE98(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForNotHiddenPodcasts](&OBJC_CLASS___MTPodcast, "predicateForNotHiddenPodcasts"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectsInEntity:kMTPodcastEntityName predicate:v2 sortDescriptors:0]);
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(a1 + 40) _markAsHiddenPodcast:*(void *)(*((void *)&v8 + 1) + 8 * (void)v7) inContext:*(void *)(a1 + 32)];
        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v5);
  }
}

void sub_1000BB388(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectsInEntity:kMTPodcastEntityName predicate:*(void *)(a1 + 40) sortDescriptors:0]);
  uint64_t v3 = _MTLogCategoryDatabase(v2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    id v16 = [v2 count];
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Found %lu podcasts to delete from Recently Unfollowed.",  buf,  0xCu);
  }

  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v5 = v2;
  id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      __int128 v9 = 0LL;
      do
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * (void)v9), "setLastUnfollowedDate:", 0.0, (void)v10);
        __int128 v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v7);
  }

  [*(id *)(a1 + 32) saveInCurrentBlock];
}

void sub_1000BB5C4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectsInEntity:kMTPodcastEntityName predicate:*(void *)(a1 + 40) sortDescriptors:0]);
  uint64_t v3 = _MTLogCategoryDatabase(v2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    id v16 = [v2 count];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Found %lu podcasts to delete.", buf, 0xCu);
  }

  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v5 = v2;
  id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      __int128 v9 = 0LL;
      do
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        objc_msgSend( *(id *)(a1 + 48),  "_unsafeDeletePodcast:ctx:",  *(void *)(*((void *)&v10 + 1) + 8 * (void)v9),  *(void *)(a1 + 32),  (void)v10);
        __int128 v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v7);
  }
}

void sub_1000BBCEC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v23;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v23 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) podcastForUuid:*(void *)(*((void *)&v22 + 1) + 8 * (void)i)]);
        __int128 v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v8 syncType]));
        [v2 addObject:v9];

        [*(id *)(a1 + 48) _markAsHiddenPodcast:v8 inContext:*(void *)(a1 + 40)];
      }

      id v5 = [v3 countByEnumeratingWithState:&v22 objects:v27 count:16];
    }

    while (v5);
  }

  [*(id *)(a1 + 40) saveInCurrentBlock];
  if (*(_BYTE *)(a1 + 56) && [v2 count])
  {
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v10 = v2;
    id v11 = [v10 countByEnumeratingWithState:&v18 objects:v26 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v19;
      do
      {
        for (j = 0LL; j != v12; j = (char *)j + 1)
        {
          if (*(void *)v19 != v13) {
            objc_enumerationMutation(v10);
          }
          id v15 = objc_msgSend(*(id *)(*((void *)&v18 + 1) + 8 * (void)j), "integerValue", (void)v18);
          id v16 = (void *)objc_claimAutoreleasedReturnValue( +[SyncKeysRepository shared]( &OBJC_CLASS____TtC18PodcastsFoundation18SyncKeysRepository,  "shared"));
          [v16 markSubscriptionSyncDirty:1 for:v15];
        }

        id v12 = [v10 countByEnumeratingWithState:&v18 objects:v26 count:16];
      }

      while (v12);
    }

    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[SyncKeysRepository shared](&OBJC_CLASS____TtC18PodcastsFoundation18SyncKeysRepository, "shared"));
    [v17 setIsPlaylistSyncDirty:1];
  }
}

void sub_1000BC4E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000BC50C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 firstObject]);
    uint64_t v6 = v5;
    if (v5)
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472LL;
      v7[2] = sub_1000BC5C0;
      v7[3] = &unk_100240240;
      void v7[4] = WeakRetained;
      id v8 = v5;
      dispatch_async(&_dispatch_main_q, v7);
    }
  }
}

id sub_1000BC5C0(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 72) = [*(id *)(a1 + 40) subscribed];
  return [*(id *)(a1 + 32) updateFollowButton];
}

void sub_1000BCF44(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](&OBJC_CLASS___UIScreen, "mainScreen"));
  [v1 scale];
  uint64_t v3 = v2;

  qword_1002B3EC0 = v3;
}

id sub_1000BD578(uint64_t a1)
{
  qword_1002B3EC8 = v2;
  id result = [*(id *)(a1 + 32) artworkHeightForStyle:*(void *)(a1 + 40) sizeType:2];
  qword_1002B6AF0 = v4;
  return result;
}

id sub_1000BD5C0(uint64_t a1)
{
  qword_1002B3ED0 = v2;
  id result = [*(id *)(a1 + 32) artworkHeightForStyle:*(void *)(a1 + 40) sizeType:2];
  qword_1002B6B00 = v4;
  return result;
}

void sub_1000BE50C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000BE52C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained episode]);
  [v6 setActionObject:v8];

  id v11 = objc_loadWeakRetained(v4);
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v11 moreAction]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 availableActions]);

  [v9 showActionSheetWithActions:v10 fromButton:v5];
}

void sub_1000BF074(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (([WeakRetained updateDisabledReason] & 1) == 0
    && [WeakRetained disabledReason] == (id)2)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained episode]);

    if (v1) {
      [WeakRetained updateIcons];
    }
  }
}

void sub_1000BF5F0(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "updateActionSheet") & 1) != 0)
  {
    [v2 updateActionSheet];
  }

  else if ((objc_opt_respondsToSelector(v2, "updatePopover") & 1) != 0)
  {
    [v2 updatePopover];
  }
}

void sub_1000BF6A0(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "dismissActionSheet") & 1) != 0)
  {
    [v2 dismissActionSheet];
  }

  else if ((objc_opt_respondsToSelector(v2, "dismissPopover") & 1) != 0)
  {
    [v2 dismissPopover];
  }
}

void sub_1000BFE74(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  double v2 = *(double *)(a1 + 48);
  double v3 = *(double *)(a1 + 56);
  double v4 = *(double *)(a1 + 64);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) moreButton]);
  objc_msgSend(v5, "setFrame:", v1, v2, v3, v4);
}

void sub_1000BFECC(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  double v2 = *(double *)(a1 + 48);
  double v3 = *(double *)(a1 + 56);
  double v4 = *(double *)(a1 + 64);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) descriptionButton]);
  objc_msgSend(v5, "setFrame:", v1, v2, v3, v4);
}

void sub_1000C321C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000C3240(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  if (v13)
  {
    id v6 = (id *)(a1 + 32);
    id WeakRetained = objc_loadWeakRetained(v6);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained episode]);
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 podcastUuid]);
    unsigned int v10 = [v5 isEqualToString:v9];

    if (v10)
    {
      id v11 = objc_loadWeakRetained(v6);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 artworkView]);
      [v12 setArtwork:v13];
    }
  }
}

void sub_1000C463C(id a1)
{
  double v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](&OBJC_CLASS___UIScreen, "mainScreen"));
  [v1 scale];
  uint64_t v3 = v2;

  qword_1002B3ED8 = v3;
}

void sub_1000C4E48(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectsInEntity:kMTEpisodeEntityName predicate:*(void *)(a1 + 40) sortDescriptors:&__NSArray0__struct]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1000C4EE4;
  void v3[3] = &unk_100243B98;
  id v4 = *(id *)(a1 + 48);
  [v2 enumerateObjectsUsingBlock:v3];
}

void sub_1000C4EE4(uint64_t a1, void *a2)
{
  id v9 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  if (+[MTStoreIdentifier isNotEmpty:]( MTStoreIdentifier,  "isNotEmpty:",  [v9 storeTrackId])) {
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v9 storeTrackId]));
  }
  else {
    id v4 = 0LL;
  }
  [v3 setObject:v4 forKeyedSubscript:@"episodeAdamId"];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v9 podcast]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 feedURL]);
  [v3 setObject:v6 forKeyedSubscript:@"feedURL"];

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v9 guid]);
  [v3 setObject:v7 forKeyedSubscript:@"guid"];

  [v9 lastBookmarkedDate];
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  [v3 setObject:v8 forKeyedSubscript:@"createdDate"];

  [*(id *)(a1 + 32) addObject:v3];
}

void sub_1000C57C8(uint64_t a1)
{
  uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [*(id *)(a1 + 32) count]));
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  id obj = *(id *)(a1 + 32);
  id v40 = [obj countByEnumeratingWithState:&v43 objects:v51 count:16];
  if (v40)
  {
    uint64_t v39 = *(void *)v44;
    do
    {
      for (i = 0LL; i != v40; i = (char *)i + 1)
      {
        if (*(void *)v44 != v39) {
          objc_enumerationMutation(obj);
        }
        uint64_t v3 = *(void **)(*((void *)&v43 + 1) + 8LL * (void)i);
        id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"episodeAdamId"]);
        id v5 = [v4 longLongValue];

        id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"feedURL"]);
        id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"guid"]);
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"createdDate"]);
        [v8 doubleValue];
        double v10 = v9;

        if (!+[MTStoreIdentifier isEmpty:](&OBJC_CLASS___MTStoreIdentifier, "isEmpty:", v5)
          || (v7 ? (BOOL v11 = v6 == 0LL) : (BOOL v11 = 1), !v11))
        {
          if (+[MTStoreIdentifier isNotEmpty:](&OBJC_CLASS___MTStoreIdentifier, "isNotEmpty:", v5))
          {
            id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) findEpisodeByStoreID:v5 inContext:*(void *)(a1 + 48)]);
            if (v12)
            {
LABEL_18:
              if (v12)
              {
                id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) storageProvider]);
                [v13 unsafeBookmarkEpisode:v12 onTimestamp:v10];

                uint64_t v15 = _MTLogCategoryCloudSync(v14);
                id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
                if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
                {
                  id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logPrefix]);
                  id v18 = [v12 storeTrackId];
                  *(_DWORD *)buf = 138412546;
                  uint64_t v48 = v17;
                  __int16 v49 = 2048;
                  id v50 = v18;
                  _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%@ Step 1: bookmark local episode: %lld",  buf,  0x16u);
                }

                __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v12 uuid]);
                [v38 addObject:v19];
              }

              else
              {
                id v12 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcast insertNewPodcastInManagedObjectContext:subscribed:feedUrl:showType:title:author:provider:imageUrl:description:]( &OBJC_CLASS___MTPodcast,  "insertNewPodcastInManagedObjectContext:subscribed:feedUrl:showType:title:author:provid er:imageUrl:description:",  *(void *)(a1 + 48),  0LL,  v6,  +[MTPodcast defaultShowType](&OBJC_CLASS___MTPodcast, "defaultShowType"),  @"Untitled",  0LL,  0LL,  0LL,  0LL));
                [v12 setImporting:1];
                __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v12 uuid]);
                __int128 v20 = (void *)objc_claimAutoreleasedReturnValue( +[MTEpisode insertNewEpisodeInManagedObjectContext:canSendNotifications:]( &OBJC_CLASS___MTEpisode,  "insertNewEpisodeInManagedObjectContext:canSendNotifications:",  *(void *)(a1 + 48),  *(unsigned __int8 *)(a1 + 64)));
                [v20 setIsHidden:1];
                [v20 setPodcast:v12];
                [v20 setGuid:v7];
                [v20 setStoreTrackId:v5];
                __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) storageProvider]);
                [v21 unsafeBookmarkEpisode:v20 onTimestamp:v10];

                uint64_t v23 = _MTLogCategoryCloudSync(v22);
                __int128 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
                if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
                {
                  __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logPrefix]);
                  *(_DWORD *)buf = 138412546;
                  uint64_t v48 = v25;
                  __int16 v49 = 2112;
                  id v50 = v19;
                  _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "%@ Step 1: create podcast for bookmarking: %@",  buf,  0x16u);
                }

                uint64_t v27 = _MTLogCategoryCloudSync(v26);
                uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
                if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
                {
                  id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logPrefix]);
                  id v30 = [v20 storeTrackId];
                  *(_DWORD *)buf = 138412546;
                  uint64_t v48 = v29;
                  __int16 v49 = 2048;
                  id v50 = v30;
                  _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "%@ Step 1: bookmark episode: %lld",  buf,  0x16u);
                }

                id v31 = (void *)objc_claimAutoreleasedReturnValue([v20 uuid]);
                [v38 addObject:v31];

                if ((+[MTStoreIdentifier isEmpty:](&OBJC_CLASS___MTStoreIdentifier, "isEmpty:", v5) & 1) == 0)
                {
                  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[PodcastRequestManager sharedInstance]( &OBJC_CLASS____TtC18PodcastsFoundation21PodcastRequestManager,  "sharedInstance"));
                  __int128 v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v5));
                  v41[0] = _NSConcreteStackBlock;
                  v41[1] = 3221225472LL;
                  v41[2] = sub_1000C5DD4;
                  v41[3] = &unk_100243D00;
                  v41[4] = *(void *)(a1 + 40);
                  id v42 = v19;
                  [v32 updatePodcastWithEpisodeAdamId:v33 completion:v41];
                }
              }

              goto LABEL_30;
            }
          }

          else
          {
            id v12 = 0LL;
          }

          if (v7 && v6) {
            id v12 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) findEpisodeByFeedURL:v6 guid:v7 inContext:*(void *)(a1 + 48)]);
          }
          goto LABEL_18;
        }

LABEL_30:
      }

      id v40 = [obj countByEnumeratingWithState:&v43 objects:v51 count:16];
    }

    while (v40);
  }

  __int128 v34 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) predicateForBookmarksOnlyInLocalAndBeforeLastSyncWithRemoteBookmarksUUIDs:v38]);
  __int128 v35 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 48) objectsInEntity:kMTEpisodeEntityName predicate:v34 sortDescriptors:&__NSArray0__struct]);
  objc_msgSend( *(id *)(a1 + 40),  "checkPotentialLibraryDeletionIssueForRemoteBookmarksCount:episodesToUnbookmarkCount:newVersion:",  objc_msgSend(*(id *)(a1 + 32), "count"),  objc_msgSend(v35, "count"),  *(void *)(a1 + 56));
  __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) storageProvider]);
  [v36 unsafeRemoveFromBookmarksEpisodes:v35 context:*(void *)(a1 + 48)];
}

    v65 = v97 + 1;
    if (v98 == v91)
    {
      uint64_t v81 = 1;
      goto LABEL_40;
    }
  }

  (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v74, v70);
  id v42 = v93;
  id v40 = v96;
LABEL_42:
  sub_10012A4A0(v43, &qword_1002B4E58);
  sub_10012A4A0((uint64_t)v15, &qword_1002B4E60);
  sub_10012A4A0((uint64_t)v17, &qword_1002B4E60);
  swift_release(v99);
  uint64_t v81 = 0;
  id v31 = v90;
  id v53 = v92;
LABEL_62:
  id v50 = swift_bridgeObjectRelease_n(v53, 2LL);
  *((_BYTE *)v42 + OBJC_IVAR___MTNetworkMediaManifest_hasOnlyPaidEpisodesWithoutSubscription) = v81;
LABEL_63:
  id result = (id)_MTLogCategoryPlayback(v50, v51);
  if (result)
  {
    unint64_t v85 = result;
    id v86 = static os_log_type_t.default.getter(result);
    uint64_t v87 = sub_100126450((uint64_t *)&unk_1002B5E60);
    uint64_t v88 = swift_allocObject(v87, 72LL, 7LL);
    *(_OWORD *)(v88 + 16) = xmmword_1001C3C20;
    uint64_t v89 = sub_100131A8C();
    *(void *)(v88 + 56) = sub_100126450(&qword_1002B4E48);
    *(void *)(v88 + 64) = sub_1001342BC( &qword_1002B4E50,  &qword_1002B4E48,  (uint64_t)&protocol conformance descriptor for [A]);
    *(void *)(v88 + 32) = v89;
    os_log(_:dso:log:type:_:)( "NetworkMediaManifest: Loaded items from asset info %@",  53LL,  2LL,  &_mh_execute_header,  v85,  v86,  v88);

    uint64_t v67 = v88;
LABEL_65:
    swift_bridgeObjectRelease(v67);
    return (id)sub_100133558(v31, v27);
  }

  else
  {
    __break(1u);
  }

  return result;
}

      swift_bridgeObjectRelease(v77);
      __int16 v54 = v85;
      if ((swift_isUniquelyReferenced_nonNull_native(v85) & 1) == 0)
      {
        sub_1001365EC(0, v54[2] + 1LL, 1);
        __int16 v54 = v85;
      }

      id v55 = v67;
      __int128 v19 = v70;
      v57 = v54[2];
      uint64_t v56 = v54[3];
      if (v57 >= v56 >> 1)
      {
        sub_1001365EC(v56 > 1, v57 + 1, 1);
        __int16 v54 = v85;
      }

      v54[2] = v57 + 1;
      v54[v57 + 4] = v22;
      if (v19 == v55)
      {
        swift_bridgeObjectRelease(v65);
        double v10 = v66;
        id v18 = _swiftEmptyArrayStorage;
        v58 = v54[2];
        if (v58) {
          goto LABEL_39;
        }
        goto LABEL_43;
      }
    }
  }

  swift_bridgeObjectRelease(v84[0]);
  __int16 v54 = _swiftEmptyArrayStorage;
  v58 = _swiftEmptyArrayStorage[2];
  if (v58)
  {
LABEL_39:
    v84[0] = _swiftEmptyArrayStorage;
    sub_1001365EC(0, v58, 0);
    id v59 = type metadata accessor for RemoteNonFollowedShow(0LL);
    id v60 = 0LL;
    id v18 = (void *)v84[0];
    do
    {
      uint64_t v61 = v54[v60 + 4];
      swift_bridgeObjectRetain(v61);
      uint64_t v62 = Dictionary<>.flatteningUnknownSyncProperties<A>(for:)( v59,  v61,  v59,  &protocol witness table for RemoteNonFollowedShow);
      swift_bridgeObjectRelease(v61);
      v84[0] = v18;
      v64 = v18[2];
      v63 = v18[3];
      if (v64 >= v63 >> 1)
      {
        sub_1001365EC(v63 > 1, v64 + 1, 1);
        id v18 = (void *)v84[0];
      }

      ++v60;
      v18[2] = v64 + 1;
      v18[v64 + 4] = v62;
    }

    while (v58 != v60);
  }

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  swift_bridgeObjectRetain(v12);
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_release(v12);
  if (!v14) {
    goto LABEL_29;
  }
LABEL_21:
  sub_1001366B0(0, v14 & ~(v14 >> 63), 0);
  if ((v14 & 0x8000000000000000LL) == 0)
  {
    uint64_t v15 = 0LL;
    do
    {
      if ((v12 & 0xC000000000000001LL) != 0) {
        id v16 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v12);
      }
      else {
        id v16 = (char *)*(id *)(v12 + 8 * v15 + 32);
      }
      id v17 = v16;
      __int128 v19 = *(void *)&v16[OBJC_IVAR___MTKeyProcessorPair_key];
      id v18 = *(void *)&v16[OBJC_IVAR___MTKeyProcessorPair_key + 8];
      swift_bridgeObjectRetain(v18);

      __int128 v21 = _swiftEmptyArrayStorage[2];
      __int128 v20 = _swiftEmptyArrayStorage[3];
      if (v21 >= v20 >> 1) {
        sub_1001366B0(v20 > 1, v21 + 1, 1);
      }
      ++v15;
      _swiftEmptyArrayStorage[2] = v21 + 1;
      uint64_t v22 = &_swiftEmptyArrayStorage[2 * v21];
      void v22[4] = v19;
      v22[5] = v18;
    }

    while (v14 != v15);
    goto LABEL_29;
  }

          swift_bridgeObjectRelease(v121);
          v63 = v130;
          if ((swift_isUniquelyReferenced_nonNull_native(v130) & 1) == 0)
          {
            sub_1001365EC(0, v63[2] + 1LL, 1);
            v63 = v130;
          }

          v64 = v110;
          float v66 = v63[2];
          v65 = v63[3];
          if (v66 >= v65 >> 1)
          {
            sub_1001365EC(v65 > 1, v66 + 1, 1);
            v63 = v130;
          }

          v63[2] = v66 + 1;
          v63[v66 + 4] = v32;
          id v29 = v113;
          if ((void *)v113 == v64)
          {
            swift_bridgeObjectRelease(v108);
            uint64_t v67 = v63[2];
            if (!v67)
            {
LABEL_72:
              swift_bridgeObjectRelease(v63);
              uint64_t v32 = _swiftEmptyArrayStorage;
              __int128 v100 = _swiftEmptyArrayStorage[2];
              if (v100) {
                goto LABEL_76;
              }
              goto LABEL_80;
            }

    id v55 = swift_bridgeObjectRelease(v14);
    static Logger.database.getter(v55);
    uint64_t v56 = swift_bridgeObjectRetain_n(v14, 2LL);
    v57 = (os_log_s *)Logger.logObject.getter(v56);
    v58 = static os_log_type_t.default.getter(v57);
    if (os_log_type_enabled(v57, v58))
    {
      id v59 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)id v59 = 134217984;
      if (v6)
      {
        if (v14 < 0) {
          uint64_t v62 = v14;
        }
        else {
          uint64_t v62 = v14 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v14);
        id v60 = _CocoaArrayWrapper.endIndex.getter(v62);
        swift_bridgeObjectRelease(v14);
      }

      else
      {
        id v60 = *(void *)((v14 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      uint64_t v61 = v66;
      swift_bridgeObjectRelease(v14);
      uint64_t v71 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v59 + 4, v59 + 12);
      swift_bridgeObjectRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Finished deleting %ld interests.", v59, 0xCu);
      swift_slowDealloc(v59, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v14, 2LL);
      uint64_t v61 = v66;
    }

    v32((uint64_t)v69, v5);
    [a1 saveInCurrentBlock];
    (*(void (**)(uint8_t *, uint64_t))(v67 + 8))(v29, v61);
    return swift_bridgeObjectRelease(v75);
  }

  else
  {
    uint64_t v38 = static Logger.database.getter(v21);
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
    id v40 = static os_log_type_t.error.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      __int128 v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)__int128 v41 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "Unable to fetch interests when attempting to cleanup. Cannot delete any interests.",  v41,  2u);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
}

void sub_1000C5DD4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(21LL, 0LL);
  id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_1000C5EA8;
  v12[3] = &unk_100240C10;
  id v13 = v5;
  id v14 = v6;
  double v9 = *(void **)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 32);
  id v16 = v9;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v8, v12);
}

void sub_1000C5EA8(id *a1)
{
  if (a1[4] && a1[5])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([a1[6] storageProvider]);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 importContext]);

    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1000C5FC4;
    void v8[3] = &unk_100243CD8;
    id v9 = v3;
    id v10 = a1[7];
    id v11 = a1[5];
    id v4 = a1[4];
    id v5 = a1[6];
    id v12 = v4;
    id v13 = v5;
    id v6 = v3;
    [v6 performBlockAndWaitWithSave:v8];
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateManager sharedInstance](&OBJC_CLASS___MTFeedUpdateManager, "sharedInstance"));
  [v7 updatePodcastWithUUID:a1[7] userInitiated:0 forced:1 forceBootstrap:0 source:11 completion:0];
}

void sub_1000C5FC4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)]);
  [v2 setDisplayType:*(void *)(a1 + 48)];
  uint64_t v3 = _MTLogCategoryCloudSync(objc_msgSend(v2, "setStoreCollectionId:", objc_msgSend(*(id *)(a1 + 56), "longLongValue")));
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) logPrefix]);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    int v8 = 138412802;
    id v9 = v5;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    __int16 v12 = 2112;
    uint64_t v13 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%@ Step 1.5: update bookmark show displayType: %@ , store collection id: %@",  (uint8_t *)&v8,  0x20u);
  }
}

id sub_1000C6CDC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateUpNext];
}

void sub_1000C7758( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000C7774(uint64_t a1)
{
  id v2 = objc_alloc(&OBJC_CLASS___MTTVPodcastDescriptionViewController);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained podcast]);
  uint64_t v7 = -[MTTVPodcastDescriptionViewController initWithPodcast:](v2, "initWithPodcast:", v4);

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTApplication_ATV appController](&OBJC_CLASS___MTApplication_ATV, "appController"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 rootNavController]);

  [v6 pushViewController:v7 animated:1];
}

void sub_1000C7C84(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryFeedUpdate(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [*(id *)(a1 + 32) count];
    int v6 = 134217984;
    id v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Needs feed update for %lu podcasts",  (uint8_t *)&v6,  0xCu);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateManager sharedInstance](&OBJC_CLASS___MTFeedUpdateManager, "sharedInstance"));
  [v5 _updatePodcastsWithUUIDs:*(void *)(a1 + 32) userInitiated:0 useBackgroundFetch:1 source:13 startedUpdatesCallback:0];
}

id sub_1000C7EA8(uint64_t a1)
{
  double v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1000C7EFC;
  void v3[3] = &unk_100240D18;
  void v3[4] = v1;
  return [v1 results:v3];
}

void sub_1000C7EFC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 valueForKey:kEpisodeUuid]);
  [v2 checkAutoDownloadsForUuids:v3];
}

void sub_1000C8090( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000C80B4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (a4) {
      id v8 = 0LL;
    }
    else {
      id v8 = [v6 BOOLValue];
    }
    WeakRetained[56] = (_BYTE)v8;
    uint64_t v9 = _MTLogCategoryFeedUpdate(v8);
    __int16 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = WeakRetained[56];
      v12[0] = 67109120;
      v12[1] = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "MTFeedUpdateProcessor did get new batch fetch enabled value %x will refresh",  (uint8_t *)v12,  8u);
    }

    [WeakRetained updatePredicate];
    [WeakRetained _reCheck];
  }
}

void sub_1000C84E4(_Unwind_Exception *a1)
{
}

void sub_1000C84F8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[MPMediaLibrary defaultMediaLibrary](&OBJC_CLASS___MPMediaLibrary, "defaultMediaLibrary"));
  uint64_t v4 = (uint64_t)[*(id *)(a1 + 32) counterForGeneratingLibraryChangeNotifications];
  if (v4 >= 1) {
    [WeakRetained _endGeneratingLibraryChangeNotifications];
  }
  id v8 = _NSConcreteStackBlock;
  uint64_t v9 = 3221225472LL;
  __int16 v10 = sub_1000C85F4;
  int v11 = &unk_100243DB8;
  id v13 = *(id *)(a1 + 40);
  id v5 = v3;
  id v12 = v5;
  id v6 = [v5 performTransactionWithBlock:&v8];
  if (v4 >= 1) {
    objc_msgSend(WeakRetained, "_beginGeneratingLibraryChangeNotifications", v8, v9, v10, v11);
  }
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v6);
  }
}

uint64_t sub_1000C85F4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1000C8694(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[MPMediaLibrary defaultMediaLibrary](&OBJC_CLASS___MPMediaLibrary, "defaultMediaLibrary"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1000C8A2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  return [*(id *)(a1 + 32) _beginGeneratingLibraryChangeNotifications];
}

uint64_t sub_1000C8AF4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1000C96E4(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 32) + 16))( *(void *)(a1 + 32),  [a2 BOOLValue]);
}

uint64_t sub_1000C981C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000C98FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000C99DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000C9D88(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 32) + 16))( *(void *)(a1 + 32),  [a2 unsignedIntegerValue]);
}

void sub_1000CA2A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
}

void sub_1000CA2D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained setValue:*(void *)(a1 + 32)];
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained changeHandler]);

  if (v2)
  {
    id v3 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([WeakRetained changeHandler]);
    v3[2](v3, *(void *)(a1 + 32));
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained reloadHandler]);

  if (v4)
  {
    id v5 = (void (**)(void))objc_claimAutoreleasedReturnValue([WeakRetained reloadHandler]);
    v5[2]();
  }
}

void sub_1000CAFD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CAFF8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000CB008(uint64_t a1)
{
}

void sub_1000CB010(void *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v10 = a2;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);
  unsigned int v9 = [v8 isEqualToString:a1[4]];

  if (v9)
  {
    objc_storeStrong((id *)(*(void *)(a1[5] + 8LL) + 40LL), a2);
    *(void *)(*(void *)(a1[6] + 8LL) + 24LL) = a3;
    *a4 = 1;
  }
}

id sub_1000CB88C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 group]);
  id v6 = [v4 isEqual:v5];

  return v6;
}

void sub_1000CBECC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000CBF08(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained switchSettingChanged:*(void *)(a1 + 32) value:a2];
}

void sub_1000CCC98(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) tableView]);
  uint64_t v5 = *(void *)(a1 + 56);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v5, 1LL));
  [v3 reloadRowsAtIndexPaths:v4 withRowAnimation:5];
}

LABEL_33:
      }
    }

    __int128 v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    uint64_t v72 = 0u;
    uint64_t v73 = 0u;
    id v70 = 0u;
    uint64_t v71 = 0u;
    __int128 v44 = v20;
    __int128 v45 = [v44 countByEnumeratingWithState:&v70 objects:v83 count:16];
    if (v45)
    {
      __int128 v46 = *(void *)v71;
      do
      {
        for (k = 0LL; k != v45; k = (char *)k + 1)
        {
          if (*(void *)v71 != v46) {
            objc_enumerationMutation(v44);
          }
          uint64_t v48 = *(void **)(*((void *)&v70 + 1) + 8LL * (void)k);
          __int16 v49 = (void *)objc_claimAutoreleasedReturnValue([v48 representedElementKind]);

          if (v49)
          {
            id v50 = (void *)objc_claimAutoreleasedReturnValue([v48 indexPath]);
            __int16 v51 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v50 section]));
            [v43 setObject:v48 forKeyedSubscript:v51];
          }
        }

        __int128 v45 = [v44 countByEnumeratingWithState:&v70 objects:v83 count:16];
      }

      while (v45);
    }

    -[MTBaseCollectionViewFlowLayout appliedYOffset](self, "appliedYOffset");
    id v53 = v52;
    __int16 v54 = (void *)objc_claimAutoreleasedReturnValue(-[MTCollectionViewFlowLayout collectionView](self, "collectionView"));
    id v55 = (uint64_t)[v54 numberOfSections];

    if (v55 >= 1)
    {
      uint64_t v56 = v55 + 1;
      v57 = 1.79769313e308;
      while (1)
      {
        v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathWithIndex:](&OBJC_CLASS___NSIndexPath, "indexPathWithIndex:", v56 - 2));
        id v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v56 - 2));
        id v60 = (void *)objc_claimAutoreleasedReturnValue([v43 objectForKeyedSubscript:v59]);

        if (v60) {
          goto LABEL_48;
        }
        v69.receiver = self;
        v69.super_class = (Class)&OBJC_CLASS___MTCollectionViewFlowLayout;
        uint64_t v61 = -[MTCollectionViewFlowLayout layoutAttributesForSupplementaryViewOfKind:atIndexPath:]( &v69,  "layoutAttributesForSupplementaryViewOfKind:atIndexPath:",  UICollectionElementKindSectionHeader,  v58);
        id v60 = (void *)objc_claimAutoreleasedReturnValue(v61);
        if (v60) {
          break;
        }
LABEL_51:
      }

      [v44 addObject:v60];
LABEL_48:
      -[MTCollectionViewFlowLayout updateAttributes:withTopAlignmentGuide:andLastYOrigin:]( self,  "updateAttributes:withTopAlignmentGuide:andLastYOrigin:",  v60,  v53,  v57);
      [v60 frame];
      if (v57 >= v62) {
        v57 = v62;
      }

      goto LABEL_51;
    }

    int v11 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    id v31 = 8 * v22;
    uint64_t v32 = *(void **)(*(void *)(v5 + 48) + v31);
    __int128 v33 = *(void **)(*(void *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      __int128 v34 = v32;
      __int128 v35 = v33;
    }

    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    id v16 = -1LL << *(_BYTE *)(v8 + 32);
    id v17 = result & ~v16;
    id v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      __int128 v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v29 = v18 == v28;
        if (v18 == v28) {
          id v18 = 0LL;
        }
        v27 |= v29;
        id v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      __int128 v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    __int128 v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  id v3 = v37;
  __int128 v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  __int128 v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *__int128 v24 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  void *v3 = v8;
  return result;
}

    int v11 = (v24 - 1) & v24;
    __int128 v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    id v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    id v31 = v30[1];
    __int128 v33 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      __int128 v34 = v33;
    }

    Hasher.init(_seed:)(v40, *(void *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    id v16 = result & ~v15;
    id v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      id v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          id v17 = 0LL;
        }
        v26 |= v28;
        id v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      id v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    __int128 v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *__int128 v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose(va, 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  id v3 = v36;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  __int128 v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v23 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  void *v3 = v8;
  return result;
}

  __break(1u);
}

LABEL_52:
    v63 = (void *)objc_claimAutoreleasedReturnValue( +[NSIndexPath indexPathForItem:inSection:]( &OBJC_CLASS___NSIndexPath,  "indexPathForItem:inSection:",  0LL,  0LL));
    v64 = (void *)objc_claimAutoreleasedReturnValue( -[MTCollectionViewFlowLayout layoutAttributesForSupplementaryViewOfKind:atIndexPath:]( self,  "layoutAttributesForSupplementaryViewOfKind:atIndexPath:",  @"MTUnplayedBackgroundCollectionReusableViewKind",  v63));
    [v44 addObject:v64];
    v65 = [v44 copy];
    -[MTCollectionViewFlowLayout updateCachedLayoutAttributesForElementsInRect:]( self,  "updateCachedLayoutAttributesForElementsInRect:",  v65);

    float v66 = v68;
  }

  return v65;
}

void sub_1000D045C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
}

uint64_t sub_1000D049C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000D04AC(uint64_t a1)
{
}

void sub_1000D04B4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playlistUuid]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 playlistForUuid:v6]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1000D0510(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained dismissViewControllerAnimated:1 completion:0];
  }

void sub_1000D0998( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_1000D09D4(id *a1)
{
  id v1 = a1[4];
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[5] playlistUuid]);
  __int16 v54 = (void *)objc_claimAutoreleasedReturnValue([v1 playlistForUuid:v2]);

  id v53 = (void *)objc_claimAutoreleasedReturnValue([v54 defaultSettings]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v54 title]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [v4 localizedStringForKey:@"TITLE_PLACEHOLDER" value:&stru_100248948 table:0]);
  v70[0] = _NSConcreteStackBlock;
  v70[1] = 3221225472LL;
  v70[2] = sub_1000D140C;
  v70[3] = &unk_100244008;
  objc_copyWeak(&v71, a1 + 7);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[MTSetting textSettingWithInitialValue:placeholder:identifier:changeHandler:]( &OBJC_CLASS___MTSetting,  "textSettingWithInitialValue:placeholder:identifier:changeHandler:",  v3,  v5,  @"title",  v70));

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlaylist containerOrderOptionArray:](&OBJC_CLASS___MTPlaylist, "containerOrderOptionArray:", 0LL));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlaylist containerOrderOptionArray:](&OBJC_CLASS___MTPlaylist, "containerOrderOptionArray:", 1LL));
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlaylist containerOrderOptionValues](&OBJC_CLASS___MTPlaylist, "containerOrderOptionValues"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[MTOptionsDescription optionsWithLongTitles:shortTitles:valueList:]( &OBJC_CLASS___MTOptionsDescription,  "optionsWithLongTitles:shortTitles:valueList:",  v7,  v8,  v9));

  int v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 localizedStringForKey:@"Play Order" value:&stru_100248948 table:0]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( [v13 localizedStringForKey:@"PLAY_ORDER_HEADER" value:&stru_100248948 table:0]);
  LODWORD(v_Block_object_dispose(va, 8) = [v54 containerOrder];
  v68[0] = _NSConcreteStackBlock;
  v68[1] = 3221225472LL;
  v68[2] = sub_1000D1454;
  v68[3] = &unk_100244030;
  objc_copyWeak(&v69, a1 + 7);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[MTSetting optionSettingWithTitle:headerTitle:footerText:initialValue:optionDescription:identifier:changeHandler:]( &OBJC_CLASS___MTSetting,  "optionSettingWithTitle:headerTitle:footerText:initialValue:optionDescription:identifier:changeHandler:",  v12,  v14,  0LL,  (int)v8,  v10,  @"order",  v68));

  id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 localizedStringForKey:@"Station" value:&stru_100248948 table:0]);
  v73[0] = v6;
  v73[1] = v15;
  id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v73, 2LL));
  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue( +[MTSettingsGroup groupWithTitle:footerText:settings:]( &OBJC_CLASS___MTSettingsGroup,  "groupWithTitle:footerText:settings:",  v17,  0LL,  v18));

  [a1[6] setObject:v19 forKey:@"station"];
  objc_destroyWeak(&v69);

  objc_destroyWeak(&v71);
  __int128 v20 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcastPlaylistSettings episodesOptionArray:defaultValue:]( &OBJC_CLASS___MTPodcastPlaylistSettings,  "episodesOptionArray:defaultValue:",  0LL,  0LL));
  __int16 v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "subarrayWithRange:", 1, (char *)objc_msgSend(v20, "count") - 1));

  __int128 v21 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcastPlaylistSettings episodesOptionArray:defaultValue:]( &OBJC_CLASS___MTPodcastPlaylistSettings,  "episodesOptionArray:defaultValue:",  1LL,  0LL));
  __int16 v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "subarrayWithRange:", 1, (char *)objc_msgSend(v21, "count") - 1));

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcastPlaylistSettings episodesOptionValues]( &OBJC_CLASS___MTPodcastPlaylistSettings,  "episodesOptionValues"));
  id v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSOrderedSet orderedSetWithOrderedSet:range:copyItems:]( NSOrderedSet,  "orderedSetWithOrderedSet:range:copyItems:",  v22,  1,  (char *)[v22 count] - 1,  0));

  __int16 v49 = (void *)objc_claimAutoreleasedReturnValue( +[MTOptionsDescription optionsWithLongTitles:shortTitles:valueList:]( &OBJC_CLASS___MTOptionsDescription,  "optionsWithLongTitles:shortTitles:valueList:",  v52,  v51,  v50));
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  __int128 v24 = (void *)objc_claimAutoreleasedReturnValue( [v23 localizedStringForKey:@"Episodes Header" value:&stru_100248948 table:0]);
  id v25 = [v53 episodesToShow];
  v66[0] = _NSConcreteStackBlock;
  v66[1] = 3221225472LL;
  v66[2] = sub_1000D1490;
  v66[3] = &unk_100244030;
  objc_copyWeak(&v67, a1 + 7);
  uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue( +[MTSetting optionSettingWithTitle:footerText:initialValue:optionDescription:identifier:changeHandler:]( &OBJC_CLASS___MTSetting,  "optionSettingWithTitle:footerText:initialValue:optionDescription:identifier:changeHandler:",  v24,  0LL,  v25,  v49,  @"episodes",  v66));

  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcastPlaylistSettings mediaOptionArray:]( &OBJC_CLASS___MTPodcastPlaylistSettings,  "mediaOptionArray:",  0LL));
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcastPlaylistSettings mediaOptionArray:]( &OBJC_CLASS___MTPodcastPlaylistSettings,  "mediaOptionArray:",  1LL));
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcastPlaylistSettings mediaOptionValues]( &OBJC_CLASS___MTPodcastPlaylistSettings,  "mediaOptionValues"));
  id v29 = (void *)objc_claimAutoreleasedReturnValue( +[MTOptionsDescription optionsWithLongTitles:shortTitles:valueList:]( &OBJC_CLASS___MTOptionsDescription,  "optionsWithLongTitles:shortTitles:valueList:",  v26,  v27,  v28));

  id v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  id v31 = (void *)objc_claimAutoreleasedReturnValue([v30 localizedStringForKey:@"Media Type" value:&stru_100248948 table:0]);
  LODWORD(v27) = [v53 mediaType];
  v64[0] = _NSConcreteStackBlock;
  v64[1] = 3221225472LL;
  v64[2] = sub_1000D14FC;
  v64[3] = &unk_100244030;
  objc_copyWeak(&v65, a1 + 7);
  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[MTSetting optionSettingWithTitle:footerText:initialValue:optionDescription:identifier:changeHandler:]( &OBJC_CLASS___MTSetting,  "optionSettingWithTitle:footerText:initialValue:optionDescription:identifier:changeHandler:",  v31,  0LL,  v27,  v29,  @"type",  v64));

  __int128 v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  __int128 v34 = (void *)objc_claimAutoreleasedReturnValue( [v33 localizedStringForKey:@"Hide Played Episodes" value:&stru_100248948 table:0]);
  LODWORD(v27) = [v53 showPlayedEpisodes];
  v62[0] = _NSConcreteStackBlock;
  v62[1] = 3221225472LL;
  v62[2] = sub_1000D1568;
  v62[3] = &unk_100244058;
  objc_copyWeak(&v63, a1 + 7);
  __int128 v35 = (void *)objc_claimAutoreleasedReturnValue( +[MTSetting switchSettingWithTitle:initialValue:identifier:changeHandler:]( &OBJC_CLASS___MTSetting,  "switchSettingWithTitle:initialValue:identifier:changeHandler:",  v34,  v27 ^ 1,  @"played",  v62));

  __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  id v37 = (void *)objc_claimAutoreleasedReturnValue([v36 localizedStringForKey:@"Include" value:&stru_100248948 table:0]);
  v72[0] = v48;
  v72[1] = v32;
  v72[2] = v35;
  uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v72, 3LL));
  uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue( +[MTSettingsGroup groupWithTitle:footerText:settings:]( &OBJC_CLASS___MTSettingsGroup,  "groupWithTitle:footerText:settings:",  v37,  0LL,  v38));

  [a1[6] setObject:v39 forKey:@"include"];
  objc_destroyWeak(&v63);

  objc_destroyWeak(&v65);
  objc_destroyWeak(&v67);

  id v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([v40 localizedStringForKey:@"Add Podcasts" value:&stru_100248948 table:0]);
  id v42 = (void *)objc_claimAutoreleasedReturnValue([a1[5] titleForCurrentPodcasts]);
  v60[0] = _NSConcreteStackBlock;
  v60[1] = 3221225472LL;
  v60[2] = sub_1000D15D4;
  v60[3] = &unk_100240290;
  objc_copyWeak(&v61, a1 + 7);
  __int128 v43 = (void *)objc_claimAutoreleasedReturnValue( +[MTSetting buttonSettingWithTitle:detailText:identifier:changeHandler:]( &OBJC_CLASS___MTSetting,  "buttonSettingWithTitle:detailText:identifier:changeHandler:",  v41,  v42,  @"add",  v60));

  __int128 v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  __int128 v45 = (void *)objc_claimAutoreleasedReturnValue( [v44 localizedStringForKey:@"PODCASTS_HEADER" value:&stru_100248948 table:0]);
  v56[0] = _NSConcreteStackBlock;
  v56[1] = 3221225472LL;
  v56[2] = sub_1000D1600;
  v56[3] = &unk_1002440F0;
  id v57 = a1[4];
  objc_copyWeak(&v59, a1 + 7);
  id v46 = v43;
  id v58 = v46;
  __int128 v47 = (void *)objc_claimAutoreleasedReturnValue( +[MTSettingsGroup groupWithTitle:footerText:settingsHandler:]( &OBJC_CLASS___MTSettingsGroup,  "groupWithTitle:footerText:settingsHandler:",  v45,  0LL,  v56));

  [a1[6] setObject:v47 forKey:@"podcasts"];
  objc_destroyWeak(&v59);

  objc_destroyWeak(&v61);
}

void sub_1000D1354( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id *location)
{
}

void sub_1000D140C(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained updateTitle:v3];
}

void sub_1000D1454(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateContainerOrder:a2];
}

void sub_1000D1490(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = kPlaylistSettingEpisodesToShow;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a2));
  [WeakRetained updateSetting:v3 value:v4];
}

void sub_1000D14FC(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = kPlaylistSettingMediaType;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a2));
  [WeakRetained updateSetting:v3 value:v4];
}

void sub_1000D1568(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = kPlaylistSettingShowPlayedEpisodes;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a2 ^ 1u));
  [WeakRetained updateSetting:v3 value:v4];
}

void sub_1000D15D4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained showAddPodcastsSheet];
}

id sub_1000D1600(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v7 = _NSConcreteStackBlock;
  uint64_t v8 = 3221225472LL;
  unsigned int v9 = sub_1000D1700;
  id v10 = &unk_1002440C8;
  id v11 = v3;
  objc_copyWeak(&v14, (id *)(a1 + 48));
  id v4 = v2;
  id v12 = v4;
  id v13 = *(id *)(a1 + 40);
  [v11 performBlockAndWait:&v7];
  id v5 = objc_msgSend(v4, "copy", v7, v8, v9, v10);

  objc_destroyWeak(&v14);
  return v5;
}

void sub_1000D16E8(_Unwind_Exception *a1)
{
}

void sub_1000D1700(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  from = (id *)(a1 + 56);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained playlistUuid]);
  id v25 = (void *)objc_claimAutoreleasedReturnValue([v1 playlistForUuid:v3]);

  id v4 = (void *)objc_claimAutoreleasedReturnValue([v25 podcasts]);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v25 defaultSettings]);
  [*(id *)(a1 + 40) addObject:*(void *)(a1 + 48)];
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  id obj = v4;
  id v26 = [obj countByEnumeratingWithState:&v32 objects:v36 count:16];
  if (v26)
  {
    uint64_t v23 = *(void *)v33;
    uint64_t v22 = kPlaylistSettingPodcast;
    uint64_t v21 = kPlaylistSettingPlaylist;
    uint64_t v20 = kMTPodcastPlaylistSettingsEntityName;
    do
    {
      for (i = 0LL; i != v26; i = (char *)i + 1)
      {
        if (*(void *)v33 != v23) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)i);
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcastPlaylistSettings episodesOptionArray:defaultValue:]( MTPodcastPlaylistSettings,  "episodesOptionArray:defaultValue:",  0,  [v27 episodesToShow]));
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcastPlaylistSettings episodesOptionArray:defaultValue:]( MTPodcastPlaylistSettings,  "episodesOptionArray:defaultValue:",  1,  [v27 episodesToShow]));
        unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcastPlaylistSettings episodesOptionValues]( &OBJC_CLASS___MTPodcastPlaylistSettings,  "episodesOptionValues"));
        id v10 = (void *)objc_claimAutoreleasedReturnValue( +[MTOptionsDescription optionsWithLongTitles:shortTitles:valueList:footerTextCallback:headerTextCallback:]( &OBJC_CLASS___MTOptionsDescription,  "optionsWithLongTitles:shortTitles:valueList:footerTextCallback:headerTextCallback:",  v7,  v8,  v9,  0LL,  &stru_100244078));

        id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"%K = %@ AND %K = %@",  v22,  v6,  v21,  v25));
        id v12 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectsInEntity:v20 predicate:v11 sortDescriptors:0 returnsObjectsAsFaults:1]);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 lastObject]);
        else {
          uint64_t v14 = (uint64_t)[v13 episodesToShow];
        }
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v6 title]);
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v6 uuid]);
        v29[0] = _NSConcreteStackBlock;
        v29[1] = 3221225472LL;
        v29[2] = sub_1000D1B30;
        v29[3] = &unk_1002440A0;
        objc_copyWeak(&v31, from);
        id v17 = v13;
        id v30 = v17;
        id v18 = (void *)objc_claimAutoreleasedReturnValue( +[MTSetting optionSettingWithTitle:footerText:initialValue:optionDescription:identifier:changeHandler:]( &OBJC_CLASS___MTSetting,  "optionSettingWithTitle:footerText:initialValue:optionDescription:identifier:changeHandler:",  v15,  0LL,  v14,  v10,  v16,  v29));

        [*(id *)(a1 + 40) addObject:v18];
        objc_destroyWeak(&v31);
      }

      id v26 = [obj countByEnumeratingWithState:&v32 objects:v36 count:16];
    }

    while (v26);
  }
}

void sub_1000D1ABC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id *location)
{
}

NSString *__cdecl sub_1000D1ADC(id a1, unint64_t a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 localizedStringForKey:@"Include" value:&stru_100248948 table:0]);

  return (NSString *)v3;
}

void sub_1000D1B30(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
  [WeakRetained updateShowSetting:a2 forSettings:v4];
}

void sub_1000D1DA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000D1DD4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playlistUuid]);
  id v5 = (id)objc_claimAutoreleasedReturnValue([v2 playlistForUuid:v3]);

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v5 includesAllPodcasts];
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v5 podcasts]);
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v4 count];

    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [*(id *)(a1 + 32) countOfPodcasts];
  }
}

void sub_1000D2164(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playlistUuid]);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v2 playlistForUuid:v3]);

  [v6 setIncludesAllPodcasts:0];
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v6 podcasts]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectAtIndex:*(void *)(a1 + 48)]);
  [v6 removePodcast:v5];
}

void sub_1000D2304(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastPlaylistSettingsForUuid:*(void *)(a1 + 40)]);
  id v5 = v2;
  if (*(void *)(a1 + 48) == 6LL)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 playlist]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 defaultSettings]);

    [v5 setTracksDefault:1];
    [v5 takeValuesFromDefaultSettings:v4];
  }

  else
  {
    [v2 setTracksDefault:0];
  }

  [v5 setEpisodesToShow:*(void *)(a1 + 48)];
  [v5 setNeedsUpdate:1];
}

void sub_1000D24D4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playlistUuid]);
  id v7 = (id)objc_claimAutoreleasedReturnValue([v2 playlistForUuid:v3]);

  id v4 = (void *)objc_claimAutoreleasedReturnValue([v7 defaultSettings]);
  [v4 setValue:*(void *)(a1 + 48) forKey:*(void *)(a1 + 56)];
  [v4 setNeedsUpdate:1];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v7 settings]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000D25B4;
  void v8[3] = &unk_100244140;
  id v9 = v4;
  id v6 = v4;
  [v5 enumerateObjectsUsingBlock:v8];
}

id sub_1000D25B4(uint64_t a1, void *a2)
{
  return [a2 takeValuesFromDefaultSettings:*(void *)(a1 + 32)];
}

void sub_1000D26A8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playlistUuid]);
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 playlistForUuid:v3]);

  [v4 setContainerOrder:*(unsigned int *)(a1 + 48)];
  [v4 setNeedsUpdate:1];
}

void sub_1000D28E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000D290C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playlistUuid]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 playlistForUuid:v3]);

  uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 title]);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v4 includesAllPodcasts];
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "podcasts", 0));
  id v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v16;
    do
    {
      id v12 = 0LL;
      do
      {
        if (*(void *)v16 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void **)(a1 + 48);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v15 + 1) + 8 * (void)v12) uuid]);
        [v13 addObject:v14];

        id v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }

    while (v10);
  }
}

void sub_1000D2B58(_Unwind_Exception *a1)
{
}

void sub_1000D2B74(id *a1)
{
  id v2 = a1[4];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1[5] playlistUuid]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 playlistForUuid:v3]);

  uint64_t v5 = kPodcastUuid;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained addPodcastsViewController]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 podcastUuids]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"%K in %@",  v5,  v8));

  id v10 = a1[4];
  uint64_t v11 = kMTPodcastEntityName;
  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast sortDescriptorsForAllPodcasts](&OBJC_CLASS___MTPodcast, "sortDescriptorsForAllPodcasts"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v10 objectsInEntity:v11 predicate:v9 sortDescriptors:v12]);

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSOrderedSet orderedSetWithArray:](&OBJC_CLASS___NSOrderedSet, "orderedSetWithArray:", v13));
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v4 podcasts]);
  id v16 = [v15 mutableCopy];

  [v16 minusOrderedSet:v14];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  void v22[2] = sub_1000D2DC8;
  v22[3] = &unk_100244190;
  id v23 = v4;
  id v17 = v4;
  [v16 enumerateObjectsUsingBlock:v22];
  [v17 setPodcasts:v14];
  id v18 = objc_loadWeakRetained(a1 + 6);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 addPodcastsViewController]);
  objc_msgSend(v17, "setIncludesAllPodcasts:", objc_msgSend(v19, "allPodcastsSelected"));

  [v17 setNeedsUpdate:1];
  [a1[4] saveInCurrentBlock];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000D2DD4;
  block[3] = &unk_100240290;
  objc_copyWeak(&v21, a1 + 6);
  dispatch_async(&_dispatch_main_q, block);
  objc_destroyWeak(&v21);
}

id sub_1000D2DC8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) removePodcast:a2];
}

void sub_1000D2DD4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[SyncKeysRepository shared](&OBJC_CLASS____TtC18PodcastsFoundation18SyncKeysRepository, "shared"));
  [v1 setIsPlaylistSyncDirty:1];

  id v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained settingsController]);
  [v2 reloadGroupWithIdentifier:@"podcasts"];

  [WeakRetained updatePodcastCount];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained delegate]);
  [v3 playlistSettingsDidChangeSetting:WeakRetained];
}

void sub_1000D2F84(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playlistUuid]);
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 playlistForUuid:v3]);

  [v4 setIsUngroupedList:*(_BYTE *)(a1 + 48) == 0];
  [v4 setNeedsUpdate:1];
}

void sub_1000D31DC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playlistUuid]);
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 playlistForUuid:v3]);

  [v4 setTitle:*(void *)(a1 + 48)];
}

id sub_1000D376C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateEmptyView];
}

id sub_1000D3818(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateEmptyView];
}

void sub_1000D3E10(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) emptyContentViewController]);
  id v1 = (void *)objc_claimAutoreleasedReturnValue([v2 view]);
  [v1 setAlpha:0.0];
}

id sub_1000D3E5C(uint64_t a1)
{
  return [*(id *)(a1 + 32) tearDownEmptyContentViewController];
}

void sub_1000D3E64(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) emptyContentViewController]);
  id v1 = (void *)objc_claimAutoreleasedReturnValue([v2 view]);
  [v1 setAlpha:1.0];
}

void sub_1000D42D8(id a1)
{
  id v1 = sub_100017E54();
  uint64_t v2 = objc_claimAutoreleasedReturnValue(v1);
  uint64_t v3 = (void *)qword_1002B6B18;
  qword_1002B6B18 = v2;
}

id sub_1000D5A2C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setSelectedIndexPath:*(void *)(a1 + 40)];
}

id sub_1000D5E94(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isDark];
  if ((_DWORD)result)
  {
    [*(id *)(a1 + 32) resetGoDarkWithReason:3];
    return [*(id *)(a1 + 40) saveInCurrentBlock];
  }

  return result;
}

void sub_1000D60FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000D6120(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateDarkPlacard];
}

void sub_1000D67D8(id a1)
{
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSArray);
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSString);
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSNumber);
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSData);
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v4, 5LL));
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v1, v4, v5, v6, v7));
  uint64_t v3 = (void *)qword_1002B6B30;
  qword_1002B6B30 = v2;
}

LABEL_22:
    }
  }

  if (v6) {
    uint64_t v7 = v6;
  }
  __int128 v15 = (char *)[v7 row];
LABEL_24:

  return (unint64_t)v15;
}

              goto LABEL_28;
            }
          }
        }

        id v46 = v12;
        uint64_t v22 = v4;
        id v23 = _MTLogCategoryCloudSync(v13);
        __int128 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) logPrefix]);
          id v26 = (void *)objc_claimAutoreleasedReturnValue([v3 description]);
          *(_DWORD *)buf = 138543875;
          id v57 = v25;
          id v58 = 2113;
          id v59 = v22;
          id v60 = 2112;
          id v61 = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Adding Podcast from Sync with title: %{private}@, PodcastDict: %{Private}@",  buf,  0x20u);
        }

        uint64_t v27 = *(void *)(v1 + 48);
        uint64_t v28 = +[MTPodcast defaultShowType](&OBJC_CLASS___MTPodcast, "defaultShowType");
        id v29 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v47]);
        id v30 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcast insertNewPodcastInManagedObjectContext:subscribed:feedUrl:showType:showTypeInFeed:title:author:provider:imageUrl:description:displayType:showSpecificUpsellCopy:]( &OBJC_CLASS___MTPodcast,  "insertNewPodcastInManagedObjectContext:subscribed:feedUrl:showType:showTypeInFeed:title:author :provider:imageUrl:description:displayType:showSpecificUpsellCopy:",  v27,  1LL,  v5,  v28,  0LL,  v29,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL));

        if (v30)
        {
          [v30 setHasBeenSynced:1];
          [v30 setStoreCollectionId:v7];
          [v30 setImporting:1];
          __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v30 displayType]);
          uint64_t v4 = v22;
          if (v32)
          {

            id v1 = v41;
            id v12 = v46;
LABEL_19:
            [*(id *)(v1 + 40) updateSettingsForLocalPodcast:v30 remotePodcast:v3 ctx:*(void *)(v1 + 48)];
            uint64_t v14 = (os_log_s *)v30;
            goto LABEL_28;
          }

          id v1 = v41;
          id v12 = v46;
          id v37 = (void *)objc_claimAutoreleasedReturnValue( +[PodcastRequestManager sharedInstance]( &OBJC_CLASS____TtC18PodcastsFoundation21PodcastRequestManager,  "sharedInstance"));
          uint64_t v38 = [v30 storeCollectionId];
          v48[0] = _NSConcreteStackBlock;
          v48[1] = 3221225472LL;
          v48[2] = sub_1001155DC;
          v48[3] = &unk_1002452D0;
          uint64_t v39 = *(void **)(v41 + 48);
          v48[4] = *(void *)(v41 + 40);
          __int16 v49 = v30;
          id v50 = v3;
          __int16 v51 = v39;
          uint64_t v14 = v30;
          [v37 updatePodcastWithStoreId:v38 completion:v48];

          id v1 = v41;
        }

        else
        {
          __int128 v34 = _MTLogCategoryCloudSync(v31);
          uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
          uint64_t v4 = v22;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            __int128 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(v41 + 40) logPrefix]);
            __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v3 description]);
            *(_DWORD *)buf = 138543619;
            id v57 = v35;
            id v58 = 2113;
            id v59 = v36;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%{public}@ We can't subscribe from cloud to podcast because the podcast was not found in local DB and a ne w one was impossible to insert for some reason. Remote podcast: %{private}@",  buf,  0x16u);
          }

          id v1 = v41;
          id v12 = v46;
        }

  id v12 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v4);
  return v12;
}

  __int128 v24 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  id v25 = (void *)(*(void *)(v24 + 48) + 16 * a3);
  *id v25 = a1;
  v25[1] = a2;
  id v26 = *(void *)(v24 + 16);
  uint64_t v27 = __OFADD__(v26, 1LL);
  uint64_t v28 = v26 + 1;
  if (v27) {
    __break(1u);
  }
  else {
    *(void *)(v24 + 16) = v28;
  }
}

void sub_1000D7E10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000D7E2C(uint64_t a1, void *a2)
{
  uint64_t v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained textSettingChanged:*(void *)(a1 + 32) value:v4];
}

void sub_1000D8128(id a1)
{
  id v1 = objc_opt_new(&OBJC_CLASS___NSMutableSet);
  uint64_t v2 = (void *)qword_1002B6B40;
  qword_1002B6B40 = (uint64_t)v1;

  uint64_t v3 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  id v4 = (void *)qword_1002B6B48;
  qword_1002B6B48 = (uint64_t)v3;
}

void sub_1000D864C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

uint64_t sub_1000D8670(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000D8680(uint64_t a1)
{
}

void sub_1000D8688(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)]);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = objc_claimAutoreleasedReturnValue([v2 feedURL]);
    uint64_t v5 = *(void *)(*(void *)(a1 + 72) + 8LL);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    if (*(_BYTE *)(a1 + 96))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v7 = *(void **)(a1 + 48);
      uint64_t v9 = *(void *)(a1 + 56);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) absoluteString]);
      *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = [v7 updatePodcastWithUuid:v8 withFeed:v9 ori ginalFeedUrl:v10 source:*(void *)(a1 + 88)];

      uint64_t v12 = _MTLogCategoryFeedUpdate(v11);
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) resolvedFeedURL]);
        __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) absoluteString]);
        int v16 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL);
        int v21 = 138413058;
        uint64_t v22 = v14;
        __int16 v23 = 2112;
        __int128 v24 = v15;
        __int16 v25 = 1024;
        int v26 = v16;
        __int16 v27 = 2048;
        id v28 = [v3 storeCollectionId];
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Feed URL %@, requestURL %@, updatedFeedURL %d, for show adam ID %lld",  (uint8_t *)&v21,  0x26u);
      }
    }

    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)]);

    +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
    objc_msgSend(v17, "setUpdatedDate:");
    [v17 setImporting:0];
    [v17 setAuthenticatedDark:0];
    [v17 setFeedUpdateNeedsRetry:0];
    [v17 setConsecutiveFeedFetchErrors:0];
    if (+[MTStoreIdentifier isEmpty:]( MTStoreIdentifier,  "isEmpty:",  [v17 storeCollectionId]))
    {
      id v18 = (void *)objc_claimAutoreleasedReturnValue(+[MTStoreInfoUpdater sharedInstance](&OBJC_CLASS___MTStoreInfoUpdater, "sharedInstance"));
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v17 uuid]);
      [v18 updateStoreInfoForPodcast:v19];
    }

    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[PUIFeedManagerArtworkBridge shared](&OBJC_CLASS___PUIFeedManagerArtworkBridge, "shared"));
    [v20 updateArtworkForShow:v17 useBackgroundFetch:*(unsigned __int8 *)(a1 + 97) fetchUberImage:0];
  }

LABEL_59:
      __int128 v137 = (void *)objc_claimAutoreleasedReturnValue([v379 episodeStoreId]);
      __int128 v138 = (uint64_t)[v137 longLongValue];

      __int128 v140 = _MTLogCategoryFeedUpdate(v139);
      __int128 v141 = (os_log_s *)objc_claimAutoreleasedReturnValue(v140);
      __int128 v142 = v87;
      if (os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v143 = (void *)objc_claimAutoreleasedReturnValue([v14 uuid]);
        __int128 v144 = (void *)objc_claimAutoreleasedReturnValue([v14 title]);
        __int128 v145 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v138));
        *(_DWORD *)buf = 138543874;
        v397 = v143;
        v398 = 2112;
        v399 = v144;
        v400 = 2112;
        v401 = *(double *)&v145;
        _os_log_impl( (void *)&_mh_execute_header,  v141,  OS_LOG_TYPE_DEFAULT,  "%{public}@ - %@ serverEpisode %@",  buf,  0x20u);

        uint64_t v87 = v142;
        __int128 v93 = &OBJC_CLASS___DebugUtil_ptr;
      }

      if (!v92) {
        break;
      }
      if (v138 > 0) {
        __int128 v147 = v124;
      }
      else {
        __int128 v147 = 0;
      }
      if ((v147 & 1) != 0) {
        goto LABEL_68;
      }
LABEL_73:
      v151 = v92;
      if ((v124 & 1) == 0) {
        goto LABEL_74;
      }
LABEL_77:
      v78 = v372;
LABEL_78:
      __int16 v163 = v151;
      v151 = (void *)objc_claimAutoreleasedReturnValue( -[MTBaseFeedManager _insertNewEpisodeForServerEpisode:podcast:ctx:]( v78,  "_insertNewEpisodeForServerEpisode:podcast:ctx:",  v379,  v14,  v13));

      v165 = _MTLogCategoryFeedUpdate(v164);
      v166 = (os_log_s *)objc_claimAutoreleasedReturnValue(v165);
      if (os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT))
      {
        v167 = (void *)objc_claimAutoreleasedReturnValue([v14 uuid]);
        v168 = (void *)objc_claimAutoreleasedReturnValue([v14 title]);
        v169 = (void *)objc_claimAutoreleasedReturnValue([v151 uuid]);
        v170 = (void *)objc_claimAutoreleasedReturnValue([v151 title]);
        *(_DWORD *)buf = 138544130;
        v397 = v167;
        v398 = 2112;
        v399 = v168;
        v400 = 2114;
        v401 = *(double *)&v169;
        v402 = 2112;
        v403 = *(double *)&v170;
        _os_log_impl( (void *)&_mh_execute_header,  v166,  OS_LOG_TYPE_DEFAULT,  "%{public}@ - %@ adding new episode %{public}@ - %@",  buf,  0x2Au);

        v78 = v372;
        uint64_t v87 = v142;
      }

      ++v363;
      if (!v151) {
        goto LABEL_119;
      }
      double v162 = 1;
LABEL_82:
      v171 = _MTLogCategoryFeedUpdate(v146);
      v172 = (os_log_s *)objc_claimAutoreleasedReturnValue(v171);
      if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
      {
        v173 = (void *)objc_claimAutoreleasedReturnValue([v378 uuid]);
        v174 = (void *)objc_claimAutoreleasedReturnValue([v378 title]);
        v175 = (void *)objc_claimAutoreleasedReturnValue([v151 uuid]);
        v176 = (void *)objc_claimAutoreleasedReturnValue([v151 title]);
        *(_DWORD *)buf = 138544130;
        v397 = v173;
        v398 = 2112;
        v399 = v174;
        v400 = 2114;
        v401 = *(double *)&v175;
        v402 = 2112;
        v403 = *(double *)&v176;
        _os_log_impl( (void *)&_mh_execute_header,  v172,  OS_LOG_TYPE_DEFAULT,  "%{public}@ - %@ updating episode %{public}@ - %@",  buf,  0x2Au);

        v78 = v372;
      }

      [v151 setFeedDeleted:0];
      v177 = (void *)objc_claimAutoreleasedReturnValue([v379 guid]);
      [v151 setGuid:v177];

      v178 = (void *)objc_claimAutoreleasedReturnValue([v379 title]);
      v179 = (void *)objc_claimAutoreleasedReturnValue([v178 stringByStrippingHTML]);

      [v151 setTitle:v179];
      v180 = (void *)objc_claimAutoreleasedReturnValue([v379 itunesTitle]);
      [v151 setItunesTitle:v180];

      v181 = (void *)objc_claimAutoreleasedReturnValue(-[MTBaseFeedManager configuration](v78, "configuration"));
      v182 = [v181 usesCleanEpisodeTitles];

      if (v182)
      {
        v183 = (void *)objc_claimAutoreleasedReturnValue([v378 title]);
        v184 = (void *)objc_claimAutoreleasedReturnValue([v179 cleanedTitleStringWithPrefix:v183]);
        [v151 setCleanedTitle:v184];
      }

      v185 = (void *)objc_claimAutoreleasedReturnValue([v379 itemDescription]);
      [v151 setItemDescription:v185];

      v186 = (void *)objc_claimAutoreleasedReturnValue([v379 itemSummary]);
      [v151 setItunesSubtitle:v186];

      v187 = (void *)objc_claimAutoreleasedReturnValue([v379 author]);
      [v151 setAuthor:v187];

      objc_msgSend(v151, "setByteSize:", objc_msgSend(v379, "byteSize"));
      v188 = (void *)objc_claimAutoreleasedReturnValue([v379 uti]);
      [v151 setUti:v188];

      v189 = objc_claimAutoreleasedReturnValue([v379 pubDate]);
      if (v189)
      {
        v190 = (void *)v189;
        [v151 pubDate];
        v192 = v191;
        v193 = (void *)objc_claimAutoreleasedReturnValue([v379 pubDate]);
        [v193 timeIntervalSinceReferenceDate];
        v195 = v194;

        if (v192 != v195)
        {
          v196 = (void *)objc_claimAutoreleasedReturnValue([v379 pubDate]);
          [v196 timeIntervalSinceReferenceDate];
          objc_msgSend(v151, "setPubDate:");
        }
      }

      v197 = objc_claimAutoreleasedReturnValue([v379 firstTimeAvailableAsFree]);
      if (v197)
      {
        v198 = (void *)v197;
        [v151 firstTimeAvailableAsFree];
        v200 = v199;
        v201 = (void *)objc_claimAutoreleasedReturnValue([v379 firstTimeAvailableAsFree]);
        [v201 timeIntervalSinceReferenceDate];
        v203 = v202;

        if (v200 != v203)
        {
          v204 = (void *)objc_claimAutoreleasedReturnValue([v379 firstTimeAvailableAsFree]);
          [v204 timeIntervalSinceReferenceDate];
          objc_msgSend(v151, "setFirstTimeAvailableAsFree:");
        }
      }

      v205 = objc_claimAutoreleasedReturnValue([v379 firstTimeAvailableAsPaid]);
      if (v205)
      {
        v206 = (void *)v205;
        [v151 firstTimeAvailableAsPaid];
        v208 = v207;
        v209 = (void *)objc_claimAutoreleasedReturnValue([v379 firstTimeAvailableAsPaid]);
        [v209 timeIntervalSinceReferenceDate];
        v211 = v210;

        if (v208 != v211)
        {
          v212 = (void *)objc_claimAutoreleasedReturnValue([v379 firstTimeAvailableAsPaid]);
          [v212 timeIntervalSinceReferenceDate];
          objc_msgSend(v151, "setFirstTimeAvailableAsPaid:");
        }
      }

      objc_msgSend(v151, "setExplicit:", objc_msgSend(v379, "isExplicit"));
      [v151 setEpisodeLevel:v381];
      v213 = (void *)objc_claimAutoreleasedReturnValue([v379 episodeType]);
      [v151 setEpisodeType:v213];

      v214 = [v151 episodeNumber];
      if (v214 != [v379 episodeNumber]) {
        objc_msgSend(v151, "setEpisodeNumber:", objc_msgSend(v379, "episodeNumber"));
      }
      v215 = [v151 seasonNumber];
      if (v215 != [v379 seasonNumber]) {
        objc_msgSend(v151, "setSeasonNumber:", objc_msgSend(v379, "seasonNumber"));
      }
      v216 = (void *)objc_claimAutoreleasedReturnValue([v379 webpageURL]);
      [v151 setWebpageURL:v216];

      [v151 setIsHidden:0];
      [v379 entitledDuration];
      if (v217 > 0.0)
      {
        [v379 entitledDuration];
        objc_msgSend(v151, "setEntitledDuration:");
      }

      [v379 duration];
      if (v218 > 0.0)
      {
        [v379 duration];
        objc_msgSend(v151, "setFreeDuration:");
      }

      v219 = (void *)objc_claimAutoreleasedReturnValue([v379 entitledEnclosureURL]);
      [v151 setEntitledEnclosureURL:v219];

      v220 = (void *)objc_claimAutoreleasedReturnValue([v379 resolvedEnclosureUrl]);
      [v151 setFreeEnclosureURL:v220];

      v221 = (void *)objc_claimAutoreleasedReturnValue([v379 priceType]);
      [v151 setFreePriceType:v221];

      v222 = (void *)objc_claimAutoreleasedReturnValue([v379 entitledPriceType]);
      [v151 setEntitledPriceType:v222];

      v223 = (void *)objc_claimAutoreleasedReturnValue([v379 entitledTranscriptIdentifier]);
      [v151 setEntitledTranscriptIdentifier:v223];

      v224 = (void *)objc_claimAutoreleasedReturnValue([v379 freeTranscriptIdentifier]);
      [v151 setFreeTranscriptIdentifier:v224];

      v225 = (void *)objc_claimAutoreleasedReturnValue([v151 transcriptIdentifier]);
      v226 = (void *)objc_claimAutoreleasedReturnValue([v379 entitledTranscriptSnippet]);
      [v151 setEntitledTranscriptSnippet:v226];

      v227 = (void *)objc_claimAutoreleasedReturnValue([v379 freeTranscriptSnippet]);
      [v151 setFreeTranscriptSnippet:v227];

      v228 = (void *)objc_claimAutoreleasedReturnValue([v379 entitledTranscriptProvider]);
      [v151 setEntitledTranscriptProvider:v228];

      v229 = (void *)objc_claimAutoreleasedReturnValue([v379 freeTranscriptProvider]);
      [v151 setFreeTranscriptProvider:v229];

      if (v360)
      {
        [v379 entitledDuration];
        if (v230 > 0.0)
        {
          [v379 entitledDuration];
          objc_msgSend(v151, "setDuration:");
        }

        v231 = (void *)objc_claimAutoreleasedReturnValue([v379 entitledEnclosureURL]);

        if (v231)
        {
          v232 = (void *)objc_claimAutoreleasedReturnValue([v379 entitledEnclosureURL]);
          [v151 setEnclosureURL:v232];
        }

        v233 = (void *)objc_claimAutoreleasedReturnValue([v379 entitledPriceType]);
        [v151 setPriceType:v233];

        v234 = objc_claimAutoreleasedReturnValue([v379 entitledTranscriptIdentifier]);
      }

      else
      {
        [v151 freeDuration];
        objc_msgSend(v151, "setDuration:");
        v235 = (void *)objc_claimAutoreleasedReturnValue([v151 freeEnclosureURL]);
        [v151 setEnclosureURL:v235];

        v236 = (void *)objc_claimAutoreleasedReturnValue([v151 freePriceType]);
        [v151 setPriceType:v236];

        v234 = objc_claimAutoreleasedReturnValue([v151 freeTranscriptIdentifier]);
      }

      v237 = (void *)v234;
      [v151 setTranscriptIdentifier:v234];

      v238 = (void *)objc_claimAutoreleasedReturnValue(+[PFTranscriptProviderBridge shared](&OBJC_CLASS___PFTranscriptProviderBridge, "shared"));
      v239 = (void *)objc_claimAutoreleasedReturnValue([v151 transcriptIdentifier]);
      v240 = (void *)objc_claimAutoreleasedReturnValue([v151 assetURL]);
      objc_msgSend( v238,  "updateTTMLIDFrom:toNewID:hasDownloadedContent:forEpisodeAdamID:",  v225,  v239,  v240 != 0,  objc_msgSend(v151, "storeTrackId"));

      v78 = v372;
      uint64_t v87 = v142;
      if (v162)
      {
        v241 = _MTLogCategoryFeedUpdate([v151 updateEntitlementState]);
        v242 = (os_log_s *)objc_claimAutoreleasedReturnValue(v241);
        if (os_log_type_enabled(v242, OS_LOG_TYPE_DEFAULT))
        {
          v243 = (void *)objc_claimAutoreleasedReturnValue([v151 uuid]);
          v244 = (void *)objc_claimAutoreleasedReturnValue([v151 title]);
          v245 = [v151 entitlementState];
          *(_DWORD *)buf = 138543874;
          v397 = v243;
          v398 = 2112;
          v399 = v244;
          v400 = 2048;
          v401 = *(double *)&v245;
          _os_log_impl( (void *)&_mh_execute_header,  v242,  OS_LOG_TYPE_DEFAULT,  "%{public}@ - %@ set entitlement state for inserted episode to %lld from updatePodcastWithUuid",  buf,  0x20u);

          uint64_t v87 = v142;
        }
      }

      ++v381;

      uint64_t v14 = v378;
LABEL_119:
      id v86 = v362;
      [v151 resolveAvailabilityDate];
      [v151 firstTimeAvailable];
      id v65 = v373;
      if (v246 > v89 && [v151 isMedia])
      {
        [v151 firstTimeAvailable];
        uint64_t v89 = v247;
        v248 = objc_claimAutoreleasedReturnValue([v151 uuid]);

        v359 = (void *)v248;
        id v86 = v362;
      }

      if (__ROR8__(0x8F5C28F5C28F5C29LL * v87, 3) <= 0x147AE147AE147AEuLL) {
        [v13 saveInCurrentBlock];
      }

      objc_autoreleasePoolPop(context);
LABEL_125:
      uint64_t v88 = v368 + 1;
    }

    if (v138 < 1)
    {
      v151 = 0LL;
      goto LABEL_77;
    }

    id v69 = 0;
    goto LABEL_60;
  }

    uint64_t v68 = 0;
    goto LABEL_60;
  }

id sub_1000DB1E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _compareServerEpisode:a2 toServerEpisode:a3];
}

void sub_1000DBB60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000DBB78(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)]);
  if (v2)
  {
    uint64_t v3 = *(void **)(a1 + 56);
    id v10 = v2;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 redirectURL]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 absoluteString]);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v3 isUpdatingFeedUrl:v5];

    uint64_t v2 = v10;
    if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
    {
      uint64_t v6 = *(void **)(a1 + 56);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v10 updatedFeedURL]);
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v6 isUpdatingFeedUrl:v7];

      uint64_t v2 = v10;
      if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
      {
        uint64_t v8 = *(void **)(a1 + 56);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v10 feedURL]);
        *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v8 isUpdatingFeedUrl:v9];

        uint64_t v2 = v10;
      }
    }
  }
}

void sub_1000DBCF4(_Unwind_Exception *a1)
{
}

void sub_1000DBD50(_Unwind_Exception *a1)
{
}

void sub_1000DBE90(_Unwind_Exception *a1)
{
}

void sub_1000DBEAC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    uint64_t v3 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    if (!v4)
    {
      uint64_t v15 = _MTLogCategoryFeedUpdate(0LL);
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__int128 v33 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Data hash could not be created. Returning early.",  v33,  2u);
      }

      id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) absoluteString]);
      [WeakRetained _didFinishUpdatingFeedUrl:v17 withError:0];

      goto LABEL_23;
    }

    *(void *)__int128 v33 = 0LL;
    __int128 v34 = v33;
    uint64_t v35 = 0x3032000000LL;
    __int128 v36 = sub_1000D8670;
    id v37 = sub_1000D8680;
    id v38 = 0LL;
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_1000DC334;
    v29[3] = &unk_100240558;
    id v5 = (id)objc_claimAutoreleasedReturnValue([WeakRetained importContext]);
    id v30 = v5;
    id v31 = *(id *)(a1 + 32);
    __int128 v32 = v33;
    [v5 performBlockAndWait:v29];
    id v6 = (id)qword_1002B6B48;
    objc_sync_enter(v6);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1002B6B48 objectForKey:*((void *)v34 + 5)]);
    unsigned int v8 = [v4 isEqualToString:v7];

    objc_sync_exit(v6);
    uint64_t v10 = _MTLogCategoryFeedUpdate(v9);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) absoluteString]);
      *(_DWORD *)buf = 138412546;
      id v40 = v12;
      __int16 v41 = 1024;
      int v42 = v8 ^ 1;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "feedHasChangedSinceLastUpdate: %@ %d",  buf,  0x12u);
    }

    if ((v8 & 1) != 0)
    {
      uint64_t v14 = 0LL;
    }

    else
    {
      id v18 = objc_autoreleasePoolPush();
      uint64_t v19 = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v19);
      objc_autoreleasePoolPop(v18);
    }

    uint64_t v20 = _MTLogCategoryFeedUpdate(v13);
    int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) absoluteString]);
      *(_DWORD *)buf = 138412546;
      id v40 = v22;
      __int16 v41 = 1024;
      int v42 = v8 ^ 1;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "feedShouldUpdate: %@ %d", buf, 0x12u);
    }

    __int16 v23 = (void *)objc_claimAutoreleasedReturnValue( [WeakRetained preProcessFeedHook:v14 requestUrl:*(void *)(a1 + 32) needsUpdate:v8 ^ 1]);
    id v24 = (id)objc_claimAutoreleasedReturnValue([v23 createdPodcastUUID]);
    if (v24 || (id v24 = *((id *)v34 + 5)) != 0LL)
    {
      if ([v23 shouldContinue])
      {
        [WeakRetained processFeed:v14 podcastUUID:v24 requestUrl:*(void *)(a1 + 32) useBackgroundFetch:*(unsigned __int8 *)(a1 + 72) needsUpdate:v8 ^ 1 source:*(void *)(a1 + 64)];
        int v25 = 0;
        int v26 = 0LL;
LABEL_20:
        if (((v8 | v25) & 1) == 0)
        {
          id v27 = (id)qword_1002B6B48;
          objc_sync_enter(v27);
          [(id)qword_1002B6B48 setObject:v4 forKey:v24];
          [(id)objc_opt_class(WeakRetained) saveSubscriptionMetadata];
          objc_sync_exit(v27);
        }

        id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) absoluteString]);
        [WeakRetained _didFinishUpdatingFeedUrl:v28 withError:v26];

        _Block_object_dispose(v33, 8);
LABEL_23:

        goto LABEL_24;
      }

      int v25 = 0;
    }

    else
    {
      int v25 = 1;
    }

    int v26 = (void *)objc_claimAutoreleasedReturnValue( +[FeedUpdaterObjcError preProcessHookDeniedUpdate]( &OBJC_CLASS____TtC18PodcastsFoundation20FeedUpdaterObjcError,  "preProcessHookDeniedUpdate"));
    goto LABEL_20;
  }

LABEL_24:
}

        id v28 = (void *)objc_claimAutoreleasedReturnValue(+[MTImageStore defaultStore](&OBJC_CLASS___MTImageStore, "defaultStore", *(void *)v50));
        [v28 removeItemsWithPrefx:kMTLibraryDefaultImageKey];

        id v30 = _MTLogCategoryDatabase(v29);
        id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
LABEL_27:

          goto LABEL_28;
        }

        *(_WORD *)id v50 = 0;
        __int128 v32 = "[Migration] (Data) (TV) Removed items from MTImageStore with prefix kMTLibraryDefaultImageKey.";
LABEL_26:
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, v32, v50, 2u);
        goto LABEL_27;
      }

      uint64_t v22 = _MTLogCategoryDatabase([a1 recalculateAllPlaylists]);
      __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v50 = 0;
        id v24 = "[Migration] (Data) Finished recalculation for ALL playlists.";
LABEL_22:
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v24, v50, 2u);
      }
    }

    goto LABEL_24;
  }

LABEL_25:
}

  uint64_t v19 = *(void *)(v15 + 16);
  if ((*(void *)(v15 + 24) >> 1) - v19 < v10)
  {
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  if ((v10 & 0x8000000000000000LL) == 0)
  {
    uint64_t v20 = v15 + 8 * v19 + 32;
    int v21 = v7 + 8 * v6;
    if (v21 < v20 + 8 * v10 && v20 < v21 + 8 * v10)
    {
      id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
      goto LABEL_40;
    }

    sub_100134284(0LL, &qword_1002B4E40, &off_10023E2F8);
    swift_arrayInitWithCopy(v20);
    if (!v10)
    {
LABEL_31:
      int v25 = swift_unknownObjectRelease(v4);
      return specialized Array._endMutation()(v25);
    }

    uint64_t v22 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    __int16 v23 = __OFADD__(v22, v10);
    id v24 = v22 + v10;
    if (!v23)
    {
      *(void *)((*v5 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v24;
      goto LABEL_31;
    }

    goto LABEL_37;
  }

    uint64_t v11 = (v20 - 1) & v20;
    id v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_25:
    uint64_t v22 = *(void **)(*(void *)(v5 + 48) + 8 * v17);
    __int16 v23 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
    if ((v40 & 1) != 0)
    {
      sub_100136668(v23, v42);
    }

    else
    {
      sub_1001343F8((uint64_t)v23, (uint64_t)v42);
      id v24 = v22;
    }

    int v25 = *(void *)(v8 + 40);
    int v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    id v28 = v27;
    Hasher.init(_seed:)(v41, v25);
    String.hash(into:)(v41, v26, v28);
    id v29 = Hasher._finalize()();
    id result = (_OWORD *)swift_bridgeObjectRelease(v28);
    id v30 = -1LL << *(_BYTE *)(v8 + 32);
    id v31 = v29 & ~v30;
    __int128 v32 = v31 >> 6;
    if (((-1LL << v31) & ~*(void *)(v12 + 8 * (v31 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v31) & ~*(void *)(v12 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int128 v33 = 0;
      __int128 v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        uint64_t v35 = v32 == v34;
        if (v32 == v34) {
          __int128 v32 = 0LL;
        }
        v33 |= v35;
        __int128 v36 = *(void *)(v12 + 8 * v32);
      }

      while (v36 == -1);
      uint64_t v15 = __clz(__rbit64(~v36)) + (v32 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    *(void *)(*(void *)(v8 + 48) + 8 * v15) = v22;
    id result = sub_100136668(v42, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v19 = (void *)(v5 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  id v37 = 1LL << *(_BYTE *)(v5 + 32);
  if (v37 >= 64) {
    bzero(v19, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v19 = -1LL << v37;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_44:
  id result = (_OWORD *)swift_release(v5);
  void *v3 = v8;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    int v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_25:
    int v26 = *(void *)(v5 + 48) + 40 * v21;
    if ((a2 & 1) != 0)
    {
      id v27 = *(_OWORD *)v26;
      id v28 = *(_OWORD *)(v26 + 16);
      __int16 v41 = *(void *)(v26 + 32);
      uint64_t v39 = v27;
      id v40 = v28;
      sub_100136668((_OWORD *)(*(void *)(v5 + 56) + 32 * v21), v38);
    }

    else
    {
      sub_1001275AC(v26, (uint64_t)&v39);
      sub_1001343F8(*(void *)(v5 + 56) + 32 * v21, (uint64_t)v38);
    }

    id result = AnyHashable._rawHashValue(seed:)(*(void *)(v8 + 40));
    id v29 = -1LL << *(_BYTE *)(v8 + 32);
    id v30 = result & ~v29;
    id v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      int v16 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int128 v32 = 0;
      __int128 v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        __int128 v34 = v31 == v33;
        if (v31 == v33) {
          id v31 = 0LL;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v13 + 8 * v31);
      }

      while (v35 == -1);
      int v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    id v17 = *(void *)(v8 + 48) + 40 * v16;
    id v18 = v39;
    uint64_t v19 = v40;
    *(void *)(v17 + 32) = v41;
    *(_OWORD *)id v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    id result = (uint64_t)sub_100136668(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v16));
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  __int16 v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  __int128 v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v23 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_44:
  id result = swift_release(v5);
  void *v3 = v8;
  return result;
}

    uint64_t v7 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_5:
    id result = (uint64_t)[*(id *)(*(void *)(v3 + 56) + 8 * v13) *a1];
  }

  int v16 = v14 + 5;
  if (v16 >= v8)
  {
LABEL_25:
    swift_release(v3);
    swift_bridgeObjectRelease(v3);
    return i & 1;
  }

  uint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_24;
  }

  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_25;
    }
    uint64_t v15 = *(void *)(v4 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_24;
    }
  }

void sub_1000DC2D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000DC334(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) absoluteString]);
  id v7 = (id)objc_claimAutoreleasedReturnValue([v2 podcastForFeedUrl:v3]);

  uint64_t v4 = objc_claimAutoreleasedReturnValue([v7 uuid]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

id sub_1000DC5D0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) uniquenessHash];
}

id sub_1000DC5D8(uint64_t a1)
{
  uint64_t v2 = objc_opt_new(&OBJC_CLASS___IMPodcastParser);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[IMPodcastParser parseWithData:](v2, "parseWithData:", *(void *)(a1 + 32)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[IMPodcastParser parseError](v2, "parseError"));

  if (v4)
  {
    uint64_t v6 = _MTLogCategoryFeedUpdate(v5);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(-[IMPodcastParser parseError](v2, "parseError"));
      int v16 = 138412290;
      id v17 = v8;
      uint64_t v9 = "Feed parse error: %@";
LABEL_4:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v16, 0xCu);
    }
  }

  else
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 items]);
    id v12 = [v11 count];

    if (v12)
    {
      id v10 = v3;
      goto LABEL_8;
    }

    uint64_t v15 = _MTLogCategoryFeedUpdate(v13);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v3 title]);
      int v16 = 138412290;
      id v17 = v8;
      uint64_t v9 = "Feed has zero items, skipping update to %@";
      goto LABEL_4;
    }
  }

  id v10 = 0LL;
LABEL_8:

  return v10;
}

void sub_1000DC7EC(_Unwind_Exception *a1)
{
}

void sub_1000DC888(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[MTReachability sharedInstance](&OBJC_CLASS___MTReachability, "sharedInstance"));
  [v1 showInternetUnreachableDialog];
}

void sub_1000DCC4C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_opt_class(*(void *)(a1 + 32));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) absoluteString]);
  LODWORD(v2) = [v2 isUpdatingFeedUrl:v3];

  if ((_DWORD)v2)
  {
    uint64_t v5 = _MTLogCategoryFeedUpdate(v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) absoluteString]);
      *(_DWORD *)buf = 138412290;
      __int16 v23 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "NOT STARTING feed update, as Feed %@ is ALREADY updating.",  buf,  0xCu);
    }
  }

  else
  {
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](&OBJC_CLASS___MTDB, "sharedInstance"));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 importContext]);

    uint64_t v15 = _NSConcreteStackBlock;
    uint64_t v16 = 3221225472LL;
    id v17 = sub_1000DCE2C;
    id v18 = &unk_100240710;
    id v19 = v9;
    id v10 = *(id *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 64);
    id v20 = v10;
    uint64_t v21 = v11;
    uint64_t v6 = v9;
    -[os_log_s performBlock:](v6, "performBlock:", &v15);
    id v12 = (void *)objc_opt_class(*(void *)(a1 + 32));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) absoluteString]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) absoluteString]);
    [v12 didStartUpdatingFeedUrl:v13 cloudSyncUrl:v14];

    objc_msgSend( *(id *)(a1 + 32),  "_startDownloadForFeedUrl:cloudSyncFeedUrl:podcastStoreId:triggerBy:userInitiated:useBackgroundFetch:source:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 64),  *(void *)(a1 + 56),  *(unsigned __int8 *)(a1 + 80),  *(unsigned __int8 *)(a1 + 81),  *(void *)(a1 + 72),  v15,  v16,  v17,  v18);
  }
}

id sub_1000DCE2C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) absoluteString]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 podcastForFeedUrl:v3]);

  if (v4
    || (uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  *(void *)(a1 + 48))),  v7 = +[MTStoreIdentifier isNotEmptyNumber:]( &OBJC_CLASS___MTStoreIdentifier,  "isNotEmptyNumber:",  v6),  v6,  v7)
    && (uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForStoreId:*(void *)(a1 + 48)])) != 0)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    [v5 timeIntervalSinceReferenceDate];
    objc_msgSend(v4, "setLastFetchedDate:");
  }

  return [*(id *)(a1 + 32) saveInCurrentBlock];
}

void sub_1000DD020(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (v9)
  {
    uint64_t v11 = _MTLogCategoryFeedUpdate(v9);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v10 localizedDescription]);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v10 userInfo]);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKey:NSUnderlyingErrorKey]);
      *(_DWORD *)buf = 138412546;
      id v24 = v13;
      __int16 v25 = 2112;
      int v26 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%@: Underlying error %@", buf, 0x16u);
    }

    [*(id *)(a1 + 32) feedDownloadedWithError:v10 task:0 requestedUrl:*(void *)(a1 + 40)];
    uint64_t v16 = *(void **)(a1 + 32);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) absoluteString]);
    [v16 _didFinishUpdatingFeedUrl:v17 withError:v10];
  }

  else
  {
    id v18 = *(void **)(a1 + 32);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    void v21[2] = sub_1000DD218;
    v21[3] = &unk_100244300;
    id v22 = v8;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_1000DD220;
    v19[3] = &unk_100244328;
    id v20 = v7;
    [v18 preprocessFeedWithDataHashingBlock:v21 feedCreationBlock:v19 url:*(void *)(a1 + 40) useBackgroundFetch:*(unsigned __int8 *)(a1 + 56) source:*(void *)(a1 + 48)];

    id v17 = v22;
  }
}

id sub_1000DD218(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1000DD220(uint64_t a1)
{
  return _[*(id *)(a1 + 32) toFeed];
}

void sub_1000DD2D8(_Unwind_Exception *a1)
{
}

void sub_1000DD400(_Unwind_Exception *a1)
{
}

id sub_1000DD4C0(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 40LL);
  id v3 = objc_retainBlock(*(id *)(a1 + 40));
  [v2 addObject:v3];

  return objc_msgSend(*(id *)(a1 + 32), "_queue_processNextPendingFeedIfPossible");
}

id sub_1000DD57C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_processNextPendingFeedIfPossible");
}

void sub_1000DD900(_Unwind_Exception *a1)
{
}

void sub_1000DDC08(_Unwind_Exception *a1)
{
}

void sub_1000DDD50(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:*(void *)(a1 + 32) object:objc_opt_class(MTBaseFeedManager) userInfo:*(void *)(a1 + 40)];
}

LABEL_3:
}

void sub_1000DF014( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000DF504(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x1000DF3F8LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_1000DF570(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) absoluteString]);
  id v5 = (id)objc_claimAutoreleasedReturnValue([v2 podcastForFeedUrl:v3]);

  uint64_t v4 = v5;
  if (v5)
  {
    [v5 setAuthenticatedDark:1];
    [*(id *)(a1 + 32) saveInCurrentBlock];
    uint64_t v4 = v5;
  }
}

void sub_1000DF5E4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) absoluteString]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 podcastForFeedUrl:v3]);

  if (v4)
  {
    uint64_t v6 = _MTLogCategoryFeedUpdate(v5);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) absoluteString]);
      uint64_t v9 = *(void *)(a1 + 48);
      int v10 = 138412546;
      uint64_t v11 = v8;
      __int16 v12 = 2048;
      uint64_t v13 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Failed to fetch episodes for podcast using external feed url (%@) with status %ld. Incrementing consecutiveFeedF etchErrors count",  (uint8_t *)&v10,  0x16u);
    }

    objc_msgSend(v4, "setConsecutiveFeedFetchErrors:", (char *)objc_msgSend(v4, "consecutiveFeedFetchErrors") + 1);
    [*(id *)(a1 + 32) saveInCurrentBlock];
  }
}

uint64_t sub_1000DF6FC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000DF70C(uint64_t a1)
{
}

void sub_1000DF714(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) absoluteString]);
  id v7 = (id)objc_claimAutoreleasedReturnValue([v2 podcastForFeedUrl:v3]);

  uint64_t v4 = objc_claimAutoreleasedReturnValue([v7 uuid]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_1000DF78C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) absoluteString]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 podcastForFeedUrl:v3]);

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsAction error](&OBJC_CLASS___MTFeedUpdateMetricsAction, "error"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsDataKey statusCode](&OBJC_CLASS___MTFeedUpdateMetricsDataKey, "statusCode"));
  v15[0] = v6;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 56)));
  v16[0] = v7;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsDataKey error](&OBJC_CLASS___MTFeedUpdateMetricsDataKey, "error"));
  v15[1] = v8;
  uint64_t v9 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) metricsAdditionalData]);
  int v10 = (void *)v9;
  uint64_t v11 = &stru_100248948;
  if (v9) {
    uint64_t v11 = (const __CFString *)v9;
  }
  v16[1] = v11;
  __int16 v12 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsDataKey pcrFallback](&OBJC_CLASS___MTFeedUpdateMetricsDataKey, "pcrFallback"));
  v15[2] = v12;
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 64)));
  v16[2] = v13;
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v16,  v15,  3LL));
  +[IMMetrics recordEvent:dataSource:data:](&OBJC_CLASS___IMMetrics, "recordEvent:dataSource:data:", v5, v4, v14);
}

void sub_1000DFACC(_Unwind_Exception *a1)
{
}

void sub_1000DFAE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 count])
  {
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    id v4 = v3;
    id v5 = [v4 countByEnumeratingWithState:&v23 objects:v29 count:16];
    if (v5)
    {
      id v7 = v5;
      uint64_t v8 = *(void *)v24;
      *(void *)&__int128 v6 = 138412290LL;
      __int128 v22 = v6;
      do
      {
        for (i = 0LL; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v24 != v8) {
            objc_enumerationMutation(v4);
          }
          int v10 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*((void *)&v23 + 1) + 8 * (void)i),  "originalRequest",  v22,  (void)v23));
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 URL]);

          if (v11)
          {
            uint64_t v13 = _MTLogCategoryFeedUpdate(v12);
            uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = v22;
              id v28 = v11;
              _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Found existing task for feed-update for %@.",  buf,  0xCu);
            }

            uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
            [v15 didRestoreFeedUrlTask:v11];
          }
        }

        id v7 = [v4 countByEnumeratingWithState:&v23 objects:v29 count:16];
      }

      while (v7);
    }
  }

  else
  {
    uint64_t v16 = _MTLogCategoryFeedUpdate(0LL);
    id v4 = (id)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v4,  OS_LOG_TYPE_DEFAULT,  "No existing tasks found on background-session.",  buf,  2u);
    }
  }

  uint64_t v18 = _MTLogCategoryFeedUpdate(v17);
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workQueue]);
    *(_DWORD *)buf = 138412290;
    id v28 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Rebuild pending network tasks - RESUMING workQueue: %@.",  buf,  0xCu);
  }

  uint64_t v21 = (dispatch_object_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workQueue]);
  dispatch_resume(v21);
}

id sub_1000E0080(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _removeTempFiles];
}

void sub_1000E00FC(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) temporaryDirectory]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v37 = 0LL;
  id v31 = (void *)v2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 contentsOfDirectoryAtPath:v2 error:&v37]);
  id v5 = v37;

  if (v5)
  {
    uint64_t v7 = _MTLogCategoryFeedUpdate(v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
      *(_DWORD *)buf = 138412546;
      id v40 = v31;
      __int16 v41 = 2112;
      id v42 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to obtain list of files in directory:%@, error:%@",  buf,  0x16u);
    }
  }

  id v30 = v5;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  id v10 = v4;
  id v11 = [v10 countByEnumeratingWithState:&v33 objects:v38 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v34;
    do
    {
      for (i = 0LL; i != v12; i = (char *)i + 1)
      {
        if (*(void *)v34 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void **)(*((void *)&v33 + 1) + 8LL * (void)i);
        if ([v15 containsString:@"_feed"])
        {
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
          unsigned int v17 = [v16 keepsFeedFileInTempDirAfterDownload];

          if (!v17 || [*(id *)(a1 + 32) isFileExpired:v15 inDirectory:v31])
          {
            uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v31 stringByAppendingPathComponent:v15]);
            id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
            id v32 = 0LL;
            unsigned __int8 v20 = [v19 removeItemAtPath:v18 error:&v32];
            id v21 = v32;

            uint64_t v23 = _MTLogCategoryFeedUpdate(v22);
            __int128 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
            __int128 v25 = v24;
            if ((v20 & 1) != 0)
            {
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138412290;
                id v40 = v18;
                __int128 v26 = v25;
                os_log_type_t v27 = OS_LOG_TYPE_DEBUG;
                id v28 = "Temporary feed file has been removed:%@";
                uint32_t v29 = 12;
                goto LABEL_18;
              }
            }

            else if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              id v40 = v18;
              __int16 v41 = 2112;
              id v42 = v21;
              __int128 v26 = v25;
              os_log_type_t v27 = OS_LOG_TYPE_ERROR;
              id v28 = "Failed to remove temporary feed file at:%@, error:%@";
              uint32_t v29 = 22;
LABEL_18:
              _os_log_impl((void *)&_mh_execute_header, v26, v27, v28, buf, v29);
            }

            continue;
          }
        }
      }

      id v12 = [v10 countByEnumeratingWithState:&v33 objects:v38 count:16];
    }

    while (v12);
  }
}

id sub_1000E0AF0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _refetch:0];
}

void sub_1000E0B8C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](&OBJC_CLASS___MTDB, "sharedInstance"));
  id v8 = (id)objc_claimAutoreleasedReturnValue([v2 playbackContext]);

  id v3 = objc_alloc(&OBJC_CLASS___NSFetchedResultsController);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fetchRequest]);
  id v5 = -[NSFetchedResultsController initWithFetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:]( v3,  "initWithFetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:",  v4,  v8,  0LL,  0LL);
  [*(id *)(a1 + 32) setFrc:v5];

  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 frc]);
  [v7 setDelegate:v6];

  [*(id *)(a1 + 32) _refetch:*(void *)(a1 + 40)];
}

void sub_1000E0D54(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) predicate]);

  if (v2)
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 predicate]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 _augmentPredicate:v4]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fetchRequest]);
    [v6 setPredicate:v5];
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) frc]);
  [v7 performFetch:0];

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) frc]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 fetchedObjects]);

  [*(id *)(a1 + 32) _processResults:v9];
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 valueForKey:kEpisodeUuid]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 valueForKey:kObjectID]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:",  v11,  v10));

  kdebug_trace(723518048LL, 0LL, 0LL, 0LL, 0LL);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_1000E0F54;
  void v16[3] = &unk_100240E00;
  uint64_t v13 = *(void **)(a1 + 40);
  void v16[4] = *(void *)(a1 + 32);
  id v17 = v10;
  id v18 = v12;
  id v19 = v13;
  id v14 = v12;
  id v15 = v10;
  +[IMAVPlayer performOnMainQueue:](&OBJC_CLASS___IMAVPlayer, "performOnMainQueue:", v16);
}

uint64_t sub_1000E0F54(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000E1984(uint64_t a1)
{
  uint64_t v2 = -[MTAllPropertyChangesQueryObserver initWithEntityName:predicate:]( objc_alloc(&OBJC_CLASS___MTAllPropertyChangesQueryObserver),  "initWithEntityName:predicate:",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
  [*(id *)(a1 + 32) setAllPropertyChangeObserver:v2];

  objc_initWeak(&location, *(id *)(a1 + 32));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allPropertyChangeObserver]);
  [v3 startObserving];

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allPropertyChangeObserver]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000E1A90;
  v6[3] = &unk_100240440;
  objc_copyWeak(&v7, &location);
  id v5 = [v4 addResultsChangedHandler:v6];

  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);
}

void sub_1000E1A6C(_Unwind_Exception *a1)
{
}

void sub_1000E1A90(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _propertyDidChange];
}

id sub_1000E1D30(uint64_t a1)
{
  return [*(id *)(a1 + 32) _frcDidChangeResults:*(void *)(a1 + 40) uuidToManagedObjectIDMap:*(void *)(a1 + 48)];
}

void sub_1000E2138(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    BOOL v4 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v4) {
      sub_10017C4DC(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    __assert_rtn( "-[MPSectionedCollection(TVMusic) tvm_enumerateSectionsUsingBlock:]_block_invoke",  "MPSectionedCollection+MTTVAdditions.m",  18,  "0");
  }

  id v12 = v3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000E224C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    BOOL v4 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v4) {
      sub_10017C550(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    __assert_rtn( "-[MPSectionedCollection(TVMusic) tvm_enumerateItemsInSectionAtIndex:usingBlock:]_block_invoke",  "MPSectionedCollection+MTTVAdditions.m",  30,  "0");
  }

  id v12 = v3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000E2358(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  if (!v14)
  {
    BOOL v6 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v6) {
      sub_10017C5C4(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    __assert_rtn( "-[MPSectionedCollection(TVMusic) tvm_enumerateItemsUsingBlock:]_block_invoke",  "MPSectionedCollection+MTTVAdditions.m",  42,  "0");
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000E23FC( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_1000E3198( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000E31BC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateDarkReason];
}

void sub_1000E37DC(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000E3848;
    block[3] = &unk_10023FF98;
    id v3 = *(id *)(a1 + 32);
    dispatch_async(&_dispatch_main_q, block);
  }

void sub_1000E3848(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](&OBJC_CLASS___MTDB, "sharedInstance"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 mainQueueContext]);

  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerIdentifier]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 podcastForFeedUrl:v4]);

  BOOL v6 = *(void **)(a1 + 32);
  if (v5)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 itemTitle]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( [v8 localizedStringForKey:@"HANDOFF_MESSAGE_EPIOSDE_UNAVAILABLE" value:&stru_100248948 table:0]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 title]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v9, v7, v10));

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( [v12 localizedStringForKey:@"HANDOFF_MESSAGE_EPIOSDE_UNAVAILABLE_TITLE" value:&stru_100248948 table:0]);
    id v14 = @"episode_unavailable";
  }

  else
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 containerTitle]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( [v15 localizedStringForKey:@"HANDOFF_MESSAGE_NOT_FOLLOWING" value:&stru_100248948 table:0]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v16, v7));

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( [v12 localizedStringForKey:@"HANDOFF_MESSAGE_NOT_FOLLOWING_TITLE" value:&stru_100248948 table:0]);
    id v14 = @"not_subscribed";
  }

  __int128 v24 = @"reason";
  __int128 v25 = v14;
  id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v25,  &v24,  1LL));
  +[IMMetrics recordUserAction:dataSource:withData:]( &OBJC_CLASS___IMMetrics,  "recordUserAction:dataSource:withData:",  @"handoff_failed",  0LL,  v17);

  id v18 = (void *)objc_claimAutoreleasedReturnValue( +[UIAlertController alertControllerWithTitle:message:preferredStyle:]( &OBJC_CLASS___UIAlertController,  "alertControllerWithTitle:message:preferredStyle:",  v13,  v11,  1LL));
  id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  unsigned __int8 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 localizedStringForKey:@"OK" value:&stru_100248948 table:0]);
  id v21 = (void *)objc_claimAutoreleasedReturnValue( +[UIAlertAction actionWithTitle:style:handler:]( &OBJC_CLASS___UIAlertAction,  "actionWithTitle:style:handler:",  v20,  0LL,  0LL));
  [v18 addAction:v21];

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[MTApplication appController](&OBJC_CLASS___MTApplication, "appController"));
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 rootViewController]);
  [v23 presentViewController:v18 animated:1 completion:0];
}

void sub_1000E4390( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000E43A8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a2 attributes]);
  id v8 = (id)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:TVAttributeCanonicalIdentifier]);

  if ([*(id *)(a1 + 32) isEqualToString:v8])
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a3;
    *a4 = 1;
  }
}

void sub_1000E490C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) delegate]);
  [*(id *)(a1 + 32) setOriginalTabBarDelegate:v2];

  [*(id *)(a1 + 40) setDelegate:*(void *)(a1 + 32)];
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  id v15 = (__CFString *)objc_claimAutoreleasedReturnValue([v3 valueForKey:@"selected_tab"]);

  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSNumber);
  if ((objc_opt_isKindOfClass(v15, v4) & 1) != 0)
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_tabIdentifierForIndex:", -[__CFString longValue](v15, "longValue")));

    BOOL v6 = (__CFString *)v5;
  }

  else
  {
    BOOL v6 = v15;
  }

  uint64_t v16 = v6;
  if (-[__CFString isEqualToString:](v6, "isEqualToString:", @"now_playing")
    && ![*(id *)(a1 + 32) _isNowPlayingTabVisible]
    || [*(id *)(a1 + 32) _tabIndexForIdentifier:v16] == (id)0x7FFFFFFFFFFFFFFFLL)
  {

    uint64_t v7 = @"unplayed";
  }

  else
  {
    uint64_t v7 = v16;
  }

  id v17 = (__CFString *)v7;
  id v8 = objc_msgSend(*(id *)(a1 + 32), "_selectTabWithIdentifier:");
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) tabBar]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[UITapGestureRecognizer recognizerWithTarget:action:pressType:]( &OBJC_CLASS___UITapGestureRecognizer,  "recognizerWithTarget:action:pressType:",  *(void *)(a1 + 32),  "_playPauseButtonAction:",  6LL));
  [v9 addGestureRecognizer:v10];
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[MTApplication sharedApplication](&OBJC_CLASS___MTApplication_ATV, "sharedApplication"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 delegate]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 urlToOpenWhenApplicationHasFinishedLaunching]);

  if (v13)
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 urlToOpenWhenApplicationHasFinishedLaunching]);
    [v12 application:v11 openURL:v14 options:&__NSDictionary0__struct];
  }
}

void sub_1000E4BB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v4 = @"openURL";
  uint64_t v5 = v1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[IKAppContext currentAppContext](&OBJC_CLASS___IKAppContext, "currentAppContext"));
  [v3 openURLWithOptions:v2];
}

void sub_1000E52CC(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[MTEpisodeUnavailableUtil sharedInstance](&OBJC_CLASS___MTEpisodeUnavailableUtil, "sharedInstance"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) title]);
  [v3 showDialogForReason:3 podcastTitle:v2 completion:0];
}

void sub_1000E5330(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[MTPlaybackQueueFactory playEpisodeUuid:]( &OBJC_CLASS___MTPlaybackQueueFactory,  "playEpisodeUuid:",  *(void *)(a1 + 32)));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](&OBJC_CLASS___MTPlayerController, "defaultInstance"));
  [v1 playManifest:v2 reason:11];
}

void sub_1000E595C(id a1, UIAlertAction *a2)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](&OBJC_CLASS___UIApplication, "sharedApplication"));
  [v2 terminateWithSuccess];
}

BOOL sub_1000E5B28(id a1, IMActionController *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 episodes]);
  BOOL v4 = [v3 count] != 0;

  return v4;
}

void sub_1000E5B7C(id a1, MTTVStationActionController *a2, id a3)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject", a3));
  if (v3)
  {
    id v7 = v3;
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uuid]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[MTPlaybackQueueFactory playStationUuid:]( &OBJC_CLASS___MTPlaybackQueueFactory,  "playStationUuid:",  v4));

    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](&OBJC_CLASS___MTPlayerController, "defaultInstance"));
    [v6 playManifest:v5 reason:3];

    id v3 = v7;
  }
}

BOOL sub_1000E5CAC(id a1, IMActionController *a2)
{
  return 1;
}

void sub_1000E5CB4(id a1, MTTVStationActionController *a2, id a3)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject", a3));
  if (v3)
  {
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](&OBJC_CLASS___MTDB, "sharedInstance"));
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 privateQueueContext]);

    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1000E5D70;
    v7[3] = &unk_100240240;
    id v8 = v3;
    id v9 = v5;
    id v6 = v5;
    [v6 performBlock:v7];
  }
}

void sub_1000E5D70(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTBaseProcessor sharedInstance](&OBJC_CLASS___MTPlaylistQueryManager, "sharedInstance"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
  unsigned int v4 = [v2 updatePlaylistWithUuid:v3 inContext:*(void *)(a1 + 40)];

  if (v4) {
    [*(id *)(a1 + 40) saveInCurrentBlock];
  }
}

BOOL sub_1000E5E90(id a1, IMActionController *a2)
{
  return 1;
}

void sub_1000E5E98(id a1, MTTVStationActionController *a2, id a3)
{
  uint64_t v5 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](v5, "actionObject"));
  if (v3)
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController delegate](v5, "delegate"));
    [v4 performShowSettingsForStation:v3];
  }
}

BOOL sub_1000E5FA4(id a1, IMActionController *a2)
{
  return 1;
}

void sub_1000E5FAC(id a1, MTTVStationActionController *a2, id a3)
{
  uint64_t v5 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](v5, "actionObject"));
  if (v3)
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController delegate](v5, "delegate"));
    [v4 performDeleteStation:v3];
  }
}

void sub_1000E6078(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___MTEmptyDownloadsGateway);
  id v2 = (void *)qword_1002B6B60;
  qword_1002B6B60 = (uint64_t)v1;
}

void sub_1000E7B0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1000E7B24(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000E7B34(uint64_t a1)
{
}

void sub_1000E7B3C(uint64_t a1)
{
  if (+[MTPlayerController hasDefaultInstance](&OBJC_CLASS___MTPlayerController, "hasDefaultInstance"))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](&OBJC_CLASS___MTPlayerController, "defaultInstance"));
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 upNextController]);
    [v4 beginUpdates];
  }

  uint64_t v5 = 0LL;
  uint64_t v6 = kMTEpisodeEntityName;
  *(void *)&__int128 v2 = 134218242LL;
  __int128 v32 = v2;
  do
  {
    id v7 = objc_autoreleasePoolPush();
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  v6));
    [v8 setPredicate:*(void *)(a1 + 32)];
    [v8 setReturnsObjectsAsFaults:0];
    [v8 setFetchLimit:200];
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) config]);
    unsigned __int8 v10 = [v9 supportsPlayback];

    if ((v10 & 1) == 0)
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[MTEpisode sortDescriptorsForPubDateAscending:]( &OBJC_CLASS___MTEpisode,  "sortDescriptorsForPubDateAscending:",  1LL));
      [v8 setSortDescriptors:v11];

      [v8 setFetchOffset:200 * v5];
    }

    uint64_t v12 = *(void **)(a1 + 48);
    id v33 = 0LL;
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "executeFetchRequest:error:", v8, &v33, v32));
    id v14 = v33;
    uint64_t v15 = _MTLogCategoryDatabase(v14);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    id v17 = v16;
    if (v14)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        id v18 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        id v35 = v18;
        __int16 v36 = 2112;
        id v37 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Error deleting episodes for predicate %@ - %@",  buf,  0x16u);
      }

      int v19 = 3;
    }

    else
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        id v20 = [v13 count];
        id v21 = *(void **)(a1 + 32);
        *(_DWORD *)buf = v32;
        id v35 = v20;
        __int16 v36 = 2112;
        id v37 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Deleting %lu episodes for predicate %@",  buf,  0x16u);
      }

      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) config]);
      unsigned int v23 = [v22 supportsLocalMedia];

      if (v23) {
        [*(id *)(a1 + 40) _removeDownloadAssetsForEpisodes:v13 shouldKeep:0 forced:*(unsigned __int8 *)(a1 + 64)];
      }
      __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) config]);
      unsigned int v25 = [v24 supportsPlayback];

      if (v25) {
      [*(id *)(a1 + 48) saveInCurrentBlock];
      }
      ++v5;
      else {
        int v19 = 3;
      }
    }

    objc_autoreleasePoolPop(v7);
  }

  while (!v19);
  uint64_t v27 = _MTLogCategoryDatabase(v26);
  id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    uint32_t v29 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    id v35 = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Finished deleting episodes for predicate %@",  buf,  0xCu);
  }

  if (+[MTPlayerController hasDefaultInstance](&OBJC_CLASS___MTPlayerController, "hasDefaultInstance"))
  {
    id v30 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](&OBJC_CLASS___MTPlayerController, "defaultInstance"));
    id v31 = (void *)objc_claimAutoreleasedReturnValue([v30 upNextController]);
    [v31 endUpdates];
  }

void sub_1000E830C(uint64_t a1)
{
  __int128 v2 = *(void **)(a1 + 32);
  uint64_t v3 = kMTPodcastEntityName;
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate truePredicate](&OBJC_CLASS___NSPredicate, "truePredicate"));
  uint64_t v5 = kPodcastUuid;
  uint64_t v19 = kPodcastUuid;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v19, 1LL));
  id v7 = (void *)objc_claimAutoreleasedReturnValue( [v2 objectDictionariesInEntity:v3 predicate:v4 sortDescriptors:0 propertiesToFetch:v6 includeObjectId:0]);

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 valueForKey:v5]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"NOT (%K IN %@)",  kEpisodePodcastUuid,  v8));
  unsigned __int8 v10 = *(void **)(a1 + 32);
  uint64_t v11 = kMTEpisodeEntityName;
  uint64_t v12 = kEpisodeUuid;
  uint64_t v18 = kEpisodeUuid;
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v18, 1LL));
  id v14 = (void *)objc_claimAutoreleasedReturnValue( [v10 objectDictionariesInEntity:v11 predicate:v9 sortDescriptors:0 propertiesToFetch:v13 includeObjectId:0]);

  if ([v14 count])
  {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 valueForKey:v12]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v15));

    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[IMLogger sharedLogger](&OBJC_CLASS___IMLogger, "sharedLogger"));
    objc_msgSend( v17,  "logFile:lineNumber:format:",  "/Library/Caches/com.apple.xbs/Sources/Marmoset/Source/Library/MTLibrary+MTEpisodeDeletion.m",  194,  @"Deleting %ld orphaned episodes...",  objc_msgSend(v16, "count"));

    [*(id *)(a1 + 40) _deleteEpisodeUuids:v16 forced:1];
  }

  else
  {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[IMLogger sharedLogger](&OBJC_CLASS___IMLogger, "sharedLogger"));
    [v16 logFile:"/Library/Caches/com.apple.xbs/Sources/Marmoset/Source/Library/MTLibrary+MTEpisodeDeletion.m" lineNumber:199 format:@"No orphaned episodes"];
  }
}

void sub_1000E8600(uint64_t a1, void *a2)
{
  id v3 = a2;
  v17[0] = 0LL;
  v17[1] = v17;
  v17[2] = 0x3032000000LL;
  v17[3] = sub_1000E8774;
  void v17[4] = sub_1000E8784;
  id v18 = 0LL;
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](&OBJC_CLASS___MTDB, "sharedInstance"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 mainOrPrivateContext]);

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_1000E878C;
  v12[3] = &unk_100240AD0;
  id v6 = v3;
  id v13 = v6;
  id v7 = v5;
  uint64_t v8 = *(void *)(a1 + 32);
  id v14 = v7;
  uint64_t v15 = v8;
  uint64_t v16 = v17;
  [v7 performBlockAndWait:v12];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1000E8B7C;
  void v9[3] = &unk_100244650;
  uint64_t v11 = v17;
  id v10 = *(id *)(a1 + 40);
  dispatch_async(&_dispatch_main_q, v9);

  _Block_object_dispose(v17, 8);
}

void sub_1000E875C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_1000E8774(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000E8784(uint64_t a1)
{
}

void sub_1000E878C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MTLogCategoryPlayback(a1, a2);
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    int64_t v44 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "nextEpisodeToPlay is %@", buf, 0xCu);
  }

  id v6 = *(void **)(a1 + 40);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) initialEpisodeUuid]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 episodeForUuid:v7]);

  id v42 = v8;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 podcast]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) firstObject]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 podcast]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 uuid]);
  __int16 v41 = v9;
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v9 uuid]);
  unsigned int v14 = [v12 isEqual:v13];

  if (v14)
  {
    else {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:1]);
    }

    uint64_t v19 = _MTLogCategoryPlayback(v17, v18);
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v15 title]);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v15 uuid]);
      *(_DWORD *)buf = 138412546;
      int64_t v44 = (int64_t)v21;
      __int16 v45 = 2112;
      *(void *)id v46 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "nextEpisodeToPlay is the original episode. Pick the 2nd episode instead. %@ %@",  buf,  0x16u);
    }

    uint64_t v16 = 1LL;
  }

  else
  {
    uint64_t v16 = 0LL;
    uint64_t v15 = v10;
  }

  int64_t v23 = +[MTEpisodeUnavailableUtil unavailableReasonForEpisode:]( &OBJC_CLASS___MTEpisodeUnavailableUtil,  "unavailableReasonForEpisode:",  v15);
  if (v15 && v23)
  {
    unint64_t v24 = v16 + 1;
    do
    {
      else {
        unsigned int v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:v24]);
      }

      int64_t v26 = +[MTEpisodeUnavailableUtil unavailableReasonForEpisode:]( &OBJC_CLASS___MTEpisodeUnavailableUtil,  "unavailableReasonForEpisode:",  v25);
      uint64_t v28 = _MTLogCategoryPlayback(v26, v27);
      uint32_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        id v30 = (void *)objc_claimAutoreleasedReturnValue([v25 title]);
        id v31 = (void *)objc_claimAutoreleasedReturnValue([v25 uuid]);
        *(_DWORD *)buf = 134218754;
        int64_t v44 = v26;
        __int16 v45 = 1024;
        *(_DWORD *)id v46 = v24;
        *(_WORD *)&v46[4] = 2112;
        *(void *)&v46[6] = v30;
        __int16 v47 = 2112;
        uint64_t v48 = v31;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "nextEpisodeToPlay is not available (Unavailable reason: %lu). Pick the %d next episode instead. %@ %@",  buf,  0x26u);
      }

      if (!v25) {
        break;
      }
      ++v24;
      uint64_t v15 = v25;
    }

    while (v26);
  }

  else
  {
    unsigned int v25 = v15;
  }

  uint64_t v32 = objc_claimAutoreleasedReturnValue([v25 uuid]);
  uint64_t v33 = *(void *)(*(void *)(a1 + 56) + 8LL);
  __int128 v34 = *(void **)(v33 + 40);
  *(void *)(v33 + 40) = v32;

  uint64_t v37 = _MTLogCategoryPlayback(v35, v36);
  id v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v25 title]);
    id v40 = (void *)objc_claimAutoreleasedReturnValue([v25 uuid]);
    *(_DWORD *)buf = 138412546;
    int64_t v44 = (int64_t)v39;
    __int16 v45 = 2112;
    *(void *)id v46 = v40;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "nextEpisodeToPlay is %@ %@", buf, 0x16u);
  }
}

void sub_1000E8B7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (v2)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue( +[MTPlaybackQueueFactory playEpisodeUuid:context:]( &OBJC_CLASS___MTPlaybackQueueFactory,  "playEpisodeUuid:context:",  v2,  6LL));
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

void sub_1000E8CD0(uint64_t a1, void *a2)
{
  id v4 = a2;
  if ([v4 length])
  {
    id v3 = -[MTPodcastManifest initWithInitialEpisodeUuid:sectionType:]( [MTListenNowManifest alloc],  "initWithInitialEpisodeUuid:sectionType:",  v4,  [*(id *)(a1 + 32) unsignedIntegerValue]);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_1000E9018( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_1000E9058(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000E9068(uint64_t a1)
{
}

void sub_1000E9070(uint64_t a1)
{
  id v15 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) episodeForUuid:*(void *)(a1 + 40)]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v15 podcast]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 uuid]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  int64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  uint64_t v6 = objc_claimAutoreleasedReturnValue([v2 title]);
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  uint64_t v9 = objc_claimAutoreleasedReturnValue([v2 sortDescriptorsForPlayOrder]);
  uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8LL);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  uint64_t v12 = objc_claimAutoreleasedReturnValue( +[MTPodcastDetailDataSource predicateForPodcast:sectionType:]( &OBJC_CLASS___MTPodcastDetailDataSource,  "predicateForPodcast:sectionType:",  v2,  *(void *)(a1 + 80)));
  uint64_t v13 = *(void *)(*(void *)(a1 + 72) + 8LL);
  unsigned int v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;
}

void sub_1000E92AC(uint64_t a1, void *a2)
{
  id v4 = a2;
  if ([v4 length])
  {
    uint64_t v3 = -[MTPodcastManifest initWithInitialEpisodeUuid:sectionType:]( [MTPodcastManifest alloc],  "initWithInitialEpisodeUuid:sectionType:",  v4,  [*(id *)(a1 + 32) unsignedIntegerValue]);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_1000E9470( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000E9488(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) podcastUuid]);
  id v7 = (id)objc_claimAutoreleasedReturnValue([v2 podcastForUuid:v3]);

  uint64_t v4 = objc_claimAutoreleasedReturnValue([v7 sortDescriptorsForPlayOrder]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_1000E95CC(uint64_t a1)
{
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)&OBJC_METACLASS___MTShowsPreferencesDataStore;
  id v1 = objc_msgSend(objc_msgSendSuper2(&v3, "allocWithZone:", 0), "init");
  uint64_t v2 = (void *)qword_1002B6B70;
  qword_1002B6B70 = (uint64_t)v1;
}

void sub_1000E9AEC(_Unwind_Exception *a1)
{
}

id sub_1000E9BB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)&OBJC_CLASS___MTBaseEpisodeListManifest;
  return objc_msgSendSuper2(&v3, "enumerateObjectsUsingBlock:", v1);
}

void sub_1000E9D50(void *a1)
{
  objc_super v3 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v8 = kEpisodeUuid;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v8, 1LL));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [v3 objectsInEntity:kMTEpisodeEntityName predicate:v2 propertiesToFetch:v4 limit:1]);

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 firstObject]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uuid]);

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_1000E9E3C(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v3 = objc_begin_catch(exception_object);
    (*(void (**)(void))(*(void *)(v2 + 48) + 16LL))();

    objc_end_catch();
    JUMPOUT(0x1000E9E0CLL);
  }

  _Unwind_Resume(exception_object);
}

void sub_1000E9FB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1000E9FC8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000E9FD8(uint64_t a1)
{
}

void sub_1000E9FE0(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) episodeForUuid:*(void *)(a1 + 40)]);
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) _mediaItemForEpisode:v5]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000EA15C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000EA174(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) existingEpisodeWithID:*(void *)(a1 + 40)]);
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) _mediaItemForEpisode:v5]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000EAAF8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) managedObjectContext]);
  [v2 deletePlaylist:*(void *)(a1 + 32)];

  id v3 = (id)objc_claimAutoreleasedReturnValue(+[SyncKeysRepository shared](&OBJC_CLASS____TtC18PodcastsFoundation18SyncKeysRepository, "shared"));
  [v3 setIsPlaylistSyncDirty:1];
}

void sub_1000EAC9C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playlistForUuid:*(void *)(a1 + 40)]);
  [*(id *)(a1 + 48) deletePlaylist:v2];
}

void sub_1000EADC4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = kMTPlaylistEntityName;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[MTPlaylist topLevelPlaylistsExcludingFoldersPredicate]( &OBJC_CLASS___MTPlaylist,  "topLevelPlaylistsExcludingFoldersPredicate"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 objectsInEntity:v3 predicate:v4 sortDescriptors:0]);

  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v6 = v5;
  id v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      uint64_t v10 = 0LL;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v6);
        }
        objc_msgSend( *(id *)(a1 + 40),  "deletePlaylist:",  *(void *)(*((void *)&v11 + 1) + 8 * (void)v10),  (void)v11);
        uint64_t v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v8);
  }
}

id sub_1000EB948(uint64_t a1)
{
  return [*(id *)(a1 + 32) setSelected:*(unsigned __int8 *)(a1 + 40) animated:*(unsigned __int8 *)(a1 + 41)];
}

void sub_1000ED278(_Unwind_Exception *a1)
{
}

void sub_1000ED2AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v3)
  {
    uint64_t v5 = _MTLogCategoryDRM();
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 localizedDescription]);
      int v9 = 138412290;
      uint64_t v10 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "[MTPlayerController]: Unable to remove all FairPlay keys with error %@.",  (uint8_t *)&v9,  0xCu);
    }
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained validationManager]);
  [v8 validateDownloadedEpisodesWithCompletion:0];
}

void sub_1000ED3A4(uint64_t a1, char a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = _MTLogCategoryDRM();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "[MTPlayerController]: Unable to remove all legacy FairPlay keys with error.",  v7,  2u);
    }
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained secureDownloadRenewalManager]);
  [v6 updateDRMKeysForDownloadsWithUrlProtocolDelegate:0 completionHandler:0];
}

void sub_1000EDB38(_Unwind_Exception *a1)
{
}

void sub_1000EDB64(uint64_t a1)
{
  if (isTV(a1))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentItem]);
    unsigned int v3 = [v2 isVideo];

    if (v3)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
      [WeakRetained dismissNowPlayingAnimated:1];
    }
  }

void sub_1000EE01C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) episodeUuid]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 episodeForUuid:v3]);

  if (v4)
  {
    [v4 incremementPlayCount];
    [*(id *)(a1 + 48) updateEpisode:v4 andPlayerItem:*(void *)(a1 + 40) withElapsedTime:1 andDuration:*(double *)(a1 + 56) onMediaItemWillChange:*(double *)(a1 + 64)];
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 playlists]);
    id v6 = [v5 copy];

    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v7 = v6;
    id v8 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v14;
      do
      {
        for (i = 0LL; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v14 != v10) {
            objc_enumerationMutation(v7);
          }
          __int128 v12 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
          objc_msgSend(v12, "setNeedsUpdate:", 1, (void)v13);
          [v12 updateUnplayedCount];
        }

        id v9 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }

      while (v9);
    }
  }
}

void sub_1000EE188(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) podcastUuid]);
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 podcastForUuid:v3]);

  [v4 resetGoDarkWithReason:4];
  [*(id *)(a1 + 32) saveInCurrentBlock];
}

id sub_1000EE1F4(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1000EE254;
  void v3[3] = &unk_100244848;
  uint64_t v1 = *(void **)(a1 + 32);
  void v3[4] = *(void *)(a1 + 40);
  char v4 = *(_BYTE *)(a1 + 48);
  return [v1 nextManifest:v3];
}

id *sub_1000EE254(id *result, uint64_t a2)
{
  if (a2) {
    return (id *)[result[4] setManifest:a2 startPlayback:*((unsigned __int8 *)result + 40) forceLocal:1 reason:14 interactive:0 completion:0];
  }
  return result;
}

void sub_1000EE8FC(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  char v4 = v2;
  if (v2)
  {
    uint64_t v5 = _MTLogCategoryPlayback(v2, v3);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 138412290;
      id v8 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Network UPP completed update failed with error %@",  (uint8_t *)&v7,  0xCu);
    }
  }
}

void sub_1000EE9A8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  unint64_t v7 = a3;
  unint64_t v8 = a4;
  uint64_t v10 = (void *)v8;
  if (v7 | v8)
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_1000EEB04;
    void v16[3] = &unk_100244890;
    uint64_t v21 = a2;
    uint64_t v17 = (os_log_s *)*(id *)(a1 + 32);
    id v18 = (id)v7;
    id v14 = v10;
    uint64_t v15 = *(void *)(a1 + 40);
    id v19 = v14;
    uint64_t v20 = v15;
    +[IMAVPlayer performOnMainQueue:](&OBJC_CLASS___IMAVPlayer, "performOnMainQueue:", v16);

    __int128 v12 = v17;
  }

  else
  {
    uint64_t v11 = _MTLogCategoryPlayback(v8, v9);
    __int128 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = [*(id *)(a1 + 32) episodeStoreId];
      *(_DWORD *)buf = 134349056;
      id v23 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[PodcastsStatesCoordination] Episode not inserted for episodeStoreId = %{public}lld. Skipping.",  buf,  0xCu);
    }
  }
}

void sub_1000EEB04(uint64_t a1)
{
  id v2 = *(id *)(a1 + 64);
  id v3 = [*(id *)(a1 + 32) episodeStoreId];
  uint64_t v5 = _MTLogCategoryPlayback(v3, v4);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  unint64_t v7 = v6;
  if (v2 == v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = [*(id *)(a1 + 32) episodeStoreId];
      uint64_t v9 = *(void **)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 48);
      int v13 = 134349570;
      id v14 = v8;
      __int16 v15 = 2112;
      id v16 = v9;
      __int16 v17 = 2112;
      uint64_t v18 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[PodcastsStatesCoordination] Updating playerItem with episodeStoreId = %{public}lld with new inserted Implicit F ollow, episodeUUID: %@, podcastUUID: %@.",  (uint8_t *)&v13,  0x20u);
    }

    [*(id *)(a1 + 32) upgradeToLocalEpisodeBackedItemWithEpisodeUUID:*(void *)(a1 + 40) podcastUUID:*(void *)(a1 + 48)];
    [*(id *)(a1 + 56) beginObservingTranscriptIdentifierChangesForCurrentItem:*(void *)(a1 + 32)];
  }

  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void **)(a1 + 64);
      id v12 = [*(id *)(a1 + 32) episodeStoreId];
      int v13 = 134283777;
      id v14 = v11;
      __int16 v15 = 2049;
      id v16 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "[PodcastsStatesCoordination] Skipping update of playerItem: PodcastsStateCoordinator just inserted an implicitly followed show for episode with adamID = %{private}lld, but the current playerItem holds an episodeStoreId = %{private}lld.",  (uint8_t *)&v13,  0x16u);
    }
  }

void sub_1000EEC5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MTLogCategoryPlayback(v3, v4);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  unint64_t v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v12 = 138412290;
      id v13 = v3;
      id v8 = "Network UPP update failed with error %@";
      uint64_t v9 = v7;
      os_log_type_t v10 = OS_LOG_TYPE_ERROR;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v12, 0xCu);
    }
  }

  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = [*(id *)(a1 + 32) episodeStoreId];
    int v12 = 134283521;
    id v13 = v11;
    id v8 = "Sent playback position to MAPI for episode: %{private}lld";
    uint64_t v9 = v7;
    os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_6;
  }
}

void sub_1000EEF04(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 firstObject]);
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transcriptIdentifier]);
    uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 transcriptIdentifier]);
    if (v4 == (void *)v5)
    {

LABEL_8:
      goto LABEL_9;
    }

    id v6 = (void *)v5;
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 transcriptIdentifier]);
    unsigned int v8 = [v7 isNotEmpty];

    if (v8)
    {
      uint64_t v11 = _MTLogCategoryPlayback(v9, v10);
      int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v3 title]);
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v3 transcriptIdentifier]);
        int v17 = 138412546;
        uint64_t v18 = v13;
        __int16 v19 = 2112;
        uint64_t v20 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Updating currentItem for episode entitled %@ with transcriptIdentifier %@",  (uint8_t *)&v17,  0x16u);
      }

      __int16 v15 = *(void **)(a1 + 32);
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 transcriptIdentifier]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v3 transcriptProvider]);
      [v15 updateTranscriptInformation:v4 transcriptSource:v16];

      goto LABEL_8;
    }
  }

void sub_1000EF420(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) player]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v4 manifest]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 activity]);
  [*(id *)(a1 + 32) setCurrentActivity:v3];
}

void sub_1000EF858(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 80);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) episodeForPlayerItem:*(void *)(a1 + 40)]);
  if (*(_BYTE *)(a1 + 81))
  {
    id v4 = *(void **)(a1 + 48);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) previousPlayingEpisodeUuid]);
    LOBYTE(v4) = [v4 isEqual:v5];

    BOOL v6 = v2 != 0;
    if ((v4 & 1) == 0)
    {
      [*(id *)(a1 + 56) setPreviousPlayingEpisodeUuid:*(void *)(a1 + 48)];
      +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
      objc_msgSend(v3, "setLastDatePlayed:");
      unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 assetURL]);

      if (!v7)
      {
        unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue( +[MTStoreReportingController sharedInstance]( &OBJC_CLASS___MTStoreReportingController,  "sharedInstance"));
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 dictionaryRepresentation]);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) userManifest]);
        objc_msgSend( v8,  "reportWithType:userInfo:location:reason:",  2,  v9,  @"epst",  objc_msgSend(v10, "playReason"));
      }

      BOOL v6 = 1;
    }
  }

  else
  {
    BOOL v6 = v2 != 0;
  }

  unsigned int v11 = v6 | [*(id *)(a1 + 56) updateEpisode:v3 andPlayerItem:*(void *)(a1 + 40) withElapsedTime:0 andDuration:*(double *)(a1 + 64) onMediaItemWillChange:*(double *)(a1 + 72)];
  if (*(double *)(a1 + 72) > 0.0)
  {
    [v3 duration];
    if (v12 != *(double *)(a1 + 72))
    {
      objc_msgSend(v3, "setDuration:");
      [*(id *)(a1 + 40) setDuration:*(double *)(a1 + 72)];
      unsigned int v11 = 1;
    }
  }

  double Current = CFAbsoluteTimeGetCurrent();
  id v14 = [*(id *)(a1 + 56) lastPlaybackSaveTime];
  if (Current - v16 > 15.0 || v11 != 0)
  {
    uint64_t v18 = _MTLogCategoryPlayback(v14, v15);
    __int16 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "updateEpisodeForPlayerUpdateForceSave saving",  v20,  2u);
    }

    [*(id *)(a1 + 32) saveInCurrentBlock];
    [*(id *)(a1 + 56) setLastPlaybackSaveTime:CFAbsoluteTimeGetCurrent()];
  }
}

void sub_1000EFDC4(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) episodeUuid]);
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 episodeForUuid:v3]);

  if (v4) {
    [*(id *)(a1 + 32) saveInCurrentBlock];
  }
}

void sub_1000EFE2C(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) episodeUuid]);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v2 episodeForUuid:v3]);

  id v4 = (void *)objc_claimAutoreleasedReturnValue([v6 podcast]);
  uint64_t v5 = v4;
  if (v4)
  {
    [v4 resetGoDarkWithReason:4];
    [*(id *)(a1 + 32) saveInCurrentBlock];
  }
}

void sub_1000EFF78(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](&OBJC_CLASS___UIApplication, "sharedApplication"));
  int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bestUrl]);
  [v3 openURL:v2 options:&__NSDictionary0__struct completionHandler:0];
}

uint64_t sub_1000F01B8(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) _performAfterPlay:*(void *)(a1 + 40) playbackStarted:a2 == 0];
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  }
  return result;
}

id sub_1000F03CC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "presentNowPlayingAnimated:", objc_msgSend(*(id *)(a1 + 40), "isInteractive"));
}

void sub_1000F09B4(uint64_t a1, void *a2, void *a3)
{
  id v7 = a3;
  id v5 = [a2 mediaRemotePlayerPath];
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v5, v7);
  }
}

id sub_1000F0F00(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _validatePlaybackRequest:*(void *)(a1 + 40)];
  if (v2 != (id)11)
  {
    uint64_t v7 = (uint64_t)v2;
    if (![*(id *)(a1 + 40) dryRun] && v7 == 1)
    {
      unsigned int v8 = *(void **)(a1 + 32);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) manifest]);
      LODWORD(v_Block_object_dispose(va, 8) = [v8 _openExternalItemIfNeededForManifest:v9];

      if (!(_DWORD)v8)
      {
        if (os_feature_enabled_red_sun())
        {
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
          [v10 setUpNextQueueIntent:1];
        }

        else
        {
          id result = [*(id *)(a1 + 32) _promptToClearUpNextIfNeededForRequest:*(void *)(a1 + 40)];
        }

        return _[*(id *)(a1 + 32) _setPlaybackQueue:*(void *)(a1 + 40)];
      }

      uint64_t v7 = 7LL;
    }

    return [*(id *)(a1 + 40) finishWithStatus:v7];
  }

  uint64_t v4 = _MTLogCategoryPlayback(11LL, v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)unsigned int v11 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Unable to setPlaybackQueue because we need an internet connection.",  v11,  2u);
  }

  return [*(id *)(a1 + 40) finishWithStatus:11];
}

void sub_1000F1304(uint64_t a1, int a2)
{
  if (a2)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    if ([v5 isInteractive])
    {
      uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
      id v4 = [v3 upNextQueueIntent];

      if (!v4) {
        _[*(id *)(a1 + 40) _showGenericPromptToClearUpNextWithRequest:*(void *)(a1 + 32)];
      }
    }

    else
    {
    }
  }

void sub_1000F1624( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

uint64_t sub_1000F1664(uint64_t a1)
{
  if (([*(id *)(a1 + 32) suppressMetrics] & 1) == 0)
  {
    v16[0] = @"interactive";
    uint64_t v2 = *(void *)(a1 + 40);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(a1 + 48) isInteractive]));
    v17[0] = v3;
    v16[1] = @"shouldStart";
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80)));
    v17[1] = v4;
    v16[2] = @"play_source";
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[MTStoreReportingController reportingStringForPlayReason:]( &OBJC_CLASS___MTStoreReportingController,  "reportingStringForPlayReason:",  *(void *)(a1 + 72)));
    v17[2] = v5;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v17,  v16,  3LL));
    +[IMMetrics recordUserAction:dataSource:withData:]( &OBJC_CLASS___IMMetrics,  "recordUserAction:dataSource:withData:",  @"play_manifest",  v2,  v6);
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  BOOL v8 = [v7 upNextQueueIntent] == (id)2;

  if (v8)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) upNextController]);
    [v9 clear];
  }

  if (*(_BYTE *)(a1 + 80))
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    _DWORD v12[2] = sub_1000F18F0;
    v12[3] = &unk_1002414A8;
    objc_copyWeak(&v15, (id *)(a1 + 64));
    id v13 = *(id *)(a1 + 48);
    id v14 = *(id *)(a1 + 32);
    +[IMAVPlayer performOnMainQueue:](&OBJC_CLASS___IMAVPlayer, "performOnMainQueue:", v12);

    objc_destroyWeak(&v15);
  }

  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_sync_enter(WeakRetained);
    [*(id *)(a1 + 32) finishWithStatus:1];
    objc_sync_exit(WeakRetained);
  }

  return kdebug_trace(723518088LL, 0LL, 0LL, 0LL, 0LL);
}

void sub_1000F18C4(_Unwind_Exception *a1)
{
}

void sub_1000F18F0(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1000F19B0;
  v5[3] = &unk_100244930;
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  objc_copyWeak(&v7, v2);
  [WeakRetained playWithContext:v4 completion:v5];

  objc_destroyWeak(&v7);
}

void sub_1000F199C(_Unwind_Exception *a1)
{
}

void sub_1000F19B0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = _MTLogCategoryPlayback(a1, a2);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Playback request failed because playback failed to start",  buf,  2u);
    }

    [*(id *)(a1 + 32) finishWithStatus:5];
  }

  else
  {
    id obj = objc_loadWeakRetained((id *)(a1 + 40));
    objc_sync_enter(obj);
    [*(id *)(a1 + 32) finishWithStatus:1];
    objc_sync_exit(obj);
  }

void sub_1000F1A60( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1000F1BE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1000F1C00(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000F1C10(uint64_t a1)
{
}

void sub_1000F1C18(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) episodeForUuid:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

LABEL_21:
  double v12 = 0;
LABEL_22:
  double v16 = (void *)objc_claimAutoreleasedReturnValue(-[MTPlayerController _currentEpisodeForManifest:](self, "_currentEpisodeForManifest:", v4));
  if (v16)
  {
    int v17 = (void *)objc_claimAutoreleasedReturnValue([v4 currentItem]);
    if (v17)
    {
    }

    else if (([v16 isExternalType] & 1) == 0)
    {
      uint64_t v18 = [v16 isRestricted];
      if ((v18 & 1) != 0)
      {
        id v7 = 4LL;
      }

      else
      {
        uint64_t v20 = _MTLogCategoryPlayback(v18, v19);
        uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 134217984;
          *(void *)((char *)&buf + 4) = [v16 reasonForNotPlayable];
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "Playback request failed with status notPlayable, MTEpisodeUnavailableReason %lu",  (uint8_t *)&buf,  0xCu);
        }

        id v7 = 5LL;
      }
    }
  }

  id v50 = 0LL;
  __int16 v51 = &v50;
  __int16 v52 = 0x2020000000LL;
  id v53 = 0LL;
  *(void *)&buf = 0LL;
  *((void *)&buf + 1) = &buf;
  id v57 = 0x3032000000LL;
  id v58 = sub_1000F1C00;
  id v59 = sub_1000F1C10;
  id v60 = 0LL;
  if (v16
    || (uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[MTReachability sharedInstance](&OBJC_CLASS___MTReachability, "sharedInstance")),
        id v23 = [v22 isReachable],
        v22,
        (v23 & 1) != 0))
  {
    unint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v16 managedObjectContext]);
    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472LL;
    v46[2] = sub_1000F2284;
    v46[3] = &unk_100240698;
    uint64_t v48 = &v50;
    __int16 v47 = v16;
    p_buf = &buf;
    [v24 performBlockAndWait:v46];

    unsigned int v25 = v51[3];
    if (!v25)
    {
      if (v7 == 1)
      {
        int64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v4 objectAtIndex:0]);
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 priceType]);
        if (MTEpisodePriceTypeFromPersistentString() == 2)
        {
          uint64_t v28 = [v26 paidSubscriptionActive];

          if (v28) {
            id v7 = 1LL;
          }
          else {
            id v7 = 9LL;
          }
        }

        else
        {

          id v7 = 1LL;
        }
      }

      goto LABEL_57;
    }
  }

  else
  {
    unsigned int v25 = 2LL;
    v51[3] = 2LL;
  }

  if (v25 == 1) {
    uint64_t v29 = v12;
  }
  else {
    uint64_t v29 = 0;
  }
  if (((v29 | v6 ^ 1) & 1) == 0)
  {
    id v30 = (void *)objc_claimAutoreleasedReturnValue(-[MTPlayerController player](self, "player"));
    v45[0] = _NSConcreteStackBlock;
    v45[1] = 3221225472LL;
    v45[2] = sub_1000F22EC;
    v45[3] = &unk_1002449A0;
    v45[4] = &v50;
    v45[5] = &buf;
    [(id)objc_opt_class(v30) performOnMainQueue:v45];
  }

  id v31 = [v16 isRestricted];
  if ((v31 & 1) != 0)
  {
    id v7 = 4LL;
  }

  else
  {
    uint64_t v33 = v51[3];
    if (v33 == 7)
    {
      id v7 = 9LL;
    }

    else if (v33 == 2)
    {
      id v7 = 11LL;
    }

    else
    {
      __int128 v34 = _MTLogCategoryPlayback(v31, v32);
      uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        uint64_t v36 = [v16 reasonForNotPlayable];
        *(_DWORD *)__int16 v54 = 134217984;
        id v55 = v36;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "Playback request failed with status notPlayable, MTEpisodeUnavailableReason %lu",  v54,  0xCu);
      }

      id v7 = 5LL;
    }
  }

    uint64_t v36 = (v43 - 1) & v43;
    __int16 v41 = __clz(__rbit64(v43)) + (v37 << 6);
LABEL_22:
    __int16 v45 = (uint64_t *)(*(void *)(v121 + 48) + 16 * v41);
    __int16 v47 = *v45;
    id v46 = v45[1];
    sub_1001343F8(*(void *)(v121 + 56) + 32 * v41, (uint64_t)v129);
    sub_1001343F8((uint64_t)v129, (uint64_t)&v127);
    swift_bridgeObjectRetain(v46);
    uint64_t v48 = swift_dynamicCast(v3, &v127, v39, v38, 6LL);
    __int16 v49 = v3;
    id v50 = v123;
    __int16 v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v123 + 56);
    if (v48)
    {
      v51(v49, 0LL, 1LL, v38);
      __int16 v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48))(v49, 1LL, v38);
      uint64_t v3 = v49;
      if (v52 != 1)
      {
        id v53 = v123;
        __int16 v54 = v116;
        id v55 = (*(uint64_t (**)(char *, char *, uint64_t))(v123 + 32))(v116, v49, v38);
        uint64_t v56 = Date.timeIntervalSinceReferenceDate.getter(v55);
        id v38 = v122;
        v128 = &type metadata for Double;
        *(double *)&v127 = v56;
        id v57 = *(void (**)(char *, uint64_t))(v53 + 8);
        uint64_t v3 = v49;
        id v58 = v54;
        uint64_t v39 = v117;
        v57(v58, v122);
        goto LABEL_27;
      }
    }

    else
    {
      v51(v49, 1LL, 1LL, v38);
      uint64_t v3 = v49;
    }

    sub_100136608((uint64_t)v3);
    sub_1001343F8((uint64_t)v129, (uint64_t)&v127);
LABEL_27:
    sub_100136648(v129);
    *(void *)(v120 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v41;
    id v59 = (void *)(v32[6] + 16 * v41);
    *id v59 = v47;
    v59[1] = v46;
    sub_100136668(&v127, (_OWORD *)(v32[7] + 32 * v41));
    id v60 = v32[2];
    id v61 = __OFADD__(v60, 1LL);
    uint64_t v62 = v60 + 1;
    if (v61) {
      break;
    }
    v32[2] = v62;
    if (v36) {
      goto LABEL_7;
    }
  }

  __break(1u);
LABEL_75:
  swift_bridgeObjectRelease(v110);
  __int128 v100 = v32[2];
  if (v100)
  {
LABEL_76:
    v129[0] = _swiftEmptyArrayStorage;
    sub_1001365EC(0, v100, 0);
    __int128 v101 = type metadata accessor for RemoteInterest(0LL);
    __int128 v102 = 0LL;
    __int128 v103 = v129[0];
    do
    {
      __int128 v104 = v32[v102 + 4];
      swift_bridgeObjectRetain(v104);
      __int128 v105 = Dictionary<>.flatteningUnknownSyncProperties<A>(for:)( v101,  v104,  v101,  &protocol witness table for RemoteInterest);
      swift_bridgeObjectRelease(v104);
      v129[0] = v103;
      __int128 v107 = *(void *)(v103 + 16);
      __int128 v106 = *(void *)(v103 + 24);
      if (v107 >= v106 >> 1)
      {
        sub_1001365EC(v106 > 1, v107 + 1, 1);
        __int128 v103 = v129[0];
      }

      ++v102;
      *(void *)(v103 + 16) = v107 + 1;
      *(void *)(v103 + 8 * v107 + 32) = v105;
    }

    while (v100 != v102);
  }

LABEL_57:
  uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(+[MTAccountController sharedInstance](&OBJC_CLASS___MTAccountController, "sharedInstance"));
  id v38 = (void *)objc_claimAutoreleasedReturnValue([v37 activeDsid]);

  uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v4 currentItem]);
  id v40 = (void *)objc_claimAutoreleasedReturnValue([v39 priceType]);
  __int16 v41 = MTEpisodePriceTypeFromPersistentString();

  if ((v41 & 0xFFFFFFFFFFFFFFFELL) == 2 && !v38)
  {
    id v42 = (void *)objc_claimAutoreleasedReturnValue(+[MTAccountController sharedInstance](&OBJC_CLASS___MTAccountController, "sharedInstance"));
    [v42 promptAccountAuthenticationWithDebugReason:@"MTPlayerController authentication request" forced:1];

    id v7 = 10LL;
  }

  _Block_object_dispose(&buf, 8);
  _Block_object_dispose(&v50, 8);

  return v7;
}

                    id v58 = (v66 - 1) & v66;
                    id v59 = __clz(__rbit64(v66)) + (v60 << 6);
                  }

                  v64 = (void **)*(id *)(*(void *)(v45 + 48) + 8 * v59);
                  id v63 = v64;
                }

                if (!v63) {
                  goto LABEL_64;
                }
                uint64_t v68 = static os_log_type_t.default.getter(v64);
                id v69 = sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
                id v70 = (void *)static OS_os_log.launch.getter(v69);
                id v71 = sub_100126450((uint64_t *)&unk_1002B5E60);
                uint64_t v72 = swift_allocObject(v71, 72LL, 7LL);
                *(_OWORD *)(v72 + 16) = xmmword_1001C3C20;
                uint64_t v73 = [v63 activityType];
                __int128 v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
                id v76 = v75;

                *(void *)(v72 + 56) = &type metadata for String;
                *(void *)(v72 + 64) = sub_100127C90();
                *(void *)(v72 + 32) = v74;
                *(void *)(v72 + 40) = v76;
                os_log(_:dso:log:_:_:)( v68,  &_mh_execute_header,  v70,  "Continue user activity type: %{public}s",  39LL,  2LL,  v72);

                swift_bridgeObjectRelease(v72);
                v77 = [v88 sharedApplication];
                v78 = [v77 delegate];

                if (v78)
                {
                  if ([v78 respondsToSelector:"application:continueUserActivity:restorationHandler:"])
                  {
                    v79 = [v88 sharedApplication];
                    __int128 v94 = EntitledFirstTimeAvailableMigrator.stepIdentifier.getter;
                    __int128 v95 = 0LL;
                    aBlock = _NSConcreteStackBlock;
                    __int128 v91 = v57;
                    __int128 v92 = sub_100155388;
                    __int128 v93 = &unk_100247998;
                    id v80 = _Block_copy(&aBlock);
                    [v78 application:v79 continueUserActivity:v63 restorationHandler:v80];
                    _Block_release(v80);
                    uint64_t v81 = v95;

                    swift_unknownObjectRelease(v78);
                    id v46 = (void *)swift_release(v81);
                  }

                  else
                  {

                    id v46 = (void *)swift_unknownObjectRelease(v78);
                  }
                }

                else
                {
                }

                __int16 v51 = v60;
                __int16 v52 = v58;
              }
            }
          }

          else if (*(uint64_t *)(v40 + 16) < 1)
          {
            goto LABEL_25;
          }

          sub_10015585C(v40);
          goto LABEL_25;
        }
      }
    }

    swift_unknownObjectRelease(v6);
  }

void sub_1000F21F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_1000F2244(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[MTEpisodeUnavailableUtil sharedInstance](&OBJC_CLASS___MTEpisodeUnavailableUtil, "sharedInstance"));
  [v1 showDialogForReason:1 podcastTitle:0 completion:0];
}

void sub_1000F2284(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) reasonForNotPlayable];
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcast]);
  uint64_t v2 = objc_claimAutoreleasedReturnValue([v5 title]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000F22EC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[MTEpisodeUnavailableUtil sharedInstance](&OBJC_CLASS___MTEpisodeUnavailableUtil, "sharedInstance"));
  [v2 showDialogForReason:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) podcastTitle:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) completion:0];
}

void sub_1000F2460( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_1000F2478(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isExternalType];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

void sub_1000F26E0(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _alertControllerForClearingOrKeepingUpNextWithRequest:*(void *)(a1 + 40)]);
  [v3 setTitle:*(void *)(a1 + 48)];
  [v3 setMessage:*(void *)(a1 + 56)];
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIViewController mt_rootViewController](&OBJC_CLASS___UIViewController, "mt_rootViewController"));
  [v2 presentViewController:v3 animated:1 completion:0];
}

void sub_1000F28C0(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _alertControllerForClearingOrKeepingUpNextWithRequest:*(void *)(a1 + 40)]);
  [v3 setTitle:*(void *)(a1 + 48)];
  [v3 setMessage:*(void *)(a1 + 56)];
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIViewController mt_rootViewController](&OBJC_CLASS___UIViewController, "mt_rootViewController"));
  [v2 presentViewController:v3 animated:1 completion:0];
}

void sub_1000F2BA0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  [v2 setUpNextQueueIntent:1];

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1000F2C44;
  v5[3] = &unk_100240240;
  int8x16_t v4 = *(int8x16_t *)(a1 + 32);
  id v3 = (id)v4.i64[0];
  int8x16_t v6 = vextq_s8(v4, v4, 8uLL);
  +[IMAVPlayer performOnMainQueue:](&OBJC_CLASS___IMAVPlayer, "performOnMainQueue:", v5);
}

id sub_1000F2C44(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setPlaybackQueue:*(void *)(a1 + 40)];
}

void sub_1000F2C50(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  [v2 setUpNextQueueIntent:2];

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1000F2CF4;
  v5[3] = &unk_100240240;
  int8x16_t v4 = *(int8x16_t *)(a1 + 32);
  id v3 = (id)v4.i64[0];
  int8x16_t v6 = vextq_s8(v4, v4, 8uLL);
  +[IMAVPlayer performOnMainQueue:](&OBJC_CLASS___IMAVPlayer, "performOnMainQueue:", v5);
}

id sub_1000F2CF4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setPlaybackQueue:*(void *)(a1 + 40)];
}

id sub_1000F2D00(uint64_t a1)
{
  return [*(id *)(a1 + 32) finishWithStatus:2];
}

uint64_t sub_1000F2DB8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_1000F2EA4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _onQueueRestorePlayerManifestWithCompletion:*(void *)(a1 + 40)];
}

void sub_1000F305C(uint64_t a1)
{
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_1000F31D4;
  v18[3] = &unk_10023FF98;
  v18[4] = *(void *)(a1 + 32);
  id v2 = objc_retainBlock(v18);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) player]);
  int8x16_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 manifest]);

  if (v4)
  {
    ((void (*)(void *))v2[2])(v2);
  }

  else
  {
    id v7 = *(void **)(a1 + 40);
    if (v7)
    {
      BOOL v8 = *(void **)(a1 + 32);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472LL;
      _DWORD v13[2] = sub_1000F3200;
      v13[3] = &unk_1002421B8;
      id v9 = v7;
      uint64_t v10 = *(void *)(a1 + 32);
      id v14 = v9;
      uint64_t v15 = v10;
      double v16 = v2;
      [v8 restoreFromUserActivity:v9 startPlayback:0 reason:1 interactive:0 completion:v13];
    }

    else
    {
      uint64_t v11 = _MTLogCategoryPlayback(v5, v6);
      double v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Restoration: No user activity found on disk",  buf,  2u);
      }

      [*(id *)(a1 + 32) _restoreDefaultManifestIfNeededWithCompletion:v2];
    }
  }
}

id sub_1000F31D4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invokeRestorationCompletions];
}

void sub_1000F3200(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"MTCompositeManifestIsPlayingFromUpNext"]);

  if ([v3 BOOLValue])
  {
    int8x16_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) upNextController]);
    id v5 = [v4 count];

    if (v5)
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) compositeManifest]);
      [v6 next];
    }
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) player]);
  BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([v7 manifest]);

  uint64_t v11 = _MTLogCategoryPlayback(v9, v10);
  double v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v13)
    {
      __int16 v16 = 0;
      id v14 = "Restoration: Restored manifest from user activity";
      uint64_t v15 = (uint8_t *)&v16;
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v14, v15, 2u);
    }
  }

  else if (v13)
  {
    *(_WORD *)buf = 0;
    id v14 = "Restoration: No manifest restored from user activity data";
    uint64_t v15 = buf;
    goto LABEL_9;
  }

  [*(id *)(a1 + 40) _restoreDefaultManifestIfNeededWithCompletion:*(void *)(a1 + 48)];
}

void sub_1000F339C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) restorationCompletions]);
  uint64_t v4 = _MTLogCategoryPlayback(v2, v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    id v11 = [v2 count];
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Finished restoring manifest. Will call %lu completions",  buf,  0xCu);
  }

  uint64_t v6 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  [*(id *)(a1 + 32) setRestorationCompletions:v6];

  [*(id *)(a1 + 32) setIsManifestRestorationOngoing:0];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000F34E0;
  void v8[3] = &unk_10023FF98;
  id v9 = v2;
  id v7 = v2;
  +[IMAVPlayer performOnMainQueue:](&OBJC_CLASS___IMAVPlayer, "performOnMainQueue:", v8);
}

void sub_1000F34E0(uint64_t a1)
{
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v12;
    do
    {
      id v5 = 0LL;
      do
      {
        if (*(void *)v12 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v11 + 1) + 8LL * (void)v5) + 16LL))();
        id v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v3);
  }

  uint64_t v8 = _MTLogCategoryPlayback(v6, v7);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "All completions called", v10, 2u);
  }
}

uint64_t sub_1000F373C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000F385C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  if (a2 == 1)
  {
    id v22 = objc_begin_catch(a1);
    if (v18) {
      (*(void (**)(uint64_t, void))(v18 + 16))(v18, 0LL);
    }

    objc_end_catch();
    JUMPOUT(0x1000F3838LL);
  }

  _Unwind_Resume(a1);
}

void sub_1000F38C0(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 48);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained restoreFromUserActivity:*(void *)(a1 + 32) withManifest:v4 startPlayback:*(unsigned __int8 *)(a1 + 64) reason:*(void *)(a1 + 56) interactive:*(unsigned __int8 *)(a1 + 65) completion:*(void *)(a1 + 40)];
}

void sub_1000F3A58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_1000F3A74(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (*(void *)(a1 + 64) == 2LL)
    {
      +[IMMetrics recordUserAction:dataSource:]( &OBJC_CLASS___IMMetrics,  "recordUserAction:dataSource:",  @"handoff_restore_activity");
      [*(id *)(a1 + 40) getContinuationStreamsWithCompletionHandler:&stru_100244A08];
    }

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(unsigned __int8 *)(a1 + 72);
    uint64_t v5 = *(void *)(a1 + 64);
    uint64_t v6 = *(unsigned __int8 *)(a1 + 73);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1000F3BE8;
    void v8[3] = &unk_100244A30;
    objc_copyWeak(&v11, (id *)(a1 + 56));
    char v12 = *(_BYTE *)(a1 + 72);
    id v9 = *(id *)(a1 + 40);
    id v10 = *(id *)(a1 + 48);
    [WeakRetained setManifest:v3 startPlayback:v4 forceLocal:1 reason:v5 interactive:v6 completion:v8];

    objc_destroyWeak(&v11);
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (v7) {
      (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0LL);
    }
  }

void sub_1000F3BD0(_Unwind_Exception *a1)
{
}

void sub_1000F3BE8(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (a2 == 1 && *(_BYTE *)(a1 + 56))
  {
    [*(id *)(a1 + 32) currentTime];
    double v5 = v4;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained player]);
    [v6 setCurrentTime:v5];
  }

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, BOOL))(v7 + 16))(v7, a2 == 1);
  }
}

void sub_1000F3F34(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v3 = [(id)objc_opt_class(*(void *)(a1 + 32)) _activityRestorationPath];
  double v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  [v2 removeItemAtURL:v4 error:0];

  uint64_t v5 = *(void *)(a1 + 40);
  id v14 = 0LL;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v5,  1LL,  &v14));
  id v7 = v14;
  id v9 = v7;
  if (v7)
  {
    uint64_t v10 = _MTLogCategoryPlayback(v7, v8);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      __int16 v16 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Failed to archive activity with error %@",  buf,  0xCu);
    }
  }

  id v12 = [(id)objc_opt_class(*(void *)(a1 + 32)) _activityRestorationPath];
  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  [v6 writeToURL:v13 atomically:1];
}

void sub_1000F45C8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = _MTLogCategoryMediaRemote(v5);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 138412290;
      uint64_t v10 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Error resolving remote playerPath: %@",  (uint8_t *)&v9,  0xCu);
    }
  }

  else
  {
    [*(id *)(a1 + 32) _sendMediaRemoteCommand:*(unsigned int *)(a1 + 48) toPlayer:a2 options:*(void *)(a1 + 40)];
  }
}

void sub_1000F47AC(id a1, unsigned int a2, __CFArray *a3)
{
  if (a2)
  {
    uint64_t v4 = _MTLogCategoryMediaRemote(a1);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6[0] = 67109120;
      v6[1] = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Error sending MediaRemote command to player: %d",  (uint8_t *)v6,  8u);
    }
  }

void sub_1000F4DC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = objc_claimAutoreleasedReturnValue([v5 userId]);
    uint64_t v8 = (void *)v7;
    if (v7) {
      int v9 = (const __CFString *)v7;
    }
    else {
      int v9 = &stru_100248948;
    }
    [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"userId"];

    uint64_t v10 = objc_claimAutoreleasedReturnValue([v5 clientId]);
    id v11 = (os_log_s *)v10;
    if (v10) {
      id v12 = (const __CFString *)v10;
    }
    else {
      id v12 = &stru_100248948;
    }
    [*(id *)(a1 + 32) setObject:v12 forKeyedSubscript:@"clientId"];
  }

  else
  {
    uint64_t v13 = _MTLogCategoryMetrics();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
      int v15 = 138412290;
      __int16 v16 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Failed to fetch AnalyticsUserIdentifier from AMS for play event with error %@",  (uint8_t *)&v15,  0xCu);
    }
  }

  +[IMMetrics recordEvent:dataSource:data:topic:]( &OBJC_CLASS___IMMetrics,  "recordEvent:dataSource:data:topic:",  @"play",  *(void *)(a1 + 40),  *(void *)(a1 + 32),  @"xp_amp_podcasts_paf");
}

void sub_1000F50B4(_Unwind_Exception *a1)
{
}

void sub_1000F50C8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accessLog]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) errorLog]);
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) episodeUuid]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 episodeForUuid:v5]);

  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v2 events]);
  id v8 = [v7 countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v22;
    do
    {
      id v11 = 0LL;
      do
      {
        if (*(void *)v22 != v10) {
          objc_enumerationMutation(v7);
        }
        [*(id *)(a1 + 56) recordMetricsEventForAccessLog:*(void *)(*((void *)&v21 + 1) + 8 * (void)v11) playerItem:*(void *)(a1 + 48)];
        id v11 = (char *)v11 + 1;
      }

      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v21 objects:v26 count:16];
    }

    while (v9);
  }

  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "events", 0));
  id v13 = [v12 countByEnumeratingWithState:&v17 objects:v25 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v18;
    do
    {
      __int16 v16 = 0LL;
      do
      {
        if (*(void *)v18 != v15) {
          objc_enumerationMutation(v12);
        }
        [*(id *)(a1 + 56) recordMetricsEventForErrorLog:*(void *)(*((void *)&v17 + 1) + 8 * (void)v16) withEpisode:v6];
        __int16 v16 = (char *)v16 + 1;
      }

      while (v14 != v16);
      id v14 = [v12 countByEnumeratingWithState:&v17 objects:v25 count:16];
    }

    while (v14);
  }
}

void sub_1000F53BC(_Unwind_Exception *a1)
{
}

void sub_1000F5774(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) episodeUuid]);
  id v9 = (id)objc_claimAutoreleasedReturnValue([v2 episodeForUuid:v3]);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) compositeManifest]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 metricsAdditionalData]);
  id v6 = [v5 mutableCopy];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) player]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v7 isPlaybackRequested]));
  [v6 setObject:v8 forKeyedSubscript:@"isPlaying"];

  [v6 setObject:*(void *)(a1 + 56) forKeyedSubscript:@"manifest"];
  +[IMMetrics recordUserAction:dataSource:withData:]( &OBJC_CLASS___IMMetrics,  "recordUserAction:dataSource:withData:",  @"change_track",  v9,  v6);
}

void sub_1000F6C60(id a1)
{
  id v1 = -[NSMutableDictionary initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableDictionary), "initWithCapacity:", 1LL);
  id v2 = (void *)qword_1002B6B88;
  qword_1002B6B88 = (uint64_t)v1;
}

id sub_1000F6FAC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) layer]);
  LODWORD(v3) = *(_DWORD *)(a1 + 40);
  [v2 setOpacity:v3];

  LODWORD(v4) = *(_DWORD *)(a1 + 40);
  [*(id *)(*(void *)(a1 + 32) + 16) setOpacity:v4];
  [*(id *)(a1 + 32) _updateScale];
  id v5 = *(_BYTE **)(a1 + 32);
  if (v5[76])
  {
    [v5 _applyFocusDirectionTransform];
    id v5 = *(_BYTE **)(a1 + 32);
  }

  [v5 _updateContainerFilters];
  [*(id *)(*(void *)(a1 + 32) + 32) setAlpha:*(float *)(a1 + 40)];
  uint64_t v6 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v6 + 78))
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v6 + 24) layer]);
    id v8 = v7;
    uint64_t v9 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v9 + 75)) {
      double v10 = *(double *)(v9 + 80);
    }
    else {
      double v10 = 0.0;
    }
    [v7 setCornerRadius:v10];

    uint64_t v6 = *(void *)(a1 + 32);
  }

  if (*(_BYTE *)(a1 + 44)) {
    uint64_t v11 = 0LL;
  }
  else {
    uint64_t v11 = *(void *)(v6 + 64);
  }
  return [*(id *)(v6 + 24) setBackgroundColor:v11];
}

uint64_t sub_1000F70D8(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 48LL) = 0;
  return result;
}

void sub_1000F70EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  double v3 = *(void **)(v2 + 40);
  if (*(_BYTE *)(a1 + 40))
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([(id)v2 selectedBackgroundColor]);
    [v3 setBackgroundColor:v4];
  }

  else
  {
    [*(id *)(v2 + 40) setBackgroundColor:*(void *)(v2 + 64)];
  }

uint64_t sub_1000F716C(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 48LL) = 0;
  return result;
}

void sub_1000F88B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000F88E4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000F88F4(uint64_t a1)
{
}

void sub_1000F88FC(uint64_t a1, void *a2)
{
  uint64_t v3 = objc_claimAutoreleasedReturnValue([a2 valueForKey:kEpisodeUuid]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id sub_1000F8C18(uint64_t a1)
{
  return [*(id *)(a1 + 32) processResults];
}

void sub_1000F902C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if ([v4 conformsToProtocol:&OBJC_PROTOCOL___MTColorThemeable])
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) colorTheme]);
    [v4 setColorTheme:v3];
  }
}

void sub_1000F933C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) visible])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) vc]);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 view]);

    id v4 = -[UIActivityIndicatorView initWithActivityIndicatorStyle:]( objc_alloc(&OBJC_CLASS___UIActivityIndicatorView),  "initWithActivityIndicatorStyle:",  101LL);
    [*(id *)(a1 + 32) setSpinner:v4];

    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) spinner]);
    [v5 startAnimating];

    uint64_t v6 = -[UILabel initWithFrame:]( objc_alloc(&OBJC_CLASS___UILabel),  "initWithFrame:",  CGRectZero.origin.x,  CGRectZero.origin.y,  CGRectZero.size.width,  CGRectZero.size.height);
    [*(id *)(a1 + 32) setLabel:v6];

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) label]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[UIFont preferredFontForTextStyle:]( &OBJC_CLASS___UIFont,  "preferredFontForTextStyle:",  UIFontTextStyleBody));
    [v7 setFont:v8];

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) label]);
    double v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](&OBJC_CLASS___UIColor, "secondaryLabelColor"));
    [v9 setTextColor:v10];

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) label]);
    [v11 setTextAlignment:1];

    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) label]);
    [v12 setNumberOfLines:0];

    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) label]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](&OBJC_CLASS___UIColor, "clearColor"));
    [v13 setBackgroundColor:v14];

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) label]);
    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue( [v16 localizedStringForKey:@"UPDATING_LIBRARY" value:&stru_100248948 table:0]);
    [v15 setText:v17];

    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) spinner]);
    [v3 addSubview:v18];

    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) label]);
    [v3 addSubview:v19];

    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) view]);
    [v20 setNeedsLayout];

    __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) view]);
    [v21 layoutIfNeeded];

    __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) spinner]);
    [v22 setAlpha:0.0];

    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) label]);
    [v23 setAlpha:0.0];

    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_1000F964C;
    v24[3] = &unk_10023FF98;
    v24[4] = *(void *)(a1 + 32);
    +[UIView animateWithDuration:animations:](&OBJC_CLASS___UIView, "animateWithDuration:animations:", v24, 0.2);
  }

void sub_1000F964C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) spinner]);
  [v2 setAlpha:1.0];

  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) label]);
  [v3 setAlpha:1.0];
}

void sub_1000F9D28(uint64_t a1, void *a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 description]);
  [v4 setValue:v6 forKey:v5];
}

void sub_1000FA658(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  uint64_t v2 = (void *)qword_1002B6BA0;
  qword_1002B6BA0 = (uint64_t)v1;

  [(id)qword_1002B6BA0 setDateStyle:0];
  [(id)qword_1002B6BA0 setTimeStyle:1];
}

void sub_1000FB1C4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v4 = a2;
    [v4 setBackgroundColor:v2];
  }

  else
  {
    id v3 = a2;
    id v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](&OBJC_CLASS___UIColor, "colorWithWhite:alpha:", 0.0, 0.4));
    objc_msgSend(v3, "setBackgroundColor:");
  }
}

void sub_1000FB99C(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:](&OBJC_CLASS___UIImage, "systemImageNamed:", @"plus.circle.fill"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) plusButtonImageView]);
  [v2 setImage:v3];
}

id sub_1000FC948(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateAllPodcastsUserInitiated:*(unsigned __int8 *)(a1 + 56) forced:*(unsigned __int8 *)(a1 + 57) useBackgroundFetch:0 source:*(void *)(a1 + 48) startedUpdatesCallback:*(void *)(a1 + 40)];
}

id sub_1000FCA84(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateAllPodcastsUserInitiated:0 forced:0 useBackgroundFetch:1 source:*(void *)(a1 + 48) startedUpdatesCallback:*(void *)(a1 + 40)];
}

void sub_1000FCB38(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](&OBJC_CLASS___MTDB, "sharedInstance"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 importContext]);

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000FCC18;
  v7[3] = &unk_100240E00;
  id v8 = v3;
  id v9 = (id)objc_claimAutoreleasedReturnValue( +[MTPodcast predicateForPodcastsNeedingRetry:]( &OBJC_CLASS___MTPodcast,  "predicateForPodcastsNeedingRetry:",  1LL));
  id v4 = *(void **)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = v4;
  id v5 = v9;
  id v6 = v3;
  [v6 performBlock:v7];
}

void sub_1000FCC18(uint64_t a1)
{
  uint64_t v2 = kMTPodcastEntityName;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  kPodcastUpdatedDate,  1LL));
  __int128 v20 = v5;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v20, 1LL));
  uint64_t v7 = kPodcastUuid;
  uint64_t v19 = kPodcastUuid;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v19, 1LL));
  id v9 = (void *)objc_claimAutoreleasedReturnValue( [v3 objectDictionariesInEntity:v2 predicate:v4 sortDescriptors:v6 propertiesToFetch:v8 includeObjectId:0]);

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 valueForKey:v7]);
  id v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) workQueue]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1000FCDBC;
  void v15[3] = &unk_100244770;
  uint64_t v12 = *(void *)(a1 + 48);
  id v13 = *(void **)(a1 + 56);
  id v16 = v10;
  uint64_t v17 = v12;
  id v18 = v13;
  id v14 = v10;
  dispatch_async(v11, v15);
}

id sub_1000FCDBC(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryFeedUpdate(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [*(id *)(a1 + 32) count];
    int v6 = 134217984;
    id v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Found %ld podcasts requiring retry feed fetch.",  (uint8_t *)&v6,  0xCu);
  }

  return [*(id *)(a1 + 40) _updatePodcastsWithUUIDs:*(void *)(a1 + 32) userInitiated:0 forced:1 useBackgroundFetch:1 source:4 startedUpdatesCallback:*(void *)(a1 + 48)];
}

void sub_1000FCF34(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForAreMediaAPI:](&OBJC_CLASS___MTPodcast, "predicateForAreMediaAPI:", 1LL));
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcast predicateForNotImplicitlyFollowedPodcasts]( &OBJC_CLASS___MTPodcast,  "predicateForNotImplicitlyFollowedPodcasts"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 AND:v4]);

  int v6 = *(void **)(a1 + 32);
  uint64_t v7 = kMTPodcastEntityName;
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  kPodcastLastFetchedDate,  1LL));
  __int128 v21 = v8;
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v21, 1LL));
  v20[0] = kPodcastUuid;
  v20[1] = kPodcastUpdateAvg;
  v20[2] = kPodcastFeedChangedDate;
  v20[3] = kPodcastStoreCollectionId;
  v20[4] = kPodcastTitle;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v20, 5LL));
  id v11 = (void *)objc_claimAutoreleasedReturnValue( [v6 objectDictionariesInEntity:v7 predicate:v5 sortDescriptors:v9 propertiesToFetch:v10 includeObjectId:0]);

  uint64_t v15 = _NSConcreteStackBlock;
  uint64_t v16 = 3221225472LL;
  uint64_t v17 = sub_1000FD154;
  id v18 = &unk_100244BF0;
  id v19 = v2;
  id v12 = v2;
  [v11 enumerateObjectsUsingBlock:&v15];
  uint64_t v13 = *(void *)(a1 + 40);
  id v14 = objc_msgSend(v12, "copy", v15, v16, v17, v18);
  (*(void (**)(uint64_t, id))(v13 + 16))(v13, v14);
}

void sub_1000FD154(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKey:kPodcastFeedChangedDate]);
  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKey:kPodcastUpdateAvg]);
    uint64_t v6 = (uint64_t)[v5 longLongValue];

    double v7 = (double)v6 * 3.0;
    if (v7 < 1209600.0) {
      double v7 = 1209600.0;
    }
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 dateByAddingTimeInterval:v7]);
    [v8 timeIntervalSinceReferenceDate];
    double v10 = v9;
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    [v11 timeIntervalSinceReferenceDate];
    double v13 = v12;

    if (v10 >= v13)
    {
      if (v6 >= 14401)
      {
        if ((unint64_t)v6 >= 0x2A301)
        {
          int v29 = (int)v6 / 86400;
          double v28 = (double)(86400 * v29);
        }

        else
        {
          double v28 = 86400.0;
        }
      }

      else
      {
        double v28 = 3600.0;
      }

      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 dateByAddingTimeInterval:v28]);
      id v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
      id v31 = [v30 compare:v16];

      if (v31 != (id)-1LL)
      {
        uint64_t v33 = _MTLogCategoryFeedUpdate(v32);
        __int128 v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
        BOOL v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
        uint64_t v36 = kPodcastUuid;
        if (v35)
        {
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKey:kPodcastUuid]);
          id v38 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKey:kPodcastTitle]);
          uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKey:kPodcastStoreCollectionId]);
          *(_DWORD *)buf = 138544642;
          __int128 v43 = v37;
          __int16 v44 = 2112;
          __int16 v45 = v38;
          __int16 v46 = 2112;
          __int16 v47 = v39;
          __int16 v48 = 2112;
          __int16 v49 = v4;
          __int16 v50 = 1024;
          int v51 = (int)v28 / 86400;
          __int16 v52 = 1024;
          int v53 = (int)(v28 - (double)(86400 * v51)) / 3600;
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "MAPI Expected Shows - 🟢 Updating expected show %{public}@ - %@ storeId: %@, feed last changed date: %@, upda te average: %dd %dh",  buf,  0x36u);
        }

        id v40 = *(void **)(a1 + 32);
        __int16 v41 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKey:v36]);
        [v40 addObject:v41];
      }
    }

    else
    {
      uint64_t v15 = _MTLogCategoryFeedUpdate(v14);
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKey:kPodcastUuid]);
        id v18 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKey:kPodcastTitle]);
        id v19 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKey:kPodcastStoreCollectionId]);
        *(_DWORD *)buf = 138544130;
        __int128 v43 = v17;
        __int16 v44 = 2112;
        __int16 v45 = v18;
        __int16 v46 = 2112;
        __int16 v47 = v19;
        __int16 v48 = 2112;
        __int16 v49 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "MAPI Expected Shows - 💤 Skipping dormant show %{public}@ - %@ storeId: %@, feed last changed date: %@. Not inc luding in expected to update feeds.",  buf,  0x2Au);
      }
    }
  }

  else
  {
    uint64_t v20 = _MTLogCategoryFeedUpdate(0LL);
    __int128 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    uint64_t v23 = kPodcastUuid;
    if (v22)
    {
      __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKey:kPodcastUuid]);
      unsigned int v25 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKey:kPodcastTitle]);
      int64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKey:kPodcastStoreCollectionId]);
      *(_DWORD *)buf = 138544130;
      __int128 v43 = v24;
      __int16 v44 = 2112;
      __int16 v45 = v25;
      __int16 v46 = 2112;
      __int16 v47 = v26;
      __int16 v48 = 2112;
      __int16 v49 = 0LL;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "MAPI Expected Shows - 🟡 Updating show with no change date %{public}@ - %@ storeId: %@, feed last changed date: %@",  buf,  0x2Au);
    }

    uint64_t v27 = *(void **)(a1 + 32);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue([v3 valueForKey:v23]);
    [v27 addObject:v16];
  }
}

void sub_1000FD6F8(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1000FD774;
  void v4[3] = &unk_100244C40;
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  [v2 _fetchMediaAPIShowsExpectedToUpdate:v4];
}

void sub_1000FD774(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((unint64_t)[v3 count] > *(void *)(a1 + 48))
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 subarrayWithRange:0]);

    id v3 = (id)v4;
  }

  uint64_t v23 = 0LL;
  __int128 v24 = &v23;
  uint64_t v25 = 0x3032000000LL;
  int64_t v26 = sub_1000FD9BC;
  uint64_t v27 = sub_1000FD9CC;
  id v28 = &__NSArray0__struct;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](&OBJC_CLASS___MTDB, "sharedInstance"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 importContext]);

  double v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  kMTPodcastEntityName));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v3));
  double v9 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForPodcastUuids:](&OBJC_CLASS___MTPodcast, "predicateForPodcastUuids:", v8));
  [v7 setPredicate:v9];

  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_1000FD9D4;
  v19[3] = &unk_1002404B8;
  BOOL v22 = &v23;
  id v10 = v6;
  id v20 = v10;
  id v11 = v7;
  id v21 = v11;
  [v10 performBlockAndWait:v19];
  uint64_t v12 = v24[5];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_1000FDA10;
  void v16[3] = &unk_100244C18;
  id v13 = *(id *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 32);
  id v18 = v13;
  void v16[4] = v14;
  id v15 = v3;
  id v17 = v15;
  +[BatchFeedRequestController fetchOutOfDateShowUUIDsWith:completionHandler:]( &OBJC_CLASS____TtC18PodcastsFoundation26BatchFeedRequestController,  "fetchOutOfDateShowUUIDsWith:completionHandler:",  v12,  v16);

  _Block_object_dispose(&v23, 8);
}

void sub_1000FD9A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_1000FD9BC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000FD9CC(uint64_t a1)
{
}

void sub_1000FD9D4(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) executeFetchRequest:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000FDA10(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*((void (**)(void))a1[6] + 2))();
  }

  else
  {
    uint64_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[4] workQueue]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1000FDAEC;
    void v9[3] = &unk_100240E00;
    id v7 = a1[5];
    id v8 = a1[4];
    id v10 = v7;
    id v11 = v8;
    id v12 = v5;
    id v13 = a1[6];
    dispatch_async(v6, v9);
  }
}

id sub_1000FDAEC(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryFeedUpdate(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [*(id *)(a1 + 32) count];
    int v6 = 134217984;
    id v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Found %ld podcasts expected to update.",  (uint8_t *)&v6,  0xCu);
  }

  return [*(id *)(a1 + 40) _updatePodcastsWithUUIDs:*(void *)(a1 + 48) userInitiated:0 forced:1 useBackgroundFetch:1 source:6 startedUpdatesCallback:*(void *)(a1 + 56)];
}

void sub_1000FDC48(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_1000FDCB8;
  v2[3] = &unk_100244678;
  id v1 = *(void **)(a1 + 40);
  id v3 = *(id *)(a1 + 32);
  id v4 = v1;
  [v3 _fetchMediaAPIShowsExpectedToUpdate:v2];
}

void sub_1000FDCB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000FDD64;
  block[3] = &unk_100244770;
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(void **)(a1 + 40);
  id v9 = v3;
  uint64_t v10 = v5;
  id v11 = v6;
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_1000FDD64(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryFeedUpdate(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [*(id *)(a1 + 32) count];
    *(_DWORD *)buf = 134217984;
    id v14 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Found %ld podcasts expected to update.",  buf,  0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[MTFeedUpdateMetricsAction fetchFeedsExpectedToUpdate]( &OBJC_CLASS___MTFeedUpdateMetricsAction,  "fetchFeedsExpectedToUpdate"));
  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsDataKey podcastCount](&OBJC_CLASS___MTFeedUpdateMetricsDataKey, "podcastCount"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  objc_msgSend(*(id *)(a1 + 32), "count", v6)));
  id v12 = v7;
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL));
  +[IMMetrics recordUserAction:dataSource:withData:]( &OBJC_CLASS___IMMetrics,  "recordUserAction:dataSource:withData:",  v5,  0LL,  v8);

  id v9 = *(void **)(a1 + 40);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", *(void *)(a1 + 32)));
  [v9 _updatePodcastsWithUUIDs:v10 userInitiated:0 forced:1 useBackgroundFetch:1 source:6 startedUpdatesCallback:*(void *)(a1 + 48)];
}

void sub_1000FDF94(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    int v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workQueue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000FE06C;
    block[3] = &unk_100244C68;
    id v7 = v5;
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(void **)(a1 + 40);
    id v11 = v7;
    uint64_t v12 = v8;
    char v15 = *(_BYTE *)(a1 + 56);
    uint64_t v14 = *(void *)(a1 + 48);
    id v13 = v9;
    dispatch_async(v6, block);
  }
}

void sub_1000FE06C(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryFeedUpdate(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [*(id *)(a1 + 32) count];
    *(_DWORD *)buf = 134217984;
    id v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Found %ld out of date store shows.", buf, 0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 64);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1000FE18C;
  void v9[3] = &unk_100240A30;
  uint64_t v8 = *(void *)(a1 + 56);
  id v10 = *(id *)(a1 + 48);
  [v5 _updatePodcastsWithUUIDs:v6 userInitiated:v7 forced:1 useBackgroundFetch:1 source:v8 startedUpdatesCallback:v9];
}

uint64_t sub_1000FE18C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000FE228(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000FE30C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForAreMediaAPI:](&OBJC_CLASS___MTPodcast, "predicateForAreMediaAPI:", 0LL));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForNotHiddenPodcasts](&OBJC_CLASS___MTPodcast, "predicateForNotHiddenPodcasts"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 AND:v3]);

  if (!*(_BYTE *)(a1 + 56))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcast predicateForNotImplicitlyFollowedPodcasts]( &OBJC_CLASS___MTPodcast,  "predicateForNotImplicitlyFollowedPodcasts"));
    uint64_t v6 = objc_claimAutoreleasedReturnValue([v4 AND:v5]);

    id v4 = (void *)v6;
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  kMTPodcastEntityName));
  [v7 setPredicate:v4];
  uint64_t v30 = kPodcastUuid;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v30, 1LL));
  [v7 setPropertiesToFetch:v8];

  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) executeFetchRequest:v7]);
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  id v11 = [v10 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v26;
    do
    {
      for (i = 0LL; i != v12; i = (char *)i + 1)
      {
        if (*(void *)v26 != v13) {
          objc_enumerationMutation(v10);
        }
        char v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v25 + 1) + 8 * (void)i) uuid]);
        [v9 addObject:v15];
      }

      id v12 = [v10 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }

    while (v12);
  }

  uint64_t v16 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) workQueue]);
  v20[0] = _NSConcreteStackBlock;
  v20[2] = sub_1000FE5A4;
  v20[3] = &unk_100244CE0;
  uint64_t v17 = *(void *)(a1 + 40);
  id v18 = *(void **)(a1 + 48);
  id v21 = v9;
  uint64_t v22 = v17;
  v20[1] = 3221225472LL;
  char v24 = *(_BYTE *)(a1 + 57);
  id v23 = v18;
  id v19 = v9;
  dispatch_async(v16, v20);
}

id sub_1000FE5A4(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryFeedUpdate(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [*(id *)(a1 + 32) count];
    int v6 = 134217984;
    id v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Found %ld non-store shows.",  (uint8_t *)&v6,  0xCu);
  }

  return [*(id *)(a1 + 40) _updatePodcastsWithUUIDs:*(void *)(a1 + 32) userInitiated:0 forced:*(unsigned __int8 *)(a1 + 56) useBackgroundFetch:1 source:5 startedUpdatesCallback:*(void *)(a1 + 48)];
}

id sub_1000FE74C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updatePodcastsWithUUIDs:*(void *)(a1 + 40) userInitiated:*(unsigned __int8 *)(a1 + 64) useBackgroundFetch:0 source:*(void *)(a1 + 56) startedUpdatesCallback:*(void *)(a1 + 48)];
}

void sub_1000FE8E4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) feedManager]);
  unsigned int v3 = [v2 abortUpdatesIfNetworkUnreachable:*(unsigned __int8 *)(a1 + 72)];

  if (v3)
  {
    uint64_t v5 = _MTLogCategoryFeedUpdate(v4);
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Skipping feed update due to network not being reachable",  buf,  2u);
    }

    if (*(void *)(a1 + 56))
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1000FEA08;
      block[3] = &unk_1002400E8;
      id v8 = *(id *)(a1 + 56);
      dispatch_async(&_dispatch_main_q, block);
    }
  }

  else
  {
    objc_msgSend( *(id *)(a1 + 32),  "_updatePodcastWithUUID:triggerBy:userInitiated:forced:forceBootstrap:useBackgroundFetch:source:completion:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 64),  *(void *)(a1 + 56));
  }

void sub_1000FEA08(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue( +[FeedUpdaterObjcError internetNotReachable]( &OBJC_CLASS____TtC18PodcastsFoundation20FeedUpdaterObjcError,  "internetNotReachable"));
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
  }

void sub_1000FEB70(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcast predicateForPodcastStoreId:]( &OBJC_CLASS___MTPodcast,  "predicateForPodcastStoreId:",  *(void *)(a1 + 56)));
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectInEntity:kMTPodcastEntityName predicate:v2]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uuid]);
  uint64_t v5 = _MTLogCategoryCloudSync(v4);
  int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = v6;
  if (v4)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      id v12 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Sync feed update from push notification for podcast %{public}@",  buf,  0xCu);
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateManager sharedInstance](&OBJC_CLASS___MTFeedUpdateManager, "sharedInstance"));
    [v8 _updatePodcastWithUUID:v4 triggerBy:*(void *)(a1 + 40) userInitiated:*(unsigned __int8 *)(a1 + 72) forced:*(unsigned __int8 *)(a1 + 73) forceBootstrap:0 source:*(void *)(a1 + 64) completion:*(void *)(a1 + 48)];
    goto LABEL_9;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    id v9 = *(void **)(a1 + 56);
    *(_DWORD *)buf = 134217984;
    id v12 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Can't find podcast UUID from store ID %lld",  buf,  0xCu);
  }

  uint64_t v10 = *(void *)(a1 + 48);
  if (v10)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[FeedUpdaterObjcError localShowMissing]( &OBJC_CLASS____TtC18PodcastsFoundation20FeedUpdaterObjcError,  "localShowMissing"));
    (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0LL, v8);
LABEL_9:
  }
}

void sub_1000FEFAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_1000FEFC4(uint64_t a1)
{
  uint64_t v2 = kMTPodcastEntityName;
  unsigned int v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  kPodcastUpdatedDate,  1LL));
  char v24 = v5;
  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v24, 1LL));
  uint64_t v7 = kPodcastUuid;
  uint64_t v23 = kPodcastUuid;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v23, 1LL));
  id v9 = (void *)objc_claimAutoreleasedReturnValue( [v3 objectDictionariesInEntity:v2 predicate:v4 sortDescriptors:v6 propertiesToFetch:v8 includeObjectId:0]);

  uint64_t v10 = objc_claimAutoreleasedReturnValue([v9 valueForKey:v7]);
  uint64_t v11 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  uint64_t v13 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) workQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000FF18C;
  block[3] = &unk_100244D80;
  uint64_t v14 = *(void *)(a1 + 48);
  char v21 = *(_BYTE *)(a1 + 80);
  __int16 v22 = *(_WORD *)(a1 + 81);
  uint64_t v15 = *(void *)(a1 + 72);
  __int128 v17 = *(_OWORD *)(a1 + 56);
  void block[4] = v14;
  uint64_t v20 = v15;
  id v16 = (id)v17;
  __int128 v19 = v17;
  dispatch_async(v13, block);
}

void sub_1000FF18C(uint64_t a1)
{
  if ([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) count])
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v2 timeIntervalSinceReferenceDate];
    objc_msgSend(v3, "setDouble:forKey:", kMTAllPodcastsLastUpdatedDate);
  }

void sub_1000FF4A4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32))
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1000FF520;
    void v3[3] = &unk_1002429E8;
    id v4 = *(id *)(a1 + 32);
    uint64_t v5 = a2;
    dispatch_async(&_dispatch_main_q, v3);
  }

uint64_t sub_1000FF520(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(a1 + 40));
}

BOOL sub_1000FF530()
{
  if (+[MTApplication localLibraryUpdatesDisabled](&OBJC_CLASS___MTApplication, "localLibraryUpdatesDisabled")
    || (+[PFClientUtil isRunningOnHomepod](&OBJC_CLASS___PFClientUtil, "isRunningOnHomepod") & 1) != 0)
  {
    return 1LL;
  }

  if (qword_1002B6BB0 != -1) {
    dispatch_once(&qword_1002B6BB0, &stru_100244F30);
  }
  return byte_1002B6BB8 != 0;
}

void sub_1000FF5A0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = v7;
  if (v7 || (id v7 = [v6 BOOLValue], (v7 & 1) == 0))
  {
    uint64_t v19 = _MTLogCategoryFeedUpdate(v7);
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Batch fetch bag value is off. Updating all podcasts through legacy path.",  buf,  2u);
    }

    objc_msgSend( *(id *)(a1 + 32),  "_unsafe_updateAllPodcastsUserInitiated:forced:useBackgroundFetch:source:startedUpdatesCallback:",  *(unsigned __int8 *)(a1 + 56),  *(unsigned __int8 *)(a1 + 57),  *(unsigned __int8 *)(a1 + 58),  *(void *)(a1 + 48),  *(void *)(a1 + 40));
  }

  else
  {
    id v9 = dispatch_group_create();
    *(void *)buf = 0LL;
    __int128 v34 = buf;
    uint64_t v35 = 0x2020000000LL;
    uint64_t v36 = 0LL;
    dispatch_group_enter(v9);
    uint64_t v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(unsigned __int8 *)(a1 + 56);
    uint64_t v12 = *(void *)(a1 + 48);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    v27[2] = sub_1000FF7E8;
    v27[3] = &unk_100244DF8;
    char v31 = v11;
    __int16 v32 = *(_WORD *)(a1 + 57);
    int v29 = buf;
    uint64_t v30 = v12;
    v27[4] = v10;
    uint64_t v13 = v9;
    __int128 v28 = v13;
    [v10 _updateAllMediaAPIPodcastsUserInitiated:v11 source:v12 completion:v27];
    dispatch_group_enter(v13);
    uint64_t v14 = *(void **)(a1 + 32);
    uint64_t v15 = *(unsigned __int8 *)(a1 + 56);
    uint64_t v16 = *(unsigned __int8 *)(a1 + 57);
    uint64_t v17 = *(void *)(a1 + 48);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_1000FF96C;
    v24[3] = &unk_100244DD0;
    __int128 v26 = buf;
    id v18 = v13;
    __int128 v25 = v18;
    [v14 _updateAllNonMediaAPIPodcastsUserInitiated:v15 forced:v16 source:v17 started:v24];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000FF988;
    block[3] = &unk_100244650;
    uint64_t v23 = buf;
    id v22 = *(id *)(a1 + 40);
    dispatch_group_notify(v18, &_dispatch_main_q, block);

    _Block_object_dispose(buf, 8);
  }
}

void sub_1000FF7D0(_Unwind_Exception *a1)
{
}

void sub_1000FF7E8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (v5)
  {
    uint64_t v7 = _MTLogCategoryFeedUpdate(v5);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v19 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Batch fetch failed. Updating all podcasts through legacy path. Error - %@",  buf,  0xCu);
    }

    id v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(unsigned __int8 *)(a1 + 64);
    uint64_t v11 = *(unsigned __int8 *)(a1 + 65);
    uint64_t v12 = *(unsigned __int8 *)(a1 + 66);
    uint64_t v13 = *(void *)(a1 + 56);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_1000FF950;
    void v16[3] = &unk_100244DD0;
    __int128 v15 = *(_OWORD *)(a1 + 40);
    id v14 = (id)v15;
    __int128 v17 = v15;
    objc_msgSend( v9,  "_unsafe_updateAllPodcastsUserInitiated:forced:useBackgroundFetch:source:startedUpdatesCallback:",  v10,  v11,  v12,  v13,  v16);
  }

  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) += a2;
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
}

void sub_1000FF950(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000FF96C(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1000FF988(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryFeedUpdate();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    int v6 = 134217984;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Initiated the update of %ld podcast feeds.",  (uint8_t *)&v6,  0xCu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000FFB90(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32))
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1000FFC0C;
    void v3[3] = &unk_1002429E8;
    id v4 = *(id *)(a1 + 32);
    uint64_t v5 = a2;
    dispatch_async(&_dispatch_main_q, v3);
  }

uint64_t sub_1000FFC0C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(a1 + 40));
}

void sub_1000FFC1C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) feedManager]);
  unsigned int v3 = [v2 abortUpdatesIfNetworkUnreachable:*(unsigned __int8 *)(a1 + 64)];

  if (v3)
  {
    uint64_t v5 = _MTLogCategoryFeedUpdate(v4);
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Skipping feed update due to network not being reachable",  buf,  2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    *(void *)buf = 0LL;
    int v29 = buf;
    uint64_t v30 = 0x2020000000LL;
    uint64_t v31 = 0LL;
    uint64_t v7 = dispatch_group_create();
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    id obj = *(id *)(a1 + 40);
    id v8 = [obj countByEnumeratingWithState:&v24 objects:v32 count:16];
    if (v8)
    {
      uint64_t v17 = *(void *)v25;
      do
      {
        id v9 = 0LL;
        do
        {
          if (*(void *)v25 != v17) {
            objc_enumerationMutation(obj);
          }
          uint64_t v10 = *(void *)(*((void *)&v24 + 1) + 8LL * (void)v9);
          dispatch_group_enter(v7);
          uint64_t v11 = *(void **)(a1 + 32);
          uint64_t v12 = *(unsigned __int8 *)(a1 + 64);
          uint64_t v13 = *(unsigned __int8 *)(a1 + 65);
          uint64_t v14 = *(unsigned __int8 *)(a1 + 66);
          uint64_t v15 = *(void *)(a1 + 56);
          v21[0] = _NSConcreteStackBlock;
          v21[1] = 3221225472LL;
          void v21[2] = sub_1000FFEE0;
          v21[3] = &unk_100244E70;
          void v21[4] = v11;
          uint64_t v23 = buf;
          id v22 = v7;
          [v11 _updatePodcastWithUUID:v10 userInitiated:v12 forced:v13 useBackgroundFetch:v14 source:v15 startedUpdateCallback:v21];

          id v9 = (char *)v9 + 1;
        }

        while (v8 != v9);
        id v8 = [obj countByEnumeratingWithState:&v24 objects:v32 count:16];
      }

      while (v8);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000FFFA4;
    block[3] = &unk_100244650;
    uint64_t v20 = buf;
    id v19 = *(id *)(a1 + 48);
    dispatch_group_notify(v7, &_dispatch_main_q, block);

    _Block_object_dispose(buf, 8);
  }

void sub_1000FFEB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

void sub_1000FFEE0(uint64_t a1, char a2)
{
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000FFF80;
  block[3] = &unk_100244E48;
  char v9 = a2;
  __int128 v6 = *(_OWORD *)(a1 + 40);
  id v5 = (id)v6;
  __int128 v8 = v6;
  dispatch_async(v4, block);
}

void sub_1000FFF80(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)) {
    ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1000FFFA4(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryFeedUpdate();
  unsigned int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    int v6 = 134217984;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Initiated the update of %ld podcast feeds.",  (uint8_t *)&v6,  0xCu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100100424( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
}

void sub_100100460(uint64_t a1, char a2)
{
  if (*(void *)(a1 + 32))
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1001004E0;
    void v3[3] = &unk_100240EE0;
    id v4 = *(id *)(a1 + 32);
    char v5 = a2;
    dispatch_async(&_dispatch_main_q, v3);
  }

uint64_t sub_1001004E0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 40));
}

void sub_1001004F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if (*(void *)(a1 + 40))
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    void v4[2] = sub_10010059C;
    void v4[3] = &unk_1002405F8;
    id v6 = *(id *)(a1 + 40);
    id v5 = v3;
    dispatch_async(&_dispatch_main_q, v4);
  }
}

uint64_t sub_10010059C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0LL, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1001005BC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = [*(id *)(a1 + 48) isPodcastUpdatable:v2 userInitiated:*(unsigned __int8 *)(a1 + 128) forced:*(unsigned __int8 *)(a1 + 129)];
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL)) {
    goto LABEL_14;
  }
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 bestFeedURLExcludingRedirectURL:*(_BYTE *)(a1 + 130) == 0]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 96) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = [v2 storeCollectionId];
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v2 feedURL]);
  if (v6) {
    uint64_t v7 = -[NSURL initWithString:](objc_alloc(&OBJC_CLASS___NSURL), "initWithString:", v6);
  }
  else {
    uint64_t v7 = 0LL;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 112) + 8LL) + 40LL), v7);
  if (v6) {

  }
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL)) {
    goto LABEL_14;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL))
  {
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(+[PodcastsApplicationStateMonitor shared](&OBJC_CLASS___PodcastsApplicationStateMonitor, "shared"));
    id v9 = [v8 isActive];

    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[MTFeedUpdateMetricsDataKey userInitiated]( &OBJC_CLASS___MTFeedUpdateMetricsDataKey,  "userInitiated"));
    v44[0] = v31;
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(a1 + 128)));
    v45[0] = v30;
    int v29 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsDataKey foreground](&OBJC_CLASS___MTFeedUpdateMetricsDataKey, "foreground"));
    v44[1] = v29;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v9));
    v45[1] = v10;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[MTFeedUpdateMetricsDataKey backgroundFetch]( &OBJC_CLASS___MTFeedUpdateMetricsDataKey,  "backgroundFetch"));
    v44[2] = v11;
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(a1 + 131)));
    v45[2] = v12;
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[MTFeedUpdateMetricsDataKey podcastStoreId]( &OBJC_CLASS___MTFeedUpdateMetricsDataKey,  "podcastStoreId"));
    v44[3] = v13;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL)));
    v45[3] = v14;
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsDataKey source](&OBJC_CLASS___MTFeedUpdateMetricsDataKey, "source"));
    v44[4] = v15;
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 120)));
    v45[4] = v16;
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v45,  v44,  5LL));

    id v18 = (void *)objc_claimAutoreleasedReturnValue( +[MTFeedUpdateMetricsAction podcastDataSource]( &OBJC_CLASS___MTFeedUpdateMetricsAction,  "podcastDataSource"));
    +[IMMetrics recordEvent:dataSource:data:](&OBJC_CLASS___IMMetrics, "recordEvent:dataSource:data:", v18, v2, v17);

    uint64_t v20 = _MTLogCategoryFeedUpdate(v19);
    char v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v43 = v17;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Updating podcast %@", buf, 0xCu);
    }

    if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL))
    {
LABEL_14:
      uint64_t v28 = objc_claimAutoreleasedReturnValue( +[FeedUpdaterObjcError notYetUpdatable]( &OBJC_CLASS____TtC18PodcastsFoundation20FeedUpdaterObjcError,  "notYetUpdatable"));
LABEL_15:
      __int128 v27 = (void *)v28;
      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
      goto LABEL_16;
    }
  }

  if (!*(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL))
  {
    uint64_t v28 = objc_claimAutoreleasedReturnValue( +[FeedUpdaterObjcError feedURLIsEmpty]( &OBJC_CLASS____TtC18PodcastsFoundation20FeedUpdaterObjcError,  "feedURLIsEmpty"));
    goto LABEL_15;
  }

  id v22 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) workQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100100A28;
  block[3] = &unk_100244EE8;
  id v23 = *(id *)(a1 + 72);
  uint64_t v24 = *(void *)(a1 + 96);
  id v34 = v23;
  uint64_t v36 = v24;
  int8x16_t v37 = vextq_s8(*(int8x16_t *)(a1 + 104), *(int8x16_t *)(a1 + 104), 8uLL);
  id v25 = *(id *)(a1 + 56);
  char v39 = *(_BYTE *)(a1 + 128);
  char v40 = *(_BYTE *)(a1 + 132);
  char v41 = *(_BYTE *)(a1 + 131);
  uint64_t v26 = *(void *)(a1 + 120);
  id v33 = v25;
  uint64_t v38 = v26;
  id v35 = *(id *)(a1 + 80);
  dispatch_async(v22, block);

  __int128 v27 = v34;
LABEL_16:
}

void sub_100100A28(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[MTFeedManager sharedInstance](&OBJC_CLASS___MTFeedManager, "sharedInstance"));
  LOBYTE(v2) = *(_BYTE *)(a1 + 90);
  [v3 updateFeedForFeedUrl:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) cloudSyncFeedUrl:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) podcastStoreId:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) triggerBy:*(void *)(a1 + 32) userInitiated:*(unsigned __int8 *)(a1 + 88) forceBootstrap:*(unsigned __int8 *)(a1 + 89) useBackgroundFetch:v2 source:*(void *)(a1 + 80) completion:*(void *)(a1 + 48)];
}

void sub_100100B28(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  byte_1002B6BB8 = [v1 BOOLForKey:@"MTFeatureDisabled_FeedUpdate"];
}

id sub_1001010D4(uint64_t a1)
{
  return [*(id *)(a1 + 32) layoutIfNeeded];
}

BOOL sub_1001028B4(id a1, MTStoreActionController *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 podcast]);

  if ([v3 supportsSubscription])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 feedURL]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 absoluteString]);

    if ([v5 length]) {
      unsigned int v6 = !+[MTSubscribeUtil isSubscribedToPodcastWithFeedUrl:]( &OBJC_CLASS___MTSubscribeUtil,  "isSubscribedToPodcastWithFeedUrl:",  v5);
    }
    else {
      LOBYTE(v6) = 0;
    }
  }

  else
  {
    LOBYTE(v6) = 0;
  }

  return v6;
}

void sub_10010295C(id a1, MTStoreActionController *a2, id a3)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject", a3));
  id v9 = (id)objc_claimAutoreleasedReturnValue([v3 podcast]);

  uint64_t v4 = objc_opt_new(&OBJC_CLASS___MTAddPodcastParams);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v9 feedURL]);
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 absoluteString]);

  -[MTAddPodcastParams setUrl:](v4, "setUrl:", v6);
  -[MTAddPodcastParams setLocation:](v4, "setLocation:", @"psnp");
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v9 identifiers]);
  -[MTAddPodcastParams setStoreCollectionId:](v4, "setStoreCollectionId:", [v7 storeAdamID]);

  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(+[MTSubscriptionManager sharedInstance](&OBJC_CLASS___MTSubscriptionManager, "sharedInstance"));
  [v8 subscribeToPodcastWithParams:v4];
}

BOOL sub_100102AE8(id a1, MTStoreActionController *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 podcast]);

  if ([v3 supportsSubscription])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 feedURL]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 absoluteString]);

    if ([v5 length]) {
      BOOL v6 = +[MTSubscribeUtil isSubscribedToPodcastWithFeedUrl:]( &OBJC_CLASS___MTSubscribeUtil,  "isSubscribedToPodcastWithFeedUrl:",  v5);
    }
    else {
      BOOL v6 = 0;
    }
  }

  else
  {
    BOOL v6 = 0;
  }

  return v6;
}

void sub_100102B90(id a1, MTStoreActionController *a2, id a3)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject", a3));
  id v10 = (id)objc_claimAutoreleasedReturnValue([v3 podcast]);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v10 feedURL]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 absoluteString]);

  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](&OBJC_CLASS___MTDB, "sharedInstance"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 mainOrPrivateContext]);
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcast podcastUuidForFeedUrlString:ctx:]( &OBJC_CLASS___MTPodcast,  "podcastUuidForFeedUrlString:ctx:",  v5,  v7));

  if ([v8 length])
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[PodcastsStateCoordinator shared](&OBJC_CLASS____TtC8Podcasts24PodcastsStateCoordinator, "shared"));
    [v9 disableSubscriptionOnPodcastUUID:v8 from:3];
  }
}

BOOL sub_100102D20(id a1, MTStoreActionController *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 descriptionText]);
  BOOL v4 = [v3 length] != 0;

  return v4;
}

void sub_100102D74(id a1, MTStoreActionController *a2, id a3)
{
  id v10 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](v10, "actionObject"));
  BOOL v4 = -[MTTVEpisodeDescriptionViewController initWithModelObject:]( objc_alloc(&OBJC_CLASS___MTTVEpisodeDescriptionViewController),  "initWithModelObject:",  v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController delegate](v10, "delegate"));
  char v6 = objc_opt_respondsToSelector(v5, "rootNavigationController");

  if ((v6 & 1) == 0
    || (uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController delegate](v10, "delegate")),
        __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 rootNavigationController]),
        v7,
        !v8))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[MTApplication_ATV appController](&OBJC_CLASS___MTApplication_ATV, "appController"));
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v9 rootViewController]);
  }

  [v8 pushViewController:v4 animated:1];
}

void sub_100103004(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playlistUuid]);
  id v5 = (id)objc_claimAutoreleasedReturnValue([v2 playlistForUuid:v3]);

  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v5 title]);
  [*(id *)(a1 + 40) setTitle:v4];
}

void sub_100103174(uint64_t a1, void *a2)
{
  id v4 = a2;
  if ([v4 length])
  {
    id v3 = -[MTPlaylistManifest initWithPlaylistUuid:initialEpisodeUuid:]( objc_alloc(&OBJC_CLASS___MTPlaylistManifest),  "initWithPlaylistUuid:initialEpisodeUuid:",  *(void *)(a1 + 32),  v4);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_100103400( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100103418(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100103428(uint64_t a1)
{
}

void sub_100103430(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  id v3 = *(void **)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playlistUuid]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 playlistForUuid:v4]);

  if (v5)
  {
    char v6 = (void *)objc_claimAutoreleasedReturnValue([v5 episodes]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 valueForKey:kEpisodeUuid]);
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 array]);
    id v9 = [v8 copy];
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
  }

  objc_autoreleasePoolPop(v2);
}

void sub_10010445C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) descriptionCache]);
  [v2 removeObjectForKey:*(void *)(a1 + 40)];
}

void sub_10010449C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) episodeCache]);
  [v2 removeObjectForKey:*(void *)(a1 + 40)];
}

void sub_1001045C4(id a1)
{
  v3[0] = kEpisodeUuid;
  v3[1] = kEpisodeDescription;
  v3[2] = kEpisodePubDate;
  void v3[3] = kEpisodeDuration;
  void v3[4] = kEpisodePlayhead;
  void v3[5] = kEpisodePlayState;
  v3[6] = kEpisodeVideo;
  v3[7] = kEpisodeAudio;
  v3[8] = kEpisodeExternalType;
  v3[9] = kEpisodeUti;
  v3[10] = kEpisodeByteSize;
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v3, 11LL));
  id v2 = (void *)qword_1002B6BD0;
  qword_1002B6BD0 = v1;
}

char *sub_100104FBC(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t result = (char *)[*(id *)(a1 + 40) count];
  if (result - 1 == a3)
  {
    if (!*(_BYTE *)(a1 + 72)) {
      return result;
    }
    char v6 = (void *)(a1 + 64);
  }

  else
  {
    char v6 = (void *)(a1 + 48);
    [*(id *)(a1 + 32) appendAttributedString:*(void *)(a1 + 48)];
    [*(id *)(a1 + 32) appendAttributedString:*(void *)(a1 + 56)];
  }

  return (char *)[*(id *)(a1 + 32) appendAttributedString:*v6];
}

LABEL_40:
  int8x16_t v37 = (void *)objc_claimAutoreleasedReturnValue([v11 valueForKey:kEpisodePubDate]);
  uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v37 verboseDisplayString]);

  if (v38) {
    -[NSMutableArray addObject:](v22, "addObject:", v38);
  }
  else {
    char v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithBytesize:]( NSString,  "stringWithBytesize:",  [v11 byteSize]));
  }
  char v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  if ([v11 isAudio])
  {
    char v41 = @"Audio";
  }

  else if ([v11 isVideo])
  {
    char v41 = @"Video";
  }

  else
  {
    char v41 = @"Document";
  }

  id v42 = (void *)objc_claimAutoreleasedReturnValue([v40 localizedStringForKey:v41 value:&stru_100248948 table:0]);

  id v69 = v39;
  if ([v39 length])
  {
    __int128 v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
    __int16 v44 = v22;
    __int16 v45 = v18;
    __int16 v46 = (char)v9;
    id v9 = (void *)objc_claimAutoreleasedReturnValue( [v43 localizedStringForKey:@"EPISODE_SIZE_ALT_FORMAT" value:&stru_100248948 table:0]);
    __int16 v47 = (id)objc_claimAutoreleasedReturnValue( +[NSString localizedStringWithFormat:]( &OBJC_CLASS___NSString,  "localizedStringWithFormat:",  v9,  v39,  v42));

    LOBYTE(v9) = v46;
    id v18 = v45;
    id v22 = v44;
  }

  else
  {
    __int16 v47 = v42;
  }

  if (v70 && ([v11 duration], v48 >= 1.0))
  {
    [v11 duration];
    __int16 v49 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithDuration:unitsStyle:includeTimeRemainingPhrase:]( &OBJC_CLASS___NSString,  "stringWithDuration:unitsStyle:includeTimeRemainingPhrase:",  3LL,  0LL));
    if ([v49 length])
    {
      id v71 = v18;
      __int16 v50 = (char)v9;
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
      int v51 = v22;
      __int16 v52 = (void *)objc_claimAutoreleasedReturnValue( [v9 localizedStringForKey:@"EPISODE_DURATION_SIZE_FORMAT" value:&stru_100248948 table:0]);
      int v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSString localizedStringWithFormat:]( &OBJC_CLASS___NSString,  "localizedStringWithFormat:",  v52,  v49,  v47));

      id v22 = v51;
      LOBYTE(v9) = v50;
      id v18 = v71;
      -[NSMutableArray addObject:](v51, "addObject:", v53);
    }

    else
    {
      -[NSMutableArray addObject:](v22, "addObject:", v47);
    }
  }

  else
  {
    -[NSMutableArray addObject:](v22, "addObject:", v47);
  }

  if (v73)
  {
    __int16 v54 = (void *)objc_claimAutoreleasedReturnValue([v11 playedText]);
    if ([v54 length]) {
      -[NSMutableArray addObject:](v22, "addObject:", v54);
    }
  }

  if ([v11 isDownloaded])
  {
    id v55 = (void *)objc_claimAutoreleasedReturnValue([v11 podcast]);
    uint64_t v56 = [v55 deletePlayedEpisodesResolvedValue];

    if (v56)
    {
      id v57 = (void *)objc_claimAutoreleasedReturnValue([v11 podcastUuid]);
      id v58 = (void *)objc_claimAutoreleasedReturnValue( +[MTEpisode predicateForRecentlyPlayedEpisodesToBeDeletedOnPodcastUuid:deletePlayedEpisodes:]( &OBJC_CLASS___MTEpisode,  "predicateForRecentlyPlayedEpisodesToBeDeletedOnPodcastUuid:deletePlayedEpisodes:",  v57,  1LL));

      if ([v58 evaluateWithObject:v11])
      {
        id v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
        uint64_t v72 = v18;
        id v60 = (char)v9;
        id v9 = (void *)objc_claimAutoreleasedReturnValue( [v59 localizedStringForKey:@"EPISODE_DETAIL_DOWNLOAD_WILL_BE_DELETED" value:&stru_100248948 table:0]);
        -[NSMutableArray addObject:](v22, "addObject:", v9);

        LOBYTE(v9) = v60;
        id v18 = v72;
      }
    }
  }

  v78[0] = _NSConcreteStackBlock;
  v78[1] = 3221225472LL;
  v78[2] = sub_100105954;
  v78[3] = &unk_1002450A0;
  uint64_t v82 = (char)v9;
  v79 = v18;
  id v80 = v75;
  v83 = v74 != 0LL;
  uint64_t v81 = v76;
  id v61 = v76;
  uint64_t v62 = v75;
  id v63 = v18;
  -[NSMutableArray enumerateObjectsUsingBlock:](v22, "enumerateObjectsUsingBlock:", v78);
  -[NSMutableAttributedString addAttribute:value:range:]( v61,  "addAttribute:value:range:",  NSFontAttributeName,  v77,  0LL,  -[NSMutableAttributedString length](v61, "length"));
  v64 = -[NSMutableAttributedString copy](v61, "copy");

  return v64;
}

  __break(1u);
  return result;
}

void sub_100105954(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!a3 && (*(_BYTE *)(a1 + 56) || [*(id *)(a1 + 32) length]))
  {
    uint64_t v7 = *(void *)(a1 + 40);
    NSAttributedStringKey v10 = NSParagraphStyleAttributeName;
    uint64_t v11 = v7;
    char v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v11,  &v10,  1LL));
  }

  else
  {
    char v6 = 0LL;
  }

  if (*(_BYTE *)(a1 + 56) || a3 || *(_BYTE *)(a1 + 57))
  {
    uint64_t v8 = objc_claimAutoreleasedReturnValue([@"\n" stringByAppendingString:v5]);

    id v5 = (id)v8;
  }

  id v9 = -[NSAttributedString initWithString:attributes:]( objc_alloc(&OBJC_CLASS___NSAttributedString),  "initWithString:attributes:",  v5,  v6);
  [*(id *)(a1 + 48) appendAttributedString:v9];
}

char *sub_100106154(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t result = (char *)[*(id *)(a1 + 40) count];
  if (result - 1 == a3)
  {
    if (!*(_BYTE *)(a1 + 72)) {
      return result;
    }
    char v6 = (void *)(a1 + 64);
  }

  else
  {
    char v6 = (void *)(a1 + 48);
    [*(id *)(a1 + 32) appendAttributedString:*(void *)(a1 + 48)];
    [*(id *)(a1 + 32) appendAttributedString:*(void *)(a1 + 56)];
  }

  return (char *)[*(id *)(a1 + 32) appendAttributedString:*v6];
}

LABEL_34:
            [a1 prunePersistentHistory];
LABEL_35:
            +[MTFeedManager resetCache](&OBJC_CLASS___MTFeedManager, "resetCache");
LABEL_36:
            char v40 = _MTLogCategoryDatabase([a1 touchLibraryMigrationVersion]);
            char v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              id v42 = +[MTDB libraryDataVersion](&OBJC_CLASS___MTDB, "libraryDataVersion");
              *(_DWORD *)__int16 v50 = 134218240;
              *(void *)&v50[4] = v7;
              int v51 = 2048;
              __int16 v52 = v42;
              _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "[Migration] (Data) Set migration version from %ld to %ld",  v50,  0x16u);
            }

            goto LABEL_39;
          }

          uint64_t v7 = 0LL;
          id v9 = 1;
          goto LABEL_37;
        }

        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }

      uint64_t v7 = (result - 48);
      id v18 = v3 - 1;
      if (v18)
      {
        uint64_t v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          uint64_t v20 = *v19 - 48;
          if (v20 > 9) {
            goto LABEL_34;
          }
          char v21 = 10 * v7;
          uint64_t v7 = v21 + v20;
          id v9 = 0;
          ++v19;
          if (!--v18) {
            goto LABEL_37;
          }
        }
      }
    }

  __break(1u);
}

LABEL_39:
  if (+[MTDB needsSerpentIdEpisodeMigration](&OBJC_CLASS___MTDB, "needsSerpentIdEpisodeMigration"))
  {
    [a1 migrateSerpentId];
    char v6 = 1;
  }

  if (+[MTDB needsCacheBustForFreeAndPaidUrlStorage]( &OBJC_CLASS___MTDB,  "needsCacheBustForFreeAndPaidUrlStorage"))
  {
    +[MTFeedManager resetCache](&OBJC_CLASS___MTFeedManager, "resetCache");
    char v6 = 1;
  }

  +[MTDB setStoreBothFreeAndPaidUrlsPreviousBootup](&OBJC_CLASS___MTDB, "setStoreBothFreeAndPaidUrlsPreviousBootup");
  if (+[MTDB needsMigrationToDeltaFeedUpdates](&OBJC_CLASS___MTDB, "needsMigrationToDeltaFeedUpdates"))
  {
    +[MTFeedManager migrateToDeltaFeedSystem](&OBJC_CLASS___MTFeedManager, "migrateToDeltaFeedSystem");
    +[MTDB setMigrationToDeltaFeedUpdatesComplete](&OBJC_CLASS___MTDB, "setMigrationToDeltaFeedUpdatesComplete");
  }

  [a1 updateGlobalDownloadPolicyIfNecessary];
  if ([a1 _needsImageStoreMigration])
  {
    [a1 _migrateToImageProvider];
  }

  else if ([a1 _hasMTImageStoreContent])
  {
    __int128 v43 = _MTLogCategoryArtworkDownload();
    __int16 v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int16 v50 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "ImageProvider migration is complete, but images remain in MTImageStore. Attempting deletion...",  v50,  2u);
    }

    [a1 _removeImageStoreContent];
  }

  +[MTDataMigrator migrate](&OBJC_CLASS___MTDataMigrator, "migrate");
  os_unfair_lock_unlock(&stru_1002B6BE4);
  __int16 v46 = _MTLogCategoryDatabase(v45);
  __int16 v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int16 v50 = 67109120;
    *(_DWORD *)&v50[4] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "[Migration] (Data) Finished. Did perform migration: %x",  v50,  8u);
  }

  return v6;
}

void sub_100107D64(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _MTLogCategoryArtworkDownload([*(id *)(a1 + 32) setBool:a2 forKey:kMTImageProviderMigrationHasOccurred]);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = v7;
  if ((_DWORD)a2)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      LOWORD(v9) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "ImageProvider Migration Complete",  (uint8_t *)&v9,  2u);
    }

    [*(id *)(a1 + 40) _removeImageStoreContent];
  }

  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v9 = 138412290;
      id v10 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to complete library artwork migration to image provider: %@",  (uint8_t *)&v9,  0xCu);
    }
  }
}

void sub_10010817C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = kMTPodcastPlaylistSettingsEntityName;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate truePredicate](&OBJC_CLASS___NSPredicate, "truePredicate"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v1 objectsInEntity:v2 predicate:v3 sortDescriptors:0]);

  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v5 = v4;
  id v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v12;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)i);
        objc_msgSend(v10, "latestEpisodeDate", (void)v11);
        objc_msgSend(v10, "setLatestEpisodeAvailabilityDate:");
        [v10 oldestEpisodeDate];
        objc_msgSend(v10, "setEarliestEpisodeAvailabilityDate:");
      }

      id v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v7);
  }
}

void sub_100108354(uint64_t a1)
{
  v13[0] = @"PlaylistOnTheGo";
  v13[1] = @"PlaylistMostRecent";
  _DWORD v13[2] = @"PlaylistAllUnplayed";
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v13, 3LL));
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "playlistForUuid:",  *(void *)(*((void *)&v8 + 1) + 8 * (void)v6),  (void)v8));
        [v7 setIsUngroupedList:1];

        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_100108578(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playlistForUuid:@"PlaylistOnTheGo"]);
  if ((os_feature_enabled_bluemoon(v2) & 1) == 0)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](&OBJC_CLASS___MTPlayerController, "defaultInstance"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 upNextController]);
    [v4 beginUpdates];

    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "episodes", 0));
    id v6 = [v5 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v24;
      do
      {
        __int128 v9 = 0LL;
        do
        {
          if (*(void *)v24 != v8) {
            objc_enumerationMutation(v5);
          }
          __int128 v10 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)v9);
          __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](&OBJC_CLASS___MTPlayerController, "defaultInstance"));
          __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 upNextController]);
          __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v10 uuid]);
          [v12 addEpisodeUuidToUpNext:v13];

          __int128 v9 = (char *)v9 + 1;
        }

        while (v7 != v9);
        id v7 = [v5 countByEnumeratingWithState:&v23 objects:v27 count:16];
      }

      while (v7);
    }

    __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](&OBJC_CLASS___MTPlayerController, "defaultInstance"));
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 upNextController]);
    [v15 endUpdates];
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[MTLibrary sharedInstance](&OBJC_CLASS___MTLibrary, "sharedInstance"));
  [v16 deletePlaylist:v2];

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 localizedStringForKey:@"All Unplayed" value:&stru_100248948 table:0]);

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playlistForUuid:@"PlaylistAllUnplayed"]);
  objc_msgSend( *(id *)(a1 + 40),  "deleteOrUpdatePlaylist:ifIsDefault:",  v19,  objc_msgSend( *(id *)(a1 + 40),  "isDefaultSettingsForPlaylist:title:episodesToShow:showPlayedEpisodes:includeAllPodcasts:",  v19,  v18,  0,  0,  1));
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  char v21 = (void *)objc_claimAutoreleasedReturnValue( [v20 localizedStringForKey:@"MOST_RECENT_PLURAL" value:&stru_100248948 table:0]);

  id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playlistForUuid:@"PlaylistMostRecent"]);
  objc_msgSend( *(id *)(a1 + 40),  "deleteOrUpdatePlaylist:ifIsDefault:",  v22,  objc_msgSend( *(id *)(a1 + 40),  "isDefaultSettingsForPlaylist:title:episodesToShow:showPlayedEpisodes:includeAllPodcasts:",  v22,  v21,  1,  1,  1));
}

void sub_100108F14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100108F2C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[MTEpisode predicateForPodcastIsSubscribed:]( &OBJC_CLASS___MTEpisode,  "predicateForPodcastIsSubscribed:",  0LL));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForBookmarkedEpisodes](&OBJC_CLASS___MTEpisode, "predicateForBookmarkedEpisodes"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[MTEpisode predicateForDownloaded:excludeHidden:]( &OBJC_CLASS___MTEpisode,  "predicateForDownloaded:excludeHidden:",  1LL,  0LL));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 OR:v4]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v2 AND:v5]);

  id v7 = objc_alloc(&OBJC_CLASS___NSFetchRequest);
  uint64_t v8 = -[NSFetchRequest initWithEntityName:](v7, "initWithEntityName:", kMTEpisodeEntityName);
  -[NSFetchRequest setPredicate:](v8, "setPredicate:", v6);
  id v9 = [*(id *)(a1 + 32) countForFetchRequest:v8 error:0];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = (uint64_t)v9 > 0;
  uint64_t v10 = _MTLogCategoryDatabase(v9);
  __int128 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    int v13 = 134218240;
    id v14 = v9;
    __int16 v15 = 1024;
    int v16 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[Migration] (Data) migrateShowListToggle: There are %li library episodes, setting flag to %i",  (uint8_t *)&v13,  0x12u);
  }
}

void sub_1001091DC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForNotHiddenPodcasts](&OBJC_CLASS___MTPodcast, "predicateForNotHiddenPodcasts"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue( [v2 objectsInEntity:kMTPodcastEntityName predicate:v3 sortDescriptors:0 returnsObjectsAsFaults:0]);

  uint64_t v6 = _MTLogCategoryDatabase(v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[Migration] (Data) Running migration on podcasts.",  buf,  2u);
  }

  __int128 v62 = 0u;
  __int128 v63 = 0u;
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  id obj = v4;
  id v8 = [obj countByEnumeratingWithState:&v60 objects:v70 count:16];
  id v51 = v8;
  if (v8)
  {
    uint64_t v50 = *(void *)v61;
    uint64_t v47 = kMTEpisodeEntityName;
    uint64_t v48 = kEpisodePubDate;
    uint64_t v54 = kEpisodePodcast;
    do
    {
      uint64_t v9 = 0LL;
      do
      {
        if (*(void *)v61 != v50)
        {
          uint64_t v10 = v9;
          objc_enumerationMutation(obj);
          uint64_t v9 = v10;
        }

        uint64_t v52 = v9;
        id v55 = *(void **)(*((void *)&v60 + 1) + 8 * v9);
        uint64_t v11 = _MTLogCategoryDatabase(v8);
        int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = (void *)objc_claimAutoreleasedReturnValue([v55 uuid]);
          uint64_t v14 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138543618;
          id v67 = v13;
          __int16 v68 = 2048;
          uint64_t v69 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[Migration] (Data) Running migration on podcast with uuid %{public}@ and version %ld.",  buf,  0x16u);
        }

        id v15 = [*(id *)(a1 + 48) runMigrationForPodcast:v55 version:*(void *)(a1 + 40)];
        if ((_DWORD)v15)
        {
          uint64_t v16 = _MTLogCategoryDatabase(v15);
          uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            id v18 = (void *)objc_claimAutoreleasedReturnValue([v55 uuid]);
            *(_DWORD *)buf = 138543362;
            id v67 = v18;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "[Migration] (Data) Skipping migration for podcast with uuid %{public}@ because it was deleted.",  buf,  0xCu);
          }
        }

        else if (*(uint64_t *)(a1 + 40) < 32)
        {
          char v21 = *(void **)(a1 + 32);
          id v22 = (void *)objc_claimAutoreleasedReturnValue([v55 uuid]);
          __int128 v23 = (void *)objc_claimAutoreleasedReturnValue( +[MTEpisode predicateForAllEpisodesOnPodcastUuid:]( &OBJC_CLASS___MTEpisode,  "predicateForAllEpisodesOnPodcastUuid:",  v22));
          __int128 v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  v48,  0LL));
          id v65 = v24;
          __int128 v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v65,  1LL));
          __int128 v26 = (void *)objc_claimAutoreleasedReturnValue( [v21 objectsInEntity:v47 predicate:v23 sortDescriptors:v25 returnsObjectsAsFaults:0]);

          uint64_t v28 = _MTLogCategoryDatabase(v27);
          int v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v55 uuid]);
            *(_DWORD *)buf = 138543362;
            id v67 = v30;
            _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "[Migration] (Data) Running migration on episodes for podcast with uuid: %{public}@",  buf,  0xCu);
          }

          __int128 v58 = 0u;
          __int128 v59 = 0u;
          __int128 v56 = 0u;
          __int128 v57 = 0u;
          uint64_t v17 = v26;
          id v31 = -[os_log_s countByEnumeratingWithState:objects:count:]( v17,  "countByEnumeratingWithState:objects:count:",  &v56,  v64,  16LL);
          if (v31)
          {
            uint64_t v53 = 0LL;
            uint64_t v32 = *(void *)v57;
            do
            {
              for (i = 0LL; i != v31; i = (char *)i + 1)
              {
                if (*(void *)v57 != v32) {
                  objc_enumerationMutation(v17);
                }
                id v34 = *(void **)(*((void *)&v56 + 1) + 8LL * (void)i);
                id v35 = (void *)objc_claimAutoreleasedReturnValue([v34 podcastUuid]);
                uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v34 podcast]);
                int8x16_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 uuid]);
                unsigned __int8 v38 = [v35 isEqualToString:v37];

                if ((v38 & 1) == 0)
                {
                  [v34 setPrimitiveValue:0 forKey:v54];
                  [v34 setPodcast:v55];
                }

                char v39 = objc_autoreleasePoolPush();
                switch(*(void *)(a1 + 40))
                {
                  case 0LL:
                    [*(id *)(a1 + 48) episodeMigrationForVersion0to1:v34];
                    goto LABEL_27;
                  case 1LL:
                  case 2LL:
LABEL_27:
                    [v34 setEpisodeLevel:v53++];
                    goto LABEL_28;
                  case 3LL:
                  case 4LL:
                  case 5LL:
                  case 6LL:
LABEL_28:
                    [*(id *)(a1 + 48) episodeMigrationForVersion6to7:v34];
                    goto LABEL_29;
                  case 7LL:
                  case 8LL:
                  case 9LL:
                  case 0xALL:
                  case 0xBLL:
                  case 0xCLL:
                  case 0xDLL:
LABEL_29:
                    [*(id *)(a1 + 48) episodeMigrationForVersion13to14:v34];
                    goto LABEL_30;
                  case 0xELL:
                  case 0xFLL:
                  case 0x10LL:
LABEL_30:
                    [*(id *)(a1 + 48) episodeMigrationForVersion16to17:v34];
                    goto LABEL_31;
                  case 0x11LL:
LABEL_31:
                    [*(id *)(a1 + 48) episodeMigrationForVersion17to18:v34];
                    goto LABEL_32;
                  case 0x12LL:
                  case 0x13LL:
                  case 0x14LL:
                  case 0x15LL:
LABEL_32:
                    [*(id *)(a1 + 48) episodeMigrationForVersion21to22:v34];
                    goto LABEL_33;
                  case 0x16LL:
                  case 0x17LL:
LABEL_33:
                    [*(id *)(a1 + 48) episodeMigrationForVersion23to24:v34];
                    goto LABEL_34;
                  case 0x18LL:
LABEL_34:
                    [*(id *)(a1 + 48) episodeMigrationForVersion24to25:v34];
                    goto LABEL_35;
                  case 0x19LL:
                  case 0x1ALL:
                  case 0x1BLL:
                  case 0x1CLL:
                  case 0x1DLL:
LABEL_35:
                    [*(id *)(a1 + 48) episodeMigrationForVersion29to30:v34];
                    break;
                  default:
                    break;
                }

                objc_autoreleasePoolPop(v39);
              }

              id v31 = -[os_log_s countByEnumeratingWithState:objects:count:]( v17,  "countByEnumeratingWithState:objects:count:",  &v56,  v64,  16LL);
            }

            while (v31);
          }

          uint64_t v41 = _MTLogCategoryDatabase(v40);
          id v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            __int128 v43 = (void *)objc_claimAutoreleasedReturnValue([v55 uuid]);
            *(_DWORD *)buf = 138543362;
            id v67 = v43;
            _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "[Migration] (Data) Finished migration for episodes for podcast with uuid: %{public}@",  buf,  0xCu);
          }
        }

        else
        {
          uint64_t v19 = _MTLogCategoryDatabase(v15);
          uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v55 uuid]);
            *(_DWORD *)buf = 138543362;
            id v67 = v20;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "[Migration] (Data) Version is >= 32, skipping episodes migration for podcast with uuid %{public}@",  buf,  0xCu);
          }
        }

        uint64_t v9 = v52 + 1;
      }

      while ((id)(v52 + 1) != v51);
      id v8 = [obj countByEnumeratingWithState:&v60 objects:v70 count:16];
      id v51 = v8;
    }

    while (v8);
  }

  uint64_t v45 = _MTLogCategoryDatabase(v44);
  __int16 v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "[Migration] (Data) Finished migration for podcasts.",  buf,  2u);
  }
}

void sub_100109908(_Unwind_Exception *a1)
{
}

void sub_100109B28(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) executeFetchRequest:*(void *)(a1 + 40)]);
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v3 = v2;
  id v4 = (char *)[v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = 0LL;
    uint64_t v7 = *(void *)v14;
    do
    {
      unint64_t v8 = 0LL;
      int v12 = v6;
      uint64_t v9 = v6 + 1;
      do
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v3);
        }
        uint64_t v10 = *(void **)(*((void *)&v13 + 1) + 8 * v8);
        uint64_t v11 = objc_autoreleasePoolPush();
        objc_msgSend( v10,  "setStoreTrackId:",  +[MTStoreIdentifier serpentIdFromAdamId:]( MTStoreIdentifier,  "serpentIdFromAdamId:",  objc_msgSend(v10, "storeTrackId")));
        objc_autoreleasePoolPop(v11);
        ++v8;
      }

      while (v5 != (char *)v8);
      uint64_t v6 = &v5[(void)v12];
      uint64_t v5 = (char *)[v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v5);
  }
}

void sub_10010A524(id *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] executeFetchRequest:a1[5]]);
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = 0LL;
    uint64_t v6 = *(void *)v10;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v9 + 1) + 8 * (void)v7) resolveAvailabilityDate];
        uint64_t v7 = (char *)v7 + 1;
      }

      while (v4 != v7);
      v5 += (uint64_t)v4;
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v4);
  }

  unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1[6] newestEpisodeByAvailabiltyTime]);
  [v8 firstTimeAvailable];
  objc_msgSend(a1[6], "setLatestEpisodeAvailabilityTime:");
}

void sub_10010A708(uint64_t a1)
{
  id v3 = objc_alloc_init(&OBJC_CLASS___MTEpisodeLevelCalculator);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
  [v3 unsafeUpdateEpisodeShowTypeSpecificLevelsWithShowUUID:v2 on:*(void *)(a1 + 40)];
}

id *sub_10010B654(id *result)
{
  uint64_t v1 = result;
  switch((unint64_t)result[5])
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x20uLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
      [result[6] allEpisodesMigrationForVersion40to41In:result[4]];
      goto LABEL_3;
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
LABEL_3:
      [v1[6] allEpisodesMigrationForVersion43to44In:v1[4]];
      goto LABEL_4;
    case 0x2CuLL:
    case 0x2DuLL:
LABEL_4:
      [v1[6] allEpisodesMigrationForVersion45to46In:v1[4]];
      goto LABEL_5;
    case 0x2EuLL:
LABEL_5:
      [v1[6] allEpisodesMigrationForVersion46to47In:v1[4]];
      goto LABEL_6;
    case 0x2FuLL:
LABEL_6:
      [v1[6] allEpisodesMigrationForVersion47to48In:v1[4]];
      goto LABEL_7;
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
LABEL_7:
      [v1[6] allEpisodesMigrationForVersion51to52In:v1[4]];
      goto LABEL_8;
    case 0x35uLL:
    case 0x36uLL:
LABEL_8:
      [v1[6] allEpisodesMigrationForVersion53to54In:v1[4]];
      goto LABEL_9;
    case 0x37uLL:
LABEL_9:
      [v1[6] allEpisodesMigrationForVersion54to55In:v1[4]];
      goto LABEL_10;
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
LABEL_10:
      [v1[6] allEpisodesMigrationForVersion59to60In:v1[4]];
      goto LABEL_11;
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
    case 0x40uLL:
    case 0x41uLL:
LABEL_11:
      [v1[6] allEpisodesMigrationForVersion65to66In:v1[4]];
      goto LABEL_12;
    case 0x42uLL:
    case 0x43uLL:
    case 0x44uLL:
LABEL_12:
      uint64_t result = (id *)_[v1[6] allEpisodesMigrationForVersion68to69In:v1[4]];
      break;
    default:
      return result;
  }

  return result;
}

void sub_10010BA54(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v9;
    do
    {
      for (i = 0LL; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "podcast", (void)v8));
        [v7 modifiedDate];
        +[MTRecencyUtil scoreFromModifiedDate:](&OBJC_CLASS___MTRecencyUtil, "scoreFromModifiedDate:");
        objc_msgSend(v6, "setModifiedDateScore:");
      }

      id v3 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v3);
  }
}

void sub_10010C968(uint64_t a1)
{
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0LL;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        objc_msgSend(*(id *)(*((void *)&v6 + 1) + 8 * (void)v5), "setDownloadBehavior:", 4, (void)v6);
        uint64_t v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }

    while (v3);
  }
}

void sub_10010D48C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10010D4A4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10010D4B4(uint64_t a1)
{
}

void sub_10010D4BC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  kEpisodeLastDatePlayed,  0LL));
  v20[0] = v2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  kEpisodePersistentID,  0LL));
  v20[1] = v3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  kEpisodeAssetURL,  0LL));
  v20[2] = v4;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v20, 3LL));

  uint64_t v6 = kMTEpisodeEntityName;
  __int128 v7 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForAudio:](&OBJC_CLASS___MTEpisode, "predicateForAudio:", 0LL));
  uint64_t v19 = kEpisodePodcastUuid;
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v19, 1LL));
  v18[0] = kEpisodeGuid;
  v18[1] = kEpisodeEnclosureUrl;
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v18, 2LL));
  uint64_t v10 = kEpisodeUuid;
  uint64_t v17 = kEpisodeUuid;
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v17, 1LL));
  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue( +[PFCoreDataUtils findDuplicateItemsWithEntity:itemsToLookAtFilter:keysThatMustMatchToBeConsideredADuplicate:keysThatShouldNotBeDuplicated:keyValuesOfDuplicatedItemsToReturn:sortDescriptors:]( &OBJC_CLASS____TtC18PodcastsFoundation15PFCoreDataUtils,  "findDuplicateItemsWithEntity:itemsToLookAtFilter:keysThatMustMatchToBeConsideredADuplicate:keysThatS houldNotBeDuplicated:keyValuesOfDuplicatedItemsToReturn:sortDescriptors:",  v6,  v7,  v8,  v9,  v11,  v5));

  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v10]);
  uint64_t v14 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v13));
  uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8LL);
  __int128 v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v14;
}

void sub_10010D890(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) executeFetchRequest:*(void *)(a1 + 40)]);
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  id obj = v2;
  id v40 = [v2 countByEnumeratingWithState:&v43 objects:v51 count:16];
  if (v40)
  {
    uint64_t v39 = *(void *)v44;
    do
    {
      for (i = 0LL; i != v40; i = (char *)i + 1)
      {
        if (*(void *)v44 != v39) {
          objc_enumerationMutation(obj);
        }
        uint64_t v4 = *(void **)(*((void *)&v43 + 1) + 8LL * (void)i);
        uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 assetURL]);
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v5));
        __int128 v7 = (void *)objc_claimAutoreleasedReturnValue([v6 path]);

        __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(+[MTConstants managedAssetsDirectoryURL](&OBJC_CLASS___MTConstants, "managedAssetsDirectoryURL"));
        __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v4 uuid]);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 URLByAppendingPathComponent:v9 isDirectory:0]);
        __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v7 pathExtension]);
        __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v10 URLByAppendingPathExtension:v11]);
        __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 path]);

        id v14 = [v7 isEqualToString:v13];
        if ((_DWORD)v14)
        {
          uint64_t v15 = _MTLogCategoryDatabase(v14);
          __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 uuid]);
            *(_DWORD *)buf = 138543618;
            uint64_t v48 = v7;
            __int16 v49 = 2114;
            uint64_t v50 = v17;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "[Migration] (Data) (Watch) No need to remove existing file with same old and new path %{public}@ for episode %{public}@",  buf,  0x16u);
          }
        }

        else
        {
          id v18 = [*(id *)(a1 + 48) fileExistsAtPath:v13];
          if ((_DWORD)v18)
          {
            uint64_t v19 = _MTLogCategoryDatabase(v18);
            uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              char v21 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 uuid]);
              *(_DWORD *)buf = 138543618;
              uint64_t v48 = v13;
              __int16 v49 = 2114;
              uint64_t v50 = v21;
              _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "[Migration] (Data) (Watch) Will remove existing file at path %{public}@ for episode %{public}@",  buf,  0x16u);
            }

            id v22 = *(void **)(a1 + 48);
            id v42 = 0LL;
            unsigned __int8 v23 = [v22 removeItemAtPath:v13 error:&v42];
            __int128 v24 = (os_log_s *)v42;
            __int128 v25 = v24;
            if ((v23 & 1) == 0)
            {
              uint64_t v26 = _MTLogCategoryDatabase(v24);
              uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
              if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
              {
                uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v4 uuid]);
                *(_DWORD *)buf = 138543618;
                uint64_t v48 = v28;
                __int16 v49 = 2112;
                uint64_t v50 = v25;
                _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "[Migration] (Data) (Watch) Failed to remove existing file for episode %{public}@ - %@",  buf,  0x16u);
              }
            }
          }

          int v29 = *(void **)(a1 + 48);
          id v41 = 0LL;
          unsigned __int8 v30 = [v29 moveItemAtPath:v7 toPath:v13 error:&v41];
          id v31 = (os_log_s *)v41;
          __int128 v16 = v31;
          if ((v30 & 1) == 0)
          {
            uint64_t v32 = _MTLogCategoryDatabase(v31);
            id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
            {
              id v34 = (void *)objc_claimAutoreleasedReturnValue([v4 uuid]);
              *(_DWORD *)buf = 138543618;
              uint64_t v48 = v34;
              __int16 v49 = 2112;
              uint64_t v50 = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "[Migration] (Data) (Watch) Failed to move asset for episode %{public}@ - %@",  buf,  0x16u);
            }

            __int128 v13 = 0LL;
          }

          uint64_t v35 = _MTLogCategoryDatabase(v31);
          uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            int8x16_t v37 = (void *)objc_claimAutoreleasedReturnValue([v4 uuid]);
            *(_DWORD *)buf = 138543618;
            uint64_t v48 = v37;
            __int16 v49 = 2114;
            uint64_t v50 = (os_log_s *)v13;
            _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "[Migration] (Data) (Watch) Updated asset url for episode %{public}@ to %{public}@",  buf,  0x16u);
          }

          [v4 setAssetURL:v13];
        }
      }

      id v40 = [obj countByEnumeratingWithState:&v43 objects:v51 count:16];
    }

    while (v40);
  }
}

uint64_t sub_10010DEDC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[MPMediaQuery mt_allItemsForPodcastsApp](&OBJC_CLASS___MPMediaQuery, "mt_allItemsForPodcastsApp"));
  [*(id *)(a1 + 32) deleteItems:v2];

  return 1LL;
}

void sub_10010DF20(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  id v12 = 0LL;
  id v3 = [v2 executeRequest:v1 error:&v12];
  id v4 = v12;
  uint64_t v5 = _MTLogCategoryDatabase(v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  __int128 v7 = v6;
  if (v4)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v14 = v4;
      __int128 v8 = "[Migration] (Data) (Watch) Batch update for medialibrary episode removal failed %@";
      __int128 v9 = v7;
      os_log_type_t v10 = OS_LOG_TYPE_ERROR;
      uint32_t v11 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, buf, v11);
    }
  }

  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    __int128 v8 = "[Migration] (Data) (Watch) Set all persistent IDs to 0";
    __int128 v9 = v7;
    os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
    uint32_t v11 = 2;
    goto LABEL_6;
  }
}

void sub_10010E190(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v15 = 0LL;
  id v4 = [v2 executeRequest:v3 error:&v15];
  id v5 = v15;
  uint64_t v6 = _MTLogCategoryDatabase(v5);
  __int128 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  __int128 v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v9 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)buf = 67109378;
      int v17 = v9;
      __int16 v18 = 2112;
      id v19 = v5;
      os_log_type_t v10 = "[Migration] (Data) Failed to prune persistent history older than %d days old - %@";
      uint32_t v11 = v8;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
      uint32_t v13 = 18;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v11, v12, v10, buf, v13);
    }
  }

  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67109120;
    int v17 = v14;
    os_log_type_t v10 = "[Migration] (Data) Did prune persistent history older than %d days old";
    uint32_t v11 = v8;
    os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
    uint32_t v13 = 8;
    goto LABEL_6;
  }
}

void sub_10010E3B4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectsInEntity:kMTPlaylistEntityName predicate:0 sortDescriptors:0]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10010E44C;
  void v3[3] = &unk_100245180;
  id v4 = *(id *)(a1 + 32);
  [v2 enumerateObjectsUsingBlock:v3];
}

void sub_10010E44C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([v3 isItunesPlaylist] & 1) == 0
    && ([v3 isItunesSmartPlaylist] & 1) == 0)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uuid]);
    if ([v4 isEqualToString:kPlaylistITunesPlaylistUuid])
    {
LABEL_13:

      goto LABEL_14;
    }

    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 uuid]);
    unsigned __int8 v6 = [v5 isEqualToString:@"PlaylistOnTheGo"];

    if ((v6 & 1) == 0)
    {
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      __int128 v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "settings", 0));
      id v8 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = *(void *)v14;
        do
        {
          uint32_t v11 = 0LL;
          do
          {
            if (*(void *)v14 != v10) {
              objc_enumerationMutation(v7);
            }
            [*(id *)(*((void *)&v13 + 1) + 8 * (void)v11) setNeedsUpdate:1];
            uint32_t v11 = (char *)v11 + 1;
          }

          while (v9 != v11);
          id v9 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
        }

        while (v9);
      }

      id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTBaseProcessor sharedInstance](&OBJC_CLASS___MTPlaylistQueryManager, "sharedInstance"));
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue([v3 uuid]);
      [v4 updatePlaylistWithUuid:v12 inContext:*(void *)(a1 + 32)];

      goto LABEL_13;
    }
  }

void sub_10010F790(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v16 = 0LL;
  id v15 = 0LL;
  [v3 getResourceValue:&v16 forKey:NSURLContentTypeKey error:&v15];
  id v4 = v16;
  id v5 = v15;
  unsigned __int8 v6 = v5;
  if (v4) {
    BOOL v7 = v5 == 0LL;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7 && ([v4 conformsToType:UTTypeImage] & 1) != 0)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[MTImageStoreConstants fileExtension](&OBJC_CLASS___MTImageStoreConstants, "fileExtension"));
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 URLByDeletingPathExtension]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 URLByAppendingPathExtension:v8]);

    if ((![v4 isEqual:*(void *)(a1 + 32)]
       || ([v3 isEqual:v10] & 1) == 0)
      && (uint32_t v11 = *(void **)(a1 + 40),
          os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]),
          LODWORD(v11) = [v11 copyImageFromSourceUrl:v3 sourceFileType:v12 to:v10 discardTransparency:0 enforceSquare:0 maxD imensionInPixels:1.79769313e308],  v12,  !(_DWORD)v11)
      || ([v3 isEqual:v10] & 1) == 0)
    {
      __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      [v13 removeItemAtURL:v3 error:0];
    }
  }

  else
  {
    __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(+[IMLogger sharedLogger](&OBJC_CLASS___IMLogger, "sharedLogger"));
    [v14 logFile:"/Library/Caches/com.apple.xbs/Sources/Marmoset/Source/Library/Migration/MTLibraryMigrator.m", 2857, @"Cannot convert the file of type %@ at URL %@. Ignoring. Error %@", v4, v3, v6 lineNumber format];

    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    [v8 removeItemAtURL:v3 error:0];
  }
}

void sub_10010FD60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10010FD78(uint64_t a1)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _fetchRequestForMostRecentlyPlayedEpisode]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) executeFetchRequest:v7]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 firstObject]);

  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 objectForKey:kPodcastLastDatePlayed]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  unsigned __int8 v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_1001106FC(id a1)
{
  v3[0] = kPodcastFeedUrl;
  v3[1] = kPodcastSubscribed;
  v3[2] = kPodcastTitle;
  void v3[3] = kPodcastUpdatedDate;
  void v3[4] = kPodcastAddedDate;
  void v3[5] = kPodcastStoreCollectionId;
  v3[6] = kPodcastPlaybackNewestToOldest;
  v3[7] = kPodcastDarkCount;
  v3[8] = kPodcastLastTouchDate;
  v3[9] = kPodcastUuid;
  v3[10] = kPodcastSortAscending;
  void v3[11] = kPodcastShowTypeSetting;
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v3, 12LL));
  id v2 = (void *)qword_1002B6BF0;
  qword_1002B6BF0 = v1;
}

void sub_1001118A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

id sub_1001118D0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  [*(id *)(a1 + 32) setAddedSubscriptions:v2];

  [*(id *)(a1 + 32) markAllShowsAsSynced];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) storageProvider]);
  [v3 immediatelyDeleteAllHiddenPodcasts];

  id result = [*(id *)(a1 + 32) mergeLocalAndRemoteData:*(void *)(a1 + 40) forKey:*(void *)(a1 + 48) version:*(void *)(a1 + 56) mismatch:*(unsigned __int8 *)(a1 + 72)];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

void sub_1001120E0(_Unwind_Exception *a1)
{
}

void sub_100112110(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastCacheInContext:*(void *)(a1 + 40)]);
  uint64_t v3 = _MTLogCategoryCloudSync( [*(id *)(a1 + 32) importRemotePodcastDicts:*(void *)(a1 + 48) inContext:*(void *)(a1 + 40) visitingPodcastsInCache:v2 updatingPodcastsToAdd:*(void *)(a1 + 56) updatingPodcastsToUnsubscrib e:*(void *)(a1 + 64) mismatch:*(unsigned __int8 *)(a1 + 88) version:*(void *)(a1 + 72)]);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logPrefix]);
    unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) addedSubscriptions]);
    *(_DWORD *)buf = 138543619;
    id v9 = v5;
    __int16 v10 = 2113;
    uint32_t v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Podcasts added since last sync: %{private}@",  buf,  0x16u);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) unvisitedPodcastsToUnsubscribeIn:v2 mismatch:*(void *)(*(void *)(a1 + 80) + 8) + 24 version:*(void *)(a1 + 72)]);
  [*(id *)(a1 + 64) unionSet:v7];
}

BOOL sub_10011239C(id a1, NSString *a2, id a3)
{
  id v4 = a3;
  BOOL v5 = !-[NSString isEqualToString:](a2, "isEqualToString:", kPodcastStoreCollectionId)
    || [v4 integerValue];

  return v5;
}

void sub_100112F08(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForUuid:v3]);
  uint64_t v5 = _MTLogCategoryCloudSync(v4);
  unsigned __int8 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logPrefix]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 title]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v4 feedURL]);
    id v10 = [v4 storeCollectionId];
    uint32_t v11 = (void *)objc_claimAutoreleasedReturnValue([v4 uuid]);
    *(_DWORD *)buf = 138544387;
    __int128 v46 = v7;
    __int16 v47 = 2113;
    uint64_t v48 = v8;
    __int16 v49 = 2113;
    uint64_t v50 = v9;
    __int16 v51 = 2049;
    id v52 = v10;
    __int16 v53 = 2114;
    uint64_t v54 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Unvisited local podcast: %{private}@, %{private}@, %{private}lld, %{public}@",  buf,  0x34u);
  }

  os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) addedSubscriptions]);
  unsigned __int8 v13 = [v12 containsObject:v3];

  if ((v13 & 1) != 0)
  {
    uint64_t v15 = _MTLogCategoryCloudSync(v14);
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logPrefix]);
      __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v4 title]);
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v4 feedURL]);
      id v20 = [v4 storeCollectionId];
      char v21 = (void *)objc_claimAutoreleasedReturnValue([v4 uuid]);
      *(_DWORD *)buf = 138544387;
      __int128 v46 = v17;
      __int16 v47 = 2113;
      uint64_t v48 = v18;
      __int16 v49 = 2113;
      uint64_t v50 = v19;
      __int16 v51 = 2049;
      id v52 = v20;
      __int16 v53 = 2114;
      uint64_t v54 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Marking mismatch = YES. Reason: unvisited local podcast is marked as dirty (not synced yet), i.e. it' s new and it's not in cloud yet, we must push it in a subsequent SET transaction: %{private}@, %{private}@, %{private}lld, %{public}@",  buf,  0x34u);
    }

    **(_BYTE **)(a1 + 64) = 1;
  }

  else
  {
    id v22 = [v4 subscribed];
    if ((_DWORD)v22)
    {
      unsigned __int8 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) config]);
      unsigned int v24 = [v23 supportsMetrics];

      if (v24)
      {
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) storageProvider]);
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  **(unsigned __int8 **)(a1 + 64),  @"version",  @"mismatch",  *(void *)(a1 + 48)));
        v44[1] = v27;
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v44,  &v43,  2LL));
        [v26 recordUserAction:@"cloud_sync_delete_podcast" dataSource:v4 withData:v28];
      }

      uint64_t v29 = _MTLogCategoryCloudSync(v25);
      unsigned __int8 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        id v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logPrefix]);
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v4 title]);
        id v33 = (void *)objc_claimAutoreleasedReturnValue([v4 feedURL]);
        id v34 = [v4 storeCollectionId];
        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v4 uuid]);
        *(_DWORD *)buf = 138544387;
        __int128 v46 = v31;
        __int16 v47 = 2113;
        uint64_t v48 = v32;
        __int16 v49 = 2113;
        uint64_t v50 = v33;
        __int16 v51 = 2049;
        id v52 = v34;
        __int16 v53 = 2114;
        uint64_t v54 = v35;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Marking podcast for unsubscription [reason: it's an old subscription (i.e. is marked as already syn ced) which is not present in cloud, so it must have been unsubscribed remotely]: %{private}@, %{private}@, %{private}lld, %{public}@",  buf,  0x34u);
      }

      [*(id *)(a1 + 56) addObject:v3];
    }

    else
    {
      uint64_t v36 = _MTLogCategoryCloudSync(v22);
      int8x16_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        unsigned __int8 v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logPrefix]);
        uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v4 title]);
        id v40 = (void *)objc_claimAutoreleasedReturnValue([v4 feedURL]);
        id v41 = [v4 storeCollectionId];
        id v42 = (void *)objc_claimAutoreleasedReturnValue([v4 uuid]);
        *(_DWORD *)buf = 138544387;
        __int128 v46 = v38;
        __int16 v47 = 2113;
        uint64_t v48 = v39;
        __int16 v49 = 2113;
        uint64_t v50 = v40;
        __int16 v51 = 2049;
        id v52 = v41;
        __int16 v53 = 2114;
        uint64_t v54 = v42;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Ignoring local unvisited podcast [reason: not subscribed locally]: %{private}@, %{private}@, %{ private}lld, %{public}@",  buf,  0x34u);
      }
    }
  }
}

void sub_100113AE0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = kMTPodcastEntityName;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast sortDescriptorsForManualOrder](&OBJC_CLASS___MTPodcast, "sortDescriptorsForManualOrder"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v2 objectsInEntity:v3 predicate:0 sortDescriptors:v4]);

  id v6 = [v5 mutableCopy];
  id v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  uint64_t v29 = a1;
  id v8 = *(void **)(a1 + 40);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"subscribed == 1"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 filteredArrayUsingPredicate:v9]);
  uint32_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 valueForKey:@"feedURL"]);
  id v12 = [v11 mutableCopy];

  if ([v12 count])
  {
    while (1)
    {
      while (![v6 count])
      {
LABEL_6:
        v35[0] = _NSConcreteStackBlock;
        v35[1] = 3221225472LL;
        v35[2] = sub_100113EDC;
        v35[3] = &unk_1002452A8;
        id v14 = v12;
        id v36 = v14;
        id v15 = [v5 indexOfObjectPassingTest:v35];
        if (v15 != (id)0x7FFFFFFFFFFFFFFFLL)
        {
          id v16 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndexedSubscript:v15]);
          -[NSMutableArray addObject:](v7, "addObject:", v16);
        }

        [v14 removeObjectAtIndex:0];

        if (![v14 count]) {
          goto LABEL_9;
        }
      }

      unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue([v6 objectAtIndexedSubscript:0]);
      [v6 removeObjectAtIndex:0];
      if ([v13 subscribed])
      {

        goto LABEL_6;
      }

      -[NSMutableArray addObject:](v7, "addObject:", v13);
    }
  }

id sub_100113EDC(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 feedURL]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:0]);
  id v5 = [v3 isEqualToString:v4];

  return v5;
}

void sub_10011412C(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectsInEntity:kMTPodcastEntityName predicate:*(void *)(a1 + 40) sortDescriptors:0]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1001141C8;
  void v4[3] = &unk_100242E58;
  id v2 = *(void **)(a1 + 56);
  void v4[4] = *(void *)(a1 + 48);
  id v5 = v2;
  [v3 enumerateObjectsUsingBlock:v4];
}

void sub_1001141C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _MTLogCategoryCloudSync(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logPrefix]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 title]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 feedURL]);
    id v9 = [v3 storeCollectionId];
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 uuid]);
    int v13 = 138544387;
    id v14 = v6;
    __int16 v15 = 2113;
    id v16 = v7;
    __int16 v17 = 2113;
    uint64_t v18 = v8;
    __int16 v19 = 2049;
    id v20 = v9;
    __int16 v21 = 2114;
    uint64_t v22 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%{public}@ New locally added subscription detected: %{private}@, %{private}@, %{private}lld, %{public}@",  (uint8_t *)&v13,  0x34u);
  }

  uint32_t v11 = *(void **)(a1 + 40);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v3 uuid]);
  [v11 addObject:v12];
}

void sub_1001144C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_1001144DC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) countOfObjectsInEntity:kMTPodcastEntityName predicate:*(void *)(a1 + 40)];
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = result;
  return result;
}

void sub_1001147D4(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectsInEntity:kMTPodcastEntityName predicate:*(void *)(a1 + 40) sortDescriptors:0]);
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      id v5 = 0LL;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        [*(id *)(*((void *)&v6 + 1) + 8 * (void)v5) setHasBeenSynced:1];
        id v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }

    while (v3);
  }
}

void sub_100114A2C(uint64_t a1)
{
  uint64_t v2 = kMTPodcastEntityName;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) storageProvider]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[MTPodcast predicateForSyncablePodcastsForSyncType:]( MTPodcast,  "predicateForSyncablePodcastsForSyncType:",  [v4 syncType]));
  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast sortDescriptorsForManualOrder](&OBJC_CLASS___MTPodcast, "sortDescriptorsForManualOrder"));
  id v8 = (id)objc_claimAutoreleasedReturnValue([v3 objectsInEntity:v2 predicate:v5 sortDescriptors:v6]);

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100114B28;
  void v9[3] = &unk_100242E58;
  __int128 v7 = *(void **)(a1 + 48);
  void v9[4] = *(void *)(a1 + 40);
  id v10 = v7;
  [v8 enumerateObjectsUsingBlock:v9];
}

void sub_100114B28(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 feedURL]);
  if (v5)
  {

LABEL_3:
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    id v6 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32)), "subscriptionSyncProcessorSyncKeys", 0);
    __int128 v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    id v8 = [v7 countByEnumeratingWithState:&v30 objects:v48 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v31;
      do
      {
        for (i = 0LL; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v31 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void *)(*((void *)&v30 + 1) + 8LL * (void)i);
          int v13 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKey:v12]);
          if (v13) {
            -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v13, v12);
          }
        }

        id v9 = [v7 countByEnumeratingWithState:&v30 objects:v48 count:16];
      }

      while (v9);
    }

    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue([v3 valueForKey:kPodcastStoreCollectionId]);
    __int16 v15 = v14;
    if (v14) {
      id v14 = (os_log_s *)-[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v14, kPodcastPID);
    }
    uint64_t v16 = _MTLogCategoryCloudSync(v14);
    __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logPrefix]);
      __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary description](v4, "description"));
      *(_DWORD *)buf = 138543619;
      uint64_t v35 = v18;
      __int16 v36 = 2113;
      int8x16_t v37 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Adding local podcast: %{private}@",  buf,  0x16u);
    }

    [*(id *)(a1 + 40) addObject:v4];
    goto LABEL_17;
  }

  id v20 = [v3 syncType];
  if (v20 == (id)1)
  {
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKey:kPodcastStoreCollectionId]);

    if (v21) {
      goto LABEL_3;
    }
  }

  uint64_t v22 = _MTLogCategoryCloudSync(v20);
  __int16 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int8 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logPrefix]);
    unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue([v3 title]);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v3 feedURL]);
    id v26 = [v3 storeCollectionId];
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v3 uuid]);
    else {
      uint64_t v28 = @"NO";
    }
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v3 description]);
    *(_DWORD *)buf = 138544899;
    uint64_t v35 = v23;
    __int16 v36 = 2113;
    int8x16_t v37 = v24;
    __int16 v38 = 2113;
    __int16 v39 = v25;
    __int16 v40 = 2049;
    id v41 = v26;
    __int16 v42 = 2114;
    __int16 v43 = v27;
    __int16 v44 = 2114;
    __int16 v45 = v28;
    __int16 v46 = 2113;
    __int16 v47 = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Skipping local podcast: %{private}@, %{private}@, %{private}lld, %{public}@, subscribed: %{public}@ , description: %{private}@",  buf,  0x48u);
  }

void sub_100114F78(uint64_t a1)
{
  uint64_t v1 = a1;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  id obj = *(id *)(a1 + 32);
  id v45 = [obj countByEnumeratingWithState:&v52 objects:v64 count:16];
  if (v45)
  {
    uint64_t v47 = kPodcastTitle;
    uint64_t v43 = kPodcastFeedUrl;
    uint64_t v44 = *(void *)v53;
    uint64_t v42 = kPodcastStoreCollectionId;
    uint64_t v41 = v1;
    do
    {
      for (i = 0LL; i != v45; i = (char *)i + 1)
      {
        if (*(void *)v53 != v44) {
          objc_enumerationMutation(obj);
        }
        id v3 = *(void **)(*((void *)&v52 + 1) + 8LL * (void)i);
        uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v47]);
        id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v43]);
        id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v42]);
        id v7 = [v6 unsignedLongLongValue];

        uint64_t v9 = _MTLogCategoryCloudSync(v8);
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint32_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) logPrefix]);
          *(_DWORD *)buf = 138544131;
          __int128 v57 = v11;
          __int16 v58 = 2113;
          __int128 v59 = v4;
          __int16 v60 = 2113;
          __int128 v61 = v5;
          __int16 v62 = 2049;
          id v63 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Subscribing from cloud to remote podcast: %{private}@, %{private}@, %{private}lld",  buf,  0x2Au);
        }

        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v5));
        if (!v12)
        {
          uint64_t v33 = _MTLogCategoryCloudSync(0LL);
          id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
            goto LABEL_28;
          }
          __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) logPrefix]);
          *(_DWORD *)buf = 138543362;
          __int128 v57 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%{public}@ Attempting to add a podcast with a nil URL",  buf,  0xCu);
          goto LABEL_22;
        }

        int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 48) podcastForFeedUrl:v5]);
        id v14 = v13;
        if (v13)
        {
          int v13 = (os_log_s *)-[os_log_s hidden](v13, "hidden");
          if ((_DWORD)v13)
          {
            int v13 = (os_log_s *)-[os_log_s lastUnfollowedDate](v14, "lastUnfollowedDate");
            if (v15 > *(double *)(v1 + 56))
            {
              uint64_t v16 = _MTLogCategoryCloudSync(v13);
              __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) logPrefix]);
                __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s uuid](v14, "uuid"));
                -[os_log_s lastUnfollowedDate](v14, "lastUnfollowedDate");
                id v20 = *(void **)(v1 + 56);
                *(_DWORD *)buf = 138544130;
                __int128 v57 = v18;
                __int16 v58 = 2114;
                __int128 v59 = v19;
                __int16 v60 = 2048;
                __int128 v61 = v21;
                __int16 v62 = 2048;
                id v63 = v20;
                _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%{public}@ skipping re-subscribe to a hidden podcast with uuid %{public}@, lastUnfollowedDate = %f, la stSyncTimestamp = %f",  buf,  0x2Au);
              }

void sub_1001155DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1001156A0;
  void v8[3] = &unk_100243CD8;
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = *(void **)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = v5;
  id v13 = v6;
  id v7 = v3;
  [v4 performBlock:v8];
}

void sub_1001156A0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  [v2 saveInCurrentBlock];

  id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) workQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100115758;
  block[3] = &unk_10023FF98;
  id v5 = *(id *)(a1 + 32);
  dispatch_async(v3, block);
}

void sub_100115758(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateManager sharedInstance](&OBJC_CLASS___MTFeedUpdateManager, "sharedInstance"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
  [v3 updatePodcastWithUUID:v2 userInitiated:0 forced:1 forceBootstrap:0 source:12 completion:0];
}

void sub_100116520(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v12 = v3;
  if (v3)
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"action"]);
    if (v4
      && (id v5 = (void *)v4,
          id v6 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:@"action"]),
          id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"url"]),
          v7,
          v6,
          v5,
          v7))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:@"action"]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"url"]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v10));
      (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v11);
    }

    else
    {
      (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
    }
  }
}

void sub_10011679C(uint64_t a1, void *a2)
{
  id v9 = a2;
  if (v9)
  {
    uint64_t v3 = (uint64_t)objc_msgSend(v9, "pf_cleanUrlToStoreId");
    if (v3 >= 1)
    {
      uint64_t v4 = v3;
      id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](&OBJC_CLASS___MTDB, "sharedInstance"));
      id v6 = (MTLibraryLinkService *)objc_claimAutoreleasedReturnValue([v5 importContext]);

      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472LL;
      v10[2] = sub_1001168DC;
      v10[3] = &unk_1002452F8;
      uint64_t v11 = v6;
      id v12 = *(id *)(a1 + 32);
      uint64_t v14 = v4;
      id v13 = v9;
      id v7 = v6;
      -[MTLibraryLinkService performBlockAndWait:](v7, "performBlockAndWait:", v10);

      uint64_t v8 = v11;
LABEL_6:

      goto LABEL_7;
    }
  }

  if ((unint64_t)[*(id *)(a1 + 40) count] >= 2)
  {
    id v7 = (MTLibraryLinkService *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 40),  "subarrayWithRange:",  1,  (char *)objc_msgSend(*(id *)(a1 + 40), "count") - 1));
    uint64_t v8 = objc_alloc_init(&OBJC_CLASS___MTLibraryLinkService);
    -[MTLibraryLinkService updateAdamIdForPodcast:withFeedURLs:]( v8,  "updateAdamIdForPodcast:withFeedURLs:",  *(void *)(a1 + 32),  v7);
    goto LABEL_6;
  }

void sub_1001168DC(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)]);
  [v4 setStoreCollectionId:*(void *)(a1 + 56)];
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) absoluteString]);
  [v4 setStoreCleanURL:v2];

  [*(id *)(a1 + 32) saveInCurrentBlock];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTStoreInfoUpdater sharedInstance](&OBJC_CLASS___MTStoreInfoUpdater, "sharedInstance"));
  [v3 updateStoreInfoForEpisodesAndPodcast:*(void *)(a1 + 40) skipPodcastLastCheckDate:1];
}

void sub_100116A18(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1002B6C00;
  qword_1002B6C00 = (uint64_t)v1;
}

void sub_100116B58(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](&OBJC_CLASS___MTDB, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 importContext]);

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100116C0C;
  v7[3] = &unk_100240980;
  id v8 = v3;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v9 = v4;
  uint64_t v10 = v5;
  id v6 = v3;
  [v6 performBlockAndWait:v7];
}

void sub_100116C0C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)]);
  uint64_t v3 = v2;
  if (v2)
  {
    if ([v2 storeCollectionId]
      || (+[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate"),
          double v5 = v4,
          [v3 lastStorePodcastInfoCheckDate],
          v5 <= v6 + 604800.0))
    {
      [*(id *)(a1 + 48) updateStoreInfoForEpisodesAndPodcast:*(void *)(a1 + 40) skipPodcastLastCheckDate:0];
    }

    else
    {
      +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
      objc_msgSend(v3, "setLastStorePodcastInfoCheckDate:");
      [*(id *)(a1 + 32) saveInCurrentBlock];
      uint64_t v7 = objc_claimAutoreleasedReturnValue([v3 updatedFeedURL]);
      if (v7)
      {
        id v8 = (void *)v7;
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 feedURL]);

        if (v9)
        {
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 updatedFeedURL]);
          v16[0] = v10;
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 feedURL]);
          v16[1] = v11;
          id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v16, 2LL));

LABEL_11:
          uint64_t v14 = objc_alloc_init(&OBJC_CLASS___MTLibraryLinkService);
          -[MTLibraryLinkService updateAdamIdForPodcast:withFeedURLs:]( v14,  "updateAdamIdForPodcast:withFeedURLs:",  *(void *)(a1 + 40),  v12);

          goto LABEL_8;
        }
      }

      id v13 = (void *)objc_claimAutoreleasedReturnValue([v3 feedURL]);

      if (v13)
      {
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 feedURL]);
        double v15 = v10;
        id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v15, 1LL));
        goto LABEL_11;
      }
    }
  }

void sub_100116EA8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)]);
  uint64_t v3 = v2;
  if (v2 && [v2 storeCollectionId])
  {
    if (*(_BYTE *)(a1 + 56)
      || (+[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate"),
          double v5 = v4,
          [v3 lastStorePodcastInfoCheckDate],
          v5 > v6 + 604800.0))
    {
      uint64_t v7 = objc_claimAutoreleasedReturnValue([v3 storeCleanURL]);
      if (!v7
        || (id v8 = (void *)v7,
            id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 storeShortURL]),
            v9,
            v8,
            !v9))
      {
        +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
        objc_msgSend(v3, "setLastStorePodcastInfoCheckDate:");
        [*(id *)(a1 + 32) saveInCurrentBlock];
        goto LABEL_13;
      }
    }

    +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
    double v11 = v10;
    [v3 lastStoreEpisodesInfoCheckDate];
    if (v11 > v12 + 86400.0)
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 48) _fetchRequestForEpisodesWithMissingAdamIdsForPodcastUuid:*(void *)(a1 + 40)]);
      [v13 setFetchLimit:1];
      uint64_t v14 = *(void **)(a1 + 32);
      id v27 = 0LL;
      double v15 = (void *)objc_claimAutoreleasedReturnValue([v14 executeFetchRequest:v13 error:&v27]);
      id v16 = v27;
      if (v16)
      {
        __int16 v17 = v16;
        uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMLogCategory defaultCategory](&OBJC_CLASS___IMLogCategory, "defaultCategory"));
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v29 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "Failed to fetch episodes for store info update - %@",  buf,  0xCu);
        }

        goto LABEL_14;
      }

      id v23 = [v15 count];

      if (!v23) {
        goto LABEL_15;
      }
LABEL_13:
      __int16 v19 = *(void **)(a1 + 48);
      id v20 = [v3 storeCollectionId];
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472LL;
      v24[2] = sub_10011710C;
      v24[3] = &unk_100245348;
      id v21 = *(id *)(a1 + 40);
      uint64_t v22 = *(void *)(a1 + 48);
      id v25 = v21;
      uint64_t v26 = v22;
      [v19 getStoreInfoForPodcastWithAdamId:v20 callback:v24];
      id v13 = v25;
LABEL_14:
    }
  }

void sub_10011710C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](&OBJC_CLASS___MTDB, "sharedInstance"));
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 importContext]);

  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  void v21[2] = sub_100117254;
  v21[3] = &unk_100245320;
  id v22 = v14;
  id v23 = *(id *)(a1 + 32);
  id v24 = v9;
  uint64_t v15 = *(void *)(a1 + 40);
  id v25 = v10;
  uint64_t v26 = v15;
  id v27 = v11;
  id v28 = v12;
  id v16 = v12;
  id v17 = v11;
  id v18 = v10;
  id v19 = v9;
  id v20 = v14;
  [v20 performBlockAndWait:v21];
}

void sub_100117254(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void **)(a1 + 48);
  id v10 = v2;
  if (v3
    && (double v4 = (void *)objc_claimAutoreleasedReturnValue([v2 storeCleanURL]),
        unsigned __int8 v5 = [v3 isEqualToString:v4],
        v4,
        (v5 & 1) == 0))
  {
    [v10 setStoreCleanURL:*(void *)(a1 + 48)];
    int v6 = 1;
  }

  else
  {
    int v6 = 0;
  }

  uint64_t v7 = *(void **)(a1 + 56);
  if (v7
    && (id v8 = (void *)objc_claimAutoreleasedReturnValue([v10 storeShortURL]),
        unsigned __int8 v9 = [v7 isEqualToString:v8],
        v8,
        (v9 & 1) == 0))
  {
    [v10 setStoreShortURL:*(void *)(a1 + 56)];
  }

  else if (!v6)
  {
    goto LABEL_11;
  }

  [*(id *)(a1 + 32) saveInCurrentBlock];
LABEL_11:
  [*(id *)(a1 + 64) updateStoreInfoForEpisodesInPodcast:*(void *)(a1 + 40) withEpisodeIds:*(void *)(a1 + 72) andEpisodesWithGuid:*(void *)(a1 + 80)];
}

void sub_100117440(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)]);
  if (!v2) {
    goto LABEL_25;
  }
  +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
  double v4 = v3;
  [v2 lastStoreEpisodesInfoCheckDate];
  if (v4 <= v5 + 86400.0) {
    goto LABEL_25;
  }
  +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
  objc_msgSend(v2, "setLastStoreEpisodesInfoCheckDate:");
  [*(id *)(a1 + 32) saveInCurrentBlock];
  int v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 48) episodesWithMissingAdamIdsForPodcast:*(void *)(a1 + 40) withContext:*(void *)(a1 + 32)]);
  uint64_t v7 = v6;
  if (!v6 || ![v6 count]) {
    goto LABEL_24;
  }
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  id v8 = v7;
  unsigned __int8 v9 = (char *)[v8 countByEnumeratingWithState:&v38 objects:v42 count:16];
  if (!v9)
  {

    goto LABEL_24;
  }

  id v10 = v9;
  uint64_t v29 = v7;
  __int128 v30 = v2;
  char v11 = 0;
  id v12 = 0LL;
  uint64_t v13 = *(void *)v39;
  char v33 = 1;
  id obj = v8;
  do
  {
    uint64_t v14 = 0LL;
    uint64_t v31 = v12;
    uint64_t v15 = v12 + 1;
    do
    {
      if (*(void *)v39 != v13) {
        objc_enumerationMutation(obj);
      }
      id v16 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)v14);
      uint64_t v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "guid", v29, v30));
      if (v17
        && (id v18 = (void *)v17,
            id v19 = *(void **)(a1 + 56),
            id v20 = (void *)objc_claimAutoreleasedReturnValue([v16 guid]),
            id v21 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:v20]),
            v21,
            v20,
            v18,
            v21))
      {
        id v22 = *(void **)(a1 + 48);
        id v23 = *(void **)(a1 + 56);
        id v24 = (void *)objc_claimAutoreleasedReturnValue([v16 guid]);
        id v25 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:v24]);
        unsigned __int8 v26 = [v22 updateAdamId:v25 forEpisode:v16];

        v11 |= v26;
        if ((v11 & 1) == 0) {
          goto LABEL_17;
        }
      }

      else
      {
        char v33 = 0;
        if ((v11 & 1) == 0) {
          goto LABEL_17;
        }
      }

      if (!((unint64_t)v15 % 0xC8))
      {
        [*(id *)(a1 + 32) saveInCurrentBlock];
        char v11 = 0;
      }

void sub_100117754(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](&OBJC_CLASS___MTDB, "sharedInstance"));
  double v5 = (void *)objc_claimAutoreleasedReturnValue([v4 importContext]);

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100117838;
  void v9[3] = &unk_100243CD8;
  int v6 = *(void **)(a1 + 40);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v6;
  id v11 = v5;
  id v12 = v3;
  id v13 = *(id *)(a1 + 48);
  id v7 = v3;
  id v8 = v5;
  [v8 performBlockAndWait:v9];
}

void sub_100117838(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) episodesWithMissingAdamIdsForPodcast:*(void *)(a1 + 40) withContext:*(void *)(a1 + 48)]);
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id obj = v2;
  id v3 = [v2 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v3)
  {
    id v4 = v3;
    unint64_t v5 = 0LL;
    char v6 = 0;
    uint64_t v7 = *(void *)v22;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v22 != v7) {
          objc_enumerationMutation(obj);
        }
        unsigned __int8 v9 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)i);
        uint64_t v10 = objc_claimAutoreleasedReturnValue([v9 enclosureURL]);
        if (v10)
        {
          id v11 = (void *)v10;
          id v12 = *(void **)(a1 + 56);
          id v13 = (void *)objc_claimAutoreleasedReturnValue([v9 enclosureURL]);
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v13]);

          if (v14)
          {
            uint64_t v15 = *(void **)(a1 + 32);
            id v16 = *(void **)(a1 + 56);
            uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v9 enclosureURL]);
            id v18 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:v17]);
            unsigned __int8 v19 = [v15 updateAdamId:v18 forEpisode:v9];

            v6 |= v19;
            ++v5;
            if ((v6 & 1) != 0 && !(v5 % 0xC8))
            {
              [*(id *)(a1 + 64) saveInCurrentBlock];
              char v6 = 0;
            }
          }
        }
      }

      id v4 = [obj countByEnumeratingWithState:&v21 objects:v25 count:16];
    }

    while (v4);
    if ((v6 & 1) != 0) {
      [*(id *)(a1 + 48) saveInCurrentBlock];
    }
  }
}

void sub_100117ED4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0
    || (unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stringValue]),
        char v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v5]),
        uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSDictionary),
        char isKindOfClass = objc_opt_isKindOfClass(v6, v7),
        v6,
        v5,
        (isKindOfClass & 1) == 0))
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    goto LABEL_24;
  }

  uint64_t v37 = a1;
  unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stringValue]);
  id v38 = v3;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v9]);
  id v11 = [v10 copy];

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:@"childrenIds"]);
  id v35 = [v12 mutableCopy];

  id v36 = v11;
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:@"children"]);
  __int128 v39 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  id v14 = v13;
  id v15 = [v14 countByEnumeratingWithState:&v40 objects:v44 count:16];
  if (!v15) {
    goto LABEL_14;
  }
  id v16 = v15;
  uint64_t v17 = *(void *)v41;
  do
  {
    for (i = 0LL; i != v16; i = (char *)i + 1)
    {
      if (*(void *)v41 != v17) {
        objc_enumerationMutation(v14);
      }
      unsigned __int8 v19 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)i);
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:v19]);
      uint64_t v21 = objc_opt_class(&OBJC_CLASS___NSDictionary);
      if ((objc_opt_isKindOfClass(v20, v21) & 1) != 0)
      {
        __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:v19]);
        __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v22 objectForKeyedSubscript:@"podcastEpisodeGuid"]);

        if (!v23) {
          continue;
        }
        __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:v19]);
        id v20 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:@"podcastEpisodeGuid"]);

        id v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v19 longLongValue]));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v39, "setObject:forKeyedSubscript:", v25, v20);
      }
    }

    id v16 = [v14 countByEnumeratingWithState:&v40 objects:v44 count:16];
  }

  while (v16);
LABEL_14:

  unsigned __int8 v26 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](v39, "allValues"));
  [v35 removeObjectsInArray:v26];

  id v27 = (id)objc_claimAutoreleasedReturnValue([v36 objectForKeyedSubscript:@"url"]);
  if (v27)
  {
    id v28 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKeyedSubscript:@"url"]);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));

    if (v28 == v29)
    {
      id v27 = 0LL;
    }

    else
    {
      __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKeyedSubscript:@"url"]);
      id v27 = [v30 copy];
    }
  }

  id v31 = (id)objc_claimAutoreleasedReturnValue([v36 objectForKeyedSubscript:@"shortUrl"]);
  if (v31)
  {
    __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKeyedSubscript:@"shortUrl"]);
    char v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));

    if (v32 == v33)
    {
      id v31 = 0LL;
    }

    else
    {
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKeyedSubscript:@"shortUrl"]);
      id v31 = [v34 copy];
    }
  }

  id v3 = v38;
  (*(void (**)(void))(*(void *)(v37 + 40) + 16LL))();

LABEL_24:
}

void sub_1001183F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = &OBJC_CLASS___DebugUtil_ptr;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0)
  {
    uint64_t v32 = a1;
    char v33 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    id obj = *(id *)(a1 + 32);
    id v36 = [obj countByEnumeratingWithState:&v37 objects:v41 count:16];
    if (!v36) {
      goto LABEL_21;
    }
    uint64_t v6 = *(void *)v38;
    uint64_t v7 = @"url";
    uint64_t v34 = *(void *)v38;
    while (1)
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v38 != v6) {
          objc_enumerationMutation(obj);
        }
        unsigned __int8 v9 = *(void **)(*((void *)&v37 + 1) + 8LL * (void)v8);
        uint64_t v10 = objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v9]);
        if (v10)
        {
          id v11 = (void *)v10;
          id v12 = v7;
          id v13 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v9]);
          uint64_t v14 = objc_opt_class(v4[133]);
          char isKindOfClass = objc_opt_isKindOfClass(v13, v14);

          uint64_t v7 = v12;
          if ((isKindOfClass & 1) != 0)
          {
            id v16 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v9]);
            uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:@"offers"]);
            uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSArray);
            if ((objc_opt_isKindOfClass(v17, v18) & 1) == 0) {
              goto LABEL_15;
            }
            unsigned __int8 v19 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:@"offers"]);
            id v20 = v4;
            uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v19 objectAtIndexedSubscript:0]);
            uint64_t v22 = objc_opt_class(v20[133]);
            char v23 = objc_opt_isKindOfClass(v21, v22);

            uint64_t v4 = v20;
            uint64_t v7 = v12;

            if ((v23 & 1) != 0)
            {
              __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:@"offers"]);
              uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v24 objectAtIndexedSubscript:0]);

              id v25 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:@"download"]);
              uint64_t v26 = objc_opt_class(v20[133]);
              if ((objc_opt_isKindOfClass(v25, v26) & 1) == 0) {
                goto LABEL_14;
              }
              id v27 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:@"download"]);
              id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:v12]);

              if (v28)
              {
                uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:@"download"]);
                id v25 = (void *)objc_claimAutoreleasedReturnValue([v29 objectForKeyedSubscript:@"url"]);

                id v30 = [v9 copy];
                -[NSMutableDictionary setObject:forKeyedSubscript:](v33, "setObject:forKeyedSubscript:", v30, v25);

                uint64_t v4 = v20;
LABEL_14:

                uint64_t v7 = v12;
              }

              else
              {
                uint64_t v4 = v20;
                uint64_t v7 = @"url";
              }

void sub_100119470( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10011949C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001194AC(uint64_t a1)
{
}

void sub_1001194B4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) storageProvider]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 feedUrlFromModernKey:*(void *)(a1 + 40)]);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) podcastForFeedUrl:v3]);
  if (v4)
  {
    char v33 = v4;
    uint64_t v34 = v3;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 uuid]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[MTEpisode predicateForAllEpisodesOnPodcastUuid:includeNonAudioEpisodes:]( &OBJC_CLASS___MTEpisode,  "predicateForAllEpisodesOnPodcastUuid:includeNonAudioEpisodes:",  v5,  1LL));

    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) predicateForFilteringEpisodesWithEmptyPlayState]);
    uint64_t v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "AND:"));

    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  kMTEpisodeEntityName));
    id v31 = (void *)v7;
    [v8 setPredicate:v7];
    uint64_t v39 = kEpisodeMetadataIdentifier;
    uint64_t v40 = kEpisodeGuid;
    v60[0] = kEpisodeGuid;
    v60[1] = kEpisodeMetadataIdentifier;
    uint64_t v37 = kEpisodeLastDatePlayed;
    uint64_t v38 = kEpisodePlayStateManuallySet;
    v60[2] = kEpisodePlayStateManuallySet;
    v60[3] = kEpisodeLastDatePlayed;
    uint64_t v35 = kEpisodeIsNew;
    uint64_t v36 = kEpisodeLastUserMarkedAsPlayedDate;
    void v60[4] = kEpisodeLastUserMarkedAsPlayedDate;
    v60[5] = kEpisodeIsNew;
    v60[6] = kEpisodeTitle;
    v60[7] = kEpisodeUuid;
    unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v60, 8LL));
    [v8 setPropertiesToFetch:v9];

    [v8 setFetchBatchSize:200];
    uint64_t v41 = a1;
    id v30 = v8;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) executeFetchRequest:v8 error:0]);
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    __int128 v48 = 0u;
    id obj = v10;
    id v11 = [v10 countByEnumeratingWithState:&v45 objects:v59 count:16];
    if (!v11) {
      goto LABEL_16;
    }
    id v12 = v11;
    uint64_t v44 = *(void *)v46;
    while (1)
    {
      for (i = 0LL; i != v12; i = (char *)i + 1)
      {
        if (*(void *)v46 != v44) {
          objc_enumerationMutation(obj);
        }
        uint64_t v14 = *(void **)(*((void *)&v45 + 1) + 8LL * (void)i);
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 guid]);
        if ([v15 length])
        {
          id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 metadataIdentifier]);
          id v17 = [v16 length];

          if (v17)
          {
            __int128 v43 = *(void **)(*(void *)(*(void *)(v41 + 56) + 8LL) + 40LL);
            v49[0] = v40;
            unsigned __int8 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue([v14 guid]);
            v50[0] = v19;
            v49[1] = v39;
            id v20 = (void *)objc_claimAutoreleasedReturnValue([v14 metadataIdentifier]);
            v50[1] = v20;
            v49[2] = v38;
            uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v14 playStateManuallySet]));
            v50[2] = v21;
            v49[3] = v37;
            [v14 lastDatePlayed];
            uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
            v50[3] = v22;
            v49[4] = v36;
            [v14 lastUserMarkedAsPlayedDate];
            char v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
            v50[4] = v23;
            v49[5] = v35;
            __int128 v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v14 isNew]));
            v50[5] = v24;
            id v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v50,  v49,  6LL));
            [v43 addObject:v25];

            goto LABEL_13;
          }
        }

        else
        {
        }

        uint64_t v26 = _MTLogCategoryUPPSync(v18);
        unsigned __int8 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_14;
        }
        id v20 = (void *)objc_claimAutoreleasedReturnValue([v14 title]);
        id v27 = (void *)objc_claimAutoreleasedReturnValue([v14 uuid]);
        id v28 = (void *)objc_claimAutoreleasedReturnValue([v14 metadataIdentifier]);
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v14 guid]);
        *(_DWORD *)buf = 138544130;
        __int128 v52 = v20;
        __int16 v53 = 2114;
        __int128 v54 = v27;
        __int16 v55 = 2114;
        __int128 v56 = v28;
        __int16 v57 = 2114;
        __int16 v58 = v29;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "[Episode Sync] Skipping syncing episode without a valid guid and metadataIdentifier: %{public}@, %{public}@, % {public}@, %{public}@",  buf,  0x2Au);

LABEL_13:
LABEL_14:
      }

      id v12 = [obj countByEnumeratingWithState:&v45 objects:v59 count:16];
      if (!v12)
      {
LABEL_16:

        uint64_t v4 = v33;
        id v3 = v34;
        break;
      }
    }
  }
}

void sub_10011A430(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) storageProvider]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 feedUrlFromModernKey:*(void *)(a1 + 40)]);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) podcastForFeedUrl:v3]);
  if (v4)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  kMTEpisodeEntityName));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 uuid]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[MTEpisode predicateForAllEpisodesOnPodcastUuid:includeNonAudioEpisodes:]( &OBJC_CLASS___MTEpisode,  "predicateForAllEpisodesOnPodcastUuid:includeNonAudioEpisodes:",  v6,  1LL));
    [v5 setPredicate:v7];

    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _propertiesToFetch]);
    [v5 setPropertiesToFetch:v8];

    [v5 setFetchBatchSize:200];
    unsigned __int8 v9 = *(void **)(a1 + 48);
    id v38 = 0LL;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 executeFetchRequest:v5 error:&v38]);
    id v11 = v38;
    id v12 = v11;
    if (v11)
    {
      uint64_t v13 = _MTLogCategoryCloudSync(v11);
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v4 uuid]);
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v4 title]);
        *(_DWORD *)buf = 138543874;
        uint64_t v41 = v15;
        __int16 v42 = 2112;
        __int128 v43 = v16;
        __int16 v44 = 2112;
        __int128 v45 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "[Episode Sync] Failed to fetch episodes for show %{public}@ - %@ - %@",  buf,  0x20u);
      }
    }

    else
    {
      id v28 = v10;
      uint64_t v29 = v5;
      id v30 = v4;
      id v31 = v3;
      __int128 v36 = 0u;
      __int128 v37 = 0u;
      __int128 v34 = 0u;
      __int128 v35 = 0u;
      id obj = v10;
      id v17 = (char *)[obj countByEnumeratingWithState:&v34 objects:v39 count:16];
      if (v17)
      {
        uint64_t v18 = v17;
        unsigned __int8 v19 = 0LL;
        uint64_t v20 = *(void *)v35;
        do
        {
          uint64_t v21 = 0LL;
          uint64_t v32 = v19;
          uint64_t v22 = v19 + 1;
          do
          {
            if (*(void *)v35 != v20) {
              objc_enumerationMutation(obj);
            }
            char v23 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)v21);
            __int128 v24 = objc_autoreleasePoolPush();
            id v25 = (void *)objc_claimAutoreleasedReturnValue([v23 guid]);
            uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v23 metadataIdentifier]);
            id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKey:v25]);
            if (v27
              || (id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) objectForKey:v26])) != 0)
            {
              if (v25) {
                [*(id *)(a1 + 56) removeObjectForKey:v25];
              }
              if (v26) {
                [*(id *)(a1 + 64) removeObjectForKey:v26];
              }
              [*(id *)(a1 + 32) unsafeUpdateEpisode:v23 forRemoteEpisodeDictionary:v27];
            }

            objc_autoreleasePoolPop(v24);
            ++v21;
            ++v22;
          }

          while (v18 != v21);
          unsigned __int8 v19 = &v18[(void)v32];
          uint64_t v18 = (char *)[obj countByEnumeratingWithState:&v34 objects:v39 count:16];
        }

        while (v18);
      }

      [*(id *)(a1 + 48) saveInCurrentBlock];
      uint64_t v4 = v30;
      id v3 = v31;
      uint64_t v10 = v28;
      uint64_t v5 = v29;
      id v12 = 0LL;
    }
  }
}

void sub_10011ABEC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForFeedUrl:*(void *)(a1 + 40)]);
  if ([v2 subscribed])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  kMTEpisodeEntityName));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 uuid]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[MTEpisode predicateForListenNowForPodcastUuid:]( &OBJC_CLASS___MTEpisode,  "predicateForListenNowForPodcastUuid:",  v4));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForVisuallyPlayed:](&OBJC_CLASS___MTEpisode, "predicateForVisuallyPlayed:", 1LL));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 AND:v6]);
    [v3 setPredicate:v7];

    [v3 setFetchLimit:1];
    id v8 = [*(id *)(a1 + 32) countForFetchRequest:v3 error:0];
    if (v8)
    {
      uint64_t v9 = _MTLogCategoryDefault(v8);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v2 title]);
        int v15 = 138543362;
        id v16 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Recalculating Up Next for podcast %{public}@ which has played up next episode after sync completion",  (uint8_t *)&v15,  0xCu);
      }

      id v12 = (void *)objc_claimAutoreleasedReturnValue([v2 uuid]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[MTRecencyUtil upNextForPodcastUuid:excludeExplicit:ctx:]( &OBJC_CLASS___MTRecencyUtil,  "upNextForPodcastUuid:excludeExplicit:ctx:",  v12,  0LL,  *(void *)(a1 + 32)));

      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v2 uuid]);
      +[MTRecencyUtil unsafeUpdateRelatedFieldsIfUpNextChangedForPodcast:upNextResult:ctx:]( &OBJC_CLASS___MTRecencyUtil,  "unsafeUpdateRelatedFieldsIfUpNextChangedForPodcast:upNextResult:ctx:",  v14,  v13,  *(void *)(a1 + 32));

      [*(id *)(a1 + 32) saveInCurrentBlock];
    }
  }
}

void sub_10011C4A8(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectsInEntity:kMTPlaylistEntityName predicate:0 sortDescriptors:0]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_10011C544;
  void v4[3] = &unk_100245400;
  uint64_t v2 = *(void **)(a1 + 48);
  void v4[4] = *(void *)(a1 + 40);
  id v5 = v2;
  [v3 enumerateObjectsUsingBlock:v4];
}

void sub_10011C544(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([v3 isItunesPlaylist] & 1) == 0
    && ([v3 isItunesSmartPlaylist] & 1) == 0
    && ([v3 isBuiltIn] & 1) == 0)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 defaultSettings]);

    if (v4)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 dictionaryRepresentation]);
      id v6 = [v5 mutableCopy];

      if (([v3 hasBeenSynced] & 1) == 0)
      {
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) addedPlaylists]);

        if (!v7)
        {
          id v8 = objc_opt_new(&OBJC_CLASS___NSMutableSet);
          [*(id *)(a1 + 32) setAddedPlaylists:v8];
        }

        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) addedPlaylists]);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 uuid]);
        [v9 addObject:v10];

        [v3 setHasBeenSynced:1];
      }

      uint64_t v60 = a1;
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v3 podcasts]);
      v64 = (void *)objc_claimAutoreleasedReturnValue([v3 settings]);
      id v67 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
      __int16 v58 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v3 defaultSettings]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 dictionaryRepresentation]);
      id v14 = [v13 mutableCopy];

      int v15 = (void *)objc_claimAutoreleasedReturnValue([v3 defaultSettings]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v15 episodesToShow]));
      [v14 setObject:v16 forKey:@"episodesToShowTruth"];

      __int16 v57 = v14;
      [v6 setObject:v14 forKey:kPlaylistDefaultSettings];
      __int128 v61 = v3;
      id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v3 isUngroupedList]));
      __int128 v59 = v6;
      [v6 setObject:v17 forKey:kPlaylistUngroupedList];

      __int128 v74 = 0u;
      __int128 v75 = 0u;
      __int128 v72 = 0u;
      __int128 v73 = 0u;
      id obj = v11;
      id v18 = [obj countByEnumeratingWithState:&v72 objects:v79 count:16];
      if (v18)
      {
        id v19 = v18;
        uint64_t v20 = *(void *)v73;
        uint64_t v21 = kPodcastFeedUrl;
        uint64_t v22 = kPodcastStoreCollectionId;
        uint64_t v23 = kPodcastPID;
        do
        {
          for (i = 0LL; i != v19; i = (char *)i + 1)
          {
            if (*(void *)v73 != v20) {
              objc_enumerationMutation(obj);
            }
            id v25 = *(void **)(*((void *)&v72 + 1) + 8LL * (void)i);
            uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 feedURL]);

            if (v26)
            {
              v77[0] = v21;
              id v27 = (void *)objc_claimAutoreleasedReturnValue([v25 feedURL]);
              v78[0] = v27;
              v77[1] = v22;
              id v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v25 storeCollectionId]));
              v78[1] = v28;
              v77[2] = v23;
              uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v25 storeCollectionId]));
              v78[2] = v29;
              id v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v78,  v77,  3LL));
              -[NSMutableArray addObject:](v67, "addObject:", v30);
            }
          }

          id v19 = [obj countByEnumeratingWithState:&v72 objects:v79 count:16];
        }

        while (v19);
      }

      __int128 v70 = 0u;
      __int128 v71 = 0u;
      __int128 v68 = 0u;
      __int128 v69 = 0u;
      id v31 = v64;
      id v32 = [v31 countByEnumeratingWithState:&v68 objects:v76 count:16];
      if (v32)
      {
        id v33 = v32;
        uint64_t v34 = *(void *)v69;
        uint64_t v63 = kPlaylistSettingEpisodesToShow;
        uint64_t v65 = kPlaylistSettingTracksDefault;
        uint64_t v62 = kPlaylistSettingEpisodeToShowItunesTruth;
        do
        {
          for (j = 0LL; j != v33; j = (char *)j + 1)
          {
            if (*(void *)v69 != v34) {
              objc_enumerationMutation(v31);
            }
            __int128 v36 = *(void **)(*((void *)&v68 + 1) + 8LL * (void)j);
            __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([v36 dictionaryRepresentation]);
            id v38 = [v37 mutableCopy];

            uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v36 podcast]);
            if (v39)
            {
              uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v36 podcast]);
              uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v40 feedURL]);

              if (!v41) {
                goto LABEL_34;
              }
              if ([v36 tracksDefault])
              {
                __int16 v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v36 integerForEpisodesToShow]));
                [v38 setObject:v42 forKey:v63];
              }

              __int128 v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v36 episodesToShow]));
              [v38 setObject:v43 forKey:@"episodesToShowTruth"];

              __int16 v44 = (void *)objc_claimAutoreleasedReturnValue([v36 podcast]);
              __int128 v45 = (void *)objc_claimAutoreleasedReturnValue([v44 feedURL]);
              [v38 setObject:v45 forKey:@"podcastFeedUrl"];

              __int128 v46 = (void *)objc_claimAutoreleasedReturnValue([v36 podcast]);
              uint64_t v47 = (uint64_t)[v46 storeCollectionId];

              if (v47 >= 1)
              {
                __int128 v48 = (void *)objc_claimAutoreleasedReturnValue([v36 podcast]);
                id v49 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v48 storeCollectionId]));
                [v38 setObject:v49 forKey:@"podcastStoreCollectionId"];
              }

              uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v36 podcast]);
              uint64_t v51 = (uint64_t)[v50 podcastPID];

              if (v51 >= 1)
              {
                __int128 v52 = (void *)objc_claimAutoreleasedReturnValue([v36 podcast]);
                __int16 v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v52 storeCollectionId]));
                [v38 setObject:v53 forKey:@"podcastPID"];
              }

              __int128 v54 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v36 tracksDefault]));
              [v38 setObject:v54 forKey:v65];
            }

            -[NSMutableArray addObject:](v58, "addObject:", v38);
LABEL_34:
          }

          id v33 = [v31 countByEnumeratingWithState:&v68 objects:v76 count:16];
        }

        while (v33);
      }

      [v59 setObject:v67 forKey:@"podcasts"];
      [v59 setObject:v58 forKey:@"settings"];
      id v3 = v61;
      __int16 v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v61 includesAllPodcasts]));
      [v59 setObject:v55 forKey:kPlaylistIncludesAllPodcasts];

      [*(id *)(v60 + 40) addObject:v59];
    }

    else
    {
      __int128 v56 = (void *)objc_claimAutoreleasedReturnValue(+[IMLogger sharedLogger](&OBJC_CLASS___IMLogger, "sharedLogger"));
      [v56 logFile:"/Library/Caches/com.apple.xbs/Sources/Marmoset/Source/Library/Sync/MTPlaylistSyncProcessor.m" lineNumber:110 format:@"*** Attempting to cloud sync a playlist with nil defaultSettings ***"];
    }
  }
}

id sub_10011D00C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 addedPlaylists]);
  id v5 = [v4 containsObject:v3];

  return v5;
}

uint64_t sub_10011D4F0(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2 == 1)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metadataItemsToCommitToKVSStorage]);
    id v5 = *(void **)(a1 + 48);
    goto LABEL_5;
  }

  if ((_DWORD)a2 == 2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metadataItemsToCommitToDataSource]);
    id v5 = *(void **)(a1 + 40);
LABEL_5:
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 itemIdentifier]);
    [v4 setObject:v5 forKey:v6];
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) storageProvider]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metadataItemsToCommitToDataSource]);
  objc_msgSend(v7, "setNumMetadataItemsToCommitToDataSource:", objc_msgSend(v8, "count"));

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) storageProvider]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metadataItemsToCommitToKVSStorage]);
  objc_msgSend(v9, "setNumMetadataItemsToCommitToKVSStorage:", objc_msgSend(v10, "count"));

  return a2;
}

id sub_10011E2A4(uint64_t a1)
{
  return [*(id *)(a1 + 32) reloadData];
}

void sub_10011EF10(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectsInEntity:kMTEpisodeEntityName predicate:*(void *)(a1 + 40) propertiesToFetch:*(void *)(a1 + 48) batchSize:0]);
  uint64_t v3 = _MTLogCategoryDatabase(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    id v15 = [v2 count];
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "MTEpisodeUpdaterCache loaded %lu episodes",  buf,  0xCu);
  }

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_10011F0C0;
  v5[3] = &unk_100245450;
  id v6 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 72);
  id v9 = *(id *)(a1 + 80);
  id v10 = *(id *)(a1 + 88);
  id v11 = *(id *)(a1 + 96);
  id v12 = *(id *)(a1 + 104);
  id v13 = *(id *)(a1 + 112);
  [v2 enumerateObjectsUsingBlock:v5];
}

void sub_10011F0C0(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uuid]);
  if ([v4 length])
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 title]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 enclosureURL]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 guid]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v3 persistentID]));
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 assetURL]);
    if (v5)
    {
      id v10 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([a1[4] objectForKey:v5]);
      if (!v10)
      {
        id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        [a1[4] setObject:v10 forKey:v5];
      }

      -[NSMutableArray addObject:](v10, "addObject:", v4);
    }

    if (v6) {
      [a1[5] setObject:v4 forKey:v6];
    }
    if (v7) {
      [a1[6] setObject:v4 forKey:v7];
    }
    if (v8) {
      [a1[7] setObject:v4 forKey:v8];
    }
    if (v9) {
      [a1[8] setObject:v4 forKey:v9];
    }
    [a1[9] setObject:v3 forKey:v4];
    [a1[10] setObject:v4 forKey:v4];
    [a1[11] addObject:v4];
  }

  else
  {
    uint64_t v11 = _MTLogCategoryDatabase(0LL);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v3 title]);
      int v14 = 138412290;
      id v15 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "MTEpisodeUpdaterCache encountered episode without UUID %@",  (uint8_t *)&v14,  0xCu);
    }
  }
}

void sub_10011FA44(_Unwind_Exception *a1)
{
}

uint64_t sub_10011FA5C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10011FA6C(uint64_t a1)
{
}

void sub_10011FA74(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 24) objectForUuid:a1[5] entityName:kMTEpisodeEntityName]);
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10011FABC(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 24) objectForUuid:a1[5] entityName:kMTEpisodeEntityName]);
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001200A4(uint64_t a1)
{
  if (isTV(a1) && [*(id *)(a1 + 32) firstItemIsRestricted])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisodeUnavailableUtil sharedInstance](&OBJC_CLASS___MTEpisodeUnavailableUtil, "sharedInstance"));
    [v2 showDialogForReason:1 podcastTitle:&stru_100248948 completion:0];
  }

  else
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) items]);
    id v4 = [v3 count];

    if (v4)
    {
      id v5 = objc_alloc(&OBJC_CLASS___MTStoreManifest);
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) items]);
      id v7 = -[MTStoreManifest initWithItems:initialIndex:]( v5,  "initWithItems:initialIndex:",  v6,  [*(id *)(a1 + 32) startIndex]);

      [*(id *)(a1 + 32) shuffleMode];
      id v8 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](&OBJC_CLASS___MTPlayerController, "defaultInstance"));
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      v9[2] = sub_100120210;
      void v9[3] = &unk_100240A30;
      id v10 = *(id *)(a1 + 40);
      [v8 playManifest:v7 reason:6 interactive:1 completion:v9];

      return;
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100120210(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2 == 1));
  id v5 = v3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v5, 1LL));
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v4);
}

void sub_100120DC8(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](&OBJC_CLASS___UIScreen, "mainScreen"));
  [v1 scale];
  uint64_t v3 = v2;

  qword_1002B47E0 = v3;
}

void sub_100120E50(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___MTTVMusicMPArtworkCatalogLoader);
  uint64_t v2 = (void *)qword_1002B6C20;
  qword_1002B6C20 = (uint64_t)v1;
}

id sub_100121534(uint64_t a1, void *a2)
{
  return _[a2 setDeviceLibraryPersistentID:*(void *)(a1 + 32)];
}

void sub_100121540(uint64_t a1, void *a2)
{
  id v8 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v8 results]);
  uint64_t v4 = (uint64_t)[v3 totalItemCount];

  if (v4 >= 1)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v8 results]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 firstItem]);

    id v7 =  objc_msgSend( *(id *)(a1 + 32),  "_loadArtworkForMPObject:scaleToSize:completionHandler:",  v6,  *(void *)(a1 + 40),  *(double *)(a1 + 48),  *(double *)(a1 + 56));
  }
}

void sub_10012179C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3
    && (uint64_t v5 = objc_claimAutoreleasedReturnValue( +[TVImage imageWithCGImageRef:preserveAlpha:]( TVImage, "imageWithCGImageRef:preserveAlpha:", [v3 CGImage], 1))) != 0)
  {
    id v6 = (void *)v5;
    id v7 = 0LL;
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"TVMusicArtworkLoaderErrorDomain",  1LL,  0LL));
    id v6 = 0LL;
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001218B4;
  block[3] = &unk_100243490;
  id v8 = *(id *)(a1 + 32);
  id v13 = v7;
  id v14 = v8;
  id v12 = v6;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(&_dispatch_main_q, block);
}

uint64_t sub_1001218B4(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, void))(a1[6] + 16LL))( a1[6],  a1[4],  0LL,  0LL,  0LL,  a1[5]);
}

uint64_t sub_1001218D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100122284(uint64_t a1)
{
  uint64_t v2 = dispatch_group_create();
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) upNextManifest]);
  unsigned __int8 v4 = [v3 isLoaded];

  if ((v4 & 1) == 0)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) upNextManifest]);
    [v5 setIsLoaded:1];

    dispatch_group_enter(v2);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) upNextManifest]);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_100122454;
    void v17[3] = &unk_10023FF98;
    id v18 = v2;
    [v6 _load:v17];
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userManifest]);
  unsigned __int8 v8 = [v7 isLoaded];

  if ((v8 & 1) == 0)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userManifest]);
    [v9 setIsLoaded:1];

    dispatch_group_enter(v2);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userManifest]);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_10012245C;
    void v15[3] = &unk_10023FF98;
    id v16 = v2;
    [v10 _load:v15];
  }

  uint64_t v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) loadQueue]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  _DWORD v13[2] = sub_100122464;
  void v13[3] = &unk_100240138;
  id v12 = *(void **)(a1 + 40);
  void v13[4] = *(void *)(a1 + 32);
  id v14 = v12;
  dispatch_group_notify(v2, v11, v13);
}

void sub_100122454(uint64_t a1)
{
}

void sub_10012245C(uint64_t a1)
{
}

uint64_t sub_100122464(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100122A2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100122A44(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = *a3;
  return result;
}

void sub_100123AF8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 titleLabel]);
  objc_msgSend(v2, "im_updateLabelShadow:alwaysDisplaysLabel:", v3, 0);

  unsigned __int8 v4 = *(void **)(a1 + 32);
  id v5 = (id)objc_claimAutoreleasedReturnValue([v4 subtitleLabel]);
  objc_msgSend(v4, "im_updateLabelShadow:alwaysDisplaysLabel:", v5, 0);
}

void sub_100123E00( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100123E24(uint64_t a1, void *a2, void *a3)
{
  id v19 = a2;
  id v5 = a3;
  id v6 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = objc_claimAutoreleasedReturnValue([WeakRetained imageKey]);
  if (v8)
  {
    id v9 = (void *)v8;
    id v10 = objc_loadWeakRetained((id *)(a1 + 32));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 imageKey]);
    unsigned int v12 = [v5 isEqualToString:v11];

    if (!v12) {
      goto LABEL_11;
    }
  }

  else
  {
  }

  if (v19)
  {
    id v13 = objc_loadWeakRetained((id *)(a1 + 32));
    [v13 _setArtwork:v19];

    id v14 = objc_loadWeakRetained(v6);
    id v15 = v14;
    uint64_t v16 = 0LL;
  }

  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100123FB4;
    block[3] = &unk_100243C48;
    __int128 v21 = *(_OWORD *)(a1 + 40);
    if (qword_1002B6C30 != -1) {
      dispatch_once(&qword_1002B6C30, block);
    }
    id v17 = objc_loadWeakRetained((id *)(a1 + 32));
    [v17 _setArtwork:qword_1002B6C28];

    id v14 = objc_loadWeakRetained(v6);
    id v15 = v14;
    uint64_t v16 = 1LL;
  }

  [v14 setShowingDefaultImage:v16];

  id v18 = objc_loadWeakRetained(v6);
  [v18 setNeedsLayout];

LABEL_11:
}

void sub_100123FB4(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[MTImageStore defaultStore](&OBJC_CLASS___MTImageStore, "defaultStore"));
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "imageForKey:size:", kMTLibraryDefaultImageKey, *(double *)(a1 + 32), *(double *)(a1 + 40)));
  id v3 = (void *)qword_1002B6C28;
  qword_1002B6C28 = v2;
}

void sub_100124264(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](&OBJC_CLASS___UIScreen, "mainScreen"));
  [v1 scale];
  uint64_t v3 = v2;

  qword_1002B47E8 = v3;
}

void sub_1001243D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1001243F4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100124404(uint64_t a1)
{
}

void sub_10012440C(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = kMTEpisodeEntityName;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForListenNow](&OBJC_CLASS___MTEpisode, "predicateForListenNow"));
  id v9 = (id)objc_claimAutoreleasedReturnValue( [v2 objectsInEntity:v3 predicate:v4 sortDescriptors:a1[5] returnsObjectsAsFaults:0 limit:1]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue([v9 firstObject]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 uuid]);
  uint64_t v7 = *(void *)(a1[6] + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_100124704( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100124724(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)]);
  uint64_t v3 = v2;
  if (v2)
  {
    id v5 = v2;
    unsigned __int8 v4 = [v2 hidden];
    uint64_t v3 = v5;
  }

  else
  {
    unsigned __int8 v4 = 1;
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v4;
}

void sub_100124968( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100124980(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playlistForUuid:*(void *)(a1 + 40)]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v6 nextEpisode]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 uuid]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100124F94(_Unwind_Exception *a1)
{
}

void sub_100124FB4(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) episodeForUuid:*(void *)(a1 + 40)]);
  uint64_t v2 = objc_claimAutoreleasedReturnValue([v5 podcastUuid]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10012500C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) episodeForUuid:*(void *)(a1 + 40)]);
  switch(*(void *)(a1 + 56))
  {
    case 1LL:
    case 4LL:
      uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
      uint64_t v4 = 6LL;
      goto LABEL_4;
    case 5LL:
      uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
      uint64_t v4 = 9LL;
LABEL_4:
      *(void *)(v3 + 24) = v4;
      break;
    case 6LL:
      id v10 = v2;
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 podcast]);
      unsigned int v6 = [v5 playbackNewestToOldest];

      if (v6) {
        uint64_t v7 = 11LL;
      }
      else {
        uint64_t v7 = 12LL;
      }
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v7;
      uint64_t v2 = v10;
      break;
    default:
      id v11 = v2;
      BOOL v8 = [v2 isInUserEpisodes] == 0;
      uint64_t v2 = v11;
      uint64_t v9 = 6LL;
      if (!v8) {
        uint64_t v9 = 9LL;
      }
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v9;
      break;
  }
}

void sub_1001253B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1001253C8(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)]);
  if ([v4 hidden])
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v3 = *(void **)(v2 + 40);
    *(void *)(v2 + 40) = 0LL;
  }
}

void sub_100125568( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100125580(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void *)(a1 + 56);
  id v8 = v2;
  if (*(_BYTE *)(a1 + 64))
  {
    if (*(_BYTE *)(a1 + 65)) {
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 newestUserEpisodeExcludingExplicit:v3]);
    }
    else {
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 oldestUserEpisodeExcludingExplicit:v3]);
    }
  }

  else if (*(_BYTE *)(a1 + 65))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 newestEpisodeExcludingUuid:0 excludeExplicit:v3]);
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 oldestEpisodeExcludingExplicit:v3]);
  }

  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v6 = v4;
  uint64_t v7 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v6;
}

void sub_100125714( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10012572C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_100125B0C(uint64_t a1)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 40),  "episodeForUuid:",  *(void *)(*((void *)&v9 + 1) + 8 * (void)v6),  (void)v9));
        [v7 setIsNew:0];

        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v4);
  }

  return [*(id *)(a1 + 40) saveInCurrentBlock];
}

uint64_t sub_100125CA8()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v0);
  uint64_t v22 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = sub_100126450(&qword_1002B4C68);
  uint64_t v21 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100126450(&qword_1002B4C70);
  uint64_t v20 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for AssetCaches(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  __int128 v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100126450(&qword_1002B4C78);
  uint64_t v13 = swift_allocObject(v12, 192LL, 7LL);
  *(_OWORD *)(v13 + 16) = xmmword_1001C3C10;
  *(void *)(v13 + 56) = type metadata accessor for AbandonedStreamIssueIdentifier(0LL);
  *(void *)(v13 + 64) = &protocol witness table for AbandonedStreamIssueIdentifier;
  sub_10012761C((void *)(v13 + 32));
  AbandonedStreamIssueIdentifier.init()();
  *(void *)(v13 + 96) = type metadata accessor for AVAssetsInLibraryIssueIdentifier(0LL);
  *(void *)(v13 + 104) = &protocol witness table for AVAssetsInLibraryIssueIdentifier;
  sub_10012761C((void *)(v13 + 72));
  AVAssetsInLibraryIssueIdentifier.init()();
  id v14 = [objc_allocWithZone(PFCoreAnalyticsChannel) init];
  *(void *)(v13 + 136) = type metadata accessor for CoreDataEpisodeAssetIssueIdentifier(0LL);
  *(void *)(v13 + 144) = &protocol witness table for CoreDataEpisodeAssetIssueIdentifier;
  sub_10012761C((void *)(v13 + 112));
  uint64_t v15 = CoreDataEpisodeAssetIssueIdentifier.init(analyticsChannel:)(v14);
  uint64_t v16 = static AssetCaches.shared.getter(v15);
  AssetCaches.artwork.getter(v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  CacheDomain.disk.getter(v5);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v5);
  id v17 = v22;
  CacheDomain.DiskCaches.directory.getter(v2);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v2);
  *(void *)(v13 + 176) = type metadata accessor for UnownedImageIssueIdentifier(0LL);
  *(void *)(v13 + 184) = sub_100127210( &qword_1002B4C80,  (uint64_t (*)(uint64_t))&type metadata accessor for UnownedImageIssueIdentifier,  (uint64_t)&protocol conformance descriptor for UnownedImageIssueIdentifier);
  sub_10012761C((void *)(v13 + 152));
  uint64_t result = UnownedImageIssueIdentifier.init(directory:)(v17);
  qword_1002B47F8 = v13;
  return result;
}

id sub_100125F50()
{
  uint64_t v0 = type metadata accessor for DownloadEnvironment(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = &v17[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (qword_1002B47F0 != -1) {
    swift_once(&qword_1002B47F0, sub_100125CA8);
  }
  uint64_t v3 = qword_1002B47F8;
  void v20[3] = type metadata accessor for CompoundDownloadedAssetIssueIdentifier(0LL);
  void v20[4] = &protocol witness table for CompoundDownloadedAssetIssueIdentifier;
  sub_10012761C(v20);
  uint64_t v4 = swift_bridgeObjectRetain(v3);
  CompoundDownloadedAssetIssueIdentifier.init(identifiers:)(v4);
  uint64_t v5 = sub_100126450(&qword_1002B4C58);
  uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1001C3C20;
  *(void *)(v6 + 56) = type metadata accessor for DeletionDownloadConsistencyIssueResolutionStrategy(0LL);
  *(void *)(v6 + 64) = &protocol witness table for DeletionDownloadConsistencyIssueResolutionStrategy;
  sub_10012761C((void *)(v6 + 32));
  DeletionDownloadConsistencyIssueResolutionStrategy.init()();
  v19[3] = type metadata accessor for PrioritizedDownloadConsistencyResolutionStrategy(0LL);
  void v19[4] = &protocol witness table for PrioritizedDownloadConsistencyResolutionStrategy;
  sub_10012761C(v19);
  PrioritizedDownloadConsistencyResolutionStrategy.init(strategies:)(v6);
  id result = [(id)objc_opt_self(MTLibrary) sharedInstance];
  if (result)
  {
    uint64_t v8 = result;
    if (qword_1002B4860 != -1) {
      swift_once(&qword_1002B4860, sub_10016F6AC);
    }
    swift_beginAccess(&static PodcastsStateCoordinator.shared, v17, 0LL, 0LL);
    uint64_t v9 = (void *)static PodcastsStateCoordinator.shared;
    uint64_t v10 = (void *)objc_opt_self(&OBJC_CLASS___MTDB);
    id v11 = v9;
    id v12 = v8;
    id v13 = [v10 sharedInstance];
    id v14 = [v13 privateQueueContext];

    v18[3] = &type metadata for AppDownloadedEffectApplicator;
    unint64_t v15 = sub_100127658();
    v18[0] = v12;
    v18[1] = v11;
    v18[4] = v15;
    void v18[2] = v14;
    static DownloadEnvironment.live.getter();
    id v16 = objc_allocWithZone((Class)type metadata accessor for DownloadConsistency(0LL));
    id result = (id)DownloadConsistency.init(issueIdentifier:resolutionStrategy:effectApplicator:downloadEnvironment:)( v20,  v19,  v18,  v2);
    static DownloadConsistency.application = (uint64_t)result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t *DownloadConsistency.application.unsafeMutableAddressor()
{
  if (qword_1002B4800 != -1) {
    swift_once(&qword_1002B4800, sub_100125F50);
  }
  return &static DownloadConsistency.application;
}

id static DownloadConsistency.application.getter()
{
  if (qword_1002B4800 != -1) {
    swift_once(&qword_1002B4800, sub_100125F50);
  }
  return (id)static DownloadConsistency.application;
}

id sub_100126230(id a1, SEL a2)
{
  if (qword_1002B4800 != -1) {
    swift_once(&qword_1002B4800, sub_100125F50);
  }
  return (id)static DownloadConsistency.application;
}

uint64_t variable initialization expression of ImplicitFollowsDecayCoordinator.debounceQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100126414();
  static DispatchQoS.background.getter();
  unint64_t v15 = _swiftEmptyArrayStorage;
  uint64_t v10 = sub_100127210( (unint64_t *)&qword_1002B4870,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v11 = sub_100126450((uint64_t *)&unk_1002B5660);
  unint64_t v12 = sub_100126490();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v4, v10);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002DLL,  0x80000001002192C0LL,  v9,  v6,  v3,  0LL);
}

unint64_t sub_100126414()
{
  unint64_t result = qword_1002B4868;
  if (!qword_1002B4868)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B4868);
  }

  return result;
}

uint64_t sub_100126450(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_100126490()
{
  unint64_t result = qword_1002B4880;
  if (!qword_1002B4880)
  {
    uint64_t v1 = sub_1001264DC((uint64_t *)&unk_1002B5660);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002B4880);
  }

  return result;
}

uint64_t sub_1001264DC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t variable initialization expression of ImplicitFollowsDecayCoordinator.implicitFollowsEvents()
{
  uint64_t v0 = sub_100126450(&qword_1002B4888);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return PassthroughSubject.init()();
}

void *variable initialization expression of ImplicitFollowsDecayCoordinator.subscriptions()
{
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    return (void *)sub_100126F14((uint64_t)_swiftEmptyArrayStorage);
  }

  else
  {
    return &_swiftEmptySetSingleton;
  }

uint64_t variable initialization expression of ImplicitFollowsDecayCoordinator.delegate()
{
  return 0LL;
}

uint64_t variable initialization expression of FeedManager.systemFuture()
{
  return UninitializedCurrentValueSubject.init()( &type metadata for FeedManager.System,  &type metadata for Never,  &protocol witness table for Never);
}

uint64_t variable initialization expression of FeedManager.queue()
{
  return sub_100126664(0x616E614D64656546LL, 0xEB00000000726567LL);
}

uint64_t variable initialization expression of FeedManager._system()
{
  return 0LL;
}

void *variable initialization expression of FeedManager._pendingRequests()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of FeedManager._wasUpdating()
{
  return 0LL;
}

uint64_t variable initialization expression of NonFollowedShowsSyncProcessor.signpostState()
{
  return 0LL;
}

uint64_t variable initialization expression of NonFollowedShowsSyncProcessor.signpostID()
{
  return sub_100126858((uint64_t (*)(uint64_t))&static OSSignposter.cloudSync.getter);
}

id variable initialization expression of ForegroundSyncUtil.defaults()
{
  return [(id)objc_opt_self(NSUserDefaults) _applePodcastsFoundationSharedUserDefaults];
}

uint64_t variable initialization expression of ForegroundSyncUtil.workQueue()
{
  return sub_100126664(0xD000000000000012LL, 0x80000001002192F0LL);
}

uint64_t sub_100126664(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100126414();
  uint64_t v14 = (*(uint64_t (**)(char *, void, uint64_t))(v11 + 104))( v13,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v10);
  static DispatchQoS.unspecified.getter(v14);
  uint64_t v20 = _swiftEmptyArrayStorage;
  uint64_t v15 = sub_100127210( (unint64_t *)&qword_1002B4870,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v16 = sub_100126450((uint64_t *)&unk_1002B5660);
  unint64_t v17 = sub_100126490();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v4, v15);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(a1, a2, v9, v6, v13, 0LL);
}

id variable initialization expression of ForegroundSyncUtil.syncController()
{
  return [(id)objc_opt_self(MTSyncController) sharedInstance];
}

uint64_t variable initialization expression of EntitledFirstTimeAvailableMigrator.failSilently()
{
  return 1LL;
}

const char *variable initialization expression of UberArtworkResetMigrator.stepIdentifier()
{
  return "com.apple.podcasts.artwork.uber-migration.rdar120006144";
}

uint64_t variable initialization expression of InterestSyncProcessor.signpostID()
{
  return sub_100126858((uint64_t (*)(uint64_t))&static OSSignposter.interests.getter);
}

uint64_t sub_100126858(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = type metadata accessor for OSSignposter(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin();
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1(v4);
  uint64_t v8 = OSSignposter.logHandle.getter(v7);
  OSSignpostID.init(log:)(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

const char *variable initialization expression of EntitledFirstTimeAvailableMigrator.stepIdentifier()
{
  return "com.apple.podcasts.db.firstAvailabilityDate-migration.rdar138352221";
}

void sub_1001268FC(void *a1@<X8>)
{
  *a1 = 0LL;
}

NSNumber sub_100126904()
{
  return Int._bridgeToObjectiveC()();
}

uint64_t sub_10012690C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0LL;
  char v7 = 1;
  uint64_t result = static Int._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  uint64_t v4 = v6;
  char v5 = v7;
  if (v7) {
    uint64_t v4 = 0LL;
  }
  *(void *)a2 = v4;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v5;
  return result;
}

uint64_t sub_10012695C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0LL;
  char v8 = 1;
  char v3 = static Int._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v4 = v7;
  char v5 = v8;
  if (v8) {
    uint64_t v4 = 0LL;
  }
  *(void *)a2 = v4;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v5;
  return v3 & 1;
}

uint64_t sub_1001269B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static Int._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

uint64_t sub_1001269D4()
{
  return Int.hashValue.getter(*v0);
}

uint64_t sub_1001269DC(uint64_t a1)
{
  return static Hasher._hash(seed:_:)(a1, *v1);
}

uint64_t sub_1001269E4(uint64_t a1, uint64_t a2)
{
  return sub_100126B2C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1001269F0(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

uint64_t sub_100126A64(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100126AE0@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_100126B20(uint64_t a1, uint64_t a2)
{
  return sub_100126B2C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100126B2C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  uint64_t v7 = v6;
  uint64_t v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100126B68(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100126BA8(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

void sub_100126C18(void *a1@<X8>)
{
  *a1 = *v1;
}

Swift::Int sub_100126C2C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100126C70()
{
}

Swift::Int sub_100126C98(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void *sub_100126CD8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = 0;
  return result;
}

void *sub_100126CE8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100126CF4(uint64_t a1)
{
  uint64_t v2 = sub_100127210( &qword_1002B4B60,  (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier,  (uint64_t)&unk_1001C3D6C);
  uint64_t v3 = sub_100127210( &qword_1002B4B68,  (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier,  (uint64_t)&unk_1001C3D0C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for Int);
}

uint64_t sub_100126D88(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

BOOL sub_100126E10(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100126E24@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100126E68@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100126E90(uint64_t a1)
{
  uint64_t v2 = sub_100127210( (unint64_t *)&qword_1002B5E90,  (uint64_t (*)(uint64_t))type metadata accessor for OpenURLOptionsKey,  (uint64_t)&unk_1001C3F4C);
  uint64_t v3 = sub_100127210( &qword_1002B4CB0,  (uint64_t (*)(uint64_t))type metadata accessor for OpenURLOptionsKey,  (uint64_t)&unk_1001C3EA0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100126F14(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = (unint64_t)result >> 62;
  if ((unint64_t)result >> 62)
  {
    if (result < 0) {
      uint64_t v6 = result;
    }
    else {
      uint64_t v6 = result & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(result);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    uint64_t result = swift_bridgeObjectRelease(v1);
    if (v3)
    {
LABEL_3:
      sub_100126450(&qword_1002B4C40);
      uint64_t result = static _SetStorage.allocate(capacity:)(v3);
      uint64_t v4 = (void *)result;
      uint64_t v24 = v1;
      if (!v2) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v3 = *(void *)((result & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
  }

  uint64_t v4 = &_swiftEmptySetSingleton;
  uint64_t v24 = v1;
  if (!v2)
  {
LABEL_4:
    uint64_t v5 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v5) {
      return (uint64_t)v4;
    }
    goto LABEL_15;
  }

void type metadata accessor for UIBackgroundTaskIdentifier(uint64_t a1)
{
}

void type metadata accessor for MTEpisodePubDateLimit(uint64_t a1)
{
}

void type metadata accessor for MTEpisodeContextSortType(uint64_t a1)
{
}

uint64_t sub_1001271E4()
{
  return sub_100127210( &qword_1002B4B48,  (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier,  (uint64_t)&unk_1001C3CD0);
}

uint64_t sub_100127210(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100127250()
{
  return sub_100127210( &qword_1002B4B50,  (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier,  (uint64_t)&unk_1001C3CA4);
}

uint64_t sub_10012727C()
{
  return sub_100127210( &qword_1002B4B58,  (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier,  (uint64_t)&unk_1001C3D40);
}

Swift::Int sub_1001272A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100126450((uint64_t *)&unk_1002B6730);
    uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
    uint64_t v4 = 0LL;
    uint64_t v5 = v3 + 56;
    uint64_t v27 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v27 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)(v28, *(void *)(v3 + 40));
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(v28, v8, v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1LL << *(_BYTE *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1LL << v11;
      if (((1LL << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        unint64_t v16 = (void *)(v15 + 16 * v11);
        uint64_t v17 = v16[1];
        BOOL v18 = *v16 == v8 && v17 == v7;
        if (v18 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, v7, 0LL), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease(v7);
          goto LABEL_4;
        }

        uint64_t v19 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v19;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1LL << v11;
          if ((v13 & (1LL << v11)) == 0) {
            break;
          }
          uint64_t v20 = (void *)(v15 + 16 * v11);
          uint64_t v21 = v20[1];
          if (*v20 != v8 || v21 != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, v7, 0LL);
            if ((result & 1) == 0) {
              continue;
            }
          }

          goto LABEL_3;
        }
      }

      *(void *)(v5 + 8 * v12) = v14 | v13;
      uint64_t v23 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      void *v23 = v8;
      v23[1] = v7;
      uint64_t v24 = *(void *)(v3 + 16);
      BOOL v25 = __OFADD__(v24, 1LL);
      uint64_t v26 = v24 + 1;
      if (v25)
      {
        __break(1u);
        return result;
      }

      *(void *)(v3 + 16) = v26;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }

  return (Swift::Int)&_swiftEmptySetSingleton;
}

Swift::Int sub_100127448(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100126450((uint64_t *)&unk_1002B4C30);
    uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
    uint64_t v4 = 0LL;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      sub_1001275AC(v6 + 40 * v4, (uint64_t)v21);
      Swift::Int result = AnyHashable._rawHashValue(seed:)(*(void *)(v3 + 40));
      uint64_t v8 = ~(-1LL << *(_BYTE *)(v3 + 32));
      unint64_t v9 = result & v8;
      unint64_t v10 = (result & (unint64_t)v8) >> 6;
      uint64_t v11 = *(void *)(v5 + 8 * v10);
      uint64_t v12 = 1LL << (result & v8);
      if ((v12 & v11) != 0)
      {
        while (1)
        {
          sub_1001275AC(*(void *)(v3 + 48) + 40 * v9, (uint64_t)v20);
          char v13 = static AnyHashable.== infix(_:_:)(v20, v21);
          Swift::Int result = sub_1001275E8((uint64_t)v20);
          if ((v13 & 1) != 0) {
            break;
          }
          unint64_t v9 = (v9 + 1) & v8;
          unint64_t v10 = v9 >> 6;
          uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
          uint64_t v12 = 1LL << v9;
          if ((v11 & (1LL << v9)) == 0) {
            goto LABEL_8;
          }
        }

        sub_1001275E8((uint64_t)v21);
      }

      else
      {
LABEL_8:
        *(void *)(v5 + 8 * v10) = v12 | v11;
        uint64_t v14 = *(void *)(v3 + 48) + 40 * v9;
        __int128 v15 = v21[0];
        __int128 v16 = v21[1];
        *(void *)(v14 + 32) = v22;
        *(_OWORD *)uint64_t v14 = v15;
        *(_OWORD *)(v14 + 16) = v16;
        uint64_t v17 = *(void *)(v3 + 16);
        BOOL v18 = __OFADD__(v17, 1LL);
        uint64_t v19 = v17 + 1;
        if (v18)
        {
          __break(1u);
          return result;
        }

        *(void *)(v3 + 16) = v19;
      }

      if (++v4 == v1) {
        return v3;
      }
    }
  }

  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_1001275AC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1001275E8(uint64_t a1)
{
  return a1;
}

void *sub_10012761C(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

unint64_t sub_100127658()
{
  unint64_t result = qword_1002B4C60;
  if (!qword_1002B4C60)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AppDownloadedEffectApplicator,  &type metadata for AppDownloadedEffectApplicator);
    atomic_store(result, (unint64_t *)&qword_1002B4C60);
  }

  return result;
}

void type metadata accessor for OpenURLOptionsKey(uint64_t a1)
{
}

uint64_t sub_1001276B0()
{
  return sub_100127210( &qword_1002B4C90,  (uint64_t (*)(uint64_t))type metadata accessor for OpenURLOptionsKey,  (uint64_t)&unk_1001C3E64);
}

uint64_t sub_1001276DC()
{
  return sub_100127210( &qword_1002B4C98,  (uint64_t (*)(uint64_t))type metadata accessor for OpenURLOptionsKey,  (uint64_t)"\t$\b");
}

uint64_t sub_100127708()
{
  return sub_100127210( (unint64_t *)&unk_1002B4CA0,  (uint64_t (*)(uint64_t))type metadata accessor for OpenURLOptionsKey,  (uint64_t)&unk_1001C3ED4);
}

void type metadata accessor for MTBookmarksSyncType(uint64_t a1)
{
}

void type metadata accessor for MTSubscriptionSyncType(uint64_t a1)
{
}

void sub_10012775C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t sub_1001277A0()
{
  return sub_100127210( &qword_1002B4CC8,  (uint64_t (*)(uint64_t))type metadata accessor for MTSubscriptionSyncType,  (uint64_t)&unk_1001C4028);
}

uint64_t sub_1001277CC()
{
  return sub_100127210( (unint64_t *)&unk_1002B4CD0,  (uint64_t (*)(uint64_t))type metadata accessor for MTBookmarksSyncType,  (uint64_t)&unk_1001C40D4);
}

uint64_t sub_100127898()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001278BC()
{
  return sub_100166774(*(void *)(v0 + 16));
}

id sub_1001278C4(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
  uint64_t v6 = (NSBundle *)[v5 mainBundle];
  v7._countAndFlagsBits = 0xD000000000000018LL;
  v46._object = (void *)0x80000001002198A0LL;
  v7._object = (void *)0x8000000100219880LL;
  v8._countAndFlagsBits = 0LL;
  v8._object = (void *)0xE000000000000000LL;
  v46._countAndFlagsBits = 0xD000000000000014LL;
  Swift::String v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, v6, v8, v46);

  uint64_t v10 = sub_100126450((uint64_t *)&unk_1002B5E60);
  uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_1001C3C20;
  id v12 = [a1 title];
  if (v12)
  {
    char v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    unint64_t v16 = v15;
  }

  else
  {
    uint64_t v14 = 0LL;
    unint64_t v16 = 0LL;
  }

  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_100127C90();
  if (v16) {
    uint64_t v17 = v14;
  }
  else {
    uint64_t v17 = 0LL;
  }
  if (v16) {
    unint64_t v18 = v16;
  }
  else {
    unint64_t v18 = 0xE000000000000000LL;
  }
  *(void *)(v11 + 32) = v17;
  *(void *)(v11 + 40) = v18;
  String.init(format:_:)(v9._countAndFlagsBits, v9._object, v11);
  uint64_t v20 = v19;
  swift_bridgeObjectRelease(v9._object);
  uint64_t v21 = (NSBundle *)[v5 mainBundle];
  v47._object = (void *)0xE000000000000000LL;
  v22._countAndFlagsBits = 0x6C65636E6143LL;
  v22._object = (void *)0xE600000000000000LL;
  v23._countAndFlagsBits = 0LL;
  v23._object = (void *)0xE000000000000000LL;
  v47._countAndFlagsBits = 0LL;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, (Swift::String_optional)0, v21, v23, v47)._object;

  BOOL v25 = (NSBundle *)[v5 mainBundle];
  v48._object = (void *)0xE000000000000000LL;
  v26._countAndFlagsBits = 0x53206574656C6544LL;
  v26._object = (void *)0xEE006E6F69746174LL;
  v27._countAndFlagsBits = 0LL;
  v27._object = (void *)0xE000000000000000LL;
  v48._countAndFlagsBits = 0LL;
  id v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, (Swift::String_optional)0, v25, v27, v48)._object;

  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  id v30 =  [(id)objc_opt_self(UIAlertController) alertControllerWithTitle:v29 message:0 preferredStyle:1];

  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  id v32 = (void *)objc_opt_self(&OBJC_CLASS___UIAlertAction);
  id v33 = [v32 actionWithTitle:v31 style:1 handler:0];

  [v30 addAction:v33];
  uint64_t v34 = (void *)swift_allocObject(&unk_100246328, 48LL, 7LL);
  v34[2] = a2;
  v34[3] = a1;
  void v34[4] = a3;
  v34[5] = a4;
  id v35 = a2;
  id v36 = a1;
  swift_retain(a4);
  NSString v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28);
  aBlock[4] = sub_100127D08;
  __int128 v45 = v34;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100138C20;
  aBlock[3] = &unk_100246340;
  id v38 = _Block_copy(aBlock);
  swift_release(v45);
  id v39 = [v32 actionWithTitle:v37 style:2 handler:v38];
  _Block_release(v38);

  [v30 addAction:v39];
  return v30;
}

unint64_t sub_100127C90()
{
  unint64_t result = qword_1002B4DA0;
  if (!qword_1002B4DA0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1002B4DA0);
  }

  return result;
}

uint64_t sub_100127CD4()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100127D08()
{
  return (*(uint64_t (**)(id))(v0 + 32))([*(id *)(v0 + 16) deletePlaylist:*(void *)(v0 + 24)]);
}

uint64_t sub_100127D38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100127D48(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id MTPlayerItem.init(podcastEpisode:podcast:)(void *a1, void *a2)
{
  id v5 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)) initWithPodcastEpisode:a1 podcast:a2];

  return v5;
}

void MTPlayerItem.init(podcastEpisode:podcast:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100126450(&qword_1002B4DA8);
  __chkstk_darwin(v6);
  uint64_t v486 = (uint64_t)&v462 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v496 = sub_100126450(&qword_1002B4DB0);
  uint64_t v8 = __chkstk_darwin(v496);
  v485 = (uint64_t *)((char *)&v462 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = __chkstk_darwin(v8);
  v484 = (uint64_t *)((char *)&v462 - v11);
  __chkstk_darwin(v10);
  v493 = (uint64_t *)((char *)&v462 - v12);
  double v497 = COERCE_DOUBLE(type metadata accessor for URL(0LL));
  uint64_t v490 = *(void *)(*(void *)&v497 - 8LL);
  __chkstk_darwin(*(void *)&v497);
  v465 = (char *)&v462 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v479 = type metadata accessor for PodcastEpisodeAttributes.MediaKind(0LL);
  uint64_t v478 = *(void *)(v479 - 8);
  uint64_t v14 = __chkstk_darwin(v479);
  v487 = (char *)&v462 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  *(void *)&double v495 = (char *)&v462 - v16;
  uint64_t v483 = type metadata accessor for PodcastEpisodeAttributes.EpisodeType(0LL);
  uint64_t v482 = *(void *)(v483 - 8);
  __chkstk_darwin(v483);
  v477 = (char *)&v462 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for Date(0LL);
  uint64_t v491 = *(void *)(v18 - 8);
  uint64_t v492 = v18;
  __chkstk_darwin(v18);
  v464 = (char *)&v462 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for PodcastEpisodeAttributes.ChannelKind(0LL);
  uint64_t v480 = *(void *)(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20);
  v481 = (char *)&v462 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v462 - v23;
  uint64_t v468 = type metadata accessor for PodcastAttributes.DisplayType(0LL);
  uint64_t v467 = *(void *)(v468 - 8);
  __chkstk_darwin(v468);
  v466 = (char *)&v462 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_100126450(&qword_1002B4FE0);
  uint64_t v27 = __chkstk_darwin(v26);
  v475 = (char *)&v462 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __chkstk_darwin(v27);
  v476 = (char *)&v462 - v30;
  __chkstk_darwin(v29);
  id v32 = (char *)&v462 - v31;
  uint64_t v33 = sub_100126450(&qword_1002B4DB8);
  uint64_t v34 = __chkstk_darwin(v33);
  v469 = (char *)&v462 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = __chkstk_darwin(v34);
  v472 = (char *)&v462 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  v463 = (char *)&v462 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  __int16 v42 = (char *)&v462 - v41;
  __chkstk_darwin(v40);
  uint64_t v500 = (uint64_t)&v462 - v43;
  uint64_t v44 = type metadata accessor for PriceType(0LL);
  uint64_t v488 = *(void *)(v44 - 8);
  uint64_t v489 = v44;
  __chkstk_darwin(v44);
  Swift::String v46 = (char *)&v462 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a2)
  {
    id v498 = 0LL;
    uint64_t v57 = 0LL;
    LODWORD(v494) = 1;
    goto LABEL_19;
  }

  Swift::String v47 = a2;
  id v48 = a2;
  uint64_t v49 = ServerPodcastBase.relationships.getter();

  if (!v49) {
    goto LABEL_17;
  }
  uint64_t v50 = PodcastRelationships.channel.getter();
  uint64_t v51 = swift_release(v49);
  if (!v50) {
    goto LABEL_17;
  }
  uint64_t v52 = PodcastChannelRelationshipContainer.data.getter(v51);
  swift_release(v50);
  if (!((unint64_t)v52 >> 62))
  {
    if (*(void *)((v52 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_6;
    }
LABEL_16:
    swift_bridgeObjectRelease(v52);
LABEL_17:
    id v498 = 0LL;
    uint64_t v57 = 0LL;
    LODWORD(v494) = 1;
    goto LABEL_18;
  }

  if (v52 < 0) {
    uint64_t v58 = v52;
  }
  else {
    uint64_t v58 = v52 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v52);
  uint64_t v59 = _CocoaArrayWrapper.endIndex.getter(v58);
  swift_bridgeObjectRelease(v52);
  if (!v59) {
    goto LABEL_16;
  }
LABEL_6:
  if ((v52 & 0xC000000000000001LL) != 0)
  {
    id v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v52);
  }

  else
  {
    if (!*(void *)((v52 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      goto LABEL_224;
    }

    id v53 = *(id *)(v52 + 32);
  }

  __int128 v54 = v53;
  swift_bridgeObjectRelease(v52);
  if (!v54) {
    goto LABEL_17;
  }
  id v55 = v54;
  uint64_t v56 = ((uint64_t (*)(void))ServerChannel.attributes.getter)();
  id v498 = v55;

  LOBYTE(v55) = ChannelAttributes.isSubscribed.getter();
  swift_release(v56);
  LODWORD(v494) = 0;
  uint64_t v57 = v55 & 1;
LABEL_18:
  a2 = v47;
LABEL_19:
  uint64_t v60 = ServerPodcastEpisode.determineBestChannelMetaData(isSubscriptionActive:)(v46, v57);
  v499 = v46;
  if (!v61)
  {
    id v71 = (id)_MTLogCategoryPlayback(v60, 0LL);
    if (v71)
    {
      __int128 v72 = v71;
      uint64_t v73 = static os_log_type_t.error.getter();
      uint64_t v74 = sub_100126450((uint64_t *)&unk_1002B5E60);
      uint64_t v75 = swift_allocObject(v74, 72LL, 7LL);
      *(_OWORD *)(v75 + 16) = xmmword_1001C3C20;
      uint64_t v76 = ServerPodcastEpisode.id.getter();
      uint64_t v78 = v77;
      *(void *)(v75 + 56) = &type metadata for String;
      *(void *)(v75 + 64) = sub_100127C90();
      *(void *)(v75 + 32) = v76;
      *(void *)(v75 + 40) = v78;
      os_log(_:dso:log:type:_:)("No stream URL for episode %@", 28LL, 2LL, &_mh_execute_header, v72, v73, v75);

      swift_bridgeObjectRelease(v75);
      (*(void (**)(char *, uint64_t))(v488 + 8))(v499, v489);
      uint64_t ObjectType = swift_getObjectType(v3);
      swift_deallocPartialClassInstance(v3, ObjectType, 8LL, 7LL);
      return;
    }

    goto LABEL_226;
  }

  uint64_t v64 = v61;
  double v470 = v62;
  int v471 = v63;
  URL.init(string:)(v60);
  swift_bridgeObjectRelease(v64);
  id v473 = a2;
  uint64_t v65 = ((uint64_t (*)(void))dispatch thunk of ServerPodcastEpisode.relationships.getter)();
  if (v65)
  {
    float v66 = (void *)v65;
    id v67 = a2;
    __int128 v68 = (void *)PodcastEpisodeRelationships.podcast.getter();

    if (v68)
    {
      uint64_t v69 = PodcastRelationshipContainer.data.getter();

      if ((unint64_t)v69 >> 62)
      {
        if (v69 < 0) {
          uint64_t v80 = v69;
        }
        else {
          uint64_t v80 = v69 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v69);
        uint64_t v81 = _CocoaArrayWrapper.endIndex.getter(v80);
        swift_bridgeObjectRelease(v69);
        if (v81) {
          goto LABEL_24;
        }
      }

      else if (*(void *)((v69 & 0xFFFFFFFFFFFFF8LL) + 0x10))
      {
LABEL_24:
        if ((v69 & 0xC000000000000001LL) != 0)
        {
          id v70 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v69);
          goto LABEL_27;
        }

        if (*(void *)((v69 & 0xFFFFFFFFFFFFF8LL) + 0x10))
        {
          id v70 = *(id *)(v69 + 32);
LABEL_27:
          a2 = v70;

          swift_bridgeObjectRelease(v69);
          goto LABEL_36;
        }

LABEL_224:
        __break(1u);
LABEL_225:
        __break(1u);
LABEL_226:
        __break(1u);
        goto LABEL_227;
      }

      swift_bridgeObjectRelease(v69);
    }

    a2 = v67;
  }

LABEL_36:
  id v501 = a2;
  sub_10012A418(v500, (uint64_t)v42, &qword_1002B4DB8);
  uint64_t v82 = v490;
  double v83 = v497;
  v474 = *(unsigned int (**)(char *, uint64_t, void))(v490 + 48);
  if (v474(v42, 1LL, *(void *)&v497) == 1)
  {
    unint64_t v85 = 0LL;
  }

  else
  {
    URL._bridgeToObjectiveC()(v84);
    unint64_t v85 = v86;
    (*(void (**)(char *, double))(v82 + 8))(v42, COERCE_DOUBLE(*(void *)&v83));
  }

  id v87 = [v3 initWithUrl:v85];

  id v88 = v87;
  ServerPodcastEpisode.id.getter();
  uint64_t v90 = v89;
  NSString v91 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v90);
  id v92 = [v91 longLongValue];

  [v88 setEpisodeStoreId:v92];
  id v93 = v88;
  id v502 = a1;
  uint64_t v94 = ((uint64_t (*)(void))ServerPodcastEpisode.attributes.getter)();
  PodcastEpisodeAttributes.name.getter();
  uint64_t v96 = v95;
  swift_release(v94);
  if (v96)
  {
    NSString v97 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v96);
  }

  else
  {
    NSString v97 = 0LL;
  }

  [v93 setTitle:v97];

  uint64_t v98 = ((uint64_t (*)(void))ServerPodcastEpisode.attributes.getter)();
  PodcastEpisodeAttributes.guid.getter();
  uint64_t v100 = v99;
  swift_release(v98);
  if (v100)
  {
    NSString v101 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v100);
  }

  else
  {
    NSString v101 = 0LL;
  }

  [v93 setEpisodeGuid:v101];

  uint64_t v102 = ((uint64_t (*)(void))ServerPodcastEpisode.attributes.getter)();
  NSString v103 = (NSString)PodcastEpisodeAttributes.description.getter();
  uint64_t v104 = swift_release(v102);
  if (v103)
  {
    ServerDescription.standard.getter(v104);
    uint64_t v106 = v105;
    swift_release(v103);
    if (v106)
    {
      NSString v103 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v106);
    }

    else
    {
      NSString v103 = 0LL;
    }
  }

  [v93 setSubtitle:v103];

  id v107 = v501;
  if (v501)
  {
    id v108 = v93;
    id v109 = v107;
    uint64_t v110 = ServerPodcastBase.attributes.getter();

    if (v110)
    {
      PodcastAttributes.name.getter();
      unint64_t v112 = v111;
      swift_release(v110);
      if (v112) {
        goto LABEL_55;
      }
    }
  }

  else
  {
    id v113 = v93;
  }

  swift_bridgeObjectRelease(0LL);
  unint64_t v112 = 0xE000000000000000LL;
LABEL_55:
  NSString v114 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v112);
  [v93 setAuthor:v114];

  uint64_t v115 = ((uint64_t (*)(void))ServerPodcastEpisode.attributes.getter)();
  PodcastEpisodeAttributes.releaseDateResolved.getter();
  swift_release(v115);
  uint64_t v117 = v491;
  uint64_t v116 = v492;
  id v118 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v491 + 48);
  unsigned int v119 = v118(v32, 1LL, v492);
  v462 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v118;
  if (v119 == 1)
  {
    Class isa = 0LL;
  }

  else
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v117 + 8))(v32, v116);
  }

  objc_msgSend(v93, "setPubDate:", isa, v462);

  uint64_t v121 = ((uint64_t (*)(void))ServerPodcastEpisode.attributes.getter)();
  uint64_t v505 = v121;
  uint64_t v122 = type metadata accessor for PodcastEpisodeAttributes(0LL);
  char v123 = MediaAttributes.contentRatingResolved.getter(v122, &protocol witness table for PodcastEpisodeAttributes);
  swift_release(v121);
  uint64_t v124 = ContentRating.rawValue.getter(v123 & 1);
  uint64_t v126 = v125;
  char v127 = 1;
  uint64_t v129 = ContentRating.rawValue.getter(1LL);
  uint64_t v130 = v128;
  if (v124 != v129 || (uint64_t v131 = v126, v126 != v128))
  {
    char v127 = _stringCompareWithSmolCheck(_:_:expecting:)(v124, v126, v129, v128, 0LL);
    uint64_t v131 = v130;
  }

  swift_bridgeObjectRelease(v126);
  swift_bridgeObjectRelease(v131);
  [v93 setIsExplicit:v127 & 1];

  id v132 = v93;
  PriceType.rawValue.getter();
  uint64_t v134 = v133;
  NSString v135 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v134);
  [v132 setPriceType:v135];

  id v136 = v501;
  if (v501)
  {
    id v137 = v132;
    id v138 = v136;
    NSString v139 = (NSString)ServerPodcastBase.attributes.getter();

    if (v139)
    {
      __int128 v140 = v466;
      PodcastAttributes.displayTypeResolved.getter();
      uint64_t v141 = swift_release(v139);
      PodcastAttributes.DisplayType.rawValue.getter(v141);
      uint64_t v143 = v142;
      (*(void (**)(char *, uint64_t))(v467 + 8))(v140, v468);
      NSString v139 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v143);
    }
  }

  else
  {
    id v144 = v132;
    NSString v139 = 0LL;
  }

  [v132 setPodcastDisplayType:v139];

  double v145 = v470 / 1000.0;
  if ((v471 & 1) != 0) {
    double v145 = 0.0;
  }
  [v132 setDuration:v145];
  if ((v494 & 1) != 0)
  {
    id v146 = v132;
    uint64_t v147 = 0LL;
  }

  else
  {
    id v148 = v498;
    uint64_t v149 = ServerChannel.attributes.getter(v132);

    LOBYTE(v14_Block_object_dispose(va, 8) = ChannelAttributes.isSubscribed.getter();
    swift_release(v149);
    uint64_t v147 = v148 & 1;
  }

  uint64_t v150 = ServerPodcastEpisode.attributes.getter([v132 setPaidSubscriptionActive:v147]);
  uint64_t v151 = PodcastEpisodeAttributes.channelKind.getter();
  uint64_t v153 = v152;
  swift_release(v150);
  uint64_t v154 = v480;
  __int16 v155 = *(uint64_t (**)(char *, void, uint64_t))(v480 + 104);
  uint64_t v156 = v155(v24, enum case for PodcastEpisodeAttributes.ChannelKind.music(_:), v20);
  uint64_t v157 = PodcastEpisodeAttributes.ChannelKind.rawValue.getter(v156);
  uint64_t v159 = v158;
  v160 = *(void (**)(char *, uint64_t))(v154 + 8);
  v160(v24, v20);
  if (v153)
  {
    __int16 v161 = v487;
    if (v151 == v157 && v153 == v159) {
      char v162 = 1;
    }
    else {
      char v162 = _stringCompareWithSmolCheck(_:_:expecting:)(v151, v153, v157, v159, 0LL);
    }
    swift_bridgeObjectRelease(v153);
  }

  else
  {
    char v162 = 0;
    __int16 v161 = v487;
  }

  swift_bridgeObjectRelease(v159);
  uint64_t v163 = ServerPodcastEpisode.attributes.getter([v132 setIsAppleMusicEpisode:v162 & 1]);
  uint64_t v164 = PodcastEpisodeAttributes.channelKind.getter();
  uint64_t v166 = v165;
  swift_release(v163);
  v167 = v481;
  uint64_t v168 = v155(v481, enum case for PodcastEpisodeAttributes.ChannelKind.news(_:), v20);
  uint64_t v169 = PodcastEpisodeAttributes.ChannelKind.rawValue.getter(v168);
  uint64_t v171 = v170;
  v160(v167, v20);
  if (v166)
  {
    uint64_t v172 = (uint64_t)v476;
    if (v164 == v169 && v166 == v171) {
      char v173 = 1;
    }
    else {
      char v173 = _stringCompareWithSmolCheck(_:_:expecting:)(v164, v166, v169, v171, 0LL);
    }
    id v174 = v501;
    swift_bridgeObjectRelease(v166);
  }

  else
  {
    char v173 = 0;
    id v174 = v501;
    uint64_t v172 = (uint64_t)v476;
  }

  swift_bridgeObjectRelease(v171);
  [v132 setIsAppleNewsEpisode:v173 & 1];

  if ((v494 & 1) == 0)
  {
    id v175 = v498;
    uint64_t v176 = ServerChannel.id.getter();
    unint64_t v178 = v177;

    uint64_t v179 = sub_10012A144(v176, v178);
    if ((v180 & 1) == 0)
    {
      [v132 setChannelStoreId:v179];
      id v181 = v132;
      v182 = v463;
      ServerPodcastEpisode.alternatePaidURL()();
      double v183 = v497;
      if (v474(v182, 1LL, *(void *)&v497) == 1)
      {
        v185 = 0LL;
      }

      else
      {
        URL._bridgeToObjectiveC()(v184);
        v185 = v186;
        (*(void (**)(char *, double))(v490 + 8))(v182, COERCE_DOUBLE(*(void *)&v183));
      }

      [v181 setAlternatePaidURL:v185];
    }
  }

  id v187 = v132;
  uint64_t v188 = ServerPodcastEpisode.id.getter();
  uint64_t v190 = sub_10012A144(v188, v189);
  if ((v191 & 1) != 0) {
    uint64_t v192 = 0LL;
  }
  else {
    uint64_t v192 = v190;
  }
  [v187 setEpisodeStoreId:v192];

  id v193 = v187;
  if (v174)
  {
    id v194 = v174;
    uint64_t v195 = ServerPodcastBase.id.getter();
    unint64_t v197 = v196;
  }

  else
  {
    unint64_t v197 = 0xE100000000000000LL;
    uint64_t v195 = 48LL;
  }

  uint64_t v198 = sub_10012A144(v195, v197);
  if ((v199 & 1) != 0) {
    uint64_t v200 = 0LL;
  }
  else {
    uint64_t v200 = v198;
  }
  [v187 setPodcastStoreId:v200];

  uint64_t v202 = ServerPodcastEpisode.attributes.getter(v201);
  uint64_t v203 = PodcastEpisodeAttributes.seasonNumber.getter();
  char v205 = v204;
  uint64_t v206 = swift_release(v202);
  if ((v205 & 1) != 0) {
    uint64_t v203 = 0LL;
  }
  uint64_t v207 = ServerPodcastEpisode.attributes.getter(v206);
  uint64_t v208 = PodcastEpisodeAttributes.episodeNumber.getter();
  char v210 = v209;
  swift_release(v207);
  if ((v210 & 1) != 0) {
    uint64_t v208 = 0LL;
  }
  if (v174)
  {
    NSString v211 = v174;
    uint64_t v212 = ServerPodcastBase.attributes.getter();
    if (v212)
    {
      uint64_t v213 = v212;
      char v214 = PodcastAttributes.isSerialShowTypeInFeed.getter();
      swift_release(v213);
      if ((v214 & 1) != 0)
      {
        if (v203 > 0)
        {
          v215 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
          id v216 = v187;
          v217 = (NSBundle *)[v215 mainBundle];
          if (v208 < 1)
          {
            v509._object = (void *)0xE000000000000000LL;
            v450._object = (void *)0x8000000100219960LL;
            v450._uint64_t countAndFlagsBits = 0xD000000000000014LL;
            v451._uint64_t countAndFlagsBits = 0LL;
            v451._object = (void *)0xE000000000000000LL;
            v509._uint64_t countAndFlagsBits = 0LL;
            Swift::String v452 = NSLocalizedString(_:tableName:bundle:value:comment:)( v450,  (Swift::String_optional)0,  v217,  v451,  v509);
            uint64_t countAndFlagsBits = v452._countAndFlagsBits;
            object = v452._object;

            uint64_t v453 = sub_100126450((uint64_t *)&unk_1002B5E60);
            uint64_t v224 = swift_allocObject(v453, 72LL, 7LL);
            *(_OWORD *)(v224 + 16) = xmmword_1001C3C20;
            *(void *)(v224 + 56) = &type metadata for Int;
            *(void *)(v224 + 64) = &protocol witness table for Int;
            *(void *)(v224 + 32) = v203;
          }

          else
          {
            v218._uint64_t countAndFlagsBits = 0xD000000000000020LL;
            v507._object = (void *)0xE000000000000000LL;
            v218._object = (void *)0x8000000100219980LL;
            v219._uint64_t countAndFlagsBits = 0LL;
            v219._object = (void *)0xE000000000000000LL;
            v507._uint64_t countAndFlagsBits = 0LL;
            Swift::String v220 = NSLocalizedString(_:tableName:bundle:value:comment:)( v218,  (Swift::String_optional)0,  v217,  v219,  v507);
            uint64_t countAndFlagsBits = v220._countAndFlagsBits;
            object = v220._object;

            uint64_t v223 = sub_100126450((uint64_t *)&unk_1002B5E60);
            uint64_t v224 = swift_allocObject(v223, 112LL, 7LL);
            *(_OWORD *)(v224 + 16) = xmmword_1001C4150;
            *(void *)(v224 + 56) = &type metadata for Int;
            *(void *)(v224 + 64) = &protocol witness table for Int;
            *(void *)(v224 + 32) = v203;
            *(void *)(v224 + 96) = &type metadata for Int;
            *(void *)(v224 + 104) = &protocol witness table for Int;
            *(void *)(v224 + 72) = v208;
          }

          static String.localizedStringWithFormat(_:_:)(countAndFlagsBits, object, v224);
          uint64_t v455 = v454;
          swift_bridgeObjectRelease(object);
          swift_bridgeObjectRelease(v224);
          NSString v236 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v455);
          [v216 setAlbum:v236];

          id v174 = v501;
          uint64_t v235 = v478;
          __int16 v161 = v487;
          goto LABEL_119;
        }

        if (v208 > 0)
        {
          v225 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
          id v226 = v187;
          v227 = (NSBundle *)[v225 mainBundle];
          v228._uint64_t countAndFlagsBits = 0xD000000000000015LL;
          v508._object = (void *)0xE000000000000000LL;
          v228._object = (void *)0x8000000100219940LL;
          v229._uint64_t countAndFlagsBits = 0LL;
          v229._object = (void *)0xE000000000000000LL;
          v508._uint64_t countAndFlagsBits = 0LL;
          Swift::String v230 = NSLocalizedString(_:tableName:bundle:value:comment:)(v228, (Swift::String_optional)0, v227, v229, v508);

          uint64_t v231 = sub_100126450((uint64_t *)&unk_1002B5E60);
          uint64_t v232 = swift_allocObject(v231, 72LL, 7LL);
          *(_OWORD *)(v232 + 16) = xmmword_1001C3C20;
          *(void *)(v232 + 56) = &type metadata for Int;
          *(void *)(v232 + 64) = &protocol witness table for Int;
          *(void *)(v232 + 32) = v208;
          static String.localizedStringWithFormat(_:_:)(v230._countAndFlagsBits, v230._object, v232);
          uint64_t v234 = v233;
          uint64_t v235 = v478;
          swift_bridgeObjectRelease(v230._object);
          swift_bridgeObjectRelease(v232);
          NSString v236 = String._bridgeToObjectiveC()();
          uint64_t v237 = v234;
          __int16 v161 = v487;
          swift_bridgeObjectRelease(v237);
          [v226 setAlbum:v236];

          id v174 = v501;
          goto LABEL_119;
        }
      }
    }

    id v174 = v501;
  }

  NSString v236 = v187;
  id v238 = [v236 pubDate];
  if (v238)
  {
    v239 = v238;
    v240 = v475;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v238);

    uint64_t v241 = (uint64_t)v240;
    uint64_t v242 = 0LL;
    uint64_t v243 = v492;
  }

  else
  {
    uint64_t v242 = 1LL;
    uint64_t v243 = v492;
    uint64_t v241 = (uint64_t)v475;
  }

  uint64_t v244 = v491;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v491 + 56))(v241, v242, 1LL, v243);
  sub_10012A45C(v241, v172, &qword_1002B4FE0);
  if (v462(v172, 1LL, v243))
  {
    sub_10012A4A0(v172, &qword_1002B4FE0);
    NSString v211 = 0LL;
  }

  else
  {
    v245 = v464;
    (*(void (**)(char *, uint64_t, uint64_t))(v244 + 16))(v464, v172, v243);
    sub_10012A4A0(v172, &qword_1002B4FE0);
    v246 = Date.verboseDisplayStringWithoutTime()()._object;
    (*(void (**)(char *, uint64_t))(v244 + 8))(v245, v243);
    NSString v211 = String._bridgeToObjectiveC()();
    v247 = v246;
    id v174 = v501;
    swift_bridgeObjectRelease(v247);
  }

  [v236 setAlbum:v211];
  uint64_t v235 = v478;
LABEL_119:

  [v187 setSeasonNumber:v203];
  [v187 setEpisodeNumber:v208];
  if (v174)
  {
    id v248 = v187;
    id v249 = v174;
    uint64_t v250 = ServerPodcastBase.attributes.getter();

    uint64_t v251 = v479;
    v252 = v477;
    if (v250)
    {
      char v253 = PodcastAttributes.isSerialShowTypeInFeed.getter();
      swift_release(v250);
    }

    else
    {
      char v253 = 0;
    }
  }

  else
  {
    id v254 = v187;
    char v253 = 0;
    uint64_t v251 = v479;
    v252 = v477;
  }

  [v187 setPodcastIsSerial:v253 & 1];

  uint64_t v256 = ServerPodcastEpisode.attributes.getter(v255);
  PodcastEpisodeAttributes.episodeType.getter();
  swift_release(v256);
  uint64_t v257 = v482;
  uint64_t v258 = v483;
  int v259 = (*(uint64_t (**)(char *, uint64_t))(v482 + 88))(v252, v483);
  if (v259 == enum case for PodcastEpisodeAttributes.EpisodeType.full(_:))
  {
    [v187 setEpisodeType:0];
  }

  else if (v259 == enum case for PodcastEpisodeAttributes.EpisodeType.trailer(_:))
  {
    [v187 setEpisodeType:1];
  }

  else if (v259 == enum case for PodcastEpisodeAttributes.EpisodeType.bonus(_:))
  {
    [v187 setEpisodeType:2];
  }

  else
  {
    [v187 setEpisodeType:0];
    (*(void (**)(char *, uint64_t))(v257 + 8))(v252, v258);
  }

  id v260 = v187;
  uint64_t v261 = ServerPodcastEpisode.attributes.getter(v260);
  NSString v262 = (NSString)PodcastEpisodeAttributes.description.getter();
  uint64_t v263 = swift_release(v261);
  if (v262)
  {
    ServerDescription.standard.getter(v263);
    uint64_t v265 = v264;
    swift_release(v262);
    if (v265)
    {
      NSString v262 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v265);
    }

    else
    {
      NSString v262 = 0LL;
    }
  }

  [v260 setItemDescription:v262];

  uint64_t v267 = ServerPodcastEpisode.attributes.getter(v266);
  PodcastEpisodeAttributes.mediaKindResolved.getter();
  swift_release(v267);
  (*(void (**)(char *, void, uint64_t))(v235 + 104))( v161,  enum case for PodcastEpisodeAttributes.MediaKind.video(_:),  v251);
  unint64_t v268 = sub_10012A3D0();
  dispatch thunk of RawRepresentable.rawValue.getter(&v505, v251, v268);
  dispatch thunk of RawRepresentable.rawValue.getter(&v503, v251, v268);
  uint64_t v269 = v506;
  uint64_t v270 = v504;
  if (v505 == v503 && v506 == v504)
  {
    char v271 = 1;
    uint64_t v270 = v506;
  }

  else
  {
    char v271 = _stringCompareWithSmolCheck(_:_:expecting:)(v505, v506, v503, v504, 0LL);
  }

  swift_bridgeObjectRelease(v269);
  swift_bridgeObjectRelease(v270);
  v272 = *(void (**)(char *, uint64_t))(v235 + 8);
  v272(v161, v251);
  v272(*(char **)&v495, v251);
  [v260 setIsVideo:v271 & 1];

  uint64_t v274 = ServerPodcastEpisode.attributes.getter(v273);
  uint64_t v275 = PodcastEpisodeAttributes.url.getter();
  uint64_t v277 = v276;
  swift_release(v274);
  if (v277)
  {
    uint64_t v278 = (uint64_t)v472;
    URL.init(string:)(v275);
    swift_bridgeObjectRelease(v277);
    double v279 = v497;
    if (v474((char *)v278, 1LL, *(void *)&v497) != 1)
    {
      uint64_t v285 = v490;
      v286 = v465;
      (*(void (**)(char *, uint64_t, double))(v490 + 32))(v465, v278, COERCE_DOUBLE(*(void *)&v279));
      id v287 = v260;
      URL._bridgeToObjectiveC()(v288);
      v290 = v289;
      [v287 setEpisodeShareUrl:v289];

      (*(void (**)(char *, double))(v285 + 8))(v286, COERCE_DOUBLE(*(void *)&v279));
      if (v174) {
        goto LABEL_143;
      }
      goto LABEL_147;
    }

    sub_10012A4A0(v278, &qword_1002B4DB8);
  }

  if (v174)
  {
LABEL_143:
    id v280 = v260;
    id v281 = v174;
    uint64_t v282 = ServerPodcastBase.attributes.getter();

    if (v282)
    {
      PodcastAttributes.feedUrl.getter();
      unint64_t v284 = v283;
      swift_release(v282);
      if (v284) {
        goto LABEL_149;
      }
    }

    goto LABEL_148;
  }

    uint64_t v9 = 0;
    goto LABEL_37;
  }

  uint64_t v7 = sub_1001696A0();
  uint64_t v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease(a2);
  if ((v9 & 1) != 0) {
    return 0LL;
  }
  else {
    return v7;
  }
}

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  swift_release(a1);
  Swift::String v46 = v8 + 64;
  Swift::String v47 = 1LL << *(_BYTE *)(v8 + 32);
  id v48 = -1LL;
  if (v47 < 64) {
    id v48 = ~(-1LL << v47);
  }
  uint64_t v49 = v48 & *(void *)(v8 + 64);
  uint64_t v50 = (unint64_t)(v47 + 63) >> 6;
  swift_bridgeObjectRetain(v8);
  uint64_t v51 = 0LL;
  while (2)
  {
    if (v49)
    {
      uint64_t v52 = __clz(__rbit64(v49));
      v49 &= v49 - 1;
      id v53 = v52 | (v51 << 6);
LABEL_40:
      __int128 v54 = *(id *)(*(void *)(v8 + 56) + 8 * v53);
      sub_10014F148(v54, 1LL, 4, a4);

      continue;
    }

    break;
  }

  id v55 = v51 + 1;
  if (__OFADD__(v51, 1LL))
  {
    __break(1u);
    goto LABEL_60;
  }

  if (v55 >= v50) {
    goto LABEL_58;
  }
  uint64_t v56 = *(void *)(v46 + 8 * v55);
  ++v51;
  if (v56) {
    goto LABEL_57;
  }
  uint64_t v51 = v55 + 1;
  if (v55 + 1 >= v50) {
    goto LABEL_58;
  }
  uint64_t v56 = *(void *)(v46 + 8 * v51);
  if (v56) {
    goto LABEL_57;
  }
  uint64_t v51 = v55 + 2;
  if (v55 + 2 >= v50) {
    goto LABEL_58;
  }
  uint64_t v56 = *(void *)(v46 + 8 * v51);
  if (v56) {
    goto LABEL_57;
  }
  uint64_t v51 = v55 + 3;
  if (v55 + 3 >= v50) {
    goto LABEL_58;
  }
  uint64_t v56 = *(void *)(v46 + 8 * v51);
  if (v56)
  {
LABEL_57:
    uint64_t v49 = (v56 - 1) & v56;
    id v53 = __clz(__rbit64(v56)) + (v51 << 6);
    goto LABEL_40;
  }

  uint64_t v57 = v55 + 4;
  if (v57 >= v50)
  {
LABEL_58:
    swift_release(v8);
    return swift_bridgeObjectRelease(v8);
  }

  uint64_t v56 = *(void *)(v46 + 8 * v57);
  if (v56)
  {
    uint64_t v51 = v57;
    goto LABEL_57;
  }

  while (1)
  {
    uint64_t v51 = v57 + 1;
    if (__OFADD__(v57, 1LL)) {
      break;
    }
    if (v51 >= v50) {
      goto LABEL_58;
    }
    uint64_t v56 = *(void *)(v46 + 8 * v51);
    ++v57;
    if (v56) {
      goto LABEL_57;
    }
  }

LABEL_147:
  id v291 = v260;
LABEL_148:
  swift_bridgeObjectRelease(0LL);
  unint64_t v284 = 0xE000000000000000LL;
LABEL_149:
  NSString v292 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v284);
  [v260 setPodcastFeedUrl:v292];

  id v293 = v260;
  if (v174)
  {
    id v294 = v174;
    ServerPodcastBase.id.getter();
    unint64_t v296 = v295;
  }

  else
  {
    unint64_t v296 = 0xE000000000000000LL;
  }

  NSString v297 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v296);
  id v298 = [v297 longLongValue];

  [v260 setPodcastStoreId:v298];
  if (v174)
  {
    id v299 = v260;
    id v300 = v174;
    uint64_t v301 = ServerPodcastBase.attributes.getter();

    if (v301)
    {
      char v302 = PodcastAttributes.subscribable.getter();
      swift_release(v301);
      char v303 = (v302 == 2) | v302;
      goto LABEL_157;
    }
  }

  else
  {
    id v304 = v260;
  }

  char v303 = 1;
LABEL_157:
  [v260 setIsNotSubscribeable:(v303 & 1) == 0];

  uint64_t v305 = v496;
  v306 = v493;
  uint64_t v307 = (uint64_t)v493 + *(int *)(v496 + 64);
  uint64_t v308 = ServerPodcastEpisode.determineBestTranscriptMetadata(isSubscriptionActive:)( v307,  [v260 paidSubscriptionActive]);
  uint64_t v310 = v309;
  uint64_t v312 = v311;
  uint64_t v314 = v313;
  uint64_t *v306 = v308;
  v306[1] = v309;
  v306[2] = v311;
  v306[3] = v313;
  uint64_t v315 = *(int *)(v305 + 64);
  v316 = v484;
  uint64_t v317 = (uint64_t)v484 + v315;
  uint64_t *v484 = v308;
  v316[1] = v309;
  v316[2] = v311;
  v316[3] = v313;
  sub_10012A418(v307, (uint64_t)v316 + v315, &qword_1002B4DA8);
  swift_bridgeObjectRetain(v314);
  id v318 = v260;
  if (v310)
  {
    swift_bridgeObjectRetain(v310);
    NSString v319 = String._bridgeToObjectiveC()();
    uint64_t v320 = v310;
  }

  else
  {
    uint64_t v320 = 0LL;
    NSString v319 = 0LL;
  }

  sub_10012A4A0(v317, &qword_1002B4DA8);
  [v260 setTranscriptIdentifier:v319];

  uint64_t v321 = *(int *)(v496 + 64);
  v322 = v485;
  uint64_t v323 = (uint64_t)v485 + v321;
  uint64_t *v485 = v308;
  v322[1] = v310;
  v322[2] = v312;
  v322[3] = v314;
  sub_10012A418(v307, (uint64_t)v322 + v321, &qword_1002B4DA8);
  id v324 = v260;
  swift_bridgeObjectRelease(v314);
  swift_bridgeObjectRelease(v320);
  uint64_t v325 = v486;
  sub_10012A45C(v323, v486, &qword_1002B4DA8);
  uint64_t v326 = type metadata accessor for TranscriptSource(0LL);
  uint64_t v327 = *(void *)(v326 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v327 + 48))(v325, 1LL, v326) == 1)
  {
    sub_10012A4A0(v325, &qword_1002B4DA8);
    NSString v328 = 0LL;
  }

  else
  {
    TranscriptSource.rawValue.getter();
    uint64_t v330 = v329;
    (*(void (**)(uint64_t, uint64_t))(v327 + 8))(v325, v326);
    NSString v328 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v330);
  }

  id v332 = v501;
  id v331 = v502;
  [v324 setTranscriptSource:v328];

  uint64_t v334 = ServerPodcastEpisode.attributes.getter(v333);
  uint64_t v335 = PodcastEpisodeAttributes.artwork.getter();
  uint64_t v336 = swift_release(v334);
  if (v335)
  {
    uint64_t v337 = ServerArtwork.url.getter(v336);
    uint64_t v339 = v338;
    uint64_t v336 = swift_release(v335);
    if (v339)
    {
      type metadata accessor for ArtworkFormatter(0LL);
      double v340 = kMTPreferredArtworkSize;
      id v341 = v324;
      v342 = v469;
      static ArtworkFormatter.formatArtworkUrl(string:for:cropCode:fileExtension:)( v337,  v339,  0LL,  0LL,  6778986LL,  0xE300000000000000LL,  v340,  v340);
      swift_bridgeObjectRelease(v339);
      double v343 = v497;
      v345 = 0LL;
      if (v474(v342, 1LL, *(void *)&v497) != 1)
      {
        URL._bridgeToObjectiveC()(v344);
        v345 = v346;
        (*(void (**)(char *, double))(v490 + 8))(v342, COERCE_DOUBLE(*(void *)&v343));
      }

      [v341 setArtworkUrl:v345];
    }
  }

  uint64_t v347 = dispatch thunk of ServerPodcastEpisode.relationships.getter(v336);
  v348 = v499;
  if (!v347
    || (v349 = (void *)v347, uint64_t v350 = PodcastEpisodeRelationships.playbackPosition.getter(), v349, !v350))
  {
LABEL_178:
    uint64_t v367 = ServerPodcastEpisode.attributes.getter(v347);
    uint64_t v368 = PodcastEpisodeAttributes.episodeArtwork.getter();
    uint64_t v369 = swift_release(v367);
    if (v368)
    {
      uint64_t v370 = ServerArtwork.url.getter(v369);
      if (v371)
      {
        uint64_t v372 = v371;
        uint64_t v496 = v370;
        double v497 = COERCE_DOUBLE(v324);
        double v373 = (double)ServerArtwork.width.getter();
        if ((v374 & 1) != 0) {
          double v373 = 0.0;
        }
        double v495 = v373;
        double v375 = (double)ServerArtwork.height.getter();
        if ((v376 & 1) != 0) {
          double v375 = 0.0;
        }
        uint64_t v494 = *(void *)&v375;
        uint64_t v377 = ServerArtwork.bgColor.getter();
        uint64_t v491 = v378;
        uint64_t v492 = v377;
        uint64_t v490 = ServerArtwork.textColor1.getter();
        id v379 = v324;
        uint64_t v381 = v380;
        uint64_t v382 = ServerArtwork.textColor2.getter();
        uint64_t v384 = v383;
        uint64_t v385 = ServerArtwork.textColor3.getter();
        uint64_t v387 = v386;
        uint64_t v388 = ServerArtwork.textColor4.getter();
        uint64_t v390 = v389;
        id v391 = objc_allocWithZone((Class)type metadata accessor for PlayerArtwork(0LL));
        uint64_t v460 = v387;
        id v332 = v501;
        uint64_t v459 = v384;
        v348 = v499;
        uint64_t v458 = v381;
        id v324 = v379;
        v392 = (void *)PlayerArtwork.init(template:width:height:backgroundColor:primaryTextColor:secondaryTextColor:tertiaryTextColor:quaternaryTextColor:)( v496,  v372,  *(void *)&v495,  0LL,  v494,  0LL,  v492,  v491,  v490,  v458,  v382,  v459,  v385,  v460,  v388,  v390);
        double v393 = v497;
        [*(id *)&v497 setEpisodeArtworkProperties:v392];
        swift_release(v368);
      }

      else
      {
        swift_release(v368);
      }

      id v331 = v502;
    }

    if (v332)
    {
      id v394 = v332;
      uint64_t v395 = ServerPodcastBase.attributes.getter();

      if (v395)
      {
        uint64_t v396 = PodcastAttributes.artwork.getter();
        uint64_t v397 = swift_release(v395);
        if (v396)
        {
          double v398 = COERCE_DOUBLE(ServerArtwork.url.getter(v397));
          if (v399)
          {
            uint64_t v400 = v399;
            double v497 = v398;
            id v501 = v324;
            double v401 = (double)ServerArtwork.width.getter();
            if ((v402 & 1) != 0) {
              double v401 = 0.0;
            }
            uint64_t v496 = *(void *)&v401;
            double v403 = (double)ServerArtwork.height.getter();
            if ((v404 & 1) != 0) {
              double v403 = 0.0;
            }
            double v495 = v403;
            uint64_t v494 = ServerArtwork.bgColor.getter();
            uint64_t v492 = v405;
            uint64_t v406 = ServerArtwork.textColor1.getter();
            uint64_t v490 = v407;
            uint64_t v491 = v406;
            uint64_t v408 = ServerArtwork.textColor2.getter();
            uint64_t v410 = v409;
            uint64_t v411 = ServerArtwork.textColor3.getter();
            uint64_t v413 = v412;
            uint64_t v414 = ServerArtwork.textColor4.getter();
            id v415 = v324;
            uint64_t v417 = v416;
            id v418 = objc_allocWithZone((Class)type metadata accessor for PlayerArtwork(0LL));
            uint64_t v461 = v417;
            id v324 = v415;
            v419 = (void *)PlayerArtwork.init(template:width:height:backgroundColor:primaryTextColor:secondaryTextColor:tertiaryTextColor:quaternaryTextColor:)( *(void *)&v497,  v400,  v496,  0LL,  *(void *)&v495,  0LL,  v494,  v492,  v491,  v490,  v408,  v410,  v411,  v413,  v414,  v461);
            id v420 = v501;
            [v501 setShowArtworkProperties:v419];
            swift_release(v396);
          }

          else
          {
            swift_release(v396);
          }

          id v331 = v502;
        }
      }

      id v421 = v394;
      uint64_t v422 = ServerPodcastBase.attributes.getter();

      if (v422)
      {
        uint64_t v423 = PodcastAttributes.editorialArtwork.getter();
        uint64_t v424 = swift_release(v422);
        if (v423)
        {
          uint64_t v425 = PodcastEditorialArtworkContainer.podcastPageBackground.getter(v424);
          uint64_t v426 = swift_release(v423);
          if (v425)
          {
            v427 = (void *)ServerArtwork.url.getter(v426);
            if (v428)
            {
              uint64_t v429 = v428;
              id v501 = v427;
              double v430 = (double)ServerArtwork.width.getter();
              if ((v431 & 1) != 0) {
                double v430 = 0.0;
              }
              double v497 = v430;
              double v432 = (double)ServerArtwork.height.getter();
              if ((v433 & 1) != 0) {
                double v432 = 0.0;
              }
              uint64_t v496 = *(void *)&v432;
              *(double *)&uint64_t v434 = COERCE_DOUBLE(ServerArtwork.bgColor.getter());
              uint64_t v494 = v435;
              double v495 = *(double *)&v434;
              uint64_t v436 = ServerArtwork.textColor1.getter();
              uint64_t v491 = v437;
              uint64_t v492 = v436;
              uint64_t v438 = ServerArtwork.textColor2.getter();
              uint64_t v440 = v439;
              uint64_t v441 = ServerArtwork.textColor3.getter();
              v442 = v324;
              uint64_t v444 = v443;
              uint64_t v445 = ServerArtwork.textColor4.getter();
              uint64_t v447 = v446;
              id v448 = objc_allocWithZone((Class)type metadata accessor for PlayerArtwork(0LL));
              v449 = (void *)PlayerArtwork.init(template:width:height:backgroundColor:primaryTextColor:secondaryTextColor:tertiaryTextColor:quaternaryTextColor:)( v501,  v429,  *(void *)&v497,  0LL,  v496,  0LL,  *(void *)&v495,  v494,  v492,  v491,  v438,  v440,  v441,  v444,  v445,  v447);
              [v442 setUberArtworkProperties:v449];

              swift_release(v425);
              sub_10012A4A0((uint64_t)v493, &qword_1002B4DB0);
              sub_10012A4A0(v500, &qword_1002B4DB8);
              (*(void (**)(char *, uint64_t))(v488 + 8))(v499, v489);
              goto LABEL_211;
            }

            swift_release(v425);
            v348 = v499;
LABEL_210:
            sub_10012A4A0((uint64_t)v493, &qword_1002B4DB0);
            sub_10012A4A0(v500, &qword_1002B4DB8);
            (*(void (**)(char *, uint64_t))(v488 + 8))(v348, v489);
LABEL_211:

            return;
          }
        }
      }

      v348 = v499;
    }

    else
    {
      id v421 = 0LL;
    }

    goto LABEL_210;
  }

  uint64_t v351 = PodcastPlaybackPositionContainer.data.getter();
  swift_release(v350);
  if ((unint64_t)v351 >> 62)
  {
    if (v351 < 0) {
      uint64_t v456 = v351;
    }
    else {
      uint64_t v456 = v351 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v351);
    uint64_t v457 = _CocoaArrayWrapper.endIndex.getter(v456);
    swift_bridgeObjectRelease(v351);
    if (!v457) {
      goto LABEL_177;
    }
  }

  else if (!*(void *)((v351 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_177:
    uint64_t v347 = swift_bridgeObjectRelease(v351);
    goto LABEL_178;
  }

  if ((v351 & 0xC000000000000001LL) == 0)
  {
    if (*(void *)((v351 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      uint64_t v352 = *(void *)(v351 + 32);
      swift_retain(v352);
      goto LABEL_175;
    }

    goto LABEL_225;
  }

  uint64_t v352 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v351);
LABEL_175:
  uint64_t v353 = swift_bridgeObjectRelease(v351);
  uint64_t v354 = PodcastPlaybackPositionData.attributes.getter(v353);
  uint64_t v355 = swift_release(v352);
  double v356 = PodcastPlaybackPositionDataAttributes.positionInMilliseconds.getter(v355);
  swift_release(v354);
  double v357 = v356 / 1000.0;
  id v358 = [v324 setPlayhead:v357];
  id v360 = (id)_MTLogCategoryPlayback(v358, v359);
  if (v360)
  {
    v361 = v360;
    uint64_t v362 = static os_log_type_t.default.getter(v360);
    uint64_t v363 = sub_100126450((uint64_t *)&unk_1002B5E60);
    uint64_t v351 = swift_allocObject(v363, 112LL, 7LL);
    *(_OWORD *)(v351 + 16) = xmmword_1001C4150;
    *(void *)(v351 + 56) = &type metadata for Double;
    *(void *)(v351 + 64) = &protocol witness table for Double;
    *(double *)(v351 + 32) = v357;
    uint64_t v364 = ServerPodcastEpisode.id.getter();
    uint64_t v366 = v365;
    *(void *)(v351 + 96) = &type metadata for String;
    *(void *)(v351 + 104) = sub_100127C90();
    *(void *)(v351 + 72) = v364;
    *(void *)(v351 + 80) = v366;
    os_log(_:dso:log:type:_:)( "NetworkMediaManifest: Applying playhead of %f to episode %@",  59LL,  2LL,  &_mh_execute_header,  v361,  v362,  v351);

    v348 = v499;
    goto LABEL_177;
  }

LABEL_227:
  __break(1u);
}

uint64_t sub_10012A144(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  if ((a2 & 0x1000000000000000LL) == 0)
  {
    if ((a2 & 0x2000000000000000LL) == 0)
    {
      if ((result & 0x1000000000000000LL) != 0) {
        uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v7 = (uint64_t)sub_10016968C(v6, v4, 10LL);
      char v9 = v8 & 1;
      goto LABEL_37;
    }

    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_50;
      }
      uint64_t v7 = (BYTE1(result) - 48);
      uint64_t v14 = v3 - 2;
      if (v14)
      {
        uint64_t v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          unsigned int v16 = *v15 - 48;
          if (v16 > 9) {
            goto LABEL_34;
          }
          uint64_t v17 = 10 * v7;
          uint64_t v7 = v17 + v16;
          char v9 = 0;
          ++v15;
          if (!--v14) {
            goto LABEL_37;
          }
        }
      }
    }

    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            uint64_t v7 = -(uint64_t)(BYTE1(result) - 48);
            uint64_t v10 = v3 - 2;
            if (v10)
            {
              uint64_t v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                unsigned int v12 = *v11 - 48;
                if (v12 > 9) {
                  goto LABEL_34;
                }
                uint64_t v13 = 10 * v7;
                uint64_t v7 = v13 - v12;
                char v9 = 0;
                ++v11;
                if (!--v10) {
                  goto LABEL_37;
                }
              }
            }

            goto LABEL_36;
          }

unint64_t sub_10012A3D0()
{
  unint64_t result = qword_1002B4DC0;
  if (!qword_1002B4DC0)
  {
    uint64_t v1 = type metadata accessor for PodcastEpisodeAttributes.MediaKind(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PodcastEpisodeAttributes.MediaKind, v1);
    atomic_store(result, (unint64_t *)&qword_1002B4DC0);
  }

  return result;
}

uint64_t sub_10012A418(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100126450(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10012A45C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100126450(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10012A4A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100126450(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_10012A5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (a2)
  {
    uint64_t v10 = sub_100126450((uint64_t *)&unk_1002B5080);
    uint64_t v11 = swift_allocObject(v10, 48LL, 7LL);
    *(_OWORD *)(v11 + 16) = xmmword_1001C3C20;
    *(void *)(v11 + 32) = a1;
    *(void *)(v11 + 40) = a2;
    objc_allocWithZone((Class)type metadata accessor for NetworkMediaManifest(0LL));
    uint64_t v12 = 0LL;
    uint64_t v13 = (void *)v11;
    uint64_t v14 = 0LL;
  }

  else
  {
    objc_allocWithZone((Class)type metadata accessor for NetworkMediaManifest(0LL));
    uint64_t v13 = _swiftEmptyArrayStorage;
    uint64_t v12 = a1;
    uint64_t v14 = a1;
  }

  uint64_t v15 = sub_10012A9A8(v12, 0LL, (uint64_t)v13, v14, 0LL, a3, a4);
  uint64_t ObjectType = swift_getObjectType(v5);
  swift_deallocPartialClassInstance( v5,  ObjectType,  *(unsigned int *)((swift_isaMask & *v5) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v5) + 0x34LL));
  return v15;
}

uint64_t sub_10012A9A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v8 = v7;
  uint64_t v68 = a6;
  uint64_t v69 = a7;
  uint64_t v65 = a5;
  uint64_t v66 = a2;
  uint64_t v61 = a4;
  uint64_t v67 = a3;
  uint64_t v60 = a1;
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v63 = *(void *)(v9 - 8);
  uint64_t v64 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&v8[OBJC_IVAR___MTNetworkMediaManifest_forwardItemCount] = 1LL;
  *(void *)&v8[OBJC_IVAR___MTNetworkMediaManifest_episodeFetchLimit] = 5LL;
  uint64_t v62 = OBJC_IVAR___MTNetworkMediaManifest_manifestWorkQueue;
  sub_100134284(0LL, (unint64_t *)&qword_1002B4868, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v18 = v8;
  static DispatchQoS.unspecified.getter(v18);
  aBlock = (void **)_swiftEmptyArrayStorage;
  uint64_t v19 = sub_100127210( (unint64_t *)&qword_1002B4870,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v20 = sub_100126450((uint64_t *)&unk_1002B5660);
  uint64_t v21 = sub_1001342BC( (unint64_t *)&qword_1002B4880,  (uint64_t *)&unk_1002B5660,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v20, v21, v12, v19);
  (*(void (**)(char *, void, uint64_t))(v63 + 104))( v11,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v64);
  uint64_t v22 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001ELL,  0x800000010021A010LL,  v17,  v14,  v11,  0LL);
  uint64_t v23 = v65;
  *(void *)&v8[v62] = v22;
  uint64_t v24 = OBJC_IVAR___MTNetworkMediaManifest_mediaRequestController;
  *(void *)&v18[v24] = [objc_allocWithZone((Class)type metadata accessor for MediaRequestController(0)) init];
  uint64_t v25 = OBJC_IVAR___MTNetworkMediaManifest_initialIds;
  *(void *)&v18[OBJC_IVAR___MTNetworkMediaManifest_initialIds] = 0LL;
  v18[OBJC_IVAR___MTNetworkMediaManifest_hasOnlyPaidEpisodesWithoutSubscription] = 0;
  v18[OBJC_IVAR___MTNetworkMediaManifest_refreshInProgress] = 0;
  *(void *)&v18[OBJC_IVAR___MTNetworkMediaManifest_inProgressRefreshHandlers] = _swiftEmptyArrayStorage;
  if (v23)
  {
    swift_bridgeObjectRelease(v66);
    swift_bridgeObjectRelease(v67);
    uint64_t v26 = sub_100126450((uint64_t *)&unk_1002B5080);
    uint64_t v27 = swift_allocObject(v26, 48LL, 7LL);
    *(_OWORD *)(v27 + 16) = xmmword_1001C3C20;
    *(void *)(v27 + 32) = v61;
    *(void *)(v27 + 40) = v23;
    uint64_t v28 = *(void *)&v18[v25];
    *(void *)&v18[v25] = v27;
    swift_bridgeObjectRelease(v28);
    uint64_t v29 = &v18[OBJC_IVAR___MTNetworkMediaManifest_contentType];
    uint64_t v30 = enum case for MediaRequest.ContentType.podcastStation(_:);
    uint64_t v31 = type metadata accessor for MediaRequest.ContentType(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 104LL))(v29, v30, v31);
    uint64_t v32 = v68;
    goto LABEL_9;
  }

  uint64_t v33 = v60;
  uint64_t v34 = v67;
  uint64_t v32 = v68;
  if (v67)
  {
    swift_bridgeObjectRelease(v66);
    uint64_t v35 = *(void *)&v18[v25];
    *(void *)&v18[v25] = v34;
    swift_bridgeObjectRelease(v35);
    uint64_t v36 = &v18[OBJC_IVAR___MTNetworkMediaManifest_contentType];
    uint64_t v37 = (unsigned int *)&enum case for MediaRequest.ContentType.podcastEpisode(_:);
  }

  else
  {
    if (!v66)
    {
      uint64_t v36 = &v18[OBJC_IVAR___MTNetworkMediaManifest_contentType];
      uint64_t v42 = enum case for MediaRequest.ContentType.podcast(_:);
      goto LABEL_8;
    }

    uint64_t v38 = v66;
    uint64_t v39 = sub_100126450((uint64_t *)&unk_1002B5080);
    uint64_t v40 = swift_allocObject(v39, 48LL, 7LL);
    *(_OWORD *)(v40 + 16) = xmmword_1001C3C20;
    *(void *)(v40 + 32) = v33;
    *(void *)(v40 + 40) = v38;
    uint64_t v41 = *(void *)&v18[v25];
    *(void *)&v18[v25] = v40;
    swift_bridgeObjectRelease(v41);
    uint64_t v36 = &v18[OBJC_IVAR___MTNetworkMediaManifest_contentType];
    uint64_t v37 = (unsigned int *)&enum case for MediaRequest.ContentType.podcast(_:);
  }

  uint64_t v42 = *v37;
LABEL_8:
  uint64_t v43 = type metadata accessor for MediaRequest.ContentType(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 104LL))(v36, v42, v43);
LABEL_9:

  uint64_t v44 = (objc_class *)type metadata accessor for NetworkMediaManifest(0LL);
  v78.receiver = v18;
  v78.super_class = v44;
  id v45 = objc_msgSendSuper2(&v78, "init");
  sub_100134284(0LL, &qword_1002B4E40, &off_10023E2F8);
  Swift::String v46 = (char *)v45;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v46 setItems:isa];

  uint64_t v48 = v69;
  if (v69)
  {
    aBlock = (void **)v32;
    uint64_t v73 = v69;
    v71[0] = 10LL;
    v71[1] = 0xE100000000000000LL;
    v70[0] = 28252LL;
    v70[1] = 0xE200000000000000LL;
    unint64_t v49 = sub_10013434C();
    uint64_t v32 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v71,  v70,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v49,  v49,  v49);
    uint64_t v51 = v50;
    swift_bridgeObjectRelease(v48);
  }

  else
  {
    uint64_t v51 = 0LL;
  }

  uint64_t v52 = *(dispatch_queue_s **)&v46[OBJC_IVAR___MTNetworkMediaManifest_manifestWorkQueue];
  id v53 = (void *)swift_allocObject(&unk_100246530, 40LL, 7LL);
  v53[2] = v46;
  v53[3] = v32;
  v53[4] = v51;
  uint64_t v54 = swift_allocObject(&unk_100246558, 32LL, 7LL);
  *(void *)(v54 + 16) = sub_100134328;
  *(void *)(v54 + 24) = v53;
  uint64_t v76 = sub_100134344;
  uint64_t v77 = v54;
  aBlock = _NSConcreteStackBlock;
  uint64_t v73 = 1107296256LL;
  uint64_t v74 = sub_1001347A4;
  uint64_t v75 = &unk_100246570;
  id v55 = _Block_copy(&aBlock);
  uint64_t v56 = v77;
  uint64_t v57 = v46;
  swift_retain(v54);
  swift_release(v56);
  dispatch_sync(v52, v55);

  _Block_release(v55);
  LOBYTE(v52) = swift_isEscapingClosureAtFileLocation(v54, "", 96LL, 86LL, 32LL, 1LL);
  swift_release(v53);
  uint64_t result = swift_release(v54);
  __break(1u);
  return result;
}

void sub_10012AF88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v57 = a2;
  uint64_t v58 = a3;
  uint64_t v4 = type metadata accessor for MediaRequest.ContentType(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v54 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v54 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v54 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v54 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v54 - v17;
  uint64_t v59 = a1;
  uint64_t v19 = a1 + OBJC_IVAR___MTNetworkMediaManifest_contentType;
  swift_beginAccess(v19, v65, 0LL, 0LL);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v56 = v19;
  v20(v18, v19, v4);
  uint64_t v60 = v5;
  id v55 = *(void (**)(char *, void, uint64_t))(v5 + 104);
  v55(v16, enum case for MediaRequest.ContentType.podcastStation(_:), v4);
  uint64_t v21 = sub_100127210( &qword_1002B4E88,  (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType,  (uint64_t)&protocol conformance descriptor for MediaRequest.ContentType);
  dispatch thunk of RawRepresentable.rawValue.getter(&v61, v4, v21);
  dispatch thunk of RawRepresentable.rawValue.getter(&v63, v4, v21);
  uint64_t v22 = v62;
  uint64_t v23 = v64;
  if (v61 == v63 && v62 == v64)
  {
    char v24 = 1;
    uint64_t v23 = v62;
  }

  else
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v61, v62, v63, v64, 0LL);
  }

  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v23);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v60 + 8);
  v25(v16, v4);
  v25(v18, v4);
  if ((v24 & 1) != 0)
  {
    sub_10012D8E0(v57, v58);
    return;
  }

  uint64_t v26 = v56;
  v20(v13, v56, v4);
  uint64_t v27 = v55;
  v55(v10, enum case for MediaRequest.ContentType.podcastEpisode(_:), v4);
  dispatch thunk of RawRepresentable.rawValue.getter(&v61, v4, v21);
  dispatch thunk of RawRepresentable.rawValue.getter(&v63, v4, v21);
  uint64_t v28 = v62;
  uint64_t v29 = v64;
  if (v61 == v63 && v62 == v64)
  {
    swift_bridgeObjectRelease_n(v62, 2LL);
    v25(v10, v4);
    v25(v13, v4);
  }

  else
  {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v61, v62, v63, v64, 0LL);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v29);
    v25(v10, v4);
    v25(v13, v4);
    if ((v30 & 1) == 0)
    {
      sub_10012E1F8(v57, v58);
      return;
    }
  }

  uint64_t v31 = v59;
  uint64_t v32 = (uint64_t)sub_10012DCC0(v57, v58);
  uint64_t v33 = v32;
  if ((unint64_t)v32 >> 62)
  {
    if (v32 < 0) {
      uint64_t v50 = v32;
    }
    else {
      uint64_t v50 = v32 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v32);
    uint64_t v51 = _CocoaArrayWrapper.endIndex.getter(v50);
    swift_bridgeObjectRelease(v33);
    if (!v51) {
      goto LABEL_30;
    }
  }

  else if (!*(void *)((v32 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    goto LABEL_30;
  }

  if ((v33 & 0xC000000000000001LL) != 0)
  {
    id v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v33);
  }

  else
  {
    if (!*(void *)((v33 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      goto LABEL_34;
    }

    id v34 = *(id *)(v33 + 32);
  }

  uint64_t v35 = v34;
  uint64_t v36 = swift_bridgeObjectRelease(v33);
  uint64_t v37 = (void *)dispatch thunk of ServerPodcastEpisode.relationships.getter(v36);

  if (!v37) {
    return;
  }
  uint64_t v38 = (void *)PodcastEpisodeRelationships.podcast.getter();

  if (!v38) {
    return;
  }
  uint64_t v33 = PodcastRelationshipContainer.data.getter();

  if ((unint64_t)v33 >> 62)
  {
LABEL_34:
    if (v33 < 0) {
      uint64_t v52 = v33;
    }
    else {
      uint64_t v52 = v33 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v33);
    uint64_t v53 = _CocoaArrayWrapper.endIndex.getter(v52);
    swift_bridgeObjectRelease(v33);
    if (v53) {
      goto LABEL_20;
    }
LABEL_30:
    uint64_t v49 = v33;
    goto LABEL_31;
  }

  if (!*(void *)((v33 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_30;
  }
LABEL_20:
  if ((v33 & 0xC000000000000001LL) != 0)
  {
    id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v33);
    goto LABEL_23;
  }

  if (*(void *)((v33 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    id v39 = *(id *)(v33 + 32);
LABEL_23:
    uint64_t v40 = v39;
    uint64_t v41 = swift_bridgeObjectRelease(v33);
    uint64_t v42 = ServerPodcastBase.id.getter(v41);
    uint64_t v44 = v43;

    id v45 = v54;
    v27(v54, enum case for MediaRequest.ContentType.podcast(_:), v4);
    swift_beginAccess(v26, &v61, 33LL, 0LL);
    (*(void (**)(uint64_t, char *, uint64_t))(v60 + 40))(v26, v45, v4);
    swift_endAccess(&v61);
    uint64_t v46 = sub_100126450((uint64_t *)&unk_1002B5080);
    uint64_t v47 = swift_allocObject(v46, 48LL, 7LL);
    *(_OWORD *)(v47 + 16) = xmmword_1001C3C20;
    *(void *)(v47 + 32) = v42;
    *(void *)(v47 + 40) = v44;
    uint64_t v48 = *(void *)(v31 + OBJC_IVAR___MTNetworkMediaManifest_initialIds);
    *(void *)(v31 + OBJC_IVAR___MTNetworkMediaManifest_initialIds) = v47;
    uint64_t v49 = v48;
LABEL_31:
    swift_bridgeObjectRelease(v49);
    return;
  }

  __break(1u);
  __break(1u);
}

id sub_10012B544(uint64_t (*a1)(id), uint64_t a2)
{
  id result = [v2 items];
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = sub_100134284(0LL, &qword_1002B4E40, &off_10023E2F8);
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

    if ((unint64_t)v8 >> 62)
    {
      if (v8 < 0) {
        uint64_t v13 = v8;
      }
      else {
        uint64_t v13 = v8 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v8);
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v13);
      swift_bridgeObjectRelease(v8);
    }

    else
    {
      uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    id result = (id)swift_bridgeObjectRelease(v8);
    if (v9)
    {
      if (a1) {
        return (id)a1(result);
      }
    }

    else
    {
      sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
      uint64_t v10 = (void *)static OS_os_log.default.getter();
      uint64_t v11 = static os_log_type_t.default.getter(v10);
      os_log(_:dso:log:type:_:)( "NetworkMediaManifest: No items loaded from asset info, fetching items",  69LL,  2LL,  &_mh_execute_header,  v10,  v11,  _swiftEmptyArrayStorage);

      uint64_t v12 = swift_allocObject(&unk_100246508, 32LL, 7LL);
      *(void *)(v12 + 16) = a1;
      *(void *)(v12 + 24) = a2;
      sub_10013397C((uint64_t)a1, a2);
      sub_100133738((uint64_t)sub_10013425C, v12);
      return (id)swift_release(v12);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_10012B760( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t (*a9)(uint64_t, void), uint64_t a10)
{
  uint64_t v287 = a6;
  uint64_t v299 = a5;
  uint64_t v300 = a4;
  uint64_t v14 = sub_100126450(&qword_1002B4DB8);
  __chkstk_darwin(v14);
  double v279 = (char *)&v247 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100126450(&qword_1002B4EB0);
  __chkstk_darwin(v16);
  uint64_t v278 = (char *)&v247 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100126450(&qword_1002B4EB8);
  __chkstk_darwin(v18);
  uint64_t v277 = (char *)&v247 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100126450(&qword_1002B4EC0);
  __chkstk_darwin(v20);
  id v291 = (char *)&v247 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100126450(&qword_1002B4EC8);
  __chkstk_darwin(v22);
  v290 = (char *)&v247 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v281 = type metadata accessor for MediaRequest.Params(0LL);
  uint64_t v280 = *(void *)(v281 - 8);
  __chkstk_darwin(v281);
  id v293 = (char *)&v247 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v283 = type metadata accessor for MediaRequest.IncludeExtendTypes(0LL);
  unint64_t v284 = *(void *)(v283 - 8);
  __chkstk_darwin(v283);
  uint64_t v274 = (char *)&v247 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v298 = type metadata accessor for MediaRequest.RequestType(0LL);
  uint64_t v292 = *(void *)(v298 - 8);
  uint64_t v26 = __chkstk_darwin(v298);
  id v294 = (char *)&v247 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v275 = (char *)&v247 - v29;
  __chkstk_darwin(v28);
  uint64_t v301 = (char *)&v247 - v30;
  uint64_t v31 = sub_100126450(&qword_1002B4ED0);
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v289 = (uint64_t)&v247 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v32);
  uint64_t v297 = (uint64_t)&v247 - v34;
  uint64_t v35 = type metadata accessor for MediaRequest.ContentType(0LL);
  uint64_t v302 = *(void *)(v35 - 8);
  uint64_t v303 = v35;
  uint64_t v36 = __chkstk_darwin(v35);
  uint64_t v37 = __chkstk_darwin(v36);
  unint64_t v276 = (unint64_t)&v247 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  unint64_t v288 = (unint64_t)&v247 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v43 = (char *)&v247 - v42;
  uint64_t v44 = __chkstk_darwin(v41);
  uint64_t v46 = (char *)&v247 - v45;
  uint64_t v47 = __chkstk_darwin(v44);
  uint64_t v49 = (char *)&v247 - v48;
  id result = (id)__chkstk_darwin(v47);
  id v55 = (uint64_t *)((char *)&v247 - v54);
  if (v51 && *(void *)(a2 + 16) <= v51) {
    goto LABEL_11;
  }
  uint64_t v296 = a2;
  if ((unint64_t)a7 >> 62)
  {
    uint64_t v246 = a7 < 0 ? a7 : a7 & 0xFFFFFFFFFFFFFF8LL;
    unint64_t v268 = v51;
    v272 = v52;
    uint64_t v266 = v53;
    swift_bridgeObjectRetain(a7);
    uint64_t v56 = _CocoaArrayWrapper.endIndex.getter(v246);
    id result = (id)swift_bridgeObjectRelease(a7);
    uint64_t v53 = v266;
    uint64_t v52 = v272;
    uint64_t v51 = v268;
  }

  else
  {
    uint64_t v56 = *(void *)((a7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  BOOL v57 = v56 < v299;
  uint64_t v58 = v296;
  if (!v57)
  {
LABEL_11:
    if (a9) {
      return (id)a9(a7, a8 & 1);
    }
    return result;
  }

  uint64_t v266 = v53;
  v272 = v52;
  unint64_t v268 = v51;
  uint64_t v264 = a9;
  uint64_t v265 = a10;
  uint64_t v271 = swift_allocObject(&unk_100246440, 24LL, 7LL);
  *(void *)(v271 + 16) = a7;
  uint64_t v270 = swift_allocObject(&unk_100246468, 17LL, 7LL);
  *(_BYTE *)(v270 + 16) = a8 & 1;
  uint64_t v59 = swift_allocObject(&unk_100246490, 24LL, 7LL);
  uint64_t v269 = v59;
  *(void *)(v59 + 16) = _swiftEmptyArrayStorage;
  uint64_t v273 = v59 + 16;
  unint64_t v60 = *(void *)(v58 + 16);
  if (!v60)
  {
    uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain(a7);
    goto LABEL_32;
  }

  uint64_t v61 = v303;
  (*(void (**)(void *, void, uint64_t))(v302 + 104))( v55,  enum case for MediaRequest.ContentType.podcastEpisode(_:),  v303);
  uint64_t v62 = sub_100127210( &qword_1002B4E88,  (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType,  (uint64_t)&protocol conformance descriptor for MediaRequest.ContentType);
  swift_bridgeObjectRetain(a7);
  dispatch thunk of RawRepresentable.rawValue.getter(&v306, v61, v62);
  dispatch thunk of RawRepresentable.rawValue.getter(&v304, v61, v62);
  uint64_t v63 = v307;
  int64_t v64 = v305;
  if (v306 == v304 && v307 == v305)
  {
    swift_bridgeObjectRelease_n(v307, 2LL);
    (*(void (**)(void *, uint64_t))(v302 + 8))(v55, v303);
    goto LABEL_15;
  }

  uint64_t v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v306, v307, v304, v305, 0LL);
  swift_bridgeObjectRelease(v63);
  swift_bridgeObjectRelease(v64);
  (*(void (**)(void *, uint64_t))(v302 + 8))(v55, v303);
  if ((v61 & 1) != 0)
  {
LABEL_15:
    if (__OFADD__(v268, v287))
    {
      __break(1u);
    }

    else
    {
      else {
        int64_t v64 = v60;
      }
      unint64_t v67 = v64 - v268;
      uint64_t v61 = v296;
      if (v64 >= (uint64_t)v268)
      {
        if ((v268 & 0x8000000000000000LL) == 0)
        {
          uint64_t v68 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
          uint64_t v69 = swift_bridgeObjectRetain(v61);
          uint64_t v70 = swift_unknownObjectRetain_n(v69, 2LL);
          id v71 = (void *)swift_dynamicCastClass(v70, v68);
          if (!v71)
          {
            swift_bridgeObjectRelease(v61);
            id v71 = _swiftEmptyArrayStorage;
          }

          uint64_t v72 = v71[2];
          swift_release(v71);
          if (v72 == v67)
          {
            uint64_t v73 = (void *)swift_dynamicCastClass(v61, v68);
            if (!v73)
            {
              swift_bridgeObjectRelease(v61);
              uint64_t v73 = _swiftEmptyArrayStorage;
            }

            goto LABEL_26;
          }

LABEL_85:
          swift_bridgeObjectRelease(v61);
          uint64_t v73 = sub_100132AEC(v61, v61 + 32, v268, (2 * v64) | 1);
LABEL_26:
          swift_bridgeObjectRelease(v61);
          uint64_t isUniquelyReferenced_nonNull_native = sub_10012EE5C((uint64_t)v73);
          goto LABEL_32;
        }

LABEL_84:
        __break(1u);
        goto LABEL_85;
      }
    }

    __break(1u);
    goto LABEL_84;
  }

  if (v60 <= v268)
  {
    __break(1u);
    goto LABEL_87;
  }

  unint64_t v74 = v296 + 16 * v268;
  a7 = *(void *)(v74 + 32);
  uint64_t v63 = *(void *)(v74 + 40);
  id v55 = *(void **)v273;
  swift_bridgeObjectRetain(v63);
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v55);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_87:
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_100132460(0LL, v55[2] + 1LL, 1, v55);
    id v55 = (void *)isUniquelyReferenced_nonNull_native;
    *(void *)uint64_t v273 = isUniquelyReferenced_nonNull_native;
  }

  unint64_t v76 = v55[2];
  unint64_t v75 = v55[3];
  if (v76 >= v75 >> 1)
  {
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_100132460((void *)(v75 > 1), v76 + 1, 1, v55);
    id v55 = (void *)isUniquelyReferenced_nonNull_native;
    *(void *)uint64_t v273 = isUniquelyReferenced_nonNull_native;
  }

  v55[2] = v76 + 1;
  uint64_t v77 = &v55[2 * v76];
  v77[4] = a7;
  v77[5] = v63;
LABEL_32:
  uint64_t v263 = a3;
  id result = (id)_MTLogCategoryPlayback(isUniquelyReferenced_nonNull_native, v66);
  if (!result)
  {
    __break(1u);
    return result;
  }

  objc_super v78 = result;
  uint64_t v79 = static os_log_type_t.default.getter(result);
  uint64_t v80 = sub_100126450((uint64_t *)&unk_1002B5E60);
  uint64_t v81 = swift_allocObject(v80, 72LL, 7LL);
  __int128 v295 = xmmword_1001C3C20;
  *(_OWORD *)(v81 + 16) = xmmword_1001C3C20;
  uint64_t v82 = *(void **)v273;
  *(void *)(v81 + 56) = sub_100126450(&qword_1002B66A0);
  *(void *)(v81 + 64) = sub_1001342BC( &qword_1002B4ED8,  &qword_1002B66A0,  (uint64_t)&protocol conformance descriptor for [A]);
  *(void *)(v81 + 32) = v82;
  swift_bridgeObjectRetain(v82);
  os_log(_:dso:log:type:_:)( "NetworkMediaManifest: Refreshing episodes for item(s) %@",  56LL,  2LL,  &_mh_execute_header,  v78,  v79,  v81);

  swift_bridgeObjectRelease(v81);
  uint64_t v83 = sub_100134284(0LL, &qword_1002B4EE0, &off_10023E1E8);
  id ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata(v83);
  id v84 = [ObjCClassFromMetadata sharedInstance];
  id v85 = [v84 activeDsid];

  id v86 = *(void (**)(void))(v302 + 104);
  LODWORD(v267) = enum case for MediaRequest.ContentType.podcastEpisode(_:);
  uint64_t v87 = v303;
  v286 = v86;
  v86(v49);
  uint64_t v88 = sub_100127210( &qword_1002B4E88,  (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType,  (uint64_t)&protocol conformance descriptor for MediaRequest.ContentType);
  dispatch thunk of RawRepresentable.rawValue.getter(&v306, v87, v88);
  dispatch thunk of RawRepresentable.rawValue.getter(&v304, v87, v88);
  uint64_t v89 = v307;
  int64_t v90 = v305;
  if (v306 == v304 && v307 == v305)
  {
    char v91 = 1;
    int64_t v90 = v307;
  }

  else
  {
    char v91 = _stringCompareWithSmolCheck(_:_:expecting:)(v306, v307, v304, v305, 0LL);
  }

  swift_bridgeObjectRelease(v89);
  swift_bridgeObjectRelease(v90);
  id v92 = *(void (**)(char *, uint64_t))(v302 + 8);
  v92(v49, v303);
  id v261 = v85;
  if ((v91 & 1) != 0 || !v85)
  {
    uint64_t v97 = type metadata accessor for MediaRequest.ViewType(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 56LL))(v297, 1LL, 1LL, v97);
  }

  else
  {
    uint64_t v93 = enum case for MediaRequest.ViewType.nextEpisodes(_:);
    uint64_t v94 = type metadata accessor for MediaRequest.ViewType(0LL);
    uint64_t v95 = *(void *)(v94 - 8);
    uint64_t v96 = v297;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 104))(v297, v93, v94);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v95 + 56))(v96, 0LL, 1LL, v94);
  }

  LODWORD(v285) = enum case for MediaRequest.ContentType.podcast(_:);
  uint64_t v98 = v303;
  uint64_t v99 = (void (*)(char *, void, uint64_t))v286;
  v286(v46);
  dispatch thunk of RawRepresentable.rawValue.getter(&v306, v98, v88);
  dispatch thunk of RawRepresentable.rawValue.getter(&v304, v98, v88);
  uint64_t v100 = v307;
  int64_t v101 = v305;
  if (v306 == v304 && v307 == v305)
  {
    swift_bridgeObjectRelease_n(v307, 2LL);
    uint64_t v102 = v46;
    uint64_t v103 = v303;
    v92(v102, v303);
LABEL_45:
    BOOL v106 = *(void *)(*(void *)v273 + 16LL) != 0LL;
    goto LABEL_46;
  }

  char v104 = _stringCompareWithSmolCheck(_:_:expecting:)(v306, v307, v304, v305, 0LL);
  swift_bridgeObjectRelease(v100);
  swift_bridgeObjectRelease(v101);
  uint64_t v105 = v46;
  uint64_t v103 = v303;
  v92(v105, v303);
  BOOL v106 = 0;
  if ((v104 & 1) != 0) {
    goto LABEL_45;
  }
LABEL_46:
  v99(v43, v267, v103);
  dispatch thunk of RawRepresentable.rawValue.getter(&v306, v103, v88);
  dispatch thunk of RawRepresentable.rawValue.getter(&v304, v103, v88);
  uint64_t v107 = v307;
  int64_t v108 = v305;
  uint64_t v109 = v298;
  LODWORD(v259) = v106;
  if (v306 == v304 && v307 == v305)
  {
    swift_bridgeObjectRelease_n(v307, 2LL);
    v92(v43, v103);
    uint64_t v110 = v292;
  }

  else
  {
    char v111 = _stringCompareWithSmolCheck(_:_:expecting:)(v306, v307, v304, v305, 0LL);
    swift_bridgeObjectRelease(v107);
    swift_bridgeObjectRelease(v108);
    v92(v43, v103);
    char v112 = v111 | v106;
    uint64_t v110 = v292;
    if ((v112 & 1) == 0)
    {
      id v113 = (unsigned int *)&enum case for MediaRequest.RequestType.library(_:);
      goto LABEL_52;
    }
  }

  id v113 = (unsigned int *)&enum case for MediaRequest.RequestType.catalog(_:);
LABEL_52:
  NSString v114 = *(void (**)(char *, void, uint64_t))(v110 + 104);
  v114(v301, *v113, v109);
  ((void (*)(unint64_t, void, uint64_t))v286)(v288, v285, v103);
  dispatch thunk of RawRepresentable.rawValue.getter(&v306, v103, v88);
  dispatch thunk of RawRepresentable.rawValue.getter(&v304, v103, v88);
  uint64_t v115 = v307;
  int64_t v116 = v305;
  if (v306 == v304 && v307 == v305)
  {
    char v117 = 1;
    int64_t v116 = v307;
  }

  else
  {
    char v117 = _stringCompareWithSmolCheck(_:_:expecting:)(v306, v307, v304, v305, 0LL);
  }

  swift_bridgeObjectRelease(v115);
  swift_bridgeObjectRelease(v116);
  v92((char *)v288, v103);
  id v118 = v275;
  id v260 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
  v260(v275, v301, v109);
  if ((v117 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v110 + 8))(v118, v109);
    unint64_t v123 = v276;
    goto LABEL_60;
  }

  unsigned int v119 = v294;
  v114(v294, enum case for MediaRequest.RequestType.library(_:), v109);
  uint64_t v120 = v118;
  char v121 = static MediaRequest.RequestType.== infix(_:_:)(v118, v119);
  uint64_t v122 = *(void (**)(char *, uint64_t))(v110 + 8);
  v122(v119, v109);
  v122(v120, v109);
  unint64_t v123 = v276;
  if ((v121 & 1) == 0)
  {
LABEL_60:
    uint64_t v273 = 0LL;
    LODWORD(v275) = 1;
    goto LABEL_61;
  }

  LODWORD(v275) = 0;
  uint64_t v273 = v287;
LABEL_61:
  uint64_t v124 = (void (*)(uint64_t, void, uint64_t))v286;
  uint64_t v125 = v285;
  ((void (*)(unint64_t, void, uint64_t))v286)(v123, v285, v103);
  dispatch thunk of RawRepresentable.rawValue.getter(&v306, v103, v88);
  dispatch thunk of RawRepresentable.rawValue.getter(&v304, v103, v88);
  uint64_t v126 = v307;
  int64_t v127 = v305;
  if (v306 == v304 && v307 == v305)
  {
    swift_bridgeObjectRelease_n(v307, 2LL);
    v92((char *)v123, v103);
LABEL_65:
    uint64_t v129 = sub_100126450(&qword_1002B4EF0);
    uint64_t v130 = sub_100126450(&qword_1002B4EF8);
    uint64_t v131 = *(void *)(v130 - 8);
    unint64_t v288 = *(void *)(v131 + 72);
    uint64_t v132 = *(unsigned __int8 *)(v131 + 80);
    uint64_t v133 = (v132 + 32) & ~v132;
    uint64_t v258 = v129;
    uint64_t v256 = v132 | 7;
    uint64_t v134 = swift_allocObject(v129, v133 + 2 * v288, v132 | 7);
    __int128 v255 = xmmword_1001C4150;
    unint64_t v276 = v134;
    *(_OWORD *)(v134 + 16) = xmmword_1001C4150;
    uint64_t v257 = v133;
    uint64_t v135 = v134 + v133;
    uint64_t v267 = *(int *)(v130 + 48);
    v124(v134 + v133, enum case for MediaRequest.ContentType.podcastChannel(_:), v303);
    uint64_t v136 = sub_100126450(&qword_1002B4EE8);
    id v137 = v124;
    unint64_t v138 = v284;
    uint64_t v139 = *(unsigned __int8 *)(v284 + 80);
    uint64_t v140 = (v139 + 32) & ~v139;
    uint64_t v254 = *(void *)(v284 + 72);
    uint64_t v141 = v140 + v254;
    uint64_t v142 = v139 | 7;
    uint64_t v143 = swift_allocObject(v136, v140 + v254, v139 | 7);
    *(_OWORD *)(v143 + 16) = v295;
    id v144 = *(void (**)(uint64_t, void, uint64_t))(v138 + 104);
    uint64_t v145 = v283;
    v144(v143 + v140, enum case for MediaRequest.IncludeExtendTypes.isSubscribed(_:), v283);
    *(void *)(v135 + v267) = v143;
    uint64_t v146 = v135 + v288;
    uint64_t v267 = v130;
    uint64_t v147 = *(int *)(v130 + 48);
    v137(v146, v285, v303);
    uint64_t v253 = v141;
    uint64_t v148 = v141;
    uint64_t v149 = v140;
    uint64_t v150 = swift_allocObject(v136, v148, v142);
    *(_OWORD *)(v150 + 16) = v295;
    v144(v150 + v140, enum case for MediaRequest.IncludeExtendTypes.editorialArtwork(_:), v145);
    *(void *)(v146 + v147) = v150;
    unint64_t v276 = sub_100159270(v276);
    if ((_DWORD)v259)
    {
      uint64_t v151 = v254;
      uint64_t v152 = swift_allocObject(v136, v140 + 2 * v254, v142);
      *(_OWORD *)(v152 + 16) = v255;
      unint64_t v288 = v152;
      uint64_t v153 = v152 + v140;
      v144(v152 + v140, enum case for MediaRequest.IncludeExtendTypes.playbackPosition(_:), v145);
      v144(v153 + v151, enum case for MediaRequest.IncludeExtendTypes.channel(_:), v145);
      v286 = (void (*)(void))sub_100159270((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v154 = v298;
      uint64_t v155 = v303;
    }

    else
    {
      uint64_t v156 = v257;
      uint64_t v157 = swift_allocObject(v258, v257 + v288, v256);
      *(_OWORD *)(v157 + 16) = v295;
      uint64_t v158 = v157 + v156;
      uint64_t v159 = *(int *)(v267 + 48);
      uint64_t v155 = v303;
      ((void (*)(uint64_t, void, uint64_t))v286)(v157 + v156, v285, v303);
      uint64_t v160 = swift_allocObject(v136, v253, v142);
      *(_OWORD *)(v160 + 16) = v295;
      v144(v160 + v149, enum case for MediaRequest.IncludeExtendTypes.channel(_:), v145);
      *(void *)(v158 + v159) = v160;
      v286 = (void (*)(void))sub_100159270(v157);
      unint64_t v288 = (unint64_t)_swiftEmptyArrayStorage;
      uint64_t v154 = v298;
    }

    __int16 v161 = v260;
    char v162 = v144;
    goto LABEL_70;
  }

  char v128 = _stringCompareWithSmolCheck(_:_:expecting:)(v306, v307, v304, v305, 0LL);
  swift_bridgeObjectRelease(v126);
  swift_bridgeObjectRelease(v127);
  v92((char *)v123, v103);
  if ((v128 & 1) != 0) {
    goto LABEL_65;
  }
  uint64_t v163 = sub_100126450(&qword_1002B4EE8);
  unint64_t v164 = v284;
  uint64_t v253 = *(void *)(v284 + 72);
  uint64_t v165 = *(unsigned __int8 *)(v284 + 80);
  uint64_t v166 = ((v165 + 32) & ~v165) + v253;
  uint64_t v167 = (v165 + 32) & ~v165;
  uint64_t v257 = v167;
  uint64_t v168 = v163;
  uint64_t v251 = v166;
  uint64_t v169 = v165 | 7;
  uint64_t v170 = swift_allocObject(v163, v166, v165 | 7);
  *(_OWORD *)(v170 + 16) = v295;
  unint64_t v288 = v170;
  uint64_t v171 = v170 + v167;
  uint64_t v172 = *(void (**)(uint64_t, void, uint64_t))(v164 + 104);
  uint64_t v173 = v283;
  v172(v171, enum case for MediaRequest.IncludeExtendTypes.playbackPosition(_:), v283);
  uint64_t v174 = sub_100126450(&qword_1002B4EF0);
  uint64_t v256 = v174;
  uint64_t v175 = sub_100126450(&qword_1002B4EF8);
  uint64_t v176 = *(void *)(v175 - 8);
  uint64_t v177 = v175;
  uint64_t v259 = *(void *)(v176 + 72);
  uint64_t v178 = *(unsigned __int8 *)(v176 + 80);
  uint64_t v252 = 2 * v259;
  uint64_t v179 = (v178 + 32) & ~v178;
  uint64_t v254 = v179;
  *(void *)&__int128 v255 = v178 | 7;
  uint64_t v180 = swift_allocObject(v174, v179 + 3 * v259, v178 | 7);
  unint64_t v276 = v180;
  *(_OWORD *)(v180 + 16) = xmmword_1001C4160;
  uint64_t v181 = v180 + v179;
  v182 = v124;
  uint64_t v250 = *(int *)(v177 + 48);
  uint64_t v258 = v177;
  uint64_t v183 = v303;
  v182(v181, enum case for MediaRequest.ContentType.podcastChannel(_:), v303);
  uint64_t v249 = v168;
  uint64_t v248 = v169;
  uint64_t v184 = swift_allocObject(v168, v166, v169);
  *(_OWORD *)(v184 + 16) = v295;
  uint64_t v185 = v257;
  v172(v184 + v257, enum case for MediaRequest.IncludeExtendTypes.isSubscribed(_:), v173);
  *(void *)(v181 + v250) = v184;
  uint64_t v186 = v181 + v259;
  uint64_t v250 = *(int *)(v177 + 48);
  uint64_t v187 = v183;
  uint64_t v188 = (void (*)(uint64_t, void, uint64_t))v286;
  ((void (*)(uint64_t, uint64_t, uint64_t))v286)(v181 + v259, v125, v187);
  uint64_t v189 = v253;
  uint64_t v190 = swift_allocObject(v168, v185 + 2 * v253, v169);
  *(_OWORD *)(v190 + 16) = xmmword_1001C4150;
  char v191 = v172;
  v172(v190 + v185, enum case for MediaRequest.IncludeExtendTypes.feedUrl(_:), v173);
  uint64_t v192 = v173;
  v191(v190 + v185 + v189, enum case for MediaRequest.IncludeExtendTypes.editorialArtwork(_:), v173);
  *(void *)(v186 + v250) = v190;
  char v162 = v191;
  uint64_t v193 = v181 + v252;
  uint64_t v253 = *(int *)(v258 + 48);
  uint64_t v155 = v303;
  id v194 = v188;
  v188(v181 + v252, v267, v303);
  uint64_t v195 = v249;
  uint64_t v196 = v251;
  uint64_t v197 = v248;
  uint64_t v198 = swift_allocObject(v249, v251, v248);
  *(_OWORD *)(v198 + 16) = v295;
  v162(v198 + v185, enum case for MediaRequest.IncludeExtendTypes.firstAvailableDates(_:), v192);
  *(void *)(v193 + v253) = v198;
  unint64_t v276 = sub_100159270(v276);
  uint64_t v199 = v254;
  uint64_t v200 = swift_allocObject(v256, v254 + v259, v255);
  *(_OWORD *)(v200 + 16) = v295;
  uint64_t v201 = v200 + v199;
  uint64_t v202 = *(int *)(v258 + 48);
  v194(v201, v285, v155);
  uint64_t v203 = swift_allocObject(v195, v196, v197);
  *(_OWORD *)(v203 + 16) = v295;
  uint64_t v145 = v192;
  v162(v203 + v257, enum case for MediaRequest.IncludeExtendTypes.channel(_:), v192);
  *(void *)(v201 + v202) = v203;
  v286 = (void (*)(void))sub_100159270(v200);
  uint64_t v154 = v298;
  __int16 v161 = v260;
LABEL_70:
  if (!v261)
  {
    v162((uint64_t)v274, enum case for MediaRequest.IncludeExtendTypes.episodes(_:), v145);
    if ((swift_isUniquelyReferenced_nonNull_native(v288) & 1) == 0) {
      unint64_t v288 = sub_100132798( 0,  *(void *)(v288 + 16) + 1LL,  1,  v288,  &qword_1002B4EE8,  (uint64_t (*)(void))&type metadata accessor for MediaRequest.IncludeExtendTypes);
    }
    unint64_t v205 = *(void *)(v288 + 16);
    unint64_t v204 = *(void *)(v288 + 24);
    if (v205 >= v204 >> 1) {
      unint64_t v288 = sub_100132798( v204 > 1,  v205 + 1,  1,  v288,  &qword_1002B4EE8,  (uint64_t (*)(void))&type metadata accessor for MediaRequest.IncludeExtendTypes);
    }
    unint64_t v206 = v288;
    *(void *)(v288 + 16) = v205 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v284 + 32))( v206 + ((*(unsigned __int8 *)(v284 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v284 + 80))
    + *(void *)(v284 + 72) * v205,
      v274,
      v145);
  }

  v161(v294, v301, v154);
  uint64_t v207 = v302;
  uint64_t v285 = *(void (**)(char *, uint64_t, uint64_t))(v302 + 16);
  uint64_t v208 = v290;
  v285(v290, v300, v155);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v207 + 56))(v208, 0LL, 1LL, v155);
  sub_10012A418(v297, v289, &qword_1002B4ED0);
  uint64_t v209 = type metadata accessor for MediaRequest.Relationship(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v209 - 8) + 56LL))(v291, 1LL, 1LL, v209);
  uint64_t v210 = sub_100126450(&qword_1002B4F00);
  uint64_t v211 = type metadata accessor for MediaRequest.WithTypes(0LL);
  uint64_t v212 = *(void *)(v211 - 8);
  uint64_t v213 = *(unsigned __int8 *)(v212 + 80);
  uint64_t v214 = (v213 + 32) & ~v213;
  uint64_t v215 = swift_allocObject(v210, v214 + *(void *)(v212 + 72), v213 | 7);
  *(_OWORD *)(v215 + 16) = v295;
  (*(void (**)(uint64_t, void, uint64_t))(v212 + 104))( v215 + v214,  enum case for MediaRequest.WithTypes.newsPodcasts(_:),  v211);
  *(void *)&__int128 v295 = *(void *)(v269 + 16);
  uint64_t v216 = v295;
  uint64_t v217 = type metadata accessor for MediaRequest.URLFragment(0LL);
  Swift::String v218 = v277;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v217 - 8) + 56LL))(v277, 1LL, 1LL, v217);
  uint64_t v219 = type metadata accessor for MediaRequest.PageName(0LL);
  Swift::String v220 = v278;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v219 - 8) + 56LL))(v278, 1LL, 1LL, v219);
  uint64_t v221 = type metadata accessor for URL(0LL);
  v222 = v279;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v221 - 8) + 56LL))(v279, 1LL, 1LL, v221);
  swift_bridgeObjectRetain(v216);
  unint64_t v284 = sub_100131FCC( (uint64_t)_swiftEmptyArrayStorage,  &qword_1002B4F80,  &qword_1002B4F88,  (uint64_t (*)(char *))sub_100132298,  (uint64_t (*)(void))&type metadata accessor for MediaRequest.Relationship);
  unint64_t v223 = sub_100131FCC( (uint64_t)_swiftEmptyArrayStorage,  &qword_1002B4F80,  &qword_1002B4F88,  (uint64_t (*)(char *))sub_100132298,  (uint64_t (*)(void))&type metadata accessor for MediaRequest.Relationship);
  unint64_t v224 = sub_100131E38((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v225 = sub_100131FCC( (uint64_t)_swiftEmptyArrayStorage,  &qword_1002B4F40,  &qword_1002B4F48,  (uint64_t (*)(char *))sub_100132200,  (uint64_t (*)(void))&type metadata accessor for MediaRequest.Filter);
  unint64_t v226 = sub_100131FCC( (uint64_t)_swiftEmptyArrayStorage,  &qword_1002B4F28,  &qword_1002B4F30,  (uint64_t (*)(char *))sub_100132168,  (uint64_t (*)(void))&type metadata accessor for MediaRequest.ContentType);
  MediaRequest.Params.init(requestType:requestContentType:viewType:directFetch:relationshipIncludes:relationshipRelates:relationshipLimit:include:omit:typedIncludes:typedExtends:fields:withTypes:displayKinds:identifiers:fragment:limit:filters:meta:offset:pageName:requestAllPages:hostUrl:countryCode:isImplicitActionRequest:searchTerm:queryContentTypes:triggerBy:includeEntitlementsOverride:)( v294,  v290,  v289,  v291,  v284,  v223,  v224,  v288,  _swiftEmptyArrayStorage,  v286,  v276,  _swiftEmptyArrayStorage,  v215,  _swiftEmptyArrayStorage,  v295,  v218,  v273,  (_BYTE)v275,  v225,  v226,  0LL,  1,  v220,  0,  v222,  0LL,  0LL,  0,  0LL,  0LL,  _swiftEmptyArrayStorage,  0LL,  0LL,  2);
  id v227 = [ObjCClassFromMetadata sharedInstance];
  *(void *)&__int128 v295 = [v227 activeAccount];

  v285(v272, v300, v303);
  uint64_t v228 = v302;
  uint64_t v229 = *(unsigned __int8 *)(v302 + 80);
  uint64_t v230 = (v229 + 88) & ~v229;
  unint64_t v231 = (v266 + v230 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v232 = (v231 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v233 = (char *)swift_allocObject(&unk_1002464B8, v232 + 8, v229 | 7);
  uint64_t v234 = (uint64_t)v264;
  uint64_t v235 = v265;
  *((void *)v233 + 2) = v264;
  *((void *)v233 + 3) = v235;
  uint64_t v236 = v282;
  *((void *)v233 + 4) = v270;
  *((void *)v233 + 5) = v236;
  uint64_t v237 = v268;
  *((void *)v233 + 6) = v271;
  *((void *)v233 + 7) = v237;
  uint64_t v238 = v269;
  uint64_t v239 = v296;
  *((void *)v233 + _Block_object_dispose(va, 8) = v269;
  *((void *)v233 + 9) = v239;
  v240 = v263;
  *((void *)v233 + 10) = v263;
  (*(void (**)(char *, char *, uint64_t))(v228 + 32))(&v233[v230], v272, v303);
  *(void *)&v233[v231] = v299;
  *(void *)&v233[v232] = v287;
  swift_bridgeObjectRetain(v239);
  sub_10013397C(v234, v235);
  uint64_t v241 = v270;
  swift_retain(v270);
  uint64_t v242 = v271;
  swift_retain(v271);
  swift_retain(v238);
  id v243 = v240;
  uint64_t v244 = v293;
  v245 = (void *)v295;
  dispatch thunk of MediaRequestController.performRecursivelyWithParsing(params:account:callback:)( v293,  v295,  sub_1001340E8,  v233);

  swift_release(v233);
  (*(void (**)(char *, uint64_t))(v280 + 8))(v244, v281);
  (*(void (**)(char *, uint64_t))(v292 + 8))(v301, v298);
  sub_10012A4A0(v297, &qword_1002B4ED0);
  swift_release(v242);
  swift_release(v241);
  return (id)swift_release(v238);
}

            __break(1u);
LABEL_85:
            __break(1u);
            return;
          }

void sub_10012D3FC(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    sub_100134284(0LL, &qword_1002B4E40, &off_10023E2F8);
    v3.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }

  else
  {
    v3.super.Class isa = 0LL;
  }

  Class isa = v3.super.isa;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_10012D4C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MediaRequest.ContentType(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = v0 + OBJC_IVAR___MTNetworkMediaManifest_contentType;
  swift_beginAccess(v0 + OBJC_IVAR___MTNetworkMediaManifest_contentType, v22, 0LL, 0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, v9, v2);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v6,  enum case for MediaRequest.ContentType.podcastEpisode(_:),  v2);
  uint64_t v10 = sub_100127210( &qword_1002B4E88,  (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType,  (uint64_t)&protocol conformance descriptor for MediaRequest.ContentType);
  dispatch thunk of RawRepresentable.rawValue.getter(&v20, v2, v10);
  dispatch thunk of RawRepresentable.rawValue.getter(&v18, v2, v10);
  uint64_t v11 = v21;
  uint64_t v12 = v19;
  if (v20 == v18 && v21 == v19)
  {
    swift_bridgeObjectRelease_n(v21, 2LL);
    uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
    v13(v6, v2);
    v13(v8, v2);
    return swift_bridgeObjectRetain(*(void *)(v1 + OBJC_IVAR___MTNetworkMediaManifest_initialIds));
  }

  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, v18, v19, 0LL);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v12);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v3 + 8);
  v15(v6, v2);
  v15(v8, v2);
  if ((v14 & 1) != 0) {
    return swift_bridgeObjectRetain(*(void *)(v1 + OBJC_IVAR___MTNetworkMediaManifest_initialIds));
  }
  return 0LL;
}

uint64_t sub_10012D6F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MediaRequest.ContentType(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v9 = v0 + OBJC_IVAR___MTNetworkMediaManifest_contentType;
  swift_beginAccess(v0 + OBJC_IVAR___MTNetworkMediaManifest_contentType, v24, 0LL, 0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, v9, v2);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v6,  enum case for MediaRequest.ContentType.podcast(_:),  v2);
  uint64_t v10 = sub_100127210( &qword_1002B4E88,  (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType,  (uint64_t)&protocol conformance descriptor for MediaRequest.ContentType);
  dispatch thunk of RawRepresentable.rawValue.getter(&v22, v2, v10);
  dispatch thunk of RawRepresentable.rawValue.getter(&v20, v2, v10);
  uint64_t v11 = v23;
  uint64_t v12 = v21;
  if (v22 == v20 && v23 == v21)
  {
    swift_bridgeObjectRelease_n(v23, 2LL);
    uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
    v13(v6, v2);
    v13(v8, v2);
  }

  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v20, v21, 0LL);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v12);
    uint64_t v15 = *(void (**)(char *, uint64_t))(v3 + 8);
    v15(v6, v2);
    v15(v8, v2);
    if ((v14 & 1) == 0) {
      return 0LL;
    }
  }

  uint64_t v16 = *(void **)(v1 + OBJC_IVAR___MTNetworkMediaManifest_initialIds);
  if (!v16 || !v16[2]) {
    return 0LL;
  }
  uint64_t v17 = v16[4];
  swift_bridgeObjectRetain(v16[5]);
  return v17;
}

id sub_10012D8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for String.Encoding(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  id result = (id)__chkstk_darwin(v6);
  uint64_t v10 = (char *)&v43[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2)
  {
    static String.Encoding.utf8.getter(result);
    uint64_t v11 = String.data(using:allowLossyConversion:)(v10, 0LL, a1, a2);
    unint64_t v13 = v12;
    id result = (id)(*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if (v13 >> 60 != 15)
    {
      char v14 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      v43[0] = 0LL;
      id v16 = [v14 JSONObjectWithData:isa options:0 error:v43];

      id v17 = v43[0];
      if (!v16)
      {
        id v39 = v43[0];
        _convertNSErrorToError(_:)(v17);

        swift_willThrow();
        return (id)sub_100133558(v11, v13);
      }

      id v18 = v43[0];
      _bridgeAnyObjectToAny(_:)(v43, v16);
      swift_unknownObjectRelease(v16);
      uint64_t v19 = sub_100126450(&qword_1002B4E68);
      uint64_t v20 = v42;
      type metadata accessor for MediaRequestResponseParser(0LL);
      uint64_t v21 = type metadata accessor for ServerPodcastStation(0LL);
      uint64_t v22 = sub_100127210( &qword_1002B4E80,  (uint64_t (*)(uint64_t))&type metadata accessor for ServerPodcastStation,  (uint64_t)&protocol conformance descriptor for ServerPodcastStation);
      uint64_t v23 = static MediaRequestResponseParser.parseContainerResponse<A>(containerType:_:)( v21,  v20,  v21,  &protocol witness table for ServerPodcastStation,  v22);
      uint64_t v25 = v24;
      swift_bridgeObjectRelease(v20);
      swift_errorRelease(v25);
      if (!v23) {
        return (id)sub_100133558(v11, v13);
      }
      if ((unint64_t)v23 >> 62)
      {
        if (v23 >= 0) {
          uint64_t v40 = v23 & 0xFFFFFFFFFFFFFF8LL;
        }
        else {
          uint64_t v40 = v23;
        }
        swift_bridgeObjectRetain(v23);
        uint64_t v41 = _CocoaArrayWrapper.endIndex.getter(v40);
        swift_bridgeObjectRelease(v23);
        if (v41)
        {
LABEL_8:
          if ((v23 & 0xC000000000000001LL) != 0)
          {
            id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v23);
          }

          else
          {
            if (!*(void *)((v23 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
              __break(1u);
            }
            id v26 = *(id *)(v23 + 32);
          }

          uint64_t v27 = v26;
          swift_bridgeObjectRelease(v23);
          id v28 = v27;
          uint64_t v29 = sub_100133100(v28);

          sub_100134284(0LL, &qword_1002B4E40, &off_10023E2F8);
          Class v30 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v29);
          [v3 setItems:v30];

          id result = (id)_MTLogCategoryPlayback(v31, v32);
          if (!result)
          {
            __break(1u);
            return result;
          }

          uint64_t v33 = result;
          uint64_t v34 = static os_log_type_t.default.getter(result);
          uint64_t v35 = sub_100126450((uint64_t *)&unk_1002B5E60);
          uint64_t v36 = swift_allocObject(v35, 72LL, 7LL);
          *(_OWORD *)(v36 + 16) = xmmword_1001C3C20;
          uint64_t v37 = sub_100131A8C();
          *(void *)(v36 + 56) = sub_100126450(&qword_1002B4E48);
          *(void *)(v36 + 64) = sub_1001342BC( &qword_1002B4E50,  &qword_1002B4E48,  (uint64_t)&protocol conformance descriptor for [A]);
          *(void *)(v36 + 32) = v37;
          os_log(_:dso:log:type:_:)( "NetworkMediaManifest: Loaded items from asset info %@",  53LL,  2LL,  &_mh_execute_header,  v33,  v34,  v36);

          uint64_t v38 = v36;
          goto LABEL_19;
        }
      }

      else if (*(void *)((v23 & 0xFFFFFFFFFFFFFF8LL) + 0x10))
      {
        goto LABEL_8;
      }

      uint64_t v38 = v23;
LABEL_19:
      swift_bridgeObjectRelease(v38);
      return (id)sub_100133558(v11, v13);
    }
  }

  return result;
}

void *sub_10012DCC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for String.Encoding(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a2) {
    return _swiftEmptyArrayStorage;
  }
  static String.Encoding.utf8.getter(v8);
  uint64_t v11 = String.data(using:allowLossyConversion:)(v10, 0LL, a1, a2);
  unint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if (v13 >> 60 == 15) {
    return _swiftEmptyArrayStorage;
  }
  char v14 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v46[0] = 0LL;
  id v16 = [v14 JSONObjectWithData:isa options:0 error:v46];

  id v17 = v46[0];
  if (!v16)
  {
    id v38 = v46[0];
    _convertNSErrorToError(_:)(v17);

    swift_willThrow();
    sub_100133558(v11, v13);
    return v38;
  }

  id v18 = v46[0];
  _bridgeAnyObjectToAny(_:)(v46, v16);
  swift_unknownObjectRelease(v16);
  uint64_t v19 = sub_100126450(&qword_1002B4E68);
  if ((swift_dynamicCast(&v45, v46, (char *)&type metadata for Any + 8, v19, 6LL) & 1) == 0)
  {
LABEL_20:
    sub_100133558(v11, v13);
    return _swiftEmptyArrayStorage;
  }

  uint64_t v20 = v45;
  type metadata accessor for MediaRequestResponseParser(0LL);
  uint64_t v21 = static MediaRequestResponseParser.parsePodcastEpisodeResponse(_:)(v20);
  swift_bridgeObjectRelease(v20);
  if ((unint64_t)v21 >> 62)
  {
    if (v21 < 0) {
      uint64_t v39 = v21;
    }
    else {
      uint64_t v39 = v21 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v21);
    uint64_t v40 = _CocoaArrayWrapper.endIndex.getter(v39);
    swift_bridgeObjectRelease(v21);
    if (v40) {
      goto LABEL_7;
    }
LABEL_19:
    swift_bridgeObjectRelease(v21);
    goto LABEL_20;
  }

  if (!*(void *)((v21 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_19;
  }
LABEL_7:
  if ((v21 & 0xC000000000000001LL) != 0)
  {
    id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v21);
  }

  else
  {
    if (!*(void *)((v21 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      __break(1u);
    }
    id v22 = *(id *)(v21 + 32);
  }

  uint64_t v23 = v22;
  swift_bridgeObjectRelease(v21);
  id v24 = [objc_allocWithZone((Class)MTPlayerItem) initWithPodcastEpisode:v23 podcast:0];
  if (!v24)
  {

    goto LABEL_20;
  }

  uint64_t v25 = v24;
  uint64_t v44 = sub_100126450((uint64_t *)&unk_1002B6160);
  uint64_t v26 = swift_allocObject(v44, 40LL, 7LL);
  __int128 v43 = xmmword_1001C4170;
  *(_OWORD *)(v26 + 16) = xmmword_1001C4170;
  *(void *)(v26 + 32) = v25;
  v46[0] = (id)v26;
  specialized Array._endMutation()(v26);
  id v27 = v46[0];
  sub_100134284(0LL, &qword_1002B4E40, &off_10023E2F8);
  id v42 = v25;
  Class v28 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v27);
  [v3 setItems:v28];

  id result = (id)_MTLogCategoryPlayback(v29, v30);
  if (result)
  {
    uint64_t v32 = result;
    uint64_t v33 = static os_log_type_t.default.getter(result);
    uint64_t v34 = sub_100126450((uint64_t *)&unk_1002B5E60);
    uint64_t v35 = swift_allocObject(v34, 72LL, 7LL);
    *(_OWORD *)(v35 + 16) = xmmword_1001C3C20;
    uint64_t v36 = sub_100131A8C();
    *(void *)(v35 + 56) = sub_100126450(&qword_1002B4E48);
    *(void *)(v35 + 64) = sub_1001342BC( &qword_1002B4E50,  &qword_1002B4E48,  (uint64_t)&protocol conformance descriptor for [A]);
    *(void *)(v35 + 32) = v36;
    os_log(_:dso:log:type:_:)( "NetworkMediaManifest: Loaded items from asset info %@",  53LL,  2LL,  &_mh_execute_header,  v32,  v33,  v35);

    swift_bridgeObjectRelease(v35);
    uint64_t v37 = swift_allocObject(v44, 40LL, 7LL);
    *(_OWORD *)(v37 + 16) = v43;
    *(void *)(v37 + 32) = v23;
    v46[0] = (id)v37;
    specialized Array._endMutation()(v37);
    id v38 = v46[0];

    sub_100133558(v11, v13);
    return v38;
  }

  __break(1u);
  return result;
}

id sub_10012E1F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for PriceType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v103 = v6;
  uint64_t v104 = v7;
  __chkstk_darwin(v6);
  uint64_t v100 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v102 = sub_100126450(&qword_1002B4E58);
  __chkstk_darwin(v102);
  uint64_t v105 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100126450(&qword_1002B4E60);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v101 = (uint64_t)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v90 - v14;
  __chkstk_darwin(v13);
  id v17 = (char *)&v90 - v16;
  uint64_t v18 = type metadata accessor for String.Encoding(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  id result = (id)__chkstk_darwin(v18);
  id v22 = (char *)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a2) {
    return result;
  }
  static String.Encoding.utf8.getter(result);
  uint64_t v23 = String.data(using:allowLossyConversion:)(v22, 0LL, a1, a2);
  unint64_t v25 = v24;
  id result = (id)(*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  if (v25 >> 60 == 15) {
    return result;
  }
  uint64_t v26 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  unint64_t v27 = v25;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v107[0] = 0LL;
  id v29 = [v26 JSONObjectWithData:isa options:0 error:v107];

  id v30 = v107[0];
  uint64_t v31 = v23;
  if (!v29)
  {
    id v66 = v107[0];
    _convertNSErrorToError(_:)(v30);

    swift_willThrow();
    return (id)sub_100133558(v23, v27);
  }

  id v32 = v107[0];
  _bridgeAnyObjectToAny(_:)(v107, v29);
  swift_unknownObjectRelease(v29);
  uint64_t v33 = sub_100126450(&qword_1002B4E68);
  uint64_t v34 = v106;
  type metadata accessor for MediaRequestResponseParser(0LL);
  uint64_t v35 = type metadata accessor for ServerPodcast(0LL);
  uint64_t v36 = sub_100127210( &qword_1002B4E70,  (uint64_t (*)(uint64_t))&type metadata accessor for ServerPodcast,  (uint64_t)&protocol conformance descriptor for ServerPodcastBase);
  uint64_t v37 = static MediaRequestResponseParser.parseContainerResponse<A>(containerType:_:)( v35,  v34,  v35,  &protocol witness table for ServerPodcast,  v36);
  uint64_t v39 = v38;
  swift_bridgeObjectRelease(v34);
  swift_errorRelease(v39);
  if (!v37) {
    return (id)sub_100133558(v31, v27);
  }
  id v40 = (id)(v37 & 0xFFFFFFFFFFFFFF8LL);
  if ((unint64_t)v37 >> 62)
  {
    if (v37 >= 0) {
      uint64_t v82 = v37 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v82 = v37;
    }
    swift_bridgeObjectRetain(v37);
    uint64_t v41 = _CocoaArrayWrapper.endIndex.getter(v82);
    swift_bridgeObjectRelease(v37);
  }

  else
  {
    uint64_t v41 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  }

  id v42 = v3;
  uint64_t v43 = (uint64_t)v105;
  if (!v41)
  {
    uint64_t v67 = v37;
    goto LABEL_65;
  }

  if ((v37 & 0xC000000000000001LL) != 0)
  {
    id v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v37);
  }

  else
  {
    if (!*(void *)((v37 & 0xFFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      goto LABEL_49;
    }

    id v44 = *(id *)(v37 + 32);
  }

  uint64_t v45 = v44;
  swift_bridgeObjectRelease(v37);
  id v46 = v45;
  uint64_t v47 = sub_100133100(v46);

  sub_100134284(0LL, &qword_1002B4E40, &off_10023E2F8);
  Class v48 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v47);
  [v42 setItems:v48];

  id v40 = v46;
  uint64_t v49 = ServerPodcastBase.relationships.getter();

  if (!v49) {
    goto LABEL_63;
  }
  uint64_t v52 = PodcastRelationships.channel.getter();
  uint64_t v50 = swift_release(v49);
  if (!v52) {
    goto LABEL_63;
  }
  uint64_t v37 = PodcastChannelRelationshipContainer.data.getter(v50);
  swift_release(v52);
  if (!((unint64_t)v37 >> 62))
  {
    uint64_t v53 = *(void *)((v37 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v53) {
      goto LABEL_16;
    }
LABEL_53:
    uint64_t v50 = swift_bridgeObjectRelease(v37);
    goto LABEL_63;
  }

LABEL_49:
  if (v37 < 0) {
    uint64_t v83 = v37;
  }
  else {
    uint64_t v83 = v37 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v37);
  uint64_t v53 = _CocoaArrayWrapper.endIndex.getter(v83);
  swift_bridgeObjectRelease(v37);
  if (!v53) {
    goto LABEL_53;
  }
LABEL_16:
  id v96 = v40;
  if ((v37 & 0xC000000000000001LL) != 0)
  {
LABEL_55:
    id v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v37);
  }

  else
  {
    uint64_t v54 = *(void *)((v37 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v54)
    {
      __break(1u);
      goto LABEL_57;
    }

    id v55 = *(id *)(v37 + 32);
  }

  uint64_t v56 = v55;
  uint64_t v57 = swift_bridgeObjectRelease(v37);
  uint64_t v58 = ServerChannel.attributes.getter(v57);

  char v59 = ChannelAttributes.isSubscribed.getter();
  uint64_t v50 = swift_release(v58);
  id v40 = v96;
  if (v59 == 2) {
    goto LABEL_63;
  }
  if ((v59 & 1) != 0) {
    goto LABEL_63;
  }
  id v60 = v96;
  uint64_t v61 = ServerPodcastBase.attributes.getter();

  if (!v61) {
    goto LABEL_63;
  }
  uint64_t v62 = PodcastAttributes.offers.getter();
  uint64_t v63 = v61;
  uint64_t v53 = v62;
  uint64_t v50 = swift_release(v63);
  if (!v53) {
    goto LABEL_63;
  }
  uint64_t v54 = v53 & 0xFFFFFFFFFFFFFF8LL;
  if ((unint64_t)v53 >> 62)
  {
LABEL_57:
    if (v53 >= 0) {
      uint64_t v84 = v54;
    }
    else {
      uint64_t v84 = v53;
    }
    swift_bridgeObjectRetain(v53);
    uint64_t v64 = _CocoaArrayWrapper.endIndex.getter(v84);
    if (v64) {
      goto LABEL_25;
    }
LABEL_61:
    char v81 = 1;
    goto LABEL_62;
  }

  uint64_t v64 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v53);
  if (!v64) {
    goto LABEL_61;
  }
LABEL_25:
  uint64_t v90 = v31;
  unint64_t v95 = v53 & 0xC000000000000001LL;
  unsigned int v94 = enum case for PriceType.psub(_:);
  uint64_t v65 = 4LL;
  uint64_t v92 = v53;
  uint64_t v93 = v42;
  uint64_t v91 = v64;
  while (1)
  {
    uint64_t v37 = v65 - 4;
    uint64_t v97 = v65;
    if (v95) {
      uint64_t v69 = specialized _ArrayBuffer._getElementSlowPath(_:)(v65 - 4, v53);
    }
    else {
      uint64_t v69 = swift_retain(*(void *)(v53 + 8 * v65));
    }
    uint64_t v98 = v37 + 1;
    if (__OFADD__(v37, 1LL))
    {
      __break(1u);
      goto LABEL_55;
    }

    uint64_t v31 = (uint64_t)v40;
    uint64_t v99 = v69;
    dispatch thunk of PodcastShowOffer.typeResolved.getter();
    uint64_t v70 = v103;
    uint64_t v71 = v104;
    (*(void (**)(char *, void, uint64_t))(v104 + 104))(v15, v94, v103);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v15, 0LL, 1LL, v70);
    uint64_t v72 = v43 + *(int *)(v102 + 48);
    sub_10012A418((uint64_t)v17, v43, &qword_1002B4E60);
    sub_10012A418((uint64_t)v15, v72, &qword_1002B4E60);
    uint64_t v73 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
    if (v73(v43, 1LL, v70) == 1)
    {
      int v68 = v73(v72, 1LL, v70);
      id v42 = v93;
      if (v68 != 1) {
        goto LABEL_42;
      }
      sub_10012A4A0(v43, &qword_1002B4E60);
      sub_10012A4A0((uint64_t)v15, &qword_1002B4E60);
      sub_10012A4A0((uint64_t)v17, &qword_1002B4E60);
      swift_release(v99);
      uint64_t v53 = v92;
      goto LABEL_30;
    }

    uint64_t v74 = v101;
    sub_10012A418(v43, v101, &qword_1002B4E60);
    uint64_t v75 = v104;
    unint64_t v76 = v100;
    (*(void (**)(char *, uint64_t, uint64_t))(v104 + 32))(v100, v72, v70);
    uint64_t v77 = sub_100127210( &qword_1002B4E78,  (uint64_t (*)(uint64_t))&type metadata accessor for PriceType,  (uint64_t)&protocol conformance descriptor for PriceType);
    char v78 = dispatch thunk of static Equatable.== infix(_:_:)(v74, v76, v70, v77);
    uint64_t v79 = *(void (**)(char *, uint64_t))(v75 + 8);
    uint64_t v80 = v76;
    uint64_t v43 = (uint64_t)v105;
    v79(v80, v70);
    v79((char *)v74, v70);
    sub_10012A4A0(v43, &qword_1002B4E60);
    sub_10012A4A0((uint64_t)v15, &qword_1002B4E60);
    sub_10012A4A0((uint64_t)v17, &qword_1002B4E60);
    swift_release(v99);
    uint64_t v53 = v92;
    id v42 = v93;
    id v40 = v96;
    if ((v78 & 1) == 0)
    {
      char v81 = 0;
LABEL_40:
      uint64_t v31 = v90;
      goto LABEL_62;
    }

uint64_t sub_10012EB58(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  if (a3)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    uint64_t v9 = v8;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v9 = 0LL;
  }

  id v10 = a1;
  a5(v7, v9);

  swift_bridgeObjectRelease(v9);
  return 1LL;
}

void sub_10012ED10(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v7 = a3 + 16;
  swift_beginAccess(a3 + 16, v20, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (Strong)
  {
    uint64_t v9 = (_BYTE *)Strong;
    uint64_t v10 = Strong + OBJC_IVAR___MTNetworkMediaManifest_inProgressRefreshHandlers;
    swift_beginAccess(Strong + OBJC_IVAR___MTNetworkMediaManifest_inProgressRefreshHandlers, v19, 1LL, 0LL);
    uint64_t v11 = *(void *)v10;
    uint64_t v12 = *(void *)(*(void *)v10 + 16LL);
    if (v12)
    {
      swift_bridgeObjectRetain(v11);
      uint64_t v13 = (uint64_t *)(v11 + 40);
      do
      {
        uint64_t v14 = (void (*)(uint64_t))*(v13 - 1);
        if (v14)
        {
          uint64_t v15 = *v13;
          uint64_t v16 = swift_retain(*v13);
          v14(v16);
          sub_1001341FC((uint64_t)v14, v15);
        }

        v13 += 2;
        --v12;
      }

      while (v12);
      swift_bridgeObjectRelease(v11);
      uint64_t v11 = *(void *)v10;
    }

    *(void *)uint64_t v10 = _swiftEmptyArrayStorage;
    uint64_t v17 = swift_bridgeObjectRelease(v11);
    v9[OBJC_IVAR___MTNetworkMediaManifest_refreshInProgress] = 0;
    if (a1) {
      sub_100130BBC(a1, v18);
    }
    v9[OBJC_IVAR___MTNetworkMediaManifest_hasOnlyPaidEpisodesWithoutSubscription] = a2 & 1;
    if (a4) {
      a4(v17);
    }
  }

uint64_t sub_10012EE5C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }

  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_100132460(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  unint64_t v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease(a1);
    *uint64_t v1 = v3;
    return result;
  }

uint64_t sub_10012EFB0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v9 = a4 >> 1;
  uint64_t v10 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_11;
  }
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = a1;
  uint64_t v8 = *v5;
  uint64_t v11 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t v12 = v11 + v10;
  if (!__OFADD__(v11, v10)) {
    goto LABEL_4;
  }
LABEL_17:
  __break(1u);
LABEL_18:
  uint64_t v14 = 1LL;
LABEL_19:
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0) {
      uint64_t v27 = v8;
    }
    else {
      uint64_t v27 = v8 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v8);
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease(v8);
  }

  else
  {
    uint64_t v18 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v18 <= v12) {
    uint64_t v18 = v12;
  }
  swift_bridgeObjectRetain(v8);
  uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v14, v18, 1LL, v8);
  swift_bridgeObjectRelease(*v5);
  uint64_t *v5 = v8;
  uint64_t v15 = v8 & 0xFFFFFFFFFFFFFF8LL;
  if (v9 == v6)
  {
    while (v10 > 0)
    {
      __break(1u);
LABEL_11:
      __break(1u);
LABEL_12:
      if (v8 < 0) {
        uint64_t v16 = v8;
      }
      else {
        uint64_t v16 = v8 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v8);
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v16);
      swift_bridgeObjectRelease(v8);
      uint64_t v12 = v17 + v10;
      if (__OFADD__(v17, v10)) {
        goto LABEL_17;
      }
LABEL_4:
      uint64_t v8 = *v5;
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v5);
      uint64_t *v5 = v8;
      uint64_t v14 = 0LL;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v8 < 0 || (v8 & 0x4000000000000000LL) != 0) {
        goto LABEL_19;
      }
      uint64_t v15 = v8 & 0xFFFFFFFFFFFFFF8LL;
      if (v12 > *(void *)((v8 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
        goto LABEL_18;
      }
      if (v9 != v6) {
        goto LABEL_24;
      }
    }

    goto LABEL_31;
  }

LABEL_38:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10012F23C(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v4 < 0) {
    uint64_t v17 = *v1;
  }
  else {
    uint64_t v17 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v1);
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_29;
  }
LABEL_5:
  uint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v4;
  uint64_t v5 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000LL) == 0 && (v4 & 0x4000000000000000LL) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1LL;
  }

  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1LL, v4);
    swift_bridgeObjectRelease(*v1);
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
LABEL_15:
    uint64_t result = sub_100132EE4(v8 + 8LL * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0) {
      uint64_t v18 = v4;
    }
    else {
      uint64_t v18 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }

  if (v11 < 1) {
    goto LABEL_19;
  }
  uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  BOOL v13 = __OFADD__(v12, v11);
  uint64_t v14 = v12 + v11;
  if (!v13)
  {
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v14;
LABEL_19:
    uint64_t v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }

  __break(1u);
  return result;
}

id sub_10012F3F4( int64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, void), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v116 = a7;
  id v118 = a6;
  unint64_t v20 = a10;
  uint64_t v114 = a9;
  unint64_t v21 = (int *)type metadata accessor for PriceType(0LL);
  uint64_t v22 = (char **)*((void *)v21 - 1);
  __chkstk_darwin(v21);
  char v112 = (char *)&v109 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = (int *)sub_100126450(&qword_1002B4E58);
  __chkstk_darwin(v24);
  uint64_t v113 = (uint64_t)&v109 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_100126450(&qword_1002B4E60);
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v29 = (uint64_t)&v109 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v32 = (uint64_t)&v109 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v36 = (uint64_t)&v109 - v35;
  uint64_t v115 = (_BYTE *)(a8 + 16);
  char v117 = a10 + 2;
  if (!a5)
  {
    if (!a1) {
      goto LABEL_103;
    }
    goto LABEL_9;
  }

  if (!a1) {
    goto LABEL_5;
  }
  uint64_t v37 = a1 & 0xFFFFFFFFFFFFFF8LL;
  a8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (a8 <= 0)
  {
LABEL_5:
    id result = (id)_MTLogCategoryPlayback(v33, v34);
    if (result)
    {
      uint64_t v39 = result;
      uint64_t v40 = static os_log_type_t.error.getter();
      uint64_t v41 = sub_100126450((uint64_t *)&unk_1002B5E60);
      uint64_t v42 = swift_allocObject(v41, 72LL, 7LL);
      *(_OWORD *)(v42 + 16) = xmmword_1001C3C20;
      uint64_t v43 = _convertErrorToNSError(_:)(a5);
      *(void *)(v42 + 56) = sub_100134284(0LL, &qword_1002B4F08, &OBJC_CLASS___NSError_ptr);
      *(void *)(v42 + 64) = sub_1001341A4();
      *(void *)(v42 + 32) = v43;
      os_log(_:dso:log:type:_:)( "NetworkMediaManifest: Failed to refresh episodes for podcast with error %@",  74LL,  2LL,  &_mh_execute_header,  v39,  v40,  v42);

      id result = (id)swift_bridgeObjectRelease(v42);
      if (v118) {
        return (id)v118(0LL, 0LL);
      }
      return result;
    }

    goto LABEL_121;
  }

LABEL_114:
              if (v32 < 0) {
                uint64_t v107 = v32;
              }
              else {
                uint64_t v107 = v32 & 0xFFFFFFFFFFFFFF8LL;
              }
              swift_bridgeObjectRetain(v32);
              uint64_t v108 = _CocoaArrayWrapper.endIndex.getter(v107);
              id result = (id)swift_bridgeObjectRelease(v32);
              if (v108)
              {
LABEL_90:
                if ((v32 & 0xC000000000000001LL) != 0)
                {
                  id v86 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v32);
                }

                else
                {
                  if (!*(void *)((v32 & 0xFFFFFFFFFFFFF8LL) + 0x10))
                  {
                    __break(1u);
LABEL_121:
                    __break(1u);
LABEL_122:
                    __break(1u);
                    goto LABEL_123;
                  }

                  id v86 = *(id *)(v32 + 32);
                }

                uint64_t v87 = v86;
                uint64_t v88 = swift_bridgeObjectRelease(v32);
                uint64_t v89 = ServerChannel.attributes.getter(v88);

                char v90 = ChannelAttributes.isSubscribed.getter();
                swift_release(v89);
                swift_unknownObjectRelease(v20);
                if (v90 != 2)
                {
                  LOBYTE(v50) = (v90 & 1) == 0;
                  goto LABEL_97;
                }

LABEL_96:
                LOBYTE(v50) = 0;
                goto LABEL_97;
              }

LABEL_118:
              swift_unknownObjectRelease(v20);
              swift_bridgeObjectRelease(v32);
              goto LABEL_96;
            }

LABEL_95:
            swift_unknownObjectRelease(v20);
            goto LABEL_96;
          }
        }

        else
        {
          sub_10012A418(v77, v29, &qword_1002B4E60);
          if (((unsigned int (*)(uint64_t, uint64_t, int *))v79)(v78, 1LL, v21) != 1)
          {
            char v81 = v112;
            ((void (*)(char *, uint64_t, int *))v22[4])(v112, v78, v21);
            uint64_t v82 = sub_100127210( &qword_1002B4E78,  (uint64_t (*)(uint64_t))&type metadata accessor for PriceType,  (uint64_t)&protocol conformance descriptor for PriceType);
            LODWORD(v110) = dispatch thunk of static Equatable.== infix(_:_:)(v29, v81, v21, v82);
            uint64_t v83 = v22[1];
            ((void (*)(char *, int *))v83)(v81, v21);
            sub_10012A4A0(v32, &qword_1002B4E60);
            sub_10012A4A0(v36, &qword_1002B4E60);
            ((void (*)(uint64_t, int *))v83)(v29, v21);
            uint64_t v80 = sub_10012A4A0(v77, &qword_1002B4E60);
            if ((v110 & 1) == 0) {
              goto LABEL_95;
            }
            goto LABEL_86;
          }

          sub_10012A4A0(v32, &qword_1002B4E60);
          sub_10012A4A0(v36, &qword_1002B4E60);
          ((void (*)(uint64_t, int *))v22[1])(v29, v21);
        }

        sub_10012A4A0(v77, &qword_1002B4E58);
        goto LABEL_95;
      }

      goto LABEL_77;
    }

void *sub_10013004C(unint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_43;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    sub_1001365D0(0, v3 & ~(v3 >> 63), 0);
    uint64_t v4 = _swiftEmptyArrayStorage;
    if (v2) {
      break;
    }
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v2) {
      return v4;
    }
LABEL_10:
    if ((v1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; ; ++i)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
        uint64_t v8 = i + 1;
        if (__OFADD__(i, 1LL)) {
          break;
        }
        uint64_t v9 = v7;
        uint64_t ObjectType = swift_getObjectType(v7);
        uint64_t v11 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for MediaObjectEpisodeBucket);
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0LL;
        }
        if (v11) {
          uint64_t v13 = v9;
        }
        else {
          uint64_t v13 = 0LL;
        }
        if (!v13)
        {
          swift_release(_swiftEmptyArrayStorage);
          swift_unknownObjectRelease(v9);
          return 0LL;
        }

        unint64_t v15 = _swiftEmptyArrayStorage[2];
        unint64_t v14 = _swiftEmptyArrayStorage[3];
        if (v15 >= v14 >> 1) {
          sub_1001365D0(v14 > 1, v15 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v15 + 1;
        uint64_t v16 = &_swiftEmptyArrayStorage[2 * v15];
        void v16[4] = v13;
        void v16[5] = v12;
        if (v8 == v2) {
          return v4;
        }
      }

      __break(1u);
    }

    else
    {
      uint64_t v17 = 0LL;
      uint64_t v28 = v1 + 32;
      while (1)
      {
        uint64_t v18 = v17 + 1;
        if (__OFADD__(v17, 1LL)) {
          break;
        }
        uint64_t v19 = *(void *)(v28 + 8 * v17);
        uint64_t v20 = swift_getObjectType(v19);
        uint64_t v21 = swift_conformsToProtocol2(v20, &protocol descriptor for MediaObjectEpisodeBucket);
        if (v21) {
          uint64_t v22 = v21;
        }
        else {
          uint64_t v22 = 0LL;
        }
        if (v21) {
          uint64_t v23 = v19;
        }
        else {
          uint64_t v23 = 0LL;
        }
        if (!v23)
        {
          swift_release(_swiftEmptyArrayStorage);
          return 0LL;
        }

        uint64_t v1 = _swiftEmptyArrayStorage[2];
        unint64_t v24 = _swiftEmptyArrayStorage[3];
        swift_unknownObjectRetain(v19);
        if (v1 >= v24 >> 1) {
          sub_1001365D0(v24 > 1, v1 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v1 + 1;
        uint64_t v25 = &_swiftEmptyArrayStorage[2 * v1];
        v25[4] = v23;
        v25[5] = v22;
        ++v17;
        if (v18 == v2) {
          return v4;
        }
      }
    }

    __break(1u);
LABEL_43:
    if (v1 < 0) {
      uint64_t v27 = v1;
    }
    else {
      uint64_t v27 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease(v1);
  }

  if (v1 < 0) {
    uint64_t v5 = v1;
  }
  else {
    uint64_t v5 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v1);
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v5);
  swift_bridgeObjectRelease(v1);
  if (v2) {
    goto LABEL_10;
  }
  return v4;
}

void *sub_100130288(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  specialized ContiguousArray.reserveCapacity(_:)(*(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10));
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; ; ++i)
      {
        uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
        uint64_t v5 = i + 1;
        if (__OFADD__(i, 1LL)) {
          break;
        }
        uint64_t v6 = v4;
        uint64_t v7 = type metadata accessor for ServerPodcastEpisode(0LL);
        uint64_t v8 = swift_dynamicCastClass(v6, v7);
        if (!v8)
        {
          swift_unknownObjectRelease(v6);
          goto LABEL_15;
        }

        uint64_t v9 = v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
        uint64_t v10 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
        uint64_t v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v9);
        specialized ContiguousArray._endMutation()(v11);
        if (v5 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }

      __break(1u);
    }

    else
    {
      uint64_t v12 = 0LL;
      uint64_t v13 = v1 + 32;
      while (1)
      {
        uint64_t v14 = v12 + 1;
        if (__OFADD__(v12, 1LL)) {
          break;
        }
        uint64_t v15 = *(void *)(v13 + 8 * v12);
        uint64_t v16 = type metadata accessor for ServerPodcastEpisode(0LL);
        uint64_t v17 = swift_dynamicCastClass(v15, v16);
        if (!v17)
        {
LABEL_15:
          swift_release(_swiftEmptyArrayStorage);
          return 0LL;
        }

        uint64_t v1 = v17;
        uint64_t v18 = swift_unknownObjectRetain(v15);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
        uint64_t v19 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
        uint64_t v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v1);
        specialized ContiguousArray._endMutation()(v20);
        ++v12;
        if (v14 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
    }

    __break(1u);
LABEL_18:
    if (v1 < 0) {
      uint64_t v22 = v1;
    }
    else {
      uint64_t v22 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v1);
    specialized ContiguousArray.reserveCapacity(_:)(v23);
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v1);
  }

  return _swiftEmptyArrayStorage;
}

void *sub_100130468(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  specialized ContiguousArray.reserveCapacity(_:)(*(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10));
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; ; ++i)
      {
        uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
        uint64_t v5 = i + 1;
        if (__OFADD__(i, 1LL)) {
          break;
        }
        uint64_t v6 = v4;
        uint64_t v7 = objc_opt_self(&OBJC_CLASS___MTPodcast);
        uint64_t v8 = swift_dynamicCastObjCClass(v6, v7);
        if (!v8)
        {
          swift_unknownObjectRelease(v6);
          goto LABEL_15;
        }

        uint64_t v9 = v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
        uint64_t v10 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
        uint64_t v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v9);
        specialized ContiguousArray._endMutation()(v11);
        if (v5 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }

      __break(1u);
    }

    else
    {
      uint64_t v12 = 0LL;
      uint64_t v13 = v1 + 32;
      while (1)
      {
        uint64_t v14 = v12 + 1;
        if (__OFADD__(v12, 1LL)) {
          break;
        }
        uint64_t v15 = *(void **)(v13 + 8 * v12);
        uint64_t v16 = objc_opt_self(&OBJC_CLASS___MTPodcast);
        uint64_t v17 = swift_dynamicCastObjCClass(v15, v16);
        if (!v17)
        {
LABEL_15:
          swift_release(_swiftEmptyArrayStorage);
          return 0LL;
        }

        uint64_t v1 = v17;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
        uint64_t v18 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
        uint64_t v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v1);
        specialized ContiguousArray._endMutation()(v19);
        ++v12;
        if (v14 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
    }

    __break(1u);
LABEL_18:
    if (v1 < 0) {
      uint64_t v21 = v1;
    }
    else {
      uint64_t v21 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(v1);
    specialized ContiguousArray.reserveCapacity(_:)(v22);
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(v1);
  }

  return _swiftEmptyArrayStorage;
}

void *sub_10013064C(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v12 = _swiftEmptyArrayStorage;
  sub_1001365EC(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32LL)
    {
      sub_1001343F8(i, (uint64_t)v11);
      uint64_t v5 = sub_100126450(&qword_1002B5060);
      uint64_t v6 = v10;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_1001365EC(0, v3[2] + 1LL, 1);
        uint64_t v3 = v12;
      }

      unint64_t v8 = v3[2];
      unint64_t v7 = v3[3];
      if (v8 >= v7 >> 1)
      {
        sub_1001365EC(v7 > 1, v8 + 1, 1);
        uint64_t v3 = v12;
      }

      v3[2] = v8 + 1;
      v3[v8 + 4] = v6;
      if (!--v2) {
        return v3;
      }
    }

    uint64_t v10 = 0LL;
    swift_release(v3);
    swift_bridgeObjectRelease(v10);
    return 0LL;
  }

  return v3;
}

void *sub_100130790(unint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_29;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    unint64_t v24 = _swiftEmptyArrayStorage;
    sub_1001365EC(0, v3 & ~(v3 >> 63), 0);
    uint64_t v4 = v24;
    if (v2) {
      break;
    }
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v2) {
      return v4;
    }
LABEL_10:
    if ((v1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; ; ++i)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
        uint64_t v8 = i + 1;
        if (__OFADD__(i, 1LL)) {
          break;
        }
        uint64_t v9 = v7;
        uint64_t v23 = 0LL;
        static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)( v7,  &v23,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
        swift_unknownObjectRelease(v9);
        uint64_t v10 = v23;
        if (!v23) {
          goto LABEL_25;
        }
        unint64_t v24 = v4;
        unint64_t v12 = v4[2];
        unint64_t v11 = v4[3];
        if (v12 >= v11 >> 1)
        {
          sub_1001365EC(v11 > 1, v12 + 1, 1);
          uint64_t v4 = v24;
        }

        void v4[2] = v12 + 1;
        v4[v12 + 4] = v10;
        if (v8 == v2) {
          return v4;
        }
      }

      __break(1u);
    }

    else
    {
      uint64_t v13 = 0LL;
      uint64_t v14 = v1 + 32;
      uint64_t v1 = (uint64_t)&type metadata for Any + 8;
      while (1)
      {
        uint64_t v15 = v13 + 1;
        if (__OFADD__(v13, 1LL)) {
          break;
        }
        uint64_t v16 = *(void **)(v14 + 8 * v13);
        uint64_t v23 = 0LL;
        id v17 = v16;
        ((void (*)(void))static Dictionary._conditionallyBridgeFromObjectiveC(_:result:))();

        uint64_t v18 = v23;
        if (!v23)
        {
LABEL_25:
          swift_release(v4);
          return 0LL;
        }

        unint64_t v24 = v4;
        unint64_t v20 = v4[2];
        unint64_t v19 = v4[3];
        if (v20 >= v19 >> 1)
        {
          sub_1001365EC(v19 > 1, v20 + 1, 1);
          uint64_t v4 = v24;
        }

        void v4[2] = v20 + 1;
        v4[v20 + 4] = v18;
        ++v13;
        if (v15 == v2) {
          return v4;
        }
      }
    }

    __break(1u);
LABEL_29:
    if (v1 < 0) {
      uint64_t v22 = v1;
    }
    else {
      uint64_t v22 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v1);
  }

  if (v1 < 0) {
    uint64_t v5 = v1;
  }
  else {
    uint64_t v5 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v1);
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v5);
  swift_bridgeObjectRelease(v1);
  if (v2) {
    goto LABEL_10;
  }
  return v4;
}

void *sub_1001309E0(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  specialized ContiguousArray.reserveCapacity(_:)(*(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10));
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; ; ++i)
      {
        uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
        uint64_t v5 = i + 1;
        if (__OFADD__(i, 1LL)) {
          break;
        }
        uint64_t v6 = v4;
        uint64_t v7 = type metadata accessor for MTInterest(0LL);
        uint64_t v8 = swift_dynamicCastClass(v6, v7);
        if (!v8)
        {
          swift_unknownObjectRelease(v6);
          goto LABEL_15;
        }

        uint64_t v9 = v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
        uint64_t v10 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
        uint64_t v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v9);
        specialized ContiguousArray._endMutation()(v11);
        if (v5 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }

      __break(1u);
    }

    else
    {
      uint64_t v12 = 0LL;
      uint64_t v13 = v1 + 32;
      while (1)
      {
        uint64_t v14 = v12 + 1;
        if (__OFADD__(v12, 1LL)) {
          break;
        }
        uint64_t v15 = *(void **)(v13 + 8 * v12);
        uint64_t v16 = type metadata accessor for MTInterest(0LL);
        uint64_t v17 = swift_dynamicCastClass(v15, v16);
        if (!v17)
        {
LABEL_15:
          swift_release(_swiftEmptyArrayStorage);
          return 0LL;
        }

        uint64_t v1 = v17;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
        uint64_t v18 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
        uint64_t v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v1);
        specialized ContiguousArray._endMutation()(v19);
        ++v12;
        if (v14 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
    }

    __break(1u);
LABEL_18:
    if (v1 < 0) {
      uint64_t v21 = v1;
    }
    else {
      uint64_t v21 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(v1);
    specialized ContiguousArray.reserveCapacity(_:)(v22);
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(v1);
  }

  return _swiftEmptyArrayStorage;
}

void sub_100130BBC(uint64_t a1, uint64_t a2)
{
  int64_t v4 = v2;
  uint64_t v5 = a1;
  id v6 = (id)_MTLogCategoryPlayback(a1, a2);
  if (!v6)
  {
LABEL_211:
    __break(1u);
LABEL_212:
    __break(1u);
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
LABEL_215:
    __break(1u);
LABEL_216:
    __break(1u);
LABEL_217:
    __break(1u);
LABEL_218:
    __break(1u);
LABEL_219:
    __break(1u);
LABEL_220:
    __break(1u);
LABEL_221:
    __break(1u);
LABEL_222:
    __break(1u);
    return;
  }

  uint64_t v7 = v6;
  static os_log_type_t.default.getter(v6);
  uint64_t v8 = (char **)sub_100126450((uint64_t *)&unk_1002B5E60);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_1001C3C20;
  uint64_t v10 = (unint64_t)v5 >> 62;
  uint64_t v11 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    *(void *)(v9 + 56) = &type metadata for Int;
    *(void *)(v9 + 64) = &protocol witness table for Int;
    *(void *)(v9 + 32) = v11;
    os_log(_:dso:log:type:_:)("NetworkMediaManifest: Got %d results from Media API", v119);

    swift_bridgeObjectRelease(v9);
    if (!v11) {
      return;
    }
    int64_t v122 = v11;
    uint64_t v12 = (uint64_t)&selRef_isRefreshing;
    id v13 = [(id)v4 items];
    if (!v13) {
      goto LABEL_212;
    }
    uint64_t v14 = v13;
    uint64_t v7 = (void *)sub_100134284(0LL, &qword_1002B4E40, &off_10023E2F8);
    uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v7);

    if ((unint64_t)v15 >> 62)
    {
      if (v15 < 0) {
        uint64_t v114 = v15;
      }
      else {
        uint64_t v114 = v15 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v15);
      unint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v114);
      swift_bridgeObjectRelease(v15);
    }

    else
    {
      unint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    swift_bridgeObjectRelease(v15);
    if (v16)
    {
      uint64_t v121 = v10;
      uint64_t v3 = (uint64_t)&selRef_attributedStringWithAttachment_;
      id v17 = [(id)v4 currentIndex];
      id v18 = [(id)v4 items];
      if (!v18) {
        goto LABEL_213;
      }
      uint64_t v19 = v18;
      uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v7);

      if ((unint64_t)v20 >> 62)
      {
        if (v20 < 0) {
          uint64_t v115 = v20;
        }
        else {
          uint64_t v115 = v20 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v20);
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter(v115);
        swift_bridgeObjectRelease(v20);
      }

      else
      {
        uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      uint64_t v22 = swift_bridgeObjectRelease(v20);
      if (v21 >= 1 && (unint64_t)v17 < v21)
      {
        id v24 = (id)_MTLogCategoryPlayback(v22, v23);
        if (!v24) {
          goto LABEL_214;
        }
        uint64_t v15 = (uint64_t)v24;
        static os_log_type_t.default.getter(v24);
        uint64_t v10 = swift_allocObject(v8, 72LL, 7LL);
        *(_OWORD *)(v10 + 16) = xmmword_1001C3C20;
        id v25 = [(id)v4 items];
        if (!v25) {
          goto LABEL_215;
        }
        uint64_t v26 = v25;
        uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, v7);

        if (!((unint64_t)v3 >> 62))
        {
          uint64_t v27 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          goto LABEL_18;
        }

        goto LABEL_170;
      }

      goto LABEL_76;
    }

    uint64_t v42 = *(void *)(v4 + OBJC_IVAR___MTNetworkMediaManifest_forwardItemCount);
    BOOL v30 = __OFADD__(v42, 1LL);
    int64_t v43 = v42 + 1;
    if (!v30) {
      break;
    }
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    if (v3 < 0) {
      uint64_t v116 = v3;
    }
    else {
      uint64_t v116 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v3);
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v116);
    swift_bridgeObjectRelease(v3);
LABEL_18:
    swift_bridgeObjectRelease(v3);
    uint64_t v3 = (uint64_t)&selRef_attributedStringWithAttachment_;
    unint64_t v28 = (unint64_t)[(id)v4 currentIndex];
    if ((v28 & 0x8000000000000000LL) != 0)
    {
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      if (v15 < 0) {
        uint64_t v117 = v15;
      }
      else {
        uint64_t v117 = v15 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v15);
      unint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v117);
      swift_bridgeObjectRelease(v15);
      if (v16)
      {
LABEL_81:
        unint64_t v35 = v16 - 1;
        if (__OFSUB__(v16, 1LL)) {
          goto LABEL_201;
        }
        if ((v15 & 0xC000000000000001LL) != 0) {
          goto LABEL_202;
        }
        if ((v35 & 0x8000000000000000LL) != 0)
        {
          __break(1u);
        }

        else if (v35 < *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10))
        {
          id v69 = *(id *)(v15 + 8 * v35 + 32);
          goto LABEL_86;
        }

        __break(1u);
LABEL_205:
        __break(1u);
        goto LABEL_206;
      }

LABEL_182:
      unint64_t v35 = swift_bridgeObjectRelease(v15);
      id v71 = 0LL;
      uint64_t v12 = 0LL;
      if (v10) {
        goto LABEL_87;
      }
LABEL_98:
      uint64_t v9 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v9) {
        goto LABEL_99;
      }
      goto LABEL_91;
    }

    uint64_t v29 = v27 - v28;
    if (__OFSUB__(v27, v28)) {
      goto LABEL_175;
    }
    BOOL v30 = __OFSUB__(v29, 1LL);
    uint64_t v31 = v29 - 1;
    if (v30) {
      goto LABEL_176;
    }
    *(void *)(v10 + 56) = &type metadata for Int;
    *(void *)(v10 + 64) = &protocol witness table for Int;
    *(void *)(v10 + 32) = v31;
    os_log(_:dso:log:type:_:)("NetworkMediaManifest: Removed %d stale items from end of queue", v119);

    swift_bridgeObjectRelease(v10);
    uint64_t v32 = (uint64_t)[(id)v4 currentIndex];
    if (v32 < 0) {
      goto LABEL_177;
    }
    uint64_t v15 = v32;
    id v33 = [(id)v4 *(SEL *)(v12 + 552)];
    if (!v33) {
      goto LABEL_216;
    }
    uint64_t v34 = v33;
    uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v33, v7);

    uint64_t v10 = v15 + 1;
    if (!__OFADD__(v15, 1LL))
    {
      if ((unint64_t)v20 >> 62)
      {
        if (v20 < 0) {
          uint64_t v118 = v20;
        }
        else {
          uint64_t v118 = v20 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v20);
        uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v118);
        swift_bridgeObjectRelease(v20);
        if (v3 < 0) {
          goto LABEL_222;
        }
        swift_bridgeObjectRetain(v20);
        uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v118);
        unint64_t v35 = swift_bridgeObjectRelease(v20);
        if (v15 < v10)
        {
LABEL_192:
          __break(1u);
          goto LABEL_193;
        }
      }

      else
      {
        uint64_t v15 = *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (v15 < v10) {
          goto LABEL_192;
        }
      }

      if (v10 < 0) {
        goto LABEL_194;
      }
      uint64_t v36 = v8;
      if ((v20 & 0xC000000000000001LL) != 0)
      {
        Swift::Int v37 = 0LL;
        do
        {
          Swift::Int v38 = v37 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v37);
          Swift::Int v37 = v38;
        }

        while (v10 != v38);
      }

      if ((unint64_t)v20 >> 62)
      {
        if (v20 < 0) {
          uint64_t v56 = v20;
        }
        else {
          uint64_t v56 = v20 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v20);
        uint64_t v40 = _CocoaArrayWrapper.subscript.getter(0LL, v10, v56);
        uint64_t v119 = v57;
        uint64_t v39 = v58;
        unint64_t v41 = v59;
        swift_bridgeObjectRelease_n(v20, 2LL);
      }

      else
      {
        uint64_t v39 = 0LL;
        uint64_t v40 = v20 & 0xFFFFFFFFFFFFFF8LL;
        uint64_t v119 = (v20 & 0xFFFFFFFFFFFFFF8LL) + 32;
        unint64_t v41 = (2 * v10) | 1;
      }

      uint64_t v8 = v36;
      uint64_t v12 = 0x10029F000LL;
      if ((v41 & 1) == 0)
      {
LABEL_68:
        uint64_t v20 = (uint64_t)sub_100132C5C(v40, v119, v39, v41);
LABEL_75:
        swift_unknownObjectRelease(v40);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_release(v20);
        [(id)v4 setItems:isa];

        uint64_t v3 = (uint64_t)&selRef_attributedStringWithAttachment_;
LABEL_76:
        uint64_t v120 = v8;
        uint64_t v15 = (uint64_t)objc_msgSend((id)v4, "currentIndex", v119);
        uint64_t v66 = NSNotFound.getter();
        uint64_t v8 = &selRef_derivedPropertiesForPodcast_;
        if ((v66 & 0x8000000000000000LL) == 0 && v15 == v66)
        {
          id v67 = [(id)v4 *(SEL *)(v12 + 552)];
          uint64_t v10 = v121;
          if (!v67) {
            goto LABEL_217;
          }
          uint64_t v68 = v67;
          uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v67, v7);

          if (!((unint64_t)v15 >> 62))
          {
            unint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10);
            if (v16) {
              goto LABEL_81;
            }
            goto LABEL_182;
          }

          goto LABEL_178;
        }

        uint64_t v73 = (uint64_t)[(id)v4 currentIndex];
        if ((v73 & 0x8000000000000000LL) == 0)
        {
          uint64_t v15 = v73;
          id v74 = [(id)v4 *(SEL *)(v12 + 552)];
          if (!v74) {
            goto LABEL_218;
          }
          uint64_t v10 = (uint64_t)v74;
          uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v74, v7);

          if ((v20 & 0xC000000000000001LL) != 0) {
            goto LABEL_186;
          }
          if ((unint64_t)v15 < *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10))
          {
            id v75 = *(id *)(v20 + 8 * v15 + 32);
            goto LABEL_97;
          }

LABEL_193:
          __break(1u);
LABEL_194:
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
          goto LABEL_200;
        }

        __break(1u);
        goto LABEL_185;
      }

      uint64_t v60 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
      uint64_t v61 = swift_unknownObjectRetain_n(v40, 2LL);
      uint64_t v62 = (void *)swift_dynamicCastClass(v61, v60);
      if (!v62)
      {
        swift_unknownObjectRelease(v40);
        uint64_t v62 = _swiftEmptyArrayStorage;
      }

      uint64_t v63 = v62[2];
      uint64_t v64 = swift_release(v62);
      if (__OFSUB__(v41 >> 1, v39))
      {
        __break(1u);
      }

      else
      {
        uint64_t v64 = v40;
        if (v63 == (v41 >> 1) - v39)
        {
          uint64_t v20 = swift_dynamicCastClass(v40, v60);
          uint64_t v12 = (uint64_t)&selRef_isRefreshing;
          if (!v20)
          {
            swift_unknownObjectRelease(v40);
            uint64_t v20 = (uint64_t)_swiftEmptyArrayStorage;
          }

          goto LABEL_75;
        }
      }

      swift_unknownObjectRelease(v64);
      uint64_t v12 = 0x10029F000LL;
      goto LABEL_68;
    }

LABEL_185:
    __break(1u);
LABEL_186:
    id v75 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v20);
LABEL_97:
    uint64_t v76 = v75;
    swift_bridgeObjectRelease(v20);
    id v71 = [v76 v8[236]];

    uint64_t v12 = 1LL;
    if (!v121) {
      goto LABEL_98;
    }
LABEL_87:
    while (1)
    {
      uint64_t v72 = v5 < 0 ? v5 : v5 & 0xFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRetain(v5);
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v72);
      unint64_t v35 = swift_bridgeObjectRelease(v5);
      if (v9) {
        break;
      }
LABEL_91:
      uint64_t v10 = 0LL;
LABEL_111:
      uint64_t v15 = v10 + 1;
      uint64_t v8 = v120;
      if (__OFADD__(v10, 1LL))
      {
        __break(1u);
        goto LABEL_167;
      }

      if (v15 >= v122) {
        return;
      }
      uint64_t v81 = *(void *)(v4 + OBJC_IVAR___MTNetworkMediaManifest_forwardItemCount);
      BOOL v30 = __OFADD__(v15, v81);
      int64_t v82 = v15 + v81;
      if (v30) {
        goto LABEL_195;
      }
      uint64_t v83 = (void *)v4;
      if (v122 >= v82) {
        int64_t v4 = v82;
      }
      else {
        int64_t v4 = v122;
      }
      uint64_t v10 = v121;
      if (v4 < v15) {
        goto LABEL_196;
      }
      if (v121)
      {
        if (v5 < 0) {
          uint64_t v85 = v5;
        }
        else {
          uint64_t v85 = v5 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v5);
        uint64_t v84 = _CocoaArrayWrapper.endIndex.getter(v85);
        unint64_t v35 = swift_bridgeObjectRelease(v5);
      }

      else
      {
        uint64_t v84 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      if (v84 < v15) {
        goto LABEL_197;
      }
      if (v15 < 0) {
        goto LABEL_198;
      }
      if (v121)
      {
        if (v5 < 0) {
          uint64_t v87 = v5;
        }
        else {
          uint64_t v87 = v5 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v5);
        uint64_t v86 = _CocoaArrayWrapper.endIndex.getter(v87);
        unint64_t v35 = swift_bridgeObjectRelease(v5);
      }

      else
      {
        uint64_t v86 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      if (v86 < v4) {
        goto LABEL_199;
      }
      if ((v5 & 0xC000000000000001LL) != 0 && v15 != v4)
      {
        if (v15 >= (unint64_t)v4)
        {
          __break(1u);
          goto LABEL_211;
        }

        Swift::Int v88 = v15;
        do
        {
          Swift::Int v89 = v88 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v88);
          Swift::Int v88 = v89;
        }

        while (v4 != v89);
      }

      if (v121)
      {
        if (v5 < 0) {
          uint64_t v93 = v5;
        }
        else {
          uint64_t v93 = v5 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v5);
        uint64_t v90 = _CocoaArrayWrapper.subscript.getter(v15, v4, v93);
        uint64_t v91 = v94;
        uint64_t v15 = v95;
        unint64_t v92 = v96;
        swift_bridgeObjectRelease(v5);
      }

      else
      {
        uint64_t v90 = v5 & 0xFFFFFFFFFFFFFF8LL;
        uint64_t v91 = (v5 & 0xFFFFFFFFFFFFFF8LL) + 32;
        unint64_t v92 = (2 * v4) | 1;
        swift_bridgeObjectRetain(v5);
      }

      swift_unknownObjectRetain(v90);
      id v97 = [v83 items];
      if (!v97) {
        goto LABEL_219;
      }
      uint64_t v98 = v97;
      uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v97, v7);

      sub_10012EFB0(v90, v91, v15, v92);
      uint64_t v10 = v3;
      if (v3)
      {
        v99.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v3);
      }

      else
      {
        v99.super.Class isa = 0LL;
      }

      [v83 setItems:v99.super.isa];

      [v83 postLoadedAdditionalItemsNotification];
      id v100 = [v83 postManifestDidChangeNotification];
      id v102 = (id)_MTLogCategoryPlayback(v100, v101);
      if (!v102) {
        goto LABEL_220;
      }
      uint64_t v5 = (uint64_t)v102;
      uint64_t v7 = (void *)static os_log_type_t.default.getter(v102);
      unint64_t v35 = swift_allocObject(v120, 72LL, 7LL);
      *(_OWORD *)(v35 + 16) = xmmword_1001C3C20;
      BOOL v30 = __OFSUB__(v92 >> 1, v15);
      int64_t v4 = (v92 >> 1) - v15;
      if (!v30)
      {
        unint64_t v103 = v35;
        *(void *)(v35 + 56) = &type metadata for Int;
        *(void *)(v35 + 64) = &protocol witness table for Int;
        *(void *)(v35 + 32) = v4;
        os_log(_:dso:log:type:_:)("NetworkMediaManifest: Added %d items to the end of the queue", v119);

        uint64_t v104 = swift_bridgeObjectRelease(v103);
        id v106 = (id)_MTLogCategoryPlayback(v104, v105);
        if (!v106) {
          goto LABEL_221;
        }
        uint64_t v107 = v106;
        uint64_t v108 = static os_log_type_t.default.getter(v106);
        uint64_t v109 = swift_allocObject(v120, 72LL, 7LL);
        *(_OWORD *)(v109 + 16) = xmmword_1001C3C20;
        uint64_t v110 = sub_100131A8C();
        *(void *)(v109 + 56) = sub_100126450(&qword_1002B4E48);
        *(void *)(v109 + 64) = sub_1001342BC( &qword_1002B4E50,  &qword_1002B4E48,  (uint64_t)&protocol conformance descriptor for [A]);
        *(void *)(v109 + 32) = v110;
        os_log(_:dso:log:type:_:)( "NetworkMediaManifest: Queue is now: %@",  38LL,  2LL,  &_mh_execute_header,  v107,  v108,  v109);
        swift_unknownObjectRelease(v90);

        swift_bridgeObjectRelease(v109);
        return;
      }

LABEL_200:
      __break(1u);
LABEL_201:
      __break(1u);
LABEL_202:
      id v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v35, v15);
LABEL_86:
      uint64_t v70 = v69;
      swift_bridgeObjectRelease(v15);
      id v71 = [v70 v8[236]];

      uint64_t v12 = 1LL;
      if (!v10) {
        goto LABEL_98;
      }
    }

LABEL_99:
    uint64_t v119 = v4;
    uint64_t v10 = 0LL;
    int64_t v4 = v5 & 0xC000000000000001LL;
    while (1)
    {
      if (v4) {
        id v77 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v5);
      }
      else {
        id v77 = *(id *)(v5 + 8 * v10 + 32);
      }
      uint64_t v3 = (uint64_t)v77;
      id v78 = objc_msgSend(v77, v8[236], v119);

      if (v78 == v71) {
        char v79 = v12;
      }
      else {
        char v79 = 0;
      }
      if ((v79 & 1) != 0) {
        goto LABEL_110;
      }
      uint64_t v80 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        break;
      }
      ++v10;
      if (v80 == v9)
      {
        uint64_t v10 = 0LL;
LABEL_110:
        int64_t v4 = v119;
        goto LABEL_111;
      }
    }

    __break(1u);
LABEL_154:
    int64_t v111 = v4;
    if (v5 < 0) {
      uint64_t v112 = v5;
    }
    else {
      uint64_t v112 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v113 = v112;
    int64_t v4 = v111;
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v113);
    swift_bridgeObjectRelease(v5);
  }

  uint64_t v3 = v4;
  if (v43 >= v122) {
    int64_t v4 = v122;
  }
  else {
    int64_t v4 = v43;
  }
  if (v4 < 0) {
    goto LABEL_168;
  }
  if (v10)
  {
    if (v5 < 0) {
      uint64_t v8 = (char **)v5;
    }
    else {
      uint64_t v8 = (char **)(v5 & 0xFFFFFFFFFFFFFF8LL);
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v8);
    unint64_t v35 = swift_bridgeObjectRelease(v5);
    if (v15 < 0) {
      goto LABEL_205;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v8 = (char **)_CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    uint64_t v8 = *(char ***)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if ((v5 & 0xC000000000000001LL) != 0 && v4)
  {
    Swift::Int v44 = 0LL;
    do
    {
      Swift::Int v45 = v44 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v44);
      Swift::Int v44 = v45;
    }

    while (v4 != v45);
  }

  if (!v10)
  {
    uint64_t v8 = (char **)(v5 & 0xFFFFFFFFFFFFFF8LL);
    uint64_t v15 = (v5 & 0xFFFFFFFFFFFFFF8LL) + 32;
    unint64_t v16 = (2 * v4) | 1;
    swift_bridgeObjectRetain(v5);
    goto LABEL_56;
  }

  if (v5 < 0) {
    uint64_t v46 = v5;
  }
  else {
    uint64_t v46 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v5);
  uint64_t v8 = (char **)_CocoaArrayWrapper.subscript.getter(0LL, v4, v46);
  uint64_t v15 = v47;
  uint64_t v10 = v48;
  unint64_t v16 = v49;
  swift_bridgeObjectRelease(v5);
  if ((v16 & 1) == 0)
  {
LABEL_55:
    uint64_t v50 = sub_100132C5C((uint64_t)v8, v15, v10, v16);
    goto LABEL_62;
  }

LABEL_62:
  swift_unknownObjectRelease(v8);
  Class v55 = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v50);
  [(id)v3 setItems:v55];
}

  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  id result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

unint64_t sub_1001319A4()
{
  id v1 = [v0 currentIndex];
  uint64_t v2 = (uint64_t)[v0 count];
  uint64_t v3 = [v0 count];
  unint64_t result = (unint64_t)[v0 currentIndex];
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }

  int64_t v6 = (int64_t)&v3[-result];
  if (__OFSUB__(v3, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v3 = (_BYTE *)(v6 - 1);
  if (!__OFSUB__(v6, 1LL)) {
    return (unint64_t)v3;
  }
LABEL_11:
  __break(1u);
  return result;
}

void *sub_100131A8C()
{
  unint64_t result = [v0 items];
  if (!result) {
    goto LABEL_19;
  }
  uint64_t v2 = result;
  uint64_t v3 = sub_100134284(0LL, &qword_1002B4E40, &off_10023E2F8);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if ((unint64_t)v4 >> 62)
  {
    if (v4 < 0) {
      uint64_t v12 = v4;
    }
    else {
      uint64_t v12 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(v4);
    if (v5) {
      goto LABEL_4;
    }
LABEL_17:
    swift_bridgeObjectRelease(v4);
    return _swiftEmptyArrayStorage;
  }

  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v5) {
    goto LABEL_17;
  }
LABEL_4:
  unint64_t result = (void *)sub_1001365B4(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000LL) == 0)
  {
    for (uint64_t i = 0LL; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001LL) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
      }
      else {
        id v7 = *(id *)(v4 + 8 * i + 32);
      }
      uint64_t v8 = v7;
      id v9 = [v7 episodeStoreId];

      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1) {
        sub_1001365B4(v10 > 1, v11 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v11 + 1;
      _swiftEmptyArrayStorage[v11 + 4] = v9;
    }

    goto LABEL_17;
  }

  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

id sub_100131C90()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NetworkMediaManifest(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100131D44()
{
  return type metadata accessor for NetworkMediaManifest(0LL);
}

uint64_t type metadata accessor for NetworkMediaManifest(uint64_t a1)
{
  uint64_t result = qword_1002B4E30;
  if (!qword_1002B4E30) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NetworkMediaManifest);
  }
  return result;
}

uint64_t sub_100131D88(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[4] = "\b";
  uint64_t result = type metadata accessor for MediaRequest.ContentType(319LL);
  if (v3 <= 0x3F)
  {
    void v4[5] = *(void *)(result - 8) + 64LL;
    void v4[6] = &unk_1001C41C0;
    v4[7] = &unk_1001C41C0;
    v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 9LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_100131E38(uint64_t a1)
{
  uint64_t v2 = sub_100126450(&qword_1002B4F60);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }

  sub_100126450(&qword_1002B4F68);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v25 = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10012A418(v13, (uint64_t)v5, &qword_1002B4F60);
    unint64_t result = sub_100132298((uint64_t)v5);
    if ((v16 & 1) != 0) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for MediaRequest.Relationship(0LL);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))( v18 + *(void *)(*(void *)(v19 - 8) + 72LL) * v17,  v5,  v19);
    *(void *)(v8[7] + 8 * v17) = *(void *)&v5[v10];
    uint64_t v20 = v8[2];
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_12;
    }
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      uint64_t v23 = v25;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100131FCC( uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(char *), uint64_t (*a5)(void))
{
  id v33 = a5;
  uint64_t v34 = a4;
  uint64_t v8 = sub_100126450(a2);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
    uint64_t v14 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v30 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v30);
    return (unint64_t)v14;
  }

  sub_100126450(a3);
  uint64_t v13 = static _DictionaryStorage.allocate(capacity:)(v12);
  uint64_t v14 = (void *)v13;
  uint64_t v15 = *(void *)(a1 + 16);
  if (!v15) {
    goto LABEL_9;
  }
  uint64_t v16 = *(int *)(v8 + 48);
  uint64_t v17 = a1;
  uint64_t v18 = v13 + 64;
  unint64_t v19 = (*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v32 = v17;
  uint64_t v20 = v17 + v19;
  uint64_t v21 = *(void *)(v9 + 72);
  swift_retain(v13);
  while (1)
  {
    sub_10012A418(v20, (uint64_t)v11, a2);
    unint64_t result = v34(v11);
    if ((v23 & 1) != 0) {
      break;
    }
    unint64_t v24 = result;
    *(void *)(v18 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v25 = v14[6];
    uint64_t v26 = v33(0LL);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v26 - 8) + 32LL))( v25 + *(void *)(*(void *)(v26 - 8) + 72LL) * v24,  v11,  v26);
    *(void *)(v14[7] + 8 * v24) = *(void *)&v11[v16];
    uint64_t v27 = v14[2];
    BOOL v28 = __OFADD__(v27, 1LL);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_12;
    }
    v14[2] = v29;
    v20 += v21;
    if (!--v15)
    {
      swift_release(v14);
      uint64_t v30 = v32;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100132168(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for MediaRequest.ContentType(0LL);
  uint64_t v6 = sub_100127210( &qword_1002B4F38,  (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType,  (uint64_t)&protocol conformance descriptor for MediaRequest.ContentType);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100132330( a1,  v7,  (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType,  &qword_1002B6200,  (uint64_t)&protocol conformance descriptor for MediaRequest.ContentType);
}

unint64_t sub_100132200(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for MediaRequest.Filter(0LL);
  uint64_t v6 = sub_100127210( &qword_1002B4F50,  (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.Filter,  (uint64_t)&protocol conformance descriptor for MediaRequest.Filter);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100132330( a1,  v7,  (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.Filter,  &qword_1002B4F58,  (uint64_t)&protocol conformance descriptor for MediaRequest.Filter);
}

unint64_t sub_100132298(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for MediaRequest.Relationship(0LL);
  uint64_t v6 = sub_100127210( &qword_1002B4F70,  (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.Relationship,  (uint64_t)&protocol conformance descriptor for MediaRequest.Relationship);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100132330( a1,  v7,  (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.Relationship,  &qword_1002B4F78,  (uint64_t)&protocol conformance descriptor for MediaRequest.Relationship);
}

unint64_t sub_100132330( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v6 = v5;
  uint64_t v20 = a1;
  uint64_t v21 = a3;
  uint64_t v8 = a3(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - v10;
  uint64_t v12 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  if (((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0)
  {
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v9 + 72);
    uint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(void *)(v6 + 48) + v15 * v13, v8);
      uint64_t v17 = sub_100127210(v22, v21, v23);
      char v18 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v8, v17);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v18 & 1) != 0) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }

    while (((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0);
  }

  return v13;
}

void *sub_100132460(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100126450((uint64_t *)&unk_1002B5080);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      _DWORD v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_10013398C(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_10013256C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100126450(&qword_1002B4EA0);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      _DWORD v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_100133A7C(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_100132678(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100126450(&qword_1002B4FB8);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      _DWORD v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_100134434(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_100132784(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100132798( a1,  a2,  a3,  a4,  &qword_1002B4FC8,  (uint64_t (*)(void))&type metadata accessor for FeedUpdateRequest);
}

uint64_t sub_100132798( char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v10 = a2;
  }

  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    char v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_100126450(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  char v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15) {
    goto LABEL_29;
  }
  if (v19 - v17 == 0x8000000000000000LL && v15 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  void v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    unint64_t v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(void *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }

    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }

    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10013453C(0LL, v11, v24, a4, a6);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_1001329A4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100132798( a1,  a2,  a3,  a4,  &qword_1002B4FB0,  (uint64_t (*)(void))&type metadata accessor for RemoteNonFollowedShow);
}

uint64_t sub_1001329B8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100132798( a1,  a2,  a3,  a4,  &qword_1002B4FA8,  (uint64_t (*)(void))&type metadata accessor for ArtworkRequest);
}

uint64_t sub_1001329CC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100132798( a1,  a2,  a3,  a4,  &qword_1002B4F98,  (uint64_t (*)(void))&type metadata accessor for RemoteInterest);
}

void *sub_1001329E0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100126450(&qword_1002B4FA0);
      uint64_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      _DWORD v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4]) {
          memmove(v14, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_100134654(0LL, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_100132AEC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_18;
  }
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v8 = 16 * v5;
  if (v5 <= 0)
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
    if (v4 != a3) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  uint64_t v9 = sub_100126450((uint64_t *)&unk_1002B5080);
  uint64_t v10 = (void *)swift_allocObject(v9, v8 + 32, 7LL);
  int64_t v11 = j__malloc_size(v10);
  uint64_t v12 = v11 - 32;
  if (v11 < 32) {
    uint64_t v12 = v11 - 17;
  }
  v10[2] = v5;
  v10[3] = 2 * (v12 >> 4);
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

void *sub_100132C5C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_18;
  }
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v8 = 8 * v5;
  if (v5 <= 0)
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
    if (v4 != a3) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  uint64_t v9 = sub_100126450((uint64_t *)&unk_1002B6160);
  uint64_t v10 = (void *)swift_allocObject(v9, v8 + 32, 7LL);
  int64_t v11 = j__malloc_size(v10);
  uint64_t v12 = v11 - 32;
  if (v11 < 32) {
    uint64_t v12 = v11 - 25;
  }
  v10[2] = v5;
  v10[3] = (2 * (v12 >> 3)) | 1;
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

void (*sub_100132DEC( void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_100132E6C(v6, a2, a3);
  return sub_100132E40;
}

void sub_100132E40(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void (*sub_100132E6C(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_100132ED8;
  }

  __break(1u);
  return result;
}

void sub_100132ED8(id *a1)
{
}

uint64_t sub_100132EE4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1001342BC(&qword_1002B4F20, &qword_1002B4F18, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_100126450(&qword_1002B4F18);
          unint64_t v13 = sub_100132DEC(v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

void *sub_100133100(void *a1)
{
  uint64_t v2 = type metadata accessor for ServerPodcast(0LL);
  uint64_t v3 = swift_dynamicCastClass(a1, v2);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = swift_unknownObjectRetain(a1);
    uint64_t v6 = dispatch thunk of ServerPodcast.episodes.getter(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      id v8 = a1;
      uint64_t v9 = sub_1001335B0(v7, v4);
      swift_bridgeObjectRelease(v7);
    }

    else
    {

      return _swiftEmptyArrayStorage;
    }

    return v9;
  }

  uint64_t v10 = type metadata accessor for ServerPodcastStation();
  uint64_t v9 = _swiftEmptyArrayStorage;
  if (!swift_dynamicCastClass(a1, v10)) {
    return v9;
  }
  uint64_t v11 = swift_unknownObjectRetain(a1);
  uint64_t v12 = dispatch thunk of ServerPodcastStation.episodes.getter(v11);
  if (!v12)
  {

    return v9;
  }

  uint64_t v13 = v12;
  if (!((unint64_t)v12 >> 62))
  {
    uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = (void *)swift_bridgeObjectRetain(v12);
    if (v14) {
      goto LABEL_8;
    }
LABEL_25:
    swift_bridgeObjectRelease(v13);
    uint64_t v9 = _swiftEmptyArrayStorage;

    swift_bridgeObjectRelease(v13);
    return v9;
  }

  if (v12 >= 0) {
    uint64_t v23 = v12 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    uint64_t v23 = v12;
  }
  swift_bridgeObjectRetain(v12);
  uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter(v23);
  uint64_t v14 = (uint64_t)result;
  if (!result) {
    goto LABEL_25;
  }
LABEL_8:
  if (v14 >= 1)
  {
    for (uint64_t i = 0LL; i != v14; ++i)
    {
      if ((v13 & 0xC000000000000001LL) != 0) {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v13);
      }
      else {
        id v18 = *(id *)(v13 + 8 * i + 32);
      }
      size_t v19 = v18;
      id v20 = [objc_allocWithZone((Class)MTPlayerItem) initWithPodcastEpisode:v18 podcast:0];

      if (v20)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v22 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v21 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v22 >= v21 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1LL);
        }
        uint64_t v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
        specialized Array._endMutation()(v17);
      }
    }

    goto LABEL_25;
  }

  __break(1u);
  return result;
}

void *sub_100133324(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ServerPodcast(0LL);
  uint64_t v3 = swift_dynamicCastClass(a1, v2);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = swift_unknownObjectRetain(a1);
    uint64_t v6 = dispatch thunk of ServerPodcast.episodes.getter(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      swift_unknownObjectRetain(a1);
      id v8 = sub_1001335B0(v7, v4);
      swift_bridgeObjectRelease(v7);
      swift_unknownObjectRelease_n(a1, 2LL);
    }

    else
    {
      swift_unknownObjectRelease(a1);
      return _swiftEmptyArrayStorage;
    }

    return v8;
  }

  uint64_t v9 = type metadata accessor for ServerPodcastStation(0LL);
  id v8 = _swiftEmptyArrayStorage;
  if (!swift_dynamicCastClass(a1, v9)) {
    return v8;
  }
  uint64_t v10 = swift_unknownObjectRetain(a1);
  uint64_t v11 = dispatch thunk of ServerPodcastStation.episodes.getter(v10);
  if (!v11)
  {
    swift_unknownObjectRelease(a1);
    return v8;
  }

  uint64_t v12 = v11;
  if (!((unint64_t)v11 >> 62))
  {
    uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = (void *)swift_bridgeObjectRetain(v11);
    if (v13) {
      goto LABEL_8;
    }
LABEL_25:
    swift_bridgeObjectRelease(v12);
    id v8 = _swiftEmptyArrayStorage;
    swift_unknownObjectRelease(a1);
    swift_bridgeObjectRelease(v12);
    return v8;
  }

  if (v11 >= 0) {
    uint64_t v22 = v11 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    uint64_t v22 = v11;
  }
  swift_bridgeObjectRetain(v11);
  uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter(v22);
  uint64_t v13 = (uint64_t)result;
  if (!result) {
    goto LABEL_25;
  }
LABEL_8:
  if (v13 >= 1)
  {
    for (uint64_t i = 0LL; i != v13; ++i)
    {
      if ((v12 & 0xC000000000000001LL) != 0) {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v12);
      }
      else {
        id v17 = *(id *)(v12 + 8 * i + 32);
      }
      id v18 = v17;
      id v19 = [objc_allocWithZone((Class)MTPlayerItem) initWithPodcastEpisode:v17 podcast:0];

      if (v19)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v21 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v20 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v21 >= v20 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1LL);
        }
        uint64_t v16 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
        specialized Array._endMutation()(v16);
      }
    }

    goto LABEL_25;
  }

  __break(1u);
  return result;
}

uint64_t sub_100133558(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10013356C(result, a2);
  }
  return result;
}

uint64_t sub_10013356C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void *sub_1001335B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v13))
  {
    uint64_t v5 = 4LL;
    while (1)
    {
      id v7 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      id v8 = v7;
      uint64_t v9 = v5 - 3;
      if (__OFADD__(v5 - 4, 1LL)) {
        break;
      }
      id v10 = [objc_allocWithZone((Class)MTPlayerItem) initWithPodcastEpisode:v7 podcast:a2];

      if (v10)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v12 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v11 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v12 >= v11 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1LL);
        }
        uint64_t v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
        specialized Array._endMutation()(v6);
      }

      ++v5;
      if (v9 == v4) {
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_15:
    if (a1 < 0) {
      uint64_t v13 = a1;
    }
    else {
      uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

uint64_t sub_100133738(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = *(void *)&v2[OBJC_IVAR___MTNetworkMediaManifest_manifestWorkQueue];
  uint64_t v13 = (void *)swift_allocObject(&unk_100246378, 40LL, 7LL);
  _DWORD v13[2] = v2;
  void v13[3] = a1;
  void v13[4] = a2;
  aBlock[4] = sub_10013393C;
  unint64_t v24 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10013D2D8;
  aBlock[3] = &unk_100246390;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v2;
  uint64_t v16 = sub_10013397C(a1, a2);
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_100127210( (unint64_t *)&qword_1002B4E90,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100126450((uint64_t *)&unk_1002B5490);
  uint64_t v19 = sub_1001342BC( (unint64_t *)&qword_1002B4E98,  (uint64_t *)&unk_1002B5490,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v5, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v24);
}

uint64_t sub_10013393C()
{
  return sub_100133B84(*(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100133964(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100133974(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10013397C(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_10013398C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100133A7C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100126450(&qword_1002B4EA8);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100133B84(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v5 = type metadata accessor for MediaRequest.ContentType(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = &v34[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if ((*(_BYTE *)(v2 + OBJC_IVAR___MTNetworkMediaManifest_refreshInProgress) & 1) != 0)
  {
    if (a1)
    {
      uint64_t v9 = swift_allocObject(&unk_100246418, 32LL, 7LL);
      *(void *)(v9 + 16) = a1;
      *(void *)(v9 + 24) = a2;
      uint64_t v10 = sub_100133FDC;
    }

    else
    {
      uint64_t v10 = 0LL;
      uint64_t v9 = 0LL;
    }

    uint64_t v22 = (void **)(v2 + OBJC_IVAR___MTNetworkMediaManifest_inProgressRefreshHandlers);
    swift_beginAccess(v22, v34, 33LL, 0LL);
    uint64_t v23 = *v22;
    sub_10013397C((uint64_t)a1, a2);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
    void *v22 = v23;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v23 = sub_10013256C(0LL, v23[2] + 1LL, 1, v23);
      void *v22 = v23;
    }

    unint64_t v26 = v23[2];
    unint64_t v25 = v23[3];
    if (v26 >= v25 >> 1)
    {
      uint64_t v23 = sub_10013256C((void *)(v25 > 1), v26 + 1, 1, v23);
      void *v22 = v23;
    }

    v23[2] = v26 + 1;
    uint64_t v27 = &v23[2 * v26];
    v27[4] = v10;
    void v27[5] = v9;
    return swift_endAccess(v34);
  }

  else
  {
    *(_BYTE *)(v2 + OBJC_IVAR___MTNetworkMediaManifest_refreshInProgress) = 1;
    uint64_t v11 = swift_allocObject(&unk_1002463C8, 24LL, 7LL);
    swift_unknownObjectWeakInit(v11 + 16, v2);
    unint64_t v12 = (void *)swift_allocObject(&unk_1002463F0, 40LL, 7LL);
    _DWORD v12[2] = v11;
    v12[3] = a1;
    void v12[4] = a2;
    swift_retain(v11);
    sub_10013397C((uint64_t)a1, a2);
    int64_t v13 = sub_1001319A4();
    uint64_t v14 = OBJC_IVAR___MTNetworkMediaManifest_forwardItemCount;
    if (v13 >= *(void *)(v2 + OBJC_IVAR___MTNetworkMediaManifest_forwardItemCount))
    {
      sub_10012ED10(0LL, 0, v11, a1);
      swift_release(v11);
      return swift_release(v12);
    }

    else
    {
      swift_release(v11);
      uint64_t v15 = *(void *)(v2 + OBJC_IVAR___MTNetworkMediaManifest_initialIds);
      swift_getObjectType(v2);
      if (v15)
      {
        uint64_t v16 = *(void **)(v2 + OBJC_IVAR___MTNetworkMediaManifest_mediaRequestController);
        uint64_t v17 = v2 + OBJC_IVAR___MTNetworkMediaManifest_contentType;
        swift_beginAccess(v2 + OBJC_IVAR___MTNetworkMediaManifest_contentType, v34, 0LL, 0LL);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v8, v17, v5);
        uint64_t v18 = *(void *)(v2 + v14);
        uint64_t v19 = *(void *)(v2 + OBJC_IVAR___MTNetworkMediaManifest_episodeFetchLimit);
        swift_bridgeObjectRetain(v15);
        id v20 = v16;
        swift_retain(v12);
        sub_10012B760( 0LL,  v15,  v20,  (uint64_t)v8,  v18,  v19,  (uint64_t)_swiftEmptyArrayStorage,  0,  (uint64_t (*)(uint64_t, void))sub_100133FAC,  (uint64_t)v12);
        swift_bridgeObjectRelease(v15);
      }

      else
      {
        BOOL v28 = *(void **)(v2 + OBJC_IVAR___MTNetworkMediaManifest_mediaRequestController);
        uint64_t v29 = v2 + OBJC_IVAR___MTNetworkMediaManifest_contentType;
        swift_beginAccess(v2 + OBJC_IVAR___MTNetworkMediaManifest_contentType, v34, 0LL, 0LL);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v8, v29, v5);
        uint64_t v30 = *(void *)(v2 + v14);
        uint64_t v31 = *(void *)(v2 + OBJC_IVAR___MTNetworkMediaManifest_episodeFetchLimit);
        swift_retain(v12);
        id v32 = v28;
        sub_10012B760( 0LL,  (uint64_t)_swiftEmptyArrayStorage,  v32,  (uint64_t)v8,  v30,  v31,  (uint64_t)_swiftEmptyArrayStorage,  0,  (uint64_t (*)(uint64_t, void))sub_100133FAC,  (uint64_t)v12);
      }

      swift_release_n(v12, 2LL);
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    }
  }

uint64_t sub_100133F54()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100133F78()
{
  if (v0[3]) {
    swift_release(v0[4]);
  }
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_100133FAC(uint64_t a1, char a2)
{
}

uint64_t sub_100133FB8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100133FDC()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100133FFC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100134020()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100134030()
{
  uint64_t v1 = type metadata accessor for MediaRequest.ContentType(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  if (*(void *)(v0 + 16)) {
    swift_release(*(void *)(v0 + 24));
  }
  uint64_t v5 = (v3 + 88) & ~v3;
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 48));
  swift_release(*(void *)(v0 + 64));
  swift_bridgeObjectRelease(*(void *)(v0 + 72));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);
  return swift_deallocObject(v0, ((((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8, v3 | 7);
}

id sub_1001340E8(int64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *(void *)(type metadata accessor for MediaRequest.ContentType(0LL) - 8);
  unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 88LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v13 = (*(void *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10012F3F4( a1,  a2,  a3,  a4,  a5,  *(uint64_t (**)(void, void))(v5 + 16),  *(void *)(v5 + 24),  *(void *)(v5 + 32),  *(void *)(v5 + 40),  *(uint64_t **)(v5 + 48),  *(void *)(v5 + 56),  *(void *)(v5 + 64),  *(void *)(v5 + 72),  *(void *)(v5 + 80),  v5 + v12,  *(void *)(v5 + v13),  *(void *)(v5 + ((v13 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

unint64_t sub_1001341A4()
{
  unint64_t result = qword_1002B4F10;
  if (!qword_1002B4F10)
  {
    uint64_t v1 = sub_100134284(255LL, &qword_1002B4F08, &OBJC_CLASS___NSError_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1002B4F10);
  }

  return result;
}

uint64_t sub_1001341FC(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_10013420C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100134230()
{
  if (*(void *)(v0 + 16)) {
    swift_release(*(void *)(v0 + 24));
  }
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10013425C()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_100134284(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_1001342BC(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_1001264DC(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1001342FC()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_100134328()
{
}

uint64_t sub_100134334()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100134344()
{
  return sub_100134784(*(uint64_t (**)(void))(v0 + 16));
}

unint64_t sub_10013434C()
{
  unint64_t result = qword_1002B5690;
  if (!qword_1002B5690)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1002B5690);
  }

  return result;
}

uint64_t sub_100134394()
{
  if (*(void *)(v0 + 24)) {
    swift_release(*(void *)(v0 + 32));
  }
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1001343C8()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 24);
  if (v1) {
    return v1();
  }
  return result;
}

void sub_1001343F0(uint64_t a1)
{
}

uint64_t sub_1001343F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100134434(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100126450(&qword_1002B4FC0);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10013453C( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100134654(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

id MTFeedUpdateManager.statusManager.getter()
{
  id result = [v0 feedManager];
  if (!result) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100134784(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1001347A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

id NonFollowedShowsSyncStorage.importContext.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_importContext);
}

id sub_1001347D4()
{
  uint64_t v1 = (void *)objc_opt_self(&OBJC_CLASS___MTDB);
  id v2 = v0;
  id v3 = [v1 sharedInstance];
  id v4 = [v3 importContext];

  uint64_t NonFollowedShows = type metadata accessor for FetchNonFollowedShows();
  uint64_t v6 = swift_allocObject(NonFollowedShows, 24LL, 7LL);
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  uint64_t v7 = qword_1002B4860;
  id v8 = v4;
  if (v7 != -1) {
    swift_once(&qword_1002B4860, sub_10016F6AC);
  }
  swift_beginAccess(&static PodcastsStateCoordinator.shared, v13, 0LL, 0LL);
  id v9 = (id)static PodcastsStateCoordinator.shared;

  id v10 = sub_1001371AC((uint64_t)v8, v6, (uint64_t)v9);
  uint64_t ObjectType = swift_getObjectType(v2);
  swift_deallocPartialClassInstance(v2, ObjectType, 96LL, 7LL);
  return v10;
}

id NonFollowedShowsSyncStorage.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NonFollowedShowsSyncStorage();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for NonFollowedShowsSyncStorage()
{
  return objc_opt_self(&OBJC_CLASS____TtC8Podcasts27NonFollowedShowsSyncStorage);
}

id sub_1001349B4()
{
  return *(id *)(*v0 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_importContext);
}

uint64_t NonFollowedShowsSyncStorage.isNonFollowedShowsSyncDirty.getter()
{
  uint64_t v0 = (void *)static SyncKeysRepository.shared.getter();
  char v1 = SyncKeysRepository.isNonFollowedShowsSyncDirty.getter();

  return v1 & 1;
}

void NonFollowedShowsSyncStorage.isNonFollowedShowsSyncDirty.setter(uint64_t a1)
{
  id v2 = (id)static SyncKeysRepository.shared.getter();
  SyncKeysRepository.isNonFollowedShowsSyncDirty.setter(a1);
}

void (*NonFollowedShowsSyncStorage.isNonFollowedShowsSyncDirty.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SyncKeysRepository(0LL);
  *(void *)a1 = v2;
  id v3 = (void *)static SyncKeysRepository.shared.getter(v2);
  char v4 = SyncKeysRepository.isNonFollowedShowsSyncDirty.getter();

  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v4 & 1;
  return sub_100134AAC;
}

void sub_100134AAC(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  id v2 = (id)static SyncKeysRepository.shared.getter();
  SyncKeysRepository.isNonFollowedShowsSyncDirty.setter(v1);
}

uint64_t NonFollowedShowsSyncStorage.nonFollowedShowsLastSyncTimestamp.getter()
{
  uint64_t v0 = (void *)static SyncKeysRepository.shared.getter();
  uint64_t Sync = SyncKeysRepository.nonFollowedShowsLastSyncTimestamp.getter();

  return Sync;
}

void NonFollowedShowsSyncStorage.nonFollowedShowsLastSyncTimestamp.setter(uint64_t a1, char a2)
{
  id v5 = (id)static SyncKeysRepository.shared.getter();
  if ((a2 & 1) != 0) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = a1;
  }
  SyncKeysRepository.nonFollowedShowsLastSyncTimestamp.setter(v4, 0LL);
}

void (*sub_100134B9C(void *a1))(void *)
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = NonFollowedShowsSyncStorage.nonFollowedShowsLastSyncTimestamp.modify((uint64_t)v2);
  return sub_100134BD8;
}

void (*NonFollowedShowsSyncStorage.nonFollowedShowsLastSyncTimestamp.modify( uint64_t a1))(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for SyncKeysRepository(0LL);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  id v3 = (void *)static SyncKeysRepository.shared.getter(v2);
  uint64_t Sync = SyncKeysRepository.nonFollowedShowsLastSyncTimestamp.getter();
  char v6 = v5;

  *(void *)a1 = Sync;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v6 & 1;
  return sub_100134C40;
}

void sub_100134C40(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int v2 = *((unsigned __int8 *)a1 + 8);
  id v4 = (id)static SyncKeysRepository.shared.getter();
  if (v2) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = v1;
  }
  SyncKeysRepository.nonFollowedShowsLastSyncTimestamp.setter(v3, 0LL);
}

uint64_t sub_100134C98(uint64_t a1, uint64_t a2)
{
  return sub_100134D78(a1, a2, (uint64_t (*)(void))&SyncKeysRepository.nonFollowedShowsSyncVersion.getter);
}

uint64_t NonFollowedShowsSyncStorage.syncVersion.getter()
{
  return sub_100134DD4((uint64_t (*)(void))&SyncKeysRepository.nonFollowedShowsSyncVersion.getter);
}

void sub_100134CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void NonFollowedShowsSyncStorage.syncVersion.setter(uint64_t a1, uint64_t a2)
{
}

void (*sub_100134CC8(uint64_t **a1))(void *)
{
  int v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = (uint64_t)NonFollowedShowsSyncStorage.syncVersion.modify(v2);
  return sub_100134BD8;
}

void (*NonFollowedShowsSyncStorage.syncVersion.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v2 = type metadata accessor for SyncKeysRepository(0LL);
  a1[2] = v2;
  uint64_t v3 = (void *)static SyncKeysRepository.shared.getter(v2);
  uint64_t v4 = SyncKeysRepository.nonFollowedShowsSyncVersion.getter();
  uint64_t v6 = v5;

  *a1 = v4;
  a1[1] = v6;
  return sub_100134D60;
}

void sub_100134D60(uint64_t *a1, char a2)
{
}

uint64_t sub_100134D6C(uint64_t a1, uint64_t a2)
{
  return sub_100134D78(a1, a2, (uint64_t (*)(void))&SyncKeysRepository.podcastsDomainVersion.getter);
}

uint64_t sub_100134D78(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = (void *)static SyncKeysRepository.shared.getter();
  uint64_t v5 = a3();

  return v5;
}

uint64_t NonFollowedShowsSyncStorage.podcastsDomainVersion.getter()
{
  return sub_100134DD4((uint64_t (*)(void))&SyncKeysRepository.podcastsDomainVersion.getter);
}

uint64_t sub_100134DD4(uint64_t (*a1)(void))
{
  uint64_t v2 = (void *)static SyncKeysRepository.shared.getter();
  uint64_t v3 = a1();

  return v3;
}

void sub_100134E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100134E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  id v8 = (id)static SyncKeysRepository.shared.getter();
  a5(a1, a2);
}

void NonFollowedShowsSyncStorage.podcastsDomainVersion.setter(uint64_t a1, uint64_t a2)
{
}

void sub_100134E9C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  id v6 = (id)static SyncKeysRepository.shared.getter();
  a3(a1, a2);
}

void (*sub_100134EFC(uint64_t **a1))(void *)
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = (uint64_t)NonFollowedShowsSyncStorage.podcastsDomainVersion.modify(v2);
  return sub_100134BD8;
}

void (*NonFollowedShowsSyncStorage.podcastsDomainVersion.modify( uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v2 = type metadata accessor for SyncKeysRepository(0LL);
  a1[2] = v2;
  uint64_t v3 = (void *)static SyncKeysRepository.shared.getter(v2);
  uint64_t v4 = SyncKeysRepository.podcastsDomainVersion.getter();
  uint64_t v6 = v5;

  *a1 = v4;
  a1[1] = v6;
  return sub_100134F94;
}

void sub_100134F94(uint64_t *a1, char a2)
{
}

void sub_100134FA0(uint64_t *a1, char a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if ((a2 & 1) != 0)
  {
    uint64_t v6 = swift_bridgeObjectRetain(a1[1]);
    id v7 = (id)static SyncKeysRepository.shared.getter(v6);
    a3(v5, v4);
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    id v7 = (id)((uint64_t (*)(void))static SyncKeysRepository.shared.getter)();
    a3(v5, v4);
  }
}

BOOL sub_100135028()
{
  return NonFollowedShowsSyncStorage.fetchHasLocalChanges()();
}

Swift::Bool __swiftcall NonFollowedShowsSyncStorage.fetchHasLocalChanges()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&aBlock[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Podcasts(0LL);
  Swift::Int v44 = (void *)v6;
  uint64_t v45 = sub_100127210( (unint64_t *)&qword_1002B66D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Podcasts,  (uint64_t)&protocol conformance descriptor for Podcasts);
  id v7 = sub_10012761C(aBlock);
  (*(void (**)(void *, void, uint64_t))(*(void *)(v6 - 8) + 104LL))( v7,  enum case for Podcasts.simplifiedSyncDirtyHandling(_:),  v6);
  char v8 = isFeatureEnabled(_:)(aBlock);
  sub_100136648(aBlock);
  uint64_t v9 = type metadata accessor for SyncKeysRepository(0LL);
  id v10 = (void *)static SyncKeysRepository.shared.getter(v9);
  char v11 = SyncKeysRepository.isNonFollowedShowsSyncDirty.getter();

  char v13 = v8 ^ 1 | v11;
  if ((v8 & 1) != 0 || (v11 & 1) != 0) {
    return v13 & 1;
  }
  unint64_t v14 = (void *)static SyncKeysRepository.shared.getter(v12);
  uint64_t Sync = SyncKeysRepository.nonFollowedShowsLastSyncTimestamp.getter();
  char v17 = v16;

  double v18 = *(double *)&Sync;
  if ((v17 & 1) != 0) {
    double v18 = 0.0;
  }
  Date.init(timeIntervalSinceReferenceDate:)(v18);
  uint64_t v19 = (void *)objc_opt_self(&OBJC_CLASS___MTPodcast);
  id v20 = [v19 predicateForNonFollowedShowsWithPlayState];
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v22 = [v19 predicateForLastDatePlayedAfterDate:isa];

  id v23 = [v20 AND:v22];
  uint64_t v42 = v3;
  id v24 = v23;

  id v25 = [v19 predicateForLastDatePlayedNotInTheFuture];
  id v26 = [v24 AND:v25];

  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPodcastEntityName);
  uint64_t v28 = v27;
  id v29 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28);
  id v31 = [v29 initWithEntityName:v30];

  [v31 setIncludesPropertyValues:0];
  [v31 setIncludesSubentities:0];
  [v31 setFetchLimit:1];
  [v31 setPredicate:v26];
  uint64_t v47 = 0LL;
  id v32 = *(void **)&v1[OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_importContext];
  id v33 = (void *)swift_allocObject(&unk_1002465F8, 40LL, 7LL);
  v33[2] = v1;
  v33[3] = v31;
  v33[4] = &v47;
  uint64_t v34 = swift_allocObject(&unk_100246620, 32LL, 7LL);
  *(void *)(v34 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1001360A4;
  *(void *)(v34 + 24) = v33;
  uint64_t v45 = (uint64_t)sub_100133FDC;
  uint64_t v46 = v34;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001347A4;
  Swift::Int v44 = &unk_100246638;
  unint64_t v35 = _Block_copy(aBlock);
  uint64_t v36 = v46;
  Swift::Int v37 = v1;
  id v38 = v31;
  swift_retain(v34);
  swift_release(v36);
  [v32 performBlockAndWait:v35];
  _Block_release(v35);

  (*(void (**)(char *, uint64_t))(v42 + 8))(v5, v2);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v34, "", 122LL, 127LL, 42LL, 1LL);
  Swift::Bool result = swift_release(v34);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    uint64_t v41 = v47;
    swift_release(v33);
    char v13 = v41 > 0;
    return v13 & 1;
  }

  __break(1u);
  return result;
}

_OWORD *sub_10013544C()
{
  return NonFollowedShowsSyncStorage.fetchNonFollowedShowsDictionaries()();
}

_OWORD *NonFollowedShowsSyncStorage.fetchNonFollowedShowsDictionaries()()
{
  uint64_t v1 = sub_100126450(&qword_1002B4FE0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v65 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v73 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  id v71 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPodcastEntityName);
  uint64_t v7 = v6;
  id v8 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  id v10 = [v8 initWithEntityName:v9];

  id v11 = [(id)objc_opt_self(MTPodcast) predicateForNonFollowedShowsWithPlayState];
  [v10 setPredicate:v11];

  uint64_t v12 = static RemoteNonFollowedShow.allSyncKeys.getter([v10 setResultType:2]);
  char v13 = sub_1001360D8(v12);
  swift_bridgeObjectRelease(v12);
  uint64_t v72 = (char *)&type metadata for Any + 8;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v13);
  [v10 setPropertiesToFetch:isa];

  uint64_t v80 = *sub_1001361FC( (void *)(v0 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_fetchNonFollowedShows),  *(void *)(v0 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_fetchNonFollowedShows + 24));
  id v81 = v10;
  uint64_t v15 = sub_100126450(&qword_1002B4FF0);
  NSManagedObjectContext.performAndWait<A>(_:)(v84, sub_1001365AC, v79, v15);
  uint64_t v16 = v84[0];
  int64_t v17 = *(void *)(v84[0] + 16LL);
  double v18 = _swiftEmptyArrayStorage;
  if (v17)
  {
    id v66 = v10;
    uint64_t v85 = _swiftEmptyArrayStorage;
    sub_1001365EC(0, v17, 0);
    uint64_t v69 = sub_100126450(&qword_1002B4FF8);
    uint64_t v19 = 0LL;
    uint64_t v65 = v16;
    uint64_t v68 = v16 + 32;
    uint64_t v78 = v4;
    int64_t v67 = v17;
    while (1)
    {
      uint64_t v20 = *(void *)(v68 + 8 * v19);
      uint64_t v70 = v19 + 1;
      uint64_t v21 = static _DictionaryStorage.copy(original:)(v20);
      id v22 = (void *)v21;
      uint64_t v23 = 1LL << *(_BYTE *)(v20 + 32);
      uint64_t v24 = *(void *)(v20 + 64);
      uint64_t v74 = v20 + 64;
      if (v23 < 64) {
        uint64_t v25 = ~(-1LL << v23);
      }
      else {
        uint64_t v25 = -1LL;
      }
      unint64_t v26 = v25 & v24;
      int64_t v75 = (unint64_t)(v23 + 63) >> 6;
      uint64_t v76 = v21 + 64;
      uint64_t v77 = v20;
      Swift::Bool result = (_OWORD *)swift_bridgeObjectRetain(v20);
      int64_t v28 = 0LL;
      id v29 = v72;
      uint64_t v30 = v73;
      if (v26)
      {
LABEL_7:
        unint64_t v31 = __clz(__rbit64(v26));
        v26 &= v26 - 1;
        unint64_t v32 = v31 | (v28 << 6);
        goto LABEL_22;
      }

      while (1)
      {
        int64_t v33 = v28 + 1;
        if (__OFADD__(v28, 1LL)) {
          goto LABEL_45;
        }
        if (v33 >= v75) {
          break;
        }
        unint64_t v34 = *(void *)(v74 + 8 * v33);
        ++v28;
        if (v34) {
          goto LABEL_21;
        }
        int64_t v28 = v33 + 1;
        if (v33 + 1 >= v75) {
          break;
        }
        unint64_t v34 = *(void *)(v74 + 8 * v28);
        if (v34) {
          goto LABEL_21;
        }
        int64_t v28 = v33 + 2;
        if (v33 + 2 >= v75) {
          break;
        }
        unint64_t v34 = *(void *)(v74 + 8 * v28);
        if (v34) {
          goto LABEL_21;
        }
        int64_t v35 = v33 + 3;
        if (v35 >= v75) {
          break;
        }
        unint64_t v34 = *(void *)(v74 + 8 * v35);
        if (!v34)
        {
          while (1)
          {
            int64_t v28 = v35 + 1;
            if (__OFADD__(v35, 1LL)) {
              goto LABEL_46;
            }
            if (v28 >= v75) {
              goto LABEL_30;
            }
            unint64_t v34 = *(void *)(v74 + 8 * v28);
            ++v35;
            if (v34) {
              goto LABEL_21;
            }
          }
        }

        int64_t v28 = v35;
LABEL_21:
        unint64_t v26 = (v34 - 1) & v34;
        unint64_t v32 = __clz(__rbit64(v34)) + (v28 << 6);
LABEL_22:
        uint64_t v36 = (uint64_t *)(*(void *)(v77 + 48) + 16 * v32);
        uint64_t v38 = *v36;
        uint64_t v37 = v36[1];
        sub_1001343F8(*(void *)(v77 + 56) + 32 * v32, (uint64_t)v84);
        sub_1001343F8((uint64_t)v84, (uint64_t)&v82);
        swift_bridgeObjectRetain(v37);
        int v39 = swift_dynamicCast(v3, &v82, v29, v30, 6LL);
        uint64_t v40 = v3;
        uint64_t v41 = v78;
        uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56);
        if (v39)
        {
          v42(v40, 0LL, 1LL, v30);
          int v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48))(v40, 1LL, v30);
          uint64_t v3 = v40;
          if (v43 != 1)
          {
            uint64_t v44 = v78;
            uint64_t v45 = v71;
            uint64_t v46 = (*(uint64_t (**)(char *, char *, uint64_t))(v78 + 32))(v71, v40, v30);
            double v47 = Date.timeIntervalSinceReferenceDate.getter(v46);
            uint64_t v83 = &type metadata for Double;
            *(double *)&__int128 v82 = v47;
            uint64_t v48 = *(void (**)(char *, uint64_t))(v44 + 8);
            uint64_t v3 = v40;
            unint64_t v49 = v45;
            id v29 = v72;
            uint64_t v30 = v73;
            v48(v49, v73);
            goto LABEL_27;
          }
        }

        else
        {
          v42(v40, 1LL, 1LL, v30);
          uint64_t v3 = v40;
        }

        sub_100136608((uint64_t)v3);
        sub_1001343F8((uint64_t)v84, (uint64_t)&v82);
LABEL_27:
        sub_100136648(v84);
        *(void *)(v76 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v32;
        uint64_t v50 = (void *)(v22[6] + 16 * v32);
        *uint64_t v50 = v38;
        v50[1] = v37;
        Swift::Bool result = sub_100136668(&v82, (_OWORD *)(v22[7] + 32 * v32));
        uint64_t v51 = v22[2];
        BOOL v52 = __OFADD__(v51, 1LL);
        uint64_t v53 = v51 + 1;
        if (v52)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }

        void v22[2] = v53;
        if (v26) {
          goto LABEL_7;
        }
      }

LABEL_43:
  swift_bridgeObjectRelease(v54);
  return v18;
}

              uint64_t v80 = v76 + 1;
              if (__OFADD__(v76, 1LL)) {
                goto LABEL_83;
              }
              if (v80 >= v118) {
                goto LABEL_65;
              }
              id v81 = *(void *)&v117[8 * v80];
              ++v76;
              if (!v81)
              {
                uint64_t v76 = v80 + 1;
                if (v80 + 1 >= v118) {
                  goto LABEL_65;
                }
                id v81 = *(void *)&v117[8 * v76];
                if (!v81)
                {
                  uint64_t v76 = v80 + 2;
                  if (v80 + 2 >= v118) {
                    goto LABEL_65;
                  }
                  id v81 = *(void *)&v117[8 * v76];
                  if (!v81)
                  {
                    __int128 v82 = v80 + 3;
                    if (v82 >= v118)
                    {
LABEL_65:
                      swift_bridgeObjectRelease(v121);
                      unint64_t v32 = v130;
                      if ((swift_isUniquelyReferenced_nonNull_native(v130) & 1) == 0)
                      {
                        sub_1001365EC(0, v32[2] + 1LL, 1);
                        unint64_t v32 = v130;
                      }

                      NSArray v99 = v32[2];
                      uint64_t v98 = v32[3];
                      if (v99 >= v98 >> 1)
                      {
                        sub_1001365EC(v98 > 1, v99 + 1, 1);
                        unint64_t v32 = v130;
                      }

                      v32[2] = v99 + 1;
                      v32[v99 + 4] = v71;
                      uint64_t v68 = v116;
                      if (v116 != v111) {
                        continue;
                      }
                      goto LABEL_75;
                    }

                    id v81 = *(void *)&v117[8 * v82];
                    if (!v81)
                    {
                      while (1)
                      {
                        uint64_t v76 = v82 + 1;
                        if (__OFADD__(v82, 1LL)) {
                          goto LABEL_85;
                        }
                        if (v76 >= v118) {
                          goto LABEL_65;
                        }
                        id v81 = *(void *)&v117[8 * v76];
                        ++v82;
                        if (v81) {
                          goto LABEL_56;
                        }
                      }
                    }

                    uint64_t v76 = v82;
                  }
                }
              }

              break;
            }

uint64_t sub_100135B24(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(*v2 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_podcastsStateCoordinator);
  uint64_t v6 = v5[3];
  uint64_t v7 = v5[4];
  sub_1001361FC(v5, v6);
  return dispatch thunk of PodcastsStateCoordinatorProtocol.unsafeInsertNewImplicitFollow(for:from:in:)( a1,  2LL,  a2,  v6,  v7);
}

uint64_t NonFollowedShowsSyncStorage.unsafeInsertNewImplicitFollow(for:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_podcastsStateCoordinator + 24);
  uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_podcastsStateCoordinator + 32);
  sub_1001361FC((void *)(v2 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_podcastsStateCoordinator), v5);
  return dispatch thunk of PodcastsStateCoordinatorProtocol.unsafeInsertNewImplicitFollow(for:from:in:)( a1,  2LL,  a2,  v5,  v6);
}

uint64_t sub_100135BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(*v2 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_podcastsStateCoordinator);
  uint64_t v6 = v5[3];
  uint64_t v7 = v5[4];
  sub_1001361FC(v5, v6);
  return dispatch thunk of PodcastsStateCoordinatorProtocol.unsafeImplicitlyFollowIfNeeded(_:for:from:)( a1,  a2,  2LL,  v6,  v7);
}

uint64_t NonFollowedShowsSyncStorage.unsafeImplicitlyFollowIfNeeded(_:for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_podcastsStateCoordinator + 24);
  uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_podcastsStateCoordinator + 32);
  sub_1001361FC((void *)(v2 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_podcastsStateCoordinator), v5);
  return dispatch thunk of PodcastsStateCoordinatorProtocol.unsafeImplicitlyFollowIfNeeded(_:for:from:)( a1,  a2,  2LL,  v5,  v6);
}

void sub_100135CBC(Swift::OpaquePointer a1)
{
}

Swift::Void __swiftcall NonFollowedShowsSyncStorage.unsafeRemoveImplicitFollowsIfNeeded(for:)(Swift::OpaquePointer a1)
{
  if (!((unint64_t)a1._rawValue >> 62))
  {
    uint64_t v3 = *(void *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a1._rawValue);
    if (v3) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease(a1._rawValue);
    return;
  }

  else {
    unint64_t rawValue = (unint64_t)a1._rawValue & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1._rawValue);
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(rawValue);
  if (!v3) {
    goto LABEL_13;
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = (void *)(v1 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_podcastsStateCoordinator);
    do
    {
      else {
        id v6 = *((id *)a1._rawValue + v4 + 4);
      }
      uint64_t v7 = v6;
      ++v4;
      uint64_t v8 = v5[3];
      uint64_t v9 = v5[4];
      sub_1001361FC(v5, v8);
      dispatch thunk of PodcastsStateCoordinatorProtocol.unsafeRemoveImplicitFollowIfNeeded(_:from:)(v7, 2LL, v8, v9);
    }

    while (v3 != v4);
    goto LABEL_13;
  }

  __break(1u);
}

void static NonFollowedShowsSyncStorage.resetNonFollowedShowsSync()()
{
  uint64_t v0 = type metadata accessor for SyncKeysRepository(0LL);
  uint64_t v1 = (void *)static SyncKeysRepository.shared.getter(v0);
  SyncKeysRepository.nonFollowedShowsLastSyncTimestamp.setter(0LL, 1LL);

  uint64_t v3 = (void *)static SyncKeysRepository.shared.getter(v2);
  SyncKeysRepository.nonFollowedShowsSyncVersion.setter(0LL, 0LL);

  id v5 = (id)static SyncKeysRepository.shared.getter(v4);
  SyncKeysRepository.isNonFollowedShowsSyncDirty.setter(1LL);
}

uint64_t sub_100135EE4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = static os_signpost_type_t.begin.getter(v7);
  sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
  id v11 = (void *)static OS_os_log.cloudSyncSignpost.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)( v10,  &_mh_execute_header,  v11,  "isNonFollowedShowsSyncDirty.Query",  33LL,  2LL,  v9);

  uint64_t v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v9, v5);
  uint64_t v13 = sub_100134284(0LL, (unint64_t *)&qword_1002B50A0, &OBJC_CLASS___MTPodcast_ptr);
  uint64_t v14 = NSManagedObjectContext.count<A>(for:)(a2, v13);
  *a3 = v14;
  uint64_t v15 = static os_signpost_type_t.end.getter(v14);
  uint64_t v16 = (void *)static OS_os_log.cloudSyncSignpost.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)( v15,  &_mh_execute_header,  v16,  "isNonFollowedShowsSyncDirty.Query",  33LL,  2LL,  v9);

  return ((uint64_t (*)(char *, uint64_t))v12)(v9, v5);
}

uint64_t sub_100136078()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1001360A4()
{
  return sub_100135EE4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t **)(v0 + 32));
}

uint64_t sub_1001360B0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001360C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001360D0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void *sub_1001360D8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    id v11 = _swiftEmptyArrayStorage;
    sub_100136678(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *v4;
      v9[0] = *(v4 - 1);
      v9[1] = v5;
      swift_bridgeObjectRetain(v5);
      swift_dynamicCast(v10, v9, &type metadata for String, (char *)&type metadata for Any + 8, 7LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100136678(0, v2[2] + 1LL, 1);
        uint64_t v2 = v11;
      }

      unint64_t v7 = v2[2];
      unint64_t v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_100136678(v6 > 1, v7 + 1, 1);
        uint64_t v2 = v11;
      }

      v4 += 2;
      v2[2] = v7 + 1;
      sub_100136668(v10, &v2[4 * v7 + 4]);
      --v1;
    }

    while (v1);
  }

  return v2;
}

void *sub_1001361FC(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_100136220(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  int64_t v17 = _swiftEmptyArrayStorage;
  uint64_t result = sub_100136678(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000LL) == 0)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
      {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        uint64_t v6 = sub_100134284(0LL, (unint64_t *)&qword_1002B5030, &OBJC_CLASS___NSSortDescriptor_ptr);
        swift_dynamicCast(v16, &v15, v6, (char *)&type metadata for Any + 8, 7LL);
        uint64_t v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_100136678(0, v3[2] + 1LL, 1);
          uint64_t v3 = v17;
        }

        unint64_t v8 = v3[2];
        unint64_t v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_100136678(v7 > 1, v8 + 1, 1);
          uint64_t v3 = v17;
        }

        v3[2] = v8 + 1;
        sub_100136668(v16, &v3[4 * v8 + 4]);
      }
    }

    else
    {
      uint64_t v9 = (id *)(a1 + 32);
      uint64_t v10 = sub_100134284(0LL, (unint64_t *)&qword_1002B5030, &OBJC_CLASS___NSSortDescriptor_ptr);
      do
      {
        id v15 = *v9;
        id v11 = v15;
        swift_dynamicCast(v16, &v15, v10, (char *)&type metadata for Any + 8, 7LL);
        uint64_t v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_100136678(0, v3[2] + 1LL, 1);
          uint64_t v3 = v17;
        }

        unint64_t v13 = v3[2];
        unint64_t v12 = v3[3];
        if (v13 >= v12 >> 1)
        {
          sub_100136678(v12 > 1, v13 + 1, 1);
          uint64_t v3 = v17;
        }

        v3[2] = v13 + 1;
        sub_100136668(v16, &v3[4 * v13 + 4]);
        ++v9;
        --v2;
      }

      while (v2);
    }

    return (uint64_t)v3;
  }

  __break(1u);
  return result;
}

void *sub_100136480(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    id v11 = _swiftEmptyArrayStorage;
    sub_100136678(0, v1, 0);
    uint64_t v4 = (uint64_t *)(a1 + 32);
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v9 = *v4;
      swift_bridgeObjectRetain(v9);
      uint64_t v5 = sub_100126450(&qword_1002B5060);
      swift_dynamicCast(v10, &v9, v5, (char *)&type metadata for Any + 8, 7LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100136678(0, v2[2] + 1LL, 1);
        uint64_t v2 = v11;
      }

      unint64_t v7 = v2[2];
      unint64_t v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_100136678(v6 > 1, v7 + 1, 1);
        uint64_t v2 = v11;
      }

      v2[2] = v7 + 1;
      sub_100136668(v10, &v2[4 * v7 + 4]);
      ++v4;
      --v1;
    }

    while (v1);
  }

  return v2;
}

uint64_t sub_1001365AC@<X0>(void *a1@<X8>)
{
  return sub_10014E3AC(*(void *)(v1 + 24), a1);
}

uint64_t sub_1001365B4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001366E8(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_1001365D0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100136844(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1001365EC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001369CC(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100136608(uint64_t a1)
{
  uint64_t v2 = sub_100126450(&qword_1002B4FE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100136648(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

_OWORD *sub_100136668(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100136678(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100136B54(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100136694(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100136CC0(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1001366B0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100136E64(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1001366CC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100136FCC(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1001366E8(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100126450(&qword_1002B4FA0);
    id v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    id v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  id v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

    uint64_t v18 = (v27 - 1) & v27;
    uint64_t v19 = __clz(__rbit64(v27)) + (v20 << 6);
    goto LABEL_33;
  }

  __break(1u);
}

uint64_t sub_100136844(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100126450(&qword_1002B5050);
    id v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    _DWORD v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }

  else
  {
    id v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8) {
      memmove(v11 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100126450(&qword_1002B5058);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_1001369CC(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100126450((uint64_t *)&unk_1002B5090);
    id v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    _DWORD v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }

  else
  {
    id v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8) {
      memmove(v11 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    sub_100126450(&qword_1002B5060);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100136B54(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100126450(&qword_1002B5038);
    id v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    id v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100136CC0(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100126450(&qword_1002B5070);
    id v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    _DWORD v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    id v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8) {
      memmove(v11 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_100126450(&qword_1002B5078);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100136E64(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100126450((uint64_t *)&unk_1002B5080);
    id v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    id v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100136FCC(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100126450(&qword_1002B5068);
  uint64_t v11 = *(void *)(type metadata accessor for URL(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  unint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v16 - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_34;
  }
  v15[2] = v8;
  void v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = type metadata accessor for URL(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v15 + v20;
  id v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }

    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v23 = *(void *)(v19 + 72) * v8;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }

id sub_1001371AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t NonFollowedShows = type metadata accessor for FetchNonFollowedShows();
  void v20[3] = NonFollowedShows;
  void v20[4] = &off_100247480;
  v20[0] = a2;
  v19[3] = type metadata accessor for PodcastsStateCoordinator();
  void v19[4] = sub_100127210( (unint64_t *)&unk_1002B5040,  (uint64_t (*)(uint64_t))type metadata accessor for PodcastsStateCoordinator,  (uint64_t)&protocol conformance descriptor for PodcastsStateCoordinator);
  v19[0] = a3;
  int64_t v7 = (objc_class *)type metadata accessor for NonFollowedShowsSyncStorage();
  uint64_t v8 = (char *)objc_allocWithZone(v7);
  uint64_t v9 = sub_10013767C((uint64_t)v20, NonFollowedShows);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  uint64_t v13 = *v11;
  v18[3] = NonFollowedShows;
  v18[4] = &off_100247480;
  v18[0] = v13;
  *(void *)&v8[OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_importContext] = a1;
  sub_1001376A4( (uint64_t)v18,  (uint64_t)&v8[OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_fetchNonFollowedShows]);
  sub_1001376A4( (uint64_t)v19,  (uint64_t)&v8[OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_podcastsStateCoordinator]);
  v17.receiver = v8;
  v17.super_class = v7;
  id v14 = objc_msgSendSuper2(&v17, "init");
  sub_100136648(v19);
  sub_100136648(v18);
  sub_100136648(v20);
  return v14;
}

id sub_100137304()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  int64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SyncKeysRepository(0LL);
  uint64_t v9 = (void *)static SyncKeysRepository.shared.getter(v8);
  double v10 = COERCE_DOUBLE(SyncKeysRepository.nonFollowedShowsLastSyncTimestamp.getter());
  char v12 = v11;

  if ((v12 & 1) != 0)
  {
    uint64_t v23 = static Logger.cloudSync.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter(v23);
    unint64_t v25 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v26 = v24;
    if (os_log_type_enabled(v25, v24))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "[NonFollowedShows] We never synced before, so there are no old Implicit Follows to clean up.",  v27,  2u);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return [(id)objc_opt_self(NSPredicate) falsePredicate];
  }

  else
  {
    Date.init(timeIntervalSinceReferenceDate:)(v10);
    static String._unconditionallyBridgeFromObjectiveC(_:)(kPodcastLastImplicitlyFollowedDate);
    uint64_t v14 = v13;
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v17 = [(id)objc_opt_self(NSPredicate) predicateForDateKey:v15 isLessThanDate:isa];

    uint64_t v18 = (void *)objc_opt_self(&OBJC_CLASS___MTPodcast);
    Class v19 = Array._bridgeToObjectiveC()().super.isa;
    id v20 = [v18 predicateForImplicitlyFollowedPodcastsExcludingUUIDs:v19];

    id v21 = [v20 AND:v17];
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v21;
  }

void *_s8Podcasts27NonFollowedShowsSyncStorageC045unsafeImplicitFollowsOnlyInLocalAndBeforeLastE014excludingUUIDs2inSaySo9MTPodcastCGSgSaySSG_So22NSManagedObjectContextCtF_0( uint64_t a1, void *a2)
{
  id v3 = sub_100137304();
  id v4 = kMTPodcastEntityName;
  id v5 = v3;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  int64_t v7 = [a2 objectsInEntity:v4 predicate:v5 sortDescriptors:isa];

  if (v7)
  {
    uint64_t v8 = sub_100134284(0LL, (unint64_t *)&qword_1002B6720, &OBJC_CLASS___NSManagedObject_ptr);
    unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

    int64_t v7 = sub_100130468(v9);
    swift_bridgeObjectRelease(v9);
  }

  return v7;
}

uint64_t sub_10013767C(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t sub_1001376A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id sub_1001376E8()
{
  *(void *)&v0[OBJC_IVAR____TtC8Podcasts25TVBookmarksViewController____lazy_storage___headerViewForSizing] = 0LL;
  uint64_t v1 = (void *)objc_opt_self(&OBJC_CLASS___MTEpisode);
  uint64_t v2 = v0;
  id v3 = [v1 sortDescriptorsForLastBookmarkedDateAscending:0];
  uint64_t v4 = sub_100134284(0LL, (unint64_t *)&qword_1002B5030, &OBJC_CLASS___NSSortDescriptor_ptr);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  sub_1001387F8(v5);
  int64_t v7 = v6;
  swift_bridgeObjectRelease(v5);
  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
  id v9 = v7;
  double v10 = (NSBundle *)[v8 mainBundle];
  v21._object = (void *)0xE000000000000000LL;
  v11._uint64_t countAndFlagsBits = 0x4445564153LL;
  v11._object = (void *)0xE500000000000000LL;
  v12._uint64_t countAndFlagsBits = 0LL;
  v12._object = (void *)0xE000000000000000LL;
  v21._uint64_t countAndFlagsBits = 0LL;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, v10, v12, v21)._object;

  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  [v9 setTitle:v14];

  v20.receiver = v2;
  v20.super_class = (Class)type metadata accessor for TVBookmarksViewController();
  id result = objc_msgSendSuper2(&v20, "initWithCompositeFetchedResultsController:", v9);
  if (result)
  {
    uint64_t v16 = result;
    id v17 = objc_allocWithZone((Class)type metadata accessor for TVNoBookmarksViewController());
    id v18 = v16;
    id v19 = [v17 init];
    [v18 setEmptyContentViewController:v19];

    return v18;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100137A14(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100126450(&qword_1002B5180);
  __chkstk_darwin(v8);
  double v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100138BD0(a3, (uint64_t)v10);
  uint64_t v13 = type metadata accessor for IndexPath(0LL, v11, v12);
  uint64_t v14 = *(void *)(v13 - 8);
  Class isa = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1LL, v13) != 1)
  {
    NSIndexPath v22 = IndexPath._bridgeToObjectiveC()();
    Class isa = v22.super.isa;
    (*(void (**)(char *, uint64_t, NSUInteger, void *))(v14 + 8))(v10, v13, v22._length, v22._reserved);
  }

  uint64_t v16 = (objc_class *)type metadata accessor for TVBookmarksViewController();
  v21.receiver = v4;
  v21.super_class = v16;
  objc_msgSendSuper2(&v21, "configureCell:withObject:atIndexPath:", a1, a2, isa);

  if (a1)
  {
    uint64_t v17 = objc_opt_self(&OBJC_CLASS___MTTVEpisodeCell);
    uint64_t v18 = swift_dynamicCastObjCClass(a1, v17);
    if (v18)
    {
      id v19 = (void *)v18;
      id v20 = a1;
      [v19 setShowsArtwork:1];
      [v19 setShowsPlayState:0];
    }
  }

void sub_100137C70()
{
  uint64_t v1 = v0;
  NSIndexPath v11 = IndexPath._bridgeToObjectiveC()();
  Class isa = v11.super.isa;
  id v3 = objc_msgSend(v1, "objectAtIndexPath:", v11.super.isa, v11._reserved);

  if (v3)
  {
    id v4 = [v3 uuid];

    if (v4)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      uint64_t v6 = v5;

      int64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___MTPlaybackQueueFactory);
      NSString v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v6);
      id v9 = [v7 playEpisodeUuid:v8];

      if (v9)
      {
        id v10 = [(id)objc_opt_self(MTPlayerController) defaultInstance];
        [v10 playManifest:v9 reason:3];
      }
    }
  }

void sub_100137ED4(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    id v3 = (void *)Strong;
    sub_1001380F4();
  }

char *sub_100137F6C()
{
  uint64_t v1 = OBJC_IVAR____TtC8Podcasts25TVBookmarksViewController____lazy_storage___headerViewForSizing;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts25TVBookmarksViewController____lazy_storage___headerViewForSizing);
  if (v2)
  {
    id v3 = *(char **)(v0 + OBJC_IVAR____TtC8Podcasts25TVBookmarksViewController____lazy_storage___headerViewForSizing);
  }

  else
  {
    id v4 = sub_100137FC8();
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0LL;
  }

  id v6 = v2;
  return v3;
}

char *sub_100137FC8()
{
  uint64_t v0 = type metadata accessor for TVButtonTableHeaderView();
  uint64_t v1 = (char *)[objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0)) init];
  uint64_t v2 = *(void **)&v1[OBJC_IVAR____TtC8Podcasts23TVButtonTableHeaderView_containedView];
  id v3 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
  id v4 = v2;
  uint64_t v5 = (NSBundle *)[v3 mainBundle];
  v12._object = (void *)0xE400000000000000LL;
  v6._uint64_t countAndFlagsBits = 0x5455425F54524F53LL;
  v6._object = (void *)0xEB000000004E4F54LL;
  v7._uint64_t countAndFlagsBits = 0LL;
  v7._object = (void *)0xE000000000000000LL;
  v12._uint64_t countAndFlagsBits = 1953656659LL;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, v5, v7, v12)._object;

  id v9 = *(void **)&v4[OBJC_IVAR____TtC8Podcasts18TVButtonHeaderView_button];
  NSString v10 = String._bridgeToObjectiveC()();
  [v9 setTitle:v10 forState:0];

  swift_bridgeObjectRelease(object);
  return v1;
}

void sub_1001380F4()
{
  uint64_t v1 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
  uint64_t v2 = (NSBundle *)[v1 mainBundle];
  v37._object = (void *)0xE500000000000000LL;
  v3._uint64_t countAndFlagsBits = 0x5F59425F54524F53LL;
  v3._object = (void *)0xED0000454C544954LL;
  v4._uint64_t countAndFlagsBits = 0LL;
  v4._object = (void *)0xE000000000000000LL;
  v37._uint64_t countAndFlagsBits = 0x656C746954LL;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, v2, v4, v37)._object;

  uint64_t v6 = swift_allocObject(&unk_100246710, 24LL, 7LL);
  swift_unknownObjectWeakInit(v6 + 16, v0);
  swift_retain(v6);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  int64_t v35 = sub_1001387D0;
  uint64_t v36 = v6;
  aBlock = _NSConcreteStackBlock;
  uint64_t v32 = 1107296256LL;
  int64_t v33 = sub_100138C20;
  unint64_t v34 = &unk_100246728;
  NSString v8 = _Block_copy(&aBlock);
  swift_release(v36);
  id v9 = (void *)objc_opt_self(&OBJC_CLASS___UIAlertAction);
  id v30 = [v9 actionWithTitle:v7 style:0 handler:v8];
  _Block_release(v8);
  swift_release(v6);

  NSString v10 = (NSBundle *)[v1 mainBundle];
  v38._object = (void *)0xEA00000000006465LL;
  v11._uint64_t countAndFlagsBits = 0x5F59425F54524F53LL;
  v11._object = (void *)0xED00004445564153LL;
  v12._uint64_t countAndFlagsBits = 0LL;
  v12._object = (void *)0xE000000000000000LL;
  v38._uint64_t countAndFlagsBits = 0x7661532065746144LL;
  uint64_t v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, v10, v12, v38)._object;

  uint64_t v14 = swift_allocObject(&unk_100246710, 24LL, 7LL);
  swift_unknownObjectWeakInit(v14 + 16, v0);
  swift_retain(v14);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  int64_t v35 = sub_1001387F0;
  uint64_t v36 = v14;
  aBlock = _NSConcreteStackBlock;
  uint64_t v32 = 1107296256LL;
  int64_t v33 = sub_100138C20;
  unint64_t v34 = &unk_100246750;
  uint64_t v16 = _Block_copy(&aBlock);
  swift_release(v36);
  id v17 = [v9 actionWithTitle:v15 style:0 handler:v16];
  _Block_release(v16);
  swift_release(v14);

  uint64_t v18 = (NSBundle *)[v1 mainBundle];
  v39._object = (void *)0xE000000000000000LL;
  v19._uint64_t countAndFlagsBits = 0x6C65636E6143LL;
  v19._object = (void *)0xE600000000000000LL;
  v20._uint64_t countAndFlagsBits = 0LL;
  v20._object = (void *)0xE000000000000000LL;
  v39._uint64_t countAndFlagsBits = 0LL;
  objc_super v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, (Swift::String_optional)0, v18, v20, v39)._object;

  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v21);
  id v23 = [v9 actionWithTitle:v22 style:1 handler:0];

  os_log_type_t v24 = (NSBundle *)[v1 mainBundle];
  v40._object = (void *)0xE700000000000000LL;
  v25._uint64_t countAndFlagsBits = 0x59425F54524F53LL;
  v25._object = (void *)0xE700000000000000LL;
  v26._uint64_t countAndFlagsBits = 0LL;
  v26._object = (void *)0xE000000000000000LL;
  v40._uint64_t countAndFlagsBits = 0x79422074726F53LL;
  uint64_t v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, v24, v26, v40)._object;

  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  id v29 =  [(id)objc_opt_self(UIAlertController) alertControllerWithTitle:v28 message:0 preferredStyle:0];

  [v29 addAction:v30];
  [v29 addAction:v17];
  [v29 addAction:v23];

  [v0 presentViewController:v29 animated:1 completion:0];
}

void sub_100138578(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    Swift::String v4 = (void *)Strong;
    id v5 = [(id)objc_opt_self(MTEpisode) sortDescriptorsForTitle];
    uint64_t v6 = sub_100134284(0LL, (unint64_t *)&qword_1002B5030, &OBJC_CLASS___NSSortDescriptor_ptr);
    uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

    sub_1001387F8(v7);
    id v9 = v8;
    swift_bridgeObjectRelease(v7);
    [v4 setCompositeResultsController:v9];
  }

void sub_100138648(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    Swift::String v4 = (void *)Strong;
    id v5 =  [(id)objc_opt_self(MTEpisode) sortDescriptorsForLastBookmarkedDateAscending:0];
    uint64_t v6 = sub_100134284(0LL, (unint64_t *)&qword_1002B5030, &OBJC_CLASS___NSSortDescriptor_ptr);
    uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

    sub_1001387F8(v7);
    id v9 = v8;
    swift_bridgeObjectRelease(v7);
    [v4 setCompositeResultsController:v9];
  }

id sub_10013874C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TVBookmarksViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TVBookmarksViewController()
{
  return objc_opt_self(&OBJC_CLASS____TtC8Podcasts25TVBookmarksViewController);
}

uint64_t sub_1001387AC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1001387D0(uint64_t a1)
{
}

uint64_t sub_1001387D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001387E8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_1001387F0(uint64_t a1)
{
}

void sub_1001387F8(uint64_t a1)
{
  id v2 = [(id)objc_opt_self(MTEpisode) predicateForBookmarkedEpisodes];
  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
  uint64_t v4 = v3;
  id v5 = v2;
  uint64_t v6 = sub_100136220(a1);
  id v7 = objc_allocWithZone((Class)&OBJC_CLASS___MTCoreDataResultsController);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  id v10 = [v7 initWithEntityName:v8 predicate:v5 sortDescriptors:isa];

  uint64_t v11 = sub_100126450((uint64_t *)&unk_1002B6160);
  uint64_t v12 = swift_allocObject(v11, 40LL, 7LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4170;
  *(void *)(v12 + 32) = v10;
  uint64_t v17 = v12;
  specialized Array._endMutation()(v12);
  id v13 = objc_allocWithZone((Class)&OBJC_CLASS___MTCompositeResultsController);
  id v14 = v10;
  sub_100126450(&qword_1002B5178);
  Class v15 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v17);
  id v16 = [v13 initWithControllers:v15];

  if (v16)
  {
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100138994()
{
  id v1 = [v0 tableView];
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 dequeueReusableHeaderFooterViewWithIdentifier:v2];

  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = type metadata accessor for TVButtonTableHeaderView();
  uint64_t v5 = swift_dynamicCastClass(v3, v4);
  uint64_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = OBJC_IVAR____TtC8Podcasts23TVButtonTableHeaderView_containedView;
    NSString v8 = *(void **)(v5 + OBJC_IVAR____TtC8Podcasts23TVButtonTableHeaderView_containedView);
    id v9 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
    id v10 = v8;
    uint64_t v11 = (NSBundle *)[v9 mainBundle];
    v23._object = (void *)0xE400000000000000LL;
    v12._uint64_t countAndFlagsBits = 0x5455425F54524F53LL;
    v12._object = (void *)0xEB000000004E4F54LL;
    v13._uint64_t countAndFlagsBits = 0LL;
    v13._object = (void *)0xE000000000000000LL;
    v23._uint64_t countAndFlagsBits = 1953656659LL;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, v11, v13, v23)._object;

    Class v15 = *(void **)&v10[OBJC_IVAR____TtC8Podcasts18TVButtonHeaderView_button];
    NSString v16 = String._bridgeToObjectiveC()();
    [v15 setTitle:v16 forState:0];

    swift_bridgeObjectRelease(object);
    uint64_t v17 = *(void *)(v6 + v7);
    uint64_t v18 = swift_allocObject(&unk_100246710, 24LL, 7LL);
    swift_unknownObjectWeakInit(v18 + 16, v0);
    Swift::String v19 = (void (**)())(v17 + OBJC_IVAR____TtC8Podcasts18TVButtonHeaderView_action);
    uint64_t v20 = *(void *)(v17 + OBJC_IVAR____TtC8Podcasts18TVButtonHeaderView_action);
    uint64_t v21 = *(void *)(v17 + OBJC_IVAR____TtC8Podcasts18TVButtonHeaderView_action + 8);
    *Swift::String v19 = sub_100138B88;
    v19[1] = (void (*)())v18;
    sub_1001341FC(v20, v21);
  }

  else
  {
  }

  return v6;
}

void sub_100138B88()
{
}

uint64_t sub_100138B90(uint64_t a1)
{
  uint64_t v2 = sub_100126450(&qword_1002B5180);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100138BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100126450(&qword_1002B5180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_100138C20(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

id sub_100138C70()
{
  *(void *)&v0[OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController____lazy_storage___headerViewForSizing] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_sortOrder] = 1LL;
  *(void *)&v0[OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_limit] = 0LL;
  v0[OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_hidePlayedEpisodes] = 1;
  sub_10013A720(1LL, 0LL, 1);
  uint64_t v2 = v1;
  uint64_t v3 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
  id v4 = v2;
  id v5 = (NSBundle *)[v3 mainBundle];
  v18._object = (void *)0xE000000000000000LL;
  v6._uint64_t countAndFlagsBits = 0x452074736574614CLL;
  v6._object = (void *)0xEF7365646F736970LL;
  v7._uint64_t countAndFlagsBits = 0LL;
  v7._object = (void *)0xE000000000000000LL;
  v18._uint64_t countAndFlagsBits = 0LL;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, v5, v7, v18)._object;

  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  [v4 setTitle:v9];

  v17.receiver = v0;
  v17.super_class = (Class)type metadata accessor for TVLatestEpisodesViewController();
  id result = objc_msgSendSuper2(&v17, "initWithCompositeFetchedResultsController:", v4);
  if (result)
  {
    uint64_t v11 = result;
    id v12 = objc_allocWithZone((Class)&OBJC_CLASS___MTTVMyPodcastsNoPodcastsViewController);
    id v13 = v11;
    id v14 = [v12 init];
    [v13 setEmptyContentViewController:v14];

    id v15 = [v13 emptyContentViewController];
    if (v15)
    {
      NSString v16 = v15;
      [v15 setButtonTitle:0];
    }

    return v13;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100138FA8(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = v3;
  uint64_t v8 = sub_100126450(&qword_1002B5180);
  __chkstk_darwin(v8);
  id v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100138BD0(a3, (uint64_t)v10);
  uint64_t v13 = type metadata accessor for IndexPath(0LL, v11, v12);
  uint64_t v14 = *(void *)(v13 - 8);
  Class isa = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1LL, v13) != 1)
  {
    NSIndexPath v22 = IndexPath._bridgeToObjectiveC()();
    Class isa = v22.super.isa;
    (*(void (**)(char *, uint64_t, NSUInteger, void *))(v14 + 8))(v10, v13, v22._length, v22._reserved);
  }

  NSString v16 = (objc_class *)type metadata accessor for TVLatestEpisodesViewController();
  v21.receiver = v4;
  v21.super_class = v16;
  objc_msgSendSuper2(&v21, "configureCell:withObject:atIndexPath:", a1, a2, isa);

  if (a1)
  {
    uint64_t v17 = objc_opt_self(&OBJC_CLASS___MTTVEpisodeCell);
    uint64_t v18 = swift_dynamicCastObjCClass(a1, v17);
    if (v18)
    {
      Swift::String v19 = (void *)v18;
      id v20 = a1;
      [v19 setShowsArtwork:1];
      [v19 setShowsPlayState:0];
    }
  }

void sub_10013932C(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_100139420();
  }

char *sub_1001393C4()
{
  uint64_t v1 = OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController____lazy_storage___headerViewForSizing;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController____lazy_storage___headerViewForSizing);
  if (v2)
  {
    uint64_t v3 = *(char **)(v0 + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController____lazy_storage___headerViewForSizing);
  }

  else
  {
    id v4 = sub_100137FC8();
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    uint64_t v3 = v4;

    uint64_t v2 = 0LL;
  }

  id v6 = v2;
  return v3;
}

void sub_100139420()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
  uint64_t v3 = (NSBundle *)[v2 mainBundle];
  v113._object = (void *)0xE000000000000000LL;
  v4._object = (void *)0x800000010021A320LL;
  v4._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  v5._uint64_t countAndFlagsBits = 0LL;
  v5._object = (void *)0xE000000000000000LL;
  v113._uint64_t countAndFlagsBits = 0LL;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, v3, v5, v113)._object;

  uint64_t v7 = swift_allocObject(&unk_100246788, 24LL, 7LL);
  swift_unknownObjectWeakInit(v7 + 16, v1);
  swift_retain(v7);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  int64_t v111 = sub_10013A614;
  uint64_t v112 = v7;
  aBlock = _NSConcreteStackBlock;
  uint64_t v108 = 1107296256LL;
  uint64_t v109 = sub_100138C20;
  uint64_t v110 = &unk_1002467A0;
  uint64_t v9 = _Block_copy(&aBlock);
  swift_release(v112);
  id v10 = (void *)objc_opt_self(&OBJC_CLASS___UIAlertAction);
  id v11 = [v10 actionWithTitle:v8 style:0 handler:v9];
  _Block_release(v9);
  swift_release(v7);

  id v105 = v2;
  uint64_t v12 = (NSBundle *)[v2 mainBundle];
  v114._object = (void *)0xE000000000000000LL;
  v13._object = (void *)0x800000010021A340LL;
  v13._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  v14._uint64_t countAndFlagsBits = 0LL;
  v14._object = (void *)0xE000000000000000LL;
  v114._uint64_t countAndFlagsBits = 0LL;
  id v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, v12, v14, v114)._object;

  uint64_t v16 = swift_allocObject(&unk_100246788, 24LL, 7LL);
  swift_unknownObjectWeakInit(v16 + 16, v1);
  swift_retain(v16);
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  int64_t v111 = sub_10013A634;
  uint64_t v112 = v16;
  aBlock = _NSConcreteStackBlock;
  uint64_t v108 = 1107296256LL;
  uint64_t v109 = sub_100138C20;
  uint64_t v110 = &unk_1002467C8;
  uint64_t v18 = _Block_copy(&aBlock);
  swift_release(v112);
  id v19 = [v10 actionWithTitle:v17 style:0 handler:v18];
  _Block_release(v18);
  swift_release(v16);

  LODWORD(vswift_unknownObjectWeakDestroy(v0 + 16) = v1[OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_hidePlayedEpisodes];
  uint64_t v20 = sub_100126450((uint64_t *)&unk_1002B6160);
  uint64_t v21 = swift_allocObject(v20, 40LL, 7LL);
  *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4170;
  id v104 = v11;
  NSArray v99 = v19;
  if ((_DWORD)v16 == 1)
  {
    *(void *)(v21 + 32) = v19;
    aBlock = (void **)v21;
    specialized Array._endMutation()(v21);
    NSIndexPath v22 = aBlock;
  }

  else
  {
    *(void *)(v21 + 32) = v11;
    aBlock = (void **)v21;
    specialized Array._endMutation()(v21);
    NSIndexPath v22 = aBlock;
    id v19 = v11;
  }

  id v23 = v19;
  uint64_t v106 = (uint64_t)v22;
  os_log_type_t v24 = (NSBundle *)[v2 mainBundle];
  v115._object = (void *)0xE000000000000000LL;
  v25._uint64_t countAndFlagsBits = 0x462074736577654ELL;
  v25._object = (void *)0xEC00000074737269LL;
  v26._uint64_t countAndFlagsBits = 0LL;
  v26._object = (void *)0xE000000000000000LL;
  v115._uint64_t countAndFlagsBits = 0LL;
  uint64_t v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, v24, v26, v115)._object;

  uint64_t v28 = swift_allocObject(&unk_100246788, 24LL, 7LL);
  swift_unknownObjectWeakInit(v28 + 16, v1);
  swift_retain(v28);
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  int64_t v111 = sub_10013A63C;
  uint64_t v112 = v28;
  aBlock = _NSConcreteStackBlock;
  uint64_t v108 = 1107296256LL;
  uint64_t v109 = sub_100138C20;
  uint64_t v110 = &unk_1002467F0;
  id v30 = _Block_copy(&aBlock);
  swift_release(v112);
  id v103 = [v10 actionWithTitle:v29 style:0 handler:v30];
  _Block_release(v30);
  swift_release(v28);

  unint64_t v31 = (NSBundle *)[v105 mainBundle];
  v116._object = (void *)0xE000000000000000LL;
  v32._uint64_t countAndFlagsBits = 0x4620747365646C4FLL;
  v32._object = (void *)0xEC00000074737269LL;
  v33._uint64_t countAndFlagsBits = 0LL;
  v33._object = (void *)0xE000000000000000LL;
  v116._uint64_t countAndFlagsBits = 0LL;
  unint64_t v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, (Swift::String_optional)0, v31, v33, v116)._object;

  uint64_t v35 = swift_allocObject(&unk_100246788, 24LL, 7LL);
  swift_unknownObjectWeakInit(v35 + 16, v1);
  swift_retain(v35);
  NSString v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v34);
  int64_t v111 = sub_10013A644;
  uint64_t v112 = v35;
  aBlock = _NSConcreteStackBlock;
  uint64_t v108 = 1107296256LL;
  uint64_t v109 = sub_100138C20;
  uint64_t v110 = &unk_100246818;
  Swift::String v37 = _Block_copy(&aBlock);
  swift_release(v112);
  id v102 = [v10 actionWithTitle:v36 style:0 handler:v37];
  _Block_release(v37);
  swift_release(v35);

  Swift::String v38 = (NSBundle *)[v105 mainBundle];
  v117._object = (void *)0xE000000000000000LL;
  v39._uint64_t countAndFlagsBits = 0x6B6565572031LL;
  v39._object = (void *)0xE600000000000000LL;
  v40._uint64_t countAndFlagsBits = 0LL;
  v40._object = (void *)0xE000000000000000LL;
  v117._uint64_t countAndFlagsBits = 0LL;
  uint64_t v41 = NSLocalizedString(_:tableName:bundle:value:comment:)(v39, (Swift::String_optional)0, v38, v40, v117)._object;

  uint64_t v42 = swift_allocObject(&unk_100246788, 24LL, 7LL);
  swift_unknownObjectWeakInit(v42 + 16, v1);
  swift_retain(v42);
  NSString v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v41);
  int64_t v111 = sub_10013A64C;
  uint64_t v112 = v42;
  aBlock = _NSConcreteStackBlock;
  uint64_t v108 = 1107296256LL;
  uint64_t v109 = sub_100138C20;
  uint64_t v110 = &unk_100246840;
  uint64_t v44 = _Block_copy(&aBlock);
  swift_release(v112);
  id v101 = [v10 actionWithTitle:v43 style:0 handler:v44];
  _Block_release(v44);
  swift_release(v42);

  uint64_t v45 = (NSBundle *)[v105 mainBundle];
  v118._object = (void *)0xE000000000000000LL;
  v46._uint64_t countAndFlagsBits = 0x736B6565572032LL;
  v46._object = (void *)0xE700000000000000LL;
  v47._uint64_t countAndFlagsBits = 0LL;
  v47._object = (void *)0xE000000000000000LL;
  v118._uint64_t countAndFlagsBits = 0LL;
  uint64_t v48 = NSLocalizedString(_:tableName:bundle:value:comment:)(v46, (Swift::String_optional)0, v45, v47, v118)._object;

  uint64_t v49 = swift_allocObject(&unk_100246788, 24LL, 7LL);
  swift_unknownObjectWeakInit(v49 + 16, v1);
  swift_retain(v49);
  NSString v50 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v48);
  int64_t v111 = sub_10013A654;
  uint64_t v112 = v49;
  aBlock = _NSConcreteStackBlock;
  uint64_t v108 = 1107296256LL;
  uint64_t v109 = sub_100138C20;
  uint64_t v110 = &unk_100246868;
  uint64_t v51 = _Block_copy(&aBlock);
  swift_release(v112);
  id v100 = [v10 actionWithTitle:v50 style:0 handler:v51];
  _Block_release(v51);
  swift_release(v49);

  BOOL v52 = (NSBundle *)[v105 mainBundle];
  v119._object = (void *)0xE000000000000000LL;
  v53._uint64_t countAndFlagsBits = 0x68746E6F4D2031LL;
  v53._object = (void *)0xE700000000000000LL;
  v54._uint64_t countAndFlagsBits = 0LL;
  v54._object = (void *)0xE000000000000000LL;
  v119._uint64_t countAndFlagsBits = 0LL;
  int64_t v55 = NSLocalizedString(_:tableName:bundle:value:comment:)(v53, (Swift::String_optional)0, v52, v54, v119)._object;

  uint64_t v56 = swift_allocObject(&unk_100246788, 24LL, 7LL);
  swift_unknownObjectWeakInit(v56 + 16, v1);
  swift_retain(v56);
  NSString v57 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v55);
  int64_t v111 = sub_10013A65C;
  uint64_t v112 = v56;
  aBlock = _NSConcreteStackBlock;
  uint64_t v108 = 1107296256LL;
  uint64_t v109 = sub_100138C20;
  uint64_t v110 = &unk_100246890;
  int64_t v58 = (char *)_Block_copy(&aBlock);
  swift_release(v112);
  id v59 = [v10 actionWithTitle:v57 style:0 handler:v58];
  _Block_release(v58);
  swift_release(v56);

  uint64_t v60 = (NSBundle *)[v105 mainBundle];
  v120._object = (void *)0xE000000000000000LL;
  v61._uint64_t countAndFlagsBits = 0x6C65636E6143LL;
  v61._object = (void *)0xE600000000000000LL;
  v62._uint64_t countAndFlagsBits = 0LL;
  v62._object = (void *)0xE000000000000000LL;
  v120._uint64_t countAndFlagsBits = 0LL;
  unint64_t v63 = NSLocalizedString(_:tableName:bundle:value:comment:)(v61, (Swift::String_optional)0, v60, v62, v120)._object;

  NSString v64 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v63);
  id v65 = [v10 actionWithTitle:v64 style:1 handler:0];

  if ((unint64_t)v106 >> 62)
  {
    if (v106 < 0) {
      uint64_t v97 = v106;
    }
    else {
      uint64_t v97 = v106 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v106);
    id v67 = (id)_CocoaArrayWrapper.endIndex.getter(v97);
    swift_bridgeObjectRelease(v106);
    uint64_t v68 = (uint64_t)v67 + 6;
    if (!__OFADD__(v67, 6LL))
    {
LABEL_6:
      uint64_t v69 = sub_10013A664(v68, 1);
      specialized Array._endMutation()(v69);
      id v67 = v103;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      int64_t v58 = *(char **)((v106 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v66 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      goto LABEL_31;
    }
  }

  else
  {
    unint64_t v66 = v106 & 0xFFFFFFFFFFFFF8LL;
    id v67 = *(id *)((v106 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v68 = (uint64_t)v67 + 6;
    if (!__OFADD__(v67, 6LL)) {
      goto LABEL_6;
    }
  }

  __break(1u);
LABEL_31:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v58 + 1, 1LL);
LABEL_7:
  uint64_t v70 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v58, v67);
  specialized Array._endMutation()(v70);
  id v71 = v102;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  unint64_t v73 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v72 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v73 >= v72 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1, v73 + 1, 1LL);
  }
  uint64_t v74 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v73, v71);
  specialized Array._endMutation()(v74);
  id v75 = v101;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  unint64_t v77 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v76 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v77 >= v76 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v76 > 1, v77 + 1, 1LL);
  }
  uint64_t v78 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v77, v75);
  specialized Array._endMutation()(v78);
  id v79 = v100;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  unint64_t v81 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v80 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v81 >= v80 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1LL);
  }
  uint64_t v82 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v79);
  specialized Array._endMutation()(v82);
  id v83 = v59;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  unint64_t v85 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v84 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v85 >= v84 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v84 > 1, v85 + 1, 1LL);
  }
  uint64_t v86 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v85, v83);
  specialized Array._endMutation()(v86);
  id v87 = v65;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  unint64_t v89 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v88 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v89 >= v88 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v88 > 1, v89 + 1, 1LL);
  }
  uint64_t v90 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v89, v87);
  specialized Array._endMutation()(v90);

  id v91 =  [(id)objc_opt_self(UIAlertController) alertControllerWithTitle:0 message:0 preferredStyle:0];
  if (!((unint64_t)v106 >> 62))
  {
    uint64_t v92 = *(void *)((v106 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v93 = v104;
    if (v92) {
      goto LABEL_19;
    }
LABEL_36:
    swift_bridgeObjectRelease(v106);
    [v1 presentViewController:v91 animated:1 completion:0];

    return;
  }

  if (v106 < 0) {
    uint64_t v98 = v106;
  }
  else {
    uint64_t v98 = v106 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v106);
  uint64_t v92 = _CocoaArrayWrapper.endIndex.getter(v98);
  swift_bridgeObjectRelease(v106);
  uint64_t v93 = v104;
  if (!v92) {
    goto LABEL_36;
  }
LABEL_19:
  if (v92 >= 1)
  {
    for (uint64_t i = 0LL; i != v92; ++i)
    {
      if ((v106 & 0xC000000000000001LL) != 0) {
        id v95 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v106);
      }
      else {
        id v95 = *(id *)(v106 + 8 * i + 32);
      }
      unint64_t v96 = v95;
      [v91 addAction:v95];
    }

    goto LABEL_36;
  }

  __break(1u);
}

void sub_10013A140(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    Swift::String v4 = (void *)Strong;
    *(_BYTE *)(Strong + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_hidePlayedEpisodes) = 1;
    sub_10013A720( *(void *)(Strong + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_sortOrder),  *(void *)(Strong + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_limit),  1);
    id v6 = v5;
    [v4 setCompositeResultsController:v5];
  }

void sub_10013A1D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    Swift::String v4 = (void *)Strong;
    *(_BYTE *)(Strong + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_hidePlayedEpisodes) = 0;
    sub_10013A720( *(void *)(Strong + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_sortOrder),  *(void *)(Strong + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_limit),  0);
    id v6 = v5;
    [v4 setCompositeResultsController:v5];
  }

void sub_10013A26C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    Swift::String v4 = (void *)Strong;
    *(void *)(Strong + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_sortOrder) = 1LL;
    sub_10013A720( 1LL,  *(void *)(Strong + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_limit),  *(_BYTE *)(Strong + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_hidePlayedEpisodes));
    id v6 = v5;
    [v4 setCompositeResultsController:v5];
  }

void sub_10013A304(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    Swift::String v4 = (void *)Strong;
    *(void *)(Strong + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_sortOrder) = 2LL;
    sub_10013A720( 2LL,  *(void *)(Strong + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_limit),  *(_BYTE *)(Strong + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_hidePlayedEpisodes));
    id v6 = v5;
    [v4 setCompositeResultsController:v5];
  }

void sub_10013A39C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    Swift::String v4 = (void *)Strong;
    *(void *)(Strong + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_limit) = 0LL;
    sub_10013A720( *(void *)(Strong + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_sortOrder),  0LL,  *(_BYTE *)(Strong + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_hidePlayedEpisodes));
    id v6 = v5;
    [v4 setCompositeResultsController:v5];
  }

void sub_10013A430(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    Swift::String v4 = (void *)Strong;
    *(void *)(Strong + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_limit) = 1LL;
    sub_10013A720( *(void *)(Strong + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_sortOrder),  1LL,  *(_BYTE *)(Strong + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_hidePlayedEpisodes));
    id v6 = v5;
    [v4 setCompositeResultsController:v5];
  }

void sub_10013A4C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    Swift::String v4 = (void *)Strong;
    *(void *)(Strong + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_limit) = 2LL;
    sub_10013A720( *(void *)(Strong + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_sortOrder),  2LL,  *(_BYTE *)(Strong + OBJC_IVAR____TtC8Podcasts30TVLatestEpisodesViewController_hidePlayedEpisodes));
    id v6 = v5;
    [v4 setCompositeResultsController:v5];
  }

id sub_10013A590()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TVLatestEpisodesViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TVLatestEpisodesViewController()
{
  return objc_opt_self(&OBJC_CLASS____TtC8Podcasts30TVLatestEpisodesViewController);
}

uint64_t sub_10013A5F0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10013A614(uint64_t a1)
{
}

uint64_t sub_10013A61C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10013A62C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_10013A634(uint64_t a1)
{
}

void sub_10013A63C(uint64_t a1)
{
}

void sub_10013A644(uint64_t a1)
{
}

void sub_10013A64C(uint64_t a1)
{
}

void sub_10013A654(uint64_t a1)
{
}

void sub_10013A65C(uint64_t a1)
{
}

uint64_t sub_10013A664(uint64_t a1, char a2)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  uint64_t *v2 = v5;
  uint64_t v7 = 0LL;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000LL) == 0 && (v5 & 0x4000000000000000LL) == 0)
  {
    if (a1 <= *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      return result;
    }
    uint64_t v7 = 1LL;
  }

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v8 <= a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v7,  v9,  a2 & 1,  v5);
  uint64_t *v2 = result;
  return result;
}

void sub_10013A720(uint64_t a1, uint64_t a2, char a3)
{
  if (a1 == 1)
  {
    uint64_t v5 = 0LL;
    goto LABEL_5;
  }

  if (a1 == 2)
  {
    uint64_t v5 = 1LL;
LABEL_5:
    id v6 = [(id)objc_opt_self(MTEpisode) sortDescriptorsForPubDateAscending:v5];
    uint64_t v7 = sub_100134284(0LL, (unint64_t *)&qword_1002B5030, &OBJC_CLASS___NSSortDescriptor_ptr);
    uint64_t v8 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

    goto LABEL_7;
  }

  uint64_t v8 = _swiftEmptyArrayStorage;
LABEL_7:
  uint64_t v9 = sub_100126450((uint64_t *)&unk_1002B6160);
  uint64_t v10 = swift_allocObject(v9, 48LL, 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4290;
  id v11 = (void *)objc_opt_self(&OBJC_CLASS___MTEpisode);
  *(void *)(v10 + 32) = [v11 predicateForListenNowLatestEpisodes];
  id v12 = [v11 predicateForPubDateLimit:a2];
  *(void *)(v10 + 40) = v12;
  specialized Array._endMutation()(v12);
  uint64_t v13 = v10;
  sub_100134284(0LL, &qword_1002B52C8, &OBJC_CLASS___NSPredicate_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v13);
  id v15 = [(id)objc_opt_self(NSCompoundPredicate) andPredicateWithSubpredicates:isa];

  if ((a3 & 1) != 0)
  {
    id v16 = [v11 predicateForPlayed:0];
    id v17 = [v15 AND:v16];

    id v15 = v17;
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
  uint64_t v19 = v18;
  id v20 = v15;
  uint64_t v21 = sub_100136220((uint64_t)v8);
  swift_bridgeObjectRelease(v8);
  id v22 = objc_allocWithZone((Class)&OBJC_CLASS___MTCoreDataResultsController);
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  Class v24 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v21);
  id v25 = [v22 initWithEntityName:v23 predicate:v20 sortDescriptors:v24];

  uint64_t v26 = swift_allocObject(v9, 40LL, 7LL);
  *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4170;
  *(void *)(v26 + 32) = v25;
  uint64_t v31 = v26;
  specialized Array._endMutation()(v26);
  id v27 = objc_allocWithZone((Class)&OBJC_CLASS___MTCompositeResultsController);
  id v28 = v25;
  sub_100126450(&qword_1002B5178);
  Class v29 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v31);
  id v30 = [v27 initWithControllers:v29];

  if (v30)
  {
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10013AA44()
{
  id v1 = [v0 tableView];
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 dequeueReusableHeaderFooterViewWithIdentifier:v2];

  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = type metadata accessor for TVButtonTableHeaderView();
  uint64_t v5 = swift_dynamicCastClass(v3, v4);
  uint64_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = OBJC_IVAR____TtC8Podcasts23TVButtonTableHeaderView_containedView;
    uint64_t v8 = *(void **)(v5 + OBJC_IVAR____TtC8Podcasts23TVButtonTableHeaderView_containedView);
    uint64_t v9 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
    uint64_t v10 = v8;
    id v11 = (NSBundle *)[v9 mainBundle];
    v23._object = (void *)0xE000000000000000LL;
    v12._uint64_t countAndFlagsBits = 1953064005LL;
    v12._object = (void *)0xE400000000000000LL;
    v13._uint64_t countAndFlagsBits = 0LL;
    v13._object = (void *)0xE000000000000000LL;
    v23._uint64_t countAndFlagsBits = 0LL;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, v11, v13, v23)._object;

    id v15 = *(void **)&v10[OBJC_IVAR____TtC8Podcasts18TVButtonHeaderView_button];
    NSString v16 = String._bridgeToObjectiveC()();
    [v15 setTitle:v16 forState:0];

    swift_bridgeObjectRelease(object);
    uint64_t v17 = *(void *)(v6 + v7);
    uint64_t v18 = swift_allocObject(&unk_100246788, 24LL, 7LL);
    swift_unknownObjectWeakInit(v18 + 16, v0);
    uint64_t v19 = (void (**)())(v17 + OBJC_IVAR____TtC8Podcasts18TVButtonHeaderView_action);
    uint64_t v20 = *(void *)(v17 + OBJC_IVAR____TtC8Podcasts18TVButtonHeaderView_action);
    uint64_t v21 = *(void *)(v17 + OBJC_IVAR____TtC8Podcasts18TVButtonHeaderView_action + 8);
    *uint64_t v19 = sub_10013AC24;
    v19[1] = (void (*)())v18;
    sub_1001341FC(v20, v21);
  }

  else
  {
  }

  return v6;
}

void sub_10013AC24()
{
}

void ImplicitFollowsDecayEvent.hash(into:)()
{
}

Swift::Int ImplicitFollowsDecayEvent.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_10013ACC0(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t ImplicitFollowsDecayCoordinator.implicitFollowsEvents.getter()
{
  return swift_retain(*(void *)(v0 + 24));
}

uint64_t ImplicitFollowsDecayCoordinator.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong(v0 + 40);
}

uint64_t ImplicitFollowsDecayCoordinator.delegate.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 4_Block_object_dispose(va, 8) = a2;
  swift_unknownObjectWeakAssign(v2 + 40, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t (*ImplicitFollowsDecayCoordinator.delegate.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  void v3[5] = v1;
  swift_beginAccess(v1 + 40, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  void v3[3] = Strong;
  void v3[4] = v5;
  return sub_10013AE14;
}

uint64_t ImplicitFollowsDecayCoordinator.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, 56LL, 7LL);
  ImplicitFollowsDecayCoordinator.init()();
  return v1;
}

id *ImplicitFollowsDecayCoordinator.init()()
{
  uint64_t v0 = sub_100126450(&qword_1002B52D0);
  __chkstk_darwin(v0);
  NSString v50 = (char *)&v40 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0LL);
  uint64_t v49 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v48 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100126450(&qword_1002B52D8);
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v47 = v3;
  __chkstk_darwin(v3);
  uint64_t v45 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = sub_100126450(&qword_1002B52E0);
  uint64_t v52 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v10);
  Swift::String v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v13);
  id v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100134284(0LL, (unint64_t *)&qword_1002B4868, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.background.getter();
  v53[0] = _swiftEmptyArrayStorage;
  unint64_t v17 = sub_10013B360();
  uint64_t v18 = sub_100126450((uint64_t *)&unk_1002B5660);
  uint64_t v19 = sub_1001342BC( (unint64_t *)&qword_1002B4880,  (uint64_t *)&unk_1002B5660,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v53, v18, v19, v10, v17);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))( v9,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v6);
  uint64_t v44 = v16;
  uint64_t v20 = v43;
  v20[2] = (id)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002DLL,  0x80000001002192C0LL,  v15,  v12,  v9,  0LL);
  uint64_t v21 = sub_100126450(&qword_1002B4888);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  id v22 = (void *)PassthroughSubject.init()();
  void v20[3] = v22;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    Swift::String v23 = (void *)sub_100126F14((uint64_t)_swiftEmptyArrayStorage);
  }

  else
  {
    Swift::String v23 = &_swiftEmptySetSingleton;
  }

  id v25 = v41;
  uint64_t v24 = v42;
  void v20[4] = v23;
  v20[6] = 0LL;
  swift_unknownObjectWeakInit(v20 + 5, 0LL);
  v53[0] = v22;
  uint64_t v26 = sub_1001342BC( &qword_1002B52E8,  &qword_1002B4888,  (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  swift_retain(v22);
  id v27 = v45;
  Publisher.filter(_:)( variable initialization expression of EntitledFirstTimeAvailableMigrator.failSilently,  0LL,  v21,  v26);
  swift_release(v22);
  id v28 = v48;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(5LL);
  v53[0] = v20[2];
  id v29 = v53[0];
  uint64_t v30 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  uint64_t v31 = (uint64_t)v50;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v50, 1LL, 1LL, v30);
  uint64_t v32 = sub_1001342BC( &qword_1002B52F0,  &qword_1002B52D8,  (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  unint64_t v33 = sub_10013B3A8();
  id v34 = v29;
  uint64_t v35 = v47;
  Publisher.debounce<A>(for:scheduler:options:)(v28, v53, v31, v47, v44, v32, v33);
  sub_10013B400(v31);

  (*(void (**)(char *, uint64_t))(v49 + 8))(v28, v51);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v27, v35);
  uint64_t v36 = swift_allocObject(&unk_1002468C8, 24LL, 7LL);
  swift_weakInit(v36 + 16, v20);
  uint64_t v37 = sub_1001342BC( &qword_1002B52F8,  &qword_1002B52E0,  (uint64_t)&protocol conformance descriptor for Publishers.Debounce<A, B>);
  uint64_t v38 = Publisher<>.sink(receiveValue:)(sub_10013B4B8, v36, v24, v37);
  swift_release(v36);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v25, v24);
  swift_beginAccess(v20 + 4, v53, 33LL, 0LL);
  AnyCancellable.store(in:)(v20 + 4);
  swift_endAccess(v53);
  swift_release(v38);
  return v20;
}

unint64_t sub_10013B360()
{
  unint64_t result = qword_1002B4870;
  if (!qword_1002B4870)
  {
    uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_1002B4870);
  }

  return result;
}

unint64_t sub_10013B3A8()
{
  unint64_t result = qword_1002B55F0;
  if (!qword_1002B55F0)
  {
    uint64_t v1 = sub_100134284(255LL, (unint64_t *)&qword_1002B4868, &OBJC_CLASS___OS_dispatch_queue_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue, v1);
    atomic_store(result, (unint64_t *)&qword_1002B55F0);
  }

  return result;
}

uint64_t sub_10013B400(uint64_t a1)
{
  uint64_t v2 = sub_100126450(&qword_1002B52D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10013B440()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10013B464(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result)
  {
    uint64_t v4 = result;
    sub_10013B4C0();
    return swift_release(v4);
  }

  return result;
}

uint64_t sub_10013B4B8(uint64_t a1)
{
  return sub_10013B464(a1, v1);
}

void sub_10013B4C0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = static Logger.podcastsStatesCoordination.getter(v4);
  uint64_t v8 = static os_log_type_t.default.getter(v7);
  os_log_type_t v9 = v8;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v8);
  if (os_log_type_enabled(v10, v9))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v9, "Triggering new check for Max Implicit Follows limit.", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  id v12 = [(id)objc_opt_self(IMURLBag) sharedInstance];
  id v13 = [v12 integerForKey:kMTImplicitlyFollowedShowsLimit];

  aBlock[4] = sub_10013C250;
  uint64_t v17 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10014B28C;
  void aBlock[3] = &unk_100246998;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = v17;
  swift_retain(v1);
  swift_release(v15);
  [v13 asyncValueWithCompletion:v14];
  _Block_release(v14);
}

void sub_10013B67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v39 - v13;
  if (a3)
  {
    uint64_t v15 = swift_errorRetain(a3);
    static Logger.podcastsStatesCoordination.getter(v15);
    uint64_t v16 = swift_errorRetain(a3);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = swift_slowAlloc(8LL, -1LL);
      uint64_t v40 = v7;
      uint64_t v21 = (void *)v20;
      *(_DWORD *)uint64_t v19 = 138412290;
      uint64_t v22 = _convertErrorToNSError(_:)(a3);
      aBlock = (void **)v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v42, v19 + 4, v19 + 12);
      *uint64_t v21 = v22;
      swift_errorRelease(a3);
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Failed to fetch implicit followed shows limit from the bag: %@",  v19,  0xCu);
      uint64_t v23 = sub_100126450(&qword_1002B53C0);
      swift_arrayDestroy(v21, 1LL, v23);
      uint64_t v24 = v21;
      uint64_t v7 = v40;
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);

      swift_errorRelease(a3);
    }

    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  }

  else if (a1 {
         && (aBlock = 0LL,
  }
             LOBYTE(v42[0]) = 1,
             uint64_t v12 = static Int._conditionallyBridgeFromObjectiveC(_:result:)(a1, &aBlock),
             (v42[0] & 1) == 0))
  {
    id v29 = aBlock;
    id v30 = [(id)objc_opt_self(MTPodcast) predicateForImplicitlyFollowedPodcasts];
    id v31 = [(id)objc_opt_self(MTDB) sharedInstance];
    id v32 = [v31 privateQueueContext];

    uint64_t v33 = swift_allocObject(&unk_1002468C8, 24LL, 7LL);
    swift_weakInit(v33 + 16, a4);
    id v34 = (void *)swift_allocObject(&unk_1002469D0, 48LL, 7LL);
    v34[2] = v33;
    v34[3] = v32;
    void v34[4] = v30;
    v34[5] = v29;
    v42[3] = sub_10013C2A4;
    NSString v43 = v34;
    aBlock = _NSConcreteStackBlock;
    v42[0] = 1107296256LL;
    v42[1] = sub_10013D2D8;
    v42[2] = &unk_1002469E8;
    uint64_t v35 = _Block_copy(&aBlock);
    uint64_t v36 = v43;
    id v37 = v32;
    id v38 = v30;
    swift_release(v36);
    [v37 performBlock:v35];
    _Block_release(v35);
  }

  else
  {
    uint64_t v25 = static Logger.podcastsStatesCoordination.getter(v12);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      id v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v28 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Unable to cast value for implicitly followed shows limit from the bag to an Int",  v28,  2u);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }

uint64_t sub_10013BA38(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v55 - v13;
  a1 += 16LL;
  swift_beginAccess(a1, v61, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v16 = result;
    uint64_t v57 = v9;
    uint64_t v17 = (void *)kMTPodcastEntityName;
    os_log_type_t v18 = (char *)[a2 countOfObjectsInEntity:kMTPodcastEntityName predicate:a3];
    if ((uint64_t)v18 <= a4)
    {
      uint64_t v49 = ((uint64_t (*)(void))static Logger.podcastsStatesCoordination.getter)();
      uint64_t v50 = static os_log_type_t.default.getter(v49);
      os_log_type_t v51 = v50;
      uint64_t v52 = (os_log_s *)Logger.logObject.getter(v50);
      os_log_type_t v53 = v51;
      if (os_log_type_enabled(v52, v51))
      {
        uint64_t v54 = swift_slowAlloc(22LL, -1LL);
        *(_DWORD *)uint64_t v54 = 134218240;
        uint64_t v58 = (uint64_t)v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v54 + 4, v54 + 12);
        *(_WORD *)(v54 + 12) = 2048;
        uint64_t v58 = a4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v54 + 14, v54 + 22);
        _os_log_impl( (void *)&_mh_execute_header,  v52,  v53,  "Not proceeding with eviction of implicitly followed shows -- Count of implicitly followed shows: %ld is not ov er the limit: %ld",  (uint8_t *)v54,  0x16u);
        swift_slowDealloc(v54, -1LL, -1LL);
        swift_release(v16);
      }

      else
      {

        swift_release(v16);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v12, v8);
    }

    else
    {
      uint64_t v55 = v8;
      id v56 = a2;
      uint64_t v19 = sub_100126450((uint64_t *)&unk_1002B6160);
      uint64_t inited = swift_initStackObject(v19, v60);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1001C4170;
      static String._unconditionallyBridgeFromObjectiveC(_:)(kPodcastLastDatePlayed);
      uint64_t v22 = v21;
      id v23 = objc_allocWithZone(&OBJC_CLASS___NSSortDescriptor);
      NSString v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v22);
      id v25 = [v23 initWithKey:v24 ascending:1];

      *(void *)(inited + 32) = v25;
      uint64_t v58 = inited;
      uint64_t result = specialized Array._endMutation()(v26);
      BOOL v27 = __OFSUB__(v18, a4);
      id v28 = &v18[-a4];
      if (v27)
      {
        __break(1u);
      }

      else
      {
        uint64_t v29 = v58;
        id v30 = v17;
        uint64_t v31 = sub_100136220(v29);
        swift_bridgeObjectRelease(v29);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v31);
        id v33 = v56;
        id v34 =  [v56 objectsInEntity:v30 predicate:a3 sortDescriptors:isa returnsObjectsAsFaults:0 limit:v28];

        if (v34)
        {
          uint64_t v35 = sub_100134284(0LL, (unint64_t *)&qword_1002B6720, &OBJC_CLASS___NSManagedObject_ptr);
          unint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, v35);

          id v37 = sub_100130468(v36);
          uint64_t v38 = swift_bridgeObjectRelease(v36);
          if (v37)
          {
            uint64_t v39 = static Logger.podcastsStatesCoordination.getter(v38);
            uint64_t v40 = static os_log_type_t.default.getter(v39);
            os_log_type_t v41 = v40;
            uint64_t v42 = (os_log_s *)Logger.logObject.getter(v40);
            os_log_type_t v43 = v41;
            if (os_log_type_enabled(v42, v41))
            {
              uint64_t v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              *(_DWORD *)uint64_t v44 = 134217984;
              id v33 = v56;
              uint64_t v58 = (uint64_t)v28;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v44 + 4, v44 + 12);
              _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "Implicitly followed shows over the limit. Proceeding to evict %ld shows.",  v44,  0xCu);
              swift_slowDealloc(v44, -1LL, -1LL);
            }

            (*(void (**)(char *, uint64_t))(v57 + 8))(v14, v55);
            swift_beginAccess(v16 + 40, &v58, 0LL, 0LL);
            uint64_t Strong = swift_unknownObjectWeakLoadStrong(v16 + 40);
            if (Strong)
            {
              uint64_t v46 = Strong;
              uint64_t v47 = *(void *)(v16 + 48);
              uint64_t ObjectType = swift_getObjectType(Strong);
              (*(void (**)(uint64_t, void *, id, uint64_t, uint64_t))(v47 + 8))( v16,  v37,  v33,  ObjectType,  v47);
              swift_bridgeObjectRelease(v37);
              swift_unknownObjectRelease(v46);
            }

            else
            {
              swift_bridgeObjectRelease(v37);
            }

            [v33 saveInCurrentBlock];
          }
        }

        return swift_release(v16);
      }
    }
  }

  return result;
}

uint64_t ImplicitFollowsDecayCoordinator.deinit()
{
  swift_release(*(void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  sub_10013C0CC(v0 + 40);
  return v0;
}

uint64_t ImplicitFollowsDecayCoordinator.__deallocating_deinit()
{
  swift_release(*(void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  sub_10013C0CC(v0 + 40);
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t sub_10013BF34()
{
  return swift_retain(*(void *)(*(void *)v0 + 24LL));
}

uint64_t sub_10013BF40()
{
  uint64_t v1 = *v0;
  swift_beginAccess(v1 + 40, v3, 0LL, 0LL);
  return swift_unknownObjectWeakLoadStrong(v1 + 40);
}

uint64_t sub_10013BF88(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *v2 + 40;
  swift_beginAccess(v6, v8, 1LL, 0LL);
  *(void *)(v5 + 4_Block_object_dispose(va, 8) = a2;
  swift_unknownObjectWeakAssign(v6, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t (*sub_10013BFEC(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  void v3[5] = v4;
  swift_beginAccess(v4 + 40, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v4 + 40);
  uint64_t v6 = *(void *)(v4 + 48);
  void v3[3] = Strong;
  void v3[4] = v6;
  return sub_10013AE14;
}

void sub_10013C05C(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 40LL);
  *(void *)(v5 + 4_Block_object_dispose(va, 8) = *(void *)(*(void *)a1 + 32LL);
  swift_unknownObjectWeakAssign(v5 + 40, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }

  free(v3);
}

uint64_t sub_10013C0CC(uint64_t a1)
{
  return a1;
}

unint64_t sub_10013C0F4()
{
  unint64_t result = qword_1002B5300;
  if (!qword_1002B5300)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ImplicitFollowsDecayEvent,  &type metadata for ImplicitFollowsDecayEvent);
    atomic_store(result, (unint64_t *)&qword_1002B5300);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for ImplicitFollowsDecayEvent(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for ImplicitFollowsDecayEvent(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10013C1D0 + 4 * byte_1001C42E0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10013C1F0 + 4 * byte_1001C42E5[v4]))();
  }
}

_BYTE *sub_10013C1D0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10013C1F0(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10013C1F8(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10013C200(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10013C208(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10013C210(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ImplicitFollowsDecayEvent()
{
  return &type metadata for ImplicitFollowsDecayEvent;
}

uint64_t type metadata accessor for ImplicitFollowsDecayCoordinator()
{
  return objc_opt_self(&OBJC_CLASS____TtC8Podcasts31ImplicitFollowsDecayCoordinator);
}

void sub_10013C250(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10013C258(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10013C268(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10013C270()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10013C2A4()
{
  return sub_10013BA38(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

id sub_10013C2B8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t v8 = (char *)v4 + OBJC_IVAR___MTSwiftEpisodeListManifest_settings;
    uint64_t v9 = type metadata accessor for EpisodeListSettings(0LL, a2);
    uint64_t v10 = *(void *)(v9 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a3, v9);
    static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
    uint64_t v12 = v11;
    id v13 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
    id v15 = [v13 initWithEntityName:v14];

    uint64_t v16 = (void *)EpisodeListSettings.playPredicate.getter();
    [v15 setPredicate:v16];

    uint64_t v17 = EpisodeListSettings.sort.getter();
    uint64_t v18 = EpisodeSortType.playDescriptors.getter(v17);
    sub_10013D180();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v18);
    [v15 setSortDescriptors:isa];

    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    v27.receiver = v4;
    v27.super_class = (Class)type metadata accessor for EpisodeListManifest(0LL);
    id v21 = objc_msgSendSuper2(&v27, "initWithInitialEpisodeUuid:fetchRequest:", v20, v15);

    id v22 = v21;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a3, v9);
    if (v22) {
  }
    }

  else
  {
    swift_bridgeObjectRelease(a2);
    uint64_t v24 = type metadata accessor for EpisodeListSettings(0LL, v23);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8LL))(a3, v24);
    uint64_t v25 = type metadata accessor for EpisodeListManifest(0LL);
    swift_deallocPartialClassInstance( v4,  v25,  *(unsigned int *)((swift_isaMask & *v4) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v4) + 0x34LL));
    return 0LL;
  }

  return v22;
}

id sub_10013C504()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EpisodeListManifest(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10013C574()
{
  return type metadata accessor for EpisodeListManifest(0LL);
}

uint64_t type metadata accessor for EpisodeListManifest(uint64_t a1)
{
  uint64_t result = qword_1002B53F0;
  if (!qword_1002B53F0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EpisodeListManifest);
  }
  return result;
}

uint64_t sub_10013C5B8(uint64_t a1, uint64_t a2)
{
  uint64_t result = type metadata accessor for EpisodeListSettings(319LL, a2);
  if (v4 <= 0x3F)
  {
    uint64_t v5 = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 1LL, &v5, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void *sub_10013C654()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  uint64_t v3 = JSONEncoder.init()();
  unint64_t v4 = &v1[OBJC_IVAR___MTSwiftEpisodeListManifest_settings];
  uint64_t v6 = type metadata accessor for EpisodeListSettings(0LL, v5);
  uint64_t v7 = sub_10013D1BC(&qword_1002B5420, (uint64_t)&protocol conformance descriptor for EpisodeListSettings);
  uint64_t v8 = dispatch thunk of JSONEncoder.encode<A>(_:)(v4, v6, v7);
  unint64_t v10 = v9;
  swift_release(v3);
  v33.receiver = v1;
  v33.super_class = (Class)type metadata accessor for EpisodeListManifest(0LL);
  id v11 = objc_msgSendSuper2(&v33, "activity");
  uint64_t v12 = v11;
  if (v11)
  {
    id v13 = v11;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    NSString v15 = String._bridgeToObjectiveC()();
    [v13 setValue:isa forKey:v15];
  }

  id v16 = [v1 explicitSortOrder];
  if (!v16)
  {
    uint64_t v21 = v8;
    unint64_t v22 = v10;
LABEL_11:
    sub_10013356C(v21, v22);
    return v12;
  }

  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  uint64_t v17 = JSONEncoder.init()();
  id v18 = [v1 explicitSortOrder];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, &type metadata for String);
  }

  else
  {
    uint64_t v20 = 0LL;
  }

  uint64_t v32 = v20;
  uint64_t v23 = sub_100126450(&qword_1002B5428);
  unint64_t v24 = sub_10013D1FC();
  uint64_t v25 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v32, v23, v24);
  unint64_t v27 = v26;
  swift_release(v17);
  swift_bridgeObjectRelease(v20);
  if (!v12)
  {
    sub_10013356C(v8, v10);
    uint64_t v21 = v25;
    unint64_t v22 = v27;
    goto LABEL_11;
  }

  id v28 = v12;
  Class v29 = Data._bridgeToObjectiveC()().super.isa;
  NSString v30 = String._bridgeToObjectiveC()();
  objc_msgSend(v28, "setValue:forKey:", v29, v30, v32);
  sub_10013356C(v8, v10);
  sub_10013356C(v25, v27);

  return v12;
}

uint64_t sub_10013C938(uint64_t a1, unint64_t a2, void *a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v10 = sub_100126450(&qword_1002B5400);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for EpisodeListSettings(0LL, v13);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  id v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  if (!a2) {
    return ((uint64_t (*)(void))a4)(0LL);
  }
  uint64_t v55 = (char *)&v52 - v19;
  uint64_t v57 = a4;
  swift_bridgeObjectRetain(a2);
  id v20 = [a3 userInfo];
  if (!v20)
  {
    __int128 v62 = 0u;
    __int128 v63 = 0u;
    swift_bridgeObjectRelease(a2);
    a4 = v57;
LABEL_13:
    sub_10012A4A0((uint64_t)&v62, &qword_1002B5408);
    return ((uint64_t (*)(void))a4)(0LL);
  }

  uint64_t v21 = v20;
  uint64_t v54 = a1;
  uint64_t v56 = a5;
  uint64_t v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v20,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  unint64_t v58 = 0xD00000000000001ELL;
  unint64_t v59 = 0x800000010021A4D0LL;
  AnyHashable.init<A>(_:)(&v60, &v58, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v22 + 16))
  {
    unint64_t v23 = sub_10015F074((uint64_t)&v60);
    a4 = v57;
    if ((v24 & 1) != 0)
    {
      sub_1001343F8(*(void *)(v22 + 56) + 32 * v23, (uint64_t)&v62);
    }

    else
    {
      __int128 v62 = 0u;
      __int128 v63 = 0u;
    }
  }

  else
  {
    __int128 v62 = 0u;
    __int128 v63 = 0u;
    a4 = v57;
  }

  sub_1001275E8((uint64_t)&v60);
  swift_bridgeObjectRelease(v22);
  if (!*((void *)&v63 + 1))
  {
    swift_bridgeObjectRelease(a2);
    goto LABEL_13;
  }

  if ((swift_dynamicCast(&v60, &v62, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
  {
    uint64_t v52 = v15;
    uint64_t v25 = v60;
    unint64_t v26 = v61;
    uint64_t v27 = type metadata accessor for JSONDecoder(0LL);
    swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
    uint64_t v28 = JSONDecoder.init()();
    uint64_t v29 = sub_10013D1BC(&qword_1002B5410, (uint64_t)&protocol conformance descriptor for EpisodeListSettings);
    unint64_t v53 = v26;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v14, v25, v26, v14, v29);
    swift_release(v28);
    uint64_t v31 = v52;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v12, 0LL, 1LL, v14);
    uint64_t v32 = v55;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v55, v12, v14);
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v18, v32, v14);
    id v33 = objc_allocWithZone((Class)type metadata accessor for EpisodeListManifest(0LL));
    id v34 = sub_10013C2B8(v54, a2, (uint64_t)v18);
    id v35 = [a3 userInfo];
    if (v35)
    {
      unint64_t v36 = v35;
      uint64_t v37 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v35,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

      unint64_t v58 = 0xD000000000000014LL;
      unint64_t v59 = 0x800000010021A4F0LL;
      AnyHashable.init<A>(_:)(&v60, &v58, &type metadata for String, &protocol witness table for String);
      uint64_t v38 = v25;
      if (*(void *)(v37 + 16) && (unint64_t v39 = sub_10015F074((uint64_t)&v60), (v40 & 1) != 0))
      {
        sub_1001343F8(*(void *)(v37 + 56) + 32 * v39, (uint64_t)&v62);
      }

      else
      {
        __int128 v62 = 0u;
        __int128 v63 = 0u;
      }

      unint64_t v41 = v53;
      sub_1001275E8((uint64_t)&v60);
      swift_bridgeObjectRelease(v37);
      if (*((void *)&v63 + 1))
      {
        if ((swift_dynamicCast(&v60, &v62, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
        {
          uint64_t v43 = v60;
          unint64_t v42 = v61;
          swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
          uint64_t v44 = JSONDecoder.init()();
          uint64_t v45 = sub_100126450(&qword_1002B66A0);
          uint64_t v46 = sub_10013D278( &qword_1002B5418,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(v45, v43, v42, v45, v46);
          swift_release(v44);
          uint64_t v49 = v60;
          if (!v34)
          {
            sub_10013356C(v43, v42);
            swift_bridgeObjectRelease(v49);
            uint64_t v47 = 0LL;
            unint64_t v41 = v53;
            goto LABEL_30;
          }

          id v50 = v34;
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v49);
          [v50 setExplicitSortOrder:isa];
          sub_10013356C(v43, v42);

          unint64_t v41 = v53;
          goto LABEL_28;
        }

uint64_t sub_10013CF44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  if (a2)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    uint64_t v6 = v5;
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v6 = 0LL;
  }

  swift_retain(v2);
  v3(v4, v6);
  swift_release(v2);
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_10013D0FC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10013D120()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_10013D130()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10013D15C(uint64_t a1, unint64_t a2)
{
  return sub_10013C938(a1, a2, *(void **)(v2 + 16), *(void (**)(void))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_10013D168(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10013D178(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_10013D180()
{
  unint64_t result = qword_1002B5030;
  if (!qword_1002B5030)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSSortDescriptor);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B5030);
  }

  return result;
}

uint64_t sub_10013D1BC(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for EpisodeListSettings(255LL, a2);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10013D1FC()
{
  unint64_t result = qword_1002B5430;
  if (!qword_1002B5430)
  {
    uint64_t v1 = sub_1001264DC(&qword_1002B5428);
    sub_10013D278( &qword_1002B5438,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1002B5430);
  }

  return result;
}

uint64_t sub_10013D278(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_1001264DC(&qword_1002B66A0);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10013D2D8(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

id sub_10013D304()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for FeedManager(0)) init];
  static FeedManager.shared = (uint64_t)result;
  return result;
}

uint64_t *FeedManager.shared.unsafeMutableAddressor()
{
  if (qword_1002B4808 != -1) {
    swift_once(&qword_1002B4808, sub_10013D304);
  }
  return &static FeedManager.shared;
}

id static FeedManager.shared.getter()
{
  if (qword_1002B4808 != -1) {
    swift_once(&qword_1002B4808, sub_10013D304);
  }
  return (id)static FeedManager.shared;
}

id sub_10013D3F4()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v59 = *(void *)(v1 - 8);
  uint64_t v60 = v1;
  __chkstk_darwin(v1);
  unint64_t v58 = (char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for OSSignposter(0LL);
  uint64_t v54 = *(void *)(v3 - 8);
  uint64_t v55 = v3;
  __chkstk_darwin(v3);
  uint64_t v52 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v51 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  id v50 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v56 = *(void *)(v9 - 8);
  uint64_t v57 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = v0;
  UninitializedCurrentValueSubject.init()( &type metadata for FeedManager.System,  &type metadata for Never,  &protocol witness table for Never);
  uint64_t v17 = OBJC_IVAR___MTFeedManager_queue;
  sub_100134284(0LL, (unint64_t *)&qword_1002B4868, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v18 = (*(uint64_t (**)(char *, void, uint64_t))(v13 + 104))( v15,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v12);
  static DispatchQoS.unspecified.getter(v18);
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_100127210( (unint64_t *)&qword_1002B4870,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v20 = sub_100126450((uint64_t *)&unk_1002B5660);
  uint64_t v21 = sub_1001342BC( (unint64_t *)&qword_1002B4880,  (uint64_t *)&unk_1002B5660,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v6, v19);
  *(void *)&v16[v17] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0x616E614D64656546LL,  0xEB00000000726567LL,  v11,  v8,  v15,  0LL);
  uint64_t v22 = &v16[OBJC_IVAR___MTFeedManager__system];
  void *v22 = 0LL;
  v22[1] = 0LL;
  void v22[2] = 0LL;
  *(void *)&v16[OBJC_IVAR___MTFeedManager__pendingRequests] = _swiftEmptyArrayStorage;
  *(void *)&v16[OBJC_IVAR___MTFeedManager__pendingBlocks] = _swiftEmptyArrayStorage;
  *(void *)&v16[OBJC_IVAR___MTFeedManager__subscriptions] = _swiftEmptyArrayStorage;
  v16[OBJC_IVAR___MTFeedManager__wasUpdating] = 0;
  *(void *)&v16[OBJC_IVAR___MTFeedManager_downloadManager] = 0LL;
  uint64_t v23 = type metadata accessor for DummyCategoryIngester();
  uint64_t v24 = swift_allocObject(v23, 16LL, 7LL);
  id v25 = [(id)objc_opt_self(MTDB) sharedInstance];
  id v26 = [v25 importContext];

  id result = [(id)objc_opt_self(MTStoreInfoUpdater) sharedInstance];
  if (result)
  {
    uint64_t v28 = result;
    id v29 = [(id)objc_opt_self(MTSyncController) sharedInstance];
    id result = [(id)objc_opt_self(MTLibrary) sharedInstance];
    if (result)
    {
      NSString v30 = result;
      uint64_t v31 = type metadata accessor for FeedIngesterProvider();
      uint64_t v32 = (void *)swift_allocObject(v31, 80LL, 7LL);
      swift_retain(v24);
      id v33 = sub_100141D54(v26, v28, v29, v24, v30, v32);

      swift_release(v24);
      *(void *)&v16[OBJC_IVAR___MTFeedManager__feedIngesterProvider] = v33;
      id v34 = v52;
      uint64_t v35 = static OSSignposter.feedUpdate.getter();
      uint64_t v36 = OSSignposter.logHandle.getter(v35);
      uint64_t v37 = v50;
      OSSignpostID.init(log:)(v36);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v34, v55);
      (*(void (**)(_BYTE *, char *, uint64_t))(v51 + 32))( &v16[OBJC_IVAR___MTFeedManager_signpostID],  v37,  v53);

      uint64_t v38 = (objc_class *)type metadata accessor for FeedManager(0LL);
      v64.receiver = v16;
      v64.super_class = v38;
      id v39 = objc_msgSendSuper2(&v64, "init");
      uint64_t v40 = swift_allocObject(&unk_100246D50, 24LL, 7LL);
      *(void *)(v40 + swift_weakDestroy(v0 + 16) = v39;
      aBlock[4] = sub_100142CC8;
      uint64_t v63 = v40;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_10013D2D8;
      void aBlock[3] = &unk_100246D68;
      unint64_t v41 = _Block_copy(aBlock);
      id v42 = v39;
      static DispatchQoS.unspecified.getter(v42);
      unint64_t v61 = _swiftEmptyArrayStorage;
      uint64_t v43 = sub_100127210( (unint64_t *)&qword_1002B4E90,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v44 = sub_100126450((uint64_t *)&unk_1002B5490);
      uint64_t v45 = sub_1001342BC( (unint64_t *)&qword_1002B4E98,  (uint64_t *)&unk_1002B5490,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v46 = v58;
      uint64_t v47 = v44;
      uint64_t v48 = v60;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v61, v47, v45, v60, v43);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v46, v41);
      _Block_release(v41);
      swift_release(v24);

      (*(void (**)(char *, uint64_t))(v59 + 8))(v46, v48);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v11, v57);
      swift_release(v63);
      return v42;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_10013DA0C(void *a1)
{
  uint64_t v2 = swift_allocObject(&unk_100246DA0, 24LL, 7LL);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  id v3 = a1;
  static FeedManagerBagConfiguration.getConfigurationOrLocalDefault(completion:)(sub_100142CD0, v2);
  return swift_release(v2);
}

uint64_t sub_10013DA5C(uint64_t a1, char *a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v24 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v7 - 8);
  uint64_t v23 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for FeedManagerBagConfiguration(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  v21[1] = *(void *)&a2[OBJC_IVAR___MTFeedManager_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v10);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 24) & ~v13;
  uint64_t v15 = swift_allocObject(&unk_100246DC8, v14 + v12, v13 | 7);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))( v15 + v14,  (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v10);
  aBlock[4] = sub_100142D5C;
  uint64_t v27 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10013D2D8;
  void aBlock[3] = &unk_100246DE0;
  uint64_t v16 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(a2);
  id v25 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_100127210( (unint64_t *)&qword_1002B4E90,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100126450((uint64_t *)&unk_1002B5490);
  uint64_t v19 = sub_1001342BC( (unint64_t *)&qword_1002B4E98,  (uint64_t *)&unk_1002B5490,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v4, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v6, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v23);
  return swift_release(v27);
}

uint64_t sub_10013DCC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR___MTFeedManager__feedIngesterProvider);
  swift_retain(v4);
  sub_1001417A4(a2, v4, a1);
  return swift_release(v4);
}

uint64_t sub_10013DD34(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = *(void *)&v2[OBJC_IVAR___MTFeedManager_queue];
  uint64_t v13 = (void *)swift_allocObject(&unk_100246EB8, 40LL, 7LL);
  _DWORD v13[2] = v2;
  void v13[3] = a1;
  void v13[4] = a2;
  aBlock[4] = sub_100142DF0;
  uint64_t v24 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10013D2D8;
  void aBlock[3] = &unk_100246ED0;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = v2;
  uint64_t v16 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_100127210( (unint64_t *)&qword_1002B4E90,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100126450((uint64_t *)&unk_1002B5490);
  uint64_t v19 = sub_1001342BC( (unint64_t *)&qword_1002B4E98,  (uint64_t *)&unk_1002B5490,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v5, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v24);
}

uint64_t sub_10013DF34(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v5 = a1 + OBJC_IVAR___MTFeedManager__system;
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR___MTFeedManager__system);
  if (v6)
  {
    uint64_t v8 = *(void *)(v5 + 8);
    uint64_t v7 = *(void *)(v5 + 16);
    swift_unknownObjectRetain(*(void *)(a1 + OBJC_IVAR___MTFeedManager__system));
    swift_retain(v7);
    a2(v6, v8, v7);
    return sub_100142038(v6, v8, v7);
  }

  else
  {
    uint64_t v11 = swift_allocObject(&unk_100246F08, 32LL, 7LL);
    *(void *)(v11 + swift_weakDestroy(v0 + 16) = a2;
    *(void *)(v11 + 24) = a3;
    uint64_t v12 = (void **)(a1 + OBJC_IVAR___MTFeedManager__pendingBlocks);
    swift_beginAccess(v12, v18, 33LL, 0LL);
    uint64_t v13 = *v12;
    swift_retain(a3);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
    char *v12 = v13;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v13 = sub_100132678(0LL, v13[2] + 1LL, 1, v13);
      char *v12 = v13;
    }

    unint64_t v16 = v13[2];
    unint64_t v15 = v13[3];
    if (v16 >= v15 >> 1)
    {
      uint64_t v13 = sub_100132678((void *)(v15 > 1), v16 + 1, 1, v13);
      char *v12 = v13;
    }

    _DWORD v13[2] = v16 + 1;
    uint64_t v17 = &v13[2 * v16];
    void v17[4] = sub_100142E20;
    void v17[5] = v11;
    return swift_endAccess(v18);
  }

uint64_t sub_10013E09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v98 = a3;
  uint64_t v100 = a2;
  uint64_t v96 = a1;
  uint64_t v3 = sub_100126450(&qword_1002B55A8);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v111 = v3;
  uint64_t v112 = v4;
  __chkstk_darwin(v3);
  uint64_t v109 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100126450(&qword_1002B55B0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v113 = v6;
  uint64_t v114 = v7;
  __chkstk_darwin(v6);
  uint64_t v110 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v105 = sub_100126450(&qword_1002B55B8);
  uint64_t v107 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  id v102 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v106 = sub_100126450(&qword_1002B55C0);
  uint64_t v108 = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  id v103 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v95 = sub_100126450(&qword_1002B54A8);
  uint64_t v97 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v92 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v99 = sub_100126450(&qword_1002B55C8);
  uint64_t v104 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v93 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v90 = sub_100126450(&qword_1002B54A0);
  uint64_t v91 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v82 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v94 = sub_100126450((uint64_t *)&unk_1002B55D0);
  uint64_t v101 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  id v83 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100126450(&qword_1002B52D0);
  __chkstk_darwin(v15);
  Swift::String v115 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100126450(&qword_1002B5440);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v87 = sub_100126450((uint64_t *)&unk_1002B55E0);
  uint64_t v88 = *(void *)(v87 - 8);
  uint64_t v21 = __chkstk_darwin(v87);
  uint64_t v86 = (char *)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = static Subscribers.Demand.unlimited.getter(v21);
  uint64_t v24 = sub_100126450(&qword_1002B5450);
  uint64_t v25 = sub_100126450(&qword_1002B5458);
  uint64_t v26 = sub_1001342BC( &qword_1002B5460,  &qword_1002B5450,  (uint64_t)&protocol conformance descriptor for UninitializedCurrentValueSubject<A, B>);
  uint64_t v27 = sub_1001342BC( &qword_1002B5468,  &qword_1002B5458,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v23, sub_10014162C, 0LL, v24, v25, v26, v27);
  uint64_t v28 = sub_1001342BC( (unint64_t *)&unk_1002B5470,  &qword_1002B5440,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  uint64_t v29 = Publisher.eraseToAnyPublisher()(v17, v28);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  uint64_t v117 = v29;
  uint64_t v30 = sub_100134284(0LL, (unint64_t *)&qword_1002B4868, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v81 = v30;
  id v118 = (id)((uint64_t (*)(void))static OS_dispatch_queue.main.getter)();
  uint64_t v85 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  unint64_t v84 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56LL);
  uint64_t v31 = (uint64_t)v115;
  v84(v115, 1LL, 1LL, v85);
  unint64_t v89 = sub_10013B3A8();
  uint64_t v32 = v86;
  Publisher.receive<A>(on:options:)(&v118, v31, v25, v30, v27, v89);
  sub_10012A4A0(v31, &qword_1002B52D0);

  swift_release(v117);
  uint64_t v33 = swift_allocObject(&unk_100246D28, 24LL, 7LL);
  uint64_t v34 = v116;
  swift_unknownObjectWeakInit(v33 + 16, v116);
  uint64_t v35 = sub_1001342BC( &qword_1002B55F8,  (uint64_t *)&unk_1002B55E0,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v36 = v87;
  uint64_t v37 = Publisher<>.sink(receiveValue:)(sub_100142C6C, v33, v87, v35);
  swift_release(v33);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v32, v36);
  uint64_t v38 = (char *)(v34 + OBJC_IVAR___MTFeedManager__subscriptions);
  uint64_t v86 = v38;
  swift_beginAccess(v38, &v117, 33LL, 0LL);
  uint64_t v39 = sub_100126450((uint64_t *)&unk_1002B5600);
  uint64_t v88 = v39;
  uint64_t v87 = sub_1001342BC(&qword_1002B6690, (uint64_t *)&unk_1002B5600, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v38, v39, v87);
  swift_endAccess(&v117);
  swift_release(v37);
  uint64_t v40 = v96;
  uint64_t ObjectType = swift_getObjectType(v96);
  swift_unknownObjectRetain(v40);
  uint64_t v42 = v98;
  swift_retain(v98);
  uint64_t v43 = v82;
  dispatch thunk of URLBasedFeedUpdater.updatingFeedURLs.getter(ObjectType, v100);
  uint64_t KeyPath = swift_getKeyPath(&unk_1001C4518);
  uint64_t v45 = sub_1001342BC( &qword_1002B5610,  &qword_1002B54A0,  (uint64_t)&protocol conformance descriptor for ReadOnlyCurrentValueSubject<A, B>);
  uint64_t v46 = v83;
  uint64_t v47 = v90;
  Publisher.map<A>(_:)(KeyPath, v90, v45);
  swift_release(KeyPath);
  uint64_t v48 = (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v43, v47);
  uint64_t v49 = v92;
  dispatch thunk of StoreFeedUpdater.updatingStoreIDs.getter(v48);
  uint64_t v50 = swift_getKeyPath(&unk_1001C4550);
  uint64_t v51 = sub_1001342BC( &qword_1002B5618,  &qword_1002B54A8,  (uint64_t)&protocol conformance descriptor for ReadOnlyCurrentValueSubject<A, B>);
  uint64_t v52 = v93;
  uint64_t v53 = v95;
  Publisher.map<A>(_:)(v50, v95, v51);
  swift_release(v50);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v49, v53);
  uint64_t v54 = sub_1001342BC( &qword_1002B5620,  (uint64_t *)&unk_1002B55D0,  (uint64_t)&protocol conformance descriptor for Publishers.MapKeyPath<A, B>);
  uint64_t v55 = sub_1001342BC( &qword_1002B5628,  &qword_1002B55C8,  (uint64_t)&protocol conformance descriptor for Publishers.MapKeyPath<A, B>);
  uint64_t v56 = v102;
  uint64_t v57 = v94;
  uint64_t v58 = v99;
  Publisher.combineLatest<A>(_:)(v52, v94, v99, v54, v55);
  uint64_t v59 = sub_1001342BC( &qword_1002B5630,  &qword_1002B55B8,  (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  uint64_t v60 = v103;
  uint64_t v61 = v105;
  Publisher.map<A>(_:)(sub_10013F02C, 0LL, v105, &type metadata for Int, v59);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v56, v61);
  uint64_t v62 = sub_1001342BC( &qword_1002B5638,  &qword_1002B55C0,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  uint64_t v63 = v106;
  uint64_t v64 = Publisher.eraseToAnyPublisher()(v106, v62);
  swift_unknownObjectRelease(v40);
  swift_release(v42);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v60, v63);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v52, v58);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v46, v57);
  uint64_t v117 = v64;
  uint64_t v65 = swift_retain(v64);
  uint64_t v66 = v81;
  id v118 = (id)static OS_dispatch_queue.main.getter(v65);
  uint64_t v67 = (uint64_t)v115;
  v84(v115, 1LL, 1LL, v85);
  uint64_t v68 = sub_100126450(&qword_1002B5640);
  uint64_t v69 = sub_1001342BC( &qword_1002B5648,  &qword_1002B5640,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v70 = v109;
  Publisher.receive<A>(on:options:)(&v118, v67, v68, v66, v69, v89);
  sub_10012A4A0(v67, &qword_1002B52D0);

  swift_release(v117);
  uint64_t v71 = sub_1001342BC( &qword_1002B5650,  &qword_1002B55A8,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  unint64_t v73 = v110;
  uint64_t v72 = v111;
  Publisher.drop(while:)(sub_10013F044, 0LL, v111, v71);
  (*(void (**)(char *, uint64_t))(v112 + 8))(v70, v72);
  uint64_t v74 = swift_allocObject(&unk_100246D28, 24LL, 7LL);
  swift_unknownObjectWeakInit(v74 + 16, v116);
  uint64_t v75 = sub_1001342BC( &qword_1002B5658,  &qword_1002B55B0,  (uint64_t)&protocol conformance descriptor for Publishers.DropWhile<A>);
  uint64_t v76 = v113;
  uint64_t v77 = Publisher<>.sink(receiveValue:)(sub_100142C9C, v74, v113, v75);
  swift_release(v74);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v73, v76);
  uint64_t v78 = v86;
  swift_beginAccess(v86, &v117, 33LL, 0LL);
  AnyCancellable.store<A>(in:)(v78, v88, v87);
  swift_endAccess(&v117);
  swift_release(v64);
  return swift_release(v77);
}

uint64_t FeedManager.isUpdatingPublisher.getter()
{
  uint64_t v0 = sub_100126450(&qword_1002B5440);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = static Subscribers.Demand.unlimited.getter(v2);
  uint64_t v6 = sub_100126450(&qword_1002B5450);
  uint64_t v7 = sub_100126450(&qword_1002B5458);
  uint64_t v8 = sub_1001342BC( &qword_1002B5460,  &qword_1002B5450,  (uint64_t)&protocol conformance descriptor for UninitializedCurrentValueSubject<A, B>);
  uint64_t v9 = sub_1001342BC( &qword_1002B5468,  &qword_1002B5458,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v5, sub_10014162C, 0LL, v6, v7, v8, v9);
  uint64_t v10 = sub_1001342BC( (unint64_t *)&unk_1002B5470,  &qword_1002B5440,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  uint64_t v11 = Publisher.eraseToAnyPublisher()(v0, v10);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v11;
}

void sub_10013EC70(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for FeedUpdateType(0LL);
  uint64_t v5 = *(void *)(updated - 8);
  __chkstk_darwin(updated);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v8 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  int v12 = *a1;
  a2 += 16LL;
  swift_beginAccess(a2, v17, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    uint64_t v14 = (_BYTE *)Strong;
    if (v12)
    {
      if ((*(_BYTE *)(Strong + OBJC_IVAR___MTFeedManager__wasUpdating) & 1) == 0)
      {
        sub_100134284(0LL, (unint64_t *)&qword_1002B4868, &OBJC_CLASS___OS_dispatch_queue_ptr);
        void *v11 = static OS_dispatch_queue.main.getter();
        (*(void (**)(void *, void, uint64_t))(v9 + 104))( v11,  enum case for DispatchPredicate.onQueue(_:),  v8);
        char v15 = _dispatchPreconditionTest(_:)(v11);
        (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
        if ((v15 & 1) == 0)
        {
          __break(1u);
          return;
        }

        (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for FeedUpdateType.batch(_:),  updated);
        FeedUpdateType.beginInterval(for:)(&v14[OBJC_IVAR___MTFeedManager_signpostID]);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, updated);
      }
    }

    else if (*(_BYTE *)(Strong + OBJC_IVAR___MTFeedManager__wasUpdating))
    {
      sub_10013EE28();
    }

    v14[OBJC_IVAR___MTFeedManager__wasUpdating] = v12;
  }

void sub_10013EE28()
{
  uint64_t v1 = v0;
  uint64_t updated = type metadata accessor for FeedUpdateType(0LL);
  uint64_t v3 = *(void *)(updated - 8);
  __chkstk_darwin(updated);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_100134284(0LL, (unint64_t *)&qword_1002B4868, &OBJC_CLASS___OS_dispatch_queue_ptr);
  void *v9 = static OS_dispatch_queue.main.getter();
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  char v10 = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) != 0)
  {
    id v11 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    [v11 postNotificationName:@"MTFeedUpdateDidEndUpdatingAllFeeds" object:v1];

    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for FeedUpdateType.batch(_:), updated);
    FeedUpdateType.endInterval(for:success:)(v1 + OBJC_IVAR___MTFeedManager_signpostID, 1LL);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, updated);
    sub_100134284(0LL, (unint64_t *)&qword_1002B50A0, &OBJC_CLASS___MTPodcast_ptr);
    id v12 = [(id)objc_opt_self(MTDB) sharedInstance];
    id v13 = [v12 importContext];

    static MTPodcast.recalculateAvailabilityDates(in:completion:)(v13, 0LL, 0LL);
  }

  else
  {
    __break(1u);
  }

void *sub_10013F02C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  if (__OFADD__(*result, v2)) {
    __break(1u);
  }
  else {
    *a2 = *result + v2;
  }
  return result;
}

BOOL sub_10013F044(void *a1)
{
  return *a1 == 0LL;
}

void sub_10013F054(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a2 += 16LL;
  swift_beginAccess(a2, v12, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    uint64_t v8 = (void *)Strong;
    sub_100134284(0LL, (unint64_t *)&qword_1002B4868, &OBJC_CLASS___OS_dispatch_queue_ptr);
    void *v6 = static OS_dispatch_queue.main.getter();
    (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
    char v9 = _dispatchPreconditionTest(_:)(v6);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
    if ((v9 & 1) != 0)
    {
      id v10 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
      [v10 postNotificationName:@"MTFeedUpdateDidMakeProgress" object:v8];
    }

    else
    {
      __break(1u);
    }
  }

id FeedManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FeedManager(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void FeedManager.updateFeed(forFeedUrl:cloudSyncFeedUrl:podcastStoreId:triggerBy:userInitiated:forceBootstrap:useBackgroundFetch:source:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSString a5, char a6, char a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v31[0] = a3;
  uint64_t v16 = sub_100126450(&qword_1002B4DB8);
  __chkstk_darwin(v16);
  uint64_t v18 = (NSURL *)((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = (char *)((char *)v31 - (char *)v18);
  URL._bridgeToObjectiveC()(v18);
  uint64_t v21 = v20;
  sub_100141698(a2, (uint64_t)v19);
  uint64_t v22 = type metadata accessor for URL(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v25 = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v19, 1LL, v22) != 1)
  {
    URL._bridgeToObjectiveC()(v24);
    uint64_t v25 = v26;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v22);
  }

  if (a5) {
    a5 = String._bridgeToObjectiveC()();
  }
  if (a10)
  {
    aBlock[4] = a10;
    uint64_t v33 = a11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_10013F478;
    void aBlock[3] = &unk_100246AC0;
    uint64_t v27 = _Block_copy(aBlock);
    uint64_t v28 = v33;
    swift_retain(a11);
    swift_release(v28);
  }

  else
  {
    uint64_t v27 = 0LL;
  }

  LOBYTE(v30) = 0;
  LOBYTE(v29) = a8 & 1;
  [(id)v31[1] updateFeedForFeedUrl:v21 cloudSyncFeedUrl:v25 podcastStoreId:v31[0] triggerBy:a5 userInitiated:a6 & 1 forceBootstrap:a7 & 1 useBackgroundFetch:v29 sourc e:a9 isSubscribing:v30 feedDownloadedHook:0 preProcessFeedHook:0 postProcessFeedHook:0 completion:v27];
  _Block_release(v27);
}

void sub_10013F478(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

void sub_10013F6BC(char a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, void))(a3 + 16))(a3, a1 & 1);
}

uint64_t FeedManager.updateFeed(forFeedUrl:cloudSyncFeedUrl:podcastStoreId:triggerBy:userInitiated:forceBootstrap:useBackgroundFetch:source:isSubscribing:feedDownloadedHook:preProcessFeedHook:postProcessFeedHook:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  unsigned int v71 = a7;
  unsigned int v72 = a8;
  unsigned int v70 = a6;
  uint64_t v64 = a5;
  uint64_t v68 = a3;
  uint64_t v69 = a4;
  uint64_t v63 = a2;
  uint64_t v62 = a1;
  uint64_t v67 = a9;
  int v66 = a10;
  uint64_t v65 = a17;
  uint64_t v61 = a18;
  uint64_t v58 = a15;
  uint64_t v76 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v79 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v75 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v77 = *(void *)(v19 - 8);
  uint64_t v78 = v19;
  __chkstk_darwin(v19);
  uint64_t v74 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100126450(&qword_1002B4DB8);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = v23;
  uint64_t v24 = type metadata accessor for URL(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v53 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = v27;
  uint64_t updated = type metadata accessor for FeedUpdateRequest(0LL);
  uint64_t v59 = *(void *)(updated - 8);
  uint64_t v28 = *(void *)(v59 + 64);
  uint64_t v29 = __chkstk_darwin(updated);
  uint64_t v57 = (char *)&v53 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v29);
  uint64_t v56 = (char *)&v53 - v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v27, v62, v24);
  sub_100141698(v63, (uint64_t)v23);
  uint64_t v31 = v64;
  swift_bridgeObjectRetain(v64);
  sub_10013397C(a11, a12);
  sub_10013397C(a13, a14);
  uint64_t v32 = v58;
  sub_10013397C(v58, a16);
  uint64_t v33 = v65;
  uint64_t v34 = v61;
  sub_10013397C(v65, v61);
  uint64_t v35 = v56;
  FeedUpdateRequest.init(feedUrl:cloudSyncFeedUrl:podcastStoreId:triggerBy:userInitiated:forceBootstrap:useBackgroundFetch:source:isSubscribing:feedDownloadedHook:preProcessFeedHook:postProcessFeedHook:completion:)( v55,  v54,  v68,  v69,  v31,  v70,  v71,  v72,  v67,  (_BYTE)v66,  a11,  a12,  a13,  a14,  v32,  a16,  v33,  v34);
  uint64_t v36 = v73;
  uint64_t v37 = v59;
  uint64_t v38 = v57;
  uint64_t v39 = updated;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v57, v35, updated);
  uint64_t v40 = *(unsigned __int8 *)(v37 + 80);
  uint64_t v41 = (v40 + 24) & ~v40;
  uint64_t v42 = swift_allocObject(&unk_100246AF8, v41 + v28, v40 | 7);
  *(void *)(v42 + swift_weakDestroy(v0 + 16) = v36;
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v42 + v41, v38, v39);
  aBlock[4] = sub_100141704;
  uint64_t v82 = v42;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10013D2D8;
  void aBlock[3] = &unk_100246B10;
  uint64_t v43 = _Block_copy(aBlock);
  id v44 = v36;
  uint64_t v45 = v74;
  static DispatchQoS.unspecified.getter(v44);
  uint64_t v80 = _swiftEmptyArrayStorage;
  uint64_t v46 = sub_100127210( (unint64_t *)&qword_1002B4E90,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v47 = sub_100126450((uint64_t *)&unk_1002B5490);
  uint64_t v48 = sub_1001342BC( (unint64_t *)&qword_1002B4E98,  (uint64_t *)&unk_1002B5490,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v49 = v75;
  uint64_t v50 = v47;
  uint64_t v51 = v76;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v80, v50, v48, v76, v46);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v45, v49, v43);
  _Block_release(v43);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v49, v51);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v45, v78);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v35, v39);
  return swift_release(v82);
}

uint64_t sub_10013FBA0(uint64_t a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for FeedUpdateRequest(0LL);
  uint64_t v5 = *(void *)(updated - 8);
  __chkstk_darwin(updated);
  id v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v8 = a1 + OBJC_IVAR___MTFeedManager__system;
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR___MTFeedManager__system);
  if (v9)
  {
    uint64_t v10 = *(void *)(v8 + 8);
    uint64_t v11 = *(void *)(v8 + 16);
    id v12 = (void *)objc_opt_self(&OBJC_CLASS___MTStoreIdentifier);
    sub_100142E4C(v9, v10, v11);
    swift_unknownObjectRetain(v9);
    uint64_t v13 = swift_retain(v11);
    if ([v12 isEmpty:FeedUpdateRequest.podcastStoreId.getter(v13)])
    {
      uint64_t ObjectType = swift_getObjectType(v9);
      dispatch thunk of URLBasedFeedUpdater.updateFeed(request:)(a2, ObjectType, v10);
    }

    else
    {
      dispatch thunk of StoreFeedUpdater.updateFeed(request:)(a2);
    }

    swift_unknownObjectRelease(v9);
    swift_release(v11);
    return sub_100142038(v9, v10, v11);
  }

  else
  {
    FeedUpdateRequest.beginQueueing()();
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a2, updated);
    char v15 = (unint64_t *)(a1 + OBJC_IVAR___MTFeedManager__pendingRequests);
    swift_beginAccess(a1 + OBJC_IVAR___MTFeedManager__pendingRequests, v22, 33LL, 0LL);
    unint64_t v16 = *v15;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v15);
    unint64_t *v15 = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v16 = sub_100132784(0, *(void *)(v16 + 16) + 1LL, 1, v16);
      unint64_t *v15 = v16;
    }

    unint64_t v19 = *(void *)(v16 + 16);
    unint64_t v18 = *(void *)(v16 + 24);
    if (v19 >= v18 >> 1)
    {
      unint64_t v16 = sub_100132784(v18 > 1, v19 + 1, 1, v16);
      unint64_t *v15 = v16;
    }

    *(void *)(v16 + swift_weakDestroy(v0 + 16) = v19 + 1;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))( v16 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
    + *(void *)(v5 + 72) * v19,
      v7,
      updated);
    return swift_endAccess(v22);
  }

void sub_1001400B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v4 = _convertErrorToNSError(_:)(a1);
  }
  else {
    uint64_t v4 = 0LL;
  }
  id v5 = (id)v4;
  (*(void (**)(uint64_t))(a3 + 16))(a3);
}

void sub_100140110()
{
  id v0 = [(id)objc_opt_self(MTReachability) sharedInstance];
  if (v0)
  {
    id v1 = v0;
    [v0 showInternetUnreachableDialog];
  }

  else
  {
    __break(1u);
  }

uint64_t FeedManager.isUpdatingShow(url:storeID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = a1;
  uint64_t v3 = sub_100126450(&qword_1002B54A0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100126450(&qword_1002B4DB8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100126450(&qword_1002B54A8);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100126450(&qword_1002B5450);
  UninitializedCurrentValueSubject.value.getter(v37, v14);
  uint64_t v15 = v37[0];
  if (v37[0])
  {
    uint64_t v34 = v3;
    uint64_t v35 = v4;
    uint64_t v17 = v37[1];
    uint64_t v16 = v38;
    uint64_t v18 = swift_retain(v38);
    dispatch thunk of StoreFeedUpdater.updatingStoreIDs.getter(v18);
    swift_release(v16);
    ReadOnlyCurrentValueSubject.value.getter(v37, v10);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v19 = v37[0];
    BOOL v20 = sub_100140468(a2, v37[0]);
    swift_bridgeObjectRelease(v19);
    if (v20)
    {
      sub_100142038(v15, v17, v16);
      return 1LL;
    }

    sub_100141698(v36, (uint64_t)v9);
    uint64_t v22 = type metadata accessor for URL(0LL);
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v9, 1LL, v22) == 1)
    {
      sub_100142038(v15, v17, v16);
      sub_10012A4A0((uint64_t)v9, &qword_1002B4DB8);
    }

    else
    {
      uint64_t v24 = URL.absoluteString.getter();
      unint64_t v26 = v25;
      uint64_t v27 = v9;
      uint64_t v28 = v24;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v27, v22);
      uint64_t v29 = HIBYTE(v26) & 0xF;
      if ((v26 & 0x2000000000000000LL) == 0) {
        uint64_t v29 = v28 & 0xFFFFFFFFFFFFLL;
      }
      if (v29)
      {
        uint64_t ObjectType = swift_getObjectType(v15);
        swift_unknownObjectRetain(v15);
        dispatch thunk of URLBasedFeedUpdater.updatingFeedURLs.getter(ObjectType, v17);
        swift_unknownObjectRelease(v15);
        uint64_t v31 = v34;
        ReadOnlyCurrentValueSubject.value.getter(v37, v34);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v31);
        uint64_t v32 = v37[0];
        char v33 = sub_100140530(v28, v26, v37[0]);
        sub_100142038(v15, v17, v16);
        swift_bridgeObjectRelease(v26);
        swift_bridgeObjectRelease(v32);
        if ((v33 & 1) != 0) {
          return 1LL;
        }
      }

      else
      {
        sub_100142038(v15, v17, v16);
        swift_bridgeObjectRelease(v26);
      }
    }
  }

  return 0LL;
}

BOOL sub_100140468(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  uint64_t v4 = static Hasher._hash(seed:_:)(*(void *)(a2 + 40), a1);
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1LL;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
    return 0LL;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }

  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_100140530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(void *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      unint64_t v11 = (void *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      BOOL v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0LL) & 1) != 0) {
        return 1LL;
      }
      uint64_t v15 = ~v7;
      unint64_t v16 = (v8 + 1) & v15;
      if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
      {
        while (1)
        {
          uint64_t v17 = (void *)(v10 + 16 * v16);
          uint64_t v18 = v17[1];
          BOOL v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
            break;
          }
          uint64_t result = 0LL;
          unint64_t v16 = (v16 + 1) & v15;
          if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0) {
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  return 0LL;
}

uint64_t FeedManager.handleEventsForBackgroundURLSession(for:completionHandler:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_allocObject(&unk_100246B48, 56LL, 7LL);
  void v9[2] = v4;
  void v9[3] = a1;
  void v9[4] = a2;
  void v9[5] = a3;
  v9[6] = a4;
  id v10 = v4;
  swift_bridgeObjectRetain(a2);
  swift_retain(a4);
  sub_10013DD34((uint64_t)sub_100142068, (uint64_t)v9);
  return swift_release(v9);
}

void sub_1001408B4(void *a1)
{
  uint64_t v3 = v2;
  id v4 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  id v15 = [v4 initWithEntityName:v5];

  id v6 = [(id)objc_opt_self(NSPredicate) truePredicate];
  [v15 setPredicate:v6];

  uint64_t v7 = sub_100134284(0LL, (unint64_t *)&qword_1002B50A0, &OBJC_CLASS___MTPodcast_ptr);
  uint64_t v8 = NSManagedObjectContext.fetch<A>(_:)(v15, v7);
  uint64_t v13 = v8;
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0) {
      uint64_t v14 = v8;
    }
    else {
      uint64_t v14 = v8 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v8);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(v13);
    if (!v9) {
      goto LABEL_14;
    }
  }

  else
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v9)
    {
LABEL_14:
      swift_bridgeObjectRelease(v13);
      [a1 saveInCurrentBlock];

      return;
    }
  }

  if (v9 >= 1)
  {
    uint64_t v10 = 0LL;
    do
    {
      if ((v13 & 0xC000000000000001LL) != 0) {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v13);
      }
      else {
        id v11 = *(id *)(v13 + 8 * v10 + 32);
      }
      uint64_t v12 = v11;
      ++v10;
      objc_msgSend(v11, "setNextSyncToken:", 0, v15);
      [v12 setBootstrapGeneration:0];
      [v12 setUpdatedDate:0.0];
    }

    while (v9 != v10);
    goto LABEL_14;
  }

  __break(1u);
}

void sub_100140AC0(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  NSString v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v6 = static OS_os_log.feedUpdate.getter();
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Migrating to delta updater, deleting nextSyncTokens and bootstrapGenerations",  v9,  2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPodcastEntityName);
  uint64_t v11 = v10;
  id v12 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  id v14 = [v12 initWithEntityName:v13];

  id v15 = [(id)objc_opt_self(NSPredicate) truePredicate];
  [v14 setPredicate:v15];

  uint64_t v16 = sub_100134284(0LL, (unint64_t *)&qword_1002B50A0, &OBJC_CLASS___MTPodcast_ptr);
  uint64_t v17 = NSManagedObjectContext.fetch<A>(_:)(v14, v16);
  id v23 = a1;
  if (!((unint64_t)v17 >> 62))
  {
    uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v18) {
      goto LABEL_5;
    }
LABEL_15:
    swift_bridgeObjectRelease(v17);
    [v23 saveInCurrentBlock];

    return;
  }

  if (v17 < 0) {
    uint64_t v22 = v17;
  }
  else {
    uint64_t v22 = v17 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v17);
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v17);
  if (!v18) {
    goto LABEL_15;
  }
LABEL_5:
  if (v18 >= 1)
  {
    uint64_t v19 = 0LL;
    do
    {
      if ((v17 & 0xC000000000000001LL) != 0) {
        id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v17);
      }
      else {
        id v20 = *(id *)(v17 + 8 * v19 + 32);
      }
      uint64_t v21 = v20;
      ++v19;
      objc_msgSend(v20, "setUpdatedDate:", 0.0, v23);
      [v21 setFeedUniquenessHash:0];
      [v21 setNextSyncToken:0];
      [v21 setBootstrapGeneration:0];
    }

    while (v18 != v19);
    goto LABEL_15;
  }

  __break(1u);
}

uint64_t FeedManager.isUpdating.getter()
{
  uint64_t v0 = sub_100126450(&qword_1002B54A8);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100126450(&qword_1002B54A0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100126450(&qword_1002B5450);
  UninitializedCurrentValueSubject.value.getter(v25, v8);
  uint64_t v9 = v25[0];
  if (v25[0])
  {
    uint64_t v11 = v25[1];
    uint64_t v10 = v25[2];
    uint64_t ObjectType = swift_getObjectType(v25[0]);
    dispatch thunk of URLBasedFeedUpdater.updatingFeedURLs.getter(ObjectType, v11);
    ReadOnlyCurrentValueSubject.value.getter(v25, v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v13 = v25[0];
    uint64_t v24 = v25[0];
    uint64_t v14 = sub_100126450(&qword_1002B54B0);
    uint64_t v15 = sub_1001342BC(&qword_1002B54B8, &qword_1002B54B0, (uint64_t)&protocol conformance descriptor for Set<A>);
    char v16 = Collection.isNotEmpty.getter(v14, v15);
    uint64_t v17 = swift_bridgeObjectRelease(v13);
    if ((v16 & 1) != 0)
    {
      swift_unknownObjectRelease(v9);
      swift_release(v10);
      char v18 = 1;
    }

    else
    {
      dispatch thunk of StoreFeedUpdater.updatingStoreIDs.getter(v17);
      ReadOnlyCurrentValueSubject.value.getter(&v24, v0);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      uint64_t v19 = v24;
      v23[1] = v24;
      uint64_t v20 = sub_100126450(&qword_1002B54C0);
      uint64_t v21 = sub_1001342BC(&qword_1002B54C8, &qword_1002B54C0, (uint64_t)&protocol conformance descriptor for Set<A>);
      char v18 = Collection.isNotEmpty.getter(v20, v21);
      swift_bridgeObjectRelease(v19);
      swift_unknownObjectRelease(v9);
      swift_release(v10);
    }
  }

  else
  {
    char v18 = 0;
  }

  return v18 & 1;
}

uint64_t sub_10014100C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v61 = a2;
  uint64_t v5 = sub_100126450(&qword_1002B52D0);
  __chkstk_darwin(v5);
  uint64_t v77 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100126450(&qword_1002B5698);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v67 = v7;
  uint64_t v68 = v8;
  __chkstk_darwin(v7);
  uint64_t v63 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100126450(&qword_1002B56A0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v69 = v10;
  uint64_t v70 = v11;
  __chkstk_darwin(v10);
  uint64_t v64 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v73 = sub_100126450(&qword_1002B56A8);
  uint64_t v76 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  int v66 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v75 = sub_100126450(&qword_1002B56B0);
  uint64_t v78 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  unsigned int v71 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100126450(&qword_1002B54A8);
  uint64_t v59 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = sub_100126450(&qword_1002B56B8);
  uint64_t v74 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v57 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100126450(&qword_1002B54A0);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = sub_100126450(&qword_1002B56C0);
  uint64_t v72 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v56 = (char *)&v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v65 = a1;
  swift_unknownObjectRetain(a1);
  uint64_t v62 = a3;
  swift_retain(a3);
  dispatch thunk of URLBasedFeedUpdater.updatingFeedURLs.getter(ObjectType, v61);
  uint64_t KeyPath = swift_getKeyPath(&unk_1001C4588);
  uint64_t v26 = sub_1001342BC( &qword_1002B5610,  &qword_1002B54A0,  (uint64_t)&protocol conformance descriptor for ReadOnlyCurrentValueSubject<A, B>);
  Publisher.map<A>(_:)(KeyPath, v19, v26);
  swift_release(KeyPath);
  uint64_t v27 = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  dispatch thunk of StoreFeedUpdater.updatingStoreIDs.getter(v27);
  uint64_t v28 = swift_getKeyPath(&unk_1001C45C0);
  uint64_t v29 = sub_1001342BC( &qword_1002B5618,  &qword_1002B54A8,  (uint64_t)&protocol conformance descriptor for ReadOnlyCurrentValueSubject<A, B>);
  uint64_t v30 = v57;
  Publisher.map<A>(_:)(v28, v15, v29);
  swift_release(v28);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v17, v15);
  uint64_t v31 = sub_1001342BC( &qword_1002B56C8,  &qword_1002B56C0,  (uint64_t)&protocol conformance descriptor for Publishers.MapKeyPath<A, B>);
  uint64_t v32 = sub_1001342BC( &qword_1002B56D0,  &qword_1002B56B8,  (uint64_t)&protocol conformance descriptor for Publishers.MapKeyPath<A, B>);
  char v33 = v63;
  uint64_t v34 = v30;
  uint64_t v35 = v58;
  uint64_t v36 = v60;
  uint64_t v37 = v56;
  Publisher.combineLatest<A>(_:)(v30, v58, v60, v31, v32);
  uint64_t v38 = sub_1001342BC( &qword_1002B56D8,  &qword_1002B5698,  (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  uint64_t v39 = v64;
  uint64_t v40 = v67;
  Publisher.map<A>(_:)(sub_10014178C, 0LL, v67, &type metadata for Bool, v38);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v33, v40);
  uint64_t v41 = sub_1001342BC( &qword_1002B56E0,  &qword_1002B56A0,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  uint64_t v42 = v66;
  uint64_t v43 = v69;
  Publisher<>.removeDuplicates()(v69, v41, &protocol witness table for Bool);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v39, v43);
  uint64_t v44 = sub_100134284(0LL, (unint64_t *)&qword_1002B4868, &OBJC_CLASS___OS_dispatch_queue_ptr);
  v79[0] = (id)static OS_dispatch_queue.main.getter();
  uint64_t v45 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  uint64_t v46 = (uint64_t)v77;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56LL))(v77, 1LL, 1LL, v45);
  uint64_t v47 = sub_1001342BC( &qword_1002B56E8,  &qword_1002B56A8,  (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  unint64_t v48 = sub_10013B3A8();
  uint64_t v49 = v71;
  uint64_t v50 = v73;
  Publisher.receive<A>(on:options:)(v79, v46, v73, v44, v47, v48);
  sub_10012A4A0(v46, &qword_1002B52D0);

  (*(void (**)(char *, uint64_t))(v76 + 8))(v42, v50);
  uint64_t v51 = sub_1001342BC( (unint64_t *)&unk_1002B56F0,  &qword_1002B56B0,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v52 = v75;
  uint64_t v53 = Publisher.eraseToAnyPublisher()(v75, v51);
  swift_unknownObjectRelease(v65);
  swift_release(v62);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v49, v52);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v34, v36);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v37, v35);
  return v53;
}

uint64_t sub_10014162C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10014100C(*a1, a1[1], a1[2]);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for FeedManager(uint64_t a1)
{
  uint64_t result = qword_1002B5530;
  if (!qword_1002B5530) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FeedManager);
  }
  return result;
}

uint64_t sub_100141698(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100126450(&qword_1002B4DB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001416E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001416F0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1001416F8()
{
  return sub_100142CE4((uint64_t (*)(void))&type metadata accessor for FeedUpdateRequest);
}

uint64_t sub_100141704()
{
  return sub_100142D70((uint64_t (*)(void))&type metadata accessor for FeedUpdateRequest, sub_10013FBA0);
}

uint64_t sub_100141718@<X0>(uint64_t *a1@<X3>, unint64_t *a2@<X4>, _BYTE *a3@<X8>)
{
  uint64_t v6 = sub_100126450(a1);
  uint64_t v7 = sub_1001342BC(a2, a1, (uint64_t)&protocol conformance descriptor for Set<A>);
  uint64_t result = Collection.isNotEmpty.getter(v6, v7);
  *a3 = result & 1;
  return result;
}

_BYTE *sub_10014178C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = (*result | result[1]) & 1;
  return result;
}

id sub_1001417A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t updated = type metadata accessor for FeedUpdateRequest(0LL);
  uint64_t v71 = *(void *)(updated - 8);
  uint64_t v72 = updated;
  __chkstk_darwin(updated);
  uint64_t v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v68 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v67 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for FeedManagerBagConfiguration(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  void v78[3] = type metadata accessor for FeedIngesterProvider();
  v78[4] = sub_100127210( (unint64_t *)&unk_1002B5670,  (uint64_t (*)(uint64_t))type metadata accessor for FeedIngesterProvider,  (uint64_t)&protocol conformance descriptor for FeedIngesterProvider);
  v78[0] = a2;
  uint64_t v15 = (void *)objc_opt_self(&OBJC_CLASS___MTDB);
  swift_retain(a2);
  id v16 = [v15 sharedInstance];
  id v17 = [v16 importContext];

  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  sub_1001376A4((uint64_t)v78, (uint64_t)v77);
  uint64_t v18 = type metadata accessor for StoreFeedUpdater(0LL);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  id v19 = v17;
  uint64_t v20 = StoreFeedUpdater.init(bagConfiguration:ctx:ingesterProvider:)(v14, v19, v77);
  id result = [objc_allocWithZone((Class)MTExternalFeedDownloader) initWithDelegate:0];
  if (result)
  {
    uint64_t v22 = result;
    sub_1001376A4((uint64_t)v78, (uint64_t)v77);
    Class v70 = (Class)type metadata accessor for RSSFeedUpdater(0LL);
    id v23 = objc_allocWithZone(v70);
    id v24 = v19;
    id v25 = v22;
    id v66 = v24;
    id v65 = v25;
    uint64_t v26 = (void *)RSSFeedUpdater.init(ctx:ingesterProvider:externalFeedDownloader:)(v24, v77);
    uint64_t v27 = (void *)(a3 + OBJC_IVAR___MTFeedManager__system);
    uint64_t v28 = *(void *)(a3 + OBJC_IVAR___MTFeedManager__system);
    uint64_t v29 = *(void *)(a3 + OBJC_IVAR___MTFeedManager__system + 8);
    uint64_t v30 = *(void *)(a3 + OBJC_IVAR___MTFeedManager__system + 16);
    *uint64_t v27 = v26;
    v27[1] = &protocol witness table for RSSFeedUpdater;
    v27[2] = v20;
    id v31 = v26;
    uint64_t v69 = a3;
    id v32 = v31;
    swift_retain_n(v20, 2LL);
    id v33 = v32;
    uint64_t v34 = v69;
    id v35 = v33;
    sub_100142038(v28, v29, v30);
    sub_10013E09C((uint64_t)v35, (uint64_t)&protocol witness table for RSSFeedUpdater, v20);
    uint64_t v36 = (uint64_t *)(v34 + OBJC_IVAR___MTFeedManager__pendingRequests);
    swift_beginAccess(v34 + OBJC_IVAR___MTFeedManager__pendingRequests, v77, 1LL, 0LL);
    uint64_t v37 = *v36;
    *uint64_t v36 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v38 = *(void *)(v37 + 16);
    if (v38)
    {
      uint64_t v64 = v9;
      uint64_t v39 = (void *)objc_opt_self(&OBJC_CLASS___MTStoreIdentifier);
      unint64_t v40 = (*(unsigned __int8 *)(v71 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
      uint64_t v63 = v37;
      uint64_t v41 = v37 + v40;
      uint64_t v42 = *(void *)(v71 + 72);
      uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 16);
      v43(v8, v41, v72);
      while (1)
      {
        id v45 = v35;
        uint64_t v46 = swift_retain(v20);
        if ([v39 isEmpty:FeedUpdateRequest.podcastStoreId.getter(v46)]) {
          dispatch thunk of URLBasedFeedUpdater.updateFeed(request:)( v8,  v70,  &protocol witness table for RSSFeedUpdater);
        }
        else {
          dispatch thunk of StoreFeedUpdater.updateFeed(request:)(v8);
        }

        swift_release(v20);
        uint64_t v44 = v72;
        (*(void (**)(char *, uint64_t))(v71 + 8))(v8, v72);
        v41 += v42;
        if (!--v38) {
          break;
        }
        v43(v8, v41, v44);
      }

      swift_bridgeObjectRelease(v63);
      uint64_t v9 = v64;
      uint64_t v34 = v69;
    }

    else
    {
      swift_bridgeObjectRelease(v37);
    }

    uint64_t v47 = (uint64_t *)(v34 + OBJC_IVAR___MTFeedManager__pendingBlocks);
    swift_beginAccess(v34 + OBJC_IVAR___MTFeedManager__pendingBlocks, v76, 1LL, 0LL);
    uint64_t v48 = *v47;
    uint64_t *v47 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v49 = *(void *)(v48 + 16);
    if (v49)
    {
      uint64_t v50 = (uint64_t *)(v48 + 40);
      do
      {
        uint64_t v52 = (void (*)(id *))*(v50 - 1);
        uint64_t v51 = *v50;
        id v73 = v35;
        uint64_t v74 = &protocol witness table for RSSFeedUpdater;
        uint64_t v75 = v20;
        swift_retain(v51);
        v52(&v73);
        swift_release(v51);
        v50 += 2;
        --v49;
      }

      while (v49);
    }

    swift_bridgeObjectRelease(v48);
    id v73 = v35;
    uint64_t v74 = &protocol witness table for RSSFeedUpdater;
    uint64_t v75 = v20;
    uint64_t v53 = sub_100126450(&qword_1002B5450);
    UninitializedCurrentValueSubject.send(_:)(&v73, v53);
    sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v54 = v67;
    uint64_t v55 = static OS_os_log.feedUpdate.getter();
    uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
    os_log_type_t v57 = static os_log_type_t.default.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "System setup complete", v58, 2u);
      swift_slowDealloc(v58, -1LL, -1LL);

      swift_release_n(v20, 2LL);
      id v59 = v35;
      uint64_t v60 = v56;
      uint64_t v61 = v68;
    }

    else
    {

      swift_release_n(v20, 2LL);
      uint64_t v61 = v68;
      uint64_t v60 = (os_log_s *)v66;
      id v59 = v65;
    }

    (*(void (**)(char *, uint64_t))(v61 + 8))(v54, v9);
    return (id)sub_100136648(v78);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *sub_100141D54(void *a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v19 = 0LL;
  uint64_t v12 = sub_100126450(&qword_1002B5680);
  uint64_t v13 = Synchronized.init(wrappedValue:)(&v19, v12);
  a6[2] = a1;
  a6[3] = a2;
  a6[6] = a4;
  a6[7] = v13;
  a6[4] = a3;
  a6[5] = a5;
  id v14 = a1;
  id v15 = a2;
  id v16 = a3;
  swift_retain(a4);
  id v17 = a5;
  a6[8] = sub_1000477D0();
  a6[9] = sub_1000477C4();
  return a6;
}

uint64_t _s8Podcasts11FeedManagerC32abortUpdatesIfNetworkUnreachable13userInitiatedS2b_tF_0(char a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (uint64_t)[(id)objc_opt_self(MTReachability) sharedInstance];
  if (result)
  {
    uint64_t v11 = (void *)result;
    unsigned int v12 = [(id)result isReachable];

    uint64_t result = v12 ^ 1;
    if ((v12 & 1) == 0 && (a1 & 1) != 0)
    {
      uint64_t v13 = sub_100134284(0LL, (unint64_t *)&qword_1002B4868, &OBJC_CLASS___OS_dispatch_queue_ptr);
      id v14 = (void *)static OS_dispatch_queue.main.getter(v13);
      aBlock[4] = sub_100140110;
      void aBlock[5] = 0LL;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_10013D2D8;
      void aBlock[3] = &unk_100246F48;
      id v15 = _Block_copy(aBlock);
      static DispatchQoS.unspecified.getter(v15);
      aBlock[0] = _swiftEmptyArrayStorage;
      uint64_t v16 = sub_100127210( (unint64_t *)&qword_1002B4E90,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v22 = v6;
      uint64_t v17 = v3;
      uint64_t v18 = v16;
      uint64_t v19 = sub_100126450((uint64_t *)&unk_1002B5490);
      uint64_t v20 = sub_1001342BC( (unint64_t *)&qword_1002B4E98,  (uint64_t *)&unk_1002B5490,  (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v2, v18);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v5, v15);
      _Block_release(v15);

      (*(void (**)(char *, uint64_t))(v17 + 8))(v5, v2);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v22);
      return 1LL;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100142038(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_unknownObjectRelease(result);
    return swift_release(a3);
  }

  return result;
}

uint64_t sub_10014206C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(void), uint64_t a7)
{
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v47 = *(void *)(v13 - 8);
  uint64_t v48 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v43 - v17;
  aBlock = (void **)swift_getObjectType(a1);
  uint64_t v50 = a2;
  swift_unknownObjectRetain(a1);
  uint64_t v19 = sub_100126450(&qword_1002B5688);
  uint64_t v20 = String.init<A>(describing:)(&aBlock, v19);
  unint64_t v22 = v21;
  aBlock = (void **)a4;
  uint64_t v50 = a5;
  uint64_t v55 = v20;
  unint64_t v56 = v21;
  unint64_t v23 = sub_10013434C();
  if ((StringProtocol.contains<A>(_:)(&v55, &type metadata for String, &type metadata for String, v23, v23) & 1) != 0)
  {
    id v24 = (void (**)(void))[a1 sessionCompletionHandler];
    id v25 = &selRef_setMediaType_;
    if (v24)
    {
      uint64_t v26 = v24;
      uint64_t v46 = a6;
      sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
      static OS_os_log.feedUpdate.getter();
      uint64_t v27 = swift_bridgeObjectRetain(v22);
      uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
      os_log_type_t v29 = static os_log_type_t.default.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        id v31 = (void **)swift_slowAlloc(32LL, -1LL);
        uint64_t v45 = a7;
        id v32 = v31;
        aBlock = v31;
        *(_DWORD *)uint64_t v30 = 136315138;
        uint64_t v44 = (void **)(v30 + 4);
        swift_bridgeObjectRetain(v22);
        uint64_t v55 = sub_100178E7C(v20, v22, (uint64_t *)&aBlock);
        id v25 = &selRef_setMediaType_;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v44, v30 + 12);
        swift_bridgeObjectRelease_n(v22, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "handleEventsForBackgroundURLSession being called BEFORE URLSessionDidFinishEventsForBackgroundURLSession for % s.  Invoking existing completionHandler.",  v30,  0xCu);
        swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
        id v33 = v32;
        a7 = v45;
        swift_slowDealloc(v33, -1LL, -1LL);
        swift_slowDealloc(v30, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v22, 2LL);
      }

      (*(void (**)(char *, uint64_t))(v47 + 8))(v18, v48);
      a6 = v46;
      v26[2](v26);
      _Block_release(v26);
      objc_msgSend(a1, v25[279], 0);
      if (a6) {
        goto LABEL_14;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v22);
      if (a6)
      {
LABEL_14:
        uint64_t v53 = a6;
        uint64_t v54 = a7;
        aBlock = _NSConcreteStackBlock;
        uint64_t v50 = 1107296256LL;
        uint64_t v51 = sub_10013D2D8;
        uint64_t v52 = &unk_100246F20;
        unint64_t v40 = _Block_copy(&aBlock);
        uint64_t v41 = v54;
        swift_retain(a7);
        swift_release(v41);
        goto LABEL_15;
      }
    }

    unint64_t v40 = 0LL;
LABEL_15:
    objc_msgSend(a1, v25[279], v40);
    _Block_release(v40);
    return swift_unknownObjectRelease(a1);
  }

  uint64_t v46 = a6;
  sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
  static OS_os_log.feedUpdate.getter();
  swift_bridgeObjectRetain_n(a5, 2LL);
  uint64_t v34 = swift_bridgeObjectRetain(v22);
  id v35 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.default.getter(v35);
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = swift_slowAlloc(22LL, -1LL);
    uint64_t v44 = (void **)swift_slowAlloc(64LL, -1LL);
    aBlock = v44;
    *(_DWORD *)uint64_t v37 = 136315394;
    uint64_t v45 = a7;
    swift_bridgeObjectRetain(a5);
    uint64_t v55 = sub_100178E7C(a4, a5, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease_n(a5, 3LL);
    *(_WORD *)(v37 + 12) = 2080;
    swift_bridgeObjectRetain(v22);
    uint64_t v55 = sub_100178E7C(v20, v22, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v37 + 14, v37 + 22);
    swift_bridgeObjectRelease_n(v22, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "Mismatch between updater used for backgroundURLSession: %s and the current FeedManager system: %s. Proceeding to j ust call the background session completionHandler.",  (uint8_t *)v37,  0x16u);
    uint64_t v38 = v44;
    swift_arrayDestroy(v44, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v37, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v22, 2LL);
    swift_bridgeObjectRelease_n(a5, 2LL);
  }

  uint64_t v39 = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v16, v48);
  if (v46) {
    v46(v39);
  }
  return swift_unknownObjectRelease(a1);
}

void _s8Podcasts11FeedManagerC10resetCacheyyFZ_0()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v4 = [(id)objc_opt_self(MTDB) sharedInstance];
  id v5 = [v4 importContext];

  sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v6 = static OS_os_log.feedUpdate.getter();
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Feature Flag StoreBothFreeAndPaidUrls was changed since last bootup. Clearing feed update cache.",  v9,  2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v10 = swift_allocObject(&unk_100246E68, 24LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v5;
  aBlock[4] = sub_100142DBC;
  uint64_t v15 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10013D2D8;
  void aBlock[3] = &unk_100246E80;
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = v15;
  id v13 = v5;
  swift_release(v12);
  [v13 performBlock:v11];
  _Block_release(v11);
}

void _s8Podcasts11FeedManagerC014migrateToDeltaB6SystemyyFZ_0()
{
  id v0 = [(id)objc_opt_self(MTDB) sharedInstance];
  id v1 = [v0 importContext];

  uint64_t v2 = swift_allocObject(&unk_100246E18, 24LL, 7LL);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v1;
  void v6[4] = sub_100142DB4;
  uint64_t v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256LL;
  _DWORD v6[2] = sub_10013D2D8;
  v6[3] = &unk_100246E30;
  uint64_t v3 = _Block_copy(v6);
  uint64_t v4 = v7;
  id v5 = v1;
  swift_release(v4);
  [v5 performBlock:v3];
  _Block_release(v3);
}

uint64_t sub_100142860()
{
  return type metadata accessor for FeedManager(0LL);
}

void sub_100142868(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    _DWORD v6[2] = &unk_1001C44B8;
    v6[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v6[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v6[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[6] = &unk_1001C44D0;
    v6[7] = &unk_1001C44E8;
    __int16 v6[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t v4 = type metadata accessor for OSSignpostID(319LL);
    if (v5 <= 0x3F)
    {
      v6[9] = *(void *)(v4 - 8) + 64LL;
      swift_updateClassMetadata2(a1, 256LL, 10LL, v6, a1 + 80);
    }
  }

void sub_100142938()
{
  if (!qword_1002B5540)
  {
    unint64_t v0 = type metadata accessor for UninitializedCurrentValueSubject( 0LL,  &type metadata for FeedManager.System,  &type metadata for Never,  &protocol witness table for Never);
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1002B5540);
    }
  }

uint64_t destroy for FeedManager.System(void *a1)
{
  return swift_release(a1[2]);
}

uint64_t _s8Podcasts11FeedManagerC6SystemOwCP_0(uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  *(_OWORD *)a1 = *a2;
  uint64_t v4 = *((void *)a2 + 2);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  swift_unknownObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for FeedManager.System(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v6);
  a1[1] = v5;
  uint64_t v7 = a2[2];
  uint64_t v8 = a1[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v8);
  return a1;
}

__n128 initializeWithTake for FeedManager.System(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for FeedManager.System(void *a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = a1[2];
  a1[2] = *(void *)(a2 + 16);
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeedManager.System(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FeedManager.System(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FeedManager.System()
{
  return &type metadata for FeedManager.System;
}

uint64_t sub_100142B5C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100142B90(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10014206C( a1,  a2,  a3,  *(void *)(v3 + 24),  *(void *)(v3 + 32),  *(void (**)(void))(v3 + 40),  *(void *)(v3 + 48));
}

uint64_t sub_100142B9C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100142BC0(char a1, uint64_t a2)
{
}

void sub_100142BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(v3 + 16);
  id v6 = String._bridgeToObjectiveC()();
  (*(void (**)(uint64_t, id, uint64_t))(v5 + 16))(v5, v6, a3);
}

id sub_100142C10()
{
  return (id)(*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

void sub_100142C40(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100142C48()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100142C6C(unsigned __int8 *a1)
{
}

void *sub_100142C74()
{
  return &protocol witness table for String;
}

uint64_t sub_100142C80@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)result + 16LL);
  return result;
}

void *sub_100142C90()
{
  return &protocol witness table for Int64;
}

void sub_100142C9C(uint64_t a1)
{
}

uint64_t sub_100142CA4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100142CC8()
{
  return sub_10013DA0C(*(void **)(v0 + 16));
}

uint64_t sub_100142CD0(uint64_t a1)
{
  return sub_10013DA5C(a1, *(char **)(v1 + 16));
}

uint64_t sub_100142CD8()
{
  return sub_100142CE4((uint64_t (*)(void))&type metadata accessor for FeedManagerBagConfiguration);
}

uint64_t sub_100142CE4(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_100142D5C()
{
  return sub_100142D70( (uint64_t (*)(void))&type metadata accessor for FeedManagerBagConfiguration,  sub_10013DCC4);
}

uint64_t sub_100142D70(uint64_t (*a1)(void), uint64_t (*a2)(void, uint64_t))
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(a1(0LL) - 8) + 80LL);
  return a2(*(void *)(v2 + 16), v2 + ((v3 + 24) & ~v3));
}

void sub_100142DB4()
{
}

void sub_100142DBC()
{
}

uint64_t sub_100142DC4()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100142DF0()
{
  return sub_10013DF34( *(void *)(v0 + 16),  *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 24),  *(void *)(v0 + 32));
}

uint64_t sub_100142DFC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100142E20(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(v1 + 16))(*a1, a1[1], a1[2]);
}

uint64_t sub_100142E4C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_unknownObjectRetain(result);
    return swift_retain(a3);
  }

  return result;
}

uint64_t sub_100142E78()
{
  return sub_1001342BC(&qword_1002B54B8, &qword_1002B54B0, (uint64_t)&protocol conformance descriptor for Set<A>);
}

uint64_t sub_100142EA4@<X0>(_BYTE *a1@<X8>)
{
  return sub_100141718(&qword_1002B54B0, &qword_1002B54B8, a1);
}

uint64_t sub_100142EC8()
{
  return sub_1001342BC(&qword_1002B54C8, &qword_1002B54C0, (uint64_t)&protocol conformance descriptor for Set<A>);
}

uint64_t sub_100142EF4@<X0>(_BYTE *a1@<X8>)
{
  return sub_100141718(&qword_1002B54C0, &qword_1002B54C8, a1);
}

uint64_t sub_100142F80(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  id v13 = (char *)&v43 - v12;
  uint64_t v14 = OBJC_IVAR___MTBackgroundTaskManager_task;
  if (*(void *)&v3[OBJC_IVAR___MTBackgroundTaskManager_task] == UIBackgroundTaskInvalid)
  {
    uint64_t v45 = v7;
    id v15 = [(id)objc_opt_self(UIApplication) sharedApplication];
    NSString v16 = String._bridgeToObjectiveC()();
    uint64_t v17 = swift_allocObject(&unk_100246F90, 24LL, 7LL);
    *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
    aBlock[4] = (uint64_t)sub_100143800;
    uint64_t v47 = v17;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_10013D2D8;
    void aBlock[3] = (uint64_t)&unk_100246FA8;
    uint64_t v18 = _Block_copy(aBlock);
    uint64_t v19 = v47;
    uint64_t v20 = v3;
    uint64_t v44 = a1;
    unint64_t v21 = v20;
    swift_release(v19);
    id v22 = [v15 beginBackgroundTaskWithName:v16 expirationHandler:v18];
    _Block_release(v18);

    *(void *)&v3[v14] = v22;
    static Logger.backgroundTaskManager.getter(v23);
    id v24 = v21;
    swift_bridgeObjectRetain_n(a2, 2LL);
    id v25 = v24;
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc(22LL, -1LL);
      uint64_t v29 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v29;
      *(_DWORD *)uint64_t v28 = 134218242;
      uint64_t v43 = v6;
      uint64_t v30 = Int.hashValue.getter(*(void *)&v3[v14]);

      uint64_t v48 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v28 + 4, v28 + 12);

      *(_WORD *)(v28 + 12) = 2080;
      swift_bridgeObjectRetain(a2);
      uint64_t v48 = sub_100178E7C(v44, a2, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v28 + 14, v28 + 22);
      swift_bridgeObjectRelease_n(a2, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Started background task with identifier hash: %ld with name: %s.",  (uint8_t *)v28,  0x16u);
      swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);

      return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v13, v43);
    }

    swift_bridgeObjectRelease_n(a2, 2LL);
    uint64_t v41 = *(uint64_t (**)(char *, uint64_t))(v45 + 8);
    uint64_t v42 = v13;
  }

  else
  {
    static Logger.backgroundTaskManager.getter(v11);
    id v32 = v3;
    swift_bridgeObjectRetain_n(a2, 2LL);
    id v33 = v32;
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc(22LL, -1LL);
      uint64_t v45 = v7;
      uint64_t v37 = v36;
      uint64_t v38 = swift_slowAlloc(32LL, -1LL);
      uint64_t v44 = a1;
      uint64_t v39 = v38;
      aBlock[0] = v38;
      *(_DWORD *)uint64_t v37 = 134218242;
      uint64_t v43 = v6;
      uint64_t v40 = Int.hashValue.getter(*(void *)&v3[v14]);

      uint64_t v48 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v37 + 4, v37 + 12);

      *(_WORD *)(v37 + 12) = 2080;
      swift_bridgeObjectRetain(a2);
      uint64_t v48 = sub_100178E7C(v44, a2, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v37 + 14, v37 + 22);
      swift_bridgeObjectRelease_n(a2, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "Tried to start background task but there is already an ongoing background task in progress with identifier hash: %ld. Not starting background task with name: %s.",  (uint8_t *)v37,  0x16u);
      swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);

      return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v10, v43);
    }

    swift_bridgeObjectRelease_n(a2, 2LL);
    uint64_t v41 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
    uint64_t v42 = v10;
  }

  return v41(v42, v6);
}

void sub_1001434A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v22 - v8;
  uint64_t v10 = OBJC_IVAR___MTBackgroundTaskManager_task;
  if (*(void *)&v1[OBJC_IVAR___MTBackgroundTaskManager_task] == UIBackgroundTaskInvalid)
  {
    uint64_t v11 = static Logger.backgroundTaskManager.getter(v7);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "Tried to end background task but there is no ongoing background task.",  v14,  2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }

  else
  {
    static Logger.backgroundTaskManager.getter(v7);
    id v15 = v1;
    NSString v16 = (os_log_s *)((uint64_t (*)(void))Logger.logObject.getter)();
    os_log_type_t v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v24 = v15;
      uint64_t v19 = v18;
      *(_DWORD *)uint64_t v18 = 134217984;
      uint64_t v20 = v18 + 12;
      uint64_t v23 = v18 + 4;
      uint64_t v25 = Int.hashValue.getter(*(void *)&v1[v10]);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v23, v20);

      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Ending background task with identifier hash: %ld.",  v19,  0xCu);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {

      NSString v16 = (os_log_s *)v15;
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
    id v21 = [(id)objc_opt_self(UIApplication) sharedApplication];
    [v21 endBackgroundTask:*(void *)&v1[v10]];

    *(void *)&v1[v10] = UIBackgroundTaskInvalid;
  }

id sub_10014378C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BackgroundTaskManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BackgroundTaskManager()
{
  return objc_opt_self(&OBJC_CLASS___MTBackgroundTaskManager);
}

uint64_t sub_1001437DC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100143800()
{
}

uint64_t sub_100143820(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100143830(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id sub_100143838()
{
  v15.receiver = v0;
  v15.super_class = (Class)type metadata accessor for TVNoBookmarksViewController();
  id v1 = objc_msgSendSuper2(&v15, "initWithNibName:bundle:", 0, 0);
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
  id v3 = v1;
  uint64_t v4 = (NSBundle *)[v2 mainBundle];
  v5._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  v16._object = (void *)0x800000010021A840LL;
  v5._object = (void *)0x800000010021A820LL;
  v6._uint64_t countAndFlagsBits = 0LL;
  v6._object = (void *)0xE000000000000000LL;
  v16._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, v4, v6, v16)._object;

  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  [v3 setPrimaryText:v8];

  uint64_t v9 = (NSBundle *)[v2 mainBundle];
  v10._uint64_t countAndFlagsBits = 0xD000000000000018LL;
  v17._uint64_t countAndFlagsBits = 0xD000000000000044LL;
  v17._object = (void *)0x800000010021A880LL;
  v10._object = (void *)0x800000010021A860LL;
  v11._uint64_t countAndFlagsBits = 0LL;
  v11._object = (void *)0xE000000000000000LL;
  uint64_t v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, v9, v11, v17)._object;

  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  [v3 setSecondaryText:v13];

  [v3 setButtonTitle:0];
  return v3;
}

id sub_100143AB0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TVNoBookmarksViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TVNoBookmarksViewController()
{
  return objc_opt_self(&OBJC_CLASS____TtC8Podcasts27TVNoBookmarksViewController);
}

id AppCoreSpotlightEntityAnnotator.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

char *NonFollowedShowsSyncProcessor.init()()
{
  uint64_t v1 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  Swift::String v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v25 - v6;
  uint64_t v8 = type metadata accessor for OSSignposter(0LL);
  uint64_t v25 = *(void *)(v8 - 8);
  uint64_t v26 = v8;
  __chkstk_darwin(v8);
  Swift::String v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v11 = [objc_allocWithZone((Class)type metadata accessor for NonFollowedShowsSyncStorage()) init];
  id v12 = [objc_allocWithZone((Class)type metadata accessor for CloudSyncBugReporter()) init];
  id v13 = objc_allocWithZone((Class)type metadata accessor for NonFollowedShowsSyncProcessor(0LL));
  id v14 = sub_100147DE4((uint64_t)v11, (uint64_t)v12, v13);

  uint64_t ObjectType = swift_getObjectType(v0);
  swift_deallocPartialClassInstance( v0,  ObjectType,  *(unsigned int *)((swift_isaMask & *v0) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v0) + 0x34LL));
  Swift::String v16 = (char *)v14;
  static OSSignposter.cloudSync.getter(v16);
  Swift::String v17 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 16);
  uint64_t v18 = v17(v7, &v16[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostID], v1);
  uint64_t v19 = (os_log_s *)OSSignposter.logHandle.getter(v18);
  os_signpost_type_t v20 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v17(v5, v7, v1);
    id v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v21 = 0;
    os_signpost_id_t v22 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v19,  v20,  v22,  "NonFollowedShowsSyncProcessor.created",  "",  v21,  2u);
    swift_slowDealloc(v21, -1LL, -1LL);

    uint64_t v23 = *(void (**)(char *, uint64_t))(v2 + 8);
    v23(v7, v1);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v26);
    v23(v5, v1);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v26);
  }

  return v16;
}

uint64_t type metadata accessor for NonFollowedShowsSyncProcessor(uint64_t a1)
{
  uint64_t result = qword_1002B5808;
  if (!qword_1002B5808) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NonFollowedShowsSyncProcessor);
  }
  return result;
}

id NonFollowedShowsSyncProcessor.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NonFollowedShowsSyncProcessor(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t NonFollowedShowsSyncProcessor.operationTypeForSET()()
{
  return 15LL;
}

Swift::Bool __swiftcall NonFollowedShowsSyncProcessor.hasLocalChanges()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  swift_beginAccess( v0 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage,  &v5,  0LL,  0LL);
  sub_1001376A4(v1, (uint64_t)v6);
  uint64_t v2 = v7;
  uint64_t v3 = v8;
  sub_1001361FC(v6, v7);
  LOBYTE(v2) = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 112))(v2, v3);
  sub_100136648(v6);
  return v2 & 1;
}

Swift::String_optional __swiftcall NonFollowedShowsSyncProcessor.version(forGetTransaction:key:)( MZKeyValueStoreTransaction *forGetTransaction, Swift::String key)
{
  uint64_t v2 = sub_100147F18(key._countAndFlagsBits, (unint64_t)key._object);
  result.value._object = v3;
  result.value._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t NonFollowedShowsSyncProcessor.data(forSetTransaction:key:version:)( uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  return sub_100148400(a2, a3, a4);
}

uint64_t NonFollowedShowsSyncProcessor.success(forGetTransaction:with:forKey:version:finishedBlock:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void), uint64_t a9)
{
  return sub_100148DFC(a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_100144168(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v76 = a4;
  uint64_t v75 = a3;
  uint64_t v5 = (void *)type metadata accessor for Logger(0LL);
  uint64_t v83 = *(v5 - 1);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  Swift::String v10 = (char *)&v73 - v9;
  uint64_t v11 = sub_100126450(&qword_1002B5818);
  uint64_t v12 = __chkstk_darwin(v11);
  id v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  unint64_t v84 = (char *)&v73 - v15;
  uint64_t v16 = type metadata accessor for RemoteNonFollowedShow(0LL);
  uint64_t v85 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v88 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v82 = (char *)&v73 - v19;
  id v20 = [objc_allocWithZone((Class)MZKeyValueStoreNode) init];
  Class isa = 0LL;
  if (a2 >> 60 != 15) {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  [v20 setValue:isa];

  id v22 = [v20 hasData];
  if ((_DWORD)v22)
  {
    id v23 = [v20 arrayValue];
    if (v23
      && (id v24 = v23,
          uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, (char *)&type metadata for Any + 8),
          v24,
          uint64_t v26 = sub_10013064C(v25),
          swift_bridgeObjectRelease(v25),
          v26))
    {
      os_log_type_t v27 = v26;
    }

    else
    {
      swift_bridgeObjectRelease(0LL);
      os_log_type_t v27 = _swiftEmptyArrayStorage;
    }

    uint64_t v47 = (uint64_t)v84;
    uint64_t v46 = v85;
    uint64_t v86 = v27[2];
    if (v86)
    {
      id v74 = v20;
      uint64_t v87 = v27;
      __n128 v48 = swift_bridgeObjectRetain(v27);
      uint64_t v49 = v87;
      uint64_t v50 = 0LL;
      uint64_t v90 = _swiftEmptyArrayStorage;
      v48.n128_u64[0] = 136380675LL;
      __n128 v79 = v48;
      uint64_t v78 = (char *)&type metadata for Any + 8;
      unint64_t v89 = (uint8_t *)v16;
      uint64_t v81 = v10;
      uint64_t v80 = v14;
      do
      {
        __n128 v51 = swift_bridgeObjectRetain(v49[v50 + 4]);
        RemoteNonFollowedShow.init(dictionary:)(v51);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v14, 0LL, 1LL, v16);
        sub_1001495E0((uint64_t)v14, v47);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v47, 1LL, v16) == 1)
        {
          sub_100149518(v47);
        }

        else
        {
          uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 32);
          uint64_t v53 = v82;
          v52(v82, v47, v16);
          v52(v88, (uint64_t)v53, v16);
          if ((swift_isUniquelyReferenced_nonNull_native(v90) & 1) != 0) {
            unint64_t v54 = (unint64_t)v90;
          }
          else {
            unint64_t v54 = sub_1001329A4(0, v90[2] + 1LL, 1, (unint64_t)v90);
          }
          unint64_t v56 = *(void *)(v54 + 16);
          unint64_t v55 = *(void *)(v54 + 24);
          if (v56 >= v55 >> 1) {
            unint64_t v54 = sub_1001329A4(v55 > 1, v56 + 1, 1, v54);
          }
          *(void *)(v54 + swift_unknownObjectWeakDestroy(v0 + 16) = v56 + 1;
          uint64_t v57 = v85;
          unint64_t v58 = (*(unsigned __int8 *)(v57 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
          uint64_t v90 = (void *)v54;
          unint64_t v59 = v54 + v58 + *(void *)(v85 + 72) * v56;
          uint64_t v16 = (uint64_t)v89;
          v52((char *)v59, (uint64_t)v88, (uint64_t)v89);
          uint64_t v46 = v57;
        }

        ++v50;
        uint64_t v49 = v87;
      }

      while (v86 != v50);
      swift_bridgeObjectRelease_n(v87, 2LL);
      id v20 = v74;
      uint64_t v60 = v90;
    }

    else
    {
      swift_bridgeObjectRelease(v27);
      uint64_t v60 = _swiftEmptyArrayStorage;
    }

    uint64_t v61 = v77;
    uint64_t v62 = &v77[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage];
    swift_beginAccess( &v77[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage],  v97,  0LL,  0LL);
    sub_1001376A4((uint64_t)v62, (uint64_t)&aBlock);
    uint64_t v63 = v93;
    uint64_t v64 = v94;
    sub_1001361FC(&aBlock, (uint64_t)v93);
    id v65 = (void *)(*((uint64_t (**)(void *, uint64_t (*)()))v64 + 1))(v63, v64);
    sub_100136648(&aBlock);
    uint64_t v66 = swift_allocObject(&unk_100247058, 24LL, 7LL);
    swift_unknownObjectWeakInit(v66 + 16, v61);
    uint64_t v67 = (void *)swift_allocObject(&unk_100247080, 56LL, 7LL);
    v67[2] = v66;
    v67[3] = v60;
    uint64_t v68 = v75;
    v67[4] = v65;
    v67[5] = v68;
    uint64_t v69 = v76;
    v67[6] = v76;
    uint64_t v94 = sub_1001495B8;
    uint64_t v95 = v67;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    v92[0] = 1107296256LL;
    v92[1] = sub_10013D2D8;
    uint64_t v93 = &unk_100247098;
    Class v70 = _Block_copy(&aBlock);
    uint64_t v71 = v95;
    swift_bridgeObjectRetain(v69);
    id v72 = v65;
    swift_release(v71);
    [v72 performBlockAndWaitWithSave:v70];
    _Block_release(v70);
  }

  else
  {
    uint64_t v28 = static Logger.cloudSync.getter(v22);
    os_log_type_t v29 = static os_log_type_t.default.getter(v28);
    uint64_t v30 = v77;
    id v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = v29;
    if (os_log_type_enabled(v31, v29))
    {
      id v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v34 = swift_slowAlloc(32LL, -1LL);
      uint64_t v90 = v5;
      uint64_t v35 = v34;
      *(_DWORD *)id v33 = 136315138;
      uint64_t v98 = v34;
      unint64_t v89 = v33 + 4;
      uint64_t v36 = (uint64_t)&v30[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage];
      swift_beginAccess( &v30[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage],  v97,  0LL,  0LL);
      sub_1001376A4(v36, (uint64_t)&aBlock);
      id v74 = v20;
      uint64_t v38 = v93;
      uint64_t v37 = v94;
      sub_1001361FC(&aBlock, (uint64_t)v93);
      uint64_t v39 = (*((uint64_t (**)(void *, uint64_t (*)()))v37 + 8))(v38, v37);
      uint64_t v41 = v40;
      sub_100136648(&aBlock);
      v96[0] = v39;
      v96[1] = v41;
      uint64_t v42 = sub_100126450(&qword_1002B5820);
      uint64_t v43 = String.init<A>(describing:)(v96, v42);
      unint64_t v45 = v44;
      uint64_t aBlock = sub_100178E7C(v43, v44, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v92, v89, v33 + 12);

      swift_bridgeObjectRelease(v45);
      _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "[NonFollowedShows] Empty remote Implicit Follows key for current version %s. Nothing to merge.",  v33,  0xCu);
      swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);

      (*(void (**)(char *, void *))(v83 + 8))(v8, v90);
    }

    else
    {

      (*(void (**)(char *, void *))(v83 + 8))(v8, v5);
    }
  }

uint64_t sub_100144A5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v42 = a4;
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  uint64_t v6 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v41 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v35 - v14;
  uint64_t v16 = type metadata accessor for OSSignposter(0LL);
  uint64_t v17 = __chkstk_darwin(v16);
  id v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = *(void *)(v4 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostState);
  if (v21)
  {
    uint64_t v36 = v11;
    uint64_t v37 = v18;
    uint64_t v38 = v17;
    uint64_t v39 = v4;
    uint64_t v40 = a3;
    uint64_t v22 = swift_retain(v21);
    uint64_t v23 = static OSSignposter.cloudSync.getter(v22);
    id v24 = (os_log_s *)OSSignposter.logHandle.getter(v23);
    uint64_t v25 = OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v26 = static os_signpost_type_t.end.getter(v25);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      uint64_t v27 = swift_retain(v21);
      checkForErrorAndConsumeState(state:)(v27);
      swift_release(v21);
      if ((*(unsigned int (**)(char *, uint64_t))(v7 + 88))(v9, v6) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v28 = "[Error] Interval already ended";
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        uint64_t v28 = "";
      }

      uint64_t v29 = v36;
      uint64_t v30 = v41;
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v41, v15, v10);
      id v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v31 = 0;
      os_signpost_id_t v32 = OSSignpostID.rawValue.getter(v31);
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v24,  v26,  v32,  "NonFollowedShowsSyncProcessor.finish",  v28,  v31,  2u);
      swift_slowDealloc(v31, -1LL, -1LL);

      id v33 = *(void (**)(char *, uint64_t))(v29 + 8);
      v33(v15, v10);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v38);
      swift_release(v21);
      v33(v30, v10);
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v10);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v38);
      swift_release(v21);
    }

    a3 = v40;
  }

  uint64_t result = sub_100147A14(v43, v44);
  if (a3) {
    return a3(0LL);
  }
  return result;
}

uint64_t NonFollowedShowsSyncProcessor.success(forSetTransaction:with:forKey:version:finishedBlock:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void), uint64_t a9)
{
  return sub_100149008(a4, a5, a6, a7, a8, a9);
}

uint64_t NonFollowedShowsSyncProcessor.conflict(forSetTransaction:with:forKey:version:finishedBlock:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void), uint64_t a9)
{
  return sub_1001491F8(a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_100145040(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v37 = a2;
  uint64_t v4 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v36 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v32 - v12;
  uint64_t v14 = type metadata accessor for OSSignposter(0LL);
  uint64_t result = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(void *)(v2 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostState);
  if (v19)
  {
    uint64_t v32 = v9;
    uint64_t v33 = v16;
    uint64_t v34 = result;
    uint64_t v35 = a1;
    uint64_t v20 = swift_retain(v19);
    uint64_t v21 = static OSSignposter.cloudSync.getter(v20);
    uint64_t v22 = (os_log_s *)OSSignposter.logHandle.getter(v21);
    uint64_t v23 = OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v24 = static os_signpost_type_t.end.getter(v23);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      uint64_t v25 = swift_retain(v19);
      checkForErrorAndConsumeState(state:)(v25);
      swift_release(v19);
      if ((*(unsigned int (**)(char *, uint64_t))(v5 + 88))(v7, v4) == enum case for OSSignpostError.doubleEnd(_:))
      {
        os_signpost_type_t v26 = "[Error] Interval already ended";
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        os_signpost_type_t v26 = "";
      }

      uint64_t v27 = v32;
      uint64_t v28 = v36;
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v36, v13, v8);
      uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v29 = 0;
      os_signpost_id_t v30 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v22,  v24,  v30,  "NonFollowedShowsSyncProcessor.reschedule",  v26,  v29,  2u);
      swift_slowDealloc(v29, -1LL, -1LL);

      id v31 = *(void (**)(char *, uint64_t))(v27 + 8);
      v31(v13, v8);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v34);
      swift_release(v19);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v31)(v28, v8);
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v8);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v34);
      uint64_t result = swift_release(v19);
    }

    a1 = v35;
  }

  if (a1) {
    return a1(1LL);
  }
  return result;
}

Swift::Void __swiftcall NonFollowedShowsSyncProcessor.transaction(_:didProcessResponseWithDomainVersion:)( MZKeyValueStoreTransaction *_, Swift::String_optional didProcessResponseWithDomainVersion)
{
  object = didProcessResponseWithDomainVersion.value._object;
  uint64_t countAndFlagsBits = didProcessResponseWithDomainVersion.value._countAndFlagsBits;
  uint64_t v5 = v2 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  swift_beginAccess(v5, v10, 33LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = *(void *)(v5 + 32);
  sub_10013767C(v5, v6);
  uint64_t v8 = *(void (**)(uint64_t, void *, uint64_t, uint64_t, __n128))(v7 + 96);
  __n128 v9 = swift_bridgeObjectRetain(object);
  v8(countAndFlagsBits, object, v6, v7, v9);
  swift_endAccess(v10);
}

uint64_t sub_1001455E4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v85 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v85 - v18;
  a1 += 16LL;
  swift_beginAccess(a1, v103, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a1);
  if (!result) {
    return result;
  }
  uint64_t v91 = v11;
  uint64_t v92 = a3;
  unint64_t v89 = v14;
  uint64_t v93 = (char *)result;
  uint64_t v21 = static Logger.cloudSync.getter(result);
  os_log_type_t v22 = static os_log_type_t.default.getter(v21);
  uint64_t v23 = swift_bridgeObjectRetain_n(a2, 2LL);
  os_signpost_type_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = v22;
  BOOL v26 = os_log_type_enabled(v24, v22);
  uint64_t v87 = a4;
  uint64_t v88 = a5;
  if (v26)
  {
    uint64_t v90 = v10;
    uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    uint64_t v99 = v28;
    *(_DWORD *)uint64_t v27 = 136380675;
    uint64_t v86 = v27 + 4;
    uint64_t v29 = v17;
    uint64_t v30 = type metadata accessor for RemoteNonFollowedShow(0LL);
    uint64_t v31 = swift_bridgeObjectRetain(a2);
    uint64_t v32 = Array.description.getter(v31, v30);
    unint64_t v34 = v33;
    swift_bridgeObjectRelease(a2);
    uint64_t v35 = v32;
    uint64_t v17 = v29;
    uint64_t v97 = sub_100178E7C(v35, v34, &v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v86, v27 + 12);
    swift_bridgeObjectRelease_n(a2, 2LL);
    unint64_t v36 = v34;
    uint64_t v10 = v90;
    swift_bridgeObjectRelease(v36);
    _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "[NonFollowedShows] Inserting or updating Implicit Follows for remote list %{private}s.",  v27,  0xCu);
    swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  uint64_t v37 = *(void (**)(char *, uint64_t))(v91 + 8);
  v37(v19, v10);
  uint64_t v38 = v92;
  uint64_t v39 = v93;
  sub_100145C8C(a2, v92);
  uint64_t v41 = v40;
  uint64_t v42 = (uint64_t)&v39[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage];
  swift_beginAccess( &v39[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage],  &v97,  0LL,  0LL);
  sub_1001376A4(v42, (uint64_t)&v99);
  uint64_t v43 = v101;
  uint64_t v44 = v102;
  sub_1001361FC(&v99, v101);
  uint64_t v45 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v44 + 128))(v41, v38, v43, v44);
  sub_100136648(&v99);
  if (v45)
  {
    if ((unint64_t)v45 >> 62)
    {
      if (v45 >= 0) {
        uint64_t v74 = v45 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v74 = v45;
      }
      swift_bridgeObjectRetain(v45);
      uint64_t v75 = _CocoaArrayWrapper.endIndex.getter(v74);
      swift_bridgeObjectRelease(v45);
      if (v75)
      {
        uint64_t v90 = v10;
        unint64_t v46 = *(void *)(v41 + 16);
        swift_bridgeObjectRelease(v41);
        swift_bridgeObjectRetain(v45);
        uint64_t v47 = _CocoaArrayWrapper.endIndex.getter(v74);
        swift_bridgeObjectRelease(v45);
        goto LABEL_9;
      }
    }

    else if (*(void *)((v45 & 0xFFFFFFFFFFFFFF8LL) + 0x10))
    {
      uint64_t v90 = v10;
      unint64_t v46 = *(void *)(v41 + 16);
      swift_bridgeObjectRelease(v41);
      uint64_t v47 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
LABEL_9:
      sub_1001473E4(v46, v47, v87, v88);
      uint64_t v49 = static Logger.cloudSync.getter(v48);
      os_log_type_t v50 = static os_log_type_t.default.getter(v49);
      swift_bridgeObjectRetain_n(v45, 2LL);
      __n128 v51 = v39;
      uint64_t v52 = v17;
      uint64_t v53 = (os_log_s *)Logger.logObject.getter(v51);
      if (os_log_type_enabled(v53, v50))
      {
        uint64_t v54 = swift_slowAlloc(22LL, -1LL);
        uint64_t v92 = (void *)swift_slowAlloc(64LL, -1LL);
        uint64_t v96 = v92;
        *(_DWORD *)uint64_t v54 = 136315395;
        sub_1001376A4(v42, (uint64_t)&v99);
        LODWORD(v91) = v50;
        uint64_t v55 = v101;
        uint64_t v56 = v102;
        sub_1001361FC(&v99, v101);
        uint64_t v57 = *(uint64_t (**)(uint64_t, uint64_t))(v56 + 40);
        uint64_t v93 = v52;
        uint64_t v58 = v57(v55, v56);
        char v60 = v59;
        sub_100136648(&v99);
        uint64_t v94 = v58;
        char v95 = v60 & 1;
        uint64_t v61 = sub_100126450((uint64_t *)&unk_1002B6480);
        uint64_t v62 = String.init<A>(describing:)(&v94, v61);
        unint64_t v64 = v63;
        uint64_t v99 = sub_100178E7C(v62, v63, (uint64_t *)&v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v54 + 4, v54 + 12);

        swift_bridgeObjectRelease(v64);
        *(_WORD *)(v54 + 12) = 2081;
        unint64_t v65 = sub_100149628();
        uint64_t v66 = swift_bridgeObjectRetain(v45);
        uint64_t v67 = Array.description.getter(v66, v65);
        unint64_t v69 = v68;
        swift_bridgeObjectRelease(v45);
        uint64_t v99 = sub_100178E7C(v67, v69, (uint64_t *)&v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v54 + 14, v54 + 22);
        swift_bridgeObjectRelease_n(v45, 2LL);
        swift_bridgeObjectRelease(v69);
        _os_log_impl( (void *)&_mh_execute_header,  v53,  (os_log_type_t)v91,  "[NonFollowedShows] Removing Implicit Follows only local and before timestamp %s: %{private}s.",  (uint8_t *)v54,  0x16u);
        Class v70 = v92;
        swift_arrayDestroy(v92, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v70, -1LL, -1LL);
        swift_slowDealloc(v54, -1LL, -1LL);

        uint64_t v71 = v93;
      }

      else
      {

        swift_bridgeObjectRelease_n(v45, 2LL);
        uint64_t v71 = v52;
      }

      v37(v71, v90);
      sub_1001376A4(v42, (uint64_t)&v99);
      uint64_t v72 = v101;
      uint64_t v73 = v102;
      sub_1001361FC(&v99, v101);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 152))(v45, v72, v73);

      swift_bridgeObjectRelease(v45);
      return sub_100136648(&v99);
    }

    swift_bridgeObjectRelease(v45);
  }

  uint64_t v76 = swift_bridgeObjectRelease(v41);
  uint64_t v77 = v89;
  uint64_t v78 = static Logger.cloudSync.getter(v76);
  uint64_t v79 = static os_log_type_t.default.getter(v78);
  os_log_type_t v80 = v79;
  uint64_t v81 = (os_log_s *)Logger.logObject.getter(v79);
  os_log_type_t v82 = v80;
  if (os_log_type_enabled(v81, v80))
  {
    uint64_t v83 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v83 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v81,  v82,  "[NonFollowedShows] We didn't find any local Implicit Follow which is not present in cloud and which is older than last sync date. We are done.",  v83,  2u);
    swift_slowDealloc(v83, -1LL, -1LL);
    unint64_t v84 = (os_log_s *)v39;
  }

  else
  {
    unint64_t v84 = v81;
    uint64_t v81 = (os_log_s *)v39;
  }

  return ((uint64_t (*)(char *, uint64_t))v37)(v77, v10);
}

void sub_100145C8C(uint64_t a1, void *a2)
{
  id v241 = a2;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v252 = *(void *)(v4 - 8);
  uint64_t v253 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v224 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v224 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v235 = (char *)&v224 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v226 = (char *)&v224 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  id v227 = (char *)&v224 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v224 - v17;
  uint64_t v19 = type metadata accessor for RemoteNonFollowedShow(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v236 = (char *)&v224 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v224 - v27;
  uint64_t v246 = *(void *)(a1 + 16);
  if (!v246) {
    return;
  }
  uint64_t v234 = v26;
  uint64_t v238 = v25;
  uint64_t v29 = v2 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  uint64_t v245 = a1 + ((*(unsigned __int8 *)(v20 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  uint64_t v225 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v237 = v29;
  __n128 v30 = swift_beginAccess(v29, v261, 0LL, 0LL);
  uint64_t v31 = 0LL;
  uint64_t v244 = *(void *)(v20 + 72);
  uint64_t v233 = &v256;
  uint64_t v229 = (char *)&v255 + 4;
  id v243 = _swiftEmptyArrayStorage;
  uint64_t v248 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 16);
  v30.n128_u64[0] = 136315394LL;
  __n128 v231 = v30;
  uint64_t v230 = (char *)&type metadata for Any + 8;
  v30.n128_u64[0] = 136381955LL;
  __n128 v228 = v30;
  v30.n128_u64[0] = 136315138LL;
  __n128 v247 = v30;
  uint64_t v249 = v18;
  uint64_t v251 = v28;
  uint64_t v239 = v7;
  unint64_t v232 = v10;
  uint64_t v240 = v19;
  uint64_t v242 = v20;
  while (2)
  {
    uint64_t v250 = v31;
    unint64_t v34 = v248;
    uint64_t v35 = v248((uint64_t)v28, (char *)(v245 + v244 * v31), v19);
    uint64_t v36 = v19;
    uint64_t v37 = RemoteNonFollowedShow.prioritizedIDs.getter(v35);
    uint64_t v255 = v37;
    uint64_t v38 = sub_100126450(&qword_1002B5830);
    unint64_t v39 = sub_100149664();
    uint64_t v40 = Collection.isNotEmpty.getter(v38, v39);
    if ((v40 & 1) == 0)
    {
      uint64_t v57 = v20;
      uint64_t v58 = swift_bridgeObjectRelease(v37);
      static Logger.cloudSync.getter(v58);
      char v59 = v28;
      char v60 = v7;
      uint64_t v61 = v238;
      uint64_t v62 = v34(v238, v59, v36);
      unint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
      unint64_t v64 = (void (*)(char *, uint64_t, uint64_t))v34;
      os_log_type_t v65 = static os_log_type_t.error.getter();
      uint64_t v19 = v36;
      if (os_log_type_enabled(v63, v65))
      {
        uint64_t v66 = swift_slowAlloc(12LL, -1LL);
        uint64_t v67 = swift_slowAlloc(32LL, -1LL);
        uint64_t v255 = v67;
        *(_DWORD *)uint64_t v66 = v247.n128_u32[0];
        unint64_t v68 = v236;
        v64(v236, v61, v19);
        uint64_t v69 = String.init<A>(describing:)(v68, v19);
        unint64_t v71 = v70;
        *(void *)(v66 + 4) = sub_100178E7C(v69, v70, &v255);
        swift_bridgeObjectRelease(v71);
        uint64_t v20 = v57;
        uint64_t v32 = *(os_log_s **)(v57 + 8);
        ((void (*)(uint64_t, uint64_t))v32)(v61, v19);
        _os_log_impl( (void *)&_mh_execute_header,  v63,  v65,  "[NonFollowedShows] Remote Implicit Follow received without any meaningful podcast ID. There is nothing we can do with this show: %s",  (uint8_t *)v66,  0xCu);
        swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v72 = v67;
        uint64_t v18 = v249;
        swift_slowDealloc(v72, -1LL, -1LL);
        swift_slowDealloc(v66, -1LL, -1LL);
      }

      else
      {
        uint64_t v20 = v57;
        uint64_t v32 = *(os_log_s **)(v57 + 8);
        ((void (*)(uint64_t, uint64_t))v32)(v61, v19);
      }

      (*(void (**)(char *, uint64_t))(v252 + 8))(v60, v253);
      uint64_t v7 = v60;
      uint64_t v33 = v250;
      uint64_t v28 = v251;
      goto LABEL_5;
    }

    uint64_t v41 = *(void *)(v37 + 16);
    if (!v41)
    {
LABEL_23:
      uint64_t v73 = v235;
      uint64_t v74 = static Logger.cloudSync.getter(v40);
      os_log_type_t v75 = static os_log_type_t.default.getter(v74);
      uint64_t v76 = v28;
      uint64_t v77 = v234;
      uint64_t v78 = v240;
      v34((uint64_t)v234, v76, v240);
      uint64_t v79 = swift_bridgeObjectRetain(v37);
      os_log_type_t v80 = (os_log_s *)Logger.logObject.getter(v79);
      os_log_type_t v81 = v75;
      if (os_log_type_enabled(v80, v75))
      {
        uint64_t v82 = swift_slowAlloc(22LL, -1LL);
        uint64_t v83 = swift_slowAlloc(64LL, -1LL);
        uint64_t v255 = v83;
        *(_DWORD *)uint64_t v82 = v231.n128_u32[0];
        uint64_t v84 = swift_bridgeObjectRetain(v37);
        uint64_t v85 = Array.description.getter(v84, &type metadata for PodcastIdentifier);
        unint64_t v87 = v86;
        swift_bridgeObjectRelease(v37);
        *(void *)(v82 + 4) = sub_100178E7C(v85, v87, &v255);
        swift_bridgeObjectRelease_n(v37, 2LL);
        swift_bridgeObjectRelease(v87);
        *(_WORD *)(v82 + 12) = 2080;
        uint64_t v88 = v236;
        v248((uint64_t)v236, v77, v78);
        uint64_t v89 = String.init<A>(describing:)(v88, v78);
        unint64_t v91 = v90;
        *(void *)(v82 + 14) = sub_100178E7C(v89, v90, &v255);
        swift_bridgeObjectRelease(v91);
        uint64_t v254 = *(os_log_s **)(v242 + 8);
        ((void (*)(char *, uint64_t))v254)(v77, v78);
        _os_log_impl( (void *)&_mh_execute_header,  v80,  v81,  "[NonFollowedShows] Received Implicit Follow from sync which doesn't exist in this device, we must insert it as Implicitly Followed: IDs %s, remote show: %s",  (uint8_t *)v82,  0x16u);
        swift_arrayDestroy(v83, 2LL, v230);
        swift_slowDealloc(v83, -1LL, -1LL);
        swift_slowDealloc(v82, -1LL, -1LL);
      }

      else
      {
        swift_bridgeObjectRelease_n(v37, 2LL);
        uint64_t v254 = *(os_log_s **)(v242 + 8);
        ((void (*)(char *, uint64_t))v254)(v77, v78);
      }

      uint64_t v92 = *(void (**)(char *, uint64_t))(v252 + 8);
      v92(v73, v253);
      uint64_t v7 = v239;
      uint64_t v19 = v78;
      sub_1001376A4(v237, (uint64_t)&v255);
      uint64_t v93 = v258;
      uint64_t v94 = v259;
      sub_1001361FC(&v255, v258);
      uint64_t v28 = v251;
      char v95 = (void *)(*(uint64_t (**)(char *, id, uint64_t, uint64_t))(v94 + 136))(v251, v241, v93, v94);
      sub_100136648(&v255);
      id v96 = [v95 uuid];
      if (v96)
      {
        uint64_t v97 = v96;
        uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
        uint64_t v100 = v99;

        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v243);
        uint64_t v20 = v242;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
          uint64_t v102 = v243;
        }
        else {
          uint64_t v102 = sub_100132460(0LL, v243[2] + 1LL, 1, v243);
        }
        unint64_t v104 = v102[2];
        unint64_t v103 = v102[3];
        if (v104 >= v103 >> 1) {
          uint64_t v102 = sub_100132460((void *)(v103 > 1), v104 + 1, 1, v102);
        }
        v102[2] = v104 + 1;
        id v243 = v102;
        uint64_t v105 = &v102[2 * v104];
        v105[4] = v98;
        v105[5] = v100;

        uint64_t v18 = v249;
      }

      else
      {
        uint64_t v106 = v232;
        static Logger.cloudSync.getter(0LL);
        id v107 = v95;
        uint64_t v108 = (os_log_s *)Logger.logObject.getter(v107);
        int v109 = static os_log_type_t.error.getter();
        BOOL v110 = os_log_type_enabled(v108, (os_log_type_t)v109);
        uint64_t v18 = v249;
        uint64_t v20 = v242;
        if (v110)
        {
          LODWORD(v254) = v109;
          uint64_t v111 = swift_slowAlloc(50LL, -1LL);
          uint64_t v112 = swift_slowAlloc(96LL, -1LL);
          id v260 = (id)v112;
          *(_DWORD *)uint64_t v111 = v228.n128_u32[0];
          id v113 = [v107 title];
          if (v113)
          {
            uint64_t v114 = v113;
            uint64_t v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v113);
            uint64_t v117 = v116;
          }

          else
          {
            uint64_t v115 = 0LL;
            uint64_t v117 = 0LL;
          }

          uint64_t v255 = v115;
          uint64_t v256 = v117;
          uint64_t v138 = sub_100126450(&qword_1002B5820);
          uint64_t v139 = String.init<A>(describing:)(&v255, v138);
          unint64_t v141 = v140;
          uint64_t v255 = sub_100178E7C(v139, v140, (uint64_t *)&v260);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, v233, v111 + 4, v111 + 12);

          swift_bridgeObjectRelease(v141);
          *(_WORD *)(v111 + 12) = 2080;
          id v142 = [v107 uuid];
          if (v142)
          {
            uint64_t v143 = v142;
            uint64_t v144 = static String._unconditionallyBridgeFromObjectiveC(_:)(v142);
            uint64_t v146 = v145;
          }

          else
          {
            uint64_t v144 = 0LL;
            uint64_t v146 = 0LL;
          }

          uint64_t v255 = v144;
          uint64_t v256 = v146;
          uint64_t v147 = String.init<A>(describing:)(&v255, v138);
          unint64_t v149 = v148;
          uint64_t v255 = sub_100178E7C(v147, v148, (uint64_t *)&v260);
          uint64_t v150 = v233;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, v233, v111 + 14, v111 + 22);

          uint64_t v151 = swift_bridgeObjectRelease(v149);
          *(_WORD *)(v111 + 22) = 2081;
          uint64_t v255 = MTPodcast.adamId.getter(v151);
          LOBYTE(v256) = v152 & 1;
          uint64_t v153 = sub_100126450(&qword_1002B5840);
          uint64_t v154 = String.init<A>(describing:)(&v255, v153);
          unint64_t v156 = v155;
          uint64_t v255 = sub_100178E7C(v154, v155, (uint64_t *)&v260);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, v150, v111 + 24, v111 + 32);

          swift_bridgeObjectRelease(v156);
          *(_WORD *)(v111 + 32) = 1024;
          LODWORD(v156) = [v107 subscribed];

          LODWORD(v255) = v156;
          uint64_t v157 = v229;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, v229, v111 + 34, v111 + 38);

          *(_WORD *)(v111 + 3_Block_object_dispose(va, 8) = 1024;
          LODWORD(v156) = [v107 hidden];

          LODWORD(v255) = v156;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, v157, v111 + 40, v111 + 44);

          *(_WORD *)(v111 + 44) = 1024;
          LODWORD(v156) = [v107 isImplicitlyFollowed];

          LODWORD(v255) = v156;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, v157, v111 + 46, v111 + 50);

          _os_log_impl( (void *)&_mh_execute_header,  v108,  (os_log_type_t)v254,  "[NonFollowedShows] New inserted podcast has no uuid: %{private}s, uuid: %s, adamID: %{private}s, isFollowed: %{BOOL}d, isHidden: %{BOOL}d, isImplicitlyFollowed: %{BOOL}d.",  (uint8_t *)v111,  0x32u);
          swift_arrayDestroy(v112, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v112, -1LL, -1LL);
          swift_slowDealloc(v111, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v252 + 8))(v232, v253);
          uint64_t v32 = *(os_log_s **)(v20 + 8);
          uint64_t v18 = v249;
          uint64_t v33 = v250;
          uint64_t v19 = v240;
          uint64_t v28 = v251;
          uint64_t v7 = v239;
          goto LABEL_5;
        }

        v92(v106, v253);
        uint64_t v19 = v240;
      }

      uint64_t v33 = v250;
      uint64_t v32 = v254;
      goto LABEL_5;
    }

    swift_bridgeObjectRetain(v37);
    uint64_t v254 = (os_log_s *)v241;
    unint64_t v42 = 0LL;
    uint64_t v43 = (_BYTE *)(v37 + 48);
    while (1)
    {
      uint64_t v46 = *((void *)v43 - 2);
      if (*v43)
      {
        unint64_t v47 = *((void *)v43 - 1);
        if (*v43 == 1)
        {
          sub_1001496B0(*((void *)v43 - 2), *((void *)v43 - 1), 1u);
          swift_bridgeObjectRetain(v37);
          uint64_t v48 = sub_1001496B0(v46, v47, 1u);
          static Logger.cloudSync.getter(v48);
          uint64_t v49 = swift_bridgeObjectRetain(v47);
          os_log_type_t v50 = (os_log_s *)Logger.logObject.getter(v49);
          os_log_type_t v51 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v50, v51))
          {
            uint64_t v52 = swift_slowAlloc(12LL, -1LL);
            uint64_t v53 = swift_slowAlloc(32LL, -1LL);
            uint64_t v255 = v53;
            *(_DWORD *)uint64_t v52 = v247.n128_u32[0];
            swift_bridgeObjectRetain(v47);
            *(void *)(v52 + 4) = sub_100178E7C(v46, v47, &v255);
            sub_1001496CC(v46, v47, 1u);
            sub_1001496CC(v46, v47, 1u);
            swift_bridgeObjectRelease(v47);
            _os_log_impl( (void *)&_mh_execute_header,  v50,  v51,  "[NonFollowedShows] A remote podcast identified by a local ID as the UUID does not make any sense at all. O ffending UUID: %s",  (uint8_t *)v52,  0xCu);
            swift_arrayDestroy(v53, 1LL, (char *)&type metadata for Any + 8);
            uint64_t v54 = v53;
            uint64_t v18 = v249;
            swift_slowDealloc(v54, -1LL, -1LL);
            uint64_t v55 = v52;
            uint64_t v28 = v251;
            swift_slowDealloc(v55, -1LL, -1LL);
          }

          else
          {

            sub_1001496CC(v46, v47, 1u);
            sub_1001496CC(v46, v47, 1u);
          }

          (*(void (**)(char *, uint64_t))(v252 + 8))(v18, v253);
          sub_1001496CC(v46, v47, 1u);
          swift_bridgeObjectRelease(v37);
        }

        else
        {
          swift_bridgeObjectRetain(v37);
          sub_1001496B0(v46, v47, 2u);
          NSString v44 = String._bridgeToObjectiveC()();
          id v45 = -[os_log_s podcastForFeedUrl:](v254, "podcastForFeedUrl:", v44);

          sub_1001496CC(v46, v47, 2u);
          swift_bridgeObjectRelease(v37);
          if (v45) {
            break;
          }
        }

        goto LABEL_10;
      }

      id v56 = -[os_log_s podcastForStoreId:](v254, "podcastForStoreId:", *((void *)v43 - 2));

      if (v56) {
        break;
      }
LABEL_10:
      ++v42;
      v43 += 24;
      if (v41 == v42) {
        goto LABEL_22;
      }
    }

    if (v41 == v42)
    {
LABEL_22:

      uint64_t v40 = swift_bridgeObjectRelease(v37);
      unint64_t v34 = v248;
      goto LABEL_23;
    }

    if (v42 >= *(void *)(v37 + 16))
    {
      __break(1u);
    }

    else
    {
      uint64_t v118 = *((void *)v43 - 2);
      uint64_t v119 = *((void *)v43 - 1);
      unsigned __int8 v120 = *v43;
      uint64_t v255 = v118;
      uint64_t v256 = v119;
      unsigned __int8 v257 = v120;
      sub_1001496B0(v118, v119, v120);
      uint64_t v121 = v254;
      sub_1001477A4(&v255, v254, &v260);
      sub_1001496CC(v118, v119, v120);
      int64_t v122 = v260;
      if (v260)
      {

        id v123 = v122;
        uint64_t v124 = swift_bridgeObjectRelease_n(v37, 2LL);
        uint64_t v125 = v227;
        uint64_t v126 = static Logger.cloudSync.getter(v124);
        os_log_type_t v127 = static os_log_type_t.default.getter(v126);
        id v128 = v123;
        uint64_t v129 = (os_log_s *)Logger.logObject.getter(v128);
        BOOL v130 = os_log_type_enabled(v129, v127);
        uint64_t v7 = v239;
        uint64_t v20 = v242;
        if (v130)
        {
          uint64_t v131 = swift_slowAlloc(50LL, -1LL);
          uint64_t v254 = (os_log_s *)swift_slowAlloc(96LL, -1LL);
          id v260 = v254;
          *(_DWORD *)uint64_t v131 = v228.n128_u32[0];
          id v132 = [v128 title];
          if (v132)
          {
            uint64_t v133 = v132;
            uint64_t v134 = static String._unconditionallyBridgeFromObjectiveC(_:)(v132);
            uint64_t v136 = v135;
          }

          else
          {
            uint64_t v134 = 0LL;
            uint64_t v136 = 0LL;
          }

          uint64_t v255 = v134;
          uint64_t v256 = v136;
          uint64_t v158 = sub_100126450(&qword_1002B5820);
          uint64_t v159 = String.init<A>(describing:)(&v255, v158);
          unint64_t v161 = v160;
          uint64_t v255 = sub_100178E7C(v159, v160, (uint64_t *)&v260);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, v233, v131 + 4, v131 + 12);

          swift_bridgeObjectRelease(v161);
          *(_WORD *)(v131 + 12) = 2080;
          id v162 = [v128 uuid];
          if (v162)
          {
            uint64_t v163 = v162;
            uint64_t v164 = static String._unconditionallyBridgeFromObjectiveC(_:)(v162);
            uint64_t v166 = v165;
          }

          else
          {
            uint64_t v164 = 0LL;
            uint64_t v166 = 0LL;
          }

          uint64_t v255 = v164;
          uint64_t v256 = v166;
          uint64_t v167 = String.init<A>(describing:)(&v255, v158);
          unint64_t v169 = v168;
          uint64_t v255 = sub_100178E7C(v167, v168, (uint64_t *)&v260);
          uint64_t v170 = v233;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, v233, v131 + 14, v131 + 22);

          uint64_t v171 = swift_bridgeObjectRelease(v169);
          *(_WORD *)(v131 + 22) = 2081;
          uint64_t v255 = MTPodcast.adamId.getter(v171);
          LOBYTE(v256) = v172 & 1;
          uint64_t v173 = sub_100126450(&qword_1002B5840);
          uint64_t v174 = String.init<A>(describing:)(&v255, v173);
          unint64_t v176 = v175;
          uint64_t v255 = sub_100178E7C(v174, v175, (uint64_t *)&v260);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, v170, v131 + 24, v131 + 32);

          swift_bridgeObjectRelease(v176);
          *(_WORD *)(v131 + 32) = 1024;
          LODWORD(v176) = [v128 subscribed];

          LODWORD(v255) = v176;
          uint64_t v177 = v229;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, v229, v131 + 34, v131 + 38);

          *(_WORD *)(v131 + 3_Block_object_dispose(va, 8) = 1024;
          LODWORD(v176) = [v128 hidden];

          LODWORD(v255) = v176;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, v177, v131 + 40, v131 + 44);

          *(_WORD *)(v131 + 44) = 1024;
          LODWORD(v176) = [v128 isImplicitlyFollowed];

          LODWORD(v255) = v176;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, v177, v131 + 46, v131 + 50);

          _os_log_impl( (void *)&_mh_execute_header,  v129,  v127,  "[NonFollowedShows] Upgrade to Implicitly Followed if needed from sync already existing local podcast: %{priv ate}s, uuid: %s, adamID: %{private}s, isFollowed: %{BOOL}d, isHidden: %{BOOL}d, isImplicitlyFollowed: %{BOOL}d.",  (uint8_t *)v131,  0x32u);
          uint64_t v178 = v254;
          swift_arrayDestroy(v254, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v178, -1LL, -1LL);
          swift_slowDealloc(v131, -1LL, -1LL);

          id v137 = *(void (**)(char *, uint64_t))(v252 + 8);
          v137(v227, v253);
          uint64_t v28 = v251;
          uint64_t v7 = v239;
        }

        else
        {

          id v137 = *(void (**)(char *, uint64_t))(v252 + 8);
          v137(v125, v253);
        }

        sub_1001376A4(v237, (uint64_t)&v255);
        uint64_t v179 = v258;
        uint64_t v180 = v259;
        sub_1001361FC(&v255, v258);
        (*(void (**)(id, char *, uint64_t, uint64_t))(v180 + 144))(v128, v28, v179, v180);
        sub_100136648(&v255);
        id v181 = [v128 uuid];
        if (v181)
        {
          v182 = v181;
          uint64_t v183 = static String._unconditionallyBridgeFromObjectiveC(_:)(v181);
          uint64_t v185 = v184;

          if ((swift_isUniquelyReferenced_nonNull_native(v243) & 1) != 0) {
            uint64_t v186 = v243;
          }
          else {
            uint64_t v186 = sub_100132460(0LL, v243[2] + 1LL, 1, v243);
          }
          unint64_t v188 = v186[2];
          unint64_t v187 = v186[3];
          if (v188 >= v187 >> 1) {
            uint64_t v186 = sub_100132460((void *)(v187 > 1), v188 + 1, 1, v186);
          }
          v186[2] = v188 + 1;
          id v243 = v186;
          uint64_t v189 = &v186[2 * v188];
          v189[4] = v183;
          v189[5] = v185;

          uint64_t v32 = *(os_log_s **)(v20 + 8);
          uint64_t v18 = v249;
          uint64_t v33 = v250;
          uint64_t v19 = v240;
        }

        else
        {
          uint64_t v190 = v7;
          char v191 = v226;
          static Logger.cloudSync.getter(0LL);
          id v192 = v128;
          uint64_t v193 = (os_log_s *)Logger.logObject.getter(v192);
          os_log_type_t v194 = static os_log_type_t.error.getter();
          BOOL v195 = os_log_type_enabled(v193, v194);
          uint64_t v18 = v249;
          if (v195)
          {
            uint64_t v254 = v193;
            uint64_t v196 = swift_slowAlloc(50LL, -1LL);
            uint64_t v224 = swift_slowAlloc(96LL, -1LL);
            id v260 = (id)v224;
            *(_DWORD *)uint64_t v196 = v228.n128_u32[0];
            id v197 = [v192 title];
            if (v197)
            {
              uint64_t v198 = v197;
              uint64_t v199 = static String._unconditionallyBridgeFromObjectiveC(_:)(v197);
              uint64_t v201 = v200;
            }

            else
            {
              uint64_t v199 = 0LL;
              uint64_t v201 = 0LL;
            }

            uint64_t v255 = v199;
            uint64_t v256 = v201;
            uint64_t v202 = sub_100126450(&qword_1002B5820);
            uint64_t v203 = String.init<A>(describing:)(&v255, v202);
            unint64_t v205 = v204;
            uint64_t v255 = sub_100178E7C(v203, v204, (uint64_t *)&v260);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, v233, v196 + 4, v196 + 12);

            swift_bridgeObjectRelease(v205);
            *(_WORD *)(v196 + 12) = 2080;
            id v206 = [v192 uuid];
            if (v206)
            {
              uint64_t v207 = v206;
              uint64_t v208 = static String._unconditionallyBridgeFromObjectiveC(_:)(v206);
              uint64_t v210 = v209;
            }

            else
            {
              uint64_t v208 = 0LL;
              uint64_t v210 = 0LL;
            }

            uint64_t v255 = v208;
            uint64_t v256 = v210;
            uint64_t v211 = String.init<A>(describing:)(&v255, v202);
            unint64_t v213 = v212;
            uint64_t v255 = sub_100178E7C(v211, v212, (uint64_t *)&v260);
            uint64_t v214 = v233;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, v233, v196 + 14, v196 + 22);

            uint64_t v215 = swift_bridgeObjectRelease(v213);
            *(_WORD *)(v196 + 22) = 2081;
            uint64_t v255 = MTPodcast.adamId.getter(v215);
            LOBYTE(v256) = v216 & 1;
            uint64_t v217 = sub_100126450(&qword_1002B5840);
            uint64_t v218 = String.init<A>(describing:)(&v255, v217);
            unint64_t v220 = v219;
            uint64_t v255 = sub_100178E7C(v218, v219, (uint64_t *)&v260);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, v214, v196 + 24, v196 + 32);

            swift_bridgeObjectRelease(v220);
            *(_WORD *)(v196 + 32) = 1024;
            LODWORD(v220) = [v192 subscribed];

            LODWORD(v255) = v220;
            uint64_t v221 = v229;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, v229, v196 + 34, v196 + 38);

            *(_WORD *)(v196 + 3_Block_object_dispose(va, 8) = 1024;
            LODWORD(v220) = [v192 hidden];

            LODWORD(v255) = v220;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, v221, v196 + 40, v196 + 44);

            *(_WORD *)(v196 + 44) = 1024;
            LODWORD(v220) = [v192 isImplicitlyFollowed];

            LODWORD(v255) = v220;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, v221, v196 + 46, v196 + 50);

            v222 = v254;
            _os_log_impl( (void *)&_mh_execute_header,  v254,  v194,  "[NonFollowedShows] Existing local podcast has no uuid: %{private}s, uuid: %s, adamID: %{private}s, isFollo wed: %{BOOL}d, isHidden: %{BOOL}d, isImplicitlyFollowed: %{BOOL}d.",  (uint8_t *)v196,  0x32u);
            uint64_t v223 = v224;
            swift_arrayDestroy(v224, 3LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v223, -1LL, -1LL);
            swift_slowDealloc(v196, -1LL, -1LL);

            (*(void (**)(char *, uint64_t))(v252 + 8))(v226, v253);
            uint64_t v18 = v249;
            uint64_t v28 = v251;
          }

          else
          {

            v137(v191, v253);
          }

          uint64_t v32 = *(os_log_s **)(v20 + 8);
          uint64_t v19 = v240;
          uint64_t v33 = v250;
          uint64_t v7 = v190;
        }

void sub_1001473E4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v35 - v16;
  if (a1 || a2 < 10)
  {
    uint64_t v27 = static Logger.cloudSync.getter(v15);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc(22LL, -1LL);
      *(_DWORD *)uint64_t v30 = 134218240;
      unint64_t v36 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v30 + 4, v30 + 12);
      *(_WORD *)(v30 + 12) = 2048;
      unint64_t v36 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v30 + 14, v30 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "%ld non followed shows added from cloud, %ld non-followed-shows removed locally.",  (uint8_t *)v30,  0x16u);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }

  else
  {
    uint64_t v18 = static Logger.cloudSync.getter(v15);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (_DWORD *)swift_slowAlloc(22LL, -1LL);
      uint64_t v35 = a3;
      uint64_t v22 = a2;
      uint64_t v23 = v21;
      *uint64_t v21 = 134218240;
      unint64_t v36 = 0LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v21 + 1, v21 + 3);
      *((_WORD *)v23 + 6) = 2048;
      unint64_t v36 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, (char *)v23 + 14, (char *)v23 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "[NonFollowedShows] Big library removal detected remoteNonFollowedShowsCount = %ld, localNonFollowedShowsToDeleteCount = %ld",  (uint8_t *)v23,  0x16u);
      uint64_t v24 = v23;
      a2 = v22;
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    uint64_t v25 = *(void **)(v5 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_cloudSyncBugReporter);
    if (a4) {
      NSString v26 = String._bridgeToObjectiveC()();
    }
    else {
      NSString v26 = 0LL;
    }
    uint64_t v31 = sub_100126450(&qword_1002B5828);
    uint64_t inited = swift_initStackObject(v31, v38);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4150;
    unint64_t v36 = 0xD00000000000001BLL;
    unint64_t v37 = 0x800000010021AA20LL;
    AnyHashable.init<A>(_:)( (void *)(inited + 32),  &v36,  &type metadata for String,  &protocol witness table for String);
    *(void *)(inited + 96) = &type metadata for Int;
    *(void *)(inited + 72) = 0LL;
    unint64_t v36 = 0xD000000000000022LL;
    unint64_t v37 = 0x800000010021AA40LL;
    AnyHashable.init<A>(_:)( (void *)(inited + 104),  &v36,  &type metadata for String,  &protocol witness table for String);
    *(void *)(inited + 16_Block_object_dispose(va, 8) = &type metadata for Int;
    *(void *)(inited + 144) = a2;
    unint64_t v33 = sub_100159404(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v33);
    [v25 reportNonFollowedShowsSyncIssue:1 version:v26 userInfo:isa];
  }

void sub_1001477A4(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *a1;
  int v11 = *((unsigned __int8 *)a1 + 16);
  if (*((_BYTE *)a1 + 16))
  {
    unint64_t v12 = a1[1];
    if (v11 == 1)
    {
      uint64_t v13 = swift_bridgeObjectRetain(v12);
      static Logger.cloudSync.getter(v13);
      uint64_t v14 = swift_bridgeObjectRetain(v12);
      uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v22 = a3;
        uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v21 = swift_slowAlloc(32LL, -1LL);
        uint64_t v24 = v21;
        *(_DWORD *)uint64_t v17 = 136315138;
        swift_bridgeObjectRetain(v12);
        uint64_t v23 = sub_100178E7C(v10, v12, &v24);
        a3 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v17 + 4, v17 + 12);
        sub_1001496CC(v10, v12, 1u);
        sub_1001496CC(v10, v12, 1u);
        swift_bridgeObjectRelease(v12);
        _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "[NonFollowedShows] A remote podcast identified by a local ID as the UUID does not make any sense at all. Offending UUID: %s",  v17,  0xCu);
        uint64_t v18 = v21;
        swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1LL, -1LL);
        swift_slowDealloc(v17, -1LL, -1LL);
      }

      else
      {
        sub_1001496CC(v10, v12, 1u);
        sub_1001496CC(v10, v12, 1u);
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      id v19 = 0LL;
    }

    else
    {
      NSString v20 = String._bridgeToObjectiveC()();
      id v19 = [a2 podcastForFeedUrl:v20];
    }
  }

  else
  {
    id v19 = [a2 podcastForStoreId:*a1];
  }

  *a3 = v19;
}

uint64_t sub_100147A14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = Date.init()(v12);
  double v16 = Date.timeIntervalSinceReferenceDate.getter(v15);
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  uint64_t v18 = static Logger.cloudSync.getter(v17);
  LOBYTE(v10) = static os_log_type_t.default.getter(v18);
  uint64_t v19 = swift_bridgeObjectRetain_n(a2, 2LL);
  NSString v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = v10;
  if (os_log_type_enabled(v20, (os_log_type_t)v10))
  {
    uint64_t v22 = swift_slowAlloc(22LL, -1LL);
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v45 = v3;
    uint64_t v46 = v23;
    uint64_t v24 = v23;
    *(_DWORD *)uint64_t v22 = 136315394;
    uint64_t v44 = v6;
    uint64_t v47 = a1;
    v48[0] = a2;
    swift_bridgeObjectRetain(a2);
    uint64_t v25 = sub_100126450(&qword_1002B5820);
    uint64_t v26 = String.init<A>(describing:)(&v47, v25);
    uint64_t v43 = a1;
    unint64_t v28 = v27;
    uint64_t v47 = sub_100178E7C(v26, v27, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v22 + 12) = 2048;
    uint64_t v47 = *(void *)&v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v22 + 14, v22 + 22);
    _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "[NonFollowedShows] Bumping NonFollowedShowsSync version: %s, nonFollowedShowsLastSyncTimestamp: %f, isNonFollowedS howsSyncDirty = false.",  (uint8_t *)v22,  0x16u);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v29 = v24;
    uint64_t v3 = v45;
    swift_slowDealloc(v29, -1LL, -1LL);
    uint64_t v30 = v22;
    uint64_t v31 = v43;
    swift_slowDealloc(v30, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v44);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v31 = a1;
  }

  uint64_t v32 = v3 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  swift_beginAccess( v3 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage,  &v47,  33LL,  0LL);
  uint64_t v33 = *(void *)(v32 + 24);
  uint64_t v34 = *(void *)(v32 + 32);
  sub_10013767C(v32, v33);
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v34 + 72);
  __n128 v36 = swift_bridgeObjectRetain(a2);
  v35(v31, a2, v33, v34, v36);
  uint64_t v37 = *(void *)(v32 + 24);
  uint64_t v38 = *(void *)(v32 + 32);
  sub_10013767C(v32, v37);
  (*(void (**)(void, uint64_t, uint64_t))(v38 + 24))(0LL, v37, v38);
  uint64_t v39 = *(void *)(v32 + 24);
  uint64_t v40 = *(void *)(v32 + 32);
  sub_10013767C(v32, v39);
  (*(void (**)(double, void, uint64_t, uint64_t))(v40 + 48))(COERCE_DOUBLE(*(void *)&v16), 0LL, v39, v40);
  return swift_endAccess(&v47);
}

uint64_t sub_100147D44(uint64_t result, _BYTE **a2)
{
  uint64_t v2 = *a2;
  _BYTE *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_100147D54@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result) {
    *a2 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

void sub_100147D64( uint8_t *a1, uint32_t a2, os_log_s *a3, os_signpost_type_t a4, uint64_t a5, const char *a6, const char *a7)
{
  os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, a3, a4, v13, a6, a7, a1, a2);
}

id sub_100147DE4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for OSSignposter(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v18[3] = type metadata accessor for NonFollowedShowsSyncStorage();
  v18[4] = &protocol witness table for NonFollowedShowsSyncStorage;
  v18[0] = a1;
  uint64_t v10 = a3;
  uint64_t v11 = static OSSignposter.cloudSync.getter(v10);
  uint64_t v12 = OSSignposter.logHandle.getter(v11);
  OSSignpostID.init(log:)(v12);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(void *)&v10[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostState] = 0LL;
  sub_1001376A4( (uint64_t)v18,  (uint64_t)&v10[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage]);
  *(void *)&v10[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_cloudSyncBugReporter] = a2;
  swift_unknownObjectRetain(a2);

  os_signpost_id_t v13 = (objc_class *)type metadata accessor for NonFollowedShowsSyncProcessor(0LL);
  v17.receiver = v10;
  v17.super_class = v13;
  id v14 = objc_msgSendSuper2(&v17, "init");
  sub_100136648(v18);
  return v14;
}

uint64_t sub_100147F18(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v53 = a1;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v58 = *(void *)(v5 - 8);
  uint64_t v59 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  id v14 = (char *)&v51 - v13;
  uint64_t v15 = type metadata accessor for OSSignposter(0LL);
  uint64_t v55 = *(void *)(v15 - 8);
  uint64_t v56 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static OSSignposter.cloudSync.getter(v16);
  uint64_t v54 = v9;
  char v60 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v60(v14, v2 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostID, v8);
  uint64_t v19 = swift_bridgeObjectRetain_n(a2, 2LL);
  NSString v20 = (os_log_s *)OSSignposter.logHandle.getter(v19);
  int v52 = static os_signpost_type_t.begin.getter(v20);
  char v21 = OS_os_log.signpostsEnabled.getter();
  uint64_t v57 = v7;
  if ((v21 & 1) != 0)
  {
    v60(v12, (uint64_t)v14, v8);
    uint64_t v22 = swift_slowAlloc(12LL, -1LL);
    uint64_t v51 = v2;
    uint64_t v23 = (uint8_t *)v22;
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    uint64_t v64 = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v62 = sub_100178E7C(v53, a2, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v23 + 4, v23 + 12);
    uint64_t v25 = swift_bridgeObjectRelease_n(a2, 3LL);
    os_signpost_id_t v26 = OSSignpostID.rawValue.getter(v25);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  (os_signpost_type_t)v52,  v26,  "NonFollowedShowsSyncProcessor.GET",  "%s",  v23,  0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v27 = v24;
    uint64_t v7 = v57;
    swift_slowDealloc(v27, -1LL, -1LL);
    unint64_t v28 = v23;
    uint64_t v3 = v51;
    swift_slowDealloc(v28, -1LL, -1LL);

    uint64_t v29 = v54;
    (*(void (**)(char *, uint64_t))(v54 + 8))(v12, v8);
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);

    uint64_t v29 = v54;
  }

  v60(v12, (uint64_t)v14, v8);
  uint64_t v30 = type metadata accessor for OSSignpostIntervalState(0LL);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  uint64_t v31 = OSSignpostIntervalState.init(id:isOpen:)(v12, 1LL);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v8);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v18, v56);
  uint64_t v32 = *(void *)(v3 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostState);
  *(void *)(v3 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostState) = v31;
  swift_release(v32);
  uint64_t v33 = v3 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  swift_beginAccess( v3 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage,  &v62,  0LL,  0LL);
  sub_1001376A4(v33, (uint64_t)&v64);
  uint64_t v34 = v66;
  uint64_t v35 = v67;
  sub_1001361FC(&v64, v66);
  uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 64))(v34, v35);
  uint64_t v38 = v37;
  uint64_t v39 = sub_100136648(&v64);
  uint64_t v40 = static Logger.cloudSync.getter(v39);
  LOBYTE(v35) = static os_log_type_t.default.getter(v40);
  uint64_t v41 = swift_bridgeObjectRetain_n(v38, 2LL);
  uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
  os_log_type_t v43 = v35;
  if (os_log_type_enabled(v42, (os_log_type_t)v35))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v45 = swift_slowAlloc(32LL, -1LL);
    uint64_t v61 = v45;
    *(_DWORD *)uint64_t v44 = 136315138;
    uint64_t v64 = v36;
    uint64_t v65 = v38;
    swift_bridgeObjectRetain(v38);
    uint64_t v46 = sub_100126450(&qword_1002B5820);
    uint64_t v47 = String.init<A>(describing:)(&v64, v46);
    unint64_t v49 = v48;
    uint64_t v64 = sub_100178E7C(v47, v48, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v44 + 4, v44 + 12);
    swift_bridgeObjectRelease_n(v38, 2LL);
    swift_bridgeObjectRelease(v49);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "[NonFollowedShows] Version for Get transaction: %s", v44, 0xCu);
    swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1LL, -1LL);
    swift_slowDealloc(v44, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v59);
  }

  else
  {

    swift_bridgeObjectRelease_n(v38, 2LL);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v7, v59);
  }

  return v36;
}

uint64_t sub_100148400(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v101 = a1;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v106 = &v96[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = &v96[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v11);
  uint64_t v15 = &v96[-v14];
  uint64_t v16 = type metadata accessor for OSSignposter(0LL);
  uint64_t v103 = *(void *)(v16 - 8);
  uint64_t v104 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = &v96[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  static OSSignposter.cloudSync.getter(v17);
  uint64_t v105 = v3;
  uint64_t v102 = v10;
  id v107 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16);
  v107(v15, v3 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostID, v9);
  uint64_t v20 = swift_bridgeObjectRetain_n(a2, 2LL);
  char v21 = (os_log_s *)OSSignposter.logHandle.getter(v20);
  int v97 = static os_signpost_type_t.begin.getter(v21);
  char v22 = OS_os_log.signpostsEnabled.getter();
  uint64_t v99 = v6;
  uint64_t v100 = a3;
  uint64_t v98 = v7;
  if ((v22 & 1) != 0)
  {
    v107(v13, (uint64_t)v15, v9);
    uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    v111[0] = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v109 = sub_100178E7C(v101, a2, v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110, v23 + 4, v23 + 12);
    uint64_t v25 = swift_bridgeObjectRelease_n(a2, 3LL);
    os_signpost_id_t v26 = OSSignpostID.rawValue.getter(v25);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v21,  (os_signpost_type_t)v97,  v26,  "NonFollowedShowsSyncProcessor.SET",  "%s",  v23,  0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);

    uint64_t v27 = v102;
    (*(void (**)(_BYTE *, uint64_t))(v102 + 8))(v13, v9);
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);

    uint64_t v27 = v102;
  }

  v107(v13, (uint64_t)v15, v9);
  uint64_t v28 = type metadata accessor for OSSignpostIntervalState(0LL);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  uint64_t v29 = OSSignpostIntervalState.init(id:isOpen:)(v13, 1LL);
  (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v15, v9);
  (*(void (**)(_BYTE *, uint64_t))(v103 + 8))(v19, v104);
  uint64_t v30 = v105;
  uint64_t v31 = *(void *)(v105 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostState);
  *(void *)(v105 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostState) = v29;
  swift_release(v31);
  uint64_t v32 = v30 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  swift_beginAccess( v30 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage,  &v109,  0LL,  0LL);
  sub_1001376A4(v32, (uint64_t)v111);
  uint64_t v33 = v112;
  uint64_t v34 = v113;
  sub_1001361FC(v111, v112);
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 120))(v33, v34);
  uint64_t v36 = sub_100136648(v111);
  uint64_t v37 = v106;
  if (!*(void *)(v35 + 16))
  {
    sub_1001376A4(v32, (uint64_t)v111);
    uint64_t v56 = v112;
    uint64_t v57 = v113;
    sub_1001361FC(v111, v112);
    uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 64))(v56, v57);
    if (!v59)
    {
      uint64_t v36 = sub_100136648(v111);
      goto LABEL_5;
    }

    uint64_t v60 = v58;
    unint64_t v61 = v59;
    uint64_t result = sub_100136648(v111);
    uint64_t v63 = HIBYTE(v61) & 0xF;
    uint64_t v64 = v60 & 0xFFFFFFFFFFFFLL;
    if ((v61 & 0x2000000000000000LL) != 0) {
      uint64_t v65 = HIBYTE(v61) & 0xF;
    }
    else {
      uint64_t v65 = v60 & 0xFFFFFFFFFFFFLL;
    }
    if (!v65)
    {
      uint64_t v36 = swift_bridgeObjectRelease(v61);
      goto LABEL_5;
    }

    if ((v61 & 0x1000000000000000LL) != 0)
    {
      uint64_t v67 = sub_1001696A0(v60, v61, 10LL);
      char v69 = v95;
      goto LABEL_60;
    }

    if ((v61 & 0x2000000000000000LL) == 0)
    {
      if ((v60 & 0x1000000000000000LL) != 0) {
        uint64_t v66 = (unsigned __int8 *)((v61 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v66 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v60, v61);
      }
      uint64_t v67 = (uint64_t)sub_10016968C(v66, v64, 10LL);
      char v69 = v68 & 1;
LABEL_60:
      uint64_t v36 = swift_bridgeObjectRelease(v61);
      if ((v69 & 1) == 0 && v67 >= 11)
      {
        unint64_t v86 = *(void **)(v30 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_cloudSyncBugReporter);
        sub_1001376A4(v32, (uint64_t)v111);
        uint64_t v87 = v112;
        uint64_t v88 = v113;
        sub_1001361FC(v111, v112);
        (*(void (**)(uint64_t, uint64_t))(v88 + 64))(v87, v88);
        if (v89)
        {
          uint64_t v90 = v89;
          NSString v91 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v90);
        }

        else
        {
          NSString v91 = 0LL;
        }

        sub_100136648(v111);
        [v86 reportNonFollowedShowsSyncIssue:0 version:v91 userInfo:0];
      }

      goto LABEL_5;
    }

    v111[0] = v60;
    v111[1] = v61 & 0xFFFFFFFFFFFFFFLL;
    if (v60 == 43)
    {
      if (!v63) {
        goto LABEL_76;
      }
      uint64_t v67 = (BYTE1(v60) - 48);
      if (v63 != 2)
      {
        uint64_t v67 = 10LL * (BYTE1(v60) - 48) + (BYTE2(v60) - 48);
        uint64_t v77 = v63 - 3;
        if (v77)
        {
          uint64_t v78 = (unsigned __int8 *)v111 + 3;
          while (1)
          {
            unsigned int v79 = *v78 - 48;
            if (v79 > 9) {
              goto LABEL_47;
            }
            uint64_t v80 = 10 * v67;
            uint64_t v67 = v80 + v79;
            char v69 = 0;
            ++v78;
            if (!--v77) {
              goto LABEL_60;
            }
          }
        }
      }
    }

    else
    {
      if (v60 == 45)
      {
        if (v63)
        {
          if (v63 != 1 && (BYTE1(v60) - 48) <= 9u)
          {
            if (v63 == 2)
            {
              char v69 = 0;
              uint64_t v67 = -(uint64_t)(BYTE1(v60) - 48);
              goto LABEL_60;
            }

            if ((BYTE2(v60) - 48) <= 9u)
            {
              uint64_t v67 = -10LL * (BYTE1(v60) - 48) - (BYTE2(v60) - 48);
              uint64_t v85 = v63 - 3;
              if (!v85) {
                goto LABEL_59;
              }
              uint64_t v92 = (unsigned __int8 *)v111 + 3;
              while (1)
              {
                unsigned int v93 = *v92 - 48;
                if (v93 > 9) {
                  break;
                }
                uint64_t v94 = 10 * v67;
                uint64_t v67 = v94 - v93;
                char v69 = 0;
                ++v92;
                if (!--v85) {
                  goto LABEL_60;
                }
              }
            }
          }

LABEL_47:
          uint64_t v67 = 0LL;
          char v69 = 1;
          goto LABEL_60;
        }

        __break(1u);
LABEL_76:
        __break(1u);
        return result;
      }

      uint64_t v67 = (v60 - 48);
      if (v63 != 1)
      {
        uint64_t v67 = 10LL * (v60 - 48) + (BYTE1(v60) - 48);
        uint64_t v81 = v63 - 2;
        if (v81)
        {
          uint64_t v82 = (unsigned __int8 *)v111 + 2;
          while (1)
          {
            unsigned int v83 = *v82 - 48;
            if (v83 > 9) {
              goto LABEL_47;
            }
            uint64_t v84 = 10 * v67;
            uint64_t v67 = v84 + v83;
            char v69 = 0;
            ++v82;
            if (!--v81) {
              goto LABEL_60;
            }
          }
        }
      }
    }

          uint64_t v66 = 0LL;
          char v68 = 1;
          goto LABEL_60;
        }

        __break(1u);
LABEL_76:
        __break(1u);
        return result;
      }

      uint64_t v66 = (v59 - 48);
      if (v62 != 1)
      {
        uint64_t v66 = 10LL * (v59 - 48) + (BYTE1(v59) - 48);
        uint64_t v80 = v62 - 2;
        if (v80)
        {
          uint64_t v81 = (unsigned __int8 *)v110 + 2;
          while (1)
          {
            uint64_t v82 = *v81 - 48;
            if (v82 > 9) {
              goto LABEL_47;
            }
            unsigned int v83 = 10 * v66;
            uint64_t v66 = v83 + v82;
            char v68 = 0;
            ++v81;
            if (!--v80) {
              goto LABEL_60;
            }
          }
        }
      }
    }

uint64_t sub_100148DFC( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void), uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t v33 = a3;
  uint64_t v34 = a1;
  unint64_t v35 = a2;
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = static Logger.cloudSync.getter(v15);
  os_log_type_t v19 = static os_log_type_t.default.getter(v18);
  uint64_t v20 = swift_bridgeObjectRetain_n(a4, 2LL);
  char v21 = (os_log_s *)Logger.logObject.getter(v20);
  if (os_log_type_enabled(v21, v19))
  {
    uint64_t v30 = a7;
    uint64_t v22 = swift_slowAlloc(12LL, -1LL);
    uint64_t v32 = v9;
    uint64_t v23 = (uint8_t *)v22;
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    uint64_t v31 = a8;
    uint64_t v25 = v24;
    uint64_t v39 = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    swift_bridgeObjectRetain(a4);
    uint64_t v38 = sub_100178E7C(v33, a4, &v39);
    a7 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease_n(a4, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v19,  "[NonFollowedShows] Updating local cache after GET transaction for key %s",  v23,  0xCu);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v26 = v25;
    a8 = v31;
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a4, 2LL);
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  uint64_t v28 = v36;
  uint64_t v27 = v37;
  sub_100144168(v34, v35, v36, v37);
  return sub_100144A5C(v28, v27, a7, a8);
}

uint64_t sub_100149008( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v29 = a1;
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = static Logger.cloudSync.getter(v13);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  uint64_t v18 = swift_bridgeObjectRetain_n(a2, 2LL);
  os_log_type_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  if (os_log_type_enabled(v19, v17))
  {
    uint64_t v26 = a5;
    uint64_t v20 = swift_slowAlloc(12LL, -1LL);
    uint64_t v27 = a6;
    char v21 = (uint8_t *)v20;
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v28 = v7;
    uint64_t v23 = v22;
    uint64_t v33 = v22;
    *(_DWORD *)char v21 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v32 = sub_100178E7C(v29, a2, &v33);
    a5 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v19,  v17,  "[NonFollowedShows] Successful SET transaction for key %s, marking everything as synced and finishing normally.",  v21,  0xCu);
    swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    uint64_t v24 = v21;
    a6 = v27;
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return sub_100144A5C(v30, v31, a5, a6);
}

uint64_t sub_1001491F8( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void), uint64_t a8)
{
  uint64_t v9 = v8;
  unint64_t v41 = a2;
  uint64_t v42 = a5;
  uint64_t v38 = a3;
  uint64_t v40 = a1;
  uint64_t v39 = type metadata accessor for Logger(0LL);
  uint64_t v14 = *(void *)(v39 - 8);
  uint64_t v15 = __chkstk_darwin(v39);
  os_log_type_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = static Logger.cloudSync.getter(v15);
  os_log_type_t v19 = static os_log_type_t.default.getter(v18);
  uint64_t v20 = swift_bridgeObjectRetain_n(a4, 2LL);
  char v21 = (os_log_s *)Logger.logObject.getter(v20);
  if (os_log_type_enabled(v21, v19))
  {
    uint64_t v36 = a8;
    uint64_t v22 = swift_slowAlloc(12LL, -1LL);
    uint64_t v37 = a6;
    uint64_t v23 = (uint8_t *)v22;
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    unint64_t v35 = a7;
    uint64_t v25 = v24;
    v44[0] = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    swift_bridgeObjectRetain(a4);
    uint64_t v43 = sub_100178E7C(v38, a4, v44);
    a8 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease_n(a4, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v19,  "[NonFollowedShows] Failure on SET transaction for key %s, Bookkeeper copy has diverged from local copy, we must merge both.",  v23,  0xCu);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v26 = v25;
    a7 = v35;
    swift_slowDealloc(v26, -1LL, -1LL);
    uint64_t v27 = v23;
    a6 = v37;
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a4, 2LL);
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v39);
  uint64_t v28 = v42;
  sub_100144168(v40, v41, v42, a6);
  sub_100145040(a7, a8);
  uint64_t v29 = v9 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  swift_beginAccess( v9 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage,  v44,  33LL,  0LL);
  uint64_t v30 = *(void *)(v29 + 24);
  uint64_t v31 = *(void *)(v29 + 32);
  sub_10013767C(v29, v30);
  uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v31 + 72);
  __n128 v33 = swift_bridgeObjectRetain(a6);
  v32(v28, a6, v30, v31, v33);
  return swift_endAccess(v44);
}

uint64_t sub_10014945C()
{
  return type metadata accessor for NonFollowedShowsSyncProcessor(0LL);
}

uint64_t sub_100149464(uint64_t a1)
{
  v4[0] = "(";
  v4[1] = &unk_1001C46C8;
  uint64_t result = type metadata accessor for OSSignpostID(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    void v4[3] = &unk_1001C46E0;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1001494EC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100149510(char a1)
{
  return sub_100167244(a1, *(void *)(v1 + 16));
}

uint64_t sub_100149518(uint64_t a1)
{
  uint64_t v2 = sub_100126450(&qword_1002B5818);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100149558()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10014957C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1001495B8()
{
  return sub_1001455E4( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void **)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48));
}

uint64_t sub_1001495C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001495D8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1001495E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100126450(&qword_1002B5818);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100149628()
{
  unint64_t result = qword_1002B50A0;
  if (!qword_1002B50A0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___MTPodcast);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B50A0);
  }

  return result;
}

unint64_t sub_100149664()
{
  unint64_t result = qword_1002B5838;
  if (!qword_1002B5838)
  {
    uint64_t v1 = sub_1001264DC(&qword_1002B5830);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002B5838);
  }

  return result;
}

uint64_t sub_1001496B0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return result;
}

uint64_t sub_1001496CC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return result;
}

uint64_t Migration.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8Podcasts9Migration_date;
  uint64_t v4 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t Migration.uuids.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC8Podcasts9Migration_uuids));
}

void Migration.init()()
{
}

BOOL sub_100149810(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_100149828()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10014986C()
{
}

Swift::Int sub_100149894(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1001498D4()
{
  if (*v0) {
    return 0x7364697575LL;
  }
  else {
    return 1702125924LL;
  }
}

uint64_t sub_100149904@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10014A62C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100149928()
{
  return 0LL;
}

void sub_100149934(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100149940(uint64_t a1)
{
  unint64_t v2 = sub_100149BC0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100149968(uint64_t a1)
{
  unint64_t v2 = sub_100149BC0();
  return CodingKey.debugDescription.getter(a1, v2);
}

id Migration.__deallocating_deinit()
{
  return sub_10014A5F8(0LL, (uint64_t (*)(void))type metadata accessor for Migration);
}

uint64_t type metadata accessor for Migration(uint64_t a1)
{
  uint64_t result = qword_1002B58A0;
  if (!qword_1002B58A0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Migration);
  }
  return result;
}

uint64_t Migration.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100126450(&qword_1002B5850);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1001361FC(a1, v9);
  unint64_t v11 = sub_100149BC0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for Migration.CodingKeys,  &type metadata for Migration.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = v3 + OBJC_IVAR____TtC8Podcasts9Migration_date;
  char v21 = 0;
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = sub_100127210( &qword_1002B5860,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v12, &v21, v5, v13, v14);
  if (!v2)
  {
    uint64_t v20 = *(void *)(v3 + OBJC_IVAR____TtC8Podcasts9Migration_uuids);
    char v19 = 1;
    uint64_t v15 = sub_100126450(&qword_1002B66A0);
    uint64_t v16 = sub_10013D278( &qword_1002B5438,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100149BC0()
{
  unint64_t result = qword_1002B5858;
  if (!qword_1002B5858)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001C4860, &type metadata for Migration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B5858);
  }

  return result;
}

void *Migration.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return Migration.init(from:)(a1);
}

void *Migration.init(from:)(void *a1)
{
  id v3 = v1;
  uint64_t v24 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  v23[1] = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_100126450(&qword_1002B5868);
  uint64_t v7 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v10 = a1[4];
  uint64_t v26 = a1;
  uint64_t v12 = sub_1001361FC(a1, v11);
  unint64_t v13 = sub_100149BC0();
  uint64_t v14 = v3;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for Migration.CodingKeys,  &type metadata for Migration.CodingKeys,  v13,  v11,  v10);
  if (v2)
  {
    sub_100136648(v26);

    uint64_t v17 = type metadata accessor for Migration(0LL);
    swift_deallocPartialClassInstance( v14,  v17,  *(unsigned int *)((swift_isaMask & *v14) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v14) + 0x34LL));
  }

  else
  {
    LOBYTE(v29) = 0;
    uint64_t v15 = sub_100127210( &qword_1002B5870,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v16 = v25;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v24, &v29, v25, v24, v15);
    char v19 = *(void (**)(void))(v5 + 32);
    v23[0] = (char *)v14 + OBJC_IVAR____TtC8Podcasts9Migration_date;
    v19();
    uint64_t v20 = sub_100126450(&qword_1002B66A0);
    char v28 = 1;
    uint64_t v21 = sub_10013D278( &qword_1002B5418,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v20, &v28, v16, v20, v21);
    *(void *)((char *)v14 + OBJC_IVAR____TtC8Podcasts9Migration_uuids) = v29;

    uint64_t v22 = (objc_class *)type metadata accessor for Migration(0LL);
    v27.receiver = v14;
    v27.super_class = v22;
    uint64_t v12 = objc_msgSendSuper2(&v27, "init");
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v16);
    sub_100136648(v26);
  }

  return v12;
}

void *sub_100149F04@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v5 = objc_allocWithZone((Class)type metadata accessor for Migration(0LL));
  unint64_t result = Migration.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100149F58(void *a1)
{
  return Migration.encode(to:)(a1);
}

uint64_t sub_100149F78()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100134284(0LL, (unint64_t *)&qword_1002B4868, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v10);
  uint64_t v16 = _swiftEmptyArrayStorage;
  uint64_t v11 = sub_100127210( (unint64_t *)&qword_1002B4870,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v12 = sub_100126450((uint64_t *)&unk_1002B5660);
  uint64_t v13 = sub_10014B248((unint64_t *)&qword_1002B4880, (uint64_t *)&unk_1002B5660);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v4, v11);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002DLL,  0x800000010021AC60LL,  v9,  v6,  v3,  0LL);
  qword_1002B5848 = result;
  return result;
}

uint64_t sub_10014A148(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = a2;
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v38 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v38 - v15;
  id v17 = [(id)objc_opt_self(MTConstants) sharedDocumentsDirectory];
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v17);

  uint64_t v44 = 118LL;
  unint64_t v45 = 0xE100000000000000LL;
  uint64_t v43 = a1;
  v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(object);
  v20._uint64_t countAndFlagsBits = 0x6974617267696D2DLL;
  v20._object = (void *)0xEA00000000006E6FLL;
  String.append(_:)(v20);
  unint64_t v21 = v45;
  uint64_t v40 = v16;
  URL.appendingPathComponent(_:)(v44, v45);
  swift_bridgeObjectRelease(v21);
  URL.appendingPathExtension(_:)(0x7473696C70LL, 0xE500000000000000LL);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
  uint64_t v41 = v7;
  uint64_t v23 = v22(v11, v7);
  Date.init()(v23);
  uint64_t v24 = (objc_class *)type metadata accessor for Migration(0LL);
  uint64_t v25 = (char *)objc_allocWithZone(v24);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(&v25[OBJC_IVAR____TtC8Podcasts9Migration_date], v6, v3);
  uint64_t v26 = v39;
  *(void *)&v25[OBJC_IVAR____TtC8Podcasts9Migration_uuids] = v39;
  v42.receiver = v25;
  v42.super_class = v24;
  *(void *)&double v27 = swift_bridgeObjectRetain(v26).n128_u64[0];
  id v28 = objc_msgSendSuper2(&v42, "init", v27);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v29 = type metadata accessor for PropertyListEncoder(0LL);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  uint64_t v30 = PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter(200LL);
  uint64_t v44 = (uint64_t)v28;
  uint64_t v31 = sub_100127210( &qword_1002B58F8,  type metadata accessor for Migration,  (uint64_t)&protocol conformance descriptor for Migration);
  uint64_t v32 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v44, v24, v31);
  unint64_t v34 = v33;
  Data.write(to:options:)(v14, 0LL, v32, v33);
  sub_10013356C(v32, v34);

  swift_release(v30);
  unint64_t v35 = v14;
  uint64_t v36 = v41;
  v22(v35, v41);
  return v22(v40, v36);
}

id BookmarksMigrationRegistry.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BookmarksMigrationRegistry();
  return objc_msgSendSuper2(&v2, "init");
}

id BookmarksMigrationRegistry.__deallocating_deinit(uint64_t a1)
{
  return sub_10014A5F8(a1, type metadata accessor for BookmarksMigrationRegistry);
}

id sub_10014A5F8(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_10014A62C(uint64_t a1, unint64_t a2)
{
  if (a1 == 1702125924 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702125924LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x7364697575LL && a2 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7364697575LL, 0xE500000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

void _s8Podcasts26BookmarksMigrationRegistryC08registerC02of2atySaySSG_SitFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(a1 + 16))
  {
    if (qword_1002B4810 != -1) {
      swift_once(&qword_1002B4810, sub_100149F78);
    }
    id v20 = (id)qword_1002B5848;
    uint64_t v13 = swift_allocObject(&unk_100247160, 32LL, 7LL);
    *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
    *(void *)(v13 + 24) = a1;
    aBlock[4] = sub_10014B228;
    uint64_t v23 = v13;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_10013D2D8;
    void aBlock[3] = &unk_100247178;
    uint64_t v14 = _Block_copy(aBlock);
    swift_bridgeObjectRetain(a1);
    static DispatchQoS.unspecified.getter(v15);
    unint64_t v21 = _swiftEmptyArrayStorage;
    uint64_t v16 = sub_100127210( (unint64_t *)&qword_1002B4E90,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v17 = sub_100126450((uint64_t *)&unk_1002B5490);
    uint64_t v18 = sub_10014B248((unint64_t *)&qword_1002B4E98, (uint64_t *)&unk_1002B5490);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v4, v16);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v7, v14);
    _Block_release(v14);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    swift_release(v23);
  }

  else
  {
    uint64_t v19 = static os_log_type_t.error.getter(v10);
    sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
    id v20 = (id)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)( v19,  &_mh_execute_header,  v20,  "No UUIDs migrated to bookmarks, nothing to register.",  52LL,  2LL,  _swiftEmptyArrayStorage);
  }

uint64_t _s8Podcasts26BookmarksMigrationRegistryC19migrationRegistered2atAA0C0CSgSi_tFZ_0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v26 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v26 - v10;
  id v12 = [(id)objc_opt_self(MTConstants) sharedDocumentsDirectory];
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v12);

  uint64_t v27 = 118LL;
  unint64_t v28 = 0xE100000000000000LL;
  v26[1] = a1;
  v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(object);
  v15._uint64_t countAndFlagsBits = 0x6974617267696D2DLL;
  v15._object = (void *)0xEA00000000006E6FLL;
  String.append(_:)(v15);
  unint64_t v16 = v28;
  URL.appendingPathComponent(_:)(v27, v28);
  swift_bridgeObjectRelease(v16);
  URL.appendingPathExtension(_:)(0x7473696C70LL, 0xE500000000000000LL);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v3 + 8);
  v17(v6, v2);
  uint64_t v18 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  uint64_t v19 = PropertyListDecoder.init()();
  uint64_t v20 = Data.init(contentsOf:options:)(v9, 0LL);
  unint64_t v22 = v21;
  uint64_t v23 = type metadata accessor for Migration(0LL);
  uint64_t v24 = sub_100127210( &qword_1002B58F0,  type metadata accessor for Migration,  (uint64_t)&protocol conformance descriptor for Migration);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&v27, v23, v20, v22, v23, v24);
  sub_10013356C(v20, v22);
  swift_release(v19);
  v17(v9, v2);
  v17(v11, v2);
  return v27;
}

uint64_t _s8Podcasts26BookmarksMigrationRegistryC06deletecD02atySi_tFZ_0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v33 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v33 - v10;
  id v12 = [(id)objc_opt_self(MTConstants) sharedDocumentsDirectory];
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v12);

  uint64_t v34 = 118LL;
  unint64_t v35 = 0xE100000000000000LL;
  v33[2] = a1;
  v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(object);
  v15._uint64_t countAndFlagsBits = 0x6974617267696D2DLL;
  v15._object = (void *)0xEA00000000006E6FLL;
  String.append(_:)(v15);
  unint64_t v16 = v35;
  URL.appendingPathComponent(_:)(v34, v35);
  swift_bridgeObjectRelease(v16);
  URL.appendingPathExtension(_:)(0x7473696C70LL, 0xE500000000000000LL);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v3 + 8);
  v17(v6, v2);
  id v18 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL._bridgeToObjectiveC()(v19);
  unint64_t v21 = v20;
  uint64_t v34 = 0LL;
  LODWORD(vswift_unknownObjectWeakDestroy(v0 + 16) = [v18 removeItemAtURL:v20 error:&v34];

  uint64_t v22 = v34;
  if ((_DWORD)v16)
  {
    id v23 = (id)v34;
  }

  else
  {
    id v24 = (id)v34;
    uint64_t v25 = _convertNSErrorToError(_:)(v22);

    uint64_t v26 = swift_willThrow();
    uint64_t v27 = static os_log_type_t.error.getter(v26);
    uint64_t v28 = sub_100126450((uint64_t *)&unk_1002B5E60);
    uint64_t v29 = swift_allocObject(v28, 72LL, 7LL);
    *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
    uint64_t v30 = _convertErrorToNSError(_:)(v25);
    *(void *)(v29 + 56) = sub_100134284(0LL, &qword_1002B4F08, &OBJC_CLASS___NSError_ptr);
    *(void *)(v29 + 64) = sub_1001341A4();
    *(void *)(v29 + 32) = v30;
    sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v31 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v31, "Error deleting migration register file %@.", 42LL, 2LL, v29);
    swift_errorRelease(v25);
    swift_bridgeObjectRelease(v29);
  }

  v17(v9, v2);
  return ((uint64_t (*)(char *, uint64_t))v17)(v11, v2);
}

uint64_t type metadata accessor for BookmarksMigrationRegistry()
{
  return objc_opt_self(&OBJC_CLASS____TtC8Podcasts26BookmarksMigrationRegistry);
}

uint64_t sub_10014AF30()
{
  return type metadata accessor for Migration(0LL);
}

uint64_t sub_10014AF38(uint64_t a1)
{
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for Migration.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Migration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for Migration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10014B098 + 4 * byte_1001C4705[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10014B0CC + 4 * byte_1001C4700[v4]))();
}

uint64_t sub_10014B0CC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014B0D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10014B0DCLL);
  }
  return result;
}

uint64_t sub_10014B0E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10014B0F0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10014B0F4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014B0FC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014B108(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10014B110(_BYTE *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Migration.CodingKeys()
{
  return &type metadata for Migration.CodingKeys;
}

unint64_t sub_10014B130()
{
  unint64_t result = qword_1002B58D8;
  if (!qword_1002B58D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001C4838, &type metadata for Migration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B58D8);
  }

  return result;
}

unint64_t sub_10014B178()
{
  unint64_t result = qword_1002B58E0;
  if (!qword_1002B58E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001C47A8, &type metadata for Migration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B58E0);
  }

  return result;
}

unint64_t sub_10014B1C0()
{
  unint64_t result = qword_1002B58E8;
  if (!qword_1002B58E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001C47D0, &type metadata for Migration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B58E8);
  }

  return result;
}

uint64_t sub_10014B204()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10014B228()
{
  return sub_10014A148(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10014B230(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10014B240(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10014B248(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_1001264DC(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

void sub_10014B28C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  int v8 = *(void (**)(void *, uint64_t, void *))(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  swift_retain(v7);
  id v10 = a2;
  id v9 = a4;
  v8(a2, a3, a4);
  swift_release(v7);
}

id sub_10014B308()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for ForegroundSyncUtil(0)) init];
  static ForegroundSyncUtil.shared = (uint64_t)result;
  return result;
}

uint64_t *ForegroundSyncUtil.shared.unsafeMutableAddressor()
{
  if (qword_1002B4818 != -1) {
    swift_once(&qword_1002B4818, sub_10014B308);
  }
  return &static ForegroundSyncUtil.shared;
}

id static ForegroundSyncUtil.shared.getter()
{
  if (qword_1002B4818 != -1) {
    swift_once(&qword_1002B4818, sub_10014B308);
  }
  return (id)static ForegroundSyncUtil.shared;
}

Swift::Void __swiftcall ForegroundSyncUtil.setNeedsSyncing()()
{
  *(_BYTE *)(v0 + OBJC_IVAR___MTForegroundSyncUtil_needsSyncing) = 1;
}

Swift::Void __swiftcall ForegroundSyncUtil.syncEverythingIfNeeded()()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(_BYTE *)(v0 + OBJC_IVAR___MTForegroundSyncUtil_needsSyncing) & 1) != 0)
  {
    sub_10014CB1C();
  }

  else
  {
    sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v5 = static OS_os_log.cloudSync.getter();
    unsigned int v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      int v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)int v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[Foreground Sync] Not syncing. Already synced.", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }

uint64_t ForegroundSyncUtil.lastExpectedFeedsUpdateDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___MTForegroundSyncUtil_lastExpectedFeedsUpdateDate;
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t v4 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t ForegroundSyncUtil.lastExpectedFeedsUpdateDate.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR___MTForegroundSyncUtil_lastExpectedFeedsUpdateDate;
  swift_beginAccess(v3, v6, 33LL, 0LL);
  uint64_t v4 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
  return swift_endAccess(v6);
}

uint64_t (*ForegroundSyncUtil.lastExpectedFeedsUpdateDate.modify(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

Swift::Void __swiftcall ForegroundSyncUtil.startCloudSyncAfterPrivacy()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v29 = *(void *)(v6 - 8);
  uint64_t v30 = v6;
  __chkstk_darwin(v6);
  int v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v13 = static OS_os_log.feedUpdate.getter();
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    unint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v28 = v8;
    uint64_t v17 = v5;
    id v18 = v1;
    uint64_t v19 = v2;
    uint64_t v20 = v3;
    unint64_t v21 = v16;
    *(_WORD *)unint64_t v16 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "[Foreground Sync] Initiating cloud sync after privacy acknowledgement.",  v16,  2u);
    uint64_t v22 = v21;
    uint64_t v3 = v20;
    uint64_t v2 = v19;
    uint64_t v1 = v18;
    uint64_t v5 = v17;
    int v8 = v28;
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v23 = swift_allocObject(&unk_100247260, 24LL, 7LL);
  *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  aBlock[4] = sub_10014DD84;
  uint64_t v33 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10013D2D8;
  void aBlock[3] = &unk_100247278;
  id v24 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v1);
  uint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v25 = sub_100127210( (unint64_t *)&qword_1002B4E90,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v26 = sub_100126450((uint64_t *)&unk_1002B5490);
  uint64_t v27 = sub_10014B248((unint64_t *)&qword_1002B4E98, (uint64_t *)&unk_1002B5490);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v26, v27, v2, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v5, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v30);
  swift_release(v33);
}

Swift::Void __swiftcall ForegroundSyncUtil.feedUpdateAllPodcastsOnForeground()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)&v0[OBJC_IVAR___MTForegroundSyncUtil_workQueue];
  uint64_t v9 = swift_allocObject(&unk_1002472B0, 24LL, 7LL);
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  aBlock[4] = sub_10014DDDC;
  uint64_t v17 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10013D2D8;
  void aBlock[3] = &unk_1002472C8;
  uint64_t v10 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  os_log_type_t v15 = _swiftEmptyArrayStorage;
  uint64_t v11 = sub_100127210( (unint64_t *)&qword_1002B4E90,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v12 = sub_100126450((uint64_t *)&unk_1002B5490);
  uint64_t v13 = sub_10014B248((unint64_t *)&qword_1002B4E98, (uint64_t *)&unk_1002B5490);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v4, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_release(v17);
}

void sub_10014BD44()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v7 = static OS_os_log.feedUpdate.getter(v6);
  int v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "[Foreground Sync] Initiating feed updates on app foreground.",  v10,  2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id v11 = [(id)objc_opt_self(IMURLBag) sharedInstance];
  id v12 = [v11 integerForKey:kForegroundFeedUpdateThreshold];

  uint64_t v13 = swift_allocObject(&unk_100247300, 24LL, 7LL);
  swift_unknownObjectWeakInit(v13 + 16, v1);
  aBlock[4] = sub_10014E218;
  uint64_t v16 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10014B28C;
  void aBlock[3] = &unk_100247318;
  uint64_t v14 = _Block_copy(aBlock);
  swift_release(v16);
  [v12 asyncValueWithCompletion:v14];
  _Block_release(v14);
}

uint64_t sub_10014BF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v56 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  os_log_type_t v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  id v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v57 = *(void *)(v13 - 8);
  uint64_t v58 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v55 - v18;
  __chkstk_darwin(v17);
  unint64_t v21 = (char *)&v55 - v20;
  a4 += 16LL;
  swift_beginAccess(a4, v63, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a4);
  if (!Strong)
  {
    uint64_t v32 = sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v33 = static OS_os_log.feedUpdate.getter(v32);
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.error.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "[Foreground Sync] Unable to unwrap self in ForegroundSyncUtil.",  v36,  2u);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    uint64_t v37 = *(uint64_t (**)(char *, uint64_t))(v57 + 8);
    uint64_t v38 = v21;
    return v37(v38, v58);
  }

  uint64_t v23 = (void *)Strong;
  if (a3)
  {
    sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v24 = swift_errorRetain(a3);
    static OS_os_log.feedUpdate.getter(v24);
    uint64_t v25 = swift_errorRetain(a3);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v29 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v28 = 138412290;
      uint64_t v30 = _convertErrorToNSError(_:)(a3);
      uint64_t aBlock = (void **)v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v61, v28 + 4, v28 + 12);
      *uint64_t v29 = v30;
      swift_errorRelease(a3);
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "[Foreground Sync] Failed to fetch feed update threshold from the bag with error: %@",  v28,  0xCu);
      uint64_t v31 = sub_100126450(&qword_1002B53C0);
      swift_arrayDestroy(v29, 1LL, v31);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);

      swift_errorRelease(a3);
    }

    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }

    uint64_t v37 = *(uint64_t (**)(char *, uint64_t))(v57 + 8);
    uint64_t v38 = v19;
    return v37(v38, v58);
  }

  if (a1
    && (uint64_t aBlock = 0LL,
        LOBYTE(v61[0]) = 1,
        static Double._conditionallyBridgeFromObjectiveC(_:result:)(a1, &aBlock),
        (v61[0] & 1) == 0))
  {
    uint64_t v46 = aBlock;
    uint64_t v47 = swift_allocObject(&unk_100247350, 32LL, 7LL);
    *(void *)(v47 + swift_unknownObjectWeakDestroy(v0 + 16) = v46;
    *(void *)(v47 + 24) = v23;
    v61[3] = sub_10014E244;
    uint64_t v62 = v47;
    uint64_t aBlock = _NSConcreteStackBlock;
    v61[0] = 1107296256LL;
    v61[1] = sub_10013D2D8;
    v61[2] = &unk_100247368;
    unint64_t v48 = _Block_copy(&aBlock);
    id v49 = v23;
    static DispatchQoS.unspecified.getter(v49);
    unint64_t v59 = _swiftEmptyArrayStorage;
    uint64_t v50 = sub_100127210( (unint64_t *)&qword_1002B4E90,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v51 = sub_100126450((uint64_t *)&unk_1002B5490);
    uint64_t v52 = sub_10014B248((unint64_t *)&qword_1002B4E98, (uint64_t *)&unk_1002B5490);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v51, v52, v7, v50);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9, v48);
    _Block_release(v48);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v55);

    return swift_release(v62);
  }

  else
  {
    uint64_t v39 = sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v40 = static OS_os_log.feedUpdate.getter(v39);
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.error.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "[Foreground Sync] Unable to cast value for feed update threshold from the bag to a Double.",  v43,  2u);
      swift_slowDealloc(v43, -1LL, -1LL);
      uint64_t v44 = (os_log_s *)v23;
    }

    else
    {
      uint64_t v44 = v41;
      uint64_t v41 = (os_log_s *)v23;
    }

    uint64_t v54 = v57;
    uint64_t v53 = v58;

    return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v16, v53);
  }

uint64_t sub_10014C4C0(char *a1, double a2)
{
  unint64_t v59 = a1;
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v60 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  os_log_type_t v9 = (char *)&v54 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v54 - v10;
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v58 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v54 - v16;
  uint64_t v57 = (void **)sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v18 = ((uint64_t (*)(void))static OS_os_log.feedUpdate.getter)();
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = v12;
    uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v22 = 134217984;
    uint64_t aBlock = *(void ***)&a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v63, v22 + 4, v22 + 12);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "[Foreground Sync] threshold bag value: %f", v22, 0xCu);
    uint64_t v23 = v22;
    uint64_t v12 = v21;
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  uint64_t v24 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
  uint64_t v25 = v24(v17, v12);
  static Date.now.getter(v25);
  uint64_t v26 = &v59[OBJC_IVAR___MTForegroundSyncUtil_lastExpectedFeedsUpdateDate];
  __n128 v27 = swift_beginAccess(&v59[OBJC_IVAR___MTForegroundSyncUtil_lastExpectedFeedsUpdateDate], v64, 0LL, 0LL);
  uint64_t v28 = v12;
  uint64_t v29 = v60;
  uint64_t v30 = *(void (**)(char *, char *, uint64_t, __n128))(v60 + 16);
  v30(v6, v26, v3, v27);
  static Date.+ infix(_:_:)(v6, a2);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v29 + 8);
  v31(v6, v3);
  uint64_t v32 = sub_100127210( &qword_1002B5968,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  LOBYTE(v29) = dispatch thunk of static Comparable.< infix(_:_:)(v11, v9, v3, v32);
  v31(v9, v3);
  uint64_t v33 = ((uint64_t (*)(char *, uint64_t))v31)(v11, v3);
  if ((v29 & 1) != 0)
  {
    uint64_t v56 = v24;
    uint64_t v60 = v28;
    static OS_os_log.feedUpdate.getter(v33);
    uint64_t v34 = v59;
    os_log_type_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.default.getter(v35);
    int v37 = v36;
    if (os_log_type_enabled(v35, v36))
    {
      LODWORD(v59) = v37;
      uint64_t v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v57 = (void **)swift_slowAlloc(32LL, -1LL);
      uint64_t aBlock = v57;
      uint64_t v39 = v11;
      uint64_t v55 = v38;
      *(_DWORD *)uint64_t v38 = 136315138;
      uint64_t v54 = v38 + 4;
      id v40 = sub_10014CA64();
      ((void (*)(char *, char *, uint64_t))v30)(v39, v26, v3);
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      v31(v39, v3);
      id v42 = [v40 stringFromDate:isa];

      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      unint64_t v45 = v44;

      uint64_t v61 = sub_100178E7C(v43, v45, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &aBlock, v54, v38 + 12);

      swift_bridgeObjectRelease(v45);
      uint64_t v46 = v55;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  (os_log_type_t)v59,  "[Foreground Sync] Not updating feeds on app foreground because within feed update threshold. Last update occurred: %s",  v55,  0xCu);
      uint64_t v47 = v57;
      swift_arrayDestroy(v57, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_slowDealloc(v46, -1LL, -1LL);
    }

    else
    {
    }

    return v56(v58, v60);
  }

  else
  {
    uint64_t v48 = sub_100134284(0LL, &qword_1002B5970, &off_10023E268);
    id v49 = [(id)swift_getObjCClassFromMetadata(v48) sharedInstance];
    v63[3] = sub_10014CA1C;
    v63[4] = 0LL;
    uint64_t aBlock = _NSConcreteStackBlock;
    v63[0] = 1107296256LL;
    v63[1] = sub_10014CA28;
    v63[2] = &unk_100247390;
    uint64_t v50 = _Block_copy(&aBlock);
    [v49 updateAllPodcastsUserInitiated:0 forced:0 source:24 started:v50];
    _Block_release(v50);

    static Date.now.getter(v51);
    __n128 v52 = swift_beginAccess(v26, &aBlock, 33LL, 0LL);
    (*(void (**)(char *, char *, uint64_t, __n128))(v60 + 40))(v26, v11, v3, v52);
    return swift_endAccess(&aBlock);
  }

uint64_t sub_10014CA1C(uint64_t a1)
{
  return sub_10014CF88(a1, "[Foreground Sync] Started updating %ld podcasts on app foreground.");
}

uint64_t sub_10014CA28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

id sub_10014CA64()
{
  uint64_t v1 = OBJC_IVAR___MTForegroundSyncUtil____lazy_storage___formatter;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___MTForegroundSyncUtil____lazy_storage___formatter);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR___MTForegroundSyncUtil____lazy_storage___formatter);
  }

  else
  {
    id v4 = [objc_allocWithZone(NSDateFormatter) init];
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;

    uint64_t v6 = (void *)sub_10014CA64();
    [v6 setDateStyle:2];

    uint64_t v7 = (void *)sub_10014CA64();
    [v7 setTimeStyle:2];

    uint64_t v8 = (void *)sub_10014CA64();
    os_log_type_t v9 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v8;
    id v3 = v8;

    uint64_t v2 = 0LL;
  }

  id v10 = v2;
  return v3;
}

uint64_t sub_10014CB1C()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v0[OBJC_IVAR___MTForegroundSyncUtil_needsSyncing] = 0;
  uint64_t v15 = *(void *)&v0[OBJC_IVAR___MTForegroundSyncUtil_workQueue];
  uint64_t v9 = swift_allocObject(&unk_1002473C8, 24LL, 7LL);
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  aBlock[4] = sub_10014E250;
  uint64_t v18 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10013D2D8;
  void aBlock[3] = &unk_1002473E0;
  id v10 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  uint64_t v16 = _swiftEmptyArrayStorage;
  uint64_t v11 = sub_100127210( (unint64_t *)&qword_1002B4E90,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v12 = sub_100126450((uint64_t *)&unk_1002B5490);
  uint64_t v13 = sub_10014B248((unint64_t *)&qword_1002B4E98, (uint64_t *)&unk_1002B5490);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v4, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v18);
}

void sub_10014CD0C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v6 = static OS_os_log.cloudSync.getter();
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[Foreground Sync] Syncing BookKeeper and UPP.", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  [*(id *)(a1 + OBJC_IVAR___MTForegroundSyncUtil_syncController) syncEverything];
  uint64_t v10 = sub_100134284(0LL, &qword_1002B5970, &off_10023E268);
  id v11 = [(id)swift_getObjCClassFromMetadata(v10) sharedInstance];
  uint64_t v21 = sub_10014CF7C;
  uint64_t v22 = 0LL;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v18 = 1107296256LL;
  uint64_t v19 = sub_10014CA28;
  os_log_type_t v20 = &unk_100247408;
  uint64_t v12 = _Block_copy(&aBlock);
  [v11 updateAllPodcastsNeedingRetry:v12];
  _Block_release(v12);

  id v13 = [(id)objc_opt_self(IMURLBag) sharedInstance];
  id v14 = [v13 batchFeedFetchIsEnabled];

  uint64_t v15 = *(void *)(a1 + OBJC_IVAR___MTForegroundSyncUtil_workQueue);
  uint64_t v21 = sub_10014D0D0;
  uint64_t v22 = 0LL;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v18 = 1107296256LL;
  uint64_t v19 = sub_10014B28C;
  os_log_type_t v20 = &unk_100247430;
  uint64_t v16 = _Block_copy(&aBlock);
  [v14 asyncValueOnQueue:v15 withCompletion:v16];
  _Block_release(v16);
}

uint64_t sub_10014CF7C(uint64_t a1)
{
  return sub_10014CF88(a1, "[Foreground Sync] Started updating %ld podcasts needing retry.");
}

uint64_t sub_10014CF88(uint64_t a1, const char *a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v8 = static OS_os_log.feedUpdate.getter();
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)id v11 = 134217984;
    uint64_t v14 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v11 + 4, v11 + 12);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, a2, v11, 0xCu);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_10014D0D0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Podcasts(0LL);
  id v11 = (void *)v5;
  uint64_t v12 = sub_100127210( (unint64_t *)&qword_1002B66D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Podcasts,  (uint64_t)&protocol conformance descriptor for Podcasts);
  uint64_t v6 = sub_10012761C(v10);
  (*(void (**)(void *, void, uint64_t))(*(void *)(v5 - 8) + 104LL))( v6,  enum case for Podcasts.batchFeedFetch(_:),  v5);
  LOBYTE(v5) = isFeatureEnabled(_:)(v10);
  sub_100136648(v10);
  if ((v5 & 1) != 0 && !a3 && a1)
  {
    if ([a1 BOOLValue])
    {
      uint64_t v7 = sub_100134284(0LL, &qword_1002B5970, &off_10023E268);
      id v8 = [(id)swift_getObjCClassFromMetadata(v7) sharedInstance];
      uint64_t v12 = (uint64_t)sub_10014D224;
      uint64_t v13 = 0LL;
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 1107296256LL;
      _OWORD v10[2] = sub_10014CA28;
      id v11 = &unk_100247458;
      uint64_t v9 = _Block_copy(v10);
      [v8 updateAllMediaAPIPodcastsWithSource:24 started:v9];
      _Block_release(v9);
    }
  }

uint64_t sub_10014D224(uint64_t a1)
{
  return sub_10014CF88(a1, "[Foreground Sync] Started updating %ld out of date podcasts.");
}

Swift::Void __swiftcall ForegroundSyncUtil.updatePlaybackSettingIfNeeded()()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v89 = *(void *)(v1 - 8);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v86 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v86 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  os_log_type_t v10 = (char *)&v86 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v86 - v12;
  __chkstk_darwin(v11);
  uint64_t v88 = (char *)&v86 - v14;
  uint64_t v15 = sub_100134284(0LL, &qword_1002B4EE0, &off_10023E1E8);
  id v16 = [(id)swift_getObjCClassFromMetadata(v15) sharedInstance];
  id v17 = [v16 activeAccount];

  uint64_t v18 = *(void **)(v0 + OBJC_IVAR___MTForegroundSyncUtil_defaults);
  ((void (*)(void))static String.Account.lastSignedInDSIDKey.getter)();
  uint64_t v20 = v19;
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  uint64_t v22 = v18;
  id v23 = [v18 stringForKey:v21];

  if (!v23)
  {
    uint64_t v25 = 0LL;
    uint64_t v27 = 0LL;
    if (!v17) {
      goto LABEL_13;
    }
LABEL_5:
    id v24 = objc_msgSend(v17, "ams_DSID");
    if (!v24) {
      goto LABEL_13;
    }
    uint64_t v28 = v24;
    uint64_t v87 = v1;
    id v29 = [v24 stringValue];

    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    uint64_t v32 = v31;

    type metadata accessor for AnalyticsIdentifierManager(0LL);
    uint64_t v33 = static AnalyticsIdentifierManager.hashDSIDWithSalt(_:)(v30, v32);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease(v32);
    if (!v35)
    {
      uint64_t v56 = swift_bridgeObjectRelease(v27);
      uint64_t v57 = static Logger.playback.getter(v56);
      uint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
      os_log_type_t v59 = static os_log_type_t.error.getter(v58);
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v60 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v58,  v59,  "[Foreground Sync] Not setting Continuous Playback. Failed to hash DSID.",  v60,  2u);
        swift_slowDealloc(v60, -1LL, -1LL);
        uint64_t v61 = (os_log_s *)v17;
      }

      else
      {
        uint64_t v61 = v58;
        uint64_t v58 = (os_log_s *)v17;
      }

      uint64_t v66 = v87;
      uint64_t v67 = v89;

      (*(void (**)(char *, uint64_t))(v67 + 8))(v7, v66);
      return;
    }

    if (v27
      && (v25 == v33 && v27 == v35 || (_stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, v33, v35, 0LL) & 1) != 0))
    {
      swift_bridgeObjectRelease(v35);
      uint64_t v36 = swift_bridgeObjectRelease(v27);
      uint64_t v37 = static Logger.playback.getter(v36);
      uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
      os_log_type_t v39 = static os_log_type_t.default.getter(v38);
      if (os_log_type_enabled(v38, v39))
      {
        id v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v40 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "[Foreground Sync] User hasn't changed. Not updating Continuous Playback setting.",  v40,  2u);
        swift_slowDealloc(v40, -1LL, -1LL);
        uint64_t v41 = (os_log_s *)v17;
      }

      else
      {
        uint64_t v41 = v38;
        uint64_t v38 = (os_log_s *)v17;
      }

      uint64_t v68 = v87;
      uint64_t v69 = v89;

      (*(void (**)(char *, uint64_t))(v69 + 8))(v10, v68);
      return;
    }

    uint64_t v62 = v17;
    id v63 = objc_msgSend(v17, "ams_accountFlagValueForAccountFlag:", AMSAccountFlagUnderThirteen);
    uint64_t v64 = v87;
    if (v63)
    {
      id v65 = v63;
      _bridgeAnyObjectToAny(_:)(v90, v63);
      swift_unknownObjectRelease(v65);
    }

    else
    {
      memset(v90, 0, sizeof(v90));
    }

    id v70 = v22;
    id v71 = v88;
    sub_10014E08C((uint64_t)v90, (uint64_t)v91);
    uint64_t v86 = v33;
    if (v91[3])
    {
      uint64_t v72 = swift_dynamicCast(v90, v91, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL);
      if ((_DWORD)v72 && (v90[0] & 1) != 0)
      {
        swift_bridgeObjectRelease(v27);
        int v73 = 1;
        goto LABEL_36;
      }
    }

    else
    {
      uint64_t v72 = sub_10014E0D4((uint64_t)v91);
    }

    if (!v27)
    {
      uint64_t v79 = static Logger.playback.getter(v72);
      os_log_type_t v75 = (os_log_s *)Logger.logObject.getter(v79);
      os_log_type_t v80 = static os_log_type_t.default.getter(v75);
      if (!os_log_type_enabled(v75, v80))
      {
        id v71 = v13;
        goto LABEL_43;
      }

      uint64_t v77 = swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v77 = 67109120;
      LODWORD(v91[0]) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v91, (char *)v91 + 4, v77 + 4, v77 + 8);
      _os_log_impl( (void *)&_mh_execute_header,  v75,  v80,  "[Foreground Sync] User has changed but doesn't need setting reset. U13=%{BOOL}d",  (uint8_t *)v77,  8u);
      id v71 = v13;
LABEL_41:
      swift_slowDealloc(v77, -1LL, -1LL);
      uint64_t v64 = v87;
LABEL_43:
      uint64_t v78 = v89;
      goto LABEL_44;
    }

    swift_bridgeObjectRelease(v27);
    int v73 = 0;
LABEL_36:
    uint64_t v74 = static Logger.playback.getter(objc_msgSend(v70, "setBool:forKey:", v73 ^ 1u, kMTContinuousPlaybackEnabledKey, v86));
    os_log_type_t v75 = (os_log_s *)Logger.logObject.getter(v74);
    os_log_type_t v76 = static os_log_type_t.default.getter(v75);
    if (!os_log_type_enabled(v75, v76))
    {
      uint64_t v78 = v89;
      uint64_t v62 = v17;
LABEL_44:

      (*(void (**)(char *, uint64_t))(v78 + 8))(v71, v64);
      NSString v81 = String._bridgeToObjectiveC()();
      uint64_t v82 = swift_bridgeObjectRelease(v35);
      static String.Account.lastSignedInDSIDKey.getter(v82);
      uint64_t v84 = v83;
      NSString v85 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v84);
      [v70 setObject:v81 forKey:v85];

      return;
    }

    uint64_t v77 = swift_slowAlloc(14LL, -1LL);
    *(_DWORD *)uint64_t v77 = 67109376;
    LODWORD(v91[0]) = v73 ^ 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v91, (char *)v91 + 4, v77 + 4, v77 + 8);
    *(_WORD *)(v77 + _Block_object_dispose(va, 8) = 1024;
    LODWORD(v91[0]) = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v91, (char *)v91 + 4, v77 + 10, v77 + 14);
    _os_log_impl( (void *)&_mh_execute_header,  v75,  v76,  "[Foreground Sync] Setting Continuous Playback to %{BOOL}d for user U13=%{BOOL}d.",  (uint8_t *)v77,  0xEu);
    uint64_t v62 = v17;
    goto LABEL_41;
  }

  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  uint64_t v27 = v26;

  if (v17) {
    goto LABEL_5;
  }
LABEL_13:
  uint64_t v42 = v89;
  if (v27)
  {
    v91[0] = v25;
    v91[1] = v27;
    unint64_t v43 = sub_10014E048();
    char v44 = Collection.isNotEmpty.getter(&type metadata for String, v43);
    id v24 = (id)swift_bridgeObjectRelease(v27);
    if ((v44 & 1) != 0)
    {
      static String.Account.lastSignedInDSIDKey.getter(v24);
      uint64_t v46 = v45;
      NSString v47 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v46);
      [v22 setURL:0 forKey:v47];
    }
  }

  uint64_t v48 = static Logger.playback.getter(v24);
  id v49 = (os_log_s *)Logger.logObject.getter(v48);
  os_log_type_t v50 = static os_log_type_t.default.getter(v49);
  uint64_t v51 = (os_log_s *)v17;
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v52 = v1;
    uint64_t v53 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v53 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v49,  v50,  "[Foreground Sync] Not setting Continuous Playback. No current signed in user.",  v53,  2u);
    uint64_t v54 = v53;
    uint64_t v1 = v52;
    swift_slowDealloc(v54, -1LL, -1LL);
    uint64_t v55 = v51;
  }

  else
  {
    uint64_t v55 = v49;
    id v49 = (os_log_s *)v17;
  }

  (*(void (**)(char *, uint64_t))(v42 + 8))(v4, v1);
}

id ForegroundSyncUtil.init()()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  os_log_type_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = OBJC_IVAR___MTForegroundSyncUtil_defaults;
  uint64_t v12 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  uint64_t v13 = v0;
  *(void *)&v0[v11] = [v12 _applePodcastsFoundationSharedUserDefaults];
  uint64_t v14 = OBJC_IVAR___MTForegroundSyncUtil_workQueue;
  sub_100134284(0LL, (unint64_t *)&qword_1002B4868, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v15 = (*(uint64_t (**)(char *, void, uint64_t))(v8 + 104))( v10,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v7);
  static DispatchQoS.unspecified.getter(v15);
  id v24 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100127210( (unint64_t *)&qword_1002B4870,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v17 = sub_100126450((uint64_t *)&unk_1002B5660);
  uint64_t v18 = sub_10014B248((unint64_t *)&qword_1002B4880, (uint64_t *)&unk_1002B5660);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v17, v18, v1, v16);
  *(void *)&v13[v14] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000012LL,  0x80000001001C4890LL,  v6,  v3,  v10,  0LL);
  uint64_t v19 = OBJC_IVAR___MTForegroundSyncUtil_syncController;
  *(void *)&v13[v19] = [(id)objc_opt_self(MTSyncController) sharedInstance];
  static Date.distantPast.getter();
  *(void *)&v13[OBJC_IVAR___MTForegroundSyncUtil____lazy_storage___formatter] = 0LL;
  v13[OBJC_IVAR___MTForegroundSyncUtil_needsSyncing] = 1;

  uint64_t v20 = (objc_class *)type metadata accessor for ForegroundSyncUtil(0LL);
  v23.receiver = v13;
  v23.super_class = v20;
  return objc_msgSendSuper2(&v23, "init");
}

id ForegroundSyncUtil.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ForegroundSyncUtil(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10014DD60()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id sub_10014DD84()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = OBJC_IVAR___MTForegroundSyncUtil_syncController;
  [*(id *)(v1 + OBJC_IVAR___MTForegroundSyncUtil_syncController) syncEverything];
  return [*(id *)(v1 + v2) startUPPSyncTimerAfterPrivacy];
}

uint64_t sub_10014DDC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10014DDD4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_10014DDDC()
{
}

uint64_t sub_10014DDFC( uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

_BYTE **sub_10014DE30(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  _BYTE *v4 = a4;
  *id result = v4 + 1;
  return result;
}

void *sub_10014DE40(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v4 = a2 - (void)__src;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (!__dst)
  {
    if (v4 <= 0) {
      return __src;
    }
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawBufferPointer.copyMemory source has too many elements",  69LL,  2LL,  "Swift/UnsafeRawBufferPointer.swift",  34LL,  2,  487LL,  0);
    __break(1u);
    return __src;
  }

  if (__src) {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

void sub_10014DED4(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *a1;
  uint64_t v9 = *a1 + 8;
  if (v6) {
    uint64_t v11 = v6;
  }
  else {
    uint64_t v11 = 0LL;
  }
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v8, v9);
  *a1 = v9;
  os_log_type_t v10 = *a2;
  if (*a2)
  {
    void *v10 = v7;
    *a2 = v10 + 1;
  }

  else
  {
  }

uint64_t sub_10014DF84(uint64_t *a1, uint64_t a2, uint64_t a3, double (*a4)(void))
{
  double v5 = a4();
  uint64_t v6 = *a1;
  uint64_t v7 = *a1 + 8;
  double v9 = v5;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v6, v7);
  *a1 = v7;
  return result;
}

uint64_t sub_10014DFD4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_10014DFFC(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t sub_10014E020@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

unint64_t sub_10014E048()
{
  unint64_t result = qword_1002B5918;
  if (!qword_1002B5918)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1002B5918);
  }

  return result;
}

uint64_t sub_10014E08C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100126450(&qword_1002B5408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014E0D4(uint64_t a1)
{
  uint64_t v2 = sub_100126450(&qword_1002B5408);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ForegroundSyncUtil(uint64_t a1)
{
  uint64_t result = qword_1002B5958;
  if (!qword_1002B5958) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ForegroundSyncUtil);
  }
  return result;
}

uint64_t sub_10014E150()
{
  return type metadata accessor for ForegroundSyncUtil(0LL);
}

uint64_t sub_10014E158(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[2] = &unk_1001C48D8;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(result - 8) + 64LL;
    void v4[4] = &unk_1001C48F0;
    void v4[5] = &unk_1001C4908;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 6LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10014E1F4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10014E218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10014BF38(a1, a2, a3, v3);
}

uint64_t sub_10014E220()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10014E244()
{
  return sub_10014C4C0(*(char **)(v0 + 24), *(double *)(v0 + 16));
}

void sub_10014E250()
{
}

id AppCoreSpotlightEntityAnnotator.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppCoreSpotlightEntityAnnotator();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for AppCoreSpotlightEntityAnnotator()
{
  return objc_opt_self(&OBJC_CLASS___MTAppCoreSpotlightEntityAnnotator);
}

id AppCoreSpotlightEntityAnnotator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppCoreSpotlightEntityAnnotator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10014E368()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for FetchNonFollowedShows()
{
  return objc_opt_self(&OBJC_CLASS____TtC8Podcasts21FetchNonFollowedShows);
}

uint64_t sub_10014E3AC@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = sub_10014E438();
  unint64_t v5 = NSManagedObjectContext.fetch<A>(_:)(a1, v4);
  uint64_t v6 = sub_100130790(v5);
  uint64_t result = swift_bridgeObjectRelease(v5);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v6) {
    uint64_t v8 = v6;
  }
  *a2 = v8;
  return result;
}

unint64_t sub_10014E438()
{
  unint64_t result = qword_1002B5A40;
  if (!qword_1002B5A40)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSDictionary);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B5A40);
  }

  return result;
}

void sub_10014E474(char a1)
{
  __asm { BR              X10 }

uint64_t sub_10014E4C4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10014E528 + 4 * byte_1001C49D4[a2]))(0x7972617262696CLL);
}

uint64_t sub_10014E528(uint64_t a1)
{
  if (a1 == 0x7972617262696CLL && v1 == 0xE700000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x7972617262696CLL, 0xE700000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE700000000000000LL);
  return v2 & 1;
}

uint64_t sub_10014E5D0(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    unint64_t v3 = 0xD000000000000011LL;
  }
  else {
    unint64_t v3 = 0xD000000000000012LL;
  }
  if (v2) {
    unint64_t v4 = 0x8000000100219240LL;
  }
  else {
    unint64_t v4 = 0x8000000100219260LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v5 = 0xD000000000000011LL;
  }
  else {
    unint64_t v5 = 0xD000000000000012LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0x8000000100219260LL;
  }
  else {
    unint64_t v6 = 0x8000000100219240LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10014E674(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    unint64_t v3 = 0xD000000000000010LL;
  }
  else {
    unint64_t v3 = 0xD000000000000011LL;
  }
  if (v2) {
    unint64_t v4 = 0x8000000100219280LL;
  }
  else {
    unint64_t v4 = 0x80000001002192A0LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v5 = 0xD000000000000010LL;
  }
  else {
    unint64_t v5 = 0xD000000000000011LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0x80000001002192A0LL;
  }
  else {
    unint64_t v6 = 0x8000000100219280LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_10014E71C(char *a1)
{
}

void sub_10014E728()
{
}

Swift::Int sub_10014E730(char a1)
{
  if ((a1 & 1) != 0) {
    unint64_t v2 = 0xD000000000000010LL;
  }
  else {
    unint64_t v2 = 0xD000000000000011LL;
  }
  if ((a1 & 1) != 0) {
    unint64_t v3 = 0x80000001002192A0LL;
  }
  else {
    unint64_t v3 = 0x8000000100219280LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_10014E7B4(char a1)
{
  if ((a1 & 1) != 0) {
    unint64_t v2 = 0xD000000000000011LL;
  }
  else {
    unint64_t v2 = 0xD000000000000012LL;
  }
  if ((a1 & 1) != 0) {
    unint64_t v3 = 0x8000000100219260LL;
  }
  else {
    unint64_t v3 = 0x8000000100219240LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_10014E834(char a1)
{
  __asm { BR              X10 }

Swift::Int sub_10014E884()
{
  return Hasher._finalize()();
}

void sub_10014E8F4()
{
  __asm { BR              X10 }

uint64_t sub_10014E930(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE700000000000000LL);
}

void sub_10014E98C(uint64_t a1)
{
}

Swift::Int sub_10014E994(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    unint64_t v3 = 0xD000000000000010LL;
  }
  else {
    unint64_t v3 = 0xD000000000000011LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v4 = 0x80000001002192A0LL;
  }
  else {
    unint64_t v4 = 0x8000000100219280LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_10014EA14(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    unint64_t v3 = 0xD000000000000011LL;
  }
  else {
    unint64_t v3 = 0xD000000000000012LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v4 = 0x8000000100219260LL;
  }
  else {
    unint64_t v4 = 0x8000000100219240LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_10014EA90(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10014EADC()
{
  return Hasher._finalize()();
}

unint64_t sub_10014EB4C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100152270(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10014EB78()
{
  return ((uint64_t (*)(void))((char *)sub_10014EBA8 + 4 * byte_1001C49E4[*v0]))();
}

void sub_10014EBA8(void *a1@<X8>)
{
  *a1 = 0x7972617262696CLL;
  a1[1] = 0xE700000000000000LL;
}

void sub_10014EBC4(void *a1@<X8>)
{
  *a1 = 0xD000000000000012LL;
  a1[1] = 0x8000000100219220LL;
}

void sub_10014EBE4(void *a1@<X8>)
{
  *a1 = 0x65726F7473LL;
  a1[1] = 0xE500000000000000LL;
}

uint64_t sub_10014EBFC(uint64_t a1)
{
  unint64_t v2 = sub_1001521A4();
  return EnumStringConvertible<>.description.getter(a1, v2);
}

void sub_10014EC24(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

void sub_10014EC54()
{
}

Swift::Int sub_10014EC9C()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)(v4, 0LL);
  sub_10014EC24((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void sub_10014ECE8(uint64_t a1)
{
}

Swift::Int sub_10014ECF4(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  char v3 = *(_BYTE *)(v1 + 8);
  Hasher.init(_seed:)(v5, a1);
  sub_10014EC24((uint64_t)v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_10014ED3C(uint64_t a1)
{
  return sub_100151864(*(void *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_10014ED54(char *a1, char *a2)
{
  return sub_10014E5D0(*a1, *a2);
}

Swift::Int sub_10014ED60()
{
  return sub_10014E7B4(*v0);
}

uint64_t sub_10014ED68(uint64_t a1)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000011LL;
  }
  else {
    unint64_t v2 = 0xD000000000000012LL;
  }
  if (*v1) {
    unint64_t v3 = 0x8000000100219260LL;
  }
  else {
    unint64_t v3 = 0x8000000100219240LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10014EDC4(uint64_t a1)
{
  return sub_10014EA14(a1, *v1);
}

uint64_t sub_10014EDCC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v2._unint64_t rawValue = &off_1002460D0;
  return sub_10014EEC8(v2, a1, a2);
}

void sub_10014EDD8(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD000000000000011LL;
  if (!*v1) {
    unint64_t v2 = 0xD000000000000012LL;
  }
  unint64_t v3 = 0x8000000100219260LL;
  if (!*v1) {
    unint64_t v3 = 0x8000000100219240LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10014EE18(uint64_t a1)
{
  unint64_t v2 = sub_1001521E8();
  return EnumStringConvertible<>.description.getter(a1, v2);
}

uint64_t sub_10014EE40(char *a1, char *a2)
{
  return sub_10014E674(*a1, *a2);
}

Swift::Int sub_10014EE4C()
{
  return sub_10014E730(*v0);
}

uint64_t sub_10014EE54(uint64_t a1)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000010LL;
  }
  else {
    unint64_t v2 = 0xD000000000000011LL;
  }
  if (*v1) {
    unint64_t v3 = 0x80000001002192A0LL;
  }
  else {
    unint64_t v3 = 0x8000000100219280LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10014EEB4(uint64_t a1)
{
  return sub_10014E994(a1, *v1);
}

uint64_t sub_10014EEBC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v2._unint64_t rawValue = &off_100246120;
  return sub_10014EEC8(v2, a1, a2);
}

uint64_t sub_10014EEC8@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, char *a3@<X8>)
{
  v4._uint64_t countAndFlagsBits = *a2;
  unint64_t v5 = (void *)a2[1];
  v4._object = v5;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease(v5);
  if (v6 == 1) {
    char v8 = 1;
  }
  else {
    char v8 = 2;
  }
  if (!v6) {
    char v8 = 0;
  }
  *a3 = v8;
  return result;
}

void sub_10014EF20(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000010LL;
  }
  else {
    unint64_t v2 = 0xD000000000000011LL;
  }
  unint64_t v3 = 0x8000000100219280LL;
  if (*v1) {
    unint64_t v3 = 0x80000001002192A0LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10014EF64(uint64_t a1)
{
  unint64_t v2 = sub_10015222C();
  return EnumStringConvertible<>.description.getter(a1, v2);
}

uint64_t sub_10014EF8C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = 0x697469736E617254LL;
  if ((a3 & 1) != 0) {
    uint64_t v4 = 0x3A6E6F28706F6F6CLL;
  }
  uint64_t v17 = v4;
  unint64_t v5 = 0xE100000000000000LL;
  unint64_t v6 = sub_100151AA0();
  v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for PodcastsStateTransitions.State,  v6);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v9._uint64_t countAndFlagsBits = 46LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(0xE100000000000000LL);
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    v11._uint64_t countAndFlagsBits = Array.description.getter(v10, &type metadata for PodcastsStateTransitions.Effect);
    uint64_t v12 = v11._object;
    String.append(_:)(v11);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v12);
    v13._uint64_t countAndFlagsBits = 41LL;
    v13._object = (void *)0xE100000000000000LL;
    String.append(_:)(v13);
    uint64_t v14 = 0x746365666665202CLL;
    unint64_t v5 = 0xEB00000000203A73LL;
  }

  else
  {
    uint64_t v14 = 41LL;
  }

  unint64_t v15 = v5;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease(v5);
  return v17;
}

uint64_t sub_10014F0DC()
{
  return sub_10014EF8C(*v0, *((void *)v0 + 1), v0[16]);
}

uint64_t sub_10014F0EC()
{
  sub_100136648((void *)(v0 + 64));
  sub_100136648((void *)(v0 + 104));
  return swift_deallocClassInstance(v0, 144LL, 7LL);
}

uint64_t type metadata accessor for PodcastsStateTransitions()
{
  return objc_opt_self(&OBJC_CLASS____TtC8Podcasts24PodcastsStateTransitions);
}

uint64_t sub_10014F148(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v77 = v8;
  uint64_t v78 = v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = &v70[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v10);
  os_log_type_t v80 = &v70[-v13];
  uint64_t v14 = sub_100126450(&qword_1002B6760);
  __chkstk_darwin(v14);
  uint64_t v16 = &v70[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v17 = type metadata accessor for PodcastStateModel(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = &v70[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  id v21 = a1;
  PodcastStateModel.init(podcast:)(a1);
  uint64_t v79 = v18;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17) == 1)
  {
    uint64_t v22 = sub_100151AE4((uint64_t)v16);
    goto LABEL_6;
  }

  uint64_t v23 = a4;
  id v24 = v76;
  int v73 = v12;
  uint64_t v74 = a2;
  LODWORD(v75) = a3;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v79 + 32))(v20, v16, v17);
  id v25 = [v21 managedObjectContext];
  if (!v25)
  {
    uint64_t v22 = (*(uint64_t (**)(_BYTE *, uint64_t))(v79 + 8))(v20, v17);
LABEL_6:
    uint64_t v32 = v80;
    static Logger.podcastsStatesCoordination.getter(v22);
    id v33 = v21;
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.error.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc(52LL, -1LL);
      uint64_t v37 = swift_slowAlloc(128LL, -1LL);
      v81[0] = v37;
      *(_DWORD *)uint64_t v36 = 136381699;
      id v38 = [v33 title];
      if (v38)
      {
        os_log_type_t v39 = v38;
        uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
        unint64_t v42 = v41;
      }

      else
      {
        uint64_t v40 = 0x6C746974206F6E3CLL;
        unint64_t v42 = 0xEA00000000003E65LL;
      }

      id v82 = (id)sub_100178E7C(v40, v42, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v36 + 4, v36 + 12);

      swift_bridgeObjectRelease(v42);
      *(_WORD *)(v36 + 12) = 2080;
      id v44 = [v33 uuid];
      uint64_t v79 = v37;
      if (v44)
      {
        uint64_t v45 = v44;
        uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
        unint64_t v48 = v47;
      }

      else
      {
        unint64_t v48 = 0xE700000000000000LL;
        uint64_t v46 = 0x3E7974706D653CLL;
      }

      id v82 = (id)sub_100178E7C(v46, v48, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v36 + 14, v36 + 22);

      swift_bridgeObjectRelease(v48);
      *(_WORD *)(v36 + 22) = 2080;
      id v82 = [v33 managedObjectContext];
      uint64_t v49 = sub_100126450(&qword_1002B66C0);
      uint64_t v50 = String.init<A>(describing:)(&v82, v49);
      unint64_t v52 = v51;
      id v82 = (id)sub_100178E7C(v50, v51, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v36 + 24, v36 + 32);

      swift_bridgeObjectRelease(v52);
      *(_WORD *)(v36 + 32) = 2049;
      id v53 = [v33 storeCollectionId];

      id v82 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v36 + 34, v36 + 42);

      *(_WORD *)(v36 + 42) = 2081;
      id v54 = [v33 feedURL];
      if (v54)
      {
        uint64_t v55 = v54;
        uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
        unint64_t v58 = v57;

        uint64_t v59 = v56;
        uint64_t v60 = v77;
        uint64_t v62 = v79;
        uint64_t v61 = v80;
      }

      else
      {
        unint64_t v58 = 0xE700000000000000LL;
        uint64_t v60 = v77;
        uint64_t v62 = v79;
        uint64_t v61 = v80;
        uint64_t v59 = 0x3E7974706D653CLL;
      }

      id v82 = (id)sub_100178E7C(v59, v58, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v36 + 44, v36 + 52);

      swift_bridgeObjectRelease(v58);
      _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "Unable to create PodcastStateModel from Podcast, or Podcast without a valid managedObjectContext. Podcast: %{pri vate}s, uuid: %s, MOC: %s, adamID: %{private}lld, feedURL: %{private}s.",  (uint8_t *)v36,  0x34u);
      swift_arrayDestroy(v62, 4LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);

      return (*(uint64_t (**)(_BYTE *, uint64_t))(v78 + 8))(v61, v60);
    }

    else
    {

      return (*(uint64_t (**)(_BYTE *, uint64_t))(v78 + 8))(v32, v77);
    }
  }

  uint64_t v26 = v25;
  os_log_type_t v80 = (_BYTE *)v17;
  uint64_t v27 = v24;
  uint64_t v28 = v24 + 2;
  uint64_t v29 = v24[5];
  uint64_t v30 = v24[6];
  sub_1001361FC(v28, v29);
  char v31 = (*(uint64_t (**)(_BYTE *, void *, uint64_t, void, uint64_t, uint64_t, uint64_t))(v30 + 8))( v20,  v26,  v74,  v75,  v23,  v29,  v30);
  uint64_t v64 = v63;
  sub_1001513B4((uint64_t)v21, v31);
  if (v64)
  {
    uint64_t v72 = v20;
    uint64_t v65 = *(void *)(v64 + 16);
    if (v65)
    {
      id v71 = v26;
      swift_bridgeObjectRetain(v64);
      uint64_t v77 = (uint64_t)(v27 + 8);
      swift_beginAccess(v27 + 8, v81, 0LL, 0LL);
      uint64_t v75 = v64;
      uint64_t v66 = (_BYTE *)(v64 + 40);
      uint64_t v67 = v80;
      do
      {
        uint64_t v69 = *((void *)v66 - 1);
        if (*v66)
        {
          if (*v66 != 1) {
            __asm { BR              X8 }
          }

          id v68 = (id)v27[7];
          SyncKeysRepository.markBookmarksSyncDirty(_:for:)(1LL, v69);
        }

        else
        {
          id v68 = (id)v27[7];
          SyncKeysRepository.markSubscriptionSyncDirty(_:for:)(1LL, v69);
        }

        v66 += 16;
        --v65;
      }

      while (v65);

      swift_bridgeObjectRelease_n(v75, 2LL);
    }

    else
    {
      swift_bridgeObjectRelease(v64);

      uint64_t v67 = v80;
    }

    uint64_t v20 = v72;
  }

  else
  {

    uint64_t v67 = v80;
  }

  return (*(uint64_t (**)(_BYTE *, _BYTE *))(v79 + 8))(v20, v67);
}

void sub_10014FE38(uint64_t a1, uint64_t a2, void *a3, os_log_s *a4, int a5, char *a6)
{
  unsigned int v93 = a6;
  LODWORD(v92) = a5;
  os_log_t v91 = a4;
  id v99 = a3;
  uint64_t v8 = type metadata accessor for PodcastStateModel(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  __chkstk_darwin();
  uint64_t v11 = (char *)&v83 - v10;
  __chkstk_darwin();
  uint64_t v89 = (char *)&v83 - v12;
  __chkstk_darwin();
  uint64_t v87 = (char *)&v83 - v13;
  __chkstk_darwin();
  uint64_t v88 = (char *)&v83 - v14;
  __chkstk_darwin();
  uint64_t v16 = (char *)&v83 - v15;
  __chkstk_darwin();
  uint64_t v18 = (char *)&v83 - v17;
  __chkstk_darwin();
  int v97 = (char *)&v83 - v19;
  __chkstk_darwin();
  char v95 = (char *)&v83 - v20;
  __chkstk_darwin();
  uint64_t v94 = (char *)&v83 - v21;
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v96 = *(void *)(v22 - 8);
  __chkstk_darwin();
  uint64_t v90 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  id v25 = (char *)&v83 - v24;
  a1 += 16LL;
  swift_beginAccess(a1, v102, 0LL, 0LL);
  uint64_t Strong = (void *)swift_weakLoadStrong(a1);
  if (!Strong) {
    return;
  }
  uint64_t v86 = v11;
  uint64_t v28 = ((uint64_t (*)(void))PodcastStateModel.id.getter)();
  if (!v27)
  {
    uint64_t v30 = (char *)[v99 podcastForStoreId:v28];
    char v31 = v30;
    uint64_t v32 = v97;
    if (v30) {
      goto LABEL_11;
    }
LABEL_7:
    static Logger.podcastsStatesCoordination.getter(v30);
    id v33 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v33(v94, a2, v8);
    v33(v95, a2, v8);
    v33(v32, a2, v8);
    v33(v18, a2, v8);
    v33(v16, a2, v8);
    id v34 = v99;
    os_log_type_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    LODWORD(v99) = static os_log_type_t.error.getter(v35);
    uint64_t v36 = v18;
    if (os_log_type_enabled(v35, (os_log_type_t)v99))
    {
      os_log_t v91 = v35;
      uint64_t v92 = v18;
      unsigned int v93 = v25;
      uint64_t v37 = swift_slowAlloc(50LL, -1LL);
      uint64_t v90 = (char *)swift_slowAlloc(96LL, -1LL);
      v100[0] = (uint64_t)v90;
      *(_DWORD *)uint64_t v37 = 136316419;
      id v38 = [v34 name];
      uint64_t v85 = v22;
      uint64_t v83 = v9;
      if (v38)
      {
        os_log_type_t v39 = v38;
        uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
        unint64_t v42 = v41;
      }

      else
      {
        unint64_t v42 = 0xE500000000000000LL;
        uint64_t v40 = 0x3E6C696E3CLL;
      }

      uint64_t v60 = v94;
      uint64_t v101 = sub_100178E7C(v40, v42, v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v37 + 4, v37 + 12);

      uint64_t v61 = swift_bridgeObjectRelease(v42);
      *(_WORD *)(v37 + 12) = 2081;
      uint64_t v94 = (char *)(v37 + 14);
      uint64_t v62 = PodcastStateModel.id.getter(v61);
      uint64_t v64 = v63;
      unsigned __int8 v66 = v65;
      uint64_t v67 = PodcastIdentifier.description.getter(v62);
      unint64_t v69 = v68;
      sub_1001496CC(v62, v64, v66);
      uint64_t v101 = sub_100178E7C(v67, v69, v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v94, v37 + 22);
      swift_bridgeObjectRelease(v69);
      id v70 = *(uint64_t (**)(char *, uint64_t))(v83 + 8);
      uint64_t v71 = v70(v60, v8);
      *(_WORD *)(v37 + 22) = 2080;
      uint64_t v72 = v95;
      uint64_t v73 = PodcastStateModel.uuid.getter(v71);
      unint64_t v75 = v74;
      uint64_t v101 = sub_100178E7C(v73, v74, v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v37 + 24, v37 + 32);
      swift_bridgeObjectRelease(v75);
      uint64_t v76 = v70(v72, v8);
      *(_WORD *)(v37 + 32) = 1024;
      uint64_t v77 = v97;
      LODWORD(v62) = PodcastStateModel.isHidden.getter(v76) & 1;
      v70(v77, v8);
      LODWORD(v101) = v62;
      uint64_t v78 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, (char *)&v101 + 4, v37 + 34, v37 + 38);
      *(_WORD *)(v37 + 3_Block_object_dispose(va, 8) = 1024;
      uint64_t v79 = v92;
      LODWORD(v77) = PodcastStateModel.isFollowed.getter(v78) & 1;
      v70(v79, v8);
      LODWORD(v101) = (_DWORD)v77;
      uint64_t v80 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, (char *)&v101 + 4, v37 + 40, v37 + 44);
      *(_WORD *)(v37 + 44) = 1024;
      LODWORD(v72) = PodcastStateModel.isImplicitlyFollowed.getter(v80) & 1;
      v70(v16, v8);
      LODWORD(v101) = (_DWORD)v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, (char *)&v101 + 4, v37 + 46, v37 + 50);
      os_log_t v81 = v91;
      _os_log_impl( (void *)&_mh_execute_header,  v91,  (os_log_type_t)v99,  "Unable to find corresponding MTPodcast in context %s for PodcastStateModel with ID: %{private}s, uuid: %s, isHid den: %{BOOL}d, isFollowed: %{BOOL}d, isImplicitlyFollowed: %{BOOL}d.",  (uint8_t *)v37,  0x32u);
      id v82 = v90;
      swift_arrayDestroy(v90, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v82, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_release(Strong);

      (*(void (**)(char *, uint64_t))(v96 + 8))(v93, v85);
    }

    else
    {
      uint64_t v59 = *(void (**)(char *, uint64_t))(v9 + 8);
      v59(v16, v8);
      v59(v36, v8);
      v59(v32, v8);

      swift_release(Strong);
      v59(v94, v8);
      v59(v95, v8);

      (*(void (**)(char *, uint64_t))(v96 + 8))(v25, v22);
    }

    return;
  }

  uint64_t v29 = v26;
  uint64_t v84 = v8;
  unint64_t v43 = v16;
  id v44 = v25;
  uint64_t v45 = v9;
  if (v27 == 1)
  {
    NSString v46 = String._bridgeToObjectiveC()();
    sub_1001496CC(v28, v29, 1u);
    id v47 = [v99 podcastForUuid:v46];
  }

  else
  {
    NSString v46 = String._bridgeToObjectiveC()();
    sub_1001496CC(v28, v29, 2u);
    id v47 = [v99 podcastForFeedUrl:v46];
  }

  char v31 = (char *)v47;

  uint64_t v9 = v45;
  id v25 = v44;
  uint64_t v16 = v43;
  uint64_t v8 = v84;
  uint64_t v32 = v97;
  if (!v31) {
    goto LABEL_7;
  }
LABEL_11:
  int v97 = v31;
  uint64_t v85 = v22;
  unint64_t v48 = Strong;
  uint64_t v49 = Strong[5];
  uint64_t v50 = Strong[6];
  sub_1001361FC(Strong + 2, v49);
  char v51 = (*(uint64_t (**)(uint64_t, id, os_log_t, void, char *, uint64_t, uint64_t))(v50 + 8))( a2,  v99,  v91,  v92,  v93,  v49,  v50);
  uint64_t v53 = v52;
  id v54 = v97;
  sub_1001513B4((uint64_t)v97, v51);
  if (!v53)
  {
LABEL_26:
    swift_release(v48);

    return;
  }

  uint64_t v55 = *(void *)(v53 + 16);
  if (!v55)
  {
    swift_bridgeObjectRelease(v53);
    goto LABEL_26;
  }

  swift_bridgeObjectRetain(v53);
  id v99 = v48 + 8;
  swift_beginAccess(v48 + 8, v100, 0LL, 0LL);
  uint64_t v56 = (_BYTE *)(v53 + 40);
  do
  {
    uint64_t v58 = *((void *)v56 - 1);
    if (*v56)
    {
      if (*v56 != 1) {
        __asm { BR              X8 }
      }

      id v57 = (id)v48[7];
      SyncKeysRepository.markBookmarksSyncDirty(_:for:)(1LL, v58);
    }

    else
    {
      id v57 = (id)v48[7];
      SyncKeysRepository.markSubscriptionSyncDirty(_:for:)(1LL, v58);
    }

    v56 += 16;
    --v55;
  }

  while (v55);
  swift_release(v48);

  swift_bridgeObjectRelease_n(v53, 2LL);
}

uint64_t sub_100150C18@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char *a4@<X8>)
{
  id v47 = a4;
  sub_100126450(&qword_1002B6760);
  __chkstk_darwin();
  uint64_t v8 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for PodcastStateModel(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  v43[5] = (char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v13 = (char *)v43 - v12;
  __chkstk_darwin();
  uint64_t v15 = (char *)v43 - v14;
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v45 = *(void *)(v16 - 8);
  uint64_t v46 = v16;
  __chkstk_darwin();
  v43[6] = (char *)v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v19 = (char *)v43 - v18;
  __chkstk_darwin();
  uint64_t v21 = (char *)v43 - v20;
  uint64_t v44 = a2;
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [a1 podcastForUuid:v22];

  if (v23)
  {
    id v25 = v23;
    PodcastStateModel.init(podcast:)(v23);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
      uint64_t v41 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
      char v42 = PodcastStateModel.sanitizedState()(v41);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);

      __asm { BR              X10 }
    }

    uint64_t v26 = sub_100151AE4((uint64_t)v8);
    uint64_t v27 = static Logger.podcastsStatesCoordination.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter(v27);
    uint64_t v29 = swift_bridgeObjectRetain_n(a3, 2LL);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    if (os_log_type_enabled(v30, v28))
    {
      char v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v32 = swift_slowAlloc(32LL, -1LL);
      uint64_t v49 = v32;
      *(_DWORD *)char v31 = 136315138;
      swift_bridgeObjectRetain(a3);
      uint64_t v48 = sub_100178E7C(v44, a3, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease_n(a3, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v28,  "Failed to create PodcastStateModel from show %s for current podcast state lookup.",  v31,  0xCu);
      swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v19, v46);
    char v39 = 4;
  }

  else
  {
    uint64_t v33 = static Logger.podcastsStatesCoordination.getter(v24);
    os_log_type_t v34 = static os_log_type_t.error.getter(v33);
    uint64_t v35 = swift_bridgeObjectRetain_n(a3, 2LL);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    if (os_log_type_enabled(v36, v34))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v38 = swift_slowAlloc(32LL, -1LL);
      uint64_t v49 = v38;
      *(_DWORD *)uint64_t v37 = 136315138;
      swift_bridgeObjectRetain(a3);
      uint64_t v48 = sub_100178E7C(v44, a3, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v37 + 4, v37 + 12);
      char v39 = 3;
      swift_bridgeObjectRelease_n(a3, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v36,  v34,  "Failed to locate show %s for current podcast state lookup.",  v37,  0xCu);
      swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);

      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v21, v46);
    }

    else
    {

      swift_bridgeObjectRelease_n(a3, 2LL);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v21, v46);
      char v39 = 3;
    }
  }

  char *v47 = v39;
  return result;
}

void sub_1001513B4(uint64_t a1, char a2)
{
  __asm { BR              X10 }

id sub_1001513E4( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return [v14 setHidden:0];
}

void sub_1001514C8(uint64_t a1, uint64_t a2)
{
}

void sub_1001514D0(uint64_t a1, char a2)
{
  __asm { BR              X11 }

uint64_t sub_100151500@<X0>(uint64_t a1@<X8>)
{
  v1._uint64_t countAndFlagsBits = ((uint64_t (*)(uint64_t))MTSubscriptionSyncType.description.getter)(a1);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._uint64_t countAndFlagsBits = 41LL;
  v3._object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  return 0x28776F6C6C6F66LL;
}

void sub_10015160C()
{
}

void sub_1001516DC()
{
}

uint64_t sub_1001516E8(uint64_t a1, char a2)
{
  if (a2)
  {
    if (a2 != 1) {
      __asm { BR              X10 }
    }

    _StringGuts.grow(_:)(17LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    strcpy((char *)v8, "syncBookmarks(");
    HIBYTE(v8[1]) = -18;
    uint64_t v3 = MTBookmarksSyncType.description.getter(a1);
  }

  else
  {
    _StringGuts.grow(_:)(21LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v8[0] = 0xD000000000000012LL;
    v8[1] = 0x800000010021B110LL;
    uint64_t v3 = MTSubscriptionSyncType.description.getter(a1);
  }

  uint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease(v5);
  v6._uint64_t countAndFlagsBits = 41LL;
  v6._object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  return v8[0];
}

uint64_t sub_100151858()
{
  return sub_1001516E8(*(void *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t sub_100151864(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_100151880 + 4 * byte_1001C4A05[a2]))();
}

BOOL sub_100151880(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return !a4 && a1 == a3;
}

void sub_1001519D4(uint64_t a1)
{
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v2) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease(a1);
    return;
  }

  if (a1 < 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v6);
  if (!v2) {
    goto LABEL_13;
  }
LABEL_3:
  if (v2 >= 1)
  {
    for (uint64_t i = 0LL; i != v2; ++i)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      }
      else {
        id v4 = *(id *)(a1 + 8 * i + 32);
      }
      uint64_t v5 = v4;
      sub_10014F148(v4, 4LL, 4, 3LL);
    }

    goto LABEL_13;
  }

  __break(1u);
}

unint64_t sub_100151AA0()
{
  unint64_t result = qword_1002B5B00;
  if (!qword_1002B5B00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001C4E4C, &type metadata for PodcastsStateTransitions.State);
    atomic_store(result, (unint64_t *)&qword_1002B5B00);
  }

  return result;
}

uint64_t sub_100151AE4(uint64_t a1)
{
  uint64_t v2 = sub_100126450(&qword_1002B6760);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for PodcastsStateTransitions.EpisodesState.PlayState()
{
  return &type metadata for PodcastsStateTransitions.EpisodesState.PlayState;
}

uint64_t _s8Podcasts24PodcastsStateTransitionsC13EpisodesStateV12LibraryStateOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100151B88 + 4 * byte_1001C4A19[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100151BBC + 4 * byte_1001C4A14[v4]))();
}

uint64_t sub_100151BBC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100151BC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100151BCCLL);
  }
  return result;
}

uint64_t sub_100151BD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100151BE0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100151BE4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100151BEC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PodcastsStateTransitions.EpisodesState.LibraryState()
{
  return &type metadata for PodcastsStateTransitions.EpisodesState.LibraryState;
}

uint64_t getEnumTagSinglePayload for PodcastsStateTransitions.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for PodcastsStateTransitions.State( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100151CE4 + 4 * byte_1001C4A23[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100151D18 + 4 * byte_1001C4A1E[v4]))();
}

uint64_t sub_100151D18(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100151D20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100151D28LL);
  }
  return result;
}

uint64_t sub_100151D34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100151D3CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100151D40(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100151D48(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100151D54(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for PodcastsStateTransitions.State()
{
  return &type metadata for PodcastsStateTransitions.State;
}

uint64_t initializeBufferWithCopyOfBuffer for PodcastsStateTransitions.Event(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + _Block_object_dispose(va, 8) = *((_BYTE *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for PodcastsStateTransitions.Event(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PodcastsStateTransitions.Event( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + _Block_object_dispose(va, 8) = 0;
    *(void *)unint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + _Block_object_dispose(va, 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100151E0C(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_100151E24(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)unint64_t result = a2 - 4;
    LOBYTE(a2) = 4;
  }

  *(_BYTE *)(result + _Block_object_dispose(va, 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PodcastsStateTransitions.Event()
{
  return &type metadata for PodcastsStateTransitions.Event;
}

uint64_t getEnumTagSinglePayload for PodcastsStateTransitions.Effect(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PodcastsStateTransitions.Effect( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + _Block_object_dispose(va, 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + _Block_object_dispose(va, 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100151ED8(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_100151EF0(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + _Block_object_dispose(va, 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PodcastsStateTransitions.Effect()
{
  return &type metadata for PodcastsStateTransitions.Effect;
}

unint64_t sub_100151F1C()
{
  unint64_t result = qword_1002B5B08;
  if (!qword_1002B5B08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001C4B24, &type metadata for PodcastsStateTransitions.Event);
    atomic_store(result, (unint64_t *)&qword_1002B5B08);
  }

  return result;
}

unint64_t sub_100151F68()
{
  unint64_t result = qword_1002B5B10;
  if (!qword_1002B5B10)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001C4BBC, &type metadata for PodcastsStateTransitions.State);
    atomic_store(result, (unint64_t *)&qword_1002B5B10);
  }

  return result;
}

unint64_t sub_100151FB0()
{
  unint64_t result = qword_1002B5B18;
  if (!qword_1002B5B18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001C4C34, &type metadata for PodcastsStateTransitions.State);
    atomic_store(result, (unint64_t *)&qword_1002B5B18);
  }

  return result;
}

unint64_t sub_100151FF8()
{
  unint64_t result = qword_1002B5B20;
  if (!qword_1002B5B20)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001C4E24,  &type metadata for PodcastsStateTransitions.EpisodesState.LibraryState);
    atomic_store(result, (unint64_t *)&qword_1002B5B20);
  }

  return result;
}

unint64_t sub_100152040()
{
  unint64_t result = qword_1002B5B28;
  if (!qword_1002B5B28)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001C4C8C,  &type metadata for PodcastsStateTransitions.EpisodesState.LibraryState);
    atomic_store(result, (unint64_t *)&qword_1002B5B28);
  }

  return result;
}

unint64_t sub_100152088()
{
  unint64_t result = qword_1002B5B30;
  if (!qword_1002B5B30)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001C4D04,  &type metadata for PodcastsStateTransitions.EpisodesState.LibraryState);
    atomic_store(result, (unint64_t *)&qword_1002B5B30);
  }

  return result;
}

unint64_t sub_1001520D0()
{
  unint64_t result = qword_1002B5B38;
  if (!qword_1002B5B38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001C4DFC, &type metadata for PodcastsStateTransitions.EpisodesState.PlayState);
    atomic_store(result, (unint64_t *)&qword_1002B5B38);
  }

  return result;
}

unint64_t sub_100152118()
{
  unint64_t result = qword_1002B5B40;
  if (!qword_1002B5B40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001C4D5C, &type metadata for PodcastsStateTransitions.EpisodesState.PlayState);
    atomic_store(result, (unint64_t *)&qword_1002B5B40);
  }

  return result;
}

unint64_t sub_100152160()
{
  unint64_t result = qword_1002B5B48;
  if (!qword_1002B5B48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001C4DD4, &type metadata for PodcastsStateTransitions.EpisodesState.PlayState);
    atomic_store(result, (unint64_t *)&qword_1002B5B48);
  }

  return result;
}

unint64_t sub_1001521A4()
{
  unint64_t result = qword_1002B5B50;
  if (!qword_1002B5B50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001C4B8C, &type metadata for PodcastsStateTransitions.State);
    atomic_store(result, (unint64_t *)&qword_1002B5B50);
  }

  return result;
}

unint64_t sub_1001521E8()
{
  unint64_t result = qword_1002B5B58;
  if (!qword_1002B5B58)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001C4C5C,  &type metadata for PodcastsStateTransitions.EpisodesState.LibraryState);
    atomic_store(result, (unint64_t *)&qword_1002B5B58);
  }

  return result;
}

unint64_t sub_10015222C()
{
  unint64_t result = qword_1002B5B60;
  if (!qword_1002B5B60)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001C4D2C, &type metadata for PodcastsStateTransitions.EpisodesState.PlayState);
    atomic_store(result, (unint64_t *)&qword_1002B5B60);
  }

  return result;
}

unint64_t sub_100152270(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100246050, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

_WORD *initializeBufferWithCopyOfBuffer for PodcastsStateTransitions.EpisodesState(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PodcastsStateTransitions.EpisodesState( unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }

    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }

uint64_t storeEnumTagSinglePayload for PodcastsStateTransitions.EpisodesState( _WORD *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1001523A4 + 4 * byte_1001C4A2D[v4]))();
  }
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_1001523D8 + 4 * byte_1001C4A28[v4]))();
}

uint64_t sub_1001523D8(uint64_t result)
{
  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1001523E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2) {
    JUMPOUT(0x1001523E8LL);
  }
  return result;
}

uint64_t sub_1001523F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2) {
    JUMPOUT(0x1001523FCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100152400(uint64_t result)
{
  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_100152408(uint64_t result)
{
  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PodcastsStateTransitions.EpisodesState()
{
  return &type metadata for PodcastsStateTransitions.EpisodesState;
}

id SyncControllerFactory.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SyncControllerFactory();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for SyncControllerFactory()
{
  return objc_opt_self(&OBJC_CLASS____TtC8Podcasts21SyncControllerFactory);
}

id SyncControllerFactory.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SyncControllerFactory();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t sub_100152530()
{
  unint64_t result = qword_1002B5B90;
  if (!qword_1002B5B90)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___MTSyncController);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B5B90);
  }

  return result;
}

uint64_t sub_10015256C()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t type metadata accessor for OriginBasedPodcastsStateTransitionsFinder()
{
  return objc_opt_self(&OBJC_CLASS____TtC8Podcasts41OriginBasedPodcastsStateTransitionsFinder);
}

uint64_t sub_1001525B0(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5)
{
  return sub_1001532C4(a1, a2, a3, a4, a5);
}

uint64_t sub_1001525D0(uint64_t a1, char a2, __int16 a3, uint64_t a4)
{
  switch(a2)
  {
    case 0:
      if ((a3 & 0x100) != 0)
      {
        if (a4)
        {
          uint64_t v10 = sub_100126450((uint64_t *)&unk_1002B5C38);
          uint64_t v11 = swift_allocObject(v10, 48LL, 7LL);
          uint64_t v7 = 0LL;
          *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
          *(void *)(v11 + 32) = a1;
          *(_BYTE *)(v11 + 40) = 0;
        }

        else
        {
          uint64_t v7 = 0LL;
        }
      }

      else if (a4)
      {
        uint64_t v5 = sub_100126450((uint64_t *)&unk_1002B5C38);
        uint64_t v6 = swift_allocObject(v5, 64LL, 7LL);
        uint64_t v7 = 0LL;
        *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4150;
        *(void *)(v6 + 32) = a1;
        *(_BYTE *)(v6 + 40) = 0;
        *(void *)(v6 + 4_Block_object_dispose(va, 8) = 0LL;
        *(_BYTE *)(v6 + 56) = 2;
      }

      else
      {
        uint64_t v7 = 0LL;
      }

      break;
    case 2:
      goto LABEL_6;
    case 3:
      if ((a3 & 1) != 0)
      {
        if ((a3 & 0x100) != 0)
        {
          if (a4 != 1)
          {
            uint64_t v15 = sub_100126450((uint64_t *)&unk_1002B5C38);
            uint64_t v16 = swift_allocObject(v15, 48LL, 7LL);
            *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
            *(void *)(v16 + 32) = a1;
            *(_BYTE *)(v16 + 40) = 1;
          }

uint64_t sub_100152830(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v49 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v49 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v49 - v20;
  if (!a2)
  {
    if (!a4) {
      return 0LL;
    }
    uint64_t v23 = sub_100126450((uint64_t *)&unk_1002B5C38);
    uint64_t v24 = swift_allocObject(v23, 80LL, 7LL);
    uint64_t v22 = 0LL;
    *(_OWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4160;
    *(void *)(v24 + 32) = 0LL;
    *(_BYTE *)(v24 + 40) = 2;
    *(void *)(v24 + 4_Block_object_dispose(va, 8) = a1;
    *(_BYTE *)(v24 + 56) = 0;
    goto LABEL_21;
  }

  if (a2 != 2)
  {
    if (a2 != 4) {
      return 2LL;
    }
    uint64_t v22 = 2LL;
    switch(a1)
    {
      case 0LL:
        if ((a3 & 1) != 0) {
          goto LABEL_13;
        }
        return 1LL;
      case 4LL:
        return 3LL;
      case 6LL:
        return v22;
      case 7LL:
        if ((a3 & 1) == 0) {
          return 2LL;
        }
        return 3LL;
      case 8LL:
        if (a4 == 2) {
          return v22;
        }
        uint64_t v41 = static Logger.podcastsStatesCoordination.getter(v19);
        char v42 = (os_log_s *)Logger.logObject.getter(v41);
        os_log_type_t v43 = static os_log_type_t.error.getter(v42);
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v45 = swift_slowAlloc(32LL, -1LL);
          uint64_t v50 = v45;
          *(_DWORD *)uint64_t v44 = 136315138;
          uint64_t v46 = PodcastsStateChangeOrigin.description.getter(a4);
          unint64_t v48 = v47;
          uint64_t v49 = sub_100178E7C(v46, v47, &v50);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v44 + 4, v44 + 12);
          swift_bridgeObjectRelease(v48);
          swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v45, -1LL, -1LL);
          swift_slowDealloc(v44, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
          return 2LL;
        }

        (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
        break;
      case 9LL:
        uint64_t v37 = static Logger.podcastsStatesCoordination.getter(v19);
        uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
        os_log_type_t v39 = static os_log_type_t.error.getter(v38);
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v40 = 0;
          swift_slowDealloc(v40, -1LL, -1LL);
        }

        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
        return v22;
      default:
        return 2LL;
    }

    return v22;
  }

  if ((a3 & 1) != 0)
  {
    if (a4 == 1)
    {
LABEL_13:
      uint64_t v25 = static Logger.podcastsStatesCoordination.getter(v19);
      uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
      os_log_type_t v27 = static os_log_type_t.error.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        os_log_type_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)os_log_type_t v28 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Somehow we end up with an Implicit Follow that does NOT have any play state, that doesn't make sense.",  v28,  2u);
        swift_slowDealloc(v28, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
      return 1LL;
    }

    uint64_t v31 = static Logger.podcastsStatesCoordination.getter(v19);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.error.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      os_log_type_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v34 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "Somehow we end up with an Implicit Follow that does NOT have any play state, that doesn't make sense.",  v34,  2u);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v21, v8);
    uint64_t v35 = sub_100126450((uint64_t *)&unk_1002B5C38);
    uint64_t v24 = swift_allocObject(v35, 80LL, 7LL);
    *(_OWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4160;
    *(void *)(v24 + 32) = 0LL;
    *(_BYTE *)(v24 + 40) = 2;
    *(void *)(v24 + 4_Block_object_dispose(va, 8) = a1;
    uint64_t v22 = 1LL;
    *(_BYTE *)(v24 + 56) = 1;
LABEL_21:
    *(void *)(v24 + 64) = 4LL;
    *(_BYTE *)(v24 + 72) = 2;
    return v22;
  }

  uint64_t v22 = 1LL;
  if (a4 != 1)
  {
    uint64_t v29 = sub_100126450((uint64_t *)&unk_1002B5C38);
    uint64_t v30 = swift_allocObject(v29, 64LL, 7LL);
    *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4150;
    *(void *)(v30 + 32) = a1;
    *(_BYTE *)(v30 + 40) = 1;
    *(void *)(v30 + 4_Block_object_dispose(va, 8) = 4LL;
    *(_BYTE *)(v30 + 56) = 2;
  }

  return v22;
}

uint64_t sub_100152DD0(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v30 - v14;
  if (a2)
  {
    if (a2 == 2)
    {
      uint64_t v16 = 1LL;
      if (a4 != 1)
      {
        uint64_t v19 = sub_100126450((uint64_t *)&unk_1002B5C38);
        uint64_t v20 = swift_allocObject(v19, 48LL, 7LL);
        *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
        *(void *)(v20 + 32) = a1;
        *(_BYTE *)(v20 + 40) = 1;
      }
    }

    else if (a2 == 4)
    {
      uint64_t v16 = 1LL;
      switch(a1)
      {
        case 0LL:
          return v16;
        case 3LL:
          uint64_t v16 = 2LL;
          break;
        case 5LL:
          uint64_t v22 = static Logger.podcastsStatesCoordination.getter(v13);
          uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
          os_log_type_t v24 = static os_log_type_t.error.getter(v23);
          if (os_log_type_enabled(v23, v24))
          {
            uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v25 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "Somehow we end up with an Implicit Follow that does NOT have any play state, that doesn't make sense.",  v25,  2u);
            swift_slowDealloc(v25, -1LL, -1LL);
          }

          (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
          uint64_t v16 = 2LL;
          break;
        case 6LL:
          if ((a3 & 1) != 0)
          {
            uint64_t v16 = 2LL;
          }

          else
          {
            uint64_t v26 = static Logger.podcastsStatesCoordination.getter(v13);
            os_log_type_t v27 = (os_log_s *)Logger.logObject.getter(v26);
            os_log_type_t v28 = static os_log_type_t.error.getter(v27);
            if (os_log_type_enabled(v27, v28))
            {
              uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)uint64_t v29 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "The show has play state but for some reason it's in Store state. This doesn't make any sense, with playS tate a show should be at least Implicitly Followed. Figure out what's going on.",  v29,  2u);
              swift_slowDealloc(v29, -1LL, -1LL);
            }

            (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
            uint64_t v16 = 2LL;
          }

          break;
        default:
          return 3LL;
      }
    }

    else
    {
      return 3LL;
    }
  }

  else if (a4)
  {
    uint64_t v17 = sub_100126450((uint64_t *)&unk_1002B5C38);
    uint64_t v18 = swift_allocObject(v17, 48LL, 7LL);
    uint64_t v16 = 0LL;
    *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
    *(void *)(v18 + 32) = a1;
    *(_BYTE *)(v18 + 40) = 0;
  }

  else
  {
    return 0LL;
  }

  return v16;
}

uint64_t sub_1001530C4(uint64_t a1, char a2, __int16 a3, uint64_t a4)
{
  if (a2 == 3 || a2 == 2)
  {
    if (a4 != 1)
    {
      uint64_t v8 = sub_100126450((uint64_t *)&unk_1002B5C38);
      uint64_t v9 = swift_allocObject(v8, 48LL, 7LL);
      uint64_t v7 = 0LL;
      *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
      *(void *)(v9 + 32) = a1;
      *(_BYTE *)(v9 + 40) = 1;
      return v7;
    }

    return 0LL;
  }

  if (a2 != 1) {
    return 0LL;
  }
  if ((a3 & 1) != 0)
  {
    if ((a3 & 0x100) != 0)
    {
      if (a4)
      {
        uint64_t v15 = sub_100126450((uint64_t *)&unk_1002B5C38);
        uint64_t v16 = swift_allocObject(v15, 48LL, 7LL);
        *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
        *(void *)(v16 + 32) = a1;
        *(_BYTE *)(v16 + 40) = 0;
      }

      return 3LL;
    }

    else
    {
      uint64_t v7 = 2LL;
      if (a4)
      {
        uint64_t v11 = sub_100126450((uint64_t *)&unk_1002B5C38);
        uint64_t v12 = swift_allocObject(v11, 80LL, 7LL);
        *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4160;
        *(void *)(v12 + 32) = a1;
        *(_BYTE *)(v12 + 40) = 0;
        *(void *)(v12 + 4_Block_object_dispose(va, 8) = 1LL;
        *(_BYTE *)(v12 + 56) = 2;
        *(void *)(v12 + 64) = 0LL;
        *(_BYTE *)(v12 + 72) = 2;
      }
    }
  }

  else if ((a3 & 0x100) != 0)
  {
    if (a4)
    {
      uint64_t v13 = sub_100126450((uint64_t *)&unk_1002B5C38);
      uint64_t v14 = swift_allocObject(v13, 48LL, 7LL);
      *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
      *(void *)(v14 + 32) = a1;
      *(_BYTE *)(v14 + 40) = 0;
    }

    return 1LL;
  }

  else
  {
    if (a4)
    {
      uint64_t v5 = sub_100126450((uint64_t *)&unk_1002B5C38);
      uint64_t v6 = swift_allocObject(v5, 64LL, 7LL);
      *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4150;
      *(void *)(v6 + 32) = a1;
      *(_BYTE *)(v6 + 40) = 0;
      *(void *)(v6 + 4_Block_object_dispose(va, 8) = 0LL;
      *(_BYTE *)(v6 + 56) = 2;
    }

    return 1LL;
  }

  return v7;
}

uint64_t sub_1001532C4(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v45 = a5;
  int v44 = a4;
  uint64_t v43 = a3;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v40 = *(void *)(v7 - 8);
  uint64_t v41 = v7;
  __chkstk_darwin(v7);
  char v42 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = type metadata accessor for PodcastStateModel(0LL);
  uint64_t v9 = *(void *)(v46 - 8);
  uint64_t v10 = __chkstk_darwin(v46);
  os_log_type_t v39 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v36 - v13;
  PodcastStateModel.uuid.getter(v12);
  uint64_t v16 = v15;
  uint64_t v17 = (void *)objc_opt_self(&OBJC_CLASS___MTEpisode);
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v17 predicateForLibraryEpisodesOnPodcastUuid:v18];

  uint64_t v20 = kMTEpisodeEntityName;
  LODWORD(v3_Block_object_dispose(va, 8) = [a2 hasAnyObjectsInEntity:kMTEpisodeEntityName satisfyingPredicate:v19];
  swift_bridgeObjectRelease(v16);

  PodcastStateModel.uuid.getter(v21);
  uint64_t v23 = v22;
  id v24 = [v17 predicateForHasAnyVisualPlayState];
  NSString v25 = String._bridgeToObjectiveC()();
  id v26 = [v17 predicateForAllEpisodesOnPodcastUuid:v25];

  id v27 = [v24 AND:v26];
  uint64_t v28 = v46;

  unsigned int v29 = [a2 hasAnyObjectsInEntity:v20 satisfyingPredicate:v27];
  swift_bridgeObjectRelease(v23);

  uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, a1, v28);
  uint64_t v31 = v47;
  uint64_t v32 = PodcastStateModel.sanitizedState()(v30);
  if (!v31)
  {
    uint64_t v37 = a1;
    v36[12] = v38 ^ 1;
    v36[13] = v29 ^ 1;
    os_log_type_t v33 = *(void (**)(char *))(v9 + 8);
    uint64_t v47 = v32;
    v33(v14);
    os_log_type_t v34 = (char *)&loc_100153550 + *((int *)qword_100153AF0 + v47);
    uint64_t v38 = v33;
    __asm { BR              X10 }
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v28);
  return a1;
}

uint64_t property wrapper backing initializer of FeedIngesterProvider.downloadManager(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = sub_100126450(&qword_1002B5680);
  return Synchronized.init(wrappedValue:)(&v3, v1);
}

uint64_t FeedIngesterProvider.downloadManager.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_retain(v1);
  uint64_t v2 = sub_100126450(&qword_1002B5680);
  Synchronized.wrappedValue.getter(&v4, v1, v2);
  swift_release(v1);
  return v4;
}

uint64_t FeedIngesterProvider.downloadManager.setter(uint64_t a1)
{
  uint64_t v6 = a1;
  swift_beginAccess(v1 + 56, v5, 33LL, 0LL);
  swift_unknownObjectRetain(a1);
  uint64_t v3 = sub_100126450(&qword_1002B5C48);
  Synchronized.wrappedValue.setter(&v6, v3);
  swift_endAccess(v5);
  return swift_unknownObjectRelease(a1);
}

void (*FeedIngesterProvider.downloadManager.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = v3 + 3;
  void v3[5] = v1;
  swift_beginAccess(v1 + 56, v3, 33LL, 0LL);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = sub_100126450(&qword_1002B5680);
  Synchronized.wrappedValue.getter(v4, v5, v6);
  return sub_100153C7C;
}

void sub_100153C7C(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24LL);
  void v2[4] = v3;
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain(v3);
    uint64_t v4 = sub_100126450(&qword_1002B5C48);
    Synchronized.wrappedValue.setter(v2 + 4, v4);
    swift_unknownObjectRelease(v2[3]);
  }

  else
  {
    uint64_t v5 = sub_100126450(&qword_1002B5C48);
    Synchronized.wrappedValue.setter(v2 + 4, v5);
  }

  swift_endAccess(v2);
  free(v2);
}

id FeedIngesterProvider.createNewIngester(with:from:updaterJobUUID:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)v4[2];
  uint64_t v7 = v4[3];
  uint64_t v8 = v4[8];
  uint64_t v9 = v4[9];
  uint64_t v31 = v9;
  uint64_t v11 = v4[4];
  uint64_t v10 = (void *)v4[5];
  uint64_t v27 = v8;
  uint64_t v28 = v11;
  swift_beginAccess(v4 + 7, v34, 0LL, 0LL);
  uint64_t v12 = v4[7];
  swift_unknownObjectRetain(v9);
  id v30 = v6;
  swift_unknownObjectRetain(v7);
  swift_unknownObjectRetain(v11);
  id v13 = v10;
  swift_retain(v12);
  swift_unknownObjectRetain(v8);
  uint64_t v14 = sub_100126450(&qword_1002B5680);
  Synchronized.wrappedValue.getter(&v33, v12, v14);
  swift_release(v12);
  uint64_t v15 = v33;
  uint64_t v25 = v33;
  id v26 = [objc_allocWithZone((Class)type metadata accessor for EpisodeLevelCalculator(0)) init];
  uint64_t v16 = v4[6];
  type metadata accessor for NotificationSettings(0LL);
  swift_unknownObjectRetain(v16);
  __n128 v17 = swift_bridgeObjectRetain(a4);
  char v18 = static NotificationSettings.canSendNotification()(v17);
  id v19 = objc_allocWithZone((Class)&OBJC_CLASS___MTFeedIngester);
  id v20 = a1;
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  LOBYTE(v24) = v18 & 1;
  id v22 = [v19 initWithPodcast:v20 ctx:v30 storeInfoUpdater:v7 imageDownloader:v27 imageStore:v31 syncController:v28 library:v13 downloadManager:v15 episode LevelCalculator:v26 categoryIngester:v16 feedUpdateSource:a2 updaterJobUUID:v21 canSendNotifications:v24];

  swift_unknownObjectRelease(v7);
  swift_unknownObjectRelease(v27);
  swift_unknownObjectRelease(v31);
  swift_unknownObjectRelease(v28);

  swift_unknownObjectRelease(v25);
  swift_unknownObjectRelease(v16);
  return v22;
}

uint64_t FeedIngesterProvider.deinit()
{
  swift_unknownObjectRelease(*(void *)(v0 + 24));
  swift_unknownObjectRelease(*(void *)(v0 + 32));

  swift_unknownObjectRelease(*(void *)(v0 + 48));
  swift_release(*(void *)(v0 + 56));
  swift_unknownObjectRelease(*(void *)(v0 + 64));
  swift_unknownObjectRelease(*(void *)(v0 + 72));
  return v0;
}

uint64_t FeedIngesterProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

id sub_100153F70(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return FeedIngesterProvider.createNewIngester(with:from:updaterJobUUID:)(a1, a2, a3, a4);
}

uint64_t type metadata accessor for FeedIngesterProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC8Podcasts20FeedIngesterProvider);
}

void sub_100154114(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = type metadata accessor for IndexPath(0LL, a2, a3);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = (objc_class *)type metadata accessor for TVLibraryMenuViewController(0LL);
  v18.receiver = v4;
  v18.super_class = v10;
  objc_msgSendSuper2(&v18, "viewWillAppear:", a1 & 1);
  id v11 = [v4 tableView];
  if (v11)
  {
    uint64_t v12 = v11;
    id v13 = &v4[OBJC_IVAR____TtC8Podcasts27TVLibraryMenuViewController_selection];
    __n128 v14 = swift_beginAccess(&v4[OBJC_IVAR____TtC8Podcasts27TVLibraryMenuViewController_selection], v17, 0LL, 0LL);
    (*(void (**)(char *, char *, uint64_t, __n128))(v7 + 16))(v9, v13, v6, v14);
    NSIndexPath v19 = IndexPath._bridgeToObjectiveC()();
    Class isa = v19.super.isa;
    (*(void (**)(char *, uint64_t, NSUInteger, void *))(v7 + 8))(v9, v6, v19._length, v19._reserved);
    [v12 selectRowAtIndexPath:isa animated:0 scrollPosition:0];

    sub_100154280();
  }

  else
  {
    __break(1u);
  }

void sub_100154280()
{
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8Podcasts27TVLibraryMenuViewController_firstAppear) == 1)
  {
    uint64_t v1 = v0;
    *(_BYTE *)(v0 + OBJC_IVAR____TtC8Podcasts27TVLibraryMenuViewController_firstAppear) = 0;
    if (qword_1002B4820 != -1) {
      swift_once(&qword_1002B4820, sub_100154740);
    }
    if (*((void *)off_1002B5D48 + 2))
    {
      uint64_t v2 = (uint64_t (*)(uint64_t))*((void *)off_1002B5D48 + 6);
      uint64_t v3 = *((void *)off_1002B5D48 + 7);
      uint64_t v4 = swift_retain(v3);
      uint64_t v5 = (void *)v2(v4);
      swift_release(v3);
      uint64_t v6 = *(void **)(*sub_1001361FC( (void *)(v1 + OBJC_IVAR____TtC8Podcasts27TVLibraryMenuViewController_navigationDelegate),  *(void *)(v1 + OBJC_IVAR____TtC8Podcasts27TVLibraryMenuViewController_navigationDelegate + 24))
                    + OBJC_IVAR____TtC8Podcasts28TVLibrarySplitViewController_secondaryNavigationController);
      if (v6)
      {
        uint64_t v7 = sub_100126450((uint64_t *)&unk_1002B6160);
        uint64_t v8 = swift_allocObject(v7, 40LL, 7LL);
        *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4170;
        *(void *)(v8 + 32) = v5;
        uint64_t v12 = v8;
        specialized Array._endMutation()(v8);
        sub_100134284(0LL, (unint64_t *)&qword_1002B5DA8, &OBJC_CLASS___UIViewController_ptr);
        id v9 = v6;
        id v10 = v5;
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v12);
        [v9 setViewControllers:isa];

        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

void sub_100154740()
{
  uint64_t v0 = sub_100126450(&qword_1002B5DB0);
  uint64_t v1 = swift_allocObject(v0, 160LL, 7LL);
  *(_OWORD *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C10;
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
  uint64_t v3 = (NSBundle *)[v2 mainBundle];
  v19._object = (void *)0xE500000000000000LL;
  v4._uint64_t countAndFlagsBits = 0x45485F53574F4853LL;
  v4._object = (void *)0xEC00000052454441LL;
  v5._uint64_t countAndFlagsBits = 0LL;
  v5._object = (void *)0xE000000000000000LL;
  v19._uint64_t countAndFlagsBits = 0x73776F6853LL;
  Swift::String v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, v3, v5, v19);

  *(Swift::String *)(v1 + 32) = v6;
  *(void *)(v1 + 4_Block_object_dispose(va, 8) = sub_100154978;
  *(void *)(v1 + 56) = 0LL;
  uint64_t v7 = (NSBundle *)[v2 mainBundle];
  v20._object = (void *)0xE000000000000000LL;
  v8._uint64_t countAndFlagsBits = 0x4445564153LL;
  v8._object = (void *)0xE500000000000000LL;
  v9._uint64_t countAndFlagsBits = 0LL;
  v9._object = (void *)0xE000000000000000LL;
  v20._uint64_t countAndFlagsBits = 0LL;
  Swift::String v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, v7, v9, v20);

  *(Swift::String *)(v1 + 64) = v10;
  *(void *)(v1 + 80) = sub_10015499C;
  *(void *)(v1 + 8_Block_object_dispose(va, 8) = 0LL;
  id v11 = (NSBundle *)[v2 mainBundle];
  v21._object = (void *)0xE000000000000000LL;
  v12._uint64_t countAndFlagsBits = 0x452074736574614CLL;
  v12._object = (void *)0xEF7365646F736970LL;
  v13._uint64_t countAndFlagsBits = 0LL;
  v13._object = (void *)0xE000000000000000LL;
  v21._uint64_t countAndFlagsBits = 0LL;
  Swift::String v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, v11, v13, v21);

  *(Swift::String *)(v1 + 96) = v14;
  *(void *)(v1 + 112) = sub_1001549A8;
  *(void *)(v1 + 120) = 0LL;
  uint64_t v15 = (NSBundle *)[v2 mainBundle];
  v22._object = (void *)0xE000000000000000LL;
  v16._uint64_t countAndFlagsBits = 0x736E6F6974617453LL;
  v16._object = (void *)0xE800000000000000LL;
  v17._uint64_t countAndFlagsBits = 0LL;
  v17._object = (void *)0xE000000000000000LL;
  v22._uint64_t countAndFlagsBits = 0LL;
  Swift::String v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, v15, v17, v22);

  *(Swift::String *)(v1 + 12_Block_object_dispose(va, 8) = v18;
  *(void *)(v1 + 144) = sub_1001549DC;
  *(void *)(v1 + 152) = 0LL;
  off_1002B5D48 = (_UNKNOWN *)v1;
}

id sub_100154978()
{
  return [objc_allocWithZone((Class)MTTVShowsViewController) init];
}

id sub_10015499C()
{
  return sub_1001549B4((uint64_t (*)(void))type metadata accessor for TVBookmarksViewController);
}

id sub_1001549A8()
{
  return sub_1001549B4((uint64_t (*)(void))type metadata accessor for TVLatestEpisodesViewController);
}

id sub_1001549B4(uint64_t (*a1)(void))
{
  return [objc_allocWithZone((Class)a1(0)) init];
}

id sub_1001549DC()
{
  return [objc_allocWithZone((Class)MTTVStationsViewController) init];
}

void sub_100154A00()
{
  qword_1002B5D50 = 0x4052000000000000LL;
}

id sub_100154A6C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TVLibraryMenuViewController(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100154AF0()
{
  return type metadata accessor for TVLibraryMenuViewController(0LL);
}

uint64_t type metadata accessor for TVLibraryMenuViewController(uint64_t a1)
{
  uint64_t result = qword_1002B5D98;
  if (!qword_1002B5D98) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TVLibraryMenuViewController);
  }
  return result;
}

uint64_t sub_100154B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = "(";
  uint64_t result = type metadata accessor for IndexPath(319LL, a2, a3);
  if (v5 <= 0x3F)
  {
    v6[1] = *(void *)(result - 8) + 64LL;
    _DWORD v6[2] = &unk_1001C5078;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v6, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_100154BB4(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t v3 = (void *)IndexPath._bridgeToObjectiveC()();
  id v4 = [a1 dequeueReusableCellWithIdentifier:v2 forIndexPath:v3];

  id v5 = [v4 textLabel];
  if (v5)
  {
    Swift::String v6 = v5;
    if (qword_1002B4820 != -1) {
      swift_once(&qword_1002B4820, sub_100154740);
    }
    uint64_t v7 = off_1002B5D48;
    unint64_t result = IndexPath.row.getter();
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (result < v7[2])
    {
      uint64_t v9 = v7[4 * result + 5];
      swift_bridgeObjectRetain(v9);
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v9);
      [v6 setText:v10];

      goto LABEL_7;
    }

    __break(1u);
    return result;
  }

void sub_100154D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = type metadata accessor for IndexPath(0LL, a2, a3);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v27[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  uint64_t v10 = v4 + OBJC_IVAR____TtC8Podcasts27TVLibraryMenuViewController_selection;
  __n128 v11 = swift_beginAccess(v4 + OBJC_IVAR____TtC8Podcasts27TVLibraryMenuViewController_selection, v27, 33LL, 0LL);
  (*(void (**)(uint64_t, char *, uint64_t, __n128))(v7 + 40))(v10, v9, v6, v11);
  swift_endAccess(v27);
  if (qword_1002B4820 != -1) {
    swift_once(&qword_1002B4820, sub_100154740);
  }
  Swift::String v12 = off_1002B5D48;
  unint64_t v13 = IndexPath.row.getter();
  if ((v13 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (v13 >= v12[2])
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  Swift::String v14 = (char *)&v12[4 * v13];
  Swift::String v16 = (uint64_t (*)(uint64_t))*((void *)v14 + 6);
  uint64_t v15 = *((void *)v14 + 7);
  uint64_t v17 = swift_retain(v15);
  Swift::String v18 = (void *)v16(v17);
  swift_release(v15);
  Swift::String v19 = *(void **)(*sub_1001361FC( (void *)(v4 + OBJC_IVAR____TtC8Podcasts27TVLibraryMenuViewController_navigationDelegate),  *(void *)(v4 + OBJC_IVAR____TtC8Podcasts27TVLibraryMenuViewController_navigationDelegate + 24))
                 + OBJC_IVAR____TtC8Podcasts28TVLibrarySplitViewController_secondaryNavigationController);
  if (v19)
  {
    uint64_t v20 = sub_100126450((uint64_t *)&unk_1002B6160);
    uint64_t v21 = swift_allocObject(v20, 40LL, 7LL);
    *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4170;
    *(void *)(v21 + 32) = v18;
    v27[0] = v21;
    specialized Array._endMutation()(v21);
    uint64_t v22 = v27[0];
    sub_100134284(0LL, (unint64_t *)&qword_1002B5DA8, &OBJC_CLASS___UIViewController_ptr);
    id v23 = v19;
    id v24 = v18;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v22);
    [v23 setViewControllers:isa];

    return;
  }

uint64_t initializeBufferWithCopyOfBuffer for TVLibraryMenuViewController.NavigationTarget( uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for TVLibraryMenuViewController.NavigationTarget(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 24));
}

uint64_t initializeWithCopy for TVLibraryMenuViewController.NavigationTarget(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  __int128 v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain(v4);
  swift_retain(v3);
  return a1;
}

void *assignWithCopy for TVLibraryMenuViewController.NavigationTarget(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v7 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v8 = a1[3];
  a1[2] = v7;
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v8);
  return a1;
}

__n128 initializeWithTake for TVLibraryMenuViewController.NavigationTarget(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for TVLibraryMenuViewController.NavigationTarget(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  uint64_t v5 = a1[3];
  a1[3] = v4;
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for TVLibraryMenuViewController.NavigationTarget(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TVLibraryMenuViewController.NavigationTarget( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for TVLibraryMenuViewController.NavigationTarget()
{
  return &type metadata for TVLibraryMenuViewController.NavigationTarget;
}

void sub_1001551C8(void *a1, uint64_t a2, void *a3, SEL *a4)
{
  uint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___UIApplication);
  id v8 = a3;
  id v12 = a1;
  id v9 = [v7 sharedApplication];
  id v10 = [v9 delegate];

  if (v10)
  {
    if ([v10 respondsToSelector:*a4])
    {
      id v11 = [v7 sharedApplication];
      objc_msgSend(v10, *a4, v11);
    }

    else
    {
    }

    swift_unknownObjectRelease(v10);
  }

  else
  {
  }

uint64_t sub_100155388(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2)
  {
    uint64_t v5 = sub_100126450(&qword_1002B5E70);
    uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v5);
  }

  swift_retain(v3);
  v4(v2);
  swift_release(v3);
  return swift_bridgeObjectRelease(v2);
}

id sub_1001555F0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SceneDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SceneDelegate()
{
  return objc_opt_self(&OBJC_CLASS____TtC8Podcasts13SceneDelegate);
}

unint64_t sub_10015566C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    __n128 result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(a2 + 40);
        id v11 = *(void **)(*(void *)(a2 + 48) + 8 * v6);
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        uint64_t v14 = v13;
        Hasher.init(_seed:)(v30, v10);
        id v15 = v11;
        String.hash(into:)(v30, v12, v14);
        Swift::Int v16 = Hasher._finalize()();

        __n128 result = swift_bridgeObjectRelease(v14);
        unint64_t v17 = v16 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v17 < v8) {
            goto LABEL_5;
          }
        }

        else if (v17 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v17)
        {
LABEL_11:
          uint64_t v18 = *(void *)(a2 + 48);
          Swift::String v19 = (void *)(v18 + 8 * v3);
          uint64_t v20 = (void *)(v18 + 8 * v6);
          if (v3 != v6 || v19 >= v20 + 1) {
            *Swift::String v19 = *v20;
          }
          uint64_t v21 = *(void *)(a2 + 56);
          uint64_t v22 = (_OWORD *)(v21 + 32 * v3);
          id v23 = (_OWORD *)(v21 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v22 >= v23 + 2))
          {
            __int128 v9 = v23[1];
            _OWORD *v22 = *v23;
            v22[1] = v9;
            int64_t v3 = v6;
          }
        }

void sub_10015585C(uint64_t a1)
{
  uint64_t v90 = type metadata accessor for URL(0LL);
  uint64_t v88 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v89 = (char *)&v77 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v3 = a1;
    }
    else {
      uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    __n128 v4 = swift_bridgeObjectRetain(a1);
    uint64_t v5 = __CocoaSet.makeIterator()(v3, v4);
    uint64_t v6 = sub_100134284(0LL, &qword_1002B5E78, &OBJC_CLASS___UIOpenURLContext_ptr);
    uint64_t v7 = sub_100157370((unint64_t *)&unk_1002B5E80, &qword_1002B5E78, &OBJC_CLASS___UIOpenURLContext_ptr);
    unint64_t v8 = Set.Iterator.init(_cocoa:)(v97, v5, v6, v7);
    a1 = v97[0];
    uint64_t v81 = v97[1];
    uint64_t v9 = v97[2];
    uint64_t v10 = v97[3];
    unint64_t v11 = v97[4];
  }

  else
  {
    uint64_t v12 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v81 = a1 + 56;
    uint64_t v9 = ~v12;
    uint64_t v14 = -v12;
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    else {
      uint64_t v15 = -1LL;
    }
    unint64_t v11 = v15 & v13;
    swift_bridgeObjectRetain(a1);
    uint64_t v10 = 0LL;
  }

  uint64_t v79 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v80 = (unint64_t)(v9 + 64) >> 6;
  UIApplicationOpenURLOptionsKey v86 = UIApplicationOpenURLOptionsSourceApplicationKey;
  UIApplicationOpenURLOptionsKey v85 = UIApplicationOpenURLOptionsAnnotationKey;
  UIApplicationOpenURLOptionsKey v84 = UIApplicationOpenURLOptionsOpenInPlaceKey;
  __int128 v83 = xmmword_1001C3C20;
  Swift::Int v16 = &_swiftEmptyDictionarySingleton;
  unint64_t v17 = &selRef__playbackRequestIdentifierWithHost_queryKey_value_;
  uint64_t v77 = (char *)&type metadata for Any + 8;
  uint64_t v78 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v87 = v9;
  uint64_t v82 = a1;
  while (a1 < 0)
  {
    uint64_t v21 = __CocoaSet.Iterator.next()(v8);
    if (!v21) {
      goto LABEL_54;
    }
    uint64_t v22 = v21;
    *(void *)&v94[0] = v21;
    uint64_t v23 = sub_100134284(0LL, &qword_1002B5E78, &OBJC_CLASS___UIOpenURLContext_ptr);
    swift_unknownObjectRetain(v22);
    swift_dynamicCast(&v95, v94, v78, v23, 7LL);
    id v24 = (void *)v95;
    id v25 = (id)swift_unknownObjectRelease(v22);
    uint64_t v20 = v10;
    uint64_t v18 = v11;
    if (!v24) {
      goto LABEL_54;
    }
LABEL_34:
    unint64_t v91 = v18;
    uint64_t v92 = v20;
    uint64_t v29 = v17;
    id v30 = v16;
    uint64_t v31 = static os_log_type_t.default.getter(v25);
    uint64_t v32 = sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v33 = (void *)static OS_os_log.launch.getter(v32);
    uint64_t v34 = sub_100126450((uint64_t *)&unk_1002B5E60);
    uint64_t v35 = swift_allocObject(v34, 72LL, 7LL);
    *(_OWORD *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = v83;
    id v36 = objc_msgSend(v24, "URL", v77);
    uint64_t v37 = v89;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v36);

    uint64_t v38 = URL.absoluteString.getter();
    uint64_t v40 = v39;
    uint64_t v41 = *(void (**)(char *, uint64_t))(v88 + 8);
    v41(v37, v90);
    *(void *)(v35 + 56) = &type metadata for String;
    *(void *)(v35 + 64) = sub_100127C90();
    *(void *)(v35 + 32) = v38;
    *(void *)(v35 + 40) = v40;
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v33, "Open URL context: %s", v77);

    swift_bridgeObjectRelease(v35);
    char v42 = v86;
    id v43 = [v24 options];
    id v44 = [v43 sourceApplication];

    if (v44)
    {
      uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      uint64_t v47 = v46;

      *((void *)&v96 + 1) = &type metadata for String;
      *(void *)&__int128 v95 = v45;
      *((void *)&v95 + 1) = v47;
      sub_100136668(&v95, v94);
      Swift::Int v16 = v30;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v30);
      uint64_t v93 = (uint64_t)v30;
      sub_10015B678(v94, v42, isUniquelyReferenced_nonNull_native);
      uint64_t v49 = v93;

      swift_bridgeObjectRelease(0x8000000000000000LL);
      unint64_t v17 = v29;
    }

    else
    {
      Swift::Int v16 = v30;
      swift_bridgeObjectRetain(v30);
      unint64_t v50 = sub_10015F0A4((uint64_t)v42);
      char v52 = v51;
      swift_bridgeObjectRelease(v30);
      if ((v52 & 1) != 0)
      {
        char v53 = swift_isUniquelyReferenced_nonNull_native(v30);
        *(void *)&v94[0] = v30;
        uint64_t v49 = (uint64_t)v30;
        unint64_t v17 = v29;
        if ((v53 & 1) == 0)
        {
          sub_10015B9AC();
          uint64_t v49 = *(void *)&v94[0];
        }

        sub_100136668((_OWORD *)(*(void *)(v49 + 56) + 32 * v50), &v95);
        sub_10015566C(v50, v49);
        swift_bridgeObjectRelease(0x8000000000000000LL);
      }

      else
      {
        __int128 v95 = 0u;
        __int128 v96 = 0u;
        uint64_t v49 = (uint64_t)v30;
        unint64_t v17 = v29;
      }

      sub_10014E0D4((uint64_t)&v95);
    }

    id v54 = v85;
    id v55 = [v24 options];
    id v56 = [v55 annotation];

    if (v56)
    {
      _bridgeAnyObjectToAny(_:)(&v95, v56);
      swift_unknownObjectRelease(v56);
      sub_100136668(&v95, v94);
      char v57 = swift_isUniquelyReferenced_nonNull_native(v49);
      uint64_t v93 = v49;
      sub_10015B678(v94, v54, v57);
      uint64_t v49 = v93;

      swift_bridgeObjectRelease(0x8000000000000000LL);
    }

    else
    {
      swift_bridgeObjectRetain(v49);
      unint64_t v58 = sub_10015F0A4((uint64_t)v54);
      char v60 = v59;
      swift_bridgeObjectRelease(v49);
      if ((v60 & 1) != 0)
      {
        char v61 = swift_isUniquelyReferenced_nonNull_native(v49);
        *(void *)&v94[0] = v49;
        if ((v61 & 1) == 0)
        {
          sub_10015B9AC();
          uint64_t v49 = *(void *)&v94[0];
        }

        sub_100136668((_OWORD *)(*(void *)(v49 + 56) + 32 * v58), &v95);
        sub_10015566C(v58, v49);
        swift_bridgeObjectRelease(0x8000000000000000LL);
      }

      else
      {
        __int128 v95 = 0u;
        __int128 v96 = 0u;
      }

      sub_10014E0D4((uint64_t)&v95);
    }

    uint64_t v62 = v84;
    id v63 = [v24 options];
    unsigned __int8 v64 = [v63 openInPlace];

    *((void *)&v96 + 1) = &type metadata for Bool;
    LOBYTE(v95) = v64;
    sub_100136668(&v95, v94);
    char v65 = swift_isUniquelyReferenced_nonNull_native(v49);
    uint64_t v93 = v49;
    sub_10015B678(v94, v62, v65);
    uint64_t v66 = v93;

    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v67 = (void *)objc_opt_self(&OBJC_CLASS___UIApplication);
    id v68 = [v67 sharedApplication];
    id v69 = [v68 delegate];

    if (v69)
    {
      if ([v69 respondsToSelector:v17[441]])
      {
        id v70 = [v67 sharedApplication];
        id v71 = [v24 URL];
        uint64_t v72 = v89;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v71);

        URL._bridgeToObjectiveC()(v73);
        unint64_t v75 = v74;
        type metadata accessor for OpenURLOptionsKey(0LL);
        sub_100157328();
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v69, v17[441], v70, v75, isa);
        swift_unknownObjectRelease(v69);

        swift_bridgeObjectRelease(v66);
        unint64_t v8 = (void *)((uint64_t (*)(char *, uint64_t))v41)(v72, v90);
      }

      else
      {

        swift_bridgeObjectRelease(v66);
        unint64_t v8 = (void *)swift_unknownObjectRelease(v69);
      }
    }

    else
    {

      unint64_t v8 = (void *)swift_bridgeObjectRelease(v66);
    }

    unint64_t v11 = v91;
    uint64_t v10 = v92;
    a1 = v82;
  }

  if (v11)
  {
    uint64_t v18 = (v11 - 1) & v11;
    unint64_t v19 = __clz(__rbit64(v11)) | (v10 << 6);
    uint64_t v20 = v10;
LABEL_33:
    id v25 = *(id *)(*(void *)(a1 + 48) + 8 * v19);
    id v24 = v25;
    if (!v25) {
      goto LABEL_54;
    }
    goto LABEL_34;
  }

  int64_t v26 = v10 + 1;
  if (!__OFADD__(v10, 1LL))
  {
    if (v26 >= v80) {
      goto LABEL_54;
    }
    unint64_t v27 = *(void *)(v81 + 8 * v26);
    uint64_t v20 = v10 + 1;
    if (!v27)
    {
      uint64_t v20 = v10 + 2;
      if (v10 + 2 >= v80) {
        goto LABEL_54;
      }
      unint64_t v27 = *(void *)(v81 + 8 * v20);
      if (!v27)
      {
        uint64_t v20 = v10 + 3;
        if (v10 + 3 >= v80) {
          goto LABEL_54;
        }
        unint64_t v27 = *(void *)(v81 + 8 * v20);
        if (!v27)
        {
          uint64_t v20 = v10 + 4;
          if (v10 + 4 >= v80) {
            goto LABEL_54;
          }
          unint64_t v27 = *(void *)(v81 + 8 * v20);
          if (!v27)
          {
            uint64_t v28 = v10 + 5;
            while (v80 != v28)
            {
              unint64_t v27 = *(void *)(v81 + 8 * v28++);
              if (v27)
              {
                uint64_t v20 = v28 - 1;
                goto LABEL_32;
              }
            }

LABEL_54:
            sub_100157320(a1);
            return;
          }
        }
      }
    }

void sub_100156154(void *a1, void *a2)
{
  __n128 v4 = (void *)objc_opt_self(&OBJC_CLASS___UIApplication);
  id v5 = [v4 sharedApplication];
  id v6 = [v5 delegate];

  if (v6)
  {
    __int128 v96 = &OBJC_PROTOCOL___MTAppDelegateProtocol;
    uint64_t v7 = swift_dynamicCastObjCProtocolConditional(v6, 1LL, &v96);
    if (v7)
    {
      unint64_t v8 = (void *)v7;
      uint64_t v9 = objc_opt_self(&OBJC_CLASS___UIWindowScene);
      uint64_t v10 = swift_dynamicCastObjCClass(a1, v9);
      if (v10)
      {
        uint64_t v11 = v10;
        if ([v8 respondsToSelector:"createWindowWithScene:"])
        {
          id v12 = a1;
          id v13 = [v8 createWindowWithScene:v11];
          if (!v13)
          {
            swift_unknownObjectRelease(v6);

            return;
          }

          uint64_t v14 = v13;
          __int128 v83 = v12;
          id v15 = [v13 traitCollection];
          id v16 = [v15 userInterfaceIdiom];

          if (!v16)
          {
            unint64_t v17 = (void *)objc_opt_self(&OBJC_CLASS___UITraitCollection);
            id v18 = v14;
            id v19 = [v17 traitCollectionWithHorizontalSizeClass:1];
            [v18 _setLocalOverrideTraitCollection:v19];
          }

          [v8 setWindow:v14];
          [v14 makeKeyAndVisible];
          id v20 = [a2 shortcutItem];
          uint64_t v21 = (void *)&unk_1001C4000;
          id v84 = v6;
          uint64_t v88 = v4;
          uint64_t v82 = v14;
          if (v20)
          {
            uint64_t v22 = v20;
            uint64_t v23 = static os_log_type_t.default.getter(v20);
            uint64_t v24 = sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
            id v25 = (void *)static OS_os_log.launch.getter(v24);
            uint64_t v26 = sub_100126450((uint64_t *)&unk_1002B5E60);
            uint64_t v27 = swift_allocObject(v26, 72LL, 7LL);
            *(_OWORD *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
            id v28 = [v22 type];
            uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
            uint64_t v31 = v30;

            *(void *)(v27 + 56) = &type metadata for String;
            *(void *)(v27 + 64) = sub_100127C90();
            *(void *)(v27 + 32) = v29;
            *(void *)(v27 + 40) = v31;
            os_log(_:dso:log:_:_:)( v23,  &_mh_execute_header,  v25,  "Perform shortcut action type: %{public}s",  40LL,  2LL,  v27);

            swift_bridgeObjectRelease(v27);
            id v32 = [v88 sharedApplication];
            id v33 = [v32 delegate];

            if (v33)
            {
              uint64_t v21 = &unk_1001C4000;
              if ([v33 respondsToSelector:"application:performActionForShortcutItem:completionHandler:"])
              {
                swift_unknownObjectRetain(v33);
                id v34 = [v88 sharedApplication];
                uint64_t v94 = EntitledFirstTimeAvailableMigrator.stepIdentifier.getter;
                uint64_t v95 = 0LL;
                uint64_t aBlock = _NSConcreteStackBlock;
                uint64_t v91 = 1107296256LL;
                uint64_t v92 = sub_10014CA28;
                uint64_t v93 = &unk_1002479C0;
                uint64_t v35 = _Block_copy(&aBlock);
                [v33 application:v34 performActionForShortcutItem:v22 completionHandler:v35];
                _Block_release(v35);
                uint64_t v36 = v95;

                swift_unknownObjectRelease_n(v33, 2LL);
                swift_release(v36);
              }

              else
              {

                swift_unknownObjectRelease(v33);
              }
            }

            else
            {

              uint64_t v21 = (void *)&unk_1001C4000;
            }
          }

          id v37 = [a2 URLContexts];
          uint64_t v38 = sub_100134284(0LL, &qword_1002B5E78, &OBJC_CLASS___UIOpenURLContext_ptr);
          uint64_t v39 = sub_100157370((unint64_t *)&unk_1002B5E80, &qword_1002B5E78, &OBJC_CLASS___UIOpenURLContext_ptr);
          uint64_t v40 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v37, v38, v39);

          if ((v40 & 0xC000000000000001LL) != 0)
          {
            if (v40 < 0) {
              uint64_t v41 = v40;
            }
            else {
              uint64_t v41 = v40 & 0xFFFFFFFFFFFFFF8LL;
            }
            if (__CocoaSet.count.getter(v41) < 1)
            {
LABEL_25:
              swift_bridgeObjectRelease(v40);
              id v42 = [a2 userActivities];
              uint64_t v43 = sub_100134284(0LL, &qword_1002B5E98, &OBJC_CLASS___NSUserActivity_ptr);
              uint64_t v44 = sub_100157370( (unint64_t *)&unk_1002B5EA0,  &qword_1002B5E98,  &OBJC_CLASS___NSUserActivity_ptr);
              uint64_t v45 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v42, v43, v44);

              uint64_t v85 = v43;
              if ((v45 & 0xC000000000000001LL) != 0)
              {
                if (v45 < 0) {
                  uint64_t v48 = v45;
                }
                else {
                  uint64_t v48 = v45 & 0xFFFFFFFFFFFFFF8LL;
                }
                uint64_t v49 = __CocoaSet.makeIterator()(v48, v47);
                uint64_t v46 = Set.Iterator.init(_cocoa:)(v97, v49, v43, v44);
                uint64_t v45 = v97[0];
                uint64_t v87 = v97[1];
                uint64_t v50 = v97[2];
                uint64_t v51 = v97[3];
                unint64_t v52 = v97[4];
              }

              else
              {
                uint64_t v51 = 0LL;
                uint64_t v53 = -1LL << *(_BYTE *)(v45 + 32);
                uint64_t v87 = v45 + 56;
                uint64_t v54 = ~v53;
                uint64_t v55 = -v53;
                if (v55 < 64) {
                  uint64_t v56 = ~(-1LL << v55);
                }
                else {
                  uint64_t v56 = -1LL;
                }
                unint64_t v52 = v56 & *(void *)(v45 + 56);
                uint64_t v50 = v54;
              }

              int64_t v86 = (unint64_t)(v50 + 64) >> 6;
              uint64_t v57 = v21[40];
              while (1)
              {
                if (v45 < 0)
                {
                  uint64_t v61 = __CocoaSet.Iterator.next()(v46);
                  if (!v61) {
                    goto LABEL_64;
                  }
                  uint64_t v62 = v61;
                  uint64_t v89 = v61;
                  swift_unknownObjectRetain(v61);
                  swift_dynamicCast(&aBlock, &v89, (char *)&type metadata for Swift.AnyObject + 8, v85, 7LL);
                  id v63 = aBlock;
                  unsigned __int8 v64 = (void **)swift_unknownObjectRelease(v62);
                  uint64_t v60 = v51;
                  uint64_t v58 = v52;
                }

                else
                {
                  if (v52)
                  {
                    uint64_t v58 = (v52 - 1) & v52;
                    unint64_t v59 = __clz(__rbit64(v52)) | (v51 << 6);
                    uint64_t v60 = v51;
                  }

                  else
                  {
                    int64_t v65 = v51 + 1;
                    if (__OFADD__(v51, 1LL))
                    {
                      __break(1u);
                      return;
                    }

                    if (v65 >= v86) {
                      goto LABEL_64;
                    }
                    unint64_t v66 = *(void *)(v87 + 8 * v65);
                    uint64_t v60 = v51 + 1;
                    if (!v66)
                    {
                      uint64_t v60 = v51 + 2;
                      if (v51 + 2 >= v86) {
                        goto LABEL_64;
                      }
                      unint64_t v66 = *(void *)(v87 + 8 * v60);
                      if (!v66)
                      {
                        uint64_t v60 = v51 + 3;
                        if (v51 + 3 >= v86) {
                          goto LABEL_64;
                        }
                        unint64_t v66 = *(void *)(v87 + 8 * v60);
                        if (!v66)
                        {
                          uint64_t v60 = v51 + 4;
                          if (v51 + 4 >= v86) {
                            goto LABEL_64;
                          }
                          unint64_t v66 = *(void *)(v87 + 8 * v60);
                          if (!v66)
                          {
                            uint64_t v67 = v51 + 5;
                            while (v86 != v67)
                            {
                              unint64_t v66 = *(void *)(v87 + 8 * v67++);
                              if (v66)
                              {
                                uint64_t v60 = v67 - 1;
                                goto LABEL_57;
                              }
                            }

LABEL_64:
                            sub_100157320(v45);
                            swift_unknownObjectRelease(v84);

                            return;
                          }
                        }
                      }
                    }

      uint64_t v60 = (v69 - 1) & v69;
      uint64_t v61 = __clz(__rbit64(v69)) + (v62 << 6);
    }

    uint64_t v67 = *(id *)(*(void *)(v52 + 56) + 8 * v61);
    if (v67) {
      goto LABEL_66;
    }
    goto LABEL_68;
  }

  while (1)
  {
    id v63 = __CocoaDictionary.Iterator.next()(v57);
    if (!v63) {
      break;
    }
    int64_t v65 = v64;
    swift_unknownObjectRelease(v63);
    uint64_t v100 = v65;
    unint64_t v66 = sub_100134284(0LL, (unint64_t *)&qword_1002B50A0, &OBJC_CLASS___MTPodcast_ptr);
    swift_unknownObjectRetain(v65);
    swift_dynamicCast(&v101, &v100, v93, v66, 7LL);
    uint64_t v67 = v101;
    swift_unknownObjectRelease(v65);
    uint64_t v62 = v58;
    uint64_t v60 = v51;
    if (!v67) {
      break;
    }
LABEL_66:
    sub_10014F148(v67, 0LL, 4, v97);

    uint64_t v58 = v62;
    uint64_t v51 = v60;
    if ((v52 & 0x8000000000000000LL) == 0) {
      goto LABEL_44;
    }
  }

void sub_100156A80(void *a1)
{
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  uint64_t v3 = sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
  __n128 v4 = (void *)static OS_os_log.launch.getter(v3);
  uint64_t v5 = sub_100126450((uint64_t *)&unk_1002B5E60);
  uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
  *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
  id v7 = [a1 activityType];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_100127C90();
  *(void *)(v6 + 32) = v8;
  *(void *)(v6 + 40) = v10;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v4, "Continue user activity type: %{public}s", 39LL, 2LL, v6);

  swift_bridgeObjectRelease(v6);
  uint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___UIApplication);
  id v12 = [v11 sharedApplication];
  id v13 = [v12 delegate];

  if (v13)
  {
    if ([v13 respondsToSelector:"application:continueUserActivity:restorationHandler:"])
    {
      id v14 = [v11 sharedApplication];
      void v17[4] = EntitledFirstTimeAvailableMigrator.stepIdentifier.getter;
      uint64_t v18 = 0LL;
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 1107296256LL;
      v17[2] = sub_100155388;
      void v17[3] = &unk_100247970;
      id v15 = _Block_copy(v17);
      [v13 application:v14 continueUserActivity:a1 restorationHandler:v15];
      _Block_release(v15);
      uint64_t v16 = v18;
      swift_unknownObjectRelease(v13);

      swift_release(v16);
    }

    else
    {
      swift_unknownObjectRelease(v13);
    }
  }

void sub_100156CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  uint64_t v5 = sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v6 = (void *)static OS_os_log.launch.getter(v5);
  uint64_t v7 = sub_100126450((uint64_t *)&unk_1002B5E60);
  uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_100127C90();
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  *(void *)&double v9 = swift_bridgeObjectRetain(a2).n128_u64[0];
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v6, "Will continue user activity type: %{public}s", 44LL, 2LL, v8, v9);

  swift_bridgeObjectRelease(v8);
  uint64_t v10 = (void *)objc_opt_self(&OBJC_CLASS___UIApplication);
  id v11 = [v10 sharedApplication];
  id v12 = [v11 delegate];

  if (v12)
  {
    if ([v12 respondsToSelector:"application:willContinueUserActivityWithType:"])
    {
      id v13 = [v10 sharedApplication];
      id v14 = String._bridgeToObjectiveC()();
      [v12 application:v13 willContinueUserActivityWithType:v14];
      swift_unknownObjectRelease(v12);
    }

    else
    {
      swift_unknownObjectRelease(v12);
    }
  }

void sub_100156E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = static os_log_type_t.default.getter(a1);
  uint64_t v7 = sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v8 = (void *)static OS_os_log.launch.getter(v7);
  uint64_t v9 = sub_100126450((uint64_t *)&unk_1002B5E60);
  uint64_t v10 = swift_allocObject(v9, 112LL, 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4150;
  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v11 = sub_100127C90();
  *(void *)(v10 + 64) = v11;
  *(void *)(v10 + 32) = a1;
  *(void *)(v10 + 40) = a2;
  uint64_t v23 = a3;
  swift_getErrorValue(a3, v25, v24);
  uint64_t v12 = v24[1];
  uint64_t v13 = v24[2];
  __n128 v14 = swift_bridgeObjectRetain(a2);
  uint64_t v15 = Error.localizedDescription.getter(v12, v13, v14);
  *(void *)(v10 + 96) = &type metadata for String;
  *(void *)(v10 + 104) = v11;
  *(void *)(v10 + 72) = v15;
  *(void *)(v10 + 80) = v16;
  os_log(_:dso:log:_:_:)( v6,  &_mh_execute_header,  v8,  "Did fail to continue user activity type: %{public}s\nerror: %{public}s",  69LL,  2LL,  v10);

  swift_bridgeObjectRelease(v10);
  unint64_t v17 = (void *)objc_opt_self(&OBJC_CLASS___UIApplication);
  id v18 = [v17 sharedApplication];
  id v19 = [v18 delegate];

  if (v19)
  {
    if ([v19 respondsToSelector:"application:didFailToContinueUserActivityWithType:error:"])
    {
      id v20 = [v17 sharedApplication];
      NSString v21 = String._bridgeToObjectiveC()();
      uint64_t v22 = (void *)_convertErrorToNSError(_:)(v23);
      [v19 application:v20 didFailToContinueUserActivityWithType:v21 error:v22];

      swift_unknownObjectRelease(v19);
    }

    else
    {
      swift_unknownObjectRelease(v19);
    }
  }

uint64_t sub_10015705C(void *a1, void (**a2)(void, void))
{
  uint64_t v4 = swift_allocObject(&unk_100247930, 24LL, 7LL);
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  uint64_t v5 = _Block_copy(a2);
  uint64_t v6 = static os_log_type_t.default.getter(v5);
  uint64_t v7 = sub_100134284(0LL, &qword_1002B4F90, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v8 = (void *)static OS_os_log.launch.getter(v7);
  uint64_t v9 = sub_100126450((uint64_t *)&unk_1002B5E60);
  uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
  id v11 = [a1 type];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v14 = v13;

  *(void *)(v10 + 56) = &type metadata for String;
  *(void *)(v10 + 64) = sub_100127C90();
  *(void *)(v10 + 32) = v12;
  *(void *)(v10 + 40) = v14;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v8, "Perform shortcut action type: %{public}s", 40LL, 2LL, v10);

  swift_bridgeObjectRelease(v10);
  uint64_t v15 = (void *)objc_opt_self(&OBJC_CLASS___UIApplication);
  id v16 = [v15 sharedApplication];
  id v17 = [v16 delegate];

  if (v17)
  {
    if ([v17 respondsToSelector:"application:performActionForShortcutItem:completionHandler:"])
    {
      swift_unknownObjectRetain(v17);
      id v18 = [v15 sharedApplication];
      void v22[4] = sub_100149510;
      uint64_t v23 = v4;
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 1107296256LL;
      void v22[2] = sub_10014CA28;
      v22[3] = &unk_100247948;
      id v19 = _Block_copy(v22);
      swift_retain(v4);
      [v17 application:v18 performActionForShortcutItem:a1 completionHandler:v19];
      _Block_release(v19);
      uint64_t v20 = v23;
      swift_release(v4);
      swift_unknownObjectRelease_n(v17, 2LL);

      return swift_release(v20);
    }

    swift_unknownObjectRelease(v17);
  }

  a2[2](a2, 0LL);
  return swift_release(v4);
}

uint64_t sub_1001572E4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100157308(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100157318(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100157320(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

unint64_t sub_100157328()
{
  unint64_t result = qword_1002B5E90;
  if (!qword_1002B5E90)
  {
    type metadata accessor for OpenURLOptionsKey(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1001C3F4C, v1);
    atomic_store(result, (unint64_t *)&qword_1002B5E90);
  }

  return result;
}

uint64_t sub_100157370(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_100134284(255LL, a2, a3);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }

  return result;
}

void sub_1001573C8()
{
  v20.receiver = v0;
  v20.super_class = (Class)type metadata accessor for TVLibrarySplitViewController();
  objc_msgSendSuper2(&v20, "viewDidLoad");
  uint64_t v1 = v0;
  id v2 = sub_100157868((uint64_t)v1);
  uint64_t v3 = OBJC_IVAR____TtC8Podcasts28TVLibrarySplitViewController_menu;
  uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC8Podcasts28TVLibrarySplitViewController_menu];
  *(void *)&v1[OBJC_IVAR____TtC8Podcasts28TVLibrarySplitViewController_menu] = v2;

  uint64_t v5 = *(void *)&v1[v3];
  if (!v5)
  {
    __break(1u);
    goto LABEL_6;
  }

  id v6 = [objc_allocWithZone(UINavigationController) initWithRootViewController:v5];
  uint64_t v7 = OBJC_IVAR____TtC8Podcasts28TVLibrarySplitViewController_primaryNavigationController;
  uint64_t v8 = *(void **)&v1[OBJC_IVAR____TtC8Podcasts28TVLibrarySplitViewController_primaryNavigationController];
  *(void *)&v1[OBJC_IVAR____TtC8Podcasts28TVLibrarySplitViewController_primaryNavigationController] = v6;

  id v9 = [objc_allocWithZone(UINavigationController) init];
  uint64_t v10 = OBJC_IVAR____TtC8Podcasts28TVLibrarySplitViewController_secondaryNavigationController;
  id v11 = *(void **)&v1[OBJC_IVAR____TtC8Podcasts28TVLibrarySplitViewController_secondaryNavigationController];
  *(void *)&v1[OBJC_IVAR____TtC8Podcasts28TVLibrarySplitViewController_secondaryNavigationController] = v9;

  uint64_t v12 = sub_100126450((uint64_t *)&unk_1002B6160);
  uint64_t v13 = swift_allocObject(v12, 48LL, 7LL);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4290;
  uint64_t v14 = *(void **)&v1[v7];
  if (!v14)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  *(void *)(v13 + 32) = v14;
  uint64_t v15 = *(void **)&v1[v10];
  if (v15)
  {
    *(void *)(v13 + 40) = v15;
    uint64_t v19 = v13;
    specialized Array._endMutation()(v13);
    sub_1001579A0();
    id v16 = v14;
    id v17 = v15;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v19);
    [v1 setViewControllers:isa];

    return;
  }

id sub_10015766C(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&v3[OBJC_IVAR____TtC8Podcasts28TVLibrarySplitViewController_menu] = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC8Podcasts28TVLibrarySplitViewController_primaryNavigationController] = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC8Podcasts28TVLibrarySplitViewController_secondaryNavigationController] = 0LL;
  if (a2)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v6 = 0LL;
  }

  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for TVLibrarySplitViewController();
  id v7 = objc_msgSendSuper2(&v9, "initWithNibName:bundle:", v6, a3);

  return v7;
}

id sub_1001577D0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TVLibrarySplitViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TVLibrarySplitViewController()
{
  return objc_opt_self(&OBJC_CLASS____TtC8Podcasts28TVLibrarySplitViewController);
}

id sub_100157868(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TVLibrarySplitViewController();
  void v15[3] = v2;
  void v15[4] = &off_1002479E8;
  v15[0] = a1;
  uint64_t v3 = (objc_class *)type metadata accessor for TVLibraryMenuViewController(0LL);
  id v4 = objc_allocWithZone(v3);
  uint64_t v5 = sub_10013767C((uint64_t)v15, v2);
  __chkstk_darwin(v5);
  id v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v8 + 16))(v7);
  uint64_t v9 = *v7;
  v14[3] = v2;
  void v14[4] = &off_1002479E8;
  v14[0] = v9;
  uint64_t v10 = v4;
  IndexPath.init(row:section:)(0LL, 0LL);
  v10[OBJC_IVAR____TtC8Podcasts27TVLibraryMenuViewController_firstAppear] = 1;
  sub_1001376A4((uint64_t)v14, (uint64_t)&v10[OBJC_IVAR____TtC8Podcasts27TVLibraryMenuViewController_navigationDelegate]);

  v13.receiver = v10;
  v13.super_class = v3;
  id v11 = objc_msgSendSuper2(&v13, "initWithStyle:", 0);
  sub_100136648(v14);
  sub_100136648(v15);
  return v11;
}

unint64_t sub_1001579A0()
{
  unint64_t result = qword_1002B5DA8;
  if (!qword_1002B5DA8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___UIViewController);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B5DA8);
  }

  return result;
}

id AppDownloadedEffectApplicator.init(library:podcastsStateCoordinator:)(void *a1, void *a2)
{
  id v4 = (void *)objc_opt_self(&OBJC_CLASS___MTDB);
  id v5 = a1;
  id v6 = a2;
  id v7 = [v4 sharedInstance];
  id v8 = [v7 privateQueueContext];

  return v5;
}

uint64_t AppDownloadedEffectApplicator.apply(effect:to:)( uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v33 = a4;
  id v34 = a5;
  id v30 = a3;
  uint64_t v32 = a2;
  uint64_t v7 = type metadata accessor for DownloadEnvironment(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v31 = v7;
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DownloadedAssetEffect(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v32, v7);
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = (v15 + 40) & ~v15;
  uint64_t v17 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = (v13 + v17 + v16) & ~v17;
  uint64_t v19 = (char *)swift_allocObject(&unk_100247A10, v18 + v9, v15 | v17 | 7);
  *((void *)v19 + 2) = a3;
  objc_super v20 = v33;
  NSString v21 = v34;
  *((void *)v19 + 3) = v33;
  *((void *)v19 + 4) = v21;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v19[v16], v14, v11);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v19[v18], v10, v31);
  uint64_t v22 = sub_100126450(&qword_1002B5FB0);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  id v23 = v30;
  id v24 = v20;
  id v25 = v21;
  uint64_t v26 = Future.init(_:)(sub_100157DA0, v19);
  uint64_t v35 = v26;
  unint64_t v27 = sub_100157DA4();
  uint64_t v28 = Publisher.eraseToAnyPublisher()(v22, v27);
  swift_release(v26);
  return v28;
}

uint64_t sub_100157C54(uint64_t a1, uint64_t a2, uint8_t *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  v22[0] = a1;
  uint64_t v12 = sub_100126450(&qword_1002B5FC0);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (uint8_t *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)v22 - v17;
  __chkstk_darwin(v16);
  objc_super v20 = (char *)v22 - v19;
  sub_100157DF0(a6, a7, a3, a4, a5, v15);
  swift_storeEnumTagMultiPayload(v15, v12, 0LL);
  sub_100158BF8((uint64_t)v15, (uint64_t)v18);
  sub_100158BF8((uint64_t)v18, (uint64_t)v20);
  ((void (*)(char *))v22[0])(v20);
  return sub_100158C40((uint64_t)v20);
}

unint64_t sub_100157DA4()
{
  unint64_t result = qword_1002B5FB8;
  if (!qword_1002B5FB8)
  {
    uint64_t v1 = sub_1001264DC(&qword_1002B5FB0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Future<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B5FB8);
  }

  return result;
}

uint64_t sub_100157DF0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint8_t *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint8_t *a6@<X8>)
{
  uint64_t v111 = a5;
  uint64_t v112 = a4;
  uint64_t v113 = a3;
  uint64_t v106 = a2;
  uint64_t v114 = a6;
  uint64_t v110 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v110 - 8);
  uint64_t v8 = __chkstk_darwin(v110);
  id v107 = (char *)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v109 = (char *)&v106 - v10;
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v116 = *(void *)(v11 - 8);
  uint64_t v117 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v106 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v108 = (char *)&v106 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v106 - v18;
  __chkstk_darwin(v17);
  NSString v21 = (char *)&v106 - v20;
  uint64_t v22 = type metadata accessor for DownloadedAssetEffect(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (uint8_t *)&v106 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (uint8_t *)&v106 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (uint64_t *)((char *)&v106 - v30);
  uint64_t v32 = *(uint64_t (**)(uint8_t *, uint64_t, uint64_t))(v23 + 16);
  uint64_t v118 = a1;
  uint64_t v119 = v32;
  uint64_t v33 = a1;
  uint64_t v35 = v34;
  v32((uint8_t *)&v106 - v30, v33, v34);
  uint64_t v36 = (*(uint64_t (**)(uint64_t *, uint64_t))(v23 + 88))(v31, v35);
  if ((_DWORD)v36 == enum case for DownloadedAssetEffect.removeDownload(_:))
  {
    id v37 = *(uint64_t (**)(uint64_t *, uint64_t))(v23 + 96);
    uint64_t v110 = v35;
    uint64_t v38 = v37(v31, v35);
    uint64_t v40 = *v31;
    unint64_t v39 = v31[1];
    static Logger.database.getter(v38);
    uint64_t v41 = swift_bridgeObjectRetain_n(v39, 2LL);
    id v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.info.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v45 = swift_slowAlloc(32LL, -1LL);
      v121[0] = v45;
      *(_DWORD *)uint64_t v44 = 136315138;
      swift_bridgeObjectRetain(v39);
      uint64_t v124 = sub_100178E7C(v40, v39, v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, &v125, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease_n(v39, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Removing download for episode %s", v44, 0xCu);
      swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v44, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v39, 2LL);
    }

    (*(void (**)(char *, uint64_t))(v116 + 8))(v19, v117);
    uint64_t v56 = v110;
    uint64_t v57 = v119;
    unint64_t v59 = v113;
    uint64_t v58 = v114;
    uint64_t v60 = sub_100126450((uint64_t *)&unk_1002B5080);
    uint64_t inited = swift_initStackObject(v60, v120);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
    *(void *)(inited + 32) = v40;
    *(void *)(inited + 40) = v39;
    Swift::Int v62 = sub_1001272A8(inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, 1LL, &type metadata for String);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v62);
    -[uint8_t removeDownloadAssetsForEpisodeUuids:](v59, "removeDownloadAssetsForEpisodeUuids:", isa, v106);

    return v57(v58, v118, v56);
  }

  if ((_DWORD)v36 == enum case for DownloadedAssetEffect.download(_:))
  {
    uint64_t v46 = (*(uint64_t (**)(uint64_t *, uint64_t))(v23 + 96))(v31, v35);
    uint64_t v48 = *v31;
    unint64_t v47 = v31[1];
    static Logger.database.getter(v46);
    uint64_t v49 = swift_bridgeObjectRetain_n(v47, 2LL);
    uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.info.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      unint64_t v52 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v53 = swift_slowAlloc(32LL, -1LL);
      uint64_t v110 = v35;
      uint64_t v54 = v53;
      v121[0] = v53;
      *(_DWORD *)unint64_t v52 = 136315138;
      swift_bridgeObjectRetain(v47);
      uint64_t v124 = sub_100178E7C(v48, v47, v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, &v125, v52 + 4, v52 + 12);
      swift_bridgeObjectRelease_n(v47, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Downloading episode %s", v52, 0xCu);
      swift_arrayDestroy(v54, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v55 = v54;
      uint64_t v35 = v110;
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v52, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v47, 2LL);
    }

    (*(void (**)(char *, uint64_t))(v116 + 8))(v21, v117);
    __int128 v83 = v119;
    PodcastsStateCoordinator.downloadEpisode(withUUID:isFromSaving:from:in:)(v48, v47, 0, 3LL, v111);
    swift_bridgeObjectRelease(v47);
    return v83(v114, v118, v35);
  }

  if ((_DWORD)v36 == enum case for DownloadedAssetEffect.delete(_:))
  {
    int64_t v65 = *(void (**)(uint64_t *, uint64_t))(v23 + 96);
    uint64_t v66 = v35;
    v65(v31, v35);
    uint64_t v67 = v109;
    uint64_t v68 = v110;
    uint64_t v69 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v7 + 32))(v109, v31, v110);
    id v70 = v108;
    static Logger.database.getter(v69);
    uint64_t v71 = v107;
    uint64_t v72 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 16))(v107, v67, v68);
    id v73 = (os_log_s *)Logger.logObject.getter(v72);
    os_log_type_t v74 = static os_log_type_t.info.getter(v73);
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v76 = swift_slowAlloc(32LL, -1LL);
      v121[0] = v76;
      *(_DWORD *)uint64_t v75 = 136315138;
      uint64_t v113 = v75 + 4;
      uint64_t v77 = URL.path.getter(v76);
      unint64_t v79 = v78;
      uint64_t v124 = sub_100178E7C(v77, v78, v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, &v125, v113, v75 + 12);
      swift_bridgeObjectRelease(v79);
      int64_t v80 = *(void (**)(char *, uint64_t))(v7 + 8);
      v80(v71, v110);
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Removing asset at path: %s", v75, 0xCu);
      swift_arrayDestroy(v76, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v81 = v76;
      uint64_t v68 = v110;
      swift_slowDealloc(v81, -1LL, -1LL);
      swift_slowDealloc(v75, -1LL, -1LL);

      uint64_t v82 = (*(uint64_t (**)(char *, uint64_t))(v116 + 8))(v108, v117);
    }

    else
    {
      int64_t v80 = *(void (**)(char *, uint64_t))(v7 + 8);
      v80(v71, v68);

      uint64_t v82 = (*(uint64_t (**)(char *, uint64_t))(v116 + 8))(v70, v117);
    }

    uint64_t v35 = v66;
    __int128 v83 = v119;
    uint64_t v97 = v115;
    uint64_t v98 = v109;
    DownloadEnvironment.fileStorage.getter(v121, v82);
    uint64_t v99 = v122;
    uint64_t v100 = v123;
    sub_1001361FC(v121, v122);
    dispatch thunk of FileManaging.removeItem(at:)(v98, v99, v100);
    if (v97)
    {
      v80(v98, v68);
      return sub_100136648(v121);
    }

    v80(v98, v68);
    sub_100136648(v121);
    return v83(v114, v118, v35);
  }

  id v84 = v14;
  static Logger.database.getter(v36);
  uint64_t v85 = (void (*)(uint64_t, uint64_t, uint64_t))v119;
  uint64_t v86 = v119(v29, v118, v35);
  uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
  os_log_type_t v88 = static os_log_type_t.error.getter(v87);
  if (os_log_type_enabled(v87, v88))
  {
    uint64_t v89 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v115 = swift_slowAlloc(32LL, -1LL);
    v121[0] = v115;
    uint64_t v114 = v89;
    *(_DWORD *)uint64_t v89 = 136315138;
    uint64_t v113 = v89 + 4;
    v119(v26, (uint64_t)v29, v35);
    uint64_t v90 = String.init<A>(describing:)(v26, v35);
    unint64_t v92 = v91;
    uint64_t v124 = sub_100178E7C(v90, v91, v121);
    uint64_t v93 = v89 + 12;
    uint64_t v85 = (void (*)(uint64_t, uint64_t, uint64_t))v119;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, &v125, v113, v93);
    swift_bridgeObjectRelease(v92);
    uint64_t v94 = *(void (**)(char *, uint64_t))(v23 + 8);
    v94((char *)v29, v35);
    uint64_t v95 = v114;
    _os_log_impl( (void *)&_mh_execute_header,  v87,  v88,  "An uncovered recovery case for download state was encountered: %s",  v114,  0xCu);
    uint64_t v96 = v115;
    swift_arrayDestroy(v115, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v96, -1LL, -1LL);
    swift_slowDealloc(v95, -1LL, -1LL);
  }

  else
  {
    uint64_t v94 = *(void (**)(char *, uint64_t))(v23 + 8);
    v94((char *)v29, v35);
  }

  (*(void (**)(char *, uint64_t))(v116 + 8))(v84, v117);
  uint64_t v101 = type metadata accessor for ApplicationDownloadEffectApplicatorError(0LL);
  unint64_t v102 = sub_100158CBC();
  swift_allocError(v101, v102, 0LL, 0LL);
  uint64_t v104 = v103;
  v85(v103, v118, v35);
  uint64_t v105 = swift_storeEnumTagMultiPayload(v104, v101, 0LL);
  swift_willThrow(v105);
  return ((uint64_t (*)(uint64_t *, uint64_t))v94)(v31, v35);
}

uint64_t sub_1001587A0(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = a2;
  uint64_t v28 = a1;
  uint64_t v31 = type metadata accessor for DownloadEnvironment(0LL);
  uint64_t v3 = *(void *)(v31 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v31);
  uint64_t v27 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DownloadedAssetEffect(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void **)v2;
  id v29 = *(id *)(v2 + 8);
  id v9 = v29;
  uint64_t v25 = *(void **)(v2 + 16);
  id v26 = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v28, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))( (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v30,  v31);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = (v11 + 40) & ~v11;
  uint64_t v13 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v14 = (v7 + v13 + v12) & ~v13;
  uint64_t v15 = (char *)swift_allocObject(&unk_100247AC0, v14 + v4, v11 | v13 | 7);
  *((void *)v15 + 2) = v10;
  *((void *)v15 + 3) = v9;
  uint64_t v16 = v25;
  *((void *)v15 + 4) = v25;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v15[v12], v8, v5);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(&v15[v14], v27, v31);
  uint64_t v17 = sub_100126450(&qword_1002B5FB0);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  id v18 = v26;
  id v19 = v29;
  id v20 = v16;
  uint64_t v21 = Future.init(_:)(sub_100157DA0, v15);
  uint64_t v32 = v21;
  unint64_t v22 = sub_100157DA4();
  uint64_t v23 = Publisher.eraseToAnyPublisher()(v17, v22);
  swift_release(v21);
  return v23;
}

void *initializeBufferWithCopyOfBuffer for AppDownloadedEffectApplicator(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  a1[2] = v5;
  id v6 = v3;
  id v7 = v4;
  id v8 = v5;
  return a1;
}

void destroy for AppDownloadedEffectApplicator(id *a1)
{
}

uint64_t assignWithCopy for AppDownloadedEffectApplicator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
  id v9 = v7;

  uint64_t v10 = *(void **)(a2 + 16);
  uint64_t v11 = *(void **)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  id v12 = v10;

  return a1;
}

uint64_t assignWithTake for AppDownloadedEffectApplicator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for AppDownloadedEffectApplicator()
{
  return &type metadata for AppDownloadedEffectApplicator;
}

uint64_t sub_100158AAC()
{
  uint64_t v1 = type metadata accessor for DownloadedAssetEffect(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for DownloadEnvironment(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;

  (*(void (**)(char *, uint64_t))(v2 + 8))((char *)v0 + v4, v1);
  (*(void (**)(char *, uint64_t))(v7 + 8))((char *)v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100158B78(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for DownloadedAssetEffect(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for DownloadEnvironment(0LL) - 8) + 80LL);
  return sub_100157C54( a1,  a2,  *(uint8_t **)(v2 + 16),  *(void *)(v2 + 24),  *(void **)(v2 + 32),  v2 + v6,  v2 + ((v6 + v7 + v8) & ~v8));
}

uint64_t sub_100158BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100126450(&qword_1002B5FC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100158C40(uint64_t a1)
{
  uint64_t v2 = sub_100126450(&qword_1002B5FC0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ApplicationDownloadEffectApplicatorError(uint64_t a1)
{
  uint64_t result = qword_1002B6048;
  if (!qword_1002B6048) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ApplicationDownloadEffectApplicatorError);
  }
  return result;
}

unint64_t sub_100158CBC()
{
  unint64_t result = qword_1002B5FC8;
  if (!qword_1002B5FC8)
  {
    uint64_t v1 = type metadata accessor for ApplicationDownloadEffectApplicatorError(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1001C51B8, v1);
    atomic_store(result, (unint64_t *)&qword_1002B5FC8);
  }

  return result;
}

uint64_t *sub_100158D04(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v13);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v7 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      uint64_t v8 = *(int *)(sub_100126450(&qword_1002B5FD0) + 48);
      uint64_t v9 = *(uint64_t *)((char *)a2 + v8);
      swift_errorRetain(v9);
      *(uint64_t *)((char *)a1 + v_Block_object_dispose(va, 8) = v9;
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 1LL;
    }

    else
    {
      uint64_t v14 = type metadata accessor for DownloadedAssetEffect(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16LL))(a1, a2, v14);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }

  return a1;
}

uint64_t sub_100158DF4(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    uint64_t v3 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
    uint64_t v4 = *(void *)(a1 + *(int *)(sub_100126450(&qword_1002B5FD0) + 48));
    return swift_errorRelease(v4);
  }

  else
  {
    uint64_t v6 = type metadata accessor for DownloadedAssetEffect(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
  }

uint64_t sub_100158E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    uint64_t v7 = *(int *)(sub_100126450(&qword_1002B5FD0) + 48);
    uint64_t v8 = *(void *)(a2 + v7);
    swift_errorRetain(v8);
    *(void *)(a1 + v7) = v8;
    uint64_t v9 = 1LL;
  }

  else
  {
    uint64_t v10 = type metadata accessor for DownloadedAssetEffect(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
    uint64_t v9 = 0LL;
  }

  swift_storeEnumTagMultiPayload(a1, a3, v9);
  return a1;
}

uint64_t sub_100158F2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100158FF8(a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      uint64_t v7 = *(int *)(sub_100126450(&qword_1002B5FD0) + 48);
      uint64_t v8 = *(void *)(a2 + v7);
      swift_errorRetain(v8);
      *(void *)(a1 + v7) = v8;
      uint64_t v9 = 1LL;
    }

    else
    {
      uint64_t v10 = type metadata accessor for DownloadedAssetEffect(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
      uint64_t v9 = 0LL;
    }

    swift_storeEnumTagMultiPayload(a1, a3, v9);
  }

  return a1;
}

uint64_t sub_100158FF8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ApplicationDownloadEffectApplicatorError(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100159034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    uint64_t v7 = sub_100126450(&qword_1002B5FD0);
    *(void *)(a1 + *(int *)(v7 + 4sub_1001514D0(*(void *)v0, *(_BYTE *)(v0 + 8)) = *(void *)(a2 + *(int *)(v7 + 48));
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v9 = type metadata accessor for DownloadedAssetEffect(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
    uint64_t v8 = 0LL;
  }

  swift_storeEnumTagMultiPayload(a1, a3, v8);
  return a1;
}

uint64_t sub_1001590E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100158FF8(a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      uint64_t v7 = sub_100126450(&qword_1002B5FD0);
      *(void *)(a1 + *(int *)(v7 + 4sub_1001514D0(*(void *)v0, *(_BYTE *)(v0 + 8)) = *(void *)(a2 + *(int *)(v7 + 48));
      uint64_t v8 = 1LL;
    }

    else
    {
      uint64_t v9 = type metadata accessor for DownloadedAssetEffect(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
      uint64_t v8 = 0LL;
    }

    swift_storeEnumTagMultiPayload(a1, a3, v8);
  }

  return a1;
}

uint64_t sub_1001591AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t sub_1001591B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_1001591C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_1001591D8(uint64_t a1)
{
  uint64_t result = type metadata accessor for DownloadedAssetEffect(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for URL(319LL);
    if (v4 <= 0x3F)
    {
      swift_getTupleTypeLayout2(v5, *(void *)(result - 8) + 64LL, "\b");
      v6[1] = v5;
      swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v6);
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_100159270(uint64_t a1)
{
  uint64_t v2 = sub_100126450(&qword_1002B4EF8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }

  sub_100126450(&qword_1002B60D0);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v25 = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10012A418(v13, (uint64_t)v5, &qword_1002B4EF8);
    unint64_t result = sub_10015F010((uint64_t)v5);
    if ((v16 & 1) != 0) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for MediaRequest.ContentType(0LL);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))( v18 + *(void *)(*(void *)(v19 - 8) + 72LL) * v17,  v5,  v19);
    *(void *)(v8[7] + 8 * v17) = *(void *)&v5[v10];
    uint64_t v20 = v8[2];
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_12;
    }
    void v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      uint64_t v23 = v25;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100159404(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100126450(&qword_1002B60B8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10012A418(v7, (uint64_t)v16, &qword_1002B60C0);
    unint64_t result = sub_10015F074((uint64_t)v16);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v10 = v4[6] + 40 * result;
    __int128 v11 = v16[0];
    __int128 v12 = v16[1];
    *(void *)(v10 + 32) = v17;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
    unint64_t result = (unint64_t)sub_100136668(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v7 += 72LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100159544(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100126450(&qword_1002B60D8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v7 = (uint64_t)*(v6 - 2);
    uint64_t v8 = (uint64_t)*(v6 - 1);
    char v9 = *v6;
    swift_bridgeObjectRetain(v8);
    id v10 = v9;
    unint64_t result = sub_10015F124(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v13 = v7;
    v13[1] = v8;
    *(void *)(v4[7] + 8 * result) = v10;
    uint64_t v14 = v4[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    void v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015965C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_10015C158(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v4 & 1;
  return result;
}

uint64_t sub_10015968C(unint64_t a1, unint64_t a2)
{
  unint64_t v29 = a2;
  uint64_t v3 = type metadata accessor for BugReportFrequency(0LL);
  uint64_t v28 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for BugReport.Domain(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for BugReport.ErrorKind(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for PodcastsSystem(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void))(v17 + 104))(v16, enum case for PodcastsSystem.cloudSync(_:));
  if (a1 >= 6)
  {
    v30[0] = a1;
    uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for CloudSyncBugReportingIssue,  v30,  &type metadata for CloudSyncBugReportingIssue,  &type metadata for Int);
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, *(unsigned int *)*(&off_100247B50 + a1), v10);
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for BugReport.Domain.podcasts(_:), v6);
    id v18 = objc_allocWithZone((Class)type metadata accessor for BugReport(0LL));
    uint64_t v19 = (void *)BugReport.init(domain:system:errorKind:forceSubmissionAttempt:)(v9, v16, v13, 0LL);
    sub_1001376A4(v27 + OBJC_IVAR____TtC8Podcasts20CloudSyncBugReporter_bugReporter, (uint64_t)v30);
    uint64_t v20 = v31;
    uint64_t v21 = v32;
    sub_1001361FC(v30, v31);
    uint64_t v22 = v28;
    (*(void (**)(char *, void, uint64_t))(v28 + 104))(v5, enum case for BugReportFrequency.hourly(_:), v3);
    unint64_t v23 = v29;
    if (v29) {
      unint64_t v24 = v29;
    }
    else {
      unint64_t v24 = sub_100159404((uint64_t)_swiftEmptyArrayStorage);
    }
    __n128 v25 = swift_bridgeObjectRetain(v23);
    dispatch thunk of BugReporter.submit(bugReport:maximumFrequency:userInfo:)(v19, v5, v24, v20, v21, v25);
    swift_bridgeObjectRelease(v24);

    (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v3);
    return sub_100136648(v30);
  }

  return result;
}

uint64_t sub_100159990( unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v56 = a4;
  unint64_t v54 = a2;
  uint64_t v55 = a3;
  uint64_t v7 = type metadata accessor for BugReportFrequency(0LL);
  uint64_t v58 = *(void *)(v7 - 8);
  uint64_t v59 = v7;
  __chkstk_darwin(v7);
  char v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for BugReport.Domain(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for BugReport.ErrorKind(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for PodcastsSystem(0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void))(v21 + 104))(v20, enum case for PodcastsSystem.cloudSync(_:));
  if (a1 >= 6)
  {
    v64[0] = a1;
    unint64_t v52 = (__int128 *)v64;
LABEL_18:
    uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for CloudSyncBugReportingIssue,  v52,  &type metadata for CloudSyncBugReportingIssue,  &type metadata for Int);
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, *(unsigned int *)*(&off_100247B50 + a1), v14);
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for BugReport.Domain.podcasts(_:), v10);
    id v22 = objc_allocWithZone((Class)type metadata accessor for BugReport(0LL));
    unint64_t v23 = (void *)BugReport.init(domain:system:errorKind:forceSubmissionAttempt:)(v13, v20, v17, 0LL);
    if (a5) {
      unint64_t v24 = a5;
    }
    else {
      unint64_t v24 = sub_100159404((uint64_t)_swiftEmptyArrayStorage);
    }
    *(void *)&__int128 v62 = 0x6575737369LL;
    *((void *)&v62 + 1) = 0xE500000000000000LL;
    swift_bridgeObjectRetain(a5);
    AnyHashable.init<A>(_:)(v64, &v62, &type metadata for String, &protocol witness table for String);
    unint64_t v25 = 0xD000000000000015LL;
    unint64_t v26 = 0x800000010021B740LL;
    switch(a1)
    {
      case 0uLL:
        goto LABEL_12;
      case 1uLL:
        unint64_t v25 = 0xD00000000000001CLL;
        uint64_t v27 = "wipingLocalDataFromRemoteKey";
        goto LABEL_11;
      case 2uLL:
        unint64_t v25 = 0xD000000000000017LL;
        uint64_t v27 = "syncAuthenticationError";
        goto LABEL_11;
      case 3uLL:
        unint64_t v25 = 0xD00000000000001FLL;
        uint64_t v27 = "mergeConflictInReadOnlySyncMode";
        goto LABEL_11;
      case 4uLL:
        unint64_t v25 = 0xD000000000000022LL;
        uint64_t v27 = "tryingToPutSyncWhileInReadOnlyMode";
        goto LABEL_11;
      case 5uLL:
        unint64_t v25 = 0xD000000000000029LL;
        uint64_t v27 = "readOnlyModeInDeviceWithRecentlyUnfollows";
LABEL_11:
        unint64_t v26 = (unint64_t)(v27 - 32) | 0x8000000000000000LL;
LABEL_12:
        *(void *)&__int128 v62 = v25;
        *((void *)&v62 + 1) = v26;
        swift_bridgeObjectRetain(v26);
        v28._uint64_t countAndFlagsBits = 45LL;
        v28._object = (void *)0xE100000000000000LL;
        String.append(_:)(v28);
        swift_bridgeObjectRelease(v26);
        __int128 v29 = v62;
        unint64_t v30 = v54;
        uint64_t v31 = sub_10015A9B0(v54);
        uint64_t v33 = v32;
        __int128 v62 = v29;
        swift_bridgeObjectRetain(*((void *)&v29 + 1));
        v34._uint64_t countAndFlagsBits = v31;
        v34._object = v33;
        String.append(_:)(v34);
        swift_bridgeObjectRelease(*((void *)&v29 + 1));
        swift_bridgeObjectRelease(v33);
        id v63 = &type metadata for String;
        sub_100136668(&v62, v61);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
        unint64_t v60 = v24;
        sub_10015B798(v61, (uint64_t)v64, isUniquelyReferenced_nonNull_native);
        unint64_t v36 = v60;
        swift_bridgeObjectRelease(0x8000000000000000LL);
        sub_1001275E8((uint64_t)v64);
        *(void *)&__int128 v62 = 7955819LL;
        *((void *)&v62 + 1) = 0xE300000000000000LL;
        AnyHashable.init<A>(_:)(v64, &v62, &type metadata for String, &protocol witness table for String);
        uint64_t v37 = sub_10015A9B0(v30);
        id v63 = &type metadata for String;
        *(void *)&__int128 v62 = v37;
        *((void *)&v62 + 1) = v38;
        sub_100136668(&v62, v61);
        char v39 = swift_isUniquelyReferenced_nonNull_native(v36);
        unint64_t v60 = v36;
        sub_10015B798(v61, (uint64_t)v64, v39);
        unint64_t v40 = v60;
        swift_bridgeObjectRelease(0x8000000000000000LL);
        sub_1001275E8((uint64_t)v64);
        *(void *)&__int128 v62 = 0x6E6F6973726576LL;
        *((void *)&v62 + 1) = 0xE700000000000000LL;
        AnyHashable.init<A>(_:)(v64, &v62, &type metadata for String, &protocol witness table for String);
        id v63 = &type metadata for String;
        unint64_t v41 = v56;
        uint64_t v42 = 7104878LL;
        if (v56)
        {
          uint64_t v42 = v55;
          unint64_t v43 = v56;
        }

        else
        {
          unint64_t v43 = 0xE300000000000000LL;
        }

        *(void *)&__int128 v62 = v42;
        *((void *)&v62 + 1) = v43;
        sub_100136668(&v62, v61);
        swift_bridgeObjectRetain(v41);
        char v44 = swift_isUniquelyReferenced_nonNull_native(v40);
        unint64_t v60 = v40;
        sub_10015B798(v61, (uint64_t)v64, v44);
        unint64_t v45 = v60;
        swift_bridgeObjectRelease(0x8000000000000000LL);
        sub_1001275E8((uint64_t)v64);
        uint64_t v46 = *(void *)(v57 + OBJC_IVAR____TtC8Podcasts20CloudSyncBugReporter_bugReporter + 24);
        uint64_t v47 = *(void *)(v57 + OBJC_IVAR____TtC8Podcasts20CloudSyncBugReporter_bugReporter + 32);
        sub_1001361FC((void *)(v57 + OBJC_IVAR____TtC8Podcasts20CloudSyncBugReporter_bugReporter), v46);
        uint64_t v49 = v58;
        uint64_t v48 = v59;
        v50.n128_f64[0] = (*(double (**)(char *, void, uint64_t))(v58 + 104))( v9,  enum case for BugReportFrequency.hourly(_:),  v59);
        dispatch thunk of BugReporter.submit(bugReport:maximumFrequency:userInfo:)(v23, v9, v45, v46, v47, v50);

        swift_bridgeObjectRelease(v45);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v9, v48);
        break;
      default:
        *(void *)&__int128 v62 = a1;
        unint64_t v52 = &v62;
        goto LABEL_18;
    }
  }

  return result;
}

uint64_t sub_100159EB0( void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v7 = a5;
  if (!a4)
  {
    uint64_t v10 = 0LL;
    unint64_t v12 = 0LL;
    if (!a5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  unint64_t v12 = v11;
  if (v7) {
LABEL_3:
  }
    unint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v7,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
LABEL_4:
  id v13 = a1;
  sub_100159990(a3, a6, v10, v12, v7);

  swift_bridgeObjectRelease(v7);
  return swift_bridgeObjectRelease(v12);
}

uint64_t sub_10015A128(void *a1, void *a2)
{
  id v4 = [a1 keys];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for String);
  }

  else
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
  }

  id v7 = [a1 sinceDomainVersion];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    unint64_t v11 = v10;
  }

  else
  {
    uint64_t v9 = 0LL;
    unint64_t v11 = 0LL;
  }

  uint64_t v12 = sub_100126450(&qword_1002B5828);
  uint64_t inited = swift_initStackObject(v12, v21);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
  v20[0] = 0x726F727265LL;
  v20[1] = 0xE500000000000000LL;
  AnyHashable.init<A>(_:)((void *)(inited + 32), v20, &type metadata for String, &protocol witness table for String);
  id v14 = [a2 description];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  uint64_t v17 = v16;

  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = v15;
  *(void *)(inited + 80) = v17;
  unint64_t v18 = sub_100159404(inited);
  sub_10015A2B0(2uLL, (uint64_t)v6, v9, v11, v18);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v18);
  return swift_bridgeObjectRelease(v11);
}

uint64_t sub_10015A2B0(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v48 = a4;
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  uint64_t v7 = type metadata accessor for BugReportFrequency(0LL);
  uint64_t v50 = *(void *)(v7 - 8);
  uint64_t v51 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for BugReport.Domain(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for BugReport.ErrorKind(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for PodcastsSystem(0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void))(v21 + 104))(v20, enum case for PodcastsSystem.cloudSync(_:));
  if (a1 >= 6)
  {
    v56[0] = a1;
    char v44 = (__int128 *)v56;
LABEL_19:
    uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for CloudSyncBugReportingIssue,  v44,  &type metadata for CloudSyncBugReportingIssue,  &type metadata for Int);
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, *(unsigned int *)*(&off_100247B50 + a1), v14);
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for BugReport.Domain.podcasts(_:), v10);
    id v22 = objc_allocWithZone((Class)type metadata accessor for BugReport(0LL));
    unint64_t v23 = (void *)BugReport.init(domain:system:errorKind:forceSubmissionAttempt:)(v13, v20, v17, 0LL);
    if (a5) {
      unint64_t v24 = a5;
    }
    else {
      unint64_t v24 = sub_100159404((uint64_t)_swiftEmptyArrayStorage);
    }
    *(void *)&__int128 v54 = 0x6575737369LL;
    *((void *)&v54 + 1) = 0xE500000000000000LL;
    swift_bridgeObjectRetain(a5);
    AnyHashable.init<A>(_:)(v56, &v54, &type metadata for String, &protocol witness table for String);
    unint64_t v25 = 0xD000000000000015LL;
    unint64_t v26 = 0x800000010021B740LL;
    switch(a1)
    {
      case 0uLL:
        goto LABEL_12;
      case 1uLL:
        unint64_t v25 = 0xD00000000000001CLL;
        uint64_t v27 = "wipingLocalDataFromRemoteKey";
        goto LABEL_11;
      case 2uLL:
        unint64_t v25 = 0xD000000000000017LL;
        uint64_t v27 = "syncAuthenticationError";
        goto LABEL_11;
      case 3uLL:
        unint64_t v25 = 0xD00000000000001FLL;
        uint64_t v27 = "mergeConflictInReadOnlySyncMode";
        goto LABEL_11;
      case 4uLL:
        unint64_t v25 = 0xD000000000000022LL;
        uint64_t v27 = "tryingToPutSyncWhileInReadOnlyMode";
        goto LABEL_11;
      case 5uLL:
        unint64_t v25 = 0xD000000000000029LL;
        uint64_t v27 = "readOnlyModeInDeviceWithRecentlyUnfollows";
LABEL_11:
        unint64_t v26 = (unint64_t)(v27 - 32) | 0x8000000000000000LL;
LABEL_12:
        uint64_t v55 = &type metadata for String;
        *(void *)&__int128 v54 = v25;
        *((void *)&v54 + 1) = v26;
        sub_100136668(&v54, v53);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
        unint64_t v52 = v24;
        sub_10015B798(v53, (uint64_t)v56, isUniquelyReferenced_nonNull_native);
        unint64_t v29 = v52;
        swift_bridgeObjectRelease(0x8000000000000000LL);
        sub_1001275E8((uint64_t)v56);
        *(void *)&__int128 v54 = 1937335659LL;
        *((void *)&v54 + 1) = 0xE400000000000000LL;
        AnyHashable.init<A>(_:)(v56, &v54, &type metadata for String, &protocol witness table for String);
        uint64_t v55 = (void *)sub_100126450(&qword_1002B66A0);
        uint64_t v30 = v46;
        *(void *)&__int128 v54 = v46;
        sub_100136668(&v54, v53);
        swift_bridgeObjectRetain(v30);
        char v31 = swift_isUniquelyReferenced_nonNull_native(v29);
        unint64_t v52 = v29;
        sub_10015B798(v53, (uint64_t)v56, v31);
        unint64_t v32 = v52;
        swift_bridgeObjectRelease(0x8000000000000000LL);
        sub_1001275E8((uint64_t)v56);
        *(void *)&__int128 v54 = 0x6E6F6973726576LL;
        *((void *)&v54 + 1) = 0xE700000000000000LL;
        AnyHashable.init<A>(_:)(v56, &v54, &type metadata for String, &protocol witness table for String);
        uint64_t v55 = &type metadata for String;
        unint64_t v33 = v48;
        uint64_t v34 = 7104878LL;
        if (v48) {
          uint64_t v34 = v47;
        }
        unint64_t v35 = 0xE300000000000000LL;
        if (v48) {
          unint64_t v35 = v48;
        }
        *(void *)&__int128 v54 = v34;
        *((void *)&v54 + 1) = v35;
        sub_100136668(&v54, v53);
        swift_bridgeObjectRetain(v33);
        char v36 = swift_isUniquelyReferenced_nonNull_native(v32);
        unint64_t v52 = v32;
        sub_10015B798(v53, (uint64_t)v56, v36);
        unint64_t v37 = v52;
        swift_bridgeObjectRelease(0x8000000000000000LL);
        sub_1001275E8((uint64_t)v56);
        uint64_t v38 = *(void *)(v49 + OBJC_IVAR____TtC8Podcasts20CloudSyncBugReporter_bugReporter + 24);
        uint64_t v39 = *(void *)(v49 + OBJC_IVAR____TtC8Podcasts20CloudSyncBugReporter_bugReporter + 32);
        sub_1001361FC((void *)(v49 + OBJC_IVAR____TtC8Podcasts20CloudSyncBugReporter_bugReporter), v38);
        uint64_t v41 = v50;
        uint64_t v40 = v51;
        v42.n128_f64[0] = (*(double (**)(char *, void, uint64_t))(v50 + 104))( v9,  enum case for BugReportFrequency.hourly(_:),  v51);
        dispatch thunk of BugReporter.submit(bugReport:maximumFrequency:userInfo:)(v23, v9, v37, v38, v39, v42);

        swift_bridgeObjectRelease(v37);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v9, v40);
        break;
      default:
        *(void *)&__int128 v54 = a1;
        char v44 = &v54;
        goto LABEL_19;
    }
  }

  return result;
}

id DataMigrator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CloudSyncBugReporter()
{
  return objc_opt_self(&OBJC_CLASS____TtC8Podcasts20CloudSyncBugReporter);
}

uint64_t sub_10015A8EC(uint64_t a1)
{
  uint64_t result = 0xD000000000000015LL;
  switch(a1)
  {
    case 0LL:
      return result;
    case 1LL:
      uint64_t result = 0xD00000000000001CLL;
      break;
    case 2LL:
      uint64_t result = 0xD000000000000017LL;
      break;
    case 3LL:
      uint64_t result = 0xD00000000000001FLL;
      break;
    case 4LL:
      uint64_t result = 0xD000000000000022LL;
      break;
    case 5LL:
      uint64_t result = 0xD000000000000029LL;
      break;
    default:
      v6[1] = v1;
      void v6[2] = v2;
      v6[0] = a1;
      uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for CloudSyncBugReportingIssue,  v6,  &type metadata for CloudSyncBugReportingIssue,  &type metadata for Int);
      __break(1u);
      break;
  }

  return result;
}

uint64_t sub_10015A9B0(unint64_t a1)
{
  if (a1 < 6) {
    return static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)*(&off_100247B80 + a1));
  }
  unint64_t v2 = a1;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for CloudSyncBugReportingKey,  &v2,  &type metadata for CloudSyncBugReportingKey,  &type metadata for Int);
  __break(1u);
  return result;
}

uint64_t sub_10015AA04()
{
  return sub_10015A8EC(*v0);
}

uint64_t sub_10015AA0C()
{
  return sub_10015A9B0(*v0);
}

unint64_t sub_10015AA14()
{
  unint64_t result = qword_1002B60B0;
  if (!qword_1002B60B0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___PFAutoBugCaptureBugReporter);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B60B0);
  }

  return result;
}

_OWORD *sub_10015AA50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100126450(&qword_1002B60C8);
  char v40 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v39 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v38 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  unint64_t result = (_OWORD *)swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_25;
    }

    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v18 >= v38) {
      break;
    }
    uint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v39 + 8 * v18);
    ++v14;
    if (!v20)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v38) {
        goto LABEL_37;
      }
      unint64_t v20 = *(void *)(v39 + 8 * v14);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v38)
        {
LABEL_37:
          swift_release(v5);
          if ((v40 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v20 = *(void *)(v39 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v14 = v21 + 1;
            if (__OFADD__(v21, 1LL)) {
              goto LABEL_46;
            }
            if (v14 >= v38) {
              goto LABEL_37;
            }
            unint64_t v20 = *(void *)(v39 + 8 * v14);
            ++v21;
            if (v20) {
              goto LABEL_24;
            }
          }
        }

        int64_t v14 = v21;
      }
    }

uint64_t sub_10015AD88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100126450(&qword_1002B60B8);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v15 << 6);
      goto LABEL_25;
    }

    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v22 >= v12) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v15;
    if (!v24)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v12) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v15);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v15 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_46;
            }
            if (v15 >= v12) {
              goto LABEL_37;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v15);
            ++v25;
            if (v24) {
              goto LABEL_24;
            }
          }
        }

        int64_t v15 = v25;
      }
    }

Swift::Int sub_10015B09C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100126450(&qword_1002B60E0);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v3;
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v38 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v37;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v38 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

Swift::Int sub_10015B36C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100126450(&qword_1002B60D8);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v37) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

_OWORD *sub_10015B678(_OWORD *a1, void *a2, char a3)
{
  id v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_10015F0A4((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }

  else
  {
    char v13 = v8;
    uint64_t v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        unint64_t v16 = (void *)(v15[7] + 32 * v9);
        sub_100136648(v16);
        return sub_100136668(a1, v16);
      }

      goto LABEL_11;
    }

    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_10015B9AC();
      goto LABEL_7;
    }

    sub_10015AA50(v12, a3 & 1);
    unint64_t v18 = sub_10015F0A4((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      uint64_t v15 = *v4;
      if ((v13 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10015B8D0(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }

  type metadata accessor for OpenURLOptionsKey(0LL);
  Swift::Int result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_OWORD *sub_10015B798(_OWORD *a1, uint64_t a2, char a3)
{
  id v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = sub_10015F074(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      unint64_t v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        unint64_t v17 = (void *)(v16[7] + 32 * v10);
        sub_100136648(v17);
        return sub_100136668(a1, v17);
      }

      goto LABEL_11;
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10015BB70();
      goto LABEL_7;
    }

    sub_10015AD88(v13, a3 & 1);
    unint64_t v19 = sub_10015F074(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      unint64_t v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_1001275AC(a2, (uint64_t)v21);
      return sub_10015B934(v10, (uint64_t)v21, a1, v16);
    }
  }

  Swift::Int result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

_OWORD *sub_10015B8D0(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  Swift::Int result = sub_100136668(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

_OWORD *sub_10015B934(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  Swift::Int result = sub_100136668(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

id sub_10015B9AC()
{
  uint64_t v1 = v0;
  sub_100126450(&qword_1002B60C8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }

void *sub_10015BB70()
{
  uint64_t v1 = v0;
  sub_100126450(&qword_1002B60B8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }

id sub_10015BD54()
{
  uint64_t v1 = v0;
  sub_100126450(&qword_1002B60E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

id sub_10015BEF8()
{
  uint64_t v1 = v0;
  sub_100126450(&qword_1002B60D8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

ValueMetadata *type metadata accessor for CloudSyncBugReportingIssue()
{
  return &type metadata for CloudSyncBugReportingIssue;
}

ValueMetadata *type metadata accessor for CloudSyncBugReportingKey()
{
  return &type metadata for CloudSyncBugReportingKey;
}

unint64_t sub_10015C0CC()
{
  unint64_t result = qword_1002B60E8;
  if (!qword_1002B60E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001C5344, &type metadata for CloudSyncBugReportingKey);
    atomic_store(result, (unint64_t *)&qword_1002B60E8);
  }

  return result;
}

unint64_t sub_10015C114()
{
  unint64_t result = qword_1002B60F0;
  if (!qword_1002B60F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001C53E4, &type metadata for CloudSyncBugReportingIssue);
    atomic_store(result, (unint64_t *)&qword_1002B60F0);
  }

  return result;
}

unint64_t sub_10015C158(unint64_t result)
{
  if (result > 5) {
    return 0LL;
  }
  return result;
}

Swift::Void __swiftcall RestrictionsController.presentLaunchAlertIfNeeded()()
{
  uint64_t v1 = sub_100126450(&qword_1002B60F8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for TaskPriority(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1LL, 1LL, v4);
  uint64_t v6 = (void *)swift_allocObject(&unk_100247C28, 40LL, 7LL);
  void v6[2] = 0LL;
  unint64_t v7 = v6 + 2;
  void v6[3] = 0LL;
  void v6[4] = v0;
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1LL, v4);
  id v9 = v0;
  if (v8 == 1)
  {
    sub_10015C6C4((uint64_t)v3);
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v12 = 7168LL;
  }

  else
  {
    unsigned __int8 v13 = TaskPriority.rawValue.getter(v9);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
    uint64_t v12 = v13 | 0x1C00LL;
    uint64_t v14 = *v7;
    if (*v7)
    {
      uint64_t v15 = v6[3];
      uint64_t ObjectType = swift_getObjectType(*v7);
      swift_unknownObjectRetain(v14);
      uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v15);
      uint64_t v11 = v17;
      swift_unknownObjectRelease(v14);
    }

    else
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = 0LL;
    }
  }

  uint64_t v18 = swift_allocObject(&unk_100247C50, 32LL, 7LL);
  *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = &unk_1002B6108;
  *(void *)(v18 + 24) = v6;
  if (v11 | v10)
  {
    v21[0] = 0LL;
    v21[1] = 0LL;
    uint64_t v19 = v21;
    void v21[2] = v10;
    v21[3] = v11;
  }

  else
  {
    uint64_t v19 = 0LL;
  }

  uint64_t v20 = swift_task_create(v12, v19, (char *)&type metadata for () + 8, &unk_1002B6118, v18);
  swift_release(v20);
}

uint64_t sub_10015C334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[9] = a4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  v4[10] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[11] = v7;
  v4[12] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  v4[13] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[14] = v9;
  v4[15] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (void *)swift_task_alloc(dword_1002B6124);
  uint8_t v4[16] = v10;
  void *v10 = v4;
  v10[1] = sub_10015C3E8;
  _OWORD v10[2] = a4;
  return swift_task_switch(sub_10015C71C, 0LL, 0LL);
}

uint64_t sub_10015C3E8(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128LL);
  *(_BYTE *)(*(void *)v1 + 136LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10015C444, 0LL, 0LL);
}

uint64_t sub_10015C444()
{
  if (*((_BYTE *)v0 + 136) == 1)
  {
    uint64_t v1 = v0[15];
    uint64_t v2 = v0[12];
    uint64_t v15 = v0[14];
    uint64_t v16 = v0[13];
    uint64_t v4 = v0[10];
    uint64_t v3 = v0[11];
    uint64_t v5 = (void *)v0[9];
    uint64_t v6 = sub_100134284(0LL, (unint64_t *)&qword_1002B4868, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v7 = (void *)static OS_dispatch_queue.main.getter(v6);
    uint64_t v8 = swift_allocObject(&unk_100247C78, 24LL, 7LL);
    *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
    v0[6] = sub_10015CFF0;
    v0[7] = v8;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256LL;
    v0[4] = sub_10013D2D8;
    v0[5] = &unk_100247C90;
    uint64_t v9 = _Block_copy(v0 + 2);
    static DispatchQoS.unspecified.getter(v5);
    v0[8] = _swiftEmptyArrayStorage;
    unint64_t v10 = sub_10015D010();
    uint64_t v11 = sub_100126450((uint64_t *)&unk_1002B5490);
    unint64_t v12 = sub_10015D058();
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 8, v11, v12, v4, v10);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v2, v9);
    _Block_release(v9);

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v1, v16);
    swift_release(v0[7]);
  }

  uint64_t v13 = v0[12];
  swift_task_dealloc(v0[15]);
  swift_task_dealloc(v13);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_10015C5E4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10015C610(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1002B6104);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10015C67C;
  return sub_10015C334(a1, v4, v5, v6);
}

uint64_t sub_10015C67C()
{
  uint64_t v4 = *v0;
  uint64_t v1 = *(void *)(v4 + 16);
  uint64_t v2 = *v0;
  uint64_t v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10015C6C4(uint64_t a1)
{
  uint64_t v2 = sub_100126450(&qword_1002B60F8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10015C704()
{
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  return swift_task_switch(sub_10015C71C, 0LL, 0LL);
}

uint64_t sub_10015C71C()
{
  id v1 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  sub_10015D0D0();
  uint64_t v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  id v5 = [v1 integerForKey:v4];

  uint64_t v6 = RestrictionsController.state.getter();
  if ((RestrictionsController.ExplicitContentState.isExplicitContentAllowed.getter(v6) & 1) != 0) {
    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to RestrictionsController.isExplicitContentBannedInCurrentStorefront()[1]);
  *(void *)(v0 + 24) = v8;
  void *v8 = v0;
  v8[1] = sub_10015C800;
  return RestrictionsController.isExplicitContentBannedInCurrentStorefront()();
}

uint64_t sub_10015C800(char a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 24);
  uint64_t v5 = *v1;
  swift_task_dealloc(v4);
  if ((a1 & 1) == 0) {
    return (*(uint64_t (**)(void))(v5 + 8))(0LL);
  }
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to RestrictionsController.isExplicitContentRestrictedByDefaultInCurrentStorefront()[1]);
  *(void *)(v3 + 32) = v6;
  void *v6 = v5;
  v6[1] = sub_10015C888;
  return RestrictionsController.isExplicitContentRestrictedByDefaultInCurrentStorefront()();
}

uint64_t sub_10015C888(uint64_t a1)
{
  uint64_t v4 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 32));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

void sub_10015C8D8(uint64_t a1)
{
  uint64_t v35 = a1;
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v36 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
  uint64_t v5 = (NSBundle *)[v4 mainBundle];
  v6._uint64_t countAndFlagsBits = 0xD000000000000016LL;
  v39._object = (void *)0xE000000000000000LL;
  v6._object = (void *)0x800000010021B760LL;
  v7._uint64_t countAndFlagsBits = 0LL;
  v7._object = (void *)0xE000000000000000LL;
  v39._uint64_t countAndFlagsBits = 0LL;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, v5, v7, v39)._object;

  uint64_t v9 = (NSBundle *)[v4 mainBundle];
  v40._object = (void *)0xE000000000000000LL;
  v10._object = (void *)0x800000010021B780LL;
  v10._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  v11._uint64_t countAndFlagsBits = 0LL;
  v11._object = (void *)0xE000000000000000LL;
  v40._uint64_t countAndFlagsBits = 0LL;
  unint64_t v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, v9, v11, v40)._object;

  uint64_t v13 = (NSBundle *)[v4 mainBundle];
  v41._object = (void *)0xE000000000000000LL;
  v14._uint64_t countAndFlagsBits = 19279LL;
  v14._object = (void *)0xE200000000000000LL;
  v15._uint64_t countAndFlagsBits = 0LL;
  v15._object = (void *)0xE000000000000000LL;
  v41._uint64_t countAndFlagsBits = 0LL;
  uint64_t v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, v13, v15, v41)._object;

  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  id v19 =  [(id)objc_opt_self(UIAlertController) alertControllerWithTitle:v17 message:v18 preferredStyle:1];

  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  id v21 = [(id)objc_opt_self(UIAlertAction) actionWithTitle:v20 style:0 handler:0];

  [v19 addAction:v21];
  [v19 setPreferredAction:v21];
  id v22 = [(id)objc_opt_self(UIApplication) sharedApplication];
  id v23 = [v22 delegate];

  if (v23)
  {
    if ([v23 respondsToSelector:"window"])
    {
      id v25 = [v23 window];
      uint64_t v24 = swift_unknownObjectRelease(v23);
      if (v25)
      {
        id v26 = [v25 rootViewController];

        if (v26)
        {
          uint64_t v27 = swift_allocObject(&unk_100247CC8, 24LL, 7LL);
          swift_unknownObjectWeakInit(v27 + 16, v35);
          aBlock[4] = sub_10015D0C8;
          uint64_t v38 = v27;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256LL;
          aBlock[2] = sub_10013D2D8;
          void aBlock[3] = &unk_100247CE0;
          BOOL v28 = _Block_copy(aBlock);
          swift_release(v38);
          [v26 presentViewController:v19 animated:1 completion:v28];
          _Block_release(v28);

          return;
        }
      }
    }

    else
    {
      uint64_t v24 = swift_unknownObjectRelease(v23);
    }
  }

  uint64_t v29 = static Logger.restrictions.getter(v24);
  uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v31 = static os_log_type_t.error.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "Failed to present launch restrictions alert due to missing root view controller",  v32,  2u);
    swift_slowDealloc(v32, -1LL, -1LL);
    unint64_t v33 = (os_log_s *)v21;
  }

  else
  {
    unint64_t v33 = v30;
    uint64_t v30 = (os_log_s *)v19;
    id v19 = v21;
  }

  uint64_t v34 = v36;

  (*(void (**)(char *, uint64_t))(v34 + 8))(v3, v1);
}

void sub_10015CD54(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    id v4 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    sub_10015D0D0();
    uint64_t v6 = v5;
    NSString v7 = String._bridgeToObjectiveC()();
    id v8 = [v4 integerForKey:v7];

    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
    }

    else
    {
      Class isa = Int._bridgeToObjectiveC()().super.super.isa;
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v6);
      [v4 setValue:isa forKey:v10];
    }
  }

void sub_10015CE54(id a1, SEL a2)
{
  id v2 = a1;
  RestrictionsController.presentLaunchAlertIfNeeded()();
}

uint64_t sub_10015CE88(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  id v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_10015CEEC;
  return v6(a1);
}

uint64_t sub_10015CEEC()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10015CF38()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10015CF5C(uint64_t a1)
{
  id v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1002B6114);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10015C67C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1002B6110 + dword_1002B6110))(a1, v4);
}

uint64_t sub_10015CFCC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10015CFF0()
{
}

uint64_t sub_10015CFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10015D008(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_10015D010()
{
  unint64_t result = qword_1002B4E90;
  if (!qword_1002B4E90)
  {
    uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1002B4E90);
  }

  return result;
}

unint64_t sub_10015D058()
{
  unint64_t result = qword_1002B4E98;
  if (!qword_1002B4E98)
  {
    uint64_t v1 = sub_1001264DC((uint64_t *)&unk_1002B5490);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002B4E98);
  }

  return result;
}

uint64_t sub_10015D0A4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10015D0C8()
{
}

unint64_t sub_10015D0D0()
{
  uint64_t v0 = sub_100134284(0LL, &qword_1002B4EE0, &off_10023E1E8);
  id v1 = [(id)swift_getObjCClassFromMetadata(v0) sharedInstance];
  id v2 = [v1 activeAccount];

  if (v2)
  {
    id v3 = objc_msgSend(v2, "ams_altDSID");

    if (v3)
    {
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
      uint64_t v6 = v5;

      v7._uint64_t countAndFlagsBits = v4;
      v7._object = v6;
      String.append(_:)(v7);
      swift_bridgeObjectRelease(v6);
      v8._uint64_t countAndFlagsBits = 46LL;
      v8._object = (void *)0xE100000000000000LL;
      String.append(_:)(v8);
      swift_bridgeObjectRelease(0xE100000000000000LL);
    }
  }

  return 0xD000000000000037LL;
}

char *sub_10015D1F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TVButtonHeaderView();
  id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v4));
  uint64_t v6 = v2;
  id v7 = [v5 init];
  *(void *)&v6[OBJC_IVAR____TtC8Podcasts23TVButtonTableHeaderView_containedView] = v7;

  if (a2)
  {
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v8 = 0LL;
  }

  v11.receiver = v6;
  v11.super_class = (Class)type metadata accessor for TVButtonTableHeaderView();
  uint64_t v9 = (char *)objc_msgSendSuper2(&v11, "initWithReuseIdentifier:", v8);

  [v9 addSubview:*(void *)&v9[OBJC_IVAR____TtC8Podcasts23TVButtonTableHeaderView_containedView]];
  return v9;
}

id sub_10015D49C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TVButtonTableHeaderView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TVButtonTableHeaderView()
{
  return objc_opt_self(&OBJC_CLASS____TtC8Podcasts23TVButtonTableHeaderView);
}

uint64_t KeyProcessorPair.key.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___MTKeyProcessorPair_key);
  swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR___MTKeyProcessorPair_key + 8));
  return v1;
}

uint64_t KeyProcessorPair.processor.getter()
{
  return swift_unknownObjectRetain(*(void *)(v0 + OBJC_IVAR___MTKeyProcessorPair_processor));
}

id KeyProcessorPair.__allocating_init(key:processor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = (char *)objc_allocWithZone(v3);
  NSString v8 = &v7[OBJC_IVAR___MTKeyProcessorPair_key];
  *(void *)NSString v8 = a1;
  *((void *)v8 + 1) = a2;
  *(void *)&v7[OBJC_IVAR___MTKeyProcessorPair_processor] = a3;
  v10.receiver = v7;
  v10.super_class = v3;
  return objc_msgSendSuper2(&v10, "init");
}

id KeyProcessorPair.init(key:processor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v3);
  NSString v8 = &v3[OBJC_IVAR___MTKeyProcessorPair_key];
  *(void *)NSString v8 = a1;
  *((void *)v8 + 1) = a2;
  *(void *)&v3[OBJC_IVAR___MTKeyProcessorPair_processor] = a3;
  v10.receiver = v3;
  v10.super_class = ObjectType;
  return objc_msgSendSuper2(&v10, "init");
}

void KeyProcessorPair.init()()
{
}

id MultiKeySyncProcessor.__allocating_init(keysAndProcessors:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return MultiKeySyncProcessor.init(keysAndProcessors:)(a1);
}

id MultiKeySyncProcessor.init(keysAndProcessors:)(uint64_t a1)
{
  objc_super v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v1);
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v6 = v1;
    if (v5) {
      goto LABEL_3;
    }
LABEL_29:
    uint64_t v24 = _swiftEmptyArrayStorage;
    *(void *)&v2[OBJC_IVAR___MTMultiKeySyncProcessor_orderedKeys] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(a1);
LABEL_30:
    uint64_t v49 = v24;
    uint64_t v43 = sub_100126450(&qword_1002B6188);
    uint64_t v44 = sub_100126450(&qword_1002B6190);
    unint64_t v45 = sub_10015F710();
    *(void *)&v2[OBJC_IVAR___MTMultiKeySyncProcessor_processorsByKey] = Dictionary.init<A>(probablyUniqueKeysWithValues:)( &v49,  &type metadata for String,  v43,  v44,  &protocol witness table for String,  v45);

    v48.receiver = v2;
    v48.super_class = ObjectType;
    return objc_msgSendSuper2(&v48, "init");
  }

  if (a1 < 0) {
    uint64_t v41 = a1;
  }
  else {
    uint64_t v41 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  __n128 v42 = v2;
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v41);
  if (!v5) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t v49 = _swiftEmptyArrayStorage;
  id result = (id)sub_1001366B0(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000LL) == 0)
  {
    uint64_t v46 = ObjectType;
    uint64_t v47 = v2;
    NSString v8 = v49;
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      uint64_t v9 = 0LL;
      do
      {
        uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, a1);
        uint64_t v11 = *(void *)(v10 + OBJC_IVAR___MTKeyProcessorPair_key);
        uint64_t v12 = *(void *)(v10 + OBJC_IVAR___MTKeyProcessorPair_key + 8);
        swift_bridgeObjectRetain(v12);
        swift_unknownObjectRelease(v10);
        uint64_t v49 = v8;
        unint64_t v14 = v8[2];
        unint64_t v13 = v8[3];
        if (v14 >= v13 >> 1)
        {
          sub_1001366B0(v13 > 1, v14 + 1, 1);
          NSString v8 = v49;
        }

        ++v9;
        void v8[2] = v14 + 1;
        Swift::String v15 = &v8[2 * v14];
        void v15[4] = v11;
        void v15[5] = v12;
      }

      while (v5 != v9);
    }

    else
    {
      uint64_t v16 = (void *)(a1 + 32);
      uint64_t v17 = v5;
      do
      {
        NSString v18 = (uint64_t *)(*v16 + OBJC_IVAR___MTKeyProcessorPair_key);
        uint64_t v20 = *v18;
        uint64_t v19 = v18[1];
        uint64_t v49 = v8;
        unint64_t v22 = v8[2];
        unint64_t v21 = v8[3];
        swift_bridgeObjectRetain(v19);
        if (v22 >= v21 >> 1)
        {
          sub_1001366B0(v21 > 1, v22 + 1, 1);
          NSString v8 = v49;
        }

        void v8[2] = v22 + 1;
        id v23 = &v8[2 * v22];
        v23[4] = v20;
        v23[5] = v19;
        ++v16;
        --v17;
      }

      while (v17);
    }

    *(void *)&v47[OBJC_IVAR___MTMultiKeySyncProcessor_orderedKeys] = v8;
    uint64_t v49 = _swiftEmptyArrayStorage;
    sub_100136694(0, v5 & ~(v5 >> 63), 0);
    uint64_t v24 = _swiftEmptyArrayStorage;
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      uint64_t v25 = 0LL;
      do
      {
        uint64_t v26 = specialized _ArrayBuffer._getElementSlowPath(_:)(v25, a1);
        uint64_t v27 = *(void *)(v26 + OBJC_IVAR___MTKeyProcessorPair_key);
        uint64_t v28 = *(void *)(v26 + OBJC_IVAR___MTKeyProcessorPair_key + 8);
        uint64_t v29 = *(void *)(v26 + OBJC_IVAR___MTKeyProcessorPair_processor);
        swift_bridgeObjectRetain(v28);
        swift_unknownObjectRetain(v29);
        swift_unknownObjectRelease(v26);
        uint64_t v49 = v24;
        unint64_t v31 = v24[2];
        unint64_t v30 = v24[3];
        if (v31 >= v30 >> 1)
        {
          sub_100136694(v30 > 1, v31 + 1, 1);
          uint64_t v24 = v49;
        }

        ++v25;
        _OWORD v24[2] = v31 + 1;
        uint64_t v32 = &v24[3 * v31];
        v32[4] = v27;
        v32[5] = v28;
        v32[6] = v29;
      }

      while (v5 != v25);
    }

    else
    {
      uint64_t v33 = 0LL;
      do
      {
        uint64_t v34 = *(void *)(a1 + 8 * v33 + 32);
        uint64_t v36 = *(void *)(v34 + OBJC_IVAR___MTKeyProcessorPair_key);
        uint64_t v35 = *(void *)(v34 + OBJC_IVAR___MTKeyProcessorPair_key + 8);
        uint64_t v37 = *(void *)(v34 + OBJC_IVAR___MTKeyProcessorPair_processor);
        uint64_t v49 = v24;
        unint64_t v39 = v24[2];
        unint64_t v38 = v24[3];
        swift_bridgeObjectRetain(v35);
        swift_unknownObjectRetain(v37);
        if (v39 >= v38 >> 1)
        {
          sub_100136694(v38 > 1, v39 + 1, 1);
          uint64_t v24 = v49;
        }

        ++v33;
        _OWORD v24[2] = v39 + 1;
        Swift::String v40 = &v24[3 * v39];
        v40[4] = v36;
        v40[5] = v35;
        v40[6] = v37;
      }

      while (v5 != v33);
    }

    swift_bridgeObjectRelease(a1);
    uint64_t ObjectType = v46;
    objc_super v2 = v47;
    goto LABEL_30;
  }

  __break(1u);
  return result;
}

void MultiKeySyncProcessor.dirtyKeys.getter()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR___MTMultiKeySyncProcessor_orderedKeys];
  objc_super v2 = v0;
  swift_bridgeObjectRetain(v1);
  uint64_t v4 = (uint64_t)sub_10015F75C(v3, (uint64_t)v2);
  swift_bridgeObjectRelease(v1);

  unint64_t v24 = (unint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)v4 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v5) {
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRelease(v4);
    unint64_t v12 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  if (v4 < 0) {
    uint64_t v13 = v4;
  }
  else {
    uint64_t v13 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v4);
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v13);
  swift_bridgeObjectRelease(v4);
  if (!v5) {
    goto LABEL_18;
  }
LABEL_3:
  if (v5 < 1)
  {
    __break(1u);
    goto LABEL_33;
  }

  for (uint64_t i = 0LL; i != v5; ++i)
  {
    if ((v4 & 0xC000000000000001LL) != 0) {
      uint64_t v9 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
    }
    else {
      uint64_t v9 = (char *)*(id *)(v4 + 8 * i + 32);
    }
    uint64_t v10 = v9;
    id v11 = objc_msgSend(*(id *)&v9[OBJC_IVAR___MTKeyProcessorPair_processor], "hasLocalChanges", v24);
    if ((_DWORD)v11)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      uint64_t v7 = *(void *)(v24 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
      uint64_t v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v10);
      specialized ContiguousArray._endMutation()(v8);
    }

    else
    {
    }
  }

  swift_bridgeObjectRelease(v4);
  unint64_t v12 = v24;
  if ((v24 & 0x8000000000000000LL) != 0) {
    goto LABEL_30;
  }
LABEL_19:
  if ((v12 & 0x4000000000000000LL) == 0)
  {
    uint64_t v14 = *(void *)(v12 + 16);
    if (!v14)
    {
LABEL_29:
      swift_release(v12);
      return;
    }

    goto LABEL_21;
  }

Class sub_10015DE7C(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();

  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v5);
  return isa;
}

void MultiKeySyncProcessor.cleanKeys.getter()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR___MTMultiKeySyncProcessor_orderedKeys];
  objc_super v2 = v0;
  swift_bridgeObjectRetain(v1);
  uint64_t v4 = (uint64_t)sub_10015F75C(v3, (uint64_t)v2);
  swift_bridgeObjectRelease(v1);

  unint64_t v25 = (unint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)v4 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v5) {
      goto LABEL_3;
    }
LABEL_19:
    swift_bridgeObjectRelease(v4);
    unint64_t v13 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_20;
  }

  if (v4 < 0) {
    uint64_t v14 = v4;
  }
  else {
    uint64_t v14 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v4);
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v14);
  swift_bridgeObjectRelease(v4);
  if (!v5) {
    goto LABEL_19;
  }
LABEL_3:
  if (v5 < 1)
  {
    __break(1u);
    goto LABEL_34;
  }

  for (uint64_t i = 0LL; i != v5; ++i)
  {
    if ((v4 & 0xC000000000000001LL) != 0) {
      uint64_t v7 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
    }
    else {
      uint64_t v7 = (char *)*(id *)(v4 + 8 * i + 32);
    }
    uint64_t v8 = v7;
    uint64_t v9 = *(void **)&v7[OBJC_IVAR___MTKeyProcessorPair_processor];
    if ((objc_msgSend(v9, "hasLocalChanges", v25) & 1) != 0
      || (id v10 = [v9 requiresNextGetTransaction], (v10 & 1) == 0))
    {
    }

    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      uint64_t v11 = *(void *)(v25 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      uint64_t v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v8);
      specialized ContiguousArray._endMutation()(v12);
    }
  }

  swift_bridgeObjectRelease(v4);
  unint64_t v13 = v25;
  if ((v25 & 0x8000000000000000LL) != 0) {
    goto LABEL_31;
  }
LABEL_20:
  if ((v13 & 0x4000000000000000LL) == 0)
  {
    uint64_t v15 = *(void *)(v13 + 16);
    if (!v15)
    {
LABEL_30:
      swift_release(v13);
      return;
    }

    goto LABEL_22;
  }

uint64_t MultiKeySyncProcessor.processor(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR___MTMultiKeySyncProcessor_processorsByKey);
  if (!*(void *)(v3 + 16)) {
    return 0LL;
  }
  swift_bridgeObjectRetain(a2);
  unint64_t v6 = sub_10015F124(a1, a2);
  if ((v7 & 1) != 0)
  {
    uint64_t v8 = *(void *)(*(void *)(v3 + 56) + 8 * v6);
    swift_unknownObjectRetain(v8);
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  swift_bridgeObjectRelease(a2);
  return v8;
}

void MultiKeySyncProcessor.init()()
{
}

uint64_t MultiKeySyncProcessor.operationTypeForSET()()
{
  return 17LL;
}

Swift::Bool __swiftcall MultiKeySyncProcessor.hasLocalChanges()()
{
  return sub_10015E344((SEL *)&selRef_hasLocalChanges);
}

Swift::Bool __swiftcall MultiKeySyncProcessor.requiresNextGetTransaction()()
{
  return sub_10015E344((SEL *)&selRef_requiresNextGetTransaction);
}

uint64_t sub_10015E344(SEL *a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___MTMultiKeySyncProcessor_processorsByKey);
  uint64_t v4 = v3 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(v3 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n(v3, 2LL);
  int64_t v10 = 0LL;
  for (char i = 0; ; i |= result)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v14 >= v8) {
      goto LABEL_25;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_25;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_25;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v10);
        if (!v15)
        {
          int64_t v10 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_25;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v10);
          if (!v15)
          {
            int64_t v10 = v14 + 4;
            if (v14 + 4 >= v8) {
              goto LABEL_25;
            }
            unint64_t v15 = *(void *)(v4 + 8 * v10);
            if (!v15) {
              break;
            }
          }
        }
      }
    }

Swift::String_optional __swiftcall MultiKeySyncProcessor.version(forGetTransaction:key:)( MZKeyValueStoreTransaction *forGetTransaction, Swift::String key)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR___MTMultiKeySyncProcessor_processorsByKey);
  if (!*(void *)(v3 + 16)) {
    goto LABEL_6;
  }
  object = key._object;
  uint64_t countAndFlagsBits = key._countAndFlagsBits;
  swift_bridgeObjectRetain(key._object);
  unint64_t v7 = sub_10015F124(countAndFlagsBits, (uint64_t)object);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease(object);
    goto LABEL_6;
  }

  uint64_t v9 = *(void **)(*(void *)(v3 + 56) + 8 * v7);
  swift_unknownObjectRetain(v9);
  swift_bridgeObjectRelease(object);
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v9 versionForGetTransaction:forGetTransaction key:v10];

  swift_unknownObjectRelease(v9);
  if (!v11)
  {
LABEL_6:
    uint64_t v12 = 0LL;
    int64_t v14 = 0LL;
    goto LABEL_7;
  }

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  int64_t v14 = v13;

LABEL_7:
  uint64_t v15 = v12;
  int64_t v16 = v14;
  result.value._object = v16;
  result.value._uint64_t countAndFlagsBits = v15;
  return result;
}

uint64_t MultiKeySyncProcessor.data(forSetTransaction:key:version:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(v4 + OBJC_IVAR___MTMultiKeySyncProcessor_processorsByKey);
  if (!*(void *)(v5 + 16)) {
    return 0LL;
  }
  swift_bridgeObjectRetain(a3);
  unint64_t v10 = sub_10015F124(a2, a3);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease(a3);
    return 0LL;
  }

  uint64_t v12 = *(void **)(*(void *)(v5 + 56) + 8 * v10);
  swift_unknownObjectRetain(v12);
  swift_bridgeObjectRelease(a3);
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v12 dataForSetTransaction:a1 key:v13 version:a4];

  swift_unknownObjectRelease(v12);
  if (!v14) {
    return 0LL;
  }
  uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);

  return v15;
}

void MultiKeySyncProcessor.success(forGetTransaction:with:forKey:version:finishedBlock:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9)
{
}

void MultiKeySyncProcessor.success(forSetTransaction:with:forKey:version:finishedBlock:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9)
{
}

void MultiKeySyncProcessor.conflict(forSetTransaction:with:forKey:version:finishedBlock:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9)
{
}

void sub_10015EBD4( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, NSString a7, void *a8, uint64_t a9, uint64_t a10, SEL *a11)
{
  uint64_t v12 = *(void *)(v11 + OBJC_IVAR___MTMultiKeySyncProcessor_processorsByKey);
  if (*(void *)(v12 + 16))
  {
    swift_bridgeObjectRetain(a5);
    unint64_t v19 = sub_10015F124(a4, a5);
    if ((v20 & 1) != 0)
    {
      unint64_t v21 = *(void **)(*(void *)(v12 + 56) + 8 * v19);
      swift_unknownObjectRetain(v21);
      swift_bridgeObjectRelease(a5);
      if (a3 >> 60 == 15) {
        Class isa = 0LL;
      }
      else {
        Class isa = Data._bridgeToObjectiveC()().super.isa;
      }
      NSString v23 = String._bridgeToObjectiveC()();
      if (a7) {
        a7 = String._bridgeToObjectiveC()();
      }
      if (a8)
      {
        aBlock[4] = a8;
        uint64_t v26 = a9;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_10014CA28;
        void aBlock[3] = a10;
        a8 = _Block_copy(aBlock);
        uint64_t v24 = v26;
        swift_retain(a9);
        swift_release(v24);
      }

      objc_msgSend(v21, *a11, a1, isa, v23, a7, a8, a10, a9);
      swift_unknownObjectRelease(v21);
      _Block_release(a8);
    }

    else
    {
      swift_bridgeObjectRelease(a5);
    }
  }

Swift::Void __swiftcall MultiKeySyncProcessor.transaction(_:didProcessResponseWithDomainVersion:)( MZKeyValueStoreTransaction *_, Swift::String_optional didProcessResponseWithDomainVersion)
{
  object = didProcessResponseWithDomainVersion.value._object;
  uint64_t countAndFlagsBits = didProcessResponseWithDomainVersion.value._countAndFlagsBits;
  uint64_t v4 = type metadata accessor for SyncKeysRepository(0LL);
  id v5 = (id)static SyncKeysRepository.shared.getter(v4);
  swift_bridgeObjectRetain(object);
  SyncKeysRepository.podcastsDomainVersion.setter(countAndFlagsBits, object);
}

unint64_t sub_10015F010(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for MediaRequest.ContentType(0LL);
  uint64_t v6 = sub_10015F958(&qword_1002B4F38, (uint64_t)&protocol conformance descriptor for MediaRequest.ContentType);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10015F1B8(a1, v7);
}

unint64_t sub_10015F074(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10015F2F0(a1, v4);
}

unint64_t sub_10015F0A4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  Swift::Int v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_10015F3B4(a1, v7);
}

unint64_t sub_10015F124(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_10015F528(a1, a2, v5);
}

unint64_t sub_10015F188(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10015F608(a1, v4);
}

unint64_t sub_10015F1B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v18 = a1;
  uint64_t v5 = type metadata accessor for MediaRequest.ContentType(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    NSString v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      uint64_t v14 = sub_10015F958(&qword_1002B6200, (uint64_t)&protocol conformance descriptor for MediaRequest.ContentType);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

unint64_t sub_10015F2F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_1001275AC(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_1001275E8((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

unint64_t sub_10015F3B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2LL);
      return v5;
    }

    uint64_t v13 = v11;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ~v4;
      unint64_t v5 = (v5 + 1) & v15;
      if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
      {
        while (1)
        {
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
          uint64_t v9 = v17;
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19) {
            break;
          }
          uint64_t v21 = v19;
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0LL);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v15;
            if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
              continue;
            }
          }

          return v5;
        }

        goto LABEL_16;
      }
    }
  }

  return v5;
}

unint64_t sub_10015F528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        char v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_10015F608(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_10015F998();
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_10015F710()
{
  unint64_t result = qword_1002B6198;
  if (!qword_1002B6198)
  {
    uint64_t v1 = sub_1001264DC(&qword_1002B6190);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002B6198);
  }

  return result;
}

void *sub_10015F75C(uint64_t a1, uint64_t a2)
{
  unint64_t result = _swiftEmptyArrayStorage;
  unint64_t v22 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + OBJC_IVAR___MTMultiKeySyncProcessor_processorsByKey);
    swift_bridgeObjectRetain(a1);
    uint64_t v20 = a1;
    id v6 = (uint64_t *)(a1 + 40);
    do
    {
      if (*(void *)(v5 + 16))
      {
        uint64_t v8 = *(v6 - 1);
        uint64_t v7 = *v6;
        swift_bridgeObjectRetain_n(*v6, 2LL);
        unint64_t v9 = sub_10015F124(v8, v7);
        if ((v10 & 1) != 0)
        {
          uint64_t v11 = *(void *)(*(void *)(v5 + 56) + 8 * v9);
          swift_unknownObjectRetain(v11);
          swift_bridgeObjectRelease(v7);
          BOOL v12 = (objc_class *)type metadata accessor for KeyProcessorPair();
          uint64_t v13 = (char *)objc_allocWithZone(v12);
          char v14 = (uint64_t *)&v13[OBJC_IVAR___MTKeyProcessorPair_key];
          uint64_t *v14 = v8;
          v14[1] = v7;
          *(void *)&v13[OBJC_IVAR___MTKeyProcessorPair_processor] = v11;
          v21.receiver = v13;
          v21.super_class = v12;
          id v15 = objc_msgSendSuper2(&v21, "init", v20);
          if (v15)
          {
            id v16 = v15;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            unint64_t v18 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v17 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v18 >= v17 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1LL);
            }
            uint64_t v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v16);
            specialized Array._endMutation()(v19);
          }
        }

        else
        {
          swift_bridgeObjectRelease_n(v7, 2LL);
        }
      }

      v6 += 2;
      --v4;
    }

    while (v4);
    swift_bridgeObjectRelease(v20);
    return (void *)v22;
  }

  return result;
}

uint64_t sub_10015F8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10015F8EC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t type metadata accessor for KeyProcessorPair()
{
  return objc_opt_self(&OBJC_CLASS___MTKeyProcessorPair);
}

uint64_t type metadata accessor for MultiKeySyncProcessor()
{
  return objc_opt_self(&OBJC_CLASS___MTMultiKeySyncProcessor);
}

uint64_t sub_10015F934()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10015F958(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for MediaRequest.ContentType(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10015F998()
{
  unint64_t result = qword_1002B6750;
  if (!qword_1002B6750)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSManagedObjectID);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B6750);
  }

  return result;
}

id sub_10015FA60()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlaceholderManifest();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PlaceholderManifest()
{
  return objc_opt_self(&OBJC_CLASS___MTPlaceholderManifest);
}

uint64_t sub_10015FAB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v3 = (void *)(a1 + 32);
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = v1 - 1;
    do
    {
      uint64_t v5 = v4;
      uint64_t v6 = v3[3];
      uint64_t v7 = v3[4];
      sub_1001361FC(v3, v6);
      char v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
      if ((v8 & 1) != 0) {
        break;
      }
      uint64_t v4 = v5 - 1;
      v3 += 5;
    }

    while (v5);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    char v8 = 0;
  }

  return v8 & 1;
}

uint64_t sub_10015FB50(uint64_t a1)
{
  return sub_10015FB88( a1,  (uint64_t (*)(void))&type metadata accessor for OSSignposter,  qword_1002B6230,  (uint64_t (*)(void))&static OSSignposter.database.getter);
}

uint64_t sub_10015FB6C(uint64_t a1)
{
  return sub_10015FB88( a1,  (uint64_t (*)(void))&type metadata accessor for Logger,  qword_1002B6248,  (uint64_t (*)(void))&static Logger.database.getter);
}

uint64_t sub_10015FB88(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a2(0LL);
  sub_100160C58(v6, a3);
  sub_100160C40(v6, (uint64_t)a3);
  return a4();
}

double sub_10015FBD8()
{
  uint64_t v0 = sub_100126450(&qword_1002B6298);
  uint64_t v1 = swift_allocObject(v0, 112LL, 7LL);
  *(void *)&double result = 2LL;
  *(_OWORD *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4150;
  *(void *)(v1 + 56) = &type metadata for UberArtworkResetMigrator;
  *(void *)(v1 + 64) = &protocol witness table for UberArtworkResetMigrator;
  *(void *)(v1 + 32) = "com.apple.podcasts.artwork.uber-migration.rdar120006144";
  *(void *)(v1 + 40) = 55LL;
  *(_WORD *)(v1 + 4_Block_object_dispose(va, 8) = 258;
  *(void *)(v1 + 96) = &type metadata for EntitledFirstTimeAvailableMigrator;
  *(void *)(v1 + 104) = &protocol witness table for EntitledFirstTimeAvailableMigrator;
  *(void *)(v1 + 72) = "com.apple.podcasts.db.firstAvailabilityDate-migration.rdar138352221";
  *(void *)(v1 + 80) = 67LL;
  *(_WORD *)(v1 + 8_Block_object_dispose(va, 8) = 258;
  off_1002B6260 = (_UNKNOWN *)v1;
  return result;
}

uint64_t static DataMigrator.requiresMigration.getter()
{
  if (qword_1002B4840 != -1) {
    swift_once(&qword_1002B4840, sub_10015FBD8);
  }
  uint64_t v0 = off_1002B6260;
  uint64_t v1 = *((void *)off_1002B6260 + 2);
  if (v1)
  {
    objc_super v2 = (void *)((char *)off_1002B6260 + 32);
    swift_bridgeObjectRetain(off_1002B6260);
    uint64_t v3 = v1 - 1;
    do
    {
      uint64_t v4 = v3;
      uint64_t v5 = v2[3];
      uint64_t v6 = v2[4];
      sub_1001361FC(v2, v5);
      LOBYTE(v1) = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
      if ((v1 & 1) != 0) {
        break;
      }
      uint64_t v3 = v4 - 1;
      v2 += 5;
    }

    while (v4);
    swift_bridgeObjectRelease(v0);
  }

  return v1 & 1;
}

id DataMigrator.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t _s8Podcasts12DataMigratorC7migrateyyFZ_0()
{
  uint64_t v142 = type metadata accessor for OSSignpostError(0LL);
  unint64_t v141 = *(os_log_s **)(v142 - 8);
  uint64_t v0 = __chkstk_darwin(v142);
  objc_super v2 = (char *)&v136 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v0);
  uint64_t v143 = (char *)&v136 - v3;
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v151 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (os_log_s *)((char *)&v136 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v150 = (char *)&v136 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  BOOL v12 = (char *)&v136 - v11;
  __chkstk_darwin(v10);
  uint64_t v146 = (char *)&v136 - v13;
  if (qword_1002B4840 != -1) {
LABEL_70:
  }
    swift_once(&qword_1002B4840, sub_10015FBD8);
  uint64_t result = (uint64_t)off_1002B6260;
  uint64_t v15 = *((void *)off_1002B6260 + 2);
  if (!v15) {
    return result;
  }
  uint64_t v136 = v2;
  unint64_t v149 = v12;
  id v137 = v7;
  objc_super v2 = (char *)off_1002B6260 + 32;
  int v139 = enum case for OSSignpostError.doubleEnd(_:);
  uint64_t v138 = off_1002B6260;
  __n128 v16 = swift_bridgeObjectRetain(off_1002B6260);
  BOOL v12 = 0LL;
  v16.n128_u64[0] = 136315138LL;
  __n128 v148 = v16;
  unint64_t v140 = (char *)&type metadata for Any + 8;
  uint64_t v156 = v4;
  while (1)
  {
    sub_1001376A4((uint64_t)v2, (uint64_t)&v163);
    uint64_t v17 = v164;
    uint64_t v18 = v165;
    sub_1001361FC(&v163, v164);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18) & 1) == 0)
    {
      if (qword_1002B4838 != -1) {
        swift_once(&qword_1002B4838, sub_10015FB6C);
      }
      uint64_t v33 = type metadata accessor for Logger(0LL);
      sub_100160C40(v33, (uint64_t)qword_1002B6248);
      uint64_t v34 = sub_1001376A4((uint64_t)&v163, (uint64_t)v160);
      uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
      os_log_type_t v36 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = swift_slowAlloc(12LL, -1LL);
        uint64_t v38 = swift_slowAlloc(32LL, -1LL);
        uint64_t v159 = v38;
        *(_DWORD *)uint64_t v37 = v148.n128_u32[0];
        uint64_t v39 = v161;
        uint64_t v40 = v162;
        sub_1001361FC(v160, v161);
        uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v39, v40);
        uint64_t v42 = StaticString.description.getter(v41);
        unint64_t v44 = v43;
        *(void *)(v37 + 4) = sub_100178E7C(v42, v43, &v159);
        swift_bridgeObjectRelease(v44);
        sub_100136648(v160);
        _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "[%s] Migration not required, skipping.",  (uint8_t *)v37,  0xCu);
        swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1LL, -1LL);
        swift_slowDealloc(v37, -1LL, -1LL);
      }

      else
      {
        sub_100136648(v160);
      }

      goto LABEL_6;
    }

    if (qword_1002B4838 != -1) {
      swift_once(&qword_1002B4838, sub_10015FB6C);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    uint64_t v20 = sub_100160C40(v19, (uint64_t)qword_1002B6248);
    uint64_t v21 = sub_1001376A4((uint64_t)&v163, (uint64_t)v160);
    unint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.info.getter(v22);
    BOOL v24 = os_log_type_enabled(v22, v23);
    uint64_t v153 = v15;
    if (v24)
    {
      uint64_t v25 = swift_slowAlloc(12LL, -1LL);
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      uint64_t v159 = v26;
      *(_DWORD *)uint64_t v25 = v148.n128_u32[0];
      uint64_t v28 = v161;
      uint64_t v27 = v162;
      sub_1001361FC(v160, v161);
      uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v28, v27);
      uint64_t v30 = StaticString.description.getter(v29);
      unint64_t v32 = v31;
      *(void *)(v25 + 4) = sub_100178E7C(v30, v31, &v159);
      swift_bridgeObjectRelease(v32);
      sub_100136648(v160);
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "[%s] Preparing to perform migration step",  (uint8_t *)v25,  0xCu);
      swift_arrayDestroy(v26, 1LL, v140);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    else
    {
      sub_100136648(v160);
    }

    if (qword_1002B4830 != -1) {
      swift_once(&qword_1002B4830, sub_10015FB50);
    }
    uint64_t v45 = type metadata accessor for OSSignposter(0LL);
    uint64_t v46 = sub_100160C40(v45, (uint64_t)qword_1002B6230);
    uint64_t v4 = v164;
    uint64_t v47 = v165;
    sub_1001361FC(&v163, v164);
    unint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v4, v47);
    char v50 = v49;
    uint64_t v51 = v146;
    uint64_t v52 = static OSSignpostID.exclusive.getter();
    uint64_t v155 = v46;
    uint64_t v53 = (os_log_s *)OSSignposter.logHandle.getter(v52);
    os_signpost_type_t v54 = static os_signpost_type_t.begin.getter(v53);
    uint64_t v7 = v53;
    uint64_t result = OS_os_log.signpostsEnabled.getter();
    uint64_t v154 = v20;
    if ((result & 1) != 0)
    {
      uint64_t v145 = v2;
      if ((v50 & 1) != 0)
      {
        if (HIDWORD(v48)) {
          goto LABEL_65;
        }
        if (v48 >> 11 == 27)
        {
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
          return result;
        }

        unint64_t v48 = (unint64_t)&v166;
      }

      else if (!v48)
      {
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }

      uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v151 + 16);
      uint64_t v58 = v149;
      uint64_t v60 = v156;
      v59(v149, v51, v156);
      uint64_t v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v61 = 0;
      os_signpost_id_t v62 = OSSignpostID.rawValue.getter(v61);
      os_signpost_type_t v63 = v54;
      uint64_t v57 = v60;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v53, v63, v62, (const char *)v48, "", v61, 2u);
      unsigned __int8 v64 = v61;
      uint64_t v55 = v151;
      swift_slowDealloc(v64, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v55 + 8))(v58, v60);
      unint64_t v56 = v59;
      objc_super v2 = v145;
    }

    else
    {

      uint64_t v55 = v151;
      unint64_t v56 = *(void (**)(char *, char *, uint64_t))(v151 + 16);
      uint64_t v57 = v156;
      uint64_t v58 = v149;
    }

    uint64_t v147 = v56;
    v56(v58, v51, v57);
    uint64_t v65 = type metadata accessor for OSSignpostIntervalState(0LL);
    swift_allocObject(v65, *(unsigned int *)(v65 + 48), *(unsigned __int16 *)(v65 + 52));
    uint64_t v66 = OSSignpostIntervalState.init(id:isOpen:)(v58, 1LL);
    uint64_t v67 = *(void (**)(char *, uint64_t))(v55 + 8);
    v67(v51, v57);
    uint64_t v68 = v164;
    uint64_t v69 = v165;
    sub_1001361FC(&v163, v164);
    (*(void (**)(uint64_t, uint64_t))(v69 + 24))(v68, v69);
    if (v12) {
      break;
    }
    char v152 = 0LL;
    uint64_t v70 = v164;
    uint64_t v71 = v165;
    sub_1001361FC(&v163, v164);
    unint64_t v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 8))(v70, v71);
    char v74 = v73;
    uint64_t v75 = (os_log_s *)OSSignposter.logHandle.getter(v72);
    uint64_t v76 = v150;
    uint64_t v77 = OSSignpostIntervalState.signpostID.getter();
    BOOL v12 = (char *)static os_signpost_type_t.end.getter(v77);
    uint64_t result = OS_os_log.signpostsEnabled.getter();
    if ((result & 1) != 0)
    {
      int v144 = (int)v12;
      if ((v74 & 1) != 0)
      {
        uint64_t v4 = v142;
        uint64_t v7 = v141;
        if (HIDWORD(v72)) {
          goto LABEL_68;
        }
        unint64_t v72 = (unint64_t)&v167;
      }

      else
      {
        uint64_t v4 = v142;
        uint64_t v7 = v141;
        if (!v72) {
          goto LABEL_67;
        }
      }

      swift_retain(v66);
      uint64_t v80 = v66;
      uint64_t v81 = v143;
      checkForErrorAndConsumeState(state:)(v80);
      uint64_t v155 = v80;
      swift_release(v80);
      int v82 = (*((uint64_t (**)(char *, uint64_t))v7 + 11))(v81, v4);
      __int128 v83 = "[Error] Interval already ended";
      if (v82 != v139)
      {
        (*((void (**)(char *, uint64_t))v7 + 1))(v143, v4);
        __int128 v83 = "SUCCESS";
      }

      id v84 = v149;
      uint64_t v85 = v150;
      uint64_t v86 = v156;
      v147(v149, v150, v156);
      uint64_t v87 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v87 = 0;
      os_signpost_id_t v88 = OSSignpostID.rawValue.getter(v87);
      uint64_t v79 = v86;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v75,  (os_signpost_type_t)v144,  v88,  (const char *)v72,  v83,  v87,  2u);
      swift_slowDealloc(v87, -1LL, -1LL);

      v67(v85, v86);
      unint64_t v78 = v84;
      uint64_t v66 = v155;
    }

    else
    {

      unint64_t v78 = v76;
      uint64_t v79 = v156;
    }

    v67(v78, v79);
    uint64_t v89 = sub_1001376A4((uint64_t)&v163, (uint64_t)v160);
    uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
    os_log_type_t v91 = static os_log_type_t.info.getter(v90);
    BOOL v92 = os_log_type_enabled(v90, v91);
    BOOL v12 = v152;
    if (v92)
    {
      uint64_t v93 = swift_slowAlloc(12LL, -1LL);
      uint64_t v94 = swift_slowAlloc(32LL, -1LL);
      uint64_t v159 = v94;
      *(_DWORD *)uint64_t v93 = v148.n128_u32[0];
      uint64_t v95 = v161;
      uint64_t v96 = v162;
      sub_1001361FC(v160, v161);
      uint64_t v97 = (*(uint64_t (**)(uint64_t, uint64_t))(v96 + 8))(v95, v96);
      uint64_t v98 = StaticString.description.getter(v97);
      unint64_t v100 = v99;
      *(void *)(v93 + 4) = sub_100178E7C(v98, v99, &v159);
      swift_bridgeObjectRelease(v100);
      sub_100136648(v160);
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "[%s] Finished running migration step", (uint8_t *)v93, 0xCu);
      swift_arrayDestroy(v94, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v94, -1LL, -1LL);
      swift_slowDealloc(v93, -1LL, -1LL);
      swift_release(v66);
    }

    else
    {
      sub_100136648(v160);

      swift_release(v66);
    }

    uint64_t v15 = v153;
LABEL_6:
    sub_100136648(&v163);
    v2 += 40;
    if (!--v15) {
      return swift_bridgeObjectRelease(v138);
    }
  }

  swift_bridgeObjectRelease(v138);
  uint64_t v101 = v164;
  uint64_t v102 = v165;
  sub_1001361FC(&v163, v164);
  unint64_t v103 = (*(uint64_t (**)(uint64_t, uint64_t))(v102 + 8))(v101, v102);
  char v105 = v104;
  uint64_t v106 = (os_log_s *)OSSignposter.logHandle.getter(v103);
  uint64_t v107 = (uint64_t)v137;
  uint64_t v108 = OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v109 = static os_signpost_type_t.end.getter(v108);
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_51;
  }
  if ((v105 & 1) != 0)
  {
    uint64_t v107 = v142;
    uint64_t v110 = (uint64_t (**)(char *, uint64_t))v141;
    if (HIDWORD(v103)) {
      goto LABEL_73;
    }
    unint64_t v103 = (unint64_t)&v168;
    goto LABEL_56;
  }

  uint64_t v107 = v142;
  uint64_t v110 = (uint64_t (**)(char *, uint64_t))v141;
  if (v103)
  {
LABEL_56:
    swift_retain(v66);
    uint64_t v111 = v66;
    uint64_t v112 = v136;
    checkForErrorAndConsumeState(state:)(v111);
    uint64_t v155 = v111;
    swift_release(v111);
    int v113 = v110[11](v112, v107);
    if (v113 == v139)
    {
      uint64_t v114 = "[Error] Interval already ended";
    }

    else
    {
      v110[1](v112, v107);
      uint64_t v114 = "ERROR";
    }

    uint64_t v115 = v149;
    uint64_t v116 = v137;
    uint64_t v117 = v156;
    v147(v149, (char *)v137, v156);
    uint64_t v118 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v118 = 0;
    os_signpost_id_t v119 = OSSignpostID.rawValue.getter(v118);
    unsigned __int8 v120 = v114;
    uint64_t v57 = v117;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v106, v109, v119, (const char *)v103, v120, v118, 2u);
    swift_slowDealloc(v118, -1LL, -1LL);

    uint64_t v107 = (uint64_t)v115;
    v67((char *)v116, v117);
    uint64_t v66 = v155;
    goto LABEL_60;
  }

  __break(1u);
LABEL_51:

LABEL_60:
  v67((char *)v107, v57);
  sub_1001376A4((uint64_t)&v163, (uint64_t)v160);
  swift_errorRetain(v12);
  uint64_t v121 = swift_errorRetain(v12);
  uint64_t v122 = (os_log_s *)Logger.logObject.getter(v121);
  os_log_type_t v123 = static os_log_type_t.error.getter(v122);
  if (os_log_type_enabled(v122, v123))
  {
    uint64_t v124 = swift_slowAlloc(22LL, -1LL);
    uint64_t v125 = swift_slowAlloc(64LL, -1LL);
    uint64_t v159 = v125;
    *(_DWORD *)uint64_t v124 = 136315394;
    uint64_t v126 = v161;
    uint64_t v127 = v162;
    sub_1001361FC(v160, v161);
    uint64_t v128 = (*(uint64_t (**)(uint64_t, uint64_t))(v127 + 8))(v126, v127);
    uint64_t v129 = StaticString.description.getter(v128);
    unint64_t v131 = v130;
    uint64_t v157 = sub_100178E7C(v129, v130, &v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158, v124 + 4, v124 + 12);
    swift_bridgeObjectRelease(v131);
    sub_100136648(v160);
    *(_WORD *)(v124 + 12) = 2080;
    uint64_t v157 = (uint64_t)v12;
    swift_errorRetain(v12);
    uint64_t v132 = sub_100126450(&qword_1002B6290);
    uint64_t v133 = String.init<A>(describing:)(&v157, v132);
    unint64_t v135 = v134;
    uint64_t v157 = sub_100178E7C(v133, v134, &v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158, v124 + 14, v124 + 22);
    swift_bridgeObjectRelease(v135);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    _os_log_impl( (void *)&_mh_execute_header,  v122,  v123,  "[%s] Failed migration. Ending migrator with error: %s",  (uint8_t *)v124,  0x16u);
    swift_arrayDestroy(v125, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v125, -1LL, -1LL);
    swift_slowDealloc(v124, -1LL, -1LL);
    swift_release(v66);

    swift_errorRelease(v12);
  }

  else
  {
    swift_release(v66);
    swift_errorRelease(v12);
    sub_100136648(v160);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
  }

  return sub_100136648(&v163);
}

uint64_t type metadata accessor for DataMigrator()
{
  return objc_opt_self(&OBJC_CLASS___MTDataMigrator);
}

uint64_t sub_100160C40(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t *sub_100160C58(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t RunOnceMigrationStep.migrationKey.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)(a2 + 8) + 8LL))();
  return StaticString.description.getter(v2);
}

id RunOnceMigrationStep.userDefaults.getter()
{
  return [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
}

uint64_t RunOnceMigrationStep.requiresMigration.getter(uint64_t a1, uint64_t a2)
{
  id v4 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v6 = v5;
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  LODWORD(v6) = [v4 BOOLForKey:v7];

  return v6 ^ 1;
}

void sub_100160D74(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = StaticString.description.getter(a1);
  uint64_t v12 = v11;
  uint64_t v50 = v10;
  uint64_t v51 = v11;
  swift_bridgeObjectRetain(v11);
  v13._uint64_t countAndFlagsBits = 0x726F7272652ELL;
  v13._object = (void *)0xE600000000000000LL;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v12);
  uint64_t v14 = v51;
  sub_100162504();
  if (v3)
  {
    uint64_t v48 = v6;
    char v49 = v9;
    uint64_t v47 = v7;
    uint64_t v15 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
    id v16 = [v15 standardUserDefaults];
    StaticString.description.getter(a1);
    uint64_t v18 = v17;
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v18);
    [v16 setBool:0 forKey:v19];

    id v20 = [v15 standardUserDefaults];
    uint64_t v50 = v3;
    swift_errorRetain();
    uint64_t v21 = sub_100126450(&qword_1002B6290);
    String.init<A>(describing:)(&v50, v21);
    uint64_t v23 = v22;
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v23);
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
    [v20 setObject:v24 forKey:v25];

    if ((a3 & 0x100) != 0)
    {
      uint64_t v34 = v49;
      static Logger.database.getter(v26);
      swift_errorRetain();
      uint64_t v35 = swift_errorRetain();
      os_log_type_t v36 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v37 = static os_log_type_t.error.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = swift_slowAlloc(22LL, -1LL);
        uint64_t v39 = swift_slowAlloc(64LL, -1LL);
        uint64_t v50 = v39;
        *(_DWORD *)uint64_t v38 = 136315394;
        uint64_t v40 = _typeName(_:qualified:)(&type metadata for UberArtworkResetMigrator, 0LL);
        unint64_t v42 = v41;
        uint64_t v52 = sub_100178E7C(v40, v41, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v38 + 4, v38 + 12);
        swift_bridgeObjectRelease(v42);
        *(_WORD *)(v38 + 12) = 2080;
        uint64_t v52 = v3;
        swift_errorRetain();
        uint64_t v43 = String.init<A>(describing:)(&v52, v21);
        unint64_t v45 = v44;
        uint64_t v52 = sub_100178E7C(v43, v44, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v38 + 14, v38 + 22);
        swift_bridgeObjectRelease(v45);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "Failed migration step silently: %s: %s.",  (uint8_t *)v38,  0x16u);
        swift_arrayDestroy(v39, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1LL, -1LL);
        swift_slowDealloc(v38, -1LL, -1LL);

        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v48);
      }

      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();

        (*(void (**)(char *, uint64_t))(v47 + 8))(v34, v48);
      }
    }

    else
    {
      swift_willThrow(v26);
    }
  }

  else
  {
    uint64_t v27 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
    id v28 = [v27 standardUserDefaults];
    StaticString.description.getter(a1);
    uint64_t v30 = v29;
    NSString v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v30);
    [v28 setBool:1 forKey:v31];

    id v32 = [v27 standardUserDefaults];
    NSString v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
    [v32 removeObjectForKey:v33];
  }

void sub_1001611EC(uint64_t a1)
{
  uint64_t v2 = StaticString.description.getter(a1);
  uint64_t v4 = v3;
  id v20 = (void **)v2;
  uint64_t v21 = v3;
  swift_bridgeObjectRetain(v3);
  v5._uint64_t countAndFlagsBits = 0x726F7272652ELL;
  v5._object = (void *)0xE600000000000000LL;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  uint64_t v6 = v21;
  id v7 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance", v20);
  id v8 = [v7 privateQueueContext];

  uint64_t v9 = swift_allocObject(&unk_100247E08, 24LL, 7LL);
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  NSString v24 = sub_100161A58;
  uint64_t v25 = v9;
  id v20 = _NSConcreteStackBlock;
  uint64_t v21 = 1107296256LL;
  uint64_t v22 = sub_10013D2D8;
  uint64_t v23 = &unk_100247E20;
  uint64_t v10 = _Block_copy(&v20);
  uint64_t v11 = v25;
  id v12 = v8;
  swift_release(v11);
  [v12 performBlockAndWaitWithSave:v10];
  _Block_release(v10);

  Swift::String v13 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  id v14 = [v13 standardUserDefaults];
  StaticString.description.getter(a1);
  uint64_t v16 = v15;
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  [v14 setBool:1 forKey:v17];

  id v18 = [v13 standardUserDefaults];
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  [v18 removeObjectForKey:v19];
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> RunOnceMigrationStep.performMigration()()
{
  uint64_t v4 = v2;
  uint64_t v5 = v1;
  uint64_t v6 = v0;
  uint64_t v59 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v57 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v58 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  uint64_t v12 = v11(v6, v5);
  uint64_t v14 = v13;
  uint64_t v61 = v12;
  uint64_t v62 = v13;
  swift_bridgeObjectRetain(v13);
  v15._uint64_t countAndFlagsBits = 0x726F7272652ELL;
  v15._object = (void *)0xE600000000000000LL;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  uint64_t v16 = v62;
  uint64_t v60 = v61;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v6, v5);
  if (v3)
  {
    uint64_t v55 = v9;
    uint64_t v56 = v8;
    NSString v17 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
    id v18 = [v17 standardUserDefaults];
    v11(v6, v5);
    uint64_t v20 = v19;
    uint64_t v21 = v16;
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    [v18 setBool:0 forKey:v22];

    id v23 = [v17 standardUserDefaults];
    uint64_t v61 = v3;
    swift_errorRetain();
    uint64_t v24 = sub_100126450(&qword_1002B6290);
    String.init<A>(describing:)(&v61, v24);
    uint64_t v26 = v25;
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v26);
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v21);
    [v23 setObject:v27 forKey:v28];

    uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v6, v5);
    if ((v29 & 1) != 0)
    {
      uint64_t v60 = v24;
      uint64_t v30 = v58;
      static Logger.database.getter(v29);
      uint64_t v31 = v59;
      id v32 = v57;
      (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v57, v4, v6);
      swift_errorRetain();
      uint64_t v33 = swift_errorRetain();
      uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
      os_log_type_t v35 = static os_log_type_t.error.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = swift_slowAlloc(22LL, -1LL);
        uint64_t v54 = swift_slowAlloc(64LL, -1LL);
        uint64_t v61 = v54;
        *(_DWORD *)uint64_t v36 = 136315394;
        uint64_t DynamicType = swift_getDynamicType(v32, v6, 0LL);
        uint64_t v38 = _typeName(_:qualified:)(DynamicType, 0LL);
        unint64_t v40 = v39;
        uint64_t v63 = sub_100178E7C(v38, v39, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v36 + 4, v36 + 12);
        swift_bridgeObjectRelease(v40);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v32, v6);
        *(_WORD *)(v36 + 12) = 2080;
        uint64_t v63 = v3;
        swift_errorRetain();
        uint64_t v41 = String.init<A>(describing:)(&v63, v60);
        unint64_t v43 = v42;
        uint64_t v63 = sub_100178E7C(v41, v42, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v36 + 14, v36 + 22);
        swift_bridgeObjectRelease(v43);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "Failed migration step silently: %s: %s.",  (uint8_t *)v36,  0x16u);
        uint64_t v44 = v54;
        swift_arrayDestroy(v54, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1LL, -1LL);
        swift_slowDealloc(v36, -1LL, -1LL);

        swift_errorRelease();
      }

      else
      {
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v6);
        swift_errorRelease();
        swift_errorRelease();
      }

      (*(void (**)(char *, uint64_t))(v55 + 8))(v30, v56);
    }

    else
    {
      swift_willThrow(v29);
    }
  }

  else
  {
    unint64_t v45 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
    id v46 = [v45 standardUserDefaults];
    v11(v6, v5);
    uint64_t v48 = v47;
    NSString v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v48);
    [v46 setBool:1 forKey:v49];

    id v50 = [v45 standardUserDefaults];
    uint64_t v51 = v16;
    NSString v52 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v51);
    [v50 removeObjectForKey:v52];
  }

uint64_t sub_100161924()
{
  return StaticString.description.getter(*v0);
}

uint64_t sub_100161934(uint64_t a1, uint64_t a2)
{
  return sub_100161A00(a1, a2, (uint64_t (*)(void, void, void))sub_100160D74);
}

uint64_t sub_100161950()
{
  uint64_t v1 = *v0;
  id v2 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  StaticString.description.getter(v1);
  uint64_t v4 = v3;
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  LODWORD(v4) = [v2 BOOLForKey:v5];

  return v4 ^ 1;
}

uint64_t sub_1001619E4(uint64_t a1, uint64_t a2)
{
  return sub_100161A00(a1, a2, (uint64_t (*)(void, void, void))sub_1001611EC);
}

uint64_t sub_100161A00(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void))
{
  if (*(_BYTE *)(v3 + 17)) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  return a3(*(void *)v3, *(void *)(v3 + 8), v4 | *(unsigned __int8 *)(v3 + 16));
}

uint64_t sub_100161A34()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100161A58()
{
  return sub_10016EF90(*(void **)(v0 + 16));
}

uint64_t sub_100161A60(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100161A70(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void *sub_100161A7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  int64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    sub_1001366B0(0, v4, 0);
    uint64_t v7 = *(void *)(a3(0LL) - 8);
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v9 = *(void *)(v7 + 72);
    do
    {
      uint64_t v10 = a4();
      uint64_t v12 = v11;
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_1001366B0(v13 > 1, v14 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      Swift::String v15 = &_swiftEmptyArrayStorage[2 * v14];
      void v15[4] = v10;
      void v15[5] = v12;
      v8 += v9;
      --v4;
    }

    while (v4);
  }

  return _swiftEmptyArrayStorage;
}

uint64_t EntitledFirstTimeAvailableMigrator.failSilently.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a3 >> 8) & 1;
}

uint64_t EntitledFirstTimeAvailableMigrator.failSilently.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 17) = result;
  return result;
}

uint64_t (*EntitledFirstTimeAvailableMigrator.failSilently.modify())()
{
  return EntitledFirstTimeAvailableMigrator.stepIdentifier.getter;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UberArtworkResetMigrator.performMigrationStep()()
{
}

void sub_100161BB4(uint64_t *a1)
{
  os_log_type_t v37 = a1;
  sub_100126450(&qword_1002B62A0);
  __chkstk_darwin();
  uint64_t v2 = (char *)v35 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100126450(&qword_1002B62A8);
  __chkstk_darwin();
  int64_t v4 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for ArtworkRequest(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  unint64_t v39 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v9 = (char *)v35 - v8;
  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPodcastEntityName);
  uint64_t v11 = v10;
  id v12 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  id v14 = [v12 initWithEntityName:v13];

  unint64_t v15 = sub_100149628();
  uint64_t v16 = v42;
  uint64_t v17 = NSManagedObjectContext.fetch<A>(_:)(v14, v15);
  if (v16)
  {

    return;
  }

  id v36 = v14;
  uint64_t v38 = v9;
  uint64_t v42 = v17;
  if ((unint64_t)v17 >> 62)
  {
    if (v17 < 0) {
      uint64_t v34 = v17;
    }
    else {
      uint64_t v34 = v17 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v17);
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter(v34);
  }

  else
  {
    uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v17);
  }

  uint64_t v19 = v37;
  uint64_t v20 = v39;
  if (!v18)
  {

    uint64_t v32 = v42;
    swift_bridgeObjectRelease(v42);
    NSString v22 = _swiftEmptyArrayStorage;
LABEL_24:
    swift_bridgeObjectRelease(v32);
    uint64_t v33 = *v19;
    *uint64_t v19 = (uint64_t)v22;
    swift_bridgeObjectRelease(v33);
    return;
  }

  if (v18 >= 1)
  {
    v35[1] = 0LL;
    uint64_t v21 = 0LL;
    unint64_t v40 = v42 & 0xC000000000000001LL;
    NSString v22 = _swiftEmptyArrayStorage;
    uint64_t v41 = v18;
    do
    {
      if (v40) {
        id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v42);
      }
      else {
        id v23 = *(id *)(v42 + 8 * v21 + 32);
      }
      uint64_t v24 = v23;
      MTPodcast.uberBackgroundArtworkModel.getter();
      uint64_t v25 = type metadata accessor for ArtworkModel(0LL);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48LL))(v2, 1LL, v25) == 1)
      {
        sub_10012A4A0((uint64_t)v2, &qword_1002B62A0);
        uint64_t v26 = 1LL;
      }

      else
      {
        ArtworkModel.preferredRequest.getter();
        sub_100162CC0((uint64_t)v2);
        uint64_t v26 = 0LL;
      }

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v26, 1LL, v5);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
      {
        sub_10012A4A0((uint64_t)v4, &qword_1002B62A8);
      }

      else
      {
        NSString v27 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
        NSString v28 = v38;
        v27(v38, v4, v5);
        v27(v20, v28, v5);
        if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0) {
          NSString v22 = (void *)sub_1001329B8(0, v22[2] + 1LL, 1, (unint64_t)v22);
        }
        unint64_t v30 = v22[2];
        unint64_t v29 = v22[3];
        if (v30 >= v29 >> 1) {
          NSString v22 = (void *)sub_1001329B8(v29 > 1, v30 + 1, 1, (unint64_t)v22);
        }
        _OWORD v22[2] = v30 + 1;
        unint64_t v31 = (unint64_t)v22
        uint64_t v20 = v39;
        v27((char *)v31, v39, v5);
      }

      ++v21;
    }

    while (v41 != v21);

    uint64_t v32 = v42;
    swift_bridgeObjectRelease(v42);
    uint64_t v19 = v37;
    goto LABEL_24;
  }

  __break(1u);
}

id sub_100161FB4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v4 = [(id)objc_opt_self(NSFileManager) defaultManager];
  NSString v5 = String._bridgeToObjectiveC()();
  id v27 = 0LL;
  unsigned int v6 = [v4 removeItemAtPath:v5 error:&v27];

  id v7 = v27;
  if (v6) {
    return v27;
  }
  id v9 = v27;
  uint64_t v10 = _convertNSErrorToError(_:)(v7);

  uint64_t v12 = swift_willThrow(v11);
  static Logger.artwork.getter(v12);
  swift_errorRetain();
  uint64_t v13 = swift_errorRetain();
  id v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.error.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v17 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v25 = v0;
    uint64_t v26 = v10;
    uint64_t v18 = v17;
    id v27 = v17;
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v24 = v16 + 4;
    swift_errorRetain();
    uint64_t v19 = sub_100126450(&qword_1002B6290);
    uint64_t v20 = String.init<A>(describing:)(&v26, v19);
    unint64_t v22 = v21;
    uint64_t v26 = sub_100178E7C(v20, v21, (uint64_t *)&v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v24, v16 + 12);
    swift_bridgeObjectRelease(v22);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to remove uber artwork: %s", v16, 0xCu);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);

    swift_errorRelease();
    return (id)(*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v25);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    return (id)(*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }

uint64_t sub_100162290()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t sub_100162298()
{
  return *(void *)v0;
}

uint64_t sub_1001622A4(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = a2;
    unint64_t v4 = 0LL;
    uint64_t v33 = result + 32;
    uint64_t v36 = a2 + 56;
    uint64_t v32 = _swiftEmptyArrayStorage;
    unint64_t v34 = *(void *)(result + 16);
    while (1)
    {
      uint64_t v5 = v4 <= v2 ? v2 : v4;
      uint64_t v35 = v5;
      while (1)
      {
        if (v4 == v35)
        {
          __break(1u);
          return result;
        }

        unsigned int v6 = (uint64_t *)(v33 + 16 * v4);
        uint64_t v7 = *v6;
        uint64_t v8 = v6[1];
        ++v4;
        __n128 v9 = swift_bridgeObjectRetain(v8);
        uint64_t v10 = static ArtworkRequest.comparablePrefix(from:)(v7, v8, v9);
        uint64_t v12 = v11;
        uint64_t v13 = v3;
        if (*(void *)(v3 + 16))
        {
          uint64_t v14 = v10;
          Hasher.init(_seed:)(v37, *(void *)(v3 + 40));
          String.hash(into:)(v37, v14, v12);
          Swift::Int v15 = Hasher._finalize()();
          uint64_t v16 = -1LL << *(_BYTE *)(v3 + 32);
          unint64_t v17 = v15 & ~v16;
          if (((*(void *)(v36 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) != 0) {
            break;
          }
        }

uint64_t sub_100162504()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v66 = *(void *)(v0 - 8);
  uint64_t v67 = v0;
  __chkstk_darwin();
  uint64_t v65 = (char *)&v63 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = sub_100126450(&qword_1002B4C68);
  uint64_t v68 = *(char **)(v2 - 8);
  __chkstk_darwin();
  unint64_t v4 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100126450(&qword_1002B4C70);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for AssetCaches(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v70 = type metadata accessor for URL(0LL);
  uint64_t v72 = *(void *)(v70 - 8);
  __chkstk_darwin();
  uint64_t v64 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v71 = (char *)&v63 - v14;
  uint64_t v15 = __chkstk_darwin();
  unint64_t v17 = (char *)&v63 - v16;
  uint64_t v18 = static AssetCaches.shared.getter(v15);
  AssetCaches.artwork.getter(v18);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  CacheDomain.disk.getter(v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  CacheDomain.DiskCaches.directory.getter(v2);
  (*((void (**)(char *, uint64_t))v68 + 1))(v4, v2);
  uint64_t v19 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v20 = [v19 defaultManager];
  v21._uint64_t countAndFlagsBits = URL.path.getter(v20);
  object = v21._object;
  LOBYTE(v12) = NSFileManager.fileExists(at:isDirectory:)(v21, 1);

  uint64_t v23 = swift_bridgeObjectRelease(object);
  if ((v12 & 1) != 0)
  {
    id v24 = [(id)objc_opt_self(MTDB) sharedInstance];
    id v25 = [v24 privateQueueContext];

    uint64_t v26 = _swiftEmptyArrayStorage;
    uint64_t v76 = _swiftEmptyArrayStorage;
    __chkstk_darwin();
    *(&v63 - 2) = (uint64_t)&v76;
    *(&v63 - 1) = (uint64_t)v25;
    BOOL v27 = v69;
    NSManagedObjectContext.performAndWait<A>(_:)(sub_100162CA8);
    if (v27)
    {
      (*(void (**)(char *, uint64_t))(v72 + 8))(v17, v70);
    }

    else
    {
      unint64_t v34 = v76;
      swift_bridgeObjectRetain(v76);
      uint64_t v36 = sub_100161A7C( v35,  (uint64_t)v75,  (uint64_t (*)(void))&type metadata accessor for ArtworkRequest,  (uint64_t (*)(void))&ArtworkRequest.stableFilePrefix.getter);
      uint64_t v69 = 0LL;
      swift_bridgeObjectRelease(v34);
      uint64_t v37 = sub_10017ABDC((uint64_t)v36);
      swift_bridgeObjectRelease(v36);
      id v38 = [v19 defaultManager];
      URL.path.getter(v38);
      uint64_t v40 = v39;
      NSString v41 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v40);
      v73[0] = 0LL;
      id v42 = [v38 subpathsOfDirectoryAtPath:v41 error:v73];

      id v43 = v73[0];
      uint64_t v44 = v70;
      if (v42)
      {
        uint64_t v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v42, &type metadata for String);
        id v46 = v43;

        uint64_t v47 = v69;
        uint64_t v48 = sub_1001622A4(v45, v37);
        swift_bridgeObjectRelease(v45);
        swift_bridgeObjectRelease(v37);
        (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v71, v17, v44);
        int64_t v49 = *(void *)(v48 + 16);
        if (v49)
        {
          uint64_t v68 = v47;
          uint64_t v69 = v17;
          v73[0] = _swiftEmptyArrayStorage;
          sub_1001366CC(0, v49, 0);
          uint64_t v26 = v73[0];
          uint64_t v67 = v48;
          id v50 = (void *)(v48 + 40);
          uint64_t v51 = v64;
          do
          {
            uint64_t v53 = *(v50 - 1);
            uint64_t v52 = *v50;
            swift_bridgeObjectRetain(*v50);
            URL.appendingPathComponent(_:)(v53, v52);
            swift_bridgeObjectRelease(v52);
            v73[0] = v26;
            unint64_t v55 = v26[2];
            unint64_t v54 = v26[3];
            if (v55 >= v54 >> 1)
            {
              sub_1001366CC(v54 > 1, v55 + 1, 1);
              uint64_t v26 = v73[0];
            }

            v50 += 2;
            void v26[2] = v55 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v72 + 32))( (unint64_t)v26 + ((*(unsigned __int8 *)(v72 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80))
            + *(void *)(v72 + 72) * v55,
              v51,
              v44);
            --v49;
          }

          while (v49);
          swift_bridgeObjectRelease(v67);
          unint64_t v17 = v69;
        }

        else
        {
          swift_bridgeObjectRelease(v48);
        }

        uint64_t v58 = *(void (**)(char *, uint64_t))(v72 + 8);
        v58(v71, v44);
        uint64_t v59 = sub_100161A7C( (uint64_t)v26,  (uint64_t)v74,  (uint64_t (*)(void))&type metadata accessor for URL,  (uint64_t (*)(void))&URL.path.getter);
        swift_bridgeObjectRelease(v26);
        uint64_t v60 = v59[2];
        if (v60)
        {
          swift_bridgeObjectRetain(v59);
          uint64_t v61 = (void **)(v59 + 5);
          do
          {
            uint64_t v62 = *v61;
            v73[0] = *(v61 - 1);
            v73[1] = v62;
            sub_100161FB4();
            v61 += 2;
            --v60;
          }

          while (v60);

          swift_bridgeObjectRelease_n(v59, 2LL);
        }

        else
        {
          swift_bridgeObjectRelease(v59);
        }

        v58(v17, v44);
      }

      else
      {
        id v56 = v73[0];
        swift_bridgeObjectRelease(v37);
        _convertNSErrorToError(_:)(v43);

        swift_willThrow(v57);
        (*(void (**)(char *, uint64_t))(v72 + 8))(v17, v44);
      }
    }

    return swift_bridgeObjectRelease(v76);
  }

  else
  {
    NSString v28 = v65;
    uint64_t v29 = static Logger.artwork.getter(v23);
    unint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.info.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "Uber migration unnecessary, artwork cache never created",  v32,  2u);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v66 + 8))(v28, v67);
    return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v17, v70);
  }

__n128 initializeBufferWithCopyOfBuffer for UberArtworkResetMigrator(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for UberArtworkResetMigrator(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 17);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UberArtworkResetMigrator( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 1_Block_object_dispose(va, 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 1_Block_object_dispose(va, 8) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 17) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for UberArtworkResetMigrator()
{
  return &type metadata for UberArtworkResetMigrator;
}

void sub_100162CA8()
{
}

uint64_t sub_100162CC0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ArtworkModel(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

id InterestSyncStorage.importContext.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC8Podcasts19InterestSyncStorage_importContext);
}

id InterestSyncStorage.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InterestSyncStorage();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for InterestSyncStorage()
{
  return objc_opt_self(&OBJC_CLASS____TtC8Podcasts19InterestSyncStorage);
}

id sub_100162E28()
{
  return *(id *)(*v0 + OBJC_IVAR____TtC8Podcasts19InterestSyncStorage_importContext);
}

uint64_t InterestSyncStorage.isInterestSyncDirty.getter()
{
  uint64_t v0 = type metadata accessor for SyncKeysRepository(0LL);
  uint64_t v1 = (void *)static SyncKeysRepository.shared.getter(v0);
  char v2 = SyncKeysRepository.isInterestSyncDirty.getter();

  return v2 & 1;
}

void InterestSyncStorage.isInterestSyncDirty.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SyncKeysRepository(0LL);
  id v3 = (id)static SyncKeysRepository.shared.getter(v2);
  SyncKeysRepository.isInterestSyncDirty.setter(a1);
}

void (*InterestSyncStorage.isInterestSyncDirty.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SyncKeysRepository(0LL);
  *(void *)a1 = v2;
  id v3 = (void *)static SyncKeysRepository.shared.getter(v2);
  char v4 = SyncKeysRepository.isInterestSyncDirty.getter();

  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v4 & 1;
  return sub_100162F20;
}

void sub_100162F20(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  id v2 = (id)static SyncKeysRepository.shared.getter(a1);
  SyncKeysRepository.isInterestSyncDirty.setter(v1);
}

uint64_t InterestSyncStorage.interestLastSyncTimestamp.getter()
{
  uint64_t v0 = type metadata accessor for SyncKeysRepository(0LL);
  uint64_t v1 = (void *)static SyncKeysRepository.shared.getter(v0);
  uint64_t Sync = SyncKeysRepository.interestLastSyncTimestamp.getter();

  return Sync;
}

void InterestSyncStorage.interestLastSyncTimestamp.setter(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for SyncKeysRepository(0LL);
  id v6 = (id)static SyncKeysRepository.shared.getter(v4);
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = a1;
  }
  SyncKeysRepository.interestLastSyncTimestamp.setter(v5, 0LL);
}

void (*sub_100163010(void *a1))(void *)
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = InterestSyncStorage.interestLastSyncTimestamp.modify((uint64_t)v2);
  return sub_100134BD8;
}

void (*InterestSyncStorage.interestLastSyncTimestamp.modify(uint64_t a1))(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for SyncKeysRepository(0LL);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  id v3 = (void *)static SyncKeysRepository.shared.getter(v2);
  uint64_t Sync = SyncKeysRepository.interestLastSyncTimestamp.getter();
  char v6 = v5;

  *(void *)a1 = Sync;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v6 & 1;
  return sub_1001630B0;
}

void sub_1001630B0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int v2 = *((unsigned __int8 *)a1 + 8);
  id v4 = (id)static SyncKeysRepository.shared.getter(a1);
  if (v2) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = v1;
  }
  SyncKeysRepository.interestLastSyncTimestamp.setter(v3, 0LL);
}

uint64_t sub_100163108(uint64_t a1, uint64_t a2)
{
  return sub_100134D78(a1, a2, (uint64_t (*)(void))&SyncKeysRepository.interestSyncVersion.getter);
}

uint64_t InterestSyncStorage.syncVersion.getter()
{
  return sub_100134DD4((uint64_t (*)(void))&SyncKeysRepository.interestSyncVersion.getter);
}

void sub_100163120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void InterestSyncStorage.syncVersion.setter(uint64_t a1, uint64_t a2)
{
}

void (*sub_100163138(uint64_t **a1))(void *)
{
  int v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = (uint64_t)InterestSyncStorage.syncVersion.modify(v2);
  return sub_100134BD8;
}

void (*InterestSyncStorage.syncVersion.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v2 = type metadata accessor for SyncKeysRepository(0LL);
  a1[2] = v2;
  uint64_t v3 = (void *)static SyncKeysRepository.shared.getter(v2);
  uint64_t v4 = SyncKeysRepository.interestSyncVersion.getter();
  uint64_t v6 = v5;

  *a1 = v4;
  a1[1] = v6;
  return sub_1001631D0;
}

void sub_1001631D0(uint64_t *a1, char a2)
{
}

void sub_1001631DC()
{
}

void InterestSyncStorage.fetchAllInterests()()
{
  uint64_t v115 = (char *)&v108 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v108 - v2;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v122 = v4;
  uint64_t v123 = v5;
  __chkstk_darwin();
  uint64_t v114 = (char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin();
  uint64_t v116 = (char *)&v108 - v8;
  kMTInterestEntityName.getter(v7);
  uint64_t v10 = v9;
  id v11 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  id v13 = [v11 initWithEntityName:v12];

  id v14 = [(id)objc_opt_self(NSPredicate) truePredicate];
  [v13 setPredicate:v14];

  uint64_t v15 = sub_100126450(&qword_1002B5038);
  uint64_t v16 = swift_allocObject(v15, 160LL, 7LL);
  *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C10;
  uint64_t v17 = kInterestAdamID.getter();
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 32) = v17;
  *(void *)(v16 + 40) = v18;
  uint64_t v19 = kInterestInterestValue.getter();
  *(void *)(v16 + 8_Block_object_dispose(va, 8) = &type metadata for String;
  *(void *)(v16 + 64) = v19;
  *(void *)(v16 + 72) = v20;
  uint64_t Updated = kInterestLastUpdatedDate.getter(v19);
  *(void *)(v16 + 120) = &type metadata for String;
  *(void *)(v16 + 96) = Updated;
  *(void *)(v16 + 104) = v22;
  uint64_t v23 = kInterestUnknownSyncProperties.getter();
  *(void *)(v16 + 152) = &type metadata for String;
  *(void *)(v16 + 12_Block_object_dispose(va, 8) = v23;
  *(void *)(v16 + 136) = v24;
  uint64_t v117 = (char *)&type metadata for Any + 8;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v16);
  [v13 setPropertiesToFetch:isa];

  [v13 setResultType:2];
  uint64_t v125 = v0;
  id v126 = v13;
  id v109 = v13;
  uint64_t v26 = sub_100126450(&qword_1002B4FF0);
  NSManagedObjectContext.performAndWait<A>(_:)(v129, sub_100163EE8, v124, v26);
  uint64_t v27 = v129[0];
  int64_t v28 = *(void *)(v129[0] + 16LL);
  if (!v28)
  {
    swift_bridgeObjectRelease(v129[0]);
    uint64_t v63 = _swiftEmptyArrayStorage;
    int64_t v67 = _swiftEmptyArrayStorage[2];
    if (!v67) {
      goto LABEL_72;
    }
    goto LABEL_37;
  }

  unint64_t v130 = _swiftEmptyArrayStorage;
  sub_1001365EC(0, v28, 0);
  uint64_t v112 = sub_100126450(&qword_1002B4FF8);
  uint64_t v29 = 0LL;
  uint64_t v108 = v27;
  uint64_t v111 = (char *)(v27 + 32);
  uint64_t v110 = (void *)v28;
LABEL_3:
  uint64_t v30 = *(void *)&v111[8 * v29];
  uint64_t v113 = v29 + 1;
  uint64_t v31 = static _DictionaryStorage.copy(original:)(v30);
  uint64_t v32 = (void *)v31;
  uint64_t v33 = 1LL << *(_BYTE *)(v30 + 32);
  uint64_t v34 = *(void *)(v30 + 64);
  int64_t v118 = v30 + 64;
  if (v33 < 64) {
    uint64_t v35 = ~(-1LL << v33);
  }
  else {
    uint64_t v35 = -1LL;
  }
  unint64_t v36 = v35 & v34;
  os_signpost_id_t v119 = (char *)((unint64_t)(v33 + 63) >> 6);
  uint64_t v120 = v31 + 64;
  uint64_t v121 = v30;
  swift_bridgeObjectRetain(v30);
  uint64_t v37 = 0LL;
  uint64_t v38 = v122;
  uint64_t v39 = v117;
  if (v36)
  {
LABEL_7:
    unint64_t v40 = __clz(__rbit64(v36));
    v36 &= v36 - 1;
    unint64_t v41 = v40 | (v37 << 6);
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v42 = v37 + 1;
    if (__OFADD__(v37, 1LL))
    {
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }

    unint64_t v43 = *(void *)(v118 + 8 * v42);
    ++v37;
    if (!v43)
    {
      uint64_t v37 = v42 + 1;
      unint64_t v43 = *(void *)(v118 + 8 * v37);
      if (!v43)
      {
        uint64_t v37 = v42 + 2;
        unint64_t v43 = *(void *)(v118 + 8 * v37);
        if (!v43)
        {
          uint64_t v44 = v42 + 3;
          if (v44 < (uint64_t)v119)
          {
            unint64_t v43 = *(void *)(v118 + 8 * v44);
            if (v43)
            {
              uint64_t v37 = v44;
              goto LABEL_21;
            }

            while (1)
            {
              uint64_t v37 = v44 + 1;
              if (__OFADD__(v44, 1LL)) {
                break;
              }
              unint64_t v43 = *(void *)(v118 + 8 * v37);
              ++v44;
              if (v43) {
                goto LABEL_21;
              }
            }

LABEL_37:
            unint64_t v130 = _swiftEmptyArrayStorage;
            sub_1001365EC(0, v67, 0);
            uint64_t v113 = sub_100126450(&qword_1002B4FF8);
            uint64_t v68 = 0LL;
            uint64_t v110 = v63;
            uint64_t v112 = (uint64_t)(v63 + 4);
            os_signpost_id_t v119 = (char *)&type metadata for Any + 8;
            uint64_t v111 = (char *)v67;
            while (2)
            {
              uint64_t v69 = *(void *)(v112 + 8LL * (void)v68);
              uint64_t v116 = v68 + 1;
              uint64_t v70 = static _DictionaryStorage.copy(original:)(v69);
              uint64_t v71 = (void *)v70;
              uint64_t v72 = 1LL << *(_BYTE *)(v69 + 32);
              uint64_t v73 = *(void *)(v69 + 64);
              uint64_t v117 = (char *)(v69 + 64);
              if (v72 < 64) {
                uint64_t v74 = ~(-1LL << v72);
              }
              else {
                uint64_t v74 = -1LL;
              }
              unint64_t v75 = v74 & v73;
              int64_t v118 = (unint64_t)(v72 + 63) >> 6;
              uint64_t v120 = v70 + 64;
              uint64_t v121 = v69;
              swift_bridgeObjectRetain(v69);
              int64_t v76 = 0LL;
              uint64_t v77 = (uint64_t)v115;
              if (v75)
              {
LABEL_42:
                unint64_t v78 = __clz(__rbit64(v75));
                v75 &= v75 - 1;
                unint64_t v79 = v78 | (v76 << 6);
                goto LABEL_57;
              }

LABEL_80:
  swift_bridgeObjectRelease(v32);
}

uint64_t InterestSyncStorage.unsafeInterest(for:in:)(uint64_t a1)
{
  uint64_t v1 = AdamID.init(rawValue:)(a1 & ~(a1 >> 63));
  return NSManagedObjectContext.unsafeInterest(forAdamID:)(v1);
}

void static InterestSyncStorage.resetInterestSync()()
{
  uint64_t v0 = type metadata accessor for SyncKeysRepository(0LL);
  uint64_t v1 = (void *)static SyncKeysRepository.shared.getter(v0);
  SyncKeysRepository.interestLastSyncTimestamp.setter(0LL, 1LL);

  uint64_t v3 = (void *)static SyncKeysRepository.shared.getter(v2);
  SyncKeysRepository.interestSyncVersion.setter(0LL, 0LL);

  id v5 = (id)static SyncKeysRepository.shared.getter(v4);
  SyncKeysRepository.isInterestSyncDirty.setter(1LL);
}

uint64_t sub_100163E44@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = sub_100134284(0LL, (unint64_t *)&qword_1002B5A40, &OBJC_CLASS___NSDictionary_ptr);
  unint64_t v5 = NSManagedObjectContext.fetch<A>(_:)(a1, v4);
  uint64_t v6 = sub_100130790(v5);
  uint64_t result = swift_bridgeObjectRelease(v5);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v6) {
    uint64_t v8 = v6;
  }
  *a2 = v8;
  return result;
}

uint64_t sub_100163EE8@<X0>(void *a1@<X8>)
{
  return sub_100163E44(*(void *)(v1 + 24), a1);
}

void sub_100163EF0(void *a1, void *a2)
{
  uint64_t v4 = AdamID.init(rawValue:)([a1 adamID]);
  uint64_t v5 = NSManagedObjectContext.unsafeCategory(forAdamID:)(v4);
  if (v5)
  {
    id v6 = (id)v5;
    uint64_t v7 = &selRef_setCategory_;
LABEL_9:
    id v12 = v6;
    [a1 *v7];
    [v12 setInterest:a1];

    return;
  }

  unint64_t v8 = (unint64_t)[a1 adamID];
  if ((v8 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }

  id v9 = [a2 channelForStoreId:v8];
  if (v9)
  {
    id v6 = v9;
    uint64_t v7 = &selRef_setChannel_;
    goto LABEL_9;
  }

  unint64_t v10 = (unint64_t)[a1 adamID];
  if ((v10 & 0x8000000000000000LL) != 0) {
    goto LABEL_12;
  }
  id v11 = [a2 podcastForStoreId:v10];
  if (v11)
  {
    id v6 = v11;
    uint64_t v7 = &selRef_setPodcast_;
    goto LABEL_9;
  }

uint64_t _s8Podcasts19InterestSyncStorageC015unsafeInsertNewB03for2in0A10Foundation10MTInterestCSgAG06RemoteB0V_So22NSManagedObjectContextCtF_0( uint64_t a1, void (**a2)(char *, void))
{
  uint64_t v45 = a1;
  uint64_t v3 = type metadata accessor for RemoteInterest(0LL);
  uint64_t v44 = *(void *)(v3 - 8);
  __chkstk_darwin();
  unint64_t v43 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  id v6 = *(void (***)(char *, void))(v5 - 8);
  __chkstk_darwin();
  unint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v41 - 8);
  __chkstk_darwin();
  id v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v12 = (void *)objc_opt_self(&OBJC_CLASS___NSEntityDescription);
  kMTInterestEntityName.getter(v12);
  uint64_t v14 = v13;
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  uint64_t v42 = a2;
  id v16 = [v12 insertNewObjectForEntityForName:v15 inManagedObjectContext:a2];

  uint64_t v17 = type metadata accessor for MTInterest(0LL);
  uint64_t v18 = swift_dynamicCastClass(v16, v17);
  if (!v18)
  {
    uint64_t v42 = v6;
    uint64_t v28 = v5;

    static Logger.cloudSync.getter(v29);
    uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 16))(v43, v45, v3);
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.error.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v33 = 134217984;
      uint64_t v34 = v43;
      uint64_t v35 = RemoteInterest.adamID.getter();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v34, v3);
      uint64_t v46 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v33 + 4, v33 + 12);
      _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "Cannot create MTInterest for adamID: %lld. Unable to favorite interest.",  v33,  0xCu);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v3);
    }

    uint64_t v36 = v28;
    uint64_t v37 = v42;

    v37[1](v8, v36);
    return 0LL;
  }

  uint64_t v19 = (void *)v18;
  uint64_t v20 = RemoteInterest.adamID.getter();
  if ((v20 & 0x8000000000000000LL) == 0)
  {
    RemoteInterest.interestValue.getter([v19 setAdamID:v20]);
    static Date.now.getter(objc_msgSend(v19, "setInterestValue:"));
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v41);
    [v19 setLastUpdatedDate:isa];

    uint64_t v22 = RemoteInterest.unknownSyncProperties.getter();
    uint64_t v46 = v22;
    uint64_t v23 = sub_100126450((uint64_t *)&unk_1002B62E0);
    unint64_t v24 = sub_100164D40();
    LOBYTE(isa) = Collection.isNotEmpty.getter(v23, v24);
    swift_bridgeObjectRelease(v22);
    if ((isa & 1) != 0)
    {
      uint64_t v25 = RemoteSyncTypeWithUnknownSyncProperties.encodeUnknownSyncProperties()( v3,  &protocol witness table for RemoteInterest);
      if (v26 >> 60 == 15)
      {
        Class v27 = 0LL;
      }

      else
      {
        uint64_t v38 = v25;
        unint64_t v39 = v26;
        Class v27 = Data._bridgeToObjectiveC()().super.isa;
        sub_100133558(v38, v39);
      }

      [v19 setUnknownSyncProperties:v27];
    }

    else
    {
      [v19 setUnknownSyncProperties:0];
    }

    sub_100163EF0(v19, v42);
    return (uint64_t)v19;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  __break(1u);
  return result;
}

void _s8Podcasts19InterestSyncStorageC017unsafeUpdateLocalB8IfNeeded3for06remoteB02iny0A10Foundation10MTInterestC_AH06RemoteB0VSo22NSManagedObjectContextCtF_0( void *a1, uint64_t a2, void *a3)
{
  int64_t v67 = a3;
  uint64_t v5 = type metadata accessor for RemoteInterest(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  unint64_t v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v66 = (char *)&v59 - v9;
  __chkstk_darwin();
  uint64_t v64 = (char *)&v59 - v10;
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v68 = *(void *)(v11 - 8);
  uint64_t v69 = v11;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v65 = (char *)&v59 - v14;
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin();
  uint64_t v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(double *)&uint64_t v20 = COERCE_DOUBLE(RemoteInterest.interestValueUpdatedDate.getter(v17));
  if ((v21 & 1) != 0)
  {
    static Logger.cloudSync.getter(v20);
    uint64_t v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
    int64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
    os_log_type_t v50 = static os_log_type_t.error.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v51 = 134217984;
      *(double *)&uint64_t v52 = COERCE_DOUBLE(RemoteInterest.adamID.getter());
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      double v70 = *(double *)&v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v51 + 4, v51 + 12);
      _os_log_impl( (void *)&_mh_execute_header,  v49,  v50,  "[Interests] Remote interest doesn't have an interestValueUpdatedDate. We cannot determine which interestValue to use. Not syncing this interest: %lld",  v51,  0xCu);
      swift_slowDealloc(v51, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }

    uint64_t v54 = v68;
    uint64_t v53 = v69;

    (*(void (**)(char *, uint64_t))(v54 + 8))(v13, v53);
  }

  else
  {
    double v22 = *(double *)&v20;
    id v23 = [a1 lastUpdatedDate];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v23);

    double v25 = Date.timeIntervalSinceReferenceDate.getter(v24);
    unint64_t v26 = *(uint64_t (**)(char *, uint64_t))(v16 + 8);
    uint64_t v27 = v26(v19, v15);
    uint64_t v28 = a1;
    if (v25 < v22)
    {
      double v29 = RemoteInterest.interestValue.getter(v27);
      id v30 = [a1 interestValue];
      if (v29 != v31)
      {
        uint64_t v63 = v15;
        os_log_type_t v32 = v65;
        static Logger.cloudSync.getter(v30);
        uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
        uint64_t v34 = v64;
        v33(v64, a2, v5);
        v33(v66, a2, v5);
        id v62 = v28;
        uint64_t v35 = (os_log_s *)Logger.logObject.getter(v62);
        os_log_type_t v36 = static os_log_type_t.default.getter(v35);
        int v37 = v36;
        BOOL v38 = os_log_type_enabled(v35, v36);
        os_log_t v61 = v35;
        if (v38)
        {
          uint64_t v39 = swift_slowAlloc(32LL, -1LL);
          *(_DWORD *)uint64_t v39 = 134218496;
          int v60 = v37;
          *(double *)&uint64_t v40 = COERCE_DOUBLE(RemoteInterest.adamID.getter());
          uint64_t v59 = *(void (**)(char *, uint64_t))(v6 + 8);
          v59(v34, v5);
          double v70 = *(double *)&v40;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v39 + 4, v39 + 12);
          *(_WORD *)(v39 + 12) = 2048;
          id v41 = v62;
          [v62 interestValue];
          double v70 = v42;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v39 + 14, v39 + 22);

          *(_WORD *)(v39 + 22) = 2048;
          os_log_type_t v32 = v65;
          unint64_t v43 = v66;
          uint64_t v64 = (char *)(v39 + 24);
          double v70 = RemoteInterest.interestValue.getter(v44);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v64, v39 + 32);
          v59(v43, v5);
          os_log_t v45 = v61;
          _os_log_impl( (void *)&_mh_execute_header,  v61,  (os_log_type_t)v60,  "[Interests] Remote interestValue is more recent than the local version, and the value is different. Updating the interestValue for %lld from %f to %f",  (uint8_t *)v39,  0x20u);
          swift_slowDealloc(v39, -1LL, -1LL);
          uint64_t v47 = v68;
          uint64_t v46 = v69;
        }

        else
        {
          uint64_t v55 = *(void (**)(char *, uint64_t))(v6 + 8);
          v55(v34, v5);
          id v41 = v62;

          v55(v66, v5);
          uint64_t v47 = v68;
          uint64_t v46 = v69;
          os_log_t v45 = v61;
        }

        uint64_t v56 = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v32, v46);
        id v57 = [v41 setInterestValue:RemoteInterest.interestValue.getter(v56)];
        static Date.now.getter(v57);
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        v26(v19, v63);
        [v41 setLastUpdatedDate:isa];
      }
    }

    sub_100163EF0(v28, v67);
  }

id sub_100164938(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SyncKeysRepository(0LL);
  uint64_t v11 = (void *)static SyncKeysRepository.shared.getter(v10);
  double v12 = COERCE_DOUBLE(SyncKeysRepository.interestLastSyncTimestamp.getter());
  char v14 = v13;

  if ((v14 & 1) != 0)
  {
    uint64_t v24 = static Logger.cloudSync.getter();
    uint64_t v25 = static os_log_type_t.default.getter(v24);
    os_log_type_t v26 = v25;
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v28 = v26;
    if (os_log_type_enabled(v27, v26))
    {
      double v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)double v29 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "[NonFollowedShows] We never synced before, so there are no old Implicit Follows to clean up.",  v29,  2u);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return [(id)objc_opt_self(NSPredicate) falsePredicate];
  }

  else
  {
    uint64_t v15 = Date.init(timeIntervalSinceReferenceDate:)(v12);
    kInterestLastUpdatedDate.getter(v15);
    uint64_t v17 = v16;
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v20 = [(id)objc_opt_self(NSPredicate) predicateForDateKey:v18 isLessThanDate:isa];

    type metadata accessor for MTInterest(0LL);
    char v21 = (void *)static MTInterest.predicateForInterests(excludingAdamIDs:)(a1);
    id v22 = [v21 AND:v20];

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return v22;
  }

void *_s8Podcasts19InterestSyncStorageC039unsafeInterestsOnlyInLocalAndBeforeLastC016excludingAdamIDs2inSay0A10Foundation10MTInterestCGSgSays5Int64VG_So22NSManagedObjectContextCtF_0( uint64_t a1, void *a2)
{
  id v3 = sub_100164938(a1);
  kMTInterestEntityName.getter(v3);
  uint64_t v5 = v4;
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  id v7 = v3;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v9 = [a2 objectsInEntity:v6 predicate:v7 sortDescriptors:isa];

  if (v9)
  {
    uint64_t v10 = sub_100134284(0LL, (unint64_t *)&qword_1002B6720, &OBJC_CLASS___NSManagedObject_ptr);
    unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

    uint64_t v9 = sub_1001309E0(v11);
    swift_bridgeObjectRelease(v11);
  }

  return v9;
}

uint64_t _s8Podcasts19InterestSyncStorageC29unsafeRemoveInterestsIfNeeded3forySay0A10Foundation10MTInterestCG_tF_0( uint64_t a1)
{
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = swift_bridgeObjectRetain(a1);
    if (v2) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease(a1);
  }

  if (a1 < 0) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v7);
  uint64_t v2 = result;
  if (!result) {
    return swift_bridgeObjectRelease(a1);
  }
LABEL_3:
  if (v2 >= 1)
  {
    for (uint64_t i = 0LL; i != v2; ++i)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      }
      else {
        id v5 = *(id *)(a1 + 8 * i + 32);
      }
      NSString v6 = v5;
      [v5 setInterestValue:0.0];
    }

    return swift_bridgeObjectRelease(a1);
  }

  __break(1u);
  return result;
}

unint64_t sub_100164D40()
{
  unint64_t result = qword_1002B6740;
  if (!qword_1002B6740)
  {
    uint64_t v1 = sub_1001264DC((uint64_t *)&unk_1002B62E0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1002B6740);
  }

  return result;
}

char *sub_100164DC8(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone((Class)type metadata accessor for TVButtonHeaderView());
  uint64_t v10 = v4;
  id v11 = objc_msgSend(v9, "initWithFrame:", a1, a2, a3, a4);
  *(void *)&v10[OBJC_IVAR____TtC8Podcasts28TVButtonCollectionHeaderView_containedView] = v11;

  v16.receiver = v10;
  v16.super_class = (Class)type metadata accessor for TVButtonCollectionHeaderView();
  double v12 = (char *)objc_msgSendSuper2(&v16, "initWithFrame:", a1, a2, a3, a4);
  unint64_t result = (char *)[v12 contentView];
  if (result)
  {
    char v14 = result;
    id v15 = *(id *)&v12[OBJC_IVAR____TtC8Podcasts28TVButtonCollectionHeaderView_containedView];
    [v14 addSubview:v15];

    return v12;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_1001650F4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TVButtonCollectionHeaderView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TVButtonCollectionHeaderView()
{
  return objc_opt_self(&OBJC_CLASS____TtC8Podcasts28TVButtonCollectionHeaderView);
}

uint64_t type metadata accessor for SimplifiedPodcastsStateTransitionsFinder()
{
  return objc_opt_self(&OBJC_CLASS____TtC8Podcasts40SimplifiedPodcastsStateTransitionsFinder);
}

uint64_t sub_100165174(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5)
{
  return sub_100165B38(a1, a2, a3, a4, a5);
}

uint64_t sub_100165194(uint64_t a1, char a2, __int16 a3)
{
  switch(a2)
  {
    case 0:
      uint64_t v5 = sub_100126450((uint64_t *)&unk_1002B5C38);
      if ((a3 & 0x100) != 0)
      {
        uint64_t v10 = swift_allocObject(v5, 48LL, 7LL);
        uint64_t result = 0LL;
        *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
        *(void *)(v10 + 32) = a1;
        *(_BYTE *)(v10 + 40) = 0;
      }

      else
      {
        uint64_t v6 = swift_allocObject(v5, 64LL, 7LL);
        uint64_t result = 0LL;
        *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4150;
        *(void *)(v6 + 32) = a1;
        *(_BYTE *)(v6 + 40) = 0;
        *(void *)(v6 + 4_Block_object_dispose(va, 8) = 0LL;
        *(_BYTE *)(v6 + 56) = 2;
      }

      return result;
    case 2:
      uint64_t v8 = sub_100126450((uint64_t *)&unk_1002B5C38);
      goto LABEL_6;
    case 3:
      uint64_t v8 = sub_100126450((uint64_t *)&unk_1002B5C38);
      if ((a3 & 1) != 0)
      {
        if ((a3 & 0x100) != 0)
        {
          uint64_t v12 = swift_allocObject(v8, 48LL, 7LL);
          *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
          *(void *)(v12 + 32) = a1;
          *(_BYTE *)(v12 + 40) = 1;
LABEL_16:
          uint64_t result = 3LL;
        }

        else
        {
          uint64_t v11 = swift_allocObject(v8, 64LL, 7LL);
          *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4150;
          *(void *)(v11 + 32) = 1LL;
          uint64_t result = 2LL;
          *(_BYTE *)(v11 + 40) = 2;
          *(void *)(v11 + 4_Block_object_dispose(va, 8) = a1;
          *(_BYTE *)(v11 + 56) = 1;
        }
      }

      else
      {
LABEL_6:
        uint64_t v9 = swift_allocObject(v8, 48LL, 7LL);
        *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
        *(void *)(v9 + 32) = a1;
        uint64_t result = 1LL;
        *(_BYTE *)(v9 + 40) = 1;
      }

      break;
    case 4:
      uint64_t result = 2LL;
      switch(a1)
      {
        case 1LL:
          if ((a3 & 1) == 0) {
            goto LABEL_18;
          }
          if ((a3 & 0x100) == 0) {
            return result;
          }
          goto LABEL_16;
        case 2LL:
          if ((a3 & 1) == 0) {
            goto LABEL_18;
          }
          if ((a3 & 0x100) != 0) {
            goto LABEL_16;
          }
          return result;
        case 5LL:
        case 6LL:
          if ((a3 & 0x100) == 0) {
            goto LABEL_18;
          }
          return 1LL;
        case 9LL:
          return result;
        default:
          goto LABEL_18;
      }

    default:
LABEL_18:
      uint64_t result = 1LL;
      break;
  }

  return result;
}

uint64_t sub_100165398(uint64_t a1, char a2, char a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin();
  uint64_t v12 = (char *)&v27 - v11;
  if (!a2)
  {
    uint64_t v14 = sub_100126450((uint64_t *)&unk_1002B5C38);
    uint64_t v15 = swift_allocObject(v14, 80LL, 7LL);
    uint64_t result = 0LL;
    *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4160;
    *(void *)(v15 + 32) = 0LL;
    *(_BYTE *)(v15 + 40) = 2;
    *(void *)(v15 + 4_Block_object_dispose(va, 8) = a1;
    *(_BYTE *)(v15 + 56) = 0;
LABEL_13:
    *(void *)(v15 + 64) = 4LL;
    *(_BYTE *)(v15 + 72) = 2;
    return result;
  }

  if (a2 == 2)
  {
    if ((a3 & 1) == 0)
    {
      uint64_t v16 = sub_100126450((uint64_t *)&unk_1002B5C38);
      uint64_t v17 = swift_allocObject(v16, 64LL, 7LL);
      *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4150;
      *(void *)(v17 + 32) = a1;
      uint64_t result = 1LL;
      *(_BYTE *)(v17 + 40) = 1;
      *(void *)(v17 + 4_Block_object_dispose(va, 8) = 4LL;
      *(_BYTE *)(v17 + 56) = 2;
      return result;
    }

    uint64_t v18 = static Logger.podcastsStatesCoordination.getter(v10);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      char v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v21 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Somehow we end up with an Implicit Follow that does NOT have any play state, that doesn't make sense.",  v21,  2u);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    uint64_t v22 = sub_100126450((uint64_t *)&unk_1002B5C38);
    uint64_t v15 = swift_allocObject(v22, 80LL, 7LL);
    *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4160;
    *(void *)(v15 + 32) = 0LL;
    *(_BYTE *)(v15 + 40) = 2;
    *(void *)(v15 + 4_Block_object_dispose(va, 8) = a1;
    uint64_t result = 1LL;
    *(_BYTE *)(v15 + 56) = 1;
    goto LABEL_13;
  }

  if (a2 != 4) {
    return 2LL;
  }
  uint64_t result = 2LL;
  switch(a1)
  {
    case 0LL:
      if ((a3 & 1) != 0)
      {
        uint64_t v23 = static Logger.podcastsStatesCoordination.getter(2LL);
        uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
        os_log_type_t v25 = static os_log_type_t.error.getter(v24);
        if (os_log_type_enabled(v24, v25))
        {
          os_log_type_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)os_log_type_t v26 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Somehow we end up with an Implicit Follow that does NOT have any play state, that doesn't make sense.",  v26,  2u);
          swift_slowDealloc(v26, -1LL, -1LL);
        }

        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        uint64_t result = 1LL;
      }

      else
      {
        uint64_t result = 1LL;
      }

      break;
    case 4LL:
      uint64_t result = 3LL;
      break;
    case 6LL:
    case 8LL:
    case 9LL:
      return result;
    case 7LL:
      if ((a3 & 1) == 0) {
        return 2LL;
      }
      uint64_t result = 3LL;
      break;
    default:
      return 2LL;
  }

  return result;
}

uint64_t sub_1001656E8(uint64_t a1, char a2, char a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v25 - v10;
  if (a2)
  {
    if (a2 == 2)
    {
      uint64_t v15 = sub_100126450((uint64_t *)&unk_1002B5C38);
      uint64_t v16 = swift_allocObject(v15, 48LL, 7LL);
      *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
      *(void *)(v16 + 32) = a1;
      uint64_t result = 1LL;
      *(_BYTE *)(v16 + 40) = 1;
    }

    else if (a2 == 4)
    {
      uint64_t result = 1LL;
      switch(a1)
      {
        case 0LL:
          return result;
        case 3LL:
          uint64_t result = 2LL;
          break;
        case 5LL:
          uint64_t v17 = static Logger.podcastsStatesCoordination.getter(1LL);
          uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
          os_log_type_t v19 = static os_log_type_t.error.getter(v18);
          if (os_log_type_enabled(v18, v19))
          {
            os_log_type_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)os_log_type_t v20 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Somehow we end up with an Implicit Follow that does NOT have any play state, that doesn't make sense.",  v20,  2u);
            swift_slowDealloc(v20, -1LL, -1LL);
          }

          (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
          uint64_t result = 2LL;
          break;
        case 6LL:
          if ((a3 & 1) != 0)
          {
            uint64_t result = 2LL;
          }

          else
          {
            uint64_t v21 = static Logger.podcastsStatesCoordination.getter(1LL);
            uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
            os_log_type_t v23 = static os_log_type_t.error.getter(v22);
            if (os_log_type_enabled(v22, v23))
            {
              uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)uint64_t v24 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "The show has play state but for some reason it's in Store state. This doesn't make any sense, with playS tate a show should be at least Implicitly Followed. Figure out what's going on.",  v24,  2u);
              swift_slowDealloc(v24, -1LL, -1LL);
            }

            (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
            uint64_t result = 2LL;
          }

          break;
        default:
          return 3LL;
      }
    }

    else
    {
      return 3LL;
    }
  }

  else
  {
    uint64_t v13 = sub_100126450((uint64_t *)&unk_1002B5C38);
    uint64_t v14 = swift_allocObject(v13, 48LL, 7LL);
    uint64_t result = 0LL;
    *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
    *(void *)(v14 + 32) = a1;
    *(_BYTE *)(v14 + 40) = 0;
  }

  return result;
}

uint64_t sub_1001659C0(uint64_t a1, unsigned __int8 a2, __int16 a3)
{
  if (a2 - 2 >= 2)
  {
    if (a2 == 1)
    {
      uint64_t v8 = sub_100126450((uint64_t *)&unk_1002B5C38);
      if ((a3 & 1) != 0)
      {
        if ((a3 & 0x100) != 0)
        {
          uint64_t v12 = swift_allocObject(v8, 48LL, 7LL);
          *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
          *(void *)(v12 + 32) = a1;
          *(_BYTE *)(v12 + 40) = 0;
          return 3LL;
        }

        else
        {
          uint64_t v10 = swift_allocObject(v8, 80LL, 7LL);
          *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4160;
          *(void *)(v10 + 32) = a1;
          *(_BYTE *)(v10 + 40) = 0;
          *(void *)(v10 + 4_Block_object_dispose(va, 8) = 1LL;
          uint64_t result = 2LL;
          *(_BYTE *)(v10 + 56) = 2;
          *(void *)(v10 + 64) = 0LL;
          *(_BYTE *)(v10 + 72) = 2;
        }
      }

      else
      {
        if ((a3 & 0x100) != 0)
        {
          uint64_t v11 = swift_allocObject(v8, 48LL, 7LL);
          *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
          *(void *)(v11 + 32) = a1;
          *(_BYTE *)(v11 + 40) = 0;
        }

        else
        {
          uint64_t v9 = swift_allocObject(v8, 64LL, 7LL);
          *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C4150;
          *(void *)(v9 + 32) = a1;
          *(_BYTE *)(v9 + 40) = 0;
          *(void *)(v9 + 4_Block_object_dispose(va, 8) = 0LL;
          *(_BYTE *)(v9 + 56) = 2;
        }

        return 1LL;
      }
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    uint64_t v4 = sub_100126450((uint64_t *)&unk_1002B5C38);
    uint64_t v5 = swift_allocObject(v4, 48LL, 7LL);
    uint64_t result = 0LL;
    *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
    *(void *)(v5 + 32) = a1;
    *(_BYTE *)(v5 + 40) = 1;
  }

  return result;
}

uint64_t sub_100165B38(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v43 = a5;
  uint64_t v44 = a3;
  int v42 = a4;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v39 = *(void *)(v7 - 8);
  uint64_t v40 = v7;
  __chkstk_darwin();
  id v41 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = type metadata accessor for PodcastStateModel(0LL);
  uint64_t v9 = *(void *)(v45 - 8);
  __chkstk_darwin();
  BOOL v38 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin();
  uint64_t v13 = (char *)v35 - v12;
  PodcastStateModel.uuid.getter(v11);
  uint64_t v15 = v14;
  uint64_t v16 = (void *)objc_opt_self(&OBJC_CLASS___MTEpisode);
  NSString v17 = String._bridgeToObjectiveC()();
  id v18 = [v16 predicateForLibraryEpisodesOnPodcastUuid:v17];

  uint64_t v19 = kMTEpisodeEntityName;
  LODWORD(v37) = [a2 hasAnyObjectsInEntity:kMTEpisodeEntityName satisfyingPredicate:v18];
  swift_bridgeObjectRelease(v15);

  PodcastStateModel.uuid.getter(v20);
  uint64_t v22 = v21;
  id v23 = [v16 predicateForHasAnyVisualPlayState];
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v16 predicateForAllEpisodesOnPodcastUuid:v24];

  id v26 = [v23 AND:v25];
  uint64_t v27 = v45;

  unsigned int v28 = [a2 hasAnyObjectsInEntity:v19 satisfyingPredicate:v26];
  swift_bridgeObjectRelease(v22);

  uint64_t v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, a1, v27);
  uint64_t v30 = v46;
  uint64_t v31 = PodcastStateModel.sanitizedState()(v29);
  if (!v30)
  {
    uint64_t v36 = a1;
    v35[13] = v37 ^ 1;
    os_log_type_t v32 = *(void (**)(void))(v9 + 8);
    uint64_t v46 = v31;
    int v37 = v32;
    v32(v13);
    uint64_t v33 = (char *)&loc_100165DC8 + dword_10016634C[v46];
    v35[10] = v28 ^ 1;
    __asm { BR              X10 }
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v27);
  return a1;
}

void sub_10016635C(void *a1)
{
  id v1 = [a1 podcastStoreId];
  id v2 = [a1 podcastFeedUrl];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    uint64_t v6 = v5;
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v6 = 0LL;
  }

  id v7 = [a1 author];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v11 = v10;
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v11 = 0LL;
  }

  id v12 = [a1 podcastDisplayType];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v16 = v15;
  }

  else
  {
    uint64_t v14 = 0LL;
    uint64_t v16 = 0LL;
  }

  PodcastPlayerItem.init(adamID:feedURL:title:displayType:isSubscribeable:)( v1,  v4,  v6,  v9,  v11,  v14,  v16,  [a1 isNotSubscribeable] ^ 1);
}

void sub_1001664A4(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100126450(&qword_1002B4FE0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v31 - v9;
  id v35 = [a1 episodeStoreId];
  id v11 = [a1 title];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v33 = v14;
    uint64_t v34 = v13;
  }

  else
  {
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
  }

  id v15 = [a1 subtitle];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v18 = v17;
  }

  else
  {
    uint64_t v32 = 0LL;
    uint64_t v18 = 0LL;
  }

  id v19 = [a1 episodeGuid];
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v23 = v22;
  }

  else
  {
    uint64_t v21 = 0LL;
    uint64_t v23 = 0LL;
  }

  id v24 = [a1 pubDate];
  if (v24)
  {
    id v25 = v24;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v24);

    uint64_t v26 = 0LL;
  }

  else
  {
    uint64_t v26 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v8, v26, 1LL, v3);
  sub_10016672C((uint64_t)v8, (uint64_t)v10);
  int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1LL, v3);
  if (v27)
  {
    sub_100136608((uint64_t)v10);
    double v28 = 0.0;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v10, v3);
    uint64_t v29 = sub_100136608((uint64_t)v10);
    double v30 = Date.timeIntervalSinceReferenceDate.getter(v29);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    double v28 = v30;
  }

  EpisodePlayerItem.init(adamID:title:subtitle:guid:pubDate:)( v35,  v34,  v33,  v32,  v18,  v21,  v23,  *(void *)&v28,  v27 != 0);
}

uint64_t sub_10016672C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100126450(&qword_1002B4FE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100166774(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

char *sub_10016690C(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = &v4[OBJC_IVAR____TtC8Podcasts18TVButtonHeaderView_action];
  *(void *)uint64_t v9 = 0LL;
  *((void *)v9 + 1) = 0LL;
  uint64_t v10 = (void *)objc_opt_self(&OBJC_CLASS___UIButton);
  id v11 = v4;
  id v12 = [v10 buttonWithType:6];
  *(void *)&v11[OBJC_IVAR____TtC8Podcasts18TVButtonHeaderView_button] = v12;

  v19.receiver = v11;
  v19.super_class = (Class)type metadata accessor for TVButtonHeaderView();
  uint64_t v13 = (char *)objc_msgSendSuper2(&v19, "initWithFrame:", a1, a2, a3, a4);
  uint64_t v14 = *(void **)&v13[OBJC_IVAR____TtC8Podcasts18TVButtonHeaderView_button];
  id v15 = v13;
  [v15 addSubview:v14];
  [v14 addTarget:v15 action:"buttonAction" forEvents:0x2000];
  sub_1001671C0();
  id v16 = v14;
  uint64_t v17 = (void *)static UIFont.bodyEmph.getter();
  [v16 setFont:v17];

  sub_100166BD0();
  return v15;
}

void sub_100166BD0()
{
  id v1 = v0;
  id v2 = [v0 traitCollection];
  id v3 = [v2 userInterfaceStyle];

  BOOL v4 = v3 == (id)2;
  uint64_t v5 = (void *)objc_opt_self(&OBJC_CLASS___UIColor);
  id v6 = [v5 primaryTextColorForDarkBackground:v4];
  id v7 = [v5 primaryTextColorForDarkBackground:0];
  uint64_t v8 = *(void **)&v1[OBJC_IVAR____TtC8Podcasts18TVButtonHeaderView_button];
  [v8 setTitleColor:v6 forState:0];
  [v8 setTitleColor:v7 forState:8];
  [v8 setTitleColor:v7 forState:1];
  id v9 = [v5 buttonBackgroundColorForDarkBackground:v4];
  [v8 setBackgroundColor:v9];
}

void sub_100166D10()
{
  qword_1002B89B0 = 0x404D000000000000LL;
}

void sub_100166D20()
{
  qword_1002B89B8 = 0x4054000000000000LL;
}

void sub_100166D30()
{
  qword_1002B89C0 = 0x406A400000000000LL;
}

double sub_100166D84()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts18TVButtonHeaderView_button);
  [v1 intrinsicContentSize];
  if (qword_1002B4858 != -1) {
    swift_once(&qword_1002B4858, sub_100166D30);
  }
  [v1 intrinsicContentSize];
  if (qword_1002B4848 != -1) {
    swift_once(&qword_1002B4848, sub_100166D10);
  }
  [v1 intrinsicContentSize];
  double v3 = v2;
  double v4 = *(double *)&qword_1002B89C0;
  [v1 intrinsicContentSize];
  if (qword_1002B4850 != -1) {
    swift_once(&qword_1002B4850, sub_100166D20);
  }
  if (v3 > v4) {
    double v5 = v3;
  }
  else {
    double v5 = v4;
  }
  return v5 + *(double *)&qword_1002B89B8 + *(double *)&qword_1002B89B8;
}

id sub_100166E9C()
{
  v9.receiver = v0;
  v9.super_class = (Class)type metadata accessor for TVButtonHeaderView();
  objc_msgSendSuper2(&v9, "layoutSubviews");
  id v1 = *(void **)&v0[OBJC_IVAR____TtC8Podcasts18TVButtonHeaderView_button];
  [v1 intrinsicContentSize];
  double v3 = v2;
  if (qword_1002B4858 != -1) {
    swift_once(&qword_1002B4858, sub_100166D30);
  }
  [v1 intrinsicContentSize];
  double v5 = v4;
  if ([v0 effectiveUserInterfaceLayoutDirection] == (id)1)
  {
    if (qword_1002B4850 != -1) {
      swift_once(&qword_1002B4850, sub_100166D20);
    }
    double v6 = *(double *)&qword_1002B89B8;
  }

  else
  {
    [v0 bounds];
    double v7 = CGRectGetMaxX(v10) - v3;
    if (qword_1002B4850 != -1) {
      swift_once(&qword_1002B4850, sub_100166D20);
    }
    double v6 = v7 - *(double *)&qword_1002B89B8;
  }

  if (qword_1002B4848 != -1) {
    swift_once(&qword_1002B4848, sub_100166D10);
  }
  return objc_msgSend(v1, "setFrame:", v6, *(double *)&qword_1002B89B0, v3, v5);
}

id sub_100167134()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TVButtonHeaderView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TVButtonHeaderView()
{
  return objc_opt_self(&OBJC_CLASS____TtC8Podcasts18TVButtonHeaderView);
}

unint64_t sub_1001671C0()
{
  unint64_t result = qword_1002B5DB8;
  if (!qword_1002B5DB8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___UIFont);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B5DB8);
  }

  return result;
}

uint64_t sub_1001671FC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100167220()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_10016722C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10016723C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100167244(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, a1 & 1);
}

char *InterestSyncProcessor.init()()
{
  uint64_t v1 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  double v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  double v6 = (char *)&v24 - v5;
  uint64_t v7 = type metadata accessor for OSSignposter(0LL);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v25 = v7;
  __chkstk_darwin();
  objc_super v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = [objc_allocWithZone((Class)type metadata accessor for InterestSyncStorage()) init];
  id v11 = [objc_allocWithZone((Class)type metadata accessor for CloudSyncBugReporter()) init];
  id v12 = objc_allocWithZone((Class)type metadata accessor for InterestSyncProcessor(0LL));
  id v13 = sub_100169EC0((uint64_t)v10, (uint64_t)v11, v12);

  uint64_t ObjectType = swift_getObjectType(v0);
  swift_deallocPartialClassInstance( v0,  ObjectType,  *(unsigned int *)((swift_isaMask & *v0) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v0) + 0x34LL));
  id v15 = (char *)v13;
  static OSSignposter.cloudSync.getter(v15);
  id v16 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 16);
  uint64_t v17 = v16(v6, &v15[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostID], v1);
  uint64_t v18 = (os_log_s *)OSSignposter.logHandle.getter(v17);
  os_signpost_type_t v19 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v16(v4, v6, v1);
    uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v20 = 0;
    os_signpost_id_t v21 = OSSignpostID.rawValue.getter(v20);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v18,  v19,  v21,  "InterestSyncProcessor.created",  "",  v20,  2u);
    swift_slowDealloc(v20, -1LL, -1LL);

    uint64_t v22 = *(void (**)(char *, uint64_t))(v2 + 8);
    v22(v6, v1);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v25);
    v22(v4, v1);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v1);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v25);
  }

  return v15;
}

uint64_t type metadata accessor for InterestSyncProcessor(uint64_t a1)
{
  uint64_t result = qword_1002B6458;
  if (!qword_1002B6458) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InterestSyncProcessor);
  }
  return result;
}

id InterestSyncProcessor.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InterestSyncProcessor(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t InterestSyncProcessor.operationTypeForSET()()
{
  return 18LL;
}

Swift::Bool __swiftcall InterestSyncProcessor.hasLocalChanges()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage, &v5, 0LL, 0LL);
  sub_1001376A4(v1, (uint64_t)v6);
  uint64_t v2 = v7;
  uint64_t v3 = v8;
  sub_1001361FC(v6, v7);
  LOBYTE(v2) = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  sub_100136648(v6);
  return v2 & 1;
}

Swift::String_optional __swiftcall InterestSyncProcessor.version(forGetTransaction:key:)( MZKeyValueStoreTransaction *forGetTransaction, Swift::String key)
{
  uint64_t v2 = sub_100169FF4(key._countAndFlagsBits, (unint64_t)key._object);
  result.value._object = v3;
  result.value._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t InterestSyncProcessor.data(forSetTransaction:key:version:)( uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  return sub_10016A4DC(a2, a3, a4);
}

void InterestSyncProcessor.success(forGetTransaction:with:forKey:version:finishedBlock:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void), uint64_t a9)
{
}

void sub_1001678A0(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v50 = a4;
  uint64_t v52 = a3;
  uint64_t v53 = a1;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v54 = *(void *)(v6 - 8);
  uint64_t v55 = v6;
  __chkstk_darwin();
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  id v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v51 = *(void *)(v13 - 8);
  __chkstk_darwin();
  int64_t v49 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  id v16 = (char *)&v42 - v15;
  type metadata accessor for OSSignposter(0LL);
  uint64_t v17 = __chkstk_darwin();
  uint64_t v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = *(void *)(v4 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostState);
  if (v21)
  {
    uint64_t v45 = v18;
    uint64_t v46 = v17;
    uint64_t v47 = a2;
    uint64_t v48 = v4;
    uint64_t v22 = swift_retain(v21);
    uint64_t v23 = static OSSignposter.cloudSync.getter(v22);
    uint64_t v24 = (os_log_s *)OSSignposter.logHandle.getter(v23);
    uint64_t v25 = OSSignpostIntervalState.signpostID.getter();
    int v44 = static os_signpost_type_t.end.getter(v25);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      uint64_t v26 = swift_retain(v21);
      checkForErrorAndConsumeState(state:)(v26);
      swift_release(v21);
      if ((*(unsigned int (**)(char *, uint64_t))(v10 + 88))(v12, v9) == enum case for OSSignpostError.doubleEnd(_:))
      {
        int v27 = "[Error] Interval already ended";
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        int v27 = "";
      }

      uint64_t v43 = v27;
      uint64_t v28 = v51;
      uint64_t v29 = v49;
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v49, v16, v13);
      double v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)double v30 = 0;
      os_signpost_id_t v31 = OSSignpostID.rawValue.getter(v30);
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v24,  (os_signpost_type_t)v44,  v31,  "InterestSyncProcessor.finish",  v43,  v30,  2u);
      swift_slowDealloc(v30, -1LL, -1LL);

      uint64_t v32 = *(void (**)(char *, uint64_t))(v28 + 8);
      v32(v16, v13);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v20, v46);
      swift_release(v21);
      v32(v29, v13);
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v51 + 8))(v16, v13);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v20, v46);
      swift_release(v21);
    }

    a2 = v47;
  }

  uint64_t v33 = sub_100169268(v53, a2);
  uint64_t v34 = static Logger.cloudSync.getter(v33);
  uint64_t v35 = static os_log_type_t.default.getter(v34);
  os_log_type_t v36 = v35;
  int v37 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v38 = v36;
  if (os_log_type_enabled(v37, v36))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "[Interests] Cleaning up neutral interests after successful transaction.",  v39,  2u);
    swift_slowDealloc(v39, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v54 + 8))(v8, v55);
  id v40 = [(id)objc_opt_self(MTLibrary) sharedInstance];
  if (v40)
  {
    id v41 = v40;
    [v40 cleanUpNeutralInterests];

    if (v52) {
      v52(0LL);
    }
  }

  else
  {
    __break(1u);
  }

void InterestSyncProcessor.success(forSetTransaction:with:forKey:version:finishedBlock:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void), uint64_t a9)
{
}

uint64_t InterestSyncProcessor.conflict(forSetTransaction:with:forKey:version:finishedBlock:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void), uint64_t a9)
{
  return sub_10016BB90(a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_100167F94(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v37 = a2;
  uint64_t v4 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  os_log_type_t v36 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v32 - v12;
  uint64_t v14 = type metadata accessor for OSSignposter(0LL);
  uint64_t result = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(void *)(v2 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostState);
  if (v19)
  {
    uint64_t v32 = v9;
    uint64_t v33 = v16;
    uint64_t v34 = result;
    uint64_t v35 = a1;
    uint64_t v20 = swift_retain(v19);
    uint64_t v21 = static OSSignposter.cloudSync.getter(v20);
    uint64_t v22 = (os_log_s *)OSSignposter.logHandle.getter(v21);
    uint64_t v23 = OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v24 = static os_signpost_type_t.end.getter(v23);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      uint64_t v25 = swift_retain(v19);
      checkForErrorAndConsumeState(state:)(v25);
      swift_release(v19);
      if ((*(unsigned int (**)(char *, uint64_t))(v5 + 88))(v7, v4) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v26 = "[Error] Interval already ended";
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        uint64_t v26 = "";
      }

      uint64_t v27 = v32;
      uint64_t v28 = v36;
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v36, v13, v8);
      uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v29 = 0;
      os_signpost_id_t v30 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v22,  v24,  v30,  "InterestSyncProcessor.reschedule",  v26,  v29,  2u);
      swift_slowDealloc(v29, -1LL, -1LL);

      os_signpost_id_t v31 = *(void (**)(char *, uint64_t))(v27 + 8);
      v31(v13, v8);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v34);
      swift_release(v19);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v31)(v28, v8);
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v8);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v34);
      uint64_t result = swift_release(v19);
    }

    a1 = v35;
  }

  if (a1) {
    return a1(1LL);
  }
  return result;
}

Swift::Void __swiftcall InterestSyncProcessor.transaction(_:didProcessResponseWithDomainVersion:)( MZKeyValueStoreTransaction *_, Swift::String_optional didProcessResponseWithDomainVersion)
{
  object = didProcessResponseWithDomainVersion.value._object;
  uint64_t countAndFlagsBits = didProcessResponseWithDomainVersion.value._countAndFlagsBits;
  uint64_t v5 = v2 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
  swift_beginAccess(v5, v10, 33LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = *(void *)(v5 + 32);
  sub_10013767C(v5, v6);
  uint64_t v8 = *(void (**)(uint64_t, void *, uint64_t, uint64_t, __n128))(v7 + 96);
  __n128 v9 = swift_bridgeObjectRetain(object);
  v8(countAndFlagsBits, object, v6, v7, v9);
  swift_endAccess(v10);
}

char *sub_100168538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  __n128 v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v74 - v10;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v74 - v12;
  a1 += 16LL;
  swift_beginAccess(a1, v90, 0LL, 0LL);
  uint64_t result = (char *)swift_unknownObjectWeakLoadStrong(a1);
  if (!result) {
    return result;
  }
  uint64_t v78 = a3;
  unint64_t v79 = result;
  uint64_t v77 = v9;
  uint64_t v80 = v6;
  uint64_t v15 = static Logger.cloudSync.getter(result);
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  uint64_t v17 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = v16;
  BOOL v20 = os_log_type_enabled(v18, v16);
  int64_t v76 = v11;
  if (v20)
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v86 = v22;
    *(_DWORD *)uint64_t v21 = 136380675;
    unint64_t v75 = v21 + 4;
    uint64_t v23 = type metadata accessor for RemoteInterest(0LL);
    swift_bridgeObjectRetain(a2);
    uint64_t v25 = Array.description.getter(v24, v23);
    unint64_t v27 = v26;
    swift_bridgeObjectRelease(a2);
    uint64_t v84 = sub_100178E7C(v25, v27, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v75, v21 + 12);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease(v27);
    _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "[Interests] Inserting or updating Interests for remote list %{private}s.",  v21,  0xCu);
    swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  uint64_t v28 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v29 = v80;
  v28(v13, v80);
  uint64_t v30 = v78;
  os_signpost_id_t v31 = v79;
  uint64_t v32 = sub_100168BA4(a2, v78);
  uint64_t v33 = (uint64_t)&v31[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage];
  swift_beginAccess(&v31[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage], &v84, 0LL, 0LL);
  sub_1001376A4(v33, (uint64_t)&v86);
  uint64_t v34 = v88;
  uint64_t v35 = v89;
  sub_1001361FC(&v86, v88);
  uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v35 + 136))(v32, v30, v34, v35);
  swift_bridgeObjectRelease(v32);
  uint64_t v37 = sub_100136648(&v86);
  if (v36)
  {
    if ((unint64_t)v36 >> 62)
    {
      if (v36 >= 0) {
        uint64_t v64 = v36 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v64 = v36;
      }
      swift_bridgeObjectRetain(v36);
      uint64_t v65 = _CocoaArrayWrapper.endIndex.getter(v64);
      uint64_t v37 = swift_bridgeObjectRelease(v36);
      if (v65) {
        goto LABEL_8;
      }
    }

    else if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_8:
      os_log_type_t v38 = v76;
      uint64_t v39 = static Logger.cloudSync.getter(v37);
      os_log_type_t v40 = static os_log_type_t.default.getter(v39);
      swift_bridgeObjectRetain_n(v36, 2LL);
      id v41 = v31;
      uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
      if (os_log_type_enabled(v42, v40))
      {
        uint64_t v43 = swift_slowAlloc(32LL, -1LL);
        uint64_t v78 = swift_slowAlloc(64LL, -1LL);
        uint64_t v83 = v78;
        *(_DWORD *)uint64_t v43 = 136315651;
        sub_1001376A4(v33, (uint64_t)&v86);
        LODWORD(v77) = v40;
        unint64_t v79 = v41;
        uint64_t v44 = v88;
        uint64_t v45 = v89;
        sub_1001361FC(&v86, v88);
        uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 40))(v44, v45);
        char v48 = v47;
        sub_100136648(&v86);
        uint64_t v81 = v46;
        char v82 = v48 & 1;
        uint64_t v49 = sub_100126450((uint64_t *)&unk_1002B6480);
        uint64_t v50 = String.init<A>(describing:)(&v81, v49);
        unint64_t v52 = v51;
        uint64_t v86 = sub_100178E7C(v50, v51, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v43 + 4, v43 + 12);

        swift_bridgeObjectRelease(v52);
        *(_WORD *)(v43 + 12) = 2160;
        uint64_t v86 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v43 + 14, v43 + 22);
        *(_WORD *)(v43 + 22) = 2081;
        uint64_t v53 = type metadata accessor for MTInterest(0LL);
        swift_bridgeObjectRetain(v36);
        uint64_t v55 = Array.description.getter(v54, v53);
        unint64_t v57 = v56;
        swift_bridgeObjectRelease(v36);
        uint64_t v86 = sub_100178E7C(v55, v57, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v43 + 24, v43 + 32);
        swift_bridgeObjectRelease_n(v36, 2LL);
        unint64_t v58 = v57;
        id v41 = v79;
        swift_bridgeObjectRelease(v58);
        _os_log_impl( (void *)&_mh_execute_header,  v42,  (os_log_type_t)v77,  "[Interests] Removing Interests only local and before timestamp %s: %{private,mask.hash}s.",  (uint8_t *)v43,  0x20u);
        uint64_t v59 = v78;
        swift_arrayDestroy(v78, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v59, -1LL, -1LL);
        swift_slowDealloc(v43, -1LL, -1LL);

        int v60 = v38;
        uint64_t v61 = v80;
      }

      else
      {

        swift_bridgeObjectRelease_n(v36, 2LL);
        int v60 = v38;
        uint64_t v61 = v29;
      }

      v28(v60, v61);
      sub_1001376A4(v33, (uint64_t)&v86);
      uint64_t v62 = v88;
      uint64_t v63 = v89;
      sub_1001361FC(&v86, v88);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 144))(v36, v62, v63);

      swift_bridgeObjectRelease(v36);
      return (char *)sub_100136648(&v86);
    }

    uint64_t v37 = swift_bridgeObjectRelease(v36);
  }

  unint64_t v66 = v77;
  uint64_t v67 = static Logger.cloudSync.getter(v37);
  uint64_t v68 = static os_log_type_t.default.getter(v67);
  os_log_type_t v69 = v68;
  double v70 = (os_log_s *)Logger.logObject.getter(v68);
  os_log_type_t v71 = v69;
  if (os_log_type_enabled(v70, v69))
  {
    uint64_t v72 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v72 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v70,  v71,  "[Interests], We didn't find any interests which are not present in the cloud and which are older than the last syn c date. We are done.",  v72,  2u);
    swift_slowDealloc(v72, -1LL, -1LL);
    uint64_t v73 = (os_log_s *)v31;
  }

  else
  {
    uint64_t v73 = v70;
    double v70 = (os_log_s *)v31;
  }

  return (char *)((uint64_t (*)(char *, uint64_t))v28)(v66, v29);
}

void *sub_100168BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v78 = type metadata accessor for Logger(0LL);
  uint64_t v76 = *(void *)(v78 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v67 - v7;
  uint64_t v9 = type metadata accessor for RemoteInterest(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  os_log_type_t v71 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v74 = (char *)&v67 - v12;
  __chkstk_darwin();
  uint64_t v77 = (char *)&v67 - v13;
  __chkstk_darwin();
  uint64_t v88 = (char *)&v67 - v14;
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    unint64_t v79 = v8;
    double v70 = v6;
    uint64_t v16 = v2 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v68 = a1;
    swift_bridgeObjectRetain(a1);
    __n128 v18 = swift_beginAccess(v16, v92, 0LL, 0LL);
    uint64_t v80 = *(void *)(v10 + 72);
    os_log_type_t v19 = *(uint64_t (**)(void, void, void))(v10 + 16);
    int v87 = _swiftEmptyArrayStorage;
    v18.n128_u64[0] = 134218242LL;
    __n128 v73 = v18;
    uint64_t v72 = (char *)&type metadata for Any + 8;
    uint64_t v81 = v9;
    uint64_t v82 = a2;
    uint64_t v84 = v10;
    uint64_t v85 = v16;
    uint64_t v83 = v19;
    for (uint64_t i = v19(v88, v17, v9); ; uint64_t i = v19(v88, v17, v9))
    {
      uint64_t v21 = RemoteInterest.adamID.getter(i);
      sub_1001376A4(v16, (uint64_t)v89);
      uint64_t v22 = v90;
      uint64_t v23 = v91;
      sub_1001361FC(v89, v90);
      uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 152);
      uint64_t v86 = v21;
      uint64_t v25 = (void *)v24(v21, a2, v22, v23);
      uint64_t v26 = sub_100136648(v89);
      if (v25) {
        break;
      }
      uint64_t v30 = v79;
      static Logger.cloudSync.getter(v26);
      os_signpost_id_t v31 = v77;
      uint64_t v32 = v19(v77, v88, v9);
      uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
      os_log_type_t v34 = static os_log_type_t.default.getter(v33);
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = swift_slowAlloc(22LL, -1LL);
        unint64_t v75 = (void (*)(char *, uint64_t))swift_slowAlloc(32LL, -1LL);
        v89[0] = (uint64_t)v75;
        *(_DWORD *)uint64_t v35 = v73.n128_u32[0];
        *(void *)(v35 + 4) = v86;
        *(_WORD *)(v35 + 12) = 2080;
        uint64_t v36 = v74;
        v19(v74, v31, v9);
        uint64_t v37 = String.init<A>(describing:)(v36, v9);
        unint64_t v39 = v38;
        *(void *)(v35 + 14) = sub_100178E7C(v37, v38, v89);
        unint64_t v40 = v39;
        a2 = v82;
        swift_bridgeObjectRelease(v40);
        id v41 = *(void (**)(char *, uint64_t))(v84 + 8);
        v41(v31, v9);
        _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "[Interests] Received Interest from sync which doesn't exist in this device. We must insert it. AdamID: %lld, r emote interest: %s",  (uint8_t *)v35,  0x16u);
        uint64_t v42 = v75;
        swift_arrayDestroy(v75, 1LL, v72);
        swift_slowDealloc(v42, -1LL, -1LL);
        swift_slowDealloc(v35, -1LL, -1LL);

        uint64_t v43 = *(void (**)(char *, uint64_t))(v76 + 8);
        v43(v79, v78);
      }

      else
      {
        id v41 = *(void (**)(char *, uint64_t))(v84 + 8);
        v41(v31, v9);

        uint64_t v43 = *(void (**)(char *, uint64_t))(v76 + 8);
        v43(v30, v78);
      }

      sub_1001376A4(v85, (uint64_t)v89);
      uint64_t v44 = v90;
      uint64_t v45 = v91;
      sub_1001361FC(v89, v90);
      uint64_t v46 = (void *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 120))(v88, a2, v44, v45);
      if (v46)
      {

        goto LABEL_14;
      }

      unint64_t v75 = v43;
      unint64_t v51 = v41;
      uint64_t v52 = sub_100136648(v89);
      uint64_t v53 = v70;
      static Logger.cloudSync.getter(v52);
      uint64_t v54 = v71;
      uint64_t v9 = v81;
      os_log_type_t v19 = v83;
      uint64_t v55 = v83(v71, v88, v81);
      unint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
      os_log_type_t v57 = static os_log_type_t.error.getter(v56);
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = swift_slowAlloc(22LL, -1LL);
        uint64_t v69 = swift_slowAlloc(32LL, -1LL);
        v89[0] = v69;
        *(_DWORD *)uint64_t v58 = v73.n128_u32[0];
        *(void *)(v58 + 4) = v86;
        *(_WORD *)(v58 + 12) = 2080;
        uint64_t v59 = v74;
        v83(v74, v54, v9);
        uint64_t v60 = String.init<A>(describing:)(v59, v9);
        unint64_t v62 = v61;
        *(void *)(v58 + 14) = sub_100178E7C(v60, v61, v89);
        unint64_t v63 = v62;
        a2 = v82;
        swift_bridgeObjectRelease(v63);
        v51(v54, v9);
        _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "[Interests] Unable to insert a new interest from sync. AdamID: %lld, remote interest: %s",  (uint8_t *)v58,  0x16u);
        uint64_t v64 = v69;
        swift_arrayDestroy(v69, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v64, -1LL, -1LL);
        uint64_t v65 = v58;
        os_log_type_t v19 = v83;
        swift_slowDealloc(v65, -1LL, -1LL);
      }

      else
      {

        v51(v54, v9);
      }

      v75(v53, v78);
      v51(v88, v9);
      uint64_t v16 = v85;
LABEL_5:
      v17 += v80;
      if (!--v15)
      {
        swift_bridgeObjectRelease(v68);
        return v87;
      }
    }

    sub_1001376A4(v16, (uint64_t)v89);
    uint64_t v27 = v91;
    sub_1001361FC(v89, v90);
    uint64_t v28 = *(void (**)(void))(v27 + 128);
    id v29 = v25;
    v28();

LABEL_14:
    sub_100136648(v89);
    uint64_t v47 = v84;
    if ((swift_isUniquelyReferenced_nonNull_native(v87) & 1) != 0)
    {
      uint64_t v9 = v81;
      a2 = v82;
      uint64_t v16 = v85;
      char v48 = v87;
    }

    else
    {
      char v48 = sub_1001329E0(0LL, v87[2] + 1LL, 1, v87);
      uint64_t v9 = v81;
      a2 = v82;
      uint64_t v16 = v85;
    }

    unint64_t v50 = v48[2];
    unint64_t v49 = v48[3];
    if (v50 >= v49 >> 1) {
      char v48 = sub_1001329E0((void *)(v49 > 1), v50 + 1, 1, v48);
    }
    void v48[2] = v50 + 1;
    int v87 = v48;
    v48[v50 + 4] = v86;

    (*(void (**)(char *, uint64_t))(v47 + 8))(v88, v9);
    os_log_type_t v19 = v83;
    goto LABEL_5;
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_100169268(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = Date.init()(v12);
  double v16 = Date.timeIntervalSinceReferenceDate.getter(v15);
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  uint64_t v18 = static Logger.cloudSync.getter(v17);
  LOBYTE(v10) = static os_log_type_t.default.getter(v18);
  uint64_t v19 = swift_bridgeObjectRetain_n(a2, 2LL);
  BOOL v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = v10;
  if (os_log_type_enabled(v20, (os_log_type_t)v10))
  {
    uint64_t v22 = swift_slowAlloc(22LL, -1LL);
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v45 = v3;
    uint64_t v46 = v23;
    uint64_t v24 = v23;
    *(_DWORD *)uint64_t v22 = 136315394;
    uint64_t v44 = v6;
    uint64_t v47 = a1;
    v48[0] = a2;
    swift_bridgeObjectRetain(a2);
    uint64_t v25 = sub_100126450(&qword_1002B5820);
    uint64_t v26 = String.init<A>(describing:)(&v47, v25);
    uint64_t v43 = a1;
    unint64_t v28 = v27;
    uint64_t v47 = sub_100178E7C(v26, v27, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v22 + 12) = 2048;
    uint64_t v47 = *(void *)&v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v22 + 14, v22 + 22);
    _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "[Interests] Bumping InterestSync version: %s, interestLastSyncTimestamp: %f, isInterestSyncDirty = false.",  (uint8_t *)v22,  0x16u);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v29 = v24;
    uint64_t v3 = v45;
    swift_slowDealloc(v29, -1LL, -1LL);
    uint64_t v30 = v22;
    uint64_t v31 = v43;
    swift_slowDealloc(v30, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v44);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v31 = a1;
  }

  uint64_t v32 = v3 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
  swift_beginAccess(v3 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage, &v47, 33LL, 0LL);
  uint64_t v33 = *(void *)(v32 + 24);
  uint64_t v34 = *(void *)(v32 + 32);
  sub_10013767C(v32, v33);
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v34 + 72);
  __n128 v36 = swift_bridgeObjectRetain(a2);
  v35(v31, a2, v33, v34, v36);
  uint64_t v37 = *(void *)(v32 + 24);
  uint64_t v38 = *(void *)(v32 + 32);
  sub_10013767C(v32, v37);
  (*(void (**)(void, uint64_t, uint64_t))(v38 + 24))(0LL, v37, v38);
  uint64_t v39 = *(void *)(v32 + 24);
  uint64_t v40 = *(void *)(v32 + 32);
  sub_10013767C(v32, v39);
  (*(void (**)(double, void, uint64_t, uint64_t))(v40 + 48))(COERCE_DOUBLE(*(void *)&v16), 0LL, v39, v40);
  return swift_endAccess(&v47);
}

void *sub_1001695B0(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_100126450((uint64_t *)&unk_1002B6490);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  _DWORD v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_100169614(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = a1;
  unint64_t v6 = a1 >> 16;
  uint64_t v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v13 = String.UTF16View.index(_:offsetBy:)(15LL, v6, a2);
    uint64_t v14 = v13 + (v7 << 16);
    unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v16 = v14 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v16 = v15;
    }
    return v16 | 4;
  }

  else
  {
    uint64_t v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15LL, v6);
    uint64_t v9 = v8 + (v7 << 16);
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v11 = v9 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v11 = v10;
    }
    return v11 | 8;
  }

unsigned __int8 *sub_10016968C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_100169788(a1, a2, a3);
}

unsigned __int8 *sub_1001696A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  __n128 v4 = swift_bridgeObjectRetain(a2);
  uint64_t v5 = String.init<A>(_:)( &v15,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String,  v4);
  uint64_t v7 = v5;
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000LL) == 0)
  {
    if ((v6 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }

  uint64_t v7 = sub_100169A04(v5, v6);
  unint64_t v12 = v11;
  swift_bridgeObjectRelease(v8);
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000LL) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v7, v8);
  }

unsigned __int8 *sub_100169788(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            uint64_t v9 = 0LL;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0LL;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              uint64_t v13 = v9 * a3;
              uint64_t v9 = v13 - (v11 + v12);
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_65;
    }

    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }

      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }

      if (result)
      {
        uint64_t v25 = 0LL;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0LL;
              }
              char v27 = -87;
            }

            else
            {
              char v27 = -55;
            }
          }

          else
          {
            char v27 = -48;
          }

          uint64_t v28 = v25 * a3;
          uint64_t v25 = v28 + (v26 + v27);
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }

  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }

  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }

  if (!result) {
    return 0LL;
  }
  uint64_t v9 = 0LL;
  uint64_t v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0LL;
        }
        char v20 = -87;
      }

      else
      {
        char v20 = -55;
      }
    }

    else
    {
      char v20 = -48;
    }

    uint64_t v21 = v9 * a3;
    uint64_t v9 = v21 + (v19 + v20);
    ++v18;
    --v14;
  }

  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_100169A04(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1;
  }
  uint64_t v3 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v3 = 11LL;
  }
  unint64_t v4 = String.subscript.getter(15LL, v3 | (v2 << 16), a1, a2);
  unint64_t v6 = v5;
  uint64_t v9 = sub_100169A80(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_100169A80(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3;
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v12 = sub_100169BC4(a1, a2, a3, a4);
    if (v12)
    {
      uint64_t v9 = v12;
      unint64_t v8 = (unint64_t)sub_1001695B0(v12, 0LL);
      unint64_t v5 = sub_100169CB0((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      uint64_t v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }

    else
    {
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }

    uint64_t v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(void *)(v8 + 16));
    swift_release(v8);
    return v14;
  }

  else
  {
    unint64_t v8 = a1 >> 16;
    uint64_t v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }

unint64_t sub_100169BC4( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v_Block_object_dispose(va, 8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    uint64_t result = sub_100169614(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_100169614(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }

  __break(1u);
  return result;
}

unint64_t sub_100169CB0( unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0LL;
    goto LABEL_33;
  }

  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0LL;
    unint64_t v12 = a4;
LABEL_33:
    void *v9 = a4;
    v9[1] = a5;
    void v9[2] = a6;
    void v9[3] = a7;
    void v9[4] = v12;
    return v11;
  }

  uint64_t v11 = 0LL;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4LL << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_100169614(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }

    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }

      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000LL) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter(a6, a7);
        }
        char v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000LL) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }

    uint64_t result = sub_100169614(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000LL) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_29;
    }

id sub_100169EC0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for OSSignposter(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v18[3] = type metadata accessor for InterestSyncStorage();
  v18[4] = &protocol witness table for InterestSyncStorage;
  v18[0] = a1;
  unint64_t v10 = a3;
  uint64_t v11 = static OSSignposter.interests.getter();
  uint64_t v12 = OSSignposter.logHandle.getter(v11);
  OSSignpostID.init(log:)(v12);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(void *)&v10[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostState] = 0LL;
  sub_1001376A4((uint64_t)v18, (uint64_t)&v10[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage]);
  *(void *)&v10[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_cloudSyncBugReporter] = a2;
  swift_unknownObjectRetain(a2);

  uint64_t v13 = (objc_class *)type metadata accessor for InterestSyncProcessor(0LL);
  v17.receiver = v10;
  v17.super_class = v13;
  id v14 = objc_msgSendSuper2(&v17, "init");
  sub_100136648(v18);
  return v14;
}

uint64_t sub_100169FF4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v52 = a1;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v57 = *(void *)(v5 - 8);
  uint64_t v58 = v5;
  __chkstk_darwin();
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v50 - v12;
  uint64_t v14 = type metadata accessor for OSSignposter(0LL);
  uint64_t v54 = *(void *)(v14 - 8);
  uint64_t v55 = v14;
  uint64_t v15 = __chkstk_darwin();
  objc_super v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static OSSignposter.cloudSync.getter(v15);
  uint64_t v53 = v9;
  uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v59(v13, v2 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostID, v8);
  uint64_t v18 = swift_bridgeObjectRetain_n(a2, 2LL);
  char v19 = (os_log_s *)OSSignposter.logHandle.getter(v18);
  int v51 = static os_signpost_type_t.begin.getter(v19);
  char v20 = OS_os_log.signpostsEnabled.getter();
  unint64_t v56 = v7;
  if ((v20 & 1) != 0)
  {
    v59(v11, (uint64_t)v13, v8);
    uint64_t v21 = swift_slowAlloc(12LL, -1LL);
    uint64_t v50 = v2;
    uint64_t v22 = (uint8_t *)v21;
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v63 = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v61 = sub_100178E7C(v52, a2, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v22 + 4, v22 + 12);
    uint64_t v24 = swift_bridgeObjectRelease_n(a2, 3LL);
    os_signpost_id_t v25 = OSSignpostID.rawValue.getter(v24);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v19,  (os_signpost_type_t)v51,  v25,  "InterestSyncProcessor.GET",  "%s",  v22,  0xCu);
    swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v26 = v23;
    uint64_t v7 = v56;
    swift_slowDealloc(v26, -1LL, -1LL);
    unint64_t v27 = v22;
    uint64_t v3 = v50;
    swift_slowDealloc(v27, -1LL, -1LL);

    uint64_t v28 = v53;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v11, v8);
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);

    uint64_t v28 = v53;
  }

  v59(v11, (uint64_t)v13, v8);
  uint64_t v29 = type metadata accessor for OSSignpostIntervalState(0LL);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  uint64_t v30 = OSSignpostIntervalState.init(id:isOpen:)(v11, 1LL);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v8);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v17, v55);
  uint64_t v31 = *(void *)(v3 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostState);
  *(void *)(v3 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostState) = v30;
  swift_release(v31);
  uint64_t v32 = v3 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
  swift_beginAccess(v3 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage, &v61, 0LL, 0LL);
  sub_1001376A4(v32, (uint64_t)&v63);
  uint64_t v33 = v65;
  uint64_t v34 = v66;
  sub_1001361FC(&v63, v65);
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 64))(v33, v34);
  uint64_t v37 = v36;
  uint64_t v38 = sub_100136648(&v63);
  uint64_t v39 = static Logger.cloudSync.getter(v38);
  LOBYTE(v34) = static os_log_type_t.default.getter(v39);
  uint64_t v40 = swift_bridgeObjectRetain_n(v37, 2LL);
  id v41 = (os_log_s *)Logger.logObject.getter(v40);
  os_log_type_t v42 = v34;
  if (os_log_type_enabled(v41, (os_log_type_t)v34))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v44 = swift_slowAlloc(32LL, -1LL);
    uint64_t v60 = v44;
    *(_DWORD *)uint64_t v43 = 136315138;
    uint64_t v63 = v35;
    uint64_t v64 = v37;
    swift_bridgeObjectRetain(v37);
    uint64_t v45 = sub_100126450(&qword_1002B5820);
    uint64_t v46 = String.init<A>(describing:)(&v63, v45);
    unint64_t v48 = v47;
    uint64_t v63 = sub_100178E7C(v46, v47, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v43 + 4, v43 + 12);
    swift_bridgeObjectRelease_n(v37, 2LL);
    swift_bridgeObjectRelease(v48);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "[Interests] Version for Get transaction: %s", v43, 0xCu);
    swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1LL, -1LL);
    swift_slowDealloc(v43, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v58);
  }

  else
  {

    swift_bridgeObjectRelease_n(v37, 2LL);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v7, v58);
  }

  return v35;
}

uint64_t sub_10016A4DC(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v100 = a1;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v105 = &v95[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = &v95[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  uint64_t v14 = &v95[-v13];
  uint64_t v15 = type metadata accessor for OSSignposter(0LL);
  uint64_t v102 = *(void *)(v15 - 8);
  uint64_t v103 = v15;
  uint64_t v16 = __chkstk_darwin();
  uint64_t v18 = &v95[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  static OSSignposter.cloudSync.getter(v16);
  uint64_t v104 = v3;
  uint64_t v101 = v10;
  unint64_t v106 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16);
  v106(v14, v3 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostID, v9);
  uint64_t v19 = swift_bridgeObjectRetain_n(a2, 2LL);
  char v20 = (os_log_s *)OSSignposter.logHandle.getter(v19);
  int v96 = static os_signpost_type_t.begin.getter(v20);
  char v21 = OS_os_log.signpostsEnabled.getter();
  uint64_t v98 = v6;
  unint64_t v99 = a3;
  uint64_t v97 = v7;
  if ((v21 & 1) != 0)
  {
    v106(v12, (uint64_t)v14, v9);
    uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    v110[0] = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v108 = sub_100178E7C(v100, a2, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v22 + 4, v22 + 12);
    uint64_t v24 = swift_bridgeObjectRelease_n(a2, 3LL);
    os_signpost_id_t v25 = OSSignpostID.rawValue.getter(v24);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  (os_signpost_type_t)v96,  v25,  "InterestSyncProcessor.SET",  "%s",  v22,  0xCu);
    swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);

    uint64_t v26 = v101;
    (*(void (**)(_BYTE *, uint64_t))(v101 + 8))(v12, v9);
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);

    uint64_t v26 = v101;
  }

  v106(v12, (uint64_t)v14, v9);
  uint64_t v27 = type metadata accessor for OSSignpostIntervalState(0LL);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  uint64_t v28 = OSSignpostIntervalState.init(id:isOpen:)(v12, 1LL);
  (*(void (**)(_BYTE *, uint64_t))(v26 + 8))(v14, v9);
  (*(void (**)(_BYTE *, uint64_t))(v102 + 8))(v18, v103);
  uint64_t v29 = v104;
  uint64_t v30 = *(void *)(v104 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostState);
  *(void *)(v104 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostState) = v28;
  swift_release(v30);
  uint64_t v31 = v29 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
  swift_beginAccess(v29 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage, &v108, 0LL, 0LL);
  sub_1001376A4(v31, (uint64_t)v110);
  uint64_t v32 = v111;
  uint64_t v33 = v112;
  sub_1001361FC(v110, v111);
  uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 112))(v32, v33);
  uint64_t v35 = sub_100136648(v110);
  uint64_t v36 = v105;
  if (!*(void *)(v34 + 16))
  {
    sub_1001376A4(v31, (uint64_t)v110);
    uint64_t v55 = v111;
    uint64_t v56 = v112;
    sub_1001361FC(v110, v111);
    uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 64))(v55, v56);
    if (!v58)
    {
      uint64_t v35 = sub_100136648(v110);
      goto LABEL_5;
    }

    uint64_t v59 = v57;
    unint64_t v60 = v58;
    uint64_t result = sub_100136648(v110);
    uint64_t v62 = HIBYTE(v60) & 0xF;
    uint64_t v63 = v59 & 0xFFFFFFFFFFFFLL;
    if ((v60 & 0x2000000000000000LL) != 0) {
      uint64_t v64 = HIBYTE(v60) & 0xF;
    }
    else {
      uint64_t v64 = v59 & 0xFFFFFFFFFFFFLL;
    }
    if (!v64)
    {
      uint64_t v35 = swift_bridgeObjectRelease(v60);
      goto LABEL_5;
    }

    if ((v60 & 0x1000000000000000LL) != 0)
    {
      uint64_t v66 = (uint64_t)sub_1001696A4(v59, v60, 10LL);
      char v68 = v94;
      goto LABEL_60;
    }

    if ((v60 & 0x2000000000000000LL) == 0)
    {
      if ((v59 & 0x1000000000000000LL) != 0) {
        uint64_t v65 = (unsigned __int8 *)((v60 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v65 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v59, v60);
      }
      uint64_t v66 = (uint64_t)sub_100169788(v65, v63, 10LL);
      char v68 = v67 & 1;
LABEL_60:
      uint64_t v35 = swift_bridgeObjectRelease(v60);
      if ((v68 & 1) == 0 && v66 >= 11)
      {
        uint64_t v85 = *(void **)(v29 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_cloudSyncBugReporter);
        sub_1001376A4(v31, (uint64_t)v110);
        uint64_t v86 = v111;
        uint64_t v87 = v112;
        sub_1001361FC(v110, v111);
        (*(void (**)(uint64_t, uint64_t))(v87 + 64))(v86, v87);
        if (v88)
        {
          uint64_t v89 = v88;
          NSString v90 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v89);
        }

        else
        {
          NSString v90 = 0LL;
        }

        sub_100136648(v110);
        [v85 reportInterestSyncIssue:0 version:v90 userInfo:0];
      }

      goto LABEL_5;
    }

    v110[0] = v59;
    v110[1] = v60 & 0xFFFFFFFFFFFFFFLL;
    if (v59 == 43)
    {
      if (!v62) {
        goto LABEL_76;
      }
      uint64_t v66 = (BYTE1(v59) - 48);
      if (v62 != 2)
      {
        uint64_t v66 = 10LL * (BYTE1(v59) - 48) + (BYTE2(v59) - 48);
        uint64_t v76 = v62 - 3;
        if (v76)
        {
          uint64_t v77 = (unsigned __int8 *)v110 + 3;
          while (1)
          {
            unsigned int v78 = *v77 - 48;
            if (v78 > 9) {
              goto LABEL_47;
            }
            uint64_t v79 = 10 * v66;
            uint64_t v66 = v79 + v78;
            char v68 = 0;
            ++v77;
            if (!--v76) {
              goto LABEL_60;
            }
          }
        }
      }
    }

    else
    {
      if (v59 == 45)
      {
        if (v62)
        {
          if (v62 != 1 && (BYTE1(v59) - 48) <= 9u)
          {
            if (v62 == 2)
            {
              char v68 = 0;
              uint64_t v66 = -(uint64_t)(BYTE1(v59) - 48);
              goto LABEL_60;
            }

            if ((BYTE2(v59) - 48) <= 9u)
            {
              uint64_t v66 = -10LL * (BYTE1(v59) - 48) - (BYTE2(v59) - 48);
              uint64_t v84 = v62 - 3;
              if (!v84) {
                goto LABEL_59;
              }
              uint64_t v91 = (unsigned __int8 *)v110 + 3;
              while (1)
              {
                unsigned int v92 = *v91 - 48;
                if (v92 > 9) {
                  break;
                }
                uint64_t v93 = 10 * v66;
                uint64_t v66 = v93 - v92;
                char v68 = 0;
                ++v91;
                if (!--v84) {
                  goto LABEL_60;
                }
              }
            }
          }

void sub_10016AED8(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v70 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v66 = (char *)&v60 - v6;
  sub_100126450((uint64_t *)&unk_1002B6470);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v74 = (uint64_t)&v60 - v9;
  uint64_t v10 = type metadata accessor for RemoteInterest(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  id v73 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  char v67 = (char *)&v60 - v13;
  id v14 = [objc_allocWithZone((Class)MZKeyValueStoreNode) init];
  Class isa = 0LL;
  if (a2 >> 60 != 15) {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  [v14 setValue:isa];

  id v16 = [v14 hasData];
  if ((_DWORD)v16)
  {
    id v17 = [v14 arrayValue];
    if (!v17
      || (uint64_t v18 = v17,
          uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, (char *)&type metadata for Any + 8),
          v18,
          char v20 = sub_10013064C(v19),
          swift_bridgeObjectRelease(v19),
          !v20))
    {
      swift_bridgeObjectRelease(0LL);
      char v20 = _swiftEmptyArrayStorage;
    }

    uint64_t v72 = v20[2];
    if (v72)
    {
      id v60 = v14;
      __n128 v21 = swift_bridgeObjectRetain(v20);
      uint64_t v22 = 0LL;
      uint64_t v75 = _swiftEmptyArrayStorage;
      v21.n128_u64[0] = 136380675LL;
      __n128 v64 = v21;
      uint64_t v63 = (char *)&type metadata for Any + 8;
      os_log_type_t v71 = v20;
      uint64_t v65 = v3;
      uint64_t v68 = v11;
      id v69 = v8;
      uint64_t v62 = v10;
      do
      {
        __n128 v23 = swift_bridgeObjectRetain(v20[v22 + 4]);
        RemoteInterest.init(dictionary:)(v23);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
        uint64_t v24 = v74;
        sub_10016C0A8((uint64_t)v8, v74);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v24, 1LL, v10) == 1)
        {
          sub_10016BFEC(v24);
        }

        else
        {
          os_signpost_id_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 32);
          uint64_t v26 = v67;
          v25(v67, v24, v10);
          v25(v73, (uint64_t)v26, v10);
          if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) != 0) {
            unint64_t v27 = (unint64_t)v75;
          }
          else {
            unint64_t v27 = sub_1001329CC(0, v75[2] + 1LL, 1, (unint64_t)v75);
          }
          unint64_t v29 = *(void *)(v27 + 16);
          unint64_t v28 = *(void *)(v27 + 24);
          if (v29 >= v28 >> 1) {
            unint64_t v27 = sub_1001329CC(v28 > 1, v29 + 1, 1, v27);
          }
          *(void *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = v29 + 1;
          unint64_t v30 = (*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
          uint64_t v75 = (void *)v27;
          v25((char *)(v27 + v30 + *(void *)(v11 + 72) * v29), (uint64_t)v73, v10);
          char v20 = v71;
        }

        ++v22;
      }

      while (v72 != v22);
      swift_bridgeObjectRelease_n(v20, 2LL);
      id v14 = v60;
      unint64_t v49 = v75;
    }

    else
    {
      swift_bridgeObjectRelease(v20);
      unint64_t v49 = _swiftEmptyArrayStorage;
    }

    uint64_t v50 = v61;
    uint64_t v51 = &v61[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage];
    swift_beginAccess(&v61[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage], v82, 0LL, 0LL);
    sub_1001376A4((uint64_t)v51, (uint64_t)&aBlock);
    uint64_t v52 = v78;
    uint64_t v53 = v79;
    sub_1001361FC(&aBlock, (uint64_t)v78);
    NSString v54 = (void *)(*((uint64_t (**)(void *, char *(*)()))v53 + 1))(v52, v53);
    sub_100136648(&aBlock);
    uint64_t v55 = swift_allocObject(&unk_1002480B8, 24LL, 7LL);
    swift_unknownObjectWeakInit(v55 + 16, v50);
    uint64_t v56 = (void *)swift_allocObject(&unk_1002480E0, 40LL, 7LL);
    v56[2] = v55;
    v56[3] = v49;
    void v56[4] = v54;
    uint64_t v79 = sub_10016C084;
    uint64_t v80 = v56;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    v77[0] = 1107296256LL;
    v77[1] = sub_10013D2D8;
    unsigned int v78 = &unk_1002480F8;
    uint64_t v57 = _Block_copy(&aBlock);
    unint64_t v58 = v80;
    id v59 = v54;
    swift_release(v58);
    [v59 performBlockAndWaitWithSave:v57];
    _Block_release(v57);
  }

  else
  {
    uint64_t v31 = static Logger.cloudSync.getter(v16);
    os_log_type_t v32 = static os_log_type_t.default.getter(v31);
    uint64_t v33 = v61;
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = v32;
    if (os_log_type_enabled(v34, v32))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v37 = swift_slowAlloc(32LL, -1LL);
      id v60 = v14;
      uint64_t v38 = v37;
      *(_DWORD *)uint64_t v36 = 136315138;
      uint64_t v83 = v37;
      uint64_t v75 = v36 + 4;
      uint64_t v39 = (uint64_t)&v33[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage];
      swift_beginAccess(&v33[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage], v82, 0LL, 0LL);
      sub_1001376A4(v39, (uint64_t)&aBlock);
      uint64_t v65 = v3;
      uint64_t v41 = v78;
      uint64_t v40 = v79;
      sub_1001361FC(&aBlock, (uint64_t)v78);
      uint64_t v42 = (*((uint64_t (**)(void *, char *(*)()))v40 + 8))(v41, v40);
      uint64_t v44 = v43;
      sub_100136648(&aBlock);
      v81[0] = v42;
      v81[1] = v44;
      uint64_t v45 = sub_100126450(&qword_1002B5820);
      uint64_t v46 = String.init<A>(describing:)(v81, v45);
      unint64_t v48 = v47;
      uint64_t aBlock = sub_100178E7C(v46, v47, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v77, v75, v36 + 12);

      swift_bridgeObjectRelease(v48);
      _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "[Interests] Empty remote Interests key for current version %s. Nothing to merge.",  v36,  0xCu);
      swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v70 + 8))(v5, v65);
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v70 + 8))(v5, v3);
    }
  }

void sub_10016B7A4( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  uint64_t v31 = a3;
  uint64_t v32 = a1;
  unint64_t v33 = a2;
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin();
  id v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = static Logger.cloudSync.getter(v15);
  os_log_type_t v19 = static os_log_type_t.default.getter(v18);
  uint64_t v20 = swift_bridgeObjectRetain_n(a4, 2LL);
  __n128 v21 = (os_log_s *)Logger.logObject.getter(v20);
  if (os_log_type_enabled(v21, v19))
  {
    uint64_t v30 = v9;
    uint64_t v22 = swift_slowAlloc(12LL, -1LL);
    unint64_t v28 = a7;
    __n128 v23 = (uint8_t *)v22;
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    uint64_t v29 = a8;
    uint64_t v25 = v24;
    uint64_t v37 = v24;
    *(_DWORD *)__n128 v23 = 136315138;
    swift_bridgeObjectRetain(a4);
    uint64_t v36 = sub_100178E7C(v31, a4, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease_n(a4, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v19,  "[Interests] Updating local cache after GET transaction for key %s",  v23,  0xCu);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v26 = v25;
    a8 = v29;
    swift_slowDealloc(v26, -1LL, -1LL);
    unint64_t v27 = v23;
    a7 = v28;
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a4, 2LL);
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  sub_10016AED8(v32, v33);
  sub_1001678A0(v34, v35, a7, a8);
}

void sub_10016B9A0( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v28 = a1;
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin();
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = static Logger.cloudSync.getter(v13);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  uint64_t v18 = swift_bridgeObjectRetain_n(a2, 2LL);
  os_log_type_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  if (os_log_type_enabled(v19, v17))
  {
    uint64_t v25 = a5;
    uint64_t v20 = swift_slowAlloc(12LL, -1LL);
    uint64_t v26 = a6;
    __n128 v21 = (uint8_t *)v20;
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v27 = v7;
    uint64_t v23 = v22;
    uint64_t v32 = v22;
    *(_DWORD *)__n128 v21 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v31 = sub_100178E7C(v28, a2, &v32);
    a5 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v19,  v17,  "[Interests] Successful SET transaction for key %s, marking everything as synced and finishing normally.",  v21,  0xCu);
    swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    uint64_t v24 = v21;
    a6 = v26;
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  sub_1001678A0(v29, v30, a5, a6);
}

uint64_t sub_10016BB90( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void), uint64_t a8)
{
  uint64_t v9 = v8;
  unint64_t v40 = a2;
  uint64_t v41 = a7;
  uint64_t v37 = a3;
  uint64_t v39 = a1;
  uint64_t v38 = type metadata accessor for Logger(0LL);
  uint64_t v14 = *(void *)(v38 - 8);
  uint64_t v15 = __chkstk_darwin();
  os_log_type_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = static Logger.cloudSync.getter(v15);
  os_log_type_t v19 = static os_log_type_t.default.getter(v18);
  uint64_t v20 = swift_bridgeObjectRetain_n(a4, 2LL);
  __n128 v21 = (os_log_s *)Logger.logObject.getter(v20);
  if (os_log_type_enabled(v21, v19))
  {
    uint64_t v36 = a6;
    uint64_t v22 = swift_slowAlloc(12LL, -1LL);
    uint64_t v34 = a8;
    uint64_t v23 = (uint8_t *)v22;
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    uint64_t v35 = a5;
    uint64_t v25 = v24;
    v43[0] = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    swift_bridgeObjectRetain(a4);
    uint64_t v42 = sub_100178E7C(v37, a4, v43);
    a6 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease_n(a4, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v19,  "[Interests] Failure on SET transaction for key %s, Bookkeeper copy has diverged from local copy, we must merge both.",  v23,  0xCu);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v26 = v25;
    a5 = v35;
    swift_slowDealloc(v26, -1LL, -1LL);
    uint64_t v27 = v23;
    a8 = v34;
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a4, 2LL);
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v38);
  sub_10016AED8(v39, v40);
  sub_100167F94(v41, a8);
  uint64_t v28 = v9 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
  swift_beginAccess(v9 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage, v43, 33LL, 0LL);
  uint64_t v29 = *(void *)(v28 + 24);
  uint64_t v30 = *(void *)(v28 + 32);
  sub_10013767C(v28, v29);
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v30 + 72);
  __n128 v32 = swift_bridgeObjectRetain(a6);
  v31(a5, a6, v29, v30, v32);
  return swift_endAccess(v43);
}

uint64_t sub_10016BDE8()
{
  return type metadata accessor for InterestSyncProcessor(0LL);
}

uint64_t sub_10016BDF0(uint64_t a1)
{
  v4[0] = "(";
  v4[1] = &unk_1001C5740;
  uint64_t result = type metadata accessor for OSSignpostID(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    void v4[3] = &unk_1001C5758;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10016BE78()
{
  uint64_t v0 = type metadata accessor for Podcasts(0LL);
  uint64_t v10 = v0;
  unint64_t v1 = sub_10016BF6C();
  unint64_t v11 = v1;
  uint64_t v2 = sub_10012761C(v9);
  unint64_t v3 = *(void (**)(void *, void, uint64_t))(*(void *)(v0 - 8) + 104LL);
  v3(v2, enum case for Podcasts.ponderosa(_:), v0);
  char v4 = isFeatureEnabled(_:)(v9);
  sub_100136648(v9);
  if ((v4 & 1) != 0
    && (uint64_t v10 = v0,
        unint64_t v11 = v1,
        uint64_t v5 = sub_10012761C(v9),
        v3(v5, enum case for Podcasts.ponderosaSync(_:), v0),
        char v6 = isFeatureEnabled(_:)(v9),
        sub_100136648(v9),
        (v6 & 1) != 0)
    && (uint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___PFClientUtil),
        ([v7 isRunningOnHomepod] & 1) == 0))
  {
    return [v7 isRunningOnTV] ^ 1;
  }

  else
  {
    return 0LL;
  }

unint64_t sub_10016BF6C()
{
  unint64_t result = qword_1002B66D0;
  if (!qword_1002B66D0)
  {
    uint64_t v1 = type metadata accessor for Podcasts(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Podcasts, v1);
    atomic_store(result, (unint64_t *)&qword_1002B66D0);
  }

  return result;
}

uint64_t sub_10016BFB4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10016BFD8(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16LL))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t sub_10016BFEC(uint64_t a1)
{
  uint64_t v2 = sub_100126450((uint64_t *)&unk_1002B6470);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10016C02C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10016C050()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

char *sub_10016C084()
{
  return sub_100168538(v0[2], v0[3], v0[4]);
}

uint64_t sub_10016C090(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10016C0A0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10016C0A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100126450((uint64_t *)&unk_1002B6470);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void *sub_10016C0FC(uint64_t (*a1)(id *), void *a2, unint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v26 = _swiftEmptyArrayStorage;
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0LL;
      uint64_t v23 = v4 & 0xFFFFFFFFFFFFFF8LL;
      unint64_t v24 = v4 & 0xC000000000000001LL;
      uint64_t v22 = v4;
      while (v24)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v4);
LABEL_9:
        uint64_t v10 = v9;
        unint64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1LL)) {
          goto LABEL_17;
        }
        id v25 = v9;
        uint64_t v12 = a2;
        uint64_t v13 = a1(&v25);
        if (v3)
        {
          swift_bridgeObjectRelease(v4);

          swift_release(v26);
          return v12;
        }

        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
          uint64_t v14 = v7;
          uint64_t v15 = a1;
          uint64_t v16 = a2;
          uint64_t v17 = v26[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
          uint64_t v18 = v17;
          a2 = v16;
          a1 = v15;
          uint64_t v7 = v14;
          uint64_t v4 = v22;
          uint64_t v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v10);
          specialized ContiguousArray._endMutation()(v19);
        }

        else
        {
        }

        ++v8;
        if (v11 == v7)
        {
          uint64_t v12 = v26;
          goto LABEL_23;
        }
      }

      if (v8 < *(void *)(v23 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v4 < 0) {
        uint64_t v20 = v4;
      }
      else {
        uint64_t v20 = v4 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v20);
      if (!v7) {
        goto LABEL_22;
      }
    }

    id v9 = *(id *)(v4 + 8 * v8 + 32);
    goto LABEL_9;
  }

Swift::Void __swiftcall MTLibrary.cleanUpNeutralInterests()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin();
  char v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = static Logger.database.getter(v4);
  uint64_t v8 = static os_log_type_t.default.getter(v7);
  os_log_type_t v9 = v8;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v8);
  if (os_log_type_enabled(v10, v9))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v9, "Deleting all neutral interests", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  id v12 = [(id)objc_opt_self(MTDB) sharedInstance];
  id v13 = [v12 importContext];

  uint64_t v14 = swift_allocObject(&unk_100248130, 24LL, 7LL);
  swift_unknownObjectWeakInit(v14 + 16, v1);
  uint64_t v15 = swift_allocObject(&unk_100248158, 32LL, 7LL);
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
  *(void *)(v15 + 24) = v13;
  aBlock[4] = sub_10016C4B4;
  uint64_t v20 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10013D2D8;
  void aBlock[3] = &unk_100248170;
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v17 = v20;
  id v18 = v13;
  swift_release(v17);
  [v18 performBlock:v16];
  _Block_release(v16);
}

uint64_t sub_10016C48C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10016C4B4()
{
}

uint64_t sub_10016C4D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10016C4E4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

Swift::Void __swiftcall MTLibrary.deleteAllInterestsBlockingCaller()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin();
  char v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = static Logger.database.getter(v4);
  uint64_t v8 = static os_log_type_t.default.getter(v7);
  os_log_type_t v9 = v8;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v8);
  if (os_log_type_enabled(v10, v9))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v9, "Immediately deleting all interests", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  id v12 = [(id)objc_opt_self(MTDB) sharedInstance];
  id v13 = [v12 importContext];

  uint64_t v14 = swift_allocObject(&unk_100248130, 24LL, 7LL);
  swift_unknownObjectWeakInit(v14 + 16, v1);
  uint64_t v15 = swift_allocObject(&unk_1002481A8, 32LL, 7LL);
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
  *(void *)(v15 + 24) = v13;
  uint64_t v16 = swift_allocObject(&unk_1002481D0, 32LL, 7LL);
  *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_10016C900;
  *(void *)(v16 + 24) = v15;
  aBlock[4] = sub_100134344;
  uint64_t v21 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001347A4;
  void aBlock[3] = &unk_1002481E8;
  uint64_t v17 = _Block_copy(aBlock);
  uint64_t v18 = v21;
  id v19 = v13;
  swift_retain(v16);
  swift_release(v18);
  [v19 performBlockAndWait:v17];

  _Block_release(v17);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation(v16, "", 96LL, 32LL, 32LL, 1LL);
  swift_release(v15);
  swift_release(v16);
}

void sub_10016C778(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    a3(a2);
  }

uint64_t sub_10016C810(id *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = [*a1 lastUpdatedDate];
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v8);

  LOBYTE(a2) = static Date.< infix(_:_:)(v7, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a2 & 1;
}

uint64_t sub_10016C8D4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10016C900()
{
}

uint64_t sub_10016C920()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

id sub_10016C930(void *a1, void *a2)
{
  uint64_t v26 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = static Logger.database.getter(v8);
  os_log_type_t v12 = static os_log_type_t.default.getter(v11);
  id v13 = a1;
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  if (os_log_type_enabled(v14, v12))
  {
    uint64_t v15 = (_DWORD *)swift_slowAlloc(32LL, -1LL);
    uint64_t v24 = v7;
    uint64_t v16 = v15;
    _DWORD *v15 = 134218496;
    uint64_t v17 = v15 + 1;
    double v28 = COERCE_DOUBLE([v13 adamID]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v17, v16 + 3);
    id v25 = a2;
    *((_WORD *)v16 + 6) = 2048;
    [v13 interestValue];
    double v28 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, (char *)v16 + 14, (char *)v16 + 22);
    *((_WORD *)v16 + 11) = 2048;
    id v19 = [v13 lastUpdatedDate];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v19);

    double v20 = Date.timeIntervalSinceReferenceDate.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v26);
    double v28 = v20;
    a2 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v16 + 6, v16 + 8);

    _os_log_impl( (void *)&_mh_execute_header,  v14,  v12,  "Deleting interest as part of interest cleanup. AdamID: %llu, interestValue: %f, lastUpdatedDate: %f",  (uint8_t *)v16,  0x20u);
    uint64_t v21 = v16;
    uint64_t v7 = v24;
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {

    uint64_t v14 = (os_log_s *)v13;
  }

  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v7);
  return [a2 deleteObject:v13];
}

uint64_t sub_10016CB9C(void *a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v66 = v2;
  uint64_t v67 = v3;
  __chkstk_darwin();
  uint64_t v68 = (uint8_t *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  unint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  id v69 = (char *)&v65 - v9;
  __chkstk_darwin();
  uint64_t v11 = (char *)&v65 - v10;
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = (uint64_t)&v65 - v13;
  kMTInterestEntityName.getter(v12);
  uint64_t v16 = v15;
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  type metadata accessor for MTInterest(0LL);
  double v18 = (void *)static MTInterest.predicateForNeutralInterests()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v20 = [a1 objectsInEntity:v17 predicate:v18 sortDescriptors:isa];

  if (v20
    && (unint64_t v22 = sub_10016D77C(),
        unint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v22),
        v20,
        uint64_t v24 = sub_1001309E0(v23),
        uint64_t v21 = swift_bridgeObjectRelease(v23),
        v24))
  {
    unint64_t v75 = (unint64_t)v24;
    uint64_t v25 = static Logger.database.getter(v21);
    uint64_t v26 = static os_log_type_t.default.getter(v25);
    os_log_type_t v27 = v26;
    uint64_t v28 = Logger.logObject.getter(v26);
    if (!os_log_type_enabled((os_log_t)v28, v27)) {
      goto LABEL_7;
    }
    uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v29 = 134217984;
    swift_beginAccess(&v75, v70, 0LL, 0LL);
    uint64_t v30 = v75;
    if (v75 >> 62) {
      goto LABEL_41;
    }
    uint64_t v31 = *(void *)((v75 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    while (1)
    {
      uint64_t v73 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v29 + 4, v29 + 12);
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v28,  v27,  "Starting to delete %ld neutral interests.",  v29,  0xCu);
      swift_slowDealloc(v29, -1LL, -1LL);
LABEL_7:

      __n128 v32 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      v32(v14, v5);
      uint64_t v33 = type metadata accessor for SyncKeysRepository(0LL);
      uint64_t v34 = (void *)static SyncKeysRepository.shared.getter(v33);
      double v35 = COERCE_DOUBLE(SyncKeysRepository.interestLastSyncTimestamp.getter());
      char v37 = v36;

      uint64_t v29 = v68;
      if ((v37 & 1) != 0) {
        static Date.distantFuture.getter();
      }
      else {
        Date.init(timeIntervalSinceReferenceDate:)(v35);
      }
      swift_beginAccess(&v75, &v73, 1LL, 0LL);
      uint64_t v30 = (uint64_t)&v65;
      unint64_t v43 = v75;
      __chkstk_darwin();
      *(&v65 - 2) = (uint64_t)v29;
      swift_bridgeObjectRetain(v43);
      uint64_t v44 = (uint64_t)sub_10016C0FC(sub_10016D7B8, &v65 - 4, v43);
      unint64_t v45 = v75;
      unint64_t v75 = v44;
      uint64_t v46 = swift_bridgeObjectRelease(v45);
      uint64_t v47 = static Logger.database.getter(v46);
      os_log_type_t v27 = static os_log_type_t.default.getter(v47);
      uint64_t v48 = swift_bridgeObjectRetain_n(v44, 2LL);
      unint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
      if (os_log_type_enabled(v49, v27))
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)uint64_t v50 = 134217984;
        if ((unint64_t)v44 >> 62)
        {
          uint64_t v64 = v44 < 0 ? v44 : v44 & 0xFFFFFFFFFFFFFF8LL;
          swift_bridgeObjectRetain(v44);
          uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v64);
          swift_bridgeObjectRelease(v44);
        }

        else
        {
          uint64_t v30 = *(void *)((v44 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        }

        swift_bridgeObjectRelease(v44);
        uint64_t v71 = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v50 + 4, v50 + 12);
        swift_bridgeObjectRelease(v44);
        _os_log_impl((void *)&_mh_execute_header, v49, v27, "Proceeding to delete %ld interests.", v50, 0xCu);
        swift_slowDealloc(v50, -1LL, -1LL);

        uint64_t v29 = v68;
      }

      else
      {

        swift_bridgeObjectRelease_n(v44, 2LL);
      }

      v32((uint64_t)v11, v5);
      uint64_t v14 = v75;
      unint64_t v6 = v75 >> 62;
      if (v75 >> 62)
      {
        if ((v75 & 0x8000000000000000LL) != 0LL) {
          uint64_t v54 = v75;
        }
        else {
          uint64_t v54 = v75 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v75);
        uint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v54);
        if (!v28) {
          goto LABEL_30;
        }
      }

      else
      {
        uint64_t v28 = *(void *)((v75 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain(v75);
        if (!v28) {
          goto LABEL_30;
        }
      }

      if (v28 >= 1) {
        break;
      }
      __break(1u);
LABEL_41:
      if (v30 < 0) {
        uint64_t v63 = v30;
      }
      else {
        uint64_t v63 = v30 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v30);
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter(v63);
      swift_bridgeObjectRelease(v30);
    }

    for (uint64_t i = 0LL; i != v28; ++i)
    {
      if ((v14 & 0xC000000000000001LL) != 0) {
        id v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v14);
      }
      else {
        id v52 = *(id *)(v14 + 8 * i + 32);
      }
      uint64_t v53 = v52;
      sub_10016C930(v52, a1);
    }

id sub_10016D2A0(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  unint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v46 - v6;
  uint64_t v8 = __chkstk_darwin();
  uint64_t v10 = (uint64_t)&v46 - v9;
  kMTInterestEntityName.getter(v8);
  uint64_t v12 = v11;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  id v14 = [(id)objc_opt_self(NSPredicate) truePredicate];
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v16 = [a1 objectsInEntity:v13 predicate:v14 sortDescriptors:isa];

  if (v16
    && (unint64_t v18 = sub_10016D77C(),
        id v19 = (uint8_t *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v18),
        v16,
        uint64_t v20 = (uint64_t)sub_1001309E0((unint64_t)v19),
        uint64_t v17 = swift_bridgeObjectRelease(v19),
        v20))
  {
    uint64_t v46 = v2;
    uint64_t v21 = static Logger.database.getter(v17);
    os_log_type_t v22 = static os_log_type_t.default.getter(v21);
    uint64_t v23 = swift_bridgeObjectRetain_n(v20, 2LL);
    uint64_t v24 = (void *)Logger.logObject.getter(v23);
    if (!os_log_type_enabled((os_log_t)v24, v22))
    {
      unint64_t v26 = (unint64_t)v20 >> 62;

      swift_bridgeObjectRelease_n(v20, 2LL);
      goto LABEL_11;
    }

    id v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)id v19 = 134217984;
    uint64_t v25 = v20 & 0xFFFFFFFFFFFFFF8LL;
    unint64_t v26 = (unint64_t)v20 >> 62;
    uint64_t v27 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    while (1)
    {
      swift_bridgeObjectRelease(v20);
      uint64_t v47 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v24, v22, "Starting to delete all %ld interests.", v19, 0xCu);
      swift_slowDealloc(v19, -1LL, -1LL);

LABEL_11:
      uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      v33(v10, v46);
      unint64_t v3 = v26;
      if (v26)
      {
        if (v20 < 0) {
          uint64_t v37 = v20;
        }
        else {
          uint64_t v37 = v20 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v20);
        uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v37);
        unint64_t v26 = v46;
        if (!v10) {
          goto LABEL_23;
        }
      }

      else
      {
        uint64_t v10 = *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain(v20);
        unint64_t v26 = v46;
        if (!v10) {
          goto LABEL_23;
        }
      }

      if (v10 >= 1) {
        break;
      }
      __break(1u);
LABEL_35:
      if (v20 >= 0) {
        uint64_t v45 = v25;
      }
      else {
        uint64_t v45 = v20;
      }
      swift_bridgeObjectRetain(v20);
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v45);
      swift_bridgeObjectRelease(v20);
    }

    for (uint64_t i = 0LL; i != v10; ++i)
    {
      if ((v20 & 0xC000000000000001LL) != 0) {
        id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v20);
      }
      else {
        id v35 = *(id *)(v20 + 8 * i + 32);
      }
      char v36 = v35;
      sub_10016C930(v35, a1);
    }

unint64_t sub_10016D77C()
{
  unint64_t result = qword_1002B6720;
  if (!qword_1002B6720)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSManagedObject);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B6720);
  }

  return result;
}

uint64_t sub_10016D7B8(id *a1)
{
  return sub_10016C810(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t PodcastsStateTransitionsExternalEffectsProtocol.unsafeUpdateFeed(for:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(a3 + 16))(a1, 0LL, a2);
}

uint64_t PodcastsStateTransitionsExternalEffects.deinit()
{
  swift_unknownObjectRelease(*(void *)(v0 + 32));
  return v0;
}

uint64_t PodcastsStateTransitionsExternalEffects.__deallocating_deinit()
{
  swift_unknownObjectRelease(*(void *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

void PodcastsStateTransitionsExternalEffects.unsafeUpdateFeed(for:shouldFetchPlayState:)(void *a1, int a2)
{
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = [a1 uuid];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v13 = v12;
    id v14 = [a1 managedObjectContext];
    if (v14)
    {
      uint64_t v15 = v14;
      [v14 saveInCurrentBlock];
      id v16 = [a1 title];
      LODWORD(v59) = a2;
      uint64_t v58 = v11;
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        uint64_t v20 = v19;
      }

      else
      {
        uint64_t v18 = 0LL;
        uint64_t v20 = 0LL;
      }

      id v30 = [a1 storeCollectionId];
      id v31 = [a1 feedURL];
      if (v31)
      {
        __n128 v32 = v31;
        uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
        uint64_t v35 = v34;
      }

      else
      {
        uint64_t v33 = 0LL;
        uint64_t v35 = 0LL;
      }

      char v36 = *(void **)(v2 + 24);
      uint64_t v37 = swift_allocObject(&unk_100248220, 88LL, 7LL);
      *(void *)(v37 + swift_unknownObjectWeakDestroy(v0 + 16) = v18;
      *(void *)(v37 + 24) = v20;
      *(void *)(v37 + 32) = v58;
      *(void *)(v37 + 40) = v13;
      *(void *)(v37 + 4_Block_object_dispose(va, 8) = v30;
      *(void *)(v37 + 56) = v33;
      *(void *)(v37 + 64) = v35;
      *(_BYTE *)(v37 + 72) = v59 & 1;
      *(void *)(v37 + 80) = v2;
      aBlock[4] = (uint64_t)sub_10016ED04;
      uint64_t v61 = v37;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_10013F478;
      void aBlock[3] = (uint64_t)&unk_100248238;
      uint64_t v38 = _Block_copy(aBlock);
      uint64_t v39 = v61;
      swift_retain(v2);
      swift_release(v39);
      [v36 updatePodcastWithUUID:v10 userInitiated:1 forced:1 forceBootstrap:0 source:21 completion:v38];
      _Block_release(v38);

      return;
    }

    swift_bridgeObjectRelease(v13);
  }

  static Logger.podcastsStatesCoordination.getter(v9);
  id v21 = a1;
  os_log_type_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  int v23 = static os_log_type_t.error.getter(v22);
  if (os_log_type_enabled(v22, (os_log_type_t)v23))
  {
    LODWORD(v5_Block_object_dispose(va, 8) = v23;
    uint64_t v59 = v5;
    uint64_t v24 = swift_slowAlloc(52LL, -1LL);
    uint64_t v57 = swift_slowAlloc(128LL, -1LL);
    aBlock[0] = v57;
    *(_DWORD *)uint64_t v24 = 136381699;
    id v25 = [v21 title];
    if (v25)
    {
      unint64_t v26 = v25;
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      unint64_t v29 = v28;
    }

    else
    {
      unint64_t v29 = 0xEA00000000003E65LL;
      uint64_t v27 = 0x6C746974206F6E3CLL;
    }

    id v62 = (id)sub_100178E7C(v27, v29, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 4, v24 + 12);

    swift_bridgeObjectRelease(v29);
    *(_WORD *)(v24 + 12) = 2080;
    id v40 = [v21 uuid];
    if (v40)
    {
      os_log_type_t v41 = v40;
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      unint64_t v44 = v43;
    }

    else
    {
      unint64_t v44 = 0xE700000000000000LL;
      uint64_t v42 = 0x3E7974706D653CLL;
    }

    id v62 = (id)sub_100178E7C(v42, v44, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 14, v24 + 22);

    swift_bridgeObjectRelease(v44);
    *(_WORD *)(v24 + 22) = 2080;
    id v62 = [v21 managedObjectContext];
    uint64_t v45 = sub_100126450(&qword_1002B66C0);
    uint64_t v46 = String.init<A>(describing:)(&v62, v45);
    unint64_t v48 = v47;
    id v62 = (id)sub_100178E7C(v46, v47, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 24, v24 + 32);

    swift_bridgeObjectRelease(v48);
    *(_WORD *)(v24 + 32) = 2049;
    id v49 = [v21 storeCollectionId];

    id v62 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 34, v24 + 42);

    *(_WORD *)(v24 + 42) = 2081;
    id v50 = [v21 feedURL];
    if (v50)
    {
      uint64_t v51 = v50;
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      unint64_t v54 = v53;

      uint64_t v55 = v59;
    }

    else
    {
      unint64_t v54 = 0xE700000000000000LL;
      uint64_t v55 = v59;
      uint64_t v52 = 0x3E7974706D653CLL;
    }

    id v62 = (id)sub_100178E7C(v52, v54, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 44, v24 + 52);

    swift_bridgeObjectRelease(v54);
    _os_log_impl( (void *)&_mh_execute_header,  v22,  (os_log_type_t)v58,  "We cannot update feed for podcast without UUID and/or managedObjectContext. Podcast %{private}s, uuid: %s, MOC: %s , adamID: %{private}lld, feedURL: %{private}s.",  (uint8_t *)v24,  0x34u);
    uint64_t v56 = v57;
    swift_arrayDestroy(v57, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v55);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

void sub_10016DE44( char a1, os_log_s *a2, char *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, unsigned __int8 a10, uint64_t a11)
{
  uint64_t v82 = a5;
  uint64_t v83 = a7;
  uint64_t v84 = a3;
  unsigned __int8 v16 = a10;
  uint64_t v86 = type metadata accessor for Logger(0LL);
  __chkstk_darwin();
  uint64_t v18 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  __chkstk_darwin();
  uint64_t v20 = (char *)&v76 - v19;
  uint64_t v21 = __chkstk_darwin();
  uint64_t v24 = (char *)&v76 - v23;
  uint64_t v85 = v25;
  if ((a1 & 1) != 0)
  {
    uint64_t v26 = a8;
    uint64_t v27 = static Logger.podcastsStatesCoordination.getter(v21);
    os_log_type_t v28 = static os_log_type_t.default.getter(v27);
    swift_bridgeObjectRetain_n(a9, 2LL);
    swift_bridgeObjectRetain_n(a4, 2LL);
    uint64_t v29 = swift_bridgeObjectRetain_n(a6, 2LL);
    id v30 = (os_log_s *)Logger.logObject.getter(v29);
    if (os_log_type_enabled(v30, v28))
    {
      uint64_t v31 = swift_slowAlloc(42LL, -1LL);
      unsigned int v80 = v28;
      uint64_t v32 = v31;
      uint64_t v79 = swift_slowAlloc(96LL, -1LL);
      uint64_t v88 = v79;
      *(_DWORD *)uint64_t v32 = 136381443;
      if (a4) {
        uint64_t v33 = (uint64_t)v84;
      }
      else {
        uint64_t v33 = 0x6C746974206F6E3CLL;
      }
      os_log_t v78 = v30;
      if (a4) {
        unint64_t v34 = a4;
      }
      else {
        unint64_t v34 = 0xEA00000000003E65LL;
      }
      uint64_t v84 = v18;
      swift_bridgeObjectRetain(a4);
      uint64_t v87 = sub_100178E7C(v33, v34, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease_n(a4, 2LL);
      unint64_t v35 = v34;
      unsigned __int8 v16 = a10;
      swift_bridgeObjectRelease(v35);
      *(_WORD *)(v32 + 12) = 2080;
      swift_bridgeObjectRetain(a6);
      uint64_t v87 = sub_100178E7C(v82, a6, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v32 + 14, v32 + 22);
      swift_bridgeObjectRelease_n(a6, 3LL);
      *(_WORD *)(v32 + 22) = 2049;
      uint64_t v87 = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v32 + 24, v32 + 32);
      *(_WORD *)(v32 + 32) = 2081;
      if (a9) {
        uint64_t v36 = v26;
      }
      else {
        uint64_t v36 = 0x3E7974706D653CLL;
      }
      if (a9) {
        unint64_t v37 = a9;
      }
      else {
        unint64_t v37 = 0xE700000000000000LL;
      }
      swift_bridgeObjectRetain(a9);
      uint64_t v87 = sub_100178E7C(v36, v37, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v32 + 34, v32 + 42);
      swift_bridgeObjectRelease_n(a9, 2LL);
      unint64_t v38 = v37;
      uint64_t v18 = v84;
      swift_bridgeObjectRelease(v38);
      os_log_t v39 = v78;
      _os_log_impl( (void *)&_mh_execute_header,  v78,  (os_log_type_t)v80,  "Feed update completed for Podcast %{private}s, uuid: %s, adamID: %{private}lld, feedURL: %{private}s.",  (uint8_t *)v32,  0x2Au);
      uint64_t v40 = v79;
      swift_arrayDestroy(v79, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a9, 2LL);
      swift_bridgeObjectRelease_n(a6, 2LL);
      swift_bridgeObjectRelease_n(a4, 2LL);
    }

    id v50 = (void (*)(char *, uint64_t))v85[1];
    v50(v24, v86);
  }

  else
  {
    os_log_t v78 = a2;
    uint64_t v79 = v22;
    unsigned int v80 = a10;
    uint64_t v81 = a8;
    static Logger.podcastsStatesCoordination.getter(v21);
    swift_bridgeObjectRetain_n(a9, 2LL);
    swift_bridgeObjectRetain_n(a4, 2LL);
    uint64_t v41 = swift_bridgeObjectRetain_n(a6, 2LL);
    uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.error.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = swift_slowAlloc(42LL, -1LL);
      uint64_t v77 = swift_slowAlloc(96LL, -1LL);
      uint64_t v88 = v77;
      *(_DWORD *)uint64_t v44 = 136381443;
      if (a4) {
        uint64_t v45 = (uint64_t)v84;
      }
      else {
        uint64_t v45 = 0x6C746974206F6E3CLL;
      }
      if (a4) {
        unint64_t v46 = a4;
      }
      else {
        unint64_t v46 = 0xEA00000000003E65LL;
      }
      uint64_t v84 = v18;
      swift_bridgeObjectRetain(a4);
      uint64_t v87 = sub_100178E7C(v45, v46, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease_n(a4, 2LL);
      swift_bridgeObjectRelease(v46);
      *(_WORD *)(v44 + 12) = 2080;
      swift_bridgeObjectRetain(a6);
      uint64_t v87 = sub_100178E7C(v82, a6, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v44 + 14, v44 + 22);
      swift_bridgeObjectRelease_n(a6, 3LL);
      *(_WORD *)(v44 + 22) = 2049;
      uint64_t v87 = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v44 + 24, v44 + 32);
      *(_WORD *)(v44 + 32) = 2081;
      if (a9) {
        uint64_t v47 = v81;
      }
      else {
        uint64_t v47 = 0x3E7974706D653CLL;
      }
      if (a9) {
        unint64_t v48 = a9;
      }
      else {
        unint64_t v48 = 0xE700000000000000LL;
      }
      swift_bridgeObjectRetain(a9);
      uint64_t v87 = sub_100178E7C(v47, v48, &v88);
      uint64_t v18 = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v44 + 34, v44 + 42);
      swift_bridgeObjectRelease_n(a9, 2LL);
      swift_bridgeObjectRelease(v48);
      _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "Unable to complete feed update for Podcast %{private}s, uuid: %s, adamID: %{private}lld, feedURL: %{private}s.",  (uint8_t *)v44,  0x2Au);
      uint64_t v49 = v77;
      swift_arrayDestroy(v77, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v44, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a9, 2LL);
      swift_bridgeObjectRelease_n(a6, 2LL);
      swift_bridgeObjectRelease_n(a4, 2LL);
    }

    id v50 = (void (*)(char *, uint64_t))v85[1];
    v50(v20, v86);
    unsigned __int8 v16 = v80;
    os_log_t v51 = v78;
    if (v78)
    {
      uint64_t v52 = swift_errorRetain();
      static Logger.podcastsStatesCoordination.getter(v52);
      uint64_t v53 = swift_errorRetain();
      unint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
      os_log_type_t v55 = static os_log_type_t.error.getter(v54);
      BOOL v56 = os_log_type_enabled(v54, v55);
      uint64_t v26 = v81;
      if (v56)
      {
        uint64_t v84 = v18;
        uint64_t v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v85 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v57 = 138412290;
        uint64_t v58 = _convertErrorToNSError(_:)(v51);
        uint64_t v88 = v58;
        uint64_t v18 = v84;
        unsigned __int8 v16 = v80;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v57 + 4, v57 + 12);
        uint64_t v59 = v85;
        *uint64_t v85 = v58;
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Feed Update Error: %@", v57, 0xCu);
        uint64_t v60 = sub_100126450(&qword_1002B53C0);
        swift_arrayDestroy(v59, 1LL, v60);
        uint64_t v26 = v81;
        swift_slowDealloc(v59, -1LL, -1LL);
        swift_slowDealloc(v57, -1LL, -1LL);

        swift_errorRelease();
      }

      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      v50((char *)v79, v86);
    }

    else
    {
      uint64_t v26 = v81;
    }
  }

  if ((v16 & 1) != 0 && a9)
  {
    swift_bridgeObjectRetain(a9);
    uint64_t v62 = static Logger.podcastsStatesCoordination.getter(v61);
    os_log_type_t v63 = static os_log_type_t.default.getter(v62);
    uint64_t v64 = swift_bridgeObjectRetain_n(a9, 2LL);
    uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
    if (os_log_type_enabled(v65, v63))
    {
      uint64_t v84 = v18;
      uint64_t v66 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v67 = v26;
      uint64_t v68 = swift_slowAlloc(32LL, -1LL);
      uint64_t v88 = v68;
      *(_DWORD *)uint64_t v66 = 136380675;
      swift_bridgeObjectRetain(a9);
      uint64_t v87 = sub_100178E7C(v67, a9, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v66 + 4, v66 + 12);
      swift_bridgeObjectRelease_n(a9, 3LL);
      swift_arrayDestroy(v68, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v69 = v68;
      uint64_t v26 = v67;
      swift_slowDealloc(v69, -1LL, -1LL);
      swift_slowDealloc(v66, -1LL, -1LL);

      uint64_t v70 = v84;
    }

    else
    {

      swift_bridgeObjectRelease_n(a9, 2LL);
      uint64_t v70 = v18;
    }

    v50(v70, v86);
    uint64_t v71 = *(void **)(a11 + 32);
    uint64_t v72 = sub_100126450(&qword_1002B6550);
    uint64_t inited = swift_initStackObject(v72, v90);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001C3C20;
    uint64_t v88 = v26;
    unint64_t v89 = a9;
    AnyHashable.init<A>(_:)( (void *)(inited + 32),  &v88,  &type metadata for String,  &protocol witness table for String);
    Swift::Int v74 = sub_100127448(inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, 1LL, &type metadata for AnyHashable);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v74);
    [v71 scheduleVeryHighPriorityEpisodeStateGetWithFeedUrls:isa];
  }

void PodcastsStateTransitionsExternalEffects.unsafeDelete(_:)(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v7 = [a1 managedObjectContext];
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = *(void **)(v1 + 16);
    id v36 = v8;
    objc_msgSend(v9, "_markAsHiddenPodcast:inContext:", a1);
    [v36 saveInCurrentBlock];
  }

  else
  {
    static Logger.podcastsStatesCoordination.getter(0LL);
    id v10 = a1;
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    int v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, (os_log_type_t)v12))
    {
      LODWORD(v36) = v12;
      uint64_t v13 = swift_slowAlloc(52LL, -1LL);
      uint64_t v35 = swift_slowAlloc(128LL, -1LL);
      uint64_t v38 = v35;
      *(_DWORD *)uint64_t v13 = 136381699;
      id v14 = [v10 title];
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
        unint64_t v18 = v17;
      }

      else
      {
        unint64_t v18 = 0xEA00000000003E65LL;
        uint64_t v16 = 0x6C746974206F6E3CLL;
      }

      id v37 = (id)sub_100178E7C(v16, v18, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v13 + 4, v13 + 12);

      swift_bridgeObjectRelease(v18);
      *(_WORD *)(v13 + 12) = 2080;
      id v19 = [v10 uuid];
      if (v19)
      {
        uint64_t v20 = v19;
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        unint64_t v23 = v22;
      }

      else
      {
        unint64_t v23 = 0xE700000000000000LL;
        uint64_t v21 = 0x3E7974706D653CLL;
      }

      id v37 = (id)sub_100178E7C(v21, v23, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v13 + 14, v13 + 22);

      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v13 + 22) = 2080;
      id v37 = [v10 managedObjectContext];
      uint64_t v24 = sub_100126450(&qword_1002B66C0);
      uint64_t v25 = String.init<A>(describing:)(&v37, v24);
      unint64_t v27 = v26;
      id v37 = (id)sub_100178E7C(v25, v26, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v13 + 24, v13 + 32);

      swift_bridgeObjectRelease(v27);
      *(_WORD *)(v13 + 32) = 2049;
      id v28 = [v10 storeCollectionId];

      id v37 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v13 + 34, v13 + 42);

      *(_WORD *)(v13 + 42) = 2081;
      id v29 = [v10 feedURL];
      if (v29)
      {
        id v30 = v29;
        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
        unint64_t v33 = v32;
      }

      else
      {
        unint64_t v33 = 0xE700000000000000LL;
        uint64_t v31 = 0x3E7974706D653CLL;
      }

      id v37 = (id)sub_100178E7C(v31, v33, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v13 + 44, v13 + 52);

      swift_bridgeObjectRelease(v33);
      _os_log_impl( (void *)&_mh_execute_header,  v11,  (os_log_type_t)v36,  "We cannot delete podcast without a valid managedObjectContext. Podcast %{private}s, uuid: %s, MOC: %s, adamID: % {private}lld, feedURL: %{private}s.",  (uint8_t *)v13,  0x34u);
      uint64_t v34 = v35;
      swift_arrayDestroy(v35, 4LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

void sub_10016EC64(void *a1)
{
}

void sub_10016EC88(void *a1, int a2)
{
}

void sub_10016ECA8(void *a1)
{
}

uint64_t sub_10016ECC8()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

void sub_10016ED04(char a1, os_log_s *a2)
{
}

uint64_t sub_10016ED44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10016ED54(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t type metadata accessor for PodcastsStateTransitionsExternalEffects()
{
  return objc_opt_self(&OBJC_CLASS____TtC8Podcasts39PodcastsStateTransitionsExternalEffects);
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSManagedObjectContext.fetchHasLibraryEpisodesInPodcast(withUUID:)( Swift::String withUUID)
{
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___MTEpisode);
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 predicateForLibraryEpisodesOnPodcastUuid:v3];

  unsigned __int8 v5 = [v1 hasAnyObjectsInEntity:kMTEpisodeEntityName satisfyingPredicate:v4];
  return v5;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSManagedObjectContext.fetchHasPlayedEpisodesInPodcast(withUUID:)( Swift::String withUUID)
{
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___MTEpisode);
  id v3 = [v2 predicateForHasAnyVisualPlayState];
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v2 predicateForAllEpisodesOnPodcastUuid:v4];

  id v6 = [v3 AND:v5];
  unsigned __int8 v7 = [v1 hasAnyObjectsInEntity:kMTEpisodeEntityName satisfyingPredicate:v6];

  return v7;
}

uint64_t DummyCategoryIngester.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSManagedObjectContext.fetchHasEpisodes(for:)( NSPredicate *a1)
{
  return [v1 hasAnyObjectsInEntity:kMTEpisodeEntityName satisfyingPredicate:a1];
}

uint64_t type metadata accessor for FetchEpisodesStates()
{
  return objc_opt_self(&OBJC_CLASS____TtC8Podcasts19FetchEpisodesStates);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> EntitledFirstTimeAvailableMigrator.performMigrationStep()()
{
}

uint64_t sub_10016EF90(void *a1)
{
  uint64_t v3 = v2;
  id v4 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  id v6 = [v4 initWithEntityName:v5];

  id v7 = [(id)objc_opt_self(MTEpisode) predicateForEntitledEpisodes];
  [v6 setPredicate:v7];

  [v6 setReturnsObjectsAsFaults:0];
  [v6 setFetchBatchSize:200];
  unint64_t v8 = sub_10016F2B4();
  uint64_t result = NSManagedObjectContext.fetch<A>(_:)(v6, v8);
  uint64_t v14 = result;
  if ((unint64_t)result >> 62)
  {
    if (result < 0) {
      uint64_t v15 = result;
    }
    else {
      uint64_t v15 = result & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(result);
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v15);
    uint64_t result = swift_bridgeObjectRelease(v14);
    if (!v10) {
      goto LABEL_17;
    }
  }

  else
  {
    uint64_t v10 = *(void *)((result & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v10)
    {
LABEL_17:

      return swift_bridgeObjectRelease(v14);
    }
  }

  if (v10 >= 1)
  {
    uint64_t v11 = 0LL;
    while (1)
    {
      id v12 = (v14 & 0xC000000000000001LL) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v14)
          : *(id *)(v14 + 8 * v11 + 32);
      uint64_t v13 = v12;
      [v12 resolveAvailabilityDate];
      uint64_t result = (uint64_t)[v6 fetchBatchSize];
      if (!result) {
        break;
      }
      if (!(++v11 % result)) {
        [a1 saveInCurrentBlock];
      }

      if (v10 == v11) {
        goto LABEL_17;
      }
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

void sub_10016F1A4()
{
  id v0 = [(id)objc_opt_self(MTDB) sharedInstance];
  id v1 = [v0 privateQueueContext];

  uint64_t v2 = swift_allocObject(&unk_100248370, 24LL, 7LL);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  void v6[4] = sub_100161A58;
  uint64_t v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256LL;
  void v6[2] = sub_10013D2D8;
  void v6[3] = &unk_100248388;
  uint64_t v3 = _Block_copy(v6);
  uint64_t v4 = v7;
  id v5 = v1;
  swift_release(v4);
  [v5 performBlockAndWaitWithSave:v3];
  _Block_release(v3);
}

ValueMetadata *type metadata accessor for EntitledFirstTimeAvailableMigrator()
{
  return &type metadata for EntitledFirstTimeAvailableMigrator;
}

unint64_t sub_10016F2B4()
{
  unint64_t result = qword_1002B6600;
  if (!qword_1002B6600)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___MTEpisode);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B6600);
  }

  return result;
}

uint64_t sub_10016F2F0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10016F314(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10016F324(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t *PodcastsStateCoordinator.shared.unsafeMutableAddressor()
{
  if (qword_1002B4860 != -1) {
    swift_once(&qword_1002B4860, sub_10016F6AC);
  }
  return &static PodcastsStateCoordinator.shared;
}

void PodcastsStateCoordinator.downloadEpisode(withUUID:isFromSaving:from:in:)( uint64_t a1, unint64_t a2, char a3, uint64_t a4, void *a5)
{
  id v6 = v5;
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v42 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = static Logger.podcastsStatesCoordination.getter(v13);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  uint64_t v18 = swift_bridgeObjectRetain_n(a2, 2LL);
  id v19 = (os_log_s *)Logger.logObject.getter(v18);
  if (os_log_type_enabled(v19, v17))
  {
    uint64_t v20 = swift_slowAlloc(28LL, -1LL);
    uint64_t v37 = v12;
    uint64_t v21 = v20;
    uint64_t v22 = swift_slowAlloc(64LL, -1LL);
    uint64_t v41 = a4;
    uint64_t v23 = v22;
    aBlock[0] = v22;
    *(_DWORD *)uint64_t v21 = 136315650;
    os_log_t v39 = v6;
    swift_bridgeObjectRetain(a2);
    uint64_t v43 = sub_100178E7C(a1, a2, aBlock);
    uint64_t v38 = a5;
    uint64_t v40 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, aBlock, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v21 + 12) = 1024;
    LODWORD(v43) = a3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, (char *)&v43 + 4, v21 + 14, v21 + 18);
    *(_WORD *)(v21 + 1_Block_object_dispose(va, 8) = 2080;
    uint64_t v24 = PodcastsStateChangeOrigin.description.getter(v41);
    unint64_t v26 = v25;
    uint64_t v43 = sub_100178E7C(v24, v25, aBlock);
    id v6 = v39;
    a1 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, aBlock, v21 + 20, v21 + 28);
    unint64_t v27 = v26;
    a5 = v38;
    swift_bridgeObjectRelease(v27);
    _os_log_impl( (void *)&_mh_execute_header,  v19,  v17,  "Downloading episode with uuid %s (isFromSaving: %{BOOL}d, origin: %s).",  (uint8_t *)v21,  0x1Cu);
    swift_arrayDestroy(v23, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v28 = v23;
    a4 = v41;
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v42 + 8))(v15, v37);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v15, v12);
  }

  id v29 = (void *)swift_allocObject(&unk_1002483D0, 56LL, 7LL);
  v29[2] = a5;
  v29[3] = a1;
  void v29[4] = a2;
  v29[5] = v6;
  v29[6] = a4;
  aBlock[4] = (uint64_t)sub_10017945C;
  uint64_t v45 = v29;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_10013D2D8;
  void aBlock[3] = (uint64_t)&unk_1002483E8;
  id v30 = _Block_copy(aBlock);
  uint64_t v31 = v45;
  swift_bridgeObjectRetain(a2);
  id v32 = a5;
  unint64_t v33 = v6;
  swift_release(v31);
  [v32 performBlockAndWaitWithSave:v30];
  _Block_release(v30);
  uint64_t v34 = *(void **)&v33[OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_downloadsGateway];
  NSString v35 = String._bridgeToObjectiveC()();
  [v34 downloadEpisode:v35 isFromSaving:a3 & 1];
}

id sub_10016F6AC()
{
  id result = sub_10016F6C8();
  static PodcastsStateCoordinator.shared = (uint64_t)result;
  return result;
}

id sub_10016F6C8()
{
  uint64_t v0 = type metadata accessor for Podcasts(0LL);
  uint64_t v46 = v0;
  uint64_t v47 = (_UNKNOWN **)sub_100127210( (unint64_t *)&qword_1002B66D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Podcasts,  (uint64_t)&protocol conformance descriptor for Podcasts);
  uint64_t v1 = sub_10012761C(v45);
  (*(void (**)(void *, void, uint64_t))(*(void *)(v0 - 8) + 104LL))( v1,  enum case for Podcasts.simplifiedSyncDirtyHandling(_:),  v0);
  char v2 = isFeatureEnabled(_:)(v45);
  sub_100136648(v45);
  uint64_t EpisodesStates = type metadata accessor for FetchEpisodesStates();
  uint64_t v4 = swift_allocObject(EpisodesStates, 16LL, 7LL);
  uint64_t v46 = EpisodesStates;
  uint64_t v47 = &off_100248280;
  v45[0] = v4;
  if ((v2 & 1) != 0)
  {
    uint64_t v5 = type metadata accessor for SimplifiedPodcastsStateTransitionsFinder();
    id v6 = (void *)swift_allocObject(v5, 56LL, 7LL);
    uint64_t v7 = sub_10013767C((uint64_t)v45, EpisodesStates);
    __chkstk_darwin(v7);
    id v9 = (void *)((char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(uint64_t *))(v10 + 16))(v9);
    uint64_t v11 = *v9;
    void v6[5] = EpisodesStates;
    v6[6] = &off_100248280;
    void v6[2] = v11;
    sub_100136648(v45);
    uint64_t v12 = &off_100247FC8;
  }

  else
  {
    uint64_t v5 = type metadata accessor for OriginBasedPodcastsStateTransitionsFinder();
    id v6 = (void *)swift_allocObject(v5, 56LL, 7LL);
    uint64_t v13 = sub_10013767C((uint64_t)v45, EpisodesStates);
    __chkstk_darwin(v13);
    uint64_t v15 = (void *)((char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(uint64_t *))(v16 + 16))(v15);
    uint64_t v17 = *v15;
    void v6[5] = EpisodesStates;
    v6[6] = &off_100248280;
    void v6[2] = v17;
    sub_100136648(v45);
    uint64_t v12 = &off_100247878;
  }

  uint64_t v46 = v5;
  uint64_t v47 = (_UNKNOWN **)v12;
  v45[0] = v6;
  uint64_t v18 = type metadata accessor for SyncKeysRepository(0LL);
  id v19 = (void *)static SyncKeysRepository.shared.getter(v18);
  id v20 = [(id)objc_opt_self(MTSyncController) sharedInstance];
  id v21 = [(id)objc_opt_self(MTDownloadsGateway) shared];
  sub_1001376A4((uint64_t)v45, (uint64_t)v44);
  uint64_t v22 = type metadata accessor for ImplicitFollowsDecayCoordinator();
  swift_allocObject(v22, 56LL, 7LL);
  uint64_t v23 = ImplicitFollowsDecayCoordinator.init()();
  uint64_t v24 = (void *)objc_opt_self(&OBJC_CLASS___MTLibrary);
  id result = [v24 sharedInstance];
  if (result)
  {
    id v26 = result;
    uint64_t v27 = sub_100134284(0LL, &qword_1002B5970, &off_10023E268);
    id v28 = [(id)swift_getObjCClassFromMetadata(v27) sharedInstance];
    uint64_t v29 = type metadata accessor for PodcastsStateTransitionsExternalEffects();
    id v30 = (void *)swift_allocObject(v29, 40LL, 7LL);
    v30[2] = v26;
    void v30[3] = v28;
    v30[4] = v20;
    uint64_t v31 = type metadata accessor for PodcastsStateTransitions();
    id v32 = (void *)swift_allocObject(v31, 144LL, 7LL);
    id v33 = v20;
    id v34 = v19;
    NSString v35 = sub_10017A320(v44, v34, (uint64_t)v23, (uint64_t)v30, v32);

    type metadata accessor for EpisodeStateRepository(0LL);
    uint64_t v36 = static EpisodeStateRepository.shared.getter();
    id v37 = [(id)objc_opt_self(MTDB) sharedInstance];
    uint64_t v38 = type metadata accessor for PodcastsStateCoordinatorPersistentStore(0LL);
    swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
    id v39 = v34;
    uint64_t v40 = PodcastsStateCoordinatorPersistentStore.init(syncKeysRepository:)();
    id result = [v24 sharedInstance];
    if (result)
    {
      uint64_t v41 = (uint64_t)result;
      uint64_t v42 = (char *)objc_allocWithZone((Class)type metadata accessor for PodcastsStateCoordinator());
      id v43 = sub_10017A218((uint64_t)v21, (uint64_t)v35, v36, (uint64_t)v37, v40, (uint64_t)v33, v41, v42);

      sub_100136648(v45);
      return v43;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

id static PodcastsStateCoordinator.shared.getter()
{
  if (qword_1002B4860 != -1) {
    swift_once(&qword_1002B4860, sub_10016F6AC);
  }
  swift_beginAccess(&static PodcastsStateCoordinator.shared, v1, 0LL, 0LL);
  return (id)static PodcastsStateCoordinator.shared;
}

void static PodcastsStateCoordinator.shared.setter(uint64_t a1)
{
  if (qword_1002B4860 != -1) {
    swift_once(&qword_1002B4860, sub_10016F6AC);
  }
  swift_beginAccess(&static PodcastsStateCoordinator.shared, v3, 1LL, 0LL);
  char v2 = (void *)static PodcastsStateCoordinator.shared;
  static PodcastsStateCoordinator.shared = a1;
}

uint64_t (*static PodcastsStateCoordinator.shared.modify(uint64_t a1))(void)
{
  if (qword_1002B4860 != -1) {
    swift_once(&qword_1002B4860, sub_10016F6AC);
  }
  swift_beginAccess(&static PodcastsStateCoordinator.shared, a1, 33LL, 0LL);
  return j__swift_endAccess;
}

void PodcastsStateCoordinator.init()()
{
}

id PodcastsStateCoordinator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PodcastsStateCoordinator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_10016FE1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  id v6 = String._bridgeToObjectiveC()();
  [v5 enableSubscriptionOnPodcastUUID:v6 from:a3];
}

void sub_10016FE68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *v4;
  id v8 = String._bridgeToObjectiveC()();
  [v7 unsafeEnableSubscriptionOnPodcastUUID:v8 from:a3 context:a4];
}

void sub_10016FEC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  id v6 = String._bridgeToObjectiveC()();
  [v5 disableSubscriptionOnPodcastUUID:v6 from:a3];
}

void sub_10016FF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *v4;
  id v8 = String._bridgeToObjectiveC()();
  [v7 disableSubscriptionOnPodcastUUID:v8 from:a3 context:a4];
}

void sub_10016FF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *v3;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v6 disableSubscriptionsOnPodcastUUIDs:isa from:a2 context:a3];
}

void sub_10016FFD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void PodcastsStateCoordinator.removeShowFromRecentlyUnfollowed(forPodcastUUID:from:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 =  [*(id *)&v3[OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_contextProvider] privateQueueContext];
  id v8 = (void *)swift_allocObject(&unk_100248420, 56LL, 7LL);
  void v8[2] = v7;
  void v8[3] = a1;
  void v8[4] = a2;
  v8[5] = v3;
  v8[6] = a3;
  void v13[4] = sub_1001794A4;
  uint64_t v14 = v8;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256LL;
  _DWORD v13[2] = sub_10013D2D8;
  void v13[3] = &unk_100248438;
  id v9 = _Block_copy(v13);
  uint64_t v10 = v14;
  id v11 = v7;
  swift_bridgeObjectRetain(a2);
  uint64_t v12 = v3;
  swift_release(v10);
  [v11 performBlock:v9];
  _Block_release(v9);
}

void sub_1001700F4(void *a1, char a2, uint64_t a3)
{
}

void PodcastsStateCoordinator.unsafeBookmarkIfNeeded(episode:shouldDownloadEpisode:from:)( void *a1, char a2, uint64_t a3)
{
}

id sub_1001701AC(void *a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  id result = [a1 isBookmarked];
  if ((_DWORD)result) {
    return [v5 unsafeRemoveEpisodeFromBookmarks:a1 from:a2];
  }
  return result;
}

id PodcastsStateCoordinator.unsafeRemoveEpisodeFromBookmarksIfNeeded(episode:from:)(void *a1, uint64_t a2)
{
  id result = [a1 isBookmarked];
  if ((_DWORD)result) {
    return [v2 unsafeRemoveEpisodeFromBookmarks:a1 from:a2];
  }
  return result;
}

id sub_100170268(uint64_t a1, char a2, uint64_t a3)
{
  return objc_msgSend(*v3, "unsafeBookmarkEpisode:onTimestamp:shouldDownloadEpisode:from:", a1, a2 & 1, a3);
}

id sub_100170288(uint64_t a1, uint64_t a2)
{
  return [*v2 unsafeRemoveEpisodeFromBookmarks:a1 from:a2];
}

void sub_1001702A0()
{
}

Swift::Void __swiftcall PodcastsStateCoordinator.startTrackingChangesInDownloads()()
{
  uint64_t v0 = type metadata accessor for EpisodeStateDomain(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100126450(&qword_1002B6620);
  uint64_t v32 = *(void *)(v4 - 8);
  __chkstk_darwin();
  id v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100126450(&qword_1002B6628);
  uint64_t v34 = *(void *)(v7 - 8);
  __chkstk_darwin();
  id v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100126450(&qword_1002B6630);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v35 = v10;
  uint64_t v36 = v11;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  EpisodeStateRepository.startObservingChanges()();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for EpisodeStateDomain.downloadState(_:),  v0);
  uint64_t v14 = EpisodeStateRepository.publisherForChanges(in:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v37[0] = v14;
  uint64_t v15 = sub_100126450(&qword_1002B6640);
  uint64_t v16 = sub_1001342BC( &qword_1002B6648,  &qword_1002B6640,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.filter(_:)(sub_1001752B8, 0LL, v15, v16);
  swift_release(v14);
  uint64_t v17 = sub_100126450(&qword_1002B6650);
  uint64_t v18 = sub_1001342BC( &qword_1002B6658,  &qword_1002B6620,  (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  Publisher.compactMap<A>(_:)(sub_1001752E8, 0LL, v4, v17, v18);
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v6, v4);
  uint64_t v20 = static Subscribers.Demand.unlimited.getter(v19);
  uint64_t v21 = sub_100126450(&qword_1002B6660);
  uint64_t v22 = sub_1001342BC( &qword_1002B6668,  &qword_1002B6628,  (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  uint64_t v23 = sub_1001342BC( &qword_1002B6670,  &qword_1002B6660,  (uint64_t)&protocol conformance descriptor for Publishers.Sequence<A, B>);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v20, sub_100175310, 0LL, v7, v21, v22, v23);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v7);
  uint64_t v24 = swift_allocObject(&unk_100248470, 24LL, 7LL);
  uint64_t v25 = v33;
  swift_unknownObjectWeakInit(v24 + 16, v33);
  uint64_t v26 = sub_1001342BC( &qword_1002B6678,  &qword_1002B6630,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  uint64_t v27 = v35;
  uint64_t v28 = Publisher<>.sink(receiveValue:)(sub_1001794D4, v24, v35, v26);
  swift_release(v24);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v27);
  uint64_t v29 = v25 + OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_subscriptions;
  swift_beginAccess(v25 + OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_subscriptions, v37, 33LL, 0LL);
  uint64_t v30 = sub_100126450((uint64_t *)&unk_1002B5600);
  uint64_t v31 = sub_1001342BC(&qword_1002B6690, (uint64_t *)&unk_1002B5600, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v29, v30, v31);
  swift_endAccess(v37);
  swift_release(v28);
}

void sub_100170680(uint64_t a1, unint64_t a2, char a3, uint64_t a4, void *a5)
{
}

uint64_t sub_1001706A0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  id v9 = (void *)swift_task_alloc(dword_1002B669C);
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10015C67C;
  return PodcastsStateCoordinator.downloadEpisodes(with:isFromSaving:from:in:)(a1, a2, a3, a4);
}

uint64_t PodcastsStateCoordinator.downloadEpisodes(with:isFromSaving:from:in:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 4_Block_object_dispose(va, 8) = a4;
  *(void *)(v5 + 56) = v4;
  *(_BYTE *)(v5 + 140) = a2;
  *(void *)(v5 + 32) = a1;
  *(void *)(v5 + 40) = a3;
  uint64_t v6 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0LL);
  *(void *)(v5 + 64) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v5 + 72) = v7;
  *(void *)(v5 + 80) = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  *(void *)(v5 + 8_Block_object_dispose(va, 8) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v5 + 96) = v9;
  *(void *)(v5 + 104) = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1001707A8, 0LL, 0LL);
}

uint64_t sub_1001707A8(uint64_t a1)
{
  uint64_t v2 = static Logger.podcastsStatesCoordination.getter(a1);
  uint64_t v3 = static os_log_type_t.default.getter(v2);
  os_log_type_t v4 = v3;
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v6 = v4;
  if (os_log_type_enabled(v5, v4))
  {
    uint64_t v7 = *(void *)(v1 + 96);
    uint64_t v33 = *(void *)(v1 + 104);
    uint64_t v8 = *(void *)(v1 + 88);
    uint64_t v9 = *(void *)(v1 + 40);
    int v10 = *(unsigned __int8 *)(v1 + 140);
    uint64_t v11 = swift_slowAlloc(18LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v34 = v12;
    *(_DWORD *)uint64_t v11 = 67109378;
    *(_DWORD *)(v1 + 136) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 140, v11 + 4, v11 + 8);
    *(_WORD *)(v11 + _Block_object_dispose(va, 8) = 2080;
    uint64_t v13 = PodcastsStateChangeOrigin.description.getter(v9);
    unint64_t v15 = v14;
    *(void *)(v1 + 24) = sub_100178E7C(v13, v14, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v11 + 10, v11 + 18);
    swift_bridgeObjectRelease(v15);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Downloading episodes (isFromSaving: %{BOOL}d, origin: %s).",  (uint8_t *)v11,  0x12u);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v33, v8);
  }

  else
  {
    uint64_t v17 = *(void *)(v1 + 96);
    uint64_t v16 = *(void *)(v1 + 104);
    uint64_t v18 = *(void *)(v1 + 88);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }

  uint64_t v20 = *(void *)(v1 + 72);
  uint64_t v19 = *(void *)(v1 + 80);
  uint64_t v22 = *(void **)(v1 + 56);
  uint64_t v21 = *(void *)(v1 + 64);
  uint64_t v24 = *(void *)(v1 + 40);
  uint64_t v23 = *(void **)(v1 + 48);
  uint64_t v25 = *(void *)(v1 + 32);
  uint64_t v26 = (void *)swift_allocObject(&unk_100248498, 48LL, 7LL);
  *(void *)(v1 + 112) = v26;
  void v26[2] = v23;
  v26[3] = v25;
  v26[4] = v22;
  v26[5] = v24;
  (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))( v19,  enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:),  v21);
  uint64_t v27 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  id v28 = v23;
  swift_bridgeObjectRetain(v25);
  id v29 = v22;
  uint64_t v30 = (void *)swift_task_alloc(v27);
  *(void *)(v1 + 120) = v30;
  uint64_t v31 = sub_100126450(&qword_1002B66A0);
  *uint64_t v30 = v1;
  v30[1] = sub_1001709FC;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v1 + 16, *(void *)(v1 + 80), sub_1001794E0, v26, v31);
}

uint64_t sub_1001709FC()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 112LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 120LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 72LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 80LL);
  uint64_t v6 = *(void *)(*(void *)v1 + 64LL);
  *(void *)(*(void *)v1 + 128LL) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_release(v3);
  if (v0) {
    uint64_t v7 = sub_100170B64;
  }
  else {
    uint64_t v7 = sub_100170A90;
  }
  return swift_task_switch(v7, 0LL, 0LL);
}

uint64_t sub_100170A90()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void **)(*(void *)(v0 + 56) + OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_downloadsGateway);
    uint64_t v4 = (void *)(v1 + 40);
    do
    {
      uint64_t v5 = *(unsigned __int8 *)(v0 + 140);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v6);
      [v3 downloadEpisode:v7 isFromSaving:v5];

      v4 += 2;
      --v2;
    }

    while (v2);
  }

  uint64_t v8 = *(void *)(v0 + 104);
  uint64_t v9 = *(void *)(v0 + 80);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100170B64()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 104));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100170BA4(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
}

void PodcastsStateCoordinator.cancelDownload(forEpisodeWithUUID:userInitiated:from:)( uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v37 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin();
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = static Logger.podcastsStatesCoordination.getter(v11);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  uint64_t v16 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  if (os_log_type_enabled(v17, v15))
  {
    uint64_t v18 = swift_slowAlloc(28LL, -1LL);
    uint64_t v34 = v10;
    uint64_t v19 = v18;
    uint64_t v33 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v33;
    *(_DWORD *)uint64_t v19 = 136315650;
    swift_bridgeObjectRetain(a2);
    uint64_t v38 = sub_100178E7C(a1, a2, aBlock);
    uint64_t v35 = a1;
    uint64_t v36 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, aBlock, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v19 + 12) = 1024;
    LODWORD(v3_Block_object_dispose(va, 8) = a3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, (char *)&v38 + 4, v19 + 14, v19 + 18);
    *(_WORD *)(v19 + 1_Block_object_dispose(va, 8) = 2080;
    uint64_t v20 = PodcastsStateChangeOrigin.description.getter(a4);
    unint64_t v22 = v21;
    uint64_t v38 = sub_100178E7C(v20, v21, aBlock);
    uint64_t v5 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, aBlock, v19 + 20, v19 + 28);
    unint64_t v23 = v22;
    a1 = v35;
    swift_bridgeObjectRelease(v23);
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v15,  "Cancelling download for episode with uuid %s (userInitiated: %{BOOL}d, origin: %s).",  (uint8_t *)v19,  0x1Cu);
    uint64_t v24 = v33;
    swift_arrayDestroy(v33, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v34);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v10);
  }

  uint64_t v25 = *(void **)&v5[OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_downloadsGateway];
  NSString v26 = String._bridgeToObjectiveC()();
  [v25 cancelDownloadsForEpisodeUuid:v26 userInitiated:a3 & 1];

  id v27 =  [*(id *)&v5[OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_contextProvider] mainOrPrivateContext];
  id v28 = (void *)swift_allocObject(&unk_1002484C0, 56LL, 7LL);
  void v28[2] = v27;
  v28[3] = a1;
  v28[4] = a2;
  v28[5] = v5;
  v28[6] = a4;
  aBlock[4] = (uint64_t)sub_100179500;
  uint64_t v40 = v28;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_10013D2D8;
  void aBlock[3] = (uint64_t)&unk_1002484D8;
  id v29 = _Block_copy(aBlock);
  uint64_t v30 = v40;
  swift_bridgeObjectRetain(a2);
  id v31 = v27;
  uint64_t v32 = v5;
  swift_release(v30);
  [v31 performBlockAndWaitWithSave:v29];
  _Block_release(v29);
}

void sub_100170F20(char a1, uint64_t a2)
{
}

void PodcastsStateCoordinator.cancelAllDownloads(userInitiated:from:)(char a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin();
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = static Logger.podcastsStatesCoordination.getter(v8);
  uint64_t v12 = static os_log_type_t.default.getter(v11);
  os_log_type_t v13 = v12;
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v15 = v13;
  if (os_log_type_enabled(v14, v13))
  {
    uint64_t v16 = swift_slowAlloc(18LL, -1LL);
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v17;
    *(_DWORD *)uint64_t v16 = 67109378;
    LODWORD(v34) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, (char *)&v34 + 4, v16 + 4, v16 + 8);
    *(_WORD *)(v16 + _Block_object_dispose(va, 8) = 2080;
    uint64_t v33 = v6;
    uint64_t v18 = PodcastsStateChangeOrigin.description.getter(a2);
    uint64_t v32 = a2;
    unint64_t v20 = v19;
    uint64_t v34 = sub_100178E7C(v18, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, aBlock, v16 + 10, v16 + 18);
    swift_bridgeObjectRelease(v20);
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "Cancelling all ongoing downloads (userInitiated: %{BOOL}d, origin: %s).",  (uint8_t *)v16,  0x12u);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);

    unint64_t v21 = *(void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v22 = v32;
    v21(v10, v33);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    uint64_t v22 = a2;
  }

  id v23 =  [*(id *)&v3[OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_downloadsGateway] cancelAllDownloadsUserInitiated:a1 & 1];
  uint64_t v24 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v23,  &type metadata for String,  &protocol witness table for String);

  id v25 =  [*(id *)&v3[OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_contextProvider] mainOrPrivateContext];
  NSString v26 = (void *)swift_allocObject(&unk_100248510, 48LL, 7LL);
  void v26[2] = v24;
  v26[3] = v25;
  v26[4] = v3;
  v26[5] = v22;
  aBlock[4] = (uint64_t)sub_100179540;
  uint64_t v36 = v26;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_10013D2D8;
  void aBlock[3] = (uint64_t)&unk_100248528;
  id v27 = _Block_copy(aBlock);
  id v28 = v36;
  id v29 = v25;
  uint64_t v30 = v3;
  swift_release(v28);
  [v29 performBlockAndWaitWithSave:v27];
  _Block_release(v27);
}

void sub_10017121C(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
}

void PodcastsStateCoordinator.removeDownload(forEpisodeWithUUID:from:shouldAllowAutomaticRedownloads:)( uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
}

void sub_100171250(void *a1)
{
}

void PodcastsStateCoordinator.unsafeRemoveFromRecoveredEpisodesIfNeeded(episode:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = [a1 isBookmarksMigrationRecoveredEpisode];
  if ((_DWORD)v8)
  {
    static Logger.podcastsStatesCoordination.getter(v8);
    id v9 = a1;
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    int v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, (os_log_type_t)v11))
    {
      int v37 = v11;
      uint64_t v38 = v2;
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      uint64_t v36 = swift_slowAlloc(96LL, -1LL);
      uint64_t v41 = v36;
      *(_DWORD *)uint64_t v12 = 136381187;
      id v13 = [v9 title];
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        uint64_t v17 = v16;
      }

      else
      {
        uint64_t v15 = 0LL;
        uint64_t v17 = 0LL;
      }

      id v39 = (id)v15;
      uint64_t v40 = v17;
      uint64_t v18 = sub_100126450(&qword_1002B5820);
      uint64_t v19 = String.init<A>(describing:)(&v39, v18);
      unint64_t v21 = v20;
      id v39 = (id)sub_100178E7C(v19, v20, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v12 + 4, v12 + 12);

      swift_bridgeObjectRelease(v21);
      *(_WORD *)(v12 + 12) = 2080;
      id v22 = [v9 uuid];
      if (v22)
      {
        id v23 = v22;
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        uint64_t v26 = v25;
      }

      else
      {
        uint64_t v24 = 0LL;
        uint64_t v26 = 0LL;
      }

      id v39 = (id)v24;
      uint64_t v40 = v26;
      uint64_t v27 = String.init<A>(describing:)(&v39, v18);
      unint64_t v29 = v28;
      id v39 = (id)sub_100178E7C(v27, v28, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v12 + 14, v12 + 22);

      swift_bridgeObjectRelease(v29);
      *(_WORD *)(v12 + 22) = 2081;
      id v39 = [v9 storeTrackId];
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
      unint64_t v32 = v31;
      id v39 = (id)sub_100178E7C(v30, v31, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v12 + 24, v12 + 32);

      swift_bridgeObjectRelease(v32);
      _os_log_impl( (void *)&_mh_execute_header,  v10,  (os_log_type_t)v37,  "Deleting from BookmarksMigrationRecoveredEpisodes episode: %{private}s, uuid: %s, adamID: %{private}s.",  (uint8_t *)v12,  0x20u);
      uint64_t v33 = v36;
      swift_arrayDestroy(v36, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }

    [v9 setIsBookmarksMigrationRecoveredEpisode:0];
    id v34 = [v9 podcast];
    if (v34)
    {
      uint64_t v35 = v34;
      sub_10014F148(v34, 2LL, 4, 3LL);
    }
  }

void sub_10017161C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void PodcastsStateCoordinator.insertNewImplicitFollowIfNeeded(for:from:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v71 = (void (*)(uint64_t, void, void, void, void))a2;
  uint64_t v7 = type metadata accessor for EpisodePlayerItem(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v75 = v7;
  uint64_t v76 = v8;
  __chkstk_darwin();
  uint64_t v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for PlayerItem(0LL);
  uint64_t v77 = *(void (**)(char *, uint64_t))(v11 - 8);
  __chkstk_darwin();
  uint64_t v79 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  os_log_t v78 = (char *)&v65 - v13;
  __chkstk_darwin();
  uint64_t v15 = (char *)&v65 - v14;
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v73 = *(void *)(v16 - 8);
  uint64_t v74 = v16;
  __chkstk_darwin();
  unsigned int v80 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for PodcastPlayerItem(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin();
  id v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = PlayerItem.podcast.getter(v20);
  char v24 = PodcastPlayerItem.isSubscribeable.getter(v23);
  uint64_t v25 = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  if ((v24 & 1) != 0)
  {
    sub_1001771FC(a1, (uint64_t)v71, a3, a4);
  }

  else
  {
    uint64_t v71 = (void (*)(uint64_t, void, void, void, void))a3;
    uint64_t v72 = a4;
    uint64_t v26 = static Logger.podcastsStatesCoordination.getter(v25);
    os_log_type_t v27 = static os_log_type_t.default.getter(v26);
    unint64_t v28 = (void (*)(char *, uint64_t, uint64_t))*((void *)v77 + 2);
    v28(v15, a1, v11);
    v28(v78, a1, v11);
    uint64_t v29 = ((uint64_t (*)(char *, uint64_t, uint64_t))v28)(v79, a1, v11);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    if (os_log_type_enabled(v30, v27))
    {
      uint64_t v31 = swift_slowAlloc(32LL, -1LL);
      uint64_t v32 = swift_slowAlloc(64LL, -1LL);
      uint64_t v69 = v32;
      v83[0] = v32;
      *(_DWORD *)uint64_t v31 = 136381187;
      uint64_t v70 = v31 + 4;
      int v68 = v27;
      uint64_t v33 = PlayerItem.episode.getter(v32);
      uint64_t v34 = EpisodePlayerItem.title.getter(v33);
      uint64_t v36 = v35;
      os_log_t v67 = v30;
      uint64_t v37 = v75;
      uint64_t v65 = *(void (**)(char *, uint64_t))(v76 + 8);
      v65(v10, v75);
      uint64_t v81 = v34;
      uint64_t v82 = v36;
      uint64_t v66 = sub_100126450(&qword_1002B5820);
      uint64_t v38 = String.init<A>(describing:)(&v81, v66);
      unint64_t v40 = v39;
      uint64_t v81 = sub_100178E7C(v38, v39, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v70, v31 + 12);
      swift_bridgeObjectRelease(v40);
      uint64_t v70 = a1;
      uint64_t v41 = (uint64_t (*)(char *, uint64_t))*((void *)v77 + 1);
      uint64_t v42 = v41(v15, v11);
      uint64_t v77 = (void (*)(char *, uint64_t))v41;
      *(_WORD *)(v31 + 12) = 2049;
      id v43 = v78;
      uint64_t v44 = PlayerItem.episode.getter(v42);
      uint64_t v45 = EpisodePlayerItem.adamID.getter(v44);
      uint64_t v46 = v65;
      v65(v10, v37);
      v41(v43, v11);
      uint64_t v81 = v45;
      uint64_t v47 = v37;
      uint64_t v48 = v76;
      uint64_t v49 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v31 + 14, v31 + 22);
      *(_WORD *)(v31 + 22) = 2081;
      id v50 = v79;
      uint64_t v51 = PlayerItem.episode.getter(v49);
      uint64_t v52 = EpisodePlayerItem.guid.getter(v51);
      uint64_t v54 = v53;
      v46(v10, v47);
      uint64_t v81 = v52;
      uint64_t v82 = v54;
      uint64_t v55 = String.init<A>(describing:)(&v81, v66);
      unint64_t v57 = v56;
      uint64_t v81 = sub_100178E7C(v55, v56, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v31 + 24, v31 + 32);
      swift_bridgeObjectRelease(v57);
      v77(v50, v11);
      os_log_t v58 = v67;
      _os_log_impl( (void *)&_mh_execute_header,  v67,  (os_log_type_t)v68,  "Skip inserting new Implicit Follow for currently playing episode because the show is Not Subscribeable -- i. e. from a news diggest or some other type of 'fake' show: %{private}s, adamID: %{private}lld, guid: %{private}s.",  (uint8_t *)v31,  0x20u);
      uint64_t v59 = v69;
      swift_arrayDestroy(v69, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);

      uint64_t v60 = (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v80, v74);
      uint64_t v61 = v71;
    }

    else
    {
      uint64_t v62 = (void (*)(char *, uint64_t))*((void *)v77 + 1);
      v62(v78, v11);
      v62(v15, v11);
      v62(v79, v11);

      uint64_t v60 = (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v80, v74);
      uint64_t v61 = v71;
      uint64_t v47 = v75;
      uint64_t v48 = v76;
    }

    uint64_t v63 = PlayerItem.episode.getter(v60);
    uint64_t v64 = EpisodePlayerItem.adamID.getter(v63);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v10, v47);
    v61(v64, 0LL, 0LL, 0LL, 0LL);
  }

id sub_100171B40(uint64_t a1, uint64_t a2)
{
  return [*v2 unsafeEpisodePlayedBeyondThresholdForFirstTime:a1 from:a2];
}

id sub_100171B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*v4 unsafeMark:a1 as:a2 in:a3 from:a4];
}

id sub_100171B78(uint64_t a1)
{
  return [*v1 unsafeDidBumpLastDatePlayedFor:a1];
}

id sub_100171B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PodcastsStateCoordinator.unsafeInsertNewImplicitFollow(for:from:in:)(a1, a2, a3);
}

id PodcastsStateCoordinator.unsafeInsertNewImplicitFollow(for:from:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v94 = a3;
  uint64_t v5 = type metadata accessor for RemoteNonFollowedShow(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  unint64_t v99 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v98 = (char *)&v89 - v8;
  __chkstk_darwin();
  uint64_t v10 = (char *)&v89 - v9;
  __chkstk_darwin();
  uint64_t v12 = (char *)&v89 - v11;
  uint64_t v101 = type metadata accessor for Logger(0LL);
  uint64_t v92 = *(void *)(v101 - 8);
  __chkstk_darwin();
  uint64_t v100 = (char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin();
  uint64_t v16 = (char *)&v89 - v15;
  uint64_t v17 = static Logger.podcastsStatesCoordination.getter(v14);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v19(v12, a1, v5);
  uint64_t v93 = v19;
  uint64_t v20 = ((uint64_t (*)(char *, uint64_t, uint64_t))v19)(v10, a1, v5);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  BOOL v22 = os_log_type_enabled(v21, v18);
  uint64_t v96 = a2;
  uint64_t v97 = a1;
  if (v22)
  {
    uint64_t v23 = swift_slowAlloc(22LL, -1LL);
    uint64_t v90 = swift_slowAlloc(32LL, -1LL);
    uint64_t v104 = v90;
    *(_DWORD *)uint64_t v23 = 134283779;
    uint64_t v24 = ((uint64_t (*)(void))RemoteNonFollowedShow.storeCollectionId.getter)();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v6 + 8);
    v25(v12, v5);
    id v103 = (id)v24;
    uint64_t v26 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v23 + 4, v23 + 12);
    *(_WORD *)(v23 + 12) = 2081;
    uint64_t v27 = RemoteNonFollowedShow.feedURL.getter(v26);
    unint64_t v29 = v28;
    id v103 = (id)sub_100178E7C(v27, v28, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease(v29);
    uint64_t v95 = v25;
    v25(v10, v5);
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v18,  "Inserting new show (in Store state) for RemoteNonFollowedShow with adamID: %{private}lld, feedURL: %{private}s.",  (uint8_t *)v23,  0x16u);
    uint64_t v30 = v90;
    swift_arrayDestroy(v90, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    uint64_t v31 = v23;
    a1 = v97;
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {
    uint64_t v32 = *(void (**)(char *, uint64_t))(v6 + 8);
    v32(v12, v5);
    uint64_t v95 = v32;
    v32(v10, v5);
  }

  uint64_t v33 = *(void (**)(char *, uint64_t))(v92 + 8);
  uint64_t v34 = v16;
  uint64_t v35 = v101;
  v33(v34, v101);
  uint64_t v36 = *(void *)(v102
                  + OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_podcastsStateCoordinatorPersistentStore
                  + 24);
  uint64_t v37 = *(void *)(v102
                  + OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_podcastsStateCoordinatorPersistentStore
                  + 32);
  sub_1001361FC( (void *)(v102 + OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_podcastsStateCoordinatorPersistentStore),  v36);
  uint64_t v38 = (void *)dispatch thunk of PodcastsStateCoordinatorPersistentStoreProtocol.insertPodcastInStoreState(in:for:)( v94,  a1,  v36,  v37);
  unint64_t v39 = v100;
  uint64_t v40 = static Logger.podcastsStatesCoordination.getter(v38);
  LODWORD(v37) = static os_log_type_t.default.getter(v40);
  id v41 = v38;
  uint64_t v42 = v98;
  id v43 = v93;
  v93(v98, a1, v5);
  uint64_t v44 = v99;
  v43(v99, a1, v5);
  id v45 = v41;
  uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
  LODWORD(v94) = v37;
  os_log_type_t v47 = v37;
  uint64_t v48 = v46;
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v49 = swift_slowAlloc(82LL, -1LL);
    uint64_t v92 = swift_slowAlloc(192LL, -1LL);
    uint64_t v104 = v92;
    *(_DWORD *)uint64_t v49 = 136382467;
    id v50 = [v45 title];
    uint64_t v91 = v5;
    if (v50)
    {
      uint64_t v51 = v50;
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      unint64_t v54 = v53;
    }

    else
    {
      unint64_t v54 = 0xEA00000000003E65LL;
      uint64_t v52 = 0x6C746974206F6E3CLL;
    }

    uint64_t v93 = (void (*)(char *, uint64_t, uint64_t))v33;
    uint64_t v57 = 0x3E7974706D653CLL;
    id v103 = (id)sub_100178E7C(v52, v54, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v49 + 4, v49 + 12);

    swift_bridgeObjectRelease(v54);
    *(_WORD *)(v49 + 12) = 2080;
    id v58 = [v45 uuid];
    if (v58)
    {
      uint64_t v59 = v58;
      uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
      unint64_t v62 = v61;
    }

    else
    {
      unint64_t v62 = 0xE700000000000000LL;
      uint64_t v60 = 0x3E7974706D653CLL;
    }

    id v103 = (id)sub_100178E7C(v60, v62, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v49 + 14, v49 + 22);

    swift_bridgeObjectRelease(v62);
    *(_WORD *)(v49 + 22) = 2080;
    id v103 = [v45 managedObjectContext];
    uint64_t v63 = sub_100126450(&qword_1002B66C0);
    uint64_t v64 = String.init<A>(describing:)(&v103, v63);
    unint64_t v66 = v65;
    id v103 = (id)sub_100178E7C(v64, v65, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v49 + 24, v49 + 32);

    swift_bridgeObjectRelease(v66);
    *(_WORD *)(v49 + 32) = 2049;
    id v67 = [v45 storeCollectionId];

    id v103 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v49 + 34, v49 + 42);

    *(_WORD *)(v49 + 42) = 2081;
    id v68 = [v45 feedURL];
    if (v68)
    {
      uint64_t v69 = v68;
      uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
      unint64_t v71 = v70;
    }

    else
    {
      unint64_t v71 = 0xE700000000000000LL;
    }

    id v103 = (id)sub_100178E7C(v57, v71, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v49 + 44, v49 + 52);

    uint64_t v72 = swift_bridgeObjectRelease(v71);
    *(_WORD *)(v49 + 52) = 2049;
    uint64_t v73 = v98;
    uint64_t v74 = RemoteNonFollowedShow.storeCollectionId.getter(v72);
    uint64_t v75 = v73;
    uint64_t v76 = v91;
    uint64_t v77 = v95;
    v95(v75, v91);
    id v103 = (id)v74;
    uint64_t v78 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v49 + 54, v49 + 62);
    *(_WORD *)(v49 + 62) = 2081;
    uint64_t v79 = v99;
    uint64_t v80 = RemoteNonFollowedShow.feedURL.getter(v78);
    unint64_t v82 = v81;
    id v103 = (id)sub_100178E7C(v80, v81, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v49 + 64, v49 + 72);
    swift_bridgeObjectRelease(v82);
    v77(v79, v76);
    *(_WORD *)(v49 + 72) = 2080;
    uint64_t v83 = v96;
    uint64_t v84 = PodcastsStateChangeOrigin.description.getter(v96);
    unint64_t v86 = v85;
    id v103 = (id)sub_100178E7C(v84, v85, &v104);
    uint64_t v56 = v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v49 + 74, v49 + 82);
    swift_bridgeObjectRelease(v86);
    _os_log_impl( (void *)&_mh_execute_header,  v48,  (os_log_type_t)v94,  "Implicitly Following previously inserted Store podcast: %{private}s, uuid: %s, MOC: %s, adamID: %{private}lld, fee dURL: %{private}s; For RemoteNonFollowedShow with adamID: %{private}lld, feedURL: %{private}s; From origin: %s.",
      (uint8_t *)v49,
      0x52u);
    uint64_t v87 = v92;
    swift_arrayDestroy(v92, 6LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v87, -1LL, -1LL);
    swift_slowDealloc(v49, -1LL, -1LL);

    ((void (*)(char *, uint64_t))v93)(v100, v101);
    a1 = v97;
  }

  else
  {
    uint64_t v55 = v95;
    v95(v42, v5);

    v55(v44, v5);
    v33(v39, v35);
    uint64_t v56 = v96;
  }

  sub_10014F148(v45, 3LL, 4, v56);
  sub_10017A43C(v45, a1);
  return v45;
}