void sub_100004850(id a1)
{
  void *v1;
  v1 = (void *)objc_opt_class(&OBJC_CLASS___PBSSystemStatus);
  _[v1 addPermanentObserverForProperty:@"systemAttentionState" notifyInitial:0 invokeOnMainThread:1 handler:&stru_1000F6908];
}

void sub_100004884(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v1 postNotificationName:@"kPHSystemAttentionStateChanged" object:objc_opt_class(PBSSystemStatus)];
}

id sub_100004B10(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAlpha:0.0];
}

id sub_100004BD0(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAlpha:1.0];
}
}

void sub_100005CAC(uint64_t a1)
{
  v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[TVFaceTimeAppConfig sharedInstance](&OBJC_CLASS___TVFaceTimeAppConfig, "sharedInstance"));
  objc_msgSend( v2,  "_applyAutoRotationCorrectionForOrientation:withTransitionCoordinator:",  objc_msgSend(v3, "statusBarOrientation"),  *(void *)(a1 + 40));
}

BOOL sub_100005D78(id a1, UIWindow *a2)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[UIWindow windowScene](a2, "windowScene"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 session]);
  v4 = (void *)objc_claimAutoreleasedReturnValue([v3 role]);
  BOOL v5 = v4 == (void *)UIWindowSceneSessionRoleApplication;

  return v5;
}

LABEL_30:
    }

    v21 = sub_100011210();
    v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "PHLocalVideoViewController startPreview",  buf,  2u);
    }

    v23 = (void *)objc_claimAutoreleasedReturnValue(-[PHLocalVideoViewController disabledOverlayView](self, "disabledOverlayView"));
    if (v23)
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(-[PHLocalVideoViewController disabledOverlayView](self, "disabledOverlayView"));
      [v24 removeFromSuperview];

      -[PHLocalVideoViewController setDisabledOverlayView:](self, "setDisabledOverlayView:", 0LL);
    }

    v25 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s currentInputDevice](v6, "currentInputDevice"));

    if (v25)
    {
      -[os_log_s startPreview](v6, "startPreview");
    }

    else
    {
      v26 = sub_100011210();
      v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "PHLocalVideoViewController was asked to start preview, but the current input device is nil",  buf,  2u);
      }
    }
  }

LABEL_41:
}

  if (v11 != 0x2000000)
  {
    v39 = sub_100036FBC(a1, a2);
    [v39 setSelected:HIBYTE(a3) & 1];
  }

  if (v31)
  {
    if ((v3[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController_isHiding] & 1) == 0)
    {
      v3[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController_isHiding] = 0;
      v40 = (void *)objc_opt_self(&OBJC_CLASS___UIView, a2);
      v41 = swift_allocObject(&unk_1000F85C8, 32LL, 7LL);
      *(void *)(v41 + 16) = v3;
      *(void *)(v41 + 24) = 0x3FF0000000000000LL;
      v47[4] = sub_10003883C;
      v48 = v41;
      v47[0] = _NSConcreteStackBlock;
      v47[1] = 1107296256LL;
      v47[2] = sub_100027654;
      v47[3] = &unk_1000F85E0;
      v42 = _Block_copy(v47);
      v43 = v48;
      v44 = v3;
      swift_release(v43);
      [v40 animateWithDuration:v42 animations:0.5];
      _Block_release(v42);
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

          __break(1u);
          goto LABEL_31;
        }

void sub_100006410(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localVideoView]);
  [v1 setAlpha:1.0];
}

void sub_100006F2C(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___PHDevice);
  v2 = (void *)qword_100116898;
  qword_100116898 = (uint64_t)v1;
}

void sub_100006F94(id a1)
{
  int v7 = 0;
  id v1 = (const __CFBoolean *)MGCopyAnswerWithError(@"jkr5aFPOh/d6zTzNKYthBw", 0LL, &v7);
  if (v1)
  {
    v2 = v1;
    if (v7)
    {
      id v3 = sub_100011210();
      v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_1000BB328(&v7, v4);
      }
    }

    else
    {
      byte_1001168A8 = CFBooleanGetValue(v1) != 0;
    }

    CFRelease(v2);
  }

  else
  {
    id v5 = sub_100011210();
    v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000BB2E8(v6);
    }
  }

id sub_10000712C(uint64_t a1)
{
  v2 = objc_alloc(&OBJC_CLASS___RadiosPreferences);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dispatchQueue]);
  v4 = -[RadiosPreferences initWithQueue:](v2, "initWithQueue:", v3);
  uint64_t v5 = *(void *)(a1 + 32);
  v6 = *(void **)(v5 + 24);
  *(void *)(v5 + 24) = v4;

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "setDelegate:");
  *(_BYTE *)(*(void *)(a1 + 32) + 8) = [*(id *)(a1 + 32) fetchCellularRadioEnabled];
  id result = [*(id *)(a1 + 32) fetchRingerSwitchEnabled];
  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = (_BYTE)result;
  return result;
}

void sub_1000072C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000072DC(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 8LL);
  return result;
}

void sub_10000736C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v1 + 8) != v2)
  {
    *(_BYTE *)(v1 + _Block_object_dispose(va, 8) = v2;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000073E0;
    block[3] = &unk_1000F6930;
    block[4] = *(void *)(a1 + 32);
    dispatch_async(&_dispatch_main_q, block);
  }

void sub_1000073E0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:@"PHDeviceCellularRadioEnabledDidChangeNotification" object:*(void *)(a1 + 32)];
}

void sub_1000074D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000074E8(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 9LL);
  return result;
}

void sub_100007578(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v1 + 9) != v2)
  {
    *(_BYTE *)(v1 + 9) = v2;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000075EC;
    block[3] = &unk_1000F6930;
    block[4] = *(void *)(a1 + 32);
    dispatch_async(&_dispatch_main_q, block);
  }

void sub_1000075EC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:@"PHDeviceRingerSwitchDidChangeNotification" object:*(void *)(a1 + 32)];
}

void sub_100007710( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100007728(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100007738(uint64_t a1)
{
}

void sub_100007740(uint64_t a1)
{
}

void sub_100007874( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100007898(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setRingerSwitchEnabled:", objc_msgSend(WeakRetained, "fetchRingerSwitchEnabled"));
}

void sub_100007A3C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___PHInCallUtilities);
  id v2 = (void *)qword_1001168B8;
  qword_1001168B8 = (uint64_t)v1;
}

void sub_100007D54()
{
  id v0 = sub_100011210();
  uint64_t v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(v0);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "LockscreenMessagingChangedNotification", v2, 2u);
  }

  byte_1001168DA = 0;
}

void sub_100007DC0()
{
  id v0 = sub_100011210();
  uint64_t v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(v0);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "LostMode changed", v2, 2u);
  }

  byte_1001168D8 = 0;
}

void sub_100008680(uint64_t a1)
{
  int v2 = BYSetupAssistantNeedsToRun();
  byte_1001168E8 = v2;
  if (v2)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver( DarwinNotifyCenter,  *(const void **)(a1 + 32),  (CFNotificationCallback)sub_1000086DC,  BYSetupAssistantFinishedDarwinNotification,  0LL,  CFNotificationSuspensionBehaviorDrop);
  }

void sub_1000086DC(__CFNotificationCenter *a1, const void *a2, const __CFString *a3)
{
  byte_1001168E8 = 0;
  CFNotificationCenterRemoveObserver(a1, a2, a3, 0LL);
}

uint64_t sub_1000089D0(uint64_t a1)
{
  uint64_t v3 = 0LL;
  v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v1 = qword_1001168F0;
  uint64_t v6 = qword_1001168F0;
  if (!qword_1001168F0)
  {
    __int128 v7 = *(_OWORD *)off_1000F6A90;
    uint64_t v8 = 0LL;
    uint64_t v1 = _sl_dlopen(&v7, a1);
    v4[3] = v1;
    qword_1001168F0 = v1;
  }

  _Block_object_dispose(&v3, 8);
  return v1;
}

void sub_100008A84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100008A9C()
{
  uint64_t v3 = 0LL;
  v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = qword_1001168F8;
  uint64_t v6 = qword_1001168F8;
  if (!qword_1001168F8)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472LL;
    v2[2] = sub_100008B48;
    v2[3] = &unk_1000F6AB0;
    v2[4] = &v3;
    sub_100008B48((uint64_t)v2);
    uint64_t v0 = v4[3];
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100008B30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void *sub_100008B48(uint64_t a1)
{
  uint64_t v5 = 0LL;
  int v2 = (void *)sub_1000089D0((uint64_t)&v5);
  uint64_t v3 = v5;
  if (!v2)
  {
    uint64_t v3 = (char *)abort_report_np("%s", v5);
    goto LABEL_5;
  }

  if (v5) {
LABEL_5:
  }
    free(v3);
  id result = dlsym(v2, "_AXSPhoneLockToEndCallEnabled");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  qword_1001168F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

uint64_t sub_100008BD0()
{
  if (qword_100116908 != -1) {
    dispatch_once(&qword_100116908, &stru_1000F6AD0);
  }
  return qword_100116900;
}

void sub_100008C10(id a1)
{
  os_log_t v1 = os_log_create("com.apple.calls.tvfacetime", "PiP");
  int v2 = (void *)qword_100116900;
  qword_100116900 = (uint64_t)v1;
}

void sub_100008FE0(id a1)
{
  os_log_t v1 = objc_alloc_init(&OBJC_CLASS___TVFaceTimeAppConfig);
  int v2 = (void *)qword_100116910;
  qword_100116910 = (uint64_t)v1;
}

LABEL_8:
  v4 = 0;
LABEL_11:
  v10 = sub_100011210();
  v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v13[0] = 67110912;
    v13[1] = v4;
    v14 = 1024;
    v15 = -[TUCall disconnectedReason](self, "disconnectedReason");
    v16 = 1024;
    v17 = -[TUCall isIncoming](self, "isIncoming");
    v18 = 1024;
    v19 = -[TUCall isConnecting](self, "isConnecting");
    v20 = 1024;
    v21 = v9;
    v22 = 1024;
    v23 = -[TUCall isConversation](self, "isConversation");
    v24 = 1024;
    v25 = v7;
    v26 = 1024;
    v27 = v6 == 0LL;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "disconnectedReasonRequiresCallBackUI = %d (disconnectedReason: %d, isIncoming: %d, isConnecting: %d, isSpringBoard PasscodeLocked: %d, isConversation: %d, isOneToOneModeEnabled: %d, conversationIsNil: %d)",  (uint8_t *)v13,  0x32u);
  }

  return v4;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_13:
  return (char)v7;
}

  __break(1u);
}

    return;
  }

  if (a2 == 1)
  {
    if (a4 == 1)
    {
      sub_10001C5D0(0LL, &qword_100114958, &OBJC_CLASS___AVCaptureDevice_ptr);
      v23 = a3;
      v24 = v39;
      if ((static NSObject.== infix(_:_:)(v24, v23) & 1) != 0)
      {

        return;
      }

      *v11 = v23;
      swift_storeEnumTagMultiPayload(v11, v9, 0LL);
      v27 = v23;
      sub_100056F4C((uint64_t)v11);

      goto LABEL_18;
    }

    goto LABEL_16;
  }

  if (!a4) {
    goto LABEL_13;
  }
  if (a4 == 1) {
    goto LABEL_12;
  }
  v26 = (uint64_t)&Strong[OBJC_IVAR___TVFaceTimeRootViewController_state];
  swift_beginAccess(&Strong[OBJC_IVAR___TVFaceTimeRootViewController_state], v42, 0LL, 0LL);
  sub_1000606A8(v26, (uint64_t)v20, type metadata accessor for RootViewController.State);
  sub_1000606A8((uint64_t)v20, (uint64_t)v18, type metadata accessor for RootViewController.State);
  if (swift_getEnumCaseMultiPayload(v18, v12) == 4)
  {
    sub_10001C644((uint64_t)v20, type metadata accessor for RootViewController.State);
    goto LABEL_16;
  }

  sub_10001C644((uint64_t)v18, type metadata accessor for RootViewController.State);
  sub_10001C644((uint64_t)v20, type metadata accessor for RootViewController.State);
  if (qword_1001122B8 != -1) {
    swift_once(&qword_1001122B8, sub_100056180);
  }
  v28 = type metadata accessor for Logger(0LL);
  sub_10001C270(v28, (uint64_t)qword_100114740);
  v29 = v22;
  v30 = (os_log_s *)Logger.logObject.getter(v29);
  v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v33 = swift_slowAlloc(32LL, -1LL);
    v41 = v33;
    *(_DWORD *)v32 = 136315138;
    v39 = v32 + 4;
    sub_1000606A8(v26, (uint64_t)v15, type metadata accessor for RootViewController.State);
    sub_100056764();
    v35 = v34;
    v37 = v36;
    sub_10001C644((uint64_t)v15, type metadata accessor for RootViewController.State);
    v40 = sub_1000850E4(v35, v37, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v39, v32 + 12);

    swift_bridgeObjectRelease(v37);
    _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "Transitioned from capture device (.unavailable -> .unavailable) in state %s",  v32,  0xCu);
    swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {
  }

    id result = sub_10008536C(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

void sub_100009D88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100009DB0(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSHashTable weakObjectsHashTable](&OBJC_CLASS___NSHashTable, "weakObjectsHashTable"));
  int v2 = (void *)qword_100116920;
  qword_100116920 = v1;

  uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSMapTable weakToStrongObjectsMapTable](&OBJC_CLASS___NSMapTable, "weakToStrongObjectsMapTable"));
  v4 = (void *)qword_100116928;
  qword_100116928 = v3;
}

uint64_t sub_100009DFC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100009E0C(uint64_t a1)
{
}

void sub_100009E14(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (!a2 || v5)
  {
    id v10 = sub_100011210();
    v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1000BB444();
    }
  }

  else
  {
    uint64_t v7 = objc_claimAutoreleasedReturnValue([a2 firstObject]);
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
    v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100009F1C(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  int v2 = (void *)qword_100116938;
  qword_100116938 = (uint64_t)v1;
}

void sub_10000A0D4(id a1)
{
  id v1 = [[CoreTelephonyClient alloc] initWithQueue:&_dispatch_main_q];
  int v2 = (void *)qword_100116948;
  qword_100116948 = (uint64_t)v1;
}

void sub_10000A718(id a1)
{
  id v5 = objc_alloc_init(&OBJC_CLASS___TUCallProviderManager);
  id v1 = (void *)objc_claimAutoreleasedReturnValue([v5 telephonyProvider]);
  int v2 = (void *)objc_claimAutoreleasedReturnValue([v1 identifier]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v5 providerWithIdentifier:v2]);
  v4 = (void *)qword_100116960;
  qword_100116960 = v3;
}

void sub_10000A7CC(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___FBSOrientationObserver);
  int v2 = (void *)qword_100116968;
  qword_100116968 = (uint64_t)v1;
}

void sub_10000ACEC(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) isSpringBoardLocked];
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 != v2)
  {
    [*(id *)(a1 + 32) setSpringBoardLocked:v3 != 0];
    id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v4 postNotificationName:@"PHLockScreenStatusChangedNotification" object:*(void *)(a1 + 32)];
  }

void *sub_10000AD6C(uint64_t a1)
{
  id v5 = 0LL;
  if (!qword_100116980)
  {
    __int128 v6 = off_1000F6BD8;
    uint64_t v7 = 0LL;
    qword_100116980 = _sl_dlopen(&v6, &v5);
    int v3 = v5;
    unsigned int v2 = (void *)qword_100116980;
    if (qword_100116980)
    {
      if (!v5) {
        goto LABEL_5;
      }
    }

    else
    {
      int v3 = (char *)abort_report_np("%s", v5);
    }

    free(v3);
    goto LABEL_5;
  }

  unsigned int v2 = (void *)qword_100116980;
LABEL_5:
  id result = dlsym(v2, "SBSGetScreenLockStatus");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  off_100116978 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void sub_10000AE5C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

LABEL_11:
  v18 = *(double *)&v8;
  v19 = *(double *)&v10;
  result.height = v19;
  result.width = v18;
  return result;
}

    goto LABEL_12;
  }

  v12 = *(void **)(v0 + 160);
LABEL_12:

  swift_task_dealloc(*(void *)(v0 + 112));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

  __break(1u);
  return result;
}

    v17 = *(char **)&v8[v14];
    *(void *)&v8[v14] = 0LL;

    uint64_t v8 = v17;
    goto LABEL_12;
  }
}

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1LL);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_1000678D4(v15, a4 & 1, &qword_100114B18);
  v20 = sub_10002FB98(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v39 = (NSBundle *)[v5 mainBundle];
    v53._object = (void *)0xEB00000000656C62LL;
    v40._object = (void *)0x80000001000DBCF0LL;
    v40._countAndFlagsBits = 0xD000000000000016LL;
    v41._countAndFlagsBits = 0LL;
    v41._object = (void *)0xE000000000000000LL;
    v53._countAndFlagsBits = 0x617A696C61636F4CLL;
    v42 = NSLocalizedString(_:tableName:bundle:value:comment:)(v40, (Swift::String_optional)0, v39, v41, v53);
    countAndFlagsBits = v42._countAndFlagsBits;
    object = v42._object;

    v25 = sub_100085938(a1);
    v26 = v43;
    goto LABEL_12;
  }

  v13 = v45;
  v14 = sub_10001949C( &qword_100112848,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000C4444);
  _BridgedStoredNSError.code.getter(&v46, v12, v14);
  if (v46 == 25)
  {
    v35 = (NSBundle *)[v5 mainBundle];
    v36._countAndFlagsBits = 0xD000000000000038LL;
    v52._object = (void *)0xEB00000000656C62LL;
    v36._object = (void *)0x80000001000DBD70LL;
    v37._countAndFlagsBits = 0LL;
    v37._object = (void *)0xE000000000000000LL;
    v52._countAndFlagsBits = 0x617A696C61636F4CLL;
    v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v36, (Swift::String_optional)0, v35, v37, v52);
    countAndFlagsBits = v38._countAndFlagsBits;
    object = v38._object;

    v25 = 0LL;
    v26 = 0LL;
    goto LABEL_12;
  }

  if (v46 != 23)
  {

    goto LABEL_11;
  }

  v15 = (NSBundle *)[v5 mainBundle];
  v16._countAndFlagsBits = 0xD000000000000024LL;
  v48._object = (void *)0xEB00000000656C62LL;
  v16._object = (void *)0x80000001000DBDB0LL;
  v17._countAndFlagsBits = 0LL;
  v17._object = (void *)0xE000000000000000LL;
  v48._countAndFlagsBits = 0x617A696C61636F4CLL;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, v15, v17, v48);
  countAndFlagsBits = v18._countAndFlagsBits;
  object = v18._object;

  v21 = (NSBundle *)[v5 mainBundle];
  v22._countAndFlagsBits = 0xD000000000000026LL;
  v49._object = (void *)0xEB00000000656C62LL;
  v22._object = (void *)0x80000001000DB460LL;
  v23._countAndFlagsBits = 0LL;
  v23._object = (void *)0xE000000000000000LL;
  v49._countAndFlagsBits = 0x617A696C61636F4CLL;
  v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, (Swift::String_optional)0, v21, v23, v49);
  v25 = v24._countAndFlagsBits;
  v26 = v24._object;

LABEL_12:
  *(void *)a3 = countAndFlagsBits;
  *(void *)(a3 + _Block_object_dispose(va, 8) = object;
  *(Swift::String *)(a3 + 16) = v9;
  *(void *)(a3 + 32) = nullsub_1;
  *(void *)(a3 + 40) = 0LL;
  *(void *)(a3 + 4_Block_object_dispose(va, 8) = v25;
  *(void *)(a3 + 56) = v26;
  id result = 0.0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(void *)(a3 + 12_Block_object_dispose(va, 8) = 0LL;
  return result;
}

void sub_10000BB44(id a1)
{
  id v1 = -[PHPIPController initForScreenSharing:](objc_alloc(&OBJC_CLASS___PHPIPController), "initForScreenSharing:", 0LL);
  unsigned int v2 = (void *)qword_100116988;
  qword_100116988 = (uint64_t)v1;
}

id sub_10000BF3C(uint64_t a1, void *a2)
{
  if (*(_BYTE *)(a1 + 32)) {
    uint64_t v2 = 5LL;
  }
  else {
    uint64_t v2 = 4LL;
  }
  return _[a2 setContentType:v2];
}

LABEL_23:
        ((void (*)(void *, uint64_t))v9[2])(v9, v10);
LABEL_24:
        -[PHPIPController setPipDeviceOrientation:](self, "setPipDeviceOrientation:", a3);

        objc_destroyWeak(&v15);
        objc_destroyWeak((id *)buf);
        goto LABEL_25;
      default:
        goto LABEL_24;
    }
  }

  if (v6) {
    v6[2](v6);
  }
LABEL_25:
}

  if (v7 > 2271)
  {
    if (v7 > 2531)
    {
      if (v7 > 2731)
      {
        if (v7 == 2732 || v7 == 2752)
        {
          v9 = 7LL;
          goto LABEL_47;
        }

        if (v7 == 2778)
        {
          v9 = 14LL;
          goto LABEL_47;
        }

        goto LABEL_48;
      }

      if (v7 == 2532)
      {
        v9 = 12LL;
        goto LABEL_47;
      }

      if (v7 != 2688) {
        goto LABEL_48;
      }
LABEL_74:
      v9 = 5LL;
      goto LABEL_47;
    }

    if (v7 > 2387)
    {
      if (v7 != 2388)
      {
        if (v7 != 2436) {
          goto LABEL_48;
        }
        goto LABEL_77;
      }
    }

    else
    {
      if (v7 == 2272)
      {
LABEL_5:
        v9 = 0LL;
LABEL_47:
        qword_100116998 = v9;
        goto LABEL_48;
      }

      if (v7 != 2360) {
        goto LABEL_48;
      }
    }

    v9 = 8LL;
    goto LABEL_47;
  }

  v9 = 2LL;
  if (v7 > 2000)
  {
    if (v7 > 2078)
    {
      switch(v7)
      {
        case 2079:
          v9 = 9LL;
          break;
        case 2208:
          v9 = 6LL;
          break;
        case 2224:
          v9 = 3LL;
          break;
        default:
          goto LABEL_48;
      }

      goto LABEL_47;
    }

    if (v7 != 2001)
    {
      if (v7 == 2048) {
        goto LABEL_47;
      }
      goto LABEL_48;
    }

    v14 = (v20 - 1) & v20;
    v65 = v21;
    v18 = __clz(__rbit64(v20)) + (v21 << 6);
LABEL_24:
    v23 = v62;
    v24 = *(void *)(v62 + 48);
    v25 = type metadata accessor for UUID(0LL);
    v26 = *(void *)(v25 - 8);
    v27 = v24 + *(void *)(v26 + 72) * v18;
    v28 = *(void (**)(void))(v26 + 16);
    v29 = v61;
    ((void (*)(char *, uint64_t, uint64_t))v28)(v61, v27, v25);
    v30 = *(void *)(v23 + 56) + 24 * v18;
    v31 = *(void *)(v30 + 16);
    v32 = v63;
    v33 = &v29[*(int *)(v63 + 48)];
    v67 = *(_OWORD *)v30;
    *(_OWORD *)v33 = v67;
    *((void *)v33 + 2) = v31;
    v34 = (uint64_t)v29;
    v35 = v4;
    sub_100052900(v34, (uint64_t)v9, v4);
    v36 = *(int *)(v32 + 48);
    v37 = &v68[v36];
    v38 = &v9[v36];
    v28();
    v39 = *((void *)v38 + 2);
    v66 = *(_OWORD *)v38;
    *(_OWORD *)v37 = v66;
    *((void *)v37 + 2) = v39;
    v40 = (id)v67;
    swift_retain(v31);
    v41 = [(id)v66 identifier];
    if (v41)
    {
      v42 = v41;
      v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      v45 = v44;
    }

    else
    {
      v43 = 0LL;
      v45 = 0LL;
    }

    v46 = [v64 identifier];
    if (!v46)
    {
      if (!v45) {
        goto LABEL_38;
      }
LABEL_35:
      v51 = v45;
LABEL_5:
      v16 = swift_bridgeObjectRelease(v51);
      (*(void (**)(char *, uint64_t, __n128))(v26 + 8))(v68, v25, v16);
      goto LABEL_6;
    }

    v48 = v46;
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
    v51 = v50;

    if (!v45)
    {
      if (!v51) {
        goto LABEL_38;
      }
      goto LABEL_5;
    }

    if (!v51) {
      goto LABEL_35;
    }
    if (v43 == v49 && v45 == v51)
    {
      swift_bridgeObjectRelease(v45);
      v47 = swift_bridgeObjectRelease(v51);
LABEL_38:
      (*(void (**)(char *, uint64_t, __n128))(v26 + 8))(v68, v25, v47);
LABEL_39:
      swift_release(v62);
      v54 = v57;
      sub_100052900((uint64_t)v60, v57, &qword_100114B38);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v56 + 56))(v54, 0LL, 1LL, v63);
LABEL_40:

      return;
    }

    v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v45, v49, v51, 0LL);
    swift_bridgeObjectRelease(v45);
    v53 = swift_bridgeObjectRelease(v51);
    (*(void (**)(char *, uint64_t, __n128))(v26 + 8))(v68, v25, v53);
    if ((v52 & 1) != 0) {
      goto LABEL_39;
    }
LABEL_6:
    v9 = v60;
    id v4 = v35;
    sub_10001C608((uint64_t)v60, v35);
    v15 = v65;
  }

  while (1)
  {
    v21 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v21 >= v59) {
      goto LABEL_36;
    }
    v20 = *(void *)(v58 + 8 * v21);
    ++v22;
    if (v20) {
      goto LABEL_23;
    }
  }

    v16 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_24:
    v28 = *(void *)(v7 + 72);
    v29 = *(void *)(v10 + 48) + v28 * v23;
    if ((v50 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 32))(v9, v29, v6, v18);
      v30 = *(void *)(v10 + 56) + 24 * v23;
      v51 = *(__n128 *)v30;
      v31 = *(void *)(v30 + 16);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v9, v29, v6, v18);
      v32 = *(void *)(v10 + 56) + 24 * v23;
      v31 = *(void *)(v32 + 16);
      v51 = *(__n128 *)v32;
      v33 = (id)v51.n128_u64[0];
      swift_retain(v31);
    }

    v34 = *(void *)(v12 + 40);
    v35 = sub_10001949C( &qword_1001136D0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v36 = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v6, v35);
    v37 = -1LL << *(_BYTE *)(v12 + 32);
    v38 = v36 & ~v37;
    v39 = v38 >> 6;
    if (((-1LL << v38) & ~*(void *)(v17 + 8 * (v38 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1LL << v38) & ~*(void *)(v17 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        v42 = v39 == v41;
        if (v39 == v41) {
          v39 = 0LL;
        }
        v40 |= v42;
        v43 = *(void *)(v17 + 8 * v39);
      }

      while (v43 == -1);
      v20 = __clz(__rbit64(~v43)) + (v39 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(void *)(v12 + 48) + v28 * v20, v9, v6);
    v21 = *(void *)(v12 + 56) + 24 * v20;
    v18 = v51;
    *(__n128 *)v21 = v51;
    *(void *)(v21 + 16) = v31;
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  int v3 = v46;
  v25 = v48;
  if ((v50 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  v44 = 1LL << *(_BYTE *)(v10 + 32);
  if (v44 >= 64) {
    bzero(v25, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *v25 = -1LL << v44;
  }
  *(void *)(v10 + 16) = 0LL;
LABEL_43:
  swift_release(v10);
  *int v3 = v12;
}

    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(void *)(v7 + 72);
    v28 = *(void *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 32))(v9, v28, v6, v18);
      v46 = *(__n128 *)(*(void *)(v10 + 56) + 16 * v22);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v9, v28, v6, v18);
      v46 = *(__n128 *)(*(void *)(v10 + 56) + 16 * v22);
      v29 = (id)v46.n128_u64[0];
      v30 = (id)v46.n128_u64[1];
    }

    v31 = *(void *)(v12 + 40);
    v32 = sub_10001949C( &qword_1001136D0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v33 = dispatch thunk of Hashable._rawHashValue(seed:)(v31, v6, v32);
    v34 = -1LL << *(_BYTE *)(v12 + 32);
    v35 = v33 & ~v34;
    v36 = v35 >> 6;
    if (((-1LL << v35) & ~*(void *)(v17 + 8 * (v35 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1LL << v35) & ~*(void *)(v17 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        v39 = v36 == v38;
        if (v36 == v38) {
          v36 = 0LL;
        }
        v37 |= v39;
        v40 = *(void *)(v17 + 8 * v36);
      }

      while (v40 == -1);
      v20 = __clz(__rbit64(~v40)) + (v36 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(void *)(v12 + 48) + v27 * v20, v9, v6);
    v18 = v46;
    *(__n128 *)(*(void *)(v12 + 56) + 16 * v20) = v46;
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  int v3 = v42;
  v24 = v44;
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  v41 = 1LL << *(_BYTE *)(v10 + 32);
  if (v41 >= 64) {
    bzero(v24, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *v24 = -1LL << v41;
  }
  *(void *)(v10 + 16) = 0LL;
LABEL_43:
  swift_release(v10);
  *int v3 = v12;
}

    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(void *)(v7 + 72);
    v28 = *(void *)(v10 + 48) + v27 * v22;
    if ((v46 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 32))(v9, v28, v6, v18);
      v29 = *(id *)(*(void *)(v10 + 56) + 8 * v22);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v9, v28, v6, v18);
      v29 = *(id *)(*(void *)(v10 + 56) + 8 * v22);
    }

    v30 = *(void *)(v12 + 40);
    v31 = sub_10001949C( &qword_1001136D0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v32 = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v33 = -1LL << *(_BYTE *)(v12 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1LL << v34) & ~*(void *)(v17 + 8 * (v34 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1LL << v34) & ~*(void *)(v17 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        v38 = v35 == v37;
        if (v35 == v37) {
          v35 = 0LL;
        }
        v36 |= v38;
        v39 = *(void *)(v17 + 8 * v35);
      }

      while (v39 == -1);
      v20 = __clz(__rbit64(~v39)) + (v35 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(void *)(v12 + 48) + v27 * v20, v9, v6);
    *(void *)(*(void *)(v12 + 56) + 8 * v20) = v29;
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  int v3 = v42;
  v24 = v44;
  if ((v46 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  v40 = 1LL << *(_BYTE *)(v10 + 32);
  if (v40 >= 64) {
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *v24 = -1LL << v40;
  }
  *(void *)(v10 + 16) = 0LL;
LABEL_43:
  swift_release(v10);
  *int v3 = v12;
}

    id v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = v9[5];
    v19 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    id result = NSObject._rawHashValue(seed:)(v18);
    v20 = -1LL << *((_BYTE *)v9 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        v26 = v22 == v25;
        if (v22 == v25) {
          v22 = 0LL;
        }
        v24 |= v26;
        v27 = *(void *)(v12 + 8 * v22);
      }

      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }

    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    *(void *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v5) {
      goto LABEL_36;
    }
  }

  v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  v16 = v29[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    v16 = v29[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

    v82 = (char *)v8 + *(int *)(v4 + 48);
    v83 = v100;
    *uint64_t v8 = v46;
    v8[1] = v83;
    v84 = ((uint64_t (*)(char *, char *, uint64_t))v97)(v82, v98, v19);
    __chkstk_darwin(v84);
    v96[2] = v52;
    v96[3] = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    v85 = sub_100092098((void (*)(uint64_t *__return_ptr, id *))sub_100095C4C, (uint64_t)v96, v51);
    sub_10001C608((uint64_t)v8, &qword_1001128F8);
    swift_release(v51);
    v86 = *(char **)(v52 + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_contactPickerControl);
    v87 = swift_allocObject(&unk_1000FB718, 24LL, 7LL);
    *(void *)(v87 + 16) = v85;
    v88 = (uint64_t *)&v86[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_menuProvider];
    v89 = *(void *)&v86[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_menuProvider];
    v90 = *(void *)&v86[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_menuProvider + 8];
    *v88 = (uint64_t)sub_100095C8C;
    v88[1] = v87;
    v91 = v86;
    swift_retain(v87);
    sub_10001C08C(v89, v90);
    v92 = *v88;
    v93 = v88[1];
    if (v92)
    {
      v94 = swift_allocObject(&unk_1000FB740, 32LL, 7LL);
      *(void *)(v94 + 16) = v92;
      *(void *)(v94 + 24) = v93;
      v95 = sub_100095C94;
    }

    else
    {
      v95 = 0LL;
      v94 = 0LL;
    }

    v77 = (uint64_t)v102;
    sub_10002AE44(v92, v93);
    sub_10001C08C((uint64_t)v95, v94);
    [v91 setShowsMenuAsPrimaryAction:v92 != 0];
    [v91 setContextMenuInteractionEnabled:v92 != 0];

    swift_release(v87);
    goto LABEL_27;
  }

  v78 = swift_bridgeObjectRetain(v51);
  v79 = _CocoaArrayWrapper.endIndex.getter(v78);
  swift_release(v51);
  v52 = v103;
  if (v79 != 1) {
    goto LABEL_23;
  }
  v53 = v46;
  swift_retain(v51);
  v81 = _CocoaArrayWrapper.endIndex.getter(v80);
  v54 = v100;
  if (!v81)
  {
    swift_release(v51);
    v46 = v53;
    goto LABEL_23;
  }

  v77 = (unint64_t)_swiftEmptyArrayStorage;
  sub_1000ABC58(0, v39 & ~(v39 >> 63), 0);
  if (v39 < 0)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }

  v40 = 0LL;
  v41 = (void *)v77;
  v42 = v72;
  do
  {
    if ((v35 & 0xC000000000000001LL) != 0) {
      v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v40, v35);
    }
    else {
      v43 = *(id *)(v35 + 8 * v40 + 32);
    }
    RecentsCallItem.init(_:)(v43);
    v77 = (unint64_t)v41;
    v45 = v41[2];
    v44 = v41[3];
    if (v45 >= v44 >> 1)
    {
      sub_1000ABC58(v44 > 1, v45 + 1, 1);
      v42 = v72;
      v41 = (void *)v77;
    }

    ++v40;
    v41[2] = v45 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))( (unint64_t)v41 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
    + *(void *)(v7 + 72) * v45,
      v42,
      v6);
    v23 = (uint64_t)v76;
  }

  while (v39 != v40);
  swift_release(v35);
LABEL_34:
  v47 = [v71 favorites];
  v48 = sub_10001C5D0(0LL, (unint64_t *)&unk_100114C30, &OBJC_CLASS___TUContinuityFavorite_ptr);
  v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v47, v48);

  if (!((unint64_t)v49 >> 62))
  {
    v50 = *(void *)((v49 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v49);
    if (v50) {
      goto LABEL_36;
    }
LABEL_53:
    v53 = (char *)_swiftEmptyArrayStorage;
LABEL_54:
    swift_bridgeObjectRelease_n(v49, 2LL);
    v62 = v71;
    v63 = [v71 recentCalls];
    v64 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v63, &type metadata for Data);

    v65 = v62;
    v66 = (char *)v70;
    v67 = sub_1000B0798(v64, v65, (uint64_t)v66);
    swift_bridgeObjectRelease(v64);

    v77 = (unint64_t)v41;
    sub_1000AC8AC((uint64_t)v53);
    sub_1000AC8AC((uint64_t)v67);
    v68 = *(void *)&v66[OBJC_IVAR____TtCC8FaceTime24ContinuitySessionManager19RecentCallsProvider_queue_recentCallItems];
    *(void *)&v66[OBJC_IVAR____TtCC8FaceTime24ContinuitySessionManager19RecentCallsProvider_queue_recentCallItems] = v77;

    swift_bridgeObjectRelease(v68);
    sub_1000A8B94(v66);
    return;
  }

  if (v49 < 0) {
    v61 = v49;
  }
  else {
    v61 = v49 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v49);
  v50 = _CocoaArrayWrapper.endIndex.getter(v61);
  if (!v50) {
    goto LABEL_53;
  }
LABEL_36:
  if (v50 >= 1)
  {
    v51 = 0LL;
    v52 = v49 & 0xC000000000000001LL;
    v53 = (char *)_swiftEmptyArrayStorage;
    v72 = (char *)v50;
    v73 = v49 & 0xC000000000000001LL;
    do
    {
      if (v52) {
        v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v51, v49);
      }
      else {
        v54 = *(id *)(v49 + 8 * v51 + 32);
      }
      v55 = v54;
      RecentsCallItem.init(_:)();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v23, 0LL, 1LL, v6);

      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v23, 1LL, v6) == 1)
      {
        sub_10001C608(v23, (uint64_t *)&unk_100115FD0);
      }

      else
      {
        v56 = v49;
        v57 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 32);
        v58 = v74;
        v57(v74, v23, v6);
        v57(v75, (uint64_t)v58, v6);
        if ((swift_isUniquelyReferenced_nonNull_native(v53) & 1) == 0) {
          v53 = (char *)sub_100019D10(0, *((void *)v53 + 2) + 1LL, 1, (unint64_t)v53);
        }
        v60 = *((void *)v53 + 2);
        v59 = *((void *)v53 + 3);
        if (v60 >= v59 >> 1) {
          v53 = (char *)sub_100019D10(v59 > 1, v60 + 1, 1, (unint64_t)v53);
        }
        *((void *)v53 + 2) = v60 + 1;
        v57( &v53[((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
             + *(void *)(v7 + 72) * v60],
          (uint64_t)v75,
          v6);
        v23 = (uint64_t)v76;
        v49 = v56;
        v50 = (uint64_t)v72;
        v52 = v73;
      }

      ++v51;
    }

    while (v50 != v51);
    goto LABEL_54;
  }

  __break(1u);
LABEL_24:
  v24 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v24,  1092LL,  0);
  __break(1u);
}

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001C5D0(0LL, &qword_100112948, &OBJC_CLASS___TUContinuityHandleAnonym_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

      __break(1u);
      goto LABEL_24;
    }

    __break(1u);
    goto LABEL_23;
  }

  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }

  if (a4 < 0) {
    v11 = a4;
  }
  else {
    v11 = a4 & 0xFFFFFFFFFFFFFF8LL;
  }
  v12 = __CocoaSet.element(at:)(a1, a2, v11);
  v24 = v12;
  v13 = sub_10001C5D0(0LL, a5, a6);
  swift_unknownObjectRetain(v12);
  swift_dynamicCast(&v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v13, 7LL);
  swift_unknownObjectRelease(v12);
}

            __break(1u);
            goto LABEL_24;
          }

void sub_10000C598(_Unwind_Exception *a1)
{
}

void sub_10000C5BC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained setRotating:0];
  int v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v3 postNotificationName:@"PHPIPControllerDidRotateNotification" object:*(void *)(a1 + 32)];

  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    (*(void (**)(void))(v4 + 16))();
  }
  if ([WeakRetained wantsPreferredContentSizeUpdateAfterRotationFinishes])
  {
    [WeakRetained setWantsPreferredContentSizeUpdateAfterRotationFinishes:0];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10000C690;
    block[3] = &unk_1000F6930;
    block[4] = WeakRetained;
    dispatch_async(&_dispatch_main_q, block);
  }
}

void sub_10000C690(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pipProxy]);
  [v1 preferredContentSizeDidChangeForViewController];
}

void sub_10000C6C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v4 postNotificationName:@"PHPIPControllerWillRotateNotification" object:*(void *)(a1 + 32)];

  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pipProxy]);
  [v5 rotateContentContainer:a2 withCompletionHandler:*(void *)(a1 + 40)];
}

void sub_10000CC44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10000CC70(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setPipState:3];
}

id sub_10000D270(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) pipState];
  if (!result)
  {
    id result = [*(id *)(a1 + 32) shouldObtainDismissalAssertions];
    if ((_DWORD)result) {
      return objc_msgSend( objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32)), "inCallRootViewControllerClass"),  "releaseDismissalAssertionForReason:",  @"PHPIPPresenceReason");
    }
  }

  return result;
}

LABEL_9:
  -[PHPIPController updatePIPProxyControlStates](self, "updatePIPProxyControlStates");
}

  __break(1u);
}

    v14 = swift_bridgeObjectRetain(v1);
    v15 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_release(v1);
    if (v15 > 0) {
      return v1;
    }
LABEL_10:
    swift_release(v1);
    return 0LL;
  }

  id v1 = (uint64_t)v7;
  uint64_t v8 = [v7 joinedActivitySession];
  return v1;
}

  __break(1u);
  return result;
}

    [v5 frame];
    __int128 v6 = v11;
    uint64_t v7 = v12;

LABEL_10:
    if (v7 >= v6) {
      v13 = v7;
    }
    else {
      v13 = v6;
    }
    if (v7 < v6) {
      __int128 v6 = v7;
    }
    if (v6 <= -2147483650.0)
    {
      __break(1u);
    }

    else if (v6 < 2147483650.0)
    {
      if ((*(void *)&v6 & 0x7FF0000000000000LL) != 0x7FF0000000000000LL
        && (*(void *)&v13 & 0x7FF0000000000000LL) != 0x7FF0000000000000LL)
      {
        if (v13 > -2147483650.0)
        {
          if (v13 < 2147483650.0)
          {
            v15 = TUBinaryGCD((int)v6, (int)v13);
            v16 = v6 / (double)v15;
            v17 = v13 / (double)v15;
            v19 = objc_msgSend((id)objc_opt_self(TUCallCenter, v18), "sharedInstance");
            v20 = [v19 videoDeviceController];

            objc_msgSend(v20, "setLocalPortraitAspectRatio:localLandscapeAspectRatio:", v16, v17, v17, v16);
            return;
          }

          goto LABEL_28;
        }

LABEL_18:
}

  swift_bridgeObjectRelease(a2);
  return 0LL;
}

  if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v28)(v25, 1LL, v103))
  {
    v58 = *(void *)(v25 + *(int *)(v103 + 24));
    swift_retain(v58);
    AnyCancellable.cancel()();
    swift_release(v58);
  }

  if (v99 > 1u)
  {
    if (qword_100112220 != -1) {
      swift_once(&qword_100112220, sub_100031228);
    }
    v78 = type metadata accessor for Logger(0LL);
    sub_10001C270(v78, (uint64_t)qword_1001137C8);
    v79 = (char)v105;
    sub_10002CA0C(v22, v16, (char)v105);
    v80 = sub_10002CA0C(v22, v16, v79);
    v81 = (os_log_s *)Logger.logObject.getter(v80);
    v82 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v81, v82))
    {
      v83 = swift_slowAlloc(12LL, -1LL);
      v106 = (uint8_t *)v25;
      v84 = (uint8_t *)v83;
      v85 = swift_slowAlloc(32LL, -1LL);
      v108[0] = v85;
      *(_DWORD *)v84 = 136315138;
      v104 = v84 + 4;
      sub_10002CA0C(v22, v16, v79);
      sub_10004C82C((uint64_t)v22, (uint64_t)v16, v79);
      v86 = v16;
      v88 = v87;
      v90 = v89;
      sub_10002C9C8(v22, v86, v79);
      v107 = sub_1000850E4(v88, v90, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v104, v84 + 12);
      swift_bridgeObjectRelease(v90);
      sub_10002C9C8(v22, v86, v79);
      sub_10002C9C8(v22, v86, v79);
      _os_log_impl( (void *)&_mh_execute_header,  v81,  v82,  "Setting call state to nil due to no active conversations: %s",  v84,  0xCu);
      swift_arrayDestroy(v85, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1LL, -1LL);
      v91 = v84;
      v25 = (uint64_t)v106;
      swift_slowDealloc(v91, -1LL, -1LL);
    }

    else
    {
      sub_10002C9C8(v22, v16, v79);
      sub_10002C9C8(v22, v16, v79);
    }

    v92 = v100;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v98 + 56))(v100, 1LL, 1LL, v103);
    swift_beginAccess(v25, v108, 33LL, 0LL);
    sub_1000362F0((uint64_t)v92, v25, &qword_1001138F0);
    *(void *)&id result = swift_endAccess(v108).n128_u64[0];
  }

  else
  {
    v59 = v25;
    v60 = v22;
    v61 = [v60 UUID];
    v62 = (uint64_t)v101;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v61);

    v63 = v100;
    sub_100032024(v62, (uint64_t)v100);
    v64 = (void (*)(uint64_t, uint64_t))*((void *)v106 + 1);
    v64(v62, v6);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v98 + 56))(v63, 0LL, 1LL, v103);
    swift_beginAccess(v59, v108, 33LL, 0LL);
    sub_1000362F0((uint64_t)v63, v59, &qword_1001138F0);
    swift_endAccess(v108);
    if (qword_100112220 != -1) {
      swift_once(&qword_100112220, sub_100031228);
    }
    v65 = type metadata accessor for Logger(0LL);
    sub_10001C270(v65, (uint64_t)qword_1001137C8);
    v66 = v60;
    v67 = (os_log_s *)Logger.logObject.getter(v66);
    v68 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v67, v68))
    {
      v69 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v70 = swift_slowAlloc(32LL, -1LL);
      v108[0] = v70;
      v105 = v64;
      *(_DWORD *)v69 = 136315138;
      v106 = v69 + 4;
      v71 = [v66 UUID];
      v72 = v101;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v71);

      v73 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      v74 = dispatch thunk of CustomStringConvertible.description.getter(v6, v73);
      v76 = v75;
      v105((uint64_t)v72, v6);
      v107 = sub_1000850E4(v74, v76, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v106, v69 + 12);

      swift_bridgeObjectRelease(v76);
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Fresh conversation state created for %s.", v69, 0xCu);
      swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1LL, -1LL);
      swift_slowDealloc(v69, -1LL, -1LL);
    }

    else
    {
    }
  }

  return result;
}

  sub_10003AFF8(v71);
  v139 = 0LL;
  v140 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(19LL);
  swift_bridgeObjectRelease(v140);
  v139 = 0xD000000000000011LL;
  v140 = 0x80000001000D9C60LL;
  v131._countAndFlagsBits = v137;
  v131._object = a2;
  String.append(_:)(v131);
  id result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v139,  v140,  "FaceTime/SplashScreenConfirmView.swift",  38LL,  2LL,  37LL,  0);
  __break(1u);
  return result;
}

    v9[(v22 >> 6) + 8] |= 1LL << v22;
    uint64_t v8 = (char *)v20;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v41 + 16))( v9[6] + *(void *)(v41 + 72) * v22,  v20,  v42);
    *(void *)(v9[7] + 8 * v22) = a5;
    v29 = v9[2];
    v30 = __OFADD__(v29, 1LL);
    v31 = v29 + 1;
    if (v30) {
      goto LABEL_24;
    }
    v9[2] = v31;
LABEL_5:
    v14 = swift_bridgeObjectRelease(0x8000000000000000LL);
    (*(void (**)(char *, uint64_t, __n128))(v41 + 8))(v8, v42, v14);

    ++v11;
    a5 = v35;
    if (v43 == v10) {
      goto LABEL_29;
    }
  }

  sub_10006715C(v25, isUniquelyReferenced_nonNull_native);
  v27 = sub_10002FC2C(v20);
  if ((v26 & 1) == (v28 & 1))
  {
    v22 = v27;
    v9 = v44;
    if ((v26 & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }

  id result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v42);
  __break(1u);
  return result;
}

BOOL sub_10000E5F0(id a1, TUConversationActivitySession *a2)
{
  uint64_t v2 = a2;
  BOOL v3 = -[TUConversationActivitySession state](v2, "state") == (id)1
    || -[TUConversationActivitySession state](v2, "state") == 0LL;

  return v3;
}

BOOL sub_10000E63C(id a1, TUConversationParticipant *a2, BOOL *a3)
{
  return -[TUConversationParticipant isScreenEnabled](a2, "isScreenEnabled", a3);
}

LABEL_24:
      id v10 = 0;
LABEL_36:

      return v10;
    }

    if (-[PHPIPController isUsedForScreenSharing](self, "isUsedForScreenSharing"))
    {
      v9 = (os_log_s *)sub_100008BD0();
      id v10 = 1;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v30 = 138543362;
        v31 = self;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%{public}@: pip isUsedForScreenSharing",  (uint8_t *)&v30,  0xCu);
      }

      goto LABEL_36;
    }

    if ([v8 wantsHoldMusic])
    {
      v14 = (os_log_s *)sub_100008BD0();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v30 = 138543362;
        v31 = self;
        v15 = "%{public}@: call wantsHoldMusic";
LABEL_23:
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, v15, (uint8_t *)&v30, 0xCu);
        goto LABEL_24;
      }

      goto LABEL_24;
    }

    v16 = (void *)objc_claimAutoreleasedReturnValue(+[TUCallCenter sharedInstance](&OBJC_CLASS___TUCallCenter, "sharedInstance"));
    v17 = (void *)objc_claimAutoreleasedReturnValue([v16 activeConversationForCall:v8]);

    if (!v17)
    {
      v21 = (void *)sub_100008BD0();
      if (os_log_type_enabled((os_log_t)v21, OS_LOG_TYPE_INFO))
      {
        v22 = v21;
        v23 = NSStringFromBOOL([v8 isVideo]);
        v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
        v30 = 138543618;
        v31 = self;
        v32 = 2112;
        v33 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "%{public}@: conversation is nil, call isVideo is %@",  (uint8_t *)&v30,  0x16u);
      }

      id v10 = [v8 isVideo];
      goto LABEL_35;
    }

    if ([v17 isContinuitySession])
    {
      v18 = (os_log_s *)sub_100008BD0();
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
LABEL_31:
        id v10 = 0;
LABEL_35:

        goto LABEL_36;
      }

      v30 = 138543362;
      v31 = self;
      v19 = "%{public}@: conversation presentationMode is continuitySession";
      goto LABEL_29;
    }

    if ([v17 state] == (id)2 || objc_msgSend(v17, "state") == (id)3)
    {
      if ([v17 isOneToOneModeEnabled])
      {
        v25 = (os_log_s *)sub_100008BD0();
        id v10 = 1;
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_INFO)) {
          goto LABEL_35;
        }
        v30 = 138543362;
        v31 = self;
        v26 = "%{public}@: conversation isOneToOneModeEnabled";
        goto LABEL_46;
      }

      if (-[PHPIPController hasParticipantVideoForActiveConversation](self, "hasParticipantVideoForActiveConversation"))
      {
        v27 = (void *)objc_claimAutoreleasedReturnValue([v17 remoteMembers]);
        v28 = [v27 count];

        v25 = (os_log_s *)sub_100008BD0();
        v29 = os_log_type_enabled(v25, OS_LOG_TYPE_INFO);
        if (!v28)
        {
          if (!v29) {
            goto LABEL_31;
          }
          v30 = 138543362;
          v31 = self;
          v19 = "%{public}@: conversation remoteMembers equals 0";
          v20 = v25;
          goto LABEL_30;
        }

        if (!v29)
        {
          id v10 = 1;
          goto LABEL_35;
        }

        v30 = 138543362;
        v31 = self;
        v26 = "%{public}@: shouldPIPWhenEnteringBackground";
        id v10 = 1;
LABEL_46:
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, v26, (uint8_t *)&v30, 0xCu);
        goto LABEL_35;
      }

      v18 = (os_log_s *)sub_100008BD0();
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO)) {
        goto LABEL_31;
      }
      v30 = 138543362;
      v31 = self;
      v19 = "%{public}@: conversation hasParticipantVideoForActiveConversation is false";
    }

    else
    {
      v18 = (os_log_s *)sub_100008BD0();
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO)) {
        goto LABEL_31;
      }
      v30 = 138543362;
      v31 = self;
      v19 = "%{public}@: conversation has not been joined";
    }

        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_10001C1DC(v24, v38);
      }

      else
      {
        sub_10001C1A0((uint64_t)v24, (uint64_t)v38);
        swift_bridgeObjectRetain(v22);
      }

      Hasher.init(_seed:)(v37, *(void *)(v8 + 40));
      String.hash(into:)(v37, v23, v22);
      v25 = Hasher._finalize()();
      v26 = -1LL << *(_BYTE *)(v8 + 32);
      v27 = v25 & ~v26;
      v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          v31 = v28 == v30;
          if (v28 == v30) {
            v28 = 0LL;
          }
          v29 |= v31;
          v32 = *(void *)(v12 + 8 * v28);
        }

        while (v32 == -1);
        v14 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      v15 = (void *)(*(void *)(v8 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      sub_10001C1DC(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v14));
      ++*(void *)(v8 + 16);
    }
  }

  swift_release(v5);
  *BOOL v3 = v8;
}

    v11 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_25:
    v25 = *(void *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v41 = *(void *)(v25 + 32);
      v39 = v26;
      v40 = v27;
      sub_10001C1DC((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v38);
    }

    else
    {
      sub_1000303A0(v25, (uint64_t)&v39);
      sub_10001C1A0(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v38);
    }

    v28 = AnyHashable._rawHashValue(seed:)(*(void *)(v8 + 40));
    v29 = -1LL << *(_BYTE *)(v8 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        v34 = v31 == v33;
        if (v31 == v33) {
          v31 = 0LL;
        }
        v32 |= v34;
        v35 = *(void *)(v13 + 8 * v31);
      }

      while (v35 == -1);
      v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    v16 = *(void *)(v8 + 48) + 40 * v15;
    v17 = v39;
    v18 = v40;
    *(void *)(v16 + 32) = v41;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    sub_10001C1DC(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *v22 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_44:
  swift_release(v5);
  *BOOL v3 = v8;
}

      v14 = (v21 - 1) & v21;
      v19 = __clz(__rbit64(v21)) + (v15 << 6);
    }

    v23 = a4;
    v24 = *(void *)(a4 + 48);
    v25 = *(void *)(v17 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v11, v24 + v25 * v19, v8);
    v26 = *(void *)(v12 + 40);
    v27 = sub_100039E60( &qword_1001136D0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    id result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v8, v27);
    v28 = -1LL << *(_BYTE *)(v12 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v31 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
      v17 = v40;
    }

    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v28) >> 6;
      v17 = v40;
      do
      {
        if (++v30 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        v34 = v30 == v33;
        if (v30 == v33) {
          v30 = 0LL;
        }
        v32 |= v34;
        v35 = *(void *)(v16 + 8 * v30);
      }

      while (v35 == -1);
      v31 = __clz(__rbit64(~v35)) + (v30 << 6);
    }

    *(void *)(v16 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v31;
    id result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v17 + 32))( *(void *)(v12 + 48) + v31 * v25,  v11,  v8);
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1LL)) {
      break;
    }
    a4 = v23;
    if (!a3) {
      goto LABEL_37;
    }
  }

        __break(1u);
        goto LABEL_25;
      }

              __break(1u);
              goto LABEL_25;
            }

LABEL_29:
    v20 = v18;
LABEL_30:
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, v19, (uint8_t *)&v30, 0xCu);
    goto LABEL_31;
  }

  v11 = (os_log_s *)sub_100008BD0();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    v30 = 138543362;
    v31 = self;
    v12 = "%{public}@: currentAudioAndVideoCallCount is not 1";
    goto LABEL_15;
  }

  return 0;
}

    v17 = 0LL;
    v19 = 1LL;
    v15 = v29;
    goto LABEL_4;
  }

  v17 = 0LL;
  v19 = 1LL;
  v15 += 3LL;
LABEL_4:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v19, 1LL, v8);
  *id v1 = v13;
  v1[1] = v12;
  v1[2] = v14;
  v1[3] = v15;
  v1[4] = v17;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8) == 1)
  {
    sub_10001C608((uint64_t)v7, &qword_100116040);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v34, 1LL, 1LL, v2);
  }

  v20 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v21 = v31;
  v20(v31, v7, v8);
  v22 = &v32[*(int *)(v2 + 48)];
  v23 = v1[5];
  id result = ((uint64_t (*)(char *, char *, uint64_t))v20)(v22, v21, v8);
  if (__OFADD__(v23, 1LL))
  {
    __break(1u);
    goto LABEL_32;
  }

  v1[5] = v23 + 1;
  v24 = v34;
  v25 = (char *)v34 + *(int *)(v2 + 48);
  *v34 = v23;
  v20(v25, v22, v8);
  return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v24, 0LL, 1LL, v2);
}

        __break(1u);
        goto LABEL_30;
      }

LABEL_12:
    goto LABEL_13;
  }

  if (a6 != &off_1000F6C48) {
    goto LABEL_13;
  }
  v13 = (id)objc_claimAutoreleasedReturnValue(-[PHPIPController pipProxy](self, "pipProxy"));
  v14 = -[PHPIPController shouldStartPIPWhenPossible](self, "shouldStartPIPWhenPossible");

  if (v14) {
    -[PHPIPController startPIPNow](self, "startPIPNow");
  }
LABEL_13:
}

        __break(1u);
LABEL_13:
        __break(1u);
        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_12;
  }

  __break(1u);
}

  swift_bridgeObjectRelease(a1);
  return 0LL;
}

  v23 = v30;
  v24 = *v29;
  *(void *)(*v29 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  id result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v24 + 48) + *(void *)(v7 + 72) * a2,  v23,  v6);
  v26 = *(void *)(v24 + 16);
  v27 = __OFADD__(v26, 1LL);
  v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }

  __break(1u);
LABEL_15:
  id result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  v23 = v30;
  v24 = *v29;
  *(void *)(*v29 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  id result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v24 + 48) + *(void *)(v7 + 72) * a2,  v23,  v6);
  v26 = *(void *)(v24 + 16);
  v27 = __OFADD__(v26, 1LL);
  v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }

  __break(1u);
LABEL_15:
  id result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_10000FA48(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[CADisplay mainDisplay](&OBJC_CLASS___CADisplay, "mainDisplay"));
  [v1 bounds];
  double v3 = v2;
  double v5 = v4;

  if (v3 >= v5) {
    double v6 = v3;
  }
  else {
    double v6 = v5;
  }
  int v7 = (int)v6;
  uint64_t v8 = MGGetProductType();
  if (v7 == 1136) {
    goto LABEL_5;
  }
  if (v8 <= 2795618602LL)
  {
    if (v8 > 851437780)
    {
      if (v8 <= 2688879998LL)
      {
        if (v8 != 851437781)
        {
          if (v8 != 1169082144) {
            goto LABEL_23;
          }
          goto LABEL_42;
        }

LABEL_32:
        BOOL v11 = v7 == 2556;
        goto LABEL_45;
      }

      if (v8 != 2688879999LL)
      {
        if (v8 != 2793418701LL) {
          goto LABEL_23;
        }
        goto LABEL_32;
      }

      goto LABEL_33;
    }

    if (v8 == 133314240) {
      goto LABEL_32;
    }
    if (v8 != 330877086)
    {
      uint64_t v10 = 574536383LL;
LABEL_22:
      if (v8 != v10) {
        goto LABEL_23;
      }
LABEL_33:
      BOOL v12 = v7 == 2796;
      goto LABEL_34;
    }

    BOOL v12 = v7 == 2868;
LABEL_34:
    uint64_t v9 = 14LL;
    if (!v12) {
      uint64_t v9 = 15LL;
    }
    goto LABEL_47;
  }

  if (v8 <= 3001488777LL)
  {
    if (v8 == 2795618603LL)
    {
      BOOL v11 = v7 == 2622;
LABEL_45:
      uint64_t v9 = 9LL;
      if (v11) {
        uint64_t v9 = 12LL;
      }
      goto LABEL_47;
    }

    if (v8 == 2940697645LL) {
      goto LABEL_32;
    }
    uint64_t v10 = 2941181571LL;
    goto LABEL_22;
  }

  if (v8 <= 3885279869LL)
  {
    if (v8 == 3001488778LL)
    {
LABEL_42:
      BOOL v11 = v7 == 2532;
      goto LABEL_45;
    }

    uint64_t v10 = 3825599860LL;
    goto LABEL_22;
  }

  if (v8 == 4201643249LL)
  {
    BOOL v12 = v7 == 2778;
    goto LABEL_34;
  }

  if (v8 == 3885279870LL)
  {
    uint64_t v9 = 9LL;
    if (v7 == 2436) {
      uint64_t v9 = 10LL;
    }
    goto LABEL_47;
  }

          sub_100022550(a1);
          return;
        }
      }
    }
  }

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

              __break(1u);
              goto LABEL_33;
            }

LABEL_79:
    uint64_t v9 = 1LL;
    goto LABEL_47;
  }

  if (v7 > 1623)
  {
    if (v7 != 1624)
    {
      if (v7 != 1792) {
        goto LABEL_48;
      }
      goto LABEL_74;
    }

LABEL_77:
    uint64_t v9 = 4LL;
    goto LABEL_47;
  }

  if (v7 == 1024) {
    goto LABEL_47;
  }
  if (v7 == 1334) {
    goto LABEL_79;
  }
LABEL_48:
  id v13 = sub_100011210();
  v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 134218240;
    uint64_t v16 = qword_100116998;
    __int16 v17 = 1024;
    int v18 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Determined screen size to be %ld for screenHeight: %d",  (uint8_t *)&v15,  0x12u);
  }
}

  __break(1u);
LABEL_78:
  __break(1u);
}

char *sub_10000FE6C(uint64_t a1)
{
  id result = (char *)[*(id *)(a1 + 32) screenSize];
  else {
    uint64_t v2 = qword_1000C3AC0[(void)(result - 1)];
  }
  qword_100112138 = v2;
  return result;
}

unint64_t sub_10000FF20(uint64_t a1)
{
  unint64_t result = (unint64_t)[*(id *)(a1 + 32) screenSize];
  if (result > 0xE) {
    uint64_t v2 = 1LL;
  }
  else {
    uint64_t v2 = qword_1000C3B38[result];
  }
  qword_1001169B0 = v2;
  return result;
}

unint64_t sub_10000FFD0(uint64_t a1)
{
  unint64_t result = (unint64_t)[*(id *)(a1 + 32) screenSize];
  if (result > 0xF) {
    uint64_t v2 = 1LL;
  }
  else {
    uint64_t v2 = qword_1000C3BB0[result];
  }
  qword_1001169C0 = v2;
  return result;
}

char *sub_100010080(uint64_t a1)
{
  unint64_t result = (char *)[*(id *)(a1 + 32) screenSize];
  else {
    uint64_t v2 = qword_1000C3C30[(void)(result - 1)];
  }
  qword_1001169D0 = v2;
  return result;
}

id sub_100010140(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) screenSize];
  byte_1001169E0 = result == 0LL;
  return result;
}

char *sub_1000101DC(uint64_t a1)
{
  id result = (char *)[*(id *)(a1 + 32) screenSize];
  else {
    uint64_t v2 = qword_1000C3C70[(void)(result - 5)];
  }
  qword_100112140 = v2;
  return result;
}

unint64_t sub_10001029C(uint64_t a1)
{
  unint64_t result = (unint64_t)[*(id *)(a1 + 32) screenSize];
  byte_1001169F8 = (result < 0xF) & (0x5060u >> result);
  return result;
}

unint64_t sub_100010350(uint64_t a1)
{
  unint64_t result = (unint64_t)[*(id *)(a1 + 32) screenSize];
  byte_100116A08 = (result < 0xF) & (0x5060u >> result);
  return result;
}

unint64_t sub_10001061C(uint64_t a1)
{
  unint64_t result = (unint64_t)[*(id *)(a1 + 32) screenSize];
  if (result > 0xE) {
    uint64_t v2 = 1LL;
  }
  else {
    uint64_t v2 = qword_1000C3CF0[result];
  }
  qword_100116A18 = v2;
  return result;
}

char *sub_1000106CC(uint64_t a1)
{
  unint64_t result = (char *)[*(id *)(a1 + 32) screenSize];
  else {
    uint64_t v2 = qword_1000C3D68[(void)(result - 1)];
  }
  qword_100112148 = v2;
  return result;
}

unint64_t sub_100010780(uint64_t a1)
{
  if ([*(id *)(a1 + 32) shouldUseExplicitLayoutDimensions])
  {
    unint64_t result = (unint64_t)[*(id *)(a1 + 32) yOffsetForDialerLCDViewForDxDevices];
  }

  else
  {
    unint64_t result = +[PHUIConfiguration screenSize](&OBJC_CLASS___PHUIConfiguration, "screenSize");
    if (result > 7) {
      uint64_t v3 = 0x4061000000000000LL;
    }
    else {
      uint64_t v3 = qword_1000C3DE0[result];
    }
  }

  qword_100116A30 = v3;
  return result;
}

double sub_100010894(uint64_t a1)
{
  double v3 = v2;
  [*(id *)(a1 + 32) yParticipantsViewAdjustmentForKeypad];
  double result = v3 + v4;
  qword_100116A40 = *(void *)&result;
  return result;
}

void sub_100010918(id a1)
{
  if (!+[PHUIConfiguration screenSize](&OBJC_CLASS___PHUIConfiguration, "screenSize")) {
    qword_100116A50 = 0x4046800000000000LL;
  }
}

id sub_100010A44(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) screenSize];
  uint64_t v2 = 1LL;
  if (result == (id)7) {
    uint64_t v2 = 2LL;
  }
  if (result == (id)6) {
    uint64_t v2 = 0LL;
  }
  qword_100116A60 = v2;
  return result;
}

unint64_t sub_100010AEC(uint64_t a1)
{
  unint64_t result = (unint64_t)[*(id *)(a1 + 32) screenSize];
  if (result > 8) {
    uint64_t v2 = 0x4055900000000000LL;
  }
  else {
    uint64_t v2 = qword_1000C3E50[result];
  }
  qword_100112150 = v2;
  return result;
}

char *sub_100010BA0(uint64_t a1)
{
  unint64_t result = (char *)[*(id *)(a1 + 32) screenSize];
  double v2 = 13.0;
  qword_100112158 = *(void *)&v2;
  return result;
}

id sub_100010C50(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) screenSize];
  BOOL v2 = result == (id)9 || result == (id)4;
  double v3 = 0.0;
  if (v2) {
    double v3 = 2.5;
  }
  qword_100116A80 = *(void *)&v3;
  return result;
}

id sub_100010CF8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) screenSize];
  double v2 = 4.0;
  if (result == (id)4) {
    double v2 = 17.0;
  }
  qword_100116A90 = *(void *)&v2;
  return result;
}

char *sub_100010DA0(uint64_t a1)
{
  id result = (char *)[*(id *)(a1 + 32) screenSize];
  double v2 = 1.0;
  qword_100112160 = *(void *)&v2;
  return result;
}

unint64_t sub_100010E88(uint64_t a1)
{
  unint64_t result = (unint64_t)[*(id *)(a1 + 32) screenSize];
  byte_100116AA8 = (result < 9) & (0x18Cu >> result);
  return result;
}

id sub_100010F3C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) screenSize];
  byte_100116AB8 = result == (id)7;
  return result;
}

id sub_100010FE4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) screenSize];
  byte_100116AC8 = result == (id)6;
  return result;
}

id sub_100011080(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) screenSize];
  byte_100116AD8 = result == 0LL;
  return result;
}

void sub_100011110(id a1)
{
  unint64_t v1 = +[PHUIConfiguration inCallControlSpacing](&OBJC_CLASS___PHUIConfiguration, "inCallControlSpacing");
  if (v1 <= 6) {
    byte_100116AE8 = (7u >> v1) & 1;
  }
}

id sub_100011210()
{
  if (qword_100116B00[0] != -1) {
    dispatch_once(qword_100116B00, &stru_1000F6DC8);
  }
  return (id)qword_100116AF8;
}

void sub_100011250(id a1)
{
  os_log_t v1 = os_log_create("com.apple.calls.mobilephone", "Default");
  double v2 = (void *)qword_100116AF8;
  qword_100116AF8 = (uint64_t)v1;
}

id sub_100011280(void *a1, void *a2)
{
  double v3 = a1;
  double v4 = a2;
  if (!v4)
  {
    double v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
    double v4 = (__CFString *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
  }

  if (-[__CFString length](v3, "length") && -[__CFString length](v4, "length")) {
    double v6 = (void *)CFPreferencesCopyValue(v3, v4, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  }
  else {
    double v6 = 0LL;
  }

  return v6;
}

id sub_1000118C0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _ensureProperPositionForContentView];
}

uint64_t sub_100012344(uint64_t a1, uint64_t a2)
{
  double v4 = *(void **)(a1 + 32);
  if (v4) {
    [v4 transform];
  }
  else {
    memset(&v6, 0, sizeof(v6));
  }
  if (CGAffineTransformIsIdentity(&v6)) {
    [*(id *)(a1 + 32) setHidden:0];
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  }
  return result;
}

id sub_1000123B8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setContentViewNormalPosition];
}

void sub_1000125DC(uint64_t a1, uint64_t a2)
{
  double v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contentView]);
  double v5 = v4;
  if (v4) {
    [v4 transform];
  }
  else {
    memset(&v7, 0, sizeof(v7));
  }
  if (!CGAffineTransformIsIdentity(&v7)) {
    [v5 setHidden:1];
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v6, a2);
  }
}

id sub_10001266C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setContentViewHiddenPosition];
}

id sub_1000127F0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) viewDidAppear:*(unsigned __int8 *)(a1 + 40)];
}

id sub_10001280C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAlpha:1.0];
}

id sub_100012948(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 40) + 24) viewDidDisappear:*(unsigned __int8 *)(a1 + 48)];
}

id sub_100012980(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAlpha:0.0];
}

uint64_t sub_100013030()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_100112178);
  sub_10001C270(v0, (uint64_t)qword_100112178);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0xD000000000000026LL,  0x80000001000C3FE0LL);
}

uint64_t sub_100013174@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  double v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_dataSource);
  swift_beginAccess(v5, v23, 0LL, 0LL);
  uint64_t v7 = *v5;
  uint64_t v8 = *(void *)(*v5 + 16);
  if (v8)
  {
    v21 = v5;
    uint64_t v22 = a2;
    uint64_t v9 = (void *)objc_opt_self(&OBJC_CLASS___UILocalizedIndexedCollation, v6);
    swift_bridgeObjectRetain(v7);
    uint64_t v10 = 0LL;
    BOOL v11 = (void *)(v7 + 40);
    while (1)
    {
      uint64_t v12 = *(v11 - 1);
      uint64_t v13 = *v11;
      swift_bridgeObjectRetain(*v11);
      id v14 = [v9 currentCollation];
      id v15 = [v14 sectionForSectionIndexTitleAtIndex:a1];
      swift_bridgeObjectRelease(v13);

      ++v10;
      v11 += 2;
      if (v8 == v10)
      {
        swift_bridgeObjectRelease(v7);
        uint64_t v16 = *(void *)(*v21 + 16);
        a2 = v22;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v7);
    a2 = v22;
  }

  else
  {
    uint64_t v16 = 0LL;
LABEL_7:
    BOOL v17 = v16 != 0;
    uint64_t v18 = v16 - 1;
    if (v17) {
      uint64_t v10 = v18;
    }
    else {
      uint64_t v10 = 0LL;
    }
  }

  IndexPath.init(item:section:)(0LL, v10);
  uint64_t v19 = type metadata accessor for IndexPath(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(a2, 0LL, 1LL, v19);
}

double sub_1000133E4()
{
  double result = 430.0;
  xmmword_100112198 = xmmword_1000C3F80;
  return result;
}

double sub_1000133FC()
{
  double result = 10.0;
  xmmword_1001121B0 = xmmword_1000C3F90;
  *(_OWORD *)&qword_1001121C0 = xmmword_1000C3FA0;
  return result;
}

void sub_10001341C()
{
  id v1 = [objc_allocWithZone(_UIFocusFastScrollingIndexBarConfiguration) init];
  id v2 = sub_100013580();
  int64_t v3 = (int64_t)[v2 numberOfSections];

  if (v3 < 0)
  {
LABEL_10:
    __break(1u);
    return;
  }

  double v4 = sub_100095754(0LL, v3);
  id v5 = v0;
  uint64_t v6 = sub_10001AC84((uint64_t)v4);
  swift_release(v4);

  uint64_t v7 = v6[2];
  if (v7)
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    while (1)
    {
      uint64_t v10 = v6[v8 + 4];
      BOOL v11 = __OFADD__(v9, v10);
      v9 += v10;
      if (v11) {
        break;
      }
      if (v7 == ++v8)
      {
        swift_bridgeObjectRelease(v6);
        uint64_t v12 = 2LL * (v9 > 7);
        goto LABEL_8;
      }
    }

    __break(1u);
    goto LABEL_10;
  }

  swift_bridgeObjectRelease(v6);
  uint64_t v12 = 0LL;
LABEL_8:
  [v1 setBarDisplayMode:v12];
  [v1 setBarPosition:0];
  id v13 = [objc_allocWithZone(UIColor) initWithWhite:1.0 alpha:0.5];
  [v1 setIndicatorColorUnfocused:v13];
}

id sub_100013580()
{
  return sub_1000138DC( &OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController____lazy_storage___collectionView,  (uint64_t (*)(uint64_t))sub_100013594);
}

id sub_100013594(uint64_t a1)
{
  id v2 = objc_msgSend( objc_allocWithZone(UICollectionView),  "initWithFrame:collectionViewLayout:",  *(void *)(a1 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_layout),  0.0,  0.0,  0.0,  0.0);
  uint64_t v3 = type metadata accessor for CreateCallCollectionViewCell(0LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v3);
  NSString v5 = String._bridgeToObjectiveC()();
  [v2 registerClass:ObjCClassFromMetadata forCellWithReuseIdentifier:v5];

  uint64_t v7 = type metadata accessor for CreateCallCollectionViewHeaderView(0LL, v6);
  uint64_t v8 = swift_getObjCClassFromMetadata(v7);
  uint64_t v9 = UICollectionElementKindSectionHeader;
  NSString v10 = String._bridgeToObjectiveC()();
  [v2 registerClass:v8 forSupplementaryViewOfKind:v9 withReuseIdentifier:v10];

  [v2 setDelegate:a1];
  [v2 setDataSource:a1];
  uint64_t v12 = (void *)objc_opt_self(&OBJC_CLASS___UIColor, v11);
  id v13 = v2;
  id v14 = [v12 clearColor];
  [v13 setBackgroundColor:v14];

  objc_msgSend(v13, "setLayoutMargins:", 0.0, 20.0, 0.0, 20.0);
  objc_msgSend(v13, "_setGradientMaskLengths:", 74.0, 0.0, 74.0, 0.0);
  [v13 setRemembersLastFocusedIndexPath:1];
  [v13 setContentInsetAdjustmentBehavior:2];
  id v15 = v13;
  NSString v16 = String._bridgeToObjectiveC()();
  [v15 setAccessibilityIdentifier:v16];

  return v15;
}

id sub_1000137D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController____lazy_storage___loadingButton;
  double v4 = *(void **)(v2 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController____lazy_storage___loadingButton);
  if (v4)
  {
    id v5 = *(id *)(v2 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController____lazy_storage___loadingButton);
  }

  else
  {
    id v6 = objc_msgSend((id)objc_opt_self(UIButton, a2), "buttonWithType:", 0);
    uint64_t v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    double v4 = 0LL;
  }

  id v8 = v4;
  return v5;
}

id sub_100013854()
{
  uint64_t v1 = OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController____lazy_storage___loadingSpinner;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController____lazy_storage___loadingSpinner);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController____lazy_storage___loadingSpinner);
  }

  else
  {
    id v4 = [objc_allocWithZone(UIActivityIndicatorView) initWithActivityIndicatorStyle:100];
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0LL;
  }

  id v6 = v2;
  return v3;
}

id sub_1000138C8()
{
  return sub_1000138DC( &OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController____lazy_storage___snowglobeView,  (uint64_t (*)(uint64_t))sub_100013938);
}

id sub_1000138DC(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  id v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }

  else
  {
    id v6 = (void *)a2(v2);
    uint64_t v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    id v4 = 0LL;
  }

  id v8 = v4;
  return v5;
}

char *sub_100013938(uint64_t a1)
{
  uint64_t v2 = sub_100018A04((uint64_t *)&unk_1001148A0);
  __chkstk_darwin(v2);
  id v4 = (id *)((char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = type metadata accessor for CallType(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v42 - v10;
  uint64_t v12 = OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_isAddingParticipants;
  int v13 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_isAddingParticipants);
  id v15 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v14), "mainBundle");
  if (v13 == 1)
  {
    unint64_t v16 = 0xD00000000000001CLL;
    unint64_t v41 = 0xE000000000000000LL;
    unint64_t v17 = 0x80000001000D8630LL;
  }

  else
  {
    unint64_t v41 = 0xE000000000000000LL;
    unint64_t v17 = 0x80000001000D8610LL;
    unint64_t v16 = 0xD000000000000014LL;
  }

  v18.value._countAndFlagsBits = 0x6C6172656E6547LL;
  v18.value._object = (void *)0xE700000000000000LL;
  v19._countAndFlagsBits = 0LL;
  v19._object = (void *)0xE000000000000000LL;
  uint64_t v20 = 0LL;
  Swift::String v21 = NSLocalizedString(_:tableName:bundle:value:comment:)( *(Swift::String *)&v16,  v18,  v15,  v19,  *(Swift::String *)(&v41 - 1));

  uint64_t v22 = *(void *)(*sub_10001C3FC( (void *)(a1 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_callManager),  *(void *)(a1 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_callManager + 24))
                  + OBJC_IVAR____TtC8FaceTime14ATVCallManager_activeCallSubject);
  uint64_t v23 = swift_retain(v22);
  CurrentValueSubject.value.getter(v23);
  swift_release(v22);
  uint64_t v24 = type metadata accessor for ActiveCallContext(0LL);
  if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48LL))(v4, 1LL, v24) == 1)
  {
    sub_10001C608((uint64_t)v4, (uint64_t *)&unk_1001148A0);
LABEL_7:
    v27 = (unsigned int *)&enum case for CallType.video(_:);
    goto LABEL_9;
  }

  id v25 = *v4;
  sub_10001C644((uint64_t)v4, type metadata accessor for ActiveCallContext);
  unsigned __int8 v26 = [v25 isVideo];

  if ((v26 & 1) != 0) {
    goto LABEL_7;
  }
  v27 = (unsigned int *)&enum case for CallType.audio(_:);
LABEL_9:
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v11, *v27, v5);
  id v28 = sub_100013580();
  char v29 = *(_BYTE *)(a1 + v12);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  id v30 = objc_allocWithZone((Class)type metadata accessor for SnowglobeView(0LL));
  v31 = sub_1000A2A24(v21._countAndFlagsBits, (uint64_t)v21._object, v28, v29, (uint64_t)v9);

  v32 = &v31[OBJC_IVAR____TtC8FaceTime13SnowglobeView_delegate];
  *((void *)v32 + 1) = &off_1000F7378;
  uint64_t v33 = swift_unknownObjectWeakAssign(v32, a1);
  char v34 = *(_BYTE *)(a1 + v12);
  v36 = sub_100098818(v33, v35);
  id v37 = v36;
  if ((v34 & 1) != 0)
  {
    v38 = &selRef_didSelectAddParticipants;
LABEL_13:
    [v37 addTarget:a1 action:*v38 forControlEvents:0x2000];

    goto LABEL_14;
  }

  -[objc_super addTarget:action:forControlEvents:]( v36,  "addTarget:action:forControlEvents:",  a1,  "didSelectStartVideoCall:",  0x2000LL);

  if ([*(id *)(a1 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_featureFlags) lagunaAudioCallsEnabled])
  {
    id v39 = sub_100098A38();
    [v39 setHidden:0];

    id v37 = sub_100098A38();
    v38 = &selRef_didSelectStartAudioCall_;
    goto LABEL_13;
  }

LABEL_14:
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  return v31;
}

    swift_once(&qword_100112238, sub_10003B86C);
    goto LABEL_4;
  }

  if (qword_100112238 != -1) {
    swift_once(&qword_100112238, sub_10003B86C);
  }
  id v37 = type metadata accessor for Logger(0LL);
  sub_10001C270(v37, (uint64_t)qword_100113AC0);
  v38 = a1;
  id v39 = v87;
  v40 = v38;
  unint64_t v41 = v39;
  uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
  v43 = static os_log_type_t.error.getter();
  v44 = v43;
  v45 = os_log_type_enabled(v42, v43);
  v46 = v94;
  if (v45)
  {
    v47 = swift_slowAlloc(22LL, -1LL);
    v93 = swift_slowAlloc(64LL, -1LL);
    *(void *)&v101[0] = v93;
    *(_DWORD *)v47 = 136315394;
    v89 = (id)(v47 + 4);
    v48 = [v40 UUID];
    v92 = v42;
    v49 = v48;
    v50 = v88;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v48);

    v90 = (char *)sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v51 = dispatch thunk of CustomStringConvertible.description.getter(v11, v90);
    LODWORD(v91) = v44;
    v53 = v52;
    v54 = *(void (**)(char *, uint64_t))(v46 + 8);
    v54(v50, v11);
    v97 = sub_1000850E4(v51, v53, (uint64_t *)v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98, v89, v47 + 12);

    *(void *)&v55 = swift_bridgeObjectRelease(v53).n128_u64[0];
    *(_WORD *)(v47 + 12) = 2080;
    v56 = objc_msgSend(v41, "UUID", v55);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v56);

    v57 = dispatch thunk of CustomStringConvertible.description.getter(v11, v90);
    v59 = v58;
    v54(v50, v11);
    v97 = sub_1000850E4(v57, v59, (uint64_t *)v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98, v47 + 14, v47 + 22);

    swift_bridgeObjectRelease(v59);
    v60 = v92;
    _os_log_impl( (void *)&_mh_execute_header,  v92,  (os_log_type_t)v91,  "Failed to create notSupportedOnTV activity bulletin presentation for %s in conversation %s.",  (uint8_t *)v47,  0x16u);
    v61 = v93;
    swift_arrayDestroy(v93, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1LL, -1LL);
    swift_slowDealloc(v47, -1LL, -1LL);
  }

  else
  {
  }

    swift_once(&qword_100112238, sub_10003B86C);
    goto LABEL_4;
  }

  if (qword_100112238 != -1) {
    swift_once(&qword_100112238, sub_10003B86C);
  }
  id v30 = type metadata accessor for Logger(0LL);
  sub_10001C270(v30, (uint64_t)qword_100113AC0);
  v31 = a1;
  v32 = v87;
  uint64_t v33 = v31;
  char v34 = v32;
  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  v36 = static os_log_type_t.error.getter();
  id v37 = v36;
  if (os_log_type_enabled(v35, v36))
  {
    v38 = swift_slowAlloc(22LL, -1LL);
    v87 = (id)swift_slowAlloc(64LL, -1LL);
    *(void *)&v95[0] = v87;
    *(_DWORD *)v38 = 136315394;
    v83 = v38 + 4;
    id v39 = [v33 UUID];
    v86 = v35;
    v40 = v39;
    unint64_t v41 = v81;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v39);

    v84 = (char *)sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter(v10, v84);
    LODWORD(v85) = v37;
    v44 = v43;
    v45 = *(void (**)(char *, uint64_t))(v88 + 8);
    v45(v41, v10);
    v91 = sub_1000850E4(v42, v44, (uint64_t *)v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v83, v38 + 12);

    *(void *)&v46 = swift_bridgeObjectRelease(v44).n128_u64[0];
    *(_WORD *)(v38 + 12) = 2080;
    v47 = objc_msgSend(v34, "UUID", v46);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v47);

    v48 = dispatch thunk of CustomStringConvertible.description.getter(v10, v84);
    v50 = v49;
    v45(v41, v10);
    v91 = sub_1000850E4(v48, v50, (uint64_t *)v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v38 + 14, v38 + 22);

    swift_bridgeObjectRelease(v50);
    v51 = v86;
    _os_log_impl( (void *)&_mh_execute_header,  v86,  (os_log_type_t)v85,  "Failed to create missing app bulletin presentation for %s in conversation %s.",  (uint8_t *)v38,  0x16u);
    v52 = v87;
    swift_arrayDestroy(v87, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v38, -1LL, -1LL);
  }

  else
  {
  }

  __break(1u);
  return result;
}

    swift_once(&qword_1001123B0, sub_1000899BC);
    goto LABEL_4;
  }

  v38 = v17;
  if (qword_1001123B0 != -1) {
    swift_once(&qword_1001123B0, sub_1000899BC);
  }
  id v39 = type metadata accessor for Logger(0LL);
  sub_10001C270(v39, (uint64_t)qword_1001155B0);
  v40 = a1;
  unint64_t v41 = a2;
  uint64_t v42 = v40;
  v43 = v41;
  v44 = (os_log_s *)Logger.logObject.getter(v43);
  v45 = static os_log_type_t.error.getter();
  v46 = v45;
  if (os_log_type_enabled(v44, v45))
  {
    v47 = swift_slowAlloc(22LL, -1LL);
    v105 = (id)swift_slowAlloc(64LL, -1LL);
    *(void *)&v114[0] = v105;
    *(_DWORD *)v47 = 136315394;
    v101 = (char *)(v47 + 4);
    v48 = [v42 UUID];
    v104 = v44;
    v49 = v48;
    v50 = v38;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v48);

    v103 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v51 = v107;
    v52 = dispatch thunk of CustomStringConvertible.description.getter(v107, v103);
    v54 = v53;
    v102 = *(char **)(v106 + 8);
    ((void (*)(char *, uint64_t))v102)(v38, v51);
    v109 = sub_1000850E4(v52, v54, (uint64_t *)v114);
    LODWORD(v106) = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v101, v47 + 12);

    *(void *)&v55 = swift_bridgeObjectRelease(v54).n128_u64[0];
    *(_WORD *)(v47 + 12) = 2080;
    v56 = objc_msgSend(v43, "UUID", v55);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v56);

    v57 = dispatch thunk of CustomStringConvertible.description.getter(v51, v103);
    v59 = v58;
    ((void (*)(char *, uint64_t))v102)(v50, v51);
    v109 = sub_1000850E4(v57, v59, (uint64_t *)v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v47 + 14, v47 + 22);

    swift_bridgeObjectRelease(v59);
    v60 = v104;
    _os_log_impl( (void *)&_mh_execute_header,  v104,  (os_log_type_t)v106,  "Failed to create launch app bulletin presentation for activity session %s in conversation %s.",  (uint8_t *)v47,  0x16u);
    v61 = v105;
    swift_arrayDestroy(v105, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1LL, -1LL);
    swift_slowDealloc(v47, -1LL, -1LL);
  }

  else
  {
  }

      __break(1u);
      JUMPOUT(0x10009C2B8LL);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  goto LABEL_14;
}

  uint64_t v24 = *v9;
  *(void *)(*v9 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v24 + 48) + 8 * a2) = a1;
  id v25 = *(void *)(v24 + 16);
  unsigned __int8 v26 = __OFADD__(v25, 1LL);
  v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v24 + 16) = v27;
  }
}

  uint64_t v14 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v14 + 48) + 8 * a2) = v5;
  id v15 = *(void *)(v14 + 16);
  unint64_t v16 = __OFADD__(v15, 1LL);
  unint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v17;
  }
  return result;
}

    if (v20)
    {
      v31 = (v20 - 1) & v20;
      v32 = __clz(__rbit64(v20)) | (v19 << 6);
      id v30 = v19;
    }

    else
    {
      id v30 = v19 + 1;
      if (__OFADD__(v19, 1LL))
      {
        __break(1u);
        return result;
      }

      if (v30 >= v48) {
        break;
      }
      uint64_t v33 = *(void *)(v50 + 8 * v30);
      if (!v33)
      {
        char v34 = v19 + 2;
        if (v19 + 2 >= v48) {
          break;
        }
        uint64_t v33 = *(void *)(v50 + 8 * v34);
        if (v33) {
          goto LABEL_25;
        }
        char v34 = v19 + 3;
        if (v19 + 3 >= v48) {
          break;
        }
        uint64_t v33 = *(void *)(v50 + 8 * v34);
        if (v33) {
          goto LABEL_25;
        }
        char v34 = v19 + 4;
        if (v19 + 4 >= v48) {
          break;
        }
        uint64_t v33 = *(void *)(v50 + 8 * v34);
        if (v33)
        {
LABEL_25:
          id v30 = v34;
        }

        else
        {
          id v30 = v19 + 5;
          if (v19 + 5 >= v48) {
            break;
          }
          uint64_t v33 = *(void *)(v50 + 8 * v30);
          if (!v33)
          {
            v44 = v19 + 6;
            while (v48 != v44)
            {
              uint64_t v33 = *(void *)(v50 + 8 * v44++);
              if (v33)
              {
                id v30 = v44 - 1;
                goto LABEL_26;
              }
            }

            break;
          }
        }
      }

id sub_100013CCC(uint64_t a1)
{
  uint64_t v2 = sub_10001C5D0(0LL, &qword_100112978, &OBJC_CLASS___NSMutableAttributedString_ptr);
  id v3 = sub_1000138C8();
  uint64_t v5 = sub_100098818((uint64_t)v3, v4);

  id v6 = [objc_allocWithZone(NSTextAttachment) init];
  [v6 setImage:*(id *)((char *)&v5[3].receiver + OBJC_IVAR____TtC8FaceTime14FaceTimeButton_viewModel)];

  id v7 = [(id)swift_getObjCClassFromMetadata(v2) attributedStringWithAttachment:v6];
  id v9 = objc_msgSend((id)objc_opt_self(NSBundle, v8), "mainBundle");
  NSString v10 = String._bridgeToObjectiveC()();
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v9 localizedStringForKey:v10 value:v11 table:v12];

  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  uint64_t v16 = v15;

  uint64_t v17 = sub_100018A04((uint64_t *)&unk_100112980);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + 16) = xmmword_1000C3FB0;
  *(void *)(v18 + 56) = &type metadata for Int;
  *(void *)(v18 + 64) = &protocol witness table for Int;
  *(void *)(v18 + 32) = a1;
  uint64_t v19 = static String.localizedStringWithFormat(_:_:)(v14, v16, v18);
  unint64_t v21 = v20;
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v18);
  uint64_t v29 = v19;
  unint64_t v30 = v21;
  v22._countAndFlagsBits = String.init<A>(_:)( &v29,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  object = v22._object;
  uint64_t v29 = 32LL;
  unint64_t v30 = 0xE100000000000000LL;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(object);
  unint64_t v24 = v30;
  id v25 = objc_allocWithZone(&OBJC_CLASS___NSAttributedString);
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v24);
  id v27 = [v25 initWithString:v26];

  [v7 appendAttributedString:v27];
  return v7;
}

_BYTE *sub_100013F6C()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_sidebarDelegate];
  *(_OWORD *)uint64_t v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((void *)v1 + 4) = 0LL;
  v0[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_isAddingParticipants] = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_reuseIdentifier];
  void *v2 = 0xD00000000000001CLL;
  v2[1] = 0x80000001000D86D0LL;
  id v3 = &v0[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_headerReuseIdentifier];
  *id v3 = 0xD00000000000001ELL;
  v3[1] = 0x80000001000D86F0LL;
  uint64_t v4 = &v0[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_callManager];
  uint64_t v5 = qword_100112380;
  id v6 = v0;
  if (v5 != -1) {
    swift_once(&qword_100112380, sub_100080AF0);
  }
  id v7 = (void *)qword_10011A2F0;
  v4[3] = type metadata accessor for ATVCallManager(0LL);
  v4[4] = &off_1000FAC48;
  void *v4 = v7;
  v6[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_usingIndexBar] = 0;
  uint64_t v8 = OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_featureFlags;
  id v9 = objc_allocWithZone(&OBJC_CLASS___TUFeatureFlags);
  id v10 = v7;
  *(void *)&v6[v8] = [v9 init];
  *(void *)&v6[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_dataSource] = &_swiftEmptyArrayStorage;
  uint64_t v11 = OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_imageCache;
  *(void *)&v6[v11] = [objc_allocWithZone(NSCache) init];
  uint64_t v12 = OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_layout;
  id v13 = [objc_allocWithZone(UICollectionViewFlowLayout) init];
  if (qword_100112190 != -1) {
    swift_once(&qword_100112190, sub_1000133E4);
  }
  [v13 setItemSize:xmmword_100112198];
  [v13 setMinimumLineSpacing:14.0];
  [v13 setMinimumInteritemSpacing:0.0];
  if (qword_1001121A8 != -1) {
    swift_once(&qword_1001121A8, sub_1000133FC);
  }
  objc_msgSend(v13, "setSectionInset:", xmmword_1001121B0, *(double *)&qword_1001121C0, unk_1001121C8);
  objc_msgSend(v13, "setHeaderReferenceSize:", 30.0, 30.0);
  *(void *)&v6[v12] = v13;
  *(void *)&v6[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController____lazy_storage___collectionView] = 0LL;
  *(void *)&v6[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController____lazy_storage___loadingButton] = 0LL;
  *(void *)&v6[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController____lazy_storage___loadingSpinner] = 0LL;
  *(void *)&v6[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController____lazy_storage___snowglobeView] = 0LL;

  v17.receiver = v6;
  v17.super_class = (Class)type metadata accessor for ContactListWithSnowglobeViewController(v14, v15);
  double result = objc_msgSendSuper2(&v17, "initWithNibName:bundle:", 0, 0);
  result[OBJC_IVAR____TtC8FaceTime40SidebarNavigationBaseChildViewController_wantsExpandedSidebar] = 1;
  return result;
}

void sub_10001426C()
{
  id v0 = sub_1000138C8();
  uint64_t v2 = sub_100098818((uint64_t)v0, v1);

  *((_BYTE *)&v2->receiver + OBJC_IVAR____TtC8FaceTime14FaceTimeButton_isWaitingForCallToStart) = 0;
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___UIView, v3);
  uint64_t v5 = swift_allocObject(&unk_1000F7670, 24LL, 7LL);
  *(void *)(v5 + 16) = v2;
  v9[4] = sub_10001C99C;
  uint64_t v10 = v5;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256LL;
  v9[2] = sub_100027654;
  v9[3] = &unk_1000F7688;
  id v6 = _Block_copy(v9);
  uint64_t v7 = v10;
  uint64_t v8 = v2;
  swift_release(v7);
  [v4 animateWithDuration:v6 animations:0.3];
  _Block_release(v6);
}

void sub_1000143FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v19.receiver = v2;
  v19.super_class = (Class)type metadata accessor for ContactListWithSnowglobeViewController(a1, a2);
  id v4 = objc_msgSendSuper2(&v19, "viewDidLoad");
  id v6 = sub_1000137D8((uint64_t)v4, v5);
  id v7 = sub_100013854();
  [v6 addSubview:v7];

  id v8 = [v3 view];
  if (v8)
  {
    uint64_t v10 = v8;
    id v11 = sub_1000137D8((uint64_t)v8, v9);
    [v10 addSubview:v11];

    sub_100015C8C();
    if (*((_BYTE *)v3 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_isAddingParticipants) == 1)
    {
      id v12 = sub_1000138C8();
      uint64_t v14 = sub_100098818((uint64_t)v12, v13);

      uint64_t v15 = (uint64_t)sub_100014D88();
      uint64_t v16 = v15;
      if ((unint64_t)v15 >> 62)
      {
        if (v15 >= 0) {
          v15 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v15);
      }

      else
      {
        uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      swift_bridgeObjectRelease(v16);
      id v18 = sub_100013CCC(v17);
      [*(id *)((char *)&v14->receiver + OBJC_IVAR____TtC8FaceTime14FloatingButton_label) setAttributedText:v18];
    }
  }

  else
  {
    __break(1u);
  }

void sub_100014590(uint64_t a1, uint64_t a2)
{
  v26.receiver = v2;
  v26.super_class = (Class)type metadata accessor for ContactListWithSnowglobeViewController(a1, a2);
  objc_msgSendSuper2(&v26, "viewDidLayoutSubviews");
  id v3 = [v2 view];
  if (v3)
  {
    id v4 = v3;
    [v3 bounds];
    CGFloat v6 = v5;
    CGFloat v8 = v7;
    double v10 = v9;
    double v12 = v11;

    id v13 = sub_100013854();
    objc_msgSend(v13, "sizeThatFits:", v10, v12);
    double v15 = v14;
    double v25 = v14;
    double v17 = v16;

    v27.origin.x = v6;
    v27.origin.y = v8;
    v27.size.width = v10;
    v27.size.height = v12;
    CGFloat v18 = CGRectGetWidth(v27) * 0.25;
    v28.origin.x = v6;
    v28.origin.y = v8;
    v28.size.width = v10;
    v28.size.height = v12;
    double v19 = floor(v18 + CGRectGetMinX(v28) - v15 * 0.5);
    v29.origin.x = v6;
    v29.origin.y = v8;
    v29.size.width = v10;
    v29.size.height = v12;
    CGFloat v20 = CGRectGetHeight(v29) * 0.5;
    v30.origin.x = v6;
    v30.origin.y = v8;
    v30.size.width = v10;
    v30.size.height = v12;
    double v21 = floor(v20 + CGRectGetMinY(v30) - v17 * 0.5);
    id v24 = sub_1000137D8(v22, v23);
    objc_msgSend(v24, "setFrame:", v19, v21, v25, v17);
  }

  else
  {
    __break(1u);
  }

void sub_100014734()
{
  uint64_t v1 = v0;
  id v2 = sub_100013580();
  id v3 = [v2 superview];

  if (!v3)
  {
    uint64_t v4 = OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_usingIndexBar;
    id v5 = [v1 traitCollection];
    [v5 layoutDirection];

    id v6 = sub_100013580();
    [v6 contentInset];
    objc_msgSend(v6, "setContentInset:");

    uint64_t v7 = sub_100018A04(&qword_1001142B0);
    uint64_t v8 = swift_allocObject(v7, 48LL, 7LL);
    *(_OWORD *)(v8 + 16) = xmmword_1000C3FC0;
    *(void *)(v8 + 32) = sub_100013580();
    id v9 = sub_1000138C8();
    *(void *)(v8 + 40) = v9;
    specialized Array._endMutation()(v9);
    uint64_t v10 = v8;
    id v11 = objc_allocWithZone(&OBJC_CLASS___UIStackView);
    sub_10001C5D0(0LL, &qword_100112970, &OBJC_CLASS___UIView_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v10);
    id v13 = [v11 initWithArrangedSubviews:isa];

    [v13 setAxis:0];
    [v13 setDistribution:1];
    id v14 = [v1 view];
    if (v14)
    {
      double v15 = v14;
      [v14 addSubview:v13];

      if (*((_BYTE *)v1 + v4)) {
        double v16 = 26.0;
      }
      else {
        double v16 = 0.0;
      }
      double v17 = (char *)sub_1000138C8();
      id v18 = [v1 view];
      swift_unknownObjectWeakAssign(&v17[OBJC_IVAR____TtC8FaceTime13SnowglobeView_verticalCenteringView], v18);
      sub_10009902C();

      [v13 setTranslatesAutoresizingMaskIntoConstraints:0];
      id v19 = [v13 leadingAnchor];
      id v20 = [v1 view];
      if (v20)
      {
        double v21 = v20;
        id v22 = [v20 leadingAnchor];

        id v23 = [v19 constraintEqualToAnchor:v22 constant:v16];
        [v23 setActive:1];

        id v24 = [v13 trailingAnchor];
        id v25 = [v1 view];
        if (v25)
        {
          objc_super v26 = v25;
          id v27 = [v25 trailingAnchor];

          id v28 = [v24 constraintEqualToAnchor:v27];
          [v28 setActive:1];

          id v29 = [v13 bottomAnchor];
          id v30 = [v1 view];
          if (v30)
          {
            v31 = v30;
            id v32 = [v30 bottomAnchor];

            id v33 = [v29 constraintEqualToAnchor:v32];
            [v33 setActive:1];

            id v34 = [v13 topAnchor];
            id v35 = sub_100074738();
            id v36 = [v35 bottomAnchor];

            id v37 = [v34 constraintEqualToAnchor:v36 constant:9.0];
            [v37 setActive:1];

            id v38 = sub_1000138C8();
            id v39 = sub_100098F68();
            [v39 setConstant:-v16];

            return;
          }

          goto LABEL_13;
        }

uint64_t sub_100014C90()
{
  uint64_t v0 = (uint64_t)sub_100014D88();
  uint64_t v1 = v0;
  if ((unint64_t)v0 >> 62)
  {
    if (v0 >= 0) {
      v0 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v0);
  }

  else
  {
    uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  swift_bridgeObjectRelease(v1);
  uint64_t v3 = sub_100018A04(&qword_1001142B0);
  if (v2 == 1)
  {
    uint64_t v4 = swift_allocObject(v3, 48LL, 7LL);
    *(_OWORD *)(v4 + 16) = xmmword_1000C3FC0;
    id v5 = sub_1000138C8();
    uint64_t v7 = sub_100098818((uint64_t)v5, v6);

    *(void *)(v4 + 32) = v7;
    id v8 = sub_100013580();
    *(void *)(v4 + 40) = v8;
  }

  else
  {
    uint64_t v4 = swift_allocObject(v3, 40LL, 7LL);
    *(_OWORD *)(v4 + 16) = xmmword_1000C3FD0;
    id v8 = sub_100013580();
    *(void *)(v4 + 32) = v8;
  }

  specialized Array._endMutation()(v8);
  return v4;
}

void *sub_100014D88()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_dataSource);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_dataSource, v16, 0LL, 0LL);
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (v3)
  {
    uint64_t v4 = v2 + 32;
    uint64_t v15 = *v1;
    swift_bridgeObjectRetain_n(v2, 2LL);
    for (uint64_t i = 0LL; i != v3; ++i)
    {
      uint64_t v6 = *(void *)(v4 + 16 * i + 8);
      uint64_t v7 = *(void *)(v6 + 16);
      if (v7)
      {
        swift_bridgeObjectRetain_n(v6, 3LL);
        uint64_t v8 = 40LL;
        do
        {
          uint64_t v10 = *(void **)(v6 + v8);
          if (v10)
          {
            id v11 = v10;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
            unint64_t v13 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v12 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v13 >= v12 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1LL);
            }
            uint64_t v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
            specialized Array._endMutation()(v9);
          }

          v8 += 16LL;
          --v7;
        }

        while (v7);
        swift_bridgeObjectRelease(v6);
      }

      else
      {
        swift_bridgeObjectRetain_n(v6, 2LL);
      }

      swift_bridgeObjectRelease_n(v6, 2LL);
      sub_1000AC6F4((uint64_t)&_swiftEmptyArrayStorage);
    }

    swift_bridgeObjectRelease_n(v15, 2LL);
  }

  return &_swiftEmptyArrayStorage;
}

void sub_100014F1C(void *a1, uint64_t a2, void *a3, unsigned int *a4)
{
  uint64_t v7 = type metadata accessor for CallType(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *a4, v7);
  id v11 = a3;
  id v12 = a1;
  sub_100014FD4((uint64_t)v10, v11);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100014FD4(uint64_t a1, _BYTE *a2)
{
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for CallType(0LL);
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v49 + 64);
  __chkstk_darwin(v4);
  v48 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100018A04(&qword_100114970);
  __chkstk_darwin(v6);
  v47 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = &v2[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_dataSource];
  swift_beginAccess(&v2[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_dataSource], v54, 0LL, 0LL);
  uint64_t v10 = *(void *)v8;
  id v11 = _swiftEmptyArrayStorage;
  uint64_t v50 = v4;
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v12 = *(void *)(v10 + 16);
  if (v12)
  {
    v43 = a2;
    uint64_t v44 = v5;
    v45 = v2;
    uint64_t v13 = v10 + 32;
    uint64_t v42 = v10;
    swift_bridgeObjectRetain_n(v10, 2LL);
    for (uint64_t i = 0LL; i != v12; ++i)
    {
      uint64_t v16 = *(void *)(v13 + 16 * i + 8);
      unint64_t v53 = (unint64_t)_swiftEmptyArrayStorage;
      uint64_t v17 = *(void *)(v16 + 16);
      if (v17)
      {
        swift_bridgeObjectRetain_n(v16, 3LL);
        uint64_t v18 = 40LL;
        do
        {
          id v20 = *(void **)(v16 + v18);
          if (v20)
          {
            id v21 = v20;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
            unint64_t v23 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v22 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v23 >= v22 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1LL);
            }
            uint64_t v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
            specialized Array._endMutation()(v19);
          }

          v18 += 16LL;
          --v17;
        }

        while (v17);
        swift_bridgeObjectRelease(v16);
        uint64_t v15 = (void *)v53;
      }

      else
      {
        swift_bridgeObjectRetain_n(v16, 2LL);
        uint64_t v15 = _swiftEmptyArrayStorage;
      }

      swift_bridgeObjectRelease_n(v16, 2LL);
      sub_1000AC6F4((uint64_t)v15);
    }

    swift_bridgeObjectRelease_n(v42, 2LL);
    id v11 = (void *)aBlock[0];
    uint64_t v5 = v44;
    uint64_t v2 = v45;
    a2 = v43;
  }

  a2[OBJC_IVAR____TtC8FaceTime14FaceTimeButton_isWaitingForCallToStart] = 1;
  id v24 = (void *)objc_opt_self(&OBJC_CLASS___UIView, v9);
  uint64_t v25 = swift_allocObject(&unk_1000F7508, 24LL, 7LL);
  *(void *)(v25 + 16) = a2;
  aBlock[4] = sub_10001C420;
  uint64_t v52 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  aBlock[3] = &unk_1000F7520;
  objc_super v26 = _Block_copy(aBlock);
  uint64_t v27 = v52;
  id v28 = a2;
  swift_release(v27);
  [v24 animateWithDuration:v26 animations:0.3];
  _Block_release(v26);
  uint64_t v29 = type metadata accessor for TaskPriority(0LL);
  uint64_t v30 = (uint64_t)v47;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v47, 1LL, 1LL, v29);
  uint64_t v31 = swift_allocObject(&unk_1000F7558, 24LL, 7LL);
  swift_unknownObjectWeakInit(v31 + 16, v28);
  id v33 = v48;
  uint64_t v32 = v49;
  uint64_t v34 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v48, v46, v50);
  type metadata accessor for MainActor(0LL);
  swift_retain(v31);
  id v35 = v2;
  uint64_t v36 = static MainActor.shared.getter();
  uint64_t v37 = *(unsigned __int8 *)(v32 + 80);
  uint64_t v38 = (v37 + 56) & ~v37;
  id v39 = (char *)swift_allocObject(&unk_1000F7580, v38 + v5, v37 | 7);
  *((void *)v39 + 2) = v36;
  *((void *)v39 + 3) = &protocol witness table for MainActor;
  *((void *)v39 + 4) = v31;
  *((void *)v39 + 5) = v35;
  *((void *)v39 + 6) = v11;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v39[v38], v33, v34);
  swift_release(v31);
  uint64_t v40 = sub_1000B5C50(v30, (uint64_t)&unk_100112968, (uint64_t)v39);
  return swift_release(v40);
}

uint64_t sub_10001538C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  uint64_t v8 = type metadata accessor for CallIdentifier(0LL);
  v7[12] = v8;
  v7[13] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for MainActor(0LL);
  v7[14] = static MainActor.shared.getter(v9);
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v7[15] = v10;
  v7[16] = v11;
  return swift_task_switch(sub_100015420, v10, v11);
}

uint64_t sub_100015420()
{
  uint64_t v1 = v0[10];
  sub_10001C580( v0[9] + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_callManager,  (uint64_t)(v0 + 2));
  uint64_t v2 = sub_10001C3FC(v0 + 2, v0[5]);
  uint64_t v3 = swift_bridgeObjectRetain(v1);
  v0[17] = sub_1000B139C(v3);
  swift_bridgeObjectRelease(v1);
  v0[7] = *v2;
  return swift_task_switch(sub_1000154A0, 0LL, 0LL);
}

uint64_t sub_1000154A0()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[11];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[18] = v3;
  v3[2] = v0 + 7;
  v3[3] = v1;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[19] = v4;
  void *v4 = v0;
  v4[1] = sub_100015548;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0[13],  0LL,  0LL,  0xD000000000000015LL,  0x80000001000D85D0LL,  sub_10001C5C4,  v3,  v0[12]);
}

uint64_t sub_100015548()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 152LL);
  *(void *)(*(void *)v1 + 160LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_100015640;
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v7 = v2[17];
    uint64_t v8 = v2[13];
    swift_task_dealloc(v2[18]);
    sub_10001C644(v8, type metadata accessor for CallIdentifier);
    swift_bridgeObjectRelease(v7);
    uint64_t v5 = v2[15];
    uint64_t v6 = v2[16];
    uint64_t v4 = sub_1000155DC;
  }

  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000155DC()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 64);
  swift_release(*(void *)(v0 + 112));
  sub_10001BFEC((void *)(v0 + 16));
  sub_10002D35C(1);
  sub_1000156E0(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100015640()
{
  return swift_task_switch(sub_100015678, v0[15], v0[16]);
}

uint64_t sub_100015678()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 64);
  swift_release(*(void *)(v0 + 112));
  swift_bridgeObjectRelease(v1);
  sub_10001BFEC((void *)(v0 + 16));
  sub_1000156E0(v3);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000156E0(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v12, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    *(_BYTE *)(Strong + OBJC_IVAR____TtC8FaceTime14FaceTimeButton_isWaitingForCallToStart) = 0;
    uint64_t v5 = (void *)objc_opt_self(&OBJC_CLASS___UIView, v3);
    uint64_t v6 = swift_allocObject(&unk_1000F75A8, 24LL, 7LL);
    *(void *)(v6 + 16) = v4;
    aBlock[4] = sub_10001C99C;
    uint64_t v11 = v6;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_100027654;
    aBlock[3] = &unk_1000F75C0;
    uint64_t v7 = _Block_copy(aBlock);
    uint64_t v8 = v11;
    id v9 = v4;
    swift_release(v8);
    [v5 animateWithDuration:v7 animations:0.3];
    _Block_release(v7);
  }

uint64_t sub_1000157EC(uint64_t a1, uint64_t a2)
{
  id v3 = objc_msgSend((id)objc_opt_self(TUCallCenter, a2), "sharedInstance");
  id v4 = [v3 neighborhoodActivityConduit];

  uint64_t v5 = sub_100014D88();
  uint64_t v6 = sub_1000B139C((uint64_t)v5);
  swift_bridgeObjectRelease(v5);
  sub_10001C5D0(0LL, &qword_100112948, &OBJC_CLASS___TUContinuityHandleAnonym_ptr);
  sub_10001C230((unint64_t *)&unk_100112950, &qword_100112948, &OBJC_CLASS___TUContinuityHandleAnonym_ptr);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  uint64_t v19 = sub_1000159D0;
  uint64_t v20 = 0LL;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100061AB8;
  uint64_t v18 = &unk_1000F74D0;
  uint64_t v8 = _Block_copy(aBlock);
  [v4 addConversationParticipantsWithAnonyms:isa completion:v8];
  _Block_release(v8);

  uint64_t v9 = v2 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_sidebarDelegate;
  swift_beginAccess( v2 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_sidebarDelegate,  v16,  0LL,  0LL);
  sub_10001C3B8(v9, (uint64_t)aBlock, &qword_1001128D8);
  if (!v18) {
    return sub_10001C608((uint64_t)aBlock, &qword_1001128D8);
  }
  sub_10001C580((uint64_t)aBlock, (uint64_t)v13);
  sub_10001C608((uint64_t)aBlock, &qword_1001128D8);
  uint64_t v10 = v14;
  uint64_t v11 = v15;
  sub_10001C3FC(v13, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 8))(1LL, v10, v11);
  return sub_10001BFEC(v13);
}

void sub_1000159D0(char a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_100112170 != -1) {
      swift_once(&qword_100112170, sub_100013030);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    sub_10001C270(v3, (uint64_t)qword_100112178);
    swift_errorRetain(a2);
    uint64_t v4 = swift_errorRetain(a2);
    oslog = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v6 = 138412290;
      swift_errorRetain(a2);
      uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(a2);
      uint64_t v15 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v6 + 4, v6 + 12);
      *uint64_t v7 = v8;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Error adding participants: %@", v6, 0xCu);
      uint64_t v9 = sub_100018A04((uint64_t *)&unk_100112E20);
      swift_arrayDestroy(v7, 1LL, v9);
      swift_slowDealloc(v7, -1LL, -1LL);
LABEL_10:
      swift_slowDealloc(v6, -1LL, -1LL);

      return;
    }

    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  else
  {
    if (qword_100112170 != -1) {
      swift_once(&qword_100112170, sub_100013030);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = sub_10001C270(v11, (uint64_t)qword_100112178);
    oslog = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v13))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v6 = 67109120;
      HIDWORD(v16) = a1 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)((char *)&v16 + 4, &v17, v6 + 4, v6 + 8);
      _os_log_impl((void *)&_mh_execute_header, oslog, v13, "Add participants completed. success=%{BOOL}d", v6, 8u);
      goto LABEL_10;
    }
  }
}

void sub_100015C8C()
{
  id v1 = sub_100013854();
  [v1 startAnimating];

  id v2 = sub_100013854();
  [v2 setAlpha:1.0];

  id v5 = sub_1000137D8(v3, v4);
  [v5 setUserInteractionEnabled:1];

  id v7 = objc_msgSend((id)objc_opt_self(TUCallCenter, v6), "sharedInstance");
  id v8 = [v7 neighborhoodActivityConduit];

  uint64_t v9 = swift_allocObject(&unk_1000F7440, 24LL, 7LL);
  *(void *)(v9 + 16) = v0;
  v13[4] = sub_10001C210;
  uint64_t v14 = v9;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256LL;
  v13[2] = sub_100016638;
  void v13[3] = &unk_1000F7458;
  uint64_t v10 = _Block_copy(v13);
  uint64_t v11 = v14;
  id v12 = v0;
  swift_release(v11);
  [v8 getAddressableContactsWithCompletion:v10];
  _Block_release(v10);
}

void sub_100015DD0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a1) {
    goto LABEL_31;
  }
  uint64_t v70 = a2;
  v71 = a4;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v16 = &_swiftEmptySetSingleton;
    aBlock[0] = (uint64_t)&_swiftEmptySetSingleton;
    if (a1 >= 0) {
      uint64_t v17 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v17 = a1;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v18 = __CocoaSet.makeIterator()(v17);
    uint64_t v19 = __CocoaSet.Iterator.next()(v18);
    if (v19)
    {
      uint64_t v20 = v19;
      v64 = v15;
      uint64_t v65 = v13;
      uint64_t v66 = v12;
      v67 = v11;
      uint64_t v68 = v9;
      uint64_t v69 = v8;
      uint64_t v21 = sub_10001C5D0(0LL, &qword_100112910, &OBJC_CLASS___TUContinuitySessionContact_ptr);
      do
      {
        uint64_t v72 = v20;
        swift_dynamicCast(&v75, &v72, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
        id v23 = [v75 displayName];
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        unint64_t v26 = v25;

        swift_bridgeObjectRelease(v26);
        uint64_t v27 = HIBYTE(v26) & 0xF;
        if ((v26 & 0x2000000000000000LL) == 0) {
          uint64_t v27 = v24 & 0xFFFFFFFFFFFFLL;
        }
        id v28 = v75;
        if (v27)
        {
          uint64_t v29 = aBlock[0];
          unint64_t v30 = *(void *)(aBlock[0] + 16);
          if (*(void *)(aBlock[0] + 24) <= v30)
          {
            sub_1000AD4B0(v30 + 1);
            uint64_t v29 = aBlock[0];
          }

          Swift::Int v22 = NSObject._rawHashValue(seed:)(*(void *)(v29 + 40));
          uint64_t v31 = v29 + 56;
          uint64_t v32 = -1LL << *(_BYTE *)(v29 + 32);
          unint64_t v33 = v22 & ~v32;
          unint64_t v34 = v33 >> 6;
          if (((-1LL << v33) & ~*(void *)(v29 + 56 + 8 * (v33 >> 6))) != 0)
          {
            unint64_t v35 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v29 + 56 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
          }

          else
          {
            char v36 = 0;
            unint64_t v37 = (unint64_t)(63 - v32) >> 6;
            do
            {
              if (++v34 == v37 && (v36 & 1) != 0)
              {
                __break(1u);
                goto LABEL_36;
              }

              BOOL v38 = v34 == v37;
              if (v34 == v37) {
                unint64_t v34 = 0LL;
              }
              v36 |= v38;
              uint64_t v39 = *(void *)(v31 + 8 * v34);
            }

            while (v39 == -1);
            unint64_t v35 = __clz(__rbit64(~v39)) + (v34 << 6);
          }

          *(void *)(v31 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v35;
          *(void *)(*(void *)(v29 + 48) + 8 * v35) = v28;
          ++*(void *)(v29 + 16);
        }

        else
        {
        }

        uint64_t v20 = __CocoaSet.Iterator.next()(v22);
      }

      while (v20);
      uint64_t v16 = (void *)aBlock[0];
      uint64_t v9 = v68;
      uint64_t v8 = v69;
      uint64_t v12 = v66;
      uint64_t v11 = v67;
      uint64_t v15 = v64;
      uint64_t v13 = v65;
    }

    swift_release(v18);
    if (a3) {
      goto LABEL_30;
    }
LABEL_27:
    sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v69 = static OS_dispatch_queue.main.getter();
    unint64_t v41 = (void *)swift_allocObject(&unk_1000F7490, 40LL, 7LL);
    uint64_t v42 = v70;
    v43 = v71;
    v41[2] = v71;
    v41[3] = v16;
    v41[4] = v42;
    aBlock[4] = (uint64_t)sub_10001C2DC;
    v74 = v41;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_100027654;
    void aBlock[3] = (uint64_t)&unk_1000F74A8;
    uint64_t v44 = _Block_copy(aBlock);
    v45 = v74;
    id v46 = v43;
    uint64_t v47 = swift_release(v45);
    static DispatchQoS.unspecified.getter(v47);
    aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
    v48 = v15;
    uint64_t v49 = sub_10001949C( (unint64_t *)&qword_100112930,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v50 = sub_100018A04((uint64_t *)&unk_100112FD0);
    unint64_t v51 = sub_10001C2E8();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v50, v51, v8, v49);
    uint64_t v52 = (void *)v69;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v48, v11, v44);
    _Block_release(v44);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v48, v12);
    return;
  }

  uint64_t v40 = swift_bridgeObjectRetain(a1);
  uint64_t v16 = (void *)sub_100019F44(v40);
  if (!a3) {
    goto LABEL_27;
  }
LABEL_30:
  swift_release(v16);
LABEL_31:
  if (qword_100112170 != -1) {
LABEL_36:
  }
    swift_once(&qword_100112170, sub_100013030);
  uint64_t v53 = type metadata accessor for Logger(0LL);
  sub_10001C270(v53, (uint64_t)qword_100112178);
  swift_errorRetain(a3);
  uint64_t v54 = swift_errorRetain(a3);
  v55 = (os_log_s *)Logger.logObject.getter(v54);
  os_log_type_t v56 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v58 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v58;
    *(_DWORD *)v57 = 136315138;
    id v75 = a3;
    swift_errorRetain(a3);
    uint64_t v59 = sub_100018A04((uint64_t *)&unk_100112920);
    uint64_t v60 = String.init<A>(describing:)(&v75, v59);
    unint64_t v62 = v61;
    id v75 = (id)sub_1000850E4(v60, v61, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v57 + 4, v57 + 12);
    swift_bridgeObjectRelease(v62);
    swift_errorRelease(a3);
    swift_errorRelease(a3);
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Error retrieving contacts: %s", v57, 0xCu);
    swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1LL, -1LL);
    swift_slowDealloc(v57, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a3);
    swift_errorRelease(a3);
  }
}

void sub_100016390(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = a2 & 0xC000000000000001LL;
  if ((a2 & 0xC000000000000001LL) != 0)
  {
    if (a2 < 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v8 = __CocoaSet.count.getter(v7);
  }

  else
  {
    uint64_t v8 = *(void *)(a2 + 16);
  }

  uint64_t v9 = OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_usingIndexBar;
  a1[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_usingIndexBar] = v8 > 19;
  sub_100014734();
  uint64_t v10 = swift_bridgeObjectRetain(a2);
  uint64_t v11 = sub_1000958FC(v10);
  swift_bridgeObjectRelease(a2);
  sub_1000166F8((uint64_t)v11, a3);
  swift_release(v11);
  id v12 = sub_100013580();
  [v12 reloadData];

  if (a1[v9] == 1)
  {
    id v13 = sub_100013580();
    sub_10001341C();
    uint64_t v15 = v14;
    [v13 _updateFocusFastScrollingIndexBarConfiguration:v14];
  }

  id v16 = [a1 navigationController];
  if (v16)
  {
    uint64_t v18 = v16;
    [v16 setNeedsFocusUpdate];
  }

  id v19 = sub_1000137D8((uint64_t)v16, v17);
  [v19 setUserInteractionEnabled:0];

  id v20 = sub_100013854();
  [v20 stopAnimating];

  id v21 = sub_100013854();
  [v21 setAlpha:0.0];

  if (!v6)
  {
    if (*(void *)(a2 + 16)) {
      return;
    }
    goto LABEL_18;
  }

  if (a2 < 0) {
    uint64_t v22 = a2;
  }
  else {
    uint64_t v22 = a2 & 0xFFFFFFFFFFFFFF8LL;
  }
  if (!__CocoaSet.count.getter(v22))
  {
LABEL_18:
    int v23 = a1[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_isAddingParticipants];
    uint64_t v24 = (char *)sub_1000138C8();
    unint64_t v26 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v25), "mainBundle");
    if (v23 == 1)
    {
      unint64_t v27 = 0xD000000000000031LL;
      unint64_t v33 = 0xEB00000000656C62LL;
      unint64_t v28 = 0x80000001000D8550LL;
    }

    else
    {
      unint64_t v33 = 0xEB00000000656C62LL;
      unint64_t v28 = 0x80000001000D8520LL;
      unint64_t v27 = 0xD00000000000002BLL;
    }

    v29._countAndFlagsBits = 0LL;
    v29._object = (void *)0xE000000000000000LL;
    uint64_t v30 = 0x617A696C61636F4CLL;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)( *(Swift::String *)&v27,  (Swift::String_optional)0,  v26,  v29,  *(Swift::String *)(&v33 + -8))._object;

    uint64_t v32 = *(void **)&v24[OBJC_IVAR____TtC8FaceTime13SnowglobeView_noUserLabel];
    id v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    [v32 setText:v34];
  }

uint64_t sub_100016638(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  if (a2)
  {
    uint64_t v9 = sub_10001C5D0(0LL, &qword_100112910, &OBJC_CLASS___TUContinuitySessionContact_ptr);
    uint64_t v10 = sub_10001C230(&qword_100112918, &qword_100112910, &OBJC_CLASS___TUContinuitySessionContact_ptr);
    uint64_t v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v6, v9, v10);
  }

  swift_retain(v7);
  id v11 = a4;
  v8(v6, a3, a4);
  swift_release(v7);

  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_1000166F8(uint64_t a1, uint64_t a2)
{
  id v58 = objc_msgSend((id)objc_opt_self(UILocalizedIndexedCollation, a2), "currentCollation");
  unint64_t v61 = &_swiftEmptyDictionarySingleton;
  uint64_t v3 = (NSString *)String._bridgeToObjectiveC()();
  SEL v57 = NSSelectorFromString(v3);

  if ((unint64_t)a1 >> 62)
  {
LABEL_42:
    if (a1 < 0) {
      uint64_t v45 = a1;
    }
    else {
      uint64_t v45 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v45);
    if (v4) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v4)
    {
LABEL_3:
      unint64_t v56 = a1 & 0xC000000000000001LL;
      id v5 = &_swiftEmptyDictionarySingleton;
      uint64_t v6 = 4LL;
      uint64_t v54 = v4;
      uint64_t v55 = a1;
      while (1)
      {
        if (v56) {
          id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1);
        }
        else {
          id v8 = *(id *)(a1 + 8 * v6);
        }
        uint64_t v9 = v8;
        uint64_t v10 = v6 - 3;
        if (__OFADD__(v6 - 4, 1LL))
        {
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }

        id v11 = [v58 sectionForObject:v8 collationStringSelector:v57];
        uint64_t v12 = (uint64_t)v11;
        if (v5[2] && (unint64_t v13 = sub_10002FBFC((uint64_t)v11), (v14 & 1) != 0))
        {
          v60[0] = *(void *)(v5[7] + 8 * v13);
          swift_bridgeObjectRetain(v60[0]);
          id v15 = v9;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
          unint64_t v17 = *(void *)((v60[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v16 = *(void *)((v60[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v17 >= v16 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1LL);
          }
          uint64_t v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
          specialized Array._endMutation()(v18);
          uint64_t v19 = v60[0];
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
          uint64_t v59 = v5;
          a1 = (uint64_t)v5;
          unint64_t v22 = sub_10002FBFC(v12);
          uint64_t v23 = v5[2];
          BOOL v24 = (v21 & 1) == 0;
          uint64_t v25 = v23 + v24;
          if (__OFADD__(v23, v24)) {
            goto LABEL_40;
          }
          char v26 = v21;
          if (v5[3] >= v25)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              id v5 = v59;
              if ((v21 & 1) == 0) {
                goto LABEL_34;
              }
            }

            else
            {
              a1 = (uint64_t)&v59;
              sub_100068FAC();
              id v5 = v59;
              if ((v26 & 1) == 0) {
                goto LABEL_34;
              }
            }
          }

          else
          {
            sub_100065ED4(v25, isUniquelyReferenced_nonNull_native);
            a1 = (uint64_t)v59;
            unint64_t v27 = sub_10002FBFC(v12);
            if ((v26 & 1) != (v28 & 1)) {
              goto LABEL_48;
            }
            unint64_t v22 = v27;
            id v5 = v59;
            if ((v26 & 1) == 0)
            {
LABEL_34:
              v5[(v22 >> 6) + 8] |= 1LL << v22;
              uint64_t v43 = 8 * v22;
              *(void *)(v5[6] + v43) = v12;
              *(void *)(v5[7] + v43) = v19;
              uint64_t v44 = v5[2];
              BOOL v41 = __OFADD__(v44, 1LL);
              uint64_t v42 = v44 + 1;
              if (v41) {
                goto LABEL_41;
              }
              goto LABEL_35;
            }
          }

          uint64_t v7 = v5[7];
          a1 = 8 * v22;
        }

        else
        {
          uint64_t v29 = sub_100018A04(&qword_1001142B0);
          uint64_t v30 = swift_allocObject(v29, 40LL, 7LL);
          *(_OWORD *)(v30 + 16) = xmmword_1000C3FD0;
          *(void *)(v30 + 32) = v9;
          v60[0] = v30;
          specialized Array._endMutation()(v30);
          uint64_t v19 = v60[0];
          id v15 = v9;
          uint64_t v31 = swift_isUniquelyReferenced_nonNull_native(v5);
          v60[0] = (uint64_t)v5;
          a1 = (uint64_t)v5;
          unint64_t v33 = sub_10002FBFC(v12);
          uint64_t v34 = v5[2];
          BOOL v35 = (v32 & 1) == 0;
          uint64_t v36 = v34 + v35;
          if (__OFADD__(v34, v35)) {
            goto LABEL_38;
          }
          char v37 = v32;
          if (v5[3] >= v36)
          {
            if ((v31 & 1) == 0) {
              sub_100068FAC();
            }
          }

          else
          {
            sub_100065ED4(v36, v31);
            unint64_t v38 = sub_10002FBFC(v12);
            if ((v37 & 1) != (v39 & 1))
            {
LABEL_48:
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
              __break(1u);
              uint64_t result = swift_release(v60[0]);
              __break(1u);
              return result;
            }

            unint64_t v33 = v38;
          }

          id v5 = (void *)v60[0];
          a1 = 8 * v33;
          if ((v37 & 1) == 0)
          {
            *(void *)(v60[0] + 8 * (v33 >> 6) + 64) |= 1LL << v33;
            *(void *)(v5[6] + 8 * v33) = v12;
            *(void *)(v5[7] + 8 * v33) = v19;
            uint64_t v40 = v5[2];
            BOOL v41 = __OFADD__(v40, 1LL);
            uint64_t v42 = v40 + 1;
            if (v41) {
              goto LABEL_39;
            }
LABEL_35:
            v5[2] = v42;
            goto LABEL_6;
          }

          uint64_t v7 = *(void *)(v60[0] + 56);
        }

        swift_bridgeObjectRelease(*(void *)(v7 + a1));
        *(void *)(v7 + a1) = v19;
LABEL_6:

        swift_bridgeObjectRelease(0x8000000000000000LL);
        a1 = v55;
        ++v6;
        if (v10 == v54)
        {
          unint64_t v61 = v5;
          goto LABEL_47;
        }
      }
    }
  }

  id v5 = &_swiftEmptyDictionarySingleton;
LABEL_47:
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRetain_n(v5, 2LL);
  id v46 = sub_100095818((uint64_t)v5);
  swift_bridgeObjectRelease(v5);
  v60[0] = (uint64_t)v46;
  sub_10001A298(v60);
  swift_bridgeObjectRelease(v5);
  uint64_t v47 = v60[0];
  id v48 = v58;
  uint64_t v49 = sub_10001AD7C(v47, (uint64_t *)&v61, v48, (uint64_t)v57);
  swift_release(v47);

  uint64_t v50 = (uint64_t *)(v53 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_dataSource);
  swift_beginAccess(v53 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_dataSource, v60, 1LL, 0LL);
  uint64_t v51 = *v50;
  *uint64_t v50 = (uint64_t)v49;

  swift_bridgeObjectRelease(v51);
  return swift_bridgeObjectRelease(v61);
}

uint64_t sub_100016C14@<X0>( uint64_t result@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = *(void *)result;
  uint64_t v7 = *a2;
  if (!*(void *)(*a2 + 16)) {
    goto LABEL_13;
  }
  uint64_t result = sub_10002FBFC(*(void *)result);
  if ((v10 & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v11 = *(void *)(*(void *)(v7 + 56) + 8 * result);
  uint64_t v12 = swift_bridgeObjectRetain(v11);
  uint64_t v13 = sub_100016E7C(v12);
  swift_bridgeObjectRelease(v11);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v13);
  id v15 = [a3 sortedArrayFromArray:isa collationStringSelector:a4];

  uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, (char *)&type metadata for Any + 8);
  uint64_t v17 = (uint64_t)sub_1000170DC(v16);
  uint64_t result = swift_bridgeObjectRelease(v16);
  if (!v17) {
    goto LABEL_13;
  }
  if (!((unint64_t)v17 >> 62))
  {
    uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    if (v18) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }

  if (v17 >= 0) {
    uint64_t v29 = v17 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    uint64_t v29 = v17;
  }
  swift_bridgeObjectRetain(v17);
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter(v29);
  swift_bridgeObjectRelease(v17);
  if (!v18)
  {
LABEL_23:
    uint64_t result = swift_bridgeObjectRelease(v17);
LABEL_13:
    *a5 = v6;
    a5[1] = (uint64_t)_swiftEmptyArrayStorage;
    return result;
  }

LABEL_6:
  uint64_t result = sub_1000ABBE8(0, v18 & ~(v18 >> 63), 0);
  if ((v18 & 0x8000000000000000LL) == 0)
  {
    uint64_t v30 = v6;
    if ((v17 & 0xC000000000000001LL) != 0)
    {
      uint64_t v19 = 0LL;
      do
      {
        uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v17);
        unint64_t v22 = _swiftEmptyArrayStorage[2];
        unint64_t v21 = _swiftEmptyArrayStorage[3];
        if (v22 >= v21 >> 1) {
          sub_1000ABBE8(v21 > 1, v22 + 1, 1);
        }
        ++v19;
        _swiftEmptyArrayStorage[2] = v22 + 1;
        uint64_t v23 = &_swiftEmptyArrayStorage[2 * v22];
        v23[4] = v20;
        v23[5] = 0LL;
      }

      while (v18 != v19);
    }

    else
    {
      BOOL v24 = (id *)(v17 + 32);
      do
      {
        unint64_t v25 = _swiftEmptyArrayStorage[2];
        unint64_t v26 = _swiftEmptyArrayStorage[3];
        id v27 = *v24;
        if (v25 >= v26 >> 1) {
          sub_1000ABBE8(v26 > 1, v25 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v25 + 1;
        char v28 = &_swiftEmptyArrayStorage[2 * v25];
        v28[4] = v27;
        v28[5] = 0LL;
        ++v24;
        --v18;
      }

      while (v18);
    }

    uint64_t result = swift_bridgeObjectRelease(v17);
    uint64_t v6 = v30;
    goto LABEL_13;
  }

  __break(1u);
  return result;
}

uint64_t sub_100016E7C(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1000ABC04(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000LL) == 0)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
      {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        uint64_t v6 = sub_10001C5D0(0LL, &qword_100112910, &OBJC_CLASS___TUContinuitySessionContact_ptr);
        swift_dynamicCast(v16, &v15, v6, (char *)&type metadata for Any + 8, 7LL);
        uint64_t v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_1000ABC04(0, v3[2] + 1LL, 1);
          uint64_t v3 = v17;
        }

        unint64_t v8 = v3[2];
        unint64_t v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_1000ABC04(v7 > 1, v8 + 1, 1);
          uint64_t v3 = v17;
        }

        v3[2] = v8 + 1;
        sub_10001C1DC(v16, &v3[4 * v8 + 4]);
      }
    }

    else
    {
      uint64_t v9 = (id *)(a1 + 32);
      uint64_t v10 = sub_10001C5D0(0LL, &qword_100112910, &OBJC_CLASS___TUContinuitySessionContact_ptr);
      do
      {
        id v15 = *v9;
        id v11 = v15;
        swift_dynamicCast(v16, &v15, v10, (char *)&type metadata for Any + 8, 7LL);
        uint64_t v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_1000ABC04(0, v3[2] + 1LL, 1);
          uint64_t v3 = v17;
        }

        unint64_t v13 = v3[2];
        unint64_t v12 = v3[3];
        if (v13 >= v12 >> 1)
        {
          sub_1000ABC04(v12 > 1, v13 + 1, 1);
          uint64_t v3 = v17;
        }

        v3[2] = v13 + 1;
        sub_10001C1DC(v16, &v3[4 * v13 + 4]);
        ++v9;
        --v2;
      }

      while (v2);
    }

    return (uint64_t)v3;
  }

  __break(1u);
  return result;
}

void *sub_1000170DC(uint64_t a1)
{
  id v11 = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v2);
  if (!v2) {
    return v11;
  }
  for (uint64_t i = a1 + 32; ; i += 32LL)
  {
    sub_10001C1A0(i, (uint64_t)v10);
    uint64_t v4 = sub_10001C5D0(0LL, &qword_100112910, &OBJC_CLASS___TUContinuitySessionContact_ptr);
    id v5 = v9;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v6 = v11[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
    uint64_t v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v5);
    specialized ContiguousArray._endMutation()(v7);
    if (!--v2) {
      return v11;
    }
  }

  id v9 = 0LL;
  swift_release(v11);

  return 0LL;
}

uint64_t sub_1000172A8(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100018A04(&qword_100114970);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100018A04(&qword_1001128F0);
  __chkstk_darwin(v9);
  id v11 = (id *)((char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  NSString v12 = String._bridgeToObjectiveC()();
  unint64_t v13 = (void *)IndexPath._bridgeToObjectiveC()();
  id v14 = [a1 dequeueReusableCellWithReuseIdentifier:v12 forIndexPath:v13];

  uint64_t v15 = type metadata accessor for CreateCallCollectionViewCell(0LL);
  uint64_t v16 = swift_dynamicCastClassUnconditional(v14, v15, 0LL, 0LL, 0LL);
  unint64_t v17 = IndexPath.section.getter();
  unint64_t v18 = IndexPath.row.getter();
  uint64_t v19 = &v3[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_dataSource];
  uint64_t result = swift_beginAccess( &v3[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_dataSource],  v71,  0LL,  0LL);
  if ((v17 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v17 >= *(void *)(*(void *)v19 + 16LL))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((v18 & 0x8000000000000000LL) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v21 = *(void *)(*(void *)v19 + 16 * v17 + 40);
  if (v18 >= *(void *)(v21 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }

  id v68 = v14;
  uint64_t v69 = v8;
  uint64_t v22 = v21 + 16 * v18;
  uint64_t v23 = v3;
  unint64_t v25 = *(void **)(v22 + 32);
  BOOL v24 = *(void **)(v22 + 40);
  id v66 = v24;
  id v26 = v25;
  id v27 = [v26 contactIdentifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  uint64_t v29 = v28;

  v67 = v23;
  uint64_t v30 = *(void **)&v23[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_imageCache];
  NSString v31 = String._bridgeToObjectiveC()();
  id v32 = [v30 objectForKey:v31];

  if (!v32) {
    id v32 = (id)static TVContactImageUtilities.placeholderImage.getter();
  }
  swift_bridgeObjectRelease(v29);
  uint64_t v33 = OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_contactPickerControl;
  uint64_t v34 = *(char **)(v16 + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_contactPickerControl);
  BOOL v35 = *(void **)&v34[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_avatarView];
  uint64_t v36 = v34;
  [v35 setImage:v32];

  id v37 = [v26 displayName];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  uint64_t v39 = v38;

  uint64_t v40 = *(char **)(v16 + v33);
  BOOL v41 = *(void **)&v40[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_titleLabel];
  uint64_t v42 = v40;
  NSString v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v39);
  [v41 setText:v43];

  *(_BYTE *)(v16 + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_isUserSelected) = v24 != 0LL;
  uint64_t v44 = *(_BYTE **)(v16 + v33);
  v44[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_isUserSelected] = v24 != 0LL;
  uint64_t v45 = v44;
  sub_100092B38();

  uint64_t v46 = sub_100018A04(&qword_1001128F8);
  uint64_t v47 = (char *)v11 + *(int *)(v46 + 48);
  void *v11 = v26;
  v11[1] = v24;
  uint64_t v48 = type metadata accessor for IndexPath(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v48 - 8) + 16LL))(v47, a2, v48);
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56LL))(v11, 0LL, 1LL, v46);
  uint64_t v49 = v16 + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_item;
  swift_beginAccess(v16 + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_item, v70, 33LL, 0LL);
  id v50 = v26;
  id v51 = v66;
  sub_10001C024((uint64_t)v11, v49);
  swift_endAccess(v70);
  sub_1000948E8();
  sub_10001C608((uint64_t)v11, &qword_1001128F0);
  uint64_t v52 = swift_allocObject(&unk_1000F73C8, 24LL, 7LL);
  uint64_t v53 = v67;
  *(void *)(v52 + 16) = v67;
  uint64_t v54 = (void (**)(void *, objc_super *))(v16
                                                   + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_selectionHandler);
  uint64_t v55 = *(void *)(v16 + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_selectionHandler);
  uint64_t v56 = *(void *)(v16 + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_selectionHandler + 8);
  *uint64_t v54 = sub_10001C06C;
  v54[1] = (void (*)(void *, objc_super *))v52;
  id v57 = v53;
  sub_10001C08C(v55, v56);
  uint64_t v58 = type metadata accessor for TaskPriority(0LL);
  uint64_t v59 = (uint64_t)v69;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56LL))(v69, 1LL, 1LL, v58);
  uint64_t v60 = swift_allocObject(&unk_1000F73F0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v60 + 16, v57);
  type metadata accessor for MainActor(0LL);
  id v61 = v50;
  swift_retain(v60);
  uint64_t v62 = static MainActor.shared.getter(v68);
  uint64_t v63 = (void *)swift_allocObject(&unk_1000F7418, 56LL, 7LL);
  v63[2] = v62;
  v63[3] = &protocol witness table for MainActor;
  v63[4] = v60;
  v63[5] = v61;
  v63[6] = v16;
  swift_release(v60);
  uint64_t v64 = sub_1000B5C50(v59, (uint64_t)&unk_100112908, (uint64_t)v63);
  uint64_t v65 = *(void *)(v16 + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_imageFetchTask);
  *(void *)(v16 + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_imageFetchTask) = v64;

  swift_release(v65);
  return v16;
}

uint64_t sub_1000177DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[12] = a5;
  v6[13] = a6;
  v6[11] = a4;
  uint64_t v7 = sub_100018A04(&qword_1001128F0);
  v6[14] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for MainActor(0LL);
  v6[15] = static MainActor.shared.getter(v8);
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v6[16] = v9;
  v6[17] = v10;
  return swift_task_switch(sub_100017870, v9, v10);
}

uint64_t sub_100017870()
{
  uint64_t v1 = *(void *)(v0 + 88) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  *(void *)(v0 + 144) = Strong;
  if (Strong)
  {
    uint64_t v3 = (void *)swift_task_alloc(dword_10011260C);
    *(void *)(v0 + 152) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100017910;
    return sub_100018398(*(void *)(v0 + 96));
  }

  else
  {
    swift_release(*(void *)(v0 + 120));
    swift_task_dealloc(*(void *)(v0 + 112));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100017910(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void **)(*v1 + 144);
  uint64_t v3 = *(void *)(*v1 + 152);
  *(void *)(*v1 + 160) = a1;
  swift_task_dealloc(v3);

  return swift_task_switch(sub_10001796C, *(void *)(v2 + 128), *(void *)(v2 + 136));
}

uint64_t sub_10001796C()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_release(*(void *)(v0 + 120));
  v1 += 16LL;
  swift_beginAccess(v1, v0 + 40, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v4 = *(void *)(v0 + 112);
    id v6 = [*(id *)(v0 + 96) contactIdentifier];
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    uint64_t v9 = v8;

    uint64_t v10 = v5 + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_item;
    swift_beginAccess(v5 + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_item, v0 + 64, 0LL, 0LL);
    sub_10001C3B8(v10, v4, &qword_1001128F0);
    uint64_t v11 = sub_100018A04(&qword_1001128F8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v4, 1LL, v11))
    {
      NSString v12 = *(void **)(v0 + 160);
      sub_10001C608(*(void *)(v0 + 112), &qword_1001128F0);
      swift_bridgeObjectRelease(v9);
    }

    else
    {
      unint64_t v13 = *(id **)(v0 + 112);
      id v14 = *v13;
      sub_10001C608((uint64_t)v13, &qword_1001128F0);
      id v15 = [v14 contactIdentifier];

      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      uint64_t v18 = v17;

      if (v7 == v16 && v9 == v18)
      {
        swift_bridgeObjectRelease_n(v9, 2LL);
      }

      else
      {
        char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v16, v18, 0LL);
        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRelease(v9);
        if ((v19 & 1) == 0)
        {
          NSString v12 = *(void **)(v0 + 160);
          goto LABEL_11;
        }
      }

      NSString v12 = *(void **)(v0 + 160);
      objc_msgSend( *(id *)(*(void *)(*(void *)(v0 + 104)
                          + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_contactPickerControl)
              + OBJC_IVAR____TtC8FaceTime20ContactPickerControl_avatarView),
        "setImage:",
        v12);
    }

void sub_100017D00(void *a1, objc_super *a2)
{
  uint64_t v4 = v2;
  unint64_t v7 = IndexPath.section.getter();
  uint64_t v8 = IndexPath.row.getter();
  uint64_t v9 = &v4[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_dataSource];
  swift_beginAccess(&v4[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_dataSource], v52, 0LL, 0LL);
  if ((v7 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  if (v7 >= *(void *)(*(void *)v9 + 16LL))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (v8 < 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v10 = *(void *)(*(void *)v9 + 16 * v7 + 40);
  if ((unint64_t)v8 >= *(void *)(v10 + 16))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    if (v8 < 0) {
      uint64_t v47 = v8;
    }
    else {
      uint64_t v47 = v8 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v46 = _CocoaArrayWrapper.endIndex.getter(v47);
    goto LABEL_14;
  }

  uint64_t v11 = v10 + 16 * v8;
  NSString v12 = *(void **)(v11 + 32);
  unint64_t v13 = *(void **)(v11 + 40);
  unint64_t v7 = a1;
  uint64_t v9 = v12;
  id v3 = v13;
  sub_100018128(a2, v9, a1);

  if (v13)
  {
    if (!a1)
    {
      id v14 = v3;
      id v15 = sub_1000138C8();
      id v16 = [v14 identifier];
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      uint64_t v19 = v18;

      sub_10009841C(v17, v19, (uint64_t)a2);
      swift_bridgeObjectRelease(v19);
    }
  }

  else if (a1)
  {
    id v50 = v3;
    unint64_t v51 = v7;
    id v20 = (id)v7;
    id v21 = [v9 contactIdentifier];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v23 = v22;

    BOOL v24 = *(void **)&v4[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_imageCache];
    NSString v25 = String._bridgeToObjectiveC()();
    id v26 = [v24 objectForKey:v25];

    if (!v26) {
      id v26 = (id)static TVContactImageUtilities.placeholderImage.getter();
    }
    swift_bridgeObjectRelease(v23);
    id v27 = sub_1000138C8();
    id v28 = [v20 identifier];
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    uint64_t v31 = v30;

    id v32 = [v9 displayName];
    uint64_t v48 = v20;
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    uint64_t v35 = v34;

    id v49 = v26;
    uint64_t v36 = sub_100099150();
    sub_10009E6A4(v29, v31, v33, v35, v26, (uint64_t)a2);
    uint64_t v38 = v37;

    uint64_t v39 = *(void **)(v38 + OBJC_IVAR____TtC8FaceTime6Bubble_focus);
    sub_10001C5D0(0LL, (unint64_t *)&unk_1001128E0, &OBJC_CLASS___UIAction_ptr);
    uint64_t v40 = swift_allocObject(&unk_1000F73A0, 32LL, 7LL);
    *(void *)(v40 + 16) = v27;
    *(void *)(v40 + 24) = v38;
    id v41 = v39;
    id v42 = v27;
    __n128 v43 = swift_retain(v38);
    uint64_t v44 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)( 0LL,  0xE000000000000000LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  v43,  0LL,  0LL,  0LL,  sub_10001C01C,  v40);
    [v41 addAction:v44 forControlEvents:0x2000];

    sub_10009B844();
    sub_10009BA04();
    uint64_t v45 = sub_100099150();
    LOBYTE(v44) = v45[OBJC_IVAR____TtC8FaceTime9Snowglobe_mode];

    sub_10009A978((char)v44);
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v35);

    swift_release(v38);
    id v3 = v50;
    unint64_t v7 = v51;
  }

  uint64_t v8 = (uint64_t)sub_100014D88();
  uint64_t v46 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_14:
  swift_bridgeObjectRelease(v8);
  if (v46 == 1) {
    [v4 setNeedsFocusUpdate];
  }
}

void sub_100018128(objc_super *a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  unint64_t v8 = IndexPath.section.getter();
  uint64_t v9 = IndexPath.row.getter();
  uint64_t v10 = (void **)(v4 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_dataSource);
  swift_beginAccess(v4 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_dataSource, v34, 33LL, 0LL);
  uint64_t v11 = *v10;
  id v12 = a3;
  id v13 = a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
  *uint64_t v10 = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    if ((v8 & 0x8000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v11 = sub_10001AC08(v11);
  *uint64_t v10 = v11;
  if ((v8 & 0x8000000000000000LL) != 0) {
    goto LABEL_13;
  }
LABEL_3:
  if (v8 >= v11[2])
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  id v15 = &v11[2 * v8];
  unint64_t v16 = v15[5];
  uint64_t v11 = v15 + 5;
  unint64_t v8 = v16;
  char v17 = swift_isUniquelyReferenced_nonNull_native(v16);
  void *v11 = v16;
  if ((v17 & 1) != 0)
  {
    if ((v9 & 0x8000000000000000LL) == 0) {
      goto LABEL_6;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

LABEL_15:
  unint64_t v8 = (unint64_t)sub_10001ABF4((void *)v8);
  void *v11 = v8;
  if (v9 < 0) {
    goto LABEL_16;
  }
LABEL_6:
  if ((unint64_t)v9 >= *(void *)(v8 + 16))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    if (v9 < 0) {
      uint64_t v33 = v9;
    }
    else {
      uint64_t v33 = v9 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter(v33);
    goto LABEL_10;
  }

  unint64_t v18 = v8 + 16 * v9;
  uint64_t v19 = *(void **)(v18 + 32);
  id v20 = *(void **)(v18 + 40);
  *(void *)(v18 + 32) = v13;
  *(void *)(v18 + 40) = a3;
  swift_endAccess(v34);

  id v21 = sub_100013580();
  uint64_t v22 = sub_100018A04(&qword_100112898);
  uint64_t v23 = type metadata accessor for IndexPath(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v26 = (v25 + 32) & ~v25;
  uint64_t v27 = swift_allocObject(v22, v26 + *(void *)(v24 + 72), v25 | 7);
  *(_OWORD *)(v27 + 16) = xmmword_1000C3FB0;
  (*(void (**)(uint64_t, objc_super *, uint64_t))(v24 + 16))(v27 + v26, a1, v23);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v27);
  [v21 reloadItemsAtIndexPaths:isa];

  if (*(_BYTE *)(v4 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_isAddingParticipants) != 1) {
    return;
  }
  id v29 = sub_1000138C8();
  a1 = sub_100098818((uint64_t)v29, v30);

  uint64_t v9 = (uint64_t)sub_100014D88();
  uint64_t v31 = *(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_10:
  swift_bridgeObjectRelease(v9);
  id v32 = sub_100013CCC(v31);
  [*(id *)((char *)&a1->receiver + OBJC_IVAR____TtC8FaceTime14FloatingButton_label) setAttributedText:v32];
}

  id v12 = sub_100037144();
  [v12 setAlpha:0.0];

  id v15 = sub_1000366E0(v13, v14);
  [v15 removeFromSuperview];

  unint64_t v18 = sub_100036970(v16, v17);
  [v18 removeFromSuperview];

  id v21 = sub_100036C08(v19, v20);
  [v21 removeFromSuperview];

  uint64_t v24 = sub_100036E9C(v22, v23);
  [v24 removeFromSuperview];

  if (v5 == 2)
  {
    if (v6 == 2) {
      goto LABEL_17;
    }
LABEL_23:
    uint64_t v35 = sub_100037144();
    uint64_t v37 = sub_1000366E0((uint64_t)v35, v36);
    [v35 addArrangedSubview:v37];

    if (v7 == 2) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  id v32 = sub_100037144();
  uint64_t v34 = sub_100036970((uint64_t)v32, v33);
  [v32 addArrangedSubview:v34];

  if (v6 != 2) {
    goto LABEL_23;
  }
LABEL_17:
  if (v7 != 2)
  {
LABEL_18:
    uint64_t v25 = sub_100037144();
    uint64_t v27 = sub_100036C08((uint64_t)v25, v26);
    [v25 addArrangedSubview:v27];
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

    if (qword_100112390 != -1) {
      swift_once(&qword_100112390, sub_1000872BC);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    sub_10001C270(v5, (uint64_t)qword_100115448);
    id v6 = v2;
    unint64_t v7 = (void *)Logger.logObject.getter(v6);
    unint64_t v8 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled((os_log_t)v7, v8))
    {

LABEL_26:
      uint64_t v24 = (uint64_t)v2;
      LOBYTE(v25) = v3;
      id v21 = v6;
      CurrentValueSubject.send(_:)(&v24);

      return;
    }

    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v26 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    if (v3)
    {
      if (v3 != 1)
      {
        id v20 = 0xEC000000656C6261LL;
        uint64_t v19 = 0x6C696176616E752ELL;
        goto LABEL_25;
      }

      uint64_t v24 = 0x62616C696176612ELL;
      uint64_t v25 = 0xEB0000000028656CLL;
      uint64_t v22 = v6;
      uint64_t v11 = [v22 uniqueID];
    }

    else
    {
      uint64_t v24 = 0x286E65646469682ELL;
      uint64_t v25 = 0xE800000000000000LL;
      uint64_t v22 = v6;
      uint64_t v11 = [v22 uniqueID];
    }

    id v12 = v11;
    id v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v23 = v10;
    id v15 = v14;

    v16._countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    char v17 = v15;
    uint64_t v10 = v23;
    swift_bridgeObjectRelease(v17);
    v18._countAndFlagsBits = 41LL;
    v18._object = (void *)0xE100000000000000LL;
    String.append(_:)(v18);

    uint64_t v19 = v24;
    id v20 = v25;
LABEL_25:
    uint64_t v24 = sub_1000850E4(v19, v20, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v9 + 4, v9 + 12);

    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v7, v8, "CaptureDeviceState updated to: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    goto LABEL_26;
  }

  if (v25 == 1)
  {

    if (v3 != 1) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }

  if (v2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3 == 2;
  }
  if (!v4) {
    goto LABEL_15;
  }
}

  __break(1u);
}

  __break(1u);
}

uint64_t sub_100018398(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for ContactImageIdentifier(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  void v2[5] = v4;
  v2[6] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for MainActor(0LL);
  v2[7] = static MainActor.shared.getter(v5);
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v2[8] = v6;
  v2[9] = v7;
  return swift_task_switch(sub_10001842C, v6, v7);
}

uint64_t sub_10001842C()
{
  id v1 = [*(id *)(v0 + 16) contactIdentifier];
  NSString v2 = v1;
  NSString v3 = v1;
  if (!v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v5 = v4;
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v7 = v6;
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
  }

  *(void *)(v0 + 80) = v2;
  uint64_t v8 = *(void *)(v0 + 24);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v11 = v10;
  id v12 = *(void **)(v8 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_imageCache);
  *(void *)(v0 + 8_Block_object_dispose(va, 8) = v12;
  id v13 = v1;
  id v14 = [v12 objectForKey:v3];

  if (v14)
  {
    uint64_t v15 = *(void *)(v0 + 56);
    swift_bridgeObjectRelease(v11);

    swift_release(v15);
    swift_task_dealloc(*(void *)(v0 + 48));
    return (*(uint64_t (**)(id))(v0 + 8))(v14);
  }

  else
  {
    uint64_t v18 = *(void *)(v0 + 40);
    char v17 = *(uint64_t **)(v0 + 48);
    uint64_t v19 = *(void **)(v0 + 16);
    *char v17 = v9;
    v17[1] = v11;
    (*(void (**)(void))(v18 + 104))();
    id v20 = [v19 contact];
    *(void *)(v0 + 96) = v20;
    *(void *)(v0 + 104) = v21;
    void *v21 = v0;
    v21[1] = sub_1000185C4;
    return static TVContactImageUtilities.image(for:fallback:)(*(void *)(v0 + 48), v20);
  }

uint64_t sub_1000185C4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void **)(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 104);
  uint64_t v6 = *(void *)(*v1 + 40);
  uint64_t v5 = *(void *)(*v1 + 48);
  uint64_t v7 = *(void *)(*v1 + 32);
  *(void *)(*v1 + 112) = a1;
  swift_task_dealloc(v3);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  return swift_task_switch(sub_100018648, *(void *)(v2 + 64), *(void *)(v2 + 72));
}

uint64_t sub_100018648()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = *(void **)(v0 + 80);
  uint64_t v2 = *(void **)(v0 + 88);
  swift_release(*(void *)(v0 + 56));
  [v2 setObject:v1 forKey:v3];

  uint64_t v4 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 48));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

void sub_1000186E4()
{
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_reuseIdentifier
                                      + 8));
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_headerReuseIdentifier
                                      + 8));
  sub_10001BFEC((void *)(v0 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_callManager));

  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_dataSource));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController____lazy_storage___collectionView));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController____lazy_storage___loadingButton));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController____lazy_storage___loadingSpinner));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController____lazy_storage___snowglobeView));
}

id sub_1000187C0(uint64_t a1, uint64_t a2)
{
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for ContactListWithSnowglobeViewController(a1, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

void sub_100018958(uint64_t a1, objc_super *a2)
{
}

uint64_t variable initialization expression of GradientView.colors()
{
  uint64_t v0 = sub_100018A04(&qword_1001142B0);
  uint64_t v1 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_1000C3FC0;
  *(void *)(v1 + 32) = [objc_allocWithZone(UIColor) initWithWhite:0.0 alpha:0.0];
  id v2 = [objc_allocWithZone(UIColor) initWithWhite:0.0 alpha:1.0];
  *(void *)(v1 + 40) = v2;
  specialized Array._endMutation()(v2);
  return v1;
}

uint64_t sub_100018A04(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

double variable initialization expression of GradientView.startPoint()
{
  return 0.5;
}

double variable initialization expression of GradientView.endPoint()
{
  return 0.5;
}

_UNKNOWN **variable initialization expression of GradientView.locations()
{
  return &off_1000F7050;
}

id variable initialization expression of FloatingButton.label()
{
  return [objc_allocWithZone(UILabel) init];
}

id variable initialization expression of FloatingButton.defaultBackgroundColor()
{
  return [objc_allocWithZone(UIColor) initWithWhite:0.0 alpha:0.0];
}

id variable initialization expression of FloatingButton.highlightedBackgroundColor()
{
  return [objc_allocWithZone(UIColor) initWithWhite:1.0 alpha:1.0];
}

id variable initialization expression of FloatingButton.buttonFont(uint64_t a1, uint64_t a2)
{
  return objc_msgSend((id)objc_opt_self(UIFont, a2), "systemFontOfSize:weight:", 32.0, UIFontWeightBold);
}

id variable initialization expression of FloatingButton.highlightForegroundColor(uint64_t a1, uint64_t a2)
{
  return objc_msgSend((id)objc_opt_self(UIColor, a2), "blackColor");
}

id variable initialization expression of FloatingButton.defaultForegroundColor(uint64_t a1, uint64_t a2)
{
  return objc_msgSend((id)objc_opt_self(UIColor, a2), "whiteColor");
}

uint64_t variable initialization expression of FloatingButton.$__lazy_storage_$_highlightView()
{
  return 0LL;
}

double variable initialization expression of SpringModel.duration()
{
  return 0.0;
}

uint64_t type metadata accessor for ContactListWithSnowglobeViewController(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime38ContactListWithSnowglobeViewController, a2);
}

void type metadata accessor for Operation(uint64_t a1)
{
}

void type metadata accessor for PressType(uint64_t a1)
{
}

__n128 initializeWithTake for GroupedContacts(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_100018BE8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100018C08(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for PBSSystemAttentionState(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void *initializeBufferWithCopyOfBuffer for GroupedContacts(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for GroupedContacts(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *assignWithCopy for GroupedContacts(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

void *assignWithTake for GroupedContacts(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupedContacts(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupedContacts(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for GroupedContacts()
{
  return &type metadata for GroupedContacts;
}

void type metadata accessor for PBSBulletinDismissalReason(uint64_t a1)
{
}

void type metadata accessor for Code(uint64_t a1)
{
}

void type metadata accessor for TUNeighborhoodActivityConduitError(uint64_t a1)
{
}

uint64_t sub_100018DE0(uint64_t a1, uint64_t a2)
{
  return sub_100019758(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

void sub_100018DF8(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100018E0C(uint64_t a1)
{
  uint64_t v2 = sub_10001949C( &qword_100112858,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000C41D0);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100018E4C(uint64_t a1)
{
  uint64_t v2 = sub_10001949C( &qword_100112858,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000C41D0);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100018E90(uint64_t a1)
{
  uint64_t v2 = sub_10001949C( &qword_100112848,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000C4444);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id sub_100018ED0()
{
  return *v0;
}

uint64_t sub_100018ED8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_100018EE0(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

uint64_t sub_100018F54(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100018FD0@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

Swift::Int sub_100019010()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100019054()
{
}

Swift::Int sub_10001907C(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000190BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000190E8()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(TUNeighborhoodActivityConduitErrorDomain);
}

uint64_t sub_1000190F8(uint64_t a1)
{
  uint64_t v2 = sub_10001949C( &qword_100112848,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000C4444);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100019138(uint64_t a1)
{
  uint64_t v2 = sub_10001949C( &qword_100112848,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000C4444);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100019178(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10001949C( &qword_100112848,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000C4444);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000191DC()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_100019210(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001949C( &qword_100112848,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000C4444);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100019260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

BOOL sub_1000192BC(void *a1, void *a2)
{
  return *a1 == *a2;
}

void *sub_1000192D0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = 0;
  return result;
}

uint64_t sub_1000192E4(uint64_t a1)
{
  uint64_t v2 = sub_10001949C( &qword_100112A40,  (uint64_t (*)(uint64_t))type metadata accessor for PBSUserNotificationWaitViewType,  (uint64_t)&unk_1000C49B0);
  uint64_t v3 = sub_10001949C( &qword_100112A48,  (uint64_t (*)(uint64_t))type metadata accessor for PBSUserNotificationWaitViewType,  (uint64_t)&unk_1000C4950);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100019368(uint64_t a1)
{
  uint64_t v2 = sub_10001949C( (unint64_t *)&qword_100112A50,  (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey,  (uint64_t)&unk_1000C4A88);
  uint64_t v3 = sub_10001949C( &qword_100112A58,  (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey,  (uint64_t)&unk_1000C483C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000193EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10001949C( &qword_100112848,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000C4444);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100019444()
{
  return sub_10001949C( &qword_100112830,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000C4138);
}

uint64_t sub_100019470()
{
  return sub_10001949C( &qword_100112838,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000C4404);
}

uint64_t sub_10001949C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000194DC()
{
  return sub_10001949C( &qword_100112840,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1000C4210);
}

uint64_t sub_100019508()
{
  return sub_10001949C( &qword_100112848,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000C4444);
}

uint64_t sub_100019534()
{
  return sub_10001949C( &qword_100112850,  (uint64_t (*)(uint64_t))type metadata accessor for PressType,  (uint64_t)&unk_1000C438C);
}

uint64_t sub_100019560()
{
  return sub_10001949C( &qword_100112858,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000C41D0);
}

uint64_t sub_10001958C()
{
  return sub_10001949C( &qword_100112860,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000C41A0);
}

uint64_t sub_1000195B8()
{
  return sub_10001949C( &qword_100112868,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000C4160);
}

uint64_t sub_1000195E4()
{
  return sub_10001949C( &qword_100112870,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1000C4238);
}

uint64_t sub_100019610()
{
  return sub_10001949C( &qword_100112878,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1000C4270);
}

unint64_t sub_100019640()
{
  unint64_t result = qword_100112880;
  if (!qword_100112880)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100112880);
  }

  return result;
}

uint64_t sub_100019684@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_1000196C8(uint64_t a1)
{
  uint64_t v2 = sub_10001949C( &qword_100112A60,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceType,  (uint64_t)&unk_1000C474C);
  uint64_t v3 = sub_10001949C( &qword_100112A68,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceType,  (uint64_t)&unk_1000C46F4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10001974C(uint64_t a1, uint64_t a2)
{
  return sub_100019758(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100019758(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  uint64_t v7 = v6;
  uint64_t v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100019794(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000197D4(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100019844(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

void *sub_1000198CC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100018A04(&qword_1001128A0);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      id v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      id v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_10001B570(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1000199D8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100018A04((uint64_t *)&unk_1001128B0);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      id v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      id v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_10001B480(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_100019AE4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100018A04(&qword_100112890);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      id v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      id v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_10001B390(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_100019BF0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100018A04(&qword_1001128D0);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      id v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      id v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_10001B2A0(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_100019CFC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100019D24(a1, a2, a3, a4, &qword_1001128C8, type metadata accessor for NearbyConversationViewModel);
}

uint64_t sub_100019D10(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100019D24( a1,  a2,  a3,  a4,  (uint64_t *)&unk_100116060,  (uint64_t (*)(void))&type metadata accessor for RecentsCallItem);
}

uint64_t sub_100019D24( char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v10 = a2;
  }

  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_100018A04(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15) {
    goto LABEL_29;
  }
  if (v19 - v17 == 0x8000000000000000LL && v15 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    unint64_t v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(void *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }

    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }

    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10001BED4(0LL, v11, v24, a4, a6);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_100019F30(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100019D24( a1,  a2,  a3,  a4,  &qword_1001128C0,  (uint64_t (*)(void))&type metadata accessor for RecentsCallHandle);
}

Swift::Int sub_100019F44(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v4 = v3 & 0x3F;
  unint64_t v5 = (1LL << v3) + 63;
  uint64_t v6 = v5 >> 6;
  size_t v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL), v7);
    Swift::Int v8 = sub_10001A0A0((Swift::Int)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL), v6, v2);
    uint64_t v9 = swift_release(v2);
    if (v1) {
      swift_willThrow(v9);
    }
  }

  else
  {
    uint64_t v10 = (void *)swift_slowAlloc(v7, -1LL);
    bzero(v10, v7);
    Swift::Int v8 = sub_10001A0A0((Swift::Int)v10, v6, v2);
    swift_release(v2);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  return v8;
}

Swift::Int sub_10001A0A0(Swift::Int result, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a2;
  uint64_t v22 = (unint64_t *)result;
  int64_t v4 = 0LL;
  uint64_t v5 = a3 + 56;
  uint64_t v6 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 56);
  int64_t v24 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_5:
    id v11 = *(id *)(*(void *)(a3 + 48) + 8 * v10);
    id v12 = objc_msgSend(v11, "displayName", v21);
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    unint64_t v15 = v14;

    uint64_t result = swift_bridgeObjectRelease(v15);
    uint64_t v16 = HIBYTE(v15) & 0xF;
    if ((v15 & 0x2000000000000000LL) == 0) {
      uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
    }
    if (v16)
    {
      *(unint64_t *)((char *)v22 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v10;
      if (__OFADD__(v23++, 1LL))
      {
        __break(1u);
LABEL_26:
        swift_retain(a3);
        return sub_100072D34(v22, v21, v23, a3);
      }
    }
  }

  int64_t v17 = v4 + 1;
  if (__OFADD__(v4, 1LL))
  {
    __break(1u);
    goto LABEL_28;
  }

  if (v17 >= v24) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v5 + 8 * v17);
  ++v4;
  if (v18) {
    goto LABEL_22;
  }
  int64_t v4 = v17 + 1;
  if (v17 + 1 >= v24) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v5 + 8 * v4);
  if (v18) {
    goto LABEL_22;
  }
  int64_t v4 = v17 + 2;
  if (v17 + 2 >= v24) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v5 + 8 * v4);
  if (v18)
  {
LABEL_22:
    unint64_t v8 = (v18 - 1) & v18;
    unint64_t v10 = __clz(__rbit64(v18)) + (v4 << 6);
    goto LABEL_5;
  }

  int64_t v19 = v17 + 3;
  if (v19 >= v24) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v5 + 8 * v19);
  if (v18)
  {
    int64_t v4 = v19;
    goto LABEL_22;
  }

  while (1)
  {
    int64_t v4 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v4 >= v24) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v5 + 8 * v4);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }

LABEL_28:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

      int64_t v17 = 0LL;
      int64_t v19 = 1LL;
      unint64_t v15 = v26;
      goto LABEL_4;
    }

                      __break(1u);
                      return;
                    }

      __break(1u);
      goto LABEL_29;
    }

Swift::Int sub_10001A298(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v2 = sub_100091F84(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_10001A300(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_10001A300(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      uint64_t v80 = 0LL;
      uint64_t v81 = *v2;
      uint64_t v82 = 1LL;
      while (1)
      {
        uint64_t v83 = *(void *)(v81 + 8 * v82);
        uint64_t v84 = v80;
        do
        {
          uint64_t v85 = *(void *)(v81 + v84);
          if (v83 >= v85) {
            break;
          }
          if (!v81) {
            goto LABEL_143;
          }
          *(void *)(v81 + v84 + _Block_object_dispose(va, 8) = v85;
          *(void *)(v81 + v84) = v83;
          v84 -= 8LL;
        }

        while (v84 != -8);
        ++v82;
        v80 += 8LL;
        if (v82 == v3) {
          return result;
        }
      }
    }

    goto LABEL_139;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1)
  {
LABEL_148:
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
    __break(1u);
    return result;
  }

  Swift::Int v96 = result;
  Swift::Int v97 = v3;
  if (v3 < 2)
  {
    unint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      id v11 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }

    v95 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for Int);
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v97;
    v95 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }

  Swift::Int v9 = 0LL;
  uint64_t v10 = *v2;
  v93 = v2;
  uint64_t v94 = *v2 - 8LL;
  id v11 = (char *)_swiftEmptyArrayStorage;
  uint64_t v98 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      uint64_t v14 = *(void *)(v10 + 8 * v9);
      uint64_t v15 = *(void *)(v10 + 8 * v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        uint64_t v16 = v14;
        while (1)
        {
          uint64_t v17 = *(void *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16) {
            break;
          }
          ++v9;
          uint64_t v16 = v17;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }

      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_140;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = v9 - 1;
          Swift::Int v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_146;
              }
              uint64_t v20 = *(void *)(v10 + 8 * v19);
              *(void *)(v10 + 8 * v19) = *(void *)(v10 + 8 * v18);
              *(void *)(v10 + 8 * v1_Block_object_dispose(va, 8) = v20;
            }

            BOOL v59 = ++v19 < v18--;
          }

          while (v59);
        }
      }
    }

    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_138;
      }
      if (v9 - v13 < v96)
      {
        Swift::Int v21 = v13 + v96;
        if (__OFADD__(v13, v96)) {
          goto LABEL_141;
        }
        if (v21 >= v3) {
          Swift::Int v21 = v3;
        }
        if (v21 < v13) {
          goto LABEL_142;
        }
        if (v9 != v21)
        {
          uint64_t v22 = (uint64_t *)(v94 + 8 * v9);
          do
          {
            uint64_t v23 = *(void *)(v10 + 8 * v9);
            Swift::Int v24 = v13;
            unint64_t v25 = v22;
            do
            {
              uint64_t v26 = *v25;
              if (v23 >= *v25) {
                break;
              }
              if (!v10) {
                goto LABEL_144;
              }
              *unint64_t v25 = v23;
              v25[1] = v26;
              --v25;
              ++v24;
            }

            while (v9 != v24);
            ++v9;
            ++v22;
          }

          while (v9 != v21);
          Swift::Int v9 = v21;
        }
      }
    }

    if (v9 < v13)
    {
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }

    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0) {
      id v11 = sub_100091C00(0LL, *((void *)v11 + 2) + 1LL, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v98;
    if (v28 >= v27 >> 1)
    {
      v77 = sub_100091C00((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v98;
      id v11 = v77;
    }

    *((void *)v11 + 2) = v12;
    id v29 = v11 + 32;
    uint64_t v30 = &v11[16 * v28 + 32];
    *(void *)uint64_t v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28) {
      break;
    }
    unint64_t v12 = 1LL;
LABEL_15:
    Swift::Int v3 = v97;
    if (v9 >= v97)
    {
      unint64_t v8 = v95;
      uint64_t v2 = v93;
LABEL_104:
      v95 = v8;
      if (v12 < 2)
      {
LABEL_115:
        v79 = v11;
        goto LABEL_116;
      }

      uint64_t v86 = *v2;
      while (1)
      {
        unint64_t v87 = v12 - 2;
        if (v12 < 2) {
          break;
        }
        if (!v86) {
          goto LABEL_147;
        }
        v78 = v11;
        v88 = v11 + 32;
        uint64_t v89 = *(void *)&v11[16 * v87 + 32];
        uint64_t v90 = *(void *)&v11[16 * v12 + 24];
        sub_10001A988( (char *)(v86 + 8 * v89),  (char *)(v86 + 8LL * *(void *)&v88[16 * v12 - 16]),  v86 + 8 * v90,  __dst);
        if (v1) {
          goto LABEL_95;
        }
        if (v90 < v89) {
          goto LABEL_135;
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v78) & 1) == 0) {
          v78 = sub_100091EAC((uint64_t)v78);
        }
        if (v87 >= *((void *)v78 + 2)) {
          goto LABEL_136;
        }
        v91 = &v78[16 * v87 + 32];
        *(void *)v91 = v89;
        *((void *)v91 + 1) = v90;
        unint64_t v92 = *((void *)v78 + 2);
        if (v12 > v92) {
          goto LABEL_137;
        }
        memmove(&v78[16 * v12 + 16], &v78[16 * v12 + 32], 16 * (v92 - v12));
        id v11 = v78;
        *((void *)v78 + 2) = v92 - 1;
        unint64_t v12 = v92 - 1;
        if (v92 <= 2) {
          goto LABEL_115;
        }
      }

LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
  }

  while (1)
  {
    unint64_t v31 = v12 - 1;
    if (v12 >= 4)
    {
      uint64_t v36 = &v29[16 * v12];
      uint64_t v37 = *((void *)v36 - 8);
      uint64_t v38 = *((void *)v36 - 7);
      BOOL v42 = __OFSUB__(v38, v37);
      uint64_t v39 = v38 - v37;
      if (v42) {
        goto LABEL_122;
      }
      uint64_t v41 = *((void *)v36 - 6);
      uint64_t v40 = *((void *)v36 - 5);
      BOOL v42 = __OFSUB__(v40, v41);
      uint64_t v34 = v40 - v41;
      char v35 = v42;
      if (v42) {
        goto LABEL_123;
      }
      unint64_t v43 = v12 - 2;
      uint64_t v44 = &v29[16 * v12 - 32];
      uint64_t v46 = *(void *)v44;
      uint64_t v45 = *((void *)v44 + 1);
      BOOL v42 = __OFSUB__(v45, v46);
      uint64_t v47 = v45 - v46;
      if (v42) {
        goto LABEL_125;
      }
      BOOL v42 = __OFADD__(v34, v47);
      uint64_t v48 = v34 + v47;
      if (v42) {
        goto LABEL_128;
      }
      if (v48 >= v39)
      {
        id v66 = &v29[16 * v31];
        uint64_t v68 = *(void *)v66;
        uint64_t v67 = *((void *)v66 + 1);
        BOOL v42 = __OFSUB__(v67, v68);
        uint64_t v69 = v67 - v68;
        if (v42) {
          goto LABEL_132;
        }
        BOOL v59 = v34 < v69;
        goto LABEL_84;
      }
    }

    else
    {
      if (v12 != 3)
      {
        uint64_t v60 = *((void *)v11 + 4);
        uint64_t v61 = *((void *)v11 + 5);
        BOOL v42 = __OFSUB__(v61, v60);
        uint64_t v53 = v61 - v60;
        char v54 = v42;
        goto LABEL_78;
      }

      uint64_t v33 = *((void *)v11 + 4);
      uint64_t v32 = *((void *)v11 + 5);
      BOOL v42 = __OFSUB__(v32, v33);
      uint64_t v34 = v32 - v33;
      char v35 = v42;
    }

    if ((v35 & 1) != 0) {
      goto LABEL_124;
    }
    unint64_t v43 = v12 - 2;
    id v49 = &v29[16 * v12 - 32];
    uint64_t v51 = *(void *)v49;
    uint64_t v50 = *((void *)v49 + 1);
    BOOL v52 = __OFSUB__(v50, v51);
    uint64_t v53 = v50 - v51;
    char v54 = v52;
    if (v52) {
      goto LABEL_127;
    }
    uint64_t v55 = &v29[16 * v31];
    uint64_t v57 = *(void *)v55;
    uint64_t v56 = *((void *)v55 + 1);
    BOOL v42 = __OFSUB__(v56, v57);
    uint64_t v58 = v56 - v57;
    if (v42) {
      goto LABEL_130;
    }
    if (__OFADD__(v53, v58)) {
      goto LABEL_131;
    }
    if (v53 + v58 >= v34)
    {
      BOOL v59 = v34 < v58;
LABEL_84:
      if (v59) {
        unint64_t v31 = v43;
      }
      goto LABEL_86;
    }

LABEL_78:
    if ((v54 & 1) != 0) {
      goto LABEL_126;
    }
    uint64_t v62 = &v29[16 * v31];
    uint64_t v64 = *(void *)v62;
    uint64_t v63 = *((void *)v62 + 1);
    BOOL v42 = __OFSUB__(v63, v64);
    uint64_t v65 = v63 - v64;
    if (v42) {
      goto LABEL_129;
    }
    if (v65 < v53) {
      goto LABEL_15;
    }
LABEL_86:
    unint64_t v70 = v31 - 1;
    if (v31 - 1 >= v12)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }

    if (!v10) {
      goto LABEL_145;
    }
    v71 = &v29[16 * v70];
    uint64_t v72 = *(void *)v71;
    v73 = v29;
    v74 = &v29[16 * v31];
    uint64_t v75 = *((void *)v74 + 1);
    sub_10001A988((char *)(v10 + 8LL * *(void *)v71), (char *)(v10 + 8LL * *(void *)v74), v10 + 8 * v75, __dst);
    if (v1) {
      break;
    }
    if (v75 < v72) {
      goto LABEL_119;
    }
    if (v31 > *((void *)v11 + 2)) {
      goto LABEL_120;
    }
    *(void *)v71 = v72;
    *(void *)&v73[16 * v70 + 8] = v75;
    unint64_t v76 = *((void *)v11 + 2);
    if (v31 >= v76) {
      goto LABEL_121;
    }
    unint64_t v12 = v76 - 1;
    memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
    id v29 = v73;
    *((void *)v11 + 2) = v76 - 1;
    uint64_t v10 = v98;
    if (v76 <= 2) {
      goto LABEL_15;
    }
  }

  v78 = v11;
LABEL_95:
  v79 = v78;
LABEL_116:
  swift_bridgeObjectRelease(v79);
  v95[2] = 0LL;
  return swift_bridgeObjectRelease(v95);
}

uint64_t sub_10001A988(char *__src, char *a2, unint64_t a3, char *__dst)
{
  int64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  uint64_t v13 = v12 >> 3;
  Swift::Int v24 = __src;
  uint64_t v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      uint64_t v16 = &v4[8 * v13];
      uint64_t v22 = v16;
      Swift::Int v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        uint64_t v17 = (char *)(a3 - 8);
        while (1)
        {
          Swift::Int v18 = v17 + 8;
          Swift::Int v19 = v6 - 8;
          uint64_t v20 = *((void *)v6 - 1);
          if (*((void *)v16 - 1) >= v20)
          {
            uint64_t v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              *(void *)uint64_t v17 = *((void *)v16 - 1);
            }
            v16 -= 8;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }

          else
          {
            if (v18 != v6 || v17 >= v6) {
              *(void *)uint64_t v17 = v20;
            }
            Swift::Int v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }

          v17 -= 8;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }

      goto LABEL_42;
    }
  }

  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v14 = &v4[8 * v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(void *)v6 >= *(void *)v4)
        {
          if (v7 != v4) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          v4 += 8;
          uint64_t v23 = v4;
          uint64_t v15 = v6;
        }

        else
        {
          uint64_t v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }

        v7 += 8;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }

      while ((unint64_t)v15 < a3);
      Swift::Int v24 = v7;
    }

LABEL_42:
    sub_100091CF8((void **)&v24, (const void **)&v23, &v22);
    return 1LL;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

void *sub_10001ABF4(void *a1)
{
  return sub_1000198CC(0LL, a1[2], 0, a1);
}

void *sub_10001AC08(void *a1)
{
  return sub_1000199D8(0LL, a1[2], 0, a1);
}

uint64_t sub_10001AC1C(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v2, 0LL, a1);
}

void *sub_10001AC84(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000ABBB0(0, v1, 0);
    Swift::Int v3 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v4 = *v3++;
      id v5 = sub_100013580();
      id v6 = [v5 numberOfItemsInSection:v4];

      unint64_t v8 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1) {
        sub_1000ABBB0(v7 > 1, v8 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v8 + 1;
      _swiftEmptyArrayStorage[v8 + 4] = v6;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

void *sub_10001AD7C(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  int64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    uint64_t v22 = _swiftEmptyArrayStorage;
    sub_1000ABBCC(0, v6, 0);
    unint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v10 = (uint64_t *)(a1 + 32);
    while (1)
    {
      uint64_t v11 = *v10++;
      uint64_t v20 = v11;
      sub_100016C14((uint64_t)&v20, a2, a3, a4, v21);
      if (v5) {
        break;
      }
      uint64_t v5 = 0LL;
      uint64_t v13 = v21[0];
      uint64_t v12 = v21[1];
      uint64_t v22 = v7;
      unint64_t v15 = v7[2];
      unint64_t v14 = v7[3];
      if (v15 >= v14 >> 1)
      {
        sub_1000ABBCC(v14 > 1, v15 + 1, 1);
        unint64_t v7 = v22;
      }

      v7[2] = v15 + 1;
      uint64_t v16 = &v7[2 * v15];
      v16[4] = v13;
      v16[5] = v12;
      if (!--v6) {
        return v7;
      }
    }

    swift_release(v7);
  }

  return v7;
}

void sub_10001AE88()
{
  int64_t v1 = &v0[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_sidebarDelegate];
  *(_OWORD *)int64_t v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((void *)v1 + 4) = 0LL;
  v0[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_isAddingParticipants] = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_reuseIdentifier];
  void *v2 = 0xD00000000000001CLL;
  v2[1] = 0x80000001000D86D0LL;
  Swift::Int v3 = &v0[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_headerReuseIdentifier];
  *Swift::Int v3 = 0xD00000000000001ELL;
  v3[1] = 0x80000001000D86F0LL;
  uint64_t v4 = &v0[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_callManager];
  if (qword_100112380 != -1) {
    swift_once(&qword_100112380, sub_100080AF0);
  }
  uint64_t v5 = (void *)qword_10011A2F0;
  v4[3] = type metadata accessor for ATVCallManager(0LL);
  v4[4] = &off_1000FAC48;
  void *v4 = v5;
  v0[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_usingIndexBar] = 0;
  uint64_t v6 = OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_featureFlags;
  id v7 = objc_allocWithZone(&OBJC_CLASS___TUFeatureFlags);
  id v8 = v5;
  *(void *)&v0[v6] = [v7 init];
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_dataSource] = &_swiftEmptyArrayStorage;
  uint64_t v9 = OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_imageCache;
  *(void *)&v0[v9] = [objc_allocWithZone(NSCache) init];
  uint64_t v10 = OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_layout;
  id v11 = [objc_allocWithZone(UICollectionViewFlowLayout) init];
  if (qword_100112190 != -1) {
    swift_once(&qword_100112190, sub_1000133E4);
  }
  [v11 setItemSize:xmmword_100112198];
  [v11 setMinimumLineSpacing:14.0];
  [v11 setMinimumInteritemSpacing:0.0];
  if (qword_1001121A8 != -1) {
    swift_once(&qword_1001121A8, sub_1000133FC);
  }
  objc_msgSend(v11, "setSectionInset:", xmmword_1001121B0, *(double *)&qword_1001121C0, unk_1001121C8);
  objc_msgSend(v11, "setHeaderReferenceSize:", 30.0, 30.0);
  *(void *)&v0[v10] = v11;
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController____lazy_storage___collectionView] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController____lazy_storage___loadingButton] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController____lazy_storage___loadingSpinner] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController____lazy_storage___snowglobeView] = 0LL;

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/ContactListWithSnowglobeViewController.swift",  53LL,  2LL,  146LL,  0);
  __break(1u);
}

id sub_10001B134()
{
  id result = [v0 view];
  if (result)
  {
    uint64_t v2 = result;
    [result setAlpha:1.0];

    uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___UIView, v3);
    uint64_t v5 = swift_allocObject(&unk_1000F75F8, 24LL, 7LL);
    *(void *)(v5 + 16) = v0;
    uint64_t v6 = swift_allocObject(&unk_1000F7620, 32LL, 7LL);
    *(void *)(v6 + 16) = sub_10001C680;
    *(void *)(v6 + 24) = v5;
    v11[4] = sub_10001C698;
    uint64_t v12 = v6;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256LL;
    v11[2] = sub_1000983FC;
    v11[3] = &unk_1000F7638;
    id v7 = _Block_copy(v11);
    uint64_t v8 = v12;
    id v9 = v0;
    swift_retain(v6);
    swift_release(v8);
    [v4 performWithoutAnimation:v7];
    _Block_release(v7);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v6, "", 119LL, 151LL, 40LL, 1LL);
    swift_release(v5);
    id result = (id)swift_release(v6);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return result;
    }
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_10001B2A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10001B390(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10001B480(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10001B570(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100018A04(&qword_1001128A8);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

void *sub_10001B678()
{
  int64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_dataSource);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_dataSource, v60, 0LL, 0LL);
  uint64_t v2 = *v1;
  uint64_t v57 = *(void *)(*v1 + 16);
  if (!v57) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v55 = *v1;
  uint64_t v56 = v2 + 32;
  swift_bridgeObjectRetain_n(v2, 2LL);
  uint64_t v3 = 0LL;
  uint64_t v4 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v59 = v3;
    uint64_t v6 = *(void *)(v56 + 16 * v3 + 8);
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      uint64_t v58 = v4;
      swift_bridgeObjectRetain_n(v6, 3LL);
      uint64_t v8 = (id *)(v6 + 40);
      id v9 = _swiftEmptyArrayStorage;
      while (!*v8)
      {
LABEL_8:
        v8 += 2;
        if (!--v7)
        {
          swift_bridgeObjectRelease_n(v6, 3LL);
          uint64_t v4 = v58;
          goto LABEL_33;
        }
      }

      id v11 = *(v8 - 1);
      id v12 = *v8;
      id v13 = v11;
      id v14 = [v13 contact];
      id v15 = [v14 firstName];

      if (v15)
      {
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        unint64_t v18 = v17;

        uint64_t v19 = HIBYTE(v18) & 0xF;
        if ((v18 & 0x2000000000000000LL) == 0) {
          uint64_t v19 = v16 & 0xFFFFFFFFFFFFLL;
        }
        if (v19) {
          goto LABEL_14;
        }
        swift_bridgeObjectRelease(v18);
      }

      id v20 = [v13 contact];
      id v21 = [v20 organizationName];

      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      unint64_t v24 = v23;

      swift_bridgeObjectRelease(v24);
      if ((v24 & 0x2000000000000000LL) != 0) {
        uint64_t v25 = HIBYTE(v24) & 0xF;
      }
      else {
        uint64_t v25 = v22 & 0xFFFFFFFFFFFFLL;
      }
      id v26 = [v13 contact];
      id v27 = v26;
      if (v25)
      {
        id v28 = [v26 organizationName];
      }

      else
      {
        id v29 = [v26 familyName];

        uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
        unint64_t v32 = v31;

        swift_bridgeObjectRelease(v32);
        uint64_t v33 = HIBYTE(v32) & 0xF;
        if ((v32 & 0x2000000000000000LL) == 0) {
          uint64_t v33 = v30 & 0xFFFFFFFFFFFFLL;
        }
        if (!v33)
        {
          uint64_t v16 = 0LL;
          unint64_t v18 = 0xE000000000000000LL;
LABEL_14:

LABEL_26:
          if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0) {
            id v9 = sub_100019AE4(0LL, v9[2] + 1LL, 1, v9);
          }
          unint64_t v40 = v9[2];
          unint64_t v39 = v9[3];
          if (v40 >= v39 >> 1) {
            id v9 = sub_100019AE4((void *)(v39 > 1), v40 + 1, 1, v9);
          }
          v9[2] = v40 + 1;
          uint64_t v10 = &v9[2 * v40];
          v10[4] = v16;
          v10[5] = v18;
          goto LABEL_8;
        }

        id v27 = [v13 contact];
        id v28 = [v27 familyName];
      }

      id v34 = v28;

      static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v36 = v35;

      unint64_t v37 = sub_10001BB20();
      uint64_t v16 = StringProtocol.capitalized.getter(&type metadata for String, v37);
      unint64_t v18 = v38;

      swift_bridgeObjectRelease(v36);
      goto LABEL_26;
    }

    id v9 = _swiftEmptyArrayStorage;
LABEL_33:
    uint64_t v41 = v9[2];
    int64_t v42 = v4[2];
    int64_t v43 = v42 + v41;
    if (__OFADD__(v42, v41)) {
      break;
    }
    uint64_t v44 = v4;
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
    uint64_t v46 = v44;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0 || v43 > v44[3] >> 1)
    {
      if (v42 <= v43) {
        int64_t v47 = v42 + v41;
      }
      else {
        int64_t v47 = v42;
      }
      uint64_t v46 = sub_100019AE4((void *)isUniquelyReferenced_nonNull_native, v47, 1, v44);
    }

    if (v9[2])
    {
      uint64_t v48 = v46[2];
      if ((v46[3] >> 1) - v48 < v41) {
        goto LABEL_54;
      }
      unint64_t v49 = (unint64_t)&v46[2 * v48 + 4];
      unint64_t v5 = v46;
      swift_arrayInitWithCopy(v49);
      if (v41)
      {
        uint64_t v51 = v5[2];
        BOOL v52 = __OFADD__(v51, v41);
        uint64_t v53 = v51 + v41;
        if (v52) {
          goto LABEL_55;
        }
        void v5[2] = v53;
      }
    }

    else
    {
      unint64_t v5 = v46;
      if (v41) {
        goto LABEL_53;
      }
    }

    uint64_t v3 = v59 + 1;
    swift_bridgeObjectRelease(v9);
    uint64_t v4 = v5;
    if (v59 + 1 == v57)
    {
      swift_bridgeObjectRelease_n(v55, 2LL);
      return v5;
    }
  }

  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

unint64_t sub_10001BB20()
{
  unint64_t result = qword_100112888;
  if (!qword_100112888)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100112888);
  }

  return result;
}

void sub_10001BB68(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = UICollectionElementKindSectionHeader;
  NSString v5 = String._bridgeToObjectiveC()();
  uint64_t v6 = (void *)IndexPath._bridgeToObjectiveC()();
  id v7 = [a1 dequeueReusableSupplementaryViewOfKind:v4 withReuseIdentifier:v5 forIndexPath:v6];

  uint64_t v9 = type metadata accessor for CreateCallCollectionViewHeaderView(0LL, v8);
  uint64_t v10 = swift_dynamicCastClassUnconditional(v7, v9, 0LL, 0LL, 0LL);
  unint64_t v11 = IndexPath.section.getter();
  uint64_t v12 = v2 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_dataSource;
  swift_beginAccess(v12, v23, 0LL, 0LL);
  if ((v11 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (v11 >= *(void *)(*(void *)v12 + 16LL))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  unint64_t v14 = *(void *)(*(void *)v12 + 16 * v11 + 32);
  id v15 = *(void **)(v10 + OBJC_IVAR____TtC8FaceTime34CreateCallCollectionViewHeaderView_label);
  uint64_t v16 = (void *)objc_opt_self(&OBJC_CLASS___UILocalizedIndexedCollation, v13);
  id v17 = v15;
  id v18 = [v16 currentCollation];
  id v19 = [v18 sectionTitles];

  uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, &type metadata for String);
  if ((v14 & 0x8000000000000000LL) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (v14 < *(void *)(v20 + 16))
  {
    uint64_t v21 = *(void *)(v20 + 16 * v14 + 40);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease(v20);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v21);
    [v17 setText:v22];

    return;
  }

void sub_10001BD64(objc_super *a1)
{
  uint64_t v2 = v1;
  id v4 = sub_100013580();
  NSIndexPath v17 = IndexPath._bridgeToObjectiveC()();
  Class isa = v17.super.isa;
  id v6 = objc_msgSend(v4, "cellForItemAtIndexPath:", v17.super.isa, v17._reserved);

  if (v6)
  {
    uint64_t v7 = type metadata accessor for CreateCallCollectionViewCell(0LL);
    uint64_t v8 = swift_dynamicCastClass(v6, v7);
    if (v8)
    {
      *(_BYTE *)(v8 + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_isUserSelected) = 0;
      uint64_t v9 = *(_BYTE **)(v8 + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_contactPickerControl);
      v9[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_isUserSelected] = 0;
      uint64_t v10 = v9;
      sub_100092B38();

      id v6 = v10;
    }
  }

  unint64_t v11 = IndexPath.section.getter();
  unint64_t v12 = IndexPath.row.getter();
  uint64_t v13 = v2 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_dataSource;
  swift_beginAccess(v2 + OBJC_IVAR____TtC8FaceTime38ContactListWithSnowglobeViewController_dataSource, v16, 0LL, 0LL);
  if ((v11 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }

  if (v11 >= *(void *)(*(void *)v13 + 16LL))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if ((v12 & 0x8000000000000000LL) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v14 = *(void *)(*(void *)v13 + 16 * v11 + 40);
  if (v12 < *(void *)(v14 + 16))
  {
    id v15 = *(id *)(v14 + 16 * v12 + 32);
    sub_100018128(a1, v15, 0LL);

    return;
  }

uint64_t sub_10001BED4( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10001BFEC(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10001C00C()
{
  return sub_10001C298((void (*)(void))&_swift_release, 32LL);
}

uint64_t sub_10001C01C(uint64_t a1)
{
  return sub_10009B6CC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10001C024(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04(&qword_1001128F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

void sub_10001C06C(void *a1, objc_super *a2)
{
}

uint64_t sub_10001C08C(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_10001C09C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10001C0D8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_100112904);
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_10001C158;
  return sub_1000177DC(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10001C158()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10001C1A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *sub_10001C1DC(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10001C1EC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10001C210(uint64_t a1, uint64_t a2, void *a3)
{
}

uint64_t sub_10001C218(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C228(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10001C230(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_10001C5D0(255LL, a2, a3);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10001C270(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_10001C288()
{
  return sub_10001C298((void (*)(void))&_swift_bridgeObjectRelease, 40LL);
}

uint64_t sub_10001C298(void (*a1)(void), uint64_t a2)
{
  a1(*(void *)(v2 + 24));
  return swift_deallocObject(v2, a2, 7LL);
}

void sub_10001C2DC()
{
}

unint64_t sub_10001C2E8()
{
  unint64_t result = qword_100112940;
  if (!qword_100112940)
  {
    uint64_t v1 = sub_10001C334((uint64_t *)&unk_100112FD0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100112940);
  }

  return result;
}

uint64_t sub_10001C334(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t *sub_10001C378(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t sub_10001C3B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100018A04(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

void *sub_10001C3FC(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

void sub_10001C420()
{
}

uint64_t sub_10001C428()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10001C44C()
{
  uint64_t v1 = type metadata accessor for CallType(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));

  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10001C4D8(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for CallType(0LL) - 8) + 80LL);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v10 = (uint64_t)v1 + ((v4 + 56) & ~v4);
  uint64_t v11 = (void *)swift_task_alloc(dword_100112964);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_10001C958;
  return sub_10001538C(a1, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10001C580(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10001C5C4(uint64_t a1)
{
  return sub_1000AF684(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10001C5D0(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3, a2);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_10001C608(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100018A04(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_10001C644(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

void sub_10001C680()
{
}

uint64_t sub_10001C688()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10001C698()
{
  return sub_1000983DC(*(uint64_t (**)(void))(v0 + 16));
}

void type metadata accessor for CGColor(uint64_t a1)
{
}

void type metadata accessor for CNContactSortOrder(uint64_t a1)
{
}

void type metadata accessor for PBSUserNotificationWaitViewType(uint64_t a1)
{
}

void type metadata accessor for DeviceOrientation(uint64_t a1)
{
}

void type metadata accessor for LaunchOptionsKey(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for DeviceType(uint64_t a1)
{
}

void type metadata accessor for TUConversationActivitySessionApplicationState(uint64_t a1)
{
}

void type metadata accessor for TUCallRemoteVideoPresentationState(uint64_t a1)
{
}

void type metadata accessor for PBSSystemBulletinActivationAction(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void sub_10001C77C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t sub_10001C7C0()
{
  return sub_10001949C( &qword_1001129F8,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceType,  (uint64_t)&unk_1000C46BC);
}

uint64_t sub_10001C7EC()
{
  return sub_10001949C( &qword_100112A00,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceType,  (uint64_t)&unk_1000C4694);
}

uint64_t sub_10001C818()
{
  return sub_10001949C( &qword_100112A08,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceType,  (uint64_t)&unk_1000C4724);
}

uint64_t sub_10001C844()
{
  return sub_10001949C( &qword_100112A10,  (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey,  (uint64_t)&unk_1000C4800);
}

uint64_t sub_10001C870()
{
  return sub_10001949C( &qword_100112A18,  (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey,  (uint64_t)&unk_1000C47D4);
}

uint64_t sub_10001C89C()
{
  return sub_10001949C( &qword_100112A20,  (uint64_t (*)(uint64_t))type metadata accessor for PBSUserNotificationWaitViewType,  (uint64_t)&unk_1000C4914);
}

uint64_t sub_10001C8C8()
{
  return sub_10001949C( &qword_100112A28,  (uint64_t (*)(uint64_t))type metadata accessor for PBSUserNotificationWaitViewType,  (uint64_t)&unk_1000C48E8);
}

uint64_t sub_10001C8F4()
{
  return sub_10001949C( &qword_100112A30,  (uint64_t (*)(uint64_t))type metadata accessor for PBSUserNotificationWaitViewType,  (uint64_t)&unk_1000C4984);
}

uint64_t sub_10001C920()
{
  return sub_10001949C( &qword_100112A38,  (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey,  (uint64_t)&unk_1000C4870);
}

void **sub_10001C9BC(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (void **)&v4[(v3 + 16LL) & ~(unint64_t)v3];
    swift_retain(v4);
  }

  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for PersonNameComponents(0LL);
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
    uint64_t v11 = v4;
    v10(v7, v8, v9);
  }

  return v5;
}

uint64_t sub_10001CA50(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for PersonNameComponents(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void **sub_10001CA98(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for PersonNameComponents(0LL);
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL);
  id v10 = v4;
  v9(v6, v7, v8);
  return a1;
}

void **sub_10001CB04(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *a2;
  *a1 = *a2;
  id v8 = v7;

  uint64_t v9 = *(int *)(a3 + 20);
  id v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for PersonNameComponents(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24LL))(v10, v11, v12);
  return a1;
}

void *sub_10001CB74(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for PersonNameComponents(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

void **sub_10001CBD0(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for PersonNameComponents(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  return a1;
}

uint64_t sub_10001CC3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001CC48);
}

uint64_t sub_10001CC48(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }

  else
  {
    uint64_t v9 = type metadata accessor for PersonNameComponents(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v9);
  }

uint64_t sub_10001CCD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001CCDC);
}

char *sub_10001CCDC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)uint64_t result = a2;
  }

  else
  {
    uint64_t v7 = type metadata accessor for PersonNameComponents(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for SplashScreenMonogramView(uint64_t a1)
{
  uint64_t result = qword_100112BE8;
  if (!qword_100112BE8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SplashScreenMonogramView);
  }
  return result;
}

uint64_t sub_10001CD8C(uint64_t a1)
{
  v4[0] = "\b";
  uint64_t result = type metadata accessor for PersonNameComponents(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *sub_10001CE00()
{
  return &protocol witness table for Never;
}

id sub_10001CE0C()
{
  id v1 = [objc_allocWithZone(TVSUIProfilePictureView) init];
  Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  [v1 setPersonNameComponents:isa];

  [v1 setProfilePictureImage:*v0];
  return v1;
}

void sub_10001CE90(void *a1)
{
  Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  [a1 setPersonNameComponents:isa];
}

uint64_t sub_10001CF08(uint64_t a1, char a2)
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)(a1, a2 & 1);
}

uint64_t sub_10001CF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10001D078(&qword_100112C28, (uint64_t)&unk_1000C4B58);
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10001CFA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10001D078(&qword_100112C28, (uint64_t)&unk_1000C4B58);
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10001D008()
{
  return static View._viewListCount(inputs:)();
}

void sub_10001D020(uint64_t a1)
{
  uint64_t v2 = sub_10001D078(&qword_100112C28, (uint64_t)&unk_1000C4B58);
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t sub_10001D054()
{
  return sub_10001D078(&qword_100112C20, (uint64_t)&unk_1000C4B08);
}

uint64_t sub_10001D078(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for SplashScreenMonogramView(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10001D0B8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_100112C30);
  sub_10001C270(v0, (uint64_t)qword_100112C30);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0xD00000000000001ELL,  0x80000001000C4C20LL);
}

uint64_t sub_10001D138()
{
  if (qword_1001123C8 != -1) {
    swift_once(&qword_1001123C8, sub_10008CEB8);
  }
  sub_10001C580((uint64_t)&qword_10011A330, (uint64_t)v13);
  id v1 = objc_msgSend((id)objc_opt_self(TUCallCenter, v0), "sharedInstance");
  id v2 = [v1 neighborhoodActivityConduit];

  uint64_t v4 = type metadata accessor for UserNotificationManager(0LL, v3);
  uint64_t inited = swift_initStaticObject(v4, &unk_100112498);
  uint64_t v6 = sub_100021734((uint64_t)v13, v13[3]);
  __chkstk_darwin(v6);
  id v8 = (void *)((char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  uint64_t v10 = sub_100021A4C(*v8, v2, inited);

  uint64_t result = sub_10001BFEC(v13);
  qword_10011A1F0 = (uint64_t)v10;
  return result;
}

void *sub_10001D278(uint64_t a1)
{
  return &j__swift_endAccess;
}

id sub_10001D2C0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SuggestionAdvertisementManager(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10001D3E4()
{
  return type metadata accessor for SuggestionAdvertisementManager(0LL);
}

uint64_t type metadata accessor for SuggestionAdvertisementManager(uint64_t a1)
{
  return sub_100020F70( a1,  (uint64_t *)&unk_100112C98,  (uint64_t)&nominal type descriptor for SuggestionAdvertisementManager);
}

uint64_t sub_10001D400(void *a1, void *a2)
{
  uint64_t v5 = sub_100018A04((uint64_t *)&unk_100113480);
  __chkstk_darwin(v5);
  uint64_t v64 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = sub_100018A04((uint64_t *)&unk_100112E30);
  uint64_t v68 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v67 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100018A04(&qword_100112DD0);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = sub_100018A04(&qword_100114AF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = type metadata accessor for UUID(0LL);
  uint64_t v70 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v69 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = v2;
  sub_100020174(a2, (uint64_t)v74);
  if (qword_1001121D0 != -1) {
    swift_once(&qword_1001121D0, sub_10001D0B8);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_10001C270(v15, (uint64_t)qword_100112C30);
  id v16 = a1;
  NSIndexPath v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  id v62 = v16;
  if (v19)
  {
    uint64_t v20 = swift_slowAlloc(12LL, -1LL);
    uint64_t v61 = v10;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v22 = swift_slowAlloc(8LL, -1LL);
    uint64_t v60 = v13;
    uint64_t v23 = v11;
    unint64_t v24 = (void *)v22;
    *(_DWORD *)uint64_t v21 = 138412290;
    id v72 = v16;
    id v25 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v21 + 4, v21 + 12);
    *unint64_t v24 = v16;

    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Requesting presentation of advertisement %@.", v21, 0xCu);
    uint64_t v26 = sub_100018A04((uint64_t *)&unk_100112E20);
    swift_arrayDestroy(v24, 1LL, v26);
    id v27 = v24;
    uint64_t v11 = v23;
    uint64_t v13 = v60;
    swift_slowDealloc(v27, -1LL, -1LL);
    id v28 = v21;
    uint64_t v10 = v61;
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  else
  {
  }

  id v29 = v63;
  uint64_t v30 = sub_10001C3FC( &v63[OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_bulletinManager],  *(void *)&v63[OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_bulletinManager + 24]);
  __chkstk_darwin(v30);
  *(&v59 - 2) = (uint64_t)v74;
  *(&v59 - 1) = v31;
  OS_dispatch_queue.sync<A>(execute:)(sub_1000229E8);
  uint64_t v61 = *(void **)&v13[*(int *)(v11 + 48)];
  unint64_t v32 = v61;
  uint64_t v33 = v69;
  uint64_t v34 = v70;
  uint64_t v35 = v65;
  (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v69, v13, v65);
  sub_10001F738();
  uint64_t v36 = type metadata accessor for SuggestionAdvertisementManager.SuggestionAdvertisementState(0LL);
  unint64_t v37 = (char *)v10 + *(int *)(v36 + 20);
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v37, v33, v35);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v37, 0LL, 1LL, v35);
  unint64_t v38 = v62;
  *uint64_t v10 = v62;
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))(v10, 0LL, 1LL, v36);
  uint64_t v39 = (uint64_t)&v29[OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_currentState];
  swift_beginAccess(&v29[OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_currentState], &v72, 33LL, 0LL);
  id v40 = v38;
  sub_10002236C((uint64_t)v10, v39);
  __n128 v41 = swift_endAccess(&v72);
  id v71 = *(id *)&v29[OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_suggestionAdvertisementQueue];
  id v42 = v71;
  id v72 = v32;
  uint64_t v43 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL, v41);
  uint64_t v44 = (uint64_t)v64;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56LL))(v64, 1LL, 1LL, v43);
  id v45 = v42;
  uint64_t v46 = sub_100018A04(&qword_100112E40);
  uint64_t v47 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v48 = sub_100022750(&qword_100112E48, &qword_100112E40, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  uint64_t v49 = sub_100022510( (unint64_t *)&qword_100112E50,  (unint64_t *)&qword_100112DB0,  &OBJC_CLASS___OS_dispatch_queue_ptr,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  uint64_t v50 = v67;
  Publisher.receive<A>(on:options:)(&v71, v44, v46, v47, v48, v49);
  sub_10001C608(v44, (uint64_t *)&unk_100113480);

  uint64_t v51 = swift_allocObject(&unk_1000F7AC0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v51 + 16, v29);
  uint64_t v52 = swift_allocObject(&unk_1000F7BB0, 32LL, 7LL);
  *(void *)(v52 + swift_unknownObjectWeakDestroy(v0 + 16) = v40;
  *(void *)(v52 + 24) = v51;
  uint64_t v53 = swift_allocObject(&unk_1000F7BD8, 32LL, 7LL);
  *(void *)(v53 + swift_unknownObjectWeakDestroy(v0 + 16) = v40;
  *(void *)(v53 + 24) = v29;
  uint64_t v54 = sub_100022750( (unint64_t *)&unk_100113B90,  (uint64_t *)&unk_100112E30,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  id v55 = v40;
  uint64_t v56 = v29;
  uint64_t v57 = v66;
  Publisher.sinkOnce(_:onError:)(sub_1000229A4, v52, sub_1000229D8, v53, v66, v54);
  swift_release(v61);
  swift_release(v52);
  swift_release(v53);
  sub_100022790(v74);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v50, v57);
  return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v69, v35);
}

void sub_10001DA58(uint64_t *a1, void *a2, char *a3)
{
  uint64_t v80 = a3;
  uint64_t v78 = sub_100018A04(&qword_100113000);
  __chkstk_darwin(v78);
  uint64_t v6 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100018A04(&qword_100112DD0);
  __chkstk_darwin(v7);
  uint64_t v9 = (id *)((char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = sub_100018A04(&qword_100112D10);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v75 = (uint64_t)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v69 - v14;
  __chkstk_darwin(v13);
  uint64_t v81 = (char *)&v69 - v16;
  uint64_t v17 = type metadata accessor for UUID(0LL);
  uint64_t v83 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  v79 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Logger(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v82 = *a1;
  if (qword_1001121D0 != -1) {
    swift_once(&qword_1001121D0, sub_10001D0B8);
  }
  uint64_t v23 = sub_10001C270(v19, (uint64_t)qword_100112C30);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v23, v19);
  id v24 = a2;
  id v25 = (os_log_s *)Logger.logObject.getter(v24);
  int v76 = static os_log_type_t.default.getter();
  BOOL v26 = os_log_type_enabled(v25, (os_log_type_t)v76);
  id v27 = &selRef__setGradientMaskLengths_;
  id v77 = v24;
  if (v26)
  {
    uint64_t v69 = v20;
    uint64_t v70 = v9;
    id v71 = v15;
    uint64_t v73 = v6;
    id v28 = v24;
    uint64_t v29 = swift_slowAlloc(22LL, -1LL);
    uint64_t v30 = swift_slowAlloc(64LL, -1LL);
    v84[0] = v30;
    *(_DWORD *)uint64_t v29 = 136315394;
    uint64_t v31 = v17;
    uint64_t v74 = v29 + 4;
    id v32 = [v28 suggestionIdentifier];
    uint64_t v33 = v79;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v32);

    uint64_t v34 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter(v31, v34);
    unint64_t v37 = v36;
    unint64_t v38 = *(void (**)(char *, uint64_t))(v83 + 8);
    uint64_t v72 = v31;
    v38(v33, v31);
    uint64_t v86 = sub_1000850E4(v35, v37, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v74, v29 + 12);

    swift_bridgeObjectRelease(v37);
    *(_WORD *)(v29 + 12) = 2080;
    id v39 = (id)PBSBulletinDismissalReasonDescription(v82);
    if (!v39)
    {
      __break(1u);
      return;
    }

    id v40 = v39;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    unint64_t v43 = v42;

    uint64_t v86 = sub_1000850E4(v41, v43, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v29 + 14, v29 + 22);
    swift_bridgeObjectRelease(v43);
    _os_log_impl( (void *)&_mh_execute_header,  v25,  (os_log_type_t)v76,  "Suggestion advertisement bulletin %s was dismissed with reason %s.",  (uint8_t *)v29,  0x16u);
    swift_arrayDestroy(v30, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v69 + 8))(v22, v19);
    uint64_t v6 = v73;
    uint64_t v17 = v72;
    uint64_t v15 = v71;
    uint64_t v9 = v70;
    id v27 = &selRef__setGradientMaskLengths_;
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  }

  uint64_t v44 = v80 + 16;
  swift_beginAccess(v80 + 16, &v86, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v44);
  uint64_t v46 = (uint64_t)v81;
  uint64_t v47 = v83;
  if (Strong)
  {
    uint64_t v48 = (char *)Strong;
    uint64_t v49 = Strong + OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_currentState;
    swift_beginAccess(Strong + OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_currentState, v85, 0LL, 0LL);
    sub_10001C3B8(v49, (uint64_t)v9, &qword_100112DD0);
    uint64_t v50 = type metadata accessor for SuggestionAdvertisementManager.SuggestionAdvertisementState(0LL);
    uint64_t v80 = *(char **)(*(void *)(v50 - 8) + 48LL);
    if (((unsigned int (*)(id *, uint64_t, uint64_t))v80)(v9, 1LL, v50))
    {
      sub_10001C608((uint64_t)v9, &qword_100112DD0);
      uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56);
      v51(v46, 1LL, 1LL, v17);
    }

    else
    {
      id v52 = *v9;
      sub_10001C608((uint64_t)v9, &qword_100112DD0);
      uint64_t v53 = v27;
      id v54 = [v52 v27[33]];

      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v54);
      id v27 = v53;
      uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56);
      v51(v46, 0LL, 1LL, v17);
    }

    id v55 = [v77 v27[33]];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v55);

    v51((uint64_t)v15, 0LL, 1LL, v17);
    uint64_t v56 = (uint64_t)&v6[*(int *)(v78 + 48)];
    sub_10001C3B8(v46, (uint64_t)v6, &qword_100112D10);
    sub_10001C3B8((uint64_t)v15, v56, &qword_100112D10);
    uint64_t v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
    if (v57((uint64_t)v6, 1LL, v17) == 1)
    {
      sub_10001C608((uint64_t)v15, &qword_100112D10);
      sub_10001C608(v46, &qword_100112D10);
      if (v57(v56, 1LL, v17) == 1)
      {
        sub_10001C608((uint64_t)v6, &qword_100112D10);
LABEL_18:
        uint64_t v65 = (void (*)(uint64_t *, void))sub_10001D278((uint64_t)v84);
        uint64_t v67 = v66;
        if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v80)(v66, 1LL, v50))
        {
          uint64_t v68 = v67 + *(int *)(v50 + 20);
          sub_10001C608(v68, &qword_100112D10);
          v51(v68, 1LL, 1LL, v17);
        }

        v65(v84, 0LL);
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v58 = v75;
      sub_10001C3B8((uint64_t)v6, v75, &qword_100112D10);
      if (v57(v56, 1LL, v17) != 1)
      {
        uint64_t v59 = v83;
        uint64_t v60 = *(void (**)(char *, uint64_t, uint64_t))(v83 + 32);
        uint64_t v78 = v50;
        uint64_t v61 = v79;
        v60(v79, v56, v17);
        uint64_t v62 = sub_10001949C( (unint64_t *)&qword_100112E70,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        LODWORD(v77) = dispatch thunk of static Equatable.== infix(_:_:)(v58, v61, v17, v62);
        uint64_t v63 = *(void (**)(char *, uint64_t))(v59 + 8);
        uint64_t v64 = v61;
        uint64_t v50 = v78;
        v63(v64, v17);
        sub_10001C608((uint64_t)v15, &qword_100112D10);
        sub_10001C608(v46, &qword_100112D10);
        v63((char *)v58, v17);
        sub_10001C608((uint64_t)v6, &qword_100112D10);
LABEL_21:
        if (v82 == 3) {
          [*(id *)&v48[OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_neighborhoodActivityConduit] cancelPendingJoinRequest];
        }

        return;
      }

      sub_10001C608((uint64_t)v15, &qword_100112D10);
      sub_10001C608(v46, &qword_100112D10);
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v58, v17);
    }

    sub_10001C608((uint64_t)v6, &qword_100113000);
    goto LABEL_21;
  }

uint64_t sub_10001E268(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v69 = a3;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v63 = &v60[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v66 = sub_100018A04(&qword_100113000);
  __chkstk_darwin(v66);
  uint64_t v8 = &v60[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = sub_100018A04(&qword_100112DD0);
  __chkstk_darwin(v9);
  uint64_t v11 = (id *)&v60[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = sub_100018A04(&qword_100112D10);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v67 = &v60[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = &v60[-v16];
  __chkstk_darwin(v15);
  uint64_t v68 = &v60[-v18];
  if (qword_1001121D0 != -1) {
    swift_once(&qword_1001121D0, sub_10001D0B8);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  sub_10001C270(v19, (uint64_t)qword_100112C30);
  id v20 = a2;
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.error.getter();
  int v23 = v22;
  uint64_t v64 = v21;
  BOOL v24 = os_log_type_enabled(v21, v22);
  uint64_t v70 = v17;
  id v65 = v20;
  if (v24)
  {
    uint64_t v25 = swift_slowAlloc(22LL, -1LL);
    int v61 = v23;
    uint64_t v26 = v25;
    uint64_t v27 = swift_slowAlloc(16LL, -1LL);
    uint64_t v62 = v8;
    id v28 = (void *)v27;
    *(_DWORD *)uint64_t v26 = 138412546;
    uint64_t v71 = (uint64_t)v20;
    uint64_t v29 = v5;
    uint64_t v30 = v11;
    uint64_t v31 = v4;
    id v32 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v26 + 4, v26 + 12);
    *id v28 = v20;

    uint64_t v4 = v31;
    uint64_t v11 = v30;
    uint64_t v5 = v29;
    *(_WORD *)(v26 + 12) = 2112;
    unint64_t v33 = sub_100022848();
    uint64_t v34 = swift_allocError(&type metadata for BulletinManagerError, v33, 0LL, 0LL);
    uint64_t v35 = _swift_stdlib_bridgeErrorToNSError(v34);
    uint64_t v71 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v26 + 14, v26 + 22);
    v28[1] = v35;
    unint64_t v36 = v64;
    _os_log_impl( (void *)&_mh_execute_header,  v64,  (os_log_type_t)v61,  "Failed to present suggestion advertisement bulletin for advertisement %@ due to %@.",  (uint8_t *)v26,  0x16u);
    uint64_t v37 = sub_100018A04((uint64_t *)&unk_100112E20);
    swift_arrayDestroy(v28, 2LL, v37);
    unint64_t v38 = v28;
    uint64_t v8 = v62;
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v39 = v69 + OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_currentState;
  swift_beginAccess(v69 + OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_currentState, v73, 0LL, 0LL);
  sub_10001C3B8(v39, (uint64_t)v11, &qword_100112DD0);
  uint64_t v40 = type metadata accessor for SuggestionAdvertisementManager.SuggestionAdvertisementState(0LL);
  uint64_t v64 = *(os_log_s **)(*(void *)(v40 - 8) + 48LL);
  int v41 = ((uint64_t (*)(id *, uint64_t, uint64_t))v64)(v11, 1LL, v40);
  unint64_t v42 = v68;
  if (v41)
  {
    sub_10001C608((uint64_t)v11, &qword_100112DD0);
    unint64_t v43 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v43(v42, 1LL, 1LL, v4);
  }

  else
  {
    id v44 = *v11;
    sub_10001C608((uint64_t)v11, &qword_100112DD0);
    id v45 = [v44 suggestionIdentifier];

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v45);
    unint64_t v43 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v43(v42, 0LL, 1LL, v4);
  }

  id v46 = [v65 suggestionIdentifier];
  uint64_t v47 = (uint64_t)v70;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v46);

  v43((_BYTE *)v47, 0LL, 1LL, v4);
  uint64_t v48 = (uint64_t)&v8[*(int *)(v66 + 48)];
  sub_10001C3B8((uint64_t)v42, (uint64_t)v8, &qword_100112D10);
  sub_10001C3B8(v47, v48, &qword_100112D10);
  uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v49((uint64_t)v8, 1LL, v4) != 1)
  {
    sub_10001C3B8((uint64_t)v8, (uint64_t)v67, &qword_100112D10);
    if (v49(v48, 1LL, v4) != 1)
    {
      uint64_t v51 = v67;
      id v52 = v63;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 32))(v63, v48, v4);
      uint64_t v53 = sub_10001949C( (unint64_t *)&qword_100112E70,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v54 = dispatch thunk of static Equatable.== infix(_:_:)(v51, v52, v4, v53);
      id v55 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
      v55(v52, v4);
      sub_10001C608((uint64_t)v70, &qword_100112D10);
      sub_10001C608((uint64_t)v68, &qword_100112D10);
      v55(v51, v4);
      uint64_t result = sub_10001C608((uint64_t)v8, &qword_100112D10);
      if ((v54 & 1) == 0) {
        return result;
      }
      goto LABEL_16;
    }

    sub_10001C608((uint64_t)v70, &qword_100112D10);
    sub_10001C608((uint64_t)v42, &qword_100112D10);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v67, v4);
    return sub_10001C608((uint64_t)v8, &qword_100113000);
  }

  sub_10001C608(v47, &qword_100112D10);
  sub_10001C608((uint64_t)v42, &qword_100112D10);
  if (v49(v48, 1LL, v4) != 1) {
    return sub_10001C608((uint64_t)v8, &qword_100113000);
  }
  sub_10001C608((uint64_t)v8, &qword_100112D10);
LABEL_16:
  uint64_t v56 = (uint64_t (*)(uint64_t *, void))sub_10001D278((uint64_t)&v71);
  uint64_t v58 = v57;
  if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v64)(v57, 1LL, v40))
  {
    uint64_t v59 = v58 + *(int *)(v40 + 20);
    sub_10001C608(v59, &qword_100112D10);
    v43((_BYTE *)v59, 1LL, 1LL, v4);
  }

  return v56(&v71, 0LL);
}

uint64_t sub_10001E8D0(void *a1, unint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v87 = a2;
  uint64_t v5 = sub_100018A04((uint64_t *)&unk_100113480);
  __chkstk_darwin(v5);
  uint64_t v80 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v84 = sub_100018A04((uint64_t *)&unk_100112E30);
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  v88 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100018A04(&qword_100114AF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v89 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v89 - 8);
  uint64_t v12 = __chkstk_darwin(v89);
  uint64_t v86 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v82 = (char *)&v73 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v90 = (char *)&v73 - v17;
  uint64_t v81 = v18;
  __chkstk_darwin(v16);
  id v20 = (char *)&v73 - v19;
  sub_100021EB8(a1, (uint64_t)v93);
  if (qword_1001121D0 != -1) {
    swift_once(&qword_1001121D0, sub_10001D0B8);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  sub_10001C270(v21, (uint64_t)qword_100112C30);
  uint64_t v78 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  v78(v20, v87, v89);
  id v22 = a1;
  int v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.default.getter();
  int v25 = v24;
  BOOL v26 = os_log_type_enabled(v23, v24);
  uint64_t v85 = v11;
  id v79 = v22;
  if (v26)
  {
    uint64_t v27 = swift_slowAlloc(22LL, -1LL);
    uint64_t v77 = v8;
    uint64_t v28 = v27;
    uint64_t v29 = (void *)swift_slowAlloc(8LL, -1LL);
    int v76 = (double (*)(void, void, void))swift_slowAlloc(32LL, -1LL);
    id v91 = v22;
    v92[0] = (uint64_t)v76;
    *(_DWORD *)uint64_t v28 = 138412546;
    int v74 = v25;
    os_log_t v73 = v23;
    id v30 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v28 + 4, v28 + 12);
    *uint64_t v29 = v22;

    *(_WORD *)(v28 + 12) = 2080;
    uint64_t v31 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v32 = v89;
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter(v89, v31);
    unint64_t v35 = v34;
    id v91 = (id)sub_1000850E4(v33, v34, v92);
    uint64_t v11 = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v28 + 14, v28 + 22);
    __n128 v36 = swift_bridgeObjectRelease(v35);
    (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v20, v32, v36);
    int v23 = v73;
    _os_log_impl( (void *)&_mh_execute_header,  v73,  (os_log_type_t)v74,  "Requesting presentation of expanse pull bulletin for %@, conversation: %s.",  (uint8_t *)v28,  0x16u);
    uint64_t v37 = sub_100018A04((uint64_t *)&unk_100112E20);
    swift_arrayDestroy(v29, 1LL, v37);
    swift_slowDealloc(v29, -1LL, -1LL);
    unint64_t v38 = v76;
    swift_arrayDestroy(v76, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    uint64_t v39 = v28;
    uint64_t v8 = v77;
    swift_slowDealloc(v39, -1LL, -1LL);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v89);
  }

  uint64_t v75 = v3;
  uint64_t v40 = sub_10001C3FC( (void *)(v3 + OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_bulletinManager),  *(void *)(v3 + OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_bulletinManager + 24));
  __chkstk_darwin(v40);
  *(&v73 - 2) = (os_log_t)v93;
  *(&v73 - 1) = v41;
  OS_dispatch_queue.sync<A>(execute:)(sub_100022558);
  uint64_t v77 = *(void *)&v10[*(int *)(v8 + 48)];
  uint64_t v42 = v77;
  int v76 = *(double (**)(void, void, void))(v11 + 32);
  uint64_t v43 = v89;
  v44.n128_f64[0] = v76(v90, v10, v89);
  v92[0] = v42;
  id v91 = *(id *)(v3 + OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_suggestionAdvertisementQueue);
  id v45 = v91;
  uint64_t v46 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL, v44);
  uint64_t v47 = (uint64_t)v80;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56LL))(v80, 1LL, 1LL, v46);
  id v48 = v45;
  uint64_t v49 = v11;
  uint64_t v50 = sub_100018A04(&qword_100112E40);
  uint64_t v51 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v52 = sub_100022750(&qword_100112E48, &qword_100112E40, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  uint64_t v53 = sub_100022510( (unint64_t *)&qword_100112E50,  (unint64_t *)&qword_100112DB0,  &OBJC_CLASS___OS_dispatch_queue_ptr,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(&v91, v47, v50, v51, v52, v53);
  sub_10001C608(v47, (uint64_t *)&unk_100113480);

  uint64_t v54 = swift_allocObject(&unk_1000F7AC0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v54 + 16, v75);
  id v55 = v82;
  uint64_t v56 = v78;
  v78(v82, (unint64_t)v90, v43);
  v56(v86, v87, v43);
  uint64_t v57 = *(unsigned __int8 *)(v49 + 80);
  uint64_t v58 = (v57 + 16) & ~v57;
  uint64_t v80 = (char *)(v57 | 7);
  unint64_t v59 = (v81 + v58 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v87 = v59 + 8;
  unint64_t v60 = (v59 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v61 = (v57 + v60 + 8) & ~v57;
  uint64_t v62 = swift_allocObject(&unk_1000F7B60, v61 + v81, v57 | 7);
  uint64_t v63 = (void (*)(uint64_t, char *, uint64_t))v76;
  v76(v62 + v58, v55, v43);
  *(void *)(v62 + v59) = v54;
  uint64_t v64 = v79;
  *(void *)(v62 + v60) = v79;
  v63(v62 + v61, v86, v43);
  id v65 = v90;
  v56(v55, (unint64_t)v90, v43);
  uint64_t v66 = swift_allocObject(&unk_1000F7B88, v87, v80);
  v63(v66 + v58, v55, v43);
  *(void *)(v66 + v59) = v64;
  uint64_t v67 = sub_100022750( (unint64_t *)&unk_100113B90,  (uint64_t *)&unk_100112E30,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  id v68 = v64;
  uint64_t v69 = v84;
  uint64_t v70 = v67;
  uint64_t v71 = v88;
  Publisher.sinkOnce(_:onError:)(sub_100022620, v62, sub_100022700, v66, v84, v70);
  swift_release(v77);
  swift_release(v62);
  swift_release(v66);
  sub_100022790(v93);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v71, v69);
  return (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v65, v43);
}

void sub_10001F070(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v45 = a3;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = *a1;
  if (qword_1001121D0 != -1) {
    swift_once(&qword_1001121D0, sub_10001D0B8);
  }
  uint64_t v17 = sub_10001C270(v13, (uint64_t)qword_100112C30);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v17, v13);
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  uint64_t v19 = v14;
  id v20 = (os_log_s *)Logger.logObject.getter(v18);
  int v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, (os_log_type_t)v21))
  {
    int v41 = v21;
    uint64_t v42 = v19;
    uint64_t v43 = a4;
    uint64_t v44 = a5;
    uint64_t v22 = swift_slowAlloc(22LL, -1LL);
    uint64_t v40 = swift_slowAlloc(64LL, -1LL);
    v49[0] = v40;
    *(_DWORD *)uint64_t v22 = 136315394;
    uint64_t v23 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v9, v23);
    unint64_t v26 = v25;
    uint64_t v47 = sub_1000850E4(v24, v25, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v22 + 4, v22 + 12);
    __n128 v27 = swift_bridgeObjectRelease(v26);
    (*(void (**)(char *, uint64_t, __n128))(v10 + 8))(v12, v9, v27);
    *(_WORD *)(v22 + 12) = 2080;
    uint64_t v28 = v46;
    id v29 = (id)PBSBulletinDismissalReasonDescription(v46);
    if (!v29)
    {
      __break(1u);
      return;
    }

    id v30 = v29;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    unint64_t v33 = v32;

    uint64_t v47 = sub_1000850E4(v31, v33, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease(v33);
    _os_log_impl( (void *)&_mh_execute_header,  v20,  (os_log_type_t)v41,  "Expanse pull bulletin %s was dismissed with reason %s.",  (uint8_t *)v22,  0x16u);
    uint64_t v34 = v40;
    swift_arrayDestroy(v40, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v13);
    a5 = v44;
    a4 = v43;
    uint64_t v35 = v45;
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);

    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v13);
    uint64_t v35 = v45;
    uint64_t v28 = v46;
  }

  uint64_t v36 = v35 + 16;
  swift_beginAccess(v35 + 16, &v47, 0LL, 0LL);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(v36);
  if (Strong)
  {
    unint64_t v38 = Strong;
    if (v28 == 1)
    {
      sub_100020550(a4, a5, (uint64_t)v49);
      id v39 = *(id *)&v38[OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_suggestionAdvertisementQueue];
      sub_100088B38((uint64_t)v49, (uint64_t)v39);

      sub_10002288C(v49);
    }

    else
    {
    }
  }

void sub_10001F448(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001121D0 != -1) {
    swift_once(&qword_1001121D0, sub_10001D0B8);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_10001C270(v9, (uint64_t)qword_100112C30);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
  id v10 = a3;
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.error.getter();
  int v13 = v12;
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = (void *)swift_slowAlloc(16LL, -1LL);
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    uint64_t v30 = v28;
    *(_DWORD *)uint64_t v14 = 136315650;
    uint64_t v16 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    HIDWORD(v27) = v13;
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v5, v16);
    unint64_t v19 = v18;
    uint64_t v29 = sub_1000850E4(v17, v18, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v14 + 4, v14 + 12);
    __n128 v20 = swift_bridgeObjectRelease(v19);
    (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v5, v20);
    *(_WORD *)(v14 + 12) = 2112;
    uint64_t v29 = (uint64_t)v10;
    id v21 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v14 + 14, v14 + 22);
    *uint64_t v15 = v10;

    *(_WORD *)(v14 + 22) = 2112;
    unint64_t v22 = sub_100022848();
    uint64_t v23 = swift_allocError(&type metadata for BulletinManagerError, v22, 0LL, 0LL);
    uint64_t v24 = _swift_stdlib_bridgeErrorToNSError(v23);
    uint64_t v29 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v14 + 24, v14 + 32);
    v15[1] = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  BYTE4(v27),  "Failed to present expanse pull bulletin %s for %@ due to %@.",  (uint8_t *)v14,  0x20u);
    uint64_t v25 = sub_100018A04((uint64_t *)&unk_100112E20);
    swift_arrayDestroy(v15, 2LL, v25);
    swift_slowDealloc(v15, -1LL, -1LL);
    uint64_t v26 = v28;
    swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

uint64_t sub_10001F738()
{
  uint64_t v1 = sub_100018A04(&qword_100112DD0);
  __chkstk_darwin(v1);
  uint64_t v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v4 = sub_100018A04(&qword_100112D10);
  __chkstk_darwin(v4);
  uint64_t v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v11 = v0 + OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_currentState;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_currentState, v15, 0LL, 0LL);
  sub_10001C3B8(v11, (uint64_t)v3, &qword_100112DD0);
  uint64_t v12 = type metadata accessor for SuggestionAdvertisementManager.SuggestionAdvertisementState(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v3, 1LL, v12))
  {
    sub_10001C608((uint64_t)v3, &qword_100112DD0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1LL, 1LL, v7);
    return sub_10001C608((uint64_t)v6, &qword_100112D10);
  }

  sub_10001C3B8((uint64_t)&v3[*(int *)(v12 + 20)], (uint64_t)v6, &qword_100112D10);
  sub_10001C608((uint64_t)v3, &qword_100112DD0);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  sub_10001C3FC( (void *)(v0 + OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_bulletinManager),  *(void *)(v0 + OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_bulletinManager + 24));
  sub_100064720((uint64_t)v10);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void sub_10001F93C()
{
  uint64_t v1 = sub_100018A04(&qword_100112DF0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v73 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100018A04(&qword_100112DF8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v82 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  id v79 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v80 = (char *)&v73 - v11;
  __chkstk_darwin(v10);
  uint64_t v83 = (os_log_s *)((char *)&v73 - v12);
  uint64_t v81 = v0;
  int v13 = *(void **)(v0 + OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_neighborhoodActivityConduit);
  id v14 = [v13 nearbyConversations];
  uint64_t v15 = sub_10001C5D0(0LL, (unint64_t *)&unk_100112E00, &OBJC_CLASS___TUNearbyDeviceHandle_ptr);
  uint64_t v16 = sub_10001949C( &qword_1001136D0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v14, v7, v15, v16);

  uint64_t v18 = *(void *)(v17 + 16);
  *(void *)&double v19 = swift_bridgeObjectRelease(v17).n128_u64[0];
  if (v18)
  {
    id v20 = objc_msgSend(v13, "nearbyConversations", v19);
    uint64_t v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v20, v7, v15, v16);

    sub_1000A7F2C(v21, (uint64_t)v3);
    swift_bridgeObjectRelease(v21);
    uint64_t v22 = sub_100018A04((uint64_t *)&unk_100112E10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48LL))(v3, 1LL, v22) == 1)
    {
      sub_10001C608((uint64_t)v3, &qword_100112DF0);
LABEL_15:
      if (qword_1001121D0 != -1) {
        swift_once(&qword_1001121D0, sub_10001D0B8);
      }
      uint64_t v57 = type metadata accessor for Logger(0LL);
      uint64_t v58 = sub_10001C270(v57, (uint64_t)qword_100112C30);
      unint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
      os_log_type_t v60 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v61 = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, v60, "System wake with invalid nearbyDeviceHandle", v61, 2u);
        swift_slowDealloc(v61, -1LL, -1LL);
      }

      return;
    }

    id v78 = v13;
    uint64_t v27 = *(void *)&v3[*(int *)(v22 + 48)];
    uint64_t v28 = *(int *)(v4 + 48);
    uint64_t v29 = v82;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v82 + 32);
    v30(v6, v3, v7);
    *(void *)&v6[v28] = v27;
    uint64_t v31 = *(void **)&v6[*(int *)(v4 + 48)];
    unint64_t v32 = v83;
    v30((char *)v83, v6, v7);
    id v33 = [v31 identifierWithType:2];
    if (!v33)
    {

      (*(void (**)(os_log_s *, uint64_t))(v29 + 8))(v32, v7);
      goto LABEL_15;
    }

    uint64_t v34 = v33;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    uint64_t v36 = v35;

    if (qword_1001121D0 != -1) {
      swift_once(&qword_1001121D0, sub_10001D0B8);
    }
    uint64_t v37 = type metadata accessor for Logger(0LL);
    sub_10001C270(v37, (uint64_t)qword_100112C30);
    unint64_t v38 = v80;
    (*(void (**)(char *, os_log_s *, uint64_t))(v29 + 16))(v80, v32, v7);
    Class v39 = v31;
    uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v41 = static os_log_type_t.default.getter();
    int v42 = v41;
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v43 = swift_slowAlloc(22LL, -1LL);
      uint64_t v77 = v36;
      uint64_t v44 = v43;
      uint64_t v75 = (Class *)swift_slowAlloc(8LL, -1LL);
      uint64_t v76 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v76;
      *(_DWORD *)uint64_t v44 = 136315394;
      int v74 = v42;
      uint64_t v45 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      os_log_t v73 = v40;
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter(v7, v45);
      unint64_t v48 = v47;
      uint64_t v84 = sub_1000850E4(v46, v47, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, aBlock, v44 + 4, v44 + 12);
      __n128 v49 = swift_bridgeObjectRelease(v48);
      uint64_t v50 = *(void (**)(char *, uint64_t, __n128))(v29 + 8);
      v50(v38, v7, v49);
      *(_WORD *)(v44 + 12) = 2112;
      uint64_t v84 = (uint64_t)v39;
      uint64_t v51 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, aBlock, v44 + 14, v44 + 22);
      uint64_t v52 = v75;
      *uint64_t v75 = v39;

      os_log_t v53 = v73;
      _os_log_impl( (void *)&_mh_execute_header,  v73,  (os_log_type_t)v74,  "System wake, trigger prompt to pull conversation for %s on %@.",  (uint8_t *)v44,  0x16u);
      uint64_t v54 = sub_100018A04((uint64_t *)&unk_100112E20);
      swift_arrayDestroy(v52, 1LL, v54);
      swift_slowDealloc(v52, -1LL, -1LL);
      uint64_t v55 = v76;
      swift_arrayDestroy(v76, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1LL, -1LL);
      uint64_t v56 = v44;
      uint64_t v36 = v77;
      swift_slowDealloc(v56, -1LL, -1LL);
    }

    else
    {
      uint64_t v50 = *(void (**)(char *, uint64_t, __n128))(v29 + 8);
      ((void (*)(char *, uint64_t))v50)(v38, v7);
    }

    int v62 = MGGetBoolAnswer(@"DeviceSupportsLaguna");

    if (v62
      && (id v63 = -[objc_class capabilities](v39, "capabilities"),
          unsigned int v64 = [v63 isLagunaCapable],
          v63,
          v64))
    {
      uint64_t v66 = v79;
      UUID.init()(v65);
      id v67 = objc_allocWithZone(&OBJC_CLASS___TUNearbySuggestionAdvertisement);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      NSString v69 = String._bridgeToObjectiveC()();
      id v70 = objc_msgSend( v67,  "initWithSuggestionIdentifier:deviceIdentifier:type:",  isa,  v69,  2,  swift_bridgeObjectRelease(v36).n128_f64[0]);

      ((void (*)(char *, uint64_t))v50)(v66, v7);
      sub_10001D400(v70, v39);
      Class v71 = UUID._bridgeToObjectiveC()().super.isa;
      aBlock[4] = (uint64_t)nullsub_1;
      uint64_t aBlock[5] = 0LL;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_10008D438;
      void aBlock[3] = (uint64_t)&unk_1000F7B28;
      uint64_t v72 = _Block_copy(aBlock);
      [v78 joinConversation:v71 onDevice:v39 withContext:4 completion:v72];
      _Block_release(v72);

      unint64_t v32 = v83;
      Class v39 = v71;
    }

    else
    {
      swift_bridgeObjectRelease(v36);
      sub_10001E8D0(v39, (unint64_t)v32);
    }

    ((void (*)(os_log_s *, uint64_t))v50)(v32, v7);
  }

  else
  {
    if (qword_1001121D0 != -1) {
      swift_once(&qword_1001121D0, sub_10001D0B8);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    uint64_t v24 = sub_10001C270(v23, (uint64_t)qword_100112C30);
    uint64_t v83 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v83, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v83, v25, "System wake without nearbyConversations", v26, 2u);
      swift_slowDealloc(v26, -1LL, -1LL);
    }
  }

void sub_100020174(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v5 =  [*(id *)(v2 + OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_neighborhoodActivityConduit) nearbyConversationInfos];
  uint64_t v6 = sub_10001C5D0(0LL, (unint64_t *)&unk_100112DE0, &OBJC_CLASS___TUNearbyConversationInfo_ptr);
  uint64_t v7 = sub_100022510( (unint64_t *)&qword_100115840,  (unint64_t *)&unk_100112DE0,  &OBJC_CLASS___TUNearbyConversationInfo_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v5, v6, v7);

  id v9 = a1;
  sub_100021B94(v8, (uint64_t)v9);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease(v8);

  if (!v11) {
    goto LABEL_5;
  }
  id v13 = [v11 avMode];
  if (v13 == (id)2)
  {
    id v14 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v12), "mainBundle");
    unint64_t v45 = 0xEB00000000656C62LL;
    uint64_t v15 = "NearbyVideoConversationTitle";
    goto LABEL_7;
  }

  if (v13 != (id)1)
  {
LABEL_5:
    id v14 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v12), "mainBundle");
    unint64_t v16 = 0xD000000000000017LL;
    unint64_t v45 = 0xEB00000000656C62LL;
    unint64_t v17 = 0x80000001000D8B70LL;
    goto LABEL_8;
  }

  id v14 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v12), "mainBundle");
  unint64_t v45 = 0xEB00000000656C62LL;
  uint64_t v15 = "NearbyAudioConversationTitle";
LABEL_7:
  unint64_t v17 = (unint64_t)(v15 - 32) | 0x8000000000000000LL;
  unint64_t v16 = 0xD00000000000001CLL;
LABEL_8:
  v18._uint64_t countAndFlagsBits = 0LL;
  v18._object = (void *)0xE000000000000000LL;
  uint64_t v19 = 0x617A696C61636F4CLL;
  Swift::String v20 = NSLocalizedString(_:tableName:bundle:value:comment:)( *(Swift::String *)&v16,  (Swift::String_optional)0,  v14,  v18,  *(Swift::String *)(&v45 - 1));

  id v21 = [v9 name];
  if (!v21)
  {
    uint64_t v37 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v22), "mainBundle");
    v38._uint64_t countAndFlagsBits = 0xD000000000000026LL;
    v47._object = (void *)0xEB00000000656C62LL;
    v38._object = (void *)0x80000001000D8B90LL;
    v39._uint64_t countAndFlagsBits = 0LL;
    v39._object = (void *)0xE000000000000000LL;
    v47._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    Swift::String v40 = NSLocalizedString(_:tableName:bundle:value:comment:)(v38, (Swift::String_optional)0, v37, v39, v47);
    uint64_t countAndFlagsBits = v40._countAndFlagsBits;
    object = v40._object;

    if (!v11) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }

  uint64_t v23 = v21;
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  uint64_t v26 = v25;

  uint64_t v27 = sub_100018A04((uint64_t *)&unk_100112980);
  uint64_t v28 = swift_allocObject(v27, 72LL, 7LL);
  *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FB0;
  *(void *)(v28 + 56) = &type metadata for String;
  *(void *)(v28 + 64) = sub_1000224B4();
  *(void *)(v28 + 32) = v24;
  *(void *)(v28 + 40) = v26;
  uint64_t v30 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v29), "mainBundle");
  v31._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v46._object = (void *)0xEB00000000656C62LL;
  v31._object = (void *)0x80000001000D8BC0LL;
  v32._uint64_t countAndFlagsBits = 0LL;
  v32._object = (void *)0xE000000000000000LL;
  v46._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  Swift::String v33 = NSLocalizedString(_:tableName:bundle:value:comment:)(v31, (Swift::String_optional)0, v30, v32, v46);

  uint64_t countAndFlagsBits = static String.localizedStringWithFormat(_:_:)(v33._countAndFlagsBits, v33._object, v28);
  object = v35;
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v33._object);
  if (v11) {
LABEL_10:
  }
    [v11 avMode];
LABEL_12:
  sub_10004F67C();
  uint64_t v42 = v41;
  uint64_t v44 = v43;

  *(Swift::String *)a2 = v20;
  *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = countAndFlagsBits;
  *(void *)(a2 + 24) = object;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 32) = 0LL;
  *(_BYTE *)(a2 + 56) = 1;
  *(void *)(a2 + 64) = v42;
  *(void *)(a2 + 72) = v44;
  *(void *)(a2 + 80) = 0LL;
  *(_BYTE *)(a2 + 8_Block_object_dispose(va, 8) = 1;
}

double sub_100020550@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v77 = a2;
  uint64_t v78 = type metadata accessor for UUID(0LL);
  uint64_t v76 = *(void *)(v78 - 8);
  uint64_t v5 = *(void *)(v76 + 64);
  __chkstk_darwin(v78);
  uint64_t v72 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100018A04(&qword_100112DD8);
  uint64_t inited = swift_initStackObject(v6, v85);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C4C00;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(PBSUserNotificationWaitViewTypeKey);
  *(void *)(inited + 40) = v8;
  id v9 = (void *)PBSUserNotificationWaitViewTypeSharePlay;
  type metadata accessor for PBSUserNotificationWaitViewType(0LL);
  *(void *)(inited + 72) = v10;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = v9;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(PBSUserNotificationWaitViewDismissalDarwinNotificationKey);
  *(void *)(inited + 8_Block_object_dispose(va, 8) = v11;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = 0xD000000000000056LL;
  *(void *)(inited + 104) = 0x80000001000D8A00LL;
  *(void *)(inited + 12_Block_object_dispose(va, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)(PBSUserNotificationResponseForWaitViewKey);
  *(void *)(inited + 136) = v12;
  *(void *)(inited + 16_Block_object_dispose(va, 8) = &type metadata for UInt;
  *(void *)(inited + 144) = 0LL;
  id v13 = v9;
  unint64_t v14 = sub_10002DA08(inited);
  uint64_t v80 = a1;
  id v15 = [a1 name];
  if (v15)
  {
    unint64_t v17 = v15;
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v20 = v19;

    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(PBSUserNotificationSharePlayWaitViewDeviceNameKey);
    uint64_t v23 = v22;
    uint64_t v84 = &type metadata for String;
    *(void *)&__int128 v83 = v18;
    *((void *)&v83 + 1) = v20;
    sub_10001C1DC(&v83, v82);
    swift_bridgeObjectRetain(v20);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
    uint64_t v81 = v14;
    sub_1000684B8(v82, v21, v23, isUniquelyReferenced_nonNull_native);
    uint64_t v75 = v81;
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v25 = sub_100018A04((uint64_t *)&unk_100112980);
    uint64_t v26 = swift_allocObject(v25, 72LL, 7LL);
    *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FB0;
    *(void *)(v26 + 56) = &type metadata for String;
    *(void *)(v26 + 64) = sub_1000224B4();
    *(void *)(v26 + 32) = v18;
    *(void *)(v26 + 40) = v20;
    uint64_t v28 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v27), "mainBundle");
    v86._object = (void *)0xEB00000000656C62LL;
    v29._object = (void *)0x80000001000D8B10LL;
    v29._uint64_t countAndFlagsBits = 0xD000000000000024LL;
    v30._uint64_t countAndFlagsBits = 0LL;
    v30._object = (void *)0xE000000000000000LL;
    v86._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    Swift::String v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, (Swift::String_optional)0, v28, v30, v86);

    uint64_t countAndFlagsBits = static String.localizedStringWithFormat(_:_:)(v31._countAndFlagsBits, v31._object, v26);
    object = v32;
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v31._object);
  }

  else
  {
    uint64_t v34 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v16), "mainBundle");
    v35._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    v87._object = (void *)0xEB00000000656C62LL;
    v35._object = (void *)0x80000001000D8A60LL;
    v36._uint64_t countAndFlagsBits = 0LL;
    v36._object = (void *)0xE000000000000000LL;
    v87._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    Swift::String v37 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, (Swift::String_optional)0, v34, v36, v87);
    uint64_t countAndFlagsBits = v37._countAndFlagsBits;
    object = v37._object;

    uint64_t v75 = v14;
  }

  Swift::String v38 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle, v33);
  Swift::String v39 = (NSBundle *)[v38 mainBundle];
  v88._object = (void *)0xEB00000000656C62LL;
  v40._object = (void *)0x80000001000D8A90LL;
  v40._uint64_t countAndFlagsBits = 0xD000000000000024LL;
  v41._uint64_t countAndFlagsBits = 0LL;
  v41._object = (void *)0xE000000000000000LL;
  v88._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  Swift::String v42 = NSLocalizedString(_:tableName:bundle:value:comment:)(v40, (Swift::String_optional)0, v39, v41, v88);
  uint64_t v71 = v42._countAndFlagsBits;
  id v70 = v42._object;

  uint64_t v43 = swift_allocObject(&unk_1000F7AC0, 24LL, 7LL);
  uint64_t v44 = v79;
  swift_unknownObjectWeakInit(v43 + 16, v79);
  uint64_t v45 = v76;
  Swift::String v46 = v72;
  uint64_t v47 = v78;
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v72, v77, v78);
  uint64_t v48 = *(unsigned __int8 *)(v45 + 80);
  uint64_t v49 = (v48 + 24) & ~v48;
  unint64_t v50 = (v5 + v49 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v51 = swift_allocObject(&unk_1000F7AE8, v50 + 8, v48 | 7);
  *(void *)(v51 + swift_unknownObjectWeakDestroy(v0 + 16) = v43;
  (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v51 + v49, v46, v47);
  uint64_t v52 = v80;
  *(void *)(v51 + v50) = v80;
  id v53 = v52;
  uint64_t v54 = (NSBundle *)[v38 mainBundle];
  v55._uint64_t countAndFlagsBits = 0xD000000000000022LL;
  v89._object = (void *)0xEB00000000656C62LL;
  v55._object = (void *)0x80000001000D8AC0LL;
  v56._uint64_t countAndFlagsBits = 0LL;
  v56._object = (void *)0xE000000000000000LL;
  v89._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  Swift::String v57 = NSLocalizedString(_:tableName:bundle:value:comment:)(v55, (Swift::String_optional)0, v54, v56, v89);

  uint64_t v58 = swift_allocObject(&unk_1000F7AC0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v58 + 16, v44);
  unint64_t v59 = (NSBundle *)[v38 mainBundle];
  v60._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v90._object = (void *)0xEB00000000656C62LL;
  v60._object = (void *)0x80000001000D8AF0LL;
  v61._uint64_t countAndFlagsBits = 0LL;
  v61._object = (void *)0xE000000000000000LL;
  v90._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  Swift::String v62 = NSLocalizedString(_:tableName:bundle:value:comment:)(v60, (Swift::String_optional)0, v59, v61, v90);

  swift_bridgeObjectRetain(v57._object);
  swift_retain(v58);
  uint64_t v63 = v75;
  sub_10002CEA4(v75);
  uint64_t v65 = v64;
  swift_bridgeObjectRelease(v63);
  swift_release(v58);
  swift_bridgeObjectRelease(v57._object);
  *(Swift::String *)a3 = v62;
  uint64_t v66 = v70;
  *(void *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = v71;
  *(void *)(a3 + 24) = v66;
  *(void *)(a3 + 32) = sub_100022468;
  *(void *)(a3 + 40) = v51;
  id v67 = object;
  *(void *)(a3 + 4_Block_object_dispose(va, 8) = countAndFlagsBits;
  *(void *)(a3 + 56) = v67;
  double result = 0.0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(Swift::String *)(a3 + 96) = v57;
  *(void *)(a3 + 112) = sub_1000224AC;
  *(void *)(a3 + 120) = v58;
  *(void *)(a3 + 12_Block_object_dispose(va, 8) = v65;
  return result;
}

void sub_100020BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 16;
  swift_beginAccess(a1 + 16, v16, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    uint64_t v6 = (char *)Strong;
    if (qword_1001121D0 != -1) {
      swift_once(&qword_1001121D0, sub_10001D0B8);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    uint64_t v8 = sub_10001C270(v7, (uint64_t)qword_100112C30);
    id v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "Expanse pull bulletin move selected... prompting a legacy pull",  v11,  2u);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    id v12 = *(id *)&v6[OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_neighborhoodActivityConduit];
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    aBlock[4] = sub_100020D74;
    uint64_t aBlock[5] = 0LL;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_10008D438;
    void aBlock[3] = &unk_1000F7B00;
    unint64_t v14 = _Block_copy(aBlock);
    [v12 joinConversation:isa onDevice:a3 withContext:4 completion:v14];
    _Block_release(v14);
  }

uint64_t sub_100020D74()
{
  return notify_post("com.apple.facetime.SuggestionAdvertisementManager.expanseWaitViewDismissalNotification");
}

void sub_100020D80(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = (char *)Strong;
    if (qword_1001121D0 != -1) {
      swift_once(&qword_1001121D0, sub_10001D0B8);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10001C270(v4, (uint64_t)qword_100112C30);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Expanse pull bulletin other button selected", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    [*(id *)&v3[OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_neighborhoodActivityConduit] cancelPendingJoinRequest];
  }

void sub_100020EC4(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = "(";
    void v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = "(";
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
  }

uint64_t type metadata accessor for SuggestionAdvertisementManager.SuggestionAdvertisementState(uint64_t a1)
{
  return sub_100020F70( a1,  (uint64_t *)&unk_100112D70,  (uint64_t)&nominal type descriptor for SuggestionAdvertisementManager.SuggestionAdvertisementState);
}

uint64_t sub_100020F70(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

void **sub_10002102C(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (void **)&v4[(v3 + 16LL) & ~(unint64_t)v3];
    swift_retain(v4);
  }

  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    os_log_type_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UUID(0LL);
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    id v12 = v4;
    if (v11(v8, 1LL, v9))
    {
      uint64_t v13 = sub_100018A04(&qword_100112D10);
      memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
    }
  }

  return v5;
}

uint64_t sub_10002111C(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  return result;
}

void **sub_100021198(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  os_log_type_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  id v11 = v4;
  if (v10(v7, 1LL, v8))
  {
    uint64_t v12 = sub_100018A04(&qword_100112D10);
    memcpy(v6, v7, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0LL, 1LL, v8);
  }

  return a1;
}

void **sub_100021260(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  os_log_type_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  id v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  unint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }

  if (v16)
  {
LABEL_6:
    uint64_t v17 = sub_100018A04(&qword_100112D10);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
  return a1;
}

void *sub_10002137C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7))
  {
    uint64_t v9 = sub_100018A04(&qword_100112D10);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0LL, 1LL, v7);
  }

  return a1;
}

void **sub_100021438(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_100018A04(&qword_100112D10);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  return a1;
}

uint64_t sub_100021550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002155C);
}

uint64_t sub_10002155C(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_100018A04(&qword_100112D10);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t sub_1000215DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000215E8);
}

char *sub_1000215E8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_100018A04(&qword_100112D10);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

void sub_100021660(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1000216E8( 319LL,  (unint64_t *)&unk_100112D80,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
  }

void sub_1000216E8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

uint64_t sub_100021734(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

char *sub_10002175C(uint64_t a1, void *a2, uint64_t a3, char *a4)
{
  uint64_t v34 = a2;
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v32 = *(void *)(v7 - 8);
  uint64_t v33 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v38[3] = type metadata accessor for PineBoardBulletinManager(0LL, v16);
  v38[4] = &off_1000FA160;
  v38[0] = a1;
  v37[3] = type metadata accessor for UserNotificationManager(0LL, v17);
  v37[4] = &off_1000FB2A0;
  v37[0] = a3;
  uint64_t v18 = &a4[OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_currentState];
  uint64_t v19 = type metadata accessor for SuggestionAdvertisementManager.SuggestionAdvertisementState(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v18, 1LL, 1LL, v19);
  uint64_t v31 = OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_suggestionAdvertisementQueue;
  sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v20 = a4;
  static DispatchQoS.unspecified.getter(v20);
  Swift::String v36 = _swiftEmptyArrayStorage;
  uint64_t v21 = sub_10001949C( (unint64_t *)&qword_100113130,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v22 = sub_100018A04((uint64_t *)&unk_100112DC0);
  uint64_t v23 = sub_100022750( (unint64_t *)&qword_100113140,  (uint64_t *)&unk_100112DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v22, v23, v10, v21);
  (*(void (**)(char *, void, uint64_t))(v32 + 104))( v9,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v33);
  uint64_t v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000037LL,  0x80000001000D89C0LL,  v15,  v12,  v9,  0LL);
  *(void *)&a4[v31] = v24;
  uint64_t v25 = v34;
  *(void *)&v20[OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_neighborhoodActivityConduit] = v34;
  sub_10001C580((uint64_t)v38, (uint64_t)&v20[OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_bulletinManager]);
  sub_10001C580( (uint64_t)v37,  (uint64_t)&v20[OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_userNotificationManager]);
  id v26 = v25;

  uint64_t v27 = (objc_class *)type metadata accessor for SuggestionAdvertisementManager(0LL);
  v35.receiver = v20;
  v35.super_class = v27;
  uint64_t v28 = (char *)objc_msgSendSuper2(&v35, "init");
  [v26 addDelegate:v28 queue:*(void *)&v28[OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_suggestionAdvertisementQueue]];
  sub_10001BFEC(v37);
  sub_10001BFEC(v38);
  return v28;
}

char *sub_100021A4C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v22 = type metadata accessor for PineBoardBulletinManager(0LL, (uint64_t)a2);
  uint64_t v23 = &off_1000FA160;
  v21[0] = a1;
  uint64_t v19 = type metadata accessor for UserNotificationManager(0LL, v6);
  uint64_t v20 = &off_1000FB2A0;
  v18[0] = a3;
  uint64_t v7 = (char *)objc_allocWithZone((Class)type metadata accessor for SuggestionAdvertisementManager(0LL));
  uint64_t v8 = sub_100021734((uint64_t)v21, v22);
  __chkstk_darwin(v8);
  uint64_t v10 = (void *)((char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  uint64_t v12 = sub_100021734((uint64_t)v18, v19);
  __chkstk_darwin(v12);
  uint64_t v14 = (void *)((char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  uint64_t v16 = sub_10002175C(*v10, a2, *v14, v7);
  sub_10001BFEC(v18);
  sub_10001BFEC(v21);
  return v16;
}

void sub_100021B94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v3 = a1;
    }
    else {
      uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = __CocoaSet.makeIterator()(v3);
    uint64_t v5 = sub_10001C5D0(0LL, (unint64_t *)&unk_100112DE0, &OBJC_CLASS___TUNearbyConversationInfo_ptr);
    uint64_t v6 = sub_100022510( (unint64_t *)&qword_100115840,  (unint64_t *)&unk_100112DE0,  &OBJC_CLASS___TUNearbyConversationInfo_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v7 = Set.Iterator.init(_cocoa:)(v32, v4, v5, v6);
    uint64_t v2 = v32[0];
    uint64_t v29 = v32[1];
    uint64_t v8 = v32[2];
    uint64_t v9 = v32[3];
    unint64_t v10 = v32[4];
  }

  else
  {
    uint64_t v11 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v29 = a1 + 56;
    uint64_t v12 = ~v11;
    uint64_t v13 = -v11;
    if (v13 < 64) {
      uint64_t v14 = ~(-1LL << v13);
    }
    else {
      uint64_t v14 = -1LL;
    }
    unint64_t v10 = v14 & *(void *)(a1 + 56);
    uint64_t v7 = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v8 = v12;
    uint64_t v9 = 0LL;
  }

  uint64_t v27 = v8;
  int64_t v28 = (unint64_t)(v8 + 64) >> 6;
  if (v2 < 0) {
    goto LABEL_13;
  }
LABEL_11:
  if (v10)
  {
    uint64_t v15 = (v10 - 1) & v10;
    unint64_t v16 = __clz(__rbit64(v10)) | (v9 << 6);
    uint64_t v17 = v9;
    goto LABEL_32;
  }

  int64_t v22 = v9 + 1;
  if (!__OFADD__(v9, 1LL))
  {
    if (v22 < v28)
    {
      unint64_t v23 = *(void *)(v29 + 8 * v22);
      uint64_t v17 = v9 + 1;
      if (v23) {
        goto LABEL_31;
      }
      uint64_t v17 = v9 + 2;
      if (v9 + 2 >= v28) {
        goto LABEL_36;
      }
      unint64_t v23 = *(void *)(v29 + 8 * v17);
      if (v23) {
        goto LABEL_31;
      }
      uint64_t v17 = v9 + 3;
      if (v9 + 3 >= v28) {
        goto LABEL_36;
      }
      unint64_t v23 = *(void *)(v29 + 8 * v17);
      if (v23) {
        goto LABEL_31;
      }
      uint64_t v17 = v9 + 4;
      if (v9 + 4 >= v28) {
        goto LABEL_36;
      }
      unint64_t v23 = *(void *)(v29 + 8 * v17);
      if (v23)
      {
LABEL_31:
        uint64_t v15 = (v23 - 1) & v23;
        unint64_t v16 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_32:
        for (i = *(id *)(*(void *)(v2 + 48) + 8 * v16); i; uint64_t v15 = v10)
        {
          id v25 = objc_msgSend(i, "deviceHandle", v27);
          unsigned int v26 = [v25 isEquivalentToDeviceHandle:a2];

          if (v26) {
            break;
          }

          uint64_t v9 = v17;
          unint64_t v10 = v15;
          if ((v2 & 0x8000000000000000LL) == 0) {
            goto LABEL_11;
          }
LABEL_13:
          uint64_t v18 = __CocoaSet.Iterator.next()(v7);
          if (!v18) {
            break;
          }
          uint64_t v19 = v18;
          uint64_t v31 = v18;
          uint64_t v20 = sub_10001C5D0(0LL, (unint64_t *)&unk_100112DE0, &OBJC_CLASS___TUNearbyConversationInfo_ptr);
          swift_unknownObjectRetain(v19);
          swift_dynamicCast(&v33, &v31, (char *)&type metadata for Swift.AnyObject + 8, v20, 7LL);
          id i = v33;
          swift_unknownObjectRelease(v19);
          uint64_t v17 = v9;
        }

        goto LABEL_36;
      }

      uint64_t v17 = v9 + 5;
      if (v9 + 5 < v28)
      {
        unint64_t v23 = *(void *)(v29 + 8 * v17);
        if (!v23)
        {
          uint64_t v24 = v9 + 6;
          while (v28 != v24)
          {
            unint64_t v23 = *(void *)(v29 + 8 * v24++);
            if (v23)
            {
              uint64_t v17 = v24 - 1;
              goto LABEL_31;
            }
          }

          goto LABEL_36;
        }

        goto LABEL_31;
      }
    }

LABEL_36:
    sub_100022550(v2);
    return;
  }

  __break(1u);
}

    swift_once(&qword_100112220, sub_100031228);
    goto LABEL_4;
  }

  uint64_t v31 = (void *)v16;
  uint64_t v32 = v17;
  v105 = v2;
  uint64_t v33 = v110;
  sub_1000361CC((uint64_t)v15, v110);
  uint64_t v34 = v109;
  sub_10003624C((uint64_t)v109, v33 + *(int *)(v16 + 28));
  objc_super v35 = v33 + *(int *)(v16 + 32);
  Swift::String v36 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_10001C3B8((uint64_t)v34, (uint64_t)v10, &qword_100113928);
  sub_10001C3B8(v35, v36, &qword_100112D10);
  Swift::String v37 = *((void *)v10 + 3);
  Swift::String v38 = v113;
  Swift::String v39 = v112;
  Swift::String v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 48))(v36, 1LL, v112);
  if (v37)
  {
    v104 = v32;
    if (v40 == 1)
    {
      sub_100036294((__int128 *)v10, (uint64_t)v116);
      if (qword_100112220 != -1) {
        swift_once(&qword_100112220, sub_100031228);
      }
      v108 = v35;
      v109 = v31;
      Swift::String v41 = type metadata accessor for Logger(0LL);
      sub_10001C270(v41, (uint64_t)qword_1001137C8);
      Swift::String v42 = sub_10001C580((uint64_t)v116, (uint64_t)&v120);
      uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
      uint64_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        Swift::String v46 = swift_slowAlloc(32LL, -1LL);
        v115 = v46;
        *(_DWORD *)uint64_t v45 = 136315138;
        v107 = v45 + 4;
        uint64_t v48 = v123;
        uint64_t v47 = v124;
        sub_10001C3FC(&v120, v123);
        uint64_t v49 = v48;
        Swift::String v39 = v112;
        unint64_t v50 = dispatch thunk of Notice.description.getter(v49, v47);
        uint64_t v52 = v51;
        v114 = sub_1000850E4(v50, v51, &v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v107, v45 + 12);
        swift_bridgeObjectRelease(v52);
        sub_10001BFEC(&v120);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Presenting new bulletin for new notice: %s.", v45, 0xCu);
        swift_arrayDestroy(v46, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1LL, -1LL);
        swift_slowDealloc(v45, -1LL, -1LL);
      }

      else
      {
        sub_10001BFEC(&v120);
      }

      Swift::String v88 = v117;
      Swift::String v89 = v118;
      sub_10001C3FC(v116, v117);
      Swift::String v90 = dispatch thunk of Notice.title.getter(v88, v89);
      unint64_t v92 = v91;
      v93 = v117;
      uint64_t v94 = v118;
      sub_10001C3FC(v116, v117);
      v95 = dispatch thunk of Notice.subtitle.getter(v93, v94);
      Swift::Int v97 = v96;
      uint64_t v98 = sub_10003491C((uint64_t)v116);
      v100 = v99;
      v120 = v90;
      v121 = v92;
      v122 = v95;
      v123 = v97;
      v125 = 0LL;
      v126 = 0LL;
      v124 = 0LL;
      v127 = 1;
      v128 = v98;
      v129 = v99;
      v130 = 0LL;
      v131 = 1;
      v101 = v106;
      sub_1000334D8((uint64_t)&v120, v106);
      swift_bridgeObjectRelease(0LL);
      swift_bridgeObjectRelease(v97);
      swift_bridgeObjectRelease(v92);
      sub_1000227F0((uint64_t)v98, v100);
      sub_10001BFEC(v116);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v113 + 56))(v101, 0LL, 1LL, v39);
      sub_1000362F0(v101, v108, &qword_100112D10);
      uint64_t v31 = v109;
    }

    else
    {
      sub_100036294((__int128 *)v10, (uint64_t)v116);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v108, v36, v39);
      if (qword_100112220 != -1) {
        swift_once(&qword_100112220, sub_100031228);
      }
      Swift::String v60 = v31;
      Swift::String v61 = type metadata accessor for Logger(0LL);
      Swift::String v62 = sub_10001C270(v61, (uint64_t)qword_1001137C8);
      uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
      uint64_t v64 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v63, v64))
      {
        uint64_t v65 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v65 = 0;
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "Updating existing bulletin for new notice.", v65, 2u);
        swift_slowDealloc(v65, -1LL, -1LL);
      }

      v109 = sub_10001C3FC( (void *)(v105 + OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_bulletinManager),  *(void *)(v105 + OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_bulletinManager + 24));
      uint64_t v66 = v117;
      id v67 = v118;
      sub_10001C3FC(v116, v117);
      id v68 = dispatch thunk of Notice.title.getter(v66, v67);
      id v70 = v69;
      uint64_t v71 = v117;
      uint64_t v72 = v118;
      sub_10001C3FC(v116, v117);
      os_log_t v73 = dispatch thunk of Notice.subtitle.getter(v71, v72);
      uint64_t v75 = v74;
      uint64_t v76 = sub_10003491C((uint64_t)v116);
      uint64_t v78 = v77;
      v120 = v68;
      v121 = v70;
      v122 = v73;
      v123 = v75;
      v125 = 0LL;
      v126 = 0LL;
      v124 = 0LL;
      v127 = 1;
      v128 = v76;
      v129 = v77;
      v130 = 0LL;
      v131 = 1;
      uint64_t v79 = v108;
      sub_1000632B0(v108, (uint64_t)&v120);
      swift_bridgeObjectRelease(0LL);
      swift_bridgeObjectRelease(v75);
      swift_bridgeObjectRelease(v70);
      sub_1000227F0((uint64_t)v76, v78);
      (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v79, v112);
      sub_10001BFEC(v116);
      uint64_t v31 = v60;
    }

    uint64_t v32 = v104;
  }

  else if (v40 == 1)
  {
    if (qword_100112220 != -1) {
      swift_once(&qword_100112220, sub_100031228);
    }
    id v53 = type metadata accessor for Logger(0LL);
    uint64_t v54 = sub_10001C270(v53, (uint64_t)qword_1001137C8);
    Swift::String v55 = (os_log_s *)Logger.logObject.getter(v54);
    Swift::String v56 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v55, v56))
    {
      Swift::String v57 = v32;
      uint64_t v58 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v58 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v55,  v56,  "Ignoring notice change where there is no active bulletin or notice.",  v58,  2u);
      unint64_t v59 = v58;
      uint64_t v32 = v57;
      swift_slowDealloc(v59, -1LL, -1LL);
    }
  }

  else
  {
    (*(void (**)(uint8_t *, uint64_t, uint64_t))(v38 + 32))(v107, v36, v39);
    if (qword_100112220 != -1) {
      swift_once(&qword_100112220, sub_100031228);
    }
    uint64_t v80 = type metadata accessor for Logger(0LL);
    uint64_t v81 = sub_10001C270(v80, (uint64_t)qword_1001137C8);
    uint64_t v82 = (os_log_s *)Logger.logObject.getter(v81);
    __int128 v83 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v84 = v32;
      uint64_t v85 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v85 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v82,  v83,  "Dismissing active bulletin because active notice is now nil.",  v85,  2u);
      Swift::String v86 = v85;
      uint64_t v32 = v84;
      swift_slowDealloc(v86, -1LL, -1LL);
    }

    sub_10001C608(v35, &qword_100112D10);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v35, 1LL, 1LL, v39);
    sub_10001C3FC( (void *)(v105 + OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_bulletinManager),  *(void *)(v105 + OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_bulletinManager + 24));
    Swift::String v87 = (uint64_t)v107;
    sub_100064720((uint64_t)v107);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v87, v39);
  }

  v102 = v111;
  sub_1000362AC(v33, v111);
  (*(void (**)(uint64_t, void, uint64_t, void *))(v32 + 56))(v102, 0LL, 1LL, v31);
  swift_beginAccess(v25, v116, 33LL, 0LL);
  sub_1000362F0(v102, v25, &qword_1001138F0);
  swift_endAccess(v116);
  sub_100036210(v33);
}

        uint64_t v24 = 0LL;
        int64_t v28 = 1LL;
      }
    }
  }

  Swift::String v38 = v32;
  Swift::String v39 = ~v36;
  Swift::String v40 = *(void *)(v8 + 72);
  Swift::String v41 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    v41(v11, *(void *)(v38 + 48) + v40 * v37, v7);
    Swift::String v42 = sub_100039E60( (unint64_t *)&qword_100112E70,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v43 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v60, v7, v42);
    uint64_t v44 = *(void (**)(char *, uint64_t))(v8 + 8);
    v44(v11, v7);
    if ((v43 & 1) != 0) {
      break;
    }
    Swift::String v37 = (v37 + 1) & v39;
    if (((*(void *)&v59[(v37 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v37) & 1) == 0) {
      goto LABEL_34;
    }
  }

  isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v44)(v60, v7);
  Swift::String v46 = *(_BYTE *)(v38 + 32);
  uint64_t v47 = v46 & 0x3F;
  uint64_t v48 = (1LL << v46) + 63;
  uint64_t v49 = v48 >> 6;
  unint64_t v50 = 8 * (v48 >> 6);
  if (v47 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v48 >> 6), 8LL), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v54 - ((v50 + 15) & 0x3FFFFFFFFFFFFFF0LL), v59, v50);
    uint64_t v51 = sub_100073858((unint64_t *)((char *)&v54 - ((v50 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v49, v38, v37, &v61);
    swift_release(v38);
    sub_100022550(v61);
  }

  else
  {
    id v53 = (void *)swift_slowAlloc(v50, -1LL);
    memcpy(v53, v59, v50);
    uint64_t v51 = sub_100073858((unint64_t *)v53, v49, v38, v37, &v61);
    swift_release(v38);
    sub_100022550(v61);
    swift_slowDealloc(v53, -1LL, -1LL);
  }

  return v51;
}

    sub_100022550(v2);
    return;
  }

  __break(1u);
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

void sub_100021EB8(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [a1 name];
  if (v3)
  {
    uint64_t v5 = v3;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v8 = v7;

    uint64_t v9 = sub_100018A04((uint64_t *)&unk_100112980);
    uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
    *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FB0;
    *(void *)(v10 + 56) = &type metadata for String;
    *(void *)(v10 + 64) = sub_1000224B4();
    *(void *)(v10 + 32) = v6;
    *(void *)(v10 + 40) = v8;
    uint64_t v12 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v11), "mainBundle");
    v30._object = (void *)0xEB00000000656C62LL;
    v13._object = (void *)0x80000001000D8C80LL;
    v13._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
    v14._uint64_t countAndFlagsBits = 0LL;
    v14._object = (void *)0xE000000000000000LL;
    v30._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    Swift::String v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, v12, v14, v30);

    uint64_t countAndFlagsBits = static String.localizedStringWithFormat(_:_:)(v15._countAndFlagsBits, v15._object, v10);
    object = v17;
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v15._object);
  }

  else
  {
    uint64_t v20 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v4), "mainBundle");
    v21._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v31._object = (void *)0xEB00000000656C62LL;
    v21._object = (void *)0x80000001000D8C20LL;
    v22._uint64_t countAndFlagsBits = 0LL;
    v22._object = (void *)0xE000000000000000LL;
    v31._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    Swift::String v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, v20, v22, v31);
    uint64_t countAndFlagsBits = v23._countAndFlagsBits;
    object = v23._object;
  }

  uint64_t v24 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v19), "mainBundle");
  v25._uint64_t countAndFlagsBits = 0xD000000000000027LL;
  v32._object = (void *)0xEB00000000656C62LL;
  v25._object = (void *)0x80000001000D8C50LL;
  v26._uint64_t countAndFlagsBits = 0LL;
  v26._object = (void *)0xE000000000000000LL;
  v32._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  Swift::String v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, v24, v26, v32);

  sub_10004F8D8();
  *(void *)a2 = countAndFlagsBits;
  *(void *)(a2 + _Block_object_dispose(va, 8) = object;
  *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(Swift::String *)(a2 + 32) = v27;
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = 2LL;
  *(_BYTE *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = v28;
  *(void *)(a2 + 72) = v29;
  *(void *)(a2 + 80) = 0LL;
  *(_BYTE *)(a2 + 8_Block_object_dispose(va, 8) = 1;
}

void sub_100022118(void *a1, void *a2)
{
  uint64_t v5 = sub_100018A04(&qword_100112DD0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v19 - v9;
  if (a1)
  {
    id v20 = a1;
    if ([v20 type] && objc_msgSend(v20, "type") != (id)2)
    {
      sub_10001D400(v20, a2);
    }

    else
    {
      uint64_t v11 = v2 + OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_currentState;
      swift_beginAccess(v11, v22, 0LL, 0LL);
      sub_10001C3B8(v11, (uint64_t)v10, &qword_100112DD0);
      uint64_t v12 = type metadata accessor for SuggestionAdvertisementManager.SuggestionAdvertisementState(0LL);
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1LL, v12) == 1)
      {
        sub_10001C608((uint64_t)v10, &qword_100112DD0);
        Swift::String v14 = (char *)v8 + *(int *)(v12 + 20);
        uint64_t v15 = type metadata accessor for UUID(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
        *uint64_t v8 = v20;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v8, 0LL, 1LL, v12);
        swift_beginAccess(v11, v21, 33LL, 0LL);
        id v16 = v20;
        sub_10002236C((uint64_t)v8, v11);
        swift_endAccess(v21);
      }

      else
      {

        sub_10001C608((uint64_t)v10, &qword_100112DD0);
      }
    }
  }

  else
  {
    sub_10001F738();
    uint64_t v17 = type metadata accessor for SuggestionAdvertisementManager.SuggestionAdvertisementState(0LL);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v8, 1LL, 1LL, v17);
    uint64_t v18 = v2 + OBJC_IVAR____TtC8FaceTime30SuggestionAdvertisementManager_currentState;
    swift_beginAccess(v18, v22, 33LL, 0LL);
    sub_10002236C((uint64_t)v8, v18);
    swift_endAccess(v22);
  }

uint64_t sub_10002236C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04(&qword_100112DD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000223B4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000223D8()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_100022468()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_100020BD0(*(void *)(v0 + 16), v0 + v2, *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

void sub_1000224AC()
{
}

unint64_t sub_1000224B4()
{
  unint64_t result = qword_100113BC0;
  if (!qword_100113BC0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100113BC0);
  }

  return result;
}

uint64_t sub_1000224F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100022508(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100022510(unint64_t *a1, unint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_10001C5D0(255LL, a2, a3);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100022550(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100022558@<X0>(uint64_t a1@<X8>)
{
  return sub_100062290(*(uint64_t **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100022570()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  unint64_t v7 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v9 = (v3 + v8 + 8) & ~v3;
  uint64_t v10 = v9 + v5;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v0 + v4, v1);
  swift_release(*(void *)(v0 + v7));

  v11(v0 + v9, v1);
  return swift_deallocObject(v0, v10, v6);
}

void sub_100022620(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  unint64_t v6 = (*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_10001F070( a1,  v1 + v5,  *(void *)(v1 + v6),  *(void **)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  v1 + ((v4 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8) & ~v4));
}

uint64_t sub_10002268C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_100022700(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_10001F448(a1, v1 + v4, *(void **)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100022750(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_10001C334(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

void *sub_100022790(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[8];
  unint64_t v5 = a1[9];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  sub_1000227F0(v4, v5);
  return a1;
}

uint64_t sub_1000227F0(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100022804(result, a2);
  }
  return result;
}

uint64_t sub_100022804(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_100022848()
{
  unint64_t result = qword_100112E60;
  if (!qword_100112E60)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000C6900, &type metadata for BulletinManagerError);
    atomic_store(result, (unint64_t *)&qword_100112E60);
  }

  return result;
}

void *sub_10002288C(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[9];
  uint64_t v7 = a1[10];
  uint64_t v8 = a1[11];
  uint64_t v9 = a1[12];
  uint64_t v10 = a1[13];
  uint64_t v12 = a1[15];
  uint64_t v13 = a1[14];
  uint64_t v14 = a1[16];
  swift_release(a1[5]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  sub_100022948(v5, v6, v7, v8);
  sub_100022948(v9, v10, v13, v12);
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t sub_100022948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_release(a4);
  }

  return result;
}

uint64_t sub_100022978()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000229A4(uint64_t *a1)
{
}

uint64_t sub_1000229AC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000229D8(uint64_t a1)
{
  return sub_10001E268(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000229E8@<X0>(uint64_t a1@<X8>)
{
  return sub_100022558(a1);
}

uint64_t sub_1000229FC(uint64_t a1, uint64_t a2)
{
  v14.receiver = v2;
  v14.super_class = (Class)type metadata accessor for AddPeopleToCallViewController(a1, a2);
  objc_msgSendSuper2(&v14, "viewDidLoad");
  uint64_t v4 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v3), "mainBundle");
  v15._object = (void *)0xE000000000000000LL;
  v5._uint64_t countAndFlagsBits = 0x504F45505F444441LL;
  v5._object = (void *)0xEA0000000000454CLL;
  v6.value._uint64_t countAndFlagsBits = 0x6C6172656E6547LL;
  v6.value._object = (void *)0xE700000000000000LL;
  v7._uint64_t countAndFlagsBits = 0LL;
  v7._object = (void *)0xE000000000000000LL;
  v15._uint64_t countAndFlagsBits = 0LL;
  Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, v4, v7, v15);

  uint64_t v9 = (Swift::String *)&v2[OBJC_IVAR____TtC8FaceTime40SidebarNavigationBaseChildViewController_navigationTitle];
  uint64_t v10 = *(void *)&v2[OBJC_IVAR____TtC8FaceTime40SidebarNavigationBaseChildViewController_navigationTitle + 8];
  Swift::String *v9 = v8;
  swift_bridgeObjectRelease(v10);
  uint64_t countAndFlagsBits = v9->_countAndFlagsBits;
  object = v9->_object;
  swift_bridgeObjectRetain(object);
  sub_100074BF8(countAndFlagsBits, object);
  return swift_bridgeObjectRelease(object);
}

id sub_100022BAC(uint64_t a1, uint64_t a2)
{
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for AddPeopleToCallViewController(a1, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for AddPeopleToCallViewController(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime29AddPeopleToCallViewController, a2);
}

void sub_100022BFC(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    uint64_t v4 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112FE8, &OBJC_CLASS___UIScene_ptr);
    uint64_t v5 = sub_100022510( (unint64_t *)&unk_100112FF0,  (unint64_t *)&qword_100112FE8,  &OBJC_CLASS___UIScene_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
    Swift::String_optional v6 = Set.Iterator.init(_cocoa:)(v38, v3, v4, v5);
    uint64_t v1 = v38[0];
    uint64_t v35 = v38[1];
    uint64_t v7 = v38[2];
    uint64_t v8 = v38[3];
    unint64_t v9 = v38[4];
  }

  else
  {
    uint64_t v10 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v35 = a1 + 56;
    uint64_t v11 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1LL << v12);
    }
    else {
      uint64_t v13 = -1LL;
    }
    unint64_t v9 = v13 & *(void *)(a1 + 56);
    Swift::String_optional v6 = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v7 = v11;
    uint64_t v8 = 0LL;
  }

  uint64_t v33 = v7;
  int64_t v34 = (unint64_t)(v7 + 64) >> 6;
  uint64_t v36 = UIWindowSceneSessionRoleApplication;
  if ((v1 & 0x8000000000000000LL) == 0) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v14 = __CocoaSet.Iterator.next()(v6);
  if (!v14) {
    goto LABEL_39;
  }
  uint64_t v15 = v14;
  uint64_t v37 = v14;
  uint64_t v16 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112FE8, &OBJC_CLASS___UIScene_ptr);
  swift_unknownObjectRetain(v15);
  swift_dynamicCast(&v39, &v37, (char *)&type metadata for Swift.AnyObject + 8, v16, 7LL);
  id v17 = v39;
  swift_unknownObjectRelease(v15);
  uint64_t v18 = v8;
  uint64_t v19 = v9;
  if (!v17) {
    goto LABEL_39;
  }
  while (1)
  {
    id v24 = objc_msgSend(v17, "session", v33);
    id v25 = [v24 role];

    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    uint64_t v28 = v27;
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    uint64_t v31 = v29;
    if (v26 == v30 && v28 == v29)
    {

      swift_bridgeObjectRelease_n(v28, 2LL);
      goto LABEL_39;
    }

    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v30, v29, 0LL);

    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v31);
    if ((v32 & 1) != 0) {
      goto LABEL_39;
    }

    uint64_t v8 = v18;
    unint64_t v9 = v19;
    if (v1 < 0) {
      goto LABEL_11;
    }
LABEL_14:
    if (!v9) {
      break;
    }
    uint64_t v19 = (v9 - 1) & v9;
    unint64_t v20 = __clz(__rbit64(v9)) | (v8 << 6);
    uint64_t v18 = v8;
LABEL_32:
    id v17 = *(id *)(*(void *)(v1 + 48) + 8 * v20);
    if (!v17) {
      goto LABEL_39;
    }
  }

  int64_t v21 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    return;
  }

  if (v21 >= v34) {
    goto LABEL_39;
  }
  unint64_t v22 = *(void *)(v35 + 8 * v21);
  uint64_t v18 = v8 + 1;
  if (v22) {
    goto LABEL_31;
  }
  uint64_t v18 = v8 + 2;
  if (v8 + 2 >= v34) {
    goto LABEL_39;
  }
  unint64_t v22 = *(void *)(v35 + 8 * v18);
  if (v22) {
    goto LABEL_31;
  }
  uint64_t v18 = v8 + 3;
  if (v8 + 3 >= v34) {
    goto LABEL_39;
  }
  unint64_t v22 = *(void *)(v35 + 8 * v18);
  if (v22) {
    goto LABEL_31;
  }
  uint64_t v18 = v8 + 4;
  if (v8 + 4 >= v34) {
    goto LABEL_39;
  }
  unint64_t v22 = *(void *)(v35 + 8 * v18);
  if (v22) {
    goto LABEL_31;
  }
  uint64_t v18 = v8 + 5;
  if (v8 + 5 >= v34) {
    goto LABEL_39;
  }
  unint64_t v22 = *(void *)(v35 + 8 * v18);
  if (v22)
  {
LABEL_31:
    uint64_t v19 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v18 << 6);
    goto LABEL_32;
  }

  uint64_t v23 = v8 + 6;
  while (v34 != v23)
  {
    unint64_t v22 = *(void *)(v35 + 8 * v23++);
    if (v22)
    {
      uint64_t v18 = v23 - 1;
      goto LABEL_31;
    }
  }

LABEL_39:
  sub_100022550(v1);
}

  __break(1u);
}

  sub_100022550(v5);
}

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  sub_100022550(v1);
}

              sub_100022550(v1);
              return (uint64_t)v13;
            }
          }
        }
      }
    }

  __break(1u);
}

uint64_t sub_100022FB8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_100112EB0);
  sub_10001C270(v0, (uint64_t)qword_100112EB0);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0xD000000000000018LL,  0x80000001000C4CF0LL);
}

id sub_100023034()
{
  uint64_t v1 = OBJC_IVAR___TVFTActiveCallViewController____lazy_storage___pipShroudView;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR___TVFTActiveCallViewController____lazy_storage___pipShroudView];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR___TVFTActiveCallViewController____lazy_storage___pipShroudView];
  }

  else
  {
    id v4 = sub_100023094(v0);
    uint64_t v5 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v4;
    id v3 = v4;

    uint64_t v2 = 0LL;
  }

  id v6 = v2;
  return v3;
}

id sub_100023094(void *a1)
{
  id v2 = [objc_allocWithZone(UIView) init];
  id v4 = objc_msgSend((id)objc_opt_self(UIColor, v3), "blackColor");
  [v2 setBackgroundColor:v4];

  [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v2 setHidden:1];
  id result = [a1 view];
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }

  id v6 = result;
  [result addSubview:v2];

  uint64_t v7 = sub_100018A04(&qword_1001142B0);
  uint64_t v8 = swift_allocObject(v7, 64LL, 7LL);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C4CE0;
  id v9 = [v2 topAnchor];
  id result = [a1 view];
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v10 = result;
  id v11 = [result topAnchor];

  id v12 = [v9 constraintEqualToAnchor:v11];
  *(void *)(v8 + 32) = v12;
  id v13 = [v2 bottomAnchor];
  id result = [a1 view];
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v14 = result;
  id v15 = [result bottomAnchor];

  id v16 = [v13 constraintEqualToAnchor:v15];
  *(void *)(v8 + 40) = v16;
  id v17 = [v2 leadingAnchor];
  id result = [a1 view];
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v18 = result;
  id v19 = [result leadingAnchor];

  id v20 = [v17 constraintEqualToAnchor:v19];
  *(void *)(v8 + 4_Block_object_dispose(va, 8) = v20;
  id v21 = [v2 trailingAnchor];
  id result = [a1 view];
  if (result)
  {
    uint64_t v23 = result;
    id v24 = (void *)objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, v22);
    id v25 = [v23 trailingAnchor];

    id v26 = [v21 constraintEqualToAnchor:v25];
    *(void *)(v8 + 56) = v26;
    specialized Array._endMutation()(v27);
    uint64_t v28 = v8;
    sub_10001C5D0(0LL, (unint64_t *)&qword_100113120, &OBJC_CLASS___NSLayoutConstraint_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v24, "activateConstraints:", isa, swift_bridgeObjectRelease(v28).n128_f64[0]);

    return v2;
  }

uint64_t sub_10002341C(uint64_t a1, uint64_t a2)
{
  return sub_100023430(a1, a2, (uint64_t)&qword_100112970, &OBJC_CLASS___UIView_ptr);
}

uint64_t sub_100023430(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v8; uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    unint64_t v9 = a2 & 0xC000000000000001LL;
    if ((a2 & 0xC000000000000001LL) == 0)
    {
      id v10 = *(id *)(a2 + 32);
      goto LABEL_5;
    }

    while (1)
    {
      id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a2);
LABEL_5:
      id v11 = v10;
      a4 = (void *)sub_10001C5D0(0LL, (unint64_t *)a3, a4);
      a3 = static NSObject.== infix(_:_:)(v11, a1);

      if ((a3 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease(a2);
        return 1LL;
      }

      if (v8 == 1) {
        goto LABEL_18;
      }
      if (v9) {
        break;
      }
      unint64_t v9 = 5LL;
      while (1)
      {
        unint64_t v17 = v9 - 3;
        if (__OFADD__(v9 - 4, 1LL)) {
          break;
        }
        a3 = (uint64_t)*(id *)(a2 + 8 * v9);
        char v18 = static NSObject.== infix(_:_:)(a3, a1);

        if ((v18 & 1) != 0) {
          goto LABEL_6;
        }
        ++v9;
        if (v17 == v8) {
          goto LABEL_18;
        }
      }

      __break(1u);
    }

    a3 = 1LL;
    while (1)
    {
      uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(a3, a2);
      uint64_t v14 = a3 + 1;
      if (__OFADD__(a3, 1LL)) {
        break;
      }
      uint64_t v15 = v13;
      char v16 = static NSObject.== infix(_:_:)(v13, a1);
      swift_unknownObjectRelease(v15);
      if ((v16 & 1) != 0) {
        goto LABEL_6;
      }
      ++a3;
      if (v14 == v8) {
        goto LABEL_18;
      }
    }

    __break(1u);
LABEL_20:
    if (a2 < 0) {
      uint64_t v19 = a2;
    }
    else {
      uint64_t v19 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a2);
  }

id sub_100023660()
{
  uint64_t v1 = v0;
  [*(id *)&v0[OBJC_IVAR___TVFTActiveCallViewController_pipController] cancelPIPIfNeeded];
  uint64_t v2 = OBJC_IVAR___TVFTActiveCallViewController_idleTimerAssertion;
  uint64_t v3 = *(void **)&v1[OBJC_IVAR___TVFTActiveCallViewController_idleTimerAssertion];
  if (v3)
  {
    [v3 invalidate];
    uint64_t v3 = *(void **)&v1[v2];
  }

  *(void *)&v1[v2] = 0LL;
  swift_unknownObjectRelease(v3);
  uint64_t v4 = OBJC_IVAR___TVFTActiveCallViewController_screenSharingStateMonitor;
  id v5 = *(id *)&v1[OBJC_IVAR___TVFTActiveCallViewController_screenSharingStateMonitor];
  dispatch thunk of ScreenSharingStateMonitor.call.setter(0LL);

  id v6 = *(id *)&v1[v4];
  uint64_t v7 = v1;
  dispatch thunk of ScreenSharingStateMonitor.removeObserver(_:)(v7);

  sub_100025C54();
  v9.receiver = v7;
  v9.super_class = (Class)type metadata accessor for ActiveCallViewController(0LL);
  return objc_msgSendSuper2(&v9, "dealloc");
}

uint64_t sub_100023864()
{
  return type metadata accessor for ActiveCallViewController(0LL);
}

uint64_t type metadata accessor for ActiveCallViewController(uint64_t a1)
{
  uint64_t result = qword_100112F50;
  if (!qword_100112F50) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActiveCallViewController);
  }
  return result;
}

void sub_1000238A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100018A04((uint64_t *)&unk_100113110);
  __chkstk_darwin(v2);
  uint64_t v4 = &v26[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  id v5 = (objc_class *)type metadata accessor for ActiveCallViewController(0LL);
  v27.receiver = v1;
  v27.super_class = v5;
  objc_msgSendSuper2(&v27, "viewDidLoad");
  uint64_t v6 = (uint64_t)&v1[OBJC_IVAR___TVFTActiveCallViewController_joinCallContext];
  swift_beginAccess(&v1[OBJC_IVAR___TVFTActiveCallViewController_joinCallContext], v26, 0LL, 0LL);
  sub_10001C3B8(v6, (uint64_t)v4, (uint64_t *)&unk_100113110);
  uint64_t v7 = type metadata accessor for JoinCallContext(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v4, 1LL, v7) == 1)
  {
    sub_10001C608((uint64_t)v4, (uint64_t *)&unk_100113110);
LABEL_6:
    id v13 = [v1 view];
    if (!v13)
    {
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }

    id v11 = v13;
    id v12 = objc_msgSend((id)objc_opt_self(UIColor, v14), "clearColor");
LABEL_8:
    id v15 = v12;
    [v11 setBackgroundColor:v15];

    id v16 = [objc_allocWithZone(UITapGestureRecognizer) initWithTarget:v1 action:"didTapMenuButton:"];
    uint64_t v17 = sub_100018A04(&qword_1001142B0);
    uint64_t v18 = swift_allocObject(v17, 40LL, 7LL);
    *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FD0;
    id v19 = v16;
    v20.super.super.Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    *(NSNumber *)(v18 + 32) = v20;
    uint64_t v25 = v18;
    specialized Array._endMutation()(v20.super.super.isa);
    uint64_t v21 = v25;
    sub_10001C5D0(0LL, &qword_1001148C0, &OBJC_CLASS___NSNumber_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v21);
    [v19 setAllowedPressTypes:isa];

    id v23 = [v1 view];
    if (v23)
    {
      id v24 = v23;
      [v23 addGestureRecognizer:v19];

      sub_1000249DC();
      return;
    }

    __break(1u);
    goto LABEL_11;
  }

  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v7);
  sub_10001C644((uint64_t)v4, type metadata accessor for JoinCallContext);
  if (EnumCaseMultiPayload != 1) {
    goto LABEL_6;
  }
  id v9 = [v1 view];
  if (v9)
  {
    id v11 = v9;
    id v12 = objc_msgSend((id)objc_opt_self(UIColor, v10), "blackColor");
    goto LABEL_8;
  }

void sub_100023BA8(char a1)
{
  uint64_t v2 = v1;
  v47.receiver = v2;
  v47.super_class = (Class)type metadata accessor for ActiveCallViewController(0LL);
  id v4 = objc_msgSendSuper2(&v47, "viewDidAppear:", a1 & 1);
  id v5 = (void *)dispatch thunk of BannerPresentationManager.conversationControlsManager.getter(v4);

  if (v5)
  {
    char v6 = sub_1000243CC();
    id v7 = [v2 childViewControllers];
    uint64_t v8 = sub_10001C5D0(0LL, (unint64_t *)&qword_100113080, &OBJC_CLASS___UIViewController_ptr);
    uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

    id v10 = *(id *)&v2[OBJC_IVAR___TVFTActiveCallViewController_multiwayViewController];
    char v11 = sub_100023430((uint64_t)v10, v9, (uint64_t)&qword_100113080, &OBJC_CLASS___UIViewController_ptr);
    swift_bridgeObjectRelease(v9);

    if ((v11 & 1) != 0)
    {
      uint64_t v12 = 0LL;
      id v13 = 0LL;
      uint64_t v14 = 0LL;
      id v15 = 0LL;
      if ((v6 & 1) == 0) {
        goto LABEL_21;
      }
      goto LABEL_16;
    }

    id v21 = [v10 view];
    if (v21)
    {
      uint64_t v22 = v21;
      double v23 = 1.0;
      if ((v6 & 1) != 0) {
        double v23 = 0.0;
      }
      [v21 setAlpha:v23];

      uint64_t v25 = objc_opt_self(&OBJC_CLASS___UIView, v24);
      uint64_t v12 = swift_allocObject(&unk_1000F80D8, 24LL, 7LL);
      *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
      uint64_t v26 = swift_allocObject(&unk_1000F8100, 32LL, 7LL);
      *(void *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100029694;
      *(void *)(v26 + 24) = v12;
      uint64_t v45 = sub_10001C698;
      uint64_t v46 = v26;
      Swift::String v41 = _NSConcreteStackBlock;
      uint64_t v42 = 1107296256LL;
      uint64_t v43 = sub_1000983FC;
      uint64_t v44 = &unk_1000F8118;
      objc_super v27 = _Block_copy(&v41);
      uint64_t v28 = v46;
      id v15 = v2;
      swift_retain(v26);
      swift_release(v28);
      [(id)v25 performWithoutAnimation:v27];
      _Block_release(v27);
      LOBYTE(v25) = swift_isEscapingClosureAtFileLocation(v26, "", 109LL, 186LL, 44LL, 1LL);
      swift_release(v26);
      if ((v25 & 1) == 0)
      {
        if ((v6 & 1) == 0) {
          goto LABEL_20;
        }
        id v13 = sub_100029694;
LABEL_16:
        id v29 = [v2 childViewControllers];
        uint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v8);

        id v31 = *(id *)&v2[OBJC_IVAR___TVFTActiveCallViewController_audioCallViewController];
        char v32 = sub_100023430((uint64_t)v31, v30, (uint64_t)&qword_100113080, &OBJC_CLASS___UIViewController_ptr);
        swift_bridgeObjectRelease(v30);

        if ((v32 & 1) != 0)
        {
          uint64_t v14 = 0LL;
          id v15 = 0LL;
LABEL_21:
          sub_100024878();
          sub_10001C08C((uint64_t)v13, v12);
          sub_10001C08C((uint64_t)v14, (uint64_t)v15);
          return;
        }

        uint64_t v34 = objc_opt_self(&OBJC_CLASS___UIView, v33);
        id v15 = (char *)swift_allocObject(&unk_1000F8178, 24LL, 7LL);
        *((void *)v15 + 2) = v2;
        uint64_t v35 = swift_allocObject(&unk_1000F81A0, 32LL, 7LL);
        uint64_t v14 = sub_1000296AC;
        *(void *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000296AC;
        *(void *)(v35 + 24) = v15;
        uint64_t v45 = sub_1000296C4;
        uint64_t v46 = v35;
        Swift::String v41 = _NSConcreteStackBlock;
        uint64_t v42 = 1107296256LL;
        uint64_t v43 = sub_1000983FC;
        uint64_t v44 = &unk_1000F81B8;
        uint64_t v36 = _Block_copy(&v41);
        uint64_t v37 = v46;
        Swift::String v38 = v2;
        swift_retain(v35);
        swift_release(v37);
        [(id)v34 performWithoutAnimation:v36];
        _Block_release(v36);
        LOBYTE(v34) = swift_isEscapingClosureAtFileLocation(v35, "", 109LL, 199LL, 44LL, 1LL);
        swift_release(v35);
        if ((v34 & 1) == 0) {
          goto LABEL_21;
        }
        __break(1u);
LABEL_20:
        uint64_t v39 = swift_allocObject(&unk_1000F8150, 24LL, 7LL);
        *(void *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
        Swift::String v40 = v15;
        sub_1000272B8((uint64_t)sub_1000296C8, v39);
        swift_release(v39);
        uint64_t v14 = 0LL;
        id v15 = 0LL;
        id v13 = sub_100029694;
        goto LABEL_21;
      }

      __break(1u);
    }

    __break(1u);
  }

  else
  {
    if (qword_1001121E0 != -1) {
      swift_once(&qword_1001121E0, sub_100022FB8);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    uint64_t v17 = sub_10001C270(v16, (uint64_t)qword_100112EB0);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      NSNumber v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)NSNumber v20 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "No conversationControlsManager - the active call may have disconnected during presentation",  v20,  2u);
      swift_slowDealloc(v20, -1LL, -1LL);
    }
  }

id sub_1000240B8(char *a1)
{
  uint64_t v2 = type metadata accessor for IncomingHandoffContext(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = &v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = sub_100018A04((uint64_t *)&unk_100113110);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v7);
  char v11 = &v21[-v10 - 8];
  uint64_t v12 = *(void **)&a1[OBJC_IVAR___TVFTActiveCallViewController_multiwayViewController];
  objc_msgSend(a1, "bs_addChildViewController:", v12);
  id result = [a1 view];
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v14 = result;
  id result = [v12 view];
  if (!result)
  {
LABEL_9:
    __break(1u);
    return result;
  }

  id v15 = result;
  sub_100092200(result);

  char v16 = MultiwayViewController.isCaptioningEnabled.getter();
  uint64_t v17 = (uint64_t)&a1[OBJC_IVAR___TVFTActiveCallViewController_joinCallContext];
  swift_beginAccess(&a1[OBJC_IVAR___TVFTActiveCallViewController_joinCallContext], v21, 0LL, 0LL);
  sub_10001C3B8(v17, (uint64_t)v11, (uint64_t *)&unk_100113110);
  uint64_t v18 = type metadata accessor for JoinCallContext(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48LL))(v11, 1LL, v18) != 1)
  {
    sub_10001C3B8((uint64_t)v11, (uint64_t)v9, (uint64_t *)&unk_100113110);
    if (swift_getEnumCaseMultiPayload(v9, v18) == 1)
    {
      uint64_t v19 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 32))(v5, v9, v2);
      char v16 = IncomingHandoffContext.isCaptioningEnabled.getter(v19);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }

    else
    {
      sub_10001C644((uint64_t)v9, type metadata accessor for JoinCallContext);
    }
  }

  sub_10001C608((uint64_t)v11, (uint64_t *)&unk_100113110);
  MultiwayViewController.isOnScreen.setter(1LL);
  return (id)MultiwayViewController.isCaptioningEnabled.setter(v16 & 1);
}

void sub_1000242F4(char *a1)
{
  uint64_t v2 = *(void **)&a1[OBJC_IVAR___TVFTActiveCallViewController_audioCallViewController];
  objc_msgSend(a1, "bs_addChildViewController:", v2);
  id v3 = [a1 view];
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = [v2 view];
    if (v5)
    {
      id v6 = v5;
      sub_100092200(v5);

      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_1000243CC()
{
  uint64_t v1 = type metadata accessor for IncomingHandoffContext(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v58 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for CallType(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  Swift::String v57 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v50 - v8;
  uint64_t v10 = type metadata accessor for OutgoingCallContext(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  Swift::String v56 = (uint64_t *)((char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v50 - v13;
  uint64_t v15 = sub_100018A04((uint64_t *)&unk_100113110);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  NSNumber v20 = (char *)&v50 - v19;
  if (![*(id *)(v0 + OBJC_IVAR___TVFTActiveCallViewController_featureFlags) lagunaAudioCallsEnabled]) {
    goto LABEL_11;
  }
  uint64_t v54 = v9;
  uint64_t v55 = v5;
  uint64_t v52 = v2;
  uint64_t v53 = v1;
  id v22 = objc_msgSend((id)objc_opt_self(TUCallCenter, v21), "sharedInstance");
  id v23 =  [v22 activeConversationForCall:*(void *)(v0 + OBJC_IVAR___TVFTActiveCallViewController_call)];

  if (!v23) {
    goto LABEL_11;
  }
  uint64_t v51 = v4;
  id v24 = [v23 mergedRemoteMembers];
  uint64_t v25 = sub_10001C5D0(0LL, &qword_100113008, &OBJC_CLASS___TUConversationMember_ptr);
  uint64_t v26 = sub_100022510( (unint64_t *)&unk_100113010,  &qword_100113008,  &OBJC_CLASS___TUConversationMember_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
  uint64_t v27 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v24, v25, v26);

  if ((v27 & 0xC000000000000001LL) != 0)
  {
    if (v27 < 0) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = v27 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v29 = __CocoaSet.count.getter(v28);
  }

  else
  {
    uint64_t v29 = *(void *)(v27 + 16);
  }

  swift_bridgeObjectRelease(v27);
  if (v29 <= 1)
  {
    uint64_t v32 = v0 + OBJC_IVAR___TVFTActiveCallViewController_joinCallContext;
    swift_beginAccess(v32, v59, 0LL, 0LL);
    sub_10001C3B8(v32, (uint64_t)v20, (uint64_t *)&unk_100113110);
    uint64_t v33 = type metadata accessor for JoinCallContext(0LL);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48LL))(v20, 1LL, v33) != 1)
    {
      sub_10001C3B8((uint64_t)v20, (uint64_t)v18, (uint64_t *)&unk_100113110);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v33);
      if (!EnumCaseMultiPayload)
      {
        sub_100029650((uint64_t)v18, (uint64_t)v14);
        uint64_t v44 = &v14[*(int *)(v10 + 20)];
        uint64_t v46 = v54;
        uint64_t v45 = v55;
        uint64_t v47 = v51;
        (*(void (**)(char *, void, uint64_t))(v55 + 104))(v54, enum case for CallType.audio(_:), v51);
        LOBYTE(v44) = static CallType.== infix(_:_:)(v44, v46);

        (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
        uint64_t v48 = v56;
        sub_100029650((uint64_t)v14, (uint64_t)v56);
        char v30 = (v44 & 1) != 0 && *v48 < 2LL;
        sub_10001C644((uint64_t)v48, type metadata accessor for OutgoingCallContext);
        goto LABEL_21;
      }

      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v36 = v52;
        uint64_t v35 = v53;
        uint64_t v37 = v58;
        uint64_t v38 = (*(uint64_t (**)(char *, char *, uint64_t))(v52 + 32))(v58, v18, v53);
        uint64_t v39 = v54;
        IncomingHandoffContext.callType.getter(v38);
        uint64_t v40 = v55;
        Swift::String v41 = v57;
        uint64_t v42 = v51;
        (*(void (**)(char *, void, uint64_t))(v55 + 104))(v57, enum case for CallType.audio(_:), v51);
        char v30 = static CallType.== infix(_:_:)(v39, v41);

        uint64_t v43 = *(void (**)(char *, uint64_t))(v40 + 8);
        v43(v41, v42);
        v43(v39, v42);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v35);
LABEL_21:
        sub_10001C608((uint64_t)v20, (uint64_t *)&unk_100113110);
        return v30 & 1;
      }

      sub_10001C644((uint64_t)v18, type metadata accessor for JoinCallContext);
    }

    id v49 = [v23 resolvedAudioVideoMode];

    char v30 = v49 == (id)1;
    goto LABEL_21;
  }

LABEL_11:
  char v30 = 0;
  return v30 & 1;
}

id sub_100024878()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR___TVFTActiveCallViewController_pipController];
  id result = [v0 view];
  if (result)
  {
    uint64_t v3 = result;
    id v4 = [result window];

    [v1 setWindowForTransitionAnimation:v4];
    [v1 setHasParticipantVideoForActiveConversation:1];
    [v1 updateShouldPIPWhenEnteringBackground];
    id v5 = [v0 childViewControllers];
    uint64_t v6 = sub_10001C5D0(0LL, (unint64_t *)&qword_100113080, &OBJC_CLASS___UIViewController_ptr);
    uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

    id v8 = *(id *)&v0[OBJC_IVAR___TVFTActiveCallViewController_audioCallViewController];
    LOBYTE(v4) = sub_100023430((uint64_t)v8, v7, (uint64_t)&qword_100113080, &OBJC_CLASS___UIViewController_ptr);
    swift_bridgeObjectRelease(v7);

    id v9 = v8;
    [v1 setSourceProvider:v9];
    return (id)swift_unknownObjectRelease(v9);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1000249DC()
{
  uint64_t v1 = OBJC_IVAR___TVFTActiveCallViewController_idleTimerAssertion;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___TVFTActiveCallViewController_idleTimerAssertion);
  if (v2)
  {
    [v2 invalidate];
    uint64_t v2 = *(void **)(v0 + v1);
  }

  *(void *)(v0 + v1) = 0LL;
  swift_unknownObjectRelease(v2);
  id v4 = objc_msgSend((id)objc_opt_self(ITIdleTimerState, v3), "sharedInstance");
  NSString v5 = String._bridgeToObjectiveC()();
  id v21 = 0LL;
  id v6 = [v4 newAssertionToDisableIdleTimerForReason:v5 error:&v21];

  id v7 = v21;
  if (v6)
  {
    uint64_t v8 = *(void *)(v0 + v1);
    *(void *)(v0 + v1) = v6;
    id v9 = v7;
    swift_unknownObjectRelease(v8);
  }

  else
  {
    id v10 = v21;
    uint64_t v11 = _convertNSErrorToError(_:)(v7);

    swift_willThrow(v12);
    if (qword_1001121E0 != -1) {
      swift_once(&qword_1001121E0, sub_100022FB8);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10001C270(v13, (uint64_t)qword_100112EB0);
    swift_errorRetain(v11);
    uint64_t v14 = swift_errorRetain(v11);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v18 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v17 = 138412290;
      swift_errorRetain(v11);
      uint64_t v19 = (void *)_swift_stdlib_bridgeErrorToNSError(v11);
      id v21 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v17 + 4, v17 + 12);
      *uint64_t v18 = v19;
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to create idle timer assertion due to %@.", v17, 0xCu);
      uint64_t v20 = sub_100018A04((uint64_t *)&unk_100112E20);
      swift_arrayDestroy(v18, 1LL, v20);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);

      swift_errorRelease(v11);
    }

    else
    {
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      swift_errorRelease(v11);
    }
  }

uint64_t sub_100024C8C()
{
  uint64_t v91 = sub_100018A04(&qword_100113088);
  uint64_t v89 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  Swift::String v90 = (char *)&v84 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v97 = type metadata accessor for NSNotificationCenter.Publisher(0LL);
  uint64_t v95 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  unint64_t v92 = (char *)&v84 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v100 = sub_100018A04((uint64_t *)&unk_100113090);
  Swift::Int v96 = *(void (**)(char *, uint64_t))(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v98 = (char *)&v84 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100018A04((uint64_t *)&unk_100113480);
  __chkstk_darwin(v3);
  NSString v5 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100018A04((uint64_t *)&unk_1001130A0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100112380 != -1) {
    swift_once(&qword_100112380, sub_100080AF0);
  }
  v108[0] = *(id *)(qword_10011A2F0 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_activeCallSubject);
  id v10 = v108[0];
  uint64_t v11 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  __n128 v12 = swift_retain(v10);
  uint64_t v102 = v11;
  v109[0] = (id)static OS_dispatch_queue.main.getter(v12);
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL, v13);
  v106 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL);
  uint64_t v107 = v14;
  v106(v5, 1LL, 1LL, v14);
  uint64_t v15 = sub_100018A04((uint64_t *)&unk_100114910);
  uint64_t v16 = sub_100022750( (unint64_t *)&unk_1001130B0,  (uint64_t *)&unk_100114910,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  uint64_t v17 = sub_100022510( (unint64_t *)&qword_100112E50,  (unint64_t *)&qword_100112DB0,  &OBJC_CLASS___OS_dispatch_queue_ptr,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  uint64_t v18 = v15;
  uint64_t v19 = v17;
  uint64_t v103 = v17;
  Publisher.receive<A>(on:options:)(v109, v5, v18, v11, v16, v17);
  sub_10001C608((uint64_t)v5, (uint64_t *)&unk_100113480);

  swift_release(v108[0]);
  uint64_t v20 = swift_allocObject(&unk_1000F7C60, 24LL, 7LL);
  uint64_t v21 = v101;
  swift_unknownObjectWeakInit(v20 + 16, v101);
  uint64_t v22 = sub_100022750( (unint64_t *)&unk_1001130C0,  (uint64_t *)&unk_1001130A0,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v23 = Publisher<>.sink(receiveValue:)(sub_100029544, v20, v6, v22);
  swift_release(v20);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v24 = v21 + OBJC_IVAR___TVFTActiveCallViewController_observerCancellables;
  swift_beginAccess(v21 + OBJC_IVAR___TVFTActiveCallViewController_observerCancellables, v108, 33LL, 0LL);
  uint64_t v25 = sub_100018A04(&qword_100114200);
  uint64_t v105 = v25;
  uint64_t v104 = sub_100022750(&qword_1001130D0, &qword_100114200, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v24, v25, v104);
  swift_endAccess(v108);
  swift_release(v23);
  id v99 = (id)objc_opt_self(&OBJC_CLASS___NSNotificationCenter, v26);
  id v27 = [v99 defaultCenter];
  uint64_t v28 = v92;
  NSNotificationCenter.publisher(for:object:)(@"PHPIPControllerStateDidChangeNotification", 0LL);

  uint64_t v29 = v102;
  v108[0] = (id)static OS_dispatch_queue.main.getter(v30);
  v106(v5, 1LL, 1LL, v107);
  uint64_t v31 = sub_10001949C( &qword_1001130D8,  (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher,  (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  uint64_t v32 = v97;
  uint64_t v33 = v98;
  Publisher.receive<A>(on:options:)(v108, v5, v97, v29, v31, v19);
  sub_10001C608((uint64_t)v5, (uint64_t *)&unk_100113480);

  uint64_t v34 = *(void (**)(char *, uint64_t))(v95 + 8);
  v34(v28, v32);
  uint64_t v35 = swift_allocObject(&unk_1000F7C60, 24LL, 7LL);
  swift_unknownObjectWeakInit(v35 + 16, v21);
  uint64_t v36 = sub_100022750( &qword_1001130E0,  (uint64_t *)&unk_100113090,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v37 = v100;
  uint64_t v38 = Publisher<>.sink(receiveValue:)(sub_10002954C, v35, v100, v36);
  swift_release(v35);
  uint64_t v39 = (void (*)(char *, uint64_t))*((void *)v96 + 1);
  v39(v33, v37);
  swift_beginAccess(v24, v108, 33LL, 0LL);
  AnyCancellable.store<A>(in:)(v24, v105, v104);
  swift_endAccess(v108);
  swift_release(v38);
  id v40 = [v99 defaultCenter];
  Swift::String v41 = v92;
  NSNotificationCenter.publisher(for:object:)(@"PHPIPControllerDidRequestReturnToFullScreenNotification", 0LL);

  uint64_t v42 = v102;
  v108[0] = (id)static OS_dispatch_queue.main.getter(v43);
  v106(v5, 1LL, 1LL, v107);
  uint64_t v44 = v97;
  uint64_t v95 = v31;
  Publisher.receive<A>(on:options:)(v108, v5, v97, v42, v31, v103);
  id v87 = v5;
  sub_10001C608((uint64_t)v5, (uint64_t *)&unk_100113480);

  uint64_t v45 = v41;
  Swift::Int v96 = v34;
  v34(v41, v44);
  uint64_t v46 = swift_allocObject(&unk_1000F7C60, 24LL, 7LL);
  uint64_t v47 = v101;
  swift_unknownObjectWeakInit(v46 + 16, v101);
  uint64_t v48 = v100;
  uint64_t v94 = v36;
  uint64_t v49 = Publisher<>.sink(receiveValue:)(sub_100029554, v46, v100, v36);
  swift_release(v46);
  v93 = v39;
  v39(v33, v48);
  swift_beginAccess(v24, v108, 33LL, 0LL);
  uint64_t v88 = v24;
  AnyCancellable.store<A>(in:)(v24, v105, v104);
  swift_endAccess(v108);
  swift_release(v49);
  id v51 = objc_msgSend((id)objc_opt_self(UIApplication, v50), "sharedApplication");
  id v52 = [v51 connectedScenes];

  uint64_t v53 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112FE8, &OBJC_CLASS___UIScene_ptr);
  uint64_t v54 = sub_100022510( (unint64_t *)&unk_100112FF0,  (unint64_t *)&qword_100112FE8,  &OBJC_CLASS___UIScene_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
  uint64_t v55 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v52, v53, v54);

  sub_100022BFC(v55);
  Swift::String v57 = v56;
  swift_bridgeObjectRelease(v55);
  uint64_t v59 = v47;
  uint64_t v60 = v48;
  uint64_t v61 = v44;
  Swift::String v62 = v45;
  if (v57)
  {
    uint64_t v63 = objc_opt_self(&OBJC_CLASS___UIWindowScene, v58);
    uint64_t v64 = (void *)swift_dynamicCastObjCClass(v57, v63);
    if (!v64) {
  }
    }

  else
  {
    uint64_t v64 = 0LL;
  }

  uint64_t v65 = (uint64_t)v87;
  Swift::String v86 = v64;
  id v66 = [v99 defaultCenter];
  NSNotificationCenter.publisher(for:object:)(UISceneDidActivateNotification, 0LL);

  uint64_t v67 = v102;
  v108[0] = (id)static OS_dispatch_queue.main.getter(v68);
  v106((char *)v65, 1LL, 1LL, v107);
  uint64_t v69 = v98;
  Publisher.receive<A>(on:options:)(v108, v65, v61, v67, v95, v103);
  sub_10001C608(v65, (uint64_t *)&unk_100113480);

  v96(v62, v61);
  uint64_t v70 = swift_allocObject(&unk_1000F7FD0, 24LL, 7LL);
  *(void *)(v70 + swift_unknownObjectWeakDestroy(v0 + 16) = v64;
  id v87 = v64;
  uint64_t v71 = v90;
  Publisher.filter(_:)(sub_10002955C, v70, v60, v94);
  swift_release(v70);
  v93(v69, v60);
  uint64_t v72 = swift_allocObject(&unk_1000F7C60, 24LL, 7LL);
  swift_unknownObjectWeakInit(v72 + 16, v59);
  uint64_t v85 = sub_100022750( &qword_1001130E8,  &qword_100113088,  (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  uint64_t v73 = v91;
  uint64_t v74 = Publisher<>.sink(receiveValue:)(sub_100029578, v72, v91, v85);
  swift_release(v72);
  uint64_t v89 = *(void *)(v89 + 8);
  ((void (*)(char *, uint64_t))v89)(v71, v73);
  uint64_t v75 = v88;
  swift_beginAccess(v88, v108, 33LL, 0LL);
  AnyCancellable.store<A>(in:)(v75, v105, v104);
  swift_endAccess(v108);
  swift_release(v74);
  id v76 = [v99 defaultCenter];
  NSNotificationCenter.publisher(for:object:)(UISceneDidEnterBackgroundNotification, 0LL);

  v108[0] = (id)static OS_dispatch_queue.main.getter(v77);
  v106((char *)v65, 1LL, 1LL, v107);
  Publisher.receive<A>(on:options:)(v108, v65, v61, v67, v95, v103);
  sub_10001C608(v65, (uint64_t *)&unk_100113480);

  v96(v62, v61);
  uint64_t v78 = swift_allocObject(&unk_1000F7FF8, 24LL, 7LL);
  *(void *)(v78 + swift_unknownObjectWeakDestroy(v0 + 16) = v86;
  id v79 = v87;
  uint64_t v80 = v100;
  Publisher.filter(_:)(sub_1000296CC, v78, v100, v94);
  swift_release(v78);
  v93(v69, v80);
  uint64_t v81 = swift_allocObject(&unk_1000F7C60, 24LL, 7LL);
  swift_unknownObjectWeakInit(v81 + 16, v101);
  uint64_t v82 = Publisher<>.sink(receiveValue:)(sub_100029580, v81, v73, v85);
  swift_release(v81);
  ((void (*)(char *, uint64_t))v89)(v71, v73);
  swift_beginAccess(v75, v108, 33LL, 0LL);
  AnyCancellable.store<A>(in:)(v75, v105, v104);
  swift_endAccess(v108);

  return swift_release(v82);
}

uint64_t sub_1000257C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActiveCallContext(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, 1LL, v4);
  if ((_DWORD)result == 1)
  {
    uint64_t v6 = a2 + 16;
    swift_beginAccess(v6, v12, 0LL, 0LL);
    uint64_t result = swift_unknownObjectWeakLoadStrong(v6);
    if (result)
    {
      uint64_t v7 = (char *)result;
      uint64_t v8 = OBJC_IVAR___TVFTActiveCallViewController_idleTimerAssertion;
      id v9 = *(void **)(result + OBJC_IVAR___TVFTActiveCallViewController_idleTimerAssertion);
      if (v9)
      {
        [v9 invalidate];
        id v9 = *(void **)&v7[v8];
      }

      *(void *)&v7[v8] = 0LL;
      swift_unknownObjectRelease(v9);
      sub_100025C54();
      uint64_t v10 = swift_allocObject(&unk_1000F80B0, 24LL, 7LL);
      *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
      uint64_t v11 = v7;
      sub_1000272B8((uint64_t)sub_100029640, v10);

      return swift_release(v10);
    }
  }

  return result;
}

void sub_1000258A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    sub_100025D90((uint64_t)[*(id *)(Strong + OBJC_IVAR___TVFTActiveCallViewController_pipController) pipState]);
  }

uint64_t sub_100025910(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100018A04(&qword_100114970);
  __chkstk_darwin(v3);
  NSString v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a2 += 16LL;
  swift_beginAccess(a2, v14, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a2);
  if (result)
  {
    uint64_t v7 = (void *)result;
    uint64_t v8 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v5, 1LL, 1LL, v8);
    type metadata accessor for MainActor(0LL);
    id v9 = v7;
    uint64_t v10 = static MainActor.shared.getter(v9);
    uint64_t v11 = (void *)swift_allocObject(&unk_1000F8070, 40LL, 7LL);
    v11[2] = v10;
    v11[3] = &protocol witness table for MainActor;
    v11[4] = v9;
    uint64_t v12 = sub_10008033C((uint64_t)v5, (uint64_t)&unk_100113108, (uint64_t)v11);

    return swift_release(v12);
  }

  return result;
}

uint64_t sub_100025A28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v2);
  if (result)
  {
    uint64_t v4 = (void *)result;
    uint64_t v5 = swift_allocObject(&unk_1000F8048, 24LL, 7LL);
    *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
    id v6 = v4;
    sub_1000272B8((uint64_t)sub_100029598, v5);

    return swift_release(v5);
  }

  return result;
}

uint64_t sub_100025AB8(uint64_t a1, void *a2)
{
  if (v10[3])
  {
    uint64_t v3 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112FE8, &OBJC_CLASS___UIScene_ptr);
    if ((swift_dynamicCast(&v9, v10, (char *)&type metadata for Any + 8, v3, 6LL) & 1) != 0)
    {
      id v4 = v9;
      if (v9)
      {
        if (a2)
        {
          id v5 = a2;
          id v6 = v4;
          LOBYTE(a2) = static NSObject.== infix(_:_:)(v6, v5);
        }

        else
        {
        }

        return a2 & 1;
      }
    }
  }

  else
  {
    sub_10001C608((uint64_t)v10, (uint64_t *)&unk_1001130F0);
  }

  if (a2)
  {
    LOBYTE(a2) = 0;
  }

  else
  {
    id v7 = 0LL;
    LOBYTE(a2) = 1;
  }

  return a2 & 1;
}

void sub_100025BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    id v4 = (void *)Strong;
    if ([*(id *)(Strong + OBJC_IVAR___TVFTActiveCallViewController_pipController) pipState])
    {
    }

    else
    {
      uint64_t v5 = swift_allocObject(&unk_1000F8020, 24LL, 7LL);
      *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
      id v6 = v4;
      sub_1000272B8((uint64_t)sub_100029588, v5);

      swift_release(v5);
    }
  }

uint64_t sub_100025C54()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR___TVFTActiveCallViewController_observerCancellables);
  swift_beginAccess(v0 + OBJC_IVAR___TVFTActiveCallViewController_observerCancellables, v10, 1LL, 0LL);
  uint64_t v3 = *v2;
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n(*v2, 2LL);
    if (v4) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease_n(v3, 2LL);
    uint64_t v9 = *v2;
    uint64_t *v2 = (uint64_t)&_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v9);
    dispatch thunk of ScreenSharingStateMonitor.call.setter(0LL);
    return dispatch thunk of ScreenSharingStateMonitor.removeObserver(_:)(v1);
  }

  if (v3 < 0) {
    uint64_t v8 = *v2;
  }
  else {
    uint64_t v8 = v3 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain_n(*v2, 2LL);
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v8);
  uint64_t v4 = result;
  if (!result) {
    goto LABEL_13;
  }
LABEL_3:
  if (v4 >= 1)
  {
    for (uint64_t i = 0LL; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001LL) != 0)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
      }

      else
      {
        uint64_t v7 = *(void *)(v3 + 8 * i + 32);
        swift_retain(v7);
      }

      AnyCancellable.cancel()();
      swift_release(v7);
    }

    goto LABEL_13;
  }

  __break(1u);
  return result;
}

void sub_100025D90(uint64_t a1)
{
  uint64_t v2 = v1;
  MultiwayViewController.pipState.setter();
  if (a1)
  {
    if (a1 == 1)
    {
      id v4 = sub_100023034();
      [v4 setHidden:0];

      uint64_t v5 = swift_allocObject(&unk_1000F7FA8, 24LL, 7LL);
      *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
      id v6 = v2;
      sub_1000272B8((uint64_t)sub_100029534, v5);
      swift_release(v5);
    }
  }

  else
  {
    uint64_t v7 = swift_allocObject(&unk_1000F7F80, 24LL, 7LL);
    *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
    uint64_t v8 = v1;
    sub_1000272B8((uint64_t)sub_100029524, v7);
    swift_release(v7);
    if (([*(id *)&v8[OBJC_IVAR___TVFTActiveCallViewController_pipController] isPreparedToAnimateToFullScreen] & 1) == 0)
    {
      id v9 = sub_100023034();
      [v9 setHidden:1];
    }
  }

uint64_t sub_100025ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[17] = a4;
  uint64_t v5 = type metadata accessor for MainActor(0LL);
  v4[18] = static MainActor.shared.getter(v5);
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[19] = v6;
  v4[20] = v7;
  return swift_task_switch(sub_100025F3C, v6, v7);
}

uint64_t sub_100025F3C()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = *(void **)(v0[17] + OBJC_IVAR___TVFTActiveCallViewController_pipController);
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_100025FDC;
  uint64_t v3 = swift_continuation_init(v0 + 2, 0LL);
  v0[10] = _NSConcreteStackBlock;
  id v4 = v0 + 10;
  v4[1] = 0x40000000LL;
  void v4[2] = sub_100026074;
  v4[3] = &unk_1000F8088;
  v4[4] = v3;
  [v2 stopPIPAndStealViewController:v4];
  return swift_continuation_await(v1);
}

uint64_t sub_100025FDC()
{
  return swift_task_switch(sub_100026020, *(void *)(*(void *)v0 + 152LL), *(void *)(*(void *)v0 + 160LL));
}

uint64_t sub_100026020()
{
  id v1 = sub_100023034();
  [v1 setHidden:1];

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100026074(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(*(void *)(v3 + 64) + 40LL);
  *(_BYTE *)uint64_t v4 = a2;
  *(void *)(v4 + _Block_object_dispose(va, 8) = a3;
  id v5 = a3;
  return swift_continuation_resume(v3);
}

void sub_1000260A8(uint64_t a1, uint64_t a2)
{
  if ([*(id *)(v2 + OBJC_IVAR___TVFTActiveCallViewController_featureFlags) lagunaAudioCallsEnabled])
  {
    if (qword_1001121E0 != -1) {
      swift_once(&qword_1001121E0, sub_100022FB8);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = sub_10001C270(v5, (uint64_t)qword_100112EB0);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc(22LL, -1LL);
      *(_DWORD *)uint64_t v9 = 134218240;
      uint64_t v10 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v9 + 4, v9 + 12);
      *(_WORD *)(v9 + 12) = 2048;
      uint64_t v10 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v9 + 14, v9 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Conversation AVMode changed - previous: %lu, current: %lu",  (uint8_t *)v9,  0x16u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    if (a1 == 1 && a2 == 2) {
      sub_1000264C8();
    }
  }

void sub_100026214(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (![*(id *)&v2[OBJC_IVAR___TVFTActiveCallViewController_featureFlags] lagunaAudioCallsEnabled]) {
    return;
  }
  id v6 = [v2 childViewControllers];
  uint64_t v7 = sub_10001C5D0(0LL, (unint64_t *)&qword_100113080, &OBJC_CLASS___UIViewController_ptr);
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  id v9 = *(id *)&v3[OBJC_IVAR___TVFTActiveCallViewController_audioCallViewController];
  char v10 = sub_100023430((uint64_t)v9, v8, (uint64_t)&qword_100113080, &OBJC_CLASS___UIViewController_ptr);
  swift_bridgeObjectRelease(v8);

  if ((v10 & 1) == 0) {
    return;
  }
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v11 = a1;
    }
    else {
      uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v12 = __CocoaSet.count.getter(v11);
    unint64_t v13 = a2 & 0xC000000000000001LL;
    if ((a2 & 0xC000000000000001LL) != 0)
    {
LABEL_8:
      if (a2 < 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = a2 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v15 = __CocoaSet.count.getter(v14);
      if (v12 != 1) {
        return;
      }
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    unint64_t v13 = a2 & 0xC000000000000001LL;
    if ((a2 & 0xC000000000000001LL) != 0) {
      goto LABEL_8;
    }
  }

  uint64_t v15 = *(void *)(a2 + 16);
  if (v12 != 1) {
    return;
  }
LABEL_15:
  if (v15 >= 2)
  {
    if (qword_1001121E0 != -1) {
      swift_once(&qword_1001121E0, sub_100022FB8);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_10001C270(v16, (uint64_t)qword_100112EB0);
    swift_bridgeObjectRetain(a1);
    uint64_t v17 = swift_bridgeObjectRetain(a2);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc(22LL, -1LL);
      *(_DWORD *)uint64_t v20 = 134218240;
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        if (a1 < 0) {
          uint64_t v21 = a1;
        }
        else {
          uint64_t v21 = a1 & 0xFFFFFFFFFFFFFF8LL;
        }
        uint64_t v22 = __CocoaSet.count.getter(v21);
      }

      else
      {
        uint64_t v22 = *(void *)(a1 + 16);
      }

      uint64_t v25 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease(a1);
      *(_WORD *)(v20 + 12) = 2048;
      if (v13)
      {
        if (a2 < 0) {
          uint64_t v23 = a2;
        }
        else {
          uint64_t v23 = a2 & 0xFFFFFFFFFFFFFF8LL;
        }
        uint64_t v24 = __CocoaSet.count.getter(v23);
      }

      else
      {
        uint64_t v24 = *(void *)(a2 + 16);
      }

      uint64_t v25 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v20 + 14, v20 + 22);
      swift_bridgeObjectRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Transitioning to video presentation because merged remote members changed - previous: %ld, current: %ld",  (uint8_t *)v20,  0x16u);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(a1);
    }

    sub_1000264C8();
  }

void sub_1000264C8()
{
  id v1 = [*(id *)&v0[OBJC_IVAR___TVFTActiveCallViewController_multiwayViewController] view];
  if (v1)
  {
    uint64_t v2 = v1;
    [v1 setAlpha:1.0];

    uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___UIView, v3);
    uint64_t v5 = swift_allocObject(&unk_1000F7F08, 24LL, 7LL);
    *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
    uint64_t v15 = sub_100029514;
    uint64_t v16 = v5;
    uint64_t v11 = _NSConcreteStackBlock;
    uint64_t v12 = 1107296256LL;
    unint64_t v13 = sub_100027654;
    uint64_t v14 = &unk_1000F7F20;
    id v6 = _Block_copy(&v11);
    uint64_t v7 = v16;
    uint64_t v8 = v0;
    swift_release(v7);
    uint64_t v9 = swift_allocObject(&unk_1000F7C60, 24LL, 7LL);
    swift_unknownObjectWeakInit(v9 + 16, v8);
    uint64_t v15 = sub_10002951C;
    uint64_t v16 = v9;
    uint64_t v11 = _NSConcreteStackBlock;
    uint64_t v12 = 1107296256LL;
    unint64_t v13 = sub_1000B7A5C;
    uint64_t v14 = &unk_1000F7F48;
    char v10 = _Block_copy(&v11);
    swift_release(v16);
    [v4 animateWithDuration:v6 animations:v10 completion:0.25];
    _Block_release(v10);
    _Block_release(v6);
  }

  else
  {
    __break(1u);
  }

void sub_10002664C(uint64_t a1)
{
  id v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                             + OBJC_IVAR___TVFTActiveCallViewController_audioCallViewController), "view"));
  if (v1)
  {
    id v2 = v1;
    [v1 setAlpha:0.0];
  }

  else
  {
    __break(1u);
  }

char *sub_1000266A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v14, 0LL, 0LL);
  uint64_t result = (char *)swift_unknownObjectWeakLoadStrong(v2);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = OBJC_IVAR___TVFTActiveCallViewController_audioCallViewController;
    objc_msgSend( result,  "bs_removeChildViewController:",  *(void *)&result[OBJC_IVAR___TVFTActiveCallViewController_audioCallViewController]);
    id v6 = *(id *)&v4[OBJC_IVAR___TVFTActiveCallViewController_pipController];
    id v7 = [v4 childViewControllers];
    uint64_t v8 = sub_10001C5D0(0LL, (unint64_t *)&qword_100113080, &OBJC_CLASS___UIViewController_ptr);
    uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

    id v10 = *(id *)&v4[v5];
    char v11 = sub_100023430((uint64_t)v10, v9, (uint64_t)&qword_100113080, &OBJC_CLASS___UIViewController_ptr);
    swift_bridgeObjectRelease(v9);

    uint64_t v12 = OBJC_IVAR___TVFTActiveCallViewController_multiwayViewController;
    if ((v11 & 1) != 0) {
      uint64_t v12 = v5;
    }
    id v13 = *(id *)&v4[v12];
    [v6 setSourceProvider:v13];

    return (char *)swift_unknownObjectRelease(v13);
  }

  return result;
}

void sub_10002681C(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = "\b";
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[6] = "\b";
    v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[9] = "\b";
    v4[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[11] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[13] = &unk_1000C4D48;
    v4[14] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_updateClassMetadata2(a1, 256LL, 15LL, v4, a1 + 80);
  }

void sub_1000268C8(uint64_t a1)
{
  if (!qword_100112F60)
  {
    uint64_t v2 = type metadata accessor for JoinCallContext(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100112F60);
    }
  }

void sub_100026978(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    unint64_t v3 = (void *)Strong;
    id v4 = *(id *)(Strong + OBJC_IVAR___TVFTActiveCallViewController_multiwayViewController);

    MultiwayViewController.pipDidRotate()();
  }

void sub_100026B30(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    unint64_t v3 = (void *)Strong;
    id v4 = *(void **)(Strong + OBJC_IVAR___TVFTActiveCallViewController_screenSharingContainerViewController);
    if (v4)
    {
      id v5 = v4;
      [v3 presentViewController:v5 animated:1 completion:0];
    }
  }

uint64_t sub_100026D50(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v24 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  char v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  id v13 = (void *)static OS_dispatch_queue.main.getter(v12);
  uint64_t v14 = swift_allocObject(&unk_1000F7C60, 24LL, 7LL);
  swift_unknownObjectWeakInit(v14 + 16, v3);
  uint64_t v15 = swift_allocObject(&unk_1000F7E68, 40LL, 7LL);
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
  *(_BYTE *)(v15 + 24) = a2;
  *(void *)(v15 + 32) = a1;
  aBlock[4] = sub_1000294F4;
  uint64_t v26 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  void aBlock[3] = &unk_1000F7E80;
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v17 = v26;
  swift_unknownObjectRetain(a1);
  uint64_t v18 = swift_release(v17);
  static DispatchQoS.unspecified.getter(v18);
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_10001949C( (unint64_t *)&qword_100112930,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = sub_100018A04((uint64_t *)&unk_100112FD0);
  uint64_t v21 = sub_100022750( (unint64_t *)&qword_100112940,  (uint64_t *)&unk_100112FD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v6, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v8, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v23);
}

void sub_100026F9C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v18, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    uint64_t v8 = (char *)Strong;
    if ((a2 & 1) != 0)
    {
      uint64_t v9 = *(void **)(Strong + OBJC_IVAR___TVFTActiveCallViewController_call);
      id v10 = objc_allocWithZone((Class)type metadata accessor for ScreenSharingContainerViewController(0LL, v7));
      id v11 = v9;
      swift_unknownObjectRetain(a3);
      __n128 v12 = sub_1000388AC(v11, a3);
      [v8 presentViewController:v12 animated:1 completion:0];
      id v13 = *(void **)&v8[OBJC_IVAR___TVFTActiveCallViewController_screenSharingContainerViewController];
      *(void *)&v8[OBJC_IVAR___TVFTActiveCallViewController_screenSharingContainerViewController] = v12;
LABEL_12:

      return;
    }

    uint64_t v14 = OBJC_IVAR___TVFTActiveCallViewController_screenSharingContainerViewController;
    uint64_t v15 = *(void **)(Strong + OBJC_IVAR___TVFTActiveCallViewController_screenSharingContainerViewController);
    if (v15)
    {
      id v16 = [v15 presentingViewController];
      if (v16)
      {
        id v13 = v16;
LABEL_10:
        [v16 dismissViewControllerAnimated:1 completion:0];
        goto LABEL_11;
      }

      id v13 = *(void **)&v8[v14];
      if (v13)
      {
        id v16 = v13;
        goto LABEL_10;
      }
    }

    else
    {
      id v13 = 0LL;
    }

void sub_10002713C()
{
  uint64_t v1 = swift_allocObject(&unk_1000F7C38, 24LL, 7LL);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  id v2 = v0;
  sub_1000272B8((uint64_t)sub_100027B0C, v1);
  swift_release(v1);
  id v4 = objc_msgSend((id)objc_opt_self(TUCallCenter, v3), "sharedInstance");
  id v5 = [v4 videoDeviceController];

  [v5 stopPreview];
}

id sub_1000271EC(uint64_t a1)
{
  return [v1 viewControllerDidRequestAddParticipants:a1];
}

void sub_10002724C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    id v5 = (void *)Strong;
    [*(id *)(Strong + OBJC_IVAR___TVFTActiveCallViewController_observers) addObject:a2];
  }

uint64_t sub_1000272B8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v24 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  id v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v11 = *(void **)(v2 + OBJC_IVAR___TVFTActiveCallViewController_observerQueue);
  uint64_t v12 = swift_allocObject(&unk_1000F7C60, 24LL, 7LL);
  swift_unknownObjectWeakInit(v12 + 16, v2);
  id v13 = (void *)swift_allocObject(&unk_1000F7C88, 40LL, 7LL);
  v13[2] = v12;
  void v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_100027B4C;
  id v27 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  void aBlock[3] = &unk_1000F7CA0;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v11;
  swift_retain(v12);
  swift_retain(a2);
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_10001949C( (unint64_t *)&qword_100112930,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100018A04((uint64_t *)&unk_100112FD0);
  uint64_t v19 = sub_100022750( (unint64_t *)&qword_100112940,  (uint64_t *)&unk_100112FD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v5, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v23);
  uint64_t v20 = v27;
  swift_release(v12);
  return swift_release(v20);
}

void sub_100027500(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    id v6 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(Strong
                                                               + OBJC_IVAR___TVFTActiveCallViewController_observers), "allObjects"));
    uint64_t v7 = sub_100018A04(&qword_100112FE0);
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

    if ((unint64_t)v8 >> 62)
    {
      if (v8 < 0) {
        uint64_t v12 = v8;
      }
      else {
        uint64_t v12 = v8 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v8);
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v12);
      swift_bridgeObjectRelease(v8);
      if (v9) {
        goto LABEL_4;
      }
    }

    else
    {
      uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v9)
      {
LABEL_4:
        if (v9 < 1)
        {
          __break(1u);
          return;
        }

        for (uint64_t i = 0LL; i != v9; ++i)
        {
          if ((v8 & 0xC000000000000001LL) != 0)
          {
            uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v8);
          }

          else
          {
            uint64_t v11 = *(void *)(v8 + 8 * i + 32);
            swift_unknownObjectRetain(v11);
          }

          a2(v11);
          swift_unknownObjectRelease(v11);
        }
      }
    }

    swift_bridgeObjectRelease(v8);
  }

uint64_t sub_100027654(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

void sub_100027680(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v5 = *(void **)(a1 + OBJC_IVAR___TVFTActiveCallViewController_pipController);
  v7[4] = a2;
  v7[5] = 0LL;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256LL;
  v7[2] = sub_100027654;
  v7[3] = a3;
  id v6 = _Block_copy(v7);
  objc_msgSend(v5, *a4, v6);
  _Block_release(v6);
}

uint64_t sub_100027704(uint64_t a1, uint64_t a2)
{
  id v2 = objc_msgSend((id)objc_opt_self(UIApplication, a2), "sharedApplication");
  id v3 = [v2 connectedScenes];

  uint64_t v4 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112FE8, &OBJC_CLASS___UIScene_ptr);
  uint64_t v5 = sub_100022510( (unint64_t *)&unk_100112FF0,  (unint64_t *)&qword_100112FE8,  &OBJC_CLASS___UIScene_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
  uint64_t v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v3, v4, v5);

  sub_100022BFC(v6);
  uint64_t v8 = v7;
  *(void *)&double v9 = swift_bridgeObjectRelease(v6).n128_u64[0];
  if (!v8) {
    return -1LL;
  }
  id v10 = objc_msgSend(v8, "activationState", v9);

  return (uint64_t)v10;
}

void sub_100027804(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    sub_1000260A8( (uint64_t)[a2 resolvedAudioVideoMode],  (uint64_t)objc_msgSend(a3, "resolvedAudioVideoMode"));
  }

double sub_100027924(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v15, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    uint64_t v8 = (void *)Strong;
    id v9 = [a2 mergedRemoteMembers];
    uint64_t v10 = sub_10001C5D0(0LL, &qword_100113008, &OBJC_CLASS___TUConversationMember_ptr);
    uint64_t v11 = sub_100022510( (unint64_t *)&unk_100113010,  &qword_100113008,  &OBJC_CLASS___TUConversationMember_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v12 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v9, v10, v11);

    id v13 = [a3 mergedRemoteMembers];
    uint64_t v14 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v13, v10, v11);

    sub_100026214(v12, v14);
    swift_bridgeObjectRelease(v12);
    *(void *)&double result = swift_bridgeObjectRelease(v14).n128_u64[0];
  }

  return result;
}

uint64_t sub_100027AE8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id sub_100027B0C(void *a1)
{
  return [a1 activeCallViewControllerDidStartPresentation:*(void *)(v1 + 16)];
}

uint64_t sub_100027B1C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100027B40()
{
  return sub_1000294BC((void (*)(void))&_swift_release);
}

void sub_100027B4C()
{
}

uint64_t sub_100027B58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100027B68(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_100027B70()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v25 = v2;
  __chkstk_darwin(v2);
  uint64_t v31 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v5);
  __n128 v30 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v7);
  id v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = &v0[OBJC_IVAR___TVFTActiveCallViewController_joinCallContext];
  uint64_t v11 = type metadata accessor for JoinCallContext(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  *(void *)&v0[OBJC_IVAR___TVFTActiveCallViewController_screenSharingContainerViewController] = 0LL;
  *(void *)&v0[OBJC_IVAR___TVFTActiveCallViewController____lazy_storage___pipShroudView] = 0LL;
  *(void *)&v0[OBJC_IVAR___TVFTActiveCallViewController_idleTimerAssertion] = 0LL;
  uint64_t v29 = OBJC_IVAR___TVFTActiveCallViewController_observerQueue;
  uint64_t v12 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v12);
  uint64_t v32 = _swiftEmptyArrayStorage;
  uint64_t v13 = sub_10001949C( (unint64_t *)&qword_100113130,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v28 = v13;
  uint64_t v14 = sub_100018A04((uint64_t *)&unk_100112DC0);
  uint64_t v27 = v14;
  uint64_t v26 = sub_100022750( (unint64_t *)&qword_100113140,  (uint64_t *)&unk_100112DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  id v15 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v14, v26, v5, v13);
  uint64_t v16 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  uint64_t v18 = v31;
  v17(v31, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  uint64_t v19 = v18;
  uint64_t v20 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000039LL,  0x80000001000D9060LL,  v9,  v15,  v18,  0LL);
  *(void *)&v0[v29] = v20;
  uint64_t v21 = OBJC_IVAR___TVFTActiveCallViewController_observers;
  id v23 = objc_msgSend((id)objc_opt_self(NSHashTable, v22), "weakObjectsHashTable");
  *(void *)&v1[v21] = v23;
  *(void *)&v1[OBJC_IVAR___TVFTActiveCallViewController_observerCancellables] = _swiftEmptyArrayStorage;
  uint64_t v24 = OBJC_IVAR___TVFTActiveCallViewController_conversationManagerQueue;
  static DispatchQoS.unspecified.getter(v23);
  uint64_t v32 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v27, v26, v5, v28);
  v17(v19, v16, v25);
  *(void *)&v1[v24] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000044LL,  0x80000001000D90A0LL,  v9,  v15,  v19,  0LL);

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/ActiveCallViewController.swift",  39LL,  2LL,  141LL,  0);
  __break(1u);
}

void sub_100027EC8()
{
  uint64_t v1 = v0;
  if (qword_100112380 != -1) {
    swift_once(&qword_100112380, sub_100080AF0);
  }
  uint64_t v2 = (void *)qword_10011A2F0;
  uint64_t v16 = type metadata accessor for ATVCallManager(0LL);
  uint64_t v17 = &off_1000FAC48;
  v15[0] = v2;
  uint64_t v3 = objc_allocWithZone((Class)type metadata accessor for AddParticipantContainerViewController(0LL));
  uint64_t v4 = sub_100021734((uint64_t)v15, v16);
  __chkstk_darwin(v4);
  uint64_t v6 = (void *)((char *)&v15[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v7 + 16))(v6);
  uint64_t v8 = *v6;
  id v9 = v2;
  uint64_t v10 = sub_1000392C4(v8, v3);
  sub_10001BFEC(v15);

  uint64_t v12 = dispatch thunk of BannerPresentationManager.conversationControlsManager.getter(v11);
  uint64_t v13 = *(void **)&v10[OBJC_IVAR____TtC8FaceTime37AddParticipantContainerViewController_conversationControlsManager];
  *(void *)&v10[OBJC_IVAR____TtC8FaceTime37AddParticipantContainerViewController_conversationControlsManager] = v12;

  [v10 setModalPresentationStyle:6];
  [v1 presentViewController:v10 animated:1 completion:0];
}

void sub_100028034(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR___TVFTActiveCallViewController_pipController);
  if ([v3 pipState] != (id)2) {
    return;
  }
  id v4 = [v3 pipContentViewController];
  if (!v4)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v5 = v4;
  id v6 = [v4 view];

  if (!v6)
  {
LABEL_13:
    __break(1u);
    return;
  }

  [v6 frame];
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  double v14 = v13;

  v35.origin.x = v8;
  v35.origin.y = v10;
  v35.size.width = v12;
  v35.size.height = v14;
  double Width = CGRectGetWidth(v35);
  v36.origin.x = v8;
  v36.origin.y = v10;
  v36.size.width = v12;
  v36.size.height = v14;
  if (Width == CGRectGetHeight(v36))
  {
    if (qword_1001121E0 != -1) {
      swift_once(&qword_1001121E0, sub_100022FB8);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    uint64_t v17 = sub_10001C270(v16, (uint64_t)qword_100112EB0);
    oslog = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v18))
    {
      uint64_t v19 = swift_slowAlloc(22LL, -1LL);
      uint64_t v20 = swift_slowAlloc(64LL, -1LL);
      uint64_t v32 = a1;
      aBlock[0] = v20;
      *(_DWORD *)uint64_t v19 = 136315394;
      type metadata accessor for DeviceOrientation(0LL);
      uint64_t v22 = String.init<A>(describing:)(&v32, v21);
      unint64_t v24 = v23;
      uint64_t v32 = sub_1000850E4(v22, v23, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, aBlock, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v24);
      *(_WORD *)(v19 + 12) = 2080;
      uint64_t v25 = CGRect.description.getter(v8, v10, v12, v14);
      unint64_t v27 = v26;
      uint64_t v32 = sub_1000850E4(v25, v26, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, aBlock, v19 + 14, v19 + 22);
      swift_bridgeObjectRelease(v27);
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v18,  "Skipping PiP orientation update to %s since the PIP is square %s",  (uint8_t *)v19,  0x16u);
      swift_arrayDestroy(v20, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
    }
  }

  else
  {
    uint64_t v28 = CNKDeviceOrientation.uiDeviceOrientation.getter(a1);
    uint64_t v29 = swift_allocObject(&unk_1000F7C60, 24LL, 7LL);
    swift_unknownObjectWeakInit(v29 + 16, v1);
    aBlock[4] = (uint64_t)sub_10002950C;
    uint64_t v34 = v29;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_100027654;
    void aBlock[3] = (uint64_t)&unk_1000F7ED0;
    __n128 v30 = _Block_copy(aBlock);
    swift_release(v34);
    [v3 rotatePIPDeviceOrientationTo:v28 withCompletion:v30];
    _Block_release(v30);
  }

uint64_t sub_100028398()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR___TVFTActiveCallViewController_pipController];
  id v2 = [v0 childViewControllers];
  uint64_t v3 = sub_10001C5D0(0LL, (unint64_t *)&qword_100113080, &OBJC_CLASS___UIViewController_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  id v5 = *(id *)&v0[OBJC_IVAR___TVFTActiveCallViewController_audioCallViewController];
  char v6 = sub_100023430((uint64_t)v5, v4, (uint64_t)&qword_100113080, &OBJC_CLASS___UIViewController_ptr);
  swift_bridgeObjectRelease(v4);

  if ((v6 & 1) == 0) {
    id v5 = *(id *)&v0[OBJC_IVAR___TVFTActiveCallViewController_multiwayViewController];
  }
  id v7 = v5;
  [v1 setSourceProvider:v7];
  return swift_unknownObjectRelease(v7);
}

uint64_t sub_100028480()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v19 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  double v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  double v10 = (void *)static OS_dispatch_queue.main.getter(v9);
  uint64_t v11 = swift_allocObject(&unk_1000F7C60, 24LL, 7LL);
  swift_unknownObjectWeakInit(v11 + 16, v1);
  aBlock[4] = sub_100029504;
  uint64_t v21 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  void aBlock[3] = &unk_1000F7EA8;
  double v12 = _Block_copy(aBlock);
  uint64_t v13 = swift_release(v21);
  static DispatchQoS.unspecified.getter(v13);
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_10001949C( (unint64_t *)&qword_100112930,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100018A04((uint64_t *)&unk_100112FD0);
  uint64_t v16 = sub_100022750( (unint64_t *)&qword_100112940,  (uint64_t *)&unk_100112FD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v15, v16, v2, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v4, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_100028698(char a1)
{
  uint64_t v2 = v1;
  if (qword_100112380 != -1) {
    swift_once(&qword_100112380, sub_100080AF0);
  }
  id v4 = (id)qword_10011A2F0;
  sub_100083F7C(a1 & 1);

  if ((a1 & 1) != 0)
  {
    id v5 = [v2 childViewControllers];
    uint64_t v6 = sub_10001C5D0(0LL, (unint64_t *)&qword_100113080, &OBJC_CLASS___UIViewController_ptr);
    uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

    id v8 = *(id *)&v2[OBJC_IVAR___TVFTActiveCallViewController_audioCallViewController];
    char v9 = sub_100023430((uint64_t)v8, v7, (uint64_t)&qword_100113080, &OBJC_CLASS___UIViewController_ptr);
    swift_bridgeObjectRelease(v7);

    if ((v9 & 1) != 0) {
      sub_1000264C8();
    }
  }

id sub_1000287AC()
{
  id v1 = [v0 childViewControllers];
  uint64_t v2 = sub_10001C5D0(0LL, (unint64_t *)&qword_100113080, &OBJC_CLASS___UIViewController_ptr);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  id v4 = *(id *)&v0[OBJC_IVAR___TVFTActiveCallViewController_audioCallViewController];
  char v5 = sub_100023430((uint64_t)v4, v3, (uint64_t)&qword_100113080, &OBJC_CLASS___UIViewController_ptr);
  swift_bridgeObjectRelease(v3);

  if ((v5 & 1) == 0) {
    return *(id *)&v0[OBJC_IVAR___TVFTActiveCallViewController_multiwayViewController];
  }
  return v4;
}

void sub_10002886C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id v4 = objc_msgSend((id)objc_opt_self(TUCallCenter, a2), "sharedInstance");
  NSString v5 = [*(id *)&v3[OBJC_IVAR___TVFTActiveCallViewController_call] callUUID];
  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v8 = v7;
    NSString v5 = String._bridgeToObjectiveC()();
    *(void *)&double v6 = swift_bridgeObjectRelease(v8).n128_u64[0];
  }

  id v9 = objc_msgSend(v4, "callWithCallUUID:", v5, v6);

  if (v9)
  {
    if ([v9 isActive])
    {
      if (qword_1001121E0 != -1) {
        swift_once(&qword_1001121E0, sub_100022FB8);
      }
      uint64_t v10 = type metadata accessor for Logger(0LL);
      sub_10001C270(v10, (uint64_t)qword_100112EB0);
      id v11 = v9;
      double v12 = (os_log_s *)Logger.logObject.getter(v11);
      os_log_type_t v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        unint64_t v26 = (void *)swift_slowAlloc(8LL, -1LL);
        id v27 = v11;
        *(_DWORD *)uint64_t v14 = 138412290;
        id v15 = v11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v14 + 4, v14 + 12);
        *unint64_t v26 = v9;

        _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "Dismissing scene and expecting to start PiP due to ongoing call %@",  v14,  0xCu);
        uint64_t v16 = sub_100018A04((uint64_t *)&unk_100112E20);
        swift_arrayDestroy(v26, 1LL, v16);
        swift_slowDealloc(v26, -1LL, -1LL);
        swift_slowDealloc(v14, -1LL, -1LL);
      }

      else
      {
      }

      id v22 = objc_msgSend(v3, "view", v26, v27);
      if (v22)
      {
        unint64_t v23 = v22;
        id v24 = [v22 window];

        if (v24)
        {
          id v25 = [v24 windowScene];

          if (v25)
          {
            UIScene.dismissScene()();
          }
        }
      }

      else
      {
        __break(1u);
      }

      return;
    }
  }

  if (qword_1001121E0 != -1) {
    swift_once(&qword_1001121E0, sub_100022FB8);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = sub_10001C270(v17, (uint64_t)qword_100112EB0);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Dismissing ActiveCallViewController because the call is no longer active",  v21,  2u);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  [v3 dismissViewControllerAnimated:1 completion:0];
}

uint64_t sub_100028BFC()
{
  return sub_100028C34((uint64_t)&unk_1000F7D50, (uint64_t)sub_100028E6C, (uint64_t)&unk_1000F7D68);
}

uint64_t sub_100028C18()
{
  return sub_100028C34((uint64_t)&unk_1000F7CD8, (uint64_t)sub_100028E3C, (uint64_t)&unk_1000F7CF0);
}

uint64_t sub_100028C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v26 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  os_log_type_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  id v15 = (void *)static OS_dispatch_queue.main.getter(v14);
  uint64_t v16 = swift_allocObject(a1, 24LL, 7LL);
  *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  aBlock[4] = a2;
  uint64_t v28 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  void aBlock[3] = a3;
  uint64_t v17 = _Block_copy(aBlock);
  uint64_t v18 = v28;
  id v19 = v7;
  uint64_t v20 = swift_release(v18);
  static DispatchQoS.unspecified.getter(v20);
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v21 = sub_10001949C( (unint64_t *)&qword_100112930,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v22 = sub_100018A04((uint64_t *)&unk_100112FD0);
  uint64_t v23 = sub_100022750( (unint64_t *)&qword_100112940,  (uint64_t *)&unk_100112FD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v22, v23, v8, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v25);
}

void sub_100028E3C()
{
}

void sub_100028E6C()
{
}

uint64_t sub_100028E9C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v62 = a4;
  uint64_t v63 = a5;
  uint64_t v61 = a3;
  uint64_t v64 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v67 = *(void *)(v9 - 8);
  uint64_t v68 = v9;
  __chkstk_darwin(v9);
  id v66 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v59 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100018A04(&qword_100113000);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100018A04(&qword_100112D10);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v72 = (uint64_t)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v59 - v21;
  __chkstk_darwin(v20);
  id v24 = (char *)&v59 - v23;
  uint64_t v65 = a1;
  id v25 = [a1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

  uint64_t v73 = v12;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  uint64_t v27 = 1LL;
  v26(v24, 0LL, 1LL, v11);
  id v29 = objc_msgSend((id)objc_opt_self(TUCallCenter, v28), "sharedInstance");
  uint64_t v60 = v5;
  id v30 =  [v29 activeConversationForCall:*(void *)(v5 + OBJC_IVAR___TVFTActiveCallViewController_call)];

  if (v30)
  {
    id v31 = [v30 UUID];

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);
    uint64_t v27 = 0LL;
  }

  v26(v22, v27, 1LL, v11);
  uint64_t v32 = (uint64_t)&v16[*(int *)(v14 + 48)];
  sub_10001C3B8((uint64_t)v24, (uint64_t)v16, &qword_100112D10);
  sub_10001C3B8((uint64_t)v22, v32, &qword_100112D10);
  uint64_t v33 = v73;
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
  if (v34((uint64_t)v16, 1LL, v11) != 1)
  {
    uint64_t v35 = v72;
    sub_10001C3B8((uint64_t)v16, v72, &qword_100112D10);
    if (v34(v32, 1LL, v11) != 1)
    {
      uint64_t v37 = v59;
      (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v59, v32, v11);
      uint64_t v38 = sub_10001949C( (unint64_t *)&qword_100112E70,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v39 = dispatch thunk of static Equatable.== infix(_:_:)(v35, v37, v11, v38);
      id v40 = *(void (**)(char *, uint64_t))(v33 + 8);
      v40(v37, v11);
      sub_10001C608((uint64_t)v22, &qword_100112D10);
      sub_10001C608((uint64_t)v24, &qword_100112D10);
      v40((char *)v35, v11);
      uint64_t result = sub_10001C608((uint64_t)v16, &qword_100112D10);
      if ((v39 & 1) == 0) {
        return result;
      }
      goto LABEL_10;
    }

    sub_10001C608((uint64_t)v22, &qword_100112D10);
    sub_10001C608((uint64_t)v24, &qword_100112D10);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v11);
    return sub_10001C608((uint64_t)v16, &qword_100113000);
  }

  sub_10001C608((uint64_t)v22, &qword_100112D10);
  sub_10001C608((uint64_t)v24, &qword_100112D10);
  if (v34(v32, 1LL, v11) != 1) {
    return sub_10001C608((uint64_t)v16, &qword_100113000);
  }
  sub_10001C608((uint64_t)v16, &qword_100112D10);
LABEL_10:
  sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v42 = (void *)static OS_dispatch_queue.main.getter(v41);
  uint64_t v43 = swift_allocObject(&unk_1000F7C60, 24LL, 7LL);
  swift_unknownObjectWeakInit(v43 + 16, v60);
  uint64_t v44 = (void *)swift_allocObject(v61, 40LL, 7LL);
  uint64_t v46 = v64;
  uint64_t v45 = v65;
  v44[2] = v43;
  v44[3] = v46;
  v44[4] = v45;
  aBlock[4] = v62;
  uint64_t v75 = v44;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  void aBlock[3] = v63;
  uint64_t v47 = _Block_copy(aBlock);
  uint64_t v48 = v75;
  id v49 = v46;
  id v50 = v45;
  uint64_t v51 = swift_release(v48);
  id v52 = v66;
  static DispatchQoS.unspecified.getter(v51);
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v53 = sub_10001949C( (unint64_t *)&qword_100112930,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v54 = sub_100018A04((uint64_t *)&unk_100112FD0);
  uint64_t v55 = sub_100022750( (unint64_t *)&qword_100112940,  (uint64_t *)&unk_100112FD0,  (uint64_t)&protocol conformance descriptor for [A]);
  Swift::String v56 = v69;
  uint64_t v57 = v54;
  uint64_t v58 = v71;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v57, v55, v71, v53);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v52, v56, v47);
  _Block_release(v47);

  (*(void (**)(char *, uint64_t))(v70 + 8))(v56, v58);
  return (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v52, v68);
}

double sub_100029460()
{
  return sub_100027924(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100029470()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1000294A4()
{
}

uint64_t sub_1000294B0()
{
  return sub_1000294BC((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_1000294BC(void (*a1)(void))
{
  return swift_deallocObject(v1, 40LL, 7LL);
}

void sub_1000294F4()
{
}

void sub_100029504()
{
}

void sub_10002950C()
{
}

void sub_100029514()
{
}

char *sub_10002951C(uint64_t a1)
{
  return sub_1000266A4(a1, v1);
}

id sub_100029524(void *a1)
{
  return [a1 activeCallViewControllerDidEndPictureInPicture:*(void *)(v1 + 16)];
}

id sub_100029534(void *a1)
{
  return [a1 activeCallViewControllerDidStartPictureInPicture:*(void *)(v1 + 16)];
}

uint64_t sub_100029544(uint64_t a1)
{
  return sub_1000257C4(a1, v1);
}

void sub_10002954C(uint64_t a1)
{
}

uint64_t sub_100029554(uint64_t a1)
{
  return sub_100025910(a1, v1);
}

uint64_t sub_10002955C(uint64_t a1)
{
  return sub_100025AB8(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t sub_100029578(uint64_t a1)
{
  return sub_100025A28(a1, v1);
}

void sub_100029580(uint64_t a1)
{
}

id sub_100029588(void *a1)
{
  return [a1 activeCallViewControllerDidBackground:*(void *)(v1 + 16)];
}

id sub_100029598(void *a1)
{
  return [a1 activeCallViewControllerDidForeground:*(void *)(v1 + 16)];
}

uint64_t sub_1000295A8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000295D4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_100113104);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10001C158;
  return sub_100025ED0(a1, v4, v5, v6);
}

id sub_100029640(void *a1)
{
  return [a1 activeCallViewControllerDidEndPresentation:*(void *)(v1 + 16)];
}

uint64_t sub_100029650(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OutgoingCallContext(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

id sub_100029694()
{
  return sub_1000240B8(*(char **)(v0 + 16));
}

uint64_t sub_10002969C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000296AC()
{
}

uint64_t sub_1000296B4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t static GradientView.layerClass.getter()
{
  return sub_10001C5D0(0LL, &qword_100113148, &OBJC_CLASS___CAGradientLayer_ptr);
}

uint64_t GradientView.gradientLayer.getter()
{
  id v1 = [v0 layer];
  uint64_t v3 = objc_opt_self(&OBJC_CLASS___CAGradientLayer, v2);
  return swift_dynamicCastObjCClassUnconditional(v1, v3, 0LL, 0LL, 0LL);
}

void sub_100029810()
{
  id v1 = [v0 layer];
  uint64_t v3 = objc_opt_self(&OBJC_CLASS___CAGradientLayer, v2);
  uint64_t v4 = (void *)swift_dynamicCastObjCClassUnconditional(v1, v3, 0LL, 0LL, 0LL);
  uint64_t v5 = (uint64_t *)&v0[OBJC_IVAR____TtC8FaceTime12GradientView_colors];
  swift_beginAccess(v5, v21, 0LL, 0LL);
  uint64_t v6 = *v5;
  if (!((unint64_t)*v5 >> 62))
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(*v5);
    if (v7) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease(v6);
    uint64_t v9 = _swiftEmptyArrayStorage;
LABEL_17:
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v9);
    [v4 setColors:isa];

    return;
  }

  if (v6 < 0) {
    uint64_t v16 = *v5;
  }
  else {
    uint64_t v16 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v6);
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
  if (!v7) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t v20 = _swiftEmptyArrayStorage;
  sub_1000ABC04(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000LL) == 0)
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = v20;
    do
    {
      if ((v6 & 0xC000000000000001LL) != 0) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
      }
      else {
        id v10 = *(id *)(v6 + 8 * v8 + 32);
      }
      uint64_t v11 = v10;
      id v12 = objc_msgSend(v10, "CGColor", (void)v18);
      type metadata accessor for CGColor(0LL);
      uint64_t v19 = v13;

      *(void *)&__int128 v18 = v12;
      uint64_t v20 = v9;
      unint64_t v15 = v9[2];
      unint64_t v14 = v9[3];
      if (v15 >= v14 >> 1)
      {
        sub_1000ABC04(v14 > 1, v15 + 1, 1);
        uint64_t v9 = v20;
      }

      ++v8;
      v9[2] = v15 + 1;
      sub_10001C1DC(&v18, &v9[4 * v15 + 4]);
    }

    while (v7 != v8);
    swift_bridgeObjectRelease(v6);
    goto LABEL_17;
  }

  __break(1u);
}

uint64_t GradientView.colors.getter()
{
  return sub_100029ED0(&OBJC_IVAR____TtC8FaceTime12GradientView_colors);
}

uint64_t GradientView.colors.setter(uint64_t a1)
{
  return sub_100029F28( a1,  &OBJC_IVAR____TtC8FaceTime12GradientView_colors,  (uint64_t (*)(uint64_t))sub_100029810);
}

uint64_t (*GradientView.colors.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8FaceTime12GradientView_colors, a1, 33LL, 0LL);
  return sub_100029A94;
}

uint64_t sub_100029A94(uint64_t a1, char a2)
{
  return sub_100029FD8(a1, a2, (uint64_t (*)(uint64_t))sub_100029810);
}

double GradientView.startPoint.getter()
{
  return sub_100029B30(&OBJC_IVAR____TtC8FaceTime12GradientView_startPoint);
}

void GradientView.startPoint.setter(double a1, double a2)
{
}

void (*GradientView.startPoint.modify(void *a1))(void *a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8FaceTime12GradientView_startPoint;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  return sub_100029B18;
}

void sub_100029B18(void *a1, char a2)
{
}

double GradientView.endPoint.getter()
{
  return sub_100029B30(&OBJC_IVAR____TtC8FaceTime12GradientView_endPoint);
}

double sub_100029B30(void *a1)
{
  uint64_t v2 = v1 + *a1;
  swift_beginAccess(v2, v4, 0LL, 0LL);
  return *(double *)v2;
}

void GradientView.endPoint.setter(double a1, double a2)
{
}

void sub_100029B84(void *a1, SEL *a2, double a3, double a4)
{
  uint64_t v8 = (double *)&v4[*a1];
  swift_beginAccess(v8, v12, 1LL, 0LL);
  *uint64_t v8 = a3;
  v8[1] = a4;
  id v9 = [v4 layer];
  uint64_t v11 = objc_opt_self(&OBJC_CLASS___CAGradientLayer, v10);
  objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(v9, v11, 0, 0, 0), *a2, *v8, v8[1]);
}

void (*GradientView.endPoint.modify(void *a1))(void *a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8FaceTime12GradientView_endPoint;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  return sub_100029C88;
}

void sub_100029C88(void *a1, char a2)
{
}

void sub_100029C94(void *a1, char a2, SEL *a3)
{
  uint64_t v5 = (void *)*a1;
  swift_endAccess(*a1);
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = (char *)v5[3];
    uint64_t v7 = (double *)&v6[v5[4]];
    id v8 = [v6 layer];
    uint64_t v10 = objc_opt_self(&OBJC_CLASS___CAGradientLayer, v9);
    objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(v8, v10, 0, 0, 0), *a3, *v7, v7[1]);
  }

  free(v5);
}

void sub_100029D24()
{
  id v1 = [v0 layer];
  uint64_t v3 = objc_opt_self(&OBJC_CLASS___CAGradientLayer, v2);
  uint64_t v4 = (void *)swift_dynamicCastObjCClassUnconditional(v1, v3, 0LL, 0LL, 0LL);
  uint64_t v5 = &v0[OBJC_IVAR____TtC8FaceTime12GradientView_locations];
  swift_beginAccess(v5, v14, 0LL, 0LL);
  uint64_t v6 = *(void *)v5;
  uint64_t v7 = *(void *)(*(void *)v5 + 16LL);
  if (v7)
  {
    swift_bridgeObjectRetain(v6);
    specialized ContiguousArray.reserveCapacity(_:)(v7);
    uint64_t v8 = 0LL;
    do
    {
      uint64_t v9 = v8 + 1;
      id v10 = [objc_allocWithZone(NSNumber) initWithDouble:*(double *)(v6 + 8 * v8 + 32)];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v11 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      uint64_t v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
      specialized ContiguousArray._endMutation()(v12);
      uint64_t v8 = v9;
    }

    while (v7 != v9);
    swift_bridgeObjectRelease(v6);
  }

  sub_10001C5D0(0LL, &qword_1001148C0, &OBJC_CLASS___NSNumber_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  [v4 setLocations:isa];
}

uint64_t GradientView.locations.getter()
{
  return sub_100029ED0(&OBJC_IVAR____TtC8FaceTime12GradientView_locations);
}

uint64_t sub_100029ED0(void *a1)
{
  uint64_t v2 = (void *)(v1 + *a1);
  swift_beginAccess(v2, v4, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v2);
}

uint64_t GradientView.locations.setter(uint64_t a1)
{
  return sub_100029F28( a1,  &OBJC_IVAR____TtC8FaceTime12GradientView_locations,  (uint64_t (*)(uint64_t))sub_100029D24);
}

uint64_t sub_100029F28(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6 = (uint64_t *)(v3 + *a2);
  swift_beginAccess(v6, v10, 1LL, 0LL);
  uint64_t v7 = *v6;
  uint64_t *v6 = a1;
  uint64_t v8 = swift_bridgeObjectRelease(v7);
  return a3(v8);
}

uint64_t (*GradientView.locations.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8FaceTime12GradientView_locations, a1, 33LL, 0LL);
  return sub_100029FCC;
}

uint64_t sub_100029FCC(uint64_t a1, char a2)
{
  return sub_100029FD8(a1, a2, (uint64_t (*)(uint64_t))sub_100029D24);
}

uint64_t sub_100029FD8(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess(a1);
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

id GradientView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  return objc_msgSend(objc_allocWithZone(v4), "initWithFrame:", a1, a2, a3, a4);
}

id GradientView.init(frame:)(double a1, double a2, double a3, double a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = OBJC_IVAR____TtC8FaceTime12GradientView_colors;
  uint64_t v11 = sub_100018A04(&qword_1001142B0);
  uint64_t v12 = swift_allocObject(v11, 48LL, 7LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FC0;
  id v13 = objc_allocWithZone(&OBJC_CLASS___UIColor);
  unint64_t v14 = v5;
  *(void *)(v12 + 32) = [v13 initWithWhite:0.0 alpha:0.0];
  id v15 = [objc_allocWithZone(UIColor) initWithWhite:0.0 alpha:1.0];
  *(void *)(v12 + 40) = v15;
  uint64_t v20 = v12;
  specialized Array._endMutation()(v15);
  *(void *)&v5[v10] = v12;
  *(_OWORD *)&v14[OBJC_IVAR____TtC8FaceTime12GradientView_startPoint] = xmmword_1000C4DD0;
  *(_OWORD *)&v14[OBJC_IVAR____TtC8FaceTime12GradientView_endPoint] = xmmword_1000C4DE0;
  *(void *)&v14[OBJC_IVAR____TtC8FaceTime12GradientView_locations] = &off_1000F7080;

  v19.receiver = v14;
  v19.super_class = (Class)type metadata accessor for GradientView(v16, v17);
  return objc_msgSendSuper2(&v19, "initWithFrame:", a1, a2, a3, a4);
}

uint64_t type metadata accessor for GradientView(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime12GradientView, a2);
}

id GradientView.__allocating_init(coder:)(void *a1)
{
  id v3 = [objc_allocWithZone(v1) initWithCoder:a1];

  return v3;
}

id GradientView.init(coder:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC8FaceTime12GradientView_colors;
  uint64_t v5 = sub_100018A04(&qword_1001142B0);
  uint64_t v6 = swift_allocObject(v5, 48LL, 7LL);
  *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FC0;
  id v7 = objc_allocWithZone(&OBJC_CLASS___UIColor);
  uint64_t v8 = v2;
  *(void *)(v6 + 32) = [v7 initWithWhite:0.0 alpha:0.0];
  id v9 = [objc_allocWithZone(UIColor) initWithWhite:0.0 alpha:1.0];
  *(void *)(v6 + 40) = v9;
  uint64_t v15 = v6;
  specialized Array._endMutation()(v9);
  *(void *)&v2[v4] = v6;
  *(_OWORD *)&v8[OBJC_IVAR____TtC8FaceTime12GradientView_startPoint] = xmmword_1000C4DD0;
  *(_OWORD *)&v8[OBJC_IVAR____TtC8FaceTime12GradientView_endPoint] = xmmword_1000C4DE0;
  *(void *)&v8[OBJC_IVAR____TtC8FaceTime12GradientView_locations] = &off_1000F70B0;

  v14.receiver = v8;
  v14.super_class = (Class)type metadata accessor for GradientView(v10, v11);
  id v12 = objc_msgSendSuper2(&v14, "initWithCoder:", a1);

  return v12;
}

id GradientView.__deallocating_deinit(uint64_t a1, uint64_t a2)
{
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for GradientView(a1, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_10002A404()
{
  uint64_t v0 = sub_100018A04(&qword_100113258);
  uint64_t v1 = __chkstk_darwin(v0);
  id v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v8 - v4;
  uint64_t v6 = type metadata accessor for FaceTimeURL(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  sub_10002A9C0((uint64_t)v5, (uint64_t)v3);
  State.init(wrappedValue:)(v3, v0);
  return sub_10002AA08((uint64_t)v5);
}

uint64_t sub_10002A4CC()
{
  uint64_t v0 = sub_100018A04(&qword_100113240);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for ContentView(0LL);
  uint64_t v5 = sub_10001949C(&qword_100113248, type metadata accessor for ContentView, (uint64_t)&unk_1000C7458);
  WindowGroup.init(id:title:lazyContent:)(0LL, 0LL, 0LL, 0LL, 0LL, 0LL, sub_10002A404, 0LL, v4, v5);
  unint64_t v6 = sub_10002A974();
  static SceneBuilder.buildBlock<A>(_:)(v3, v0, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_10002A5BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for AppDelegate(0LL, a2);
  return UIApplicationDelegateAdaptor.init(_:)(v2, v2);
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3 = type metadata accessor for FaceTimeApp(0LL);
  uint64_t v4 = sub_10001949C(&qword_100113198, type metadata accessor for FaceTimeApp, (uint64_t)&unk_1000C4E14);
  static App.main()(v3, v4);
  return 0;
}

uint64_t type metadata accessor for FaceTimeApp(uint64_t a1)
{
  uint64_t result = qword_100113200;
  if (!qword_100113200) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FaceTimeApp);
  }
  return result;
}

uint64_t sub_10002A674(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04(&qword_1001131A0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_10002A6B4(uint64_t a1)
{
  uint64_t v2 = sub_100018A04(&qword_1001131A0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_10002A6EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04(&qword_1001131A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10002A734(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04(&qword_1001131A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10002A77C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04(&qword_1001131A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10002A7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04(&qword_1001131A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10002A80C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002A818);
}

uint64_t sub_10002A818(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04(&qword_1001131A0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_10002A858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002A864);
}

uint64_t sub_10002A864(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04(&qword_1001131A0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

void sub_10002A8A8(uint64_t a1, uint64_t a2)
{
  if (v4 <= 0x3F)
  {
    uint64_t v5 = *(void *)(v3 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v5, a1 + 16);
  }

void sub_10002A910(uint64_t a1, uint64_t a2)
{
  if (!qword_100113210)
  {
    uint64_t v3 = type metadata accessor for AppDelegate(255LL, a2);
    unint64_t v4 = type metadata accessor for UIApplicationDelegateAdaptor(a1, v3);
    if (!v5) {
      atomic_store(v4, (unint64_t *)&qword_100113210);
    }
  }

uint64_t sub_10002A964(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E70AC, 1LL);
}

unint64_t sub_10002A974()
{
  unint64_t result = qword_100113250;
  if (!qword_100113250)
  {
    uint64_t v1 = sub_10001C334(&qword_100113240);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for WindowGroup<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100113250);
  }

  return result;
}

uint64_t sub_10002A9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04(&qword_100113258);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002AA08(uint64_t a1)
{
  uint64_t v2 = sub_100018A04(&qword_100113258);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

BOOL sub_10002AA4C()
{
  return (char *)[v0 displayConnection] - 1 < (char *)2;
}

id sub_10002AA78()
{
  id v1 = [*(id *)&v0[OBJC_IVAR____TtC8FaceTime25DisplayConnectionObserver_provider] removeStateObserver:v0];
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for DisplayConnectionObserver((uint64_t)v1, v2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

void sub_10002AB70()
{
  uint64_t v1 = OBJC_IVAR____TtC8FaceTime25DisplayConnectionObserver_disconnectTimer;
  [*(id *)(v0 + OBJC_IVAR____TtC8FaceTime25DisplayConnectionObserver_disconnectTimer) invalidate];
  uint64_t v2 = *(void **)(v0 + v1);
  *(void *)(v0 + v1) = 0LL;

  objc_super v4 = (void *)objc_opt_self(&OBJC_CLASS___NSTimer, v3);
  double v5 = *(double *)(v0 + OBJC_IVAR____TtC8FaceTime25DisplayConnectionObserver_disconnectionTimeout);
  uint64_t v6 = swift_allocObject(&unk_1000F8250, 24LL, 7LL);
  swift_unknownObjectWeakInit(v6 + 16, v0);
  void v10[4] = sub_10002AE24;
  uint64_t v11 = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256LL;
  v10[2] = sub_10002AD10;
  v10[3] = &unk_1000F8268;
  id v7 = _Block_copy(v10);
  swift_release(v11);
  id v8 = [v4 scheduledTimerWithTimeInterval:0 repeats:v7 block:v5];
  _Block_release(v7);
  id v9 = *(void **)(v0 + v1);
  *(void *)(v0 + v1) = v8;
}

void sub_10002AC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    objc_super v4 = (void *)Strong;
    double v5 = *(void (**)(void))(Strong + OBJC_IVAR____TtC8FaceTime25DisplayConnectionObserver_onDisconnectTimeout);
    uint64_t v6 = *(void *)(Strong + OBJC_IVAR____TtC8FaceTime25DisplayConnectionObserver_onDisconnectTimeout + 8);
    sub_10002AE44((uint64_t)v5, v6);

    if (v5)
    {
      v5();
      sub_10001C08C((uint64_t)v5, v6);
    }
  }

void sub_10002AD10(uint64_t a1, void *a2)
{
  objc_super v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

uint64_t type metadata accessor for DisplayConnectionObserver(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime25DisplayConnectionObserver, a2);
}

uint64_t sub_10002AE00()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10002AE24(uint64_t a1)
{
}

uint64_t sub_10002AE2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002AE3C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10002AE44(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_10002AE54()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_100113260);
  sub_10001C270(v0, (uint64_t)qword_100113260);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0xD000000000000011LL,  0x80000001000D92C0LL);
}

void sub_10002AED4(void *a1)
{
  uint64_t v2 = v1;
  if ((char *)[a1 displayConnection] - 1 > (char *)1)
  {
    if (qword_1001121E8 != -1) {
      swift_once(&qword_1001121E8, sub_10002AE54);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    sub_10001C270(v10, (uint64_t)qword_100113260);
    uint64_t v11 = v1;
    id v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      objc_super v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)objc_super v14 = 134217984;
      uint64_t v15 = *(void *)&v11[OBJC_IVAR____TtC8FaceTime25DisplayConnectionObserver_disconnectionTimeout];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v14 + 4, v14 + 12);

      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Display disconnected, starting %fs timer", v14, 0xCu);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {
    }

    sub_10002AB70();
  }

  else
  {
    uint64_t v3 = OBJC_IVAR____TtC8FaceTime25DisplayConnectionObserver_disconnectTimer;
    if (*(void *)&v1[OBJC_IVAR____TtC8FaceTime25DisplayConnectionObserver_disconnectTimer])
    {
      if (qword_1001121E8 != -1) {
        swift_once(&qword_1001121E8, sub_10002AE54);
      }
      uint64_t v4 = type metadata accessor for Logger(0LL);
      uint64_t v5 = sub_10001C270(v4, (uint64_t)qword_100113260);
      uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        id v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Display reconnected, cancelling disconnection timer", v8, 2u);
        swift_slowDealloc(v8, -1LL, -1LL);
      }

      [*(id *)&v2[v3] invalidate];
      id v9 = *(void **)&v2[v3];
      *(void *)&v2[v3] = 0LL;
    }
  }

uint64_t sub_10002B10C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_100113390);
  sub_10001C270(v0, (uint64_t)qword_100113390);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0x614D6D6574737953LL,  0xED0000726567616ELL);
}

void sub_10002B18C(uint64_t a1, uint64_t a2)
{
  id v2 = objc_msgSend((id)objc_opt_self(TUCallCenter, a2), "sharedInstance");
  id v3 = [v2 conversationManager];

  if (qword_1001122A0 != -1) {
    swift_once(&qword_1001122A0, sub_10004CB40);
  }
  uint64_t v5 = (void *)qword_10011A2B8;
  uint64_t v6 = (void *)objc_opt_self(&OBJC_CLASS___PBSSystemService, v4);
  id v7 = v5;
  id v8 = [v6 sharedInstance];
  if (v8)
  {
    uint64_t v10 = v8;
    if (qword_1001121D8 != -1) {
      swift_once(&qword_1001121D8, sub_10001D138);
    }
    uint64_t v11 = (void *)qword_10011A1F0;
    uint64_t v24 = type metadata accessor for SharePlayStateManager(0LL, v9);
    id v25 = &off_1000F93F8;
    v23[0] = v7;
    os_log_type_t v13 = (char *)objc_allocWithZone((Class)type metadata accessor for SystemManager(v24, v12));
    uint64_t v14 = sub_100021734((uint64_t)v23, v24);
    __chkstk_darwin(v14);
    uint64_t v16 = (void *)((char *)&v23[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(uint64_t *))(v17 + 16))(v16);
    uint64_t v18 = *v16;
    id v19 = v7;
    id v20 = v11;
    uint64_t v21 = sub_10002C2E4(v3, v18, (uint64_t)sub_10002B374, 0LL, v10, v20, v13);

    sub_10001BFEC(v23);
    qword_10011A210 = (uint64_t)v21;
  }

  else
  {
    __break(1u);
  }

id sub_10002B374(uint64_t a1, uint64_t a2)
{
  return objc_msgSend((id)objc_opt_self(PBSSystemStatus, a2), "systemAttentionState");
}

void sub_10002B398(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  id v3 = *(void **)(a1 + 8);
  char v4 = *(_BYTE *)(a1 + 16);
  uint64_t v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    id v7 = (void *)Strong;
    sub_10002B408(v2, v3, v4);
  }

void sub_10002B408(void *a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  id v8 = (void *)type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(v8 - 1);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  os_log_type_t v13 = *(void **)(v4 + OBJC_IVAR____TtC8FaceTime13SystemManager_queue);
  void *v11 = v13;
  (*(void (**)(void *, void, void *))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v12 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(void *, void *))(v9 + 8))(v11, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_18:
    swift_once(&qword_1001121F0, sub_10002B10C);
LABEL_8:
    uint64_t v19 = type metadata accessor for Logger(0LL);
    uint64_t v20 = sub_10001C270(v19, (uint64_t)qword_100113390);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Waking system due to joining a conversation.", v23, 2u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    *(_BYTE *)(v4 + OBJC_IVAR____TtC8FaceTime13SystemManager_launchActivitySessionApplicationOnWake) = 1;
    [*(id *)(v4 + OBJC_IVAR____TtC8FaceTime13SystemManager_systemService) wakeSystemForReason:PBSWakeReasonFaceTime];
    goto LABEL_16;
  }

  uint64_t v14 = v4 + OBJC_IVAR____TtC8FaceTime13SystemManager_sharePlayState;
  id v8 = *(void **)(v4 + OBJC_IVAR____TtC8FaceTime13SystemManager_sharePlayState);
  uint64_t v11 = *(void **)(v4 + OBJC_IVAR____TtC8FaceTime13SystemManager_sharePlayState + 8);
  LODWORD(v13) = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC8FaceTime13SystemManager_sharePlayState + 16);
  *(void *)uint64_t v14 = a1;
  *(void *)(v14 + _Block_object_dispose(va, 8) = a2;
  *(_BYTE *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  sub_10002CA0C(v8, v11, (char)v13);
  sub_10002CA0C(a1, a2, a3);
  sub_10002C9C8(v8, v11, (char)v13);
  uint64_t v16 = *(uint64_t (**)(__n128))(v4 + OBJC_IVAR____TtC8FaceTime13SystemManager_systemAttentionStateProvider);
  uint64_t v15 = *(void *)(v4 + OBJC_IVAR____TtC8FaceTime13SystemManager_systemAttentionStateProvider + 8);
  __n128 v17 = swift_retain(v15);
  uint64_t v18 = v16(v17);
  swift_release(v15);
  if ((unint64_t)(v18 - 4) >= 2)
  {
    if (qword_1001121F0 == -1) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  if (qword_1001121F0 != -1) {
    swift_once(&qword_1001121F0, sub_10002B10C);
  }
  uint64_t v24 = type metadata accessor for Logger(0LL);
  uint64_t v25 = sub_10001C270(v24, (uint64_t)qword_100113390);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Deactivating screensaver due to joining a conversation.",  v28,  2u);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  [*(id *)(v4 + OBJC_IVAR____TtC8FaceTime13SystemManager_systemService) deactivateScreenSaver];
LABEL_16:
  sub_10002C9C8(v8, v11, (char)v13);
}

void sub_10002B740(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    uint64_t v5 = *(uint64_t (**)(__n128))(Strong
                                          + OBJC_IVAR____TtC8FaceTime13SystemManager_systemAttentionStateProvider);
    uint64_t v4 = *(void *)(Strong + OBJC_IVAR____TtC8FaceTime13SystemManager_systemAttentionStateProvider + 8);
    __n128 v6 = swift_retain(v4);
    uint64_t v7 = v5(v6);
    swift_release(v4);
    sub_10002B7C8(v7);
  }

uint64_t sub_10002B7C8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v20 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v19[1] = *(void *)(v1 + OBJC_IVAR____TtC8FaceTime13SystemManager_queue);
  uint64_t v10 = swift_allocObject(&unk_1000F82A8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v10 + 16, v1);
  uint64_t v11 = swift_allocObject(&unk_1000F82F8, 32LL, 7LL);
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  *(void *)(v11 + 24) = a1;
  aBlock[4] = sub_10002C9C0;
  uint64_t v23 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  void aBlock[3] = &unk_1000F8310;
  id v12 = _Block_copy(aBlock);
  swift_retain(v10);
  static DispatchQoS.unspecified.getter(v13);
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_10001949C( (unint64_t *)&qword_100112930,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100018A04((uint64_t *)&unk_100112FD0);
  uint64_t v16 = sub_100022750( (unint64_t *)&qword_100112940,  (uint64_t *)&unk_100112FD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v15, v16, v3, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v5, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v17 = v23;
  swift_release(v10);
  return swift_release(v17);
}

void sub_10002BA74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04(&qword_100112D10);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v38 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v38 - v15;
  a1 += 16LL;
  swift_beginAccess(a1, v43, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    uint64_t v18 = (char *)Strong;
    uint64_t v19 = Strong + OBJC_IVAR____TtC8FaceTime13SystemManager_systemAttentionState;
    uint64_t v20 = *(void *)(Strong + OBJC_IVAR____TtC8FaceTime13SystemManager_systemAttentionState);
    char v21 = *(_BYTE *)(v19 + 8);
    *(void *)uint64_t v19 = a2;
    *(_BYTE *)(v19 + _Block_object_dispose(va, 8) = 0;
    if (a2 != 6)
    {
      if (a2 == 1) {
        sub_10002BE68(v20, v21);
      }
LABEL_15:

      return;
    }

    if (v18[OBJC_IVAR____TtC8FaceTime13SystemManager_sharePlayState + 16] - 1 >= 2)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1LL, 1LL, v7);
    }

    else
    {
      id v22 = [*(id *)&v18[OBJC_IVAR____TtC8FaceTime13SystemManager_sharePlayState] UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v23(v6, v14, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0LL, 1LL, v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) != 1)
      {
        v23(v16, v6, v7);
        if (qword_1001121F0 != -1) {
          swift_once(&qword_1001121F0, sub_10002B10C);
        }
        uint64_t v24 = type metadata accessor for Logger(0LL);
        sub_10001C270(v24, (uint64_t)qword_100113390);
        uint64_t v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 16))(v11, v16, v7);
        uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
        os_log_type_t v27 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v40 = swift_slowAlloc(32LL, -1LL);
          uint64_t v42 = v40;
          *(_DWORD *)uint64_t v28 = 136315138;
          char v39 = v28 + 4;
          uint64_t v29 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter(v7, v29);
          unint64_t v32 = v31;
          uint64_t v41 = sub_1000850E4(v30, v31, &v42);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v39, v28 + 12);
          __n128 v33 = swift_bridgeObjectRelease(v32);
          uint64_t v34 = *(void (**)(char *, uint64_t, __n128))(v8 + 8);
          v34(v11, v7, v33);
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "Leaving %s because system is going to sleep.", v28, 0xCu);
          uint64_t v35 = v40;
          swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v35, -1LL, -1LL);
          swift_slowDealloc(v28, -1LL, -1LL);
        }

        else
        {
          uint64_t v34 = *(void (**)(char *, uint64_t, __n128))(v8 + 8);
          ((void (*)(char *, uint64_t))v34)(v11, v7);
        }

        CGRect v36 = *(void **)&v18[OBJC_IVAR____TtC8FaceTime13SystemManager_conversationManager];
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        [v36 leaveConversationWithUUID:isa];

        ((void (*)(char *, uint64_t))v34)(v16, v7);
        goto LABEL_15;
      }
    }

    sub_10001C608((uint64_t)v6, &qword_100112D10);
  }

void sub_10002BE68(uint64_t a1, char a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint8_t **)((char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = *(void **)(v4 + OBJC_IVAR____TtC8FaceTime13SystemManager_queue);
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v12 = v11;
  uint64_t v13 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }

  if (*(_BYTE *)(v4 + OBJC_IVAR____TtC8FaceTime13SystemManager_launchActivitySessionApplicationOnWake) == 1)
  {
    *(_BYTE *)(v4 + OBJC_IVAR____TtC8FaceTime13SystemManager_launchActivitySessionApplicationOnWake) = 0;
    uint64_t v14 = v4 + OBJC_IVAR____TtC8FaceTime13SystemManager_sharePlayState;
    if (*(_BYTE *)(v4 + OBJC_IVAR____TtC8FaceTime13SystemManager_sharePlayState + 16) == 1)
    {
      uint64_t v10 = *(void **)v14;
      uint64_t v13 = *(void *)(v14 + 8);
      id v15 = [*(id *)v14 activitySessions];
      uint64_t v16 = sub_10001C5D0(0LL, &qword_1001134A8, &OBJC_CLASS___TUConversationActivitySession_ptr);
      uint64_t v17 = sub_100022510( &qword_1001134B0,  &qword_1001134A8,  &OBJC_CLASS___TUConversationActivitySession_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
      uint64_t v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v15, v16, v17);

      uint64_t v3 = (void *)sub_1000A807C(v18);
      swift_bridgeObjectRelease(v18);
      if (!v3)
      {
LABEL_10:
        sub_10002C9C8(v10, (void *)v13, 1);
        goto LABEL_11;
      }

      if (qword_1001121F0 == -1)
      {
LABEL_6:
        uint64_t v19 = type metadata accessor for Logger(0LL);
        sub_10001C270(v19, (uint64_t)qword_100113390);
        id v20 = v3;
        char v21 = (os_log_s *)Logger.logObject.getter(v20);
        os_log_type_t v22 = static os_log_type_t.default.getter();
        int v23 = v22;
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v35 = v10;
          uint64_t v24 = swift_slowAlloc(12LL, -1LL);
          int v33 = v23;
          uint64_t v25 = (uint8_t *)v24;
          uint64_t v26 = (void *)swift_slowAlloc(8LL, -1LL);
          unint64_t v32 = v25;
          *(_DWORD *)uint64_t v25 = 138412290;
          unint64_t v31 = v25 + 4;
          id v36 = v20;
          id v27 = v20;
          uint64_t v34 = v13;
          id v28 = v27;
          uint64_t v10 = v35;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v31, v25 + 12);
          *uint64_t v26 = v3;

          uint64_t v13 = v34;
          uint64_t v29 = v32;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  (os_log_type_t)v33,  "Launching application for %@ after waking.",  v32,  0xCu);
          uint64_t v30 = sub_100018A04((uint64_t *)&unk_100112E20);
          swift_arrayDestroy(v26, 1LL, v30);
          swift_slowDealloc(v26, -1LL, -1LL);
          swift_slowDealloc(v29, -1LL, -1LL);
        }

        else
        {

          char v21 = (os_log_s *)v20;
        }

        [*(id *)(v4 + OBJC_IVAR____TtC8FaceTime13SystemManager_conversationManager) launchApplicationForActivitySession:v20 completionHandler:0];
        goto LABEL_10;
      }

LABEL_16:
      swift_once(&qword_1001121F0, sub_10002B10C);
      goto LABEL_6;
    }
  }

    if (qword_100112298 == -1)
    {
LABEL_17:
      id v49 = type metadata accessor for Logger(0LL);
      id v50 = sub_10001C270(v49, (uint64_t)qword_100114240);
      uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
      id v52 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v53 = 67109120;
        LODWORD(v66) = v1 < 2u;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, (char *)&v66 + 4, v53 + 4, v53 + 8);
        _os_log_impl( (void *)&_mh_execute_header,  v51,  v52,  "Assertion is already in appropriate state: %{BOOL}d",  v53,  8u);
        swift_slowDealloc(v53, -1LL, -1LL);
      }

      return;
    }

    swift_once(&qword_100112298, sub_10004C7B0);
    goto LABEL_11;
  }

  uint64_t v26 = v25;
  id v27 = swift_bridgeObjectRelease(v10);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v12, v4, v27);
  return v26;
}

      swift_storeEnumTagMultiPayload(v11, v9, 6LL);
      goto LABEL_17;
    }

        __break(1u);
        goto LABEL_17;
      }

      uint64_t v24 = sub_100075800();
      uint64_t v25 = sub_100018A04(&qword_1001142B0);
      uint64_t v26 = swift_allocObject(v25, 40LL, 7LL);
      *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FD0;
      id v28 = sub_100075EF4(v26, v27);
      uint64_t v29 = [v28 view];

      if (v29)
      {
        *(void *)(v26 + 32) = v29;
        specialized Array._endMutation()(v30);
        sub_100018A04(&qword_100112990);
        unint64_t v31 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v24, "setPreferredFocusEnvironments:", v31, swift_bridgeObjectRelease(v26).n128_f64[0]);

        uint64_t v7 = v47;
        goto LABEL_12;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_16;
  }

      __break(1u);
LABEL_17:
      if (v4 < 0) {
        uint64_t v18 = v4;
      }
      else {
        uint64_t v18 = v4 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain_n(v4, 2LL);
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v18);
      if (!v5) {
        return swift_bridgeObjectRelease_n(v4, 2LL);
      }
    }

id sub_10002C1EC()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SystemManager(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime13SystemManager, a2);
}

char *sub_10002C2E4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, char *a7)
{
  uint64_t v73 = a5;
  uint64_t v74 = a6;
  uint64_t v72 = a4;
  uint64_t v71 = a3;
  uint64_t v70 = a1;
  uint64_t v67 = a7;
  ObjectType = (objc_class *)swift_getObjectType(a7);
  uint64_t v9 = sub_100018A04((uint64_t *)&unk_100113480);
  __chkstk_darwin(v9);
  id v76 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100018A04((uint64_t *)&unk_100113B50);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v78 = v11;
  uint64_t v79 = v12;
  __chkstk_darwin(v11);
  __n128 v77 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v69 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v14 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v20);
  os_log_type_t v22 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v84[3] = type metadata accessor for SharePlayStateManager(0LL, v23);
  uint64_t v84[4] = &off_1000F93F8;
  v84[0] = a2;
  uint64_t v68 = OBJC_IVAR____TtC8FaceTime13SystemManager_queue;
  uint64_t v24 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v25 = a7;
  static DispatchQoS.unspecified.getter(v25);
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v26 = sub_10001949C( (unint64_t *)&qword_100113130,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v27 = sub_100018A04((uint64_t *)&unk_100112DC0);
  uint64_t v28 = sub_100022750( (unint64_t *)&qword_100113140,  (uint64_t *)&unk_100112DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v27, v28, v17, v26);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))( v16,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v69);
  uint64_t v29 = v16;
  uint64_t v30 = v24;
  uint64_t v31 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000022LL,  0x80000001000D93F0LL,  v22,  v19,  v29,  0LL);
  *(void *)&v67[v68] = v31;
  unint64_t v32 = &v25[OBJC_IVAR____TtC8FaceTime13SystemManager_systemAttentionState];
  *(void *)unint64_t v32 = 0LL;
  v32[8] = 1;
  int v33 = &v25[OBJC_IVAR____TtC8FaceTime13SystemManager_sharePlayState];
  *(void *)int v33 = 0LL;
  *((void *)v33 + 1) = 0LL;
  v33[16] = 3;
  *(void *)&v25[OBJC_IVAR____TtC8FaceTime13SystemManager_sharePlayStateCancellable] = 0LL;
  v25[OBJC_IVAR____TtC8FaceTime13SystemManager_launchActivitySessionApplicationOnWake] = 0;
  uint64_t v34 = v70;
  *(void *)&v25[OBJC_IVAR____TtC8FaceTime13SystemManager_conversationManager] = v70;
  sub_10001C580((uint64_t)v84, (uint64_t)&v25[OBJC_IVAR____TtC8FaceTime13SystemManager_sharePlayStateManager]);
  uint64_t v35 = &v25[OBJC_IVAR____TtC8FaceTime13SystemManager_systemAttentionStateProvider];
  uint64_t v36 = v72;
  *(void *)uint64_t v35 = v71;
  *((void *)v35 + 1) = v36;
  uint64_t v38 = v73;
  uint64_t v37 = v74;
  *(void *)&v25[OBJC_IVAR____TtC8FaceTime13SystemManager_systemService] = v73;
  char v39 = &v25[OBJC_IVAR____TtC8FaceTime13SystemManager_suggestionAdvertisementManager];
  *(void *)char v39 = v37;
  *((void *)v39 + 1) = &off_1000F7A98;
  id v40 = v34;
  swift_retain(v36);
  id v41 = v38;
  id v42 = v37;

  v83.receiver = v25;
  v83.super_class = ObjectType;
  uint64_t v43 = (char *)objc_msgSendSuper2(&v83, "init");
  uint64_t v44 = *(void **)&v43[OBJC_IVAR____TtC8FaceTime13SystemManager_conversationManager];
  uint64_t v45 = *(void **)&v43[OBJC_IVAR____TtC8FaceTime13SystemManager_queue];
  uint64_t v46 = v43;
  [v44 addDelegate:v46 queue:v45];
  [v44 registerWithCompletionHandler:0];
  uint64_t v47 = *(void *)(*sub_10001C3FC( &v46[OBJC_IVAR____TtC8FaceTime13SystemManager_sharePlayStateManager],  *(void *)&v46[OBJC_IVAR____TtC8FaceTime13SystemManager_sharePlayStateManager + 24])
                  + OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_sharePlayState);
  aBlock[0] = v47;
  id v82 = v45;
  uint64_t v49 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL, v48);
  uint64_t v50 = (uint64_t)v76;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56LL))(v76, 1LL, 1LL, v49);
  swift_retain(v47);
  id v51 = v45;
  uint64_t v52 = sub_100018A04((uint64_t *)&unk_100113490);
  uint64_t v53 = sub_100022750( (unint64_t *)&unk_100113B60,  (uint64_t *)&unk_100113490,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  uint64_t v54 = sub_100022510( (unint64_t *)&qword_100112E50,  (unint64_t *)&qword_100112DB0,  &OBJC_CLASS___OS_dispatch_queue_ptr,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  uint64_t v55 = v77;
  Publisher.receive<A>(on:options:)(&v82, v50, v52, v30, v53, v54);
  sub_10001C608(v50, (uint64_t *)&unk_100113480);

  swift_release(aBlock[0]);
  uint64_t v56 = swift_allocObject(&unk_1000F82A8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v56 + 16, v46);
  uint64_t v57 = sub_100022750( (unint64_t *)&unk_100113B70,  (uint64_t *)&unk_100113B50,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v58 = v78;
  uint64_t v59 = Publisher<>.sink(receiveValue:)(sub_10002C974, v56, v78, v57);
  swift_release(v56);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v55, v58);
  uint64_t v60 = *(void *)&v46[OBJC_IVAR____TtC8FaceTime13SystemManager_sharePlayStateCancellable];
  *(void *)&v46[OBJC_IVAR____TtC8FaceTime13SystemManager_sharePlayStateCancellable] = v59;
  swift_release(v60);
  uint64_t v62 = (void *)objc_opt_self(&OBJC_CLASS___PBSSystemStatus, v61);
  NSString v63 = String._bridgeToObjectiveC()();
  uint64_t v64 = swift_allocObject(&unk_1000F82A8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v64 + 16, v46);
  aBlock[4] = sub_10002C97C;
  uint64_t v81 = v64;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  void aBlock[3] = &unk_1000F82C0;
  uint64_t v65 = _Block_copy(aBlock);
  swift_release(v81);
  [v62 addPermanentObserverForProperty:v63 notifyInitial:1 invokeOnMainThread:0 handler:v65];

  _Block_release(v65);
  sub_10001BFEC(v84);
  return v46;
}

uint64_t sub_10002C950()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10002C974(uint64_t a1)
{
}

void sub_10002C97C()
{
}

uint64_t sub_10002C984(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002C994(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10002C99C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10002C9C0()
{
}

void sub_10002C9C8(void *a1, void *a2, char a3)
{
  switch(a3)
  {
    case 2:

      a1 = a2;
      goto LABEL_6;
    case 1:
LABEL_6:

      return;
    case 0:
      swift_bridgeObjectRelease(a1);
      break;
  }

id sub_10002CA0C(id result, void *a2, char a3)
{
  switch(a3)
  {
    case 2:
      id v3 = result;
      unint64_t result = a2;
      return result;
    case 1:
      return result;
    case 0:
      return (id)swift_bridgeObjectRetain(result);
  }

  return result;
}

void sub_10002CA50(void *a1)
{
  id v3 = [a1 session];
  if (v3)
  {
    uint64_t v4 = v3;
    if ([v3 state] != (id)1
      || [a1 type] != (id)1
      || (id v5 = [v4 activity],
          id v18 = [v5 metadata],
          v5,
          !v18))
    {
      uint64_t v17 = v4;
LABEL_12:

      return;
    }

    id v6 = [v18 context];
    id v7 = [v6 typedIdentifier];

    uint64_t v8 = TUConversationActivityContextIdentifierWatchTogether;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    if (v9 == v12 && v11 == v13)
    {

      swift_bridgeObjectRelease_n(v11, 2LL);
    }

    else
    {
      uint64_t v15 = v13;
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v12, v13, 0LL);

      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v15);
      if ((v16 & 1) == 0) {
        goto LABEL_16;
      }
    }

    [*(id *)(v1 + OBJC_IVAR____TtC8FaceTime13SystemManager_systemService) deactivateScreenSaver];
LABEL_16:

    uint64_t v17 = v18;
    goto LABEL_12;
  }

void sub_10002CC04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100018A04(&qword_1001134E0);
    id v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    id v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v29 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t i = 0LL;
  if (v6) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v12 = i + 1;
  if (__OFADD__(i, 1LL)) {
    goto LABEL_35;
  }
  if (v12 >= v28) {
    goto LABEL_32;
  }
  unint64_t v13 = *(void *)(v29 + 8 * v12);
  int64_t v14 = i + 1;
  if (!v13)
  {
    int64_t v14 = i + 2;
    if (i + 2 >= v28) {
      goto LABEL_32;
    }
    unint64_t v13 = *(void *)(v29 + 8 * v14);
    if (!v13)
    {
      int64_t v14 = i + 3;
      if (i + 3 >= v28) {
        goto LABEL_32;
      }
      unint64_t v13 = *(void *)(v29 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = i + 4;
        if (i + 4 >= v28) {
          goto LABEL_32;
        }
        unint64_t v13 = *(void *)(v29 + 8 * v14);
        if (!v13)
        {
          int64_t v15 = i + 5;
          if (i + 5 < v28)
          {
            unint64_t v13 = *(void *)(v29 + 8 * v15);
            if (v13)
            {
              int64_t v14 = i + 5;
              goto LABEL_26;
            }

            while (1)
            {
              int64_t v14 = v15 + 1;
              if (__OFADD__(v15, 1LL)) {
                goto LABEL_36;
              }
              if (v14 >= v28) {
                break;
              }
              unint64_t v13 = *(void *)(v29 + 8 * v14);
              ++v15;
              if (v13) {
                goto LABEL_26;
              }
            }
          }

LABEL_26:
  unint64_t v6 = (v13 - 1) & v13;
  unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
  for (i = v14; ; unint64_t v11 = v10 | (i << 6))
  {
    char v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t v19 = *(void **)(*(void *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v17);
    id v20 = v19;
    unint64_t v21 = sub_10002FB98(v18, v17);
    unint64_t v22 = v21;
    if ((v23 & 1) != 0)
    {
      uint64_t v8 = (uint64_t *)(v3[6] + 16 * v21);
      swift_bridgeObjectRelease(v8[1]);
      *uint64_t v8 = v18;
      v8[1] = v17;
      uint64_t v9 = v3[7];

      *(void *)(v9 + 8 * v22) = v20;
      if (!v6) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v21;
    uint64_t v24 = (uint64_t *)(v3[6] + 16 * v21);
    *uint64_t v24 = v18;
    v24[1] = v17;
    *(void *)(v3[7] + 8 * v21) = v20;
    uint64_t v25 = v3[2];
    BOOL v26 = __OFADD__(v25, 1LL);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_34;
    }
    v3[2] = v27;
    if (!v6) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

    swift_once(&qword_100112298, sub_10004C7B0);
    goto LABEL_17;
  }

  sub_10002C9C8(v66, v67, v68);
  char v39 = OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_assertion;
  id v40 = *(void **)(v2 + OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_assertion);
  if (!v40) {
    goto LABEL_16;
  }
  id v41 = qword_100112298;
  id v42 = v40;
  if (v41 != -1) {
    swift_once(&qword_100112298, sub_10004C7B0);
  }
  uint64_t v43 = type metadata accessor for Logger(0LL);
  uint64_t v44 = sub_10001C270(v43, (uint64_t)qword_100114240);
  uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
  uint64_t v46 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Releasing assertion for TVFaceTime.", v47, 2u);
    swift_slowDealloc(v47, -1LL, -1LL);
  }

  [v42 invalidate];
  __n128 v48 = *(void **)(v2 + v39);
  *(void *)(v2 + v39) = 0LL;
}

      __break(1u);
      goto LABEL_27;
    }

    __break(1u);
    goto LABEL_26;
  }

  uint64_t v8 = *(void **)(v1 + 24);
  unint64_t v6 = 16.0;
  id v7 = 9.0;
  if (!v8) {
    goto LABEL_10;
  }
  uint64_t v9 = [v8 view];
  if (v9)
  {
    unint64_t v10 = v9;
    uint64_t v5 = [v9 window];

    if (!v5) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

        unint64_t v11 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }

      unint64_t v22 = *(void *)(*(void *)(v4 + 48) + 8 * v18);
      unint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
      char v23 = -1LL << *(_BYTE *)(v7 + 32);
      uint64_t v24 = result & ~v23;
      uint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        char v16 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        BOOL v26 = 0;
        uint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          int64_t v28 = v25 == v27;
          if (v25 == v27) {
            uint64_t v25 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v13 + 8 * v25);
        }

        while (v29 == -1);
        char v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * vswift_unknownObjectWeakDestroy(v0 + 16) = v22;
      ++*(void *)(v7 + 16);
    }
  }

  unint64_t result = swift_release(v4);
  *id v3 = v7;
  return result;
}

        unint64_t v11 = (v18 - 1) & v18;
        char v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      id v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v30, *(void *)(v6 + 40));
      Hasher._combine(_:)(v20);
      unint64_t result = Hasher._finalize()();
      unint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v22 = result & ~v21;
      char v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        int64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            char v23 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        int64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  unint64_t result = swift_release(v3);
  void *v2 = v6;
  return result;
}

    unint64_t v11 = (v20 - 1) & v20;
    uint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_27:
    unint64_t v22 = *(void *)(v7 + 40);
    char v23 = *(id *)(*(void *)(v4 + 48) + 8 * v18);
    unint64_t result = NSObject._rawHashValue(seed:)(v22);
    uint64_t v24 = -1LL << *(_BYTE *)(v7 + 32);
    uint64_t v25 = result & ~v24;
    BOOL v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      char v16 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      int64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v29 = v26 == v28;
        if (v26 == v28) {
          BOOL v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v26);
      }

      while (v30 == -1);
      char v16 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    *(void *)(*(void *)(v7 + 48) + 8 * vswift_unknownObjectWeakDestroy(v0 + 16) = v23;
    ++*(void *)(v7 + 16);
  }

  unint64_t v21 = v19 + 3;
  if (v21 >= v12)
  {
LABEL_36:
    unint64_t result = swift_release_n(v4, 2LL);
    id v3 = v31;
    goto LABEL_38;
  }

  id v20 = *(void *)(v9 + 8 * v21);
  if (v20)
  {
    int64_t v15 = v21;
    goto LABEL_26;
  }

  while (1)
  {
    int64_t v15 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v15 >= v12) {
      goto LABEL_36;
    }
    id v20 = *(void *)(v9 + 8 * v15);
    ++v21;
    if (v20) {
      goto LABEL_26;
    }
  }

    unint64_t v11 = (v18 - 1) & v18;
    char v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    id v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v29, *(void *)(v6 + 40));
    Hasher._combine(_:)(v20);
    unint64_t result = Hasher._finalize()();
    unint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v22 = result & ~v21;
    char v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      int64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          char v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      int64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
    ++*(void *)(v6 + 16);
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    unint64_t result = swift_release(v3);
    uint64_t v2 = v28;
    goto LABEL_38;
  }

  uint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    id v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    id v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    uint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

      uint64_t v31 = (v33 - 1) & v33;
      unint64_t v32 = __clz(__rbit64(v33)) + (v30 << 6);
    }

    uint64_t v29 = *(id *)(*(void *)(a1 + 48) + 8 * v32);
  }

                  __break(1u);
                  goto LABEL_27;
                }

void sub_10002CEA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100018A04(&qword_1001134E8);
    id v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    id v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v29 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v4) >> 6;
  id v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  swift_retain(v3);
  int64_t v8 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }

    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v13 >= v28) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v29 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v28) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v29 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v28) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v29 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v28) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v29 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }

LABEL_27:
    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_10001C1A0(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v41);
    *(void *)&__int128 v40 = v19;
    *((void *)&v40 + 1) = v18;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(void *)&v38[0] = v19;
    *((void *)&v38[0] + 1) = v18;
    swift_bridgeObjectRetain(v18);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7LL);
    sub_10001C1DC(v39, v33);
    __int128 v34 = v30;
    __int128 v35 = v31;
    uint64_t v36 = v32;
    sub_10001C1DC(v33, v37);
    __int128 v30 = v34;
    __int128 v31 = v35;
    uint64_t v32 = v36;
    sub_10001C1DC(v37, v38);
    sub_10001C1DC(v38, &v34);
    Swift::Int v20 = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v21 = -1LL << *((_BYTE *)v3 + 32);
    unint64_t v22 = v20 & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)&v7[8 * v23];
      }

      while (v27 == -1);
      unint64_t v9 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)&v7[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v9;
    uint64_t v10 = v3[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v30;
    *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = v31;
    *(void *)(v10 + 32) = v32;
    sub_10001C1DC(&v34, (_OWORD *)(v3[7] + 32 * v9));
    ++v3[2];
  }

  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_100022550(a1);
    return;
  }

  unint64_t v14 = *(void *)(v29 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v29 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }

    uint64_t v46 = (v50 - 1) & v50;
    uint64_t v47 = __clz(__rbit64(v50)) + (v38 << 6);
LABEL_28:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))( v28,  *(void *)(v146 + 48) + *(void *)(v7 + 72) * v47,  v6,  v37);
    uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56);
    ((void (*)(char *, void, uint64_t, uint64_t))v52)(v28, 0LL, 1LL, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v28, 1LL, v6) == 1)
    {
      swift_release(v146);
      uint64_t v49 = (uint64_t)v145;
      goto LABEL_39;
    }

    v152 = (void *)v46;
    v154 = v38;
    uint64_t v53 = type metadata accessor for TaskPriority(0LL);
    v153 = *(void *)(v53 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v153 + 56))(v20, 1LL, 1LL, v53);
    uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v55 = v6;
    uint64_t v56 = v150;
    v54(v150, v28, v55);
    uint64_t v58 = sub_100039E60( &qword_100114D88,  v57,  (uint64_t (*)(uint64_t))type metadata accessor for RingManager,  (uint64_t)&unk_1000C5F40);
    uint64_t v59 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v60 = v20;
    uint64_t v61 = (v59 + 40) & ~v59;
    uint64_t v62 = ((unint64_t)v143 + v61) & 0xFFFFFFFFFFFFFFF8LL;
    NSString v63 = (void *)swift_allocObject(&unk_1000FA580, v62 + 8, v59 | 7);
    uint64_t v64 = v151;
    v63[2] = v151;
    v63[3] = v58;
    uint64_t v65 = v147;
    v63[4] = v147;
    id v66 = (char *)v63 + v61;
    Swift::Int v20 = v60;
    uint64_t v67 = v153;
    uint64_t v68 = v56;
    unint64_t v6 = v55;
    v54(v66, v68, v55);
    *(void *)((char *)v63 + v62) = v64;
    LODWORD(v55) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 48))(v20, 1LL, v53);
    swift_retain_n(v64, 2LL);
    uint64_t v69 = swift_bridgeObjectRetain(v65);
    if ((_DWORD)v55 == 1)
    {
      sub_10001C608((uint64_t)v20, &qword_100114970);
      uint64_t v70 = 0LL;
    }

    else
    {
      uint64_t v71 = TaskPriority.rawValue.getter(v69);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v20, v53);
      uint64_t v70 = v71;
    }

    id v7 = v149;
    char v24 = v148;
    id v42 = (unint64_t)v152;
    uint64_t v72 = v63[2];
    if (v72)
    {
      uint64_t v73 = v63[3];
      ObjectType = swift_getObjectType(v63[2]);
      swift_unknownObjectRetain(v72);
      uint64_t v75 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v73);
      __n128 v77 = v76;
      swift_unknownObjectRelease(v72);
    }

    else
    {
      uint64_t v75 = 0LL;
      __n128 v77 = 0LL;
    }

    uint64_t v32 = v155;
    if (v77 | v75)
    {
      v156[0] = 0LL;
      v156[1] = 0LL;
      uint64_t v43 = v156;
      v156[2] = v75;
      v156[3] = v77;
    }

    else
    {
      uint64_t v43 = 0LL;
    }

    uint64_t v38 = v154;
    uint64_t v44 = swift_task_create(v70 | 0x1C00, v43, v142, &unk_100114D90, v63);
    swift_release(v44);
  }

  id v51 = v48 + 3;
  if (v51 >= (uint64_t)v141)
  {
LABEL_38:
    uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56);
    v52(v28, 1LL, 1LL, v6, v37);
    swift_release(v146);
LABEL_39:
    uint64_t v78 = sub_1000A7C60(v130);
    uint64_t v79 = v147;
    uint64_t v80 = (char *)sub_100073294((uint64_t)v147, v78);
    swift_bridgeObjectRelease(v79);
    uint64_t v81 = *((void *)v80 + 7);
    int64_t i = v80 + 56;
    v152 = v80;
    id v82 = 1LL << v80[32];
    objc_super v83 = -1LL;
    if (v82 < 64) {
      objc_super v83 = ~(-1LL << v82);
    }
    uint64_t v84 = v83 & v81;
    v141 = v151 + 14;
    v147 = v151 + 23;
    uint64_t v85 = swift_beginAccess(v151 + 23, v160, 0LL, 0LL);
    Swift::String v86 = 0LL;
    v146 = (unint64_t)(v82 + 63) >> 6;
    v85.n128_u64[0] = 136315138LL;
    v140 = v85;
    v130 = (uint64_t)&type metadata for Any + 8;
    while (1)
    {
      if (v84)
      {
        v154 = (v84 - 1) & v84;
        id v87 = __clz(__rbit64(v84)) | (v86 << 6);
      }

      else
      {
        uint64_t v88 = v86 + 1;
        if (__OFADD__(v86, 1LL)) {
          goto LABEL_76;
        }
        if (v88 >= v146)
        {
LABEL_73:
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))v52)(v32, 1LL, 1LL, v6);
LABEL_74:
          swift_release(v152);
          return;
        }

        uint64_t v89 = *(void *)&i[8 * v88];
        ++v86;
        if (!v89)
        {
          Swift::String v86 = v88 + 1;
          if (v88 + 1 >= v146) {
            goto LABEL_73;
          }
          uint64_t v89 = *(void *)&i[8 * v86];
          if (!v89)
          {
            Swift::String v86 = v88 + 2;
            if (v88 + 2 >= v146) {
              goto LABEL_73;
            }
            uint64_t v89 = *(void *)&i[8 * v86];
            if (!v89)
            {
              Swift::String v90 = v88 + 3;
              if (v90 >= v146) {
                goto LABEL_73;
              }
              uint64_t v89 = *(void *)&i[8 * v90];
              if (!v89)
              {
                while (1)
                {
                  Swift::String v86 = v90 + 1;
                  if (__OFADD__(v90, 1LL)) {
                    goto LABEL_78;
                  }
                  if (v86 >= v146) {
                    goto LABEL_73;
                  }
                  uint64_t v89 = *(void *)&i[8 * v86];
                  ++v90;
                  if (v89) {
                    goto LABEL_60;
                  }
                }
              }

              Swift::String v86 = v90;
            }
          }
        }

        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }

      uint64_t v29 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v19);
LABEL_20:
      swift_bridgeObjectRelease(v19);
      __int128 v30 = *(id *)(v29 + OBJC_IVAR____TtC8FaceTime6Bubble_focus);
      __int128 v31 = swift_release(v29);
      *(void *)(v16 + 32) = v30;
      specialized Array._endMutation()(v31);
      sub_100018A04(&qword_100112990);
      uint64_t v32 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v16);
      [(id)v10 setPreferredFocusEnvironments:v32];

      goto LABEL_22;
    }

  __break(1u);
  return result;
}

    int64_t v13 = (v20 - 1) & v20;
    int64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    unint64_t result = v18;
  }

  uint64_t v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  Swift::Int v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    uint64_t v10 = v21;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    Swift::Int v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }

    unint64_t v12 = (v17 - 1) & v17;
    int64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    unint64_t v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    unint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

    uint64_t v19 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    unint64_t v23 = *(void *)(v6 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v23, v5);
    unint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))( *(void *)(v11 + 48) + v23,  v8,  v5);
  }

  BOOL v26 = v24 + 3;
  if (v26 >= v20)
  {
LABEL_28:
    unint64_t result = (void *)swift_release(v9);
    uint64_t v4 = v28;
    goto LABEL_30;
  }

  unint64_t v25 = *(void *)(v13 + 8 * v26);
  if (v25)
  {
    int64_t v16 = v26;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v16 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v16 >= v20) {
      goto LABEL_28;
    }
    unint64_t v25 = *(void *)(v13 + 8 * v16);
    ++v26;
    if (v25) {
      goto LABEL_27;
    }
  }

                    __break(1u);
                    goto LABEL_28;
                  }

    __break(1u);
    goto LABEL_28;
  }

uint64_t sub_10002D268()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_1001134B8);
  sub_10001C270(v0, (uint64_t)qword_1001134B8);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0xD000000000000011LL,  0x80000001000D9490LL);
}

Class sub_10002D2E8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(__n128))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  __n128 v3 = swift_retain(v2);
  uint64_t v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    sub_10002D68C(0LL, v5);
    v6.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    v6.super.Class isa = 0LL;
  }

  return v6.super.isa;
}

void sub_10002D35C(char a1)
{
  if (qword_100112200 != -1) {
    swift_once(&qword_100112200, sub_10002D268);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_10001C270(v2, (uint64_t)qword_1001134B8);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    NSDictionary v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)NSDictionary v6 = 136315138;
    aBlock[0] = v7;
    BOOL v8 = (a1 & 1) == 0;
    if ((a1 & 1) != 0) {
      uint64_t v9 = 0x73746361746E6F63LL;
    }
    else {
      uint64_t v9 = 0x4C73746E65636572LL;
    }
    if (v8) {
      unint64_t v10 = 0xEB00000000747369LL;
    }
    else {
      unint64_t v10 = 0xE800000000000000LL;
    }
    uint64_t v21 = sub_1000850E4(v9, v10, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, aBlock, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Send laguna start call from TV event, context: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {

    if ((a1 & 1) != 0) {
      unint64_t v10 = 0xE800000000000000LL;
    }
    else {
      unint64_t v10 = 0xEB00000000747369LL;
    }
  }

  uint64_t v11 = sub_100018A04(&qword_1001134D0);
  uint64_t inited = swift_initStackObject(v11, v24);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FB0;
  *(void *)(inited + 32) = 0x747865746E6F63LL;
  *(void *)(inited + 40) = 0xE700000000000000LL;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  *(void *)(inited + 4_Block_object_dispose(va, 8) = v13;
  unint64_t v14 = sub_10002D854(inited);
  sub_10002CC04(v14);
  uint64_t v16 = v15;
  swift_bridgeObjectRelease(v14);
  NSString v17 = String._bridgeToObjectiveC()();
  uint64_t v18 = swift_allocObject(&unk_1000F8348, 24LL, 7LL);
  *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = v16;
  aBlock[4] = (uint64_t)sub_10002D66C;
  uint64_t v23 = v18;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_10002D2E8;
  void aBlock[3] = (uint64_t)&unk_1000F8360;
  uint64_t v19 = _Block_copy(aBlock);
  uint64_t v20 = v23;
  swift_bridgeObjectRetain(v16);
  swift_release(v20);
  AnalyticsSendEventLazy(v17, v19);
  _Block_release(v19);
  swift_bridgeObjectRelease(v16);
}

uint64_t sub_10002D648()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10002D66C()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t sub_10002D674(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002D684(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_10002D68C(uint64_t a1, uint64_t a2)
{
  unint64_t result = qword_1001134D8;
  if (!qword_1001134D8)
  {
    uint64_t v3 = objc_opt_self(&OBJC_CLASS___NSObject, a2);
    unint64_t result = swift_getObjCClassMetadata(v3);
    atomic_store(result, (unint64_t *)&qword_1001134D8);
  }

  return result;
}

unint64_t sub_10002D6C8(uint64_t a1)
{
  uint64_t v2 = sub_100018A04((uint64_t *)&unk_1001136C0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  os_log_type_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    BOOL v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }

  sub_100018A04((uint64_t *)&unk_100114B40);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  BOOL v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v25 = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10001C3B8(v13, (uint64_t)v5, (uint64_t *)&unk_1001136C0);
    unint64_t result = sub_10002F9AC((uint64_t)v5);
    if ((v16 & 1) != 0) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for Signposts.Interval(0LL);
    unint64_t result = sub_10002FB10((uint64_t)v5, v18 + *(void *)(*(void *)(v19 - 8) + 72LL) * v17);
    *(void *)(v8[7] + 8 * v17) = *(void *)&v5[v10];
    uint64_t v20 = v8[2];
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_12;
    }
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      uint64_t v23 = v25;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10002D854(uint64_t a1)
{
  return sub_10002DC88(a1, &qword_1001136E8);
}

unint64_t sub_10002D860(uint64_t a1)
{
  uint64_t v2 = sub_100018A04(&qword_100113788);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  os_log_type_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    BOOL v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v8;
  }

  sub_100018A04(&qword_100113790);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  BOOL v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = &v5[*(int *)(v2 + 48)];
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v27 = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10001C3B8(v13, (uint64_t)v5, &qword_100113788);
    unint64_t result = sub_10002FC2C((uint64_t)v5);
    if ((v16 & 1) != 0) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for UUID(0LL);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))( v18 + *(void *)(*(void *)(v19 - 8) + 72LL) * v17,  v5,  v19);
    uint64_t v20 = v8[7] + 24 * v17;
    uint64_t v21 = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v10;
    *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = v21;
    uint64_t v22 = v8[2];
    BOOL v23 = __OFADD__(v22, 1LL);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_12;
    }
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      uint64_t v25 = v27;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10002DA08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100018A04(&qword_1001137A8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10001C3B8(v7, (uint64_t)&v16, (uint64_t *)&unk_1001137B0);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_10002FB98(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    unint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *unint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_10001C1DC(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002DB3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100018A04(&qword_1001134E8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10001C3B8(v7, (uint64_t)v16, &qword_1001136E0);
    unint64_t result = sub_10002FC98((uint64_t)v16);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v10 = v4[6] + 40 * result;
    __int128 v11 = v16[0];
    __int128 v12 = v16[1];
    *(void *)(v10 + 32) = v17;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
    unint64_t result = (unint64_t)sub_10001C1DC(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v7 += 72LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002DC7C(uint64_t a1)
{
  return sub_10002DC88(a1, (uint64_t *)&unk_1001136F0);
}

unint64_t sub_10002DC88(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    uint64_t v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100018A04(a2);
  uint64_t v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  uint64_t v5 = (void *)v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }

  swift_retain(v4);
  uint64_t v7 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v8 = (uint64_t)*(v7 - 2);
    uint64_t v9 = (uint64_t)*(v7 - 1);
    uint64_t v10 = *v7;
    swift_bridgeObjectRetain(v9);
    id v11 = v10;
    unint64_t result = sub_10002FB98(v8, v9);
    if ((v13 & 1) != 0) {
      break;
    }
    *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    BOOL v14 = (uint64_t *)(v5[6] + 16 * result);
    uint64_t *v14 = v8;
    v14[1] = v9;
    *(void *)(v5[7] + 8 * result) = v11;
    uint64_t v15 = v5[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    void v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002DD9C(uint64_t a1)
{
  uint64_t v2 = sub_100018A04(&qword_100113798);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v27 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v27);
    return (unint64_t)v8;
  }

  sub_100018A04(&qword_1001137A0);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = &v5[*(int *)(v2 + 48)];
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v29 = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10001C3B8(v13, (uint64_t)v5, &qword_100113798);
    unint64_t result = sub_10002FC2C((uint64_t)v5);
    if ((v16 & 1) != 0) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for UUID(0LL);
    uint64_t v20 = *(void *)(v19 - 8);
    unint64_t v21 = *(void *)(v20 + 72) * v17;
    uint64_t v22 = v18 + v21;
    BOOL v23 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 32);
    v23(v22, v5, v19);
    unint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v23)(v8[7] + v21, v10, v19);
    uint64_t v24 = v8[2];
    BOOL v25 = __OFADD__(v24, 1LL);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_12;
    }
    v8[2] = v26;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      uint64_t v27 = v29;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10002DF44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100018A04(&qword_100113780);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_unknownObjectRetain(v9);
    unint64_t result = sub_10002FB98(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    unint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *unint64_t v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002E05C(uint64_t a1)
{
  uint64_t v2 = sub_100018A04(&qword_100113710);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }

  sub_100018A04(&qword_100113718);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v25 = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10001C3B8(v13, (uint64_t)v5, &qword_100113710);
    unint64_t result = sub_10002FC2C((uint64_t)v5);
    if ((v16 & 1) != 0) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for UUID(0LL);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))( v18 + *(void *)(*(void *)(v19 - 8) + 72LL) * v17,  v5,  v19);
    *(_OWORD *)(v8[7] + 16 * v17) = *(_OWORD *)&v5[v10];
    uint64_t v20 = v8[2];
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_12;
    }
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      uint64_t v23 = v25;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10002E1F0(uint64_t a1)
{
  uint64_t v2 = sub_100018A04((uint64_t *)&unk_100113700);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }

  sub_100018A04((uint64_t *)&unk_100114B20);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v25 = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10001C3B8(v13, (uint64_t)v5, (uint64_t *)&unk_100113700);
    unint64_t result = sub_10002FC2C((uint64_t)v5);
    if ((v16 & 1) != 0) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for UUID(0LL);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))( v18 + *(void *)(*(void *)(v19 - 8) + 72LL) * v17,  v5,  v19);
    *(void *)(v8[7] + 8 * v17) = *(void *)&v5[v10];
    uint64_t v20 = v8[2];
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_12;
    }
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      uint64_t v23 = v25;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_10002E384()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_1001134F0);
  sub_10001C270(v0, (uint64_t)qword_1001134F0);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0x74736F706E676953LL,  0xEF726567616E614DLL);
}

uint64_t sub_10002E404()
{
  return 1LL;
}

uint64_t sub_10002E40C()
{
  return 0x6E75614C7070612ELL;
}

Swift::Int sub_10002E42C()
{
  return Hasher._finalize()();
}

uint64_t sub_10002E484(uint64_t a1)
{
  return String.hash(into:)(a1, 0x6E75614C7070612ELL, 0xEC00000064656863LL);
}

Swift::Int sub_10002E4A4(uint64_t a1)
{
  return Hasher._finalize()();
}

unint64_t sub_10002E4F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Signposts.Interval(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10002FB54(v1, (uint64_t)v8);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
  unint64_t v15 = 0LL;
  unint64_t v16 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(21LL);
  uint64_t v10 = swift_bridgeObjectRelease(v16);
  unint64_t v15 = 0xD000000000000012LL;
  unint64_t v16 = 0x80000001000D9520LL;
  v11._uint64_t countAndFlagsBits = UUID.uuidString.getter(v10);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  v13._uint64_t countAndFlagsBits = 41LL;
  v13._object = (void *)0xE100000000000000LL;
  String.append(_:)(v13);
  unint64_t v9 = v15;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v9;
}

Swift::Int sub_10002E668()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Signposts.Interval(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Hasher.init(_seed:)(v12, 0LL);
  sub_10002FB54(v1, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1LL, v2) == 1)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1uLL);
    uint64_t v9 = sub_10001949C( &qword_1001136D0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v12, v2, v9);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  return Hasher._finalize()();
}

void sub_10002E7B8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10002FB54(v2, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v10, v4);
    Hasher._combine(_:)(1uLL);
    uint64_t v11 = sub_10001949C( &qword_1001136D0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v11);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }

Swift::Int sub_10002E8E4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v14[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v14[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Hasher.init(_seed:)(v14, a1);
  sub_10002FB54(v2, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v10, v4);
    Hasher._combine(_:)(1uLL);
    uint64_t v11 = sub_10001949C( &qword_1001136D0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v14, v4, v11);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }

  return Hasher._finalize()();
}

uint64_t sub_10002EA40()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OSSignposter(0LL);
  sub_10001C378(v4, qword_100113508);
  sub_10001C270(v4, (uint64_t)qword_100113508);
  if (qword_1001122B0 != -1) {
    swift_once(&qword_1001122B0, sub_10005610C);
  }
  uint64_t v5 = sub_10001C270(v0, (uint64_t)qword_10011A2C0);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSSignposter.init(logger:)(v3);
}

unint64_t sub_10002EB28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for SignpostManager(a1, a2);
  uint64_t v3 = (void *)swift_allocObject(v2, 40LL, 7LL);
  uint64_t v4 = sub_100018A04(&qword_1001136B8);
  uint64_t v5 = swift_allocObject(v4, 20LL, 7LL);
  *(_DWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  v3[2] = v5;
  unint64_t result = sub_10002D6C8((uint64_t)&_swiftEmptyArrayStorage);
  v3[3] = result;
  v3[4] = &_swiftEmptySetSingleton;
  qword_10011A218 = (uint64_t)v3;
  return result;
}

uint64_t sub_10002EB94(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Signposts.Interval(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = sub_100030728(a1);
  uint64_t v8 = (os_unfair_lock_s *)(*(void *)(v2 + 16) + 16LL);
  os_unfair_lock_lock(v8);
  sub_10002FB54(a1, (uint64_t)v6);
  swift_beginAccess(v2 + 24, v13, 33LL, 0LL);
  swift_retain(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + 24));
  uint64_t v12 = *(void *)(v2 + 24);
  *(void *)(v2 + 24) = 0x8000000000000000LL;
  sub_1000685E8(v7, (uint64_t)v6, isUniquelyReferenced_nonNull_native);
  uint64_t v10 = *(void *)(v2 + 24);
  *(void *)(v2 + 24) = v12;
  swift_bridgeObjectRelease(v10);
  sub_10002FFE4((uint64_t)v6);
  swift_endAccess(v13);
  os_unfair_lock_unlock(v8);
  return v7;
}

void sub_10002EC9C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v61 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Signposts.Interval(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v68 = (uint64_t)&v56 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v56 - v14;
  __chkstk_darwin(v13);
  uint64_t v67 = (uint64_t)&v56 - v16;
  unint64_t v17 = (os_unfair_lock_s *)(*(void *)(v1 + 16) + 16LL);
  os_unfair_lock_lock(v17);
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18)
  {
    uint64_t v57 = v17;
    uint64_t v19 = a1;
    uint64_t v20 = (uint64_t *)(v1 + 24);
    uint64_t v21 = v19 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v58 = v19;
    swift_bridgeObjectRetain(v19);
    __n128 v22 = swift_beginAccess(v1 + 24, v74, 0LL, 0LL);
    uint64_t v70 = *(void *)(v7 + 72);
    v22.n128_u64[0] = 136315138LL;
    __n128 v64 = v22;
    uint64_t v62 = v10;
    NSString v63 = (char *)&type metadata for Any + 8;
    unint64_t v59 = 0x80000001000D9520LL;
    unint64_t v60 = (unint64_t)".joinConversation(";
    uint64_t v65 = v3;
    id v66 = v15;
    uint64_t v23 = v67;
    uint64_t v69 = (uint64_t *)(v1 + 24);
    while (1)
    {
      sub_10002FB54(v21, v23);
      uint64_t v24 = *v20;
      if (!*(void *)(*v20 + 16)) {
        goto LABEL_13;
      }
      swift_bridgeObjectRetain(*v20);
      unint64_t v25 = sub_10002F9AC(v23);
      if ((v26 & 1) == 0) {
        break;
      }
      uint64_t v27 = *(void *)(*(void *)(v24 + 56) + 8 * v25);
      swift_retain(v27);
      swift_bridgeObjectRelease(v24);
      swift_beginAccess(v20, &v71, 33LL, 0LL);
      uint64_t v28 = *v20;
      swift_bridgeObjectRetain(*v20);
      unint64_t v29 = sub_10002F9AC(v23);
      char v31 = v30;
      swift_bridgeObjectRelease(v28);
      uint64_t v32 = 0LL;
      if ((v31 & 1) != 0)
      {
        int v33 = v69;
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v69);
        uint64_t v35 = *v33;
        uint64_t v73 = *v33;
        *int v33 = 0x8000000000000000LL;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_100069330();
          uint64_t v35 = v73;
        }

        sub_10002FFE4(*(void *)(v35 + 48) + v29 * v70);
        uint64_t v32 = *(void *)(*(void *)(v35 + 56) + 8 * v29);
        sub_100067BDC(v29, v35);
        uint64_t v36 = *v33;
        *int v33 = v35;
        swift_bridgeObjectRelease(v36);
      }

      swift_endAccess(&v71);
      swift_release(v32);
      uint64_t v23 = v67;
      sub_100030AEC(v67, v27);
      swift_release(v27);
      sub_10002FFE4(v23);
      unint64_t v15 = v66;
LABEL_4:
      uint64_t v20 = v69;
      v21 += v70;
      if (!--v18)
      {
        swift_bridgeObjectRelease(v58);
        unint64_t v17 = v57;
        goto LABEL_21;
      }
    }

    swift_bridgeObjectRelease(v24);
LABEL_13:
    if (qword_100112208 != -1) {
      swift_once(&qword_100112208, sub_10002E384);
    }
    uint64_t v37 = type metadata accessor for Logger(0LL);
    sub_10001C270(v37, (uint64_t)qword_1001134F0);
    uint64_t v38 = sub_10002FB54(v23, (uint64_t)v15);
    char v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      id v41 = v15;
      uint64_t v42 = swift_slowAlloc(12LL, -1LL);
      uint64_t v43 = swift_slowAlloc(32LL, -1LL);
      uint64_t v73 = v43;
      *(_DWORD *)uint64_t v42 = v64.n128_u32[0];
      uint64_t v44 = (uint64_t)v41;
      uint64_t v45 = v68;
      sub_10002FB54(v44, v68);
      sub_10002FB54(v45, (uint64_t)v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1LL, v3) == 1)
      {
        uint64_t v46 = 0xD000000000000014LL;
        unint64_t v47 = v60 | 0x8000000000000000LL;
      }

      else
      {
        __n128 v48 = v61;
        (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v61, v62, v3);
        unint64_t v71 = 0LL;
        unint64_t v72 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(21LL);
        swift_bridgeObjectRelease(v72);
        unint64_t v71 = 0xD000000000000012LL;
        unint64_t v72 = v59;
        v50._uint64_t countAndFlagsBits = UUID.uuidString.getter(v49);
        object = v50._object;
        String.append(_:)(v50);
        swift_bridgeObjectRelease(object);
        v52._uint64_t countAndFlagsBits = 41LL;
        v52._object = (void *)0xE100000000000000LL;
        String.append(_:)(v52);
        uint64_t v46 = v71;
        unint64_t v47 = v72;
        uint64_t v53 = v48;
        uint64_t v10 = v62;
        (*(void (**)(char *, uint64_t))(v4 + 8))(v53, v65);
      }

      sub_10002FFE4(v68);
      *(void *)(v42 + 4) = sub_1000850E4(v46, v47, &v73);
      swift_bridgeObjectRelease(v47);
      uint64_t v54 = (uint64_t)v66;
      sub_10002FFE4((uint64_t)v66);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Unable to find pending interval: %s", (uint8_t *)v42, 0xCu);
      swift_arrayDestroy(v43, 1LL, v63);
      swift_slowDealloc(v43, -1LL, -1LL);
      uint64_t v55 = v42;
      unint64_t v15 = (char *)v54;
      swift_slowDealloc(v55, -1LL, -1LL);

      uint64_t v23 = v67;
      sub_10002FFE4(v67);
      uint64_t v3 = v65;
    }

    else
    {

      sub_10002FFE4((uint64_t)v15);
      sub_10002FFE4(v23);
    }

    goto LABEL_4;
  }

LABEL_21:
  os_unfair_lock_unlock(v17);
}

    sub_10009B844();
    goto LABEL_22;
  }

uint64_t sub_10002F1C8()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for SignpostManager(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime15SignpostManager, a2);
}

uint64_t getEnumTagSinglePayload for Signposts.Event(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for Signposts.Event(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10002F2B0 + 4 * byte_1000C4F08[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10002F2D0 + 4 * byte_1000C4F0D[v4]))();
  }
}

_BYTE *sub_10002F2B0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10002F2D0(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10002F2D8(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10002F2E0(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10002F2E8(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10002F2F0(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t sub_10002F2FC()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for Signposts.Event()
{
  return &type metadata for Signposts.Event;
}

ValueMetadata *type metadata accessor for Signposts()
{
  return &type metadata for Signposts;
}

uint64_t *sub_10002F324(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1LL, v7))
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t sub_10002F3EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1LL, v2);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }
  return result;
}

void *sub_10002F454(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  }

  return a1;
}

void *sub_10002F4F8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  return a1;
}

void *sub_10002F5E8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  }

  return a1;
}

void *sub_10002F68C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  return a1;
}

uint64_t sub_10002F77C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002F788);
}

uint64_t sub_10002F788(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10002F7D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002F7E0);
}

uint64_t sub_10002F7E0(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(a1, v5, a3, v6);
}

uint64_t sub_10002F830(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(a1, 1LL, v2);
}

uint64_t sub_10002F868(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, 1LL, v4);
}

uint64_t type metadata accessor for Signposts.Interval(uint64_t a1)
{
  uint64_t result = qword_100113698;
  if (!qword_100113698) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Signposts.Interval);
  }
  return result;
}

uint64_t sub_10002F8E4(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256LL, *(void *)(result - 8) + 64LL, 1LL);
    return 0LL;
  }

  return result;
}

uint64_t sub_10002F938()
{
  return sub_10001949C(&qword_1001136A8, type metadata accessor for Signposts.Interval, (uint64_t)&unk_1000C4F5C);
}

unint64_t sub_10002F968()
{
  unint64_t result = qword_1001136B0;
  if (!qword_1001136B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000C5054, &type metadata for Signposts.Event);
    atomic_store(result, (unint64_t *)&qword_1001136B0);
  }

  return result;
}

unint64_t sub_10002F9AC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Signposts.Interval(0LL);
  __chkstk_darwin(v8);
  int v10 = (char *)&v15[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Hasher.init(_seed:)(v15, *(void *)(v2 + 40));
  sub_10002FB54(a1, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1uLL);
    uint64_t v11 = sub_10001949C( &qword_1001136D0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v15, v4, v11);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  Swift::Int v12 = Hasher._finalize()();
  return sub_10002FCF8(a1, v12);
}

uint64_t sub_10002FB10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Signposts.Interval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002FB54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Signposts.Interval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10002FB98(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_100030020(a1, a2, v5);
}

unint64_t sub_10002FBFC(uint64_t a1)
{
  uint64_t v3 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return sub_100030100(a1, v3);
}

unint64_t sub_10002FC2C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = sub_10001949C( &qword_1001136D0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10003019C(a1, v7);
}

unint64_t sub_10002FC98(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1000302DC(a1, v4);
}

unint64_t sub_10002FCC8(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100030410(a1, v4);
}

unint64_t sub_10002FCF8(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = a1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v30 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100018A04(&qword_1001136D8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Signposts.Interval(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v29 - v15;
  uint64_t v34 = v2;
  char v17 = *(_BYTE *)(v2 + 32);
  uint64_t v18 = v2 + 64;
  uint64_t v19 = -1LL << v17;
  unint64_t v20 = a2 & ~v19;
  if (((*(void *)(v18 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v20) & 1) != 0)
  {
    uint64_t v31 = ~v19;
    uint64_t v32 = *(void *)(v14 + 72);
    uint64_t v29 = v18;
    while (1)
    {
      sub_10002FB54(*(void *)(v34 + 48) + v32 * v20, (uint64_t)v16);
      uint64_t v21 = (uint64_t)&v9[*(int *)(v7 + 48)];
      sub_10002FB54((uint64_t)v16, (uint64_t)v9);
      sub_10002FB54(v33, v21);
      __n128 v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
      if (v22(v9, 1LL, v4) == 1) {
        break;
      }
      sub_10002FB54((uint64_t)v9, (uint64_t)v13);
      if (v22((char *)v21, 1LL, v4) == 1)
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
LABEL_4:
        sub_10002FFA4((uint64_t)v9);
        goto LABEL_5;
      }

      uint64_t v23 = v7;
      uint64_t v24 = v30;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v30, v21, v4);
      char v25 = static UUID.== infix(_:_:)(v13, v24);
      char v26 = *(void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v27 = v24;
      uint64_t v7 = v23;
      uint64_t v18 = v29;
      v26(v27, v4);
      v26(v13, v4);
      if ((v25 & 1) != 0)
      {
LABEL_12:
        sub_10002FFE4((uint64_t)v9);
        sub_10002FFE4((uint64_t)v16);
        return v20;
      }

      sub_10002FFE4((uint64_t)v9);
LABEL_5:
      sub_10002FFE4((uint64_t)v16);
      unint64_t v20 = (v20 + 1) & v31;
      if (((*(void *)(v18 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v20) & 1) == 0) {
        return v20;
      }
    }

    goto LABEL_4;
  }

  return v20;
}

uint64_t sub_10002FFA4(uint64_t a1)
{
  uint64_t v2 = sub_100018A04(&qword_1001136D8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10002FFE4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Signposts.Interval(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100030020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_100030100(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t sub_10003019C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v18 = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      uint64_t v14 = sub_10001949C( (unint64_t *)&qword_100112E70,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

unint64_t sub_1000302DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_1000303A0(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_1000303DC((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

uint64_t sub_1000303A0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000303DC(uint64_t a1)
{
  return a1;
}

unint64_t sub_100030410(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_1000306EC(0LL, a2);
    id v7 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)(v7, a1);

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)(v10, a1);

        if ((v11 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

uint64_t sub_100030518(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Signposts.Interval(0LL);
  __chkstk_darwin(v8);
  id v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100018A04(&qword_1001136D8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_10002FB54(a1, (uint64_t)v14);
  sub_10002FB54(a2, v15);
  BOOL v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v16((uint64_t)v14, 1LL, v4) != 1)
  {
    sub_10002FB54((uint64_t)v14, (uint64_t)v10);
    if (v16(v15, 1LL, v4) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v15, v4);
      char v17 = static UUID.== infix(_:_:)(v10, v7);
      uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
      v18(v7, v4);
      v18(v10, v4);
      sub_10002FFE4((uint64_t)v14);
      return v17 & 1;
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    goto LABEL_6;
  }

  if (v16(v15, 1LL, v4) != 1)
  {
LABEL_6:
    sub_10002FFA4((uint64_t)v14);
    char v17 = 0;
    return v17 & 1;
  }

  sub_10002FFE4((uint64_t)v14);
  char v17 = 1;
  return v17 & 1;
}

unint64_t sub_1000306EC(uint64_t a1, uint64_t a2)
{
  unint64_t result = qword_100113BA0;
  if (!qword_100113BA0)
  {
    uint64_t v3 = objc_opt_self(&OBJC_CLASS___TUHandle, a2);
    unint64_t result = swift_getObjCClassMetadata(v3);
    atomic_store(result, (unint64_t *)&qword_100113BA0);
  }

  return result;
}

uint64_t sub_100030728(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v38 - v7;
  uint64_t v9 = type metadata accessor for Signposts.Interval(0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v38 - v13;
  uint64_t v15 = type metadata accessor for OSSignposter(0LL);
  uint64_t v45 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  char v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100112210 != -1) {
    swift_once(&qword_100112210, sub_10002EA40);
  }
  uint64_t v18 = sub_10001C270(v15, (uint64_t)qword_100113508);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v17, v18, v15);
  sub_10002FB54(a1, (uint64_t)v14);
  uint64_t v19 = type metadata accessor for UUID(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48LL))(v14, 1LL, v19) == 1)
  {
    uint64_t v20 = "ConversationStarted";
  }

  else
  {
    sub_10002FFE4((uint64_t)v14);
    uint64_t v20 = "JoinConversation";
  }

  uint64_t v21 = sub_10002FB54(a1, (uint64_t)v12);
  uint64_t v22 = static OSSignpostID.exclusive.getter(v21);
  uint64_t v23 = (os_log_s *)OSSignposter.logHandle.getter(v22);
  int v43 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    char v39 = v20;
    os_log_type_t v40 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v40(v6, v8, v2);
    uint64_t v24 = swift_slowAlloc(12LL, -1LL);
    uint64_t v42 = v17;
    char v25 = (uint8_t *)v24;
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v44 = v6;
    uint64_t v27 = v26;
    uint64_t v47 = v26;
    *(_DWORD *)char v25 = 136315138;
    uint64_t v41 = v15;
    unint64_t v28 = sub_10002E4F8();
    unint64_t v30 = v29;
    uint64_t v46 = sub_1000850E4(v28, v29, &v47);
    uint64_t v15 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease(v30);
    uint64_t v31 = sub_10002FFE4((uint64_t)v12);
    os_signpost_id_t v32 = OSSignpostID.rawValue.getter(v31);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v23,  (os_signpost_type_t)v43,  v32,  v39,  "%s",  v25,  0xCu);
    swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v33 = v27;
    uint64_t v6 = v44;
    swift_slowDealloc(v33, -1LL, -1LL);
    uint64_t v34 = v25;
    char v17 = v42;
    swift_slowDealloc(v34, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v40(v6, v8, v2);
  }

  else
  {

    sub_10002FFE4((uint64_t)v12);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  }

  uint64_t v35 = type metadata accessor for OSSignpostIntervalState(0LL);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  uint64_t v36 = OSSignpostIntervalState.init(id:isOpen:)(v6, 1LL);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v17, v15);
  return v36;
}

uint64_t sub_100030AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v4 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v7 = *(void *)(v51 - 8);
  uint64_t v8 = __chkstk_darwin(v51);
  uint64_t v49 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  Swift::String v52 = (char *)&v45 - v10;
  uint64_t v11 = type metadata accessor for Signposts.Interval(0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v45 - v15;
  uint64_t v17 = type metadata accessor for OSSignposter(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100112210 != -1) {
    swift_once(&qword_100112210, sub_10002EA40);
  }
  uint64_t v21 = sub_10001C270(v17, (uint64_t)qword_100113508);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v21, v17);
  sub_10002FB54(a1, (uint64_t)v16);
  uint64_t v22 = type metadata accessor for UUID(0LL);
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48LL))(v16, 1LL, v22);
  uint64_t v50 = v18;
  if (v23 == 1)
  {
    uint64_t v24 = "ConversationStarted";
  }

  else
  {
    sub_10002FFE4((uint64_t)v16);
    uint64_t v24 = "JoinConversation";
  }

  uint64_t v47 = v24;
  uint64_t v25 = sub_10002FB54(a1, (uint64_t)v14);
  uint64_t v26 = (os_log_s *)OSSignposter.logHandle.getter(v25);
  uint64_t v27 = v52;
  uint64_t v28 = OSSignpostIntervalState.signpostID.getter();
  int v46 = static os_signpost_type_t.end.getter(v28);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    __n128 v29 = swift_retain(a2);
    checkForErrorAndConsumeState(state:)(v29);
    swift_release(a2);
    uint64_t v30 = v48;
    if ((*(unsigned int (**)(char *, uint64_t))(v4 + 88))(v6, v48) == enum case for OSSignpostError.doubleEnd(_:))
    {
      char v31 = 0;
      char v32 = 0;
      uint64_t v45 = "[Error] Interval already ended";
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v30);
      uint64_t v45 = "%s";
      char v32 = 2;
      char v31 = 1;
    }

    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    uint64_t v35 = v49;
    uint64_t v48 = v7;
    uint64_t v36 = v51;
    v34(v49, v52, v51);
    uint64_t v37 = swift_slowAlloc(12LL, -1LL);
    uint64_t v38 = swift_slowAlloc(32LL, -1LL);
    uint64_t v54 = v38;
    *(_BYTE *)uint64_t v37 = v32;
    *(_BYTE *)(v37 + 1) = v31;
    *(_WORD *)(v37 + 2) = 2080;
    unint64_t v39 = sub_10002E4F8();
    unint64_t v41 = v40;
    uint64_t v53 = sub_1000850E4(v39, v40, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease(v41);
    uint64_t v42 = sub_10002FFE4((uint64_t)v14);
    os_signpost_id_t v43 = OSSignpostID.rawValue.getter(v42);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v26,  (os_signpost_type_t)v46,  v43,  v47,  v45,  (uint8_t *)v37,  0xCu);
    swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v37, -1LL, -1LL);

    uint64_t v44 = *(void (**)(char *, uint64_t))(v48 + 8);
    v44(v52, v36);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v20, v17);
    return ((uint64_t (*)(char *, uint64_t))v44)(v35, v36);
  }

  else
  {

    sub_10002FFE4((uint64_t)v14);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v27, v51);
    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v20, v17);
  }

uint64_t sub_100030F18(void *a1)
{
  id v2 = [a1 activity];
  id v3 = [v2 bundleIdentifier];

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v6 = v5;

    id v7 = [v1 currentLayout];
    if (v7)
    {
      uint64_t v8 = v7;
      id v9 = [v7 elements];
      unint64_t v11 = sub_10003104C(0LL, v10);
      unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v11);

      swift_bridgeObjectRetain(v6);
      char v13 = sub_100031088(v12, v4, v6);
      swift_bridgeObjectRelease(v12);

      swift_bridgeObjectRelease(v6);
    }

    else
    {
      char v13 = 0;
    }

    swift_bridgeObjectRelease(v6);
  }

  else
  {
    char v13 = 0;
  }

  return v13 & 1;
}

id sub_10003103C()
{
  return [v0 invalidate];
}

unint64_t sub_10003104C(uint64_t a1, uint64_t a2)
{
  unint64_t result = qword_1001137C0;
  if (!qword_1001137C0)
  {
    uint64_t v3 = objc_opt_self(&OBJC_CLASS___FBSDisplayLayoutElement, a2);
    unint64_t result = swift_getObjCClassMetadata(v3);
    atomic_store(result, (unint64_t *)&qword_1001137C0);
  }

  return result;
}

uint64_t sub_100031088(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 >> 62) {
    goto LABEL_22;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v5)
  {
    do
    {
      uint64_t v6 = 4LL;
      while (1)
      {
        id v7 = (v4 & 0xC000000000000001LL) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v4)
           : *(id *)(v4 + 8 * v6);
        uint64_t v8 = v7;
        uint64_t v9 = v6 - 3;
        if (__OFADD__(v6 - 4, 1LL)) {
          break;
        }
        if ([v7 isUIApplicationElement]
          && (id v10 = [v8 bundleIdentifier]) != 0)
        {
          unint64_t v11 = v10;
          uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          uint64_t v14 = v13;

          if (v12 == a2 && v14 == a3)
          {
            uint64_t v18 = v4;
            uint64_t v4 = a3;
            swift_bridgeObjectRelease(v18);

LABEL_20:
            uint64_t v17 = 1LL;
            goto LABEL_27;
          }

          char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, a2, a3, 0LL);

          swift_bridgeObjectRelease(v14);
          if ((v16 & 1) != 0) {
            goto LABEL_20;
          }
        }

        else
        {
        }

        ++v6;
        if (v9 == v5)
        {
          uint64_t v17 = 0LL;
          goto LABEL_27;
        }
      }

      __break(1u);
LABEL_22:
      uint64_t v19 = a3;
      if (v4 < 0) {
        uint64_t v20 = v4;
      }
      else {
        uint64_t v20 = v4 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v4);
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter(v20);
      a3 = v19;
      uint64_t v5 = v21;
    }

    while (v21);
  }

  uint64_t v17 = 0LL;
LABEL_27:
  swift_bridgeObjectRelease(v4);
  return v17;
}

uint64_t sub_100031228()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_1001137C8);
  sub_10001C270(v0, (uint64_t)qword_1001137C8);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0xD000000000000016LL,  0x80000001000C50D0LL);
}

uint64_t sub_1000312A4()
{
  if (qword_1001123C8 != -1) {
    swift_once(&qword_1001123C8, sub_10008CEB8);
  }
  sub_10001C580((uint64_t)&qword_10011A330, (uint64_t)v13);
  id v1 = objc_msgSend((id)objc_opt_self(TUCallCenter, v0), "sharedInstance");
  id v2 = [v1 neighborhoodActivityConduit];

  if (qword_1001122A0 != -1) {
    swift_once(&qword_1001122A0, sub_10004CB40);
  }
  uint64_t v3 = (void *)qword_10011A2B8;
  uint64_t v4 = sub_100021734((uint64_t)v13, v13[3]);
  __chkstk_darwin(v4);
  uint64_t v6 = (void *)((char *)&v13[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v7 + 16))(v6);
  uint64_t v8 = *v6;
  id v9 = v3;
  id v10 = sub_100036010(v8, v2, (uint64_t)v9);

  uint64_t result = sub_10001BFEC(v13);
  qword_10011A220 = (uint64_t)v10;
  return result;
}

void sub_10003140C(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  uint64_t v3 = *(_BYTE **)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    sub_10003147C(v2, v3, v4);
  }

double sub_10003147C(void *a1, _BYTE *a2, int a3)
{
  LODWORD(v105) = a3;
  uint64_t v102 = a2;
  id v104 = a1;
  uint64_t v4 = sub_100018A04(&qword_1001138F0);
  __chkstk_darwin(v4);
  uint64_t v100 = &v93[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v106 = *(uint8_t **)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v101 = &v93[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = sub_100018A04(&qword_100113000);
  __chkstk_darwin(v8);
  id v10 = &v93[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = sub_100018A04(&qword_100112D10);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v97 = &v93[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = __chkstk_darwin(v12);
  char v16 = &v93[-v15];
  __chkstk_darwin(v14);
  uint64_t v18 = &v93[-v17];
  uint64_t v19 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = &v93[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  int v23 = *(void **)(v3 + OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_queue);
  *uint64_t v22 = v23;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v19);
  id v24 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)(v22);
  (*(void (**)(void *, uint64_t))(v20 + 8))(v22, v19);
  if ((v23 & 1) == 0)
  {
    __break(1u);
    goto LABEL_35;
  }

  uint64_t v25 = v3 + OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_conversationState;
  swift_beginAccess(v3 + OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_conversationState, v109, 0LL, 0LL);
  uint64_t v26 = type metadata accessor for SharePlayNoticeManager.ConversationState(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 48);
  uint64_t v103 = v26;
  int v29 = v28(v25, 1LL);
  uint64_t v96 = v3;
  if (v29)
  {
    uint64_t v30 = (void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))*((void *)v106 + 7);
    v30(v18, 1LL, 1LL, v6);
  }

  else
  {
    char v31 = v106;
    (*((void (**)(_BYTE *, uint64_t, uint64_t))v106 + 2))(v18, v25, v6);
    uint64_t v30 = (void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))*((void *)v31 + 7);
    v30(v18, 0LL, 1LL, v6);
  }

  uint64_t v98 = v27;
  int v99 = (_DWORD)v105 - 1;
  if (((_BYTE)v105 - 1) > 1u)
  {
    uint64_t v33 = 1LL;
  }

  else
  {
    id v32 = [v104 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v32);

    uint64_t v33 = 0LL;
  }

  v30(v16, v33, 1LL, v6);
  uint64_t v34 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_10001C3B8((uint64_t)v18, (uint64_t)v10, &qword_100112D10);
  sub_10001C3B8((uint64_t)v16, v34, &qword_100112D10);
  uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((void *)v106 + 6);
  if (v35((uint64_t)v10, 1LL, v6) == 1)
  {
    sub_10001C608((uint64_t)v16, &qword_100112D10);
    sub_10001C608((uint64_t)v18, &qword_100112D10);
    int v36 = v35(v34, 1LL, v6);
    uint64_t v22 = v104;
    if (v36 == 1)
    {
      sub_10001C608((uint64_t)v10, &qword_100112D10);
      char v16 = v102;
      goto LABEL_15;
    }

    goto LABEL_13;
  }

  uint64_t v37 = v97;
  sub_10001C3B8((uint64_t)v10, (uint64_t)v97, &qword_100112D10);
  int v38 = v35(v34, 1LL, v6);
  uint64_t v22 = v104;
  if (v38 == 1)
  {
    sub_10001C608((uint64_t)v16, &qword_100112D10);
    sub_10001C608((uint64_t)v18, &qword_100112D10);
    (*((void (**)(_BYTE *, uint64_t))v106 + 1))(v37, v6);
LABEL_13:
    sub_10001C608((uint64_t)v10, &qword_100113000);
    char v16 = v102;
    goto LABEL_18;
  }

  uint64_t v95 = v28;
  unint64_t v39 = v37;
  unint64_t v40 = v106;
  unint64_t v41 = v101;
  (*((void (**)(_BYTE *, uint64_t, uint64_t))v106 + 4))(v101, v34, v6);
  uint64_t v42 = sub_10001949C( (unint64_t *)&qword_100112E70,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  int v94 = dispatch thunk of static Equatable.== infix(_:_:)(v39, v41, v6, v42);
  uint64_t v43 = v25;
  uint64_t v44 = (void (*)(_BYTE *, uint64_t))*((void *)v40 + 1);
  v44(v41, v6);
  sub_10001C608((uint64_t)v16, &qword_100112D10);
  sub_10001C608((uint64_t)v18, &qword_100112D10);
  uint64_t v45 = v39;
  uint64_t v28 = v95;
  v44(v45, v6);
  uint64_t v25 = v43;
  sub_10001C608((uint64_t)v10, &qword_100112D10);
  char v16 = v102;
  if ((v94 & 1) != 0)
  {
LABEL_15:
    if (qword_100112220 == -1)
    {
LABEL_16:
      uint64_t v46 = type metadata accessor for Logger(0LL);
      sub_10001C270(v46, (uint64_t)qword_1001137C8);
      char v47 = (char)v105;
      sub_10002CA0C(v22, v16, (char)v105);
      id v48 = sub_10002CA0C(v22, v16, v47);
      uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
      os_log_type_t v50 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v52 = swift_slowAlloc(32LL, -1LL);
        v108[0] = v52;
        *(_DWORD *)uint64_t v51 = 136315138;
        v106 = v51 + 4;
        sub_10002CA0C(v22, v16, v47);
        sub_10004C82C((uint64_t)v22, (uint64_t)v16, v47);
        char v53 = v47;
        uint64_t v55 = v54;
        unint64_t v57 = v56;
        sub_10002C9C8(v22, v16, v53);
        uint64_t v107 = sub_1000850E4(v55, v57, v108);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v106, v51 + 12);
        swift_bridgeObjectRelease(v57);
        sub_10002C9C8(v22, v16, v53);
        sub_10002C9C8(v22, v16, v53);
        _os_log_impl( (void *)&_mh_execute_header,  v49,  v50,  "Ignoring sharePlayState change because it is the same as the previous value: %s",  v51,  0xCu);
        swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1LL, -1LL);
        swift_slowDealloc(v51, -1LL, -1LL);
      }

      else
      {
        sub_10002C9C8(v22, v16, v47);
        sub_10002C9C8(v22, v16, v47);
      }

      return result;
    }

LABEL_35:
    swift_once(&qword_100112220, sub_100031228);
    goto LABEL_16;
  }

  if (v46 < 0) {
    unint64_t v72 = v46;
  }
  else {
    unint64_t v72 = v46 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v46);
  char v53 = _CocoaArrayWrapper.endIndex.getter(v72);
  swift_bridgeObjectRelease(v46);
LABEL_23:
  uint64_t v54 = __OFSUB__(v53, 9LL);
  uint64_t v55 = v53 - 9;
  unint64_t v57 = v76;
  unint64_t v56 = v77;
  if (v54)
  {
    __break(1u);
  }

  else if (qword_100112420 == -1)
  {
    goto LABEL_25;
  }

  swift_once(&qword_100112420, sub_10009C924);
LABEL_25:
  uint64_t v58 = *(void *)(qword_10011A378 + 16);
  if (v58)
  {
    sub_10004685C(v55 + 1, *(double *)(qword_10011A378 + 8 * v58 + 24), 1.2, 0.0);
    uint64_t v55 = *v23;
    if (!((unint64_t)*v23 >> 62))
    {
      if (!__OFSUB__(*(void *)((v55 & 0xFFFFFFFFFFFFF8LL) + 0x10), 1LL))
      {
LABEL_28:
        sub_10009FF44();
        unint64_t v60 = v59;
        uint64_t v62 = v61;
        NSString v63 = *(void **)(v22 + v35);
        [v63 setScale:0.1];
        objc_msgSend(v63, "setPosition:", v60, v62);
        __n128 v64 = *(char **)(v22 + v56);
        *(void *)&v64[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_scale] = 0x3FB999999999999ALL;
        sub_100048638();
        [v64 setAlpha:0.0];
        swift_release(v57);
        goto LABEL_33;
      }

      goto LABEL_47;
    }
  }

  else
  {
    __break(1u);
  }

  if (v55 < 0) {
    uint64_t v73 = v55;
  }
  else {
    uint64_t v73 = v55 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v55);
  uint64_t v74 = _CocoaArrayWrapper.endIndex.getter(v73);
  swift_bridgeObjectRelease(v55);
  if (!__OFSUB__(v74, 1LL)) {
    goto LABEL_28;
  }
LABEL_47:
  __break(1u);
LABEL_48:
  swift_once(&qword_100112420, sub_10009C924);
LABEL_30:
  if (*(void *)(qword_10011A378 + 16))
  {
    uint64_t v65 = *(void *)(v22 + v40);
    id v66 = *(double *)(qword_10011A378 + 32);
    [*(id *)(v65 + OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_nameLabel) setAlpha:0.0];
    uint64_t v67 = *(void **)(v22 + v35);
    [v67 setScale:0.01];
    *(void *)(v65 + OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_scale) = 0x3F847AE147AE147BLL;
    sub_100048638();
    uint64_t v69 =  objc_msgSend( (id)objc_opt_self(SKAction, v68),  "scaleTo:delay:mass:stiffness:damping:",  v66,  0.0,  1.0,  185.0,  20.0);
    [v67 runAction:v69];

    uint64_t v70 = swift_allocObject(&unk_1000FBB88, 32LL, 7LL);
    *(void *)(v70 + swift_unknownObjectWeakDestroy(v0 + 16) = v22;
    *(double *)(v70 + 24) = v66;
    swift_retain(v22);
    sub_100049FE0((uint64_t)sub_1000A35B0, v70, 1.0, 185.0, 20.0, 0.0);
    swift_release(v70);
    if ((sub_10009D74C(2u) & 1) == 0) {
      sub_1000A0C2C(_swiftEmptyArrayStorage);
    }
    goto LABEL_33;
  }

  __break(1u);
}

  swift_release(v12);
  uint64_t v7 = v44;
  uint64_t v42 = 1LL << *(_BYTE *)(v12 + 32);
  if (v42 > 63) {
    bzero(v46, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v46 = -1LL << v42;
  }
  *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
LABEL_39:
  swift_release(v12);
  *uint64_t v7 = v14;
}

uint64_t sub_100032024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v58 = a1;
  uint64_t v66 = a2;
  uint64_t v5 = sub_100018A04((uint64_t *)&unk_100113480);
  __chkstk_darwin(v5);
  uint64_t v54 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100018A04(&qword_1001138F8);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v62 = v7;
  uint64_t v63 = v8;
  __chkstk_darwin(v7);
  id v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100018A04(&qword_100113900);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v64 = v11;
  uint64_t v65 = v12;
  __chkstk_darwin(v11);
  uint64_t v55 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for PlaceholderCall.Purpose(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for UUID(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v56 = v18;
  uint64_t v61 = *(void *)(v19 + 64);
  uint64_t v20 = v19;
  uint64_t v59 = v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for ConversationControlsManager(0LL);
  unint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v57(v22, a1, v18);
  type metadata accessor for PlaceholderCallCenter(0LL);
  uint64_t v23 = static PlaceholderCallCenter.shared.getter();
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v17,  enum case for PlaceholderCall.Purpose.tvExpanseNotices(_:),  v14);
  uint64_t v24 = type metadata accessor for PlaceholderCall(0LL);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  uint64_t v25 = PlaceholderCall.init(for:placeholderCallCenter:purpose:)(v22, v23, v17);
  uint64_t v26 = sub_10001949C( &qword_100113908,  (uint64_t (*)(uint64_t))&type metadata accessor for PlaceholderCall,  (uint64_t)&protocol conformance descriptor for PlaceholderCall);
  uint64_t v60 = ConversationControlsManager.__allocating_init(activeCall:)(v25, v26);
  uint64_t v27 = (void *)ConversationControlsManager.noticeCoordinator.getter();
  dispatch thunk of ConversationControlsNoticeCoordinator.$activeNotice.getter();

  uint64_t v28 = v3;
  id v67 = *(id *)(v3 + OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_queue);
  id v29 = v67;
  uint64_t v31 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL, v30);
  uint64_t v32 = (uint64_t)v54;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v54, 1LL, 1LL, v31);
  uint64_t v33 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v34 = sub_100022750( &qword_100113910,  &qword_1001138F8,  (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  uint64_t v35 = sub_100022510( (unint64_t *)&qword_100112E50,  (unint64_t *)&qword_100112DB0,  &OBJC_CLASS___OS_dispatch_queue_ptr,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  id v36 = v29;
  uint64_t v37 = v55;
  uint64_t v38 = v62;
  Publisher.receive<A>(on:options:)(&v67, v32, v62, v33, v34, v35);
  sub_10001C608(v32, (uint64_t *)&unk_100113480);

  (*(void (**)(char *, uint64_t))(v63 + 8))(v10, v38);
  uint64_t v39 = swift_allocObject(&unk_1000F84D8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v39 + 16, v28);
  unint64_t v41 = (void (*)(uint64_t, uint64_t, uint64_t))v57;
  uint64_t v40 = v58;
  uint64_t v42 = v56;
  v57(v22, v58, v56);
  uint64_t v43 = v59;
  uint64_t v44 = *(unsigned __int8 *)(v59 + 80);
  uint64_t v45 = (v44 + 24) & ~v44;
  uint64_t v46 = swift_allocObject(&unk_1000F8500, v45 + v61, v44 | 7);
  *(void *)(v46 + swift_unknownObjectWeakDestroy(v0 + 16) = v39;
  (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v46 + v45, v22, v42);
  uint64_t v47 = sub_100022750( &qword_100113918,  &qword_100113900,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v48 = v64;
  uint64_t v49 = Publisher<>.sink(receiveValue:)(sub_10003618C, v46, v64, v47);
  swift_release(v46);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v37, v48);
  uint64_t v50 = v66;
  v41(v66, v40, v42);
  uint64_t v51 = (int *)type metadata accessor for SharePlayNoticeManager.ConversationState(0LL);
  uint64_t v52 = v50 + v51[7];
  *(void *)(v52 + 32) = 0LL;
  *(_OWORD *)uint64_t v52 = 0u;
  *(_OWORD *)(v52 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v50 + v51[8], 1LL, 1LL, v42);
  *(void *)(v50 + v51[5]) = v60;
  *(void *)(v50 + v51[6]) = v49;
  return result;
}

void sub_1000324B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = (void *)a1;
  uint64_t v5 = sub_100018A04(&qword_100113920);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SessionActionNotice(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100018A04(&qword_1001138F0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for SharePlayNoticeManager.ConversationState(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v48, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (!Strong) {
    return;
  }
  uint64_t v20 = (void *)Strong;
  uint64_t v43 = v11;
  uint64_t v21 = Strong + OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_conversationState;
  swift_beginAccess(Strong + OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_conversationState, v47, 0LL, 0LL);
  sub_10001C3B8(v21, (uint64_t)v14, &qword_1001138F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15) != 1)
  {
    sub_1000361CC((uint64_t)v14, (uint64_t)v18);
    if ((static UUID.== infix(_:_:)(v18, a3) & 1) == 0)
    {
      if (qword_100112220 != -1) {
        swift_once(&qword_100112220, sub_100031228);
      }
      uint64_t v32 = type metadata accessor for Logger(0LL);
      uint64_t v33 = sub_10001C270(v32, (uint64_t)qword_1001137C8);
      uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        id v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v36 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "Ignoring active notice change because the conversation has changed.",  v36,  2u);
        swift_slowDealloc(v36, -1LL, -1LL);
      }

      goto LABEL_21;
    }

    uint64_t v27 = v44;
    sub_10001C3B8((uint64_t)v44, (uint64_t)v45, &qword_100113928);
    if (v46)
    {
      uint64_t v28 = sub_100018A04(&qword_100113930);
      int v29 = swift_dynamicCast(v7, v45, v28, v8, 6LL);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, v29 ^ 1u, 1LL, v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8) != 1)
      {
        __n128 v30 = v43;
        uint64_t v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v43, v7, v8);
        if ((SessionActionNotice.isSharePlayActivitySupported.getter(v31) & 1) == 0)
        {
          if (qword_100112220 != -1) {
            swift_once(&qword_100112220, sub_100031228);
          }
          uint64_t v37 = type metadata accessor for Logger(0LL);
          uint64_t v38 = sub_10001C270(v37, (uint64_t)qword_1001137C8);
          uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
          os_log_type_t v40 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v39, v40))
          {
            unint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)unint64_t v41 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "Ignoring active notice change because the activity isn't supported.",  v41,  2u);
            swift_slowDealloc(v41, -1LL, -1LL);
          }

          (*(void (**)(char *, uint64_t))(v9 + 8))(v30, v8);
          goto LABEL_21;
        }

        (*(void (**)(char *, uint64_t))(v9 + 8))(v30, v8);
LABEL_20:
        sub_1000329C4(v27);

LABEL_21:
        sub_100036210((uint64_t)v18);
        return;
      }
    }

    else
    {
      sub_10001C608((uint64_t)v45, &qword_100113928);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1LL, 1LL, v8);
    }

    sub_10001C608((uint64_t)v7, &qword_100113920);
    goto LABEL_20;
  }

  sub_10001C608((uint64_t)v14, &qword_1001138F0);
  if (qword_100112220 != -1) {
    swift_once(&qword_100112220, sub_100031228);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = sub_10001C270(v22, (uint64_t)qword_1001137C8);
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Ignoring active notice change because we're no longer in a conversation.",  v26,  2u);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {
  }

void sub_1000329C4(void *a1)
{
  uint64_t v2 = v1;
  v109 = a1;
  uint64_t v3 = sub_100018A04(&qword_100112D10);
  __chkstk_darwin(v3);
  uint64_t v106 = (uint64_t)&v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v112 = type metadata accessor for UUID(0LL);
  uint64_t v113 = *(void *)(v112 - 8);
  uint64_t v5 = __chkstk_darwin(v112);
  uint64_t v108 = (uint64_t)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v107 = (uint8_t *)&v103 - v7;
  uint64_t v8 = sub_100018A04(&qword_100113938);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100018A04(&qword_1001138F0);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v111 = (uint64_t)&v103 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v103 - v14;
  uint64_t v16 = type metadata accessor for SharePlayNoticeManager.ConversationState(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v110 = (uint64_t)&v103 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (uint64_t *)((char *)&v103 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v23 = *(void **)(v2 + OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_queue);
  *uint64_t v22 = v23;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v19);
  id v24 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)(v22);
  (*(void (**)(void *, uint64_t))(v20 + 8))(v22, v19);
  if ((v23 & 1) == 0)
  {
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v25 = v2 + OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_conversationState;
  swift_beginAccess(v2 + OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_conversationState, v119, 0LL, 0LL);
  sub_10001C3B8(v25, (uint64_t)v15, &qword_1001138F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16) == 1)
  {
    sub_10001C608((uint64_t)v15, &qword_1001138F0);
    if (qword_100112220 == -1)
    {
LABEL_4:
      uint64_t v26 = type metadata accessor for Logger(0LL);
      uint64_t v27 = sub_10001C270(v26, (uint64_t)qword_1001137C8);
      uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
      os_log_type_t v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        __n128 v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)__n128 v30 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "Ignoring active notice change because we're no longer in a conversation.",  v30,  2u);
        swift_slowDealloc(v30, -1LL, -1LL);
      }

      return;
    }

uint64_t sub_1000334D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v45 = v6;
  uint64_t v46 = v7;
  uint64_t v47 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100018A04((uint64_t *)&unk_100113480);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100018A04((uint64_t *)&unk_100112E30);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v49 = v13;
  uint64_t v50 = v14;
  __chkstk_darwin(v13);
  os_log_type_t v44 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001C3FC( (void *)(v3 + OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_bulletinManager),  *(void *)(v3 + OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_bulletinManager + 24));
  type metadata accessor for PineBoardBulletinManager(0LL, v16);
  uint64_t v48 = (void *)sub_1000657D8(a2, a1);
  uint64_t v17 = *(void **)(v3 + OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_queue);
  uint64_t v43 = v3;
  v51[0] = v17;
  v51[1] = v48;
  uint64_t v19 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL, v18);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v12, 1LL, 1LL, v19);
  id v20 = v17;
  uint64_t v21 = sub_100018A04(&qword_100112E40);
  uint64_t v22 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v23 = sub_100022750(&qword_100112E48, &qword_100112E40, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  uint64_t v24 = sub_100022510( (unint64_t *)&qword_100112E50,  (unint64_t *)&qword_100112DB0,  &OBJC_CLASS___OS_dispatch_queue_ptr,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v51, v12, v21, v22, v23, v24);
  sub_10001C608((uint64_t)v12, (uint64_t *)&unk_100113480);

  uint64_t v25 = swift_allocObject(&unk_1000F84D8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v25 + 16, v3);
  uint64_t v26 = v45;
  uint64_t v27 = v46;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
  uint64_t v29 = a2;
  v28(v9, a2, v45);
  uint64_t v30 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v31 = (v30 + 24) & ~v30;
  uint64_t v32 = v31 + v47;
  uint64_t v33 = v30 | 7;
  uint64_t v34 = swift_allocObject(&unk_1000F8528, v31 + v47, v30 | 7);
  *(void *)(v34 + swift_unknownObjectWeakDestroy(v0 + 16) = v25;
  uint64_t v35 = *(void (**)(uint64_t, char *, uint64_t))(v27 + 32);
  uint64_t v36 = v26;
  v35(v34 + v31, v9, v26);
  uint64_t v37 = swift_allocObject(&unk_1000F84D8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v37 + 16, v43);
  v28(v9, v29, v36);
  uint64_t v38 = swift_allocObject(&unk_1000F8550, v32, v33);
  *(void *)(v38 + swift_unknownObjectWeakDestroy(v0 + 16) = v37;
  v35(v38 + v31, v9, v36);
  uint64_t v39 = sub_100022750( (unint64_t *)&unk_100113B90,  (uint64_t *)&unk_100112E30,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v40 = v49;
  uint64_t v41 = v44;
  Publisher.sinkOnce(_:onError:)(sub_100036338, v34, sub_1000363F0, v38, v49, v39);
  swift_release(v48);
  swift_release(v34);
  swift_release(v38);
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v41, v40);
}

uint64_t sub_100033868(uint64_t *a1, uint64_t a2, uint8_t *a3)
{
  uint64_t v93 = a3;
  uint64_t v94 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v94 - 8);
  uint64_t v6 = __chkstk_darwin(v94);
  uint64_t v89 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v88 = (char *)&v82 - v9;
  __chkstk_darwin(v8);
  uint64_t v92 = (char *)&v82 - v10;
  uint64_t v11 = sub_100018A04(&qword_100113000);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100018A04(&qword_100112D10);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v82 - v18;
  uint64_t v20 = sub_100018A04(&qword_1001138F0);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v91 = (uint64_t)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v82 - v23;
  uint64_t v25 = (int *)type metadata accessor for SharePlayNoticeManager.ConversationState(0LL);
  uint64_t v26 = *((void *)v25 - 1);
  __chkstk_darwin(v25);
  uint64_t v95 = (uint64_t)&v82 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v90 = *a1;
  swift_beginAccess(a2 + 16, v103, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a2 + 16);
  if (result)
  {
    uint64_t v29 = (void *)result;
    uint64_t v30 = result + OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_conversationState;
    swift_beginAccess(result + OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_conversationState, v102, 0LL, 0LL);
    sub_10001C3B8(v30, (uint64_t)v24, &qword_1001138F0);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v26 + 48))(v24, 1LL, v25) == 1)
    {

      return sub_10001C608((uint64_t)v24, &qword_1001138F0);
    }

    uint64_t v31 = (uint64_t)v24;
    uint64_t v32 = v95;
    sub_1000361CC(v31, v95);
    sub_10001C3B8(v32 + v25[7], (uint64_t)&v97, &qword_100113928);
    if (!v98)
    {

      sub_10001C608((uint64_t)&v97, &qword_100113928);
      uint64_t v37 = v32;
      return sub_100036210(v37);
    }

    uint64_t v86 = v30;
    uint64_t v87 = v26;
    sub_100036294(&v97, (uint64_t)v99);
    uint64_t v33 = v32 + v25[8];
    uint64_t v34 = v94;
    uint64_t v84 = *(void (**)(char *, uint8_t *, uint64_t))(v5 + 16);
    v84(v19, v93, v94);
    uint64_t v85 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v85(v19, 0LL, 1LL, v34);
    uint64_t v35 = (uint64_t)&v13[*(int *)(v11 + 48)];
    sub_10001C3B8(v33, (uint64_t)v13, &qword_100112D10);
    sub_10001C3B8((uint64_t)v19, v35, &qword_100112D10);
    uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v36((uint64_t)v13, 1LL, v34) == 1)
    {
      sub_10001C608((uint64_t)v19, &qword_100112D10);
      if (v36(v35, 1LL, v34) == 1)
      {
        sub_10001C608((uint64_t)v13, &qword_100112D10);
LABEL_13:
        uint64_t v83 = v33;
        if (v90 == 1)
        {
          if (qword_100112220 != -1) {
            swift_once(&qword_100112220, sub_100031228);
          }
          uint64_t v44 = type metadata accessor for Logger(0LL);
          sub_10001C270(v44, (uint64_t)qword_1001137C8);
          uint64_t v45 = v88;
          uint64_t v46 = ((uint64_t (*)(char *, uint8_t *, uint64_t))v84)(v88, v93, v34);
          uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
          os_log_type_t v48 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v47, v48))
          {
            uint64_t v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v50 = swift_slowAlloc(32LL, -1LL);
            *(void *)&__int128 v97 = v50;
            *(_DWORD *)uint64_t v49 = 136315138;
            uint64_t v93 = v49 + 4;
            uint64_t v51 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v94, v51);
            unint64_t v54 = v53;
            uint64_t v96 = sub_1000850E4(v52, v53, (uint64_t *)&v97);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v93, v49 + 12);
            __n128 v55 = swift_bridgeObjectRelease(v54);
            (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v45, v94, v55);
            _os_log_impl((void *)&_mh_execute_header, v47, v48, "Bulletin %s activated.", v49, 0xCu);
            swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v50, -1LL, -1LL);
            os_log_type_t v56 = v49;
            uint64_t v34 = v94;
            swift_slowDealloc(v56, -1LL, -1LL);
          }

          else
          {
            (*(void (**)(char *, uint64_t))(v5 + 8))(v45, v34);
          }

          uint64_t v71 = v95;
          id v72 = *(id *)(v95 + v25[5]);
          uint64_t v73 = (void *)ConversationControlsManager.noticeCoordinator.getter();

          ConversationControlsNoticeCoordinator.noticeTapped(notice:completionHandler:)(v99, 0LL, 0LL);
        }

        else
        {
          if (qword_100112220 != -1) {
            swift_once(&qword_100112220, sub_100031228);
          }
          uint64_t v57 = type metadata accessor for Logger(0LL);
          sub_10001C270(v57, (uint64_t)qword_1001137C8);
          uint64_t v58 = v89;
          uint64_t v59 = ((uint64_t (*)(char *, uint8_t *, uint64_t))v84)(v89, v93, v34);
          uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
          os_log_type_t v61 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v60, v61))
          {
            uint64_t v62 = v34;
            uint64_t v63 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v64 = swift_slowAlloc(32LL, -1LL);
            *(void *)&__int128 v97 = v64;
            *(_DWORD *)uint64_t v63 = 136315138;
            uint64_t v94 = (uint64_t)(v63 + 4);
            uint64_t v65 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter(v62, v65);
            unint64_t v68 = v67;
            uint64_t v96 = sub_1000850E4(v66, v67, (uint64_t *)&v97);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v94, v63 + 12);
            __n128 v69 = swift_bridgeObjectRelease(v68);
            uint64_t v70 = *(void (**)(char *, uint64_t, __n128))(v5 + 8);
            v70(v89, v62, v69);
            _os_log_impl((void *)&_mh_execute_header, v60, v61, "Bulletin %s dismissed.", v63, 0xCu);
            swift_arrayDestroy(v64, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v64, -1LL, -1LL);
            swift_slowDealloc(v63, -1LL, -1LL);
          }

          else
          {
            uint64_t v70 = *(void (**)(char *, uint64_t, __n128))(v5 + 8);
            ((void (*)(char *, uint64_t))v70)(v58, v34);

            uint64_t v62 = v34;
          }

          uint64_t v71 = v95;
          id v74 = *(id *)(v95 + v25[5]);
          uint64_t v75 = (void *)ConversationControlsManager.noticeCoordinator.getter();

          uint64_t v76 = v100;
          uint64_t v77 = v101;
          sub_10001C3FC(v99, v100);
          unint64_t v78 = v92;
          dispatch thunk of Notice.uuid.getter(v76, v77);
          ConversationControlsNoticeCoordinator.noticeDismissed(noticeUUID:dismissContext:)(v78, 0LL, 0LL);

          ((void (*)(char *, uint64_t))v70)(v78, v62);
          uint64_t v34 = v62;
        }

        uint64_t v79 = v83;
        sub_10001C608(v83, &qword_100112D10);
        v85((char *)v79, 1LL, 1LL, v34);
        uint64_t v80 = v91;
        sub_1000362AC(v71, v91);
        (*(void (**)(uint64_t, void, uint64_t, int *))(v87 + 56))(v80, 0LL, 1LL, v25);
        uint64_t v81 = v86;
        swift_beginAccess(v86, &v97, 33LL, 0LL);
        sub_1000362F0(v80, v81, &qword_1001138F0);
        swift_endAccess(&v97);

        sub_10001BFEC(v99);
        uint64_t v37 = v71;
        return sub_100036210(v37);
      }
    }

    else
    {
      sub_10001C3B8((uint64_t)v13, (uint64_t)v17, &qword_100112D10);
      if (v36(v35, 1LL, v34) != 1)
      {
        uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 32);
        uint64_t v83 = v33;
        uint64_t v39 = v92;
        v38(v92, v35, v34);
        uint64_t v40 = sub_10001949C( (unint64_t *)&qword_100112E70,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        char v41 = dispatch thunk of static Equatable.== infix(_:_:)(v17, v39, v34, v40);
        uint64_t v42 = *(void (**)(char *, uint64_t))(v5 + 8);
        uint64_t v43 = v39;
        uint64_t v33 = v83;
        v42(v43, v94);
        sub_10001C608((uint64_t)v19, &qword_100112D10);
        v42(v17, v94);
        uint64_t v34 = v94;
        sub_10001C608((uint64_t)v13, &qword_100112D10);
        if ((v41 & 1) != 0) {
          goto LABEL_13;
        }
        goto LABEL_18;
      }

      sub_10001C608((uint64_t)v19, &qword_100112D10);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v17, v34);
    }

    sub_10001C608((uint64_t)v13, &qword_100113000);
LABEL_18:

    sub_10001BFEC(v99);
    uint64_t v37 = v95;
    return sub_100036210(v37);
  }

  return result;
}

uint64_t sub_10003420C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v75 = a3;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v74 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v72 = (uint64_t)&v66 - v8;
  uint64_t v9 = sub_100018A04(&qword_100113000);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100018A04(&qword_100112D10);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v66 - v16;
  uint64_t v18 = sub_100018A04(&qword_1001138F0);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v73 = (uint64_t)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v66 - v21;
  uint64_t v23 = type metadata accessor for SharePlayNoticeManager.ConversationState(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v76 = (uint64_t)&v66 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v80, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a2);
  if (result)
  {
    uint64_t v70 = v7;
    uint64_t v27 = v4;
    uint64_t v28 = result + OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_conversationState;
    uint64_t v29 = (void *)result;
    swift_beginAccess(result + OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_conversationState, v79, 0LL, 0LL);
    uint64_t v71 = v28;
    sub_10001C3B8(v28, (uint64_t)v22, &qword_1001138F0);
    uint64_t v69 = v24;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23) == 1)
    {

      return sub_10001C608((uint64_t)v22, &qword_1001138F0);
    }

    uint64_t v30 = v23;
    id v68 = v29;
    uint64_t v31 = (uint64_t)v22;
    uint64_t v32 = v76;
    sub_1000361CC(v31, v76);
    uint64_t v33 = v32 + *(int *)(v23 + 32);
    uint64_t v34 = v74;
    uint64_t v35 = v27;
    unint64_t v67 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
    v67(v17, v75, v27);
    uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
    v36((uint64_t)v17, 0LL, 1LL, v35);
    uint64_t v37 = (uint64_t)&v11[*(int *)(v9 + 48)];
    sub_10001C3B8(v33, (uint64_t)v11, &qword_100112D10);
    sub_10001C3B8((uint64_t)v17, v37, &qword_100112D10);
    uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
    if (v38((uint64_t)v11, 1LL, v35) == 1)
    {
      sub_10001C608((uint64_t)v17, &qword_100112D10);
      if (v38(v37, 1LL, v35) == 1)
      {
        uint64_t v66 = v36;
        sub_10001C608((uint64_t)v11, &qword_100112D10);
LABEL_11:
        uint64_t v72 = v33;
        if (qword_100112220 != -1) {
          swift_once(&qword_100112220, sub_100031228);
        }
        uint64_t v43 = type metadata accessor for Logger(0LL);
        sub_10001C270(v43, (uint64_t)qword_1001137C8);
        uint64_t v44 = v70;
        uint64_t v45 = ((uint64_t (*)(char *, uint64_t, uint64_t))v67)(v70, v75, v35);
        uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
        os_log_type_t v47 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v46, v47))
        {
          uint64_t v48 = swift_slowAlloc(22LL, -1LL);
          unint64_t v67 = (void (*)(char *, uint64_t, uint64_t))swift_slowAlloc(8LL, -1LL);
          uint64_t v75 = swift_slowAlloc(32LL, -1LL);
          v78[0] = v75;
          *(_DWORD *)uint64_t v48 = 136315394;
          uint64_t v49 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter(v35, v49);
          unint64_t v52 = v51;
          uint64_t v77 = sub_1000850E4(v50, v51, v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v48 + 4, v48 + 12);
          __n128 v53 = swift_bridgeObjectRelease(v52);
          (*(void (**)(char *, uint64_t, __n128))(v34 + 8))(v44, v35, v53);
          *(_WORD *)(v48 + 12) = 2112;
          unint64_t v54 = sub_100022848();
          uint64_t v55 = swift_allocError(&type metadata for BulletinManagerError, v54, 0LL, 0LL);
          uint64_t v56 = _swift_stdlib_bridgeErrorToNSError(v55);
          uint64_t v77 = v56;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v48 + 14, v48 + 22);
          uint64_t v57 = v67;
          *(void *)unint64_t v67 = v56;
          _os_log_impl( (void *)&_mh_execute_header,  v46,  v47,  "Failed to present bulletin %s due to %@.",  (uint8_t *)v48,  0x16u);
          uint64_t v58 = sub_100018A04((uint64_t *)&unk_100112E20);
          swift_arrayDestroy(v57, 1LL, v58);
          swift_slowDealloc(v57, -1LL, -1LL);
          uint64_t v59 = v75;
          swift_arrayDestroy(v75, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v59, -1LL, -1LL);
          swift_slowDealloc(v48, -1LL, -1LL);
        }

        else
        {
          (*(void (**)(char *, uint64_t))(v34 + 8))(v44, v35);
        }

        uint64_t v61 = v69;
        uint64_t v62 = v72;
        sub_10001C608(v72, &qword_100112D10);
        v66(v62, 1LL, 1LL, v35);
        uint64_t v63 = v76;
        uint64_t v64 = v73;
        sub_1000362AC(v76, v73);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v61 + 56))(v64, 0LL, 1LL, v30);
        uint64_t v65 = v71;
        swift_beginAccess(v71, v78, 33LL, 0LL);
        sub_1000362F0(v64, v65, &qword_1001138F0);
        swift_endAccess(v78);

        uint64_t v60 = v63;
        return sub_100036210(v60);
      }
    }

    else
    {
      sub_10001C3B8((uint64_t)v11, (uint64_t)v15, &qword_100112D10);
      if (v38(v37, 1LL, v35) != 1)
      {
        uint64_t v66 = v36;
        uint64_t v39 = v72;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v72, v37, v35);
        uint64_t v40 = sub_10001949C( (unint64_t *)&qword_100112E70,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        char v41 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v39, v35, v40);
        uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
        v42(v39, v35);
        sub_10001C608((uint64_t)v17, &qword_100112D10);
        v42((uint64_t)v15, v35);
        sub_10001C608((uint64_t)v11, &qword_100112D10);
        if ((v41 & 1) != 0) {
          goto LABEL_11;
        }
LABEL_15:

        uint64_t v60 = v76;
        return sub_100036210(v60);
      }

      sub_10001C608((uint64_t)v17, &qword_100112D10);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v35);
    }

    sub_10001C608((uint64_t)v11, &qword_100113000);
    goto LABEL_15;
  }

  return result;
}

void *sub_10003491C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SessionActionNotice(0LL);
  uint64_t v61 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v60 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v62 = (char *)&v59 - v5;
  uint64_t v6 = sub_100018A04(&qword_100113940);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v59 - v10;
  uint64_t v12 = sub_100018A04(&qword_100113948);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v59 - v16;
  uint64_t updated = type metadata accessor for AccountUpdateNotice(0LL);
  uint64_t v19 = *(void *)(updated - 8);
  uint64_t v20 = __chkstk_darwin(updated);
  uint64_t v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v59 - v23;
  sub_10001C580(a1, (uint64_t)v63);
  uint64_t v25 = sub_100018A04(&qword_100113930);
  if (swift_dynamicCast(v24, v63, v25, updated, 0LL))
  {
    uint64_t v26 = v11;
    uint64_t v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v22, v24, updated);
    uint64_t v28 = AccountUpdateNotice.participants.getter(v27);
    uint64_t v29 = *(void *)(v28 + 16);
    uint64_t v30 = v22;
    if (v29)
    {
      uint64_t v31 = v29 - 1;
      uint64_t v32 = type metadata accessor for Participant(0LL);
      uint64_t v33 = *(void *)(v32 - 8);
      uint64_t v34 = (uint64_t)v26;
      (*(void (**)(char *, unint64_t, uint64_t))(v33 + 16))( v26,  v28 + ((*(unsigned __int8 *)(v33 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))
      + *(void *)(v33 + 72) * v31,
        v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v26, 0LL, 1LL, v32);
    }

    else
    {
      uint64_t v32 = type metadata accessor for Participant(0LL);
      uint64_t v34 = (uint64_t)v26;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v26, 1LL, 1LL, v32);
    }

    swift_bridgeObjectRelease(v28);
    type metadata accessor for Participant(0LL);
    uint64_t v45 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v34, 1LL, v32) == 1)
    {
      uint64_t v46 = &qword_100113940;
      uint64_t v47 = v34;
    }

    else
    {
      Participant.remoteIdentifiers.getter();
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v34, v32);
      uint64_t v48 = type metadata accessor for Participant.RemoteIdentifiers(0LL);
      uint64_t v49 = *(void *)(v48 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v17, 1LL, v48) != 1)
      {
        uint64_t v50 = (void *)Participant.RemoteIdentifiers.handle.getter();
        (*(void (**)(char *, uint64_t))(v49 + 8))(v17, v48);
        goto LABEL_17;
      }

      uint64_t v46 = &qword_100113948;
      uint64_t v47 = (uint64_t)v17;
    }

    sub_10001C608(v47, v46);
    uint64_t v50 = 0LL;
LABEL_17:
    __n128 v53 = sub_100034E18(v50);
    unint64_t v55 = v54;

    (*(void (**)(char *, uint64_t))(v19 + 8))(v30, updated);
    goto LABEL_20;
  }

  uint64_t v35 = (uint64_t)v9;
  uint64_t v37 = v60;
  uint64_t v36 = v61;
  uint64_t v38 = v62;
  if (!swift_dynamicCast(v62, v63, v25, v2, 0LL))
  {
    sub_10001BFEC(v63);
    uint64_t v43 = 0LL;
    unint64_t v44 = 0xF000000000000000LL;
LABEL_22:
    sub_10004F8D8();
    __n128 v53 = v57;
    sub_1000227F0(v43, v44);
    sub_1000227F0(v43, v44);
    return v53;
  }

  uint64_t v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 32))(v37, v38, v2);
  SessionActionNotice.participant.getter(v39);
  uint64_t v40 = type metadata accessor for Participant(0LL);
  uint64_t v41 = *(void *)(v40 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v35, 1LL, v40) == 1)
  {
    sub_10001C608(v35, &qword_100113940);
    uint64_t v42 = 0LL;
  }

  else
  {
    Participant.remoteIdentifiers.getter();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v35, v40);
    uint64_t v51 = type metadata accessor for Participant.RemoteIdentifiers(0LL);
    uint64_t v52 = *(void *)(v51 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v15, 1LL, v51) == 1)
    {
      sub_10001C608((uint64_t)v15, &qword_100113948);
      uint64_t v42 = 0LL;
    }

    else
    {
      uint64_t v42 = (void *)Participant.RemoteIdentifiers.handle.getter();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v15, v51);
    }
  }

  __n128 v53 = sub_100034E18(v42);
  unint64_t v55 = v56;

  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v2);
LABEL_20:
  sub_10001BFEC(v63);
  if (v55 >> 60 == 15)
  {
    uint64_t v43 = (uint64_t)v53;
    unint64_t v44 = v55;
    goto LABEL_22;
  }

  return v53;
}

void *sub_100034E18(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_neighborhoodActivityConduit);
  id v3 = a1;
  id v4 = [v2 knownContacts];
  uint64_t v5 = sub_10001C5D0(0LL, (unint64_t *)&qword_100113BA0, &OBJC_CLASS___TUHandle_ptr);
  uint64_t v6 = sub_10001C5D0(0LL, &qword_100115640, &OBJC_CLASS___CNContact_ptr);
  uint64_t v7 = sub_100022510( (unint64_t *)&unk_100113BB0,  (unint64_t *)&qword_100113BA0,  &OBJC_CLASS___TUHandle_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
  uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v4, v5, v6, v7);

  id v9 = v3;
  uint64_t v10 = sub_100089774(v9, v8);

  __n128 v11 = swift_bridgeObjectRelease(v8);
  if (!v10) {
    goto LABEL_7;
  }
  id v12 = objc_msgSend(v10, "imageData", v11.n128_f64[0]);

  if (!v12)
  {
    uint64_t v10 = 0LL;
LABEL_7:
    unint64_t v17 = 0xF000000000000000LL;
    goto LABEL_8;
  }

  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
  unint64_t v15 = v14;

  uint64_t v10 = (void *)sub_10004FBD4(v13, v15);
  unint64_t v17 = v16;
  sub_100022804(v13, v15);
  if (v17 >> 60 == 15)
  {
LABEL_8:
    uint64_t v18 = (UIImage *)static TVContactImageUtilities.placeholderImage.getter(v11);
    uint64_t v19 = UIImagePNGRepresentation(v18);

    if (v19)
    {
      uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);

      sub_1000227F0((uint64_t)v10, v17);
      return (void *)v20;
    }

    sub_1000227F0((uint64_t)v10, v17);
    return 0LL;
  }

  return v10;
}

uint64_t sub_1000350A0()
{
  return type metadata accessor for SharePlayNoticeManager(0LL);
}

uint64_t type metadata accessor for SharePlayNoticeManager(uint64_t a1)
{
  return sub_100020F70(a1, (uint64_t *)&unk_100113838, (uint64_t)&nominal type descriptor for SharePlayNoticeManager);
}

void sub_1000350BC(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1000216E8(319LL, &qword_100113848, type metadata accessor for SharePlayNoticeManager.ConversationState);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    void v4[2] = "(";
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = "(";
    void v4[5] = &unk_1000C5120;
    swift_updateClassMetadata2(a1, 256LL, 6LL, v4, a1 + 80);
  }

uint64_t type metadata accessor for SharePlayNoticeManager.ConversationState(uint64_t a1)
{
  return sub_100020F70( a1,  qword_1001138A8,  (uint64_t)&nominal type descriptor for SharePlayNoticeManager.ConversationState);
}

uint64_t *sub_100035174(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v21);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    uint64_t v8 = *(void *)(v7 - 8);
    id v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    id v12 = *(void **)((char *)a2 + v10);
    *(uint64_t *)((char *)a1 + v10) = (uint64_t)v12;
    uint64_t v13 = *(uint64_t *)((char *)a2 + v11);
    *(uint64_t *)((char *)a1 + v11) = v13;
    uint64_t v14 = a3[7];
    unint64_t v15 = (char *)a1 + v14;
    unint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = *(uint64_t *)((char *)a2 + v14 + 24);
    id v18 = v12;
    __n128 v19 = swift_retain(v13);
    if (v17)
    {
      uint64_t v20 = *((void *)v16 + 4);
      *((void *)v15 + 3) = v17;
      *((void *)v15 + 4) = v20;
      (**(void (***)(char *, char *, uint64_t, __n128))(v17 - 8))(v15, v16, v17, v19);
    }

    else
    {
      __int128 v22 = *((_OWORD *)v16 + 1);
      *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v22;
      *((void *)v15 + 4) = *((void *)v16 + 4);
    }

    uint64_t v23 = a3[8];
    uint64_t v24 = (char *)a1 + v23;
    uint64_t v25 = (char *)a2 + v23;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v25, 1LL, v7))
    {
      uint64_t v26 = sub_100018A04(&qword_100112D10);
      memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
    }

    else
    {
      v9((uint64_t *)v24, (uint64_t *)v25, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v24, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t sub_1000352E4(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  id v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v9(a1, v4);

  swift_release(*(void *)(a1 + a2[6]));
  uint64_t v6 = (void *)(a1 + a2[7]);
  if (v6[3]) {
    sub_10001BFEC(v6);
  }
  uint64_t v7 = a1 + a2[8];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1LL, v4);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v7, v4);
  }
  return result;
}

char *sub_1000353A4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = *(void **)&a2[v9];
  *(void *)&a1[v9] = v11;
  uint64_t v12 = *(void *)&a2[v10];
  *(void *)&a1[v10] = v12;
  uint64_t v13 = a3[7];
  uint64_t v14 = &a1[v13];
  unint64_t v15 = &a2[v13];
  uint64_t v16 = *(void *)&a2[v13 + 24];
  id v17 = v11;
  __n128 v18 = swift_retain(v12);
  if (v16)
  {
    uint64_t v19 = *((void *)v15 + 4);
    *((void *)v14 + 3) = v16;
    *((void *)v14 + 4) = v19;
    (**(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v16 - 8))((uint64_t)v14, (uint64_t)v15, v16, v18);
  }

  else
  {
    __int128 v20 = *((_OWORD *)v15 + 1);
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v20;
    *((void *)v14 + 4) = *((void *)v15 + 4);
  }

  uint64_t v21 = a3[8];
  __int128 v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v23, 1LL, v6))
  {
    uint64_t v24 = sub_100018A04(&qword_100112D10);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    v8(v22, v23, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v22, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_1000354E8(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = *(void **)&a2[v9];
  uint64_t v11 = *(void **)&a1[v9];
  *(void *)&a1[v9] = v10;
  id v12 = v10;

  uint64_t v13 = a3[6];
  uint64_t v14 = *(void *)&a2[v13];
  uint64_t v15 = *(void *)&a1[v13];
  *(void *)&a1[v13] = v14;
  swift_retain(v14);
  swift_release(v15);
  uint64_t v16 = a3[7];
  id v17 = &a1[v16];
  __n128 v18 = &a2[v16];
  uint64_t v19 = *(void *)&a2[v16 + 24];
  if (*(void *)&a1[v16 + 24])
  {
    if (v19)
    {
      sub_1000356A0(v17, v18);
      goto LABEL_8;
    }

    sub_10001BFEC(v17);
  }

  else if (v19)
  {
    *((void *)v17 + 3) = v19;
    *((void *)v17 + 4) = *((void *)v18 + 4);
    (**(void (***)(uint64_t, __int128 *))(v19 - 8))((uint64_t)v17, (__int128 *)v18);
    goto LABEL_8;
  }

  __int128 v20 = *(_OWORD *)v18;
  __int128 v21 = *((_OWORD *)v18 + 1);
  *((void *)v17 + 4) = *((void *)v18 + 4);
  *(_OWORD *)id v17 = v20;
  *((_OWORD *)v17 + 1) = v21;
LABEL_8:
  uint64_t v22 = a3[8];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  int v26 = v25(&a1[v22], 1LL, v6);
  int v27 = v25(v24, 1LL, v6);
  if (!v26)
  {
    if (!v27)
    {
      v8(v23, v24, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v23, v6);
    goto LABEL_13;
  }

  if (v27)
  {
LABEL_13:
    uint64_t v28 = sub_100018A04(&qword_100112D10);
    memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v23, v24, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v23, 0LL, 1LL, v6);
  return a1;
}

void *sub_1000356A0(void *result, void *a2)
{
  if (result != a2)
  {
    unint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        uint64_t result = (void *)swift_release(v11);
        *unint64_t v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          *unint64_t v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          *unint64_t v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

char *sub_100035808(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v9] = *(void *)&a2[v9];
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = &a1[v10];
  uint64_t v13 = &a2[v10];
  __int128 v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  *((void *)v12 + 4) = *((void *)v13 + 4);
  uint64_t v15 = &a1[v11];
  uint64_t v16 = &a2[v11];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v16, 1LL, v6))
  {
    uint64_t v17 = sub_100018A04(&qword_100112D10);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    v8(v15, v16, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v15, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_100035900(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = *(void **)&a1[v9];
  *(void *)&a1[v9] = *(void *)&a2[v9];

  uint64_t v11 = a3[6];
  uint64_t v12 = *(void *)&a1[v11];
  *(void *)&a1[v11] = *(void *)&a2[v11];
  swift_release(v12);
  uint64_t v13 = a3[7];
  __int128 v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  if (*(void *)&a1[v13 + 24]) {
    sub_10001BFEC(v14);
  }
  __int128 v16 = *((_OWORD *)v15 + 1);
  *(_OWORD *)__int128 v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v16;
  *((void *)v14 + 4) = *((void *)v15 + 4);
  uint64_t v17 = a3[8];
  __n128 v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  __int128 v20 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  int v21 = v20(&a1[v17], 1LL, v6);
  int v22 = v20(v19, 1LL, v6);
  if (!v21)
  {
    if (!v22)
    {
      v8(v18, v19, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
    goto LABEL_8;
  }

  if (v22)
  {
LABEL_8:
    uint64_t v23 = sub_100018A04(&qword_100112D10);
    memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v18, v19, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v18, 0LL, 1LL, v6);
  return a1;
}

uint64_t sub_100035A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100035A78);
}

uint64_t sub_100035A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = sub_100018A04(&qword_100112D10);
    uint64_t v10 = a1 + *(int *)(a3 + 32);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
    return v9(v10, a2, v8);
  }

  unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  return (v11 + 1);
}

uint64_t sub_100035B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100035B30);
}

uint64_t sub_100035B30(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return result;
    }

    uint64_t v10 = sub_100018A04(&qword_100112D10);
    uint64_t v12 = a1 + *(int *)(a4 + 32);
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

void sub_100035BD8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[3] = "(";
    sub_1000216E8( 319LL,  (unint64_t *)&unk_100112D80,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    if (v5 <= 0x3F)
    {
      v6[4] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 5LL, v6, a1 + 16);
    }
  }

char *sub_100035C90(uint64_t a1, void *a2, uint64_t a3, char *a4)
{
  ObjectType = (objc_class *)swift_getObjectType(a4);
  uint64_t v9 = sub_100018A04((uint64_t *)&unk_100113480);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100018A04((uint64_t *)&unk_100113B50);
  uint64_t v40 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  __int128 v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v45[3] = type metadata accessor for PineBoardBulletinManager(0LL, v15);
  v45[4] = &off_1000FA160;
  v45[0] = a1;
  v44[3] = type metadata accessor for SharePlayStateManager(0LL, v16);
  v44[4] = &off_1000F93F8;
  v44[0] = a3;
  uint64_t v17 = OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_queue;
  uint64_t v18 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v19 = a4;
  *(void *)&a4[v17] = static OS_dispatch_queue.main.getter(v20);
  int v21 = &v19[OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_conversationState];
  uint64_t v22 = type metadata accessor for SharePlayNoticeManager.ConversationState(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v21, 1LL, 1LL, v22);
  *(void *)&v19[OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_sharePlayStateCancellable] = 0LL;
  sub_10001C580((uint64_t)v45, (uint64_t)&v19[OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_bulletinManager]);
  *(void *)&v19[OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_neighborhoodActivityConduit] = a2;
  sub_10001C580((uint64_t)v44, (uint64_t)&v19[OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_sharePlayStateManager]);
  id v23 = a2;

  v43.receiver = v19;
  v43.super_class = ObjectType;
  uint64_t v24 = (char *)objc_msgSendSuper2(&v43, "init");
  uint64_t v25 = *(void *)(*sub_10001C3FC( &v24[OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_sharePlayStateManager],  *(void *)&v24[OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_sharePlayStateManager + 24])
                  + OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_sharePlayState);
  uint64_t v42 = v25;
  id v41 = *(id *)&v24[OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_queue];
  id v26 = v41;
  uint64_t v28 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL, v27);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v11, 1LL, 1LL, v28);
  swift_retain(v25);
  uint64_t v29 = v24;
  id v30 = v26;
  uint64_t v31 = sub_100018A04((uint64_t *)&unk_100113490);
  uint64_t v32 = sub_100022750( (unint64_t *)&unk_100113B60,  (uint64_t *)&unk_100113490,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  uint64_t v33 = sub_100022510( (unint64_t *)&qword_100112E50,  (unint64_t *)&qword_100112DB0,  &OBJC_CLASS___OS_dispatch_queue_ptr,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(&v41, v11, v31, v18, v32, v33);
  sub_10001C608((uint64_t)v11, (uint64_t *)&unk_100113480);

  swift_release(v42);
  uint64_t v34 = swift_allocObject(&unk_1000F84D8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v34 + 16, v29);
  uint64_t v35 = sub_100022750( (unint64_t *)&unk_100113B70,  (uint64_t *)&unk_100113B50,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v36 = Publisher<>.sink(receiveValue:)(sub_100036180, v34, v12, v35);

  swift_release(v34);
  sub_10001BFEC(v44);
  sub_10001BFEC(v45);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v14, v12);
  uint64_t v37 = *(void *)&v29[OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_sharePlayStateCancellable];
  *(void *)&v29[OBJC_IVAR____TtC8FaceTime22SharePlayNoticeManager_sharePlayStateCancellable] = v36;
  swift_release(v37);
  return v29;
}

char *sub_100036010(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v23 = type metadata accessor for PineBoardBulletinManager(0LL, v7);
  uint64_t v24 = &off_1000FA160;
  v22[0] = a1;
  uint64_t v20 = ObjectType;
  int v21 = &off_1000F93F8;
  v19[0] = a3;
  uint64_t v8 = (char *)objc_allocWithZone((Class)type metadata accessor for SharePlayNoticeManager(0LL));
  uint64_t v9 = sub_100021734((uint64_t)v22, v23);
  __chkstk_darwin(v9);
  unint64_t v11 = (void *)((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  uint64_t v13 = sub_100021734((uint64_t)v19, v20);
  __chkstk_darwin(v13);
  uint64_t v15 = (void *)((char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = sub_100035C90(*v11, a2, *v15, v8);
  sub_10001BFEC(v19);
  sub_10001BFEC(v22);
  return v17;
}

uint64_t sub_10003615C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100036180(uint64_t a1)
{
}

void sub_10003618C(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  sub_1000324B8(a1, *(void *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_1000361CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SharePlayNoticeManager.ConversationState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100036210(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SharePlayNoticeManager.ConversationState(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10003624C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04(&qword_100113928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100036294(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  return a2;
}

uint64_t sub_1000362AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SharePlayNoticeManager.ConversationState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000362F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100018A04(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100036338(uint64_t *a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_100033868(a1, *(void *)(v1 + 16), (uint8_t *)(v1 + ((v3 + 24) & ~v3)));
}

uint64_t sub_10003637C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000363F0(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_10003420C(a1, *(void *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

void *sub_100036430(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    uint64_t v4 = type metadata accessor for AnyCancellable(0LL);
    uint64_t v5 = sub_10001949C( &qword_100113A00,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
    uint64_t result = Set.Iterator.init(_cocoa:)(v26, v3, v4, v5);
    uint64_t v1 = v26[0];
    uint64_t v24 = v26[1];
    uint64_t v7 = v26[2];
    uint64_t v8 = v26[3];
    unint64_t v9 = v26[4];
  }

  else
  {
    uint64_t v10 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v24 = a1 + 56;
    uint64_t v7 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v9 = v12 & *(void *)(a1 + 56);
    uint64_t result = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v8 = 0LL;
  }

  int64_t v13 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_13;
  }
  while (1)
  {
    if (v9)
    {
      uint64_t v14 = (v9 - 1) & v9;
      unint64_t v15 = __clz(__rbit64(v9)) | (v8 << 6);
      uint64_t v16 = v8;
      goto LABEL_32;
    }

    int64_t v21 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      break;
    }
    if (v21 >= v13) {
      return (void *)sub_100022550(v1);
    }
    unint64_t v22 = *(void *)(v24 + 8 * v21);
    uint64_t v16 = v8 + 1;
    if (!v22)
    {
      uint64_t v16 = v8 + 2;
      if (v8 + 2 >= v13) {
        return (void *)sub_100022550(v1);
      }
      unint64_t v22 = *(void *)(v24 + 8 * v16);
      if (!v22)
      {
        uint64_t v16 = v8 + 3;
        if (v8 + 3 >= v13) {
          return (void *)sub_100022550(v1);
        }
        unint64_t v22 = *(void *)(v24 + 8 * v16);
        if (!v22)
        {
          uint64_t v16 = v8 + 4;
          if (v8 + 4 >= v13) {
            return (void *)sub_100022550(v1);
          }
          unint64_t v22 = *(void *)(v24 + 8 * v16);
          if (!v22)
          {
            uint64_t v16 = v8 + 5;
            if (v8 + 5 >= v13) {
              return (void *)sub_100022550(v1);
            }
            unint64_t v22 = *(void *)(v24 + 8 * v16);
            if (!v22)
            {
              uint64_t v23 = v8 + 6;
              while (v13 != v23)
              {
                unint64_t v22 = *(void *)(v24 + 8 * v23++);
                if (v22)
                {
                  uint64_t v16 = v23 - 1;
                  goto LABEL_31;
                }
              }

              return (void *)sub_100022550(v1);
            }
          }
        }
      }
    }

LABEL_31:
    uint64_t v14 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_32:
    uint64_t v20 = *(void *)(*(void *)(v1 + 48) + 8 * v15);
    swift_retain(v20);
    if (!v20) {
      return (void *)sub_100022550(v1);
    }
    while (1)
    {
      AnyCancellable.cancel()();
      uint64_t result = (void *)swift_release(v20);
      uint64_t v8 = v16;
      unint64_t v9 = v14;
      if ((v1 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_13:
      uint64_t v17 = __CocoaSet.Iterator.next()(result);
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v25 = v17;
        uint64_t v19 = type metadata accessor for AnyCancellable(0LL);
        swift_unknownObjectRetain(v18);
        swift_dynamicCast(&v27, &v25, (char *)&type metadata for Swift.AnyObject + 8, v19, 7LL);
        uint64_t v20 = v27;
        swift_unknownObjectRelease(v18);
        uint64_t v16 = v8;
        uint64_t v14 = v9;
        if (v20) {
          continue;
        }
      }

      return (void *)sub_100022550(v1);
    }
  }

  __break(1u);
  return result;
}

  sub_100039D4C(0LL, v96);
  v133 = (void *)static OS_dispatch_queue.main.getter(v132);
  v134 = v166;
  sub_1000A52DC(v167, v166);
  v135 = *(unsigned __int8 *)(v164 + 80);
  v136 = (v135 + 16) & ~v135;
  v137 = swift_allocObject(&unk_1000FBEF8, v136 + v165, v135 | 7);
  sub_1000A53D8(v134, v137 + v136);
  aBlock[4] = (uint64_t)sub_1000A541C;
  v176 = v137;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_100027654;
  void aBlock[3] = (uint64_t)&unk_1000FBF10;
  v138 = _Block_copy(aBlock);
  swift_release(v176);
  v139 = v168;
  static DispatchQoS.unspecified.getter(v140);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  v141 = sub_10001949C( (unint64_t *)&qword_100112930,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v142 = sub_100018A04((uint64_t *)&unk_100112FD0);
  v143 = sub_10001C2E8();
  v144 = v171;
  v145 = v173;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v142, v143, v173, v141);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v139, v144, v138);
  _Block_release(v138);

  (*(void (**)(char *, uint64_t))(v172 + 8))(v144, v145);
  (*(void (**)(char *, uint64_t))(v169 + 8))(v139, v170);
  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v61, v149);
}

    uint64_t v14 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_32:
    uint64_t v20 = *(id *)(*(void *)(v1 + 48) + 8 * v15);
    if (!v20) {
      goto LABEL_39;
    }
    while (1)
    {
      uint64_t v24 = [v20 value];
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      uint64_t v27 = v26;

      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v13);
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100019AE4(0LL, v13[2] + 1LL, 1, v13);
        int64_t v13 = (void *)result;
      }

      uint64_t v29 = v13[2];
      uint64_t v28 = v13[3];
      if (v29 >= v28 >> 1)
      {
        uint64_t result = (uint64_t)sub_100019AE4((void *)(v28 > 1), v29 + 1, 1, v13);
        int64_t v13 = (void *)result;
      }

      v13[2] = v29 + 1;
      id v30 = &v13[2 * v29];
      v30[4] = v25;
      v30[5] = v27;
      uint64_t v7 = v16;
      unint64_t v9 = v14;
      if ((v1 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_13:
      uint64_t v17 = __CocoaSet.Iterator.next()(result);
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v33 = v17;
        uint64_t v19 = sub_10001C5D0(0LL, &qword_100115FF8, &OBJC_CLASS___CHHandle_ptr);
        swift_unknownObjectRetain(v18);
        swift_dynamicCast(&v35, &v33, (char *)&type metadata for Swift.AnyObject + 8, v19, 7LL);
        uint64_t v20 = v35;
        swift_unknownObjectRelease(v18);
        uint64_t v16 = v7;
        uint64_t v14 = v9;
        if (v20) {
          continue;
        }
      }

      goto LABEL_39;
    }
  }

  __break(1u);
  return result;
}

            __break(1u);
            goto LABEL_32;
          }

void sub_1000366D0()
{
  qword_100113950 = 0x4054000000000000LL;
}

id sub_1000366E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___cameraBlurLabeledButtonView;
  uint64_t v4 = *(void **)(v2
                + OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___cameraBlurLabeledButtonView);
  if (v4)
  {
    id v5 = *(id *)(v2
               + OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___cameraBlurLabeledButtonView);
  }

  else
  {
    uint64_t v6 = v2;
    id v7 = sub_1000367F8(a1, a2);
    unint64_t v9 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v8), "mainBundle");
    v18._object = (void *)0xEB00000000656C62LL;
    v10._object = (void *)0x80000001000D9990LL;
    v10._uint64_t countAndFlagsBits = 0xD000000000000010LL;
    v11._uint64_t countAndFlagsBits = 0LL;
    v11._object = (void *)0xE000000000000000LL;
    v18._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    Swift::String v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, v9, v11, v18);

    id v13 = objc_allocWithZone((Class)type metadata accessor for LabeledButtonView(0LL));
    uint64_t v14 = (void *)LabeledButtonView.init(control:text:)(v7, v12._countAndFlagsBits, v12._object);
    unint64_t v15 = *(void **)(v6 + v3);
    *(void *)(v6 + v3) = v14;
    id v5 = v14;

    uint64_t v4 = 0LL;
  }

  id v16 = v4;
  return v5;
}

id sub_1000367F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___cameraBlurButton;
  uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___cameraBlurButton);
  if (!v4)
  {
    uint64_t v6 = v2;
    if (qword_100112230 != -1) {
      swift_once(&qword_100112230, sub_1000366D0);
    }
    double v7 = *(double *)&qword_100113950;
    id v8 = objc_allocWithZone((Class)type metadata accessor for ControlButton(0LL, a2));
    id v9 = sub_1000974D0(0x7669737275632E66LL, 0xE900000000000065LL, 0LL, 0LL, v7);
    [v9 addTarget:v6 action:"didSelectCameraBlurButton" forControlEvents:0x2000];
    id v10 = v9;
    NSString v11 = String._bridgeToObjectiveC()();
    [v10 setAccessibilityIdentifier:v11];

    UIAccessibilityTraits v12 = UIAccessibilityTraitButton;
    if (UIAccessibilityTraitButton)
    {
      if ((UIAccessibilityTraitToggleButton & ~UIAccessibilityTraitButton) == 0) {
        goto LABEL_11;
      }
    }

    else if (!UIAccessibilityTraitToggleButton)
    {
      UIAccessibilityTraits v12 = 0LL;
      goto LABEL_11;
    }

    UIAccessibilityTraits v12 = UIAccessibilityTraitToggleButton | UIAccessibilityTraitButton;
LABEL_11:
    id v5 = v10;
    [v5 setAccessibilityTraits:v12];
    id v13 = *(void **)(v6 + v3);
    *(void *)(v6 + v3) = v5;

    uint64_t v4 = 0LL;
    goto LABEL_12;
  }

  id v5 = *(id *)(v2 + OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___cameraBlurButton);
LABEL_12:
  id v14 = v4;
  return v5;
}

id sub_100036970(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___cinematicFramingLabeledButtonView;
  uint64_t v4 = *(void **)(v2
                + OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___cinematicFramingLabeledButtonView);
  if (v4)
  {
    id v5 = *(id *)(v2
               + OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___cinematicFramingLabeledButtonView);
  }

  else
  {
    uint64_t v6 = v2;
    id v7 = sub_100036A88(a1, a2);
    id v9 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v8), "mainBundle");
    v18._object = (void *)0xEB00000000656C62LL;
    v10._object = (void *)0x80000001000D9950LL;
    v10._uint64_t countAndFlagsBits = 0xD000000000000016LL;
    v11._uint64_t countAndFlagsBits = 0LL;
    v11._object = (void *)0xE000000000000000LL;
    v18._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    Swift::String v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, v9, v11, v18);

    id v13 = objc_allocWithZone((Class)type metadata accessor for LabeledButtonView(0LL));
    id v14 = (void *)LabeledButtonView.init(control:text:)(v7, v12._countAndFlagsBits, v12._object);
    unint64_t v15 = *(void **)(v6 + v3);
    *(void *)(v6 + v3) = v14;
    id v5 = v14;

    uint64_t v4 = 0LL;
  }

  id v16 = v4;
  return v5;
}

id sub_100036A88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___cinematicFramingButton;
  uint64_t v4 = *(void **)(v2
                + OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___cinematicFramingButton);
  if (!v4)
  {
    uint64_t v6 = v2;
    if (qword_100112230 != -1) {
      swift_once(&qword_100112230, sub_1000366D0);
    }
    double v7 = *(double *)&qword_100113950;
    id v8 = objc_allocWithZone((Class)type metadata accessor for ControlButton(0LL, a2));
    id v9 = sub_1000974D0(0xD000000000000016LL, 0x80000001000D9910LL, 0LL, 0LL, v7);
    [v9 addTarget:v6 action:"didSelectCinematicFramingButton" forControlEvents:0x2000];
    id v10 = v9;
    NSString v11 = String._bridgeToObjectiveC()();
    [v10 setAccessibilityIdentifier:v11];

    UIAccessibilityTraits v12 = UIAccessibilityTraitButton;
    if (UIAccessibilityTraitButton)
    {
      if ((UIAccessibilityTraitToggleButton & ~UIAccessibilityTraitButton) == 0) {
        goto LABEL_11;
      }
    }

    else if (!UIAccessibilityTraitToggleButton)
    {
      UIAccessibilityTraits v12 = 0LL;
      goto LABEL_11;
    }

    UIAccessibilityTraits v12 = UIAccessibilityTraitToggleButton | UIAccessibilityTraitButton;
LABEL_11:
    id v5 = v10;
    [v5 setAccessibilityTraits:v12];
    id v13 = *(void **)(v6 + v3);
    *(void *)(v6 + v3) = v5;

    uint64_t v4 = 0LL;
    goto LABEL_12;
  }

  id v5 = *(id *)(v2
             + OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___cinematicFramingButton);
LABEL_12:
  id v14 = v4;
  return v5;
}

id sub_100036C08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___studioLightLabeledButtonView;
  uint64_t v4 = *(void **)(v2
                + OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___studioLightLabeledButtonView);
  if (v4)
  {
    id v5 = *(id *)(v2
               + OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___studioLightLabeledButtonView);
  }

  else
  {
    uint64_t v6 = v2;
    id v7 = sub_100036D20(a1, a2);
    id v9 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v8), "mainBundle");
    v18._object = (void *)0xEB00000000656C62LL;
    v10._object = (void *)0x80000001000D98F0LL;
    v10._uint64_t countAndFlagsBits = 0xD000000000000011LL;
    v11._uint64_t countAndFlagsBits = 0LL;
    v11._object = (void *)0xE000000000000000LL;
    v18._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    Swift::String v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, v9, v11, v18);

    id v13 = objc_allocWithZone((Class)type metadata accessor for LabeledButtonView(0LL));
    id v14 = (void *)LabeledButtonView.init(control:text:)(v7, v12._countAndFlagsBits, v12._object);
    unint64_t v15 = *(void **)(v6 + v3);
    *(void *)(v6 + v3) = v14;
    id v5 = v14;

    uint64_t v4 = 0LL;
  }

  id v16 = v4;
  return v5;
}

id sub_100036D20(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___studioLightButton;
  uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___studioLightButton);
  if (!v4)
  {
    uint64_t v6 = v2;
    if (qword_100112230 != -1) {
      swift_once(&qword_100112230, sub_1000366D0);
    }
    double v7 = *(double *)&qword_100113950;
    id v8 = objc_allocWithZone((Class)type metadata accessor for ControlButton(0LL, a2));
    id v9 = sub_1000974D0(1700951395LL, 0xE400000000000000LL, 0x6C69662E65627563LL, 0xE90000000000006CLL, v7);
    [v9 addTarget:v6 action:"didSelectStudioLightButton" forControlEvents:0x2000];
    id v10 = v9;
    NSString v11 = String._bridgeToObjectiveC()();
    [v10 setAccessibilityIdentifier:v11];

    UIAccessibilityTraits v12 = UIAccessibilityTraitButton;
    if (UIAccessibilityTraitButton)
    {
      if ((UIAccessibilityTraitToggleButton & ~UIAccessibilityTraitButton) == 0) {
        goto LABEL_11;
      }
    }

    else if (!UIAccessibilityTraitToggleButton)
    {
      UIAccessibilityTraits v12 = 0LL;
      goto LABEL_11;
    }

    UIAccessibilityTraits v12 = UIAccessibilityTraitToggleButton | UIAccessibilityTraitButton;
LABEL_11:
    id v5 = v10;
    [v5 setAccessibilityTraits:v12];
    id v13 = *(void **)(v6 + v3);
    *(void *)(v6 + v3) = v5;

    uint64_t v4 = 0LL;
    goto LABEL_12;
  }

  id v5 = *(id *)(v2 + OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___studioLightButton);
LABEL_12:
  id v14 = v4;
  return v5;
}

id sub_100036E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___reactionsLabeledButtonView;
  uint64_t v4 = *(void **)(v2
                + OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___reactionsLabeledButtonView);
  if (v4)
  {
    id v5 = *(id *)(v2
               + OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___reactionsLabeledButtonView);
  }

  else
  {
    uint64_t v6 = v2;
    id v7 = sub_100036FBC(a1, a2);
    id v9 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v8), "mainBundle");
    v18._object = (void *)0xEB00000000656C62LL;
    v10._uint64_t countAndFlagsBits = 0x4145525F534F5654LL;
    v10._object = (void *)0xEE00534E4F495443LL;
    v11._uint64_t countAndFlagsBits = 0LL;
    v11._object = (void *)0xE000000000000000LL;
    v18._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    Swift::String v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, v9, v11, v18);

    id v13 = objc_allocWithZone((Class)type metadata accessor for LabeledButtonView(0LL));
    id v14 = (void *)LabeledButtonView.init(control:text:)(v7, v12._countAndFlagsBits, v12._object);
    unint64_t v15 = *(void **)(v6 + v3);
    *(void *)(v6 + v3) = v14;
    id v5 = v14;

    uint64_t v4 = 0LL;
  }

  id v16 = v4;
  return v5;
}

id sub_100036FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___reactionsButton;
  uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___reactionsButton);
  if (!v4)
  {
    uint64_t v6 = v2;
    if (qword_100112230 != -1) {
      swift_once(&qword_100112230, sub_1000366D0);
    }
    double v7 = *(double *)&qword_100113950;
    id v8 = objc_allocWithZone((Class)type metadata accessor for ControlButton(0LL, a2));
    id v9 = sub_1000974D0(0xD000000000000013LL, 0x80000001000D9870LL, 0xD000000000000018LL, 0x80000001000D9890LL, v7);
    [v9 addTarget:v6 action:"didSelectReactionsButton" forControlEvents:0x2000];
    id v10 = v9;
    NSString v11 = String._bridgeToObjectiveC()();
    [v10 setAccessibilityIdentifier:v11];

    UIAccessibilityTraits v12 = UIAccessibilityTraitButton;
    if (UIAccessibilityTraitButton)
    {
      if ((UIAccessibilityTraitToggleButton & ~UIAccessibilityTraitButton) == 0) {
        goto LABEL_11;
      }
    }

    else if (!UIAccessibilityTraitToggleButton)
    {
      UIAccessibilityTraits v12 = 0LL;
      goto LABEL_11;
    }

    UIAccessibilityTraits v12 = UIAccessibilityTraitToggleButton | UIAccessibilityTraitButton;
LABEL_11:
    id v5 = v10;
    [v5 setAccessibilityTraits:v12];
    id v13 = *(void **)(v6 + v3);
    *(void *)(v6 + v3) = v5;

    uint64_t v4 = 0LL;
    goto LABEL_12;
  }

  id v5 = *(id *)(v2 + OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___reactionsButton);
LABEL_12:
  id v14 = v4;
  return v5;
}

id sub_100037144()
{
  uint64_t v1 = OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___stackView;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___stackView);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___stackView);
  }

  else
  {
    id v4 = sub_1000371A0();
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0LL;
  }

  id v6 = v2;
  return v3;
}

id sub_1000371A0()
{
  id v0 = [objc_allocWithZone(UIStackView) init];
  [v0 setAxis:0];
  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v0 setDistribution:3];
  [v0 setSpacing:50.0];
  id v1 = v0;
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 setAccessibilityIdentifier:v2];

  return v1;
}

id sub_10003726C()
{
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___cameraBlurLabeledButtonView] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___cameraBlurButton] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___cinematicFramingLabeledButtonView] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___cinematicFramingButton] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___studioLightLabeledButtonView] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___studioLightButton] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___reactionsLabeledButtonView] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___reactionsButton] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___stackView] = 0LL;
  id v1 = v0;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_1000B5188((uint64_t)_swiftEmptyArrayStorage);
  }

  else
  {
    NSString v2 = &_swiftEmptySetSingleton;
  }

  *(void *)&v1[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController_cancellables] = v2;
  v1[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController_isHiding] = 0;
  id v3 = &v1[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController_viewModel];
  *(_DWORD *)id v3 = 33686018;
  *((void *)v3 + 1) = 0LL;

  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for CameraEffectsControlsViewController(v4, v5);
  return objc_msgSendSuper2(&v7, "initWithNibName:bundle:", 0, 0);
}

id sub_1000373AC()
{
  id v1 = &v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController_cancellables];
  swift_beginAccess(&v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController_cancellables], v9, 1LL, 0LL);
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = swift_bridgeObjectRetain(*(void *)v1);
  sub_100036430(v3);
  swift_bridgeObjectRelease(v2);
  uint64_t v4 = *(void *)v1;
  *(void *)id v1 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v4);
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for CameraEffectsControlsViewController(v5, v6);
  return objc_msgSendSuper2(&v8, "dealloc");
}

void sub_100037624()
{
  id v1 = [v0 view];
  if (!v1)
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v2 = v1;
  id v3 = sub_100037144();
  [v2 addSubview:v3];

  uint64_t v4 = sub_100018A04(&qword_1001142B0);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C5180;
  id v6 = sub_100037144();
  id v7 = [v6 topAnchor];

  id v8 = [v0 view];
  if (!v8)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  id v9 = v8;
  id v10 = [v8 topAnchor];

  id v11 = [v7 constraintEqualToAnchor:v10];
  *(void *)(v5 + 32) = v11;
  id v12 = sub_100037144();
  id v13 = [v12 bottomAnchor];

  id v14 = [v0 view];
  if (!v14)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  unint64_t v15 = v14;
  id v16 = [v14 bottomAnchor];

  id v17 = [v13 constraintEqualToAnchor:v16];
  *(void *)(v5 + 40) = v17;
  id v18 = sub_100037144();
  id v19 = [v18 leadingAnchor];

  id v20 = [v0 view];
  if (!v20)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  int64_t v21 = v20;
  id v22 = [v20 leadingAnchor];

  id v23 = [v19 constraintEqualToAnchor:v22];
  *(void *)(v5 + 4_Block_object_dispose(va, 8) = v23;
  id v24 = sub_100037144();
  id v25 = [v24 trailingAnchor];

  id v26 = [v0 view];
  if (!v26)
  {
LABEL_13:
    __break(1u);
    return;
  }

  uint64_t v28 = v26;
  uint64_t v29 = (void *)objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, v27);
  id v30 = [v28 trailingAnchor];

  id v31 = [v25 constraintEqualToAnchor:v30];
  *(void *)(v5 + 56) = v31;
  id v32 = sub_100037144();
  id v33 = [v32 heightAnchor];

  if (qword_100112230 != -1) {
    swift_once(&qword_100112230, sub_1000366D0);
  }
  id v34 = [v33 constraintEqualToConstant:*(double *)&qword_100113950];

  *(void *)(v5 + 64) = v34;
  specialized Array._endMutation()(v35);
  sub_10001C5D0(0LL, (unint64_t *)&qword_100113120, &OBJC_CLASS___NSLayoutConstraint_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v29, "activateConstraints:", isa, swift_bridgeObjectRelease(v5).n128_f64[0]);
}

void sub_1000379C4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5 = a3;
  int v6 = BYTE1(a3);
  int v7 = BYTE2(a3);
  else {
    BOOL v8 = a3 == 2;
  }
  if ((a1 & 0xFF00) == 0x200) {
    BOOL v9 = BYTE1(a3) != 2;
  }
  else {
    BOOL v9 = BYTE1(a3) == 2;
  }
  if ((a1 & 0xFF0000) == 0x20000) {
    BOOL v10 = BYTE2(a3) != 2;
  }
  else {
    BOOL v10 = BYTE2(a3) == 2;
  }
  unsigned int v11 = a3 & 0xFF000000;
  if (BYTE3(a1) == 2)
  {
    if (v11 != 0x2000000) {
      goto LABEL_15;
    }
  }

  else if (v11 == 0x2000000)
  {
    goto LABEL_15;
  }

  if (!v10 && !v8 && !v9)
  {
    int v31 = 0;
    goto LABEL_26;
  }

LABEL_19:
  if (v11 != 0x2000000)
  {
    id v28 = sub_100037144();
    id v30 = sub_100036E9C((uint64_t)v28, v29);
    [v28 addArrangedSubview:v30];
  }

  int v31 = 1;
LABEL_26:
  if (v6 == 2)
  {
    if (v5 == 2) {
      goto LABEL_28;
    }
  }

  else
  {
    id v45 = sub_1000367F8(a1, a2);
    [v45 setSelected:(a3 >> 8) & 1];

    if (v5 == 2)
    {
LABEL_28:
      if (v7 == 2) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }
  }

  id v46 = sub_100036A88(a1, a2);
  [v46 setSelected:a3 & 1];

  if (v7 != 2)
  {
LABEL_29:
    id v38 = sub_100036D20(a1, a2);
    [v38 setSelected:HIWORD(a3) & 1];
  }

uint64_t sub_100037E9C()
{
  uint64_t v0 = sub_100018A04((uint64_t *)&unk_100113480);
  __chkstk_darwin(v0);
  uint64_t v70 = (char *)&v57 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = type metadata accessor for NSNotificationCenter.Publisher(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v71 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  int v7 = (char *)&v57 - v6;
  uint64_t v8 = sub_100018A04(&qword_1001139E0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  id v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  id v15 = (char *)&v57 - v14;
  __chkstk_darwin(v13);
  uint64_t v59 = (char *)&v57 - v16;
  uint64_t v72 = sub_100018A04(&qword_1001139E8);
  uint64_t v66 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v69 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter, v18);
  id v20 = [v19 defaultCenter];
  NSNotificationCenter.publisher(for:object:)(TUVideoDeviceControllerDidStartPreviewNotification, 0LL);

  id v21 = [v19 defaultCenter];
  uint64_t v22 = v71;
  NSNotificationCenter.publisher(for:object:)(TUVideoDeviceControllerCinematicFramingEnabledChangedNotification, 0LL);

  uint64_t v67 = sub_10001949C( &qword_1001130D8,  (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher,  (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  Publisher.merge(with:)(v22, v2, v67);
  uint64_t v23 = *(double (**)(char *, uint64_t))(v3 + 8);
  v23(v22, v2);
  v23(v7, v2);
  id v63 = v19;
  id v24 = [v19 defaultCenter];
  NSNotificationCenter.publisher(for:object:)( TUVideoDeviceControllerCinematicFramingAvailabilityChangedNotification,  0LL);

  Publishers.MergeMany.merge(with:)(v7, v8);
  v23(v7, v2);
  id v25 = *(void (**)(char *, uint64_t))(v9 + 8);
  v25(v12, v8);
  uint64_t v26 = v25;
  id v27 = [v19 defaultCenter];
  NSNotificationCenter.publisher(for:object:)(TUVideoDeviceControllerCameraBlurEnabledChangedNotification, 0LL);

  id v28 = v59;
  Publishers.MergeMany.merge(with:)(v7, v8);
  v23(v7, v2);
  v26(v15, v8);
  uint64_t v29 = v26;
  uint64_t v62 = v26;
  uint64_t v30 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v57 = v30;
  v73[0] = (id)static OS_dispatch_queue.main.getter(v31);
  uint64_t v33 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL, v32);
  uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL);
  uint64_t v65 = v33;
  uint64_t v34 = (uint64_t)v70;
  v64(v70, 1LL, 1LL, v33);
  uint64_t v35 = sub_100022750( &qword_1001139F0,  &qword_1001139E0,  (uint64_t)&protocol conformance descriptor for Publishers.MergeMany<A>);
  uint64_t v61 = v35;
  unint64_t v60 = sub_10003862C();
  uint64_t v36 = v69;
  Publisher.receive<A>(on:options:)(v73, v34, v8, v30, v35, v60);
  sub_100038684(v34);

  v29(v28, v8);
  uint64_t v37 = swift_allocObject(&unk_1000F8578, 24LL, 7LL);
  id v38 = v68;
  *(void *)(v37 + swift_unknownObjectWeakDestroy(v0 + 16) = v68;
  uint64_t v39 = sub_100022750( &qword_1001139F8,  &qword_1001139E8,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v58 = v39;
  uint64_t v40 = v38;
  uint64_t v41 = v72;
  uint64_t v42 = Publisher<>.sink(receiveValue:)(sub_1000388A4, v37, v72, v39);
  swift_release(v37);
  id v68 = *(void (**)(void, void))(v66 + 8);
  v68(v36, v41);
  uint64_t v43 = &v40[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController_cancellables];
  swift_beginAccess(&v40[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController_cancellables], v73, 33LL, 0LL);
  AnyCancellable.store(in:)(v43);
  swift_endAccess(v73);
  swift_release(v42);
  id v44 = v63;
  id v45 = [v63 defaultCenter];
  NSNotificationCenter.publisher(for:object:)(TUVideoDeviceControllerStudioLightEnabledChangedNotification, 0LL);

  id v46 = [v44 defaultCenter];
  uint64_t v47 = v71;
  NSNotificationCenter.publisher(for:object:)(TUVideoDeviceControllerReactionEffectsEnabledChangedNotification, 0LL);

  Publisher.merge(with:)(v47, v2, v67);
  v23(v47, v2);
  v48.n128_f64[0] = v23(v7, v2);
  uint64_t v49 = v57;
  v73[0] = (id)static OS_dispatch_queue.main.getter(v48);
  uint64_t v50 = (uint64_t)v70;
  v64(v70, 1LL, 1LL, v65);
  uint64_t v51 = v69;
  Publisher.receive<A>(on:options:)(v73, v50, v8, v49, v61, v60);
  sub_100038684(v50);

  v62(v28, v8);
  uint64_t v52 = swift_allocObject(&unk_1000F85A0, 24LL, 7LL);
  *(void *)(v52 + swift_unknownObjectWeakDestroy(v0 + 16) = v40;
  __n128 v53 = v40;
  uint64_t v54 = v72;
  uint64_t v55 = Publisher<>.sink(receiveValue:)(sub_1000386E8, v52, v72, v58);
  swift_release(v52);
  v68(v51, v54);
  swift_beginAccess(v43, v73, 33LL, 0LL);
  AnyCancellable.store(in:)(v43);
  swift_endAccess(v73);
  return swift_release(v55);
}

void sub_100038504(uint64_t a1, uint64_t a2)
{
  id v3 = objc_msgSend((id)objc_opt_self(TUCallCenter, a2), "sharedInstance");
  id v4 = [v3 videoDeviceController];

  id v5 = v4;
  LODWORD(v4) = sub_10003B1BC(v5);
  int v7 = v6;

  uint64_t v8 = a2 + OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController_viewModel;
  uint64_t v9 = *(unsigned int *)(a2 + OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController_viewModel);
  uint64_t v10 = *(void **)(a2 + OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController_viewModel + 8);
  *(_DWORD *)uint64_t v8 = (_DWORD)v4;
  *(void *)(v8 + _Block_object_dispose(va, 8) = v7;
  id v12 = v7;
  sub_1000379C4(v9, v11, v4);
}

uint64_t type metadata accessor for CameraEffectsControlsViewController(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime35CameraEffectsControlsViewController, a2);
}

unint64_t sub_10003862C()
{
  unint64_t result = qword_100112E50;
  if (!qword_100112E50)
  {
    uint64_t v1 = sub_10001C5D0(255LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue, v1);
    atomic_store(result, (unint64_t *)&qword_100112E50);
  }

  return result;
}

uint64_t sub_100038684(uint64_t a1)
{
  uint64_t v2 = sub_100018A04((uint64_t *)&unk_100113480);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000386C4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000386E8(uint64_t a1)
{
}

void sub_100038700()
{
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___cameraBlurLabeledButtonView] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___cameraBlurButton] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___cinematicFramingLabeledButtonView] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___cinematicFramingButton] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___studioLightLabeledButtonView] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___studioLightButton] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___reactionsLabeledButtonView] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___reactionsButton] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController____lazy_storage___stackView] = 0LL;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_1000B5188((uint64_t)_swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v1 = &_swiftEmptySetSingleton;
  }

  *(void *)&v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController_cancellables] = v1;
  v0[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController_isHiding] = 0;

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/CameraEffectsControlsViewController.swift",  50LL,  2LL,  87LL,  0);
  __break(1u);
}

uint64_t sub_100038818()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10003883C()
{
  double v1 = *(double *)(v0 + 24);
  id v2 = sub_100037144();
  [v2 setAlpha:v1];
}

uint64_t sub_10003888C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003889C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

char *sub_1000388AC(void *a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v37 = a2;
  id v38 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v2);
  uint64_t v36 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v4 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v10);
  id v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = OBJC_IVAR____TtC8FaceTime36ScreenSharingContainerViewController_observerQueue;
  v34[1] = sub_100039D4C(0LL, v13);
  uint64_t v14 = v3;
  static DispatchQoS.unspecified.getter(v14);
  uint64_t v41 = _swiftEmptyArrayStorage;
  uint64_t v15 = sub_100039E60( (unint64_t *)&qword_100113130,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v16 = sub_100018A04((uint64_t *)&unk_100112DC0);
  uint64_t v17 = sub_100022750( (unint64_t *)&qword_100113140,  (uint64_t *)&unk_100112DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v16, v17, v7, v15);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v36);
  uint64_t v18 = v6;
  uint64_t v19 = v37;
  uint64_t v20 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000045LL,  0x80000001000D9AB0LL,  v12,  v9,  v18,  0LL);
  *(void *)&v3[v35] = v20;
  uint64_t v21 = OBJC_IVAR____TtC8FaceTime36ScreenSharingContainerViewController_observers;
  *(void *)&v14[v21] = objc_msgSend((id)objc_opt_self( NSHashTable,  v22), "weakObjectsHashTable");
  id v23 = objc_allocWithZone((Class)type metadata accessor for ScreenSharingViewController(0LL));
  id v24 = v38;
  swift_unknownObjectRetain(v19);
  *(void *)&v14[OBJC_IVAR____TtC8FaceTime36ScreenSharingContainerViewController_screenSharingViewController] = ScreenSharingViewController.init(call:monitor:)(v24, v19);

  v40.receiver = v14;
  v40.super_class = ObjectType;
  id v25 = (char *)objc_msgSendSuper2(&v40, "initWithNibName:bundle:", 0, 0);
  uint64_t v26 = *(void **)&v25[OBJC_IVAR____TtC8FaceTime36ScreenSharingContainerViewController_screenSharingViewController];
  uint64_t v28 = sub_100039E60( &qword_100113A50,  v27,  (uint64_t (*)(uint64_t))type metadata accessor for ScreenSharingContainerViewController,  (uint64_t)&unk_1000C51F0);
  uint64_t v29 = v25;
  id v30 = v26;
  ScreenSharingViewController.delegate.setter(v25, v28);

  if (qword_100112380 != -1) {
    swift_once(&qword_100112380, sub_100080AF0);
  }
  uint64_t v31 = *(void *)(qword_10011A2F0 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_presentationManager);
  swift_retain(v31);
  sub_100039640(v32, (uint64_t)v29);
  swift_release(v31);

  swift_unknownObjectRelease(v19);
  return v29;
}

void sub_100038CC0(void *a1, uint64_t a2, uint64_t a3, const char **a4, SEL *a5, uint64_t a6, uint64_t a7)
{
  v16.receiver = a1;
  v16.super_class = (Class)swift_getObjectType(a1);
  id v12 = *a4;
  id v13 = v16.receiver;
  objc_msgSendSuper2(&v16, v12, a3);
  if (objc_msgSend(v13, *a5, v16.receiver, v16.super_class))
  {
    uint64_t v14 = swift_allocObject(a6, 24LL, 7LL);
    *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
    id v15 = v13;
    sub_100038E88(a7, v14);

    swift_release(v14);
  }

  else
  {
  }

uint64_t type metadata accessor for ScreenSharingContainerViewController(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime36ScreenSharingContainerViewController, a2);
}

void sub_100038E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    [*(id *)(Strong + OBJC_IVAR____TtC8FaceTime36ScreenSharingContainerViewController_observers) addObject:a2];
  }

uint64_t sub_100038E88(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v21[1] = *(void *)(v2 + OBJC_IVAR____TtC8FaceTime36ScreenSharingContainerViewController_observerQueue);
  uint64_t v12 = swift_allocObject(&unk_1000F86E8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v12 + 16, v2);
  id v13 = (void *)swift_allocObject(&unk_1000F8710, 40LL, 7LL);
  v13[2] = v12;
  void v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_100039E20;
  id v25 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  void aBlock[3] = &unk_1000F8728;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain(v12);
  swift_retain(a2);
  static DispatchQoS.unspecified.getter(v15);
  id v23 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100039E60( (unint64_t *)&qword_100112930,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100018A04((uint64_t *)&unk_100112FD0);
  uint64_t v18 = sub_100022750( (unint64_t *)&qword_100112940,  (uint64_t *)&unk_100112FD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v19 = v25;
  swift_release(v12);
  return swift_release(v19);
}

void sub_1000390CC(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    id v6 =  [*(id *)(Strong + OBJC_IVAR____TtC8FaceTime36ScreenSharingContainerViewController_observers) allObjects];
    uint64_t v7 = sub_100018A04(&qword_100113A48);
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

    if ((unint64_t)v8 >> 62)
    {
      if (v8 < 0) {
        uint64_t v12 = v8;
      }
      else {
        uint64_t v12 = v8 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v8);
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v12);
      swift_bridgeObjectRelease(v8);
      if (v9) {
        goto LABEL_4;
      }
    }

    else
    {
      uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v9)
      {
LABEL_4:
        if (v9 < 1)
        {
          __break(1u);
          return;
        }

        for (uint64_t i = 0LL; i != v9; ++i)
        {
          if ((v8 & 0xC000000000000001LL) != 0)
          {
            uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v8);
          }

          else
          {
            uint64_t v11 = *(void *)(v8 + 8 * i + 32);
            swift_unknownObjectRetain(v11);
          }

          a2(v11);
          swift_unknownObjectRelease(v11);
        }
      }
    }

    swift_bridgeObjectRelease(v8);
  }

uint64_t sub_100039220()
{
  id v1 = [v0 viewIfLoaded];
  if (!v1) {
    return -1LL;
  }
  uint64_t v2 = v1;
  id v3 = [v1 window];

  if (!v3) {
    return -1LL;
  }
  id v4 = [v3 windowScene];

  if (!v4) {
    return -1LL;
  }
  id v5 = [v4 activationState];

  return (uint64_t)v5;
}

char *sub_1000392C4(uint64_t a1, _BYTE *a2)
{
  uint64_t v4 = sub_100018A04((uint64_t *)&unk_100113480);
  __chkstk_darwin(v4);
  id v6 = (char *)&v35[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100018A04((uint64_t *)&unk_1001130A0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v35[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for ATVCallManager(0LL);
  _OWORD v38[3] = v11;
  v38[4] = &off_1000FAC48;
  *(void *)&a2[OBJC_IVAR____TtC8FaceTime37AddParticipantContainerViewController_sidebar] = 0LL;
  v38[0] = a1;
  *(void *)&a2[OBJC_IVAR____TtC8FaceTime37AddParticipantContainerViewController_sidebarHeightConstraint] = 0LL;
  uint64_t v12 = &a2[OBJC_IVAR____TtC8FaceTime37AddParticipantContainerViewController_infoPanelViewController];
  *uint64_t v12 = 0LL;
  v12[1] = 0LL;
  *(void *)&a2[OBJC_IVAR____TtC8FaceTime37AddParticipantContainerViewController_conversationControlsManager] = 0LL;
  id v13 = &a2[OBJC_IVAR____TtC8FaceTime37AddParticipantContainerViewController_activeCallContext];
  uint64_t v14 = type metadata accessor for ActiveCallContext(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  a2[OBJC_IVAR____TtC8FaceTime37AddParticipantContainerViewController_showingConversationDetails] = 0;
  *(void *)&a2[OBJC_IVAR____TtC8FaceTime37AddParticipantContainerViewController_cancellables] = _swiftEmptyArrayStorage;
  uint64_t v15 = (objc_class *)type metadata accessor for AddParticipantContainerViewController(0LL);
  v37.receiver = a2;
  v37.super_class = v15;
  id v16 = objc_msgSendSuper2(&v37, "initWithNibName:bundle:", 0, 0);
  uint64_t v17 = *(void *)(*sub_10001C3FC(v38, v11) + OBJC_IVAR____TtC8FaceTime14ATVCallManager_activeCallSubject);
  v35[0] = v17;
  unint64_t v19 = sub_100039D4C(0LL, v18);
  uint64_t v20 = (char *)v16;
  __n128 v21 = swift_retain(v17);
  id v36 = (id)static OS_dispatch_queue.main.getter(v21);
  uint64_t v23 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL, v22);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v6, 1LL, 1LL, v23);
  uint64_t v24 = sub_100018A04((uint64_t *)&unk_100114910);
  uint64_t v25 = sub_100022750( (unint64_t *)&unk_1001130B0,  (uint64_t *)&unk_100114910,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  uint64_t v26 = sub_100039E60( (unint64_t *)&qword_100112E50,  255LL,  (uint64_t (*)(uint64_t))sub_100039D4C,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(&v36, v6, v24, v19, v25, v26);
  sub_100038684((uint64_t)v6);

  swift_release(v35[0]);
  uint64_t v27 = swift_allocObject(&unk_1000F8648, 24LL, 7LL);
  swift_unknownObjectWeakInit(v27 + 16, v20);
  uint64_t v28 = sub_100022750( (unint64_t *)&unk_1001130C0,  (uint64_t *)&unk_1001130A0,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v29 = Publisher<>.sink(receiveValue:)(sub_100039DAC, v27, v7, v28);
  swift_release(v27);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  id v30 = &v20[OBJC_IVAR____TtC8FaceTime37AddParticipantContainerViewController_cancellables];
  swift_beginAccess(&v20[OBJC_IVAR____TtC8FaceTime37AddParticipantContainerViewController_cancellables], v35, 33LL, 0LL);
  uint64_t v31 = sub_100018A04(&qword_100114200);
  uint64_t v32 = sub_100022750(&qword_1001130D0, &qword_100114200, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v30, v31, v32);
  swift_endAccess(v35);
  swift_release(v29);

  sub_10001BFEC(v38);
  return v20;
}

uint64_t sub_100039640(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(dispatch_queue_s **)(a2 + OBJC_IVAR____TtC8FaceTime36ScreenSharingContainerViewController_observerQueue);
  uint64_t v5 = swift_allocObject(&unk_1000F86E8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v5 + 16, a2);
  uint64_t v6 = swift_allocObject(&unk_1000F8788, 32LL, 7LL);
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(void *)(v6 + 24) = a1;
  uint64_t v7 = swift_allocObject(&unk_1000F87B0, 32LL, 7LL);
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100039ECC;
  *(void *)(v7 + 24) = v6;
  v11[4] = sub_10001C698;
  uint64_t v12 = v7;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256LL;
  v11[2] = sub_1000983FC;
  v11[3] = &unk_1000F87C8;
  uint64_t v8 = _Block_copy(v11);
  uint64_t v9 = v12;
  swift_retain(a1);
  swift_retain(v7);
  swift_release(v9);
  dispatch_sync(v4, v8);
  _Block_release(v8);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation(v7, "", 121LL, 69LL, 28LL, 1LL);
  swift_release(v6);
  uint64_t result = swift_release(v7);
  return result;
}

void sub_100039798()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = OBJC_IVAR____TtC8FaceTime36ScreenSharingContainerViewController_observerQueue;
  unint64_t v20 = sub_100039D4C(0LL, v12);
  static DispatchQoS.unspecified.getter(v20);
  __n128 v22 = _swiftEmptyArrayStorage;
  uint64_t v13 = sub_100039E60( (unint64_t *)&qword_100113130,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v14 = sub_100018A04((uint64_t *)&unk_100112DC0);
  uint64_t v15 = sub_100022750( (unint64_t *)&qword_100113140,  (uint64_t *)&unk_100112DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v14, v15, v6, v13);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v2);
  uint64_t v16 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000045LL,  0x80000001000D9AB0LL,  v11,  v8,  v5,  0LL);
  *(void *)&v1[v21] = v16;
  uint64_t v17 = OBJC_IVAR____TtC8FaceTime36ScreenSharingContainerViewController_observers;
  *(void *)&v1[v17] = objc_msgSend((id)objc_opt_self( NSHashTable,  v18), "weakObjectsHashTable");

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/ScreenSharingContainerViewController.swift",  51LL,  2LL,  41LL,  0);
  __break(1u);
}

uint64_t sub_1000399D8()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100039D4C(0LL, v9);
  uint64_t v11 = (void *)static OS_dispatch_queue.main.getter(v10);
  uint64_t v12 = swift_allocObject(&unk_1000F8670, 24LL, 7LL);
  *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  aBlock[4] = sub_100039DB4;
  uint64_t v24 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  void aBlock[3] = &unk_1000F8688;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = v24;
  id v15 = v1;
  uint64_t v16 = swift_release(v14);
  static DispatchQoS.unspecified.getter(v16);
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_100039E60( (unint64_t *)&qword_100112930,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100018A04((uint64_t *)&unk_100112FD0);
  uint64_t v19 = sub_100022750( (unint64_t *)&qword_100112940,  (uint64_t *)&unk_100112FD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v2, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v4, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_100039BE0()
{
  id v1 = v0;
  if (qword_100112380 != -1) {
    swift_once(&qword_100112380, sub_100080AF0);
  }
  uint64_t v2 = (void *)qword_10011A2F0;
  uint64_t v15 = type metadata accessor for ATVCallManager(0LL);
  uint64_t v16 = &off_1000FAC48;
  v14[0] = v2;
  uint64_t v3 = objc_allocWithZone((Class)type metadata accessor for AddParticipantContainerViewController(0LL));
  uint64_t v4 = sub_100021734((uint64_t)v14, v15);
  __chkstk_darwin(v4);
  uint64_t v6 = (void *)((char *)&v14[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v7 + 16))(v6);
  uint64_t v8 = *v6;
  id v9 = v2;
  __n128 v10 = sub_1000392C4(v8, v3);
  sub_10001BFEC(v14);

  uint64_t v11 = ScreenSharingViewController.conversationControlsManager.getter();
  uint64_t v12 = *(void **)&v10[OBJC_IVAR____TtC8FaceTime37AddParticipantContainerViewController_conversationControlsManager];
  *(void *)&v10[OBJC_IVAR____TtC8FaceTime37AddParticipantContainerViewController_conversationControlsManager] = v11;

  [v10 setModalPresentationStyle:6];
  [v1 presentViewController:v10 animated:1 completion:0];
}

unint64_t sub_100039D4C(uint64_t a1, uint64_t a2)
{
  unint64_t result = qword_100112DB0;
  if (!qword_100112DB0)
  {
    uint64_t v3 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue, a2);
    unint64_t result = swift_getObjCClassMetadata(v3);
    atomic_store(result, (unint64_t *)&qword_100112DB0);
  }

  return result;
}

uint64_t sub_100039D88()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100039DAC(uint64_t a1)
{
}

id sub_100039DB4()
{
  return [*(id *)(v0 + 16) dismissViewControllerAnimated:1 completion:0];
}

uint64_t sub_100039DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100039DDC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id sub_100039DE4(void *a1)
{
  return [a1 screenSharingViewControllerDidEndPresentation:*(void *)(v1 + 16)];
}

uint64_t sub_100039DF4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_100039E20()
{
}

uint64_t sub_100039E2C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id sub_100039E50(void *a1)
{
  return [a1 screenSharingViewControllerDidStartPresentation:*(void *)(v1 + 16)];
}

uint64_t sub_100039E60(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100039EA0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100039ECC()
{
}

uint64_t sub_100039ED4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

double sub_100039F00(uint64_t a1, uint64_t a2)
{
  v14.receiver = v2;
  v14.super_class = (Class)type metadata accessor for CreateCallViewController(a1, a2);
  objc_msgSendSuper2(&v14, "viewDidLoad");
  uint64_t v4 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v3), "mainBundle");
  v15._object = (void *)0xE000000000000000LL;
  v5._uint64_t countAndFlagsBits = 0x454341465F57454ELL;
  v5._object = (void *)0xEC000000454D4954LL;
  v6.value._uint64_t countAndFlagsBits = 0x6C6172656E6547LL;
  v6.value._object = (void *)0xE700000000000000LL;
  v7._uint64_t countAndFlagsBits = 0LL;
  v7._object = (void *)0xE000000000000000LL;
  v15._uint64_t countAndFlagsBits = 0LL;
  Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, v4, v7, v15);

  id v9 = (Swift::String *)&v2[OBJC_IVAR____TtC8FaceTime40SidebarNavigationBaseChildViewController_navigationTitle];
  uint64_t v10 = *(void *)&v2[OBJC_IVAR____TtC8FaceTime40SidebarNavigationBaseChildViewController_navigationTitle + 8];
  Swift::String *v9 = v8;
  swift_bridgeObjectRelease(v10);
  uint64_t countAndFlagsBits = v9->_countAndFlagsBits;
  object = v9->_object;
  swift_bridgeObjectRetain(object);
  sub_100074BF8(countAndFlagsBits, object);
  *(void *)&double result = swift_bridgeObjectRelease(object).n128_u64[0];
  return result;
}

id sub_10003A0B4(uint64_t a1, uint64_t a2)
{
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for CreateCallViewController(a1, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for CreateCallViewController(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime24CreateCallViewController, a2);
}

uint64_t sub_10003A104(uint64_t a1, id a2, unint64_t a3, uint64_t a4)
{
  uint64_t v137 = a1;
  uint64_t v8 = sub_100018A04(&qword_100113AB8);
  uint64_t v9 = __chkstk_darwin(v8);
  v134 = (char *)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  v133 = (char *)&v132 - v11;
  Class v13 = (Class)type metadata accessor for URL(0LL, v12);
  Class isa = v13[-1].isa;
  uint64_t v15 = __chkstk_darwin(v13);
  v132 = (char *)&v132 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  v135 = (char *)&v132 - v17;
  id v18 = objc_allocWithZone(&OBJC_CLASS___UILabel);
  uint64_t v19 = v4;
  id v20 = [v18 init];
  uint64_t v21 = OBJC_IVAR____TtC8FaceTime23SplashScreenConfirmView_label;
  *(void *)&v19[OBJC_IVAR____TtC8FaceTime23SplashScreenConfirmView_label] = v20;
  [v20 setTranslatesAutoresizingMaskIntoConstraints:0];
  if (a4)
  {
    uint64_t v23 = sub_100018A04((uint64_t *)&unk_100112980);
    uint64_t v24 = swift_allocObject(v23, 72LL, 7LL);
    *(_OWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FB0;
    *(void *)(v24 + 56) = &type metadata for String;
    *(void *)(v24 + 64) = sub_1000224B4();
    *(void *)(v24 + 32) = a3;
    *(void *)(v24 + 40) = a4;
    uint64_t v26 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle, v25);
    id v27 = v20;
    uint64_t v28 = (NSBundle *)[v26 mainBundle];
    v29._uint64_t countAndFlagsBits = 0xD000000000000020LL;
    v141._object = (void *)0xEB00000000656C62LL;
    v29._object = (void *)0x80000001000D9C80LL;
    v30._uint64_t countAndFlagsBits = 0LL;
    v30._object = (void *)0xE000000000000000LL;
    v141._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    Swift::String v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, (Swift::String_optional)0, v28, v30, v141);

    static String.localizedStringWithFormat(_:_:)(v31._countAndFlagsBits, v31._object, v24);
    object = v32;
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v31._object);
  }

  else
  {
    uint64_t v34 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle, v22);
    id v35 = v20;
    id v36 = (NSBundle *)[v34 mainBundle];
    v37._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    v142._object = (void *)0xEB00000000656C62LL;
    v37._object = (void *)0x80000001000D9C30LL;
    v38._uint64_t countAndFlagsBits = 0LL;
    v38._object = (void *)0xE000000000000000LL;
    v142._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, (Swift::String_optional)a3, v36, v38, v142)._object;
  }

  NSString v39 = String._bridgeToObjectiveC()();
  objc_msgSend(v20, "setText:", v39, swift_bridgeObjectRelease(object).n128_f64[0]);

  objc_super v40 = *(void **)&v19[v21];
  uint64_t v42 = (void *)objc_opt_self(&OBJC_CLASS___UIColor, v41);
  id v43 = v40;
  id v136 = v42;
  id v44 = [v42 whiteColor];
  [v43 setTextColor:v44];

  id v45 = *(void **)&v19[v21];
  uint64_t v47 = (void *)objc_opt_self(&OBJC_CLASS___UIFont, v46);
  uint64_t v49 = (void *)objc_opt_self(&OBJC_CLASS___UITraitCollection, v48);
  id v50 = v45;
  id v51 = [v49 traitCollectionWithLegibilityWeight:1];
  id v52 = [v47 preferredFontForTextStyle:UIFontTextStyleCallout compatibleWithTraitCollection:v51];

  [v50 setFont:v52];
  __n128 v53 = *(void **)&v19[v21];
  [v53 setNumberOfLines:2];
  [v53 setTextAlignment:1];
  [v53 sizeToFit];
  id v54 = objc_allocWithZone(&OBJC_CLASS___NSDataAsset);
  swift_bridgeObjectRetain(a2);
  NSString v55 = String._bridgeToObjectiveC()();
  id v56 = objc_msgSend(v54, "initWithName:", v55, swift_bridgeObjectRelease(a2).n128_f64[0]);

  if (v56)
  {
    id v58 = objc_msgSend(v56, "data", swift_bridgeObjectRelease(a2).n128_f64[0]);
    uint64_t v59 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v58);
    unint64_t v61 = v60;

    unint64_t v62 = sub_10002DB3C((uint64_t)_swiftEmptyArrayStorage);
    a2 = objc_allocWithZone(&OBJC_CLASS____UICAPackageView);
    Class v63 = Data._bridgeToObjectiveC()().super.isa;
    sub_100022804(v59, v61);
    Class v13 = Dictionary._bridgeToObjectiveC()().super.isa;
    id v64 = objc_msgSend( a2,  "initWithData:publishedObjectViewClassMap:",  v63,  v13,  swift_bridgeObjectRelease(v62).n128_f64[0]);

    if (v64)
    {

      *(void *)&v19[OBJC_IVAR____TtC8FaceTime23SplashScreenConfirmView_packageView] = v64;
LABEL_14:

      uint64_t v86 = (objc_class *)type metadata accessor for SplashScreenConfirmView(v84, v85);
      v138.receiver = v19;
      v138.super_class = v86;
      uint64_t v87 = (char *)objc_msgSendSuper2(&v138, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
      uint64_t v88 = OBJC_IVAR____TtC8FaceTime23SplashScreenConfirmView_packageView;
      uint64_t v89 = *(void **)&v87[OBJC_IVAR____TtC8FaceTime23SplashScreenConfirmView_packageView];
      uint64_t v90 = v87;
      id v91 = [v89 layer];
      [v91 setBeginTime:1.79769313e308];

      id v92 = [v90 layer];
      [v92 setFillMode:kCAFillModeBoth];

      id v93 = [v90 layer];
      [v93 setCompositingFilter:kCAFilterPlusL];

      uint64_t v94 = sub_100018A04(&qword_1001142B0);
      uint64_t v95 = swift_allocObject(v94, 48LL, 7LL);
      *(_OWORD *)(v95 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FC0;
      uint64_t v96 = *(void **)&v87[v88];
      *(void *)(v95 + 32) = v96;
      __int128 v97 = *(void **)&v90[OBJC_IVAR____TtC8FaceTime23SplashScreenConfirmView_label];
      *(void *)(v95 + 40) = v97;
      unint64_t v139 = v95;
      specialized Array._endMutation()(v95);
      unint64_t v98 = v139;
      id v99 = objc_allocWithZone(&OBJC_CLASS___UIStackView);
      sub_10001C5D0(0LL, &qword_100112970, &OBJC_CLASS___UIView_ptr);
      id v100 = v96;
      id v101 = v97;
      Class v102 = Array._bridgeToObjectiveC()().super.isa;
      id v103 = objc_msgSend(v99, "initWithArrangedSubviews:", v102, swift_bridgeObjectRelease(v98).n128_f64[0]);

      [v103 setAlignment:3];
      [v103 setAxis:1];
      [v103 setSpacing:20.0];
      [v103 setTranslatesAutoresizingMaskIntoConstraints:0];
      [v90 addSubview:v103];
      uint64_t v105 = (void *)objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, v104);
      uint64_t v106 = swift_allocObject(v94, 80LL, 7LL);
      *(_OWORD *)(v106 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C5260;
      id v107 = [*(id *)&v87[v88] widthAnchor];
      id v108 = [v107 constraintEqualToConstant:160.0];

      *(void *)(v106 + 32) = v108;
      id v109 = [*(id *)&v87[v88] heightAnchor];
      id v110 = [v109 constraintEqualToConstant:160.0];

      *(void *)(v106 + 40) = v110;
      id v111 = [v103 centerXAnchor];
      id v112 = [v90 centerXAnchor];
      id v113 = [v111 constraintEqualToAnchor:v112];

      *(void *)(v106 + 4_Block_object_dispose(va, 8) = v113;
      id v114 = [v103 centerYAnchor];
      id v115 = [v90 centerYAnchor];
      id v116 = [v114 constraintEqualToAnchor:v115];

      *(void *)(v106 + 56) = v116;
      id v117 = [v103 leadingAnchor];
      id v118 = [v90 leadingAnchor];
      id v119 = [v117 constraintEqualToAnchor:v118 constant:40.0];

      *(void *)(v106 + 64) = v119;
      id v120 = [v103 trailingAnchor];
      id v121 = [v90 trailingAnchor];
      id v122 = [v120 constraintEqualToAnchor:v121 constant:-40.0];

      *(void *)(v106 + 72) = v122;
      unint64_t v139 = v106;
      specialized Array._endMutation()(v123);
      unint64_t v124 = v139;
      sub_10001C5D0(0LL, (unint64_t *)&qword_100113120, &OBJC_CLASS___NSLayoutConstraint_ptr);
      Class v125 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v105, "activateConstraints:", v125, swift_bridgeObjectRelease(v124).n128_f64[0]);

      uint64_t v126 = v90;
      id v127 = [v136 whiteColor];
      id v128 = [v127 colorWithAlphaComponent:0.1];

      [v126 setBackgroundColor:v128];
      id v129 = [v126 layer];
      [v129 setCornerRadius:50.0];

      return (uint64_t)v126;
    }

    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  id v65 = objc_msgSend((id)objc_opt_self(NSBundle, v57), "mainBundle");
  NSString v66 = String._bridgeToObjectiveC()();
  NSString v67 = String._bridgeToObjectiveC()();
  id v68 = [v65 URLForResource:v66 withExtension:v67];

  if (!v68)
  {
LABEL_17:
    uint64_t v71 = (uint64_t)v133;
    ((void (*)(char *, uint64_t, uint64_t, Class))isa[7].isa)(v133, 1LL, 1LL, v13);
    goto LABEL_18;
  }

  uint64_t v69 = v132;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v68);

  uint64_t v70 = (void (*)(char *, char *, Class))isa[4].isa;
  uint64_t v71 = (uint64_t)v133;
  v70(v133, v69, v13);
  uint64_t v72 = (void (*)(void, void, void, void))isa[7].isa;
  v72(v71, 0LL, 1LL, v13);
  uint64_t v73 = (uint64_t (*)(uint64_t, uint64_t, Class))isa[6].isa;
  int v74 = v73(v71, 1LL, v13);
  uint64_t v75 = v135;
  if (v74 != 1)
  {
    __n128 v76 = swift_bridgeObjectRelease(a2);
    ((void (*)(char *, uint64_t, Class, __n128))v70)(v75, v71, v13, v76);
    uint64_t v77 = v134;
    ((void (*)(char *, char *, Class))isa[2].isa)(v134, v75, v13);
    v72(v77, 0LL, 1LL, v13);
    unint64_t v78 = sub_10002DB3C((uint64_t)_swiftEmptyArrayStorage);
    if (v73((uint64_t)v77, 1LL, v13) == 1)
    {
      uint64_t v80 = 0LL;
    }

    else
    {
      URL._bridgeToObjectiveC()(v79);
      uint64_t v80 = v81;
      ((void (*)(char *, Class))isa[1].isa)(v77, v13);
    }

    a2 = objc_allocWithZone(&OBJC_CLASS____UICAPackageView);
    Class v82 = Dictionary._bridgeToObjectiveC()().super.isa;
    id v83 = objc_msgSend( a2,  "initWithContentsOfURL:publishedObjectViewClassMap:",  v80,  v82,  swift_bridgeObjectRelease(v78).n128_f64[0]);

    if (v83)
    {
      ((void (*)(char *, Class))isa[1].isa)(v75, v13);
      *(void *)&v19[OBJC_IVAR____TtC8FaceTime23SplashScreenConfirmView_packageView] = v83;
      goto LABEL_14;
    }

    goto LABEL_16;
  }

id sub_10003AF70(uint64_t a1, uint64_t a2)
{
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for SplashScreenConfirmView(a1, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for SplashScreenConfirmView(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime23SplashScreenConfirmView, a2);
}

uint64_t sub_10003AFF8(uint64_t a1)
{
  uint64_t v2 = sub_100018A04(&qword_100113AB8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for CameraEffectsControlsViewModel(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  id v4 = v3;
  return a1;
}

void destroy for CameraEffectsControlsViewModel(uint64_t a1)
{
}

uint64_t assignWithCopy for CameraEffectsControlsViewModel(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  uint64_t v3 = *(void **)(a1 + 8);
  id v4 = *(void **)(a2 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  id v5 = v4;

  return a1;
}

uint64_t assignWithTake for CameraEffectsControlsViewModel(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for CameraEffectsControlsViewModel(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CameraEffectsControlsViewModel( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)(result + _Block_object_dispose(va, 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CameraEffectsControlsViewModel()
{
  return &type metadata for CameraEffectsControlsViewModel;
}

uint64_t sub_10003B1BC(void *a1)
{
  id v1 = a1;
  unsigned int v2 = [v1 currentInputSupportsCinematicFraming];
  unsigned int v3 = [v1 isCinematicFramingEnabled];
  unsigned int v4 = [v1 supportsCameraBlur];
  unsigned int v5 = [v1 cameraBlurEnabled];
  unsigned int v6 = [v1 currentInputSupportsStudioLight];
  unsigned int v7 = [v1 isStudioLightEnabled];
  unsigned int v8 = [v1 currentInputSupportsReactionEffects];
  unsigned int v9 = [v1 isReactionEffectGestureEnabled];
  if (v2) {
    int v10 = v3;
  }
  else {
    int v10 = 2;
  }
  if (v5) {
    int v11 = 256;
  }
  else {
    int v11 = 0;
  }
  if (!v4) {
    int v11 = 512;
  }
  int v12 = v11 | v10;
  if (v7) {
    int v13 = 0x10000;
  }
  else {
    int v13 = 0;
  }
  if (!v6) {
    int v13 = 0x20000;
  }
  if (v9) {
    int v14 = 0x1000000;
  }
  else {
    int v14 = 0;
  }
  if (!v8) {
    int v14 = 0x2000000;
  }
  return v12 | v13 | v14;
}

_BYTE *initializeBufferWithCopyOfBuffer for Snowglobe.Mode(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CameraEffectsControlsViewModel.EffectState( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE)
  {
    unsigned int v6 = *a1;
    BOOL v7 = v6 >= 2;
    unsigned int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
    if (!v7) {
      unsigned int v8 = -1;
    }
    if (v8 + 1 >= 2) {
      return v8;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    unsigned int v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_10003B358 + 4 * asc_1000C52A0[v4]))();
  }

uint64_t storeEnumTagSinglePayload for CameraEffectsControlsViewModel.EffectState( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    LODWORD(v5) = v4;
  }
  else {
    LODWORD(v5) = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10003B410 + 4 * byte_1000C52AA[v5]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10003B444 + 4 * byte_1000C52A5[v5]))();
}

uint64_t sub_10003B444(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B44C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10003B454LL);
  }
  return result;
}

uint64_t sub_10003B460(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003B468LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10003B46C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B474(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B480(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0LL;
  }
}

_BYTE *sub_10003B49C(_BYTE *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraEffectsControlsViewModel.EffectState()
{
  return &type metadata for CameraEffectsControlsViewModel.EffectState;
}

void *sub_10003B4C8(uint64_t a1)
{
  unint64_t v2 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) == 0) {
    goto LABEL_8;
  }
  if (a1 < 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v4 = __CocoaSet.count.getter(v3);
  uint64_t result = _swiftEmptyArrayStorage;
  if (!v4) {
    return result;
  }
  uint64_t v33 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v4);
  uint64_t v30 = __CocoaSet.startIndex.getter(v3);
  uint64_t v31 = v6;
  unsigned __int8 v32 = 1;
  if (v4 < 0)
  {
    __break(1u);
LABEL_8:
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v4) {
      return result;
    }
    uint64_t v33 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v4);
    uint64_t v30 = sub_1000967DC(a1);
    uint64_t v31 = v7;
    unsigned __int8 v32 = v8 & 1;
  }

  uint64_t v9 = a1 & 0xFFFFFFFFFFFFFF8LL;
  if (a1 < 0) {
    uint64_t v9 = a1;
  }
  uint64_t v28 = v9;
  while (1)
  {
    while (1)
    {
      uint64_t v15 = v30;
      uint64_t v16 = v31;
      uint64_t v17 = v32;
      sub_1000AF740(v30, v31, v32, a1);
      uint64_t v19 = v18;
      id v20 = [v18 activity];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v21 = v33[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
      uint64_t v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v20);
      uint64_t result = (void *)specialized ContiguousArray._endMutation()(v22);
      if (v2) {
        break;
      }
      uint64_t v10 = sub_1000966F4(v15, v16, v17, a1);
      uint64_t v12 = v11;
      char v14 = v13;
      sub_100042B84(v15, v16, v17);
      uint64_t v30 = v10;
      uint64_t v31 = v12;
      unsigned __int8 v32 = v14 & 1;
      if (!--v4) {
        goto LABEL_20;
      }
    }

    if ((v17 & 1) == 0) {
      break;
    }
    uint64_t v23 = __CocoaSet.Index.handleBitPattern.getter(v15, v16);
    if (v23) {
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
    }
    else {
      uint64_t isUniquelyReferenced_nonNull_native = 1LL;
    }
    uint64_t v25 = sub_100018A04(&qword_100113BC8);
    uint64_t v26 = (void (*)(_BYTE *, void))Set.Index._asCocoa.modify(v29, v25);
    __CocoaSet.formIndex(after:isUnique:)(v27, isUniquelyReferenced_nonNull_native, v28);
    v26(v29, 0LL);
    if (!--v4)
    {
LABEL_20:
      sub_100042B84(v30, v31, v32);
      return v33;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10003B6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(a2 + 16)
    && (uint64_t v7 = *(void *)(a2 + 40),
        uint64_t v8 = sub_10001949C( &qword_1001136D0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID),  v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8),  v10 = -1LL << *(_BYTE *)(a2 + 32),  v11 = v9 & ~v10,  ((*(void *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0))
  {
    uint64_t v12 = ~v10;
    uint64_t v13 = *(void *)(v19 + 72);
    char v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(void *)(a2 + 48) + v13 * v11, v4);
      uint64_t v15 = sub_10001949C( (unint64_t *)&qword_100112E70,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
    }

    while (((*(void *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  }

  else
  {
    char v16 = 0;
  }

  return v16 & 1;
}

uint64_t sub_10003B86C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_100113AC0);
  sub_10001C270(v0, (uint64_t)qword_100113AC0);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0xD00000000000001ALL,  0x80000001000C5350LL);
}

uint64_t sub_10003B8E8()
{
  if (qword_1001123C8 != -1) {
    swift_once(&qword_1001123C8, sub_10008CEB8);
  }
  sub_10001C580((uint64_t)&qword_10011A330, (uint64_t)v20);
  unsigned int v1 = (void *)objc_opt_self(&OBJC_CLASS___TUCallCenter, v0);
  id v2 = [v1 sharedInstance];
  id v3 = [v2 conversationManager];

  id v4 = [v1 sharedInstance];
  id v5 = [v4 neighborhoodActivityConduit];

  if (qword_1001122A0 != -1) {
    swift_once(&qword_1001122A0, sub_10004CB40);
  }
  uint64_t v7 = (void *)qword_10011A2B8;
  uint64_t v8 = type metadata accessor for UserNotificationManager(0LL, v6);
  id v9 = v7;
  uint64_t inited = swift_initStaticObject(v8, &unk_100112498);
  uint64_t v11 = sub_100021734((uint64_t)v20, v20[3]);
  __chkstk_darwin(v11);
  uint64_t v13 = (void *)((char *)&v20[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  uint64_t v15 = *v13;
  id v16 = v9;
  uint64_t v17 = sub_100041174(v15, v3, v5, (uint64_t)v16, inited);

  uint64_t result = sub_10001BFEC(v20);
  qword_10011A228 = (uint64_t)v17;
  return result;
}

void sub_10003BABC(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  id v3 = *(void **)(a1 + 8);
  char v4 = *(_BYTE *)(a1 + 16);
  uint64_t v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    sub_10003BB2C(v2, v3, v4);
  }

void sub_10003BB2C(void *a1, void *a2, char a3)
{
  uint64_t v7 = type metadata accessor for UUID(0LL);
  id v83 = *(char **)(v7 - 8);
  __chkstk_darwin(v7);
  id v9 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v81 = sub_100018A04(&qword_100113000);
  __chkstk_darwin(v81);
  uint64_t v84 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100018A04(&qword_100112D10);
  uint64_t v12 = __chkstk_darwin(v11);
  Class v82 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v80 = (char *)&v75 - v15;
  __chkstk_darwin(v14);
  uint64_t v85 = (uint64_t)&v75 - v16;
  uint64_t v17 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  id v20 = (char **)((char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v21 = *(void **)(v3 + OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_queue);
  *id v20 = v21;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)(v20);
  (*(void (**)(void *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) != 0)
  {
    uint64_t v75 = v9;
    uint64_t v23 = v3 + OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_sharePlayState;
    uint64_t v24 = *(void **)(v3 + OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_sharePlayState);
    uint64_t v25 = *(void **)(v3 + OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_sharePlayState + 8);
    int v26 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_sharePlayState + 16);
    *(void *)uint64_t v23 = a1;
    *(void *)(v23 + _Block_object_dispose(va, 8) = a2;
    *(_BYTE *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
    sub_10002CA0C(v24, v25, v26);
    uint64_t v27 = a1;
    sub_10002CA0C(a1, a2, a3);
    unint64_t v78 = v25;
    sub_10002C9C8(v24, v25, v26);
    int v77 = v26;
    uint64_t v76 = v3;
    uint64_t v79 = v24;
    if ((v26 - 1) > 1u)
    {
      uint64_t v31 = v83;
      unsigned __int8 v32 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v83 + 7);
      v32(v85, 1LL, 1LL, v7);
    }

    else
    {
      id v28 = [v24 UUID];
      uint64_t v29 = v85;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v28);

      uint64_t v30 = v29;
      uint64_t v31 = v83;
      unsigned __int8 v32 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v83 + 7);
      v32(v30, 0LL, 1LL, v7);
    }

    uint64_t v33 = (uint64_t)v84;
    unsigned __int8 v34 = a3 - 1;
    if ((a3 - 1) > 1u)
    {
      uint64_t v37 = 1LL;
      uint64_t v38 = (uint64_t)v82;
      uint64_t v36 = (uint64_t)v80;
    }

    else
    {
      id v35 = [v27 UUID];
      uint64_t v36 = (uint64_t)v80;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v35);

      uint64_t v37 = 0LL;
      uint64_t v38 = (uint64_t)v82;
    }

    v32(v36, v37, 1LL, v7);
    uint64_t v39 = v33 + *(int *)(v81 + 48);
    uint64_t v40 = v85;
    sub_10004136C(v85, v33);
    sub_10004136C(v36, v39);
    uint64_t v41 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v31 + 6);
    if (v41(v33, 1LL, v7) == 1)
    {
      sub_10001C608(v36, &qword_100112D10);
      sub_10001C608(v40, &qword_100112D10);
      if (v41(v39, 1LL, v7) == 1)
      {
        sub_10001C608(v33, &qword_100112D10);
LABEL_49:
        sub_10002C9C8(v79, v78, v77);
        return;
      }
    }

    else
    {
      sub_10004136C(v33, v38);
      if (v41(v39, 1LL, v7) != 1)
      {
        id v54 = v75;
        (*((void (**)(char *, uint64_t, uint64_t))v31 + 4))(v75, v39, v7);
        uint64_t v55 = sub_10001949C( (unint64_t *)&qword_100112E70,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        id v56 = v31;
        uint64_t v57 = v38;
        char v58 = dispatch thunk of static Equatable.== infix(_:_:)(v38, v54, v7, v55);
        uint64_t v59 = (void (*)(char *, uint64_t))*((void *)v56 + 1);
        v59(v54, v7);
        sub_10001C608(v36, &qword_100112D10);
        sub_10001C608(v85, &qword_100112D10);
        v59((char *)v57, v7);
        sub_10001C608(v33, &qword_100112D10);
        uint64_t v42 = v76;
        if ((v58 & 1) != 0) {
          goto LABEL_49;
        }
LABEL_14:
        id v43 = (uint64_t *)(v42 + OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_unavailableActivityUUIDs);
        swift_beginAccess( v42 + OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_unavailableActivityUUIDs,  v88,  1LL,  0LL);
        uint64_t v44 = *v43;
        uint64_t *v43 = (uint64_t)&_swiftEmptySetSingleton;
        swift_bridgeObjectRelease(v44);
        if (v34 <= 1u)
        {
          id v45 = v27;
          sub_10003C2A4();
          uint64_t v47 = v46;
          if ((v46 & 0xC000000000000001LL) != 0)
          {
            if (v46 >= 0) {
              v46 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            uint64_t v48 = __CocoaSet.makeIterator()(v46);
            uint64_t v49 = sub_10001C5D0(0LL, (unint64_t *)&unk_1001160A0, &OBJC_CLASS___TUConversationActivity_ptr);
            uint64_t v50 = sub_100022510( (unint64_t *)&unk_100113B80,  (unint64_t *)&unk_1001160A0,  &OBJC_CLASS___TUConversationActivity_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
            uint64_t v46 = (uint64_t)Set.Iterator.init(_cocoa:)(v89, v48, v49, v50);
            uint64_t v47 = v89[0];
            uint64_t v85 = v89[1];
            uint64_t v51 = v89[2];
            uint64_t v52 = v89[3];
            unint64_t v53 = v89[4];
          }

          else
          {
            uint64_t v52 = 0LL;
            uint64_t v60 = -1LL << *(_BYTE *)(v46 + 32);
            uint64_t v61 = *(void *)(v46 + 56);
            uint64_t v85 = v46 + 56;
            uint64_t v51 = ~v60;
            uint64_t v62 = -v60;
            if (v62 < 64) {
              uint64_t v63 = ~(-1LL << v62);
            }
            else {
              uint64_t v63 = -1LL;
            }
            unint64_t v53 = v63 & v61;
          }

          uint64_t v84 = (char *)(v47 & 0x7FFFFFFFFFFFFFFFLL);
          Class v82 = (char *)v51;
          int64_t v64 = (unint64_t)(v51 + 64) >> 6;
          id v83 = (char *)&type metadata for Swift.AnyObject + 8;
          if (v47 < 0) {
            goto LABEL_28;
          }
          while (1)
          {
            if (v53)
            {
              uint64_t v65 = (v53 - 1) & v53;
              unint64_t v66 = __clz(__rbit64(v53)) | (v52 << 6);
              uint64_t v67 = v52;
            }

            else
            {
              int64_t v72 = v52 + 1;
              if (__OFADD__(v52, 1LL))
              {
                __break(1u);
                goto LABEL_51;
              }

              if (v72 >= v64) {
                goto LABEL_48;
              }
              unint64_t v73 = *(void *)(v85 + 8 * v72);
              uint64_t v67 = v52 + 1;
              if (!v73)
              {
                uint64_t v67 = v52 + 2;
                if (v52 + 2 >= v64) {
                  goto LABEL_48;
                }
                unint64_t v73 = *(void *)(v85 + 8 * v67);
                if (!v73)
                {
                  uint64_t v67 = v52 + 3;
                  if (v52 + 3 >= v64) {
                    goto LABEL_48;
                  }
                  unint64_t v73 = *(void *)(v85 + 8 * v67);
                  if (!v73)
                  {
                    uint64_t v67 = v52 + 4;
                    if (v52 + 4 >= v64) {
                      goto LABEL_48;
                    }
                    unint64_t v73 = *(void *)(v85 + 8 * v67);
                    if (!v73)
                    {
                      uint64_t v74 = v52 + 5;
                      while (v64 != v74)
                      {
                        unint64_t v73 = *(void *)(v85 + 8 * v74++);
                        if (v73)
                        {
                          uint64_t v67 = v74 - 1;
                          goto LABEL_44;
                        }
                      }

LABEL_48:
                      sub_100022550(v47);
                      goto LABEL_49;
                    }
                  }
                }
              }

LABEL_44:
              uint64_t v65 = (v73 - 1) & v73;
              unint64_t v66 = __clz(__rbit64(v73)) + (v67 << 6);
            }

            id v71 = *(id *)(*(void *)(v47 + 48) + 8 * v66);
            if (!v71) {
              goto LABEL_48;
            }
            while (1)
            {
              sub_10003C4C4(v71, v45, 1);

              uint64_t v52 = v67;
              unint64_t v53 = v65;
              if ((v47 & 0x8000000000000000LL) == 0) {
                break;
              }
LABEL_28:
              uint64_t v68 = __CocoaSet.Iterator.next()(v46);
              if (v68)
              {
                uint64_t v69 = v68;
                uint64_t v86 = v68;
                uint64_t v70 = sub_10001C5D0(0LL, (unint64_t *)&unk_1001160A0, &OBJC_CLASS___TUConversationActivity_ptr);
                swift_unknownObjectRetain(v69);
                swift_dynamicCast(&v87, &v86, v83, v70, 7LL);
                id v71 = v87;
                swift_unknownObjectRelease(v69);
                uint64_t v67 = v52;
                uint64_t v65 = v53;
                if (v71) {
                  continue;
                }
              }

              goto LABEL_48;
            }
          }
        }

        goto LABEL_49;
      }

      sub_10001C608(v36, &qword_100112D10);
      sub_10001C608(v85, &qword_100112D10);
      (*((void (**)(uint64_t, uint64_t))v31 + 1))(v38, v7);
    }

    sub_10001C608(v33, &qword_100113000);
    uint64_t v42 = v76;
    goto LABEL_14;
  }

                  sub_100022550(v46);
                  return;
                }
              }
            }
          }

              sub_100022550(v3);
              return;
            }
          }
        }
      }
    }

LABEL_51:
  __break(1u);
}

void sub_10003C2A4()
{
  id v1 = [v0 activitySessions];
  uint64_t v2 = sub_10001C5D0(0LL, &qword_1001134A8, &OBJC_CLASS___TUConversationActivitySession_ptr);
  uint64_t v3 = sub_100022510( &qword_1001134B0,  &qword_1001134A8,  &OBJC_CLASS___TUConversationActivitySession_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
  uint64_t v4 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v1, v2, v3);

  uint64_t v5 = (uint64_t)sub_10003B4C8(v4);
  swift_bridgeObjectRelease(v4);
  if (!((unint64_t)v5 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v6) {
      goto LABEL_3;
    }
LABEL_19:
    swift_bridgeObjectRelease(v5);
    sub_1000B15F0((uint64_t)_swiftEmptyArrayStorage);
    swift_release(_swiftEmptyArrayStorage);
    return;
  }

  if (v5 < 0) {
    uint64_t v15 = v5;
  }
  else {
    uint64_t v15 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v5);
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v15);
  swift_bridgeObjectRelease(v5);
  if (!v6) {
    goto LABEL_19;
  }
LABEL_3:
  if (v6 >= 1)
  {
    for (uint64_t i = 0LL; i != v6; ++i)
    {
      if ((v5 & 0xC000000000000001LL) != 0) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v5);
      }
      else {
        id v10 = *(id *)(v5 + 8 * i + 32);
      }
      uint64_t v11 = v10;
      id v12 = [v10 metadata];
      if (v12
        && (uint64_t v13 = v12, v14 = [v12 supportsContinuationOnTV], v13, v14)
        && ([v11 isSupported] & 1) != 0)
      {
      }

      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v8 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
        uint64_t v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v11);
        specialized ContiguousArray._endMutation()(v9);
      }
    }

    goto LABEL_19;
  }

  __break(1u);
}

void sub_10003C4C4(void *a1, void *a2, int a3)
{
  LODWORD(v96) = a3;
  id v97 = a2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v88 - v10;
  uint64_t v98 = v3;
  id v12 = (uint64_t *)(v3 + OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_unavailableActivityUUIDs);
  swift_beginAccess(v3 + OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_unavailableActivityUUIDs, v101, 0LL, 0LL);
  uint64_t v13 = *v12;
  swift_bridgeObjectRetain(*v12);
  id v14 = [a1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);

  LOBYTE(v14) = sub_10003B6E8((uint64_t)v11, v13);
  __n128 v15 = swift_bridgeObjectRelease(v13);
  uint64_t v16 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
  v16(v11, v5, v15);
  id v17 = [a1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

  swift_beginAccess(v12, v100, 33LL, 0LL);
  sub_1000ACCDC((uint64_t)v11, (uint64_t)v9);
  __n128 v18 = swift_endAccess(v100);
  v16(v11, v5, v18);
  id v19 = [a1 metadata];
  id v20 = &selRef__setGradientMaskLengths_;
  if (v19)
  {
    uint64_t v21 = v19;
    unsigned int v22 = [v19 supportsContinuationOnTV];

    if (v22) {
      unsigned int v23 = [a1 isSupported] ^ 1;
    }
    else {
      unsigned int v23 = 2;
    }
    LODWORD(v95) = v23;
  }

  else
  {
    LODWORD(v95) = 2;
  }

  if (qword_100112238 != -1) {
    swift_once(&qword_100112238, sub_10003B86C);
  }
  uint64_t v24 = type metadata accessor for Logger(0LL);
  uint64_t v25 = sub_10001C270(v24, (uint64_t)qword_100113AC0);
  id v26 = a1;
  id v27 = v97;
  id v28 = v26;
  id v29 = v27;
  uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
  int v31 = static os_log_type_t.default.getter();
  BOOL v32 = os_log_type_enabled(v30, (os_log_type_t)v31);
  uint64_t v94 = v5;
  id v97 = v28;
  if (v32)
  {
    int v91 = v31;
    os_log_t v92 = v30;
    id v93 = (uint8_t *)v25;
    uint64_t v33 = swift_slowAlloc(32LL, -1LL);
    uint64_t v90 = swift_slowAlloc(96LL, -1LL);
    v100[0] = v90;
    *(_DWORD *)uint64_t v33 = 136315650;
    uint64_t v89 = v33 + 4;
    id v34 = [v28 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v34);

    uint64_t v35 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(v5, v35);
    unint64_t v38 = v37;
    ((void (*)(char *, uint64_t))v16)(v11, v5);
    uint64_t v99 = sub_1000850E4(v36, v38, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v89, v33 + 12);

    *(void *)&double v39 = swift_bridgeObjectRelease(v38).n128_u64[0];
    *(_WORD *)(v33 + 12) = 2080;
    id v40 = objc_msgSend(v29, "UUID", v39);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v40);

    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v5, v35);
    unint64_t v43 = v42;
    ((void (*)(char *, uint64_t))v16)(v11, v5);
    uint64_t v99 = sub_1000850E4(v41, v43, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v33 + 14, v33 + 22);

    swift_bridgeObjectRelease(v43);
    *(_WORD *)(v33 + 22) = 2080;
    int v44 = v95;
    if ((_DWORD)v95)
    {
      if ((_DWORD)v95 == 1)
      {
        uint64_t v45 = 0xD000000000000024LL;
        uint64_t v46 = "UnavailableActivityReason.missingApp";
      }

      else
      {
        uint64_t v45 = 0xD00000000000002ALL;
        uint64_t v46 = "UnavailableActivityReason.notSupportedOnTV";
      }

      unint64_t v73 = (unint64_t)(v46 - 32) | 0x8000000000000000LL;
      id v20 = &selRef__setGradientMaskLengths_;
      os_log_type_t v74 = v91;
    }

    else
    {
      unint64_t v73 = 0x80000001000D9D60LL;
      id v20 = &selRef__setGradientMaskLengths_;
      os_log_type_t v74 = v91;
      uint64_t v45 = 0xD00000000000001ELL;
    }

    uint64_t v99 = sub_1000850E4(v45, v73, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v33 + 24, v33 + 32);
    swift_bridgeObjectRelease(v73);
    os_log_t v75 = v92;
    _os_log_impl( (void *)&_mh_execute_header,  v92,  v74,  "Received unavailable activity %s in conversation %s with reason: %s",  (uint8_t *)v33,  0x20u);
    uint64_t v76 = v90;
    swift_arrayDestroy(v90, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v76, -1LL, -1LL);
    swift_slowDealloc(v33, -1LL, -1LL);

    if (!v44) {
      goto LABEL_25;
    }
  }

  else
  {

    int v44 = v95;
    if (!(_DWORD)v95)
    {
LABEL_25:
      int v77 = (os_log_s *)Logger.logObject.getter(v47);
      os_log_type_t v78 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v77, v78))
      {
        uint64_t v79 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v79 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v77,  v78,  "Received unavailable activity for a supported tvOS activity.",  v79,  2u);
        swift_slowDealloc(v79, -1LL, -1LL);
      }

      return;
    }
  }

  if (v44 == 1)
  {
    uint64_t v48 = v20;
    id v49 = v97;
    uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.default.getter();
    BOOL v52 = os_log_type_enabled(v50, v51);
    if ((v96 & 1) != 0)
    {
      if (v52)
      {
        unint64_t v53 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v95 = swift_slowAlloc(32LL, -1LL);
        v100[0] = v95;
        uint64_t v96 = (void (*)(char *, uint64_t))v16;
        *(_DWORD *)unint64_t v53 = 136315138;
        id v93 = v53 + 4;
        id v54 = [v49 v48[39]];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v54);

        uint64_t v55 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v56 = v94;
        uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter(v94, v55);
        id v97 = v29;
        unint64_t v59 = v58;
        v96(v11, v56);
        uint64_t v99 = sub_1000850E4(v57, v59, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v93, v53 + 12);

        id v29 = v97;
        swift_bridgeObjectRelease(v59);
        _os_log_impl( (void *)&_mh_execute_header,  v50,  v51,  "Present missing app alert for unavailable activity %s",  v53,  0xCu);
        uint64_t v60 = v95;
        swift_arrayDestroy(v95, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v60, -1LL, -1LL);
        swift_slowDealloc(v53, -1LL, -1LL);
      }

      else
      {
      }

      sub_10003D8B0(v49, v29);
    }

    else
    {
      if (v52)
      {
        uint64_t v80 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v95 = swift_slowAlloc(32LL, -1LL);
        v100[0] = v95;
        uint64_t v96 = (void (*)(char *, uint64_t))v16;
        *(_DWORD *)uint64_t v80 = 136315138;
        id v93 = v80 + 4;
        id v81 = [v49 v48[39]];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v81);

        uint64_t v82 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v83 = v94;
        uint64_t v84 = dispatch thunk of CustomStringConvertible.description.getter(v94, v82);
        id v97 = v29;
        unint64_t v86 = v85;
        v96(v11, v83);
        uint64_t v99 = sub_1000850E4(v84, v86, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v93, v80 + 12);

        id v29 = v97;
        swift_bridgeObjectRelease(v86);
        _os_log_impl( (void *)&_mh_execute_header,  v50,  v51,  "Present missing app bulletin for unavailable activity %s",  v80,  0xCu);
        uint64_t v87 = v95;
        swift_arrayDestroy(v95, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v87, -1LL, -1LL);
        swift_slowDealloc(v80, -1LL, -1LL);
      }

      else
      {
      }

      sub_10003E438(v49, v29);
    }
  }

  else
  {
    id v61 = v97;
    uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
    os_log_type_t v63 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = swift_slowAlloc(12LL, -1LL);
      id v97 = v29;
      uint64_t v65 = (uint8_t *)v64;
      uint64_t v95 = swift_slowAlloc(32LL, -1LL);
      v100[0] = v95;
      uint64_t v96 = (void (*)(char *, uint64_t))v16;
      *(_DWORD *)uint64_t v65 = 136315138;
      id v93 = v65 + 4;
      id v66 = [v61 v20[39]];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v66);

      uint64_t v67 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v68 = v94;
      uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter(v94, v67);
      unint64_t v71 = v70;
      v96(v11, v68);
      uint64_t v99 = sub_1000850E4(v69, v71, v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v93, v65 + 12);

      swift_bridgeObjectRelease(v71);
      _os_log_impl( (void *)&_mh_execute_header,  v62,  v63,  "Present notSupportedOnTV activity bulletin for %s",  v65,  0xCu);
      uint64_t v72 = v95;
      swift_arrayDestroy(v95, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1LL, -1LL);
      id v29 = v97;
      swift_slowDealloc(v65, -1LL, -1LL);
    }

    else
    {
    }

    sub_10003CFD8(v61, v29);
  }

void sub_10003CFD8(void *a1, void *a2)
{
  uint64_t v3 = v2;
  id v87 = a2;
  uint64_t v5 = sub_100018A04((uint64_t *)&unk_100113480);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v91 = sub_100018A04(&qword_100114AF0);
  __chkstk_darwin(v91);
  uint64_t v90 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (void *)sub_100018A04((uint64_t *)&unk_100112E30);
  uint64_t v93 = *(v9 - 1);
  __chkstk_darwin(v9);
  os_log_t v92 = (os_log_t)((char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v94 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v88 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint8_t **)((char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v17 = *(void **)((char *)v3 + OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_queue);
  *uint64_t v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v89 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }

  sub_1000413B4(a1, (uint64_t)v98);
  sub_100041B34((uint64_t)v98, (uint64_t)v99);
  if (*((void *)&v99[0] + 1))
  {
    uint64_t v16 = v3;
    v101[2] = v99[2];
    v101[3] = v99[3];
    v102[0] = v100[0];
    *(_OWORD *)((char *)v102 + 9) = *(_OWORD *)((char *)v100 + 9);
    v101[0] = v99[0];
    v101[1] = v99[1];
    if (qword_100112238 == -1)
    {
LABEL_4:
      unint64_t v86 = v7;
      id v87 = v9;
      uint64_t v18 = type metadata accessor for Logger(0LL);
      sub_10001C270(v18, (uint64_t)qword_100113AC0);
      id v19 = a1;
      id v20 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v21 = static os_log_type_t.default.getter();
      int v22 = v21;
      if (os_log_type_enabled(v20, v21))
      {
        int v85 = v22;
        unsigned int v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v84 = swift_slowAlloc(32LL, -1LL);
        uint64_t v97 = v84;
        uint64_t v83 = v23;
        *(_DWORD *)unsigned int v23 = 136315138;
        uint64_t v82 = v23 + 4;
        id v24 = [v19 UUID];
        uint64_t v25 = v16;
        id v26 = v88;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

        uint64_t v27 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v11, v27);
        uint64_t v29 = v11;
        unint64_t v31 = v30;
        uint64_t v32 = v94;
        uint64_t v33 = v26;
        uint64_t v16 = v25;
        (*(void (**)(char *, uint64_t))(v94 + 8))(v33, v29);
        id v95 = (id)sub_1000850E4(v28, v31, &v97);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v82, v23 + 12);

        unint64_t v34 = v31;
        uint64_t v11 = v29;
        swift_bridgeObjectRelease(v34);
        uint64_t v35 = v83;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  (os_log_type_t)v85,  "Requesting presentation of notSupportedOnTV activity bulletin for activity %s.",  v83,  0xCu);
        uint64_t v36 = v84;
        swift_arrayDestroy(v84, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1LL, -1LL);
        swift_slowDealloc(v35, -1LL, -1LL);
      }

      else
      {

        uint64_t v32 = v94;
      }

      uint64_t v62 = sub_10001C3FC( (void *)((char *)v16 + OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_bulletinManager),  *(void *)((char *)v16 + OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_bulletinManager + 24));
      __chkstk_darwin(v62);
      *(&v82 - 2) = (uint8_t *)v101;
      *(&v82 - 1) = v63;
      uint64_t v65 = v90;
      uint64_t v64 = v91;
      OS_dispatch_queue.sync<A>(execute:)(sub_100022558);
      uint64_t v66 = *(void *)&v65[*(int *)(v64 + 48)];
      v67.n128_f64[0] = (*(double (**)(char *, uint64_t))(v32 + 8))(v65, v11);
      uint64_t v97 = v66;
      uint64_t v68 = v89;
      id v95 = v89;
      uint64_t v69 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL, v67);
      uint64_t v70 = (uint64_t)v86;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56LL))(v86, 1LL, 1LL, v69);
      id v71 = v68;
      uint64_t v72 = sub_100018A04(&qword_100112E40);
      uint64_t v73 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      uint64_t v74 = sub_100022750( &qword_100112E48,  &qword_100112E40,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
      uint64_t v75 = sub_100022510( (unint64_t *)&qword_100112E50,  (unint64_t *)&qword_100112DB0,  &OBJC_CLASS___OS_dispatch_queue_ptr,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
      os_log_t v76 = v92;
      Publisher.receive<A>(on:options:)(&v95, v70, v72, v73, v74, v75);
      sub_10001C608(v70, (uint64_t *)&unk_100113480);

      swift_release(v97);
      uint64_t v77 = swift_allocObject(&unk_1000F8970, 24LL, 7LL);
      *(void *)(v77 + swift_unknownObjectWeakDestroy(v0 + 16) = v19;
      uint64_t v78 = swift_allocObject(&unk_1000F8998, 24LL, 7LL);
      *(void *)(v78 + swift_unknownObjectWeakDestroy(v0 + 16) = v19;
      uint64_t v79 = sub_100022750( (unint64_t *)&unk_100113B90,  (uint64_t *)&unk_100112E30,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      id v80 = v19;
      id v81 = v87;
      Publisher.sinkOnce(_:onError:)(sub_100041B7C, v77, sub_100041B84, v78, v87, v79);
      swift_release(v77);
      swift_release(v78);
      sub_100041BA4((uint64_t)v98);
      (*(void (**)(os_log_t, id))(v93 + 8))(v76, v81);
      return;
    }

void *sub_10003D8B0(void *a1, void *a2)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  v123._object = *(void **)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v124 = (char *)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = *(void **)&v2[OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_queue];
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v12 = v11;
  unsigned int v13 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_35:
    swift_once(&qword_100112238, sub_10003B86C);
    goto LABEL_18;
  }

  id v14 = [a2 localMember];
  uint64_t v127 = (uint64_t)v12;
  object = v2;
  v123._uint64_t countAndFlagsBits = v5;
  if (v14)
  {
    uint64_t v15 = v14;
    unsigned int v13 = [v14 isLightweightMember];
  }

  else
  {
    unsigned int v13 = 0;
  }

  id v16 = [a1 metadata];

  if (v16)
  {
    id v17 = [a1 metadata];
    if (v17)
    {
      uint64_t v18 = v17;
      unsigned int v19 = v13;
      id v20 = [v17 context];

      id v21 = [v20 typedIdentifier];
      int v22 = (void *)TUConversationActivityContextIdentifierWatchTogether;
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      uint64_t v25 = v24;
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      uint64_t v28 = v26;
      if (v23 == v27 && v25 == v26) {
        int v128 = 1;
      }
      else {
        int v128 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v27, v26, 0LL);
      }
      id v29 = v22;

      swift_bridgeObjectRelease(v25);
      swift_bridgeObjectRelease(v28);
      unsigned int v13 = v19;
    }

    else
    {
      int v128 = 0;
    }
  }

  else
  {
    int v128 = 1;
  }

  id v30 = [a1 metadata];
  if (v30)
  {
    unint64_t v31 = v30;
    unsigned int v126 = [v30 supportsContinuationOnTV];
  }

  else
  {
    unsigned int v126 = 0;
  }

  if (qword_100112238 != -1) {
    goto LABEL_35;
  }
LABEL_18:
  uint64_t v32 = type metadata accessor for Logger(0LL);
  sub_10001C270(v32, (uint64_t)qword_100113AC0);
  id v33 = a1;
  id v34 = a2;
  id v35 = v33;
  id v36 = v34;
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.default.getter();
  int v39 = v38;
  BOOL v40 = os_log_type_enabled(v37, v38);
  unsigned int v129 = v13;
  if (v40)
  {
    uint64_t v41 = swift_slowAlloc(40LL, -1LL);
    uint64_t v122 = swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 v139 = v122;
    *(_DWORD *)uint64_t v41 = 136316162;
    uint64_t v119 = v41 + 4;
    id v42 = [v35 UUID];
    os_log_t v121 = v37;
    id v43 = v42;
    LODWORD(v120) = v39;
    int v44 = v124;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v42);

    uint64_t v45 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t countAndFlagsBits = v123._countAndFlagsBits;
    uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v123._countAndFlagsBits, v45);
    unint64_t v49 = v48;
    v123._object = (void *)*((void *)v123._object + 1);
    ((void (*)(char *, uint64_t))v123._object)(v44, countAndFlagsBits);
    *(void *)&__int128 v130 = sub_1000850E4(v47, v49, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v119, v41 + 12);

    *(void *)&double v50 = swift_bridgeObjectRelease(v49).n128_u64[0];
    *(_WORD *)(v41 + 12) = 2080;
    id v51 = objc_msgSend(v36, "UUID", v50);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v51);

    uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(countAndFlagsBits, v45);
    unint64_t v54 = v53;
    ((void (*)(char *, uint64_t))v123._object)(v44, countAndFlagsBits);
    *(void *)&__int128 v130 = sub_1000850E4(v52, v54, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v41 + 14, v41 + 22);

    swift_bridgeObjectRelease(v54);
    *(_WORD *)(v41 + 22) = 1024;
    LODWORD(v130) = v126;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 4, v41 + 24, v41 + 28);
    *(_WORD *)(v41 + 2_Block_object_dispose(va, 8) = 1024;
    LODWORD(v130) = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 4, v41 + 30, v41 + 34);
    *(_WORD *)(v41 + 34) = 1024;
    LODWORD(v130) = v128 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 4, v41 + 36, v41 + 40);
    os_log_t v55 = v121;
    _os_log_impl( (void *)&_mh_execute_header,  v121,  (os_log_type_t)v120,  "Presenting missing app alert for activity %s in conversation %s supportedOnTV:%{BOOL}d isExpanseSession:%{BOOL}d i sWatchTogether:%{BOOL}d",  (uint8_t *)v41,  0x28u);
    uint64_t v56 = v122;
    swift_arrayDestroy(v122, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1LL, -1LL);
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v57 = object;
  uint64_t v120 = sub_10004005C();
  unint64_t v124 = v58;
  unint64_t v59 = (void *)swift_allocObject(&unk_1000F89C0, 40LL, 7LL);
  v59[2] = v35;
  v59[3] = v57;
  uint64_t v122 = (uint64_t)v59;
  v59[4] = v36;
  uint64_t v61 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle, v60);
  id v62 = v35;
  id v63 = v36;
  id v64 = v57;
  uint64_t v65 = (NSBundle *)[v61 mainBundle];
  v66._uint64_t countAndFlagsBits = 0xD000000000000023LL;
  v148._object = (void *)0xEB00000000656C62LL;
  v66._object = (void *)0x80000001000D9E90LL;
  v67._uint64_t countAndFlagsBits = 0LL;
  v67._object = (void *)0xE000000000000000LL;
  v148._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  Swift::String v68 = NSLocalizedString(_:tableName:bundle:value:comment:)(v66, (Swift::String_optional)0, v65, v67, v148);
  os_log_t v121 = (os_log_t)v68._countAndFlagsBits;
  object = v68._object;

  uint64_t v69 = swift_allocObject(&unk_1000F89E8, 32LL, 7LL);
  *(void *)(v69 + swift_unknownObjectWeakDestroy(v0 + 16) = v62;
  *(void *)(v69 + 24) = v64;
  id v70 = v62;
  id v71 = v64;
  uint64_t v72 = (NSBundle *)[v61 mainBundle];
  v73._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v149._object = (void *)0xEB00000000656C62LL;
  v73._object = (void *)0x80000001000D9EC0LL;
  v74._uint64_t countAndFlagsBits = 0LL;
  v74._object = (void *)0xE000000000000000LL;
  v149._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  Swift::String v123 = NSLocalizedString(_:tableName:bundle:value:comment:)(v73, (Swift::String_optional)0, v72, v74, v149);

  uint64_t v75 = swift_allocObject(&unk_1000F8A10, 24LL, 7LL);
  *(void *)(v75 + swift_unknownObjectWeakDestroy(v0 + 16) = v70;
  uint64_t v76 = sub_100018A04((uint64_t *)&unk_100112980);
  uint64_t v77 = swift_allocObject(v76, 72LL, 7LL);
  *(_OWORD *)(v77 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FB0;
  id v78 = v70;
  id v79 = [v63 displayName];
  uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
  uint64_t v82 = v81;

  *(void *)(v77 + 56) = &type metadata for String;
  *(void *)(v77 + 64) = sub_1000224B4();
  *(void *)(v77 + 32) = v80;
  *(void *)(v77 + 40) = v82;
  uint64_t v83 = (NSBundle *)[v61 mainBundle];
  if (v129)
  {
    if ((v128 & 1) != 0)
    {
      unint64_t v117 = 0xEB00000000656C62LL;
      unint64_t v84 = 0x80000001000D9F10LL;
      unint64_t v85 = 0xD00000000000001ALL;
    }

    else
    {
      unint64_t v85 = 0xD000000000000021LL;
      unint64_t v117 = 0xEB00000000656C62LL;
      unint64_t v84 = 0x80000001000D9EE0LL;
    }

    v88._uint64_t countAndFlagsBits = 0LL;
    v88._object = (void *)0xE000000000000000LL;
    uint64_t v89 = 0x617A696C61636F4CLL;
    Swift::String v90 = NSLocalizedString(_:tableName:bundle:value:comment:)( *(Swift::String *)&v85,  (Swift::String_optional)0,  v83,  v88,  *(Swift::String *)(&v117 - 1));

    uint64_t v91 = static String.localizedStringWithFormat(_:_:)(v90._countAndFlagsBits, v90._object, v77);
    uint64_t v93 = v92;
    swift_bridgeObjectRelease(v77);
    swift_bridgeObjectRelease(v90._object);
    uint64_t v94 = sub_100041CC0(v78);
    uint64_t v96 = v95;
    if (v126)
    {
      uint64_t v97 = object;
      swift_bridgeObjectRetain(object);
      swift_retain(v69);
      uint64_t v98 = sub_100041C8C;
      uint64_t v99 = v97;
      uint64_t v100 = v69;
      os_log_t v101 = v121;
    }

    else
    {
      os_log_t v101 = 0LL;
      uint64_t v99 = 0LL;
      uint64_t v98 = 0LL;
      uint64_t v100 = 0LL;
      uint64_t v97 = object;
    }

    *(void *)&__int128 v130 = v91;
    *((void *)&v130 + 1) = v93;
    id v113 = v124;
    *(void *)&__int128 v131 = v120;
    *((void *)&v131 + 1) = v124;
    uint64_t v114 = v122;
    *(void *)&__int128 v132 = sub_100041C54;
    *((void *)&v132 + 1) = v122;
    *(void *)&__int128 v133 = v94;
    *((void *)&v133 + 1) = v96;
    v134._uint64_t countAndFlagsBits = (uint64_t)v101;
    v134._object = v99;
    *(void *)&__int128 v135 = v98;
    *((void *)&v135 + 1) = v100;
    id v115 = v123._object;
    Swift::String v136 = v123;
    *(void *)&__int128 v137 = sub_100041CB8;
    *((void *)&v137 + 1) = v75;
    uint64_t v138 = 0LL;
    __int128 v141 = v132;
    __int128 v142 = v133;
    __int128 v139 = v130;
    __int128 v140 = v131;
    uint64_t v147 = 0LL;
    Swift::String v145 = v123;
    __int128 v146 = v137;
    Swift::String v143 = v134;
    __int128 v144 = v135;
    swift_bridgeObjectRetain(v123._object);
    swift_retain(v75);
    swift_bridgeObjectRetain(v113);
    swift_retain(v114);
    sub_100088B38((uint64_t)&v139, v127);
    swift_release(v75);
    swift_bridgeObjectRelease(v115);
    swift_release(v69);
    swift_bridgeObjectRelease(v97);
    swift_release(v114);
    id v112 = v113;
  }

  else
  {
    if ((v128 & 1) != 0)
    {
      unint64_t v118 = 0xEB00000000656C62LL;
      unint64_t v86 = 0x80000001000D9F10LL;
      unint64_t v87 = 0xD00000000000001ALL;
    }

    else
    {
      unint64_t v87 = 0xD000000000000021LL;
      unint64_t v118 = 0xEB00000000656C62LL;
      unint64_t v86 = 0x80000001000D9EE0LL;
    }

    v102._uint64_t countAndFlagsBits = 0LL;
    v102._object = (void *)0xE000000000000000LL;
    uint64_t v103 = 0x617A696C61636F4CLL;
    Swift::String v104 = NSLocalizedString(_:tableName:bundle:value:comment:)( *(Swift::String *)&v87,  (Swift::String_optional)0,  v83,  v102,  *(Swift::String *)(&v118 - 1));

    uint64_t v105 = static String.localizedStringWithFormat(_:_:)(v104._countAndFlagsBits, v104._object, v77);
    uint64_t v107 = v106;
    swift_bridgeObjectRelease(v77);
    swift_bridgeObjectRelease(v104._object);
    uint64_t v108 = sub_100041CC0(v78);
    *(void *)&__int128 v130 = v105;
    *((void *)&v130 + 1) = v107;
    id v109 = object;
    *(void *)&__int128 v131 = v121;
    *((void *)&v131 + 1) = object;
    *(void *)&__int128 v132 = sub_100041C8C;
    *((void *)&v132 + 1) = v69;
    *(void *)&__int128 v133 = v108;
    *((void *)&v133 + 1) = v110;
    id v111 = v123._object;
    Swift::String v134 = v123;
    *(void *)&__int128 v135 = sub_100041CB8;
    *((void *)&v135 + 1) = v75;
    Swift::String v136 = (Swift::String)0;
    __int128 v137 = 0u;
    uint64_t v138 = 0LL;
    __int128 v141 = v132;
    __int128 v142 = v133;
    __int128 v139 = v130;
    __int128 v140 = v131;
    uint64_t v147 = 0LL;
    Swift::String v145 = (Swift::String)0;
    __int128 v146 = 0u;
    Swift::String v143 = v123;
    __int128 v144 = v135;
    swift_bridgeObjectRetain(object);
    swift_retain(v69);
    swift_bridgeObjectRetain(v111);
    swift_retain(v75);
    sub_100088B38((uint64_t)&v139, v127);
    swift_release(v75);
    swift_bridgeObjectRelease(v111);
    swift_release(v69);
    swift_bridgeObjectRelease(v109);
    swift_release(v122);
    id v112 = v124;
  }

  swift_bridgeObjectRelease(v112);
  return sub_10002288C(&v130);
}

void sub_10003E438(void *a1, void *a2)
{
  id v87 = a2;
  uint64_t v4 = sub_100018A04((uint64_t *)&unk_100113480);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v83 = sub_100018A04(&qword_100114AF0);
  __chkstk_darwin(v83);
  uint64_t v82 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (os_log_s *)sub_100018A04((uint64_t *)&unk_100112E30);
  uint64_t v85 = *((void *)v8 - 1);
  os_log_t v86 = v8;
  __chkstk_darwin(v8);
  unint64_t v84 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v88 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v81 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint8_t **)((char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v16 = *(void **)&v2[OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_queue];
  *uint64_t v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  LOBYTE(vswift_unknownObjectWeakDestroy(v0 + 16) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }

  sub_10003F028(a1, (uint64_t)v92);
  sub_100041B34((uint64_t)v92, (uint64_t)v93);
  if (*((void *)&v93[0] + 1))
  {
    uint64_t v80 = v2;
    v95[2] = v93[2];
    v95[3] = v93[3];
    v96[0] = v94[0];
    *(_OWORD *)((char *)v96 + 9) = *(_OWORD *)((char *)v94 + 9);
    v95[0] = v93[0];
    v95[1] = v93[1];
    if (qword_100112238 == -1)
    {
LABEL_4:
      id v79 = v17;
      uint64_t v18 = type metadata accessor for Logger(0LL);
      sub_10001C270(v18, (uint64_t)qword_100113AC0);
      id v19 = a1;
      id v20 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        int v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v77 = swift_slowAlloc(32LL, -1LL);
        uint64_t v91 = v77;
        id v78 = v6;
        *(_DWORD *)int v22 = 136315138;
        uint64_t v76 = v22 + 4;
        id v23 = [v19 UUID];
        uint64_t v24 = v81;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);

        uint64_t v25 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v10, v25);
        unint64_t v28 = v27;
        (*(void (**)(char *, uint64_t))(v88 + 8))(v24, v10);
        id v89 = (id)sub_1000850E4(v26, v28, &v91);
        uint64_t v6 = v78;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v76, v22 + 12);

        swift_bridgeObjectRelease(v28);
        _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "Requesting presentation of missing app bulletin for activity %s.",  v22,  0xCu);
        uint64_t v29 = v77;
        swift_arrayDestroy(v77, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v29, -1LL, -1LL);
        swift_slowDealloc(v22, -1LL, -1LL);
      }

      else
      {
      }

      unint64_t v53 = v80;
      unint64_t v54 = sub_10001C3FC( &v80[OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_bulletinManager],  *(void *)&v80[OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_bulletinManager + 24]);
      __chkstk_darwin(v54);
      *(&v76 - 2) = (uint8_t *)v95;
      *(&v76 - 1) = v55;
      uint64_t v57 = v82;
      uint64_t v56 = v83;
      OS_dispatch_queue.sync<A>(execute:)(sub_1000229E8);
      uint64_t v58 = *(void *)&v57[*(int *)(v56 + 48)];
      v59.n128_f64[0] = (*(double (**)(char *, uint64_t))(v88 + 8))(v57, v10);
      uint64_t v91 = v58;
      uint64_t v60 = v79;
      id v89 = v79;
      uint64_t v61 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL, v59);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56LL))(v6, 1LL, 1LL, v61);
      id v62 = v60;
      uint64_t v63 = sub_100018A04(&qword_100112E40);
      uint64_t v64 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      uint64_t v65 = sub_100022750( &qword_100112E48,  &qword_100112E40,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
      uint64_t v66 = sub_100022510( (unint64_t *)&qword_100112E50,  (unint64_t *)&qword_100112DB0,  &OBJC_CLASS___OS_dispatch_queue_ptr,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
      Swift::String v67 = v84;
      Publisher.receive<A>(on:options:)(&v89, v6, v63, v64, v65, v66);
      sub_10001C608((uint64_t)v6, (uint64_t *)&unk_100113480);

      swift_release(v91);
      Swift::String v68 = (void *)swift_allocObject(&unk_1000F8A38, 40LL, 7LL);
      v68[2] = v19;
      v68[3] = v53;
      id v69 = v87;
      v68[4] = v87;
      uint64_t v70 = swift_allocObject(&unk_1000F8A60, 24LL, 7LL);
      *(void *)(v70 + swift_unknownObjectWeakDestroy(v0 + 16) = v19;
      uint64_t v71 = sub_100022750( (unint64_t *)&unk_100113B90,  (uint64_t *)&unk_100112E30,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      id v72 = v19;
      id v73 = v53;
      id v74 = v69;
      os_log_t v75 = v86;
      Publisher.sinkOnce(_:onError:)(sub_100042B58, v68, sub_100042B64, v70, v86, v71);
      swift_release(v68);
      swift_release(v70);
      sub_100041BA4((uint64_t)v92);
      (*(void (**)(char *, os_log_t))(v85 + 8))(v67, v75);
      return;
    }

id sub_10003ED08(uint64_t *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *a1;
  if (qword_100112238 != -1) {
    swift_once(&qword_100112238, sub_10003B86C);
  }
  uint64_t v13 = sub_10001C270(v8, (uint64_t)qword_100113AC0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
  id v14 = a2;
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  int v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, (os_log_type_t)v16))
  {
    int v31 = v16;
    uint64_t v32 = v9;
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    uint64_t v30 = swift_slowAlloc(64LL, -1LL);
    uint64_t v35 = v30;
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v33 = v17 + 4;
    id v18 = [v14 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

    uint64_t v19 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v4, v19);
    uint64_t v21 = v5;
    unint64_t v23 = v22;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v4);
    uint64_t v34 = sub_1000850E4(v20, v23, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v33, v17 + 12);

    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v17 + 12) = 2080;
    id result = (id)PBSBulletinDismissalReasonDescription(v12);
    if (result)
    {
      uint64_t v25 = result;
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      unint64_t v28 = v27;

      uint64_t v34 = sub_1000850E4(v26, v28, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease(v28);
      _os_log_impl( (void *)&_mh_execute_header,  v15,  (os_log_type_t)v31,  "notSupportedOnTV activity bulletin for activity %s was dismissed with reason %s.",  (uint8_t *)v17,  0x16u);
      uint64_t v29 = v30;
      swift_arrayDestroy(v30, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);

      return (id)(*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v11, v8);
    }

    else
    {
      __break(1u);
    }
  }

  else
  {

    return (id)(*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  return result;
}

void sub_10003F028(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100018A04((uint64_t *)&unk_100115630);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v134 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for PersonNameComponents(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v134 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id countAndFlagsBits = [a1 originator];
  if (countAndFlagsBits)
  {
    uint64_t v143 = v8;
    id v145 = a1;
    id v13 =  [*(id *)(v2 + OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_neighborhoodActivityConduit) knownContacts];
    uint64_t v14 = sub_10001C5D0(0LL, (unint64_t *)&qword_100113BA0, &OBJC_CLASS___TUHandle_ptr);
    uint64_t v15 = sub_10001C5D0(0LL, &qword_100115640, &OBJC_CLASS___CNContact_ptr);
    uint64_t v16 = sub_100022510( (unint64_t *)&unk_100113BB0,  (unint64_t *)&qword_100113BA0,  &OBJC_CLASS___TUHandle_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v13, v14, v15, v16);

    id v18 = countAndFlagsBits;
    uint64_t v19 = sub_100089774(v18, v17);

    *(void *)&double v21 = swift_bridgeObjectRelease(v17).n128_u64[0];
    id v144 = v18;
    if (v19)
    {
      id v142 = (id)objc_opt_self(&OBJC_CLASS___NSPersonNameComponentsFormatter, v20);
      id v22 = [v19 namePrefix];
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      uint64_t v140 = v24;
      uint64_t v141 = v23;

      id v25 = [v19 givenName];
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      uint64_t v138 = v27;
      uint64_t v139 = v26;

      id v28 = [v19 middleName];
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      uint64_t v136 = v30;
      uint64_t v137 = v29;

      id v31 = [v19 familyName];
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      uint64_t v134 = v33;
      uint64_t v135 = v32;

      id v34 = [v19 nameSuffix];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v37 = v36;

      id v38 = [v19 nickname];
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      uint64_t v41 = v40;

      uint64_t v42 = v7;
      uint64_t v43 = v9;
      unint64_t v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      uint64_t v45 = v143;
      v44(v42, 1LL, 1LL, v143);
      PersonNameComponents.init(namePrefix:givenName:middleName:familyName:nameSuffix:nickname:phoneticRepresentation:)( v141,  v140,  v139,  v138,  v137,  v136,  v135,  v134,  v35,  v37,  v39,  v41,  v42);
      Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v45);
      id v47 = [v142 localizedStringFromPersonNameComponents:isa style:2 options:0];

      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
      uint64_t v50 = v49;
    }

    else
    {
      id v47 = objc_msgSend(v18, "value", v21);
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
      uint64_t v50 = v58;
    }

    id v59 = v145;
    id v60 = [v145 metadata];
    if (v60
      && (uint64_t v61 = v60, v62 = [v60 title], v61, v62))
    {
      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
      uint64_t v65 = v64;

      uint64_t v66 = sub_100018A04((uint64_t *)&unk_100112980);
      uint64_t v67 = swift_allocObject(v66, 112LL, 7LL);
      *(_OWORD *)(v67 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C52F0;
      *(void *)(v67 + 56) = &type metadata for String;
      unint64_t v68 = sub_1000224B4();
      *(void *)(v67 + 32) = v48;
      *(void *)(v67 + 40) = v50;
      *(void *)(v67 + 96) = &type metadata for String;
      *(void *)(v67 + 104) = v68;
      *(void *)(v67 + 64) = v68;
      *(void *)(v67 + 72) = v63;
      *(void *)(v67 + 80) = v65;
      id v59 = v145;
      uint64_t v70 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v69), "mainBundle");
      unint64_t v71 = 0xD00000000000001DLL;
      unint64_t v131 = 0xEB00000000656C62LL;
      id v72 = "MissingAppBulletinTitleFormat";
    }

    else
    {
      uint64_t v73 = sub_100018A04((uint64_t *)&unk_100112980);
      uint64_t v67 = swift_allocObject(v73, 72LL, 7LL);
      *(_OWORD *)(v67 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FB0;
      *(void *)(v67 + 56) = &type metadata for String;
      *(void *)(v67 + 64) = sub_1000224B4();
      *(void *)(v67 + 32) = v48;
      *(void *)(v67 + 40) = v50;
      uint64_t v70 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v74), "mainBundle");
      unint64_t v71 = 0xD00000000000002BLL;
      unint64_t v131 = 0xEB00000000656C62LL;
      id v72 = "MissingAppBulletinUnknownContentTitleFormat";
    }

    unint64_t v75 = (unint64_t)(v72 - 32) | 0x8000000000000000LL;
    v76._id countAndFlagsBits = 0LL;
    v76._object = (void *)0xE000000000000000LL;
    uint64_t v77 = 0x617A696C61636F4CLL;
    Swift::String v78 = NSLocalizedString(_:tableName:bundle:value:comment:)( *(Swift::String *)&v71,  (Swift::String_optional)0,  v70,  v76,  *(Swift::String *)(&v131 - 1));

    uint64_t v51 = static String.localizedStringWithFormat(_:_:)(v78._countAndFlagsBits, v78._object, v67);
    uint64_t v52 = v79;
    swift_bridgeObjectRelease(v67);
    id v80 = objc_msgSend(v59, "metadata", swift_bridgeObjectRelease(v78._object).n128_f64[0]);

    if (!v80) {
      goto LABEL_16;
    }
    id v81 = [v59 metadata];
    if (v81)
    {
      uint64_t v82 = v81;
      id v83 = [v81 context];

      id v84 = [v83 typedIdentifier];
      uint64_t v85 = (void *)TUConversationActivityContextIdentifierWatchTogether;
      uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
      uint64_t v88 = v87;
      uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
      uint64_t v91 = v89;
      if (v86 == v90 && v88 == v89)
      {
        id v92 = v85;

        swift_bridgeObjectRelease_n(v88, 2LL);
        id v59 = v145;
LABEL_16:
        id v95 = [v59 localizedApplicationName];
        if (v95)
        {
          uint64_t v97 = v95;
          uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
          uint64_t v100 = v99;

          uint64_t v101 = sub_100018A04((uint64_t *)&unk_100112980);
          uint64_t v102 = swift_allocObject(v101, 72LL, 7LL);
          *(_OWORD *)(v102 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FB0;
          *(void *)(v102 + 56) = &type metadata for String;
          *(void *)(v102 + 64) = sub_1000224B4();
          *(void *)(v102 + 32) = v98;
          *(void *)(v102 + 40) = v100;
          Swift::String v104 = (NSBundle *)objc_msgSend((id)objc_opt_self( NSBundle,  v103), "mainBundle");
          unint64_t v132 = 0xEB00000000656C62LL;
          unint64_t v105 = 0x80000001000DA220LL;
          unint64_t v106 = 0xD00000000000001FLL;
LABEL_20:
          v115._id countAndFlagsBits = 0LL;
          v115._object = (void *)0xE000000000000000LL;
          uint64_t v116 = 0x617A696C61636F4CLL;
          Swift::String v117 = NSLocalizedString(_:tableName:bundle:value:comment:)( *(Swift::String *)&v106,  (Swift::String_optional)0,  v104,  v115,  *(Swift::String *)(&v132 - 1));

          uint64_t v53 = static String.localizedStringWithFormat(_:_:)(v117._countAndFlagsBits, v117._object, v102);
          object = v118;
          swift_bridgeObjectRelease(v102);
          swift_bridgeObjectRelease(v117._object);
LABEL_24:
          uint64_t v127 = (NSBundle *)objc_msgSend((id)objc_opt_self( NSBundle,  v119), "mainBundle");
          v146._object = (void *)0xEB00000000656C62LL;
          v128._object = (void *)0x80000001000DA1A0LL;
          v128._id countAndFlagsBits = 0xD00000000000001FLL;
          v129._id countAndFlagsBits = 0LL;
          v129._object = (void *)0xE000000000000000LL;
          v146._id countAndFlagsBits = 0x617A696C61636F4CLL;
          Swift::String v130 = NSLocalizedString(_:tableName:bundle:value:comment:)(v128, (Swift::String_optional)0, v127, v129, v146);
          id countAndFlagsBits = (id)v130._countAndFlagsBits;

          int64x2_t v57 = vdupq_n_s64(2uLL);
          v57.i64[0] = (uint64_t)v130._object;
          char v56 = 1;
          unint64_t v55 = 0xF000000000000000LL;
          goto LABEL_25;
        }

        uint64_t v120 = (NSBundle *)objc_msgSend((id)objc_opt_self( NSBundle,  v96), "mainBundle");
        unint64_t v121 = 0xD000000000000023LL;
        unint64_t v133 = 0xEB00000000656C62LL;
        uint64_t v122 = "MissingAppBulletinUnknownAppMessage";
        goto LABEL_23;
      }

      char v93 = _stringCompareWithSmolCheck(_:_:expecting:)(v86, v88, v90, v89, 0LL);
      id v94 = v85;

      swift_bridgeObjectRelease(v88);
      swift_bridgeObjectRelease(v91);
      id v59 = v145;
      if ((v93 & 1) != 0) {
        goto LABEL_16;
      }
    }

    id v107 = [v59 localizedApplicationName];
    if (v107)
    {
      id v109 = v107;
      uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
      uint64_t v112 = v111;

      uint64_t v113 = sub_100018A04((uint64_t *)&unk_100112980);
      uint64_t v102 = swift_allocObject(v113, 72LL, 7LL);
      *(_OWORD *)(v102 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FB0;
      *(void *)(v102 + 56) = &type metadata for String;
      *(void *)(v102 + 64) = sub_1000224B4();
      *(void *)(v102 + 32) = v110;
      *(void *)(v102 + 40) = v112;
      Swift::String v104 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v114), "mainBundle");
      unint64_t v106 = 0xD000000000000026LL;
      unint64_t v132 = 0xEB00000000656C62LL;
      unint64_t v105 = 0x80000001000DA1C0LL;
      goto LABEL_20;
    }

    uint64_t v120 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v108), "mainBundle");
    unint64_t v121 = 0xD00000000000002ALL;
    unint64_t v133 = 0xEB00000000656C62LL;
    uint64_t v122 = "MissingGenericAppBulletinUnknownAppMessage";
LABEL_23:
    unint64_t v123 = (unint64_t)(v122 - 32) | 0x8000000000000000LL;
    v124._id countAndFlagsBits = 0LL;
    v124._object = (void *)0xE000000000000000LL;
    uint64_t v125 = 0x617A696C61636F4CLL;
    Swift::String v126 = NSLocalizedString(_:tableName:bundle:value:comment:)( *(Swift::String *)&v121,  (Swift::String_optional)0,  v120,  v124,  *(Swift::String *)(&v133 - 1));
    uint64_t v53 = v126._countAndFlagsBits;
    object = v126._object;

    goto LABEL_24;
  }

  uint64_t v51 = 0LL;
  uint64_t v52 = 0LL;
  uint64_t v53 = 0LL;
  object = 0LL;
  unint64_t v55 = 0LL;
  char v56 = 0;
  int64x2_t v57 = 0uLL;
LABEL_25:
  *(void *)a2 = v51;
  *(void *)(a2 + _Block_object_dispose(va, 8) = v52;
  *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v53;
  *(void *)(a2 + 24) = object;
  *(void *)(a2 + 32) = countAndFlagsBits;
  *(int64x2_t *)(a2 + 40) = v57;
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = v55;
  *(void *)(a2 + 80) = 0LL;
  *(_BYTE *)(a2 + 8_Block_object_dispose(va, 8) = v56;
}

void *sub_10003FA00(uint64_t *a1, void *a2, uint64_t a3, void *a4)
{
  id v38 = a4;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v39 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *a1;
  if (qword_100112238 != -1) {
    swift_once(&qword_100112238, sub_10003B86C);
  }
  uint64_t v15 = sub_10001C270(v10, (uint64_t)qword_100113AC0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v15, v10);
  uint64_t v16 = v11;
  id v17 = a2;
  id v18 = (void *)Logger.logObject.getter(v17);
  int v19 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled((os_log_t)v18, (os_log_type_t)v19))
  {

    id result = (void *)(*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v13, v10);
    if (v14 != 1) {
      return result;
    }
    return sub_10003D8B0(v17, v38);
  }

  int v34 = v19;
  uint64_t v35 = v16;
  uint64_t v36 = a3;
  uint64_t v20 = swift_slowAlloc(22LL, -1LL);
  uint64_t v33 = swift_slowAlloc(64LL, -1LL);
  uint64_t v41 = v33;
  *(_DWORD *)uint64_t v20 = 136315394;
  uint64_t v37 = v20 + 4;
  id v21 = [v17 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);

  uint64_t v22 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v7, v22);
  unint64_t v25 = v24;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v7);
  uint64_t v40 = sub_1000850E4(v23, v25, &v41);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v37, v20 + 12);

  swift_bridgeObjectRelease(v25);
  *(_WORD *)(v20 + 12) = 2080;
  uint64_t v39 = v14;
  id result = (id)PBSBulletinDismissalReasonDescription(v14);
  if (!result)
  {
    __break(1u);
    return result;
  }

  uint64_t v27 = result;
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  unint64_t v30 = v29;

  uint64_t v40 = sub_1000850E4(v28, v30, &v41);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v20 + 14, v20 + 22);
  swift_bridgeObjectRelease(v30);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v18,  (os_log_type_t)v34,  "Missing app bulletin for activity %s was dismissed with reason %s.",  (uint8_t *)v20,  0x16u);
  uint64_t v31 = v33;
  swift_arrayDestroy(v33, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v31, -1LL, -1LL);
  swift_slowDealloc(v20, -1LL, -1LL);

  id result = (void *)(*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v13, v10);
  if (v39 == 1) {
    return sub_10003D8B0(v17, v38);
  }
  return result;
}

void sub_10003FD68(uint64_t a1, void *a2, const char *a3)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100112238 != -1) {
    swift_once(&qword_100112238, sub_10003B86C);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_10001C270(v9, (uint64_t)qword_100113AC0);
  id v27 = a2;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    id v13 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v29 = v26;
    *(_DWORD *)uint64_t v12 = 136315394;
    id v14 = [v27 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);

    uint64_t v15 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter(v5, v15);
    unint64_t v25 = a3;
    unint64_t v18 = v17;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v28 = sub_1000850E4(v16, v18, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v12 + 4, v12 + 12);

    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v12 + 12) = 2112;
    unint64_t v19 = sub_100022848();
    uint64_t v20 = swift_allocError(&type metadata for BulletinManagerError, v19, 0LL, 0LL);
    uint64_t v21 = _swift_stdlib_bridgeErrorToNSError(v20);
    uint64_t v28 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v12 + 14, v12 + 22);
    *id v13 = v21;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, v25, (uint8_t *)v12, 0x16u);
    uint64_t v22 = sub_100018A04((uint64_t *)&unk_100112E20);
    swift_arrayDestroy(v13, 1LL, v22);
    swift_slowDealloc(v13, -1LL, -1LL);
    uint64_t v23 = v26;
    swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {
  }

uint64_t sub_10004005C()
{
  id v1 =  [*(id *)(v0 + OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_neighborhoodActivityConduit) currentSplitSession];
  if (v1
    && (uint64_t v3 = v1,
        id v4 = [v1 device],
        v3,
        id v5 = [v4 name],
        v4,
        v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v8 = v7;

    uint64_t v9 = sub_100018A04((uint64_t *)&unk_100112980);
    uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
    *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FB0;
    *(void *)(v10 + 56) = &type metadata for String;
    *(void *)(v10 + 64) = sub_1000224B4();
    *(void *)(v10 + 32) = v6;
    *(void *)(v10 + 40) = v8;
    uint64_t v12 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v11), "mainBundle");
    v21._object = (void *)0xEB00000000656C62LL;
    v13._object = (void *)0x80000001000DA120LL;
    v13._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
    v14._uint64_t countAndFlagsBits = 0LL;
    v14._object = (void *)0xE000000000000000LL;
    v21._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    Swift::String v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, v12, v14, v21);

    uint64_t countAndFlagsBits = static String.localizedStringWithFormat(_:_:)(v15._countAndFlagsBits, v15._object, v10);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v15._object);
  }

  else
  {
    unint64_t v17 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v2), "mainBundle");
    v18._uint64_t countAndFlagsBits = 0xD000000000000026LL;
    v22._object = (void *)0xEB00000000656C62LL;
    v18._object = (void *)0x80000001000DA0F0LL;
    v19._uint64_t countAndFlagsBits = 0LL;
    v19._object = (void *)0xE000000000000000LL;
    v22._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)( v18,  (Swift::String_optional)0,  v17,  v19,  v22)._countAndFlagsBits;
  }

  return countAndFlagsBits;
}

void sub_10004026C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100112238 != -1) {
    swift_once(&qword_100112238, sub_10003B86C);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_10001C270(v10, (uint64_t)qword_100113AC0);
  id v11 = a1;
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  Swift::String v14 = &selRef__setGradientMaskLengths_;
  if (os_log_type_enabled(v12, v13))
  {
    Swift::String v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v30 = swift_slowAlloc(32LL, -1LL);
    uint64_t v34 = v30;
    uint64_t v32 = a3;
    *(_DWORD *)Swift::String v15 = 136315138;
    uint64_t v29 = v15 + 4;
    id v16 = [v11 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v16);

    uint64_t v17 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter(v6, v17);
    uint64_t v31 = a2;
    uint64_t v19 = v6;
    uint64_t v20 = v7;
    unint64_t v22 = v21;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v19);
    uint64_t v23 = v18;
    Swift::String v14 = &selRef__setGradientMaskLengths_;
    uint64_t v33 = sub_1000850E4(v23, v22, &v34);
    a3 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v29, v15 + 12);

    unint64_t v24 = v22;
    uint64_t v7 = v20;
    uint64_t v6 = v19;
    a2 = v31;
    swift_bridgeObjectRelease(v24);
    _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "Selected Move to your nearby device in missing app alert for activity %s.",  v15,  0xCu);
    uint64_t v25 = v30;
    swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v26 = *(void **)(a2 + OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_conversationManager);
  id v27 = [a3 v14[39]];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v27);

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  [v26 leaveConversationWithUUID:isa];
}

void sub_100040548(void *a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100112238 != -1) {
    swift_once(&qword_100112238, sub_10003B86C);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10001C270(v6, (uint64_t)qword_100113AC0);
  id v7 = a1;
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc(12LL, -1LL);
    uint64_t v18 = v3;
    id v11 = (uint8_t *)v10;
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v21 = v12;
    *(_DWORD *)id v11 = 136315138;
    uint64_t v19 = v11 + 4;
    id v13 = [v7 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v13);

    uint64_t v14 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v2, v14);
    unint64_t v17 = v16;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v2);
    uint64_t v20 = sub_1000850E4(v15, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v19, v11 + 12);

    swift_bridgeObjectRelease(v17);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Selected View In App Store in missing app alert for activity %s.",  v11,  0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
  }

  sub_1000428C0(v7);
}

void sub_100040798(void *a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100112238 != -1) {
    swift_once(&qword_100112238, sub_10003B86C);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10001C270(v6, (uint64_t)qword_100113AC0);
  id v17 = a1;
  id v7 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v19 = v10;
    *(_DWORD *)os_log_type_t v9 = 136315138;
    unint64_t v16 = v9 + 4;
    id v11 = [v17 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v11);

    uint64_t v12 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v2, v12);
    unint64_t v15 = v14;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v18 = sub_1000850E4(v13, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v16, v9 + 12);

    swift_bridgeObjectRelease(v15);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Selected Not Now in missing app alert for activity %s.",  v9,  0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
  }

id PBSBulletinDismissalReason.description.getter()
{
  id result = (id)PBSBulletinDismissalReasonDescription();
  if (result)
  {
    id v1 = result;
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

    return (id)v2;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_100040B2C()
{
  id result = (id)PBSBulletinDismissalReasonDescription(*v0);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

    return (id)v3;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t type metadata accessor for UnavailableActivityManager(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime26UnavailableActivityManager, a2);
}

char *sub_100040BA0(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, char *a6)
{
  uint64_t v61 = a3;
  id v60 = a2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a6);
  uint64_t v10 = sub_100018A04((uint64_t *)&unk_100113480);
  __chkstk_darwin(v10);
  uint64_t v63 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100018A04((uint64_t *)&unk_100113B50);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v65 = v12;
  uint64_t v66 = v13;
  __chkstk_darwin(v12);
  uint64_t v64 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v59 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v58 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  unint64_t v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v20);
  unint64_t v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v72[3] = type metadata accessor for PineBoardBulletinManager(0LL, v23);
  v72[4] = &off_1000FA160;
  v72[0] = a1;
  v71[3] = type metadata accessor for SharePlayStateManager(0LL, v24);
  v71[4] = &off_1000F93F8;
  v71[0] = a4;
  v70[3] = type metadata accessor for UserNotificationManager(0LL, v25);
  v70[4] = &off_1000FB2A0;
  v70[0] = a5;
  uint64_t v57 = OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_queue;
  uint64_t v26 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  id v27 = a6;
  static DispatchQoS.unspecified.getter(v27);
  uint64_t v69 = _swiftEmptyArrayStorage;
  uint64_t v28 = sub_10001949C( (unint64_t *)&qword_100113130,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v29 = sub_100018A04((uint64_t *)&unk_100112DC0);
  uint64_t v30 = sub_100022750( (unint64_t *)&qword_100113140,  (uint64_t *)&unk_100112DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v69, v29, v30, v17, v28);
  (*(void (**)(char *, void, uint64_t))(v58 + 104))( v16,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v59);
  uint64_t v31 = v26;
  uint64_t v32 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002FLL,  0x80000001000D9D30LL,  v22,  v19,  v16,  0LL);
  *(void *)&a6[v57] = v32;
  uint64_t v33 = &v27[OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_sharePlayState];
  *(void *)uint64_t v33 = 0LL;
  *((void *)v33 + 1) = 0LL;
  v33[16] = 3;
  *(void *)&v27[OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_sharePlayStateCancellable] = 0LL;
  *(void *)&v27[OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_unavailableActivityUUIDs] = &_swiftEmptySetSingleton;
  sub_10001C580((uint64_t)v72, (uint64_t)&v27[OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_bulletinManager]);
  uint64_t v34 = v60;
  *(void *)&v27[OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_conversationManager] = v60;
  sub_10001C580( (uint64_t)v71,  (uint64_t)&v27[OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_sharePlayStateManager]);
  uint64_t v35 = v61;
  *(void *)&v27[OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_neighborhoodActivityConduit] = v61;
  sub_10001C580( (uint64_t)v70,  (uint64_t)&v27[OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_userNotificationManager]);
  id v36 = v34;
  id v37 = v35;

  v68.receiver = v27;
  v68.super_class = ObjectType;
  id v38 = (char *)objc_msgSendSuper2(&v68, "init");
  uint64_t v39 = *(void **)&v38[OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_conversationManager];
  uint64_t v40 = *(void **)&v38[OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_queue];
  uint64_t v41 = v38;
  [v39 addDelegate:v41 queue:v40];
  [v39 registerWithCompletionHandler:0];
  uint64_t v42 = *(void **)(*sub_10001C3FC( &v41[OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_sharePlayStateManager],  *(void *)&v41[OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_sharePlayStateManager + 24])
                   + OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_sharePlayState);
  uint64_t v69 = v42;
  id v67 = v40;
  uint64_t v44 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL, v43);
  uint64_t v45 = (uint64_t)v63;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v63, 1LL, 1LL, v44);
  swift_retain(v42);
  id v46 = v40;
  uint64_t v47 = sub_100018A04((uint64_t *)&unk_100113490);
  uint64_t v48 = sub_100022750( (unint64_t *)&unk_100113B60,  (uint64_t *)&unk_100113490,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  uint64_t v49 = sub_100022510( (unint64_t *)&qword_100112E50,  (unint64_t *)&qword_100112DB0,  &OBJC_CLASS___OS_dispatch_queue_ptr,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  uint64_t v50 = v64;
  Publisher.receive<A>(on:options:)(&v67, v45, v47, v31, v48, v49);
  sub_10001C608(v45, (uint64_t *)&unk_100113480);

  swift_release(v69);
  uint64_t v51 = swift_allocObject(&unk_1000F8948, 24LL, 7LL);
  swift_unknownObjectWeakInit(v51 + 16, v41);
  uint64_t v52 = sub_100022750( (unint64_t *)&unk_100113B70,  (uint64_t *)&unk_100113B50,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v53 = v65;
  uint64_t v54 = Publisher<>.sink(receiveValue:)(sub_100041364, v51, v65, v52);

  swift_release(v51);
  sub_10001BFEC(v70);
  sub_10001BFEC(v71);
  sub_10001BFEC(v72);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v50, v53);
  uint64_t v55 = *(void *)&v41[OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_sharePlayStateCancellable];
  *(void *)&v41[OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_sharePlayStateCancellable] = v54;
  swift_release(v55);
  return v41;
}

char *sub_100041174(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = type metadata accessor for PineBoardBulletinManager(0LL, (uint64_t)a2);
  id v37 = &off_1000FA160;
  v35[0] = a1;
  uint64_t v33 = type metadata accessor for SharePlayStateManager(0LL, v10);
  uint64_t v34 = &off_1000F93F8;
  v32[0] = a4;
  uint64_t v30 = type metadata accessor for UserNotificationManager(0LL, v11);
  uint64_t v31 = &off_1000FB2A0;
  v29[0] = a5;
  uint64_t v13 = (char *)objc_allocWithZone((Class)type metadata accessor for UnavailableActivityManager(v30, v12));
  uint64_t v14 = sub_100021734((uint64_t)v35, v36);
  __chkstk_darwin(v14);
  unint64_t v16 = (void *)((char *)&v29[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  uint64_t v18 = sub_100021734((uint64_t)v32, v33);
  __chkstk_darwin(v18);
  uint64_t v20 = (void *)((char *)&v29[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  uint64_t v22 = sub_100021734((uint64_t)v29, v30);
  __chkstk_darwin(v22);
  uint64_t v24 = (void *)((char *)&v29[-1] - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  uint64_t v26 = sub_100040BA0(*v16, a2, a3, *v20, *v24, v13);
  sub_10001BFEC(v29);
  sub_10001BFEC(v32);
  sub_10001BFEC(v35);
  return v26;
}

uint64_t sub_100041340()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100041364(uint64_t a1)
{
}

uint64_t sub_10004136C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04(&qword_100112D10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_1000413B4(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100018A04((uint64_t *)&unk_100115630);
  __chkstk_darwin(v5);
  id v7 = (char *)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for PersonNameComponents(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v12 = [a1 originator];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v113 = v7;
    uint64_t v114 = v11;
    id v115 = *(id *)(v2 + OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_neighborhoodActivityConduit);
    id v14 = [v115 knownContacts];
    uint64_t v15 = sub_10001C5D0(0LL, (unint64_t *)&qword_100113BA0, &OBJC_CLASS___TUHandle_ptr);
    uint64_t v16 = sub_10001C5D0(0LL, &qword_100115640, &OBJC_CLASS___CNContact_ptr);
    uint64_t v17 = sub_100022510( (unint64_t *)&unk_100113BB0,  (unint64_t *)&qword_100113BA0,  &OBJC_CLASS___TUHandle_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v14, v15, v16, v17);

    id v19 = v13;
    uint64_t v20 = sub_100089774(v19, v18);

    *(void *)&double v22 = swift_bridgeObjectRelease(v18).n128_u64[0];
    if (v20)
    {
      id v112 = (id)objc_opt_self(&OBJC_CLASS___NSPersonNameComponentsFormatter, v21);
      id v23 = [v20 namePrefix];
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      uint64_t v110 = v25;
      uint64_t v111 = v24;

      id v26 = [v20 givenName];
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v108 = v28;
      uint64_t v109 = v27;

      id v29 = [v20 middleName];
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      uint64_t v106 = v31;
      uint64_t v107 = v30;

      id v32 = [v20 familyName];
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      uint64_t v104 = v34;
      uint64_t v105 = v33;

      id v35 = [v20 nameSuffix];
      uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      uint64_t v36 = a1;
      id v37 = v19;
      uint64_t v39 = v38;

      id v40 = [v20 nickname];
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      uint64_t v43 = v42;

      uint64_t v44 = v113;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v113, 1LL, 1LL, v8);
      uint64_t v99 = v39;
      uint64_t v100 = v41;
      id v19 = v37;
      a1 = v36;
      uint64_t v45 = v114;
      PersonNameComponents.init(namePrefix:givenName:middleName:familyName:nameSuffix:nickname:phoneticRepresentation:)( v111,  v110,  v109,  v108,  v107,  v106,  v105,  v104,  v103,  v99,  v100,  v43,  v44);
      Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v45, v8);
      id v47 = [v112 localizedStringFromPersonNameComponents:isa style:2 options:0];

      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
      uint64_t v50 = v49;
    }

    else
    {
      id v47 = objc_msgSend(v19, "value", v22);
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
      uint64_t v50 = v58;
    }

    id v59 = [a1 metadata];
    if (v59
      && (id v60 = v59, v61 = [v59 title], v60, v61))
    {
      uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
      uint64_t v64 = v63;

      uint64_t v65 = sub_100018A04((uint64_t *)&unk_100112980);
      uint64_t v66 = swift_allocObject(v65, 112LL, 7LL);
      *(_OWORD *)(v66 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C52F0;
      *(void *)(v66 + 56) = &type metadata for String;
      unint64_t v67 = sub_1000224B4();
      *(void *)(v66 + 32) = v48;
      *(void *)(v66 + 40) = v50;
      *(void *)(v66 + 96) = &type metadata for String;
      *(void *)(v66 + 104) = v67;
      *(void *)(v66 + 64) = v67;
      *(void *)(v66 + 72) = v62;
      *(void *)(v66 + 80) = v64;
      uint64_t v69 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v68), "mainBundle");
      unint64_t v101 = 0xEB00000000656C62LL;
      unint64_t v70 = 0x80000001000D9E70LL;
      unint64_t v71 = 0xD00000000000001ELL;
    }

    else
    {
      uint64_t v72 = sub_100018A04((uint64_t *)&unk_100112980);
      uint64_t v66 = swift_allocObject(v72, 72LL, 7LL);
      *(_OWORD *)(v66 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FB0;
      *(void *)(v66 + 56) = &type metadata for String;
      *(void *)(v66 + 64) = sub_1000224B4();
      *(void *)(v66 + 32) = v48;
      *(void *)(v66 + 40) = v50;
      uint64_t v69 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v73), "mainBundle");
      unint64_t v71 = 0xD00000000000002CLL;
      unint64_t v101 = 0xEB00000000656C62LL;
      unint64_t v70 = 0x80000001000D9DE0LL;
    }

    v74._uint64_t countAndFlagsBits = 0LL;
    v74._object = (void *)0xE000000000000000LL;
    uint64_t v75 = 0x617A696C61636F4CLL;
    Swift::String v76 = NSLocalizedString(_:tableName:bundle:value:comment:)( *(Swift::String *)&v71,  (Swift::String_optional)0,  v69,  v74,  *(Swift::String *)(&v101 - 1));

    uint64_t v51 = static String.localizedStringWithFormat(_:_:)(v76._countAndFlagsBits, v76._object, v66);
    uint64_t v52 = v77;
    id v78 = v115;
    swift_bridgeObjectRelease(v66);
    id v79 = objc_msgSend(v78, "currentSplitSession", swift_bridgeObjectRelease(v76._object).n128_f64[0]);
    if (v79
      && (id v81 = v79,
          id v82 = [v79 device],
          v81,
          id v83 = [v82 name],
          v82,
          v83))
    {
      uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
      uint64_t v86 = v85;

      uint64_t v87 = sub_100018A04((uint64_t *)&unk_100112980);
      uint64_t v88 = swift_allocObject(v87, 72LL, 7LL);
      *(_OWORD *)(v88 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FB0;
      *(void *)(v88 + 56) = &type metadata for String;
      *(void *)(v88 + 64) = sub_1000224B4();
      *(void *)(v88 + 32) = v84;
      *(void *)(v88 + 40) = v86;
      uint64_t v90 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v89), "mainBundle");
      v91._uint64_t countAndFlagsBits = 0xD000000000000020LL;
      v116._object = (void *)0xEB00000000656C62LL;
      v91._object = (void *)0x80000001000D9E40LL;
      v92._uint64_t countAndFlagsBits = 0LL;
      v92._object = (void *)0xE000000000000000LL;
      v116._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
      Swift::String v93 = NSLocalizedString(_:tableName:bundle:value:comment:)(v91, (Swift::String_optional)0, v90, v92, v116);

      uint64_t countAndFlagsBits = static String.localizedStringWithFormat(_:_:)(v93._countAndFlagsBits, v93._object, v88);
      object = v94;
      swift_bridgeObjectRelease(v88);

      swift_bridgeObjectRelease(v93._object);
    }

    else
    {
      id v95 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v80), "mainBundle");
      v96._uint64_t countAndFlagsBits = 0xD000000000000027LL;
      v117._object = (void *)0xEB00000000656C62LL;
      v96._object = (void *)0x80000001000D9E10LL;
      v97._uint64_t countAndFlagsBits = 0LL;
      v97._object = (void *)0xE000000000000000LL;
      v117._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
      Swift::String v98 = NSLocalizedString(_:tableName:bundle:value:comment:)(v96, (Swift::String_optional)0, v95, v97, v117);
      uint64_t countAndFlagsBits = v98._countAndFlagsBits;
      object = v98._object;
    }

    uint64_t v55 = 1LL;
    unint64_t v56 = 0xF000000000000000LL;
    char v57 = 1;
  }

  else
  {
    uint64_t v51 = 0LL;
    uint64_t v52 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
    uint64_t v55 = 0LL;
    unint64_t v56 = 0LL;
    char v57 = 0;
  }

  *(void *)a2 = v51;
  *(void *)(a2 + _Block_object_dispose(va, 8) = v52;
  *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = countAndFlagsBits;
  *(void *)(a2 + 24) = object;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 56) = v55;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = v56;
  *(void *)(a2 + 80) = 0LL;
  *(_BYTE *)(a2 + 8_Block_object_dispose(va, 8) = v57;
}

uint64_t sub_100041B34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04((uint64_t *)&unk_100115620);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

id sub_100041B7C(uint64_t *a1)
{
  return sub_10003ED08(a1, *(void **)(v1 + 16));
}

void sub_100041B84(uint64_t a1)
{
}

uint64_t sub_100041BA4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100041BFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    return sub_1000227F0(a9, a10);
  }

  return result;
}

void sub_100041C54()
{
}

uint64_t sub_100041C60()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100041C8C()
{
}

uint64_t sub_100041C94()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100041CB8()
{
}

uint64_t sub_100041CC0(void *a1)
{
  id v2 = [a1 metadata];

  if (v2)
  {
    id v4 = [a1 metadata];
    uint64_t v5 = (uint64_t)v4;
    if (v4)
    {
      id v6 = [v4 context];

      id v7 = [v6 typedIdentifier];
      uint64_t v8 = (void *)TUConversationActivityContextIdentifierWatchTogether;
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      uint64_t v10 = v9;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      uint64_t v13 = v12;
      if (v5 == v11 && v10 == v12) {
        LOBYTE(v5) = 1;
      }
      else {
        LOBYTE(v5) = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v10, v11, v12, 0LL);
      }
      id v15 = v8;

      swift_bridgeObjectRelease(v10);
      *(void *)&double v3 = swift_bridgeObjectRelease(v13).n128_u64[0];
    }
  }

  else
  {
    LOBYTE(v5) = 1;
  }

  id v16 = objc_msgSend(a1, "metadata", v3);
  uint64_t v17 = v16;
  if (v16)
  {
    id v18 = [v16 title];

    if (v18)
    {
      uint64_t v17 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      uint64_t v20 = v19;

      goto LABEL_16;
    }

    uint64_t v17 = 0LL;
  }

  uint64_t v20 = 0LL;
LABEL_16:
  id v21 = [a1 localizedApplicationName];
  if (v21)
  {
    id v23 = v21;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v26 = v25;

    if (v20)
    {
      if (v26)
      {
        uint64_t v27 = sub_100018A04((uint64_t *)&unk_100112980);
        uint64_t v28 = swift_allocObject(v27, 112LL, 7LL);
        *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C52F0;
        *(void *)(v28 + 56) = &type metadata for String;
        unint64_t v29 = sub_1000224B4();
        *(void *)(v28 + 32) = v24;
        *(void *)(v28 + 40) = v26;
        *(void *)(v28 + 96) = &type metadata for String;
        *(void *)(v28 + 104) = v29;
        *(void *)(v28 + 64) = v29;
        *(void *)(v28 + 72) = v17;
        *(void *)(v28 + 80) = v20;
        uint64_t v31 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v30), "mainBundle");
        if ((v5 & 1) != 0)
        {
          unint64_t v50 = 0xEB00000000656C62LL;
          unint64_t v32 = 0x80000001000DA0B0LL;
          unint64_t v33 = 0xD00000000000001CLL;
LABEL_35:
          v46._uint64_t countAndFlagsBits = 0LL;
          v46._object = (void *)0xE000000000000000LL;
          uint64_t v47 = 0x617A696C61636F4CLL;
          Swift::String v48 = NSLocalizedString(_:tableName:bundle:value:comment:)( *(Swift::String *)&v33,  (Swift::String_optional)0,  v31,  v46,  *(Swift::String *)(&v50 - 1));

          uint64_t countAndFlagsBits = static String.localizedStringWithFormat(_:_:)(v48._countAndFlagsBits, v48._object, v28);
          swift_bridgeObjectRelease(v28);
          swift_bridgeObjectRelease(v48._object);
          return countAndFlagsBits;
        }

        unint64_t v33 = 0xD000000000000023LL;
        unint64_t v50 = 0xEB00000000656C62LL;
        uint64_t v36 = "MissingGenericAppAlertMessageFormat";
LABEL_34:
        unint64_t v32 = (unint64_t)(v36 - 32) | 0x8000000000000000LL;
        goto LABEL_35;
      }

LABEL_22:
      uint64_t v34 = sub_100018A04((uint64_t *)&unk_100112980);
      uint64_t v28 = swift_allocObject(v34, 72LL, 7LL);
      *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FB0;
      *(void *)(v28 + 56) = &type metadata for String;
      *(void *)(v28 + 64) = sub_1000224B4();
      *(void *)(v28 + 32) = v17;
      *(void *)(v28 + 40) = v20;
      uint64_t v31 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v35), "mainBundle");
      if ((v5 & 1) != 0)
      {
        unint64_t v33 = 0xD000000000000026LL;
        unint64_t v50 = 0xEB00000000656C62LL;
        uint64_t v36 = "MissingAppAlertUnknownAppMessageFormat";
      }

      else
      {
        unint64_t v33 = 0xD00000000000002DLL;
        unint64_t v50 = 0xEB00000000656C62LL;
        uint64_t v36 = "MissingGenericAppAlertUnknownAppMessageFormat";
      }

      goto LABEL_34;
    }

    if (v26)
    {
      uint64_t v37 = sub_100018A04((uint64_t *)&unk_100112980);
      uint64_t v28 = swift_allocObject(v37, 72LL, 7LL);
      *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FB0;
      *(void *)(v28 + 56) = &type metadata for String;
      *(void *)(v28 + 64) = sub_1000224B4();
      *(void *)(v28 + 32) = v24;
      *(void *)(v28 + 40) = v26;
      uint64_t v31 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v38), "mainBundle");
      if ((v5 & 1) != 0)
      {
        unint64_t v33 = 0xD00000000000002ALL;
        unint64_t v50 = 0xEB00000000656C62LL;
        uint64_t v36 = "MissingAppAlertUnknownContentMessageFormat";
      }

      else
      {
        unint64_t v33 = 0xD000000000000031LL;
        unint64_t v50 = 0xEB00000000656C62LL;
        uint64_t v36 = "MissingGenericAppAlertUnknownContentMessageFormat";
      }

      goto LABEL_34;
    }
  }

  else if (v20)
  {
    goto LABEL_22;
  }

  uint64_t v39 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v22), "mainBundle");
  if ((v5 & 1) != 0)
  {
    unint64_t v40 = 0xD000000000000030LL;
    unint64_t v51 = 0xEB00000000656C62LL;
    uint64_t v41 = "MissingAppAlertUnknownAppAndContentMessageFormat";
  }

  else
  {
    unint64_t v40 = 0xD000000000000037LL;
    unint64_t v51 = 0xEB00000000656C62LL;
    uint64_t v41 = "MissingGenericAppAlertUnknownAppAndContentMessageFormat";
  }

  unint64_t v42 = (unint64_t)(v41 - 32) | 0x8000000000000000LL;
  v43._uint64_t countAndFlagsBits = 0LL;
  v43._object = (void *)0xE000000000000000LL;
  uint64_t v44 = 0x617A696C61636F4CLL;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)( *(Swift::String *)&v40,  (Swift::String_optional)0,  v39,  v43,  *(Swift::String *)(&v51 - 1))._countAndFlagsBits;

  return countAndFlagsBits;
}

  __break(1u);
  return result;
}

        id v15 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }

      uint64_t v24 = *(void *)(v10 + 48) + *(void *)(v7 + 72) * v20;
      if ((a2 & 1) != 0)
      {
        sub_10002FB10(v24, (uint64_t)v9);
        id v18 = *(void *)(*(void *)(v10 + 56) + 8 * v20);
      }

      else
      {
        sub_10002FB54(v24, (uint64_t)v9);
        id v18 = *(void *)(*(void *)(v10 + 56) + 8 * v20);
        swift_retain(v18);
      }

      sub_100065AE4((uint64_t)v9, v18, v11);
    }
  }

  swift_release(v10);
LABEL_32:
  *double v3 = v11;
}

    id v16 = (v23 - 1) & v23;
    id v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_9:
    uint64_t v19 = v2[9] * v18;
    uint64_t v20 = (void (*)(char *, unint64_t, uint64_t))v2[2];
    v20(v7, *(void *)(v8 + 48) + v19, v1);
    v20(v5, *(void *)(v8 + 56) + v19, v1);
    id v21 = (void (*)(unint64_t, char *, uint64_t))v2[4];
    v21(*(void *)(v10 + 48) + v19, v7, v1);
    uint64_t result = (void *)((uint64_t (*)(unint64_t, char *, uint64_t))v21)( *(void *)(v10 + 56) + v19,  v5,  v1);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v28) {
    goto LABEL_23;
  }
  id v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    uint64_t v13 = v24;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_23;
    }
    id v23 = *(void *)(v27 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }

    return;
  }

  if (qword_1001123A0 != -1) {
    swift_once(&qword_1001123A0, sub_1000886E8);
  }
  id v14 = type metadata accessor for Logger(0LL);
  id v15 = sub_10001C270(v14, (uint64_t)qword_1001154C8);
  id v16 = (os_log_s *)Logger.logObject.getter(v15);
  uint64_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    id v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to receive response for user notification.", v18, 2u);
    swift_slowDealloc(v18, -1LL, -1LL);
    uint64_t v19 = v13;
  }

  else
  {
    uint64_t v19 = v16;
    id v16 = v13;
  }
}

        swift_bridgeObjectRelease(v12);
        uint64_t v17 = *v2;
        if ((*v2 & 0xC000000000000001LL) != 0)
        {
          swift_bridgeObjectRetain(*v2);
          id v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v17);
          swift_bridgeObjectRelease(v17);
        }

        else
        {
          if (v3 >= *(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_51;
          }
          id v18 = *(void *)(v17 + 8 * v3 + 32);
          swift_retain(v18);
        }

        uint64_t v19 = *(id *)(v18 + *v8);
        swift_release(v18);
        [v19 removeAllActions];

        uint64_t v20 = *v2;
        if ((*v2 & 0xC000000000000001LL) != 0)
        {
          swift_bridgeObjectRetain(*v2);
          id v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v20);
          swift_bridgeObjectRelease(v20);
        }

        else
        {
          if (v3 >= *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_52;
          }
          id v21 = *(void *)(v20 + 8 * v3 + 32);
          swift_retain(v21);
        }

        if (qword_100112420 != -1) {
          swift_once(&qword_100112420, sub_10009C924);
        }
        if (v3 >= *(void *)(qword_10011A378 + 16)) {
          goto LABEL_53;
        }
        id v23 = *(double *)(qword_10011A378 + 8 * v3 + 32);
        uint64_t v24 = *(void **)(v21 + *v8);
        uint64_t v25 =  objc_msgSend( (id)objc_opt_self(SKAction, v22),  "scaleTo:delay:mass:stiffness:damping:",  v23,  0.0,  1.0,  200.0,  25.0);
        [v24 runAction:v25];

        uint64_t v26 = swift_allocObject(&unk_1000FBB10, 32LL, 7LL);
        *(void *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = v21;
        *(double *)(v26 + 24) = v23;
        uint64_t v27 = objc_allocWithZone(&OBJC_CLASS___UISpringTimingParameters);
        swift_retain(v21);
        uint64_t v28 = objc_msgSend(v27, "initWithMass:stiffness:damping:initialVelocity:", 1.0, 200.0, 25.0, 0.0, 0.0);
        unint64_t v29 = v9;
        uint64_t v30 = v8;
        uint64_t v31 = v7;
        unint64_t v32 = [objc_allocWithZone(UIViewPropertyAnimator) initWithDuration:v28 timingParameters:1.0];
        aBlock[4] = sub_1000A34F4;
        unint64_t v51 = v26;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_100027654;
        void aBlock[3] = &unk_1000FBB28;
        unint64_t v33 = _Block_copy(aBlock);
        uint64_t v34 = v51;
        swift_retain(v26);
        swift_release(v34);
        [v32 addAnimations:v33];
        _Block_release(v33);
        [v32 startAnimationAfterDelay:0.0];
        swift_release(v21);
        swift_release(v26);

        id v7 = v31;
        uint64_t v8 = v30;
        uint64_t v9 = v29;
        id v2 = v48;
LABEL_11:
        id v16 = v3++ == v7;
        if (v16) {
          return;
        }
      }

      uint64_t v38 = a1 + 9;
      uint64_t v39 = 2LL;
      while (1)
      {
        unint64_t v40 = v39 + 1;
        if (__OFADD__(v39, 1LL)) {
          break;
        }
        uint64_t v41 = *(v38 - 1);
        unint64_t v42 = *v38;
        Swift::String v43 = v41 == v13 && v42 == v12;
        if (v43 || (_stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, v13, v12, 0LL) & 1) != 0) {
          goto LABEL_10;
        }
        v38 += 2;
        ++v39;
        if (v40 == v9) {
          goto LABEL_22;
        }
      }

        sub_1000B541C();
        goto LABEL_23;
      }

      if ((_DWORD)v8 == 2)
      {
        id v18 = swift_getObjectType(a1);
        uint64_t v19 = *(uint64_t (**)(uint64_t, unint64_t))(a2 + 16);
        sub_1000A744C(a1, a2);
        sub_1000A744C(a3, a4);
        if (v19(v18, a2 & 0x3FFFFFFFFFFFFFFFLL) == 2) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
    }
  }

  return 0LL;
}

          __break(1u);
          goto LABEL_23;
        }
      }

      uint64_t v10 = v7;
      goto LABEL_9;
    }

    __break(1u);
    goto LABEL_22;
  }

void sub_1000421B4(void *a1)
{
  uint64_t v2 = v1;
  id v74 = a1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v71 = sub_100018A04(&qword_100113000);
  __chkstk_darwin(v71);
  uint64_t v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100018A04(&qword_100112D10);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v72 = (uint64_t)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v73 = (char *)&v68 - v13;
  __chkstk_darwin(v12);
  id v15 = (char *)&v68 - v14;
  uint64_t v16 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v20 = *(void **)(v2 + OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_queue);
  *uint64_t v19 = v20;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(void *, uint64_t))(v17 + 8))(v19, v16);
  if ((v20 & 1) != 0)
  {
    id v22 = [v74 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

    id v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    unint64_t v70 = v15;
    v23(v15, 0LL, 1LL, v3);
    uint64_t v24 = *(void *)(*sub_10001C3FC( (void *)(v2 + OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_sharePlayStateManager),  *(void *)(v2 + OBJC_IVAR____TtC8FaceTime26UnavailableActivityManager_sharePlayStateManager + 24))
                    + OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_sharePlayState);
    swift_retain(v24);
    CurrentValueSubject.value.getter(v25);
    swift_release(v24);
    uint64_t v26 = v77;
    uint64_t v27 = v78;
    char v28 = v79;
    if ((v79 - 1) > 1u)
    {
      sub_10002C9C8(v77, v78, v79);
      uint64_t v32 = (uint64_t)v73;
      v23(v73, 1LL, 1LL, v3);
      id v33 = v74;
    }

    else
    {
      id v29 = v77;
      uint64_t v69 = v3;
      id v30 = v29;
      sub_10002C9C8(v26, v27, v28);
      id v31 = [v30 UUID];

      uint64_t v32 = (uint64_t)v73;
      id v33 = v74;
      uint64_t v3 = v69;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);

      v23((char *)v32, 0LL, 1LL, v3);
    }

    uint64_t v34 = (uint64_t)v70;
    uint64_t v35 = (uint64_t)&v8[*(int *)(v71 + 48)];
    sub_10004136C((uint64_t)v70, (uint64_t)v8);
    sub_10004136C(v32, v35);
    uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
    BOOL v37 = v36(v8, 1LL, v3) == 1;
    uint64_t v38 = v32;
    uint64_t v39 = v72;
    if (v37)
    {
      sub_10001C608(v38, &qword_100112D10);
      sub_10001C608(v34, &qword_100112D10);
      if (v36((char *)v35, 1LL, v3) != 1)
      {
LABEL_11:
        sub_10001C608((uint64_t)v8, &qword_100113000);
        return;
      }

      sub_10001C608((uint64_t)v8, &qword_100112D10);
LABEL_13:
      uint64_t v44 = v33;
      sub_10003C2A4();
      uint64_t v46 = v45;
      if ((v45 & 0xC000000000000001LL) != 0)
      {
        if (v45 >= 0) {
          v45 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        uint64_t v47 = __CocoaSet.makeIterator()(v45);
        uint64_t v48 = sub_10001C5D0(0LL, (unint64_t *)&unk_1001160A0, &OBJC_CLASS___TUConversationActivity_ptr);
        uint64_t v49 = sub_100022510( (unint64_t *)&unk_100113B80,  (unint64_t *)&unk_1001160A0,  &OBJC_CLASS___TUConversationActivity_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
        uint64_t v45 = (uint64_t)Set.Iterator.init(_cocoa:)(&v77, v47, v48, v49);
        uint64_t v46 = (uint64_t)v77;
        id v74 = v78;
        uint64_t v50 = v79;
        uint64_t v51 = v80;
        unint64_t v52 = v81;
      }

      else
      {
        uint64_t v51 = 0LL;
        uint64_t v53 = -1LL << *(_BYTE *)(v45 + 32);
        uint64_t v54 = *(void *)(v45 + 56);
        id v74 = (id)(v45 + 56);
        uint64_t v50 = ~v53;
        uint64_t v55 = -v53;
        if (v55 < 64) {
          uint64_t v56 = ~(-1LL << v55);
        }
        else {
          uint64_t v56 = -1LL;
        }
        unint64_t v52 = v56 & v54;
      }

      uint64_t v73 = (char *)(v46 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v71 = v50;
      int64_t v57 = (unint64_t)(v50 + 64) >> 6;
      uint64_t v72 = (uint64_t)&type metadata for Swift.AnyObject + 8;
      if (v46 < 0) {
        goto LABEL_24;
      }
      while (1)
      {
        if (v52)
        {
          uint64_t v58 = (v52 - 1) & v52;
          unint64_t v59 = __clz(__rbit64(v52)) | (v51 << 6);
          uint64_t v60 = v51;
        }

        else
        {
          int64_t v65 = v51 + 1;
          if (__OFADD__(v51, 1LL))
          {
            __break(1u);
            goto LABEL_47;
          }

          if (v65 >= v57) {
            goto LABEL_44;
          }
          unint64_t v66 = *((void *)v74 + v65);
          uint64_t v60 = v51 + 1;
          if (!v66)
          {
            uint64_t v60 = v51 + 2;
            if (v51 + 2 >= v57) {
              goto LABEL_44;
            }
            unint64_t v66 = *((void *)v74 + v60);
            if (!v66)
            {
              uint64_t v60 = v51 + 3;
              if (v51 + 3 >= v57) {
                goto LABEL_44;
              }
              unint64_t v66 = *((void *)v74 + v60);
              if (!v66)
              {
                uint64_t v60 = v51 + 4;
                if (v51 + 4 >= v57) {
                  goto LABEL_44;
                }
                unint64_t v66 = *((void *)v74 + v60);
                if (!v66)
                {
                  uint64_t v67 = v51 + 5;
                  while (v57 != v67)
                  {
                    unint64_t v66 = *((void *)v74 + v67++);
                    if (v66)
                    {
                      uint64_t v60 = v67 - 1;
                      goto LABEL_40;
                    }
                  }

LABEL_40:
          uint64_t v58 = (v66 - 1) & v66;
          unint64_t v59 = __clz(__rbit64(v66)) + (v60 << 6);
        }

        id v64 = *(id *)(*(void *)(v46 + 48) + 8 * v59);
        if (!v64) {
          goto LABEL_44;
        }
        while (1)
        {
          sub_10003C4C4(v64, v44, 0);

          uint64_t v51 = v60;
          unint64_t v52 = v58;
          if ((v46 & 0x8000000000000000LL) == 0) {
            break;
          }
LABEL_24:
          uint64_t v61 = __CocoaSet.Iterator.next()(v45);
          if (v61)
          {
            uint64_t v62 = v61;
            uint64_t v75 = v61;
            uint64_t v63 = sub_10001C5D0(0LL, (unint64_t *)&unk_1001160A0, &OBJC_CLASS___TUConversationActivity_ptr);
            swift_unknownObjectRetain(v62);
            swift_dynamicCast(&v76, &v75, v72, v63, 7LL);
            id v64 = v76;
            swift_unknownObjectRelease(v62);
            uint64_t v60 = v51;
            uint64_t v58 = v52;
            if (v64) {
              continue;
            }
          }

          goto LABEL_44;
        }
      }
    }

    sub_10004136C((uint64_t)v8, v72);
    unsigned int v40 = v36((char *)v35, 1LL, v3);
    if (v40 == 1)
    {
      sub_10001C608((uint64_t)v73, &qword_100112D10);
      sub_10001C608(v34, &qword_100112D10);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v39, v3);
      goto LABEL_11;
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v6, v35, v3);
    uint64_t v41 = sub_10001949C( (unint64_t *)&qword_100112E70,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    char v42 = dispatch thunk of static Equatable.== infix(_:_:)(v39, v6, v3, v41);
    Swift::String v43 = *(void (**)(char *, uint64_t))(v4 + 8);
    v43(v6, v3);
    sub_10001C608((uint64_t)v73, &qword_100112D10);
    sub_10001C608(v34, &qword_100112D10);
    v43((char *)v39, v3);
    sub_10001C608((uint64_t)v8, &qword_100112D10);
    if ((v42 & 1) != 0) {
      goto LABEL_13;
    }
  }

  else
  {
LABEL_47:
    __break(1u);
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void sub_1000428C0(void *a1)
{
  uint64_t v2 = sub_100018A04(&qword_100113AB8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v5 = [a1 bundleIdentifier];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v9 = v8;

    id v11 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace, v10), "defaultWorkspace");
    if (v11)
    {
      uint64_t v12 = v11;
      unint64_t v28 = 0LL;
      unint64_t v29 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(32LL);
      swift_bridgeObjectRelease(v29);
      unint64_t v28 = 0xD00000000000001ELL;
      unint64_t v29 = 0x80000001000DA0D0LL;
      v13._uint64_t countAndFlagsBits = v7;
      v13._object = v9;
      String.append(_:)(v13);
      __n128 v14 = swift_bridgeObjectRelease(v9);
      unint64_t v15 = v29;
      URL.init(string:)(v28, v29, v14);
      __n128 v16 = swift_bridgeObjectRelease(v15);
      uint64_t v17 = type metadata accessor for URL(0LL, v16);
      uint64_t v18 = *(void *)(v17 - 8);
      uint64_t v20 = 0LL;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v4, 1LL, v17) != 1)
      {
        URL._bridgeToObjectiveC()(v19);
        uint64_t v20 = v21;
        (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v17);
      }

      [v12 openURL:v20 configuration:0 completionHandler:0];
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    if (qword_100112238 != -1) {
      swift_once(&qword_100112238, sub_10003B86C);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    uint64_t v23 = sub_10001C270(v22, (uint64_t)qword_100113AC0);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  v24,  "Cannot open app store for an Activity without a bundle identifier.",  v25,  2u);
      swift_slowDealloc(v25, -1LL, -1LL);
    }
  }

uint64_t sub_100042B24()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void *sub_100042B58(uint64_t *a1)
{
  return sub_10003FA00(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

void sub_100042B64(uint64_t a1)
{
}

uint64_t sub_100042B84(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

void sub_100042B9C(uint64_t a1, uint64_t a2)
{
  v24.receiver = v2;
  v24.super_class = (Class)type metadata accessor for SpinnerViewController(a1, a2);
  objc_msgSendSuper2(&v24, "viewDidLoad");
  id v3 = [objc_allocWithZone(UIActivityIndicatorView) initWithActivityIndicatorStyle:101];
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v3 startAnimating];
  id v4 = [v2 view];
  if (!v4)
  {
    __break(1u);
    goto LABEL_6;
  }

  id v5 = v4;
  [v4 addSubview:v3];

  uint64_t v6 = sub_100018A04(&qword_1001142B0);
  uint64_t v7 = swift_allocObject(v6, 48LL, 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FC0;
  id v8 = [v3 centerXAnchor];
  id v9 = [v2 view];
  if (!v9)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v10 = v9;
  id v11 = [v9 centerXAnchor];

  id v12 = [v8 constraintEqualToAnchor:v11];
  *(void *)(v7 + 32) = v12;
  id v13 = [v3 centerYAnchor];
  id v14 = [v2 view];
  if (v14)
  {
    __n128 v16 = v14;
    uint64_t v17 = (void *)objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, v15);
    id v18 = [v16 centerYAnchor];

    id v19 = [v13 constraintEqualToAnchor:v18];
    *(void *)(v7 + 40) = v19;
    specialized Array._endMutation()(v20);
    uint64_t v21 = v7;
    sub_100042F4C(0LL, v22);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v17, "activateConstraints:", isa, swift_bridgeObjectRelease(v21).n128_f64[0]);

    return;
  }

LABEL_7:
  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

    uint64_t v2 = *(void *)(v4 + 8 * v7);
    swift_retain(v2);
    id v9 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      goto LABEL_16;
    }
    goto LABEL_8;
  }

  return swift_bridgeObjectRelease_n(v4, 2LL);
}

id sub_100042EFC(uint64_t a1, uint64_t a2)
{
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for SpinnerViewController(a1, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for SpinnerViewController(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime21SpinnerViewController, a2);
}

unint64_t sub_100042F4C(uint64_t a1, uint64_t a2)
{
  unint64_t result = qword_100113120;
  if (!qword_100113120)
  {
    uint64_t v3 = objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, a2);
    unint64_t result = swift_getObjCClassMetadata(v3);
    atomic_store(result, (unint64_t *)&qword_100113120);
  }

  return result;
}

uint64_t type metadata accessor for SplashScreenViewController(uint64_t a1)
{
  uint64_t result = qword_100113BF8;
  if (!qword_100113BF8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SplashScreenViewController);
  }
  return result;
}

uint64_t sub_100042FC4(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_10011A248);
}

uint64_t sub_100043000()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_10011A230);
  sub_10001C270(v0, (uint64_t)qword_10011A230);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0x63536873616C7053LL,  0xEC0000006E656572LL);
}

void sub_10004307C()
{
}

id sub_1000430D4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SplashScreenViewController(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_100043108()
{
}

void sub_100043134()
{
}

uint64_t sub_100043160()
{
  return type metadata accessor for SplashScreenViewController(0LL);
}

id sub_100043168()
{
  uint64_t v1 = OBJC_IVAR____TtC8FaceTime14FaceTimeButton____lazy_storage___activityIndicator;
  objc_super v2 = *(void **)(v0 + OBJC_IVAR____TtC8FaceTime14FaceTimeButton____lazy_storage___activityIndicator);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC8FaceTime14FaceTimeButton____lazy_storage___activityIndicator);
  }

  else
  {
    id v4 = [objc_allocWithZone(UIActivityIndicatorView) initWithActivityIndicatorStyle:100];
    [v4 setColor:*(void *)(v0 + OBJC_IVAR____TtC8FaceTime14FaceTimeButton_viewModel + 40)];
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    objc_super v2 = 0LL;
  }

  id v6 = v2;
  return v3;
}

void sub_10004321C()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC8FaceTime14FaceTimeButton_viewModel);
  objc_super v2 = *(void **)(v0 + OBJC_IVAR____TtC8FaceTime14FaceTimeButton_viewModel + 24);
  id v3 = (void *)(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_highlightedBackgroundColor);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_highlightedBackgroundColor, v51, 1LL, 0LL);
  id v4 = (void *)*v3;
  *id v3 = v2;
  id v5 = v2;

  id v6 = sub_100044744();
  [v6 setBackgroundColor:*v3];

  uint64_t v7 = (void *)v1[2];
  id v8 = (void *)(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_defaultBackgroundColor);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_defaultBackgroundColor, v50, 1LL, 0LL);
  id v9 = (void *)*v8;
  *id v8 = v7;
  id v10 = v7;

  id v11 = sub_100044744();
  [v11 setBackgroundColor:*v8];

  id v12 = (void *)v1[5];
  id v13 = (void *)(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_highlightForegroundColor);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_highlightForegroundColor, v49, 1LL, 0LL);
  id v14 = (void *)*v13;
  *id v13 = v12;
  id v15 = v12;

  __n128 v16 = *(void **)(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_label);
  [v16 setTextColor:*v13];

  uint64_t v17 = (void *)v1[4];
  id v18 = (void *)(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_defaultForegroundColor);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_defaultForegroundColor, v48, 1LL, 0LL);
  id v19 = (void *)*v18;
  *id v18 = v17;
  id v20 = v17;

  [v16 setTextColor:*v18];
  id v21 = sub_100043D14();
  [v16 setAttributedText:v21];

  uint64_t v22 = *(void **)(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_floatingView);
  id v23 = [v22 contentView];
  if (!v23)
  {
    __break(1u);
    goto LABEL_6;
  }

  objc_super v24 = v23;
  id v25 = sub_100043168();
  [v24 addSubview:v25];

  id v26 = sub_100043168();
  [v26 setAlpha:0.0];

  id v27 = sub_100043168();
  [v27 setHidden:1];

  id v28 = sub_100043168();
  [v28 setTranslatesAutoresizingMaskIntoConstraints:0];

  uint64_t v29 = sub_100018A04(&qword_1001142B0);
  uint64_t v30 = swift_allocObject(v29, 48LL, 7LL);
  *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FC0;
  id v31 = sub_100043168();
  id v32 = [v31 centerXAnchor];

  id v33 = [v22 contentView];
  if (!v33)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v34 = v33;
  id v35 = [v33 centerXAnchor];

  id v36 = [v32 constraintEqualToAnchor:v35];
  *(void *)(v30 + 32) = v36;
  id v37 = sub_100043168();
  id v38 = [v37 centerYAnchor];

  id v39 = [v22 contentView];
  if (v39)
  {
    uint64_t v41 = v39;
    char v42 = (void *)objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, v40);
    id v43 = [v41 centerYAnchor];

    id v44 = [v38 constraintEqualToAnchor:v43];
    *(void *)(v30 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v44;
    specialized Array._endMutation()(v45);
    uint64_t v46 = v30;
    sub_10001C5D0(0LL, (unint64_t *)&qword_100113120, &OBJC_CLASS___NSLayoutConstraint_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v42, "activateConstraints:", isa, swift_bridgeObjectRelease(v46).n128_f64[0]);

    return;
  }

void sub_100043630()
{
  uint64_t v1 = v0;
  [v0 _setSpeedBumpEdges:5];
  objc_super v2 = *(void **)&v0[OBJC_IVAR____TtC8FaceTime14FloatingButton_floatingView];
  [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v0 addSubview:v2];
  sub_100092200(v2);
  id v3 = sub_100044744();
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v4 = [v2 contentView];
  if (!v4)
  {
    __break(1u);
    goto LABEL_6;
  }

  id v5 = v4;
  id v6 = sub_100044744();
  [v5 addSubview:v6];

  id v7 = [v2 contentView];
  if (!v7)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  id v8 = v7;
  id v9 = sub_100044744();
  sub_100092200(v9);

  id v10 = [objc_allocWithZone(UIView) init];
  id v11 = *(void **)&v1[OBJC_IVAR____TtC8FaceTime14FloatingButton_label];
  id v12 = &v1[OBJC_IVAR____TtC8FaceTime14FloatingButton_defaultForegroundColor];
  swift_beginAccess(&v1[OBJC_IVAR____TtC8FaceTime14FloatingButton_defaultForegroundColor], v45, 0LL, 0LL);
  [v11 setTextColor:*(void *)v12];
  id v13 = &v1[OBJC_IVAR____TtC8FaceTime14FloatingButton_buttonFont];
  swift_beginAccess(v13, v44, 0LL, 0LL);
  [v11 setFont:*(void *)v13];
  [v10 addSubview:v11];
  [v11 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v10 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v14 = [v2 contentView];
  if (v14)
  {
    id v15 = v14;
    [v14 addSubview:v10];

    LODWORD(vswift_unknownObjectWeakDestroy(v0 + 16) = 1132068864;
    [v10 setContentHuggingPriority:1 forAxis:v16];
    id v18 = (void *)objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, v17);
    uint64_t v19 = sub_100018A04(&qword_1001142B0);
    uint64_t v20 = swift_allocObject(v19, 88LL, 7LL);
    *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C5430;
    id v21 = [v10 centerXAnchor];
    id v22 = [v2 centerXAnchor];
    id v23 = [v21 constraintEqualToAnchor:v22];

    *(void *)(v20 + 32) = v23;
    id v24 = [v10 centerYAnchor];
    id v25 = [v2 centerYAnchor];
    id v26 = [v24 constraintEqualToAnchor:v25];

    *(void *)(v20 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v26;
    id v27 = [v11 trailingAnchor];
    id v28 = [v10 trailingAnchor];
    id v29 = [v27 constraintEqualToAnchor:v28];

    *(void *)(v20 + 4_Block_object_dispose(va, 8) = v29;
    id v30 = [v11 leadingAnchor];
    id v31 = [v10 leadingAnchor];
    id v32 = [v30 constraintEqualToAnchor:v31];

    *(void *)(v20 + 56) = v32;
    id v33 = [v11 trailingAnchor];
    id v34 = [v10 trailingAnchor];
    id v35 = [v33 constraintEqualToAnchor:v34];

    *(void *)(v20 + 64) = v35;
    id v36 = [v11 topAnchor];
    id v37 = [v10 topAnchor];
    id v38 = [v36 constraintEqualToAnchor:v37];

    *(void *)(v20 + 72) = v38;
    id v39 = [v11 bottomAnchor];
    id v40 = [v10 bottomAnchor];
    id v41 = [v39 constraintEqualToAnchor:v40];

    *(void *)(v20 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v41;
    specialized Array._endMutation()(v42);
    sub_10001C5D0(0LL, (unint64_t *)&qword_100113120, &OBJC_CLASS___NSLayoutConstraint_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v18, "activateConstraints:", isa, swift_bridgeObjectRelease(v20).n128_f64[0]);

    return;
  }

void sub_100043B84(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FaceTime14FaceTimeButton_isWaitingForCallToStart);
  objc_super v2 = *(void **)(a1 + OBJC_IVAR____TtC8FaceTime14FloatingButton_label);
  if (v1 == 1)
  {
    [v2 setAlpha:0.0];
    id v3 = sub_100043168();
    [v3 setHidden:0];

    id v4 = sub_100043168();
    [v4 setAlpha:1.0];

    id v7 = sub_100043168();
    [v7 startAnimating];
  }

  else
  {
    [v2 setAlpha:1.0];
    id v5 = sub_100043168();
    [v5 stopAnimating];

    id v6 = sub_100043168();
    [v6 setAlpha:0.0];

    id v7 = sub_100043168();
    [v7 setHidden:1];
  }
}

id sub_100043D14()
{
  id v1 = [objc_allocWithZone(NSTextAttachment) init];
  uint64_t v2 = v0 + OBJC_IVAR____TtC8FaceTime14FaceTimeButton_viewModel;
  [v1 setImage:*(void *)(v0 + OBJC_IVAR____TtC8FaceTime14FaceTimeButton_viewModel + 48)];
  uint64_t v3 = sub_10001C5D0(0LL, &qword_100112978, &OBJC_CLASS___NSMutableAttributedString_ptr);
  id v4 = [(id)swift_getObjCClassFromMetadata(v3) attributedStringWithAttachment:v1];
  id v5 = objc_allocWithZone(&OBJC_CLASS___NSAttributedString);
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 initWithString:v6];

  [v4 appendAttributedString:v7];
  uint64_t v8 = *(void *)(v2 + 8);
  id v9 = objc_allocWithZone(&OBJC_CLASS___NSAttributedString);
  swift_bridgeObjectRetain(v8);
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = objc_msgSend(v9, "initWithString:", v10, swift_bridgeObjectRelease(v8).n128_f64[0]);

  [v4 appendAttributedString:v11];
  return v4;
}

void sub_100043EE0()
{
  if ([v0 isEnabled])
  {
    [v0 setAlpha:1.0];
    id v1 =  [*(id *)&v0[OBJC_IVAR____TtC8FaceTime14FaceTimeButton_viewModel + 16] colorWithAlphaComponent:0.7];
  }

  else
  {
    [v0 setAlpha:0.35];
    id v3 = objc_msgSend((id)objc_opt_self(UIColor, v2), "whiteColor");
    id v1 = [v3 colorWithAlphaComponent:0.35];
  }

  id v4 = &v0[OBJC_IVAR____TtC8FaceTime14FloatingButton_defaultBackgroundColor];
  swift_beginAccess(&v0[OBJC_IVAR____TtC8FaceTime14FloatingButton_defaultBackgroundColor], v8, 1LL, 0LL);
  id v5 = *(void **)v4;
  *(void *)id v4 = v1;
  id v6 = v1;

  id v7 = sub_100044744();
  [v7 setBackgroundColor:*(void *)v4];
}

void sub_10004404C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC8FaceTime14FaceTimeButton_viewModel + 8);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8FaceTime14FaceTimeButton_viewModel + 16);
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC8FaceTime14FaceTimeButton_viewModel + 24);
  id v4 = *(void **)(v0 + OBJC_IVAR____TtC8FaceTime14FaceTimeButton_viewModel + 32);
  id v5 = *(void **)(v0 + OBJC_IVAR____TtC8FaceTime14FaceTimeButton_viewModel + 48);

  swift_bridgeObjectRelease(v1);
}

id sub_1000440B4()
{
  return sub_10004530C((uint64_t (*)(void))type metadata accessor for FaceTimeButton);
}

id FloatingButton.attributedTitle.getter()
{
  return [*(id *)(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_label) attributedText];
}

void FloatingButton.attributedTitle.setter(void *a1)
{
}

void (*FloatingButton.attributedTitle.modify(void *a1))(id *a1)
{
  id v3 = *(void **)(v1 + OBJC_IVAR____TtC8FaceTime14FloatingButton_label);
  a1[1] = v3;
  *a1 = [v3 attributedText];
  return sub_1000441E4;
}

void sub_1000441E4(id *a1)
{
  id v1 = *a1;
  objc_msgSend(a1[1], "setAttributedText:");
}

id FloatingButton.defaultBackgroundColor.getter()
{
  id v1 = (id *)(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_defaultBackgroundColor);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_defaultBackgroundColor, v3, 0LL, 0LL);
  return *v1;
}

void FloatingButton.defaultBackgroundColor.setter(void *a1)
{
}

uint64_t (*FloatingButton.defaultBackgroundColor.modify(void *a1))()
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8FaceTime14FloatingButton_defaultBackgroundColor;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  return sub_1000442C0;
}

id FloatingButton.highlightedBackgroundColor.getter()
{
  uint64_t v1 = (id *)(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_highlightedBackgroundColor);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_highlightedBackgroundColor, v3, 0LL, 0LL);
  return *v1;
}

void FloatingButton.highlightedBackgroundColor.setter(void *a1)
{
}

void sub_100044314(void *a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess(v4, v8, 1LL, 0LL);
  id v5 = (void *)*v4;
  void *v4 = a1;
  id v6 = a1;

  id v7 = sub_100044744();
  [v7 setBackgroundColor:*v4];
}

uint64_t (*FloatingButton.highlightedBackgroundColor.modify(void *a1))()
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8FaceTime14FloatingButton_highlightedBackgroundColor;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  return sub_1000442C0;
}

void sub_1000443E8(void *a1, char a2)
{
  id v3 = (void *)*a1;
  swift_endAccess(*a1);
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = v3[3];
    uint64_t v5 = v3[4];
    id v6 = sub_100044744();
    [v6 setBackgroundColor:*(void *)(v4 + v5)];
  }

  free(v3);
}

id FloatingButton.buttonFont.getter()
{
  uint64_t v1 = (id *)(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_buttonFont);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_buttonFont, v3, 0LL, 0LL);
  return *v1;
}

void FloatingButton.buttonFont.setter(void *a1)
{
}

void (*FloatingButton.buttonFont.modify(void *a1))(void *a1, char a2)
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8FaceTime14FloatingButton_buttonFont;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  return sub_1000444F0;
}

void sub_1000444F0(void *a1, char a2)
{
}

id FloatingButton.highlightForegroundColor.getter()
{
  uint64_t v1 = (id *)(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_highlightForegroundColor);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_highlightForegroundColor, v3, 0LL, 0LL);
  return *v1;
}

void FloatingButton.highlightForegroundColor.setter(void *a1)
{
}

void (*FloatingButton.highlightForegroundColor.modify(void *a1))(void *a1, char a2)
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8FaceTime14FloatingButton_highlightForegroundColor;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  return sub_1000445AC;
}

void sub_1000445AC(void *a1, char a2)
{
}

id FloatingButton.defaultForegroundColor.getter()
{
  uint64_t v1 = (id *)(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_defaultForegroundColor);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_defaultForegroundColor, v3, 0LL, 0LL);
  return *v1;
}

void FloatingButton.defaultForegroundColor.setter(void *a1)
{
}

void sub_100044610(void *a1, void *a2, SEL *a3)
{
  id v6 = (void *)(v3 + *a2);
  swift_beginAccess(v6, v9, 1LL, 0LL);
  id v7 = (void *)*v6;
  void *v6 = a1;
  id v8 = a1;

  objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8FaceTime14FloatingButton_label), *a3, *v6);
}

void (*FloatingButton.defaultForegroundColor.modify(void *a1))(void *a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8FaceTime14FloatingButton_defaultForegroundColor;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  return sub_1000445AC;
}

void sub_1000446EC(void *a1, char a2, SEL *a3)
{
  uint64_t v5 = (void *)*a1;
  swift_endAccess(*a1);
  if ((a2 & 1) == 0) {
    objc_msgSend(*(id *)(v5[3] + OBJC_IVAR____TtC8FaceTime14FloatingButton_label), *a3, *(void *)(v5[3] + v5[4]));
  }
  free(v5);
}

id sub_100044744()
{
  uint64_t v1 = OBJC_IVAR____TtC8FaceTime14FloatingButton____lazy_storage___highlightView;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton____lazy_storage___highlightView);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton____lazy_storage___highlightView);
  }

  else
  {
    id v4 = [objc_allocWithZone(UIView) init];
    uint64_t v5 = (void *)(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_defaultBackgroundColor);
    swift_beginAccess(v0 + OBJC_IVAR____TtC8FaceTime14FloatingButton_defaultBackgroundColor, v9, 0LL, 0LL);
    [v4 setBackgroundColor:*v5];
    id v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0LL;
  }

  id v7 = v2;
  return v3;
}

id _s8FaceTime14FloatingButtonC12floatingViewSo018_UIFloatingContentF0Cvpfi_0()
{
  id v0 = [objc_allocWithZone(_UIFloatingContentView) init];
  [v0 setHighlightStyle:1];
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___UIColor, v1);
  id v3 = [v2 clearColor];
  [v0 setBackgroundColor:v3 forState:0];

  id v4 = [v2 clearColor];
  [v0 setBackgroundColor:v4 forState:8];

  id v5 = [v2 clearColor];
  [v0 setBackgroundColor:v5 forState:1];

  [v0 setFocusedSizeIncrease:30.0];
  objc_msgSend(v0, "setContentMotionRotation:translation:", 0.02, 0.02, 2.0, 5.0);
  [v0 setShadowRadius:25.0];
  [v0 setShadowVerticalOffset:10.0];
  [v0 setShadowOpacity:0.25];
  [v0 setVisualEffectContainerViewScaleFactor:0.988];
  [v0 setCornerRadius:18.0];
  static String._unconditionallyBridgeFromObjectiveC(_:)(kCACornerCurveContinuous);
  uint64_t v7 = v6;
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  [v0 setCornerCurve:v8];

  id result = [v0 contentView];
  if (result)
  {
    NSString v10 = result;
    [result setClipsToBounds:0];

    [v0 setClipsToBounds:0];
    return v0;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *sub_100044A14(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = OBJC_IVAR____TtC8FaceTime14FloatingButton_label;
  id v10 = objc_allocWithZone(&OBJC_CLASS___UILabel);
  id v11 = v4;
  *(void *)&v4[v9] = [v10 init];
  uint64_t v12 = OBJC_IVAR____TtC8FaceTime14FloatingButton_defaultBackgroundColor;
  *(void *)&v11[v12] = [objc_allocWithZone(UIColor) initWithWhite:0.0 alpha:0.0];
  uint64_t v13 = OBJC_IVAR____TtC8FaceTime14FloatingButton_highlightedBackgroundColor;
  *(void *)&v11[v13] = [objc_allocWithZone(UIColor) initWithWhite:1.0 alpha:1.0];
  uint64_t v14 = OBJC_IVAR____TtC8FaceTime14FloatingButton_buttonFont;
  *(void *)&v11[v14] =  objc_msgSend( (id)objc_opt_self(UIFont, v15),  "systemFontOfSize:weight:",  32.0,  UIFontWeightBold);
  uint64_t v16 = OBJC_IVAR____TtC8FaceTime14FloatingButton_highlightForegroundColor;
  id v18 = (void *)objc_opt_self(&OBJC_CLASS___UIColor, v17);
  *(void *)&v11[v16] = [v18 blackColor];
  uint64_t v19 = OBJC_IVAR____TtC8FaceTime14FloatingButton_defaultForegroundColor;
  *(void *)&v11[v19] = [v18 whiteColor];
  uint64_t v20 = OBJC_IVAR____TtC8FaceTime14FloatingButton_floatingView;
  *(void *)&v11[v20] = _s8FaceTime14FloatingButtonC12floatingViewSo018_UIFloatingContentF0Cvpfi_0();
  *(void *)&v11[OBJC_IVAR____TtC8FaceTime14FloatingButton____lazy_storage___highlightView] = 0LL;

  v27.receiver = v11;
  v27.super_class = (Class)type metadata accessor for FloatingButton(v21, v22);
  id v23 = objc_msgSendSuper2(&v27, "initWithFrame:", a1, a2, a3, a4);
  id v24 = *(void (**)(void))((swift_isaMask & *v23) + 0x138LL);
  id v25 = v23;
  v24();

  return v25;
}

id sub_100044C04(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC8FaceTime14FloatingButton_label;
  id v4 = objc_allocWithZone(&OBJC_CLASS___UILabel);
  id v5 = v1;
  *(void *)&v1[v3] = [v4 init];
  uint64_t v6 = OBJC_IVAR____TtC8FaceTime14FloatingButton_defaultBackgroundColor;
  *(void *)&v5[v6] = [objc_allocWithZone(UIColor) initWithWhite:0.0 alpha:0.0];
  uint64_t v7 = OBJC_IVAR____TtC8FaceTime14FloatingButton_highlightedBackgroundColor;
  *(void *)&v5[v7] = [objc_allocWithZone(UIColor) initWithWhite:1.0 alpha:1.0];
  uint64_t v8 = OBJC_IVAR____TtC8FaceTime14FloatingButton_buttonFont;
  *(void *)&v5[v8] =  objc_msgSend( (id)objc_opt_self(UIFont, v9),  "systemFontOfSize:weight:",  32.0,  UIFontWeightBold);
  uint64_t v10 = OBJC_IVAR____TtC8FaceTime14FloatingButton_highlightForegroundColor;
  uint64_t v12 = (void *)objc_opt_self(&OBJC_CLASS___UIColor, v11);
  *(void *)&v5[v10] = [v12 blackColor];
  uint64_t v13 = OBJC_IVAR____TtC8FaceTime14FloatingButton_defaultForegroundColor;
  *(void *)&v5[v13] = [v12 whiteColor];
  uint64_t v14 = OBJC_IVAR____TtC8FaceTime14FloatingButton_floatingView;
  *(void *)&v5[v14] = _s8FaceTime14FloatingButtonC12floatingViewSo018_UIFloatingContentF0Cvpfi_0();
  *(void *)&v5[OBJC_IVAR____TtC8FaceTime14FloatingButton____lazy_storage___highlightView] = 0LL;

  v19.receiver = v5;
  v19.super_class = (Class)type metadata accessor for FloatingButton(v15, v16);
  id v17 = objc_msgSendSuper2(&v19, "initWithCoder:", a1);

  return v17;
}

id sub_100044DCC(void *a1, uint64_t a2, uint64_t (*a3)(void), SEL *a4)
{
  v6.receiver = a1;
  v6.super_class = (Class)a3();
  return objc_msgSendSuper2(&v6, *a4);
}

id FloatingButton.isHighlighted.getter(uint64_t a1, uint64_t a2)
{
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for FloatingButton(a1, a2);
  return objc_msgSendSuper2(&v4, "isHighlighted");
}

uint64_t type metadata accessor for FloatingButton(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime14FloatingButton, a2);
}

id FloatingButton.isHighlighted.setter(uint64_t a1, uint64_t a2)
{
  char v3 = a1;
  v5.receiver = v2;
  v5.super_class = (Class)type metadata accessor for FloatingButton(a1, a2);
  objc_msgSendSuper2(&v5, "setHighlighted:", v3 & 1);
  return objc_msgSend( *(id *)&v2[OBJC_IVAR____TtC8FaceTime14FloatingButton_floatingView],  "setControlState:withAnimationCoordinator:",  objc_msgSend(v2, "isHighlighted"),  0);
}

Swift::Void __swiftcall FloatingButton.didUpdateFocus(in:with:)( UIFocusUpdateContext in, UIFocusAnimationCoordinator with)
{
  v23.receiver = v2;
  v23.super_class = (Class)type metadata accessor for FloatingButton((uint64_t)in.super.isa, (uint64_t)with.super.isa);
  objc_msgSendSuper2(&v23, "didUpdateFocusInContext:withAnimationCoordinator:", in.super.isa, with.super.isa);
  objc_super v5 = *(void **)&v2[OBJC_IVAR____TtC8FaceTime14FloatingButton_floatingView];
  else {
    uint64_t v6 = 0LL;
  }
  [v5 setControlState:v6 withAnimationCoordinator:with.super.isa];
  uint64_t v7 = (char *)-[objc_class nextFocusedView](in.super.isa, "nextFocusedView");
  if (v7 && (uint64_t v8 = v7, v7, v8 == v2))
  {
    uint64_t v14 = swift_allocObject(&unk_1000F8B00, 24LL, 7LL);
    *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
    uint64_t v21 = sub_100045270;
    uint64_t v22 = v14;
    id v17 = _NSConcreteStackBlock;
    uint64_t v18 = 1107296256LL;
    objc_super v19 = sub_10004511C;
    uint64_t v20 = &unk_1000F8B18;
    uint64_t v10 = _Block_copy(&v17);
    uint64_t v15 = v22;
    uint64_t v16 = v2;
    swift_release(v15);
    uint64_t v13 = &selRef_addCoordinatedFocusingAnimations_completion_;
  }

  else
  {
    uint64_t v9 = swift_allocObject(&unk_1000F8AB0, 24LL, 7LL);
    *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
    uint64_t v21 = sub_100045230;
    uint64_t v22 = v9;
    id v17 = _NSConcreteStackBlock;
    uint64_t v18 = 1107296256LL;
    objc_super v19 = sub_10004511C;
    uint64_t v20 = &unk_1000F8AC8;
    uint64_t v10 = _Block_copy(&v17);
    uint64_t v11 = v22;
    uint64_t v12 = v2;
    swift_release(v11);
    uint64_t v13 = &selRef_addCoordinatedUnfocusingAnimations_completion_;
  }

  objc_msgSend(with.super.isa, *v13, v10, 0);
  _Block_release(v10);
}

uint64_t sub_10004511C(uint64_t a1, uint64_t a2)
{
  objc_super v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

void sub_100045164(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = *(void **)(a2 + OBJC_IVAR____TtC8FaceTime14FloatingButton_label);
  uint64_t v7 = (void *)(a2 + *a3);
  swift_beginAccess(v7, v11, 0LL, 0LL);
  [v6 setTextColor:*v7];
  id v8 = sub_100044744();
  uint64_t v9 = (void *)(a2 + *a4);
  swift_beginAccess(v9, &v10, 0LL, 0LL);
  [v8 setBackgroundColor:*v9];
}

uint64_t sub_10004520C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100045230(uint64_t a1)
{
}

uint64_t sub_100045258(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100045268(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_100045270(uint64_t a1)
{
}

id FloatingButton.__deallocating_deinit()
{
  return sub_10004530C((uint64_t (*)(void))type metadata accessor for FloatingButton);
}

id sub_10004530C(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for FaceTimeButton(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime14FaceTimeButton, a2);
}

uint64_t initializeBufferWithCopyOfBuffer for FaceTimeButton.ViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

void destroy for FaceTimeButton.ViewModel(uint64_t a1)
{
}

void *initializeWithCopy for FaceTimeButton.ViewModel(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  objc_super v4 = (void *)a2[2];
  uint64_t v5 = (void *)a2[3];
  a1[2] = v4;
  a1[3] = v5;
  uint64_t v6 = (void *)a2[4];
  uint64_t v7 = (void *)a2[5];
  a1[4] = v6;
  a1[5] = v7;
  id v8 = (void *)a2[6];
  a1[6] = v8;
  swift_bridgeObjectRetain(v3);
  id v9 = v4;
  id v10 = v5;
  id v11 = v6;
  id v12 = v7;
  id v13 = v8;
  return a1;
}

void *assignWithCopy for FaceTimeButton.ViewModel(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = (void *)a2[2];
  uint64_t v7 = (void *)a1[2];
  a1[2] = v6;
  id v8 = v6;

  id v9 = (void *)a2[3];
  id v10 = (void *)a1[3];
  a1[3] = v9;
  id v11 = v9;

  id v12 = (void *)a2[4];
  id v13 = (void *)a1[4];
  a1[4] = v12;
  id v14 = v12;

  uint64_t v15 = (void *)a2[5];
  uint64_t v16 = (void *)a1[5];
  a1[5] = v15;
  id v17 = v15;

  uint64_t v18 = (void *)a1[6];
  objc_super v19 = (void *)a2[6];
  a1[6] = v19;
  id v20 = v19;

  return a1;
}

__n128 initializeWithTake for FaceTimeButton.ViewModel(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FaceTimeButton.ViewModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease(*(void *)(a1 + 8));
  __int128 v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 8);

  uint64_t v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  uint64_t v6 = *(void **)(a1 + 48);
  *(_OWORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = *(_OWORD *)(a2 + 40);

  return a1;
}

uint64_t getEnumTagSinglePayload for FaceTimeButton.ViewModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FaceTimeButton.ViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FaceTimeButton.ViewModel()
{
  return &type metadata for FaceTimeButton.ViewModel;
}

void sub_1000456B8(uint64_t a1@<X1>, Swift::String *a2@<X8>)
{
  __int128 v3 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, a1), "mainBundle");
  v23._object = (void *)0xE000000000000000LL;
  v4._uint64_t countAndFlagsBits = 0x454D495445434146LL;
  v4._object = (void *)0xEE004F454449565FLL;
  v5.value._uint64_t countAndFlagsBits = 0x6C6172656E6547LL;
  v5.value._object = (void *)0xE700000000000000LL;
  v6._uint64_t countAndFlagsBits = 0LL;
  v6._object = (void *)0xE000000000000000LL;
  v23._uint64_t countAndFlagsBits = 0LL;
  Swift::String v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, v3, v6, v23);

  id v8 = [objc_allocWithZone(UIColor) initWithRed:0.337254902 green:0.905882353 blue:0.337254902 alpha:0.7];
  id v9 = [objc_allocWithZone(UIColor) initWithRed:0.337254902 green:0.905882353 blue:0.337254902 alpha:0.95];
  id v11 = (void *)objc_opt_self(&OBJC_CLASS___UIColor, v10);
  id v12 = [v11 whiteColor];
  id v13 = [v11 whiteColor];
  id v15 = objc_msgSend((id)objc_opt_self(UIFont, v14), "systemFontOfSize:weight:", 27.0, UIFontWeightBold);
  id v17 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration, v16), "configurationWithFont:", v15);

  id v18 = v17;
  NSString v19 = String._bridgeToObjectiveC()();
  id v21 = objc_msgSend((id)objc_opt_self(UIImage, v20), "systemImageNamed:withConfiguration:", v19, v18);

  if (v21)
  {
    id v22 = [v21 imageWithRenderingMode:2];
  }

  else
  {

    id v22 = 0LL;
  }

  *a2 = v7;
  a2[1]._uint64_t countAndFlagsBits = (uint64_t)v8;
  a2[1]._object = v9;
  a2[2]._uint64_t countAndFlagsBits = (uint64_t)v12;
  a2[2]._object = v13;
  a2[3]._uint64_t countAndFlagsBits = (uint64_t)v22;
}

uint64_t sub_100045934@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CallType(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000456B8(v8, &v31);
  object = v31._object;
  uint64_t v10 = v32;
  id v11 = v33;
  id v12 = v34;
  id v13 = v35;
  id v29 = v36;
  uint64_t countAndFlagsBits = v31._countAndFlagsBits;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for CallType.audio(_:), v4);
  swift_bridgeObjectRetain(object);
  id v14 = v10;
  id v15 = v11;
  id v16 = v12;
  id v17 = v13;
  LOBYTE(a1) = static CallType.== infix(_:_:)(a1, v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((a1 & 1) != 0)
  {
    id v19 =  objc_msgSend( (id)objc_opt_self(UIFont, v18),  "systemFontOfSize:weight:",  27.0,  UIFontWeightBold);
    id v21 =  objc_msgSend( (id)objc_opt_self(UIImageSymbolConfiguration, v20),  "configurationWithFont:",  v19);

    id v22 = v21;
    NSString v23 = String._bridgeToObjectiveC()();
    id v25 = objc_msgSend((id)objc_opt_self(UIImage, v24), "systemImageNamed:withConfiguration:", v23, v22);

    if (v25)
    {
      id v26 = [v25 imageWithRenderingMode:2];
    }

    else
    {

      id v26 = 0LL;
    }
  }

  else
  {
    id v26 = v29;
  }

  uint64_t result = swift_bridgeObjectRelease(object);
  *a2 = countAndFlagsBits;
  a2[1] = (uint64_t)object;
  a2[2] = (uint64_t)v14;
  a2[3] = (uint64_t)v15;
  a2[4] = (uint64_t)v16;
  a2[5] = (uint64_t)v17;
  a2[6] = (uint64_t)v26;
  return result;
}

void sub_100045B68(uint64_t a1@<X1>, Swift::String *a2@<X8>)
{
  __int128 v3 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, a1), "mainBundle");
  v25._object = (void *)0xE000000000000000LL;
  v4._uint64_t countAndFlagsBits = 0x454D495445434146LL;
  v4._object = (void *)0xEE004F494455415FLL;
  v5.value._uint64_t countAndFlagsBits = 0x6C6172656E6547LL;
  v5.value._object = (void *)0xE700000000000000LL;
  v6._uint64_t countAndFlagsBits = 0LL;
  v6._object = (void *)0xE000000000000000LL;
  v25._uint64_t countAndFlagsBits = 0LL;
  Swift::String v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, v3, v6, v25);

  id v9 = (void *)objc_opt_self(&OBJC_CLASS___UIColor, v8);
  id v10 = [v9 grayColor];
  id v11 = [v10 colorWithAlphaComponent:0.5];

  id v12 = [v9 whiteColor];
  id v13 = [v12 colorWithAlphaComponent:0.95];

  id v14 = [v9 whiteColor];
  id v15 = [v9 blackColor];
  id v17 = objc_msgSend((id)objc_opt_self(UIFont, v16), "systemFontOfSize:weight:", 27.0, UIFontWeightBold);
  id v19 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration, v18), "configurationWithFont:", v17);

  id v20 = v19;
  NSString v21 = String._bridgeToObjectiveC()();
  id v23 = objc_msgSend((id)objc_opt_self(UIImage, v22), "systemImageNamed:withConfiguration:", v21, v20);

  if (v23)
  {
    id v24 = [v23 imageWithRenderingMode:2];
  }

  else
  {

    id v24 = 0LL;
  }

  *a2 = v7;
  a2[1]._uint64_t countAndFlagsBits = (uint64_t)v11;
  a2[1]._object = v13;
  a2[2]._uint64_t countAndFlagsBits = (uint64_t)v14;
  a2[2]._object = v15;
  a2[3]._uint64_t countAndFlagsBits = (uint64_t)v24;
}

BOOL sub_100045DF8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_100045E10()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100045E54()
{
}

Swift::Int sub_100045E7C(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100045EBC()
{
  qword_10011A258 = 0x405F000000000000LL;
}

void sub_100045ECC()
{
  qword_10011A260 = 0x4067400000000000LL;
}

double sub_100045EE0()
{
  if (qword_100112258 != -1) {
    swift_once(&qword_100112258, sub_100045ECC);
  }
  double result = *(double *)&qword_10011A260 * 0.5;
  *(double *)&qword_10011A268 = *(double *)&qword_10011A260 * 0.5;
  return result;
}

double sub_100045F30()
{
  if (qword_100112258 != -1) {
    swift_once(&qword_100112258, sub_100045ECC);
  }
  double result = 144.0 / *(double *)&qword_10011A260;
  *(double *)&qword_10011A270 = 144.0 / *(double *)&qword_10011A260;
  return result;
}

double sub_100045F84()
{
  if (qword_100112250 != -1) {
    swift_once(&qword_100112250, sub_100045EBC);
  }
  double v0 = *(double *)&qword_10011A258;
  if (qword_100112258 != -1) {
    swift_once(&qword_100112258, sub_100045ECC);
  }
  double result = v0 / *(double *)&qword_10011A260;
  *(double *)&qword_10011A278 = v0 / *(double *)&qword_10011A260;
  return result;
}

double sub_100046008()
{
  if (qword_100112258 != -1) {
    swift_once(&qword_100112258, sub_100045ECC);
  }
  double result = 204.0 / *(double *)&qword_10011A260;
  *(double *)&qword_10011A280 = 204.0 / *(double *)&qword_10011A260;
  return result;
}

void sub_100046060()
{
  qword_10011A288 = 0x4024000000000000LL;
}

void sub_100046070()
{
  qword_10011A290 = 0x4020000000000000LL;
}

uint64_t sub_100046080()
{
  uint64_t v1 = v0;
  Swift::UInt v2 = *(void **)(v0 + OBJC_IVAR____TtC8FaceTime6Bubble_node);
  [v2 setScale:0.01];
  __int128 v3 = *(char **)(v0 + OBJC_IVAR____TtC8FaceTime6Bubble_focus);
  [*(id *)&v3[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_nameLabel] setAlpha:1.0];
  CGAffineTransformMakeScale(&v7, 0.01, 0.01);
  [v3 setTransform:&v7];
  if (qword_100112280 != -1) {
    swift_once(&qword_100112280, sub_100046060);
  }
  *(void *)&v3[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_labelOffset] = qword_10011A288;
  *(void *)&v3[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_labelWidth] = 0x4067400000000000LL;
  sub_100048F7C();
  id v5 =  objc_msgSend( (id)objc_opt_self(SKAction, v4),  "scaleTo:delay:mass:stiffness:damping:",  1.0,  0.0,  1.0,  185.0,  20.0);
  [v2 runAction:v5];

  swift_retain(v1);
  sub_100049FE0((uint64_t)sub_10004A4CC, v1, 1.0, 185.0, 20.0, 0.2);
  return swift_release(v1);
}

id sub_10004621C(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + OBJC_IVAR____TtC8FaceTime6Bubble_focus);
  *(void *)&v1[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_scale] = 0x3F847AE147AE147BLL;
  sub_100048638();
  return [v1 setAlpha:0.0];
}

id sub_100046270(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + OBJC_IVAR____TtC8FaceTime6Bubble_focus);
  v3[0] = 0x3FF0000000000000LL;
  v3[1] = 0LL;
  v3[2] = 0LL;
  v3[3] = 0x3FF0000000000000LL;
  v3[4] = 0LL;
  v3[5] = 0LL;
  [v1 setTransform:v3];
  return [*(id *)&v1[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_nameLabel] setAlpha:1.0];
}

id sub_1000462DC(uint64_t a1, double a2)
{
  Swift::UInt v2 = *(char **)(a1 + OBJC_IVAR____TtC8FaceTime6Bubble_focus);
  *(double *)&v2[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_scale] = a2;
  sub_100048638();
  return [v2 setAlpha:1.0];
}

id sub_100046320(uint64_t a1, double a2)
{
  *(double *)(*(void *)(a1 + OBJC_IVAR____TtC8FaceTime6Bubble_focus) + OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_scale) = a2;
  return sub_100048638();
}

uint64_t sub_100046354(double a1, double a2, double a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  id v10 = (void *)objc_opt_self(&OBJC_CLASS___SKAction, a5);
  id v11 = [v10 scaleTo:a3 delay:0.0 mass:1.0 stiffness:200.0 damping:25.0];
  id v12 = objc_msgSend(v10, "moveTo:delay:mass:stiffness:damping:", a1, a2, 0.0, 1.0, 200.0, 25.0);
  id v13 = *(void **)(v5 + OBJC_IVAR____TtC8FaceTime6Bubble_node);
  uint64_t v14 = sub_100018A04(&qword_1001142B0);
  uint64_t v15 = swift_allocObject(v14, 48LL, 7LL);
  *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FC0;
  *(void *)(v15 + 32) = v11;
  *(void *)(v15 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v12;
  uint64_t v23 = v15;
  specialized Array._endMutation()(v15);
  sub_10004A34C(0LL, v16);
  id v17 = v11;
  id v18 = v12;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v23);
  id v20 = [v10 group:isa];

  [v13 runAction:v20];
  uint64_t v21 = swift_allocObject(&unk_1000F9030, 32LL, 7LL);
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  *(double *)(v21 + 24) = a3;
  swift_retain(v6);
  sub_100049FE0((uint64_t)sub_10004A3AC, v21, 1.0, 200.0, 25.0, 0.0);

  return swift_release(v21);
}

id sub_10004652C(uint64_t a1)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + OBJC_IVAR____TtC8FaceTime6Bubble_focus)
                 + OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_plusBackground),
           "setAlpha:",
           1.0);
}

void sub_100046554()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8FaceTime6Bubble_node);
  [v1 removeAllActions];
  id v4 = objc_msgSend((id)objc_opt_self(SKAction, v3), "scaleTo:duration:", v2 * 0.8, 0.13);
  [v4 setTimingMode:2];
  [v1 runAction:v4];
  id v5 = [objc_allocWithZone(UIViewPropertyAnimator) initWithDuration:2 curve:0 animations:0.13];
  uint64_t v6 = swift_allocObject(&unk_1000F8F68, 32LL, 7LL);
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  *(double *)(v6 + 24) = v2 * 0.8;
  uint64_t v16 = sub_10004A420;
  uint64_t v17 = v6;
  id v12 = _NSConcreteStackBlock;
  uint64_t v13 = 1107296256LL;
  uint64_t v14 = sub_100027654;
  uint64_t v15 = &unk_1000F8F80;
  CGAffineTransform v7 = _Block_copy(&v12);
  uint64_t v8 = v17;
  swift_retain(v0);
  swift_release(v8);
  [v5 addAnimations:v7];
  _Block_release(v7);
  uint64_t v9 = swift_allocObject(&unk_1000F8FB8, 32LL, 7LL);
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  *(double *)(v9 + 24) = v2;
  uint64_t v16 = sub_10004A484;
  uint64_t v17 = v9;
  id v12 = _NSConcreteStackBlock;
  uint64_t v13 = 1107296256LL;
  uint64_t v14 = sub_1000B7A5C;
  uint64_t v15 = &unk_1000F8FD0;
  id v10 = _Block_copy(&v12);
  uint64_t v11 = v17;
  swift_retain(v0);
  swift_release(v11);
  [v5 addCompletion:v10];
  _Block_release(v10);
  [v5 startAnimation];
}

uint64_t sub_10004677C(double a1, uint64_t a2, uint64_t a3)
{
  id v5 =  objc_msgSend( (id)objc_opt_self(SKAction, a3),  "scaleTo:delay:mass:stiffness:damping:",  a1,  0.0,  1.0,  250.0,  18.0);
  [*(id *)(a3 + OBJC_IVAR____TtC8FaceTime6Bubble_node) runAction:v5];
  uint64_t v6 = swift_allocObject(&unk_1000F9008, 32LL, 7LL);
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(double *)(v6 + 24) = a1;
  swift_retain(a3);
  sub_100049FE0((uint64_t)sub_10004A3AC, v6, 1.0, 250.0, 18.0, 0.0);

  return swift_release(v6);
}

void sub_10004685C(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v5 = v4;
  id v10 = *(void **)(v4 + OBJC_IVAR____TtC8FaceTime6Bubble_node);
  [v10 removeAllActions];
  double v11 = a2 * a3;
  uint64_t v13 = (void *)objc_opt_self(&OBJC_CLASS___SKAction, v12);
  id v14 = [v13 scaleTo:v11 duration:0.13];
  [v14 setTimingMode:2];
  if (a4 <= 0.0)
  {
    [v10 runAction:v14];
  }

  else
  {
    uint64_t v15 = sub_100018A04(&qword_1001142B0);
    uint64_t v16 = swift_allocObject(v15, 48LL, 7LL);
    *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FC0;
    id v17 = [v13 waitForDuration:a4];
    *(void *)(v16 + 32) = v17;
    *(void *)(v16 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v14;
    id v29 = (void **)v16;
    specialized Array._endMutation()(v17);
    sub_10004A34C(0LL, v18);
    id v19 = v14;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v16);
    id v21 = [v13 sequence:isa];

    [v10 runAction:v21];
  }

  id v22 = [objc_allocWithZone(UIViewPropertyAnimator) initWithDuration:2 curve:0 animations:0.13];
  uint64_t v23 = swift_allocObject(&unk_1000F8EA0, 32LL, 7LL);
  *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(double *)(v23 + 24) = v11;
  id v33 = sub_10004A3E8;
  uint64_t v34 = v23;
  id v29 = _NSConcreteStackBlock;
  uint64_t v30 = 1107296256LL;
  Swift::String v31 = sub_100027654;
  id v32 = &unk_1000F8EB8;
  id v24 = _Block_copy(&v29);
  uint64_t v25 = v34;
  swift_retain(v5);
  swift_release(v25);
  [v22 addAnimations:v24];
  _Block_release(v24);
  uint64_t v26 = swift_allocObject(&unk_1000F8EF0, 40LL, 7LL);
  *(void *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(void *)(v26 + 24) = a1;
  *(double *)(v26 + 32) = a2;
  id v33 = sub_10004A414;
  uint64_t v34 = v26;
  id v29 = _NSConcreteStackBlock;
  uint64_t v30 = 1107296256LL;
  Swift::String v31 = sub_1000B7A5C;
  id v32 = &unk_1000F8F08;
  objc_super v27 = _Block_copy(&v29);
  uint64_t v28 = v34;
  swift_retain(v5);
  swift_release(v28);
  [v22 addCompletion:v27];
  _Block_release(v27);
  [v22 startAnimationAfterDelay:a4];
}

uint64_t sub_100046B50(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 + OBJC_IVAR____TtC8FaceTime6Bubble_focus);
  *(void *)(v7 + OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_plusNumber) = a4;
  uint64_t v8 = *(void **)(v7 + OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_plusLabel);
  uint64_t v9 = sub_100018A04((uint64_t *)&unk_100112980);
  uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FB0;
  *(void *)(v10 + 56) = &type metadata for Int;
  *(void *)(v10 + 64) = &protocol witness table for Int;
  *(void *)(v10 + 32) = a4;
  uint64_t v12 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v11), "mainBundle");
  v23._object = (void *)0xEB00000000656C62LL;
  v13._uint64_t countAndFlagsBits = 0x4E5F53554C50LL;
  v13._object = (void *)0xE600000000000000LL;
  v14._uint64_t countAndFlagsBits = 0LL;
  v14._object = (void *)0xE000000000000000LL;
  v23._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  Swift::String v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, v12, v14, v23);

  static String.localizedStringWithFormat(_:_:)(v15._countAndFlagsBits, v15._object, v10);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v15._object);
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  [v8 setText:v18];

  id v20 =  objc_msgSend( (id)objc_opt_self(SKAction, v19),  "scaleTo:delay:mass:stiffness:damping:",  a1,  0.0,  1.0,  250.0,  18.0);
  [*(id *)(a3 + OBJC_IVAR____TtC8FaceTime6Bubble_node) runAction:v20];
  uint64_t v21 = swift_allocObject(&unk_1000F8F40, 32LL, 7LL);
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(double *)(v21 + 24) = a1;
  swift_retain(a3);
  sub_100049FE0((uint64_t)sub_10004A3AC, v21, 1.0, 250.0, 18.0, 0.0);

  return swift_release(v21);
}

void sub_100046D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v7 = v6;
  uint64_t v12 = *(void *)(v7 + 32);
  *(void *)(v7 + 24) = a1;
  *(void *)(v7 + 32) = a2;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = v7 + OBJC_IVAR____TtC8FaceTime6Bubble_indexPath;
  swift_beginAccess(v7 + OBJC_IVAR____TtC8FaceTime6Bubble_indexPath, &v29, 33LL, 0LL);
  uint64_t v14 = type metadata accessor for IndexPath(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24LL))(v13, a5, v14);
  swift_endAccess(&v29);
  uint64_t v15 = *(void *)(v7 + OBJC_IVAR____TtC8FaceTime6Bubble_focus);
  uint64_t v16 = (void *)(v15 + OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_name);
  uint64_t v17 = *(void *)(v15 + OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_name + 8);
  *uint64_t v16 = a3;
  v16[1] = a4;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRelease(v17);
  sub_10004851C();
  double v18 = *(double *)(v15 + OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_scale);
  id v20 = objc_msgSend((id)objc_opt_self(SKAction, v19), "scaleTo:duration:", v18 * 0.8, 0.13);
  [v20 setTimingMode:2];
  [*(id *)(v7 + OBJC_IVAR____TtC8FaceTime6Bubble_node) runAction:v20];
  id v21 = [objc_allocWithZone(UIViewPropertyAnimator) initWithDuration:2 curve:0 animations:0.13];
  uint64_t v22 = swift_allocObject(&unk_1000F8DD8, 32LL, 7LL);
  *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *(double *)(v22 + 24) = v18 * 0.8;
  id v33 = (uint64_t (*)(uint64_t))sub_10004A3AC;
  uint64_t v34 = v22;
  id v29 = _NSConcreteStackBlock;
  uint64_t v30 = 1107296256LL;
  Swift::String v31 = sub_100027654;
  id v32 = &unk_1000F8DF0;
  Swift::String v23 = _Block_copy(&v29);
  uint64_t v24 = v34;
  swift_retain(v7);
  swift_release(v24);
  [v21 addAnimations:v23];
  _Block_release(v23);
  uint64_t v25 = swift_allocObject(&unk_1000F8E28, 40LL, 7LL);
  *(void *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *(void *)(v25 + 24) = a6;
  *(double *)(v25 + 32) = v18;
  id v33 = sub_10004A3DC;
  uint64_t v34 = v25;
  id v29 = _NSConcreteStackBlock;
  uint64_t v30 = 1107296256LL;
  Swift::String v31 = sub_1000B7A5C;
  id v32 = &unk_1000F8E40;
  uint64_t v26 = _Block_copy(&v29);
  uint64_t v27 = v34;
  swift_retain(v7);
  id v28 = a6;
  swift_release(v27);
  [v21 addCompletion:v26];
  _Block_release(v26);
  [v21 startAnimation];
}

uint64_t sub_100047034(double a1, uint64_t a2, uint64_t a3)
{
  objc_msgSend( *(id *)(*(void *)(a3 + OBJC_IVAR____TtC8FaceTime6Bubble_focus)
          + OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_avatarImageView),
    "setImage:");
  id v6 =  objc_msgSend( (id)objc_opt_self(SKAction, v5),  "scaleTo:delay:mass:stiffness:damping:",  a1,  0.0,  1.0,  250.0,  18.0);
  [*(id *)(a3 + OBJC_IVAR____TtC8FaceTime6Bubble_node) runAction:v6];
  uint64_t v7 = swift_allocObject(&unk_1000F8E78, 32LL, 7LL);
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(double *)(v7 + 24) = a1;
  swift_retain(a3);
  sub_100049FE0((uint64_t)sub_10004A3AC, v7, 1.0, 250.0, 18.0, 0.0);

  return swift_release(v7);
}

id sub_100047138(uint64_t a1, double a2)
{
  uint64_t v3 = *(_BYTE **)(a1 + OBJC_IVAR____TtC8FaceTime6Bubble_focus);
  [*(id *)&v3[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_deleteImage] setAlpha:1.0];
  v3[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_shadowOn] = 1;
  sub_1000487D8();
  *(double *)&v3[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_scale] = a2;
  sub_100048638();
  uint64_t v4 = OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_nameLabel;
  uint64_t v5 = *(void **)&v3[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_nameLabel];
  [v5 setAlpha:1.0];
  uint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___UIColor, v6);
  id v8 = v5;
  id v9 = [v7 labelColor];
  [v8 setTextColor:v9];

  id v10 = [*(id *)&v3[v4] layer];
  LODWORD(v11) = 0.5;
  [v10 setShadowOpacity:v11];

  id v12 = [*(id *)&v3[v4] layer];
  objc_msgSend(v12, "setShadowOffset:", 0.0, 2.0);

  id v13 = [*(id *)&v3[v4] layer];
  [v13 setShadowRadius:4.0];

  return [v3 layoutIfNeeded];
}

void sub_1000472B4(uint64_t a1, uint64_t a2)
{
  double v3 = 1.0;
  if (*(_BYTE *)(v2 + 16) == 1)
  {
    if (qword_100112270 != -1) {
      swift_once(&qword_100112270, sub_100045F84);
    }
    double v3 = *(double *)&qword_10011A278;
  }

  id v4 = objc_msgSend((id)objc_opt_self(SKAction, a2), "scaleTo:duration:", v3, 0.1);
  [*(id *)(v2 + OBJC_IVAR____TtC8FaceTime6Bubble_node) runAction:v4];
  id v5 = [objc_allocWithZone(UIViewPropertyAnimator) initWithDuration:3 curve:0 animations:0.1];
  uint64_t v6 = swift_allocObject(&unk_1000F8D88, 32LL, 7LL);
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(double *)(v6 + 24) = v3;
  v9[4] = sub_10004A3A0;
  uint64_t v10 = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256LL;
  v9[2] = sub_100027654;
  v9[3] = &unk_1000F8DA0;
  uint64_t v7 = _Block_copy(v9);
  uint64_t v8 = v10;
  swift_retain(v2);
  swift_release(v8);
  [v5 addAnimations:v7];
  _Block_release(v7);
  [v5 startAnimation];
}

void sub_10004744C(uint64_t a1, double a2)
{
  uint64_t v2 = *(char **)(a1 + OBJC_IVAR____TtC8FaceTime6Bubble_focus);
  *(double *)&v2[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_scale] = a2;
  sub_100048638();
  [*(id *)&v2[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_deleteImage] setAlpha:0.0];
  uint64_t v3 = OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_nameLabel;
  id v4 = *(void **)&v2[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_nameLabel];
  uint64_t v6 = (void *)objc_opt_self(&OBJC_CLASS___UIColor, v5);
  id v7 = v4;
  id v8 = [v6 secondaryLabelColor];
  [v7 setTextColor:v8];

  id v9 = [*(id *)&v2[v3] layer];
  objc_msgSend(v9, "setShadowOffset:", 0.0, 0.0);

  id v10 = [*(id *)&v2[v3] layer];
  [v10 setShadowRadius:0.0];

  id v11 = [*(id *)&v2[v3] layer];
  LODWORD(v12) = 0;
  [v11 setShadowOpacity:v12];

  [v2 layoutIfNeeded];
  v2[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_shadowOn] = 0;
  sub_1000487D8();
}

void sub_1000475AC(char a1, double a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(v3 + OBJC_IVAR____TtC8FaceTime6Bubble_focus);
  if (qword_100112288 != -1) {
    swift_once(&qword_100112288, sub_100046070);
  }
  *(void *)(v8 + OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_labelOffset) = qword_10011A290;
  *(void *)(v8 + OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_labelWidth) = 0x4061C00000000000LL;
  sub_100048F7C();
  id v10 = (void *)objc_opt_self(&OBJC_CLASS___SKAction, v9);
  id v28 = objc_msgSend(v10, "moveTo:delay:mass:stiffness:damping:", a2, a3, 0.0, 1.0, 150.0, 20.0);
  uint64_t v11 = sub_100018A04(&qword_1001142B0);
  uint64_t v12 = swift_allocObject(v11, 40LL, 7LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FD0;
  *(void *)(v12 + 32) = v28;
  uint64_t v29 = v12;
  specialized Array._endMutation()(v12);
  uint64_t v13 = v29;
  if ((a1 & 1) != 0)
  {
    uint64_t v14 = qword_100112268;
    id v15 = v28;
    if (v14 != -1) {
      swift_once(&qword_100112268, sub_100045F30);
    }
    uint64_t v17 = qword_10011A270;
  }

  else
  {
    uint64_t v18 = qword_100112270;
    id v19 = v28;
    if (v18 != -1) {
      swift_once(&qword_100112270, sub_100045F84);
    }
    uint64_t v17 = qword_10011A278;
    id v20 =   objc_msgSend( v10,  "scaleTo:delay:mass:stiffness:damping:",  *(double *)&qword_10011A278,  0.0,  1.0,  150.0,  20.0,  v28);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
    unint64_t v22 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v21 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v22 >= v21 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1LL);
    }
    uint64_t v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
    specialized Array._endMutation()(v23);

    uint64_t v13 = v29;
  }

  uint64_t v24 = *(void **)(v4 + OBJC_IVAR____TtC8FaceTime6Bubble_node);
  sub_10004A34C(0LL, v16);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v13);
  id v26 = [v10 group:isa];

  [v24 runAction:v26];
  uint64_t v27 = swift_allocObject(&unk_1000F8D60, 32LL, 7LL);
  *(void *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)(v27 + 24) = v17;
  swift_retain(v4);
  sub_100049FE0((uint64_t)sub_10004A394, v27, 1.0, 150.0, 20.0, 0.0);
  swift_release(v27);
}

id sub_1000478AC(uint64_t a1, double a2)
{
  uint64_t v3 = *(char **)(a1 + OBJC_IVAR____TtC8FaceTime6Bubble_focus);
  [v3 setAlpha:1.0];
  *(double *)&v3[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_scale] = a2;
  sub_100048638();
  [*(id *)&v3[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_plusBackground] setAlpha:0.0];
  [*(id *)&v3[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_nameLabel] setAlpha:1.0];
  return [v3 layoutIfNeeded];
}

void sub_10004793C(char a1, double a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(v3 + OBJC_IVAR____TtC8FaceTime6Bubble_focus);
  if (qword_100112280 != -1) {
    swift_once(&qword_100112280, sub_100046060);
  }
  *(void *)(v8 + OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_labelOffset) = qword_10011A288;
  *(void *)(v8 + OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_labelWidth) = 0x4067400000000000LL;
  sub_100048F7C();
  id v10 = (void *)objc_opt_self(&OBJC_CLASS___SKAction, v9);
  id v27 = objc_msgSend(v10, "moveTo:delay:mass:stiffness:damping:", a2, a3, 0.0, 1.0, 150.0, 20.0);
  uint64_t v11 = sub_100018A04(&qword_1001142B0);
  uint64_t v12 = swift_allocObject(v11, 40LL, 7LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FD0;
  *(void *)(v12 + 32) = v27;
  uint64_t v28 = v12;
  specialized Array._endMutation()(v12);
  uint64_t v13 = v28;
  if ((a1 & 1) != 0)
  {
    uint64_t v14 = qword_100112278;
    id v15 = v27;
    if (v14 != -1) {
      swift_once(&qword_100112278, sub_100046008);
    }
    double v17 = *(double *)&qword_10011A280;
  }

  else
  {
    id v18 = v27;
    double v17 = 1.0;
    id v19 = [v10 scaleTo:1.0 delay:0.0 mass:1.0 stiffness:150.0 damping:20.0];
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
    unint64_t v21 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v20 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v21 >= v20 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1LL);
    }
    uint64_t v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
    specialized Array._endMutation()(v22);

    uint64_t v13 = v28;
  }

  uint64_t v23 = *(void **)(v4 + OBJC_IVAR____TtC8FaceTime6Bubble_node);
  sub_10004A34C(0LL, v16);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v13);
  id v25 = [v10 group:isa];

  [v23 runAction:v25];
  uint64_t v26 = swift_allocObject(&unk_1000F8D38, 32LL, 7LL);
  *(void *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(double *)(v26 + 24) = v17;
  swift_retain(v4);
  sub_100049FE0((uint64_t)sub_10004A388, v26, 1.0, 150.0, 20.0, 0.0);
  swift_release(v26);
}

id sub_100047C10(uint64_t a1, double a2)
{
  uint64_t v3 = *(char **)(a1 + OBJC_IVAR____TtC8FaceTime6Bubble_focus);
  [v3 setAlpha:1.0];
  *(double *)&v3[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_scale] = a2;
  sub_100048638();
  [*(id *)&v3[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_nameLabel] setAlpha:1.0];
  return [v3 layoutIfNeeded];
}

void sub_100047C88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void **)((char *)v3 + OBJC_IVAR____TtC8FaceTime6Bubble_node);
  id v7 =  objc_msgSend( (id)objc_opt_self(SKAction, a2),  "scaleTo:delay:mass:stiffness:damping:",  0.01,  0.0,  1.0,  200.0,  25.0);
  [v6 runAction:v7];

  id v8 = objc_msgSend( objc_allocWithZone(UISpringTimingParameters),  "initWithMass:stiffness:damping:initialVelocity:",  1.0,  200.0,  25.0,  0.0,  0.0);
  id v9 = [objc_allocWithZone(UIViewPropertyAnimator) initWithDuration:v8 timingParameters:1.0];

  id v19 = sub_10004A2B0;
  unint64_t v20 = v3;
  id v15 = _NSConcreteStackBlock;
  uint64_t v16 = 1107296256LL;
  double v17 = sub_100027654;
  id v18 = &unk_1000F8CB0;
  id v10 = _Block_copy(&v15);
  uint64_t v11 = v20;
  swift_retain(v3);
  swift_release(v11);
  [v9 addAnimations:v10];
  _Block_release(v10);
  uint64_t v12 = (void *)swift_allocObject(&unk_1000F8CE8, 40LL, 7LL);
  v12[2] = v3;
  v12[3] = a1;
  v12[4] = a2;
  id v19 = sub_10004A2EC;
  unint64_t v20 = v12;
  id v15 = _NSConcreteStackBlock;
  uint64_t v16 = 1107296256LL;
  double v17 = sub_1000B7A5C;
  id v18 = &unk_1000F8D00;
  uint64_t v13 = _Block_copy(&v15);
  uint64_t v14 = v20;
  swift_retain(v3);
  sub_10002AE44(a1, a2);
  swift_release(v14);
  [v9 addCompletion:v13];
  _Block_release(v13);
  [v9 startAnimation];
}

id sub_100047EA8(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + OBJC_IVAR____TtC8FaceTime6Bubble_focus);
  [*(id *)&v1[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_nameLabel] setAlpha:0.0];
  CGAffineTransformMakeScale(&v3, 0.01, 0.01);
  return [v1 setTransform:&v3];
}

uint64_t sub_100047F28()
{
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC8FaceTime6Bubble_indexPath;
  uint64_t v2 = type metadata accessor for IndexPath(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t sub_100047FA0()
{
  return type metadata accessor for Bubble(0LL);
}

uint64_t type metadata accessor for Bubble(uint64_t a1)
{
  uint64_t result = qword_100113D20;
  if (!qword_100113D20) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Bubble);
  }
  return result;
}

uint64_t sub_100047FE4(uint64_t a1)
{
  v4[0] = &unk_1000C5500;
  v4[1] = &unk_1000C5518;
  uint64_t result = type metadata accessor for IndexPath(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100048074@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32LL);
  *a1 = *(void *)(*(void *)v1 + 24LL);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

void sub_100048084()
{
  int v1 = v0[OBJC_IVAR____TtCC8FaceTime6Bubble4Node_enablePhysics];
  id v2 = [v0 physicsBody];
  unint64_t v3 = v2;
  if (v1 == 1)
  {
    if (v2)
    {
      [v2 setDynamic:1];
    }

    id v4 = [v0 physicsBody];
    if (v4)
    {
      if (v0[OBJC_IVAR____TtCC8FaceTime6Bubble4Node_oldCollisionBitMask + 4]) {
        uint64_t v5 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v5 = *(unsigned int *)&v0[OBJC_IVAR____TtCC8FaceTime6Bubble4Node_oldCollisionBitMask];
      }
      id v10 = v4;
      [v4 setCollisionBitMask:v5];
    }
  }

  else
  {
    if (v2)
    {
      [v2 setDynamic:0];
    }

    id v6 = [v0 physicsBody];
    id v7 = v6;
    if (v6)
    {
      unsigned int v8 = [v6 collisionBitMask];
    }

    else
    {
      unsigned int v8 = 0;
    }

    id v9 = &v0[OBJC_IVAR____TtCC8FaceTime6Bubble4Node_oldCollisionBitMask];
    *(_DWORD *)id v9 = v8;
    v9[4] = v7 == 0LL;
  }

void sub_1000481C8(double a1, uint64_t a2, uint64_t a3)
{
  id v4 = &v3[OBJC_IVAR____TtCC8FaceTime6Bubble4Node_oldCollisionBitMask];
  *(_DWORD *)id v4 = 0;
  v4[4] = 1;
  v3[OBJC_IVAR____TtCC8FaceTime6Bubble4Node_enablePhysics] = 0;
  *(void *)&v3[OBJC_IVAR____TtCC8FaceTime6Bubble4Node_marginScale] = 0x3FF0CCCCCCCCCCCDLL;
  *(double *)&v3[OBJC_IVAR____TtCC8FaceTime6Bubble4Node_radius] = a1;
  id v5 = objc_msgSend((id)objc_opt_self(SKShapeNode, a3), "shapeNodeWithCircleOfRadius:", a1);
  id v6 = [v5 path];

  if (v6)
  {
    v18.receiver = v3;
    v18.super_class = (Class)type metadata accessor for Bubble.Node(v7, v8);
    id v9 = objc_msgSendSuper2(&v18, "init");
    [v9 setPath:v6];
    uint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___UIColor, v10);
    id v12 = v9;
    id v13 = [v11 clearColor];
    [v12 setStrokeColor:v13];

    [v12 setLineWidth:1.0];
    uint64_t v14 = (char *)v12;
    id v15 = [v11 clearColor];
    [v14 setFillColor:v15];

    id v17 =  objc_msgSend( (id)objc_opt_self(SKPhysicsBody, v16),  "bodyWithCircleOfRadius:",  *(double *)&v14[OBJC_IVAR____TtCC8FaceTime6Bubble4Node_radius] * *(double *)&v14[OBJC_IVAR____TtCC8FaceTime6Bubble4Node_marginScale]);
    [v17 setAllowsRotation:0];
    [v17 setFriction:0.0];
    [v17 setLinearDamping:0.45];
    [v17 setMass:1.0];
    [v14 setPhysicsBody:v17];
  }

  else
  {
    __break(1u);
  }

id sub_1000484F0()
{
  return sub_10004530C((uint64_t (*)(void))type metadata accessor for Bubble.Node);
}

uint64_t type metadata accessor for Bubble.Node(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtCC8FaceTime6Bubble4Node, a2);
}

id sub_10004851C()
{
  int v1 = *(void **)&v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_nameLabel];
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_name + 8];
  if (v2)
  {
    swift_bridgeObjectRetain(*(void *)&v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_name + 8]);
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v2);
  }

  else
  {
    NSString v3 = 0LL;
  }

  [v1 setText:v3];

  [v1 sizeToFit];
  [v1 frame];
  objc_msgSend(v1, "setFrame:");
  [v0 bounds];
  CGFloat v4 = CGRectGetWidth(v7) * 0.5;
  [v1 bounds];
  CGFloat v5 = v4 - CGRectGetWidth(v8) * 0.5;
  [v1 frame];
  return [v1 setFrame:v5];
}

id sub_100048638()
{
  uint64_t v1 = OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_scale;
  double v2 = *(double *)&v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_scale];
  NSString v3 = *(void **)&v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_contentView];
  if (v2 == 1.0)
  {
    *(_OWORD *)&v9.a = 0x3FF0000000000000uLL;
    v9.c = 0.0;
    v9.d = 1.0;
    *(_OWORD *)&v9.tx = 0uLL;
    [v3 setTransform:&v9];
  }

  else
  {
    CGAffineTransformMakeScale(&v9, v2, *(CGFloat *)&v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_scale]);
    [v3 setTransform:&v9];
  }

  if (qword_100112260 != -1) {
    swift_once(&qword_100112260, sub_100045EE0);
  }
  double v4 = *(double *)&qword_10011A268 * *(double *)&v0[v1];
  CGFloat v5 = *(void **)&v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_deleteImage];
  objc_msgSend(v0, "bounds", *(_OWORD *)&v9.a, *(_OWORD *)&v9.c, *(_OWORD *)&v9.tx);
  double v6 = v4 * 0.707106781 + CGRectGetMidX(v10);
  [v0 bounds];
  objc_msgSend(v5, "setCenter:", v6, CGRectGetMidY(v11) + v4 * -0.707106781);
  CGRect v7 = *(void **)&v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_nameLabel];
  [v0 bounds];
  CGRectGetMidY(v12);
  [v7 frame];
  return objc_msgSend(v7, "setFrame:");
}

void sub_1000487D8()
{
  int v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_shadowOn);
  uint64_t v2 = OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_contentView;
  id v3 = [*(id *)(v0 + OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_contentView) layer];
  CGFloat v5 = v3;
  if (v1 == 1)
  {
    LODWORD(v4) = 1.0;
    [v3 setShadowOpacity:v4];

    id v6 = [*(id *)(v0 + v2) layer];
    double v7 = 20.0;
  }

  else
  {
    LODWORD(v4) = 0;
    [v3 setShadowOpacity:v4];

    id v6 = [*(id *)(v0 + v2) layer];
    double v7 = 0.0;
  }

  id v8 = v6;
  objc_msgSend(v6, "setShadowOffset:", 0.0, v7);
}

void sub_1000488C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___UIImageSymbolConfiguration, a2);
  id v3 = [v2 configurationPreferringMulticolor];
  CGFloat v5 = (void *)objc_opt_self(&OBJC_CLASS___UIFont, v4);
  id v6 = v3;
  id v7 = [v5 systemFontOfSize:28.0 weight:UIFontWeightBold];
  id v8 = [v2 configurationWithFont:v7];

  id v9 = [v6 configurationByApplyingConfiguration:v8];
  id v10 = v9;
  NSString v11 = String._bridgeToObjectiveC()();
  id v13 = objc_msgSend((id)objc_opt_self(UIImage, v12), "systemImageNamed:", v11);

  if (v13)
  {
    id v14 = [v13 imageWithRenderingMode:0];

    id v15 = [objc_allocWithZone(UIImageView) initWithImage:v14];
    id v17 = objc_msgSend((id)objc_opt_self(UIColor, v16), "redColor");
    [v15 setTintColor:v17];

    [v15 setPreferredSymbolConfiguration:v10];
  }

  else
  {
    __break(1u);
  }

id sub_100048AA8()
{
  id v0 = [objc_allocWithZone(UIImageView) init];
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___UIColor, v1);
  id v3 = v0;
  id v4 = [v2 grayColor];
  [v3 setBackgroundColor:v4];

  [v3 setContentMode:2];
  id v5 = [v3 layer];
  if (qword_100112258 != -1) {
    swift_once(&qword_100112258, sub_100045ECC);
  }
  [v5 setCornerRadius:*(double *)&qword_10011A260 * 0.5];

  id v6 = [v3 layer];
  [v6 setMasksToBounds:1];

  return v3;
}

id sub_100048BE0()
{
  id v0 = [objc_allocWithZone(UILabel) init];
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___UIFont, v1);
  id v3 = v0;
  id v4 = [v2 systemFontOfSize:23.0 weight:UIFontWeightMedium];
  [v3 setFont:v4];

  [v3 setTextAlignment:1];
  id v5 = [objc_allocWithZone(UIColor) initWithWhite:1.0 alpha:0.5];
  [v3 setTextColor:v5];

  id v6 = [v3 layer];
  LODWORD(v7) = 0;
  [v6 setShadowOpacity:v7];

  id v8 = [v3 layer];
  id v10 = objc_msgSend((id)objc_opt_self(UIColor, v9), "blackColor");
  id v11 = [v10 CGColor];

  [v8 setShadowColor:v11];
  id v12 = [v3 layer];
  objc_msgSend(v12, "setShadowOffset:", 0.0, 0.0);

  id v13 = [v3 layer];
  [v13 setShadowRadius:0.0];

  [v3 setNumberOfLines:2];
  return v3;
}

id sub_100048DF4()
{
  id v0 = [objc_allocWithZone(UILabel) init];
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___UIFont, v1);
  id v3 = v0;
  id v4 = [v2 systemFontOfSize:75.0 weight:UIFontWeightBold];
  id v5 = [v4 fontDescriptor];
  id v6 = [v5 fontDescriptorWithDesign:UIFontDescriptorSystemDesignRounded];

  if (v6)
  {
    id v7 = [v2 fontWithDescriptor:v6 size:75.0];

    id v4 = v7;
  }

  [v3 setFont:v4];

  id v9 = objc_msgSend((id)objc_opt_self(UIColor, v8), "whiteColor");
  [v3 setTextColor:v9];

  [v3 setTextAlignment:1];
  return v3;
}

id sub_100048F7C()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_nameLabel];
  [v1 frame];
  objc_msgSend(v1, "setFrame:");
  [v1 frame];
  objc_msgSend(v1, "setFrame:");
  [v1 sizeToFit];
  [v1 frame];
  objc_msgSend(v1, "setFrame:");
  [v0 bounds];
  CGFloat v2 = CGRectGetWidth(v5) * 0.5;
  [v1 bounds];
  CGFloat v3 = v2 - CGRectGetWidth(v6) * 0.5;
  [v1 frame];
  return [v1 setFrame:v3];
}

id sub_100049084(double a1, double a2, double a3, double a4)
{
  id v9 = &v4[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_name];
  void *v9 = 0LL;
  v9[1] = 0LL;
  *(void *)&v4[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_scale] = 0x3FF0000000000000LL;
  v4[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_shadowOn] = 0;
  uint64_t v10 = OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_plusBackground;
  id v11 = objc_allocWithZone(&OBJC_CLASS___UIView);
  id v12 = v4;
  id v13 = [v11 init];
  *(void *)&v4[v10] = v13;
  uint64_t v14 = OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_deleteImage;
  sub_1000488C0((uint64_t)v13, v15);
  *(void *)&v12[v14] = v16;
  uint64_t v17 = OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_contentView;
  *(void *)&v12[v17] = [objc_allocWithZone(UIView) init];
  uint64_t v18 = OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_avatarImageView;
  *(void *)&v12[v18] = sub_100048AA8();
  uint64_t v19 = OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_nameLabel;
  *(void *)&v12[v19] = sub_100048BE0();
  uint64_t v20 = OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_plusLabel;
  *(void *)&v12[v20] = sub_100048DF4();
  swift_weakInit(&v12[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_parent], 0LL);
  *(void *)&v12[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_labelOffset] = 0LL;
  *(void *)&v12[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_labelWidth] = 0x4067400000000000LL;
  *(void *)&v12[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_plusNumber] = 2LL;

  v25.receiver = v12;
  v25.super_class = (Class)type metadata accessor for Bubble.Focus(v21, v22);
  id v23 = objc_msgSendSuper2(&v25, "initWithFrame:", a1, a2, a3, a4);
  sub_100049258();

  return v23;
}

void sub_100049258()
{
  CGFloat v2 = (void *)objc_opt_self(&OBJC_CLASS___UIColor, v1);
  id v3 = [v2 clearColor];
  [v0 setBackgroundColor:v3];

  [v0 _setSpeedBumpEdges:15];
  uint64_t v4 = OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_contentView;
  [*(id *)&v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_contentView] setClipsToBounds:0];
  id v5 = [*(id *)&v0[v4] layer];
  if (qword_100112258 != -1) {
    swift_once(&qword_100112258, sub_100045ECC);
  }
  [v5 setCornerRadius:*(double *)&qword_10011A260 * 0.5];

  id v6 = [*(id *)&v0[v4] layer];
  id v7 = [v2 blackColor];
  id v8 = [v7 colorWithAlphaComponent:0.5];

  id v9 = [v8 CGColor];
  [v6 setShadowColor:v9];

  id v10 = [*(id *)&v0[v4] layer];
  objc_msgSend(v10, "setShadowOffset:", 0.0, 0.0);

  id v11 = [*(id *)&v0[v4] layer];
  [v11 setShadowRadius:30.0];

  id v12 = [*(id *)&v0[v4] layer];
  LODWORD(v13) = 0;
  [v12 setShadowOpacity:v13];

  id v14 = [*(id *)&v0[v4] layer];
  id v15 = [objc_allocWithZone(UIColor) initWithWhite:1.0 alpha:0.1];
  id v16 = [v15 CGColor];

  [v14 setBorderColor:v16];
  id v17 = [*(id *)&v0[v4] layer];
  [v17 setBorderWidth:1.0];

  double v18 = *(double *)&qword_10011A260;
  id v19 = *(id *)&v0[v4];
  [v0 bounds];
  double v21 = v20 * 0.5 - v18 * 0.5;
  [v0 bounds];
  objc_msgSend(v19, "setFrame:", v21, v22 * 0.5 - v18 * 0.5, v18, v18);

  [v0 addSubview:*(void *)&v0[v4]];
  id v23 = *(void **)&v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_avatarImageView];
  [*(id *)&v0[v4] bounds];
  objc_msgSend(v23, "setFrame:");
  [*(id *)&v0[v4] addSubview:v23];
  uint64_t v24 = *(void **)&v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_deleteImage];
  objc_msgSend(v24, "setFrame:", 0.0, 0.0, 38.0, 38.0);
  if (qword_100112260 != -1) {
    swift_once(&qword_100112260, sub_100045EE0);
  }
  objc_msgSend( v24,  "setCenter:",  *(double *)&qword_10011A268 + *(double *)&qword_10011A268 * 0.707106781,  *(double *)&qword_10011A268 + *(double *)&qword_10011A268 * -0.707106781);
  [v24 setAlpha:0.0];
  [v0 addSubview:v24];
  objc_super v25 = *(void **)&v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_nameLabel];
  [v0 bounds];
  CGFloat v26 = CGRectGetWidth(v49) * 0.5 + -93.0;
  [v0 bounds];
  objc_msgSend(v25, "setFrame:", v26, v27, 186.0, 56.0);
  [v0 addSubview:v25];
  uint64_t v28 = OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_plusBackground;
  id v29 = [*(id *)&v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_plusBackground] layer];
  [v29 setMasksToBounds:1];

  id v30 = [*(id *)&v0[v28] layer];
  [v30 setCornerRadius:*(double *)&qword_10011A260 * 0.5];

  Swift::String v31 = *(void **)&v0[v28];
  id v32 = objc_allocWithZone(&OBJC_CLASS___UIColor);
  id v33 = v31;
  id v34 = [v32 initWithWhite:0.25 alpha:1.0];
  [v33 setBackgroundColor:v34];

  [*(id *)&v0[v28] setAlpha:0.0];
  id v35 = *(void **)&v0[v4];
  id v36 = *(id *)&v0[v28];
  [v35 bounds];
  objc_msgSend(v36, "setFrame:");

  [*(id *)&v0[v4] addSubview:*(void *)&v0[v28]];
  id v37 = *(void **)&v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_plusLabel];
  [*(id *)&v0[v28] bounds];
  objc_msgSend(v37, "setFrame:");
  [*(id *)&v0[v28] addSubview:v37];
  *(void *)&v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_plusNumber] = 2LL;
  uint64_t v38 = sub_100018A04((uint64_t *)&unk_100112980);
  uint64_t v39 = swift_allocObject(v38, 72LL, 7LL);
  *(_OWORD *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FB0;
  *(void *)(v39 + 56) = &type metadata for Int;
  *(void *)(v39 + 64) = &protocol witness table for Int;
  *(void *)(v39 + 32) = 2LL;
  id v41 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v40), "mainBundle");
  v48._object = (void *)0xEB00000000656C62LL;
  v42._uint64_t countAndFlagsBits = 0x4E5F53554C50LL;
  v42._object = (void *)0xE600000000000000LL;
  v43._uint64_t countAndFlagsBits = 0LL;
  v43._object = (void *)0xE000000000000000LL;
  v48._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  Swift::String v44 = NSLocalizedString(_:tableName:bundle:value:comment:)(v42, (Swift::String_optional)0, v41, v43, v48);

  static String.localizedStringWithFormat(_:_:)(v44._countAndFlagsBits, v44._object, v39);
  uint64_t v46 = v45;
  swift_bridgeObjectRelease(v39);
  swift_bridgeObjectRelease(v44._object);
  id v47 = String._bridgeToObjectiveC()();
  objc_msgSend(v37, "setText:", v47, swift_bridgeObjectRelease(v46).n128_f64[0]);
}

uint64_t sub_10004996C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  v14.receiver = v2;
  v14.super_class = (Class)type metadata accessor for Bubble.Focus(a1, a2);
  objc_msgSendSuper2(&v14, "didUpdateFocusInContext:withAnimationCoordinator:", a1, v3);
  LODWORD(v3) = [v2 isFocused];
  uint64_t result = swift_weakLoadStrong(&v2[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_parent]);
  uint64_t v7 = result;
  if ((_DWORD)v3)
  {
    if (!result) {
      return result;
    }
    if (*(_BYTE *)(result + 16) == 1)
    {
      if (qword_100112268 != -1) {
        swift_once(&qword_100112268, sub_100045F30);
      }
      id v8 = &qword_10011A270;
    }

    else
    {
      if (qword_100112278 != -1) {
        swift_once(&qword_100112278, sub_100046008);
      }
      id v8 = &qword_10011A280;
    }

    uint64_t v10 = *v8;
    id v11 = *(void **)(v7 + OBJC_IVAR____TtC8FaceTime6Bubble_node);
    id v12 =  objc_msgSend( (id)objc_opt_self(SKAction, v6),  "scaleTo:delay:mass:stiffness:damping:",  *(double *)v8,  0.0,  1.0,  200.0,  25.0);
    [v11 runAction:v12];

    uint64_t v13 = swift_allocObject(&unk_1000F8C98, 32LL, 7LL);
    *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
    *(void *)(v13 + 24) = v10;
    swift_retain(v7);
    sub_100049FE0((uint64_t)sub_10004A150, v13, 1.0, 200.0, 25.0, 0.0);
    swift_release(v7);
    uint64_t v9 = v13;
  }

  else
  {
    if (!result) {
      return result;
    }
    sub_1000472B4(result, v6);
    uint64_t v9 = v7;
  }

  return swift_release(v9);
}

id sub_100049B9C()
{
  return sub_10004530C((uint64_t (*)(void))type metadata accessor for Bubble.Focus);
}

uint64_t type metadata accessor for Bubble.Focus(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtCC8FaceTime6Bubble5Focus, a2);
}

uint64_t getEnumTagSinglePayload for Bubble.Mode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  swift_bridgeObjectRelease(a1);
  return 0LL;
}

  v134(v71, v130, v132);
  uint64_t v85 = v71;
  uint64_t v86 = v66;
  swift_errorRetain(v67);
  sub_10006A704(v66, v68, v67);
  uint64_t v87 = v86;
  uint64_t v88 = swift_errorRetain(v67);
  uint64_t v89 = (os_log_s *)Logger.logObject.getter(v88);
  uint64_t v90 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v89, v90))
  {
    Swift::String v91 = swift_slowAlloc(22LL, -1LL);
    Swift::String v92 = swift_slowAlloc(64LL, -1LL);
    id v144 = v92;
    *(_DWORD *)Swift::String v91 = 136315394;
    Swift::String v93 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    id v94 = dispatch thunk of CustomStringConvertible.description.getter(v69, v93);
    Swift::String v96 = v95;
    Swift::String v146 = sub_1000850E4(v94, v95, &v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, aBlock, v91 + 4, v91 + 12);
    Swift::String v97 = swift_bridgeObjectRelease(v96);
    v131(v85, v69, v97);
    *(_WORD *)(v91 + 12) = 2080;
    Swift::String v146 = v67;
    swift_errorRetain(v67);
    Swift::String v98 = sub_100018A04((uint64_t *)&unk_100112920);
    uint64_t v99 = String.init<A>(describing:)(&v146, v98);
    unint64_t v101 = v100;
    Swift::String v146 = sub_1000850E4(v99, v100, &v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, aBlock, v91 + 14, v91 + 22);

    swift_bridgeObjectRelease(v101);
    swift_errorRelease(v67);

    swift_errorRelease(v67);
    _os_log_impl((void *)&_mh_execute_header, v89, v90, "Failed to update bulletin (%s): %s", (uint8_t *)v91, 0x16u);
    swift_arrayDestroy(v92, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v92, -1LL, -1LL);
    swift_slowDealloc(v91, -1LL, -1LL);

    swift_release(v133);
    swift_errorRelease(v67);
    swift_release(v143);
  }

  else
  {

    swift_errorRelease(v67);
    swift_release(v133);

    ((void (*)(char *, uint64_t))v131)(v85, v69);
    swift_errorRelease(v67);

    swift_errorRelease(v67);
    swift_release(v143);
  }

          __break(1u);
          return;
        }

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  if (v4 < 0) {
    objc_super v14 = v4;
  }
  else {
    objc_super v14 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v4);
  id v5 = _CocoaArrayWrapper.endIndex.getter(v14);
  if (!v5) {
    goto LABEL_10;
  }
LABEL_3:
  unsigned int v6 = 0LL;
  while (1)
  {
    if ((v4 & 0xC000000000000001LL) != 0)
    {
      BOOL v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
    }

    else
    {
      BOOL v7 = *(void *)(v4 + 8 * v6 + 32);
      *(void *)&int v8 = swift_retain(v7).n128_u64[0];
    }

    uint64_t v9 = objc_msgSend(*(id *)(v7 + OBJC_IVAR____TtC8FaceTime6Bubble_focus), "isFocused", v8);
    swift_release(v7);
    if ((v9 & 1) != 0) {
      break;
    }
    uint64_t v10 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_17;
    }

    ++v6;
    if (v10 == v5) {
      goto LABEL_10;
    }
  }

  swift_bridgeObjectRelease(v4);
  id v11 = *(void *)(a1 + 8);
  if (qword_100112438 != -1) {
    swift_once(&qword_100112438, sub_10009C958);
  }
  id v12 = floor((double)v6 / 9.0);
  uint64_t v13 = *(double *)&qword_10011A390 * 3.0;
  if (qword_100112428 != -1) {
    swift_once(&qword_100112428, sub_10009C938);
  }
  *(double *)a1 = v12 * (*(double *)&qword_10011A380 + v13 + *(double *)&qword_10011A380 + *(double *)&qword_10011A380);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v11;
}

      swift_unknownObjectRelease(v12);
      uint64_t v1 = v43;
      id v5 = v45;
      if (v9 == v45) {
        return;
      }
    }
  }

  CGFloat v26 = 0LL;
  Swift::String v42 = v1 + 32;
  Swift::String v44 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v26 != v44)
  {
    double v27 = v4[5];
    uint64_t v28 = *(id *)(v42 + 8 * v26);
    id v29 = NSObject._rawHashValue(seed:)(v27);
    id v30 = -1LL << *((_BYTE *)v4 + 32);
    Swift::String v31 = v29 & ~v30;
    id v32 = v31 >> 6;
    id v33 = *(void *)&v8[8 * (v31 >> 6)];
    id v34 = 1LL << v31;
    if (((1LL << v31) & v33) != 0)
    {
      sub_10001C5D0(0LL, &qword_1001164A8, &OBJC_CLASS___BSAction_ptr);
      id v35 = *(id *)(v4[6] + 8 * v31);
      id v36 = static NSObject.== infix(_:_:)(v35, v28);

      if ((v36 & 1) != 0)
      {
LABEL_30:

        goto LABEL_31;
      }

      id v37 = ~v30;
      while (1)
      {
        Swift::String v31 = (v31 + 1) & v37;
        id v32 = v31 >> 6;
        id v33 = *(void *)&v8[8 * (v31 >> 6)];
        id v34 = 1LL << v31;
        if ((v33 & (1LL << v31)) == 0) {
          break;
        }
        uint64_t v38 = *(id *)(v4[6] + 8 * v31);
        uint64_t v39 = static NSObject.== infix(_:_:)(v38, v28);

        if ((v39 & 1) != 0) {
          goto LABEL_30;
        }
      }
    }

    *(void *)&v8[8 * v32] = v34 | v33;
    *(void *)(v4[6] + 8 * v31) = v28;
    uint64_t v40 = v4[2];
    id v11 = __OFADD__(v40, 1LL);
    id v41 = v40 + 1;
    if (v11) {
      goto LABEL_44;
    }
    void v4[2] = v41;
LABEL_31:
    if (++v26 == v45) {
      return;
    }
  }

uint64_t storeEnumTagSinglePayload for Bubble.Mode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100049D40 + 4 * byte_1000C54DD[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100049D74 + 4 * byte_1000C54D8[v4]))();
}

uint64_t sub_100049D74(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049D7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100049D84LL);
  }
  return result;
}

uint64_t sub_100049D90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100049D98LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100049D9C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049DA4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049DB0(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100049DB8(_BYTE *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Bubble.Mode()
{
  return &type metadata for Bubble.Mode;
}

unint64_t sub_100049DD8()
{
  unint64_t result = qword_100113FB8;
  if (!qword_100113FB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000C5580, &type metadata for Bubble.Mode);
    atomic_store(result, (unint64_t *)&qword_100113FB8);
  }

  return result;
}

void *sub_100049E1C()
{
  return &protocol witness table for String;
}

uint64_t sub_100049E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  *(_BYTE *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  *(void *)(v6 + 24) = a1;
  *(void *)(v6 + 32) = a2;
  uint64_t v12 = v6 + OBJC_IVAR____TtC8FaceTime6Bubble_indexPath;
  uint64_t v13 = type metadata accessor for IndexPath(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, a6, v13);
  if (qword_100112260 != -1) {
    swift_once(&qword_100112260, sub_100045EE0);
  }
  double v17 = *(double *)&qword_10011A268;
  id v18 = objc_allocWithZone((Class)type metadata accessor for Bubble.Node(v15, v16));
  sub_1000481C8(v17, (uint64_t)v18, v19);
  *(void *)(v7 + OBJC_IVAR____TtC8FaceTime6Bubble_node) = v20;
  if (qword_100112250 != -1) {
    swift_once(&qword_100112250, sub_100045EBC);
  }
  double v22 = (char *)objc_msgSend( objc_allocWithZone((Class)type metadata accessor for Bubble.Focus(v20, v21)),  "initWithFrame:",  0.0,  0.0,  *(double *)&qword_10011A258,  *(double *)&qword_10011A258);
  *(void *)(v7 + OBJC_IVAR____TtC8FaceTime6Bubble_focus) = v22;
  uint64_t v23 = OBJC_IVAR____TtC8FaceTime6Bubble_focus;
  uint64_t v24 = &v22[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_name];
  uint64_t v25 = *(void *)&v22[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_name + 8];
  *(void *)uint64_t v24 = a3;
  *((void *)v24 + 1) = a4;
  CGFloat v26 = v22;
  swift_bridgeObjectRelease(v25);
  sub_10004851C();

  uint64_t v27 = *(void *)(v7 + v23);
  [*(id *)(v27 + OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_avatarImageView) setImage:a5];
  swift_weakAssign(v27 + OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_parent, v7);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a6, v13);
  return v7;
}

void sub_100049FE0(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  id v9 = objc_msgSend( objc_allocWithZone(UISpringTimingParameters),  "initWithMass:stiffness:damping:initialVelocity:",  a3,  a4,  a5,  0.0,  0.0);
  id v10 = [objc_allocWithZone(UIViewPropertyAnimator) initWithDuration:v9 timingParameters:1.0];
  v13[4] = a1;
  uint64_t v14 = a2;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256LL;
  v13[2] = sub_100027654;
  void v13[3] = &unk_1000F8C60;
  id v11 = _Block_copy(v13);
  uint64_t v12 = v14;
  swift_retain(a2);
  swift_release(v12);
  [v10 addAnimations:v11];
  _Block_release(v11);
  [v10 startAnimationAfterDelay:a6];
}

uint64_t sub_10004A114(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004A124(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10004A12C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

id sub_10004A150()
{
  return sub_100047138(*(void *)(v0 + 16), *(double *)(v0 + 24));
}

void sub_10004A15C()
{
  __int16 v1 = &v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_name];
  *__int16 v1 = 0LL;
  v1[1] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_scale] = 0x3FF0000000000000LL;
  v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_shadowOn] = 0;
  uint64_t v2 = OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_plusBackground;
  id v3 = [objc_allocWithZone(UIView) init];
  *(void *)&v0[v2] = v3;
  uint64_t v4 = OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_deleteImage;
  sub_1000488C0((uint64_t)v3, v5);
  *(void *)&v0[v4] = v6;
  uint64_t v7 = OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_contentView;
  *(void *)&v0[v7] = [objc_allocWithZone(UIView) init];
  uint64_t v8 = OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_avatarImageView;
  *(void *)&v0[v8] = sub_100048AA8();
  uint64_t v9 = OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_nameLabel;
  *(void *)&v0[v9] = sub_100048BE0();
  uint64_t v10 = OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_plusLabel;
  *(void *)&v0[v10] = sub_100048DF4();
  swift_weakInit(&v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_parent], 0LL);
  *(void *)&v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_labelOffset] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_labelWidth] = 0x4067400000000000LL;
  *(void *)&v0[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_plusNumber] = 2LL;

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001CLL,  0x80000001000DA760LL,  "FaceTime/Bubble.swift",  21LL,  2LL,  567LL,  0);
  __break(1u);
}

id sub_10004A2B0()
{
  return sub_100047EA8(v0);
}

uint64_t sub_10004A2B8()
{
  if (v0[3]) {
    swift_release(v0[4]);
  }
  return swift_deallocObject(v0, 40LL, 7LL);
}

id sub_10004A2EC()
{
  uint64_t v2 = *(void *)(v0 + 16);
  __int16 v1 = *(uint64_t (**)(id))(v0 + 24);
  [*(id *)(v2 + OBJC_IVAR____TtC8FaceTime6Bubble_focus) removeFromSuperview];
  id result = [*(id *)(v2 + OBJC_IVAR____TtC8FaceTime6Bubble_node) removeFromParent];
  if (v1) {
    return (id)v1(result);
  }
  return result;
}

unint64_t sub_10004A34C(uint64_t a1, uint64_t a2)
{
  unint64_t result = qword_100113FC0;
  if (!qword_100113FC0)
  {
    uint64_t v3 = objc_opt_self(&OBJC_CLASS___SKAction, a2);
    unint64_t result = swift_getObjCClassMetadata(v3);
    atomic_store(result, (unint64_t *)&qword_100113FC0);
  }

  return result;
}

id sub_10004A388()
{
  return sub_100047C10(*(void *)(v0 + 16), *(double *)(v0 + 24));
}

id sub_10004A394()
{
  return sub_1000478AC(*(void *)(v0 + 16), *(double *)(v0 + 24));
}

void sub_10004A3A0()
{
}

uint64_t sub_10004A3B0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10004A3DC(uint64_t a1)
{
  return sub_100047034(*(double *)(v1 + 32), a1, *(void *)(v1 + 16));
}

id sub_10004A3E8()
{
  return sub_10004A428();
}

uint64_t sub_10004A3F0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10004A414(uint64_t a1)
{
  return sub_100046B50(*(double *)(v1 + 32), a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

id sub_10004A420()
{
  return sub_10004A428();
}

id sub_10004A428()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC8FaceTime6Bubble_focus);
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_plusBackground), "setAlpha:");
  *(void *)(v2 + OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_scale) = v1;
  return sub_100048638();
}

uint64_t sub_10004A484(uint64_t a1)
{
  return sub_10004677C(*(double *)(v1 + 24), a1, *(void *)(v1 + 16));
}

id sub_10004A490()
{
  *(void *)(*(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC8FaceTime6Bubble_focus)
            + OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_scale) = *(void *)(v0 + 24);
  return sub_100048638();
}

id sub_10004A4CC()
{
  uint64_t v1 = *(char **)(v0 + OBJC_IVAR____TtC8FaceTime6Bubble_focus);
  v3[0] = 0x3FF0000000000000LL;
  v3[1] = 0LL;
  v3[2] = 0LL;
  v3[3] = 0x3FF0000000000000LL;
  v3[4] = 0LL;
  v3[5] = 0LL;
  [v1 setTransform:v3];
  return [*(id *)&v1[OBJC_IVAR____TtCC8FaceTime6Bubble5Focus_nameLabel] setAlpha:1.0];
}

uint64_t sub_10004A5E4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10 = a3;
  swift_retain(a1);
  sub_10004A76C(v10, a1, a4, a5, a6);

  return swift_release(a1);
}

uint64_t sub_10004A6B8(uint64_t a1, uint64_t a2, void *a3, void (*a4)(id, uint64_t))
{
  id v6 = a3;
  swift_retain(a1);
  a4(v6, a1);

  return swift_release(a1);
}

uint64_t sub_10004A728(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t))
{
  id v6 = a3;
  uint64_t v7 = swift_retain(a1);
  a4(v7);

  return swift_release(a1);
}

uint64_t sub_10004A76C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v26 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v13 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void **)(a2 + 64);
  double v17 = (void *)swift_allocObject(a3, 40LL, 7LL);
  v17[2] = a2;
  v17[3] = a1;
  v17[4] = &off_1000F7C08;
  aBlock[4] = a4;
  id v29 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  void aBlock[3] = a5;
  id v18 = _Block_copy(aBlock);
  id v19 = v16;
  swift_retain(a2);
  static DispatchQoS.unspecified.getter(a1);
  uint64_t v27 = _swiftEmptyArrayStorage;
  unint64_t v20 = sub_10004AD10();
  uint64_t v21 = sub_100018A04((uint64_t *)&unk_100112FD0);
  unint64_t v22 = sub_10001C2E8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v10, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v12, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v25);
  return swift_release(v29);
}

uint64_t sub_10004A940(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void **)(a2 + 64);
  uint64_t v13 = (void *)swift_allocObject(&unk_1000F9100, 40LL, 7LL);
  v13[2] = a2;
  void v13[3] = a1;
  v13[4] = &off_1000FC428;
  aBlock[4] = sub_10004AD5C;
  uint64_t v23 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  void aBlock[3] = &unk_1000F9118;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v12;
  swift_retain(a2);
  static DispatchQoS.unspecified.getter(a1);
  uint64_t v21 = _swiftEmptyArrayStorage;
  unint64_t v16 = sub_10004AD10();
  uint64_t v17 = sub_100018A04((uint64_t *)&unk_100112FD0);
  unint64_t v18 = sub_10001C2E8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v4, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v7, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release(v23);
}

uint64_t sub_10004AB14(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void **)(a2 + 64);
  uint64_t v13 = (void *)swift_allocObject(&unk_1000F90B0, 40LL, 7LL);
  v13[2] = a2;
  void v13[3] = a1;
  v13[4] = &off_1000F8620;
  aBlock[4] = sub_10004ACEC;
  uint64_t v23 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  void aBlock[3] = &unk_1000F90C8;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v12;
  swift_retain(a2);
  static DispatchQoS.unspecified.getter(a1);
  uint64_t v21 = _swiftEmptyArrayStorage;
  unint64_t v16 = sub_10004AD10();
  uint64_t v17 = sub_100018A04((uint64_t *)&unk_100112FD0);
  unint64_t v18 = sub_10001C2E8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v4, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v7, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release(v23);
}

uint64_t sub_10004ACEC()
{
  return sub_1000A71D8(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10004ACF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004AD08(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_10004AD10()
{
  unint64_t result = qword_100112930;
  if (!qword_100112930)
  {
    uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_100112930);
  }

  return result;
}

uint64_t sub_10004AD5C()
{
  return sub_1000A715C(v0[2], v0[3], v0[4]);
}

void sub_10004AD6C()
{
}

uint64_t sub_10004AD7C()
{
  return sub_1000A7050(v0[2], v0[3], v0[4]);
}

void sub_10004AD8C()
{
}

uint64_t sub_10004AD9C()
{
  return sub_1000A6FA4(v0[2], v0[3], v0[4]);
}

uint64_t sub_10004ADAC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10004ADD8()
{
  return sub_1000A670C(v0[2], v0[3], v0[4]);
}

uint64_t sub_10004AE14(uint64_t a1)
{
  uint64_t result = swift_weakLoadStrong(v1 + 16);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void (**)(uint64_t, __n128))(result + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(result + 32);
      __n128 v7 = swift_retain(v6);
      v5(a1, v7);
      sub_10001C08C((uint64_t)v5, v6);
    }

    return swift_release(v4);
  }

  return result;
}

uint64_t sub_10004AEC0()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

void sub_10004AEE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for TimeRenderer.LinkTarget(a1, a2);
  v2[2] = 0LL;
  uint64_t v4 = (id *)(v2 + 2);
  v2[3] = 0LL;
  v2[4] = 0LL;
  uint64_t v5 = swift_allocObject(v3, 24LL, 7LL);
  uint64_t v6 = swift_weakInit(v5 + 16, 0LL);
  swift_weakAssign(v6, v2);
  id v8 =  objc_msgSend( (id)objc_opt_self(CADisplayLink, v7),  "displayLinkWithTarget:selector:",  v5,  "renderWithDisplayLink:");
  uint64_t v9 = (void *)v2[2];
  v2[2] = v8;

  uint64_t v11 = (void *)v2[2];
  if (!v11)
  {
    __break(1u);
    goto LABEL_6;
  }

  uint64_t v12 = (void *)objc_opt_self(&OBJC_CLASS___NSRunLoop, v10);
  id v13 = v11;
  id v14 = [v12 mainRunLoop];
  [v13 addToRunLoop:v14 forMode:NSRunLoopCommonModes];

  if (!*v4)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  [*v4 setPaused:1];
  if (*v4)
  {
    [*v4 setPreferredFramesPerSecond:30];
    swift_release(v5);
    return;
  }

void *sub_10004B028()
{
  uint64_t result = *(void **)(v0 + 16);
  if (result)
  {
    [result invalidate];

    sub_10001C08C(*(void *)(v0 + 24), *(void *)(v0 + 32));
    return (void *)swift_deallocClassInstance(v0, 40LL, 7LL);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t type metadata accessor for TimeRenderer(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime12TimeRenderer, a2);
}

uint64_t type metadata accessor for TimeRenderer.LinkTarget(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtCC8FaceTime12TimeRenderer10LinkTarget, a2);
}

char *sub_10004B0AC(uint64_t a1, uint64_t a2)
{
  id v2 = objc_msgSend((id)objc_opt_self(TUCallCenter, a2), "sharedInstance");
  id v3 = [v2 neighborhoodActivityConduit];

  id v4 = [objc_allocWithZone(TUFeatureFlags) init];
  uint64_t result = (char *)objc_msgSend((id)objc_opt_self(FTNetworkSupport, v5), "sharedInstance");
  if (result)
  {
    id v8 = result;
    id v9 = objc_allocWithZone((Class)type metadata accessor for ContinuitySessionManager((uint64_t)result, v7));
    uint64_t result = sub_10004B204(v3, v4, v8);
    qword_10011A2B0 = (uint64_t)result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

char *sub_10004B178(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OBJC_IVAR____TtC8FaceTime24ContinuitySessionManager____lazy_storage___recentCallsProvider;
  id v4 = *(void **)&v2[OBJC_IVAR____TtC8FaceTime24ContinuitySessionManager____lazy_storage___recentCallsProvider];
  if (v4)
  {
    uint64_t v5 = *(char **)&v2[OBJC_IVAR____TtC8FaceTime24ContinuitySessionManager____lazy_storage___recentCallsProvider];
  }

  else
  {
    uint64_t v6 = *(void **)&v2[OBJC_IVAR____TtC8FaceTime24ContinuitySessionManager_neighborhoodActivityConduit];
    uint64_t v7 = (char *)objc_allocWithZone((Class)_s19RecentCallsProviderCMa(0LL, a2));
    id v8 = sub_10004BB54(v2, v6, v7);
    id v9 = *(void **)&v2[v3];
    *(void *)&v2[v3] = v8;
    uint64_t v5 = v8;

    id v4 = 0LL;
  }

  id v10 = v4;
  return v5;
}

char *sub_10004B204(void *a1, void *a2, void *a3)
{
  id v4 = v3;
  id v41 = a2;
  Swift::String v42 = a3;
  uint64_t v40 = a1;
  uint64_t v39 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v5 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v8);
  id v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v11);
  id v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&v4[OBJC_IVAR____TtC8FaceTime24ContinuitySessionManager____lazy_storage___recentCallsProvider] = 0LL;
  uint64_t v38 = OBJC_IVAR____TtC8FaceTime24ContinuitySessionManager_continuitySessionQueue;
  v37[1] = sub_100039D4C(0LL, v14);
  id v15 = v4;
  static DispatchQoS.unspecified.getter(v15);
  Swift::String v44 = _swiftEmptyArrayStorage;
  unint64_t v16 = sub_10004BB0C();
  uint64_t v17 = sub_100018A04((uint64_t *)&unk_100112DC0);
  uint64_t v18 = sub_100022750( (unint64_t *)&qword_100113140,  (uint64_t *)&unk_100112DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v44, v17, v18, v8, v16);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v39);
  uint64_t v19 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000042LL,  0x80000001000DA900LL,  v13,  v10,  v7,  0LL);
  *(void *)&v4[v38] = v19;
  uint64_t v20 = v40;
  uint64_t v21 = v41;
  *(void *)&v15[OBJC_IVAR____TtC8FaceTime24ContinuitySessionManager_neighborhoodActivityConduit] = v40;
  *(void *)&v15[OBJC_IVAR____TtC8FaceTime24ContinuitySessionManager_featureFlags] = v21;
  unint64_t v22 = v42;
  *(void *)&v15[OBJC_IVAR____TtC8FaceTime24ContinuitySessionManager_networkSupport] = v42;
  id v23 = v20;
  id v24 = v21;
  id v25 = v22;
  uint64_t v26 = [v23 currentContinuitySession];
  Swift::String v44 = v26;
  uint64_t v27 = sub_100018A04(&qword_100114D00);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  uint64_t v28 = v26;
  *(void *)&v15[OBJC_IVAR____TtC8FaceTime24ContinuitySessionManager_activeContinuitySessionSubject] = CurrentValueSubject.init(_:)(&v44);

  Swift::String v31 = (objc_class *)type metadata accessor for ContinuitySessionManager(v29, v30);
  v43.receiver = v15;
  v43.super_class = v31;
  id v32 = (char *)objc_msgSendSuper2(&v43, "init");
  id v33 = *(void **)&v32[OBJC_IVAR____TtC8FaceTime24ContinuitySessionManager_continuitySessionQueue];
  id v34 = v32;
  id v35 = v33;
  [v23 addDelegate:v34 queue:v35];

  return v34;
}

uint64_t sub_10004B4E4(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  return swift_task_switch(sub_10004B500, 0LL, 0LL);
}

uint64_t sub_10004B500()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = *(void **)(v0[18] + OBJC_IVAR____TtC8FaceTime24ContinuitySessionManager_neighborhoodActivityConduit);
  NSString v3 = String._bridgeToObjectiveC()();
  v0[19] = v3;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_10004B5BC;
  uint64_t v4 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v5 = v0 + 10;
  v5[1] = 0x40000000LL;
  void v5[2] = sub_10004B698;
  v5[3] = &unk_1000F9320;
  v5[4] = v4;
  [v2 startContinuitySessionWithDevice:v3 completion:v5];
  return swift_continuation_await(v1);
}

uint64_t sub_10004B5BC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 16[v0 setClipsToBounds:0] = v1;
  if (v1) {
    uint64_t v2 = sub_10004B658;
  }
  else {
    uint64_t v2 = sub_10004B61C;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10004B61C()
{
  uint64_t v1 = *(void *)(v0 + 120);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10004B658()
{
  uint64_t v1 = *(void **)(v0 + 152);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004B698(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3)
  {
    uint64_t v5 = sub_100018A04(&qword_1001141F0);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else if (a2)
  {
    **(void **)(*(void *)(v3 + 64) + 4[v0 setClipsToBounds:0] = a2;
    id v9 = a2;
    return swift_continuation_throwingResume(v3);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10004B724()
{
  *(void *)(v1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v0;
  return swift_task_switch(sub_10004B73C, 0LL, 0LL);
}

uint64_t sub_10004B73C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 120)
                 + OBJC_IVAR____TtC8FaceTime24ContinuitySessionManager_activeContinuitySessionSubject);
  swift_retain(v1);
  CurrentValueSubject.value.getter(v2);
  swift_release(v1);
  uint64_t v3 = *(void **)(v0 + 80);
  if (!v3) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  id v4 = [*(id *)(v0 + 80) device];

  id v5 = [v4 identifierWithType:0];
  if (!v5) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  uint64_t v6 = *(void *)(v0 + 120);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  id v9 = *(void **)(v6 + OBJC_IVAR____TtC8FaceTime24ContinuitySessionManager_neighborhoodActivityConduit);
  NSString v10 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 12_Block_object_dispose(va, 8) = v10;
  swift_bridgeObjectRelease(v8);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_10004B8B4;
  *(void *)(v0 + 112) = swift_continuation_init(v0 + 16, 1LL);
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = _NSConcreteStackBlock;
  *(void *)(v0 + 8_Block_object_dispose(va, 8) = 0x40000000LL;
  *(void *)(v0 + 96) = sub_1000798E4;
  *(void *)(v0 + 104) = &unk_1000F9308;
  [v9 cancelFaceTimeHandoffWithDevice:v10 completion:v0 + 80];
  return swift_continuation_await(v0 + 16);
}

uint64_t sub_10004B8B4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 136LL) = v1;
  if (v1) {
    uint64_t v2 = sub_10004B948;
  }
  else {
    uint64_t v2 = sub_10004B914;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10004B914()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004B948()
{
  uint64_t v1 = *(void **)(v0 + 128);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10004B9B4(uint64_t a1, uint64_t a2)
{
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for ContinuitySessionManager(a1, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for ContinuitySessionManager(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime24ContinuitySessionManager, a2);
}

unint64_t sub_10004BB0C()
{
  unint64_t result = qword_100113130;
  if (!qword_100113130)
  {
    uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_100113130);
  }

  return result;
}

char *sub_10004BB54(char *a1, void *a2, char *a3)
{
  uint64_t v46 = a1;
  id v47 = a2;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v7);
  id v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::String v42 = a3;
  id v13 = &a3[OBJC_IVAR____TtCC8FaceTime24ContinuitySessionManager19RecentCallsProvider_continuitySessionManager];
  *((void *)v13 + 1) = 0LL;
  swift_unknownObjectWeakInit(v13, 0LL);
  uint64_t v43 = OBJC_IVAR____TtCC8FaceTime24ContinuitySessionManager19RecentCallsProvider_recentsQueue;
  unint64_t v41 = sub_100039D4C(0LL, v14);
  id v15 = a3;
  static DispatchQoS.unspecified.getter(v15);
  v48[0] = _swiftEmptyArrayStorage;
  unint64_t v16 = sub_10004BB0C();
  uint64_t v17 = sub_100018A04((uint64_t *)&unk_100112DC0);
  uint64_t v18 = sub_100022750( (unint64_t *)&qword_100113140,  (uint64_t *)&unk_100112DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v48, v17, v18, v7, v16);
  (*(void (**)(char *, void, uint64_t))(v44 + 104))( v6,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v45);
  uint64_t v19 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000033LL,  0x80000001000DA9A0LL,  v12,  v9,  v6,  0LL);
  *(void *)&v42[v43] = v19;
  *(void *)&v15[OBJC_IVAR____TtCC8FaceTime24ContinuitySessionManager19RecentCallsProvider_cancellables] = _swiftEmptyArrayStorage;
  *(void *)&v15[OBJC_IVAR____TtCC8FaceTime24ContinuitySessionManager19RecentCallsProvider_queue_recentCallItems] = _swiftEmptyArrayStorage;
  uint64_t v20 = OBJC_IVAR____TtCC8FaceTime24ContinuitySessionManager19RecentCallsProvider_queue_contacts;
  *(void *)&v15[v20] = sub_10002DC7C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v21 = OBJC_IVAR____TtCC8FaceTime24ContinuitySessionManager19RecentCallsProvider_featureFlags;
  *(void *)&v15[v21] = [objc_allocWithZone(TUFeatureFlags) init];
  unint64_t v22 = &v15[OBJC_IVAR____TtCC8FaceTime24ContinuitySessionManager19RecentCallsProvider_delegate];
  *(_OWORD *)unint64_t v22 = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  *((_OWORD *)v22 + 2) = 0u;
  id v23 = &v15[OBJC_IVAR____TtCC8FaceTime24ContinuitySessionManager19RecentCallsProvider_presentScreenTimeShield];
  *(void *)id v23 = 0LL;
  *((void *)v23 + 1) = 0LL;
  *((void *)v13 + 1) = &off_1000F92D0;
  id v24 = v46;
  swift_unknownObjectWeakAssign(v13, v46);
  id v25 = v47;
  *(void *)&v15[OBJC_IVAR____TtCC8FaceTime24ContinuitySessionManager19RecentCallsProvider_neighborhoodActivityConduit] = v47;
  id v26 = v25;

  uint64_t v28 = (objc_class *)_s19RecentCallsProviderCMa(0LL, v27);
  v49.receiver = v15;
  v49.super_class = v28;
  id v29 = objc_msgSendSuper2(&v49, "init");
  Swift::String v31 = v24;
  v48[0] = *(void *)&v24[OBJC_IVAR____TtC8FaceTime24ContinuitySessionManager_activeContinuitySessionSubject];
  uint64_t v30 = v48[0];
  uint64_t v32 = swift_allocObject(&unk_1000F9348, 24LL, 7LL);
  *(void *)(v32 + swift_weakDestroy(v0 + 16) = v29;
  id v33 = (char *)v29;
  swift_retain(v30);
  uint64_t v34 = sub_100018A04(&qword_100114D00);
  uint64_t v35 = sub_100022750( &qword_1001141F8,  &qword_100114D00,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  uint64_t v36 = Publisher<>.sink(receiveValue:)(sub_10004BF48, v32, v34, v35);
  swift_release(v32);
  swift_release(v48[0]);
  id v37 = &v33[OBJC_IVAR____TtCC8FaceTime24ContinuitySessionManager19RecentCallsProvider_cancellables];
  swift_beginAccess( &v33[OBJC_IVAR____TtCC8FaceTime24ContinuitySessionManager19RecentCallsProvider_cancellables],  v48,  33LL,  0LL);
  uint64_t v38 = sub_100018A04(&qword_100114200);
  uint64_t v39 = sub_100022750(&qword_1001130D0, &qword_100114200, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v37, v38, v39);
  swift_endAccess(v48);
  swift_release(v36);

  return v33;
}

uint64_t sub_10004BF24()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10004BF48(void **a1)
{
  return sub_1000A8238(a1);
}

char *sub_10004BF50(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = OBJC_IVAR____TtC8FaceTime34CreateCallCollectionViewHeaderView_label;
  id v10 = objc_allocWithZone(&OBJC_CLASS___UILabel);
  uint64_t v11 = v4;
  id v12 = [v10 init];
  id v14 =  objc_msgSend( (id)objc_opt_self(UIFont, v13),  "_preferredFontForTextStyle:addingSymbolicTraits:",  UIFontTextStyleSubheadline,  2);
  [v12 setFont:v14];

  id v16 = objc_msgSend((id)objc_opt_self(UIColor, v15), "secondaryLabelColor");
  [v12 setTextColor:v16];

  *(void *)&v4[v9] = v12;
  v43.receiver = v11;
  v43.super_class = (Class)type metadata accessor for CreateCallCollectionViewHeaderView(v17, v18);
  uint64_t v19 = (char *)objc_msgSendSuper2(&v43, "initWithFrame:", a1, a2, a3, a4);
  uint64_t v20 = OBJC_IVAR____TtC8FaceTime34CreateCallCollectionViewHeaderView_label;
  uint64_t v21 = *(void **)&v19[OBJC_IVAR____TtC8FaceTime34CreateCallCollectionViewHeaderView_label];
  unint64_t v22 = v19;
  [v22 addSubview:v21];
  [v21 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v24 = (void *)objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, v23);
  uint64_t v25 = sub_100018A04(&qword_1001142B0);
  uint64_t v26 = swift_allocObject(v25, 64LL, 7LL);
  *(_OWORD *)(v26 + swift_weakDestroy(v0 + 16) = xmmword_1000C4CE0;
  id v27 = [v21 leadingAnchor];
  id v28 = [v22 leadingAnchor];
  id v29 = [v27 constraintEqualToAnchor:v28 constant:70.0];

  *(void *)(v26 + 32) = v29;
  id v30 = [*(id *)&v19[v20] topAnchor];
  id v31 = [v22 topAnchor];
  id v32 = [v30 constraintEqualToAnchor:v31];

  *(void *)(v26 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v32;
  id v33 = [*(id *)&v19[v20] trailingAnchor];
  id v34 = [v22 trailingAnchor];
  id v35 = [v33 constraintEqualToAnchor:v34];

  *(void *)(v26 + 4_Block_object_dispose(va, 8) = v35;
  id v36 = [*(id *)&v19[v20] bottomAnchor];
  id v37 = [v22 bottomAnchor];
  id v38 = [v36 constraintEqualToAnchor:v37];

  *(void *)(v26 + 56) = v38;
  specialized Array._endMutation()(v39);
  sub_100042F4C(0LL, v40);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v24, "activateConstraints:", isa, swift_bridgeObjectRelease(v26).n128_f64[0]);

  return v22;
}

id sub_10004C324(uint64_t a1, uint64_t a2)
{
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for CreateCallCollectionViewHeaderView(a1, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for CreateCallCollectionViewHeaderView(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime34CreateCallCollectionViewHeaderView, a2);
}

void sub_10004C384()
{
  uint64_t v1 = OBJC_IVAR____TtC8FaceTime34CreateCallCollectionViewHeaderView_label;
  id v2 = [objc_allocWithZone(UILabel) init];
  id v4 =  objc_msgSend( (id)objc_opt_self(UIFont, v3),  "_preferredFontForTextStyle:addingSymbolicTraits:",  UIFontTextStyleSubheadline,  2);
  [v2 setFont:v4];

  id v6 = objc_msgSend((id)objc_opt_self(UIColor, v5), "secondaryLabelColor");
  [v2 setTextColor:v6];

  *(void *)&v0[v1] = v2;
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/CreateCallCollectionViewHeaderView.swift",  49LL,  2LL,  34LL,  0);
  __break(1u);
}

void sub_10004C498(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    if (a3 < 0) {
      uint64_t v7 = a3;
    }
    else {
      uint64_t v7 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v8 = __CocoaSet.makeIterator()(v7);
    uint64_t v9 = sub_10001C5D0(0LL, &qword_1001142C8, &OBJC_CLASS___TUConversation_ptr);
    unint64_t v10 = sub_10004F328();
    uint64_t v11 = Set.Iterator.init(_cocoa:)(v33, v8, v9, v10);
    uint64_t v5 = v33[0];
    uint64_t v31 = v33[1];
    uint64_t v12 = v33[2];
    int64_t v13 = v33[3];
    unint64_t v14 = v33[4];
  }

  else
  {
    uint64_t v15 = -1LL << *(_BYTE *)(a3 + 32);
    uint64_t v31 = a3 + 56;
    uint64_t v16 = ~v15;
    uint64_t v17 = -v15;
    if (v17 < 64) {
      uint64_t v18 = ~(-1LL << v17);
    }
    else {
      uint64_t v18 = -1LL;
    }
    unint64_t v14 = v18 & *(void *)(a3 + 56);
    uint64_t v11 = (void *)swift_bridgeObjectRetain(a3);
    uint64_t v12 = v16;
    int64_t v13 = 0LL;
  }

  int64_t v30 = (unint64_t)(v12 + 64) >> 6;
  if ((v5 & 0x8000000000000000LL) == 0) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v19 = __CocoaSet.Iterator.next()(v11);
  if (!v19) {
    goto LABEL_39;
  }
  uint64_t v20 = v19;
  uint64_t v32 = v19;
  uint64_t v21 = sub_10001C5D0(0LL, &qword_1001142C8, &OBJC_CLASS___TUConversation_ptr);
  swift_unknownObjectRetain(v20);
  swift_dynamicCast(&v34, &v32, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
  id v22 = v34;
  swift_unknownObjectRelease(v20);
  int64_t v23 = v13;
  uint64_t v24 = v14;
  if (!v22) {
    goto LABEL_39;
  }
  while (1)
  {
    id v34 = v22;
    char v28 = a1(&v34);
    if (v4)
    {

      goto LABEL_39;
    }

    if ((v28 & 1) != 0) {
      goto LABEL_39;
    }

    int64_t v13 = v23;
    unint64_t v14 = v24;
    if (v5 < 0) {
      goto LABEL_11;
    }
LABEL_14:
    if (!v14) {
      break;
    }
    uint64_t v24 = (v14 - 1) & v14;
    unint64_t v25 = __clz(__rbit64(v14)) | (v13 << 6);
    int64_t v23 = v13;
LABEL_27:
    id v22 = *(id *)(*(void *)(v5 + 48) + 8 * v25);
    if (!v22) {
      goto LABEL_39;
    }
  }

  int64_t v23 = v13 + 1;
  if (__OFADD__(v13, 1LL))
  {
    __break(1u);
    return;
  }

  if (v23 >= v30) {
    goto LABEL_39;
  }
  unint64_t v26 = *(void *)(v31 + 8 * v23);
  if (v26)
  {
LABEL_26:
    uint64_t v24 = (v26 - 1) & v26;
    unint64_t v25 = __clz(__rbit64(v26)) + (v23 << 6);
    goto LABEL_27;
  }

  int64_t v27 = v13 + 2;
  if (v13 + 2 >= v30) {
    goto LABEL_39;
  }
  unint64_t v26 = *(void *)(v31 + 8 * v27);
  if (v26) {
    goto LABEL_25;
  }
  int64_t v27 = v13 + 3;
  if (v13 + 3 >= v30) {
    goto LABEL_39;
  }
  unint64_t v26 = *(void *)(v31 + 8 * v27);
  if (v26) {
    goto LABEL_25;
  }
  int64_t v27 = v13 + 4;
  if (v13 + 4 >= v30) {
    goto LABEL_39;
  }
  unint64_t v26 = *(void *)(v31 + 8 * v27);
  if (v26)
  {
LABEL_25:
    int64_t v23 = v27;
    goto LABEL_26;
  }

  int64_t v23 = v13 + 5;
  if (v13 + 5 >= v30) {
    goto LABEL_39;
  }
  unint64_t v26 = *(void *)(v31 + 8 * v23);
  if (v26) {
    goto LABEL_26;
  }
  int64_t v29 = v13 + 6;
  while (v30 != v29)
  {
    unint64_t v26 = *(void *)(v31 + 8 * v29++);
    if (v26)
    {
      int64_t v23 = v29 - 1;
      goto LABEL_26;
    }
  }

uint64_t sub_10004C7B0()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_100114240);
  sub_10001C270(v0, (uint64_t)qword_100114240);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0xD000000000000015LL,  0x80000001000C56C0LL);
}

void sub_10004C82C(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

uint64_t sub_10004C8C4()
{
  *(void *)(v6 - 96) = 0LL;
  *(void *)(v6 - 8_Block_object_dispose(va, 8) = 0xE000000000000000LL;
  id v7 = v3;
  _StringGuts.grow(_:)(37LL);
  *(void *)&double v8 = swift_bridgeObjectRelease(*(void *)(v6 - 88)).n128_u64[0];
  *(void *)(v6 - 96) = v4 + 4;
  *(void *)(v6 - 8_Block_object_dispose(va, 8) = 0x80000001000DAB10LL;
  id v9 = objc_msgSend(v7, "UUID", v8);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v9);

  uint64_t v10 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v10);
  object = v11._object;
  String.append(_:)(v11);
  __n128 v13 = swift_bridgeObjectRelease(object);
  (*(void (**)(uint64_t, uint64_t, __n128))(v5 + 8))(v1, v0, v13);
  v14._uint64_t countAndFlagsBits = 41LL;
  v14._object = (void *)0xE100000000000000LL;
  String.append(_:)(v14);
  sub_10002C9C8(v3, v2, 1);
  return *(void *)(v6 - 96);
}

void sub_10004CB18(uint64_t a1)
{
}

void sub_10004CB34()
{
}

char *sub_10004CB40(uint64_t a1, uint64_t a2)
{
  id v2 = (void *)objc_opt_self(&OBJC_CLASS___TUCallCenter, a2);
  id v3 = [v2 sharedInstance];
  id v4 = [v3 conversationManager];

  id v5 = [v2 sharedInstance];
  id v6 = [v5 neighborhoodActivityConduit];

  id v9 = objc_allocWithZone((Class)type metadata accessor for SharePlayStateManager(v7, v8));
  unint64_t result = sub_10004CBFC(v4, v6);
  qword_10011A2B8 = (uint64_t)result;
  return result;
}

char *sub_10004CBFC(void *a1, void *a2)
{
  id v43 = a2;
  uint64_t v44 = a1;
  id v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v2);
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v49 = v4;
  uint64_t v50 = v5;
  __chkstk_darwin(v4);
  id v47 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v11);
  __n128 v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v46 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v15 = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_queue;
  v41[1] = sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v16 = v3;
  static DispatchQoS.unspecified.getter(v16);
  aBlock = (void **)_swiftEmptyArrayStorage;
  uint64_t v17 = sub_10001949C( (unint64_t *)&qword_100113130,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v18 = sub_100018A04((uint64_t *)&unk_100112DC0);
  uint64_t v19 = sub_10004F2A8((unint64_t *)&qword_100113140, (uint64_t *)&unk_100112DC0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v18, v19, v11, v17);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))( v10,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v7);
  uint64_t v20 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002ALL,  0x80000001000DAB80LL,  v15,  v13,  v10,  0LL);
  *(void *)(v41[2] + v42) = v20;
  *(void *)&v16[OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_assertion] = 0LL;
  uint64_t v21 = OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_sharePlayState;
  aBlock = 0LL;
  uint64_t v53 = 0LL;
  LOBYTE(v54) = 3;
  uint64_t v22 = sub_100018A04((uint64_t *)&unk_100113490);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  *(void *)&v16[v21] = CurrentValueSubject.init(_:)(&aBlock);
  id v23 = v43;
  uint64_t v24 = v44;
  *(void *)&v16[OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_neighborhoodActivityConduit] = v43;
  *(void *)&v16[OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_conversationManager] = v24;
  id v43 = v23;
  id v25 = v24;

  v58.receiver = v16;
  v58.super_class = ObjectType;
  unint64_t v26 = (char *)objc_msgSendSuper2(&v58, "init");
  int64_t v27 = *(void **)&v26[OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_neighborhoodActivityConduit];
  uint64_t v28 = *(void *)&v26[OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_queue];
  int64_t v29 = v26;
  [v27 addDelegate:v29 queue:v28];
  int64_t v30 = *(void **)&v29[OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_conversationManager];
  [v30 addDelegate:v29 queue:v28];
  [v30 registerWithCompletionHandler:0];
  uint64_t v31 = swift_allocObject(&unk_1000F9418, 24LL, 7LL);
  *(void *)(v31 + swift_weakDestroy(v0 + 16) = v29;
  uint64_t v56 = sub_10004F270;
  uint64_t v57 = v31;
  aBlock = _NSConcreteStackBlock;
  uint64_t v53 = 1107296256LL;
  uint64_t v54 = sub_100027654;
  uint64_t v55 = &unk_1000F9430;
  uint64_t v32 = _Block_copy(&aBlock);
  id v33 = v29;
  id v34 = v15;
  static DispatchQoS.unspecified.getter(v33);
  uint64_t v51 = _swiftEmptyArrayStorage;
  uint64_t v35 = sub_10001949C( (unint64_t *)&qword_100112930,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v36 = sub_100018A04((uint64_t *)&unk_100112FD0);
  uint64_t v37 = sub_10004F2A8((unint64_t *)&qword_100112940, (uint64_t *)&unk_100112FD0);
  id v38 = v47;
  uint64_t v39 = v49;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v36, v37, v49, v35);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v34, v38, v32);

  _Block_release(v32);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v38, v39);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v34, v48);
  swift_release(v57);
  return v33;
}

void sub_10004D078()
{
  uint64_t v6 = v0;
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = *(void **)(v6 + OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_queue);
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v12 = v11;
  uint64_t v13 = _dispatchPreconditionTest(_:)(v10);
  uint64_t v14 = (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if ((v13 & 1) != 0)
  {
    uint64_t v45 = *(void *)(v6 + OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_sharePlayState);
    CurrentValueSubject.value.getter(v14);
    uint64_t v13 = v49[0];
    uint64_t v5 = (void *)v49[1];
    char v3 = v50;
    uint64_t v1 = (void *)sub_10004D8F8();
    id v2 = v15;
    char v4 = v16;
    if (qword_100112298 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100112298, sub_10004C7B0);
LABEL_3:
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = sub_10001C270(v17, (uint64_t)qword_100114240);
  sub_10002CA0C((id)v13, v5, v3);
  sub_10002CA0C(v1, v2, v4);
  sub_10002CA0C((id)v13, v5, v3);
  id v19 = sub_10002CA0C(v1, v2, v4);
  uint64_t v47 = v18;
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter();
  int v22 = v21;
  BOOL v23 = os_log_type_enabled(v20, v21);
  uint64_t v46 = v6;
  if (v23)
  {
    uint64_t v24 = swift_slowAlloc(22LL, -1LL);
    uint64_t v44 = swift_slowAlloc(64LL, -1LL);
    v49[0] = v44;
    *(_DWORD *)uint64_t v24 = 136315394;
    sub_10002CA0C((id)v13, v5, v3);
    sub_10004C82C(v13, (uint64_t)v5, v3);
    os_log_t v43 = v20;
    id v25 = v1;
    unint64_t v26 = v2;
    char v27 = v3;
    uint64_t v28 = (void *)v13;
    int64_t v29 = v5;
    uint64_t v31 = v30;
    LODWORD(v42) = v22;
    unint64_t v33 = v32;
    sub_10002C9C8(v28, v29, v27);
    uint64_t v48 = sub_1000850E4(v31, v33, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease(v33);
    sub_10002C9C8(v28, v29, v27);
    sub_10002C9C8(v28, v29, v27);
    *(_WORD *)(v24 + 12) = 2080;
    uint64_t v41 = v24 + 14;
    sub_10002CA0C(v25, v26, v4);
    sub_10004C82C((uint64_t)v25, (uint64_t)v26, v4);
    uint64_t v35 = v34;
    unint64_t v37 = v36;
    sub_10002C9C8(v25, v26, v4);
    uint64_t v48 = sub_1000850E4(v35, v37, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v41, v24 + 22);
    swift_bridgeObjectRelease(v37);
    sub_10002C9C8(v25, v26, v4);
    sub_10002C9C8(v25, v26, v4);
    os_log_t v38 = v43;
    _os_log_impl( (void *)&_mh_execute_header,  v43,  (os_log_type_t)v42,  "SharePlay state possibly changing from %s to %s",  (uint8_t *)v24,  0x16u);
    uint64_t v39 = v44;
    swift_arrayDestroy(v44, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {
    sub_10002C9C8((void *)v13, v5, v3);
    sub_10002C9C8((void *)v13, v5, v3);
    sub_10002C9C8(v1, v2, v4);
    sub_10002C9C8(v1, v2, v4);
  }

  __asm { BR              X10 }

uint64_t sub_10004D8F8()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  char v4 = (uint64_t *)((char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_queue);
  void *v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v7 = (void *)sub_10004E1EC();
  if (!v7)
  {
    id v9 =  [*(id *)(v0 + OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_neighborhoodActivityConduit) nearbyConversations];
    uint64_t v10 = type metadata accessor for UUID(0LL);
    uint64_t v11 = sub_10001C5D0(0LL, (unint64_t *)&unk_100112E00, &OBJC_CLASS___TUNearbyDeviceHandle_ptr);
    uint64_t v12 = sub_10001949C( &qword_1001136D0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v9, v10, v11, v12);

    uint64_t v1 = (uint64_t)sub_100095B1C(v13);
    swift_bridgeObjectRelease(v13);
    if ((v1 & 0x8000000000000000LL) == 0 && (v1 & 0x4000000000000000LL) == 0)
    {
      goto LABEL_10;
    }

void sub_10004DAD8()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (uint64_t *)((char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = *(void **)(v2 + OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_queue);
  void *v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_26;
  }

  CurrentValueSubject.value.getter(v9);
  uint64_t v10 = v66;
  uint64_t v11 = v67;
  char v12 = v68;
  unsigned __int8 v1 = v68 - 1;
  if ((v68 - 1) <= 1u)
  {
    uint64_t v13 = v66;
    sub_10002C9C8(v10, v11, v12);

    uint64_t v15 = OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_assertion;
    if (!*(void *)(v2 + OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_assertion))
    {
      id v16 = objc_msgSend((id)objc_opt_self(RBSTarget, v14), "currentProcess");
      uint64_t v17 = sub_100018A04(&qword_1001142B0);
      uint64_t v18 = swift_allocObject(v17, 40LL, 7LL);
      *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_1000C3FD0;
      NSString v19 = String._bridgeToObjectiveC()();
      NSString v20 = String._bridgeToObjectiveC()();
      id v22 =  objc_msgSend( (id)objc_opt_self(RBSDomainAttribute, v21),  "attributeWithDomain:name:",  v19,  v20);

      *(void *)(v18 + 32) = v22;
      unint64_t v66 = (void *)v18;
      specialized Array._endMutation()(v23);
      uint64_t v24 = v66;
      id v25 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
      NSString v26 = String._bridgeToObjectiveC()();
      sub_10001C5D0(0LL, (unint64_t *)&unk_1001142B8, &OBJC_CLASS___RBSAttribute_ptr);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      id v28 = objc_msgSend( v25,  "initWithExplanation:target:attributes:",  v26,  v16,  isa,  swift_bridgeObjectRelease(v24).n128_f64[0]);

      unint64_t v66 = 0LL;
      unsigned int v29 = [v28 acquireWithError:&v66];
      uint64_t v30 = v66;
      if (v29)
      {
        uint64_t v31 = qword_100112298;
        id v32 = v66;
        if (v31 != -1) {
          swift_once(&qword_100112298, sub_10004C7B0);
        }
        uint64_t v33 = type metadata accessor for Logger(0LL);
        uint64_t v34 = sub_10001C270(v33, (uint64_t)qword_100114240);
        uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
        os_log_type_t v36 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v35, v36))
        {
          unint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)unint64_t v37 = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, v36, "Acquired assertion for TVFaceTime.", v37, 2u);
          swift_slowDealloc(v37, -1LL, -1LL);
        }

        os_log_t v38 = *(void **)(v2 + v15);
        *(void *)(v2 + v15) = v28;
      }

      else
      {
        uint64_t v54 = v66;
        uint64_t v55 = _convertNSErrorToError(_:)(v30);

        swift_willThrow(v56);
        if (qword_100112298 != -1) {
          swift_once(&qword_100112298, sub_10004C7B0);
        }
        uint64_t v57 = type metadata accessor for Logger(0LL);
        sub_10001C270(v57, (uint64_t)qword_100114240);
        swift_errorRetain(v55);
        uint64_t v58 = swift_errorRetain(v55);
        unint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
        os_log_type_t v60 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v59, v60))
        {
          uint64_t v61 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v62 = (void *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)uint64_t v61 = 138412290;
          swift_errorRetain(v55);
          uint64_t v63 = (void *)_swift_stdlib_bridgeErrorToNSError(v55);
          unint64_t v66 = v63;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v61 + 4, v61 + 12);
          *uint64_t v62 = v63;
          swift_errorRelease(v55);
          swift_errorRelease(v55);
          _os_log_impl( (void *)&_mh_execute_header,  v59,  v60,  "Failed to acquire assertion for TVFaceTime: %@",  v61,  0xCu);
          uint64_t v64 = sub_100018A04((uint64_t *)&unk_100112E20);
          swift_arrayDestroy(v62, 1LL, v64);
          swift_slowDealloc(v62, -1LL, -1LL);
          swift_slowDealloc(v61, -1LL, -1LL);

          swift_errorRelease(v55);
        }

        else
        {
          swift_errorRelease(v55);
          swift_errorRelease(v55);
          swift_errorRelease(v55);
        }
      }

      return;
    }

uint64_t sub_10004E1EC()
{
  uint64_t v1 = sub_100018A04(&qword_100112D10);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  os_log_type_t v52 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v48 - v9;
  __chkstk_darwin(v8);
  char v12 = (char *)&v48 - v11;
  uint64_t v13 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (uint64_t *)((char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = *(void **)(v0 + OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_queue);
  *id v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }

  id v19 =  [*(id *)(v0 + OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_neighborhoodActivityConduit) currentSplitSession];
  if (!v19)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1LL, 1LL, v4);
    goto LABEL_7;
  }

  NSString v20 = v19;
  id v21 = [v19 conversationID];

  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);
  id v22 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v22(v3, v10, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v3, 0LL, 1LL, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1LL, v4) == 1)
  {
LABEL_7:
    sub_10004F2E8((uint64_t)v3);
    return 0LL;
  }

  v22(v12, v3, v4);
  id v23 =  [*(id *)(v0 + OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_conversationManager) activeConversations];
  uint64_t v13 = sub_10001C5D0(0LL, &qword_1001142C8, &OBJC_CLASS___TUConversation_ptr);
  id v16 = (void *)sub_10004F328();
  uint64_t v10 = (char *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v23, v13, v16);

  __chkstk_darwin(v24);
  *(&v48 - 2) = (uint64_t)v12;
  sub_10004C498(sub_10004F380, (uint64_t)(&v48 - 4), (uint64_t)v10);
  if (!v25)
  {
    if (qword_100112298 == -1)
    {
LABEL_11:
      uint64_t v29 = type metadata accessor for Logger(0LL);
      sub_10001C270(v29, (uint64_t)qword_100114240);
      uint64_t v30 = v52;
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v52, v12, v4);
      uint64_t v31 = swift_bridgeObjectRetain(v10);
      id v32 = (os_log_s *)Logger.logObject.getter(v31);
      os_log_type_t v33 = static os_log_type_t.error.getter();
      int v34 = v33;
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v35 = swift_slowAlloc(22LL, -1LL);
        uint64_t v51 = swift_slowAlloc(64LL, -1LL);
        v54[0] = v51;
        *(_DWORD *)uint64_t v35 = 136315394;
        uint64_t v48 = v35 + 4;
        uint64_t v36 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        os_log_t v50 = v32;
        uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v4, v36);
        unint64_t v39 = v38;
        uint64_t v53 = sub_1000850E4(v37, v38, v54);
        int v49 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v48, v35 + 12);
        __n128 v40 = swift_bridgeObjectRelease(v39);
        uint64_t v41 = *(void (**)(char *, uint64_t, __n128))(v5 + 8);
        v41(v30, v4, v40);
        *(_WORD *)(v35 + 12) = 2080;
        uint64_t v42 = swift_bridgeObjectRetain(v10);
        uint64_t v43 = Set.description.getter(v42, v13, v16);
        unint64_t v45 = v44;
        swift_bridgeObjectRelease(v10);
        uint64_t v53 = sub_1000850E4(v43, v45, v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v35 + 14, v35 + 22);
        swift_bridgeObjectRelease_n(v10, 2LL);
        swift_bridgeObjectRelease(v45);
        os_log_t v46 = v50;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  (os_log_type_t)v49,  "Unable to find current split sesssion %s in active conversations: %s",  (uint8_t *)v35,  0x16u);
        uint64_t v47 = v51;
        swift_arrayDestroy(v51, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1LL, -1LL);
        swift_slowDealloc(v35, -1LL, -1LL);
      }

      else
      {
        uint64_t v41 = *(void (**)(char *, uint64_t, __n128))(v5 + 8);
        ((void (*)(char *, uint64_t))v41)(v30, v4);

        swift_bridgeObjectRelease_n(v10, 2LL);
      }

      ((void (*)(char *, uint64_t))v41)(v12, v4);
      return 0LL;
    }

uint64_t sub_10004E730(id *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = [*a1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(a2) = static UUID.== infix(_:_:)(v7, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a2 & 1;
}

uint64_t type metadata accessor for SharePlayStateManager(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime21SharePlayStateManager, a2);
}

void destroy for SharePlayState(uint64_t a1)
{
}

uint64_t _s8FaceTime14SharePlayStateOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10002CA0C(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SharePlayState(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10002CA0C(*(id *)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  sub_10002C9C8(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for SharePlayState(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SharePlayState(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  sub_10002C9C8(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SharePlayState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SharePlayState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    *(void *)__n128 result = a2 - 253;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10004ED74(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_10004ED8C(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)__n128 result = a2 - 3;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    LOBYTE(a2) = 3;
  }

  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SharePlayState()
{
  return &type metadata for SharePlayState;
}

id sub_10004EDB4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  unint64_t v4 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    unint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v6 = a2 >> 62;
    if (!(a2 >> 62)) {
      goto LABEL_3;
    }
LABEL_50:
    if (v2 < 0) {
      uint64_t v31 = v2;
    }
    else {
      uint64_t v31 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(v2);
    if (v5 == v32) {
      goto LABEL_4;
    }
LABEL_54:
    LOBYTE(v5) = 0;
    return (id)(v5 & 1);
  }

  if (a1 < 0) {
    uint64_t v30 = a1;
  }
  else {
    uint64_t v30 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  unint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v30);
  swift_bridgeObjectRelease(v3);
  unint64_t v6 = (unint64_t)v2 >> 62;
LABEL_3:
  if (v5 != *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_54;
  }
LABEL_4:
  if (!v5) {
    goto LABEL_37;
  }
  uint64_t v7 = v3 & 0xFFFFFFFFFFFFFF8LL;
  if (v3 < 0) {
    uint64_t v7 = v3;
  }
  if (!v4) {
    uint64_t v7 = (v3 & 0xFFFFFFFFFFFFFF8LL) + 32;
  }
  uint64_t v8 = v2 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v9 = (v2 & 0xFFFFFFFFFFFFFF8LL) + 32;
  if (v2 < 0) {
    uint64_t v10 = v2;
  }
  else {
    uint64_t v10 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  if (v6) {
    uint64_t v9 = v10;
  }
  if (v7 == v9)
  {
LABEL_37:
    LOBYTE(v5) = 1;
    return (id)(v5 & 1);
  }

  if ((v5 & 0x8000000000000000LL) != 0) {
    goto LABEL_60;
  }
  unint64_t v33 = v3 & 0xC000000000000001LL;
  if ((v3 & 0xC000000000000001LL) != 0) {
    goto LABEL_61;
  }
  for (id result = *(id *)(v3 + 32); ; id result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v3))
  {
    char v12 = result;
    if ((v2 & 0xC000000000000001LL) == 0) {
      break;
    }
    id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v2);
LABEL_21:
    uint64_t v14 = v13;
    sub_10001C5D0(0LL, (unint64_t *)&unk_100112E00, &OBJC_CLASS___TUNearbyDeviceHandle_ptr);
    char v15 = static NSObject.== infix(_:_:)(v12, v14);

    if ((v15 & 1) == 0) {
      goto LABEL_54;
    }
    unint64_t v16 = v5 - 1;
    if (v5 == 1) {
      return (id)(v5 & 1);
    }
    if (((v2 | v3) & 0xC000000000000001LL) != 0)
    {
      uint64_t v17 = 0LL;
      unint64_t v18 = v5 - 2;
      while (v16 != v17)
      {
        unint64_t v5 = v17 + 1;
        if (v33) {
          id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 + 1, v3);
        }
        else {
          id v19 = *(id *)(v3 + 40 + 8 * v17);
        }
        NSString v20 = v19;
        if ((v2 & 0xC000000000000001LL) != 0)
        {
          id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 + 1, v2);
        }

        else
        {
          if (v5 >= *(void *)(v8 + 16)) {
            goto LABEL_59;
          }
          id v21 = *(id *)(v2 + 40 + 8 * v17);
        }

        id v22 = v21;
        unint64_t v5 = static NSObject.== infix(_:_:)(v20, v21);

        if ((v5 & 1) != 0 && v18 != v17++) {
          continue;
        }
        return (id)(v5 & 1);
      }

      __break(1u);
    }

    else
    {
      unint64_t v24 = *(void *)(v8 + 16);
      if (v24 <= 1) {
        unint64_t v24 = 1LL;
      }
      unint64_t v25 = v24 - 1;
      uint64_t v26 = (void **)(v3 + 40);
      uint64_t v8 = v2 + 40;
      while (v16)
      {
        if (!v25) {
          goto LABEL_58;
        }
        id v28 = *v26++;
        __n128 v27 = v28;
        uint64_t v29 = *(void **)v8;
        v8 += 8LL;
        uint64_t v2 = v27;
        uint64_t v3 = v29;
        unint64_t v5 = static NSObject.== infix(_:_:)(v2, v3);

        if ((v5 & 1) != 0)
        {
          --v25;
          if (--v16) {
            continue;
          }
        }

        return (id)(v5 & 1);
      }
    }

    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    ;
  }

  if (*(void *)(v8 + 16))
  {
    id v13 = *(id *)(v2 + 32);
    goto LABEL_21;
  }

  __break(1u);
  return result;
}

void sub_10004F0A8(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

id sub_10004F0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6) {
    return 0LL;
  }
  else {
    return sub_10004EDB4(v7, v6);
  }
}

uint64_t sub_10004F24C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10004F270()
{
}

uint64_t sub_10004F290(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004F2A0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10004F2A8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_10001C334(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10004F2E8(uint64_t a1)
{
  uint64_t v2 = sub_100018A04(&qword_100112D10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_10004F328()
{
  unint64_t result = qword_1001142D0;
  if (!qword_1001142D0)
  {
    uint64_t v1 = sub_10001C5D0(255LL, &qword_1001142C8, &OBJC_CLASS___TUConversation_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1001142D0);
  }

  return result;
}

uint64_t sub_10004F380(id *a1)
{
  return sub_10004E730(a1, *(void *)(v1 + 16)) & 1;
}

void sub_10004F39C(uint64_t a1, const char *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = *(void **)(v4 + OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_queue);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    if (qword_100112298 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100112298, sub_10004C7B0);
LABEL_3:
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = sub_10001C270(v11, (uint64_t)qword_100114240);
  id v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    char v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)char v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, a2, v15, 2u);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  sub_10004D078();
}

void sub_10004F50C(const char *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = *(void **)(v3 + OBJC_IVAR____TtC8FaceTime21SharePlayStateManager_queue);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v_Block_object_dispose(va, 8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    if (qword_100112298 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100112298, sub_10004C7B0);
LABEL_3:
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_10001C270(v10, (uint64_t)qword_100114240);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, a1, v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  sub_10004D078();
}

void sub_10004F67C()
{
  uint64_t v0 = sub_100018A04(&qword_1001142B0);
  uint64_t v1 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_1000C3FC0;
  id v3 = objc_msgSend((id)objc_opt_self(UIFont, v2), "preferredFontForTextStyle:", UIFontTextStyleTitle3);
  uint64_t v5 = (void *)objc_opt_self(&OBJC_CLASS___UIImageSymbolConfiguration, v4);
  id v6 = [v5 configurationWithFont:v3 scale:3];

  *(void *)(v1 + 32) = v6;
  uint64_t v7 = swift_allocObject(v0, 40LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1000C3FD0;
  id v9 = objc_msgSend((id)objc_opt_self(UIColor, v8), "greenColor");
  *(void *)(v7 + 32) = v9;
  specialized Array._endMutation()(v9);
  sub_10001C5D0(0LL, &qword_1001142E8, &OBJC_CLASS___UIColor_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v7);
  id v11 = [v5 configurationWithPaletteColors:isa];

  *(void *)(v1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v11;
  specialized Array._endMutation()(v12);
  uint64_t v13 = v1;
  os_log_type_t v14 = (void *)sub_100050174(v1);
  swift_bridgeObjectRelease(v13);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xEA00000000006C6CLL);
  uint64_t v17 = (UIImage *) objc_msgSend( (id)objc_opt_self(UIImage, v16),  "systemImageNamed:withConfiguration:",  v15,  v14);

  if (v17)
  {
    unint64_t v18 = UIImagePNGRepresentation(v17);

    if (v18)
    {
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);

      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

void sub_10004F8D8()
{
  uint64_t v0 = sub_100018A04(&qword_1001142B0);
  uint64_t v1 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_1000C3FC0;
  id v3 = objc_msgSend((id)objc_opt_self(UIFont, v2), "preferredFontForTextStyle:", UIFontTextStyleTitle3);
  uint64_t v5 = (void *)objc_opt_self(&OBJC_CLASS___UIImageSymbolConfiguration, v4);
  id v6 = [v5 configurationWithFont:v3 scale:3];

  *(void *)(v1 + 32) = v6;
  uint64_t v7 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1000C3FC0;
  id v9 = (void *)objc_opt_self(&OBJC_CLASS___UIColor, v8);
  id v10 = [v9 labelColor];
  uint64_t v12 = (void *)objc_opt_self(&OBJC_CLASS___UITraitCollection, v11);
  id v13 = [v12 traitCollectionWithUserInterfaceStyle:2];
  id v14 = [v10 resolvedColorWithTraitCollection:v13];

  *(void *)(v7 + 32) = v14;
  id v15 = [v9 secondaryLabelColor];
  id v16 = [v12 traitCollectionWithUserInterfaceStyle:2];
  id v17 = [v15 resolvedColorWithTraitCollection:v16];

  *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v17;
  specialized Array._endMutation()(v18);
  sub_10001C5D0(0LL, &qword_1001142E8, &OBJC_CLASS___UIColor_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v20 = objc_msgSend(v5, "configurationWithPaletteColors:", isa, swift_bridgeObjectRelease(v7).n128_f64[0]);

  *(void *)(v1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v20;
  specialized Array._endMutation()(v21);
  id v22 = (void *)sub_100050174(v1);
  swift_bridgeObjectRelease(v1);
  NSString v23 = String._bridgeToObjectiveC()();
  unint64_t v25 = (UIImage *) objc_msgSend( (id)objc_opt_self(UIImage, v24),  "systemImageNamed:withConfiguration:",  v23,  v22);

  if (v25)
  {
    uint64_t v26 = UIImagePNGRepresentation(v25);

    if (v26)
    {
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);

      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_10004FBD4(uint64_t a1, unint64_t a2)
{
  id v4 = objc_allocWithZone(&OBJC_CLASS___UIImage);
  sub_10004FE18(a1, a2);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v6 = [v4 initWithData:isa];
  sub_100022804(a1, a2);

  if (!v6) {
    return 0LL;
  }
  [v6 size];
  double v8 = v7;
  [v6 size];
  if (v9 < v8) {
    double v8 = v9;
  }
  id v10 = objc_msgSend(objc_allocWithZone(UIGraphicsImageRenderer), "initWithSize:", v8, v8);
  uint64_t v11 = swift_allocObject(&unk_1000F9488, 32LL, 7LL);
  *(double *)(v11 + swift_weakDestroy(v0 + 16) = v8;
  *(void *)(v11 + 24) = v6;
  uint64_t v12 = swift_allocObject(&unk_1000F94B0, 32LL, 7LL);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = sub_1000500EC;
  *(void *)(v12 + 24) = v11;
  v20[4] = sub_100050108;
  uint64_t v21 = v12;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 1107296256LL;
  v20[2] = sub_100050128;
  v20[3] = &unk_1000F94C8;
  id v13 = _Block_copy(v20);
  uint64_t v14 = v21;
  swift_retain(v12);
  id v15 = v6;
  swift_release(v14);
  id v16 = (UIImage *)[v10 imageWithActions:v13];

  _Block_release(v13);
  LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = swift_isEscapingClosureAtFileLocation(v12, "", 93LL, 53LL, 73LL, 1LL);
  uint64_t result = swift_release(v12);
  if ((v10 & 1) == 0)
  {
    uint64_t v18 = UIImagePNGRepresentation(v16);

    if (v18)
    {
      uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
      swift_release(v11);

      return v19;
    }

    swift_release(v11);

    return 0LL;
  }

  __break(1u);
  return result;
}

uint64_t sub_10004FE18(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void sub_10004FE5C()
{
  uint64_t v0 = sub_100018A04(&qword_1001142B0);
  uint64_t v1 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_1000C3FC0;
  id v3 = objc_msgSend((id)objc_opt_self(UIFont, v2), "preferredFontForTextStyle:", UIFontTextStyleTitle3);
  uint64_t v5 = (void *)objc_opt_self(&OBJC_CLASS___UIImageSymbolConfiguration, v4);
  id v6 = [v5 configurationWithFont:v3 scale:3];

  *(void *)(v1 + 32) = v6;
  id v7 = [v5 configurationPreferringMulticolor];
  *(void *)(v1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v7;
  specialized Array._endMutation()(v7);
  double v8 = (void *)sub_100050174(v1);
  swift_bridgeObjectRelease(v1);
  NSString v9 = String._bridgeToObjectiveC()();
  uint64_t v11 = (UIImage *) objc_msgSend( (id)objc_opt_self(UIImage, v10),  "systemImageNamed:withConfiguration:",  v9,  v8);

  if (v11)
  {
    uint64_t v12 = UIImagePNGRepresentation(v11);

    if (v12)
    {
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);

      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

id sub_10004FFEC(double a1, uint64_t a2, void *a3)
{
  id v5 = objc_msgSend((id)objc_opt_self(UIBezierPath, a3), "bezierPathWithOvalInRect:", 0.0, 0.0, a1, a1);
  [v5 addClip];

  [a3 size];
  double v7 = (a1 - v6) * 0.5;
  [a3 size];
  double v9 = (a1 - v8) * 0.5;
  [a3 size];
  double v11 = v10;
  [a3 size];
  return objc_msgSend(a3, "drawInRect:", v7, v9, v11, v12);
}

uint64_t sub_1000500C8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

id sub_1000500EC(uint64_t a1)
{
  return sub_10004FFEC(*(double *)(v1 + 16), a1, *(void **)(v1 + 24));
}

uint64_t sub_1000500F8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100050108()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_100050128(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t sub_10005015C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005016C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

Swift::Int sub_100050174(uint64_t a1)
{
  unint64_t v3 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    Swift::Int v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    Swift::Int result = swift_bridgeObjectRetain(a1);
    if (v4) {
      goto LABEL_3;
    }
LABEL_36:
    swift_bridgeObjectRelease(a1);
    __break(1u);
    goto LABEL_37;
  }

  if (a1 < 0) {
    uint64_t v25 = a1;
  }
  else {
    uint64_t v25 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  Swift::Int result = _CocoaArrayWrapper.endIndex.getter(v25);
  Swift::Int v4 = result;
  if (!result) {
    goto LABEL_36;
  }
LABEL_3:
  unint64_t v1 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
LABEL_37:
    id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    goto LABEL_6;
  }

  if (!*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  id v6 = *(id *)(a1 + 32);
LABEL_6:
  double v7 = v6;
  Swift::Int result = swift_bridgeObjectRelease(a1);
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    if (v3)
    {
      if (a1 < 0) {
        uint64_t v9 = a1;
      }
      else {
        uint64_t v9 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      Swift::Int result = _CocoaArrayWrapper.endIndex.getter(v9);
      if (result < 1) {
        goto LABEL_39;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v9);
      Swift::Int result = swift_bridgeObjectRelease(a1);
    }

    else
    {
      uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      Swift::Int result = swift_bridgeObjectRetain(a1);
      if (!v8) {
        goto LABEL_39;
      }
    }

    if (v8 < v4)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }

    if (v1 && v4 != 1)
    {
      sub_10001C5D0(0LL, &qword_1001142E0, &OBJC_CLASS___UIImageSymbolConfiguration_ptr);
      Swift::Int result = 1LL;
      do
      {
        Swift::Int v10 = result + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(result);
        Swift::Int result = v10;
      }

      while (v4 != v10);
    }

    if (v3)
    {
      if (a1 < 0) {
        uint64_t v20 = a1;
      }
      else {
        uint64_t v20 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v11 = _CocoaArrayWrapper.subscript.getter(1LL, v4, v20);
      uint64_t v12 = v21;
      uint64_t v13 = v22;
      unint64_t v24 = v23;
      Swift::Int result = swift_bridgeObjectRelease_n(a1, 2LL);
      v24 >>= 1;
      BOOL v14 = __OFSUB__(v24, v13);
      uint64_t v16 = v24 - v13;
      char v15 = (v16 < 0) ^ v14 | (v16 == 0);
      if (v16) {
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8LL;
      uint64_t v12 = (a1 & 0xFFFFFFFFFFFFFF8LL) + 32;
      uint64_t v13 = 1LL;
      BOOL v14 = __OFSUB__(v4, 1LL);
      uint64_t v16 = v4 - 1;
      char v15 = (v16 < 0) ^ v14 | (v16 == 0);
      if (v16)
      {
LABEL_22:
        if (v15)
        {
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }

        id v17 = (uint64_t *)(v12 + 8 * v13);
        do
        {
          uint64_t v18 = *v17++;
          id v19 = [v7 configurationByApplyingConfiguration:v18];

          double v7 = v19;
          --v16;
        }

        while (v16);
LABEL_31:
        swift_unknownObjectRelease(v11);
        return (Swift::Int)v19;
      }
    }

    id v19 = v7;
    goto LABEL_31;
  }

void __swiftcall SpringModel.init(mass:stiffness:damping:initialVelocity:)( FaceTime::SpringModel *__return_ptr retstr, Swift::Double mass, Swift::Double stiffness, Swift::Double damping, Swift::Double initialVelocity)
{
  double v6 = sqrt(stiffness / mass);
  double v7 = sqrt(mass * stiffness);
  double v8 = damping / (v7 + v7);
  if (v8 >= 1.0)
  {
    double v10 = v6 - initialVelocity;
    double v9 = 0.0;
  }

  else
  {
    double v9 = v6 * sqrt(1.0 - v8 * v8);
    double v10 = (v6 * v8 - initialVelocity) / v9;
  }

  sub_100050458(1.0e-15);
  retstr->w0 = v6;
  retstr->zeta = v8;
  retstr->wd = v9;
  retstr->A = 1.0;
  retstr->B = v10;
  retstr->duration = v11;
}

void sub_100050458(double a1)
{
  double v2 = v1[1];
  double v3 = 0.000001;
  if (a1 > 0.000001)
  {
    if (v2 == 0.0) {
      return;
    }
    double v3 = a1;
    if (v2 >= 1.0) {
      goto LABEL_4;
    }
LABEL_20:
    fmax(-log(v3 / (fabs(v1[3]) + fabs(v1[4]))) / (v2 * *v1), 0.0);
    return;
  }

  if (v2 == 0.0) {
    return;
  }
  if (v2 < 1.0) {
    goto LABEL_20;
  }
LABEL_4:
  double v4 = -1.0;
  double v5 = 0.0;
  double v6 = INFINITY;
  uint64_t v7 = 1024LL;
  double v8 = 1.0;
  double v9 = -1.0;
  do
  {
    if (v2 >= v8)
    {
      double v16 = v1[3] + v5 * v1[4];
      double v15 = v16 * exp(-(v5 * *v1));
    }

    else
    {
      double v10 = v5 * v1[2];
      double v11 = exp(v5 * (*v1 * -v2));
      double v12 = v1[3];
      __double2 v13 = __sincos_stret(v10);
      double v14 = v12 * v13.__cosval;
      double v8 = 1.0;
      double v15 = v11 * (v14 + v13.__sinval * v1[4]);
      double v4 = -1.0;
    }

    double v17 = fabs(v15 + v4 + v8);
    if ((~*(void *)&v17 & 0x7FF0000000000000LL) == 0) {
      break;
    }
    if (v6 >= v3)
    {
      if (v17 < v6)
      {
        double v6 = v17;
        double v9 = v5;
      }
    }

    else if (v17 >= v3)
    {
      double v6 = INFINITY;
    }

    else if (v5 - v9 > v8)
    {
      return;
    }

    double v5 = v5 + 0.1;
    --v7;
  }

  while (v7);
}

Swift::Double_optional __swiftcall SpringModel.value(for:)(Swift::Double a1)
{
  if (v1[5] <= a1)
  {
    char v8 = 0;
  }

  else
  {
    double v2 = v1[1];
    if (v2 >= 1.0)
    {
      double v9 = v1[3] + v1[4] * a1;
      double v7 = v9 * exp(-(a1 * *v1));
    }

    else
    {
      double v3 = v1[2] * a1;
      double v4 = exp(-(v2 * *v1) * a1);
      double v5 = v1[3];
      __double2 v6 = __sincos_stret(v3);
      double v7 = v4 * (v5 * v6.__cosval + v6.__sinval * v1[4]);
    }

    a1 = 1.0 - v7;
    if ((*(void *)&a1 & 0x7FF0000000000000LL) == 0x7FF0000000000000LL) {
      char v8 = 0;
    }
    else {
      char v8 = LOBYTE(a1);
    }
  }

  result.value = a1;
  result.is_nil = v8;
  return result;
}

id static SKAction.move(to:delay:mass:stiffness:damping:)( double a1, double a2, double a3, double a4, double a5, double a6)
{
  return sub_10005144C((uint64_t)&unk_1000C57F0, (uint64_t)&unk_1000C5820, a1, a2, a3, a4, a5, a6);
}

id sub_100050714@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 position];
  *a2 = v4;
  a2[1] = v5;
  return result;
}

id sub_100050744(double *a1, id *a2)
{
  return objc_msgSend(*a2, "setPosition:", *a1, a1[1]);
}

id static SKAction.animate<A>(keyPath:toValue:delay:mass:stiffness:damping:)( uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  return sub_100050BC4(a1, 0LL, 1, *(uint64_t *)&a2, 0, a3, a4, a5, a6);
}

id static SKAction.scale(to:delay:mass:stiffness:damping:)( double a1, double a2, double a3, double a4, double a5)
{
  return  [(id)swift_getObjCClassFromMetadata(v5) scaleXTo:a1 y:a1 delay:a2 mass:a3 stiffness:a4 damping:a5];
}

id static SKAction.scaleX(to:y:delay:mass:stiffness:damping:)( double a1, double a2, double a3, double a4, double a5, double a6)
{
  return sub_10005144C((uint64_t)&unk_1000C5798, (uint64_t)&unk_1000C57C8, a1, a2, a3, a4, a5, a6);
}

id static SKAction.animate<A>(keyPath:byValue:delay:mass:stiffness:damping:)( uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  return sub_100050BC4(a1, *(uint64_t *)&a2, 0, 0LL, 1, a3, a4, a5, a6);
}

id sub_1000508B0( uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, double a7, double a8, double a9)
{
  double v15 = sqrt(a8 / a7);
  double v16 = sqrt(a7 * a8);
  double v17 = a9 / (v16 + v16);
  double v18 = 0.0;
  double v19 = v15;
  if (v17 < 1.0)
  {
    double v18 = v15 * sqrt(1.0 - v17 * v17);
    double v19 = v15 * v17 / v18;
  }

  double v40 = v15;
  double v41 = a9 / (v16 + v16);
  double v42 = v18;
  uint64_t v43 = 0x3FF0000000000000LL;
  double v44 = v19;
  uint64_t v45 = 0LL;
  sub_100050458(1.0e-15);
  double v21 = v20;
  uint64_t v22 = swift_allocObject(&unk_1000F9590, 32LL, 7LL);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = 0LL;
  *(_BYTE *)(v22 + 24) = 1;
  uint64_t v23 = swift_allocObject(&unk_1000F9590, 32LL, 7LL);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = a4;
  *(_BYTE *)(v23 + 24) = a5 & 1;
  uint64_t v24 = swift_allocObject(&unk_1000F9590, 32LL, 7LL);
  *(void *)(v24 + swift_weakDestroy(v0 + 16) = a2;
  *(_BYTE *)(v24 + 24) = a3 & 1;
  uint64_t v26 = (void *)objc_opt_self(&OBJC_CLASS___SKAction, v25);
  uint64_t v27 = swift_allocObject(&unk_1000F95B8, 96LL, 7LL);
  *(void *)(v27 + swift_weakDestroy(v0 + 16) = v22;
  *(void *)(v27 + 24) = a1;
  *(void *)(v27 + 32) = v24;
  *(void *)(v27 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v23;
  *(double *)(v27 + 4_Block_object_dispose(va, 8) = v15;
  *(double *)(v27 + 56) = v17;
  *(double *)(v27 + 64) = v18;
  *(void *)(v27 + 72) = 0x3FF0000000000000LL;
  *(double *)(v27 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v19;
  *(double *)(v27 + 8_Block_object_dispose(va, 8) = v21;
  v38[4] = sub_100051710;
  uint64_t v39 = v27;
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 1107296256LL;
  v38[2] = sub_1000987B8;
  _OWORD v38[3] = &unk_1000F95D0;
  id v28 = _Block_copy(v38);
  uint64_t v29 = v39;
  swift_retain(v22);
  swift_retain(a1);
  swift_retain(v24);
  swift_retain(v23);
  swift_release(v29);
  id v30 = [v26 customActionWithDuration:v28 actionBlock:v21];
  _Block_release(v28);
  if (a6 <= 0.0)
  {
    swift_release(v23);
    swift_release(v24);
  }

  else
  {
    uint64_t v31 = sub_100018A04(&qword_1001142B0);
    uint64_t v32 = swift_allocObject(v31, 48LL, 7LL);
    *(_OWORD *)(v32 + swift_weakDestroy(v0 + 16) = xmmword_1000C3FC0;
    id v33 = [v26 waitForDuration:a6];
    *(void *)(v32 + 32) = v33;
    *(void *)(v32 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v30;
    v38[0] = v32;
    specialized Array._endMutation()(v33);
    uint64_t v34 = v38[0];
    sub_10001C5D0(0LL, (unint64_t *)&qword_100113FC0, &OBJC_CLASS___SKAction_ptr);
    id v35 = v30;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    id v30 = objc_msgSend(v26, "sequence:", isa, swift_bridgeObjectRelease(v34).n128_f64[0]);
    swift_release(v23);
    swift_release(v24);
  }

  swift_release(v22);
  return v30;
}

id sub_100050BC4( uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, double a7, double a8, double a9)
{
  double v15 = sqrt(a8 / a7);
  double v16 = sqrt(a7 * a8);
  double v17 = a9 / (v16 + v16);
  double v18 = 0.0;
  double v19 = v15;
  if (v17 < 1.0)
  {
    double v18 = v15 * sqrt(1.0 - v17 * v17);
    double v19 = v15 * v17 / v18;
  }

  double v40 = v15;
  double v41 = a9 / (v16 + v16);
  double v42 = v18;
  uint64_t v43 = 0x3FF0000000000000LL;
  double v44 = v19;
  uint64_t v45 = 0LL;
  sub_100050458(1.0e-15);
  double v21 = v20;
  uint64_t v22 = swift_allocObject(&unk_1000F9590, 32LL, 7LL);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = 0LL;
  *(_BYTE *)(v22 + 24) = 1;
  uint64_t v23 = swift_allocObject(&unk_1000F9590, 32LL, 7LL);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = a4;
  *(_BYTE *)(v23 + 24) = a5 & 1;
  uint64_t v24 = swift_allocObject(&unk_1000F9590, 32LL, 7LL);
  *(void *)(v24 + swift_weakDestroy(v0 + 16) = a2;
  *(_BYTE *)(v24 + 24) = a3 & 1;
  uint64_t v26 = (void *)objc_opt_self(&OBJC_CLASS___SKAction, v25);
  uint64_t v27 = swift_allocObject(&unk_1000F9608, 96LL, 7LL);
  *(void *)(v27 + swift_weakDestroy(v0 + 16) = v22;
  *(void *)(v27 + 24) = a1;
  *(void *)(v27 + 32) = v24;
  *(void *)(v27 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v23;
  *(double *)(v27 + 4_Block_object_dispose(va, 8) = v15;
  *(double *)(v27 + 56) = v17;
  *(double *)(v27 + 64) = v18;
  *(void *)(v27 + 72) = 0x3FF0000000000000LL;
  *(double *)(v27 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v19;
  *(double *)(v27 + 8_Block_object_dispose(va, 8) = v21;
  v38[4] = sub_100051774;
  uint64_t v39 = v27;
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 1107296256LL;
  v38[2] = sub_1000987B8;
  _OWORD v38[3] = &unk_1000F9620;
  id v28 = _Block_copy(v38);
  uint64_t v29 = v39;
  swift_retain(v22);
  swift_retain(a1);
  swift_retain(v24);
  swift_retain(v23);
  swift_release(v29);
  id v30 = [v26 customActionWithDuration:v28 actionBlock:v21];
  _Block_release(v28);
  if (a6 <= 0.0)
  {
    swift_release(v23);
    swift_release(v24);
  }

  else
  {
    uint64_t v31 = sub_100018A04(&qword_1001142B0);
    uint64_t v32 = swift_allocObject(v31, 48LL, 7LL);
    *(_OWORD *)(v32 + swift_weakDestroy(v0 + 16) = xmmword_1000C3FC0;
    id v33 = [v26 waitForDuration:a6];
    *(void *)(v32 + 32) = v33;
    *(void *)(v32 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v30;
    v38[0] = v32;
    specialized Array._endMutation()(v33);
    uint64_t v34 = v38[0];
    sub_10001C5D0(0LL, (unint64_t *)&qword_100113FC0, &OBJC_CLASS___SKAction_ptr);
    id v35 = v30;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    id v30 = objc_msgSend(v26, "sequence:", isa, swift_bridgeObjectRelease(v34).n128_f64[0]);
    swift_release(v23);
    swift_release(v24);
  }

  swift_release(v22);
  return v30;
}

void sub_100050ED8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Swift::Double a6)
{
  double v12 = (double *)(a2 + 16);
  id v35 = a1;
  __double2 v13 = (double *)(a5 + 16);
  swift_beginAccess(a2 + 16, v34, 0LL, 0LL);
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    id v14 = a1;
    swift_getAtKeyPath(v32, &v35, a3);
    double v15 = *(double *)v32;
    swift_beginAccess(v12, v33, 1LL, 0LL);
    *(double *)(a2 + swift_weakDestroy(v0 + 16) = v15;
    *(_BYTE *)(a2 + 24) = 0;
    swift_beginAccess(a4 + 16, v32, 0LL, 0LL);
    if ((*(_BYTE *)(a4 + 24) & 1) != 0)
    {
      swift_beginAccess(v13, v31, 0LL, 0LL);
      if ((*(_BYTE *)(a5 + 24) & 1) != 0)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }

      double v16 = *v13 - v15;
    }

    else
    {
      double v16 = *(double *)(a4 + 16);
    }

    swift_beginAccess(a4 + 16, v30, 1LL, 0LL);
    *(double *)(a4 + swift_weakDestroy(v0 + 16) = v16;
    *(_BYTE *)(a4 + 24) = 0;
    swift_beginAccess(v13, v29, 0LL, 0LL);
    if ((*(_BYTE *)(a5 + 24) & 1) != 0)
    {
      swift_beginAccess(v12, v28, 0LL, 0LL);
      if ((*(_BYTE *)(a2 + 24) & 1) != 0)
      {
LABEL_20:
        __break(1u);
        return;
      }

      double v18 = v16 + *v12;
    }

    else
    {
      double v18 = *v13;
    }

    swift_beginAccess(v13, v27, 1LL, 0LL);
    *(double *)(a5 + swift_weakDestroy(v0 + 16) = v18;
    *(_BYTE *)(a5 + 24) = 0;
  }

  else
  {
    id v17 = a1;
  }

  Swift::Double_optional v36 = SpringModel.value(for:)(a6);
  double v19 = *(double *)&v36.is_nil;
  char v21 = v20;
  swift_beginAccess(v13, v26, 0LL, 0LL);
  if ((*(_BYTE *)(a5 + 24) & 1) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  double v22 = *v13;
  swift_beginAccess(v12, v25, 0LL, 0LL);
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  double v23 = v19;
  if ((v21 & 1) != 0) {
    double v23 = 1.0;
  }
  double v24 = *v12 + v23 * (v22 - *v12);
  swift_setAtReferenceWritableKeyPath(&v35, a3, &v24);
}

uint64_t sub_100051100( void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, Swift::Double a7)
{
  uint64_t v38 = a6;
  uint64_t v37 = a4;
  uint64_t v39 = a3;
  uint64_t v11 = *(void *)(*a3 + class metadata base offset for ReferenceWritableKeyPath);
  uint64_t v12 = type metadata accessor for Optional(0LL, v11);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  double v16 = (char *)&v36 - v15;
  uint64_t v17 = *(void *)(v11 - 8);
  __chkstk_darwin(v14);
  double v19 = (char *)&v36 - v18;
  os_log_t v50 = a1;
  uint64_t v20 = sub_10001C5D0(0LL, &qword_1001142F0, &OBJC_CLASS___SKNode_ptr);
  id v21 = a1;
  char v22 = swift_dynamicCast(v16, &v50, v20, v11, 6LL);
  double v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  if ((v22 & 1) == 0)
  {
    v23(v16, 1LL, 1LL, v11);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }

  double v24 = (double *)(a2 + 16);
  uint64_t v25 = (double *)(a5 + 16);
  v23(v16, 0LL, 1LL, v11);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v16, v11);
  swift_beginAccess(a2 + 16, &v50, 0LL, 0LL);
  uint64_t v26 = v39;
  if (*(_BYTE *)(a2 + 24) != 1) {
    goto LABEL_13;
  }
  uint64_t v27 = v37;
  id v28 = (double *)(v37 + 16);
  swift_getAtKeyPath(v48, v19, v39);
  double v29 = *(double *)v48;
  swift_beginAccess(a2 + 16, v49, 1LL, 0LL);
  *(double *)(a2 + swift_weakDestroy(v0 + 16) = v29;
  *(_BYTE *)(a2 + 24) = 0;
  swift_beginAccess(v27 + 16, v48, 0LL, 0LL);
  if ((*(_BYTE *)(v27 + 24) & 1) != 0)
  {
    uint64_t result = swift_beginAccess(a5 + 16, v47, 0LL, 0LL);
    if ((*(_BYTE *)(a5 + 24) & 1) != 0)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }

    double v31 = *v25 - v29;
  }

  else
  {
    double v31 = *v28;
  }

  swift_beginAccess(v27 + 16, v46, 1LL, 0LL);
  *(double *)(v27 + swift_weakDestroy(v0 + 16) = v31;
  *(_BYTE *)(v27 + 24) = 0;
  swift_beginAccess(a5 + 16, v45, 0LL, 0LL);
  if ((*(_BYTE *)(a5 + 24) & 1) == 0)
  {
    double v32 = *v25;
    goto LABEL_12;
  }

  uint64_t result = swift_beginAccess(a2 + 16, v44, 0LL, 0LL);
  if ((*(_BYTE *)(a2 + 24) & 1) == 0)
  {
    double v32 = v31 + *v24;
LABEL_12:
    swift_beginAccess(a5 + 16, v43, 1LL, 0LL);
    *(double *)(a5 + swift_weakDestroy(v0 + 16) = v32;
    *(_BYTE *)(a5 + 24) = 0;
LABEL_13:
    Swift::Double_optional v51 = SpringModel.value(for:)(a7);
    if ((v33 & 1) != 0) {
      double v34 = 1.0;
    }
    else {
      double v34 = *(double *)&v51.is_nil;
    }
    uint64_t result = swift_beginAccess(a5 + 16, v42, 0LL, 0LL);
    if ((*(_BYTE *)(a5 + 24) & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      double v35 = *v25;
      uint64_t result = swift_beginAccess(a2 + 16, v41, 0LL, 0LL);
      if ((*(_BYTE *)(a2 + 24) & 1) == 0)
      {
        double v40 = *v24 + v34 * (v35 - *v24);
        swift_setAtReferenceWritableKeyPath(v19, v26, &v40);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v11);
      }
    }

    __break(1u);
    goto LABEL_21;
  }

id sub_10005144C(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t KeyPath = swift_getKeyPath(a1);
  id v16 = sub_1000508B0(KeyPath, 0LL, 1, *(uint64_t *)&a3, 0, a5, a6, a7, a8);
  swift_release(KeyPath);
  uint64_t v17 = swift_getKeyPath(a2);
  id v18 = sub_1000508B0(v17, 0LL, 1, *(uint64_t *)&a4, 0, a5, a6, a7, a8);
  swift_release(v17);
  uint64_t v20 = (void *)objc_opt_self(&OBJC_CLASS___SKAction, v19);
  uint64_t v21 = sub_100018A04(&qword_1001142B0);
  uint64_t v22 = swift_allocObject(v21, 48LL, 7LL);
  *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = xmmword_1000C3FC0;
  *(void *)(v22 + 32) = v16;
  *(void *)(v22 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v18;
  uint64_t v28 = v22;
  specialized Array._endMutation()(v22);
  sub_10001C5D0(0LL, (unint64_t *)&qword_100113FC0, &OBJC_CLASS___SKAction_ptr);
  id v23 = v16;
  id v24 = v18;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v26 = objc_msgSend(v20, "group:", isa, swift_bridgeObjectRelease(v28).n128_f64[0]);

  return v26;
}

__n128 initializeWithCopy for SpringModel(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for SpringModel(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SpringModel(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SpringModel()
{
  return &type metadata for SpringModel;
}

const char *sub_10005165C()
{
  return "xScale";
}

id sub_100051668@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 xScale];
  *a2 = v4;
  return result;
}

id sub_100051698(double *a1, id *a2)
{
  return [*a2 setXScale:*a1];
}

const char *sub_1000516AC()
{
  return "yScale";
}

id sub_1000516B8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 yScale];
  *a2 = v4;
  return result;
}

id sub_1000516E8(double *a1, id *a2)
{
  return [*a2 setYScale:*a1];
}

uint64_t sub_1000516FC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100051710(uint64_t a1)
{
  return sub_100051780(a1, (uint64_t (*)(uint64_t, void, void, void, void, void *))sub_100050ED8);
}

uint64_t sub_10005171C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005172C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100051738()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_100051774(uint64_t a1)
{
  return sub_100051780(a1, (uint64_t (*)(uint64_t, void, void, void, void, void *))sub_100051100);
}

uint64_t sub_100051780( uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void *))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2 + 6);
}

const char *sub_100051794()
{
  return "position";
}

id sub_1000517A0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 position];
  *a2 = v4;
  a2[1] = v5;
  return result;
}

id sub_1000517D0(double *a1, id *a2)
{
  return objc_msgSend(*a2, "setPosition:", *a1, a1[1]);
}

uint64_t destroy for SplashScreenButtonStyle(void *a1)
{
  return swift_release(a1[1]);
}

uint64_t *_s8FaceTime23SplashScreenButtonStyleVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for SplashScreenButtonStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

void *assignWithTake for SplashScreenButtonStyle(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SplashScreenButtonStyle(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SplashScreenButtonStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)id result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)id result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SplashScreenButtonStyle()
{
  return &type metadata for SplashScreenButtonStyle;
}

uint64_t sub_100051978(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E7F14, 1LL);
}

uint64_t sub_100051988()
{
  uint64_t v1 = type metadata accessor for ButtonStyleConfiguration.Label(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v15[-2] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100018A04(&qword_1001142F8);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  double v9 = (char *)&v15[-2] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  ButtonStyleConfiguration.label.getter(v7);
  uint64_t v10 = sub_10001949C( &qword_100114300,  (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label,  (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
  __int128 v14 = *v0;
  View.hoverable()(v1, v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v16[0] = v14;
  v16[1] = xmmword_1000C5850;
  uint64_t v17 = 0x4010000000000000LL;
  v15[0] = v1;
  v15[1] = v10;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2( v15,  &opaque type descriptor for <<opaque return type of View.hoverable()>>,  1LL);
  unint64_t v12 = sub_100051B0C();
  View.hoverStyle<A>(_:)(v16, v5, &type metadata for SplashScreenLiftHoverStyle, OpaqueTypeConformance2, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t sub_100051B0C()
{
  unint64_t result = qword_100114308;
  if (!qword_100114308)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000C58DC, &type metadata for SplashScreenLiftHoverStyle);
    atomic_store(result, (unint64_t *)&qword_100114308);
  }

  return result;
}

uint64_t initializeWithCopy for SplashScreenLiftHoverStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = a2[2];
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for SplashScreenLiftHoverStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

__n128 initializeWithTake for SplashScreenLiftHoverStyle(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SplashScreenLiftHoverStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SplashScreenLiftHoverStyle(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SplashScreenLiftHoverStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SplashScreenLiftHoverStyle()
{
  return &type metadata for SplashScreenLiftHoverStyle;
}

uint64_t sub_100051D08()
{
  uint64_t v0 = sub_10001C334(&qword_1001142F8);
  uint64_t v4 = type metadata accessor for ButtonStyleConfiguration.Label(255LL);
  uint64_t v5 = (ValueMetadata *)sub_10001949C( &qword_100114300,  (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label,  (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2( &v4,  &opaque type descriptor for <<opaque return type of View.hoverable()>>,  1LL);
  unint64_t v2 = sub_100051B0C();
  uint64_t v4 = v0;
  uint64_t v5 = &type metadata for SplashScreenLiftHoverStyle;
  uint64_t v6 = OpaqueTypeConformance2;
  unint64_t v7 = v2;
  return swift_getOpaqueTypeConformance2( &v4,  &opaque type descriptor for <<opaque return type of View.hoverStyle<A>(_:)>>,  1LL);
}

uint64_t sub_100051DA4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E7F58, 1LL);
}

CGFloat sub_100051DB4@<D0>( char a1@<W0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>)
{
  uint64_t v13 = a1 & 1;
  int v14 = Axis.rawValue.getter(v13);
  else {
    double v15 = a4;
  }
  int v16 = Axis.rawValue.getter(v13);
  else {
    double v17 = a4;
  }
  double v18 = (v15 + a5) / v17;
  if (fabs(v18) >= 0.01) {
    double v19 = v18;
  }
  else {
    double v19 = 2.10953732e-154;
  }
  CGFloat v20 = a4 * a7;
  CGFloat v21 = a3 * a6;
  CGAffineTransformMakeTranslation(&t1, -(a3 * a6), -(a4 * a7));
  __int128 v35 = *(_OWORD *)&t1.c;
  __int128 v37 = *(_OWORD *)&t1.a;
  CGFloat tx = t1.tx;
  CGFloat ty = t1.ty;
  CGAffineTransformMakeScale(&t1, v19, v19);
  __int128 v24 = *(_OWORD *)&t1.a;
  __int128 v25 = *(_OWORD *)&t1.c;
  __int128 v26 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v37;
  *(_OWORD *)&t1.c = v35;
  t1.CGFloat tx = tx;
  t1.CGFloat ty = ty;
  *(_OWORD *)&t2.a = v24;
  *(_OWORD *)&t2.c = v25;
  *(_OWORD *)&t2.CGFloat tx = v26;
  CGAffineTransformConcat(&v39, &t1, &t2);
  __int128 v36 = *(_OWORD *)&v39.c;
  __int128 v38 = *(_OWORD *)&v39.a;
  CGFloat v27 = v39.tx;
  CGFloat v28 = v39.ty;
  CGAffineTransformMakeTranslation(&t1, v21, v20);
  __int128 v29 = *(_OWORD *)&t1.a;
  __int128 v30 = *(_OWORD *)&t1.c;
  __int128 v31 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v38;
  *(_OWORD *)&t1.c = v36;
  t1.CGFloat tx = v27;
  t1.CGFloat ty = v28;
  *(_OWORD *)&t2.a = v29;
  *(_OWORD *)&t2.c = v30;
  *(_OWORD *)&t2.CGFloat tx = v31;
  CGAffineTransformConcat(&v39, &t1, &t2);
  CGFloat result = v39.a;
  __int128 v33 = *(_OWORD *)&v39.c;
  __int128 v34 = *(_OWORD *)&v39.tx;
  *(_OWORD *)a2 = *(_OWORD *)&v39.a;
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = 0LL;
  *(_OWORD *)(a2 + 24) = v33;
  *(void *)(a2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = 0LL;
  *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v34;
  *(void *)(a2 + 64) = 0x3FF0000000000000LL;
  return result;
}

__n128 sub_100051F50@<Q0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  __int128 v5 = v7[3];
  *(_OWORD *)(a1 + 32) = v7[2];
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v5;
  *(void *)(a1 + 64) = v8;
  __n128 result = (__n128)v7[1];
  *(_OWORD *)a1 = v7[0];
  *(__n128 *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

uint64_t sub_100051FAC(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2
    && (double v2 = *(double *)(a1 + 16),
        double v3 = *(double *)(a1 + 24),
        double v4 = *(double *)(a2 + 16),
        double v5 = *(double *)(a2 + 24),
        uint64_t v6 = *(unsigned __int8 *)(a2 + 8),
        int v7 = Axis.rawValue.getter(*(unsigned __int8 *)(a1 + 8)),
        v7 == Axis.rawValue.getter(v6)))
  {
    return static UnitPoint.== infix(_:_:)(v2, v3, v4, v5);
  }

  else
  {
    return 0LL;
  }

void sub_100052034(uint64_t a1@<X8>)
{
  double v3 = *(double *)(v1 + 16);
  double v4 = *(double *)(v1 + 24);
  unint64_t v5 = sub_100052C1C();
  unint64_t v6 = sub_100052C60();
  int v7 = Animatable<>.animatableData.getter(&v11, &type metadata for CGFloat, v5, v6);
  uint64_t v8 = v11;
  double v9 = UnitPoint.animatableData.getter(v7, v3, v4);
  *(void *)a1 = v8;
  *(double *)(a1 + _Block_object_dispose(va, 8) = v9;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v10;
}

uint64_t sub_1000520BC(double *a1)
{
  double v1 = a1[1];
  double v2 = a1[2];
  double v6 = *a1;
  unint64_t v3 = sub_100052C1C();
  unint64_t v4 = sub_100052C60();
  Animatable<>.animatableData.setter(&v6, &type metadata for CGFloat, v3, v4);
  return UnitPoint.animatableData.setter(v1, v2);
}

void (*sub_100052124(double **a1))(void **a1)
{
  unint64_t v3 = (double *)malloc(0x40uLL);
  *a1 = v3;
  *((void *)v3 + 5) = v1;
  double v4 = v1[2];
  double v5 = v1[3];
  v3[4] = *v1;
  unint64_t v6 = sub_100052C1C();
  *((void *)v3 + 6) = v6;
  unint64_t v7 = sub_100052C60();
  *((void *)v3 + 7) = v7;
  uint64_t v8 = Animatable<>.animatableData.getter((void *)v3 + 3, &type metadata for CGFloat, v6, v7);
  uint64_t v9 = *((void *)v3 + 3);
  double v10 = UnitPoint.animatableData.getter(v8, v4, v5);
  *(void *)unint64_t v3 = v9;
  v3[1] = v10;
  *((void *)v3 + 2) = v11;
  return sub_1000521D0;
}

void sub_1000521D0(void **a1)
{
  double v2 = *((double *)*a1 + 1);
  double v3 = *((double *)*a1 + 2);
  uint64_t v4 = (*a1)[6];
  uint64_t v5 = (*a1)[7];
  double v1 = *a1;
  v1[3] = **a1;
  Animatable<>.animatableData.setter(v1 + 3, &type metadata for CGFloat, v4, v5);
  UnitPoint.animatableData.setter(v2, v3);
  free(v1);
}

uint64_t sub_10005223C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_100052CA4();
  return static GeometryEffect._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t sub_1000522A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_100052CA4();
  return static GeometryEffect._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t sub_10005230C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_100052CA4();
  return static GeometryEffect._viewListCount(inputs:body:)(a1, a2, a3, a4, v8);
}

void sub_100052364()
{
}

uint64_t sub_100052374@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v49 = a1;
  uint64_t v46 = sub_100018A04(&qword_100114310);
  __chkstk_darwin(v46);
  uint64_t v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = sub_100018A04(&qword_100114318);
  __chkstk_darwin(v47);
  unint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = sub_100018A04(&qword_100114320);
  __chkstk_darwin(v48);
  unint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for HoverStyleConfiguration.Phase(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = HoverStyleConfiguration.phase.getter(v11);
  char v15 = HoverStyleConfiguration.Phase.isActive.getter(v14);
  int v16 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  uint64_t v17 = v16(v13, v9);
  uint64_t v18 = HoverStyleConfiguration.phase.getter(v17);
  double v19 = HoverStyleConfiguration.Phase.unitHoverOffset.getter(v18);
  uint64_t v20 = v16(v13, v9);
  double v22 = *(double *)(v1 + 24);
  double v21 = *(double *)(v1 + 32);
  uint64_t v23 = HoverStyleConfiguration.phase.getter(v20);
  double v24 = HoverStyleConfiguration.Phase.unitHoverOffset.getter(v23);
  double v26 = v25;
  uint64_t v27 = ((uint64_t (*)(char *, uint64_t, double))v16)(v13, v9, v24);
  uint64_t v28 = HoverStyleConfiguration.phase.getter(v27);
  char v29 = HoverStyleConfiguration.Phase.isPressed.getter(v28);
  uint64_t v30 = v16(v13, v9);
  if ((v29 & 1) != 0) {
    double v31 = *(double *)(v2 + 16) * 0.5;
  }
  else {
    double v31 = *(double *)(v2 + 16);
  }
  double v32 = v21 * v26;
  double v33 = v19 * v22;
  uint64_t v34 = HoverStyleConfiguration.content.getter(v30);
  uint64_t v35 = static Alignment.center.getter(v34);
  uint64_t v37 = v36;
  __int128 v38 = &v4[*(int *)(v46 + 36)];
  if ((v15 & 1) == 0) {
    double v31 = 1.0;
  }
  sub_10005265C(v15 & 1, v2, (uint64_t)&v4[*(int *)(v46 + 36)]);
  CGAffineTransform v39 = (uint64_t *)&v38[*(int *)(sub_100018A04(&qword_100114328) + 36)];
  *CGAffineTransform v39 = v35;
  v39[1] = v37;
  double v40 = static UnitPoint.center.getter();
  uint64_t v42 = v41;
  sub_10001C3B8((uint64_t)v4, (uint64_t)v6, &qword_100114310);
  uint64_t v43 = &v6[*(int *)(v47 + 36)];
  *(double *)uint64_t v43 = v31;
  v43[8] = 0;
  *((double *)v43 + 2) = v40;
  *((void *)v43 + 3) = v42;
  sub_10001C608((uint64_t)v4, &qword_100114310);
  sub_10001C3B8((uint64_t)v6, (uint64_t)v8, &qword_100114318);
  double v44 = (double *)&v8[*(int *)(v48 + 36)];
  *double v44 = v33;
  v44[1] = v32;
  sub_10001C608((uint64_t)v6, &qword_100114318);
  return sub_100052900((uint64_t)v8, v49, &qword_100114320);
}

uint64_t sub_10005265C@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100018A04(&qword_100114330);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for RoundedRectangle(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (_OWORD *)((char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = sub_100018A04(&qword_100114338);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = 8LL;
  if ((a1 & 1) == 0) {
    uint64_t v15 = 0LL;
  }
  uint64_t v16 = *(void *)(a2 + v15);
  __n128 v17 = swift_retain(v16);
  uint64_t v18 = (char *)v11 + *(int *)(v9 + 20);
  uint64_t v19 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v20 = type metadata accessor for RoundedCornerStyle(0LL, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104LL))(v18, v19, v20);
  __asm { FMOV            V0.2D, #12.0 }

  _OWORD *v11 = _Q0;
  sub_100052880((uint64_t)v11, (uint64_t)v8);
  *(_WORD *)&v8[*(int *)(v6 + 36)] = 256;
  sub_10001C3B8((uint64_t)v8, (uint64_t)&v14[*(int *)(v12 + 36)], &qword_100114330);
  *(void *)uint64_t v14 = v16;
  *((_WORD *)v14 + 4) = 256;
  *((void *)v14 + 2) = sub_100052824;
  *((void *)v14 + 3) = 0LL;
  swift_retain(v16);
  sub_10001C608((uint64_t)v8, &qword_100114330);
  sub_1000528C4((uint64_t)v11);
  swift_release(v16);
  return sub_100052900((uint64_t)v14, a3, &qword_100114338);
}

uint64_t sub_100052824()
{
  return Transaction.animation.setter(0LL);
}

uint64_t sub_100052848@<X0>(uint64_t a1@<X8>)
{
  return sub_100052374(a1);
}

uint64_t sub_100052880(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoundedRectangle(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000528C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RoundedRectangle(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100052900(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100018A04(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

__n128 initializeWithCopy for SplashScreenLiftHoverStyle.HoverScaleEffect(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for SplashScreenLiftHoverStyle.HoverScaleEffect(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SplashScreenLiftHoverStyle.HoverScaleEffect( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 32) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + _Block_object_dispose(va, 8) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SplashScreenLiftHoverStyle.HoverScaleEffect()
{
  return &type metadata for SplashScreenLiftHoverStyle.HoverScaleEffect;
}

unint64_t sub_1000529EC()
{
  unint64_t result = qword_100114340;
  if (!qword_100114340)
  {
    uint64_t v1 = sub_10001C334(&qword_100114320);
    sub_100052A58();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114340);
  }

  return result;
}

unint64_t sub_100052A58()
{
  unint64_t result = qword_100114348;
  if (!qword_100114348)
  {
    uint64_t v1 = sub_10001C334(&qword_100114318);
    sub_100052AC4();
    sub_100052B60();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114348);
  }

  return result;
}

unint64_t sub_100052AC4()
{
  unint64_t result = qword_100114350;
  if (!qword_100114350)
  {
    uint64_t v1 = sub_10001C334(&qword_100114310);
    sub_10001949C( &qword_100114358,  (uint64_t (*)(uint64_t))&type metadata accessor for HoverStyleConfiguration.Content,  (uint64_t)&protocol conformance descriptor for HoverStyleConfiguration.Content);
    sub_100022750( &qword_100114360,  &qword_100114328,  (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114350);
  }

  return result;
}

unint64_t sub_100052B60()
{
  unint64_t result = qword_100114368;
  if (!qword_100114368)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000C5934, &type metadata for SplashScreenLiftHoverStyle.HoverScaleEffect);
    atomic_store(result, (unint64_t *)&qword_100114368);
  }

  return result;
}

uint64_t sub_100052BA4()
{
  return sub_100022750( &qword_100114370,  &qword_100114378,  (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
}

unint64_t sub_100052BD4()
{
  unint64_t result = qword_100114380;
  if (!qword_100114380)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000C5984, &type metadata for SplashScreenLiftHoverStyle.HoverScaleEffect);
    atomic_store(result, (unint64_t *)&qword_100114380);
  }

  return result;
}

unint64_t sub_100052C1C()
{
  unint64_t result = qword_100114388;
  if (!qword_100114388)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100114388);
  }

  return result;
}

unint64_t sub_100052C60()
{
  unint64_t result = qword_100114390;
  if (!qword_100114390)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100114390);
  }

  return result;
}

unint64_t sub_100052CA4()
{
  unint64_t result = qword_100114398;
  if (!qword_100114398)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000C59FC, &type metadata for SplashScreenLiftHoverStyle.HoverScaleEffect);
    atomic_store(result, (unint64_t *)&qword_100114398);
  }

  return result;
}

id sub_100052DC8(uint64_t a1, uint64_t a2)
{
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for AppDelegate(a1, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for AppDelegate(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime11AppDelegate, a2);
}

uint64_t sub_100052E18()
{
  id v0 = [objc_allocWithZone(TUFeatureFlags) init];
  unsigned int v1 = [v0 lagunaEnabled];

  if (v1)
  {
    if (qword_100112380 != -1) {
      swift_once(&qword_100112380, sub_100080AF0);
    }
    if (qword_1001122A0 != -1) {
      swift_once(&qword_1001122A0, sub_10004CB40);
    }
    if (qword_100112228 != -1) {
      swift_once(&qword_100112228, sub_1000312A4);
    }
    if (qword_100112240 != -1) {
      swift_once(&qword_100112240, sub_10003B8E8);
    }
    if (qword_1001123B8 != -1) {
      swift_once(&qword_1001123B8, sub_100089A38);
    }
    if (qword_100112310 != -1) {
      swift_once(&qword_100112310, sub_100070174);
    }
    if (qword_1001121F8 != -1) {
      swift_once(&qword_1001121F8, sub_10002B18C);
    }
    if (qword_1001121D8 != -1) {
      swift_once(&qword_1001121D8, sub_10001D138);
    }
    if (qword_100112370 != -1) {
      swift_once(&qword_100112370, sub_100079BAC);
    }
  }

  type metadata accessor for ScreenSharingStateMonitor(0LL);

  if (_TUIsInternalInstall())
  {
    id v3 = objc_msgSend((id)objc_opt_self(NSUserDefaults, v2), "standardUserDefaults");
    NSString v4 = String._bridgeToObjectiveC()();
    uint64_t v5 = (uint64_t)[v3 BOOLForKey:v4 withDefault:1];
  }

  else
  {
    uint64_t v5 = 1LL;
  }

  uint64_t v6 = (void *)objc_opt_self(&OBJC_CLASS___TUCallCenter, v2);
  id v7 = [v6 sharedInstance];
  id v8 = [v7 callServicesClientCapabilities];

  [v8 setWantsCallDisconnectionOnInvalidation:v5];
  id v9 = [v6 sharedInstance];
  id v10 = [v9 callServicesClientCapabilities];

  [v10 setWantsFrequencyChangeNotifications:v5];
  id v11 = [v6 sharedInstance];
  id v12 = [v11 callServicesClientCapabilities];

  [v12 save];
  return 1LL;
}

unint64_t sub_100053154()
{
  unint64_t result = qword_100112A50;
  if (!qword_100112A50)
  {
    type metadata accessor for LaunchOptionsKey(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000C4A88, v1);
    atomic_store(result, (unint64_t *)&qword_100112A50);
  }

  return result;
}

uint64_t sub_10005319C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_100114430);
  sub_10001C270(v0, (uint64_t)qword_100114430);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0x6C6544656E656353LL,  0xED00006574616765LL);
}

void sub_100053260(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = (char *)sub_1000B3A58(a1);
  id v6 = [objc_allocWithZone(UIWindow) initWithWindowScene:a3];
  uint64_t v7 = OBJC_IVAR____TtC8FaceTime13SceneDelegate_window;
  id v8 = *(void **)(a2 + OBJC_IVAR____TtC8FaceTime13SceneDelegate_window);
  *(void *)(a2 + OBJC_IVAR____TtC8FaceTime13SceneDelegate_window) = v6;

  id v9 = *(void **)(a2 + v7);
  if (v9)
  {
    [v9 setRootViewController:v16];
    id v10 = *(void **)(a2 + v7);
    if (v10) {
      [v10 setHidden:0];
    }
  }

  uint64_t v11 = *(void *)(*(void *)(a2 + OBJC_IVAR____TtC8FaceTime13SceneDelegate_callManager)
                  + OBJC_IVAR____TtC8FaceTime14ATVCallManager_videoPresentationStateCoordinator);
  if (v11)
  {
    id v12 = *(void **)&v16[OBJC_IVAR____TtC8FaceTime27SplitViewCallViewController_multiwayViewController];
    uint64_t v13 = *(void **)(v11 + 32);
    *(void *)(v11 + 32) = v12;
    uint64_t v14 = v12;
    swift_retain(v11);

    sub_1000864E4();
    swift_release(v11);

    uint64_t v15 = v14;
  }

  else
  {
    uint64_t v15 = v16;
  }
}

void sub_100053388(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04((uint64_t *)&unk_1001148A0);
  __chkstk_darwin(v4);
  id v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100054174(a1, (uint64_t)v6);
  uint64_t v7 = type metadata accessor for ActiveCallContext(0LL);
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7);
  sub_10001C608((uint64_t)v6, (uint64_t *)&unk_1001148A0);
  if ((_DWORD)a1 == 1)
  {
    id v8 = *(void **)(a2 + OBJC_IVAR____TtC8FaceTime13SceneDelegate_window);
    if (v8) {
      [v8 setRootViewController:0];
    }
    UIScene.dismissScene()();
  }

void sub_1000534E4(void *a1)
{
  uint64_t v2 = v1;
  id v3 = [a1 session];
  id v4 = [v3 role];

  uint64_t v5 = PBSUIWindowSceneSessionRoleCompact;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v8 = v7;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  if (v6 == v9 && v8 == v10)
  {

    swift_bridgeObjectRelease_n(v8, 2LL);
  }

  else
  {
    uint64_t v12 = v10;
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v9, v10, 0LL);

    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v12);
    if ((v13 & 1) == 0) {
      return;
    }
  }

  uint64_t v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC8FaceTime13SceneDelegate_observerCancellables);
  swift_beginAccess(v2 + OBJC_IVAR____TtC8FaceTime13SceneDelegate_observerCancellables, v23, 1LL, 0LL);
  uint64_t v15 = *v14;
  if ((unint64_t)*v14 >> 62)
  {
    if (v15 < 0) {
      uint64_t v19 = *v14;
    }
    else {
      uint64_t v19 = v15 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain_n(*v14, 2LL);
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v19);
    if (v16) {
      goto LABEL_10;
    }
  }

  else
  {
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain_n(*v14, 2LL);
    if (v16)
    {
LABEL_10:
      if (v16 < 1)
      {
        __break(1u);
        return;
      }

      for (uint64_t i = 0LL; i != v16; ++i)
      {
        if ((v15 & 0xC000000000000001LL) != 0)
        {
          uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v15);
        }

        else
        {
          uint64_t v18 = *(void *)(v15 + 8 * i + 32);
          swift_retain(v18);
        }

        AnyCancellable.cancel()();
        swift_release(v18);
      }
    }
  }

  swift_bridgeObjectRelease_n(v15, 2LL);
  uint64_t v20 = *v14;
  uint64_t *v14 = (uint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = *(void *)(*(void *)(v2 + OBJC_IVAR____TtC8FaceTime13SceneDelegate_callManager)
                  + OBJC_IVAR____TtC8FaceTime14ATVCallManager_videoPresentationStateCoordinator);
  if (v21)
  {
    double v22 = *(void **)(v21 + 32);
    *(void *)(v21 + 32) = 0LL;
    swift_retain(v21);

    sub_1000864E4();
    swift_release(v21);
  }

id sub_1000537F4(uint64_t a1, uint64_t a2)
{
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for SceneDelegate(a1, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for SceneDelegate(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime13SceneDelegate, a2);
}

void sub_10005388C(void *a1, void *a2)
{
  uint64_t v4 = sub_100018A04((uint64_t *)&unk_100113480);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t isEscapingClosureAtFileLocation = sub_100018A04((uint64_t *)&unk_1001130A0);
  uint64_t v8 = *(void *)(isEscapingClosureAtFileLocation - 8);
  __chkstk_darwin(isEscapingClosureAtFileLocation);
  uint64_t v10 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100018A04((uint64_t *)&unk_1001148A0);
  __chkstk_darwin(v11);
  char v13 = (id *)((char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v14 = [a2 role];
  uint64_t v15 = PBSUIWindowSceneSessionRoleCompact;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  uint64_t v18 = v17;
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  if (v16 == v19 && v18 == v20)
  {

    swift_bridgeObjectRelease_n(v18, 2LL);
  }

  else
  {
    uint64_t v22 = v20;
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v19, v20, 0LL);

    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v22);
    if ((v23 & 1) == 0) {
      return;
    }
  }

  uint64_t v25 = objc_opt_self(&OBJC_CLASS___UIWindowScene, v24);
  uint64_t v26 = swift_dynamicCastObjCClass(a1, v25);
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t v28 = *(uint64_t *)((char *)v93 + OBJC_IVAR____TtC8FaceTime13SceneDelegate_callManager);
    uint64_t v29 = OBJC_IVAR____TtC8FaceTime14ATVCallManager_activeCallSubject;
    uint64_t v30 = *(void *)(v28 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_activeCallSubject);
    id v31 = a1;
    swift_retain(v30);
    CurrentValueSubject.value.getter(v32);
    swift_release(v30);
    uint64_t v33 = type metadata accessor for ActiveCallContext(0LL);
    if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48LL))(v13, 1LL, v33) == 1)
    {
      sub_10001C608((uint64_t)v13, (uint64_t *)&unk_1001148A0);
      if (qword_1001122A8 != -1) {
        swift_once(&qword_1001122A8, sub_10005319C);
      }
      uint64_t v34 = type metadata accessor for Logger(0LL);
      uint64_t v35 = sub_10001C270(v34, (uint64_t)qword_100114430);
      uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        __int128 v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)__int128 v38 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "Asked to connect to a compact scene role with no active call - requesting scene dismissal",  v38,  2u);
        swift_slowDealloc(v38, -1LL, -1LL);
      }

      UIScene.dismissScene()();
    }

    else
    {
      uint64_t v88 = v29;
      uint64_t v89 = v28;
      id v44 = *v13;
      sub_10005409C((uint64_t)v13);
      if (qword_1001122A8 != -1) {
        goto LABEL_27;
      }
      while (1)
      {
        uint64_t v45 = type metadata accessor for Logger(0LL);
        sub_10001C270(v45, (uint64_t)qword_100114430);
        uint64_t v46 = (void **)v44;
        uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
        os_log_type_t v48 = static os_log_type_t.default.getter();
        BOOL v49 = os_log_type_enabled(v47, v48);
        uint64_t v91 = v8;
        uint64_t v92 = isEscapingClosureAtFileLocation;
        uint64_t v90 = v10;
        if (v49)
        {
          uint64_t v50 = swift_slowAlloc(12LL, -1LL);
          uint64_t v87 = v27;
          Swift::Double_optional v51 = (uint8_t *)v50;
          uint64_t v52 = swift_slowAlloc(8LL, -1LL);
          id v86 = v31;
          uint64_t v53 = (void *)v52;
          *(_DWORD *)Swift::Double_optional v51 = 138412290;
          aBlock = v46;
          uint64_t v54 = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v96, v51 + 4, v51 + 12);
          *uint64_t v53 = v46;

          _os_log_impl((void *)&_mh_execute_header, v47, v48, "Connecting to Split View scene for call: %@", v51, 0xCu);
          uint64_t v55 = sub_100018A04((uint64_t *)&unk_100112E20);
          swift_arrayDestroy(v53, 1LL, v55);
          uint64_t v56 = v53;
          id v31 = v86;
          swift_slowDealloc(v56, -1LL, -1LL);
          uint64_t v57 = v51;
          uint64_t v27 = v87;
          swift_slowDealloc(v57, -1LL, -1LL);
        }

        else
        {

          uint64_t v47 = (os_log_s *)v46;
        }

        id v44 = (id)objc_opt_self(&OBJC_CLASS___UIView, v58);
        unint64_t v59 = (void *)swift_allocObject(&unk_1000F98D8, 40LL, 7LL);
        os_log_type_t v60 = v93;
        v59[2] = v46;
        v59[3] = v60;
        v59[4] = v27;
        uint64_t v61 = swift_allocObject(&unk_1000F9900, 32LL, 7LL);
        *(void *)(v61 + swift_weakDestroy(v0 + 16) = sub_10005410C;
        *(void *)(v61 + 24) = v59;
        _OWORD v96[3] = sub_10001C698;
        uint64_t v97 = v61;
        aBlock = _NSConcreteStackBlock;
        v96[0] = 1107296256LL;
        v96[1] = sub_1000983FC;
        v96[2] = &unk_1000F9918;
        uint64_t v62 = _Block_copy(&aBlock);
        uint64_t v8 = v97;
        id v31 = v31;
        uint64_t v63 = v46;
        uint64_t v10 = v60;
        swift_retain(v61);
        swift_release(v8);
        [v44 performWithoutAnimation:v62];
        _Block_release(v62);
        uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v61, "", 80LL, 53LL, 40LL, 1LL);
        swift_release(v61);
        if ((isEscapingClosureAtFileLocation & 1) == 0) {
          break;
        }
        __break(1u);
LABEL_27:
        swift_once(&qword_1001122A8, sub_10005319C);
      }

      aBlock = *(void ***)(v89 + v88);
      uint64_t v65 = aBlock;
      unint64_t v66 = sub_100039D4C(0LL, v64);
      __n128 v67 = swift_retain(v65);
      id v94 = (id)static OS_dispatch_queue.main.getter(v67);
      uint64_t v69 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL, v68);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56LL))(v6, 1LL, 1LL, v69);
      uint64_t v70 = sub_100018A04((uint64_t *)&unk_100114910);
      Swift::String v93 = v63;
      uint64_t v71 = v27;
      uint64_t v72 = v70;
      uint64_t v73 = sub_100022750( (unint64_t *)&unk_1001130B0,  (uint64_t *)&unk_100114910,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
      unint64_t v74 = sub_10003862C();
      uint64_t v75 = v90;
      Publisher.receive<A>(on:options:)(&v94, v6, v72, v66, v73, v74);
      sub_10001C608((uint64_t)v6, (uint64_t *)&unk_100113480);

      swift_release(aBlock);
      uint64_t v76 = swift_allocObject(&unk_1000F9950, 32LL, 7LL);
      *(void *)(v76 + swift_weakDestroy(v0 + 16) = v10;
      *(void *)(v76 + 24) = v71;
      uint64_t v77 = sub_100022750( (unint64_t *)&unk_1001130C0,  (uint64_t *)&unk_1001130A0,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      id v78 = v31;
      uint64_t v79 = v10;
      uint64_t v80 = v92;
      uint64_t v81 = Publisher<>.sink(receiveValue:)(sub_10005416C, v76, v92, v77);
      swift_release(v76);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v75, v80);
      id v82 = &v79[OBJC_IVAR____TtC8FaceTime13SceneDelegate_observerCancellables];
      swift_beginAccess(&v79[OBJC_IVAR____TtC8FaceTime13SceneDelegate_observerCancellables], &aBlock, 33LL, 0LL);
      uint64_t v83 = sub_100018A04(&qword_100114200);
      uint64_t v84 = sub_100022750(&qword_1001130D0, &qword_100114200, (uint64_t)&protocol conformance descriptor for [A]);
      AnyCancellable.store<A>(in:)(v82, v83, v84);
      swift_endAccess(&aBlock);
      swift_release(v59);

      swift_release(v81);
    }
  }

  else
  {
    if (qword_1001122A8 != -1) {
      swift_once(&qword_1001122A8, sub_10005319C);
    }
    uint64_t v39 = type metadata accessor for Logger(0LL);
    uint64_t v40 = sub_10001C270(v39, (uint64_t)qword_100114430);
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "Received a non-UIWindowScene with a compact role - requesting scene dismissal",  v43,  2u);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    UIScene.dismissScene()();
  }

uint64_t sub_10005409C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ActiveCallContext(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000540D8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10005410C()
{
}

uint64_t sub_100054118()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100054128(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100054138(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100054140()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10005416C(uint64_t a1)
{
}

uint64_t sub_100054174(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04((uint64_t *)&unk_1001148A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void **sub_1000541BC(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void **)&v4[(v3 + 16LL) & ~(unint64_t)v3];
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (void **)((char *)a1 + v8);
    uint64_t v10 = (void **)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for JoinCallContext(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    char v13 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48);
    id v14 = v4;
    if (v13(v10, 1LL, v11))
    {
      uint64_t v15 = sub_100018A04((uint64_t *)&unk_100113110);
      memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    }

    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v11);
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v22 = type metadata accessor for IncomingHandoffContext(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16LL))(v9, v10, v22);
        swift_storeEnumTagMultiPayload(v9, v11, 1LL);
      }

      else if (EnumCaseMultiPayload)
      {
        memcpy(v9, v10, *(void *)(v12 + 64));
      }

      else
      {
        void *v9 = *v10;
        uint64_t v17 = type metadata accessor for OutgoingCallContext(0LL);
        uint64_t v18 = *(int *)(v17 + 20);
        uint64_t v19 = (char *)v9 + v18;
        uint64_t v20 = (char *)v10 + v18;
        uint64_t v21 = type metadata accessor for CallType(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16LL))(v19, v20, v21);
        *((_BYTE *)v9 + *(int *)(v17 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)v10 + *(int *)(v17 + 24));
        swift_storeEnumTagMultiPayload(v9, v11, 0LL);
      }

      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
    }

    *((_BYTE *)v7 + *(int *)(a3 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }

  return v7;
}

uint64_t type metadata accessor for JoinCallContext(uint64_t a1)
{
  return sub_100020F70(a1, qword_1001146F0, (uint64_t)&nominal type descriptor for JoinCallContext);
}

uint64_t type metadata accessor for OutgoingCallContext(uint64_t a1)
{
  return sub_100020F70(a1, qword_100114640, (uint64_t)&nominal type descriptor for OutgoingCallContext);
}

uint64_t sub_100054398(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for JoinCallContext(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v4, 1LL, v5);
  if (!(_DWORD)result)
  {
    uint64_t result = swift_getEnumCaseMultiPayload(v4, v5);
    if ((_DWORD)result == 1)
    {
      uint64_t v7 = type metadata accessor for IncomingHandoffContext(0LL);
    }

    else
    {
      if ((_DWORD)result) {
        return result;
      }
      v4 += *(int *)(type metadata accessor for OutgoingCallContext(0LL) + 20);
      uint64_t v7 = type metadata accessor for CallType(0LL);
    }

    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v4, v7);
  }

  return result;
}

void **sub_100054448(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void **)((char *)a1 + v7);
  uint64_t v9 = (void **)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for JoinCallContext(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48);
  id v13 = v6;
  if (v12(v9, 1LL, v10))
  {
    uint64_t v14 = sub_100018A04((uint64_t *)&unk_100113110);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v21 = type metadata accessor for IncomingHandoffContext(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16LL))(v8, v9, v21);
      swift_storeEnumTagMultiPayload(v8, v10, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(v8, v9, *(void *)(v11 + 64));
    }

    else
    {
      *uint64_t v8 = *v9;
      uint64_t v16 = type metadata accessor for OutgoingCallContext(0LL);
      uint64_t v17 = *(int *)(v16 + 20);
      uint64_t v18 = (char *)v8 + v17;
      uint64_t v19 = (char *)v9 + v17;
      uint64_t v20 = type metadata accessor for CallType(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16LL))(v18, v19, v20);
      *((_BYTE *)v8 + *(int *)(v16 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)v9 + *(int *)(v16 + 24));
      swift_storeEnumTagMultiPayload(v8, v10, 0LL);
    }

    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  *((_BYTE *)a1 + *(int *)(a3 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

void **sub_1000545D4(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (void **)((char *)a1 + v9);
  uint64_t v11 = (void **)((char *)a2 + v9);
  uint64_t v12 = type metadata accessor for JoinCallContext(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (!v15)
  {
    if (!v16)
    {
      if (a1 == a2) {
        goto LABEL_17;
      }
      sub_10001C644((uint64_t)v10, type metadata accessor for JoinCallContext);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v12);
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v32 = type metadata accessor for IncomingHandoffContext(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v32 - 8) + 16LL))(v10, v11, v32);
        swift_storeEnumTagMultiPayload(v10, v12, 1LL);
        goto LABEL_17;
      }

      if (!EnumCaseMultiPayload)
      {
        *uint64_t v10 = *v11;
        uint64_t v25 = type metadata accessor for OutgoingCallContext(0LL);
        uint64_t v26 = *(int *)(v25 + 20);
        uint64_t v27 = (char *)v10 + v26;
        uint64_t v28 = (char *)v11 + v26;
        uint64_t v29 = type metadata accessor for CallType(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16LL))(v27, v28, v29);
        *((_BYTE *)v10 + *(int *)(v25 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)v11 + *(int *)(v25 + 24));
        swift_storeEnumTagMultiPayload(v10, v12, 0LL);
        goto LABEL_17;
      }

      size_t v23 = *(void *)(v13 + 64);
      goto LABEL_9;
    }

    sub_10001C644((uint64_t)v10, type metadata accessor for JoinCallContext);
LABEL_8:
    size_t v23 = *(void *)(*(void *)(sub_100018A04((uint64_t *)&unk_100113110) - 8) + 64LL);
LABEL_9:
    memcpy(v10, v11, v23);
    goto LABEL_17;
  }

  if (v16) {
    goto LABEL_8;
  }
  int v17 = swift_getEnumCaseMultiPayload(v11, v12);
  if (v17 == 1)
  {
    uint64_t v30 = type metadata accessor for IncomingHandoffContext(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v30 - 8) + 16LL))(v10, v11, v30);
    swift_storeEnumTagMultiPayload(v10, v12, 1LL);
  }

  else if (v17)
  {
    memcpy(v10, v11, *(void *)(v13 + 64));
  }

  else
  {
    *uint64_t v10 = *v11;
    uint64_t v18 = type metadata accessor for OutgoingCallContext(0LL);
    uint64_t v19 = *(int *)(v18 + 20);
    uint64_t v20 = (char *)v10 + v19;
    uint64_t v21 = (char *)v11 + v19;
    uint64_t v22 = type metadata accessor for CallType(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16LL))(v20, v21, v22);
    *((_BYTE *)v10 + *(int *)(v18 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)v11 + *(int *)(v18 + 24));
    swift_storeEnumTagMultiPayload(v10, v12, 0LL);
  }

  (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
LABEL_17:
  *((_BYTE *)a1 + *(int *)(a3 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_100054860(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)((char *)a1 + v6);
  id v8 = (void *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for JoinCallContext(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = sub_100018A04((uint64_t *)&unk_100113110);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v9);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v18 = type metadata accessor for IncomingHandoffContext(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v7, v8, v18);
      swift_storeEnumTagMultiPayload(v7, v9, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(v7, v8, *(void *)(v10 + 64));
    }

    else
    {
      *uint64_t v7 = *v8;
      uint64_t v13 = type metadata accessor for OutgoingCallContext(0LL);
      uint64_t v14 = *(int *)(v13 + 20);
      int v15 = (char *)v7 + v14;
      int v16 = (char *)v8 + v14;
      uint64_t v17 = type metadata accessor for CallType(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32LL))(v15, v16, v17);
      *((_BYTE *)v7 + *(int *)(v13 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)v8 + *(int *)(v13 + 24));
      swift_storeEnumTagMultiPayload(v7, v9, 0LL);
    }

    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  *((_BYTE *)a1 + *(int *)(a3 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

void **sub_1000549E8(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  id v8 = (void **)((char *)a1 + v7);
  uint64_t v9 = (void **)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for JoinCallContext(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (!v13)
  {
    if (!v14)
    {
      if (a1 == a2) {
        goto LABEL_17;
      }
      sub_10001C644((uint64_t)v8, type metadata accessor for JoinCallContext);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v30 = type metadata accessor for IncomingHandoffContext(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v30 - 8) + 32LL))(v8, v9, v30);
        swift_storeEnumTagMultiPayload(v8, v10, 1LL);
        goto LABEL_17;
      }

      if (!EnumCaseMultiPayload)
      {
        *id v8 = *v9;
        uint64_t v23 = type metadata accessor for OutgoingCallContext(0LL);
        uint64_t v24 = *(int *)(v23 + 20);
        uint64_t v25 = (char *)v8 + v24;
        uint64_t v26 = (char *)v9 + v24;
        uint64_t v27 = type metadata accessor for CallType(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32LL))(v25, v26, v27);
        *((_BYTE *)v8 + *(int *)(v23 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)v9 + *(int *)(v23 + 24));
        swift_storeEnumTagMultiPayload(v8, v10, 0LL);
        goto LABEL_17;
      }

      size_t v21 = *(void *)(v11 + 64);
      goto LABEL_9;
    }

    sub_10001C644((uint64_t)v8, type metadata accessor for JoinCallContext);
LABEL_8:
    size_t v21 = *(void *)(*(void *)(sub_100018A04((uint64_t *)&unk_100113110) - 8) + 64LL);
LABEL_9:
    memcpy(v8, v9, v21);
    goto LABEL_17;
  }

  if (v14) {
    goto LABEL_8;
  }
  int v15 = swift_getEnumCaseMultiPayload(v9, v10);
  if (v15 == 1)
  {
    uint64_t v28 = type metadata accessor for IncomingHandoffContext(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v28 - 8) + 32LL))(v8, v9, v28);
    swift_storeEnumTagMultiPayload(v8, v10, 1LL);
  }

  else if (v15)
  {
    memcpy(v8, v9, *(void *)(v11 + 64));
  }

  else
  {
    *id v8 = *v9;
    uint64_t v16 = type metadata accessor for OutgoingCallContext(0LL);
    uint64_t v17 = *(int *)(v16 + 20);
    uint64_t v18 = (char *)v8 + v17;
    uint64_t v19 = (char *)v9 + v17;
    uint64_t v20 = type metadata accessor for CallType(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32LL))(v18, v19, v20);
    *((_BYTE *)v8 + *(int *)(v16 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)v9 + *(int *)(v16 + 24));
    swift_storeEnumTagMultiPayload(v8, v10, 0LL);
  }

  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
LABEL_17:
  *((_BYTE *)a1 + *(int *)(a3 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100054C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100054C7C);
}

uint64_t sub_100054C7C(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_100018A04((uint64_t *)&unk_100113110);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t sub_100054CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100054D08);
}

char *sub_100054D08(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_100018A04((uint64_t *)&unk_100113110);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for ActiveCallContext(uint64_t a1)
{
  return sub_100020F70(a1, qword_1001145A8, (uint64_t)&nominal type descriptor for ActiveCallContext);
}

uint64_t sub_100054D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100055190( a1,  a2,  a3,  (uint64_t)&value witness table for Builtin.UnknownObject + 64,  (uint64_t (*)(uint64_t))sub_1000268C8);
}

void *sub_100054DAC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v11 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v11);
  }

  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for CallType(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    *((_BYTE *)v4 + *(int *)(a3 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }

  return v4;
}

uint64_t sub_100054E50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for CallType(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
}

void *sub_100054E88(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CallType(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
  *((_BYTE *)a1 + *(int *)(a3 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_100054F00(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CallType(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24LL))(v7, v8, v9);
  *((_BYTE *)a1 + *(int *)(a3 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_100054F78(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CallType(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  *((_BYTE *)a1 + *(int *)(a3 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_100054FF0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CallType(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40LL))(v7, v8, v9);
  *((_BYTE *)a1 + *(int *)(a3 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100055068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100055074);
}

uint64_t sub_100055074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CallType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  }
  unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 2) {
    return v9 - 1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000550F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000550FC);
}

uint64_t sub_1000550FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CallType(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))( a1 + *(int *)(a4 + 20),  a2,  a2,  result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = a2 + 1;
  return result;
}

uint64_t sub_100055178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100055190( a1,  a2,  a3,  (uint64_t)&value witness table for Builtin.Int64 + 64,  (uint64_t (*)(uint64_t))&type metadata accessor for CallType);
}

uint64_t sub_100055190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  v8[0] = a4;
  uint64_t result = a5(319LL);
  if (v7 <= 0x3F)
  {
    v8[1] = *(void *)(result - 8) + 64LL;
    v8[2] = &unk_1000C5A98;
    swift_initStructMetadata(a1, 256LL, 3LL, v8, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_100055204(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v14);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v15 = type metadata accessor for IncomingHandoffContext(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v15 - 8) + 16LL))(a1, a2, v15);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      *a1 = *a2;
      uint64_t v9 = type metadata accessor for OutgoingCallContext(0LL);
      uint64_t v10 = *(int *)(v9 + 20);
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for CallType(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
      *((_BYTE *)a1 + *(int *)(v9 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(v9 + 24));
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_100055324(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
  {
    uint64_t v4 = type metadata accessor for IncomingHandoffContext(0LL);
  }

  else
  {
    if ((_DWORD)result) {
      return result;
    }
    v2 += *(int *)(type metadata accessor for OutgoingCallContext(0LL) + 20);
    uint64_t v4 = type metadata accessor for CallType(0LL);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v2, v4);
}

void *sub_100055390(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v12 = type metadata accessor for IncomingHandoffContext(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16LL))(a1, a2, v12);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    *a1 = *a2;
    uint64_t v7 = type metadata accessor for OutgoingCallContext(0LL);
    uint64_t v8 = *(int *)(v7 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for CallType(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    *((_BYTE *)a1 + *(int *)(v7 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(v7 + 24));
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

void *sub_100055488(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10001C644((uint64_t)a1, type metadata accessor for JoinCallContext);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v12 = type metadata accessor for IncomingHandoffContext(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16LL))(a1, a2, v12);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      *a1 = *a2;
      uint64_t v7 = type metadata accessor for OutgoingCallContext(0LL);
      uint64_t v8 = *(int *)(v7 + 20);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for CallType(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
      *((_BYTE *)a1 + *(int *)(v7 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(v7 + 24));
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

void *sub_100055598(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v12 = type metadata accessor for IncomingHandoffContext(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 32LL))(a1, a2, v12);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    *a1 = *a2;
    uint64_t v7 = type metadata accessor for OutgoingCallContext(0LL);
    uint64_t v8 = *(int *)(v7 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for CallType(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
    *((_BYTE *)a1 + *(int *)(v7 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(v7 + 24));
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

void *sub_100055690(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10001C644((uint64_t)a1, type metadata accessor for JoinCallContext);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v12 = type metadata accessor for IncomingHandoffContext(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 32LL))(a1, a2, v12);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      *a1 = *a2;
      uint64_t v7 = type metadata accessor for OutgoingCallContext(0LL);
      uint64_t v8 = *(int *)(v7 + 20);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for CallType(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
      *((_BYTE *)a1 + *(int *)(v7 + swift_unknownObjectRelease(*(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(v7 + 24));
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_1000557A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t sub_1000557AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_1000557BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_1000557CC(uint64_t a1)
{
  uint64_t result = type metadata accessor for OutgoingCallContext(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for IncomingHandoffContext(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v5);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100055850()
{
  if (*v0) {
    return 0x746361746E6F632ELL;
  }
  else {
    return 0x73746E656365722ELL;
  }
}

uint64_t sub_1000558A0()
{
  v1._object = (void *)0x80000001000DADA0LL;
  v1._uint64_t countAndFlagsBits = 0xD000000000000028LL;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._uint64_t countAndFlagsBits = 0x7079546C6C616320LL;
  v4._object = (void *)0xEA00000000003D65LL;
  String.append(_:)(v4);
  uint64_t v5 = type metadata accessor for OutgoingCallContext(0LL);
  uint64_t v6 = type metadata accessor for CallType(0LL);
  unint64_t v7 = sub_100055AB0();
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v6, v7);
  uint64_t v9 = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v9);
  v10._uint64_t countAndFlagsBits = 0x3D656372756F7320LL;
  v10._object = (void *)0xE800000000000000LL;
  String.append(_:)(v10);
  else {
    uint64_t v11 = 0x73746E656365722ELL;
  }
  else {
    unint64_t v12 = 0xEC0000007473694CLL;
  }
  unint64_t v13 = v12;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease(v12);
  v14._uint64_t countAndFlagsBits = 62LL;
  v14._object = (void *)0xE100000000000000LL;
  String.append(_:)(v14);
  return 0LL;
}

uint64_t sub_100055A38(void *a1, void *a2, uint64_t a3)
{
  if (*a1 == *a2
    && (static CallType.== infix(_:_:)((char *)a1 + *(int *)(a3 + 20), (char *)a2 + *(int *)(a3 + 20)) & 1) != 0)
  {
    char v6 = *((_BYTE *)a1 + *(int *)(a3 + 24)) ^ *((_BYTE *)a2 + *(int *)(a3 + 24)) ^ 1;
  }

  else
  {
    char v6 = 0;
  }

  return v6 & 1;
}

unint64_t sub_100055AB0()
{
  unint64_t result = qword_100114728;
  if (!qword_100114728)
  {
    uint64_t v1 = type metadata accessor for CallType(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CallType, v1);
    atomic_store(result, (unint64_t *)&qword_100114728);
  }

  return result;
}

uint64_t sub_100055AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IncomingHandoffContext(0LL);
  uint64_t v28 = *(void *)(v4 - 8);
  uint64_t v29 = v4;
  __chkstk_darwin(v4);
  char v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OutgoingCallContext(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = type metadata accessor for JoinCallContext(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (uint64_t *)((char *)&v28 - v14);
  uint64_t v16 = sub_100018A04(&qword_100114730);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = (uint64_t)&v19[*(int *)(v17 + 48)];
  sub_100055E08(a1, (uint64_t)v19);
  sub_100055E08(a2, v20);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v10);
  if (!EnumCaseMultiPayload)
  {
    sub_100055E08((uint64_t)v19, (uint64_t)v15);
    if (!swift_getEnumCaseMultiPayload(v20, v10))
    {
      sub_100029650(v20, (uint64_t)v9);
      if (*v15 != *v9
        || (static CallType.== infix(_:_:)((char *)v15 + *(int *)(v7 + 20), (char *)v9 + *(int *)(v7 + 20)) & 1) == 0
        || *((unsigned __int8 *)v15 + *(int *)(v7 + 24)) != *((unsigned __int8 *)v9 + *(int *)(v7 + 24)))
      {
        sub_10001C644((uint64_t)v9, type metadata accessor for OutgoingCallContext);
        sub_10001C644((uint64_t)v15, type metadata accessor for OutgoingCallContext);
        sub_10001C644((uint64_t)v19, type metadata accessor for JoinCallContext);
        goto LABEL_11;
      }

      sub_10001C644((uint64_t)v9, type metadata accessor for OutgoingCallContext);
      sub_10001C644((uint64_t)v15, type metadata accessor for OutgoingCallContext);
LABEL_8:
      sub_10001C644((uint64_t)v19, type metadata accessor for JoinCallContext);
      char v25 = 1;
      return v25 & 1;
    }

    sub_10001C644((uint64_t)v15, type metadata accessor for OutgoingCallContext);
LABEL_10:
    sub_100055E4C((uint64_t)v19);
LABEL_11:
    char v25 = 0;
    return v25 & 1;
  }

  if (EnumCaseMultiPayload != 1)
  {
    goto LABEL_10;
  }

  sub_100055E08((uint64_t)v19, (uint64_t)v13);
  if (swift_getEnumCaseMultiPayload(v20, v10) != 1)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v29);
    goto LABEL_10;
  }

  uint64_t v22 = v28;
  uint64_t v23 = v20;
  uint64_t v24 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v6, v23, v29);
  char v25 = static IncomingHandoffContext.== infix(_:_:)(v13, v6);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v22 + 8);
  v26(v6, v24);
  v26(v13, v24);
  sub_10001C644((uint64_t)v19, type metadata accessor for JoinCallContext);
  return v25 & 1;
}

uint64_t sub_100055E08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JoinCallContext(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100055E4C(uint64_t a1)
{
  uint64_t v2 = sub_100018A04(&qword_100114730);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for CallContinuationState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for CallContinuationState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100055F78 + 4 * byte_1000C5A65[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100055FAC + 4 * asc_1000C5A60[v4]))();
}

uint64_t sub_100055FAC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100055FB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100055FBCLL);
  }
  return result;
}

uint64_t sub_100055FC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100055FD0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100055FD4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100055FDC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CallContinuationState()
{
  return &type metadata for CallContinuationState;
}

uint64_t storeEnumTagSinglePayload for OutgoingCallContext.CallSource( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100056044 + 4 * byte_1000C5A6F[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100056078 + 4 * byte_1000C5A6A[v4]))();
}

uint64_t sub_100056078(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100056080(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100056088LL);
  }
  return result;
}

uint64_t sub_100056094(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10005609CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000560A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000560A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OutgoingCallContext.CallSource()
{
  return &type metadata for OutgoingCallContext.CallSource;
}

unint64_t sub_1000560C8()
{
  unint64_t result = qword_100114738;
  if (!qword_100114738)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000C5B74, &type metadata for OutgoingCallContext.CallSource);
    atomic_store(result, (unint64_t *)&qword_100114738);
  }

  return result;
}

uint64_t sub_10005610C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_10011A2C0);
  sub_10001C270(v0, (uint64_t)qword_10011A2C0);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0x746C7561666544LL,  0xE700000000000000LL);
}

uint64_t sub_100056180()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_100114740);
  sub_10001C270(v0, (uint64_t)qword_100114740);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0xD000000000000012LL,  0x80000001000C5C40LL);
}

Swift::Int sub_100056200()
{
  return Hasher._finalize()();
}

void sub_100056240()
{
}

Swift::Int sub_100056264(uint64_t a1)
{
  return Hasher._finalize()();
}

void sub_1000562AC()
{
  uint64_t v1 = type metadata accessor for JoinFailureContext(0LL);
  v9[1] = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for IncomingHandoffContext(0LL);
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for ActiveCallContext(0LL);
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for RootViewController.Event(0LL);
  __chkstk_darwin(v4);
  unsigned int v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000606A8(v0, (uint64_t)v6, v7);
  int v8 = (char *)&loc_1000563EC + dword_10005673C[swift_getEnumCaseMultiPayload(v6, v4)];
  __asm { BR              X10 }

uint64_t sub_100056404()
{
  uint64_t v3 = *v0;
  *(void *)(v2 - 96) = 0LL;
  *(void *)(v2 - 8_Block_object_dispose(va, 8) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(26LL);
  *(void *)&double v4 = swift_bridgeObjectRelease(*(void *)(v2 - 88)).n128_u64[0];
  *(void *)(v2 - 96) = v1 - 2;
  *(void *)(v2 - 8_Block_object_dispose(va, 8) = 0x80000001000DB010LL;
  id v5 = objc_msgSend(v3, "description", v4);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  int v8 = v7;

  v9._uint64_t countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  v10._uint64_t countAndFlagsBits = 41LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);

  return *(void *)(v2 - 96);
}

void sub_100056764()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for RootViewController.State(0LL);
  __chkstk_darwin(v2);
  double v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000606A8(v0, (uint64_t)v4, v5);
  uint64_t v6 = (char *)&loc_100056830 + dword_100056A64[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }

uint64_t sub_100056840()
{
  return 0x536873616C70732ELL;
}

uint64_t sub_100056AD4()
{
  uint64_t v1 = type metadata accessor for RootViewController.State(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (uint64_t *)((char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v4 = (uint64_t)&v0[OBJC_IVAR___TVFaceTimeRootViewController_state];
  swift_beginAccess(&v0[OBJC_IVAR___TVFaceTimeRootViewController_state], v15, 0LL, 0LL);
  sub_1000606A8(v4, (uint64_t)v3, type metadata accessor for RootViewController.State);
  if (swift_getEnumCaseMultiPayload(v3, v1))
  {
    id v5 = (objc_class *)type metadata accessor for RootViewController(0LL);
    v14.receiver = v0;
    v14.super_class = v5;
    id v6 = objc_msgSendSuper2(&v14, "preferredFocusEnvironments");
    uint64_t v7 = sub_100018A04(&qword_100112990);
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

    sub_10001C644((uint64_t)v3, type metadata accessor for RootViewController.State);
  }

  else
  {
    uint64_t v9 = *v3;
    uint64_t v10 = sub_100018A04(&qword_1001142B0);
    uint64_t v11 = swift_allocObject(v10, 40LL, 7LL);
    *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1000C3FD0;
    *(void *)(v11 + 32) = v9;
    uint64_t v13 = v11;
    specialized Array._endMutation()(v11);
    return v13;
  }

  return v8;
}

id sub_100056D24()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)&v0[OBJC_IVAR___TVFaceTimeRootViewController_observerCancellables];
  swift_beginAccess(&v0[OBJC_IVAR___TVFaceTimeRootViewController_observerCancellables], v11, 1LL, 0LL);
  uint64_t v3 = *v2;
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    id result = (id)swift_bridgeObjectRetain_n(*v2, 2LL);
    if (v4) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease_n(v3, 2LL);
    uint64_t v9 = *v2;
    uint64_t *v2 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v9);
    v10.receiver = v1;
    v10.super_class = (Class)type metadata accessor for RootViewController(0LL);
    return objc_msgSendSuper2(&v10, "dealloc");
  }

  if (v3 < 0) {
    uint64_t v8 = *v2;
  }
  else {
    uint64_t v8 = v3 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain_n(*v2, 2LL);
  id result = (id)_CocoaArrayWrapper.endIndex.getter(v8);
  uint64_t v4 = (uint64_t)result;
  if (!result) {
    goto LABEL_13;
  }
LABEL_3:
  if (v4 >= 1)
  {
    for (uint64_t i = 0LL; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001LL) != 0)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
      }

      else
      {
        uint64_t v7 = *(void *)(v3 + 8 * i + 32);
        swift_retain(v7);
      }

      AnyCancellable.cancel()();
      swift_release(v7);
    }

    goto LABEL_13;
  }

  __break(1u);
  return result;
}

uint64_t sub_100056F30()
{
  return type metadata accessor for RootViewController(0LL);
}

uint64_t type metadata accessor for RootViewController(uint64_t a1)
{
  return sub_100020F70(a1, (uint64_t *)&unk_1001147C0, (uint64_t)&nominal type descriptor for RootViewController);
}

void sub_100056F4C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for JoinFailureContext(0LL);
  v19[4] = *(void *)(v2 - 8);
  v19[5] = v2;
  __chkstk_darwin(v2);
  void v19[3] = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for IncomingHandoffContext(0LL);
  v19[1] = *(void *)(v4 - 8);
  void v19[2] = v4;
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for ActiveCallContext(0LL);
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for RootViewController.State(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  __chkstk_darwin(v7);
  v19[6] = (char *)v19 - v8;
  uint64_t v9 = type metadata accessor for RootViewController.Event(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (void *)((char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  *uint64_t v15 = static OS_dispatch_queue.main.getter(v16);
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  char v17 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if ((v17 & 1) != 0)
  {
    sub_1000606A8(a1, (uint64_t)v11, type metadata accessor for RootViewController.Event);
    uint64_t v18 = (char *)&loc_10005716C + dword_100057714[swift_getEnumCaseMultiPayload(v11, v9)];
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x100057704LL);
}

void sub_100057738(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for RootViewController.State(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  uint64_t v7 = &v10[-v6];
  sub_1000606A8(a2, (uint64_t)&v10[-v6], v8);
  uint64_t v9 = (char *)&loc_100057804 + dword_100057EB4[swift_getEnumCaseMultiPayload(v7, v3)];
  __asm { BR              X10 }

uint64_t sub_100057814()
{
  if (qword_1001122B8 != -1) {
    swift_once(&qword_1001122B8, sub_100056180);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10001C270(v6, (uint64_t)qword_100114740);
  sub_1000606A8(v1, v2, type metadata accessor for RootViewController.State);
  id v7 = v3;
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc(22LL, -1LL);
    uint64_t v11 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    *(void *)(v5 - 112) = v12;
    *(void *)(v5 - 96) = v7;
    *(void *)(v5 - 8_Block_object_dispose(va, 8) = v12;
    *(_DWORD *)uint64_t v10 = 138412546;
    *(void *)(v5 - 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v8;
    *(void *)(v5 - 104) = v1;
    id v13 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 96, v5 - 88, v10 + 4, v10 + 12);
    void *v11 = v7;

    *(_WORD *)(v10 + 12) = 2080;
    sub_100056764();
    unint64_t v15 = v14;
    *(void *)(v5 - 96) = sub_1000850E4(v16, v14, (uint64_t *)(v5 - 88));
    uint64_t v1 = *(void *)(v5 - 104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 96, v5 - 88, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v15);
    sub_10001C644(v2, type metadata accessor for RootViewController.State);
    uint64_t v8 = *(os_log_s **)(v5 - 120);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "[State] Ignoring capture device appeared %@ event in %s state.",  (uint8_t *)v10,  0x16u);
    uint64_t v17 = sub_100018A04((uint64_t *)&unk_100112E20);
    swift_arrayDestroy(v11, 1LL, v17);
    swift_slowDealloc(v11, -1LL, -1LL);
    uint64_t v18 = *(void *)(v5 - 112);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {

    sub_10001C644(v2, type metadata accessor for RootViewController.State);
  }

  return sub_1000606A8(v1, v4, type metadata accessor for RootViewController.State);
}

void sub_100057ECC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RootViewController.State(0LL);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  id v7 = &v10[-v6];
  sub_1000606A8(a1, (uint64_t)&v10[-v6], v8);
  os_log_type_t v9 = (char *)&loc_100057FB0 + dword_1000586FC[swift_getEnumCaseMultiPayload(v7, v2)];
  __asm { BR              X10 }

uint64_t sub_100057FC0()
{
  if (qword_1001122B8 != -1) {
    swift_once(&qword_1001122B8, sub_100056180);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_10001C270(v2, (uint64_t)qword_100114740);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[State] Presenting splash screen.", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  *uint64_t v0 = sub_10005D044(1);
  return swift_storeEnumTagMultiPayload(v0, v1, 0LL);
}

void sub_100058714(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for RootViewController.State(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  id v7 = &v17[-v6];
  uint64_t v8 = sub_100018A04(&qword_100114970);
  __chkstk_darwin(v8);
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  type metadata accessor for MainActor(0LL);
  id v12 = v1;
  uint64_t v13 = static MainActor.shared.getter(v12);
  unint64_t v14 = (void *)swift_allocObject(&unk_1000F9FC0, 40LL, 7LL);
  v14[2] = v13;
  void v14[3] = &protocol witness table for MainActor;
  v14[4] = v12;
  uint64_t v15 = sub_1000B5C50((uint64_t)v10, (uint64_t)&unk_100114990, (uint64_t)v14);
  swift_release(v15);
  sub_1000606A8(a1, (uint64_t)v7, type metadata accessor for RootViewController.State);
  uint64_t v16 = (char *)&loc_100058894 + dword_100058E24[swift_getEnumCaseMultiPayload(v7, v3)];
  __asm { BR              X10 }

uint64_t sub_1000588A4()
{
  if (qword_1001122B8 != -1) {
    swift_once(&qword_1001122B8, sub_100056180);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_10001C270(v2, (uint64_t)qword_100114740);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[State] Presenting splash screen.", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  *uint64_t v0 = sub_10005D044(1);
  return swift_storeEnumTagMultiPayload(v0, v1, 0LL);
}

uint64_t sub_100058E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[2] = a4;
  uint64_t v5 = type metadata accessor for MainActor(0LL);
  v4[3] = static MainActor.shared.getter(v5);
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[4] = v6;
  void v4[5] = v7;
  return swift_task_switch(sub_100058EA8, v6, v7);
}

uint64_t sub_100058EA8()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1001141E4);
  *(void *)(v0 + 4_Block_object_dispose(va, 8) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100058EFC;
  return sub_10004B724();
}

uint64_t sub_100058EFC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 48);
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100058F90;
  }
  else {
    uint64_t v4 = sub_100058F5C;
  }
  return swift_task_switch(v4, *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_100058F5C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100058F90()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100058FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ActiveCallContext(0LL);
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for RootViewController.State(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  uint64_t v7 = &v10[-v6];
  sub_1000606A8(a2, (uint64_t)&v10[-v6], v8);
  uint64_t v9 = (char *)&loc_1000590A8 + dword_1000596D4[swift_getEnumCaseMultiPayload(v7, v4)];
  __asm { BR              X10 }

uint64_t sub_1000590B8()
{
  if (qword_1001122B8 != -1) {
    swift_once(&qword_1001122B8, sub_100056180);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_10001C270(v5, (uint64_t)qword_100114740);
  uint64_t v6 = sub_1000606A8(v1, v3, type metadata accessor for RootViewController.State);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    *(void *)(v4 - 136) = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    sub_100056764();
    unint64_t v12 = v11;
    *(void *)(v4 - 8_Block_object_dispose(va, 8) = sub_1000850E4(v13, v11, (uint64_t *)(v4 - 136));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 88, v4 - 80, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v12);
    sub_10001C644(v3, type metadata accessor for RootViewController.State);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[State] Ignoring call start event in %s state.", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    sub_10001C644(v3, type metadata accessor for RootViewController.State);
  }

  return sub_1000606A8(v1, v0, type metadata accessor for RootViewController.State);
}

void sub_1000596EC(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v12, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    uint64_t v6 = swift_allocObject(&unk_1000F9F70, 24LL, 7LL);
    *(void *)(v6 + swift_weakDestroy(v0 + 16) = a2;
    aBlock[4] = sub_100061AA8;
    uint64_t v11 = v6;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_100027654;
    void aBlock[3] = &unk_1000F9F88;
    uint64_t v7 = _Block_copy(aBlock);
    uint64_t v8 = v11;
    id v9 = a2;
    swift_release(v8);
    [v5 presentViewController:v9 animated:1 completion:v7];
    _Block_release(v7);
  }

void sub_1000597D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RootViewController.State(0LL);
  uint64_t v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  uint64_t v5 = &v8[-v4];
  sub_1000606A8(a1, (uint64_t)&v8[-v4], v6);
  uint64_t v7 = (char *)&loc_100059884 + dword_100059D34[swift_getEnumCaseMultiPayload(v5, v2)];
  __asm { BR              X10 }

uint64_t sub_100059894()
{
  if (qword_1001122B8 != -1) {
    swift_once(&qword_1001122B8, sub_100056180);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_10001C270(v5, (uint64_t)qword_100114740);
  uint64_t v6 = sub_1000606A8(v2, v3, type metadata accessor for RootViewController.State);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    *(void *)(v4 - 136) = v10;
    *(_DWORD *)id v9 = 136315138;
    sub_100056764();
    unint64_t v12 = v11;
    *(void *)(v4 - 8_Block_object_dispose(va, 8) = sub_1000850E4(v13, v11, (uint64_t *)(v4 - 136));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 88, v4 - 80, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v12);
    sub_10001C644(v3, type metadata accessor for RootViewController.State);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[State] Ignoring call end event in %s state.", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    sub_10001C644(v3, type metadata accessor for RootViewController.State);
  }

  return sub_1000606A8(v2, v0, type metadata accessor for RootViewController.State);
}

void sub_100059D4C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v14[7] = a1;
  v14[8] = a3;
  uint64_t v4 = sub_100018A04(&qword_100114970);
  __chkstk_darwin(v4);
  uint64_t v5 = sub_100018A04(&qword_100114890);
  __chkstk_darwin(v5);
  v14[6] = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for IncomingHandoffContext(0LL);
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for RootViewController.State(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)v14 - v10;
  sub_1000606A8(a2, (uint64_t)v14 - v10, v12);
  uint64_t v13 = (char *)&loc_100059EA4 + dword_10005A594[swift_getEnumCaseMultiPayload(v11, v8)];
  __asm { BR              X10 }

uint64_t sub_100059EB4()
{
  if (qword_1001122B8 != -1) {
    swift_once(&qword_1001122B8, sub_100056180);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10001C270(v4, (uint64_t)qword_100114740);
  uint64_t v5 = sub_1000606A8(v2, v0, type metadata accessor for RootViewController.State);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    *(void *)(v3 - 112) = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    sub_100056764();
    unint64_t v11 = v10;
    *(void *)(v3 - 8_Block_object_dispose(va, 8) = sub_1000850E4(v12, v10, (uint64_t *)(v3 - 112));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 88, v3 - 80, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v11);
    sub_10001C644(v0, type metadata accessor for RootViewController.State);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[State] Ignoring call handoff event in %s state.", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    sub_10001C644(v0, type metadata accessor for RootViewController.State);
  }

  return sub_1000606A8(v2, *(void *)(v3 - 128), type metadata accessor for RootViewController.State);
}

uint64_t sub_10005A5AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[2] = a4;
  uint64_t v5 = type metadata accessor for MainActor(0LL);
  v4[3] = static MainActor.shared.getter(v5);
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[4] = v6;
  void v4[5] = v7;
  return swift_task_switch(sub_10005A618, v6, v7);
}

uint64_t sub_10005A618()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1001141E4);
  *(void *)(v0 + 4_Block_object_dispose(va, 8) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10005A66C;
  return sub_10004B724();
}

uint64_t sub_10005A66C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 48);
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100061A78;
  }
  else {
    uint64_t v4 = sub_100061A20;
  }
  return swift_task_switch(v4, *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_10005A6CC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v41 = a3;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v40 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100018A04((uint64_t *)&unk_100113110);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for RootViewController.State(0LL);
  uint64_t v13 = __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v38 - v14;
  uint64_t v39 = v3;
  uint64_t v16 = *(void *)(*(void *)&v3[OBJC_IVAR___TVFaceTimeRootViewController_continuitySessionManager]
                  + OBJC_IVAR____TtC8FaceTime24ContinuitySessionManager_activeContinuitySessionSubject);
  swift_retain(v16);
  CurrentValueSubject.value.getter(v17);
  swift_release(v16);
  id v18 = aBlock;
  uint64_t v42 = a2;
  if (aBlock)
  {
    v38[1] = v11;
    id v19 = [aBlock activeConversations];
    uint64_t v20 = sub_10001C5D0(0LL, (unint64_t *)&unk_100115FE0, &OBJC_CLASS___TUContinuityConversation_ptr);
    uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);

    id v22 = a1;
    uint64_t v23 = sub_10005F880(v21, v22);
    swift_bridgeObjectRelease(v21);

    if (v23)
    {
      v38[0] = v18;
      sub_1000606A8(v42, (uint64_t)v15, type metadata accessor for RootViewController.State);
      uint64_t v24 = (char *)&loc_10005A8B0 + *((int *)qword_10005B130 + swift_getEnumCaseMultiPayload(v15, v12));
      __asm { BR              X10 }
    }

    a2 = v42;
  }

  if (qword_1001122B8 != -1) {
    swift_once(&qword_1001122B8, sub_100056180);
  }
  uint64_t v25 = type metadata accessor for Logger(0LL);
  sub_10001C270(v25, (uint64_t)qword_100114740);
  id v26 = a1;
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v30 = (void *)swift_slowAlloc(32LL, -1LL);
    id aBlock = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    uint64_t v39 = v29 + 4;
    id v31 = [v26 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);

    uint64_t v32 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter(v6, v32);
    unint64_t v35 = v34;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v8, v6);
    uint64_t v44 = sub_1000850E4(v33, v35, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v39, v29 + 12);

    swift_bridgeObjectRelease(v35);
    _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "[State] Dropping request to prepare for join because %s can't be found.",  v29,  0xCu);
    swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    uint64_t v36 = v29;
    a2 = v42;
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  else
  {
  }

  return sub_1000606A8(a2, v41, type metadata accessor for RootViewController.State);
}

void sub_10005B148(void *a1)
{
  id v1 = [a1 localVideoViewController];
  if (v1)
  {
    id v2 = v1;
    [v1 endAppearanceTransition];
  }

  else
  {
    __break(1u);
  }

id sub_10005B190@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for JoinFailureContext(0LL);
  uint64_t v133 = *(void *)(v6 - 8);
  uint64_t v134 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  unint64_t v132 = (char *)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  Swift::String v130 = (char *)&v124 - v10;
  __chkstk_darwin(v9);
  Swift::String v126 = (char *)&v124 - v11;
  uint64_t v12 = sub_100018A04((uint64_t *)&unk_100113110);
  __chkstk_darwin(v12);
  Swift::String v128 = (char *)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  id v18 = (char *)&v124 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v124 - v19;
  uint64_t v21 = type metadata accessor for RootViewController.State(0LL);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v124 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  os_log_t v129 = (os_log_t)((char *)&v124 - v26);
  __chkstk_darwin(v25);
  os_log_type_t v28 = (char *)&v124 - v27;
  uint64_t v136 = a2;
  sub_1000606A8(a2, (uint64_t)&v124 - v27, v29);
  uint64_t v127 = v21;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v28, v21);
  uint64_t v135 = a3;
  if (EnumCaseMultiPayload == 3)
  {
    id v31 = *(char **)&v28[*(int *)(sub_100018A04(&qword_1001147D8) + 48)];
    uint64_t v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v20, v28, v14);
    JoinFailureContext.conversationUUID.getter(v32);
    char v33 = static UUID.== infix(_:_:)(v20, v18);
    unint64_t v34 = *(void (**)(char *, uint64_t))(v15 + 8);
    v34(v18, v14);
    uint64_t v35 = a1;
    if ((v33 & 1) != 0)
    {
      uint64_t v125 = v20;
      if (v31) {
        [v31 dismissViewControllerAnimated:1 completion:0];
      }
      uint64_t v36 = v131;
      os_log_type_t v37 = &v131[OBJC_IVAR___TVFaceTimeRootViewController_callManager];
      sub_10001C580((uint64_t)&v131[OBJC_IVAR___TVFaceTimeRootViewController_callManager], (uint64_t)&v137);
      sub_10001C3FC(&v137, v139);
      uint64_t v38 = JoinFailureContext.nacErrorCode.getter();
      if ((v39 & 1) != 0) {
        id v40 = 0LL;
      }
      else {
        id v40 = (id)TUMakeNeighborhoodConduitError(v38, 0LL);
      }
      sub_100084740((uint64_t)v40);
      swift_errorRelease(v40);
      sub_10001BFEC(&v137);
      uint64_t v90 = *sub_10001C3FC(v37, *((void *)v37 + 3));
      uint64_t v91 = type metadata accessor for JoinCallContext(0LL);
      uint64_t v92 = (uint64_t)v128;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56LL))(v128, 1LL, 1LL, v91);
      uint64_t v93 = v90 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_lastJoinCallContext;
      swift_beginAccess(v93, &v137, 33LL, 0LL);
      sub_1000362F0(v92, v93, (uint64_t *)&unk_100113110);
      id result = objc_msgSend(v36, "faceTimeContainerViewController", swift_endAccess(&v137).n128_f64[0]);
      if (result)
      {
        id v94 = result;
        sub_1000781E8(2, 1);

        uint64_t v95 = *(void *)(*(void *)&v36[OBJC_IVAR___TVFaceTimeRootViewController_captureDeviceManager]
                        + OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_captureDeviceStateSubject);
        swift_retain(v95);
        CurrentValueSubject.value.getter(v96);
        swift_release(v95);
        uint64_t v97 = v134;
        Swift::String v98 = v126;
        if (v138)
        {
          if (v138 == 1)
          {
            unint64_t v132 = (char *)v34;

            if (qword_1001122B8 != -1) {
              swift_once(&qword_1001122B8, sub_100056180);
            }
            uint64_t v99 = type metadata accessor for Logger(0LL);
            sub_10001C270(v99, (uint64_t)qword_100114740);
            uint64_t v100 = v133;
            uint64_t v101 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v133 + 16))(v98, v35, v97);
            uint64_t v102 = (os_log_s *)Logger.logObject.getter(v101);
            os_log_type_t v103 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v102, v103))
            {
              uint64_t v104 = v98;
              uint64_t v105 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              uint64_t v106 = (void *)swift_slowAlloc(32LL, -1LL);
              unint64_t v131 = v31;
              uint64_t v107 = v106;
              uint64_t v137 = (char *)v106;
              *(_DWORD *)uint64_t v105 = 136315138;
              uint64_t v124 = v14;
              uint64_t v108 = sub_10001949C( (unint64_t *)&unk_100114960,  (uint64_t (*)(uint64_t))&type metadata accessor for JoinFailureContext,  (uint64_t)&protocol conformance descriptor for JoinFailureContext);
              uint64_t v109 = dispatch thunk of CustomStringConvertible.description.getter(v97, v108);
              unint64_t v111 = v110;
              uint64_t v140 = sub_1000850E4(v109, v110, (uint64_t *)&v137);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v105 + 4, v105 + 12);
              __n128 v112 = swift_bridgeObjectRelease(v111);
              (*(void (**)(char *, uint64_t, __n128))(v100 + 8))(v104, v97, v112);
              _os_log_impl( (void *)&_mh_execute_header,  v102,  v103,  "[State] Conversation join failed: %s - presenting recent calls.",  v105,  0xCu);
              swift_arrayDestroy(v107, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v107, -1LL, -1LL);
              swift_slowDealloc(v105, -1LL, -1LL);

              uint64_t v114 = v124;
              uint64_t v113 = v125;
            }

            else
            {

              (*(void (**)(char *, uint64_t))(v100 + 8))(v98, v97);
              uint64_t v113 = v125;
              uint64_t v114 = v14;
            }

            ((void (*)(char *, uint64_t))v132)(v113, v114);
            unint64_t v121 = v135;
            uint64_t v122 = v127;
            uint64_t v123 = 5LL;
            return (id)swift_storeEnumTagMultiPayload(v121, v122, v123);
          }
        }

        else
        {
        }

        if (qword_1001122B8 != -1) {
          swift_once(&qword_1001122B8, sub_100056180);
        }
        uint64_t v115 = type metadata accessor for Logger(0LL);
        uint64_t v116 = sub_10001C270(v115, (uint64_t)qword_100114740);
        Swift::String v117 = (os_log_s *)Logger.logObject.getter(v116);
        os_log_type_t v118 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v117, v118))
        {
          uint64_t v119 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v119 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v117,  v118,  "[State] Conversation join failed - presenting splash screen.",  v119,  2u);
          swift_slowDealloc(v119, -1LL, -1LL);
        }

        id v120 = sub_10005D044(1);
        v34(v125, v14);
        unint64_t v121 = v135;
        void *v135 = v120;
        uint64_t v122 = v127;
        uint64_t v123 = 0LL;
        return (id)swift_storeEnumTagMultiPayload(v121, v122, v123);
      }

      __break(1u);
    }

    else
    {
      unint64_t v131 = v31;
      unint64_t v132 = (char *)v34;
      uint64_t v65 = v14;
      if (qword_1001122B8 != -1) {
        swift_once(&qword_1001122B8, sub_100056180);
      }
      uint64_t v66 = type metadata accessor for Logger(0LL);
      sub_10001C270(v66, (uint64_t)qword_100114740);
      uint64_t v67 = v133;
      uint64_t v68 = v134;
      uint64_t v69 = v130;
      (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v130, v35, v134);
      os_log_t v70 = v129;
      uint64_t v71 = sub_1000606A8(v136, (uint64_t)v129, type metadata accessor for RootViewController.State);
      uint64_t v72 = (os_log_s *)Logger.logObject.getter(v71);
      os_log_type_t v73 = static os_log_type_t.default.getter();
      int v74 = v73;
      if (os_log_type_enabled(v72, v73))
      {
        uint64_t v75 = swift_slowAlloc(22LL, -1LL);
        uint64_t v76 = (char *)swift_slowAlloc(64LL, -1LL);
        Swift::String v128 = v76;
        uint64_t v137 = v76;
        *(_DWORD *)uint64_t v75 = 136315394;
        uint64_t v125 = v20;
        Swift::String v126 = (char *)(v75 + 4);
        LODWORD(v127) = v74;
        JoinFailureContext.conversationUUID.getter(v76);
        uint64_t v77 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v78 = v65;
        uint64_t v124 = v65;
        uint64_t v79 = dispatch thunk of CustomStringConvertible.description.getter(v65, v77);
        unint64_t v81 = v80;
        ((void (*)(char *, uint64_t))v132)(v18, v78);
        uint64_t v140 = sub_1000850E4(v79, v81, (uint64_t *)&v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v126, v75 + 12);
        __n128 v82 = swift_bridgeObjectRelease(v81);
        (*(void (**)(char *, uint64_t, __n128))(v67 + 8))(v69, v68, v82);
        *(_WORD *)(v75 + 12) = 2080;
        sub_100056764();
        unint64_t v84 = v83;
        uint64_t v140 = sub_1000850E4(v85, v83, (uint64_t *)&v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v75 + 14, v75 + 22);
        swift_bridgeObjectRelease(v84);
        sub_10001C644((uint64_t)v70, type metadata accessor for RootViewController.State);
        _os_log_impl( (void *)&_mh_execute_header,  v72,  (os_log_type_t)v127,  "[State] Ignoring join active conversation failure for %s while in %s",  (uint8_t *)v75,  0x16u);
        id v86 = v128;
        swift_arrayDestroy(v128, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v86, -1LL, -1LL);
        swift_slowDealloc(v75, -1LL, -1LL);

        uint64_t v88 = v124;
        uint64_t v87 = v125;
      }

      else
      {

        sub_10001C644((uint64_t)v70, type metadata accessor for RootViewController.State);
        (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v68);
        uint64_t v87 = v20;
        uint64_t v88 = v65;
      }

      ((void (*)(char *, uint64_t))v132)(v87, v88);
      return (id)sub_1000606A8(v136, (uint64_t)v135, type metadata accessor for RootViewController.State);
    }
  }

  else
  {
    uint64_t v41 = a1;
    uint64_t v42 = v14;
    if (qword_1001122B8 != -1) {
      swift_once(&qword_1001122B8, sub_100056180);
    }
    uint64_t v43 = type metadata accessor for Logger(0LL);
    sub_10001C270(v43, (uint64_t)qword_100114740);
    uint64_t v44 = v132;
    uint64_t v45 = v133;
    uint64_t v46 = v41;
    uint64_t v47 = v134;
    (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v132, v46, v134);
    uint64_t v48 = sub_1000606A8(v136, (uint64_t)v24, type metadata accessor for RootViewController.State);
    BOOL v49 = (os_log_s *)Logger.logObject.getter(v48);
    os_log_type_t v50 = static os_log_type_t.default.getter();
    int v51 = v50;
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v52 = swift_slowAlloc(22LL, -1LL);
      LODWORD(v13_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v51;
      uint64_t v53 = v52;
      unint64_t v131 = (char *)swift_slowAlloc(64LL, -1LL);
      uint64_t v137 = v131;
      *(_DWORD *)uint64_t v53 = 136315394;
      Swift::String v128 = (char *)(v53 + 4);
      os_log_t v129 = v49;
      ((void (*)(void))JoinFailureContext.conversationUUID.getter)();
      uint64_t v54 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter(v42, v54);
      uint64_t v56 = v45;
      unint64_t v58 = v57;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v42);
      uint64_t v140 = sub_1000850E4(v55, v58, (uint64_t *)&v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v128, v53 + 12);
      __n128 v59 = swift_bridgeObjectRelease(v58);
      (*(void (**)(char *, uint64_t, __n128))(v56 + 8))(v132, v47, v59);
      *(_WORD *)(v53 + 12) = 2080;
      sub_100056764();
      unint64_t v61 = v60;
      uint64_t v140 = sub_1000850E4(v62, v60, (uint64_t *)&v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v53 + 14, v53 + 22);
      swift_bridgeObjectRelease(v61);
      sub_10001C644((uint64_t)v24, type metadata accessor for RootViewController.State);
      os_log_t v63 = v129;
      _os_log_impl( (void *)&_mh_execute_header,  v129,  (os_log_type_t)v130,  "[State] Ignoring join active conversation failure for %s in %s.",  (uint8_t *)v53,  0x16u);
      uint64_t v64 = v131;
      swift_arrayDestroy(v131, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1LL, -1LL);
      swift_slowDealloc(v53, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v44, v47);
      sub_10001C644((uint64_t)v24, type metadata accessor for RootViewController.State);
    }

    sub_1000606A8(v136, (uint64_t)v135, type metadata accessor for RootViewController.State);
    return (id)sub_10001C644((uint64_t)v28, type metadata accessor for RootViewController.State);
  }

  return result;
}

void sub_10005BD38(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100018A04((uint64_t *)&unk_100113110);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for RootViewController.State(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000606A8(a2, (uint64_t)v13, v14);
  if (swift_getEnumCaseMultiPayload(v13, v11) != 3)
  {
    sub_10001C644((uint64_t)v13, type metadata accessor for RootViewController.State);
    goto LABEL_13;
  }

  uint64_t v15 = *(void **)&v13[*(int *)(sub_100018A04(&qword_1001147D8) + 48)];
  uint64_t v16 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8LL))(v13, v16);
  if (!v15)
  {
LABEL_13:
    if (qword_1001122B8 != -1) {
      swift_once(&qword_1001122B8, sub_100056180);
    }
    uint64_t v34 = type metadata accessor for Logger(0LL);
    uint64_t v35 = sub_10001C270(v34, (uint64_t)qword_100114740);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "[State] Ignoring staging view cancellation because we don't think it's currently presented.",  v38,  2u);
      swift_slowDealloc(v38, -1LL, -1LL);
    }

    sub_1000606A8(a2, (uint64_t)a3, type metadata accessor for RootViewController.State);
    return;
  }

  type metadata accessor for StagingViewController(0LL, v17);
  id v18 = a1;
  id v19 = v15;
  char v20 = static NSObject.== infix(_:_:)(v18, v19);

  if ((v20 & 1) == 0)
  {

    goto LABEL_13;
  }

  uint64_t v21 = *sub_10001C3FC( &v4[OBJC_IVAR___TVFaceTimeRootViewController_callManager],  *(void *)&v4[OBJC_IVAR___TVFaceTimeRootViewController_callManager + 24]);
  uint64_t v22 = type metadata accessor for JoinCallContext(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v10, 1LL, 1LL, v22);
  uint64_t v23 = v21 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_lastJoinCallContext;
  swift_beginAccess(v23, &v49, 33LL, 0LL);
  sub_1000362F0((uint64_t)v10, v23, (uint64_t *)&unk_100113110);
  objc_msgSend(v18, "dismissViewControllerAnimated:completion:", 1, 0, swift_endAccess(&v49).n128_f64[0]);
  id v24 = [v4 faceTimeContainerViewController];
  if (v24)
  {
    uint64_t v25 = v24;
    sub_1000781E8(2, 1);

    uint64_t v26 = *(void *)(*(void *)&v4[OBJC_IVAR___TVFaceTimeRootViewController_captureDeviceManager]
                    + OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_captureDeviceStateSubject);
    swift_retain(v26);
    CurrentValueSubject.value.getter(v27);
    swift_release(v26);
    if (v50)
    {
      if (v50 == 1)
      {

        if (qword_1001122B8 != -1) {
          swift_once(&qword_1001122B8, sub_100056180);
        }
        uint64_t v28 = type metadata accessor for Logger(0LL);
        uint64_t v29 = sub_10001C270(v28, (uint64_t)qword_100114740);
        uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
        os_log_type_t v31 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v30, v31))
        {
          uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v32 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "[State] Staging area cancelled - presenting recent calls.",  v32,  2u);
          swift_slowDealloc(v32, -1LL, -1LL);
          char v33 = (os_log_s *)v19;
        }

        else
        {
          char v33 = v30;
          uint64_t v30 = (os_log_s *)v19;
        }

        uint64_t v45 = a3;
        uint64_t v46 = v11;
        uint64_t v47 = 5LL;
LABEL_26:
        swift_storeEnumTagMultiPayload(v45, v46, v47);
        return;
      }
    }

    else
    {
    }

    if (qword_1001122B8 != -1) {
      swift_once(&qword_1001122B8, sub_100056180);
    }
    uint64_t v39 = type metadata accessor for Logger(0LL);
    uint64_t v40 = sub_10001C270(v39, (uint64_t)qword_100114740);
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "[State] Staging area cancelled - presenting splash screen.",  v43,  2u);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    id v44 = sub_10005D044(1);
    *a3 = v44;
    uint64_t v45 = a3;
    uint64_t v46 = v11;
    uint64_t v47 = 0LL;
    goto LABEL_26;
  }

  __break(1u);
}

double sub_10005C228()
{
  id v1 = v0;
  uint64_t v55 = sub_100018A04(&qword_100114EE0);
  uint64_t v57 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v53 = (char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100018A04(&qword_100114900);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v58 = v3;
  uint64_t v59 = v4;
  __chkstk_darwin(v3);
  uint64_t v54 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100018A04(&qword_100114908);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v60 = v6;
  uint64_t v61 = v7;
  __chkstk_darwin(v6);
  uint64_t v56 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100018A04((uint64_t *)&unk_100113480);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100018A04((uint64_t *)&unk_1001130A0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void **)(*sub_10001C3FC( &v0[OBJC_IVAR___TVFaceTimeRootViewController_callManager],  *(void *)&v0[OBJC_IVAR___TVFaceTimeRootViewController_callManager + 24])
                 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_activeCallSubject);
  id v62 = v16;
  uint64_t v17 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  __n128 v18 = swift_retain(v16);
  id v66 = (id)static OS_dispatch_queue.main.getter(v18);
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL, v19);
  char v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL);
  v50(v11, 1LL, 1LL, v20);
  uint64_t v21 = sub_100018A04((uint64_t *)&unk_100114910);
  uint64_t v22 = sub_100022750( (unint64_t *)&unk_1001130B0,  (uint64_t *)&unk_100114910,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  unint64_t v49 = sub_10003862C();
  Publisher.receive<A>(on:options:)(&v66, v11, v21, v17, v22, v49);
  sub_10001C608((uint64_t)v11, (uint64_t *)&unk_100113480);

  swift_release(v62);
  uint64_t v23 = swift_allocObject(&unk_1000F9E08, 24LL, 7LL);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v24 = sub_100022750( (unint64_t *)&unk_1001130C0,  (uint64_t *)&unk_1001130A0,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v25 = v1;
  uint64_t v26 = Publisher<>.sink(receiveValue:)(sub_100060814, v23, v12, v24);
  __n128 v27 = swift_release(v23);
  (*(void (**)(char *, uint64_t, __n128))(v13 + 8))(v15, v12, v27);
  uint64_t v28 = &v25[OBJC_IVAR___TVFaceTimeRootViewController_observerCancellables];
  swift_beginAccess(&v25[OBJC_IVAR___TVFaceTimeRootViewController_observerCancellables], &v62, 33LL, 0LL);
  uint64_t v29 = sub_100018A04(&qword_100114200);
  uint64_t v52 = v29;
  uint64_t v51 = sub_100022750(&qword_1001130D0, &qword_100114200, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v28, v29, v51);
  swift_endAccess(&v62);
  swift_release(v26);
  id v62 = *(id *)(*(void *)&v25[OBJC_IVAR___TVFaceTimeRootViewController_captureDeviceManager]
              + OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_captureDeviceStateSubject);
  uint64_t v30 = sub_100018A04(&qword_100114920);
  uint64_t v31 = sub_100022750( &qword_100114928,  &qword_100114920,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  unint64_t v32 = sub_10006081C();
  char v33 = v53;
  Publisher<>.removeDuplicates()(v30, v31, v32);
  id v62 = (id)static OS_dispatch_queue.main.getter(v34);
  v50(v11, 1LL, 1LL, v20);
  uint64_t v35 = sub_100022750( &qword_100114938,  &qword_100114EE0,  (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  os_log_type_t v37 = v54;
  uint64_t v36 = v55;
  Publisher.receive<A>(on:options:)(&v62, v11, v55, v17, v35, v49);
  sub_10001C608((uint64_t)v11, (uint64_t *)&unk_100113480);

  (*(void (**)(char *, uint64_t))(v57 + 8))(v33, v36);
  id v62 = 0LL;
  char v63 = 2;
  uint64_t v64 = 0LL;
  char v65 = 2;
  uint64_t v38 = sub_100018A04(&qword_100114940);
  uint64_t v39 = sub_100022750( &qword_100114948,  &qword_100114900,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v40 = v56;
  uint64_t v41 = v58;
  Publisher.scan<A>(_:_:)(&v62, sub_10005EF84, 0LL, v58, v38, v39);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v37, v41);
  uint64_t v42 = swift_allocObject(&unk_1000F9C78, 24LL, 7LL);
  swift_unknownObjectWeakInit(v42 + 16, v25);
  uint64_t v43 = swift_allocObject(&unk_1000F9E30, 32LL, 7LL);
  *(void *)(v43 + swift_weakDestroy(v0 + 16) = sub_100060860;
  *(void *)(v43 + 24) = v42;
  uint64_t v44 = sub_100022750( &qword_100114950,  &qword_100114908,  (uint64_t)&protocol conformance descriptor for Publishers.Scan<A, B>);
  uint64_t v45 = v60;
  uint64_t v46 = Publisher<>.sink(receiveValue:)(sub_100060868, v43, v60, v44);
  __n128 v47 = swift_release(v43);
  (*(void (**)(char *, uint64_t, __n128))(v61 + 8))(v40, v45, v47);
  swift_beginAccess(v28, &v62, 33LL, 0LL);
  AnyCancellable.store<A>(in:)(v28, v52, v51);
  swift_endAccess(&v62);
  *(void *)&double result = swift_release(v46).n128_u64[0];
  return result;
}

uint64_t sub_10005C7F4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RootViewController.Event(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100018A04((uint64_t *)&unk_1001148A0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for ActiveCallContext(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001C3B8(a1, (uint64_t)v7, (uint64_t *)&unk_1001148A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8) == 1)
  {
    sub_10001C608((uint64_t)v7, (uint64_t *)&unk_1001148A0);
    swift_storeEnumTagMultiPayload(v4, v2, 7LL);
    sub_100056F4C((uint64_t)v4);
    uint64_t v12 = type metadata accessor for RootViewController.Event;
    uint64_t v13 = (uint64_t)v4;
  }

  else
  {
    sub_10006089C((uint64_t)v7, (uint64_t)v11);
    sub_1000606A8((uint64_t)v11, (uint64_t)v4, type metadata accessor for ActiveCallContext);
    swift_storeEnumTagMultiPayload(v4, v2, 1LL);
    sub_100056F4C((uint64_t)v4);
    sub_10001C644((uint64_t)v4, type metadata accessor for RootViewController.Event);
    uint64_t v13 = (uint64_t)v11;
    uint64_t v12 = type metadata accessor for ActiveCallContext;
  }

  return sub_10001C644(v13, v12);
}

void sub_10005C9A0(void *a1, char a2, void *a3, char a4, uint64_t a5)
{
  id v39 = a1;
  uint64_t v9 = type metadata accessor for RootViewController.Event(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = type metadata accessor for RootViewController.State(0LL);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  __n128 v18 = (char *)&v38 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v38 - v19;
  a5 += 16LL;
  swift_beginAccess(a5, v43, 0LL, 0LL);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(a5);
  if (!Strong) {
    return;
  }
  uint64_t v22 = Strong;
  if (!a2)
  {
    if (a4)
    {
      if (a4 == 1)
      {
LABEL_12:
        void *v11 = a3;
        swift_storeEnumTagMultiPayload(v11, v9, 0LL);
        id v25 = a3;
LABEL_17:
        sub_100056F4C((uint64_t)v11);

LABEL_18:
        sub_10001C644((uint64_t)v11, type metadata accessor for RootViewController.Event);
        return;
      }

id sub_10005CE04(void *a1)
{
  uint64_t v2 = v1;
  [v1 addChildViewController:a1];
  id result = [v1 contentView];
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v5 = result;
  id result = [a1 view];
  if (!result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v6 = result;
  [v5 addSubview:result];

  id result = [v2 contentView];
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v7 = result;
  id result = [a1 view];
  if (result)
  {
    uint64_t v8 = result;
    sub_100092200(result);

    return [a1 didMoveToParentViewController:v2];
  }

uint64_t sub_10005CF08@<X0>(id a1@<X1>, void *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  if ([a1 wantsStagingArea])
  {
    objc_allocWithZone((Class)type metadata accessor for StagingViewController(0LL, v8));
    uint64_t v9 = (char *)sub_1000B6324(a2);
    uint64_t v10 = &v9[OBJC_IVAR____TtC8FaceTime21StagingViewController_delegate];
    *((void *)v10 + 1) = &off_1000F9AC0;
    swift_unknownObjectWeakAssign(v10, v4);
    [v4 presentViewController:v9 animated:1 completion:0];
    uint64_t v11 = *(int *)(sub_100018A04(&qword_1001147D8) + 48);
    id v12 = [a1 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

    *(void *)(a3 + v11) = v9;
  }

  else
  {
    uint64_t v13 = *(int *)(sub_100018A04(&qword_1001147D8) + 48);
    id v14 = [a1 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);

    *(void *)(a3 + v13) = 0LL;
  }

  uint64_t v15 = type metadata accessor for RootViewController.State(0LL);
  return swift_storeEnumTagMultiPayload(a3, v15, 3LL);
}

id sub_10005D044(char a1)
{
  uint64_t v2 = v1;
  id result = [v1 localVideoViewController];
  if (!result)
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v5 = result;
  [result beginAppearanceTransition:0 animated:a1 & 1];

  uint64_t v6 = *(void **)&v2[OBJC_IVAR___TVFaceTimeRootViewController_neighborhoodActivityConduit];
  uint64_t v8 = *(void *)&v2[OBJC_IVAR___TVFaceTimeRootViewController_captureDeviceManager];
  uint64_t v7 = *(void *)&v2[OBJC_IVAR___TVFaceTimeRootViewController_captureDeviceManager + 8];
  id v9 = objc_allocWithZone((Class)type metadata accessor for SplashScreenViewController(0LL));
  id v10 = objc_allocWithZone((Class)type metadata accessor for SplashScreenViewModel(0LL));
  id v11 = v6;
  swift_unknownObjectRetain_n(v8, 2LL);
  id v12 = v11;
  uint64_t v13 = sub_10008D6A8(v12, v8, v7);
  sub_10001949C( (unint64_t *)&unk_1001148F0,  type metadata accessor for SplashScreenViewModel,  (uint64_t)&unk_1000C69C8);
  id v14 = v13;
  unint64_t v32 = (void **)ObservedObject.init(wrappedValue:)();
  uint64_t v33 = (uint64_t)v15;
  id v16 = v15;
  uint64_t v17 = (void *)UIHostingController.init(rootView:)(&v32);

  swift_unknownObjectRelease(v8);
  sub_10005CE04(v17);
  id result = objc_msgSend(v2, "faceTimeContainerViewController", v32, v33);
  if (!result)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  __n128 v18 = result;
  sub_1000781E8(0, a1 & 1);

  if ((a1 & 1) != 0)
  {
    id result = [v17 view];
    if (result)
    {
      uint64_t v19 = result;
      [result setAlpha:0.0];

      uint64_t v21 = (void *)objc_opt_self(&OBJC_CLASS___UIView, v20);
      uint64_t v22 = swift_allocObject(&unk_1000F9D68, 24LL, 7LL);
      *(void *)(v22 + swift_weakDestroy(v0 + 16) = v17;
      unint64_t v36 = sub_1000607F0;
      uint64_t v37 = v22;
      unint64_t v32 = _NSConcreteStackBlock;
      uint64_t v33 = 1107296256LL;
      uint64_t v34 = sub_100027654;
      uint64_t v35 = &unk_1000F9D80;
      id v23 = _Block_copy(&v32);
      uint64_t v24 = v37;
      id v25 = v17;
      swift_release(v24);
      uint64_t v26 = swift_allocObject(&unk_1000F9DB8, 24LL, 7LL);
      *(void *)(v26 + swift_weakDestroy(v0 + 16) = v2;
      unint64_t v36 = sub_10006080C;
      uint64_t v37 = v26;
      unint64_t v32 = _NSConcreteStackBlock;
      uint64_t v33 = 1107296256LL;
      uint64_t v34 = sub_1000B7A5C;
      uint64_t v35 = &unk_1000F9DD0;
      id v27 = _Block_copy(&v32);
      uint64_t v28 = v37;
      id v29 = v2;
      swift_release(v28);
      [v21 animateWithDuration:v23 animations:v27 completion:0.3];
      _Block_release(v27);
      _Block_release(v23);
      return v17;
    }

    goto LABEL_12;
  }

  id result = [v2 localVideoViewController];
  if (!result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v30 = result;
  [result endAppearanceTransition];

  id result = [v2 localVideoViewController];
  if (result)
  {
    os_log_type_t v31 = result;
    [result stopPreview];

    return v17;
  }

void sub_10005D3A0(int a1, id a2)
{
  id v3 = [a2 localVideoViewController];
  if (v3)
  {
    uint64_t v4 = v3;
    [v3 endAppearanceTransition];

    id v5 = [a2 localVideoViewController];
    if (v5)
    {
      id v6 = v5;
      [v5 stopPreview];

      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

void sub_10005D430(void *a1, char a2)
{
  id v3 = v2;
  uint64_t v6 = swift_allocObject(&unk_1000F9C78, 24LL, 7LL);
  swift_unknownObjectWeakInit(v6 + 16, v3);
  uint64_t v7 = swift_allocObject(&unk_1000F9CA0, 32LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(v7 + 24) = a1;
  swift_retain(v6);
  id v8 = a1;
  id v9 = [v3 localVideoViewController];
  if (v9)
  {
    id v10 = v9;
    [v9 beginAppearanceTransition:1 animated:a2 & 1];

    [v8 dismissViewControllerAnimated:a2 & 1 completion:0];
    if ((a2 & 1) != 0)
    {
      swift_release(v6);
      id v12 = (void *)objc_opt_self(&OBJC_CLASS___UIView, v11);
      uint64_t v13 = swift_allocObject(&unk_1000F9CC8, 24LL, 7LL);
      *(void *)(v13 + swift_weakDestroy(v0 + 16) = v8;
      uint64_t v24 = sub_1000607B0;
      uint64_t v25 = v13;
      uint64_t v20 = _NSConcreteStackBlock;
      uint64_t v21 = 1107296256LL;
      uint64_t v22 = sub_100027654;
      id v23 = &unk_1000F9CE0;
      id v14 = _Block_copy(&v20);
      uint64_t v15 = v25;
      id v16 = v8;
      swift_release(v15);
      uint64_t v17 = swift_allocObject(&unk_1000F9D18, 32LL, 7LL);
      *(void *)(v17 + swift_weakDestroy(v0 + 16) = sub_1000607A8;
      *(void *)(v17 + 24) = v7;
      uint64_t v24 = sub_100050108;
      uint64_t v25 = v17;
      uint64_t v20 = _NSConcreteStackBlock;
      uint64_t v21 = 1107296256LL;
      uint64_t v22 = sub_1000B7A5C;
      id v23 = &unk_1000F9D30;
      __n128 v18 = _Block_copy(&v20);
      uint64_t v19 = v25;
      swift_retain(v7);
      swift_release(v19);
      [v12 animateWithDuration:v14 animations:v18 completion:0.3];
      swift_release(v7);
      _Block_release(v18);
      _Block_release(v14);
    }

    else
    {
      sub_10005D764(v6, v8);
      swift_release(v7);
      swift_release(v6);
    }
  }

  else
  {
    swift_release(v6);
    __break(1u);
  }

void sub_10005D684(uint64_t a1, void *a2)
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    id v5 = (void *)Strong;
    [a2 willMoveToParentViewController:0];
    id v6 = [a2 view];
    if (v6)
    {
      uint64_t v7 = v6;
      [v6 removeFromSuperview];

      [a2 removeFromParentViewController];
      id v8 = [v5 localVideoViewController];
      if (v8)
      {
        id v9 = v8;
        [v8 endAppearanceTransition];

        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

void sub_10005D764(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    id v5 = (void *)Strong;
    [a2 willMoveToParentViewController:0];
    id v6 = [a2 view];
    if (v6)
    {
      uint64_t v7 = v6;
      [v6 removeFromSuperview];

      [a2 removeFromParentViewController];
      id v8 = [v5 localVideoViewController];
      if (v8)
      {
        id v9 = v8;
        [v8 endAppearanceTransition];

        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

void sub_10005D848(void *a1, double a2)
{
  id v3 = [a1 view];
  if (v3)
  {
    id v4 = v3;
    [v3 setAlpha:a2];
  }

  else
  {
    __break(1u);
  }

void sub_10005D8A0(uint64_t a1)
{
  id v1 = *(void **)(a1 + OBJC_IVAR___TVFTActiveCallViewController_multiwayViewController);
  if (qword_100112380 != -1) {
    swift_once(&qword_100112380, sub_100080AF0);
  }
  uint64_t v2 = *(void *)(qword_10011A2F0 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_videoPresentationStateCoordinator);
  if (v2)
  {
    id v3 = *(void **)(v2 + 24);
    *(void *)(v2 + 24) = v1;
    id v8 = v1;
    swift_retain(v2);

    id v4 = *(void **)(v2 + 24);
    if (v4)
    {
      uint64_t v5 = sub_10001949C( (unint64_t *)&unk_1001148D8,  (uint64_t (*)(uint64_t))type metadata accessor for VideoPresentationStateCoordinator,  (uint64_t)&unk_1000C65C4);
      swift_retain(v2);
      id v6 = v4;
      MultiwayViewController.videoPresentationStateCoordinator.setter(v2, v5);
      swift_release(v2);

      uint64_t v7 = v6;
    }

    else
    {
      swift_release(v2);
      uint64_t v7 = v8;
    }
  }

id sub_10005D9BC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ActiveCallContext(0LL);
  __chkstk_darwin(v4);
  id v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000606A8(a1, (uint64_t)v6, v7);
  id v8 = [objc_allocWithZone((Class)type metadata accessor for BannerPresentationManager(0)) init];
  id v10 = objc_msgSend((id)objc_opt_self(TUCallCenter, v9), "sharedInstance");
  id v11 = [objc_allocWithZone(TUFeatureFlags) init];
  id result = objc_msgSend((id)objc_opt_self(PHPIPController, v12), "defaultPIPController");
  if (result)
  {
    id v14 = result;
    type metadata accessor for ScreenSharingStateMonitor(0LL);
    uint64_t v15 = (void *)static ScreenSharingStateMonitor.sharedMonitor.getter();
    id v16 = (char *)objc_allocWithZone((Class)type metadata accessor for ActiveCallViewController(0LL));
    uint64_t v17 = (void *)sub_10005EFC8((uint64_t)v6, v8, v10, v11, v14, v15, v16);
    uint64_t v18 = swift_allocObject(&unk_1000F9B88, 24LL, 7LL);
    *(void *)(v18 + swift_weakDestroy(v0 + 16) = v17;
    aBlock[4] = sub_1000606EC;
    uint64_t v23 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_100027654;
    void aBlock[3] = &unk_1000F9BA0;
    uint64_t v19 = _Block_copy(aBlock);
    uint64_t v20 = v23;
    id v21 = v17;
    swift_release(v20);
    [v2 presentViewController:v21 animated:1 completion:v19];
    _Block_release(v19);
    return v21;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10005DBA4()
{
  id v1 = v0;
  uint64_t v2 = sub_100018A04((uint64_t *)&unk_100113110);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100018A04(&qword_100114890);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for IncomingHandoffContext(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (uint64_t)&v1[OBJC_IVAR___TVFaceTimeRootViewController_incomingHandoffContext];
  swift_beginAccess(&v1[OBJC_IVAR___TVFaceTimeRootViewController_incomingHandoffContext], v87, 0LL, 0LL);
  sub_10001C3B8(v12, (uint64_t)v7, &qword_100114890);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8) == 1)
  {
    sub_10001C608((uint64_t)v7, &qword_100114890);
    if (qword_1001122B8 != -1) {
      swift_once(&qword_1001122B8, sub_100056180);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    uint64_t v14 = sub_10001C270(v13, (uint64_t)qword_100114740);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "Failed to present banner due to missing handoff context",  v17,  2u);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    unint64_t v18 = sub_100060664();
    uint64_t v19 = swift_allocError(&type metadata for RootViewControllerError, v18, 0LL, 0LL);
    swift_willThrow(v19);
    return;
  }

  uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  if ((IncomingHandoffContext.skipPreviewBulletin.getter(v20) & 1) != 0)
  {
    if (qword_1001122B8 != -1) {
      swift_once(&qword_1001122B8, sub_100056180);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    uint64_t v23 = sub_10001C270(v22, (uint64_t)qword_100114740);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Incoming handoff requested to skip preview bulletin",  v26,  2u);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    goto LABEL_16;
  }

  id v27 = objc_msgSend((id)objc_opt_self(NSBundle, v21), "mainBundle");
  id v28 = [v27 bundleIdentifier];

  if (!v28)
  {
LABEL_32:
    __break(1u);
    return;
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  uint64_t v30 = v29;

  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v30);
  id v33 =  objc_msgSend( (id)objc_opt_self(BNBannerSource, v32),  "bannerSourceForDestination:forRequesterIdentifier:",  0,  v31);

  if (v33)
  {
    unint64_t v83 = v11;
    type metadata accessor for TVSUICameraPreviewViewController(0LL);
    id v34 = v33;
    uint64_t v35 = (void *)TVSUICameraPreviewViewController.__allocating_init(bannerSource:)();
    uint64_t v36 = swift_unknownObjectRetain(v1);
    dispatch thunk of TVSUICameraPreviewViewController.delegate.setter(v36);
    uint64_t v37 = sub_100018A04(&qword_1001148B8);
    uint64_t inited = swift_initStackObject(v37, v86);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1000C5C10;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(TVSPBannerPresentableKeyTimeout);
    *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v39;
    sub_10001C5D0(0LL, &qword_1001148C0, &OBJC_CLASS___NSNumber_ptr);
    *(NSNumber *)(inited + 4_Block_object_dispose(va, 8) = NSNumber.init(integerLiteral:)(0LL);
    *(void *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(TVSPBannerPresentableKeyAutoDismissOnAction);
    *(void *)(inited + 64) = v40;
    *(NSNumber *)(inited + 72) = NSNumber.init(BOOLeanLiteral:)(0);
    *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = static String._unconditionallyBridgeFromObjectiveC(_:)(TVSPBannerPresentableKeyHostedBannerWantsGestureForAction);
    *(void *)(inited + 8_Block_object_dispose(va, 8) = v41;
    *(NSNumber *)(inited + 96) = NSNumber.init(BOOLeanLiteral:)(1);
    *(void *)(inited + 104) = static String._unconditionallyBridgeFromObjectiveC(_:)(TVSPBannerPresentableKeyBannerType);
    *(void *)(inited + 112) = v42;
    *(NSNumber *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = Int._bridgeToObjectiveC()();
    *(void *)(inited + 12_Block_object_dispose(va, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)(TVSPBannerPresentableKeyHighPriority);
    *(void *)(inited + 136) = v43;
    *(NSNumber *)(inited + 144) = NSNumber.init(BOOLeanLiteral:)(1);
    *(void *)(inited + 152) = static String._unconditionallyBridgeFromObjectiveC(_:)(TVSPBannerPresentableKeyActionTrigger);
    *(void *)(inited + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v44;
    *(NSNumber *)(inited + 16_Block_object_dispose(va, 8) = UInt._bridgeToObjectiveC()();
    unint64_t v45 = sub_10002DF44(inited);
    uint64_t v24 = v35;
    sub_100018A04((uint64_t *)&unk_1001148C8);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    *(void *)&double v47 = swift_bridgeObjectRelease(v45).n128_u64[0];
    id v84 = 0LL;
    LOBYTE(v45) = objc_msgSend( v34,  "postPresentable:options:userInfo:error:",  v24,  1,  isa,  &v84,  v47);

    id v48 = v84;
    if ((v45 & 1) != 0)
    {
      id v49 = v84;

      id v11 = v83;
LABEL_16:

      id v50 = [v1 localVideoViewController];
      if (v50)
      {
        uint64_t v51 = v50;
        [v50 setReadyForPreview:0];

        id v52 = [v1 faceTimeContainerViewController];
        if (v52)
        {
          uint64_t v53 = v52;
          sub_1000781E8(0, 1);

          uint64_t v54 = *sub_10001C3FC( &v1[OBJC_IVAR___TVFaceTimeRootViewController_callManager],  *(void *)&v1[OBJC_IVAR___TVFaceTimeRootViewController_callManager + 24]);
          (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v4, v11, v8);
          uint64_t v55 = type metadata accessor for JoinCallContext(0LL);
          swift_storeEnumTagMultiPayload(v4, v55, 1LL);
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56LL))(v4, 0LL, 1LL, v55);
          uint64_t v56 = v54 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_lastJoinCallContext;
          swift_beginAccess(v54 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_lastJoinCallContext, &v84, 33LL, 0LL);
          sub_1000362F0((uint64_t)v4, v56, (uint64_t *)&unk_100113110);
          swift_endAccess(&v84);
          uint64_t v58 = type metadata accessor for SpinnerViewController(0LL, v57);
          objc_msgSend( v1,  "presentViewController:animated:completion:",  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v58)), "init"),  1,  0);
          (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
          return;
        }
      }

      else
      {
        __break(1u);
      }

      __break(1u);
      goto LABEL_32;
    }

    id v66 = v84;
    uint64_t v67 = _convertNSErrorToError(_:)(v48);

    swift_willThrow(v68);
    if (qword_1001122B8 != -1) {
      swift_once(&qword_1001122B8, sub_100056180);
    }
    uint64_t v69 = type metadata accessor for Logger(0LL);
    sub_10001C270(v69, (uint64_t)qword_100114740);
    swift_errorRetain(v67);
    uint64_t v70 = swift_errorRetain(v67);
    uint64_t v71 = (os_log_s *)Logger.logObject.getter(v70);
    os_log_type_t v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, v72))
    {
      id v82 = v34;
      os_log_type_t v73 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      unint64_t v81 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)os_log_type_t v73 = 138412290;
      swift_errorRetain(v67);
      int v74 = (void *)_swift_stdlib_bridgeErrorToNSError(v67);
      id v84 = v74;
      id v34 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v73 + 4, v73 + 12);
      uint64_t v75 = v81;
      *unint64_t v81 = v74;
      swift_errorRelease(v67);
      swift_errorRelease(v67);
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Failed to present banner due to %@", v73, 0xCu);
      uint64_t v76 = sub_100018A04((uint64_t *)&unk_100112E20);
      swift_arrayDestroy(v75, 1LL, v76);
      swift_slowDealloc(v75, -1LL, -1LL);
      swift_slowDealloc(v73, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v67);
      swift_errorRelease(v67);
    }

    uint64_t v77 = v83;

    unint64_t v78 = sub_100060664();
    uint64_t v79 = swift_allocError(&type metadata for RootViewControllerError, v78, 0LL, 0LL);
    swift_willThrow(v79);
    swift_errorRelease(v67);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v77, v8);
  }

  else
  {
    if (qword_1001122B8 != -1) {
      swift_once(&qword_1001122B8, sub_100056180);
    }
    uint64_t v59 = type metadata accessor for Logger(0LL);
    uint64_t v60 = sub_10001C270(v59, (uint64_t)qword_100114740);
    uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      char v63 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Failed to create banner source or presentable.", v63, 2u);
      swift_slowDealloc(v63, -1LL, -1LL);
    }

    unint64_t v64 = sub_100060664();
    uint64_t v65 = swift_allocError(&type metadata for RootViewControllerError, v64, 0LL, 0LL);
    swift_willThrow(v65);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

void sub_10005E5AC(uint64_t a1)
{
  v6[0] = "(";
  v6[1] = &unk_1000C5C90;
  v6[2] = &unk_1000C5C90;
  v6[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v6[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t v2 = type metadata accessor for RootViewController.State(319LL);
  if (v3 <= 0x3F)
  {
    v6[6] = *(void *)(v2 - 8) + 64LL;
    sub_10005E67C(319LL);
    if (v5 <= 0x3F)
    {
      v6[7] = *(void *)(v4 - 8) + 64LL;
      swift_updateClassMetadata2(a1, 256LL, 8LL, v6, a1 + 80);
    }
  }

uint64_t type metadata accessor for RootViewController.State(uint64_t a1)
{
  return sub_100020F70(a1, qword_100114850, (uint64_t)&nominal type descriptor for RootViewController.State);
}

void sub_10005E67C(uint64_t a1)
{
  if (!qword_1001147D0)
  {
    uint64_t v2 = type metadata accessor for IncomingHandoffContext(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1001147D0);
    }
  }

void sub_10005E72C(uint64_t a1)
{
  uint64_t v2 = sub_100018A04((uint64_t *)&unk_1001148A0);
  __chkstk_darwin(v2);
  uint64_t v4 = (id *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = *(void *)(*sub_10001C3FC( (void *)(a1 + OBJC_IVAR___TVFaceTimeRootViewController_callManager),  *(void *)(a1 + OBJC_IVAR___TVFaceTimeRootViewController_callManager + 24))
                 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_activeCallSubject);
  swift_retain(v5);
  CurrentValueSubject.value.getter(v6);
  swift_release(v5);
  uint64_t v7 = type metadata accessor for ActiveCallContext(0LL);
  if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v4, 1LL, v7) == 1)
  {
    sub_10001C608((uint64_t)v4, (uint64_t *)&unk_1001148A0);
  }

  else
  {
    id v8 = *v4;
    uint64_t v9 = sub_10001C644((uint64_t)v4, type metadata accessor for ActiveCallContext);
    id v10 = [v8 setUplinkMuted:(IncomingHandoffContext.isAudioEnabled.getter(v9) & 1) == 0];
    [v8 setIsSendingVideo:IncomingHandoffContext.isVideoEnabled.getter(v10) & 1];
  }

void sub_10005E86C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RootViewController.State(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (void **)&v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = a1 + OBJC_IVAR___TVFaceTimeRootViewController_state;
  swift_beginAccess(v5, v8, 0LL, 0LL);
  sub_1000606A8(v5, (uint64_t)v4, type metadata accessor for RootViewController.State);
  if (swift_getEnumCaseMultiPayload(v4, v2) == 1)
  {
    uint64_t v6 = *v4;
    MultiwayViewController.showLocalParticipantViewForHandoffCompleted()();
  }

  else
  {
    sub_10001C644((uint64_t)v4, type metadata accessor for RootViewController.State);
  }

char *sub_10005E998(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    id v10 = *a2;
    *(void *)a1 = *a2;
    a1 = &v10[(v6 + 16LL) & ~(unint64_t)v6];
    swift_retain(v10);
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        id v8 = *a2;
        *(void *)a1 = *a2;
        uint64_t v9 = v8;
        swift_storeEnumTagMultiPayload(a1, a3, 0LL);
        break;
      case 1u:
        uint64_t v12 = *a2;
        *(void *)a1 = *a2;
        uint64_t v13 = v12;
        swift_storeEnumTagMultiPayload(a1, a3, 1LL);
        break;
      case 2u:
        uint64_t v14 = *a2;
        *(void *)a1 = *a2;
        uint64_t v15 = v14;
        swift_storeEnumTagMultiPayload(a1, a3, 2LL);
        break;
      case 3u:
        uint64_t v16 = type metadata accessor for UUID(0LL);
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v16 - 8) + 16LL))(a1, a2, v16);
        uint64_t v17 = *(int *)(sub_100018A04(&qword_1001147D8) + 48);
        unint64_t v18 = *(char **)((char *)a2 + v17);
        *(void *)&a1[v17] = v18;
        id v19 = v18;
        swift_storeEnumTagMultiPayload(a1, a3, 3LL);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

void sub_10005EAE4(id *a1, uint64_t a2)
{
  uint64_t v2 = a1;
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  if (EnumCaseMultiPayload >= 3)
  {
    if (EnumCaseMultiPayload != 3) {
      return;
    }
    uint64_t v4 = type metadata accessor for UUID(0LL);
    (*(void (**)(id *, uint64_t))(*(void *)(v4 - 8) + 8LL))(v2, v4);
    uint64_t v2 = (id *)((char *)v2 + *(int *)(sub_100018A04(&qword_1001147D8) + 48));
  }
}

void **sub_10005EB50(void **a1, void **a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      int v6 = *a2;
      *a1 = *a2;
      id v7 = v6;
      id v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
      goto LABEL_7;
    case 1u:
      uint64_t v11 = *a2;
      *a1 = *a2;
      id v12 = v11;
      id v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
      goto LABEL_7;
    case 2u:
      uint64_t v13 = *a2;
      *a1 = *a2;
      id v14 = v13;
      id v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 2LL;
      goto LABEL_7;
    case 3u:
      uint64_t v15 = type metadata accessor for UUID(0LL);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v15 - 8) + 16LL))(a1, a2, v15);
      uint64_t v16 = *(int *)(sub_100018A04(&qword_1001147D8) + 48);
      uint64_t v17 = *(void **)((char *)a2 + v16);
      *(void **)((char *)a1 + vswift_weakDestroy(v0 + 16) = v17;
      id v18 = v17;
      id v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 3LL;
LABEL_7:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

void **sub_10005EC68(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10001C644((uint64_t)a1, type metadata accessor for RootViewController.State);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        int v6 = *a2;
        *a1 = *a2;
        id v7 = v6;
        id v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 0LL;
        goto LABEL_8;
      case 1u:
        uint64_t v11 = *a2;
        *a1 = *a2;
        id v12 = v11;
        id v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 1LL;
        goto LABEL_8;
      case 2u:
        uint64_t v13 = *a2;
        *a1 = *a2;
        id v14 = v13;
        id v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 2LL;
        goto LABEL_8;
      case 3u:
        uint64_t v15 = type metadata accessor for UUID(0LL);
        (*(void (**)(void **, void **, uint64_t))(*(void *)(v15 - 8) + 16LL))(a1, a2, v15);
        uint64_t v16 = *(int *)(sub_100018A04(&qword_1001147D8) + 48);
        uint64_t v17 = *(void **)((char *)a2 + v16);
        *(void **)((char *)a1 + vswift_weakDestroy(v0 + 16) = v17;
        id v18 = v17;
        id v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 3LL;
LABEL_8:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

char *sub_10005ED98(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 3)
  {
    uint64_t v6 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    uint64_t v7 = sub_100018A04(&qword_1001147D8);
    *(void *)&a1[*(int *)(v7 + 48)] = *(void *)&a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload(a1, a3, 3LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

char *sub_10005EE3C(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10001C644((uint64_t)a1, type metadata accessor for RootViewController.State);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 3)
    {
      uint64_t v6 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      uint64_t v7 = sub_100018A04(&qword_1001147D8);
      *(void *)&a1[*(int *)(v7 + 48)] = *(void *)&a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload(a1, a3, 3LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_10005EEF8(uint64_t a1)
{
  v5[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v5[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, *(void *)(result - 8) + 64LL, "\b");
    v5[3] = v4;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 4LL, v5);
    return 0LL;
  }

  return result;
}

id sub_10005EF84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v8 = *(id *)(a1 + 16);
  char v3 = *(_BYTE *)(a1 + 24);
  uint64_t v4 = *(void **)a2;
  char v5 = *(_BYTE *)(a2 + 8);
  *(void *)a3 = v8;
  *(_BYTE *)(a3 + _Block_object_dispose(va, 8) = v3;
  *(void *)(a3 + swift_weakDestroy(v0 + 16) = v4;
  *(_BYTE *)(a3 + 24) = v5;
  id v6 = v4;
  return v8;
}

uint64_t sub_10005EFC8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, char *a7)
{
  id v99 = a5;
  uint64_t v100 = a6;
  id v101 = a4;
  id v87 = a3;
  id v96 = a2;
  os_log_type_t v103 = (void **)a1;
  uint64_t v8 = sub_100018A04((uint64_t *)&unk_100113110);
  __chkstk_darwin(v8);
  uint64_t v102 = (uint64_t)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v86 = type metadata accessor for IncomingHandoffContext(0LL);
  uint64_t v85 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  id v84 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v93 = *(void *)(v11 - 8);
  uint64_t v94 = v11;
  __chkstk_darwin(v11);
  uint64_t v92 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v16);
  id v18 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v19 = &a7[OBJC_IVAR___TVFTActiveCallViewController_joinCallContext];
  uint64_t v95 = &a7[OBJC_IVAR___TVFTActiveCallViewController_joinCallContext];
  uint64_t v20 = type metadata accessor for JoinCallContext(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v97 = v20;
  uint64_t v98 = v21;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1LL, 1LL, v20);
  *(void *)&a7[OBJC_IVAR___TVFTActiveCallViewController_screenSharingContainerViewController] = 0LL;
  *(void *)&a7[OBJC_IVAR___TVFTActiveCallViewController____lazy_storage___pipShroudView] = 0LL;
  *(void *)&a7[OBJC_IVAR___TVFTActiveCallViewController_idleTimerAssertion] = 0LL;
  uint64_t v91 = OBJC_IVAR___TVFTActiveCallViewController_observerQueue;
  sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v22 = a7;
  static DispatchQoS.unspecified.getter(v22);
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_10001949C( (unint64_t *)&qword_100113130,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v89 = v23;
  uint64_t v24 = sub_100018A04((uint64_t *)&unk_100112DC0);
  uint64_t v88 = v24;
  uint64_t v90 = sub_100022750( (unint64_t *)&qword_100113140,  (uint64_t *)&unk_100112DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  os_log_type_t v25 = v15;
  uint64_t v26 = v24;
  uint64_t v27 = v13;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v26, v90, v13, v23);
  uint64_t v28 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  uint64_t v29 = v92;
  uint64_t v93 = *(void *)(v93 + 104);
  uint64_t v30 = v94;
  ((void (*)(char *, void, uint64_t))v93)( v92,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v94);
  uint64_t v31 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000039LL,  0x80000001000D9060LL,  v18,  v25,  v29,  0LL);
  *(void *)&a7[v91] = v31;
  uint64_t v32 = OBJC_IVAR___TVFTActiveCallViewController_observers;
  id v34 = objc_msgSend((id)objc_opt_self(NSHashTable, v33), "weakObjectsHashTable");
  *(void *)&v22[v32] = v34;
  *(void *)&v22[OBJC_IVAR___TVFTActiveCallViewController_observerCancellables] = _swiftEmptyArrayStorage;
  uint64_t v35 = OBJC_IVAR___TVFTActiveCallViewController_conversationManagerQueue;
  static DispatchQoS.unspecified.getter(v34);
  aBlock[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v88, v90, v27, v89);
  ((void (*)(char *, uint64_t, uint64_t))v93)(v29, v28, v30);
  *(void *)&v22[v35] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000044LL,  0x80000001000D90A0LL,  v18,  v25,  v29,  0LL);
  uint64_t v36 = type metadata accessor for ActiveCallContext(0LL);
  uint64_t v37 = v103;
  uint64_t v38 = (uint64_t)v103 + *(int *)(v36 + 20);
  uint64_t v39 = (uint64_t)v95;
  swift_beginAccess(v95, aBlock, 33LL, 0LL);
  sub_1000606F4(v38, v39);
  swift_endAccess(aBlock);
  uint64_t v40 = *v37;
  *(void *)&v22[OBJC_IVAR___TVFTActiveCallViewController_call] = v40;
  id v41 = v96;
  *(void *)&v22[OBJC_IVAR___TVFTActiveCallViewController_bannerPresentationManager] = v96;
  type metadata accessor for MultiwayViewController(0LL);
  id v42 = v40;
  id v43 = v41;
  id v44 = v42;
  id v45 = v43;
  uint64_t v46 = (void *)MultiwayViewController.__allocating_init(activeCall:bannerPresentationManager:)(v44, v45);
  *(void *)&v22[OBJC_IVAR___TVFTActiveCallViewController_multiwayViewController] = v46;
  id v47 = objc_allocWithZone((Class)type metadata accessor for AudioCallViewController(0LL));
  id v48 = v44;
  id v49 = v45;
  id v50 = v46;
  id v96 = v49;
  uint64_t v51 = (void *)AudioCallViewController.init(call:bannerPresentationManager:)(v48, v49);
  *(void *)&v22[OBJC_IVAR___TVFTActiveCallViewController_audioCallViewController] = v51;
  id v53 = v99;
  id v52 = v100;
  *(void *)&v22[OBJC_IVAR___TVFTActiveCallViewController_pipController] = v99;
  *(void *)&v22[OBJC_IVAR___TVFTActiveCallViewController_screenSharingStateMonitor] = v52;
  id v54 = v101;
  *(void *)&v22[OBJC_IVAR___TVFTActiveCallViewController_featureFlags] = v101;
  id v55 = v51;
  id v99 = v53;
  id v56 = v52;
  id v101 = v54;

  uint64_t v57 = (objc_class *)type metadata accessor for ActiveCallViewController(0LL);
  v106.receiver = v22;
  v106.super_class = v57;
  id v58 = objc_msgSendSuper2(&v106, "initWithNibName:bundle:", 0, 0);
  [v58 setModalPresentationStyle:5];
  id v59 = v58;
  MultiwayViewController.delegate.setter(v58);
  uint64_t v60 = v102;
  uint64_t v61 = v38;
  uint64_t v62 = v97;
  sub_10001C3B8(v61, v102, (uint64_t *)&unk_100113110);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v60, 1LL, v62) == 1)
  {
    sub_10001C608(v60, (uint64_t *)&unk_100113110);
  }

  else if (swift_getEnumCaseMultiPayload(v60, v62) == 1)
  {
    uint64_t v63 = v85;
    unint64_t v64 = v84;
    uint64_t v65 = v86;
    uint64_t v66 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v85 + 32))(v84, v60, v86);
    if ((IncomingHandoffContext.skipPreviewBulletin.getter(v66) & 1) == 0) {
      MultiwayViewController.hideLocalParticipantViewForHandoffPreview()();
    }
    (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v65);
  }

  else
  {
    sub_10001C644(v60, type metadata accessor for JoinCallContext);
  }

  uint64_t v67 = sub_10001949C(&qword_1001148E8, type metadata accessor for ActiveCallViewController, (uint64_t)&unk_1000C4D98);
  uint64_t v68 = (char *)v59;
  dispatch thunk of AudioCallViewController.delegate.setter(v58, v67);
  uint64_t v69 = *(void **)&v68[OBJC_IVAR___TVFTActiveCallViewController_call];
  id v70 = v69;
  dispatch thunk of ScreenSharingStateMonitor.call.setter(v69);
  uint64_t v71 = v68;
  dispatch thunk of ScreenSharingStateMonitor.addObserver(_:)();

  sub_100024C8C();
  if (qword_100112380 != -1) {
    swift_once(&qword_100112380, sub_100080AF0);
  }
  uint64_t v72 = *(void *)(qword_10011A2F0 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_presentationManager);
  os_log_type_t v73 = *(void **)&v71[OBJC_IVAR___TVFTActiveCallViewController_observerQueue];
  uint64_t v74 = swift_allocObject(&unk_1000F9BD8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v74 + 16, v71);
  uint64_t v75 = swift_allocObject(&unk_1000F9C00, 32LL, 7LL);
  *(void *)(v75 + swift_weakDestroy(v0 + 16) = v74;
  *(void *)(v75 + 24) = v72;
  uint64_t v76 = swift_allocObject(&unk_1000F9C28, 32LL, 7LL);
  *(void *)(v76 + swift_weakDestroy(v0 + 16) = sub_10006078C;
  *(void *)(v76 + 24) = v75;
  aBlock[4] = sub_10001C698;
  uint64_t v105 = v76;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000983FC;
  void aBlock[3] = &unk_1000F9C40;
  uint64_t v77 = _Block_copy(aBlock);
  uint64_t v78 = v105;
  swift_retain_n(v72, 2LL);
  uint64_t v79 = v73;
  swift_retain(v76);
  swift_release(v78);
  dispatch_sync(v79, v77);

  _Block_release(v77);
  LOBYTE(v77) = swift_isEscapingClosureAtFileLocation(v76, "", 109LL, 634LL, 28LL, 1LL);
  swift_release(v72);
  swift_release(v75);
  uint64_t result = swift_release(v76);
  if ((v77 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    id v81 = v87;
    id v82 = [v87 conversationManager];
    [v82 addDelegate:v71 queue:*(void *)&v71[OBJC_IVAR___TVFTActiveCallViewController_conversationManagerQueue]];

    sub_10001C644((uint64_t)v103, type metadata accessor for ActiveCallContext);
    return (uint64_t)v71;
  }

  return result;
}

void *sub_10005F880(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  id v27 = a2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v25 = v5;
  uint64_t v26 = v6;
  uint64_t v7 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v22 - v10;
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v12; uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v20))
  {
    v22[1] = v3;
    uint64_t v23 = v12;
    unint64_t v24 = a1 & 0xC000000000000001LL;
    uint64_t v3 = 4LL;
    while (1)
    {
      id v13 = v24 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, a1) : *(id *)(a1 + 8 * v3);
      uint64_t v14 = v13;
      uint64_t v15 = v3 - 3;
      if (__OFADD__(v3 - 4, 1LL)) {
        break;
      }
      id v16 = [v13 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v17 = [v27 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v17) = static UUID.== infix(_:_:)(v11, v9);
      uint64_t v18 = v25;
      id v19 = *(void (**)(char *, uint64_t))(v26 + 8);
      v19(v9, v25);
      v19(v11, v18);
      if ((v17 & 1) != 0)
      {
        swift_bridgeObjectRelease(a1);
        return v14;
      }

      ++v3;
      if (v15 == v23) {
        goto LABEL_17;
      }
    }

    __break(1u);
LABEL_13:
    if (a1 < 0) {
      uint64_t v20 = a1;
    }
    else {
      uint64_t v20 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

uint64_t sub_10005FA70(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for RootViewController.Event(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100018A04(&qword_100114890);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for IncomingHandoffContext(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = v1 + OBJC_IVAR___TVFaceTimeRootViewController_incomingHandoffContext;
  swift_beginAccess(v1 + OBJC_IVAR___TVFaceTimeRootViewController_incomingHandoffContext, v24, 33LL, 0LL);
  sub_1000362F0((uint64_t)v8, v10, &qword_100114890);
  swift_endAccess(v24);
  if (qword_1001122B8 != -1) {
    swift_once(&qword_1001122B8, sub_100056180);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_10001C270(v11, (uint64_t)qword_100114740);
  swift_errorRetain(a1);
  uint64_t v12 = swift_errorRetain(a1);
  id v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    v24[0] = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    if (a1)
    {
      swift_getErrorValue(a1, v22, v21);
      uint64_t v17 = Error.localizedDescription.getter(v21[1], v21[2]);
      unint64_t v19 = v18;
    }

    else
    {
      unint64_t v19 = 0xE900000000000044LL;
      uint64_t v17 = 0x454C4C45434E4143LL;
    }

    uint64_t v23 = sub_1000850E4(v17, v19, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v19);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "cameraPreviewControllerCancelled with error %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  swift_storeEnumTagMultiPayload(v5, v3, 8LL);
  sub_100056F4C((uint64_t)v5);
  return sub_10001C644((uint64_t)v5, type metadata accessor for RootViewController.Event);
}

uint64_t sub_10005FD4C()
{
  uint64_t v86 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v89 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v1 = (char *)&v76 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100018A04(&qword_100114890);
  uint64_t v7 = __chkstk_darwin(v6);
  id v82 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v76 - v9;
  uint64_t v11 = type metadata accessor for IncomingHandoffContext(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v80 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v79 = (char *)&v76 - v16;
  __chkstk_darwin(v15);
  uint64_t v88 = (char *)&v76 - v17;
  if (qword_1001122B8 != -1) {
    swift_once(&qword_1001122B8, sub_100056180);
  }
  id v84 = v5;
  uint64_t v85 = v3;
  uint64_t v18 = type metadata accessor for Logger(0LL);
  uint64_t v19 = sub_10001C270(v18, (uint64_t)qword_100114740);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = v12;
    uint64_t v23 = v2;
    unint64_t v24 = v1;
    uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "cameraPreviewControllerCompleted", v25, 2u);
    uint64_t v26 = v25;
    uint64_t v1 = v24;
    uint64_t v2 = v23;
    uint64_t v12 = v22;
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  id v27 = v90;
  uint64_t v28 = (uint64_t)&v90[OBJC_IVAR___TVFaceTimeRootViewController_incomingHandoffContext];
  swift_beginAccess(&v90[OBJC_IVAR___TVFaceTimeRootViewController_incomingHandoffContext], v98, 0LL, 0LL);
  uint64_t v81 = v28;
  sub_10001C3B8(v28, (uint64_t)v10, &qword_100114890);
  int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11);
  uint64_t v87 = v2;
  if (v29 == 1)
  {
    sub_10001C608((uint64_t)v10, &qword_100114890);
    uint64_t v30 = &off_1000C3000;
    uint64_t v32 = v85;
    uint64_t v31 = v86;
    uint64_t v33 = v84;
  }

  else
  {
    uint64_t v78 = v1;
    id v34 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    uint64_t v35 = v88;
    v34(v88, v10, v11);
    uint64_t v83 = v12;
    uint64_t v36 = *(uint64_t (**)(char *, char *, uint64_t))(v12 + 16);
    uint64_t v37 = v79;
    uint64_t v38 = v36(v79, v35, v11);
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      id v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v42 = (void **)swift_slowAlloc(32LL, -1LL);
      id aBlock = v42;
      uint64_t v77 = v36;
      *(_DWORD *)id v41 = 136315138;
      uint64_t v76 = v41 + 4;
      uint64_t v43 = sub_10001949C( &qword_100114898,  (uint64_t (*)(uint64_t))&type metadata accessor for IncomingHandoffContext,  (uint64_t)&protocol conformance descriptor for IncomingHandoffContext);
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter(v11, v43);
      unint64_t v46 = v45;
      uint64_t v91 = (void *)sub_1000850E4(v44, v45, (uint64_t *)&aBlock);
      uint64_t v36 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &aBlock, v76, v41 + 12);
      __n128 v47 = swift_bridgeObjectRelease(v46);
      uint64_t v79 = *(char **)(v83 + 8);
      ((void (*)(char *, uint64_t, __n128))v79)(v37, v11, v47);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Updating call state to match %s.", v41, 0xCu);
      swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
      id v48 = v42;
      id v27 = v90;
      swift_slowDealloc(v48, -1LL, -1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
      uint64_t v79 = *(char **)(v83 + 8);
      ((void (*)(char *, uint64_t))v79)(v37, v11);
    }

    id v50 = objc_msgSend((id)objc_opt_self(TUCallCenter, v49), "sharedInstance");
    id v51 = [v50 queue];

    id v52 = v80;
    v36(v80, v88, v11);
    uint64_t v53 = *(unsigned __int8 *)(v83 + 80);
    uint64_t v54 = (v53 + 24) & ~v53;
    uint64_t v55 = swift_allocObject(&unk_1000F9B38, v54 + v13, v53 | 7);
    *(void *)(v55 + swift_weakDestroy(v0 + 16) = v27;
    v34((char *)(v55 + v54), v52, v11);
    id v96 = sub_100060620;
    uint64_t v97 = v55;
    id aBlock = _NSConcreteStackBlock;
    uint64_t v30 = &off_1000C3000;
    uint64_t v93 = 1107296256LL;
    uint64_t v94 = sub_100027654;
    uint64_t v95 = &unk_1000F9B50;
    id v56 = _Block_copy(&aBlock);
    id v57 = v27;
    uint64_t v33 = v84;
    static DispatchQoS.unspecified.getter(v57);
    uint64_t v91 = _swiftEmptyArrayStorage;
    uint64_t v58 = sub_10001949C( (unint64_t *)&qword_100112930,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v59 = sub_100018A04((uint64_t *)&unk_100112FD0);
    uint64_t v60 = sub_100022750( (unint64_t *)&qword_100112940,  (uint64_t *)&unk_100112FD0,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v1 = v78;
    uint64_t v31 = v86;
    uint64_t v61 = v58;
    id v27 = v90;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v91, v59, v60, v86, v61);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v33, v1, v56);
    _Block_release(v56);

    (*(void (**)(char *, uint64_t))(v89 + 8))(v1, v31);
    uint64_t v32 = v85;
    (*(void (**)(char *, uint64_t))(v85 + 8))(v33, v87);
    swift_release(v97);
    uint64_t v62 = (uint64_t)v82;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 56))(v82, 1LL, 1LL, v11);
    uint64_t v63 = v81;
    swift_beginAccess(v81, &aBlock, 33LL, 0LL);
    sub_1000362F0(v62, v63, &qword_100114890);
    __n128 v64 = swift_endAccess(&aBlock);
    ((void (*)(char *, uint64_t, __n128))v79)(v88, v11, v64);
  }

  sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v66 = (void *)static OS_dispatch_queue.main.getter(v65);
  uint64_t v67 = swift_allocObject(&unk_1000F9AE8, 24LL, 7LL);
  *(void *)(v67 + swift_weakDestroy(v0 + 16) = v27;
  id v96 = sub_10006058C;
  uint64_t v97 = v67;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v93 = *((void *)v30 + 508);
  uint64_t v94 = sub_100027654;
  uint64_t v95 = &unk_1000F9B00;
  uint64_t v68 = _Block_copy(&aBlock);
  uint64_t v69 = v97;
  id v70 = v27;
  uint64_t v71 = swift_release(v69);
  static DispatchQoS.unspecified.getter(v71);
  id aBlock = (void **)_swiftEmptyArrayStorage;
  uint64_t v72 = sub_10001949C( (unint64_t *)&qword_100112930,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v73 = sub_100018A04((uint64_t *)&unk_100112FD0);
  uint64_t v74 = sub_100022750( (unint64_t *)&qword_100112940,  (uint64_t *)&unk_100112FD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v73, v74, v31, v72);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v33, v1, v68);
  _Block_release(v68);

  (*(void (**)(char *, uint64_t))(v89 + 8))(v1, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v33, v87);
}

uint64_t sub_100060568()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10006058C()
{
}

uint64_t sub_100060594(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000605A4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000605AC()
{
  uint64_t v1 = type metadata accessor for IncomingHandoffContext(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100060620()
{
}

uint64_t type metadata accessor for RootViewController.Event(uint64_t a1)
{
  return sub_100020F70(a1, qword_100114A08, (uint64_t)&nominal type descriptor for RootViewController.Event);
}

unint64_t sub_100060664()
{
  unint64_t result = qword_1001148B0;
  if (!qword_1001148B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000C5DC0, &type metadata for RootViewControllerError);
    atomic_store(result, (unint64_t *)&qword_1001148B0);
  }

  return result;
}

uint64_t sub_1000606A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

void sub_1000606EC()
{
}

uint64_t sub_1000606F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04((uint64_t *)&unk_100113110);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006073C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100060760()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10006078C()
{
}

uint64_t sub_100060794()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000607A8()
{
}

void sub_1000607B0()
{
}

uint64_t sub_1000607CC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000607F0()
{
}

void sub_10006080C(int a1)
{
}

uint64_t sub_100060814(uint64_t a1)
{
  return sub_10005C7F4(a1);
}

unint64_t sub_10006081C()
{
  unint64_t result = qword_100114930;
  if (!qword_100114930)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000C6654, &type metadata for CaptureDeviceState);
    atomic_store(result, (unint64_t *)&qword_100114930);
  }

  return result;
}

void sub_100060860(void *a1, char a2, void *a3, char a4)
{
}

uint64_t sub_100060868(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(v1 + 16))( *(void *)a1,  *(unsigned __int8 *)(a1 + 8),  *(void *)(a1 + 16),  *(unsigned __int8 *)(a1 + 24));
}

uint64_t sub_10006089C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActiveCallContext(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000608E4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_10011497C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10001C958;
  return sub_10005A5AC(a1, v4, v5, v6);
}

void sub_100060950()
{
}

uint64_t sub_10006096C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100060998()
{
}

uint64_t sub_1000609A4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000609D0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_10011498C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10001C158;
  return sub_100058E3C(a1, v4, v5, v6);
}

uint64_t sub_100060A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RootViewController.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for RootViewControllerError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100060AC0 + 4 * byte_1000C5C2C[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100060AE0 + 4 * byte_1000C5C31[v4]))();
  }
}

_BYTE *sub_100060AC0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100060AE0(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100060AE8(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100060AF0(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100060AF8(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100060B00(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RootViewControllerError()
{
  return &type metadata for RootViewControllerError;
}

char *sub_100060B1C(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    a1 = &v10[(v6 + 16LL) & ~(unint64_t)v6];
    swift_retain(v10);
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v8 = *a2;
        *(void *)a1 = *a2;
        uint64_t v9 = v8;
        swift_storeEnumTagMultiPayload(a1, a3, 0LL);
        break;
      case 1u:
        uint64_t v12 = *a2;
        *(void *)a1 = *a2;
        uint64_t v13 = type metadata accessor for ActiveCallContext(0LL);
        uint64_t v14 = *(int *)(v13 + 20);
        uint64_t v15 = &a1[v14];
        uint64_t v16 = (char **)((char *)a2 + v14);
        uint64_t v17 = type metadata accessor for JoinCallContext(0LL);
        uint64_t v18 = *(void *)(v17 - 8);
        uint64_t v19 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48);
        uint64_t v20 = v12;
        if (v19(v16, 1LL, v17))
        {
          uint64_t v21 = sub_100018A04((uint64_t *)&unk_100113110);
          memcpy(v15, v16, *(void *)(*(void *)(v21 - 8) + 64LL));
        }

        else
        {
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v17);
          if (EnumCaseMultiPayload == 1)
          {
            uint64_t v33 = type metadata accessor for IncomingHandoffContext(0LL);
            (*(void (**)(char *, void *, uint64_t))(*(void *)(v33 - 8) + 16LL))(v15, v16, v33);
            swift_storeEnumTagMultiPayload(v15, v17, 1LL);
          }

          else if (EnumCaseMultiPayload)
          {
            memcpy(v15, v16, *(void *)(v18 + 64));
          }

          else
          {
            *(void *)uint64_t v15 = *v16;
            uint64_t v29 = type metadata accessor for OutgoingCallContext(0LL);
            uint64_t v30 = *(int *)(v29 + 20);
            id v34 = &v15[v30];
            uint64_t v31 = (char *)v16 + v30;
            uint64_t v32 = type metadata accessor for CallType(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16LL))(v34, v31, v32);
            v15[*(int *)(v29 + 24)] = *((_BYTE *)v16 + *(int *)(v29 + 24));
            swift_storeEnumTagMultiPayload(v15, v17, 0LL);
          }

          (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
        }

        a1[*(int *)(v13 + 24)] = *((_BYTE *)a2 + *(int *)(v13 + 24));
        swift_storeEnumTagMultiPayload(a1, a3, 1LL);
        break;
      case 2u:
        uint64_t v22 = type metadata accessor for IncomingHandoffContext(0LL);
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v22 - 8) + 16LL))(a1, a2, v22);
        swift_storeEnumTagMultiPayload(a1, a3, 2LL);
        break;
      case 3u:
        uint64_t v23 = *a2;
        *(void *)a1 = *a2;
        unint64_t v24 = v23;
        swift_storeEnumTagMultiPayload(a1, a3, 3LL);
        break;
      case 4u:
        uint64_t v25 = type metadata accessor for JoinFailureContext(0LL);
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v25 - 8) + 16LL))(a1, a2, v25);
        swift_storeEnumTagMultiPayload(a1, a3, 4LL);
        break;
      case 5u:
        uint64_t v26 = *a2;
        *(void *)a1 = *a2;
        id v27 = v26;
        swift_storeEnumTagMultiPayload(a1, a3, 5LL);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

void sub_100060E08(id *a1, uint64_t a2)
{
  uint64_t v2 = a1;
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
    case 3u:
    case 5u:

      break;
    case 1u:

      uint64_t v2 = (id *)((char *)v2 + *(int *)(type metadata accessor for ActiveCallContext(0LL) + 20));
      uint64_t v3 = type metadata accessor for JoinCallContext(0LL);
      if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48LL))(v2, 1LL, v3))
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v2, v3);
        if (EnumCaseMultiPayload == 1) {
          goto LABEL_9;
        }
        if (!EnumCaseMultiPayload)
        {
          uint64_t v2 = (id *)((char *)v2 + *(int *)(type metadata accessor for OutgoingCallContext(0LL) + 20));
          uint64_t v4 = type metadata accessor for CallType(0LL);
          goto LABEL_10;
        }
      }

      break;
    case 2u:
LABEL_9:
      uint64_t v4 = type metadata accessor for IncomingHandoffContext(0LL);
      goto LABEL_10;
    case 4u:
      uint64_t v4 = type metadata accessor for JoinFailureContext(0LL);
LABEL_10:
      (*(void (**)(id *, uint64_t))(*(void *)(v4 - 8) + 8LL))(v2, v4);
      break;
    default:
      return;
  }

void **sub_100060F00(void **a1, void **a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      int v6 = *a2;
      *a1 = *a2;
      id v7 = v6;
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
      goto LABEL_17;
    case 1u:
      uint64_t v11 = *a2;
      *a1 = *a2;
      uint64_t v12 = type metadata accessor for ActiveCallContext(0LL);
      uint64_t v13 = *(int *)(v12 + 20);
      uint64_t v14 = (void **)((char *)a1 + v13);
      uint64_t v15 = (void **)((char *)a2 + v13);
      uint64_t v16 = type metadata accessor for JoinCallContext(0LL);
      uint64_t v17 = *(void *)(v16 - 8);
      uint64_t v18 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48);
      id v19 = v11;
      if (v18(v15, 1LL, v16))
      {
        uint64_t v20 = sub_100018A04((uint64_t *)&unk_100113110);
        memcpy(v14, v15, *(void *)(*(void *)(v20 - 8) + 64LL));
      }

      else
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15, v16);
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v32 = type metadata accessor for IncomingHandoffContext(0LL);
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v32 - 8) + 16LL))(v14, v15, v32);
          swift_storeEnumTagMultiPayload(v14, v16, 1LL);
        }

        else if (EnumCaseMultiPayload)
        {
          memcpy(v14, v15, *(void *)(v17 + 64));
        }

        else
        {
          void *v14 = *v15;
          uint64_t v28 = type metadata accessor for OutgoingCallContext(0LL);
          uint64_t v29 = *(int *)(v28 + 20);
          id v34 = (char *)v14 + v29;
          uint64_t v30 = (char *)v15 + v29;
          uint64_t v31 = type metadata accessor for CallType(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16LL))(v34, v30, v31);
          *((_BYTE *)v14 + *(int *)(v28 + sub_1000596EC(*(void *)(v0 + 16), *(void **)(v0 + 24)) = *((_BYTE *)v15 + *(int *)(v28 + 24));
          swift_storeEnumTagMultiPayload(v14, v16, 0LL);
        }

        (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
      }

      *((_BYTE *)a1 + *(int *)(v12 + sub_1000596EC(*(void *)(v0 + 16), *(void **)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(v12 + 24));
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
      goto LABEL_17;
    case 2u:
      uint64_t v21 = type metadata accessor for IncomingHandoffContext(0LL);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v21 - 8) + 16LL))(a1, a2, v21);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 2LL;
      goto LABEL_17;
    case 3u:
      uint64_t v22 = *a2;
      *a1 = *a2;
      id v23 = v22;
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 3LL;
      goto LABEL_17;
    case 4u:
      uint64_t v24 = type metadata accessor for JoinFailureContext(0LL);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v24 - 8) + 16LL))(a1, a2, v24);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 4LL;
      goto LABEL_17;
    case 5u:
      uint64_t v25 = *a2;
      *a1 = *a2;
      id v26 = v25;
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 5LL;
LABEL_17:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

void **sub_1000611B0(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10001C644((uint64_t)a1, type metadata accessor for RootViewController.Event);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        int v6 = *a2;
        *a1 = *a2;
        id v7 = v6;
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 0LL;
        goto LABEL_18;
      case 1u:
        uint64_t v11 = *a2;
        *a1 = *a2;
        uint64_t v12 = type metadata accessor for ActiveCallContext(0LL);
        uint64_t v13 = *(int *)(v12 + 20);
        uint64_t v14 = (void **)((char *)a1 + v13);
        uint64_t v15 = (void **)((char *)a2 + v13);
        uint64_t v16 = type metadata accessor for JoinCallContext(0LL);
        uint64_t v17 = *(void *)(v16 - 8);
        uint64_t v18 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48);
        id v19 = v11;
        if (v18(v15, 1LL, v16))
        {
          uint64_t v20 = sub_100018A04((uint64_t *)&unk_100113110);
          memcpy(v14, v15, *(void *)(*(void *)(v20 - 8) + 64LL));
        }

        else
        {
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15, v16);
          if (EnumCaseMultiPayload == 1)
          {
            uint64_t v32 = type metadata accessor for IncomingHandoffContext(0LL);
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v32 - 8) + 16LL))(v14, v15, v32);
            swift_storeEnumTagMultiPayload(v14, v16, 1LL);
          }

          else if (EnumCaseMultiPayload)
          {
            memcpy(v14, v15, *(void *)(v17 + 64));
          }

          else
          {
            void *v14 = *v15;
            uint64_t v28 = type metadata accessor for OutgoingCallContext(0LL);
            uint64_t v29 = *(int *)(v28 + 20);
            id v34 = (char *)v14 + v29;
            uint64_t v30 = (char *)v15 + v29;
            uint64_t v31 = type metadata accessor for CallType(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16LL))(v34, v30, v31);
            *((_BYTE *)v14 + *(int *)(v28 + sub_1000596EC(*(void *)(v0 + 16), *(void **)(v0 + 24)) = *((_BYTE *)v15 + *(int *)(v28 + 24));
            swift_storeEnumTagMultiPayload(v14, v16, 0LL);
          }

          (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
        }

        *((_BYTE *)a1 + *(int *)(v12 + sub_1000596EC(*(void *)(v0 + 16), *(void **)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(v12 + 24));
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 1LL;
        goto LABEL_18;
      case 2u:
        uint64_t v21 = type metadata accessor for IncomingHandoffContext(0LL);
        (*(void (**)(void **, void **, uint64_t))(*(void *)(v21 - 8) + 16LL))(a1, a2, v21);
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 2LL;
        goto LABEL_18;
      case 3u:
        uint64_t v22 = *a2;
        *a1 = *a2;
        id v23 = v22;
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 3LL;
        goto LABEL_18;
      case 4u:
        uint64_t v24 = type metadata accessor for JoinFailureContext(0LL);
        (*(void (**)(void **, void **, uint64_t))(*(void *)(v24 - 8) + 16LL))(a1, a2, v24);
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 4LL;
        goto LABEL_18;
      case 5u:
        uint64_t v25 = *a2;
        *a1 = *a2;
        id v26 = v25;
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 5LL;
LABEL_18:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

void *sub_100061478(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 4:
      uint64_t v14 = type metadata accessor for JoinFailureContext(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 32LL))(a1, a2, v14);
      uint64_t v15 = a1;
      uint64_t v16 = a3;
      uint64_t v17 = 4LL;
LABEL_16:
      swift_storeEnumTagMultiPayload(v15, v16, v17);
      return a1;
    case 2:
      uint64_t v18 = type metadata accessor for IncomingHandoffContext(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 32LL))(a1, a2, v18);
      uint64_t v15 = a1;
      uint64_t v16 = a3;
      uint64_t v17 = 2LL;
      goto LABEL_16;
    case 1:
      *a1 = *a2;
      uint64_t v7 = type metadata accessor for ActiveCallContext(0LL);
      uint64_t v8 = *(int *)(v7 + 20);
      uint64_t v9 = (void *)((char *)a1 + v8);
      uint64_t v10 = (void *)((char *)a2 + v8);
      uint64_t v11 = type metadata accessor for JoinCallContext(0LL);
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
      {
        uint64_t v13 = sub_100018A04((uint64_t *)&unk_100113110);
        memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
      }

      else
      {
        int v19 = swift_getEnumCaseMultiPayload(v10, v11);
        if (v19 == 1)
        {
          uint64_t v24 = type metadata accessor for IncomingHandoffContext(0LL);
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v24 - 8) + 32LL))(v9, v10, v24);
          swift_storeEnumTagMultiPayload(v9, v11, 1LL);
        }

        else if (v19)
        {
          memcpy(v9, v10, *(void *)(v12 + 64));
        }

        else
        {
          void *v9 = *v10;
          uint64_t v20 = type metadata accessor for OutgoingCallContext(0LL);
          uint64_t v21 = *(int *)(v20 + 20);
          id v26 = (char *)v9 + v21;
          uint64_t v22 = (char *)v10 + v21;
          uint64_t v23 = type metadata accessor for CallType(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32LL))(v26, v22, v23);
          *((_BYTE *)v9 + *(int *)(v20 + sub_1000596EC(*(void *)(v0 + 16), *(void **)(v0 + 24)) = *((_BYTE *)v10 + *(int *)(v20 + 24));
          swift_storeEnumTagMultiPayload(v9, v11, 0LL);
        }

        (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
      }

      *((_BYTE *)a1 + *(int *)(v7 + sub_1000596EC(*(void *)(v0 + 16), *(void **)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(v7 + 24));
      uint64_t v15 = a1;
      uint64_t v16 = a3;
      uint64_t v17 = 1LL;
      goto LABEL_16;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

void *sub_1000616C4(void *a1, void *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  sub_10001C644((uint64_t)a1, type metadata accessor for RootViewController.Event);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 4:
      uint64_t v14 = type metadata accessor for JoinFailureContext(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 32LL))(a1, a2, v14);
      uint64_t v15 = a1;
      uint64_t v16 = a3;
      uint64_t v17 = 4LL;
LABEL_17:
      swift_storeEnumTagMultiPayload(v15, v16, v17);
      return a1;
    case 2:
      uint64_t v18 = type metadata accessor for IncomingHandoffContext(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 32LL))(a1, a2, v18);
      uint64_t v15 = a1;
      uint64_t v16 = a3;
      uint64_t v17 = 2LL;
      goto LABEL_17;
    case 1:
      *a1 = *a2;
      uint64_t v7 = type metadata accessor for ActiveCallContext(0LL);
      uint64_t v8 = *(int *)(v7 + 20);
      uint64_t v9 = (void *)((char *)a1 + v8);
      uint64_t v10 = (void *)((char *)a2 + v8);
      uint64_t v11 = type metadata accessor for JoinCallContext(0LL);
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
      {
        uint64_t v13 = sub_100018A04((uint64_t *)&unk_100113110);
        memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
      }

      else
      {
        int v19 = swift_getEnumCaseMultiPayload(v10, v11);
        if (v19 == 1)
        {
          uint64_t v24 = type metadata accessor for IncomingHandoffContext(0LL);
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v24 - 8) + 32LL))(v9, v10, v24);
          swift_storeEnumTagMultiPayload(v9, v11, 1LL);
        }

        else if (v19)
        {
          memcpy(v9, v10, *(void *)(v12 + 64));
        }

        else
        {
          void *v9 = *v10;
          uint64_t v20 = type metadata accessor for OutgoingCallContext(0LL);
          uint64_t v21 = *(int *)(v20 + 20);
          id v26 = (char *)v9 + v21;
          uint64_t v22 = (char *)v10 + v21;
          uint64_t v23 = type metadata accessor for CallType(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32LL))(v26, v22, v23);
          *((_BYTE *)v9 + *(int *)(v20 + sub_1000596EC(*(void *)(v0 + 16), *(void **)(v0 + 24)) = *((_BYTE *)v10 + *(int *)(v20 + 24));
          swift_storeEnumTagMultiPayload(v9, v11, 0LL);
        }

        (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
      }

      *((_BYTE *)a1 + *(int *)(v7 + sub_1000596EC(*(void *)(v0 + 16), *(void **)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(v7 + 24));
      uint64_t v15 = a1;
      uint64_t v16 = a3;
      uint64_t v17 = 1LL;
      goto LABEL_17;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

uint64_t sub_100061928(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for ActiveCallContext(319LL);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for IncomingHandoffContext(319LL);
    if (v4 <= 0x3F)
    {
      v6[2] = *(void *)(result - 8) + 64LL;
      v6[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
      uint64_t result = type metadata accessor for JoinFailureContext(319LL);
      if (v5 <= 0x3F)
      {
        v6[4] = *(void *)(result - 8) + 64LL;
        void v6[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
        swift_initEnumMetadataMultiPayload(a1, 256LL, 6LL, v6);
        return 0LL;
      }
    }
  }

  return result;
}

unint64_t sub_1000619DC()
{
  unint64_t result = qword_100114A40;
  if (!qword_100114A40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000C5D98, &type metadata for RootViewControllerError);
    atomic_store(result, (unint64_t *)&qword_100114A40);
  }

  return result;
}

void sub_100061AB8(uint64_t a1, uint64_t a2, void *a3)
{
  int v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

void sub_100061B18(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v57 = a3;
  id v64 = a2;
  unint64_t v4 = &qword_100114B38;
  uint64_t v63 = sub_100018A04(&qword_100114B38);
  uint64_t v56 = *(void *)(v63 - 8);
  uint64_t v5 = __chkstk_darwin(v63);
  uint64_t v68 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v55 - v8;
  __chkstk_darwin(v7);
  uint64_t v61 = (char *)&v55 - v10;
  uint64_t v62 = a1;
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v58 = a1 + 64;
  uint64_t v12 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v59 = (unint64_t)(v12 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v15 = 0LL;
  uint64_t v60 = v9;
  while (1)
  {
    if (v14)
    {
      unint64_t v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      int64_t v65 = v15;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }

    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
      __break(1u);
      goto LABEL_42;
    }

    if (v19 >= v59) {
      goto LABEL_36;
    }
    unint64_t v20 = *(void *)(v58 + 8 * v19);
    int64_t v21 = v15 + 1;
    if (!v20)
    {
      int64_t v21 = v15 + 2;
      if (v15 + 2 >= v59) {
        goto LABEL_36;
      }
      unint64_t v20 = *(void *)(v58 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = v15 + 3;
        if (v15 + 3 >= v59) {
          goto LABEL_36;
        }
        unint64_t v20 = *(void *)(v58 + 8 * v21);
        if (!v20)
        {
          int64_t v21 = v15 + 4;
          if (v15 + 4 >= v59) {
            goto LABEL_36;
          }
          unint64_t v20 = *(void *)(v58 + 8 * v21);
          if (!v20)
          {
            uint64_t v22 = v15 + 5;
            if (v15 + 5 >= v59)
            {
LABEL_36:
              swift_release(v62);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 56))(v57, 1LL, 1LL, v63);
              goto LABEL_40;
            }

            unint64_t v20 = *(void *)(v58 + 8 * v22);
            int64_t v21 = v15 + 5;
            if (!v20) {
              break;
            }
          }
        }
      }
    }

void sub_100061F88(uint64_t a1, uint64_t a2)
{
  id v2 = objc_msgSend((id)objc_opt_self(PBSSystemServiceConnection, a2), "sharedConnection");
  if (v2)
  {
    unint64_t v3 = v2;
    id v4 = [v2 bulletinServiceProxy];

    if (v4)
    {
      id v7 = objc_allocWithZone((Class)type metadata accessor for PineBoardBulletinManager(v5, v6));
      qword_10011A2D8 = (uint64_t)sub_100062010((uint64_t)v4);
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

char *sub_100062010(uint64_t a1)
{
  id v2 = v1;
  uint64_t v26 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v1);
  uint64_t v25 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_queue;
  uint64_t v23 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v12 = v2;
  static DispatchQoS.unspecified.getter(v12);
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v13 = sub_10001949C( (unint64_t *)&qword_100113130,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v14 = sub_100018A04((uint64_t *)&unk_100112DC0);
  uint64_t v15 = sub_10004F2A8((unint64_t *)&qword_100113140, (uint64_t *)&unk_100112DC0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v14, v15, v6, v13);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v25);
  uint64_t v16 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000024LL,  0x80000001000DB1C0LL,  v11,  v8,  v5,  0LL);
  *(void *)&v2[v24] = v16;
  uint64_t v17 = OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_presentedBulletins;
  *(void *)&v12[v17] = sub_10002D860((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v18 = v26;
  *(void *)&v12[OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_bulletinService] = v26;
  swift_unknownObjectRetain(v18);

  v28.receiver = v12;
  v28.super_class = ObjectType;
  int64_t v19 = (char *)objc_msgSendSuper2(&v28, "init");
  uint64_t v20 = *(void *)&v19[OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_bulletinService];
  int64_t v21 = v19;
  [(id)swift_unknownObjectRetain(v20) setDelegate:v21];
  swift_unknownObjectRelease(v20);

  swift_unknownObjectRelease(v18);
  return v21;
}

uint64_t sub_100062290@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v66 = a3;
  uint64_t v63 = a2;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v57 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v54 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v54 - v12;
  UUID.init()(v11);
  id v14 = [objc_allocWithZone(PBSBulletin) init];
  [v14 setServiceIdentifier:PBSSystemBulletinServiceName];
  [v14 setViewControllerClassName:PBSSystemBulletinViewControllerClassName];
  unint64_t v15 = sub_100064204(a1);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v15);
  [v14 setMessage:isa];

  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  __int128 v67 = v13;
  v17(v10, v13, v4);
  uint64_t v18 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v19 = (v18 + 24) & ~v18;
  uint64_t v60 = v18 | 7;
  uint64_t v61 = v19 + v6;
  unint64_t v20 = (v19 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = swift_allocObject(&unk_1000FA190, v20 + 8, v18 | 7);
  uint64_t v22 = (void *)v63;
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = v63;
  uint64_t v62 = v19;
  id v64 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 32);
  int64_t v65 = v10;
  v64(v21 + v19, v10, v4);
  *(void *)(v21 + v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v14;
  uint64_t v23 = sub_100018A04(&qword_100112E40);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  int64_t v59 = v22;
  id v58 = v14;
  uint64_t v63 = Future.init(_:)(sub_100065938, v21);
  if (qword_1001123C0 != -1) {
    swift_once(&qword_1001123C0, sub_10008C9FC);
  }
  uint64_t v24 = type metadata accessor for Logger(0LL);
  sub_10001C270(v24, (uint64_t)qword_10011A318);
  uint64_t v25 = v57;
  uint64_t v26 = ((uint64_t (*)(char *, char *, uint64_t))v17)(v57, v67, v4);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  uint64_t v28 = v4;
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v31 = swift_slowAlloc(32LL, -1LL);
    uint64_t v56 = v17;
    uint64_t v32 = v31;
    aBlock[0] = v31;
    uint64_t v55 = v5;
    *(_DWORD *)uint64_t v30 = 136315138;
    uint64_t v33 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter(v4, v33);
    unint64_t v36 = v35;
    uint64_t v70 = sub_1000850E4(v34, v35, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease(v36);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v25, v28);
    _os_log_impl((void *)&_mh_execute_header, v27, v29, "Requesting presentation of bulletin (%s).", v30, 0xCu);
    swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v37 = v32;
    uint64_t v17 = v56;
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v25, v4);
  }

  uint64_t v38 = v28;
  uint64_t v39 = v59;
  id v40 = *(void **)&v59[OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_bulletinService];
  id v41 = v65;
  id v42 = v67;
  v17(v65, v67, v28);
  uint64_t v43 = swift_allocObject(&unk_1000FA1B8, v61, v60);
  *(void *)(v43 + swift_unknownObjectWeakDestroy(v0 + 16) = v39;
  uint64_t v44 = v28;
  uint64_t v45 = (uint64_t (*)(uint64_t, char *, uint64_t))v64;
  v64(v43 + v62, v41, v44);
  aBlock[4] = (uint64_t)sub_1000659A0;
  uint64_t v69 = v43;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_100061AB8;
  void aBlock[3] = (uint64_t)&unk_1000FA1D0;
  id v46 = _Block_copy(aBlock);
  uint64_t v47 = v69;
  id v48 = v39;
  uint64_t v49 = v42;
  id v50 = v58;
  swift_release(v47);
  [v40 presentBulletin:v50 withCompletion:v46];

  _Block_release(v46);
  uint64_t v51 = *(int *)(sub_100018A04(&qword_100114AF0) + 48);
  uint64_t v52 = v66;
  uint64_t result = v45(v66, v49, v38);
  *(void *)(v52 + v51) = v63;
  return result;
}

double sub_100062774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = &v21[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v14 = swift_allocObject(&unk_1000FA258, 32LL, 7LL);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v13, a4, v10);
  unint64_t v15 = (void *)(a3 + OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_presentedBulletins);
  swift_beginAccess(a3 + OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_presentedBulletins, v21, 33LL, 0LL);
  swift_retain(a2);
  id v16 = a5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v15);
  uint64_t v20 = *v15;
  *unint64_t v15 = 0x8000000000000000LL;
  sub_100068874((uint64_t)v16, (uint64_t)sub_10006A22C, v14, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
  uint64_t v18 = *v15;
  *unint64_t v15 = v20;
  swift_bridgeObjectRelease(v18);
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
  *(void *)&double result = swift_endAccess(v21).n128_u64[0];
  return result;
}

uint64_t sub_1000628C0(int a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v29 = a2;
  int v28 = a1;
  uint64_t v31 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v34 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v7 = &v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v32 = *(void *)(v8 - 8);
  uint64_t v33 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = &v27[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v30 = *(void *)&a3[OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_queue];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v14, a4, v11);
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = (v15 + 17) & ~v15;
  unint64_t v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v19 = swift_allocObject(&unk_1000FA208, v18 + 8, v15 | 7);
  *(_BYTE *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = v28;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v12 + 32))(v19 + v16, v14, v11);
  uint64_t v20 = v29;
  *(void *)(v19 + v17) = v29;
  *(void *)(v19 + v1_Block_object_dispose(va, 8) = a3;
  aBlock[4] = sub_100065A94;
  uint64_t v37 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  void aBlock[3] = &unk_1000FA220;
  uint64_t v21 = _Block_copy(aBlock);
  swift_errorRetain(v20);
  static DispatchQoS.unspecified.getter(a3);
  unint64_t v35 = _swiftEmptyArrayStorage;
  uint64_t v22 = sub_10001949C( (unint64_t *)&qword_100112930,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v23 = sub_100018A04((uint64_t *)&unk_100112FD0);
  uint64_t v24 = sub_10004F2A8((unint64_t *)&qword_100112940, (uint64_t *)&unk_100112FD0);
  uint64_t v25 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v23, v24, v31, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v21);
  _Block_release(v21);
  (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v7, v25);
  (*(void (**)(_BYTE *, uint64_t))(v32 + 8))(v10, v33);
  return swift_release(v37);
}

void sub_100062B58(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v39 - v13;
  if ((a1 & 1) != 0)
  {
    if (qword_1001123C0 != -1) {
      swift_once(&qword_1001123C0, sub_10008C9FC);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_10001C270(v15, (uint64_t)qword_10011A318);
    uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, a2, v8);
    unint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      uint64_t v41 = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      uint64_t v21 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(v8, v21);
      unint64_t v24 = v23;
      uint64_t v40 = sub_1000850E4(v22, v23, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v24);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Successfully presented bulletin (%s).", v19, 0xCu);
      swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
  }

  else
  {
    if (qword_1001123C0 != -1) {
      swift_once(&qword_1001123C0, sub_10008C9FC);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_10001C270(v25, (uint64_t)qword_10011A318);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
    swift_errorRetain(a3);
    uint64_t v26 = swift_errorRetain(a3);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc(22LL, -1LL);
      v39[0] = swift_slowAlloc(64LL, -1LL);
      uint64_t v41 = v39[0];
      *(_DWORD *)uint64_t v29 = 136315394;
      v39[1] = a4;
      uint64_t v30 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v8, v30);
      unint64_t v33 = v32;
      uint64_t v40 = sub_1000850E4(v31, v32, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease(v33);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      *(_WORD *)(v29 + 12) = 2080;
      uint64_t v40 = a3;
      swift_errorRetain(a3);
      uint64_t v34 = sub_100018A04((uint64_t *)&unk_100112920);
      uint64_t v35 = String.init<A>(describing:)(&v40, v34);
      unint64_t v37 = v36;
      uint64_t v40 = sub_1000850E4(v35, v36, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v29 + 14, v29 + 22);
      swift_bridgeObjectRelease(v37);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Error presenting bulletin (%s): %s", (uint8_t *)v29, 0x16u);
      uint64_t v38 = v39[0];
      swift_arrayDestroy(v39[0], 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }

    sub_100062FBC(a2);
  }

void sub_100062FBC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v30[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v30[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = *(void **)(v1 + OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_queue);
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once(&qword_1001123C0, sub_10008C9FC);
    goto LABEL_5;
  }

  swift_beginAccess(v1 + OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_presentedBulletins, v30, 33LL, 0LL);
  uint64_t v13 = (void *)sub_100065CA8(a1);
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  __n128 v18 = swift_endAccess(v30);
  if (v13)
  {
    v15(0LL, 1LL, v18);
    swift_release(v17);

    return;
  }

  if (qword_1001123C0 != -1) {
    goto LABEL_10;
  }
LABEL_5:
  uint64_t v19 = type metadata accessor for Logger(0LL);
  sub_10001C270(v19, (uint64_t)qword_10011A318);
  uint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    unint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    v30[0] = v24;
    *(_DWORD *)unint64_t v23 = 136315138;
    uint64_t v25 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v3, v25);
    unint64_t v28 = v27;
    uint64_t v29 = sub_1000850E4(v26, v27, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease(v28);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unexpectedly asked to fail bulletin (%s)", v23, 0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t sub_1000632B0(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v33 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v31 = *(void *)(v7 - 8);
  uint64_t v32 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = *(void *)&v2[OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = (v14 + 24) & ~v14;
  unint64_t v16 = (v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v17 = swift_allocObject(&unk_1000FA320, v16 + 89, v14 | 7);
  *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v17 + v15, v13, v10);
  __n128 v18 = (_OWORD *)(v17 + v16);
  __int128 v19 = *(_OWORD *)(a2 + 48);
  v18[2] = *(_OWORD *)(a2 + 32);
  void v18[3] = v19;
  v18[4] = *(_OWORD *)(a2 + 64);
  *(_OWORD *)((char *)v18 + 73) = *(_OWORD *)(a2 + 73);
  __int128 v20 = *(_OWORD *)(a2 + 16);
  *__n128 v18 = *(_OWORD *)a2;
  v18[1] = v20;
  aBlock[4] = sub_10006A5E4;
  uint64_t v36 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  void aBlock[3] = &unk_1000FA338;
  uint64_t v21 = _Block_copy(aBlock);
  os_log_type_t v22 = v2;
  unint64_t v23 = sub_10006A628((void *)a2);
  static DispatchQoS.unspecified.getter(v23);
  uint64_t v34 = _swiftEmptyArrayStorage;
  uint64_t v24 = sub_10001949C( (unint64_t *)&qword_100112930,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v25 = sub_100018A04((uint64_t *)&unk_100112FD0);
  uint64_t v26 = sub_10004F2A8((unint64_t *)&qword_100112940, (uint64_t *)&unk_100112FD0);
  uint64_t v27 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v25, v26, v30, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v6, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v27);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v32);
  return swift_release(v36);
}

void sub_10006354C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v138 = a3;
  uint64_t v5 = (dispatch_semaphore_s *)type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v141 = (void (**)(void *, id))*((void *)v5 - 1);
  id v142 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v143 = type metadata accessor for DispatchTime(0LL);
  uint64_t v140 = *(uint8_t **)(v143 - 8);
  uint64_t v8 = __chkstk_darwin(v143);
  uint64_t v10 = (char *)&v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v139 = (char *)&v123 - v11;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v136 = (char *)&v123 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  __n128 v18 = (char *)&v123 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v123 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v135 = (char *)&v123 - v23;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v123 - v24;
  uint64_t v137 = a1;
  uint64_t v26 = (uint64_t *)(a1 + OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_presentedBulletins);
  swift_beginAccess(a1 + OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_presentedBulletins, aBlock, 32LL, 0LL);
  uint64_t v27 = *v26;
  if (!*(void *)(*v26 + 16) || (unint64_t v28 = sub_10002FC2C(a2), (v29 & 1) == 0))
  {
    swift_endAccess(aBlock);
    return;
  }

  Swift::String v126 = v18;
  uint64_t v125 = v21;
  uint64_t v30 = *(void *)(v27 + 56) + 24 * v28;
  uint64_t v31 = *(void **)v30;
  uint64_t v123 = *(void *)(v30 + 8);
  uint64_t v32 = *(void *)(v30 + 16);
  swift_endAccess(aBlock);
  uint64_t v33 = qword_1001123C0;
  id v128 = v31;
  uint64_t v133 = v32;
  swift_retain(v32);
  if (v33 != -1) {
    swift_once(&qword_1001123C0, sub_10008C9FC);
  }
  uint64_t v34 = type metadata accessor for Logger(0LL);
  uint64_t v35 = sub_10001C270(v34, (uint64_t)qword_10011A318);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v130 = a2;
  uint64_t v134 = v36;
  uint64_t v37 = v36(v25, a2, v12);
  uint64_t v129 = v35;
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.default.getter();
  BOOL v40 = os_log_type_enabled(v38, v39);
  uint64_t v132 = v12;
  uint64_t v124 = v26;
  if (v40)
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v127 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v127;
    *(_DWORD *)uint64_t v41 = 136315138;
    unint64_t v131 = (void (*)(char *, uint64_t, __n128))(v41 + 4);
    uint64_t v42 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter(v12, v42);
    unint64_t v45 = v44;
    uint64_t v144 = sub_1000850E4(v43, v44, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v131, v41 + 12);
    __n128 v46 = swift_bridgeObjectRelease(v45);
    unint64_t v131 = *(void (**)(char *, uint64_t, __n128))(v13 + 8);
    v131(v25, v12, v46);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Requesting update of bulletin (%s).", v41, 0xCu);
    uint64_t v47 = v127;
    swift_arrayDestroy(v127, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1LL, -1LL);
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  else
  {
    unint64_t v131 = *(void (**)(char *, uint64_t, __n128))(v13 + 8);
    ((void (*)(char *, uint64_t))v131)(v25, v12);
  }

  id v48 = (void *)swift_allocObject(&unk_1000FA370, 40LL, 7LL);
  v48[2] = 1LL;
  uint64_t v127 = (uint64_t)(v48 + 2);
  void v48[3] = 0LL;
  v48[4] = 0LL;
  dispatch_semaphore_t v49 = dispatch_semaphore_create(0LL);
  id v50 = *(void **)(v137 + OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_bulletinService);
  uint64_t v51 = (uint64_t *)v128;
  unint64_t v52 = sub_100064204(v138);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v52);
  uint64_t v54 = swift_allocObject(&unk_1000FA398, 32LL, 7LL);
  *(void *)(v54 + swift_unknownObjectWeakDestroy(v0 + 16) = v48;
  *(void *)(v54 + 24) = v49;
  aBlock[4] = (uint64_t)sub_10006A6FC;
  uint64_t v148 = v54;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_1000646A4;
  void aBlock[3] = (uint64_t)&unk_1000FA3B0;
  uint64_t v55 = _Block_copy(aBlock);
  uint64_t v56 = v148;
  swift_retain(v48);
  uint64_t v57 = v49;
  swift_release(v56);
  [v50 xpcUpdateBulletin:v51 withMessage:isa withCompletion:v55];
  _Block_release(v55);
  char v138 = v51;

  static DispatchTime.now()();
  *uint64_t v7 = 10LL;
  int64_t v59 = v141;
  id v58 = v142;
  ((void (*)(void *, void, dispatch_semaphore_s *))v141[13])( v7,  enum case for DispatchTimeInterval.seconds(_:),  v142);
  uint64_t v60 = v139;
  DispatchTime.advanced(by:)(v7);
  v59[1](v7, v58);
  uint64_t v61 = (void (*)(char *, uint64_t))*((void *)v140 + 1);
  uint64_t v62 = v10;
  uint64_t v63 = v48;
  uint64_t v64 = v143;
  v61(v62, v143);
  id v142 = v57;
  uint64_t v65 = OS_dispatch_semaphore.wait(timeout:)(v60) & 1;
  v61(v60, v64);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v65, 0LL) & 1) == 0
    || (swift_beginAccess(v127, aBlock, 0LL, 0LL), uint64_t v66 = (void *)v63[2], v66 == (void *)1))
  {
    uint64_t v72 = v136;
    uint64_t v73 = v132;
    uint64_t v74 = v134(v136, v130, v132);
    uint64_t v75 = (void (**)(void *, id))Logger.logObject.getter(v74);
    os_log_type_t v76 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v75, v76))
    {
      swift_release(v133);

      ((void (*)(char *, uint64_t))v131)(v72, v73);
      swift_release(v63);
LABEL_25:

      return;
    }

    uint64_t v77 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v78 = swift_slowAlloc(32LL, -1LL);
    uint64_t v144 = v78;
    *(_DWORD *)uint64_t v77 = 136315138;
    uint64_t v79 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter(v73, v79);
    unint64_t v82 = v81;
    uint64_t v146 = sub_1000850E4(v80, v81, &v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, aBlock, v77 + 4, v77 + 12);
    __n128 v83 = swift_bridgeObjectRelease(v82);
    v131(v72, v73, v83);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v75,  v76,  "Never received update response for bulletin %s.",  v77,  0xCu);
    swift_arrayDestroy(v78, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1LL, -1LL);
    swift_slowDealloc(v77, -1LL, -1LL);
    swift_release(v63);

    uint64_t v84 = v133;
LABEL_24:
    swift_release(v84);

    goto LABEL_25;
  }

  uint64_t v68 = v63[3];
  uint64_t v67 = v63[4];
  uint64_t v143 = (uint64_t)v63;
  uint64_t v69 = v132;
  uint64_t v70 = v130;
  if (!v66)
  {
    uint64_t v71 = v126;
    goto LABEL_17;
  }

  uint64_t v71 = v126;
  if ((v68 & 1) != 0)
  {
    uint64_t v102 = v135;
    v134(v135, v130, v132);
    sub_10006A704(v66, v68, v67);
    uint64_t v141 = v66;
    os_log_type_t v103 = (os_log_s *)Logger.logObject.getter(v141);
    uint64_t v104 = v69;
    os_log_type_t v105 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v103, v105))
    {
      objc_super v106 = v102;
      uint64_t v107 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v108 = swift_slowAlloc(32LL, -1LL);
      uint64_t v144 = v108;
      *(_DWORD *)uint64_t v107 = 136315138;
      uint64_t v140 = v107 + 4;
      uint64_t v109 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v110 = dispatch thunk of CustomStringConvertible.description.getter(v104, v109);
      unint64_t v112 = v111;
      uint64_t v146 = sub_1000850E4(v110, v111, &v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, aBlock, v140, v107 + 12);
      __n128 v113 = swift_bridgeObjectRelease(v112);
      uint64_t v114 = (void (*)(uint64_t, uint64_t, __n128))v131;
      v131(v106, v104, v113);
      _os_log_impl((void *)&_mh_execute_header, v103, v105, "Successfully updated bulletin (%s).", v107, 0xCu);
      swift_arrayDestroy(v108, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v108, -1LL, -1LL);
      swift_slowDealloc(v107, -1LL, -1LL);
    }

    else
    {
      uint64_t v114 = (void (*)(uint64_t, uint64_t, __n128))v131;
      ((void (*)(char *, uint64_t))v131)(v102, v69);
    }

    uint64_t v115 = v104;
    uint64_t v116 = v143;
    uint64_t v117 = (uint64_t)v125;
    v134(v125, v70, v104);
    os_log_type_t v118 = v124;
    swift_beginAccess(v124, &v144, 33LL, 0LL);
    uint64_t v119 = v133;
    swift_retain(v133);
    uint64_t v75 = v141;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v118);
    uint64_t v146 = *v118;
    *os_log_type_t v118 = 0x8000000000000000LL;
    sub_100068874((uint64_t)v75, v123, v119, v117, isUniquelyReferenced_nonNull_native);
    uint64_t v121 = *v118;
    *os_log_type_t v118 = v146;
    __n128 v122 = swift_bridgeObjectRelease(v121);
    v114(v117, v115, v122);
    swift_endAccess(&v144);

    swift_errorRelease(v67);
    swift_release(v116);
    uint64_t v84 = v119;
    goto LABEL_24;
  }

unint64_t sub_100064204(uint64_t *a1)
{
  uint64_t v2 = sub_100018A04(&qword_100114AF8);
  uint64_t inited = swift_initStackObject(v2, v32);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FB0;
  v31[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(PBSSystemBulletinTitleKey);
  v31[1] = v4;
  AnyHashable.init<A>(_:)(v31, &type metadata for String, &protocol witness table for String);
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = v6;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v5;
  swift_bridgeObjectRetain(v5);
  unint64_t v7 = sub_10002DB3C(inited);
  uint64_t v8 = a1[3];
  if (v8)
  {
    uint64_t v9 = a1[2];
    *(void *)&__int128 v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(PBSSystemBulletinMessageKey);
    *((void *)&v29 + 1) = v10;
    swift_bridgeObjectRetain(v8);
    AnyHashable.init<A>(_:)(&v29, &type metadata for String, &protocol witness table for String);
    uint64_t v30 = &type metadata for String;
    *(void *)&__int128 v29 = v9;
    *((void *)&v29 + 1) = v8;
    sub_10001C1DC(&v29, v28);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
    unint64_t v37 = v7;
    sub_10006873C(v28, (uint64_t)v31, isUniquelyReferenced_nonNull_native);
    unint64_t v7 = v37;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    sub_1000303DC((uint64_t)v31);
  }

  uint64_t v12 = a1[5];
  if (v12)
  {
    uint64_t v13 = a1[4];
    *(void *)&__int128 v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(PBSSystemBulletinFooterMessageKey);
    *((void *)&v29 + 1) = v14;
    swift_bridgeObjectRetain(v12);
    AnyHashable.init<A>(_:)(&v29, &type metadata for String, &protocol witness table for String);
    uint64_t v30 = &type metadata for String;
    *(void *)&__int128 v29 = v13;
    *((void *)&v29 + 1) = v12;
    sub_10001C1DC(&v29, v28);
    char v15 = swift_isUniquelyReferenced_nonNull_native(v7);
    unint64_t v37 = v7;
    sub_10006873C(v28, (uint64_t)v31, v15);
    unint64_t v7 = v37;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    sub_1000303DC((uint64_t)v31);
  }

  sub_100052900((uint64_t)(a1 + 6), (uint64_t)v34, &qword_100114B00);
  sub_100052900((uint64_t)v34, (uint64_t)&v35, &qword_100114B00);
  if ((v36 & 1) == 0)
  {
    uint64_t v16 = v35;
    *(void *)&__int128 v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(PBSSystemBulletinActivationActionKey);
    *((void *)&v29 + 1) = v17;
    AnyHashable.init<A>(_:)(&v29, &type metadata for String, &protocol witness table for String);
    id v18 = [objc_allocWithZone(NSNumber) initWithUnsignedInteger:v16];
    uint64_t v30 = (void *)sub_10001C5D0(0LL, &qword_1001148C0, &OBJC_CLASS___NSNumber_ptr);
    *(void *)&__int128 v29 = v18;
    sub_10001C1DC(&v29, v28);
    char v19 = swift_isUniquelyReferenced_nonNull_native(v7);
    unint64_t v37 = v7;
    sub_10006873C(v28, (uint64_t)v31, v19);
    unint64_t v7 = v37;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    sub_1000303DC((uint64_t)v31);
  }

  unint64_t v20 = a1[9];
  if (v20 >> 60 != 15)
  {
    uint64_t v21 = a1[8];
    *(void *)&__int128 v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(PBSSystemBulletinImageDataKey);
    *((void *)&v29 + 1) = v22;
    sub_10004FE18(v21, v20);
    AnyHashable.init<A>(_:)(&v29, &type metadata for String, &protocol witness table for String);
    uint64_t v30 = &type metadata for Data;
    *(void *)&__int128 v29 = v21;
    *((void *)&v29 + 1) = v20;
    sub_10001C1DC(&v29, v28);
    sub_10004FE18(v21, v20);
    char v23 = swift_isUniquelyReferenced_nonNull_native(v7);
    unint64_t v37 = v7;
    sub_10006873C(v28, (uint64_t)v31, v23);
    unint64_t v7 = v37;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    sub_1000303DC((uint64_t)v31);
    sub_1000227F0(v21, v20);
  }

  sub_100052900((uint64_t)(a1 + 10), (uint64_t)v33, (uint64_t *)&unk_100114B08);
  sub_100052900((uint64_t)v33, (uint64_t)&v37, (uint64_t *)&unk_100114B08);
  if ((v38 & 1) == 0)
  {
    unint64_t v24 = v37;
    *(void *)&__int128 v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(PBSSystemBulletinTimeoutKey);
    *((void *)&v29 + 1) = v25;
    AnyHashable.init<A>(_:)(&v29, &type metadata for String, &protocol witness table for String);
    uint64_t v30 = &type metadata for Int;
    *(void *)&__int128 v29 = v24;
    sub_10001C1DC(&v29, v28);
    char v26 = swift_isUniquelyReferenced_nonNull_native(v7);
    sub_10006873C(v28, (uint64_t)v31, v26);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    sub_1000303DC((uint64_t)v31);
  }

  return v7;
}

Swift::Int sub_100064614(void *a1, char a2, uint64_t a3, void *a4)
{
  uint64_t v7 = a2 & 1;
  swift_beginAccess(a4 + 2, v13, 1LL, 0LL);
  uint64_t v8 = (void *)a4[2];
  uint64_t v9 = a4[3];
  uint64_t v10 = a4[4];
  a4[2] = a1;
  a4[3] = v7;
  a4[4] = a3;
  id v11 = a1;
  swift_errorRetain(a3);
  sub_10006A734(v8, v9, v10);
  return OS_dispatch_semaphore.signal()();
}

void sub_1000646A4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v8 = *(void (**)(void *, uint64_t, void *))(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  swift_retain(v7);
  id v10 = a2;
  id v9 = a4;
  v8(a2, a3, a4);
  swift_release(v7);
}

uint64_t sub_100064720(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v23 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v21 = *(void *)(v6 - 8);
  uint64_t v22 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  v20[1] = *(void *)&v1[OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))( (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v9);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 24) & ~v12;
  uint64_t v14 = swift_allocObject(&unk_1000FA280, v13 + v11, v12 | 7);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))( v14 + v13,  (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v9);
  aBlock[4] = sub_10006A2DC;
  uint64_t v26 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  void aBlock[3] = &unk_1000FA298;
  char v15 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v1);
  unint64_t v24 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_10001949C( (unint64_t *)&qword_100112930,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100018A04((uint64_t *)&unk_100112FD0);
  uint64_t v18 = sub_10004F2A8((unint64_t *)&qword_100112940, (uint64_t *)&unk_100112FD0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v17, v18, v3, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v5, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v22);
  return swift_release(v26);
}

void sub_10006497C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (uint64_t *)(a1 + OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_presentedBulletins);
  swift_beginAccess(a1 + OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_presentedBulletins, v34, 32LL, 0LL);
  uint64_t v9 = *v8;
  if (*(void *)(v9 + 16) && (unint64_t v10 = sub_10002FC2C(a2), (v11 & 1) != 0))
  {
    uint64_t v12 = *(void *)(v9 + 56) + 24 * v10;
    uint64_t v13 = *(void **)v12;
    uint64_t v14 = *(void *)(v12 + 16);
    swift_endAccess(v34);
    uint64_t v15 = qword_1001123C0;
    id v16 = v13;
    swift_retain(v14);
    if (v15 != -1) {
      swift_once(&qword_1001123C0, sub_10008C9FC);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_10001C270(v17, (uint64_t)qword_10011A318);
    uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
    char v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      id v31 = v16;
      uint64_t v23 = v22;
      v34[0] = v22;
      uint64_t v32 = v14;
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v30 = v21 + 4;
      uint64_t v24 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v4, v24);
      unint64_t v27 = v26;
      uint64_t v33 = sub_1000850E4(v25, v26, v34);
      uint64_t v14 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v30, v21 + 12);
      swift_bridgeObjectRelease(v27);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Requesting dismissal of bulletin (%s).", v21, 0xCu);
      swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v28 = v23;
      id v16 = v31;
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }

    [*(id *)(a1 + OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_bulletinService) dismissBulletin:v16];
    swift_release(v14);
  }

  else
  {
    swift_endAccess(v34);
  }

void sub_100064C38(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v33[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v33[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = *(void **)(v2 + OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_queue);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once(&qword_1001123C0, sub_10008C9FC);
    goto LABEL_5;
  }

  swift_beginAccess(v2 + OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_presentedBulletins, v33, 33LL, 0LL);
  uint64_t v15 = (void *)sub_100065CA8(a1);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  __n128 v20 = swift_endAccess(v33);
  if (v15)
  {
    v17(a2, 0LL, v20);
    swift_release(v19);

    return;
  }

  if (qword_1001123C0 != -1) {
    goto LABEL_10;
  }
LABEL_5:
  uint64_t v21 = type metadata accessor for Logger(0LL);
  sub_10001C270(v21, (uint64_t)qword_10011A318);
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    v33[0] = v26;
    *(_DWORD *)uint64_t v25 = 136315138;
    uint64_t v27 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v5, v27);
    unint64_t v30 = v29;
    uint64_t v32 = sub_1000850E4(v28, v29, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v25 + 4, v25 + 12);
    __n128 v31 = swift_bridgeObjectRelease(v30);
    (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v5, v31);
    _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "Unexpectedly asked to mark bulletin as dismissed (%s)",  v25,  0xCu);
    swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

id sub_100064F30(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v46 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100018A04(&qword_100112D10);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  id v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id result = (id)__chkstk_darwin(v14);
  uint64_t v19 = (char *)&v39 - v18;
  if (a2)
  {
    uint64_t v45 = a1;
    sub_100065310(a2, (uint64_t)v11);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v19, v11, v12);
    if (qword_1001123C0 != -1) {
      swift_once(&qword_1001123C0, sub_10008C9FC);
    }
    uint64_t v20 = sub_10001C270(v6, (uint64_t)qword_10011A318);
    uint64_t v21 = v46;
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v8, v20, v6);
    uint64_t v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 16))(v16, v19, v12);
    uint64_t v23 = (void *)Logger.logObject.getter(v22);
    int v24 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled((os_log_t)v23, (os_log_type_t)v24))
    {
      char v38 = *(void (**)(char *, uint64_t))(v13 + 8);
      v38(v16, v12);

      (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
      goto LABEL_10;
    }

    int v42 = v24;
    os_log_t v43 = (os_log_t)v23;
    uint64_t v25 = swift_slowAlloc(22LL, -1LL);
    uint64_t v44 = a3;
    uint64_t v26 = v25;
    uint64_t v40 = swift_slowAlloc(64LL, -1LL);
    uint64_t v48 = v40;
    *(_DWORD *)uint64_t v26 = 136315394;
    uint64_t v27 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v12, v27);
    unint64_t v30 = v29;
    uint64_t v47 = sub_1000850E4(v28, v29, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v26 + 4, v26 + 12);
    __n128 v31 = swift_bridgeObjectRelease(v30);
    uint64_t v41 = *(void (**)(char *, uint64_t, __n128))(v13 + 8);
    v41(v16, v12, v31);
    *(_WORD *)(v26 + 12) = 2080;
    id result = (id)PBSBulletinDismissalReasonDescription(v44);
    if (result)
    {
      uint64_t v32 = result;
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      unint64_t v35 = v34;

      uint64_t v47 = sub_1000850E4(v33, v35, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease(v35);
      os_log_t v36 = v43;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  (os_log_type_t)v42,  "Bulletin (%s) dismissed with reason: %s",  (uint8_t *)v26,  0x16u);
      uint64_t v37 = v40;
      swift_arrayDestroy(v40, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v46 + 8))(v8, v6);
      a3 = v44;
      char v38 = (void (*)(char *, uint64_t))v41;
LABEL_10:
      sub_100064C38((uint64_t)v19, a3);
      return (id)((uint64_t (*)(char *, uint64_t))v38)(v19, v12);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_100065310@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100018A04(&qword_100114B30);
  __chkstk_darwin(v5);
  uint64_t v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v8 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v26[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v12 = *(void **)(v2 + OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_queue);
  void *v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) != 0)
  {
    uint64_t v15 = (uint64_t *)(v2 + OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_presentedBulletins);
    swift_beginAccess(v15, v26, 0LL, 0LL);
    uint64_t v16 = *v15;
    id v17 = a1;
    uint64_t v18 = swift_bridgeObjectRetain(v16);
    sub_100061B18(v18, v17, (uint64_t)v7);
    swift_bridgeObjectRelease(v16);
    uint64_t v19 = sub_100018A04(&qword_100114B38);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48LL))(v7, 1LL, v19) == 1)
    {
      sub_10001C608((uint64_t)v7, &qword_100114B30);
      uint64_t v20 = type metadata accessor for UUID(0LL);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))( a2,  1LL,  1LL,  v20);
    }

    else
    {
      uint64_t v21 = &v7[*(int *)(v19 + 48)];
      uint64_t v22 = *(void **)v21;
      swift_release(*((void *)v21 + 2));

      uint64_t v23 = type metadata accessor for UUID(0LL);
      uint64_t v24 = *(void *)(v23 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(a2, v7, v23);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(a2, 0LL, 1LL, v23);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t type metadata accessor for PineBoardBulletinManager(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime24PineBoardBulletinManager, a2);
}

uint64_t initializeBufferWithCopyOfBuffer for PineBoardBulletinManager.PresentedBulletin( uint64_t a1, __int128 *a2)
{
  uint64_t v3 = *((void *)a2 + 2);
  __int128 v4 = *a2;
  *(_OWORD *)a1 = *a2;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  id v5 = (id)v4;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for PineBoardBulletinManager.PresentedBulletin(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 16));
}

uint64_t assignWithCopy for PineBoardBulletinManager.PresentedBulletin(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  swift_retain(v7);
  swift_release(v9);
  return a1;
}

__n128 initializeWithTake for PineBoardBulletinManager.PresentedBulletin(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PineBoardBulletinManager.PresentedBulletin(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for PineBoardBulletinManager.PresentedBulletin(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PineBoardBulletinManager.PresentedBulletin( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PineBoardBulletinManager.PresentedBulletin()
{
  return &type metadata for PineBoardBulletinManager.PresentedBulletin;
}

uint64_t sub_1000657D8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100018A04(&qword_100114AF0);
  __chkstk_darwin(v5);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = *v2;
  uint64_t v13 = a2;
  uint64_t v14 = v8;
  OS_dispatch_queue.sync<A>(execute:)(sub_100022558);
  uint64_t v9 = *(void *)&v7[*(int *)(v5 + 48)];
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(void *)(v10 - 8) + 32LL))(a1, v7, v10);
  return v9;
}

uint64_t sub_1000658A8()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6 + 8, v5);
}

double sub_100065938(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_100062774( a1,  a2,  *(void *)(v2 + 16),  v2 + v6,  *(void **)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1000659A0(int a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_1000628C0(a1, a2, *(char **)(v2 + 16), v2 + ((v5 + 24) & ~v5));
}

uint64_t sub_1000659F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100065A00(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100065A08()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 17) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease(*(void *)(v0 + v6));

  return swift_deallocObject(v0, v7 + 8, v5);
}

void sub_100065A94()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 17LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_100062B58(*(_BYTE *)(v0 + 16), v0 + v2, *(void *)(v0 + v3), *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100065AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Signposts.Interval(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v19[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Hasher.init(_seed:)(v19, *(void *)(a3 + 40));
  sub_10002FB54(a1, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1LL, v6) == 1)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, v6);
    Hasher._combine(_:)(1uLL);
    uint64_t v14 = sub_10001949C( &qword_1001136D0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v19, v6, v14);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  Swift::Int v15 = Hasher._finalize()();
  unint64_t v16 = _HashTable.nextHole(atOrAfter:)(v15 & ~(-1LL << *(_BYTE *)(a3 + 32)), a3 + 64, ~(-1LL << *(_BYTE *)(a3 + 32)));
  *(void *)(a3 + 64 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
  uint64_t result = sub_10002FB10(a1, *(void *)(a3 + 48) + *(void *)(v11 + 72) * v16);
  *(void *)(*(void *)(a3 + 56) + 8 * vswift_unknownObjectWeakDestroy(v0 + 16) = a2;
  ++*(void *)(a3 + 16);
  return result;
}

uint64_t sub_100065CA8(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  unint64_t v5 = sub_10002FC2C(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  uint64_t v14 = *v2;
  uint64_t *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100069734();
    uint64_t v8 = v14;
  }

  uint64_t v9 = *(void *)(v8 + 48);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v5,  v10);
  uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 24 * v5);
  sub_100067F50(v5, v8);
  uint64_t v12 = *v2;
  uint64_t *v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_100065DA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_10002FC2C(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    uint64_t v20 = *v3;
    *unint64_t v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100069DF8();
      uint64_t v10 = v20;
    }

    uint64_t v11 = *(void *)(v10 + 48);
    uint64_t v12 = type metadata accessor for UUID(0LL);
    uint64_t v13 = *(void *)(v12 - 8);
    unint64_t v14 = *(void *)(v13 + 72) * v7;
    (*(void (**)(unint64_t, uint64_t))(v13 + 8))(v11 + v14, v12);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v13 + 32))(a2, *(void *)(v10 + 56) + v14, v12);
    sub_1000681FC(v7, v10);
    uint64_t v15 = *v3;
    *unint64_t v3 = v10;
    __n128 v16 = swift_bridgeObjectRelease(v15);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, __n128))(v13 + 56))(a2, 0LL, 1LL, v12, v16);
  }

  else
  {
    uint64_t v18 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v18 - 8) + 56LL))( a2,  1LL,  1LL,  v18,  v19);
  }

uint64_t sub_100065ED4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100018A04((uint64_t *)&unk_100114B50);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v9 = 0LL;
    uint64_t v10 = (uint64_t *)(v5 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v33 = -1LL << v11;
    uint64_t v34 = v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v9 << 6);
      }

      else
      {
        int64_t v22 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v22 >= v35) {
          goto LABEL_36;
        }
        unint64_t v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          int64_t v9 = v22 + 1;
          if (v22 + 1 >= v35) {
            goto LABEL_36;
          }
          unint64_t v23 = v10[v9];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v34 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v35);
                }
                else {
                  *uint64_t v10 = v33;
                }
                *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v9 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_44;
                }
                if (v9 >= v35) {
                  goto LABEL_36;
                }
                unint64_t v23 = v10[v9];
                ++v24;
                if (v23) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v24;
          }
        }

LABEL_33:
        unint64_t v13 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }

      uint64_t v29 = 8 * v21;
      uint64_t v30 = *(void *)(v5 + 56);
      uint64_t v31 = *(void *)(*(void *)(v5 + 48) + v29);
      uint64_t v32 = *(void *)(v30 + v29);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain(*(void *)(v30 + v29));
      }
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v31);
      uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          BOOL v27 = v17 == v26;
          if (v17 == v26) {
            unint64_t v17 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v17);
        }

        while (v28 == -1);
        unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }

      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      uint64_t v19 = 8 * v18;
      *(void *)(*(void *)(v8 + 48) + v19) = v31;
      *(void *)(*(void *)(v8 + 56) + v19) = v32;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  *unint64_t v3 = v8;
  return result;
}

    uint64_t v12 = (v25 - 1) & v25;
    int64_t v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    uint64_t v31 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v22);
    uint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    uint64_t v34 = *(void **)(*(void *)(v6 + 56) + 8 * v22);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      int64_t v35 = v34;
    }

    Hasher.init(_seed:)(v41, *(void *)(v9 + 40));
    String.hash(into:)(v41, v33, v32);
    uint64_t v15 = Hasher._finalize()();
    unint64_t v16 = -1LL << *(_BYTE *)(v9 + 32);
    unint64_t v17 = v15 & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      BOOL v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          unint64_t v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      uint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    unint64_t v20 = (void *)(*(void *)(v9 + 48) + 16 * v19);
    *unint64_t v20 = v33;
    v20[1] = v32;
    *(void *)(*(void *)(v9 + 56) + 8 * v19) = v34;
    ++*(void *)(v9 + 16);
  }

  swift_release(v6);
  uint64_t v4 = v37;
  int64_t v24 = (void *)(v6 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  os_log_t v36 = 1LL << *(_BYTE *)(v6 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v24 = -1LL << v36;
  }
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
LABEL_43:
  swift_release(v6);
  void *v4 = v9;
}

void sub_100066188(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100018A04(&qword_1001137A8);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    os_log_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    swift_retain(v5);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }

        if (v18 >= v35) {
          goto LABEL_37;
        }
        unint64_t v19 = v36[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v35) {
            goto LABEL_37;
          }
          unint64_t v19 = v36[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v35)
            {
LABEL_37:
              swift_release(v5);
              unint64_t v3 = v34;
              if ((a2 & 1) != 0)
              {
                uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v36 = -1LL << v33;
                }
                *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v19 = v36[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1LL)) {
                  goto LABEL_44;
                }
                if (v13 >= v35) {
                  goto LABEL_37;
                }
                unint64_t v19 = v36[v13];
                ++v20;
                if (v19) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v13 = v20;
          }
        }

void sub_100066484(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Signposts.Interval(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100018A04((uint64_t *)&unk_100114B40);
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  if (*(void *)(v10 + 16))
  {
    unint64_t v27 = v3;
    uint64_t v12 = 1LL << *(_BYTE *)(v10 + 32);
    int64_t v13 = (void *)(v10 + 64);
    uint64_t v14 = -1LL;
    if (v12 < 64) {
      uint64_t v14 = ~(-1LL << v12);
    }
    unint64_t v15 = v14 & *(void *)(v10 + 64);
    int64_t v16 = (unint64_t)(v12 + 63) >> 6;
    swift_retain(v10);
    int64_t v17 = 0LL;
    while (1)
    {
      if (v15)
      {
        unint64_t v19 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }

      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1LL))
        {
          __break(1u);
LABEL_34:
          __break(1u);
          return;
        }

        if (v21 >= v16) {
          goto LABEL_25;
        }
        unint64_t v22 = v13[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v16) {
            goto LABEL_25;
          }
          unint64_t v22 = v13[v17];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v16)
            {
LABEL_25:
              swift_release(v10);
              if ((a2 & 1) == 0)
              {
                swift_release(v10);
                unint64_t v3 = v27;
                goto LABEL_32;
              }

              uint64_t v25 = 1LL << *(_BYTE *)(v10 + 32);
              if (v25 >= 64) {
                bzero((void *)(v10 + 64), ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *int64_t v13 = -1LL << v25;
              }
              unint64_t v3 = v27;
              *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v22 = v13[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1LL)) {
                  goto LABEL_34;
                }
                if (v17 >= v16) {
                  goto LABEL_25;
                }
                unint64_t v22 = v13[v17];
                ++v23;
                if (v22) {
                  goto LABEL_22;
                }
              }
            }

            int64_t v17 = v23;
          }
        }

void sub_1000666D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100018A04(&qword_1001134E8);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_25;
    }

    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }

    if (v21 >= v12) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v12) {
        goto LABEL_37;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1LL)) {
              goto LABEL_46;
            }
            if (v14 >= v12) {
              goto LABEL_37;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_24;
            }
          }
        }

        int64_t v14 = v24;
      }
    }

void sub_1000669EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100018A04(&qword_100113790);
  int v50 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v48 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v46 = v2;
  int64_t v47 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  __n128 v18 = swift_retain(v10);
  int64_t v19 = 0LL;
  for (i = v10; ; uint64_t v10 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v24 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }

    if (v24 >= v47) {
      break;
    }
    uint64_t v25 = v48;
    unint64_t v26 = v48[v24];
    ++v19;
    if (!v26)
    {
      int64_t v19 = v24 + 1;
      if (v24 + 1 >= v47) {
        goto LABEL_36;
      }
      unint64_t v26 = v48[v19];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v47)
        {
LABEL_36:
          swift_release(v10);
          unint64_t v3 = v46;
          if ((v50 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = v48[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v19 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v47) {
              goto LABEL_36;
            }
            unint64_t v26 = v48[v19];
            ++v27;
            if (v26) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v27;
      }
    }

void sub_100066DB8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100018A04(&qword_100113718);
  int v45 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v44 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  BOOL v42 = v2;
  int64_t v43 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  __n128 v18 = swift_retain(v10);
  int64_t v19 = 0LL;
  while (1)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }

    if (v23 >= v43) {
      break;
    }
    int64_t v24 = v44;
    unint64_t v25 = v44[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v43) {
        goto LABEL_36;
      }
      unint64_t v25 = v44[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v43)
        {
LABEL_36:
          swift_release(v10);
          unint64_t v3 = v42;
          if ((v45 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v44[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v43) {
              goto LABEL_36;
            }
            unint64_t v25 = v44[v19];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v26;
      }
    }

void sub_10006715C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100018A04((uint64_t *)&unk_100114B20);
  int v46 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v44 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  BOOL v42 = v2;
  int64_t v43 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  __n128 v18 = swift_retain(v10);
  int64_t v19 = 0LL;
  for (i = v10; ; uint64_t v10 = i)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }

    if (v23 >= v43) {
      break;
    }
    int64_t v24 = v44;
    unint64_t v25 = v44[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v43) {
        goto LABEL_36;
      }
      unint64_t v25 = v44[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v43)
        {
LABEL_36:
          swift_release(v10);
          unint64_t v3 = v42;
          if ((v46 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v44[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v43) {
              goto LABEL_36;
            }
            unint64_t v25 = v44[v19];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v26;
      }
    }

void sub_1000674F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v60 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = &v52[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v7);
  uint64_t v11 = &v52[-v10];
  uint64_t v12 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100018A04(&qword_1001137A0);
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  if (!*(void *)(v12 + 16))
  {
    uint64_t v49 = v12;
LABEL_44:
    swift_release(v49);
    *unint64_t v3 = v13;
    return;
  }

  uint64_t v14 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v15 = *(void *)(v12 + 64);
  uint64_t v56 = (void *)(v12 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1LL << v14);
  }
  else {
    uint64_t v16 = -1LL;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v54 = v2;
  int64_t v55 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v18 = v12;
  uint64_t v19 = v13 + 64;
  uint64_t v59 = v18;
  __n128 v20 = swift_retain(v18);
  int64_t v21 = 0LL;
  int v53 = a2;
  uint64_t v22 = 16LL;
  if ((a2 & 1) != 0) {
    uint64_t v22 = 32LL;
  }
  uint64_t v57 = v22;
  id v58 = v9;
  while (1)
  {
    if (v17)
    {
      unint64_t v27 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v28 = v27 | (v21 << 6);
      goto LABEL_26;
    }

    int64_t v29 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }

    if (v29 >= v55)
    {
      uint64_t v50 = v59;
      swift_release(v59);
      unint64_t v3 = v54;
      uint64_t v30 = v56;
      if ((v53 & 1) != 0)
      {
LABEL_39:
        uint64_t v51 = 1LL << *(_BYTE *)(v50 + 32);
        if (v51 >= 64) {
          bzero(v30, ((unint64_t)(v51 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
        }
        else {
          *uint64_t v30 = -1LL << v51;
        }
        *(void *)(v50 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
      }

LABEL_43:
      uint64_t v49 = v50;
      goto LABEL_44;
    }

    uint64_t v30 = v56;
    unint64_t v31 = v56[v29];
    ++v21;
    if (!v31)
    {
      int64_t v21 = v29 + 1;
      if (v29 + 1 >= v55) {
        goto LABEL_36;
      }
      unint64_t v31 = v56[v21];
      if (!v31) {
        break;
      }
    }

LABEL_25:
    unint64_t v17 = (v31 - 1) & v31;
    unint64_t v28 = __clz(__rbit64(v31)) + (v21 << 6);
LABEL_26:
    uint64_t v33 = v59;
    uint64_t v34 = *(void *)(v60 + 72);
    unint64_t v35 = v34 * v28;
    char v36 = *(void (**)(_BYTE *, unint64_t, uint64_t, __n128))(v60 + v57);
    v36(v11, *(void *)(v59 + 48) + v34 * v28, v6, v20);
    unint64_t v37 = *(void *)(v33 + 56) + v35;
    BOOL v38 = v58;
    ((void (*)(_BYTE *, unint64_t, uint64_t))v36)(v58, v37, v6);
    uint64_t v39 = *(void *)(v13 + 40);
    uint64_t v40 = sub_10001949C( &qword_1001136D0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v41 = dispatch thunk of Hashable._rawHashValue(seed:)(v39, v6, v40);
    uint64_t v42 = -1LL << *(_BYTE *)(v13 + 32);
    unint64_t v43 = v41 & ~v42;
    unint64_t v44 = v43 >> 6;
    if (((-1LL << v43) & ~*(void *)(v19 + 8 * (v43 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1LL << v43) & ~*(void *)(v19 + 8 * (v43 >> 6)))) | v43 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v45 = 0;
      unint64_t v46 = (unint64_t)(63 - v42) >> 6;
      do
      {
        if (++v44 == v46 && (v45 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        BOOL v47 = v44 == v46;
        if (v44 == v46) {
          unint64_t v44 = 0LL;
        }
        v45 |= v47;
        uint64_t v48 = *(void *)(v19 + 8 * v44);
      }

      while (v48 == -1);
      unint64_t v23 = __clz(__rbit64(~v48)) + (v44 << 6);
    }

    *(void *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    unint64_t v24 = v34 * v23;
    unint64_t v25 = *(void *)(v13 + 48) + v34 * v23;
    int64_t v26 = *(void (**)(unint64_t, _BYTE *, uint64_t))(v60 + 32);
    v26(v25, v11, v6);
    v26(*(void *)(v13 + 56) + v24, v38, v6);
    ++*(void *)(v13 + 16);
  }

  int64_t v32 = v29 + 2;
  if (v32 >= v55)
  {
LABEL_36:
    uint64_t v50 = v59;
    swift_release(v59);
    unint64_t v3 = v54;
    if ((v53 & 1) != 0) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }

  unint64_t v31 = v56[v32];
  if (v31)
  {
    int64_t v21 = v32;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v21 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      break;
    }
    if (v21 >= v55) {
      goto LABEL_36;
    }
    unint64_t v31 = v56[v21];
    ++v32;
    if (v31) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + vswift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + vswift_unknownObjectWeakDestroy(v0 + 16) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain(v17);
  }

  __n128 v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    __n128 v20 = 32 * v15;
    sub_10001C1A0(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    uint64_t *v21 = v19;
    v21[1] = v18;
    sub_10001C1DC(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v15 = (v23 - 1) & v23;
    uint64_t v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    uint64_t v19 = *(void *)(v26 + 72) * v18;
    sub_10002FB54(*(void *)(v5 + 48) + v19, (uint64_t)v4);
    __n128 v20 = 8 * v18;
    int64_t v21 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
    sub_10002FB10((uint64_t)v4, *(void *)(v7 + 48) + v19);
    *(void *)(*(void *)(v7 + 56) + v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v21;
    swift_retain(v21);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_26:
    swift_release(v5);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  unint64_t v23 = *(void *)(v9 + 8 * v24);
  if (v23)
  {
    uint64_t v12 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v12 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v9 + 8 * v12);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v22 - 1) & v22;
    uint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_1000303A0(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    unint64_t v17 = 32 * v15;
    sub_10001C1A0(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    uint64_t v19 = v25[0];
    __n128 v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = v20;
    uint64_t result = sub_10001C1DC(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }

  unint64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    uint64_t v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v27 - 1) & v27;
    uint64_t v16 = __clz(__rbit64(v27)) + (v11 << 6);
LABEL_12:
    unint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v17, v1);
    uint64_t v18 = 24 * v16;
    uint64_t v19 = *(void *)(v5 + 56) + 24 * v16;
    __n128 v20 = *(void *)(v19 + 16);
    int64_t v21 = *(void *)(v7 + 48) + v17;
    uint64_t v22 = *(void (**)(unint64_t, char *, uint64_t))(v2 + 32);
    uint64_t v33 = *(_OWORD *)v19;
    v22(v21, v4, v1);
    unint64_t v23 = *(void *)(v7 + 56) + v18;
    unint64_t v24 = (void *)v33;
    *(_OWORD *)unint64_t v23 = v33;
    *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v20;
    unint64_t v25 = v24;
    swift_retain(v20);
  }

  unint64_t v28 = v26 + 2;
  if (v28 >= v32) {
    goto LABEL_26;
  }
  unint64_t v27 = *(void *)(v31 + 8 * v28);
  if (v27)
  {
    uint64_t v11 = v28;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v11 >= v32) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v31 + 8 * v11);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }

    uint64_t v15 = (v26 - 1) & v26;
    uint64_t v18 = __clz(__rbit64(v26)) + (v12 << 6);
LABEL_12:
    uint64_t v19 = *(void *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v19, v2);
    __n128 v20 = 16 * v18;
    int64_t v21 = *(void *)(v8 + 48) + v19;
    uint64_t v22 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    uint64_t v30 = *(_OWORD *)(*(void *)(v6 + 56) + v20);
    v22(v21, v5, v2);
    unint64_t v23 = (void *)v30;
    *(_OWORD *)(*(void *)(v8 + 56) + v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v30;
    unint64_t v24 = v23;
    uint64_t result = *((id *)&v30 + 1);
  }

  unint64_t v27 = v25 + 2;
  if (v27 >= v16)
  {
LABEL_26:
    uint64_t result = (id)swift_release(v6);
    uint64_t v1 = v28;
    goto LABEL_28;
  }

  int64_t v26 = *(void *)(v29 + 8 * v27);
  if (v26)
  {
    uint64_t v12 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v12 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_26;
    }
    int64_t v26 = *(void *)(v29 + 8 * v12);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v21 - 1) & v21;
    uint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    unint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v17, v1);
    uint64_t v18 = 8 * v16;
    uint64_t v19 = *(void **)(*(void *)(v5 + 56) + v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v17, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v1_Block_object_dispose(va, 8) = v19;
    uint64_t result = v19;
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_26;
  }
  int64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v11 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_26;
    }
    int64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

    uint64_t v13 = (v24 - 1) & v24;
    uint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    unint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    __n128 v20 = 8 * v16;
    int64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v21;
    swift_bridgeObjectRetain(v19);
    uint64_t result = v21;
  }

  unint64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    uint64_t v10 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

  __break(1u);
}

  if (v2 < 0) {
    uint64_t v15 = v2;
  }
  else {
    uint64_t v15 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v2);
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v15);
  swift_bridgeObjectRelease(v2);
LABEL_8:
  uint64_t v6 = 3 * v3;
  if ((unsigned __int128)(v3 * (__int128)3LL) >> 64 == (3 * v3) >> 63)
  {
    uint64_t v7 = v5 % 9;
    if (v5 % 9 >= 3) {
      uint64_t v7 = 3LL;
    }
    uint64_t v5 = v6 + v7;
    if (!__OFADD__(v6, v7))
    {
      if (qword_100112438 == -1) {
        goto LABEL_13;
      }
      goto LABEL_31;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
LABEL_31:
  swift_once(&qword_100112438, sub_10009C958);
LABEL_13:
  uint64_t v8 = *(double *)&qword_10011A390;
  uint64_t v9 = *(double *)&qword_10011A390;
  if (qword_100112428 != -1)
  {
    swift_once(&qword_100112428, sub_10009C938);
    uint64_t v9 = *(double *)&qword_10011A390;
  }

  uint64_t v10 = *(double *)(v0 + OBJC_IVAR____TtC8FaceTime9Snowglobe_size);
  uint64_t v11 = v10 * 0.5 - (*(double *)&qword_10011A380 + *(double *)&qword_10011A380 + v9 * 3.0) * 0.5;
  uint64_t v12 = v8 * (double)v5 + ((double)v5 + -1.0) * *(double *)&qword_10011A380 + v11 + v11;
  if (v12 <= v10) {
    uint64_t v12 = *(double *)(v0 + OBJC_IVAR____TtC8FaceTime9Snowglobe_size);
  }
  return objc_msgSend( *(id *)(v0 + OBJC_IVAR____TtC8FaceTime9Snowglobe_globeView),  "setContentSize:",  v12,  *(double *)(v0 + OBJC_IVAR____TtC8FaceTime9Snowglobe_size + 8));
}

    uint64_t v18 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_26:
    unint64_t v28 = v12;
    int64_t v29 = *(void *)(v12 + 48);
    uint64_t v30 = *(void *)(v47 + 72);
    unint64_t v31 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v47 + 32);
    v31(v11, v29 + v30 * v24, v9, v20);
    int64_t v32 = *(void *)(v14 + 40);
    uint64_t v33 = sub_10001949C(v49, v48, v50);
    uint64_t v34 = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v9, v33);
    unint64_t v35 = -1LL << *(_BYTE *)(v14 + 32);
    char v36 = v34 & ~v35;
    unint64_t v37 = v36 >> 6;
    if (((-1LL << v36) & ~*(void *)(v19 + 8 * (v36 >> 6))) != 0)
    {
      uint64_t v22 = __clz(__rbit64((-1LL << v36) & ~*(void *)(v19 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      BOOL v38 = 0;
      uint64_t v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }

        uint64_t v40 = v37 == v39;
        if (v37 == v39) {
          unint64_t v37 = 0LL;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v19 + 8 * v37);
      }

      while (v41 == -1);
      uint64_t v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }

    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    ((void (*)(unint64_t, char *, uint64_t))v31)(*(void *)(v14 + 48) + v22 * v30, v11, v9);
    ++*(void *)(v14 + 16);
    uint64_t v12 = v28;
  }

  unint64_t v27 = v25 + 3;
  if (v27 < v45)
  {
    int64_t v26 = v46[v27];
    if (!v26)
    {
      while (1)
      {
        int64_t v21 = v27 + 1;
        if (__OFADD__(v27, 1LL)) {
          goto LABEL_41;
        }
        if (v21 >= v45) {
          goto LABEL_35;
        }
        int64_t v26 = v46[v21];
        ++v27;
        if (v26) {
          goto LABEL_25;
        }
      }
    }

    int64_t v21 = v27;
    goto LABEL_25;
  }

    uint64_t v19 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_26:
    int64_t v29 = *(void *)(v10 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16))( v12,  *(void *)(v13 + 48) + v29 * v25,  v9,  v21);
    uint64_t v30 = *(void *)(v15 + 40);
    unint64_t v31 = sub_10001949C(v44, v43, v45);
    int64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v9, v31);
    uint64_t v33 = -1LL << *(_BYTE *)(v15 + 32);
    uint64_t v34 = v32 & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1LL << v34) & ~*(void *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1LL << v34) & ~*(void *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0LL;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v35);
      }

      while (v39 == -1);
      unint64_t v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }

    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(void *)(v15 + 48) + v23 * v29, v12, v9);
    ++*(void *)(v15 + 16);
  }

  unint64_t v28 = v26 + 3;
  if (v28 >= v42)
  {
LABEL_35:
    swift_release_n(v13, 2LL);
    uint64_t v7 = v40;
    goto LABEL_37;
  }

  unint64_t v27 = *(void *)(v41 + 8 * v28);
  if (v27)
  {
    uint64_t v22 = v28;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v22 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v22 >= v42) {
      goto LABEL_35;
    }
    unint64_t v27 = *(void *)(v41 + 8 * v22);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }

                __break(1u);
                goto LABEL_26;
              }

LABEL_46:
  __break(1u);
}

void sub_1000678C8(uint64_t a1, uint64_t a2)
{
}

void sub_1000678D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v3 + 24);
  }
  sub_100018A04(a3);
  char v40 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  uint64_t v9 = v8;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_43;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v39 = v6 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & *(void *)(v6 + 64);
  unint64_t v37 = v4;
  int64_t v38 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v8 + 64;
  swift_retain(v6);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v12)
    {
      unint64_t v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }

    if (v23 >= v38) {
      break;
    }
    unint64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v39 + 8 * v23);
    ++v14;
    if (!v25)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v38) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v39 + 8 * v14);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v6);
          uint64_t v4 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v14 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v38) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v39 + 8 * v14);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v26;
      }
    }

unint64_t sub_100067BDC(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v45 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = type metadata accessor for Signposts.Interval(0LL);
  uint64_t v7 = __chkstk_darwin(v44);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t result = __chkstk_darwin(v7);
  uint64_t v13 = (char *)&v44 - v12;
  uint64_t v14 = a2 + 64;
  uint64_t v15 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v16 = (a1 + 1) & ~v15;
  if (((1LL << v16) & *(void *)(a2 + 64 + 8 * (v16 >> 6))) != 0)
  {
    uint64_t v49 = v5;
    uint64_t v50 = v11;
    uint64_t v17 = ~v15;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v15);
    uint64_t v18 = a2 + 64;
    if ((*(void *)(v14 + 8 * (v16 >> 6)) & (1LL << v16)) != 0)
    {
      uint64_t v19 = *(void *)(v50 + 72);
      unint64_t v47 = (result + 1) & v17;
      uint64_t v48 = v17;
      uint64_t v50 = v19;
      do
      {
        int64_t v20 = v19 * v16;
        sub_10002FB54(*(void *)(a2 + 48) + v19 * v16, (uint64_t)v13);
        Hasher.init(_seed:)(v51, *(void *)(a2 + 40));
        sub_10002FB54((uint64_t)v13, (uint64_t)v9);
        uint64_t v21 = v49;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v9, 1LL, v4) == 1)
        {
          Hasher._combine(_:)(0LL);
        }

        else
        {
          unint64_t v22 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
          unint64_t v46 = a1;
          int64_t v23 = v13;
          uint64_t v24 = a2;
          uint64_t v25 = v18;
          uint64_t v26 = v4;
          char v27 = v45;
          v22(v45, v9, v26);
          Hasher._combine(_:)(1uLL);
          uint64_t v28 = sub_10001949C( &qword_1001136D0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          dispatch thunk of Hashable.hash(into:)(v51, v26, v28);
          BOOL v29 = v27;
          uint64_t v4 = v26;
          uint64_t v18 = v25;
          a2 = v24;
          uint64_t v13 = v23;
          a1 = v46;
          (*(void (**)(char *, uint64_t))(v21 + 8))(v29, v4);
        }

        Swift::Int v30 = Hasher._finalize()();
        unint64_t result = sub_10002FFE4((uint64_t)v13);
        uint64_t v31 = v48;
        unint64_t v32 = v30 & v48;
        if ((uint64_t)a1 >= (uint64_t)v47)
        {
          uint64_t v19 = v50;
          if (v32 < v47) {
            goto LABEL_5;
          }
        }

        else
        {
          uint64_t v19 = v50;
          if (v32 >= v47) {
            goto LABEL_14;
          }
        }

        if ((uint64_t)a1 >= (uint64_t)v32)
        {
LABEL_14:
          uint64_t v33 = *(void *)(a2 + 48);
          unint64_t result = v33 + v19 * a1;
          uint64_t v34 = v33 + v20;
          if ((uint64_t)(v19 * a1) < v20 || result >= v34 + v19)
          {
            unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v34, 1LL, v44);
LABEL_19:
            uint64_t v19 = v50;
          }

          else if (v19 * a1 != v20)
          {
            unint64_t result = swift_arrayInitWithTakeBackToFront(result);
            goto LABEL_19;
          }

          uint64_t v35 = *(void *)(a2 + 56);
          uint64_t v36 = (void *)(v35 + 8 * a1);
          unint64_t v37 = (void *)(v35 + 8 * v16);
          if (a1 != v16 || (a1 = v16, v36 >= v37 + 1))
          {
            void *v36 = *v37;
            a1 = v16;
          }
        }

LABEL_5:
        unint64_t v16 = (v16 + 1) & v31;
      }

      while (((*(void *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0);
    }

    int64_t v38 = (uint64_t *)(v18 + 8 * (a1 >> 6));
    uint64_t v39 = *v38;
    uint64_t v40 = (-1LL << a1) - 1;
  }

  else
  {
    int64_t v38 = (uint64_t *)(v14 + 8 * (a1 >> 6));
    uint64_t v40 = *v38;
    uint64_t v39 = (-1LL << a1) - 1;
  }

  *int64_t v38 = v40 & v39;
  uint64_t v41 = *(void *)(a2 + 16);
  BOOL v42 = __OFSUB__(v41, 1LL);
  uint64_t v43 = v41 - 1;
  if (v42)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v43;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

    uint64_t v5 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, a2), "mainBundle");
    uint64_t v6 = 0xD00000000000001ALL;
    int64_t v20 = 0xEB00000000656C62LL;
    uint64_t v7 = "TVOS_Initial_Recents_Error";
    goto LABEL_6;
  }

  uint64_t v13 = [objc_allocWithZone(TUFeatureFlags) init];
  uint64_t v14 = [v13 appleAccountRebrandEnabled];
  uint64_t v5 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v15), "mainBundle");
  if (v14)
  {
    unint64_t v16 = 0xD000000000000020LL;
    uint64_t v21 = 0xEB00000000656C62LL;
    uint64_t v17 = 0x80000001000DB430LL;
  }

  else
  {
    uint64_t v21 = 0xEB00000000656C62LL;
    uint64_t v17 = 0x80000001000DB410LL;
    unint64_t v16 = 0xD000000000000013LL;
  }

  v18._uint64_t countAndFlagsBits = 0LL;
  v18._object = (void *)0xE000000000000000LL;
  uint64_t v19 = 0x617A696C61636F4CLL;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)( *(Swift::String *)&v16,  (Swift::String_optional)0,  v5,  v18,  *(Swift::String *)(&v21 - 1))._countAndFlagsBits;

LABEL_7:
  return countAndFlagsBits;
}

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = type metadata accessor for RecentsCallItem(0LL);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = *(void *)(v11 + 72);
  uint64_t v14 = v3 + v12 + v13 * v8;
  uint64_t v15 = a1 + v12;
  unint64_t v16 = v13 * v2;
  uint64_t v17 = v14 + v16;
  uint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy(v14);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *uint64_t v1 = v3;
    return;
  }

  int64_t v20 = *(void *)(v3 + 16);
  uint64_t v21 = __OFADD__(v20, v2);
  unint64_t v22 = v20 + v2;
  if (!v21)
  {
    *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v22;
    goto LABEL_19;
  }

unint64_t sub_100067F50(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v39 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v38 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v39 + 72);
      unint64_t v37 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v37(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v18 = *(void *)(a2 + 40);
        uint64_t v19 = sub_10001949C( &qword_1001136D0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v21 = v20 & v17;
        if (a1 >= (uint64_t)v38)
        {
          if (v21 >= v38 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t result = v24 + v15 * a1;
            uint64_t v25 = v24 + v16;
            uint64_t v8 = v14;
            if (v15 * a1 < v16 || (uint64_t v12 = v15, result >= v25 + v15))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v25, 1LL, v4);
LABEL_21:
              uint64_t v13 = v17;
              uint64_t v12 = v15;
            }

            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }

            uint64_t v26 = *(void *)(a2 + 56);
            unint64_t v27 = v26 + 24 * a1;
            uint64_t v28 = (__int128 *)(v26 + 24 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= (unint64_t)v28 + 24))
            {
              __int128 v29 = *v28;
              *(void *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = *((void *)v28 + 2);
              *(_OWORD *)unint64_t v27 = v29;
              a1 = v10;
            }

            goto LABEL_5;
          }
        }

        else if (v21 >= v38 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
        uint64_t v12 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    Swift::Int v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1LL << a1) - 1;
  }

  else
  {
    Swift::Int v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1LL << a1) - 1;
  }

  *Swift::Int v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1LL);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_1000681FC(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v39 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v38 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v39 + 72);
      unint64_t v37 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        int64_t v15 = v12 * v10;
        uint64_t v16 = v13;
        v37(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v17 = *(void *)(a2 + 40);
        uint64_t v18 = sub_10001949C( &qword_1001136D0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)(v17, v4, v18);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v7, v4);
        uint64_t v13 = v16;
        unint64_t v20 = v19 & v16;
        if (a1 >= (uint64_t)v38)
        {
          if (v20 >= v38 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            uint64_t v23 = *(void *)(a2 + 48);
            int64_t v24 = v12 * a1;
            unint64_t v25 = v23 + v12 * a1;
            uint64_t v26 = v23 + v15;
            if (v12 * a1 < v15 || v25 >= v26 + v12)
            {
              swift_arrayInitWithTakeFrontToBack(v25, v26, 1LL, v4);
            }

            else if (v24 != v15)
            {
              swift_arrayInitWithTakeBackToFront(v25);
            }

            uint64_t v27 = *(void *)(a2 + 56);
            unint64_t result = v27 + v24;
            uint64_t v28 = v27 + v15;
            if (v24 < v15 || result >= v28 + v12)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v28, 1LL, v4);
              a1 = v10;
              uint64_t v8 = v14;
              uint64_t v13 = v16;
            }

            else
            {
              a1 = v10;
              BOOL v29 = v24 == v15;
              uint64_t v8 = v14;
              uint64_t v13 = v16;
              if (!v29)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront(result);
                uint64_t v13 = v16;
                a1 = v10;
              }
            }

            goto LABEL_5;
          }
        }

        else if (v20 >= v38 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    Swift::Int v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1LL << a1) - 1;
  }

  else
  {
    Swift::Int v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1LL << a1) - 1;
  }

  *Swift::Int v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1LL);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

_OWORD *sub_1000684B8(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10002FB98(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = (void *)(v18[7] + 32 * v12);
        sub_10001BFEC(v19);
        return sub_10001C1DC(a1, v19);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10006914C();
      goto LABEL_7;
    }

    sub_100066188(v15, a4 & 1);
    unint64_t v21 = sub_10002FB98(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_100068CDC(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }

  unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000685E8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for Signposts.Interval(0LL);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v11 = (void *)*v3;
  unint64_t v13 = sub_10002F9AC(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      uint64_t v20 = v19[7];
      uint64_t result = swift_release(*(void *)(v20 + 8 * v13));
      *(void *)(v20 + 8 * v13) = a1;
      return result;
    }

    goto LABEL_11;
  }

  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_100069330();
    goto LABEL_7;
  }

  sub_100066484(v16, a3 & 1);
  unint64_t v22 = sub_10002F9AC(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v13 = v22;
  uint64_t v19 = *v4;
  if ((v17 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  sub_10002FB54(a2, (uint64_t)v10);
  return sub_100068D44(v13, (uint64_t)v10, a1, v19);
}

_OWORD *sub_10006873C(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10002FC98(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        char v17 = (void *)(v16[7] + 32 * v10);
        sub_10001BFEC(v17);
        return sub_10001C1DC(a1, v17);
      }

      goto LABEL_11;
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100069550();
      goto LABEL_7;
    }

    sub_1000666D8(v13, a3 & 1);
    unint64_t v19 = sub_10002FC98(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_1000303A0(a2, (uint64_t)v21);
      return sub_100068DD4(v10, (uint64_t)v21, a1, v16);
    }
  }

  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

void sub_100068874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v14 = (void *)*v5;
  unint64_t v16 = sub_10002FC2C(a4);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a5 & 1) != 0)
  {
LABEL_7:
    unint64_t v22 = *v6;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      uint64_t v23 = v22[7] + 24 * v16;
      uint64_t v24 = *(void **)v23;
      swift_release(*(void *)(v23 + 16));

      uint64_t v25 = v28;
      *(void *)uint64_t v23 = a1;
      *(void *)(v23 + _Block_object_dispose(va, 8) = v25;
      *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v29;
      return;
    }

    goto LABEL_11;
  }

  if (v21 >= v19 && (a5 & 1) == 0)
  {
    sub_100069734();
    goto LABEL_7;
  }

  sub_1000669EC(v19, a5 & 1);
  unint64_t v26 = sub_10002FC2C(a4);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return;
  }

  unint64_t v16 = v26;
  unint64_t v22 = *v6;
  if ((v20 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a4, v10);
  sub_100068E4C(v16, (uint64_t)v13, a1, v28, v29, v22);
}

uint64_t sub_1000689F4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10002FC2C(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }

  else
  {
    char v18 = v13;
    uint64_t v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      char v20 = *v4;
      if ((v18 & 1) != 0) {
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 40))( v20[7] + *(void *)(v9 + 72) * v14,  a1,  v8);
      }
      goto LABEL_11;
    }

    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100069DF8();
      goto LABEL_7;
    }

    sub_1000674F0(v17, a3 & 1);
    unint64_t v22 = sub_10002FC2C(a2);
    if ((v18 & 1) == (v23 & 1))
    {
      unint64_t v14 = v22;
      char v20 = *v4;
      if ((v18 & 1) != 0) {
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 40))( v20[7] + *(void *)(v9 + 72) * v14,  a1,  v8);
      }
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100068F00(v14, (uint64_t)v11, a1, v20);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void sub_100068B70(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10002FB98(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10006A060(&qword_100114B18);
LABEL_7:
    char v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }

_OWORD *sub_100068CDC(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_10001C1DC(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_100068D44(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for Signposts.Interval(0LL);
  uint64_t result = sub_10002FB10(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

_OWORD *sub_100068DD4(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_10001C1DC(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t sub_100068E4C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v12 = a6[6];
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))( v12 + *(void *)(*(void *)(v13 - 8) + 72LL) * a1,  a2,  v13);
  uint64_t v15 = (void *)(a6[7] + 24 * a1);
  *uint64_t v15 = a3;
  v15[1] = a4;
  void v15[2] = a5;
  uint64_t v16 = a6[2];
  BOOL v17 = __OFADD__(v16, 1LL);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    a6[2] = v18;
  }
  return result;
}

uint64_t sub_100068F00(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 72) * a1;
  uint64_t v12 = v8 + v11;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v13(v12, a2, v9);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(a4[7] + v11, a3, v9);
  uint64_t v15 = a4[2];
  BOOL v16 = __OFADD__(v15, 1LL);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a4[2] = v17;
  }
  return result;
}

void *sub_100068FAC()
{
  uint64_t v1 = v0;
  sub_100018A04((uint64_t *)&unk_100114B50);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }

void *sub_10006914C()
{
  uint64_t v1 = v0;
  sub_100018A04(&qword_1001137A8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release(v2);
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void sub_100069330()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Signposts.Interval(0LL);
  uint64_t v26 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100018A04((uint64_t *)&unk_100114B40);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    swift_release(v5);
LABEL_28:
    *uint64_t v1 = v7;
    return;
  }

  uint64_t v25 = v1;
  uint64_t v8 = (void *)(v6 + 64);
  uint64_t v9 = v5 + 64;
  unint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  int64_t v12 = 0LL;
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v5 + 16);
  uint64_t v13 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v5 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v16) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v9 + 8 * v22);
    ++v12;
    if (!v23)
    {
      int64_t v12 = v22 + 1;
      if (v22 + 1 >= v16) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v9 + 8 * v12);
      if (!v23) {
        break;
      }
    }

void *sub_100069550()
{
  uint64_t v1 = v0;
  sub_100018A04(&qword_1001134E8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }

void sub_100069734()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100018A04(&qword_100113790);
  Swift::Int v30 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    swift_release(v5);
    *Swift::Int v30 = v7;
    return;
  }

  uint64_t v8 = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v31 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v32 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v26 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v26 >= v32) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v31 + 8 * v26);
    ++v11;
    if (!v27)
    {
      int64_t v11 = v26 + 1;
      if (v26 + 1 >= v32) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v31 + 8 * v11);
      if (!v27) {
        break;
      }
    }

id sub_100069988()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100018A04(&qword_100113718);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (id)swift_release(v6);
LABEL_28:
    *uint64_t v1 = v8;
    return result;
  }

  int64_t v28 = v1;
  id result = (id)(v7 + 64);
  unint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  uint64_t v29 = v6 + 64;
  int64_t v12 = 0LL;
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v25 >= v16) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v29 + 8 * v25);
    ++v12;
    if (!v26)
    {
      int64_t v12 = v25 + 1;
      if (v25 + 1 >= v16) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v29 + 8 * v12);
      if (!v26) {
        break;
      }
    }

id sub_100069BD0()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100018A04((uint64_t *)&unk_100114B20);
  id v24 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v5);
    *id v24 = v7;
    return result;
  }

  id result = (id)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  int64_t v11 = 0LL;
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  uint64_t v25 = v5 + 64;
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }

void *sub_100069DF8()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void **)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v25 - v6;
  sub_100018A04(&qword_1001137A0);
  int64_t v26 = v0;
  uint64_t v8 = *v0;
  uint64_t v9 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_23:
    id result = (void *)swift_release(v8);
    *int64_t v26 = v10;
    return result;
  }

  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1LL << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  uint64_t v27 = v8 + 64;
  int64_t v13 = 0LL;
  *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v8 + 16);
  uint64_t v14 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(v8 + 64);
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }

    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v22 >= v28) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_23;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v13);
      if (!v23) {
        break;
      }
    }

id sub_10006A054()
{
  return sub_10006A060((uint64_t *)&unk_1001136F0);
}

id sub_10006A060(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100018A04(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v3);
    uint64_t *v2 = v5;
    return result;
  }

  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }

uint64_t sub_10006A208()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10006A22C(uint64_t a1, char a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_10006A268()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10006A2DC()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  sub_10006497C(*(void *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_10006A30C(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *(void *)&v2[OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_queue];
  unint64_t v13 = (void *)swift_allocObject(&unk_1000FA2D0, 40LL, 7LL);
  v13[2] = v2;
  void v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_10006A52C;
  int64_t v23 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  void aBlock[3] = &unk_1000FA2E8;
  int64_t v14 = _Block_copy(aBlock);
  id v15 = a1;
  static DispatchQoS.unspecified.getter(v2);
  unint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_10001949C( (unint64_t *)&qword_100112930,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100018A04((uint64_t *)&unk_100112FD0);
  uint64_t v18 = sub_10004F2A8((unint64_t *)&qword_100112940, (uint64_t *)&unk_100112FD0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v23);
}

uint64_t sub_10006A500()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

id sub_10006A52C()
{
  return sub_100064F30(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10006A538()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v5 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v5 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + v5 + 40));
  unint64_t v6 = *(void *)(v0 + v5 + 72);
  if (v6 >> 60 != 15) {
    sub_100022804(*(void *)(v0 + v5 + 64), v6);
  }
  return swift_deallocObject(v0, v5 + 89, v3 | 7);
}

void sub_10006A5E4()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_10006354C( *(void *)(v0 + 16),  v0 + v2,  (uint64_t *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL)));
}

void *sub_10006A628(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[8];
  unint64_t v5 = a1[9];
  swift_bridgeObjectRetain(a1[5]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_10006A688(v4, v5);
  return a1;
}

uint64_t sub_10006A688(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10004FE18(result, a2);
  }
  return result;
}

uint64_t sub_10006A69C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1 != (void *)1)
  {

    swift_errorRelease(*(void *)(v0 + 32));
  }

  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10006A6D0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

Swift::Int sub_10006A6FC(void *a1, char a2, uint64_t a3)
{
  return sub_100064614(a1, a2, a3, *(void **)(v3 + 16));
}

void *sub_10006A704(void *result, uint64_t a2, uint64_t a3)
{
  if (result != (void *)1)
  {
    id v4 = result;
    return (void *)swift_errorRetain(a3);
  }

  return result;
}

void *sub_10006A734(void *result, uint64_t a2, uint64_t a3)
{
  if (result != (void *)1)
  {

    return (void *)swift_errorRelease(a3);
  }

  return result;
}

uint64_t sub_10006A790()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_100114B60);
  sub_10001C270(v0, (uint64_t)qword_100114B60);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0xD000000000000019LL,  0x80000001000C5E50LL);
}

uint64_t sub_10006A80C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10006A840 + 4 * byte_1000C5E60[a4]))( 0xD000000000000013LL,  0x80000001000DB2E0LL);
}

uint64_t sub_10006A840(uint64_t a1)
{
  return a1 + 3;
}

uint64_t sub_10006A868()
{
  return 0x69567974706D652ELL;
}

uint64_t sub_10006A884()
{
  return 0x6C616974696E692ELL;
}

uint64_t sub_10006A89C()
{
  return sub_10006A80C(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

double sub_10006A8AC()
{
  double result = 15.0;
  xmmword_100114B78 = xmmword_1000C5EC0;
  *(_OWORD *)&qword_100114B88 = xmmword_1000C5EC0;
  return result;
}

void sub_10006A8C4()
{
  qword_100114B98 = 0x4014000000000000LL;
}

void sub_10006A8D4()
{
  qword_100114BA0 = 0xC032000000000000LL;
}

void sub_10006A8E4()
{
  qword_100114BA8 = 0x4032000000000000LL;
}

void sub_10006A8F4()
{
  qword_100114BB0 = 0x402E000000000000LL;
}

void sub_10006A904()
{
  qword_100114BB8 = 0x404E000000000000LL;
}

id sub_10006A914()
{
  id result = [objc_allocWithZone(UIColor) initWithWhite:1.0 alpha:0.2];
  qword_100114BC0 = (uint64_t)result;
  return result;
}

id sub_10006A950()
{
  uint64_t v0 = type metadata accessor for UIButton.Configuration.CornerStyle(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for UIButton.Configuration.Size(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v56 = type metadata accessor for UIButton.Configuration(0LL);
  uint64_t v8 = *(void *)(v56 - 8);
  uint64_t v9 = __chkstk_darwin(v56);
  uint64_t v11 = (char *)v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  int64_t v14 = (char *)v54 - v13;
  static UIButton.Configuration.filled()(v12);
  if (qword_1001122D0 != -1) {
    swift_once(&qword_1001122D0, sub_10006A8AC);
  }
  UIButton.Configuration.contentInsets.setter( *(double *)&xmmword_100114B78,  *((double *)&xmmword_100114B78 + 1),  *(double *)&qword_100114B88,  unk_100114B90);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for UIButton.Configuration.Size.mini(_:),  v4);
  UIButton.Configuration.buttonSize.setter(v7);
  if (qword_100112300 != -1) {
    swift_once(&qword_100112300, sub_10006A914);
  }
  uint64_t v15 = qword_100114BC0;
  id v16 = (id)qword_100114BC0;
  uint64_t v17 = (void (*)(void *, void))UIButton.Configuration.background.modify(v57);
  UIBackgroundConfiguration.backgroundColor.setter(v15);
  v17(v57, 0LL);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for UIButton.Configuration.CornerStyle.fixed(_:),  v0);
  UIButton.Configuration.cornerStyle.setter(v3);
  uint64_t v18 = (void (*)(void *, void))UIButton.Configuration.background.modify(v57);
  UIBackgroundConfiguration.cornerRadius.setter(16.0);
  v18(v57, 0LL);
  id v20 =  objc_msgSend( (id)objc_opt_self(UIFont, v19),  "preferredFontForTextStyle:",  UIFontTextStyleCaption2);
  id v22 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration, v21), "configurationWithFont:", v20);

  uint64_t v23 = v8;
  uint64_t v24 = v56;
  if (qword_1001122D8 != -1) {
    swift_once(&qword_1001122D8, sub_10006A8C4);
  }
  UIButton.Configuration.imagePadding.setter(*(double *)&qword_100114B98);
  id v25 = v22;
  NSString v26 = String._bridgeToObjectiveC()();
  id v28 = objc_msgSend((id)objc_opt_self(UIImage, v27), "systemImageNamed:withConfiguration:", v26, v25);

  id v55 = v25;
  UIButton.Configuration.image.setter(v28);
  sub_10001C5D0(0LL, (unint64_t *)&unk_100114C60, &OBJC_CLASS___UIButton_ptr);
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v11, v14, v24);
  uint64_t v29 = (void *)UIButton.init(configuration:primaryAction:)(v11, 0LL);
  id v30 = [v29 layer];
  [v30 setCompositingFilter:kCAFilterPlusL];

  [v29 addTarget:v54[1] action:"didSelectNewCall" forControlEvents:0x2000];
  id v31 = v29;
  NSString v32 = String._bridgeToObjectiveC()();
  [v31 setAccessibilityIdentifier:v32];

  BOOL v34 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle, v33);
  id v35 = v31;
  uint64_t v36 = (NSBundle *)[v34 mainBundle];
  v58._object = (void *)0xEB00000000656C62LL;
  v37._uint64_t countAndFlagsBits = 0x77654E5F534F5654LL;
  v37._object = (void *)0xEF6E6F747475425FLL;
  v38._uint64_t countAndFlagsBits = 0LL;
  v38._object = (void *)0xE000000000000000LL;
  v58._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, (Swift::String_optional)0, v36, v38, v58)._object;

  NSString v40 = String._bridgeToObjectiveC()();
  objc_msgSend(v35, "setAccessibilityLabel:", v40, swift_bridgeObjectRelease(object).n128_f64[0]);

  BOOL v42 = (void *)objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, v41);
  uint64_t v43 = sub_100018A04(&qword_1001142B0);
  uint64_t v44 = swift_allocObject(v43, 48LL, 7LL);
  *(_OWORD *)(v44 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FC0;
  id v45 = [v35 widthAnchor];
  uint64_t v46 = v23;
  if (qword_1001122F8 != -1) {
    swift_once(&qword_1001122F8, sub_10006A904);
  }
  id v47 = [v45 constraintEqualToConstant:*(double *)&qword_100114BB8];

  *(void *)(v44 + 32) = v47;
  id v48 = [v35 heightAnchor];
  id v49 = [v48 constraintEqualToConstant:*(double *)&qword_100114BB8];

  *(void *)(v44 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v49;
  v57[0] = v44;
  specialized Array._endMutation()(v50);
  uint64_t v51 = v57[0];
  sub_10001C5D0(0LL, (unint64_t *)&qword_100113120, &OBJC_CLASS___NSLayoutConstraint_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v42, "activateConstraints:", isa, swift_bridgeObjectRelease(v51).n128_f64[0]);

  (*(void (**)(char *, uint64_t))(v46 + 8))(v14, v24);
  return v35;
}

void *sub_10006AF74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UIButton.Configuration(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v20 - v14;
  static UIButton.Configuration.filled()(v13);
  id v17 = objc_msgSend((id)objc_opt_self(UIColor, v16), "darkGrayColor");
  UIButton.Configuration.baseBackgroundColor.setter(v17);
  swift_bridgeObjectRetain(a2);
  UIButton.Configuration.title.setter(a1, a2);
  sub_10001C5D0(0LL, (unint64_t *)&unk_100114C60, &OBJC_CLASS___UIButton_ptr);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v15, v8);
  uint64_t v18 = (void *)UIButton.init(configuration:primaryAction:)(v12, 0LL);
  [v18 addTarget:v4 action:a3 forControlEvents:0x2000];
  (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
  return v18;
}

id sub_10006B0C4(void *a1, uint64_t a2)
{
  id v4 = [objc_allocWithZone(UIStackView) init];
  [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v4 setAxis:1];
  [v4 setAlignment:0];
  [v4 setSpacing:40.0];
  id v5 = [objc_allocWithZone(UIImageView) init];
  NSString v6 = String._bridgeToObjectiveC()();
  id v8 = objc_msgSend((id)objc_opt_self(UIImage, v7), "systemImageNamed:", v6);

  [v5 setImage:v8];
  id v10 = objc_msgSend((id)objc_opt_self(UIFont, v9), "systemFontOfSize:", 60.0);
  uint64_t v12 = (void *)objc_opt_self(&OBJC_CLASS___UIImageSymbolConfiguration, v11);
  id v13 = [v12 configurationWithFont:v10 scale:3];

  uint64_t v62 = sub_100018A04(&qword_1001142B0);
  uint64_t v14 = swift_allocObject(v62, 40LL, 7LL);
  *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FD0;
  id v16 = objc_msgSend((id)objc_opt_self(UIColor, v15), "secondaryLabelColor");
  *(void *)(v14 + 32) = v16;
  specialized Array._endMutation()(v16);
  sub_10001C5D0(0LL, &qword_1001142E8, &OBJC_CLASS___UIColor_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v18 = objc_msgSend(v12, "configurationWithPaletteColors:", isa, swift_bridgeObjectRelease(v14).n128_f64[0]);

  id v19 = [v13 configurationByApplyingConfiguration:v18];
  [v5 setSymbolConfiguration:v19];

  [v5 setContentMode:1];
  [v4 addArrangedSubview:v5];
  if (a2 > 2)
  {
    uint64_t v23 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v20), "mainBundle");
    v24._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v63._object = (void *)0xEB00000000656C62LL;
    v24._object = (void *)0x80000001000DB370LL;
    v25._uint64_t countAndFlagsBits = 0LL;
    v25._object = (void *)0xE000000000000000LL;
    v63._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, v23, v25, v63)._object;
  }

  else
  {
    sub_10006F2E8((uint64_t)a1, v20);
    object = v21;
  }

  id v26 = sub_10006F1B8();
  objc_msgSend(v4, "addArrangedSubview:", v26, swift_bridgeObjectRelease(object).n128_f64[0]);

  if (_TUIsInternalInstall() && a1)
  {
    id v28 = a1;
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v29._uint64_t countAndFlagsBits = related decl 'e' for TUNeighborhoodActivityConduitError.description.getter((uint64_t)v28);
    id v30 = v29._object;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(v30);
    id v31 = sub_10006F1B8();
    objc_msgSend(v4, "addArrangedSubview:", v31, swift_bridgeObjectRelease(0x80000001000DB3D0).n128_f64[0]);
  }

  NSString v32 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v27), "mainBundle");
  if (a2 > 2)
  {
    v65._object = (void *)0xEB00000000656C62LL;
    v39._object = (void *)0x80000001000DB390LL;
    v39._uint64_t countAndFlagsBits = 0xD000000000000013LL;
    v40._uint64_t countAndFlagsBits = 0LL;
    v40._object = (void *)0xE000000000000000LL;
    v65._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    Swift::String v41 = NSLocalizedString(_:tableName:bundle:value:comment:)(v39, (Swift::String_optional)0, v32, v40, v65);
    uint64_t countAndFlagsBits = v41._countAndFlagsBits;
    Swift::String v37 = v41._object;

    Swift::String v38 = "didSelectDisconnect";
  }

  else
  {
    v33._uint64_t countAndFlagsBits = 0xD000000000000015LL;
    v64._object = (void *)0xEB00000000656C62LL;
    v33._object = (void *)0x80000001000DB3B0LL;
    v34._uint64_t countAndFlagsBits = 0LL;
    v34._object = (void *)0xE000000000000000LL;
    v64._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    Swift::String v35 = NSLocalizedString(_:tableName:bundle:value:comment:)(v33, (Swift::String_optional)0, v32, v34, v64);
    uint64_t countAndFlagsBits = v35._countAndFlagsBits;
    Swift::String v37 = v35._object;

    Swift::String v38 = "didSelectRetry";
  }

  BOOL v42 = sub_10006AF74(countAndFlagsBits, (uint64_t)v37, (uint64_t)v38);
  objc_msgSend(v4, "addArrangedSubview:", v42, swift_bridgeObjectRelease(v37).n128_f64[0]);

  id v43 = [objc_allocWithZone(UIView) init];
  [v43 addSubview:v4];
  id v45 = (void *)objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, v44);
  uint64_t v46 = swift_allocObject(v62, 64LL, 7LL);
  *(_OWORD *)(v46 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C4CE0;
  id v47 = [v4 topAnchor];
  id v48 = [v43 topAnchor];
  id v49 = [v47 constraintEqualToAnchor:v48];

  *(void *)(v46 + 32) = v49;
  id v50 = [v4 bottomAnchor];
  id v51 = [v43 bottomAnchor];
  id v52 = [v50 constraintEqualToAnchor:v51];

  *(void *)(v46 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v52;
  id v53 = [v4 leadingAnchor];
  id v54 = [v43 leadingAnchor];
  id v55 = [v53 constraintEqualToAnchor:v54 constant:40.0];

  *(void *)(v46 + 4_Block_object_dispose(va, 8) = v55;
  id v56 = [v4 trailingAnchor];
  id v57 = [v43 trailingAnchor];
  id v58 = [v56 constraintEqualToAnchor:v57 constant:-40.0];

  *(void *)(v46 + 56) = v58;
  specialized Array._endMutation()(v59);
  sub_10001C5D0(0LL, (unint64_t *)&qword_100113120, &OBJC_CLASS___NSLayoutConstraint_ptr);
  Class v60 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v45, "activateConstraints:", v60, swift_bridgeObjectRelease(v46).n128_f64[0]);

  return v43;
}

void sub_10006B89C()
{
  __asm { BR              X11 }

uint64_t sub_10006B8E4()
{
  uint64_t v1 = sub_100018A04(&qword_1001142B0);
  uint64_t v2 = swift_allocObject(v1, 40LL, 7LL);
  *(_OWORD *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FD0;
  *(void *)(v2 + 32) = v0;
  uint64_t v5 = v2;
  specialized Array._endMutation()(v2);
  id v3 = v0;
  return v5;
}

void sub_10006B938(uint64_t a1@<X8>)
{
  id v3 = *(void **)(a1 + 8);
  id v4 = v1;
  id v5 = v3;
  char v6 = *(_BYTE *)(v2 + OBJC_IVAR____TtC8FaceTime25SidebarListViewController_wantsFocusOnNewCallButton);
  uint64_t v7 = sub_100018A04(&qword_1001142B0);
  uint64_t v8 = swift_allocObject(v7, 40LL, 7LL);
  uint64_t v9 = v8;
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FD0;
  if ((v6 & 1) != 0)
  {
    *(void *)(v8 + 32) = v5;
    specialized Array._endMutation()(v8);
  }

  else
  {
    uint64_t v10 = dispatch thunk of RecentsListViewController.collectionView.getter();
    *(void *)(v9 + 32) = v10;
    specialized Array._endMutation()(v10);
  }

  JUMPOUT(0x10006B920LL);
}

void sub_10006BAAC()
{
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC8FaceTime25SidebarListViewController_observerCancellables));
}

id sub_10006BB04(uint64_t a1, uint64_t a2)
{
  id v3 = objc_msgSend((id)objc_opt_self(NSNotificationCenter, a2), "defaultCenter");
  [v3 removeObserver:v2];

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for SidebarListViewController(v4, v5);
  return objc_msgSendSuper2(&v7, "dealloc");
}

void sub_10006BC5C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100018A04((uint64_t *)&unk_100113480);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0LL);
  uint64_t v58 = *(void *)(v5 - 8);
  uint64_t v59 = v5;
  __chkstk_darwin(v5);
  objc_super v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100018A04(&qword_100114CF0);
  uint64_t v57 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100018A04(&qword_100114CF8);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v60 = v11;
  uint64_t v61 = v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v17 = (objc_class *)type metadata accessor for SidebarListViewController(v13, v16);
  v64.receiver = v0;
  v64.super_class = v17;
  objc_msgSendSuper2(&v64, "viewDidLoad");
  id v19 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v18), "mainBundle");
  v65._object = (void *)0xE000000000000000LL;
  v20._uint64_t countAndFlagsBits = 0x454D495445434146LL;
  v20._object = (void *)0xE800000000000000LL;
  v21.value._uint64_t countAndFlagsBits = 0x6C6172656E6547LL;
  v21.value._object = (void *)0xE700000000000000LL;
  v22._uint64_t countAndFlagsBits = 0LL;
  v22._object = (void *)0xE000000000000000LL;
  v65._uint64_t countAndFlagsBits = 0LL;
  Swift::String v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, v19, v22, v65);

  Swift::String v24 = (Swift::String *)&v1[OBJC_IVAR____TtC8FaceTime40SidebarNavigationBaseChildViewController_navigationTitle];
  uint64_t v25 = *(void *)&v1[OBJC_IVAR____TtC8FaceTime40SidebarNavigationBaseChildViewController_navigationTitle + 8];
  *Swift::String v24 = v23;
  swift_bridgeObjectRelease(v25);
  uint64_t countAndFlagsBits = v24->_countAndFlagsBits;
  object = v24->_object;
  swift_bridgeObjectRetain(object);
  sub_100074BF8(countAndFlagsBits, object);
  swift_bridgeObjectRelease(object);
  uint64_t v28 = *(void *)&v1[OBJC_IVAR____TtC8FaceTime25SidebarListViewController_continuitySessionManager];
  uint64_t v29 = OBJC_IVAR____TtC8FaceTime24ContinuitySessionManager_activeContinuitySessionSubject;
  uint64_t v30 = *(void *)(v28 + OBJC_IVAR____TtC8FaceTime24ContinuitySessionManager_activeContinuitySessionSubject);
  swift_retain(v30);
  CurrentValueSubject.value.getter(v31);
  swift_release(v30);
  NSString v32 = aBlock[0];
  sub_10006C480(aBlock[0]);

  aBlock[0] = *(void **)(v28 + v29);
  uint64_t v33 = sub_100018A04(&qword_100114D00);
  uint64_t v34 = sub_100022750( &qword_1001141F8,  &qword_100114D00,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  uint64_t v35 = Publisher.dropFirst(_:)(1LL, v33, v34);
  OS_dispatch_queue.SchedulerTimeType.Stride.init(floatLiteral:)(v35, 0.25);
  uint64_t v36 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  aBlock[0] = (void *)static OS_dispatch_queue.main.getter(v37);
  uint64_t v39 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL, v38);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56LL))(v4, 1LL, 1LL, v39);
  uint64_t v40 = sub_100022750( (unint64_t *)&unk_100114D08,  &qword_100114CF0,  (uint64_t)&protocol conformance descriptor for Publishers.Drop<A>);
  unint64_t v41 = sub_10003862C();
  Publisher.debounce<A>(for:scheduler:options:)(v7, aBlock, v4, v8, v36, v40, v41);
  sub_10001C608((uint64_t)v4, (uint64_t *)&unk_100113480);

  (*(void (**)(char *, uint64_t))(v58 + 8))(v7, v59);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v10, v8);
  uint64_t v42 = swift_allocObject(&unk_1000FA4D0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v42 + 16, v1);
  uint64_t v43 = sub_100022750( (unint64_t *)&unk_100114D18,  &qword_100114CF8,  (uint64_t)&protocol conformance descriptor for Publishers.Debounce<A, B>);
  uint64_t v44 = v60;
  uint64_t v45 = Publisher<>.sink(receiveValue:)(sub_10006FE24, v42, v60, v43);
  swift_release(v42);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v15, v44);
  uint64_t v46 = &v1[OBJC_IVAR____TtC8FaceTime25SidebarListViewController_observerCancellables];
  swift_beginAccess(&v1[OBJC_IVAR____TtC8FaceTime25SidebarListViewController_observerCancellables], aBlock, 33LL, 0LL);
  uint64_t v47 = sub_100018A04(&qword_100114200);
  uint64_t v48 = sub_100022750(&qword_1001130D0, &qword_100114200, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v46, v47, v48);
  swift_endAccess(aBlock);
  swift_release(v45);
  id v50 = objc_msgSend((id)objc_opt_self(NSNotificationCenter, v49), "defaultCenter");
  id v52 = objc_msgSend((id)objc_opt_self(NSOperationQueue, v51), "mainQueue");
  uint64_t v53 = swift_allocObject(&unk_1000FA4D0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v53 + 16, v1);
  aBlock[4] = sub_10006FE2C;
  uint64_t v63 = v53;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (void *)1107296256;
  aBlock[2] = sub_10006C3A8;
  void aBlock[3] = &unk_1000FA4E8;
  id v54 = _Block_copy(aBlock);
  swift_release(v63);
  id v55 =  [v50 addObserverForName:UIFocusMovementDidFailNotification object:0 queue:v52 usingBlock:v54];
  _Block_release(v54);
  swift_unknownObjectRelease(v55);
}

void sub_10006C1C0(void **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    sub_10006C480(v2);
  }

void sub_10006C218(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v16, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (!Strong) {
    return;
  }
  uint64_t v4 = (void *)Strong;
  uint64_t v5 = Notification.userInfo.getter();
  if (!v5)
  {
    __int128 v14 = 0u;
    __int128 v15 = 0u;
LABEL_14:

    sub_10001C608((uint64_t)&v14, (uint64_t *)&unk_1001130F0);
    return;
  }

  uint64_t v6 = v5;
  v12[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(UIFocusUpdateContextKey);
  v12[1] = v7;
  AnyHashable.init<A>(_:)(v12, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v6 + 16) && (unint64_t v8 = sub_10002FC98((uint64_t)v13), (v9 & 1) != 0))
  {
    sub_10001C1A0(*(void *)(v6 + 56) + 32 * v8, (uint64_t)&v14);
  }

  else
  {
    __int128 v14 = 0u;
    __int128 v15 = 0u;
  }

  swift_bridgeObjectRelease(v6);
  sub_1000303DC((uint64_t)v13);
  if (!*((void *)&v15 + 1)) {
    goto LABEL_14;
  }
  uint64_t v10 = sub_10001C5D0(0LL, &qword_100114D28, &OBJC_CLASS___UIFocusUpdateContext_ptr);
  if ((swift_dynamicCast(v13, &v14, (char *)&type metadata for Any + 8, v10, 6LL) & 1) != 0)
  {
    id v11 = v13[0];
    if ([v13[0] focusHeading] == (id)1
      && *((_BYTE *)v4 + OBJC_IVAR____TtC8FaceTime25SidebarListViewController_state + 24) == 1)
    {
      *((_BYTE *)v4 + OBJC_IVAR____TtC8FaceTime25SidebarListViewController_wantsFocusOnNewCallButton) = 1;
      [v4 setNeedsFocusUpdate];
    }
  }

  else
  {
  }

uint64_t sub_10006C3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Notification(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v9 = *(void (**)(char *))(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_10006C480(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100018A04(&qword_100114970);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v7 = [*(id *)&v1[OBJC_IVAR____TtC8FaceTime25SidebarListViewController_captureDevice] isConnected];
  if ((_DWORD)v7)
  {
    if (a1)
    {
      uint64_t v8 = qword_1001122C8;
      id v9 = a1;
      if (v8 != -1) {
        swift_once(&qword_1001122C8, sub_10006A790);
      }
      uint64_t v10 = type metadata accessor for Logger(0LL);
      sub_10001C270(v10, (uint64_t)qword_100114B60);
      id v11 = v9;
      uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
      os_log_type_t v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        __int128 v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        v29[0] = (id)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)__int128 v14 = 138412290;
        id v30 = v11;
        id v15 = v11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v14 + 4, v14 + 12);
        id v16 = v29[0];
        *(void *)v29[0] = a1;

        _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "Presenting recents, continuity session updated: %@",  v14,  0xCu);
        uint64_t v17 = sub_100018A04((uint64_t *)&unk_100112E20);
        swift_arrayDestroy(v16, 1LL, v17);
        swift_slowDealloc(v16, -1LL, -1LL);
        swift_slowDealloc(v14, -1LL, -1LL);
      }

      else
      {
      }

      sub_10006D0EC(v11);
    }

    else
    {
      if (qword_100112370 != -1) {
        swift_once(&qword_100112370, sub_100079BAC);
      }
      __chkstk_darwin(v7);
      v29[-2] = v22;
      sub_100018A04(&qword_100114C40);
      OS_dispatch_queue.sync<A>(execute:)(sub_10006FBF0);
      uint64_t v23 = v31;
      swift_bridgeObjectRelease(v31);
      if (v23)
      {
        uint64_t v24 = type metadata accessor for TaskPriority(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v6, 1LL, 1LL, v24);
        type metadata accessor for MainActor(0LL);
        id v25 = v2;
        uint64_t v26 = static MainActor.shared.getter(v25);
        uint64_t v27 = (void *)swift_allocObject(&unk_1000FA480, 40LL, 7LL);
        v27[2] = v26;
        v27[3] = &protocol witness table for MainActor;
        _BYTE v27[4] = v25;
        uint64_t v28 = sub_10008033C((uint64_t)v6, (uint64_t)&unk_100114C50, (uint64_t)v27);
        swift_release(v28);
      }
    }
  }

  else
  {
    if (qword_1001122C8 != -1) {
      swift_once(&qword_1001122C8, sub_10006A790);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    uint64_t v19 = sub_10001C270(v18, (uint64_t)qword_100114B60);
    v29[0] = (id)Logger.logObject.getter(v19);
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled((os_log_t)v29[0], v20))
    {
      Swift::String_optional v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)Swift::String_optional v21 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v29[0],  v20,  "Attempting to start continuity session when capture device is not connected",  v21,  2u);
      swift_slowDealloc(v21, -1LL, -1LL);
    }
  }

uint64_t sub_10006C878()
{
  uint64_t v1 = type metadata accessor for MainActor(0LL);
  v0[2] = v1;
  v0[3] = static MainActor.shared.getter(v1);
  uint64_t v2 = (void *)swift_task_alloc(dword_100114C1C);
  v0[4] = v2;
  void *v2 = v0;
  v2[1] = sub_10006C8DC;
  return sub_10006C97C();
}

uint64_t sub_10006C8DC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 32LL));
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_10006C94C, v2, v3);
}

uint64_t sub_10006C94C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006C97C()
{
  v1[5] = v0;
  unint64_t v2 = (*(void *)(*(void *)(sub_100018A04(&qword_100112D10) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[6] = swift_task_alloc(v2);
  v1[7] = swift_task_alloc(v2);
  uint64_t v3 = type metadata accessor for MainActor(0LL);
  v1[8] = static MainActor.shared.getter(v3);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  void v1[9] = v4;
  v1[10] = v5;
  return swift_task_switch(sub_10006CA1C, v4, v5);
}

id sub_10006CA1C()
{
  uint64_t v1 = *(void *)(v0 + 40) + OBJC_IVAR____TtC8FaceTime25SidebarListViewController_state;
  uint64_t v2 = *(void *)(v1 + 8);
  *(void *)(v0 + 8_Block_object_dispose(va, 8) = v2;
  int v3 = *(unsigned __int8 *)(v1 + 24);
  *(_BYTE *)(v0 + 136) = v3;
  if (v3 == 2) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (qword_1001122C8 != -1) {
    swift_once(&qword_1001122C8, sub_10006A790);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = sub_10001C270(v5, (uint64_t)qword_100114B60);
  *(void *)(v0 + 96) = v6;
  id v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v9 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Presenting loading as we attempt to start a continuity session.",  v9,  2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  if (*(_BYTE *)(v1 + 24))
  {
    id v12 = sub_10006EFA8(v10, v11);
    sub_10006D33C(v12, 0LL, 0LL, 0);
  }

  id v13 =  [*(id *)(*(void *)(v0 + 40) + OBJC_IVAR____TtC8FaceTime25SidebarListViewController_captureDevice) continuityDeviceUniqueID];
  uint64_t v14 = *(void *)(v0 + 48);
  if (v13)
  {
    id v15 = v13;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v13);

    uint64_t v16 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v14, 0LL, 1LL, v16);
  }

  else
  {
    uint64_t v16 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v14, 1LL, 1LL, v16);
  }

  uint64_t v17 = *(void *)(v0 + 56);
  sub_10006FBA8(*(void *)(v0 + 48), v17);
  type metadata accessor for UUID(0LL);
  uint64_t v18 = *(void *)(v16 - 8);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v17, 1LL, v16);
  if ((_DWORD)v19 == 1)
  {
    uint64_t v20 = *(void *)(v0 + 56);
    swift_release(*(void *)(v0 + 64));
    uint64_t v21 = sub_10001C608(v20, &qword_100112D10);
    Swift::String v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "Capture device does not have a continuity device unique ID populated.",  v24,  2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    id result = (id)TUMakeNeighborhoodConduitError(6LL, 0LL);
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
    }

    else
    {
      uint64_t v26 = result;
      id v27 = sub_10006B0C4(result, v4 + 1);
      sub_10006D33C(v27, (void *)(v4 + 1), 0LL, 2u);

      uint64_t v28 = *(void *)(v0 + 48);
      swift_task_dealloc(*(void *)(v0 + 56));
      swift_task_dealloc(v28);
      return (id)(*(uint64_t (**)(void))(v0 + 8))();
    }
  }

  else
  {
    uint64_t v29 = *(void *)(v0 + 56);
    uint64_t v30 = UUID.uuidString.getter(v19);
    uint64_t v32 = v31;
    *(void *)(v0 + 104) = v31;
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v29, v16);
    uint64_t v33 = (void *)swift_task_alloc(dword_1001141DC);
    *(void *)(v0 + 112) = v33;
    *uint64_t v33 = v0;
    v33[1] = sub_10006CD64;
    return (id)sub_10004B4E4(v30, v32);
  }

  return result;
}

uint64_t sub_10006CD64(uint64_t a1)
{
  int v3 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 104LL);
  uint64_t v4 = *(void *)(*(void *)v2 + 112LL);
  v3[15] = a1;
  v3[16] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v5);
  if (v1) {
    uint64_t v6 = sub_10006CEA8;
  }
  else {
    uint64_t v6 = sub_10006CDDC;
  }
  return swift_task_switch(v6, v3[9], v3[10]);
}

uint64_t sub_10006CDDC()
{
  uint64_t v1 = swift_release(*(void *)(v0 + 64));
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "Successfully started continuity session, presenting recents.",  v4,  2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = *(void **)(v0 + 120);

  sub_10006D0EC(v5);
  uint64_t v6 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 56));
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006CEA8()
{
  uint64_t v1 = v0 + 16;
  uint64_t v2 = v0 + 24;
  uint64_t v3 = *(void *)(v0 + 128);
  swift_release(*(void *)(v0 + 64));
  swift_errorRetain(v3);
  uint64_t v4 = swift_errorRetain(v3);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v0 + 128);
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)os_log_type_t v8 = 138412290;
    swift_errorRetain(v7);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 32) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v8 + 4, v8 + 12);
    uint64_t *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Failed to start continuity session due to %@, presenting error state.",  v8,  0xCu);
    uint64_t v11 = sub_100018A04((uint64_t *)&unk_100112E20);
    swift_arrayDestroy(v9, 1LL, v11);
    id v12 = v9;
    uint64_t v1 = v0 + 16;
    uint64_t v2 = v0 + 24;
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    uint64_t v13 = *(void *)(v0 + 128);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
  }

  uint64_t v14 = *(void *)(v0 + 128);
  if (*(_BYTE *)(v0 + 136) == 2) {
    uint64_t v15 = *(void *)(v0 + 88);
  }
  else {
    uint64_t v15 = 0LL;
  }
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
  swift_errorRetain(v14);
  uint64_t v16 = sub_100018A04(&qword_1001141F0);
  type metadata accessor for TUNeighborhoodActivityConduitError(0LL);
  uint64_t result = swift_dynamicCast(v2, v1, v16, v17, 6LL);
  BOOL v19 = __OFADD__(v15, 1LL);
  uint64_t v20 = (void *)(v15 + 1);
  if (v19)
  {
    __break(1u);
  }

  else
  {
    uint64_t v21 = *(void *)(v0 + 128);
    if ((_DWORD)result) {
      Swift::String v22 = *(void **)(v0 + 24);
    }
    else {
      Swift::String v22 = 0LL;
    }
    id v23 = sub_10006B0C4(v22, (uint64_t)v20);
    sub_10006D33C(v23, v20, 0LL, 2u);

    swift_errorRelease(v21);
    uint64_t v24 = *(void *)(v0 + 48);
    swift_task_dealloc(*(void *)(v0 + 56));
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  return result;
}

void sub_10006D0EC(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [a1 isDedicatedSession];
  if (!(_DWORD)v4) {
    goto LABEL_6;
  }
  id v6 = [a1 favorites];
  uint64_t v7 = sub_10001C5D0(0LL, (unint64_t *)&unk_100114C30, &OBJC_CLASS___TUContinuityFavorite_ptr);
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if ((unint64_t)v8 >> 62)
  {
    uint64_t v19 = v8 < 0 ? v8 : v8 & 0xFFFFFFFFFFFFFF8LL;
    swift_bridgeObjectRetain(v8);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(v8);
  }

  else
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  *(void *)&double v10 = swift_bridgeObjectRelease(v8).n128_u64[0];
  if (v9
    || (id v11 = objc_msgSend(a1, "recentCalls", v10),
        uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, &type metadata for Data),
        v11,
        uint64_t v13 = *(void *)(v12 + 16),
        swift_bridgeObjectRelease(v12),
        v13))
  {
LABEL_6:
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC8FaceTime25SidebarListViewController_state + 24) == 1) {
      return;
    }
    uint64_t v14 = sub_10004B178((uint64_t)v4, v5);
    void v23[3] = _s19RecentCallsProviderCMa(0LL, v15);
    v23[4] = sub_10001949C( &qword_100114C20,  (uint64_t (*)(uint64_t))_s19RecentCallsProviderCMa,  (uint64_t)&unk_1000C72B8);
    v23[5] = sub_10001949C( &qword_100114C28,  (uint64_t (*)(uint64_t))_s19RecentCallsProviderCMa,  (uint64_t)&unk_1000C7270);
    v23[0] = v14;
    memset(v21, 0, sizeof(v21));
    uint64_t v22 = 0LL;
    id v16 = objc_allocWithZone((Class)type metadata accessor for RecentsListViewController(0LL));
    id v20 = (id)RecentsListViewController.init(recentCallProvider:detailControllerFactory:contactStore:)(v23, v21, 0LL);
    id v17 = sub_10006A950();
    id v18 = [objc_allocWithZone(UIFocusGuide) init];
    sub_10006D33C(v20, v17, v18, 1u);

LABEL_9:
    return;
  }

  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC8FaceTime25SidebarListViewController_state + 24) != 3)
  {
    id v20 = sub_10006F520();
    sub_10006D33C(v20, 0LL, 0LL, 3u);
    goto LABEL_9;
  }

void sub_10006D33C(void *a1, void *a2, void *a3, unsigned __int8 a4)
{
  uint64_t v9 = v4 + OBJC_IVAR____TtC8FaceTime25SidebarListViewController_state;
  id v11 = *(void **)(v4 + OBJC_IVAR____TtC8FaceTime25SidebarListViewController_state);
  double v10 = *(void **)(v4 + OBJC_IVAR____TtC8FaceTime25SidebarListViewController_state + 8);
  uint64_t v12 = *(void **)(v4 + OBJC_IVAR____TtC8FaceTime25SidebarListViewController_state + 16);
  uint64_t v13 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC8FaceTime25SidebarListViewController_state + 24);
  *(void *)uint64_t v9 = a1;
  *(void *)(v9 + _Block_object_dispose(va, 8) = a2;
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(_BYTE *)(v9 + 24) = a4;
  sub_10006ECE8(v11, v10, v12, v13);
  sub_10006ECE8(a1, a2, a3, a4);
  sub_10006ED54(v11, v10, v12, v13);
  if (qword_1001122C8 != -1) {
    swift_once(&qword_1001122C8, sub_10006A790);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  sub_10001C270(v14, (uint64_t)qword_100114B60);
  sub_10006ECE8(v11, v10, v12, v13);
  sub_10006ECE8(a1, a2, a3, a4);
  sub_10006ECE8(v11, v10, v12, v13);
  id v15 = sub_10006ECE8(a1, a2, a3, a4);
  id v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    id v18 = (_DWORD *)swift_slowAlloc(22LL, -1LL);
    swift_slowAlloc(64LL, -1LL);
    *id v18 = 136315394;
    __asm { BR              X9 }
  }

  sub_10006ED54(v11, v10, v12, v13);
  sub_10006ED54(v11, v10, v12, v13);
  sub_10006ED54(a1, a2, a3, a4);
  sub_10006ED54(a1, a2, a3, a4);

  __asm { BR              X9 }

uint64_t sub_10006E724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[2] = a4;
  uint64_t v5 = type metadata accessor for MainActor(0LL);
  v4[3] = static MainActor.shared.getter(v5);
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[4] = v6;
  void v4[5] = v7;
  return swift_task_switch(sub_10006E790, v6, v7);
}

uint64_t sub_10006E790()
{
  if (qword_1001122C8 != -1) {
    swift_once(&qword_1001122C8, sub_10006A790);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10001C270(v1, (uint64_t)qword_100114B60);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "User attempting to load recents again.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = (void *)swift_task_alloc(dword_100114C1C);
  *(void *)(v0 + 4_Block_object_dispose(va, 8) = v6;
  void *v6 = v0;
  v6[1] = sub_10006E88C;
  return sub_10006C97C();
}

uint64_t sub_10006E88C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 48));
  return swift_task_switch(sub_10006C94C, *(void *)(v1 + 32), *(void *)(v1 + 40));
}

void sub_10006E9C8(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v27.receiver = v3;
  v27.super_class = (Class)type metadata accessor for SidebarListViewController((uint64_t)a1, a2);
  objc_msgSendSuper2(&v27, "didUpdateFocusInContext:withAnimationCoordinator:", a1, a2);
  id v6 = [a1 nextFocusedView];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = &v3[OBJC_IVAR____TtC8FaceTime25SidebarListViewController_state];
    if (v3[OBJC_IVAR____TtC8FaceTime25SidebarListViewController_state + 24] != 1)
    {

      return;
    }

    double v10 = (void *)*((void *)v8 + 1);
    uint64_t v9 = (void *)*((void *)v8 + 2);
    id v11 = *(id *)v8;
    id v12 = v10;
    id v13 = v9;
    id v14 = [v11 view];
    if (v14)
    {
      id v15 = v14;
      unsigned int v16 = [v7 isDescendantOfView:v14];

      if (v16)
      {
        uint64_t v17 = sub_100018A04(&qword_1001142B0);
        uint64_t v18 = swift_allocObject(v17, 40LL, 7LL);
        *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FD0;
        *(void *)(v18 + 32) = v12;
        uint64_t v25 = v18;
        specialized Array._endMutation()(v18);
        id v19 = v12;
        sub_100018A04(&qword_100112990);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v13, "setPreferredFocusEnvironments:", isa, swift_bridgeObjectRelease(v25).n128_f64[0]);
      }

      else
      {
        sub_10001C5D0(0LL, (unint64_t *)&qword_1001134D8, &OBJC_CLASS___NSObject_ptr);
        if ((static NSObject.== infix(_:_:)(v7, v12) & 1) != 0)
        {
          uint64_t v21 = sub_100018A04(&qword_1001142B0);
          uint64_t v22 = swift_allocObject(v21, 40LL, 7LL);
          *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FD0;
          *(void *)(v22 + 32) = v11;
          uint64_t v26 = v22;
          specialized Array._endMutation()(v22);
          id v23 = v11;
          sub_100018A04(&qword_100112990);
          Class v24 = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v13, "setPreferredFocusEnvironments:", v24, swift_bridgeObjectRelease(v26).n128_f64[0]);

          v3[OBJC_IVAR____TtC8FaceTime25SidebarListViewController_wantsFocusOnNewCallButton] = 0;
          return;
        }
      }
    }

    else
    {
      __break(1u);
    }
  }

uint64_t type metadata accessor for SidebarListViewController(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime25SidebarListViewController, a2);
}

id sub_10006ECE8(id result, void *a2, void *a3, unsigned __int8 a4)
{
  if (a4 == 1)
  {
    id v6 = result;
    id v7 = a2;
    return a3;
  }

  return result;
}

void destroy for SidebarListViewController.State(uint64_t a1)
{
}

void sub_10006ED54(void *a1, void *a2, void *a3, unsigned __int8 a4)
{
  if (a4 - 2 < 2 || a4 == 0)
  {
  }

  else if (a4 == 1)
  {
  }

uint64_t initializeWithCopy for SidebarListViewController.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  os_log_type_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a2 + 16);
  unsigned __int8 v6 = *(_BYTE *)(a2 + 24);
  sub_10006ECE8(*(id *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for SidebarListViewController.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  os_log_type_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a2 + 16);
  unsigned __int8 v6 = *(_BYTE *)(a2 + 24);
  sub_10006ECE8(*(id *)a2, v4, v5, v6);
  id v7 = *(void **)a1;
  uint64_t v8 = *(void **)(a1 + 8);
  uint64_t v9 = *(void **)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  unsigned __int8 v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_10006ED54(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for SidebarListViewController.State(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SidebarListViewController.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void **)a1;
  id v7 = *(void **)(a1 + 8);
  unsigned __int8 v6 = *(void **)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_10006ED54(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SidebarListViewController.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SidebarListViewController.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 24) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10006EF64(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_10006EF7C(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 4;
  if (a2 >= 4)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    LOBYTE(a2) = 4;
    *(void *)__n128 result = v2;
  }

  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SidebarListViewController.State()
{
  return &type metadata for SidebarListViewController.State;
}

id sub_10006EFA8(uint64_t a1, uint64_t a2)
{
  id v2 = objc_msgSend((id)objc_opt_self(UIButton, a2), "buttonWithType:", 0);
  id v3 = [objc_allocWithZone(UIActivityIndicatorView) initWithActivityIndicatorStyle:100];
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v3 startAnimating];
  [v2 addSubview:v3];
  uint64_t v5 = (void *)objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, v4);
  uint64_t v6 = sub_100018A04(&qword_1001142B0);
  uint64_t v7 = swift_allocObject(v6, 48LL, 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FC0;
  id v8 = [v3 centerXAnchor];
  id v9 = [v2 centerXAnchor];
  id v10 = [v8 constraintEqualToAnchor:v9];

  *(void *)(v7 + 32) = v10;
  id v11 = [v3 centerYAnchor];
  id v12 = [v2 centerYAnchor];
  id v13 = [v11 constraintEqualToAnchor:v12];

  *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v13;
  specialized Array._endMutation()(v14);
  sub_10001C5D0(0LL, (unint64_t *)&qword_100113120, &OBJC_CLASS___NSLayoutConstraint_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v5, "activateConstraints:", isa, swift_bridgeObjectRelease(v7).n128_f64[0]);

  return v2;
}

id sub_10006F1B8()
{
  id v0 = [objc_allocWithZone(UILabel) init];
  id v2 =  objc_msgSend( (id)objc_opt_self(UIFont, v1),  "preferredFontForTextStyle:",  UIFontTextStyleCaption1);
  [v0 setFont:v2];

  id v4 = objc_msgSend((id)objc_opt_self(UIColor, v3), "secondaryLabelColor");
  [v0 setTextColor:v4];

  NSString v5 = String._bridgeToObjectiveC()();
  [v0 setText:v5];

  [v0 setLineBreakMode:0];
  [v0 setNumberOfLines:0];
  [v0 setTextAlignment:1];
  return v0;
}

uint64_t sub_10006F2E8(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    goto LABEL_5;
  }
  type metadata accessor for TUNeighborhoodActivityConduitError(0LL);
  uint64_t v3 = v2;
  uint64_t v4 = sub_10001949C( &qword_100112848,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000C4444);
  _BridgedStoredNSError.code.getter(&v22, v3, v4);
  if (v22 != 24)
  {
    if (v22 == 23)
    {
      NSString v5 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, a2), "mainBundle");
      unint64_t v6 = 0xD000000000000026LL;
      unint64_t v20 = 0xEB00000000656C62LL;
      uint64_t v7 = "TVOS_Network_Unreachable_Error_Message";
LABEL_6:
      unint64_t v8 = (unint64_t)(v7 - 32) | 0x8000000000000000LL;
      v9._uint64_t countAndFlagsBits = 0LL;
      v9._object = (void *)0xE000000000000000LL;
      uint64_t v10 = 0x617A696C61636F4CLL;
      uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)( *(Swift::String *)&v6,  (Swift::String_optional)0,  v5,  v9,  *(Swift::String *)(&v20 - 1))._countAndFlagsBits;
      goto LABEL_7;
    }

id sub_10006F520()
{
  id v0 = [objc_allocWithZone(UIStackView) init];
  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v0 setAxis:1];
  [v0 setAlignment:0];
  [v0 setSpacing:40.0];
  id v1 = [objc_allocWithZone(UIImageView) init];
  NSString v2 = String._bridgeToObjectiveC()();
  id v4 = objc_msgSend((id)objc_opt_self(UIImage, v3), "_systemImageNamed:", v2);

  [v1 setImage:v4];
  id v6 = objc_msgSend((id)objc_opt_self(UIFont, v5), "systemFontOfSize:", 60.0);
  unint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___UIImageSymbolConfiguration, v7);
  id v9 = [v8 configurationWithFont:v6 scale:3];

  uint64_t v10 = sub_100018A04(&qword_1001142B0);
  uint64_t v11 = swift_allocObject(v10, 40LL, 7LL);
  *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FD0;
  id v13 = objc_msgSend((id)objc_opt_self(UIColor, v12), "secondaryLabelColor");
  *(void *)(v11 + 32) = v13;
  specialized Array._endMutation()(v13);
  sub_10001C5D0(0LL, &qword_1001142E8, &OBJC_CLASS___UIColor_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v15 = objc_msgSend(v8, "configurationWithPaletteColors:", isa, swift_bridgeObjectRelease(v11).n128_f64[0]);

  id v16 = [v9 configurationByApplyingConfiguration:v15];
  [v1 setSymbolConfiguration:v16];

  [v1 setContentMode:1];
  [v0 addArrangedSubview:v1];
  Swift::String v18 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v17), "mainBundle");
  v42._object = (void *)0xEB00000000656C62LL;
  v19._object = (void *)0x80000001000DB320LL;
  v19._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  v20._uint64_t countAndFlagsBits = 0LL;
  v20._object = (void *)0xE000000000000000LL;
  v42._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, (Swift::String_optional)0, v18, v20, v42)._object;

  id v22 = sub_10006F1B8();
  objc_msgSend(v0, "addArrangedSubview:", v22, swift_bridgeObjectRelease(object).n128_f64[0]);

  id v23 = [objc_allocWithZone(UIView) init];
  [v23 addSubview:v0];
  uint64_t v25 = (void *)objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, v24);
  uint64_t v26 = swift_allocObject(v10, 64LL, 7LL);
  *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C4CE0;
  id v27 = [v0 topAnchor];
  id v28 = [v23 topAnchor];
  id v29 = [v27 constraintEqualToAnchor:v28];

  *(void *)(v26 + 32) = v29;
  id v30 = [v0 bottomAnchor];
  id v31 = [v23 bottomAnchor];
  id v32 = [v30 constraintEqualToAnchor:v31];

  *(void *)(v26 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v32;
  id v33 = [v0 leadingAnchor];
  id v34 = [v23 leadingAnchor];
  id v35 = [v33 constraintEqualToAnchor:v34 constant:40.0];

  *(void *)(v26 + 4_Block_object_dispose(va, 8) = v35;
  id v36 = [v0 trailingAnchor];
  id v37 = [v23 trailingAnchor];
  id v38 = [v36 constraintEqualToAnchor:v37 constant:-40.0];

  *(void *)(v26 + 56) = v38;
  specialized Array._endMutation()(v39);
  sub_10001C5D0(0LL, (unint64_t *)&qword_100113120, &OBJC_CLASS___NSLayoutConstraint_ptr);
  Class v40 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v25, "activateConstraints:", v40, swift_bridgeObjectRelease(v26).n128_f64[0]);

  return v23;
}

id sub_10006FAC4(void *a1)
{
  uint64_t v3 = &v1[OBJC_IVAR____TtC8FaceTime25SidebarListViewController_state];
  *((void *)v3 + 1) = 0LL;
  *((void *)v3 + 2) = 0LL;
  *(void *)uint64_t v3 = 0LL;
  _BYTE v3[24] = 4;
  v1[OBJC_IVAR____TtC8FaceTime25SidebarListViewController_wantsFocusOnNewCallButton] = 0;
  uint64_t v4 = OBJC_IVAR____TtC8FaceTime25SidebarListViewController_continuitySessionManager;
  uint64_t v5 = qword_100112290;
  id v6 = v1;
  if (v5 != -1) {
    swift_once(&qword_100112290, sub_10004B0AC);
  }
  uint64_t v7 = (void *)qword_10011A2B0;
  *(void *)&v6[v4] = qword_10011A2B0;
  *(void *)&v6[OBJC_IVAR____TtC8FaceTime25SidebarListViewController_observerCancellables] = _swiftEmptyArrayStorage;
  *(void *)&v6[OBJC_IVAR____TtC8FaceTime25SidebarListViewController_captureDevice] = a1;
  id v8 = v7;
  id v9 = a1;

  v13.receiver = v6;
  v13.super_class = (Class)type metadata accessor for SidebarListViewController(v10, v11);
  return objc_msgSendSuper2(&v13, "initWithNibName:bundle:", 0, 0);
}

uint64_t sub_10006FBA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04(&qword_100112D10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006FBF0@<X0>(void *a1@<X8>)
{
  return sub_100079BD8(*(void *)(v1 + 16), a1);
}

uint64_t sub_10006FC0C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_100114C4C);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001C958;
  return sub_10006C878();
}

uint64_t sub_10006FD94(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_100114CDC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10001C158;
  return sub_10006E724(a1, v4, v5, v6);
}

uint64_t sub_10006FE00()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10006FE24(void **a1)
{
}

void sub_10006FE2C(uint64_t a1)
{
}

uint64_t sub_10006FE34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10006FE44(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10006FE4C( void (*a1)(id *), uint64_t a2, void (*a3)(void **__return_ptr, id *), uint64_t a4, uint64_t a5)
{
  void (*v39)(void **__return_ptr, id *);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v39 = a3;
  Class v40 = a4;
  id v37 = a1;
  uint64_t v38 = a2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  unint64_t v41 = *(void *)(v6 - 8);
  Swift::String v42 = v6;
  __chkstk_darwin(v6);
  id v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = (void *)sub_10002E1F0((uint64_t)_swiftEmptyArrayStorage);
  if ((unint64_t)a5 >> 62)
  {
LABEL_25:
    if (a5 < 0) {
      uint64_t v32 = a5;
    }
    else {
      uint64_t v32 = a5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a5);
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v32);
    if (v10) {
      goto LABEL_3;
    }
LABEL_29:
    swift_bridgeObjectRelease(a5);
    return (uint64_t)v9;
  }

  uint64_t v10 = *(void *)((a5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a5);
  if (!v10) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t v35 = a5;
  unint64_t v36 = a5 & 0xC000000000000001LL;
  uint64_t v11 = 4LL;
  while (1)
  {
    uint64_t v15 = v11 - 4;
    if (v36)
    {
      id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, a5);
      uint64_t v17 = v11 - 3;
      if (__OFADD__(v15, 1LL)) {
        goto LABEL_22;
      }
    }

    else
    {
      id v16 = *(id *)(a5 + 8 * v11);
      uint64_t v17 = v11 - 3;
      if (__OFADD__(v15, 1LL))
      {
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }

    uint64_t v43 = v17;
    Swift::String v18 = v16;
    uint64_t v45 = v16;
    v37(&v45);
    v39(&v44, &v45);
    a5 = (uint64_t)v44;
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
    uint64_t v44 = v9;
    uint64_t v20 = (uint64_t)v8;
    unint64_t v22 = sub_10002FC2C((uint64_t)v8);
    uint64_t v23 = v9[2];
    BOOL v24 = (v21 & 1) == 0;
    uint64_t v25 = v23 + v24;
    if (__OFADD__(v23, v24)) {
      goto LABEL_23;
    }
    char v26 = v21;
    if (v9[3] < v25) {
      break;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      id v9 = v44;
      if ((v21 & 1) != 0) {
        goto LABEL_4;
      }
    }

    else
    {
      sub_100069BD0();
      id v9 = v44;
      if ((v26 & 1) != 0)
      {
LABEL_4:
        uint64_t v12 = v9[7];
        uint64_t v13 = 8 * v22;

        *(void *)(v12 + v13) = a5;
        id v8 = (char *)v20;
        goto LABEL_5;
      }
    }

uint64_t sub_1000700F8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_100114D30);
  sub_10001C270(v0, (uint64_t)qword_100114D30);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0x616E614D676E6952LL,  0xEB00000000726567LL);
}

id sub_100070174()
{
  if (qword_1001123C8 != -1) {
    swift_once(&qword_1001123C8, sub_10008CEB8);
  }
  sub_10001C580((uint64_t)&qword_10011A330, (uint64_t)v23);
  id v1 = objc_msgSend((id)objc_opt_self(TUCallCenter, v0), "sharedInstance");
  id v2 = [v1 neighborhoodActivityConduit];

  id v3 = [objc_allocWithZone(TUFeatureFlags) init];
  id result = objc_msgSend((id)objc_opt_self(PBSSystemService, v4), "sharedInstance");
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = sub_100021734((uint64_t)v23, v23[3]);
    __chkstk_darwin(v7);
    id v9 = (void *)((char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(uint64_t *))(v10 + 16))(v9);
    uint64_t v11 = *v9;
    uint64_t v13 = type metadata accessor for PineBoardBulletinManager(0LL, v12);
    void v22[3] = v13;
    v22[4] = &off_1000FA160;
    v22[0] = v11;
    uint64_t v15 = type metadata accessor for RingManager(v13, v14);
    id v16 = (void *)swift_allocObject(v15, 192LL, 15LL);
    uint64_t v17 = sub_100021734((uint64_t)v22, v13);
    __chkstk_darwin(v17);
    Swift::String v19 = (void *)((char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(uint64_t *))(v20 + 16))(v19);
    id v21 = sub_100074000(*v19, v2, v3, v6, v16);

    sub_10001BFEC(v22);
    id result = (id)sub_10001BFEC(v23);
    qword_10011A2E0 = (uint64_t)v21;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100070388(uint64_t a1, uint64_t a2)
{
  uint64_t v137 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v136 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  uint64_t v135 = (char *)&v130 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v134 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v133 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  uint64_t v132 = (char *)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v130 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v139 = (char *)&v130 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v130 - v14;
  uint64_t v138 = v16;
  __chkstk_darwin(v13);
  v150 = (char *)&v130 - v17;
  uint64_t v18 = sub_100018A04(&qword_100114970);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v130 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100018A04(&qword_100112D10);
  uint64_t v22 = __chkstk_darwin(v21);
  BOOL v24 = (char *)&v130 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  v155 = (char *)&v130 - v26;
  __chkstk_darwin(v25);
  char v28 = (char *)&v130 - v27;
  if (a1) {
    uint64_t v29 = (void *)sub_100071120();
  }
  else {
    uint64_t v29 = (void *)sub_10002E05C((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v147 = v29;
  unint64_t v131 = v10;
  uint64_t v145 = v15;
  if (a2) {
    unint64_t v30 = sub_100071120();
  }
  else {
    unint64_t v30 = sub_10002E05C((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v31 = v30;
  uint64_t v32 = v155;
  uint64_t v33 = swift_bridgeObjectRetain(v147);
  uint64_t v34 = sub_1000A7C60(v33);
  uint64_t v35 = swift_bridgeObjectRetain(v31);
  unint64_t v36 = sub_100073294(v35, v34);
  uint64_t v130 = v31;
  __n128 v37 = swift_bridgeObjectRelease(v31);
  uint64_t v38 = 0LL;
  uint64_t v39 = v36[7];
  v140.n128_u64[0] = (unint64_t)(v36 + 7);
  int64_t v146 = (int64_t)v36;
  uint64_t v40 = 1LL << *((_BYTE *)v36 + 32);
  uint64_t v41 = -1LL;
  if (v40 < 64) {
    uint64_t v41 = ~(-1LL << v40);
  }
  unint64_t v42 = v41 & v39;
  uint64_t v141 = (void *)((unint64_t)(v40 + 63) >> 6);
  uint64_t v143 = (void (*)(char *, uint64_t, __n128))(v138 + 7);
  id v142 = (char *)&type metadata for () + 8;
  uint64_t v149 = v7;
  uint64_t v148 = v24;
  for (i = v28; ; char v28 = i)
  {
    if (v42)
    {
      unint64_t v45 = __clz(__rbit64(v42));
      uint64_t v46 = (v42 - 1) & v42;
      unint64_t v47 = v45 | (v38 << 6);
      goto LABEL_28;
    }

    uint64_t v48 = v38 + 1;
    if (__OFADD__(v38, 1LL))
    {
      __break(1u);
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }

    uint64_t v49 = (uint64_t)v145;
    unint64_t v50 = *(void *)(v140.n128_u64[0] + 8 * v48);
    ++v38;
    if (!v50)
    {
      uint64_t v38 = v48 + 1;
      unint64_t v50 = *(void *)(v140.n128_u64[0] + 8 * v38);
      if (!v50)
      {
        uint64_t v38 = v48 + 2;
        unint64_t v50 = *(void *)(v140.n128_u64[0] + 8 * v38);
        if (!v50) {
          break;
        }
      }
    }

LABEL_60:
        uint64_t v154 = (v89 - 1) & v89;
        unint64_t v87 = __clz(__rbit64(v89)) + (v86 << 6);
      }

      uint64_t v91 = *(void *)(v7 + 72);
      uint64_t v92 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
      v92(v32, v152[6] + v91 * v87, v6);
      ((void (*)(char *, void, uint64_t, uint64_t))v52)(v32, 0LL, 1LL, v6);
      uint64_t v93 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
      if (v93(v32, 1LL, v6) == 1) {
        goto LABEL_74;
      }
      int64_t v153 = v86;
      uint64_t v94 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
      v94(v49, v32, v6);
      uint64_t v95 = *v147;
      if (!*(void *)(*v147 + 16LL)) {
        break;
      }
      swift_bridgeObjectRetain(*v147);
      unint64_t v96 = sub_10002FC2C(v49);
      if ((v97 & 1) != 0)
      {
        v92(v24, *(void *)(v95 + 56) + v96 * v91, v6);
        uint64_t v98 = 0LL;
      }

      else
      {
        uint64_t v98 = 1LL;
      }

      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v52)(v24, v98, 1LL, v6);
      __n128 v99 = swift_bridgeObjectRelease(v95);
      v94((uint64_t)v139, v24, v6);
      if (qword_100112308 != -1) {
        swift_once(&qword_100112308, sub_1000700F8);
      }
      uint64_t v100 = type metadata accessor for Logger(0LL);
      sub_10001C270(v100, (uint64_t)qword_100114D30);
      unint64_t v101 = v131;
      uint64_t v102 = ((uint64_t (*)(char *, char *, uint64_t))v92)(v131, v145, v6);
      os_log_type_t v103 = (os_log_s *)Logger.logObject.getter(v102);
      os_log_type_t v104 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v103, v104))
      {
        uint64_t v105 = swift_slowAlloc(12LL, -1LL);
        id v142 = (char *)swift_slowAlloc(32LL, -1LL);
        aBlock[0] = (uint64_t)v142;
        *(_DWORD *)uint64_t v105 = v140.n128_u32[0];
        uint64_t v106 = sub_100039E60( &qword_1001134A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v107 = dispatch thunk of CustomStringConvertible.description.getter(v6, v106);
        unint64_t v109 = v108;
        *(void *)(v105 + 4) = sub_1000850E4(v107, v108, aBlock);
        __n128 v110 = swift_bridgeObjectRelease(v109);
        uint64_t v143 = *(void (**)(char *, uint64_t, __n128))(v7 + 8);
        v143(v101, v6, v110);
        _os_log_impl( (void *)&_mh_execute_header,  v103,  v104,  "Dismissing bulletin for %s because it's no longer ringing.",  (uint8_t *)v105,  0xCu);
        unint64_t v111 = v142;
        swift_arrayDestroy(v142, 1LL, v130);
        swift_slowDealloc(v111, -1LL, -1LL);
        swift_slowDealloc(v105, -1LL, -1LL);
      }

      else
      {
        uint64_t v143 = *(void (**)(char *, uint64_t, __n128))(v7 + 8);
        ((void (*)(char *, uint64_t))v143)(v101, v6);
      }

      uint64_t v112 = v6;
      __n128 v113 = (void **)sub_10001C3FC(v141, v151[17]);
      uint64_t v114 = *v113;
      id v142 = *(char **)((char *)*v113 + OBJC_IVAR____TtC8FaceTime24PineBoardBulletinManager_queue);
      uint64_t v115 = v150;
      uint64_t v116 = v139;
      v92(v150, (unint64_t)v139, v112);
      uint64_t v117 = *(unsigned __int8 *)(v7 + 80);
      uint64_t v118 = (v117 + 24) & ~v117;
      uint64_t v119 = swift_allocObject(&unk_1000FA530, v118 + v138, v117 | 7);
      *(void *)(v119 + swift_unknownObjectWeakDestroy(v0 + 16) = v114;
      v94(v119 + v118, v115, v112);
      aBlock[4] = (uint64_t)sub_10006A2DC;
      uint64_t v159 = v119;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_100027654;
      void aBlock[3] = (uint64_t)&unk_1000FA548;
      id v120 = _Block_copy(aBlock);
      id v121 = v114;
      __n128 v122 = v132;
      static DispatchQoS.unspecified.getter(v121);
      v157 = _swiftEmptyArrayStorage;
      uint64_t v123 = sub_100039E60( (unint64_t *)&qword_100112930,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v124 = sub_100018A04((uint64_t *)&unk_100112FD0);
      unint64_t v125 = sub_10001C2E8();
      Swift::String v126 = v135;
      uint64_t v127 = v137;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v157, v124, v125, v137, v123);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v122, v126, v120);
      _Block_release(v120);
      uint64_t v128 = v127;
      uint64_t v7 = v149;
      (*(void (**)(char *, uint64_t))(v136 + 8))(v126, v128);
      (*(void (**)(char *, uint64_t))(v133 + 8))(v122, v134);
      swift_release(v159);
      uint64_t v129 = (void (*)(char *, uint64_t))v143;
      ((void (*)(char *, uint64_t))v143)(v116, v112);
      uint64_t v49 = (uint64_t)v145;
      v129(v145, v112);
      uint64_t v6 = v112;
      BOOL v24 = v148;
LABEL_44:
      unint64_t v84 = v154;
      uint64_t v32 = v155;
      int64_t v86 = v153;
    }

    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v52)(v24, 1LL, 1LL, v6);
LABEL_43:
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v49, v6);
    sub_10001C608((uint64_t)v24, &qword_100112D10);
    goto LABEL_44;
  }

  unint64_t v50 = *(void *)(v140.n128_u64[0] + 8 * v51);
  if (v50)
  {
    uint64_t v38 = v51;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v38 = v51 + 1;
    if (__OFADD__(v51, 1LL)) {
      break;
    }
    unint64_t v50 = *(void *)(v140.n128_u64[0] + 8 * v38);
    ++v51;
    if (v50) {
      goto LABEL_27;
    }
  }

uint64_t sub_100071120()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v46 = *(void *)(v1 - 8);
  uint64_t v47 = v1;
  __chkstk_darwin(v1);
  id v3 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v4 = [v0 activeConversations];
  uint64_t v5 = sub_10001C5D0(0LL, (unint64_t *)&unk_100115FE0, &OBJC_CLASS___TUContinuityConversation_ptr);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  uint64_t v7 = sub_10006FE4C(sub_100072CE8, 0LL, (void (*)(void **__return_ptr, id *))sub_100073CA4, 0LL, v6);
  id v8 = objc_msgSend(v0, "calls", swift_bridgeObjectRelease(v6).n128_f64[0]);
  uint64_t v9 = sub_10001C5D0(0LL, (unint64_t *)&unk_100114DA0, &OBJC_CLASS___TUContinuityCall_ptr);
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

  uint64_t v49 = _swiftEmptyArrayStorage;
  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0) {
      uint64_t v18 = v10;
    }
    else {
      uint64_t v18 = v10 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v10);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v10);
    if (v11) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v11)
    {
LABEL_3:
      if (v11 < 1) {
        goto LABEL_38;
      }
      for (uint64_t i = 0LL; i != v11; ++i)
      {
        if ((v10 & 0xC000000000000001LL) != 0) {
          id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v10);
        }
        else {
          id v15 = *(id *)(v10 + 8 * i + 32);
        }
        uint64_t v16 = v15;
        if (objc_msgSend(v15, "status", v46) == 4)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          uint64_t v13 = v49[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
          uint64_t v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v16);
          specialized ContiguousArray._endMutation()(v14);
        }

        else
        {
        }
      }

      swift_bridgeObjectRelease(v10);
      uint64_t v17 = v49;
      goto LABEL_18;
    }
  }

  swift_bridgeObjectRelease(v10);
  uint64_t v17 = _swiftEmptyArrayStorage;
LABEL_18:
  swift_bridgeObjectRetain(v7);
  uint64_t v19 = sub_100073CB0((uint64_t)v17, v7);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v7, 2LL);
  uint64_t v20 = (void *)sub_10002E05C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v21 = v19[2];
  if (!v21)
  {
    swift_bridgeObjectRelease(v19);
    return (uint64_t)v20;
  }

  swift_bridgeObjectRetain(v19);
  uint64_t v22 = 0LL;
  while (1)
  {
    __int128 v48 = *(_OWORD *)&v19[2 * v22 + 4];
    id v26 = (id)v48;
    id v27 = *((id *)&v48 + 1);
    id v28 = v26;
    id v29 = v27;
    id v30 = [v29 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v30);

    id v31 = v28;
    id v32 = v29;
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
    uint64_t v49 = v20;
    unint64_t v35 = sub_10002FC2C((uint64_t)v3);
    uint64_t v36 = v20[2];
    BOOL v37 = (v34 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      break;
    }
    char v39 = v34;
    if (v20[3] >= v38)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v20 = v49;
        if ((v34 & 1) != 0) {
          goto LABEL_20;
        }
      }

      else
      {
        sub_100069988();
        uint64_t v20 = v49;
        if ((v39 & 1) != 0) {
          goto LABEL_20;
        }
      }
    }

    else
    {
      sub_100066DB8(v38, isUniquelyReferenced_nonNull_native);
      unint64_t v40 = sub_10002FC2C((uint64_t)v3);
      if ((v39 & 1) != (v41 & 1)) {
        goto LABEL_39;
      }
      unint64_t v35 = v40;
      uint64_t v20 = v49;
      if ((v39 & 1) != 0)
      {
LABEL_20:
        uint64_t v23 = v20[7] + 16 * v35;
        BOOL v24 = *(void **)v23;

        *(_OWORD *)uint64_t v23 = v48;
        goto LABEL_21;
      }
    }

    v20[(v35 >> 6) + 8] |= 1LL << v35;
    (*(void (**)(unint64_t, char *, uint64_t))(v46 + 16))( v20[6] + *(void *)(v46 + 72) * v35,  v3,  v47);
    *(_OWORD *)(v20[7] + 16 * v35) = v48;
    uint64_t v42 = v20[2];
    BOOL v43 = __OFADD__(v42, 1LL);
    uint64_t v44 = v42 + 1;
    if (v43) {
      goto LABEL_37;
    }
    void v20[2] = v44;
LABEL_21:
    __n128 v25 = swift_bridgeObjectRelease(0x8000000000000000LL);
    ++v22;
    (*(void (**)(char *, uint64_t, __n128))(v46 + 8))(v3, v47, v25);

    if (v21 == v22)
    {
      swift_bridgeObjectRelease_n(v19, 2LL);
      return (uint64_t)v20;
    }
  }

  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v47);
  __break(1u);
  return result;
}

uint64_t sub_100071580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[62] = a5;
  v6[63] = a6;
  v6[61] = a4;
  uint64_t v8 = sub_100018A04(&qword_100112D10);
  v6[64] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100018A04(&qword_100114AF0);
  v6[65] = v9;
  v6[66] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  v6[67] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v6[68] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[69] = swift_task_alloc(v12);
  v6[70] = swift_task_alloc(v12);
  v6[71] = swift_task_alloc(v12);
  v6[72] = swift_task_alloc(v12);
  v6[73] = swift_task_alloc(v12);
  v6[74] = swift_task_alloc(v12);
  return swift_task_switch(sub_100071674, a6, 0LL);
}

uint64_t sub_100071674()
{
  if (*(void *)(*(void *)(v0 + 488) + 16LL) && (unint64_t v1 = sub_10002FC2C(*(void *)(v0 + 496)), (v2 & 1) != 0))
  {
    uint64_t v3 = v0 + 144;
    uint64_t v4 = *(void *)(*(void *)(v0 + 488) + 56LL) + 16 * v1;
    uint64_t v5 = *(void **)v4;
    *(void *)(v0 + 60_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = *(void *)v4;
    uint64_t v6 = *(void **)(v4 + 8);
    *(void *)(v0 + 60_Block_object_dispose(va, 8) = v6;
    uint64_t v7 = qword_100112308;
    id v8 = v5;
    id v9 = v6;
    if (v7 != -1) {
      swift_once(&qword_100112308, sub_1000700F8);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    *(void *)(v0 + 6swift_unknownObjectWeakDestroy(v0 + 16) = sub_10001C270(v10, (uint64_t)qword_100114D30);
    id v11 = v8;
    id v12 = v9;
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v30 = v12;
      id v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v16 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v15 = 138412290;
      *(void *)(v0 + 44_Block_object_dispose(va, 8) = v11;
      id v17 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 448, v0 + 456, v15 + 4, v15 + 12);
      *uint64_t v16 = v11;

      id v12 = v30;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Presenting bulletin for ringing call: %@", v15, 0xCu);
      uint64_t v18 = sub_100018A04((uint64_t *)&unk_100112E20);
      swift_arrayDestroy(v16, 1LL, v18);
      uint64_t v19 = v16;
      uint64_t v3 = v0 + 144;
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    else
    {
    }

    id v28 = (void *)swift_task_alloc(dword_100114D74);
    *(void *)(v0 + 624) = v28;
    *id v28 = v0;
    v28[1] = sub_100071930;
    uint64_t v29 = *(void *)(v0 + 504);
    v28[3] = v11;
    v28[4] = v12;
    _OWORD v28[2] = v3;
    return swift_task_switch(sub_100072914, v29, 0LL);
  }

  else
  {
    uint64_t v20 = *(void *)(v0 + 584);
    uint64_t v21 = *(void *)(v0 + 576);
    uint64_t v22 = *(void *)(v0 + 568);
    uint64_t v23 = *(void *)(v0 + 560);
    uint64_t v24 = *(void *)(v0 + 552);
    uint64_t v25 = *(void *)(v0 + 528);
    uint64_t v26 = *(void *)(v0 + 512);
    swift_task_dealloc(*(void *)(v0 + 592));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100071930()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 504LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 624LL));
  return swift_task_switch(sub_100071988, v1, 0LL);
}

uint64_t sub_100071988()
{
  uint64_t v12 = v0[74];
  uint64_t v1 = v0[68];
  uint64_t v2 = v0[67];
  uint64_t v3 = v0[66];
  uint64_t v4 = v0[65];
  uint64_t v5 = v0[63];
  uint64_t v6 = v0[64];
  uint64_t v13 = v0[62];
  uint64_t v14 = v0[73];
  uint64_t v7 = *sub_10001C3FC((void *)(v5 + 112), *(void *)(v5 + 136));
  uint64_t v8 = swift_task_alloc(32LL);
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = v0 + 18;
  *(void *)(v8 + 24) = v7;
  OS_dispatch_queue.sync<A>(execute:)(sub_100022558);
  swift_task_dealloc(v8);
  v0[79] = *(void *)(v3 + *(int *)(v4 + 48));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v12, v3, v2);
  id v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  v0[80] = v9;
  v9(v14, v13, v2);
  v9(v6, v12, v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1 + 56))(v6, 0LL, 1LL, v2);
  swift_beginAccess(v5 + 184, v0 + 52, 33LL, 0LL);
  sub_100089848(v6, v14);
  swift_endAccess(v0 + 52);
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to Future.value.getter[1]);
  v0[81] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100071B1C;
  return Future.value.getter(v0 + 57);
}

uint64_t sub_100071B1C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 648);
  *(void *)(*v1 + 656) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100072668;
  }
  else {
    uint64_t v4 = sub_100071B80;
  }
  return swift_task_switch(v4, *(void *)(v2 + 504), 0LL);
}

uint64_t sub_100071B80()
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t, uint64_t))(v0 + 640);
  uint64_t v2 = *(void *)(v0 + 536);
  uint64_t v3 = *(void *)(v0 + 496);
  if (*(void *)(v0 + 456) == 1LL)
  {
    uint64_t v4 = v1(*(void *)(v0 + 576), v3, v2);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(void *)(v0 + 576);
    uint64_t v9 = *(void *)(v0 + 544);
    uint64_t v10 = *(void *)(v0 + 536);
    if (v7)
    {
      id v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      uint64_t v52 = v12;
      *(_DWORD *)id v11 = 136315138;
      uint64_t v13 = sub_100039E60( &qword_1001134A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter(v10, v13);
      unint64_t v16 = v15;
      *(void *)(v0 + 48_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = sub_1000850E4(v14, v15, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 480, v0 + 488, v11 + 4, v11 + 12);
      __n128 v17 = swift_bridgeObjectRelease(v16);
      uint64_t v18 = *(void (**)(uint64_t, uint64_t, __n128))(v9 + 8);
      v18(v8, v10, v17);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Bulletin for %s activated.", v11, 0xCu);
      swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {
      uint64_t v18 = *(void (**)(uint64_t, uint64_t, __n128))(v9 + 8);
      ((void (*)(void, void))v18)(*(void *)(v0 + 576), *(void *)(v0 + 536));
    }

    uint64_t v34 = v0 + 80;
    *(void *)(v0 + 664) = v18;
    unint64_t v35 = *(void **)(*(void *)(v0 + 504) + 168LL);
    *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v0 + 233;
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v0;
    *(void *)(v0 + 8_Block_object_dispose(va, 8) = sub_100072008;
    uint64_t v36 = swift_continuation_init(v0 + 80, 0LL);
    *(void *)(v0 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = _NSConcreteStackBlock;
    BOOL v37 = (void *)(v0 + 240);
    v37[1] = 0x40000000LL;
    void v37[2] = sub_1000728E4;
    v37[3] = &unk_1000FA598;
    v37[4] = v36;
    objc_msgSend(v35, "tvft_presentControlCenterFaceTimePanelWithCompletion:", v37);
    return swift_continuation_await(v34);
  }

  else
  {
    uint64_t v19 = v1(*(void *)(v0 + 552), v3, v2);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.default.getter();
    BOOL v22 = os_log_type_enabled(v20, v21);
    uint64_t v23 = *(void *)(v0 + 552);
    uint64_t v24 = *(void *)(v0 + 544);
    uint64_t v25 = *(void *)(v0 + 536);
    if (v22)
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      uint64_t v52 = v27;
      *(_DWORD *)uint64_t v26 = 136315138;
      uint64_t v28 = sub_100039E60( &qword_1001134A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v25, v28);
      unint64_t v31 = v30;
      *(void *)(v0 + 44_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = sub_1000850E4(v29, v30, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v26 + 4, v26 + 12);
      __n128 v32 = swift_bridgeObjectRelease(v31);
      uint64_t v33 = *(void (**)(uint64_t, uint64_t, __n128))(v24 + 8);
      v33(v23, v25, v32);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Bulletin for %s dismissed without activation.", v26, 0xCu);
      swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {
      uint64_t v33 = *(void (**)(uint64_t, uint64_t, __n128))(v24 + 8);
      ((void (*)(void, void))v33)(*(void *)(v0 + 552), *(void *)(v0 + 536));
    }

    uint64_t v39 = *(void *)(v0 + 512);
    uint64_t v40 = *(void *)(v0 + 496);
    swift_beginAccess(*(void *)(v0 + 504) + 184LL, v0 + 320, 33LL, 0LL);
    sub_100065DA4(v40, v39);
    sub_10001C608(v39, &qword_100112D10);
    swift_endAccess(v0 + 320);
    char v41 = *(void **)(v0 + 608);
    uint64_t v42 = *(void **)(v0 + 600);
    uint64_t v43 = *(void *)(v0 + 592);
    uint64_t v44 = *(void *)(v0 + 536);
    swift_release(*(void *)(v0 + 632));
    sub_100022790((void *)(v0 + 144));

    ((void (*)(uint64_t, uint64_t))v33)(v43, v44);
    uint64_t v45 = *(void *)(v0 + 584);
    uint64_t v46 = *(void *)(v0 + 576);
    uint64_t v47 = *(void *)(v0 + 568);
    uint64_t v48 = *(void *)(v0 + 560);
    uint64_t v49 = *(void *)(v0 + 552);
    uint64_t v50 = *(void *)(v0 + 528);
    uint64_t v51 = *(void *)(v0 + 512);
    swift_task_dealloc(*(void *)(v0 + 592));
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100072008()
{
  return swift_task_switch(sub_100072054, *(void *)(*(void *)v0 + 504LL), 0LL);
}

uint64_t sub_100072054()
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t, uint64_t))(v0 + 640);
  uint64_t v2 = *(void *)(v0 + 536);
  uint64_t v3 = *(void *)(v0 + 496);
  if (*(_BYTE *)(v0 + 233) == 1)
  {
    uint64_t v4 = v1(*(void *)(v0 + 568), v3, v2);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 664);
    uint64_t v9 = *(void *)(v0 + 568);
    uint64_t v10 = *(void *)(v0 + 536);
    if (v7)
    {
      id v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      uint64_t v49 = v12;
      *(_DWORD *)id v11 = 136315138;
      uint64_t v13 = sub_100039E60( &qword_1001134A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter(v10, v13);
      unint64_t v16 = v15;
      *(void *)(v0 + 472) = sub_1000850E4(v14, v15, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 472, v0 + 480, v11 + 4, v11 + 12);
      __n128 v17 = swift_bridgeObjectRelease(v16);
      v8(v9, v10, v17);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Opened control center for %s.", v11, 0xCu);
      swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {
      ((void (*)(void, void))v8)(*(void *)(v0 + 568), *(void *)(v0 + 536));
    }

    uint64_t v32 = *(void *)(v0 + 512);
    uint64_t v33 = *(void *)(v0 + 496);
    swift_beginAccess(*(void *)(v0 + 504) + 184LL, v0 + 368, 33LL, 0LL);
    sub_100065DA4(v33, v32);
    sub_10001C608(v32, &qword_100112D10);
    swift_endAccess(v0 + 368);
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v0 + 664);
    unint64_t v35 = *(void **)(v0 + 608);
    uint64_t v36 = *(void **)(v0 + 600);
    uint64_t v37 = *(void *)(v0 + 592);
    uint64_t v38 = *(void *)(v0 + 536);
    swift_release(*(void *)(v0 + 632));
    sub_100022790((void *)(v0 + 144));

    v34(v37, v38);
    uint64_t v39 = *(void *)(v0 + 584);
    uint64_t v40 = *(void *)(v0 + 576);
    uint64_t v41 = *(void *)(v0 + 568);
    uint64_t v42 = *(void *)(v0 + 560);
    uint64_t v43 = *(void *)(v0 + 552);
    uint64_t v44 = *(void *)(v0 + 528);
    uint64_t v45 = *(void *)(v0 + 512);
    swift_task_dealloc(*(void *)(v0 + 592));
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v18 = v1(*(void *)(v0 + 560), v3, v2);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.default.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    BOOL v22 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 664);
    uint64_t v23 = *(void *)(v0 + 560);
    uint64_t v24 = *(void *)(v0 + 536);
    if (v21)
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      uint64_t v49 = v26;
      *(_DWORD *)uint64_t v25 = 136315138;
      uint64_t v27 = sub_100039E60( &qword_1001134A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v24, v27);
      unint64_t v30 = v29;
      *(void *)(v0 + 464) = sub_1000850E4(v28, v29, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 464, v0 + 472, v25 + 4, v25 + 12);
      __n128 v31 = swift_bridgeObjectRelease(v30);
      v22(v23, v24, v31);
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Control center couldn't open - directly joining %s.",  v25,  0xCu);
      swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    else
    {
      ((void (*)(void, void))v22)(*(void *)(v0 + 560), *(void *)(v0 + 536));
    }

    uint64_t v47 = *(void **)(*(void *)(v0 + 504) + 152LL);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    *(void *)(v0 + 672) = isa;
    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1000724D8;
    *(void *)(v0 + 312) = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = _NSConcreteStackBlock;
    *(void *)(v0 + 28_Block_object_dispose(va, 8) = 0x40000000LL;
    *(void *)(v0 + 296) = sub_1000798E4;
    *(void *)(v0 + 304) = &unk_1000FA5B0;
    [v47 joinContinuityConversationWithUUID:isa completion:v0 + 280];
    return swift_continuation_await(v0 + 16);
  }

uint64_t sub_1000724D8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 68_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v2;
  if (v2) {
    uint64_t v3 = sub_10007279C;
  }
  else {
    uint64_t v3 = sub_100072538;
  }
  return swift_task_switch(v3, *(void *)(v1 + 504), 0LL);
}

uint64_t sub_100072538()
{
  uint64_t v1 = *(void *)(v0 + 512);
  uint64_t v2 = *(void *)(v0 + 496);
  swift_beginAccess(*(void *)(v0 + 504) + 184LL, v0 + 368, 33LL, 0LL);
  sub_100065DA4(v2, v1);
  sub_10001C608(v1, &qword_100112D10);
  swift_endAccess(v0 + 368);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0 + 664);
  uint64_t v4 = *(void **)(v0 + 608);
  uint64_t v5 = *(void **)(v0 + 600);
  uint64_t v6 = *(void *)(v0 + 592);
  uint64_t v7 = *(void *)(v0 + 536);
  swift_release(*(void *)(v0 + 632));
  sub_100022790((void *)(v0 + 144));

  v3(v6, v7);
  uint64_t v8 = *(void *)(v0 + 584);
  uint64_t v9 = *(void *)(v0 + 576);
  uint64_t v10 = *(void *)(v0 + 568);
  uint64_t v11 = *(void *)(v0 + 560);
  uint64_t v12 = *(void *)(v0 + 552);
  uint64_t v13 = *(void *)(v0 + 528);
  uint64_t v14 = *(void *)(v0 + 512);
  swift_task_dealloc(*(void *)(v0 + 592));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100072668()
{
  uint64_t v1 = *(void *)(v0 + 632);
  uint64_t v2 = *(void **)(v0 + 608);
  uint64_t v3 = *(void **)(v0 + 600);
  uint64_t v4 = *(void *)(v0 + 544);
  uint64_t v5 = *(void *)(v0 + 512);
  uint64_t v6 = *(void *)(v0 + 496);
  swift_beginAccess(*(void *)(v0 + 504) + 184LL, v0 + 392, 33LL, 0LL);
  sub_100065DA4(v6, v5);
  sub_10001C608(v5, &qword_100112D10);
  swift_endAccess(v0 + 392);
  swift_release(v1);
  sub_100022790((void *)(v0 + 144));

  uint64_t v7 = *(void (**)(uint64_t, void))(v4 + 8);
  uint64_t v8 = *(void *)(v0 + 592);
  uint64_t v9 = *(void *)(v0 + 584);
  uint64_t v10 = *(void *)(v0 + 576);
  uint64_t v11 = *(void *)(v0 + 568);
  uint64_t v12 = *(void *)(v0 + 560);
  uint64_t v13 = *(void *)(v0 + 552);
  uint64_t v14 = *(void *)(v0 + 528);
  uint64_t v15 = *(void *)(v0 + 512);
  v7(v8, *(void *)(v0 + 536));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007279C(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 672);
  uint64_t v3 = *(void *)(v1 + 632);
  __n128 v17 = *(void **)(v1 + 608);
  uint64_t v4 = *(void **)(v1 + 600);
  uint64_t v5 = *(void *)(v1 + 512);
  uint64_t v6 = *(void *)(v1 + 496);
  uint64_t v7 = *(void *)(v1 + 504) + 184LL;
  swift_willThrow(a1);

  swift_beginAccess(v7, v1 + 344, 33LL, 0LL);
  sub_100065DA4(v6, v5);
  sub_10001C608(v5, &qword_100112D10);
  swift_endAccess(v1 + 344);
  swift_release(v3);
  sub_100022790((void *)(v1 + 144));

  uint64_t v8 = *(void *)(v1 + 592);
  uint64_t v9 = *(void *)(v1 + 584);
  uint64_t v10 = *(void *)(v1 + 576);
  uint64_t v11 = *(void *)(v1 + 568);
  uint64_t v12 = *(void *)(v1 + 560);
  uint64_t v13 = *(void *)(v1 + 552);
  uint64_t v14 = *(void *)(v1 + 528);
  uint64_t v15 = *(void *)(v1 + 512);
  (*(void (**)(uint64_t, void))(v1 + 664))(v8, *(void *)(v1 + 536));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000728E4(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  **(_BYTE **)(*(void *)(v2 + 64) + 4Hasher.init(_seed:)(v1, 0LL) = a2;
  return swift_continuation_resume(v2);
}

uint64_t sub_1000728F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[3] = a2;
  v4[4] = a3;
  void v4[2] = a1;
  return swift_task_switch(sub_100072914, v3, 0LL);
}

uint64_t sub_100072914()
{
  id v1 = [*(id *)(v0 + 24) displayName];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v4 = v3;

  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v2;
  *(void *)(v0 + 4_Block_object_dispose(va, 8) = v4;
  uint64_t v6 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v5), "mainBundle");
  v12._object = (void *)0xEB00000000656C62LL;
  v7._object = (void *)0x80000001000DB5F0LL;
  v7._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  v8._uint64_t countAndFlagsBits = 0LL;
  v8._object = (void *)0xE000000000000000LL;
  v12._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  Swift::String v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, v6, v8, v12);

  *(Swift::String *)(v0 + 56) = v9;
  uint64_t v10 = (void *)swift_task_alloc(dword_100114D7C);
  *(void *)(v0 + 72) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100072A1C;
  return sub_100074140(*(void *)(v0 + 32));
}

uint64_t sub_100072A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(*v2 + 64);
  uint64_t v7 = *(void *)(*v2 + 48);
  uint64_t v6 = *(void *)(*v2 + 56);
  uint64_t v8 = *(void *)(*v2 + 40);
  uint64_t v9 = *(void *)(*v2 + 16);
  uint64_t v11 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 72));
  *(void *)uint64_t v9 = v8;
  *(void *)(v9 + _Block_object_dispose(va, 8) = v7;
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  *(void *)(v9 + 24) = 0LL;
  *(void *)(v9 + 32) = v6;
  *(void *)(v9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v5;
  *(void *)(v9 + 4_Block_object_dispose(va, 8) = 2LL;
  *(_BYTE *)(v9 + 56) = 0;
  *(void *)(v9 + 64) = a1;
  *(void *)(v9 + 72) = a2;
  *(void *)(v9 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = 30LL;
  *(_BYTE *)(v9 + 8_Block_object_dispose(va, 8) = 0;
  return (*(uint64_t (**)(void))(v11 + 8))();
}

uint64_t sub_100072AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_100072AD0, a4, 0LL);
}

uint64_t sub_100072AD0()
{
  if ([*(id *)(*(void *)(v0 + 16) + 160) lagunaIncomingCallsEnabled])
  {
    uint64_t v2 = *(void *)(v0 + 16);
    id v1 = *(void **)(v0 + 24);
    uint64_t v3 = *(void **)(v2 + 176);
    *(void *)(v2 + 176) = v1;
    id v4 = v1;
    sub_100070388((uint64_t)v1, (uint64_t)v3);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100072C70()
{
  swift_unknownObjectRelease(*(void *)(v0 + 160));
  __n128 v1 = swift_bridgeObjectRelease(*(void *)(v0 + 184));
  swift_defaultActor_destroy(v0, v1);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for RingManager(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime11RingManager, a2);
}

uint64_t sub_100072CDC()
{
  return v0;
}

void sub_100072CE8(id *a1)
{
  id v1 = [*a1 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

Swift::Int sub_100072D34(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100018A04(&qword_1001160D0);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  uint64_t v9 = (void *)result;
  unint64_t v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  Swift::Int v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }

    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = v29[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = v29[v11];
        if (!v16) {
          break;
        }
      }
    }

uint64_t sub_100072F90(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)&_swiftEmptySetSingleton;
  }

  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  uint64_t v40 = v9;
  sub_100018A04((uint64_t *)&unk_100116090);
  uint64_t result = static _SetStorage.allocate(capacity:)(a3);
  uint64_t v12 = result;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  if (a2 < 1) {
    unint64_t v14 = 0LL;
  }
  else {
    unint64_t v14 = *a1;
  }
  uint64_t v15 = 0LL;
  uint64_t v16 = result + 56;
  uint64_t v17 = v40;
  while (1)
  {
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v19 = v18 | (v15 << 6);
    }

    else
    {
      uint64_t v20 = v15 + 1;
      if (__OFADD__(v15, 1LL)) {
        goto LABEL_40;
      }
      if (v20 >= v39)
      {
LABEL_37:
        swift_release(a4);
        return v12;
      }

      unint64_t v21 = v38[v20];
      ++v15;
      if (!v21)
      {
        uint64_t v15 = v20 + 1;
        if (v20 + 1 >= v39) {
          goto LABEL_37;
        }
        unint64_t v21 = v38[v15];
        if (!v21)
        {
          uint64_t v15 = v20 + 2;
          if (v20 + 2 >= v39) {
            goto LABEL_37;
          }
          unint64_t v21 = v38[v15];
          if (!v21)
          {
            uint64_t v22 = v20 + 3;
            if (v22 >= v39) {
              goto LABEL_37;
            }
            unint64_t v21 = v38[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v15 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_41;
                }
                if (v15 >= v39) {
                  goto LABEL_37;
                }
                unint64_t v21 = v38[v15];
                ++v22;
                if (v21) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v15 = v22;
          }
        }
      }

void *sub_100073294(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04(&qword_100112D10);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v60 = (char *)&v54 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }

  uint64_t v13 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v15 = ~v13;
  uint64_t v16 = -v13;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  else {
    uint64_t v17 = -1LL;
  }
  uint64_t v61 = a1;
  uint64_t v62 = a1 + 64;
  uint64_t v18 = a1;
  uint64_t v19 = a1 + 64;
  unint64_t v20 = v17 & v14;
  uint64_t v21 = v15;
  uint64_t v63 = v15;
  int64_t v64 = 0LL;
  unint64_t v65 = v17 & v14;
  uint64_t v59 = (char *)(a2 + 56);
  uint64_t v22 = v18;
  swift_bridgeObjectRetain(v18);
  int64_t v23 = 0LL;
  uint64_t v55 = v6;
  uint64_t v58 = a2;
  unint64_t v56 = v20;
  int64_t v57 = 0LL;
  if (!v20) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v24 = (v20 - 1) & v20;
  unint64_t v25 = __clz(__rbit64(v20)) | (v23 << 6);
  int64_t v26 = v23;
  uint64_t v27 = v19;
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))( v6,  *(void *)(v22 + 48) + *(void *)(v8 + 72) * v25,  v7);
  uint64_t v28 = 0LL;
  while (1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v28, 1LL, v7);
    uint64_t v61 = v22;
    uint64_t v62 = v27;
    uint64_t v63 = v21;
    int64_t v64 = v26;
    unint64_t v65 = v24;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
    {
      sub_100022550(v22);
      sub_10001C608((uint64_t)v6, &qword_100112D10);
      return (void *)v58;
    }

    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v60, v6, v7);
    uint64_t v32 = v58;
    uint64_t v33 = *(void *)(v58 + 40);
    uint64_t v34 = sub_100039E60( &qword_1001136D0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v7, v34);
    uint64_t v36 = -1LL << *(_BYTE *)(v32 + 32);
    unint64_t v37 = v35 & ~v36;
    if (((*(void *)&v59[(v37 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v37) & 1) != 0) {
      break;
    }
    uint64_t v44 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_34:
    v44(v60, v7);
    int64_t v23 = v64;
    unint64_t v20 = v65;
    uint64_t v22 = v61;
    uint64_t v19 = v62;
    uint64_t v21 = v63;
    uint64_t v6 = v55;
    unint64_t v56 = v65;
    int64_t v57 = v64;
    if (v65) {
      goto LABEL_6;
    }
LABEL_8:
    int64_t v26 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      __break(1u);
    }
    uint64_t v27 = v19;
    int64_t v29 = (unint64_t)(v21 + 64) >> 6;
    if (v26 >= v29) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v19 + 8 * v26);
    if (v30) {
      goto LABEL_11;
    }
    v23 += 2LL;
    if (v26 + 1 >= v29) {
      goto LABEL_36;
    }
    unint64_t v30 = *(void *)(v19 + 8 * v23);
    if (v30) {
      goto LABEL_14;
    }
    if (v26 + 2 >= v29)
    {
LABEL_26:
      uint64_t v24 = 0LL;
      uint64_t v28 = 1LL;
      int64_t v26 = v23;
    }

    else
    {
      unint64_t v30 = *(void *)(v19 + 8 * (v26 + 2));
      if (v30)
      {
        v26 += 2LL;
        goto LABEL_11;
      }

      int64_t v23 = v26 + 3;
      if (v26 + 3 >= v29)
      {
        uint64_t v24 = 0LL;
        uint64_t v28 = 1LL;
        v26 += 2LL;
      }

      else
      {
        unint64_t v30 = *(void *)(v19 + 8 * v23);
        if (v30)
        {
LABEL_14:
          int64_t v26 = v23;
LABEL_11:
          uint64_t v24 = (v30 - 1) & v30;
          unint64_t v25 = __clz(__rbit64(v30)) + (v26 << 6);
          goto LABEL_7;
        }

        v26 += 4LL;
        if (v26 >= v29) {
          goto LABEL_26;
        }
        unint64_t v30 = *(void *)(v19 + 8 * v26);
        if (v30) {
          goto LABEL_11;
        }
        int64_t v26 = v29 - 1;
        uint64_t v31 = v57 + 6;
        while (v29 != v31)
        {
          unint64_t v30 = *(void *)(v19 + 8 * v31++);
          if (v30)
          {
            int64_t v26 = v31 - 1;
            goto LABEL_11;
          }
        }

void *sub_100073858(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v51 = a2;
  uint64_t v9 = sub_100018A04(&qword_100112D10);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (void *)__chkstk_darwin(v14);
  uint64_t v59 = (char *)&v50 - v18;
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
  uint64_t v21 = *(unint64_t *)((char *)a1 + v20) & ((-1LL << a4) - 1);
  uint64_t v53 = a1;
  uint64_t v54 = v11;
  *(unint64_t *)((char *)a1 + v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v21;
  uint64_t v22 = v19 - 1;
  uint64_t v57 = a3 + 56;
  uint64_t v58 = a3;
  uint64_t v55 = a5;
  while (2)
  {
    uint64_t v52 = v22;
    do
    {
      while (1)
      {
        uint64_t v24 = *a5;
        uint64_t v25 = a5[1];
        uint64_t v27 = a5[2];
        int64_t v26 = a5[3];
        unint64_t v28 = a5[4];
        uint64_t v56 = v27;
        if (v28)
        {
          uint64_t v29 = (v28 - 1) & v28;
          unint64_t v30 = __clz(__rbit64(v28)) | (v26 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))( v11,  *(void *)(v24 + 48) + *(void *)(v13 + 72) * v30,  v12);
          uint64_t v31 = 0LL;
          goto LABEL_8;
        }

        int64_t v43 = v26 + 1;
        if (__OFADD__(v26, 1LL))
        {
          __break(1u);
          goto LABEL_42;
        }

        int64_t v44 = (unint64_t)(v27 + 64) >> 6;
        if (v43 >= v44)
        {
          uint64_t v29 = 0LL;
          uint64_t v31 = 1LL;
          goto LABEL_8;
        }

        unint64_t v45 = *(void *)(v25 + 8 * v43);
        if (v45) {
          goto LABEL_17;
        }
        if (v26 + 2 >= v44) {
          goto LABEL_34;
        }
        unint64_t v45 = *(void *)(v25 + 8 * (v26 + 2));
        if (v45)
        {
          int64_t v43 = v26 + 2;
LABEL_17:
          uint64_t v29 = (v45 - 1) & v45;
          unint64_t v30 = __clz(__rbit64(v45)) + (v43 << 6);
          int64_t v26 = v43;
          goto LABEL_7;
        }

        if (v26 + 3 >= v44)
        {
          uint64_t v29 = 0LL;
          uint64_t v31 = 1LL;
          v26 += 2LL;
          goto LABEL_8;
        }

        unint64_t v45 = *(void *)(v25 + 8 * (v26 + 3));
        if (v45)
        {
          int64_t v43 = v26 + 3;
          goto LABEL_17;
        }

        int64_t v43 = v26 + 4;
        if (v26 + 4 < v44)
        {
          unint64_t v45 = *(void *)(v25 + 8 * v43);
          if (v45) {
            goto LABEL_17;
          }
          int64_t v43 = v44 - 1;
          int64_t v48 = v26 + 5;
          while (v44 != v48)
          {
            unint64_t v45 = *(void *)(v25 + 8 * v48++);
            if (v45)
            {
              int64_t v43 = v48 - 1;
              goto LABEL_17;
            }
          }

LABEL_34:
          uint64_t v29 = 0LL;
          uint64_t v31 = 1LL;
          int64_t v26 = v43;
          goto LABEL_8;
        }

        uint64_t v29 = 0LL;
        uint64_t v31 = 1LL;
        v26 += 3LL;
LABEL_8:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v31, 1LL, v12);
        *a5 = v24;
        a5[1] = v25;
        a5[2] = v56;
        a5[3] = v26;
        a5[4] = v29;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
        {
          sub_10001C608((uint64_t)v11, &qword_100112D10);
          uint64_t v49 = v58;
          swift_retain(v58);
          return (void *)sub_100072F90(v53, v51, v52, v49);
        }

        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v59, v11, v12);
        uint64_t v32 = v58;
        uint64_t v33 = *(void *)(v58 + 40);
        uint64_t v34 = sub_100039E60( &qword_1001136D0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v12, v34);
        uint64_t v36 = -1LL << *(_BYTE *)(v32 + 32);
        unint64_t v37 = v35 & ~v36;
        if (((*(void *)(v57 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v37) & 1) != 0) {
          break;
        }
        int64_t v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
LABEL_4:
        uint64_t result = (void *)v23(v59, v12);
        uint64_t v11 = v54;
        a5 = v55;
      }

      uint64_t v38 = ~v36;
      uint64_t v39 = *(void *)(v13 + 72);
      uint64_t v40 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
      while (1)
      {
        v40(v16, *(void *)(v58 + 48) + v39 * v37, v12);
        uint64_t v41 = sub_100039E60( (unint64_t *)&qword_100112E70,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        char v42 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v59, v12, v41);
        int64_t v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
        v23(v16, v12);
        if ((v42 & 1) != 0) {
          break;
        }
        unint64_t v37 = (v37 + 1) & v38;
        if (((*(void *)(v57 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v37) & 1) == 0) {
          goto LABEL_4;
        }
      }

      uint64_t result = (void *)v23(v59, v12);
      uint64_t v46 = (v37 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
      uint64_t v11 = v54;
      uint64_t v47 = *(unint64_t *)((char *)v53 + v46);
      *(unint64_t *)((char *)v53 + v46) = v47 & ~(1LL << v37);
      a5 = v55;
    }

    while ((v47 & (1LL << v37)) == 0);
    uint64_t v22 = v52 - 1;
    if (__OFSUB__(v52, 1LL))
    {
LABEL_42:
      __break(1u);
      return result;
    }

    if (v52 != 1) {
      continue;
    }
    return &_swiftEmptySetSingleton;
  }

    uint64_t v15 = (v23 - 1) & v23;
    uint64_t v16 = __clz(__rbit64(v23)) + (v17 << 6);
    goto LABEL_35;
  }

  __break(1u);
}

id sub_100073CA4@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = v2;
  return v2;
}

void *sub_100073CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v39 = a2;
  uint64_t v5 = sub_100018A04(&qword_100112D10);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v42 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v38 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v35 - v11;
  uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v13)
  {
    v35[1] = v3;
    uint64_t v36 = v12;
    unint64_t v41 = a1 & 0xC000000000000001LL;
    unint64_t v37 = _swiftEmptyArrayStorage;
    uint64_t v14 = 4LL;
    uint64_t v40 = v13;
    while (1)
    {
      id v16 = v41 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, a1) : *(id *)(a1 + 8 * v14);
      uint64_t v3 = v16;
      uint64_t v12 = (char *)(v14 - 3);
      if (__OFADD__(v14 - 4, 1LL)) {
        break;
      }
      uint64_t v17 = a1;
      id v18 = [v16 conversationUUID];
      if (!v18)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v7, 1LL, 1LL, v8);
LABEL_5:
        sub_10001C608((uint64_t)v7, &qword_100112D10);
        goto LABEL_6;
      }

      uint64_t v19 = v18;
      uint64_t v20 = v38;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

      uint64_t v21 = v42;
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
      v22(v7, v20, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v7, 0LL, 1LL, v8);
      uint64_t v23 = (uint64_t)v36;
      v22(v36, v7, v8);
      if (*(void *)(v39 + 16))
      {
        unint64_t v24 = sub_10002FC2C(v23);
        if ((v25 & 1) != 0)
        {
          id v26 = *(id *)(*(void *)(v39 + 56) + 8 * v24);
          (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v23, v8);
          if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) != 0) {
            uint64_t v27 = v37;
          }
          else {
            uint64_t v27 = sub_100019BF0(0LL, v37[2] + 1LL, 1, v37);
          }
          unint64_t v29 = v27[2];
          unint64_t v28 = v27[3];
          unint64_t v37 = v27;
          uint64_t v15 = (char *)v40;
          if (v29 >= v28 >> 1)
          {
            uint64_t v32 = sub_100019BF0((void *)(v28 > 1), v29 + 1, 1, v37);
            uint64_t v15 = (char *)v40;
            unint64_t v37 = v32;
          }

          unint64_t v30 = v37;
          void v37[2] = v29 + 1;
          uint64_t v31 = &v30[2 * v29];
          v31[4] = v3;
          void v31[5] = v26;
          goto LABEL_7;
        }
      }

      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v23, v8);
LABEL_6:

      uint64_t v15 = (char *)v40;
LABEL_7:
      ++v14;
      a1 = v17;
      if (v12 == v15)
      {
        swift_bridgeObjectRelease(v17);
        return v37;
      }
    }

    __break(1u);
LABEL_25:
    if (a1 < 0) {
      uint64_t v34 = a1;
    }
    else {
      uint64_t v34 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v34);
  }

  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

id sub_100074000(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  void v22[3] = type metadata accessor for PineBoardBulletinManager(0LL, (uint64_t)a2);
  v22[4] = &off_1000FA160;
  v22[0] = a1;
  swift_defaultActor_initialize(a5, v10);
  a5[22] = 0LL;
  swift_retain(a5);
  a5[23] = sub_10002DD9C((uint64_t)_swiftEmptyArrayStorage);
  sub_10001C580((uint64_t)v22, (uint64_t)(a5 + 14));
  a5[19] = a2;
  a5[20] = a3;
  a5[21] = a4;
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  uint64_t v14 = swift_release(a5);
  v21.receiver = a5;
  v21.super_class = (Class)type metadata accessor for RingManager(v14, v15);
  id v16 = objc_msgSendSuper2(&v21, "init");
  if ([v12 lagunaIncomingCallsEnabled])
  {
    sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    id v17 = v16;
    uint64_t v19 = (void *)static OS_dispatch_queue.main.getter(v18);
    [v11 addDelegate:v17 queue:v19];
  }

  sub_10001BFEC(v22);
  return v16;
}

uint64_t sub_100074140(uint64_t a1)
{
  v1[2] = a1;
  uint64_t v2 = type metadata accessor for TVSnowglobeAppearanceConfiguration(0LL);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000741A0, 0LL, 0LL);
}

uint64_t sub_1000741A0()
{
  id v1 = (void *)v0[2];
  type metadata accessor for TVSnowglobeUtilities(0LL);
  v0[6] = static TVSnowglobeUtilities.shared.getter();
  id v2 = [v1 remoteMemberContactIdentifiers];
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String);
  v0[7] = v3;

  id v4 = [v1 remoteMemberCount];
  static TVSnowglobeAppearanceConfiguration.defaultConfiguration.getter();
  v0[8] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100074288;
  return ((uint64_t (*)(uint64_t, void, id, void))v7)(v3, v0[5], v4, 0LL);
}

uint64_t sub_100074288(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 56LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 64LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 40LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 48LL);
  uint64_t v6 = *(void *)(*(void *)v1 + 24LL);
  uint64_t v7 = *(void *)(*(void *)v1 + 32LL);
  *(void *)(*(void *)v1 + 72LL) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  swift_release(v4);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return swift_task_switch(sub_10007431C, 0LL, 0LL);
}

uint64_t sub_10007431C()
{
  uint64_t v1 = *(void **)(v0 + 72);
  if (v1)
  {
    uint64_t v2 = UIImagePNGRepresentation(*(UIImage **)(v0 + 72));
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
      unint64_t v6 = v5;

      uint64_t v7 = sub_10004FBD4(v4, v6);
      unint64_t v9 = v8;

      sub_100022804(v4, v6);
      if (v9 >> 60 != 15) {
        goto LABEL_7;
      }
    }

    else
    {
    }
  }

  sub_10004FE5C();
  uint64_t v7 = v10;
  unint64_t v9 = v11;
LABEL_7:
  swift_task_dealloc(*(void *)(v0 + 40));
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v7, v9);
}

uint64_t sub_1000743D8()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10007444C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007445C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100074464()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000744FC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  unint64_t v11 = (void *)swift_task_alloc(dword_100114D84);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_10001C158;
  return sub_100071580(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_1000745A8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000745DC()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = (void *)swift_task_alloc(dword_100114DB4);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_10001C158;
  void v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_100072AD0, v2, 0LL);
}

void *initializeBufferWithCopyOfBuffer for ConversationCall(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for ConversationCall(id *a1)
{
}

uint64_t assignWithCopy for ConversationCall(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for ConversationCall(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for ConversationCall()
{
  return &type metadata for ConversationCall;
}

id sub_100074738()
{
  uint64_t v1 = OBJC_IVAR____TtC8FaceTime40SidebarNavigationBaseChildViewController____lazy_storage___navigationTitleStackView;
  uint64_t v2 = *(void **)(v0
                + OBJC_IVAR____TtC8FaceTime40SidebarNavigationBaseChildViewController____lazy_storage___navigationTitleStackView);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC8FaceTime40SidebarNavigationBaseChildViewController____lazy_storage___navigationTitleStackView);
  }

  else
  {
    id v4 = [objc_allocWithZone(UIStackView) init];
    [v4 setAlignment:3];
    [v4 setAxis:0];
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0LL;
  }

  id v6 = v2;
  return v3;
}

id sub_1000747D0()
{
  uint64_t v1 = OBJC_IVAR____TtC8FaceTime40SidebarNavigationBaseChildViewController____lazy_storage___titleLabel;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8FaceTime40SidebarNavigationBaseChildViewController____lazy_storage___titleLabel);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC8FaceTime40SidebarNavigationBaseChildViewController____lazy_storage___titleLabel);
  }

  else
  {
    id v4 = sub_100074DE0();
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0LL;
  }

  id v6 = v2;
  return v3;
}

void sub_10007482C()
{
  id v1 = [v0 view];
  if (!v1)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v2 = v1;
  id v3 = sub_100074738();
  [v2 addSubview:v3];

  id v4 = sub_100074738();
  [v4 setTranslatesAutoresizingMaskIntoConstraints:0];

  uint64_t v5 = sub_100018A04(&qword_1001142B0);
  uint64_t v6 = swift_allocObject(v5, 64LL, 7LL);
  *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C4CE0;
  id v7 = sub_100074738();
  id v8 = [v7 topAnchor];

  id v9 = [v0 view];
  if (!v9)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    return;
  }

  uint64_t v10 = v9;
  id v11 = [v9 topAnchor];

  if (qword_100112320 != -1) {
    swift_once(&qword_100112320, sub_100074D28);
  }
  id v12 = [v8 constraintEqualToAnchor:v11 constant:*(double *)&qword_100114DC8];

  *(void *)(v6 + 32) = v12;
  id v13 = sub_100074738();
  id v14 = [v13 leadingAnchor];

  id v15 = [v0 view];
  if (!v15) {
    goto LABEL_16;
  }
  id v16 = v15;
  id v17 = [v15 leadingAnchor];

  if (qword_100112328 != -1) {
    swift_once(&qword_100112328, sub_100074D38);
  }
  id v18 = [v14 constraintEqualToAnchor:v17 constant:*(double *)&qword_100114DD0];

  *(void *)(v6 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v18;
  id v19 = sub_100074738();
  id v20 = [v19 trailingAnchor];

  id v21 = [v0 view];
  if (!v21) {
    goto LABEL_17;
  }
  uint64_t v23 = v21;
  unint64_t v24 = (void *)objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, v22);
  id v25 = [v23 trailingAnchor];

  if (qword_100112330 != -1) {
    swift_once(&qword_100112330, sub_100074D4C);
  }
  id v26 = [v20 constraintEqualToAnchor:v25 constant:-*(double *)&qword_100114DD8];

  *(void *)(v6 + 4_Block_object_dispose(va, 8) = v26;
  id v27 = sub_100074738();
  id v28 = [v27 heightAnchor];

  if (qword_100112318 != -1) {
    swift_once(&qword_100112318, sub_100074D14);
  }
  id v29 = [v28 constraintEqualToConstant:*(double *)&qword_100114DC0];

  *(void *)(v6 + 56) = v29;
  specialized Array._endMutation()(v30);
  sub_10001C5D0(0LL, (unint64_t *)&qword_100113120, &OBJC_CLASS___NSLayoutConstraint_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v24, "activateConstraints:", isa, swift_bridgeObjectRelease(v6).n128_f64[0]);
}

void sub_100074BF8(uint64_t a1, NSString a2)
{
  id v3 = sub_1000747D0();
  if (a2) {
    a2 = String._bridgeToObjectiveC()();
  }
  [v3 setText:a2];

  id v4 = sub_100074738();
  id v5 = [v4 arrangedSubviews];

  uint64_t v6 = sub_10001C5D0(0LL, &qword_100112970, &OBJC_CLASS___UIView_ptr);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  id v8 = sub_1000747D0();
  char v9 = sub_10002341C((uint64_t)v8, v7);
  swift_bridgeObjectRelease(v7);

  if ((v9 & 1) == 0)
  {
    id v10 = sub_100074738();
    id v11 = sub_1000747D0();
    [v10 addArrangedSubview:v11];
  }

void sub_100074D14()
{
  qword_100114DC0 = 0x4052800000000000LL;
}

void sub_100074D28()
{
  qword_100114DC8 = 0x4039000000000000LL;
}

void sub_100074D38()
{
  qword_100114DD0 = 0x4041800000000000LL;
}

void sub_100074D4C()
{
  qword_100114DD8 = 0x4040000000000000LL;
}

id sub_100074D5C(uint64_t a1, uint64_t a2)
{
  id result =  objc_msgSend( (id)objc_opt_self(UIFont, a2),  "systemFontOfSize:weight:",  48.0,  UIFontWeightBold);
  qword_100114DE0 = (uint64_t)result;
  return result;
}

id sub_100074DA8()
{
  id result = [objc_allocWithZone(UIColor) initWithWhite:1.0 alpha:0.5];
  qword_100114DE8 = (uint64_t)result;
  return result;
}

id sub_100074DE0()
{
  id v0 = [objc_allocWithZone(UILabel) init];
  if (qword_100112338 != -1) {
    swift_once(&qword_100112338, sub_100074D5C);
  }
  [v0 setFont:qword_100114DE0];
  if (qword_100112340 != -1) {
    swift_once(&qword_100112340, sub_100074DA8);
  }
  [v0 setTextColor:qword_100114DE8];
  id v1 = [v0 layer];
  [v1 setCompositingFilter:kCAFilterPlusL];

  return v0;
}

id sub_100074F54(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = &v3[OBJC_IVAR____TtC8FaceTime40SidebarNavigationBaseChildViewController_navigationTitle];
  *id v5 = 0LL;
  v5[1] = 0LL;
  v3[OBJC_IVAR____TtC8FaceTime40SidebarNavigationBaseChildViewController_wantsExpandedSidebar] = 0;
  *(void *)&v3[OBJC_IVAR____TtC8FaceTime40SidebarNavigationBaseChildViewController____lazy_storage___navigationTitleStackView] = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC8FaceTime40SidebarNavigationBaseChildViewController____lazy_storage___titleLabel] = 0LL;
  if (a2)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v7 = 0LL;
  }

  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for SidebarNavigationBaseChildViewController(a1, a2);
  id v8 = objc_msgSendSuper2(&v10, "initWithNibName:bundle:", v7, a3);

  return v8;
}

id sub_100075060(void *a1, uint64_t a2)
{
  id v4 = &v2[OBJC_IVAR____TtC8FaceTime40SidebarNavigationBaseChildViewController_navigationTitle];
  void *v4 = 0LL;
  v4[1] = 0LL;
  v2[OBJC_IVAR____TtC8FaceTime40SidebarNavigationBaseChildViewController_wantsExpandedSidebar] = 0;
  *(void *)&v2[OBJC_IVAR____TtC8FaceTime40SidebarNavigationBaseChildViewController____lazy_storage___navigationTitleStackView] = 0LL;
  *(void *)&v2[OBJC_IVAR____TtC8FaceTime40SidebarNavigationBaseChildViewController____lazy_storage___titleLabel] = 0LL;
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for SidebarNavigationBaseChildViewController((uint64_t)a1, a2);
  id v5 = objc_msgSendSuper2(&v7, "initWithCoder:", a1);

  return v5;
}

id sub_100075104(uint64_t a1, uint64_t a2)
{
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for SidebarNavigationBaseChildViewController(a1, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for SidebarNavigationBaseChildViewController(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime40SidebarNavigationBaseChildViewController, a2);
}

void sub_1000751A0()
{
  qword_100114E40 = 0x4048000000000000LL;
}

void sub_1000751B0()
{
  qword_100114E48 = 0x404E000000000000LL;
}

void sub_1000751C0()
{
  qword_100114E50 = 0x405B800000000000LL;
}

void sub_1000751D4()
{
  id v0 = [objc_allocWithZone(UIColor) initWithWhite:1.0 alpha:0.1];
  id v1 = [v0 CGColor];

  qword_100114E58 = (uint64_t)v1;
}

id sub_100075238()
{
  id v0 = [objc_allocWithZone(UIView) init];
  id v1 = [v0 layer];
  [v1 setShadowPathIsBounds:1];

  id v2 = [v0 layer];
  id v4 = objc_msgSend((id)objc_opt_self(UIColor, v3), "blackColor");
  id v5 = [v4 colorWithAlphaComponent:0.2];

  id v6 = [v5 CGColor];
  [v2 setShadowColor:v6];

  id v7 = [v0 layer];
  objc_msgSend(v7, "setShadowOffset:", 0.0, 4.0);

  id v8 = [v0 layer];
  if (qword_100112348 != -1) {
    swift_once(&qword_100112348, sub_1000751A0);
  }
  [v8 setShadowRadius:*(double *)&qword_100114E40];

  id v9 = [v0 layer];
  LODWORD(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = 1.0;
  [v9 setShadowOpacity:v10];

  sub_10001C5D0(0LL, (unint64_t *)&unk_100114ED0, &OBJC_CLASS___UIBlurEffect_ptr);
  id v11 = (void *)UIBlurEffect.init(privateStyle:)(4005LL);
  id v12 = [objc_allocWithZone(UIVisualEffectView) initWithEffect:v11];

  id v13 = [v12 layer];
  [v13 setCornerRadius:*(double *)&qword_100114E40];

  id v14 = [v12 layer];
  [v14 setMasksToBounds:1];

  id v15 = [v12 layer];
  [v15 setBorderWidth:1.0];

  id v16 = [v12 layer];
  if (qword_100112360 != -1) {
    swift_once(&qword_100112360, sub_1000751D4);
  }
  [v16 setBorderColor:qword_100114E58];

  [v0 addSubview:v12];
  [v12 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v18 = (void *)objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, v17);
  uint64_t v19 = sub_100018A04(&qword_1001142B0);
  uint64_t v20 = swift_allocObject(v19, 64LL, 7LL);
  *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C4CE0;
  id v21 = [v12 topAnchor];
  id v22 = [v0 topAnchor];
  id v23 = [v21 constraintEqualToAnchor:v22];

  *(void *)(v20 + 32) = v23;
  id v24 = [v12 bottomAnchor];
  id v25 = [v0 bottomAnchor];
  id v26 = [v24 constraintEqualToAnchor:v25];

  *(void *)(v20 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v26;
  id v27 = [v12 leadingAnchor];
  id v28 = [v0 leadingAnchor];
  id v29 = [v27 constraintEqualToAnchor:v28];

  *(void *)(v20 + 4_Block_object_dispose(va, 8) = v29;
  id v30 = [v12 trailingAnchor];
  id v31 = [v0 trailingAnchor];
  id v32 = [v30 constraintEqualToAnchor:v31];

  *(void *)(v20 + 56) = v32;
  specialized Array._endMutation()(v33);
  sub_10001C5D0(0LL, (unint64_t *)&qword_100113120, &OBJC_CLASS___NSLayoutConstraint_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v18, "activateConstraints:", isa, swift_bridgeObjectRelease(v20).n128_f64[0]);

  return v0;
}

id sub_100075774()
{
  id v1 = *(void **)(v0 + 24);
  if (v1)
  {
    id v2 = *(id *)(v0 + 24);
  }

  else
  {
    id v3 = [*(id *)(v0 + 16) widthAnchor];
    id v4 = [v3 constraintEqualToConstant:490.0];

    *(void *)(v0 + 24) = v4;
    id v2 = v4;
    id v1 = 0LL;
  }

  id v5 = v1;
  return v2;
}

id sub_100075800()
{
  id v1 = *(void **)(v0 + 32);
  if (v1)
  {
    id v2 = *(id *)(v0 + 32);
  }

  else
  {
    id v3 = [objc_allocWithZone(UIFocusGuide) init];
    *(void *)(v0 + 32) = v3;
    id v2 = v3;
    id v1 = 0LL;
  }

  id v4 = v1;
  return v2;
}

id sub_100075858()
{
  uint64_t v1 = OBJC_IVAR___TVFaceTimeContainerViewController____lazy_storage___monogramView;
  id v2 = *(void **)(v0 + OBJC_IVAR___TVFaceTimeContainerViewController____lazy_storage___monogramView);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR___TVFaceTimeContainerViewController____lazy_storage___monogramView);
  }

  else
  {
    id v4 = sub_1000758B4();
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    id v2 = 0LL;
  }

  id v6 = v2;
  return v3;
}

id sub_1000758B4()
{
  uint64_t v0 = type metadata accessor for ParticipantMonogramView.ViewModel(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v57 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for ColorStyle(0LL);
  uint64_t v61 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v7 = [objc_allocWithZone(UIView) init];
  [v7 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v9 = objc_msgSend((id)objc_opt_self(UIColor, v8), "blackColor");
  [v7 setBackgroundColor:v9];

  id v10 = [v7 layer];
  LODWORD(v11) = 0;
  [v10 setOpacity:v11];

  id v12 = [objc_allocWithZone(_UIBackdropView) initWithPrivateStyle:2030];
  id v13 = &selRef__setGradientMaskLengths_;
  if (v12)
  {
    id v14 = v12;
    [v12 setTranslatesAutoresizingMaskIntoConstraints:0];
    [v7 addSubview:v14];
    id v58 = (id)objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, v15);
    uint64_t v16 = sub_100018A04(&qword_1001142B0);
    uint64_t v17 = swift_allocObject(v16, 64LL, 7LL);
    *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C4CE0;
    id v18 = [v14 leadingAnchor];
    id v19 = [v7 leadingAnchor];
    uint64_t v59 = v4;
    uint64_t v60 = v0;
    id v20 = v19;
    id v21 = [v18 constraintEqualToAnchor:v19];

    *(void *)(v17 + 32) = v21;
    id v22 = [v14 trailingAnchor];
    id v23 = [v7 trailingAnchor];
    id v24 = [v22 constraintEqualToAnchor:v23];

    *(void *)(v17 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v24;
    id v25 = [v14 topAnchor];
    id v26 = [v7 topAnchor];
    id v27 = [v25 constraintEqualToAnchor:v26];

    *(void *)(v17 + 4_Block_object_dispose(va, 8) = v27;
    id v28 = [v14 bottomAnchor];
    id v29 = [v7 bottomAnchor];
    uint64_t v4 = v59;
    id v30 = [v28 constraintEqualToAnchor:v29];

    id v13 = &selRef__setGradientMaskLengths_;
    *(void *)(v17 + 56) = v30;
    uint64_t v62 = v17;
    specialized Array._endMutation()(v31);
    uint64_t v32 = v62;
    sub_10001C5D0(0LL, (unint64_t *)&qword_100113120, &OBJC_CLASS___NSLayoutConstraint_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    *(void *)&double v34 = swift_bridgeObjectRelease(v32).n128_u64[0];
    objc_msgSend(v58, "activateConstraints:", isa, v34);

    uint64_t v0 = v60;
  }

  (*(void (**)(char *, void, uint64_t))(v61 + 104))(v6, enum case for ColorStyle.color(_:), v4);
  id v35 = objc_allocWithZone((Class)type metadata accessor for ParticipantMonogramView(0LL));
  uint64_t v36 = (void *)ParticipantMonogramView.init(colorStyle:)(v6);
  static ParticipantMonogramView.ViewModel.defaultMeViewModel.getter([v36 setTranslatesAutoresizingMaskIntoConstraints:0]);
  ParticipantMonogramView.configure(with:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  [v7 addSubview:v36];
  uint64_t v38 = (void *)objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, v37);
  uint64_t v39 = sub_100018A04(&qword_1001142B0);
  uint64_t v40 = swift_allocObject(v39, 64LL, 7LL);
  *(_OWORD *)(v40 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C4CE0;
  id v41 = [v36 leadingAnchor];
  id v42 = [v7 leadingAnchor];
  id v43 = [v41 constraintEqualToAnchor:v42];

  *(void *)(v40 + 32) = v43;
  id v44 = [v36 trailingAnchor];
  id v45 = [v7 trailingAnchor];
  id v46 = [v44 constraintEqualToAnchor:v45];

  *(void *)(v40 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v46;
  id v47 = [v36 topAnchor];
  id v48 = [v7 topAnchor];
  id v49 = [v47 constraintEqualToAnchor:v48];

  *(void *)(v40 + 4_Block_object_dispose(va, 8) = v49;
  id v50 = [v36 bottomAnchor];
  id v51 = [v7 bottomAnchor];
  id v52 = [v50 constraintEqualToAnchor:v51];

  *(void *)(v40 + 56) = v52;
  uint64_t v62 = v40;
  specialized Array._endMutation()(v53);
  uint64_t v54 = v62;
  sub_10001C5D0(0LL, (unint64_t *)&qword_100113120, &OBJC_CLASS___NSLayoutConstraint_ptr);
  Class v55 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v38, v13[66], v55, swift_bridgeObjectRelease(v54).n128_f64[0]);

  return v7;
}

id sub_100075EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OBJC_IVAR___TVFaceTimeContainerViewController____lazy_storage___cameraEffectsControlsViewController;
  uint64_t v4 = *(void **)(v2
                + OBJC_IVAR___TVFaceTimeContainerViewController____lazy_storage___cameraEffectsControlsViewController);
  if (v4)
  {
    id v5 = *(id *)(v2 + OBJC_IVAR___TVFaceTimeContainerViewController____lazy_storage___cameraEffectsControlsViewController);
  }

  else
  {
    id v6 = objc_msgSend( objc_allocWithZone((Class)type metadata accessor for CameraEffectsControlsViewController(0, a2)),  "init");
    id v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    uint64_t v4 = 0LL;
  }

  id v8 = v4;
  return v5;
}

void *sub_100075FB8()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = (void *)v1[3];
  uint64_t v3 = (void *)v1[4];
  id v6 = (void *)v1[1];
  id v5 = (void *)v1[2];
  sub_1000796D8(v2, v6, v5, v4, v3);
  id v7 = v2;
  sub_10007972C(v2, v6, v5, v4, v3);
  uint64_t v8 = sub_100018A04(&qword_1001142B0);
  uint64_t v9 = swift_allocObject(v8, 40LL, 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FD0;
  *(void *)(v9 + 32) = v7;
  uint64_t v11 = v9;
  specialized Array._endMutation()(v9);
  return (void *)v11;
}

void sub_100076080()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100018A04((uint64_t *)&unk_100113480);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v99 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100018A04(&qword_100114EE0);
  uint64_t v105 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v7 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100018A04(&qword_100114900);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  id v12 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v14 = (objc_class *)type metadata accessor for ContainerViewController(v10, v13);
  v108.receiver = v0;
  v108.super_class = v14;
  id v15 = objc_msgSendSuper2(&v108, "viewDidLoad");
  id v17 = sub_100075EF4((uint64_t)v15, v16);
  objc_msgSend(v1, "bs_addChildViewController:", v17);

  id v20 = sub_100075EF4(v18, v19);
  id v21 = [v20 view];

  if (!v21)
  {
    __break(1u);
    goto LABEL_19;
  }

  [v21 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v22 = [v1 view];
  if (!v22)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  id v23 = v22;
  os_log_type_t v103 = v4;
  uint64_t v104 = v5;
  id v24 = sub_100075858();
  [v23 addSubview:v24];

  uint64_t v25 = sub_100018A04(&qword_1001142B0);
  uint64_t v26 = swift_allocObject(v25, 80LL, 7LL);
  *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C5260;
  id v28 = sub_100075EF4(v26, v27);
  id v29 = [v28 view];

  if (!v29)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v102 = v12;
  id v30 = [v29 trailingAnchor];

  id v31 = [v1 view];
  if (!v31)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v32 = v31;
  uint64_t v100 = v9;
  uint64_t v101 = v8;
  id v33 = [v31 safeAreaLayoutGuide];

  id v34 = [v33 trailingAnchor];
  id v35 = [v30 constraintEqualToAnchor:v34];

  *(void *)(v26 + 32) = v35;
  id v38 = sub_100075EF4(v36, v37);
  id v39 = [v38 view];

  if (!v39)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  id v40 = [v39 bottomAnchor];

  id v41 = [v1 view];
  if (!v41)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  id v42 = v41;
  id v43 = [v41 bottomAnchor];

  if (qword_100112358 != -1) {
    swift_once(&qword_100112358, sub_1000751C0);
  }
  id v44 = [v40 constraintEqualToAnchor:v43 constant:-*(double *)&qword_100114E50];

  *(void *)(v26 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v44;
  id v45 = sub_100075858();
  id v46 = [v45 leadingAnchor];

  id v47 = [v1 view];
  if (!v47) {
    goto LABEL_24;
  }
  id v48 = v47;
  id v49 = [v47 leadingAnchor];

  id v50 = [v46 constraintEqualToAnchor:v49];
  *(void *)(v26 + 4_Block_object_dispose(va, 8) = v50;
  id v51 = sub_100075858();
  id v52 = [v51 trailingAnchor];

  id v53 = [v1 view];
  if (!v53)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v54 = v53;
  id v55 = [v53 trailingAnchor];

  id v56 = [v52 constraintEqualToAnchor:v55];
  *(void *)(v26 + 56) = v56;
  id v57 = sub_100075858();
  id v58 = [v57 topAnchor];

  id v59 = [v1 view];
  if (!v59)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  uint64_t v60 = v59;
  id v61 = [v59 topAnchor];

  id v62 = [v58 constraintEqualToAnchor:v61];
  *(void *)(v26 + 64) = v62;
  id v63 = sub_100075858();
  id v64 = [v63 bottomAnchor];

  id v65 = [v1 view];
  if (!v65)
  {
LABEL_27:
    __break(1u);
    return;
  }

  int64_t v67 = v65;
  uint64_t v68 = (void *)objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, v66);
  id v69 = [v67 bottomAnchor];

  id v70 = [v64 constraintEqualToAnchor:v69];
  *(void *)(v26 + 72) = v70;
  id v106 = (id)v26;
  specialized Array._endMutation()(v71);
  id v72 = v106;
  sub_10001C5D0(0LL, (unint64_t *)&qword_100113120, &OBJC_CLASS___NSLayoutConstraint_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v68, "activateConstraints:", isa, swift_bridgeObjectRelease(v72).n128_f64[0]);

  uint64_t v74 = *(void *)&v1[OBJC_IVAR___TVFaceTimeContainerViewController_captureDeviceManager];
  uint64_t v75 = OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_captureDeviceStateSubject;
  uint64_t v76 = *(void *)(v74 + OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_captureDeviceStateSubject);
  swift_retain(v76);
  CurrentValueSubject.value.getter(v77);
  swift_release(v76);
  if (v107)
  {
    id v78 = 0LL;
    uint64_t v79 = v101;
    uint64_t v80 = v102;
    uint64_t v82 = (uint64_t)v103;
    uint64_t v81 = v104;
    if (v107 == 1) {
      id v78 = v106;
    }
  }

  else
  {

    id v78 = 0LL;
    uint64_t v79 = v101;
    uint64_t v80 = v102;
    uint64_t v82 = (uint64_t)v103;
    uint64_t v81 = v104;
  }

  sub_1000769A8(v78);

  id v106 = *(id *)(v74 + v75);
  uint64_t v83 = sub_100018A04(&qword_100114920);
  uint64_t v84 = sub_100022750( &qword_100114928,  &qword_100114920,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  unint64_t v85 = sub_10006081C();
  Publisher<>.removeDuplicates()(v83, v84, v85);
  uint64_t v86 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  id v106 = (id)static OS_dispatch_queue.main.getter(v87);
  uint64_t v89 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL, v88);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 56LL))(v82, 1LL, 1LL, v89);
  uint64_t v90 = sub_100022750( &qword_100114938,  &qword_100114EE0,  (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  unint64_t v91 = sub_10003862C();
  Publisher.receive<A>(on:options:)(&v106, v82, v81, v86, v90, v91);
  sub_10001C608(v82, (uint64_t *)&unk_100113480);

  (*(void (**)(char *, uint64_t))(v105 + 8))(v7, v81);
  uint64_t v92 = swift_allocObject(&unk_1000FA8B0, 24LL, 7LL);
  *(void *)(v92 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  uint64_t v93 = sub_100022750( &qword_100114948,  &qword_100114900,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v94 = v1;
  uint64_t v95 = Publisher<>.sink(receiveValue:)(sub_1000798CC, v92, v79, v93);
  swift_release(v92);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v80, v79);
  unint64_t v96 = &v94[OBJC_IVAR___TVFaceTimeContainerViewController_observerCancellables];
  swift_beginAccess(v96, &v106, 33LL, 0LL);
  uint64_t v97 = sub_100018A04(&qword_100114200);
  uint64_t v98 = sub_100022750(&qword_1001130D0, &qword_100114200, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v96, v97, v98);
  swift_endAccess(&v106);
  swift_release(v95);
}

void sub_100076924(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    id v2 = *(id *)a1;
    id v1 = *(id *)a1;
  }

  else
  {
    id v2 = 0LL;
  }

  sub_1000769A8(v2);
}

void sub_1000769A8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v54 = *(void **)(v4 - 8);
  __chkstk_darwin(v4);
  id v50 = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = sub_100018A04(&qword_100113000);
  __chkstk_darwin(v53);
  id v7 = (char *)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100018A04(&qword_100112D10);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v52 = (uint64_t)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v46 - v12;
  __chkstk_darwin(v11);
  id v15 = (char *)v46 - v14;
  uint64_t v16 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (void *)((char *)v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  *uint64_t v19 = static OS_dispatch_queue.main.getter(v20);
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  char v21 = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(void *, uint64_t))(v17 + 8))(v19, v16);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    return;
  }

  id v22 = (void *)(v2 + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar);
  id v23 = *(void **)(v2 + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar);
  if (v23)
  {
    if (!a1)
    {
      sub_100077C54();
      return;
    }

    v46[1] = v2;
    id v24 = (void *)v22[1];
    uint64_t v25 = (void *)v22[2];
    uint64_t v27 = (void *)v22[3];
    uint64_t v26 = (void *)v22[4];
    id v51 = a1;
    id v47 = v25;
    id v48 = v27;
    id v49 = v26;
    sub_1000796D8(v23, v24, v25, v27, v26);
    id v28 = [v24 continuityDeviceUniqueID];
    if (v28)
    {
      id v29 = v28;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v28);

      id v30 = v54;
      id v31 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v54[7];
      v31(v15, 0LL, 1LL, v4);
    }

    else
    {
      id v30 = v54;
      id v31 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v54[7];
      v31(v15, 1LL, 1LL, v4);
    }

    id v33 = [v51 continuityDeviceUniqueID];
    if (v33)
    {
      id v34 = v33;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);

      uint64_t v35 = 0LL;
    }

    else
    {
      uint64_t v35 = 1LL;
    }

    uint64_t v36 = v53;
    v31(v13, v35, 1LL, v4);
    uint64_t v37 = (uint64_t)&v7[*(int *)(v36 + 48)];
    sub_10004136C((uint64_t)v15, (uint64_t)v7);
    sub_10004136C((uint64_t)v13, v37);
    id v38 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v30[6];
    if (v38((uint64_t)v7, 1LL, v4) == 1)
    {
      sub_10001C608((uint64_t)v13, &qword_100112D10);
      sub_10001C608((uint64_t)v15, &qword_100112D10);
      if (v38(v37, 1LL, v4) == 1)
      {
        sub_10001C608((uint64_t)v7, &qword_100112D10);
LABEL_21:

        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v39 = v52;
      sub_10004136C((uint64_t)v7, v52);
      if (v38(v37, 1LL, v4) != 1)
      {
        id v41 = (void (*)(char *, uint64_t, uint64_t))v30[4];
        uint64_t v54 = v24;
        id v42 = v50;
        v41(v50, v37, v4);
        unint64_t v43 = sub_100079860();
        LODWORD(v53) = dispatch thunk of static Equatable.== infix(_:_:)(v39, v42, v4, v43);
        id v44 = (void (*)(char *, uint64_t))v30[1];
        id v45 = v42;
        id v24 = v54;
        v44(v45, v4);
        sub_10001C608((uint64_t)v13, &qword_100112D10);
        sub_10001C608((uint64_t)v15, &qword_100112D10);
        v44((char *)v39, v4);
        sub_10001C608((uint64_t)v7, &qword_100112D10);
        if ((v53 & 1) != 0) {
          goto LABEL_21;
        }
LABEL_19:
        sub_100077C54();
        id v40 = v51;
        sub_100076E6C(v51);

LABEL_22:
        return;
      }

      sub_10001C608((uint64_t)v13, &qword_100112D10);
      sub_10001C608((uint64_t)v15, &qword_100112D10);
      ((void (*)(uint64_t, uint64_t))v30[1])(v39, v4);
    }

    sub_10001C608((uint64_t)v7, &qword_100113000);
    goto LABEL_19;
  }

  if (a1)
  {
    id v32 = a1;
    sub_100076E6C(v32);
  }

void sub_100076E6C(void *a1)
{
  id v2 = a1;
  uint64_t v3 = v1;
  id v4 = sub_100075238();
  uint64_t v6 = (objc_class *)type metadata accessor for SidebarNavigationController(0LL, v5);
  id v7 = (char *)objc_allocWithZone(v6);
  uint64_t v8 = &v7[OBJC_IVAR____TtC8FaceTime27SidebarNavigationController_resizingDelegate];
  *((void *)v8 + 1) = 0LL;
  swift_unknownObjectWeakInit(v8, 0LL);
  objc_allocWithZone((Class)type metadata accessor for SidebarListViewController(0LL, v9));
  id v10 = v2;
  uint64_t v11 = v7;
  id v12 = sub_10006FAC4(v10);
  uint64_t v13 = OBJC_IVAR____TtC8FaceTime27SidebarNavigationController_listViewController;
  *(void *)&v11[OBJC_IVAR____TtC8FaceTime27SidebarNavigationController_listViewController] = v12;

  uint64_t v14 = *(void *)&v11[v13];
  v171.receiver = v11;
  v171.super_class = v6;
  id v15 = (char *)objc_msgSendSuper2(&v171, "initWithRootViewController:", v14);
  [v15 setDelegate:v15];

  uint64_t v16 = &v15[OBJC_IVAR____TtC8FaceTime27SidebarNavigationController_resizingDelegate];
  *((void *)v16 + 1) = &off_1000FA7A0;
  swift_unknownObjectWeakAssign(v16, v3);

  *(void *)&__int128 v172 = v15;
  *((void *)&v172 + 1) = v10;
  __int128 v174 = 0uLL;
  id v173 = v4;
  uint64_t v17 = v15;
  id v18 = v4;
  id v19 = v10;
  __n128 v20 = v17;
  id v21 = v18;
  id v22 = [v3 view];
  if (!v22)
  {
    __break(1u);
    goto LABEL_24;
  }

  id v23 = v22;
  [v22 addSubview:v21];

  [v21 setTranslatesAutoresizingMaskIntoConstraints:0];
  objc_msgSend(v3, "bs_addChildViewController:", v20);

  id v24 = [v20 view];
  if (!v24)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v25 = v24;

  [v25 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v26 = [v3 view];
  if (!v26)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v27 = v26;
  id v28 = sub_100075800();
  [v27 addLayoutGuide:v28];

  uint64_t v29 = OBJC_IVAR___TVFaceTimeContainerViewController_sidebarFocusGuide;
  id v30 = *(void **)&v3[OBJC_IVAR___TVFaceTimeContainerViewController_sidebarFocusGuide];
  uint64_t v31 = sub_100018A04(&qword_1001142B0);
  uint64_t v32 = swift_allocObject(v31, 40LL, 7LL);
  *(_OWORD *)(v32 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FD0;
  *(void *)(v32 + 32) = v20;
  uint64_t v170 = v32;
  specialized Array._endMutation()(v32);
  v168 = v20;
  id v33 = v30;
  sub_100018A04(&qword_100112990);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v33, "setPreferredFocusEnvironments:", isa, swift_bridgeObjectRelease(v170).n128_f64[0]);

  id v35 = [v3 view];
  if (!v35)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  uint64_t v36 = v35;
  uint64_t v167 = v29;
  [v35 addLayoutGuide:*(void *)&v3[v29]];

  uint64_t v37 = swift_allocObject(v31, 160LL, 7LL);
  *(_OWORD *)(v37 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C5FC0;
  id v38 = [v21 leadingAnchor];
  v169 = v3;
  id v39 = [v3 view];
  if (!v39)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  id v40 = v39;
  id v41 = [v39 leadingAnchor];

  if (qword_100112350 != -1) {
    swift_once(&qword_100112350, sub_1000751B0);
  }
  id v42 = [v38 constraintEqualToAnchor:v41 constant:*(double *)&qword_100114E48];

  *(void *)(v37 + 32) = v42;
  id v43 = [v21 topAnchor];
  id v44 = [v3 view];
  if (!v44) {
    goto LABEL_28;
  }
  id v45 = v44;
  id v46 = [v44 topAnchor];

  id v47 = [v43 constraintEqualToAnchor:v46 constant:*(double *)&qword_100114E48];
  *(void *)(v37 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v47;
  id v48 = [v21 bottomAnchor];
  id v49 = [v3 view];
  if (!v49)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  id v50 = v49;
  id v51 = [v49 bottomAnchor];

  id v52 = [v48 constraintEqualToAnchor:v51 constant:-*(double *)&qword_100114E48];
  *(void *)(v37 + 4_Block_object_dispose(va, 8) = v52;
  *(void *)(v37 + 56) = sub_100075774();
  uint64_t v53 = (void *)v174;
  id v54 = *((id *)&v174 + 1);
  id v55 = v19;
  id v56 = v168;
  id v57 = v21;
  id v58 = v53;
  id v59 = [v56 view];
  if (!v59)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  uint64_t v60 = v59;

  id v61 = [v60 topAnchor];
  id v62 = [v57 topAnchor];
  id v63 = [v61 constraintEqualToAnchor:v62];

  *(void *)(v37 + 64) = v63;
  id v64 = v55;
  id v65 = v56;
  id v66 = v57;
  id v67 = v58;
  id v68 = v54;
  id v69 = [v65 view];
  if (!v69)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  id v70 = v69;

  id v71 = [v70 bottomAnchor];
  id v72 = [v66 bottomAnchor];
  id v73 = [v71 constraintEqualToAnchor:v72];

  *(void *)(v37 + 72) = v73;
  id v74 = v64;
  uint64_t v75 = v65;
  id v76 = v66;
  id v77 = v67;
  id v78 = v68;
  id v79 = [v75 view];
  if (!v79)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  uint64_t v80 = v79;

  id v81 = [v80 leadingAnchor];
  id v82 = [v76 leadingAnchor];
  id v83 = [v81 constraintEqualToAnchor:v82];

  *(void *)(v37 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v83;
  id v84 = v74;
  unint64_t v85 = v75;
  id v86 = v76;
  id v87 = v77;
  id v88 = v78;
  id v89 = [v85 view];
  if (!v89)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  uint64_t v90 = v89;

  id v91 = [v90 trailingAnchor];
  id v92 = [v86 trailingAnchor];
  id v93 = [v91 constraintEqualToAnchor:v92];

  *(void *)(v37 + 8_Block_object_dispose(va, 8) = v93;
  id v94 = sub_100075800();
  id v95 = [v94 leadingAnchor];

  id v96 = *((id *)&v174 + 1);
  id v97 = v84;
  uint64_t v98 = v85;
  id v99 = v86;
  id v100 = v87;
  id v101 = [v98 view];
  if (!v101)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  uint64_t v102 = v101;

  id v103 = [v102 trailingAnchor];
  id v104 = [v95 constraintEqualToAnchor:v103];

  *(void *)(v37 + 96) = v104;
  id v105 = sub_100075800();
  id v106 = [v105 topAnchor];

  id v107 = *((id *)&v174 + 1);
  id v108 = v97;
  id v109 = v98;
  id v110 = v99;
  id v111 = v100;
  id v112 = [v109 view];
  if (!v112)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  __n128 v113 = v112;

  id v114 = [v113 topAnchor];
  id v115 = [v106 constraintEqualToAnchor:v114];

  *(void *)(v37 + 104) = v115;
  id v116 = sub_100075800();
  id v117 = [v116 bottomAnchor];

  id v118 = *((id *)&v174 + 1);
  id v119 = v108;
  id v120 = v109;
  id v121 = v110;
  id v122 = v111;
  id v123 = [v120 view];
  if (!v123)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v124 = v123;

  id v125 = [v124 bottomAnchor];
  id v126 = [v117 constraintEqualToAnchor:v125];

  *(void *)(v37 + 112) = v126;
  id v127 = sub_100075800();
  id v128 = [v127 trailingAnchor];

  id v131 = sub_100075EF4(v129, v130);
  id v132 = [v131 view];

  if (!v132)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  id v133 = [v132 leadingAnchor];

  id v134 = [v128 constraintEqualToAnchor:v133];
  *(void *)(v37 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v134;
  id v135 = [*(id *)&v169[v167] leadingAnchor];
  id v136 = [v169 view];
  if (!v136)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  uint64_t v137 = v136;
  id v138 = [v136 leadingAnchor];

  id v139 = [v135 constraintEqualToAnchor:v138];
  *(void *)(v37 + 12_Block_object_dispose(va, 8) = v139;
  id v140 = [*(id *)&v169[v167] trailingAnchor];
  id v141 = [v169 view];
  if (!v141)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  id v142 = v141;
  id v143 = [v141 centerXAnchor];

  id v144 = [v140 constraintEqualToAnchor:v143];
  *(void *)(v37 + 136) = v144;
  id v145 = [*(id *)&v169[v167] topAnchor];
  id v146 = [v169 view];
  if (!v146)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v147 = v146;
  id v148 = [v146 topAnchor];

  id v149 = [v145 constraintEqualToAnchor:v148];
  *(void *)(v37 + 144) = v149;
  id v150 = [*(id *)&v169[v167] bottomAnchor];
  id v151 = [v169 view];
  if (v151)
  {
    int64_t v153 = v151;
    uint64_t v154 = (void *)objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, v152);
    id v155 = [v153 bottomAnchor];

    id v156 = [v150 constraintEqualToAnchor:v155];
    *(void *)(v37 + 152) = v156;
    specialized Array._endMutation()(v157);
    uint64_t v158 = v37;
    sub_10001C5D0(0LL, (unint64_t *)&qword_100113120, &OBJC_CLASS___NSLayoutConstraint_ptr);
    Class v159 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v154, "activateConstraints:", v159, swift_bridgeObjectRelease(v158).n128_f64[0]);

    id v160 = v173;
    v161 = &v169[OBJC_IVAR___TVFaceTimeContainerViewController_sidebar];
    v162 = *(void **)&v169[OBJC_IVAR___TVFaceTimeContainerViewController_sidebar];
    v163 = *(void **)&v169[OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 8];
    v164 = *(void **)&v169[OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 16];
    v165 = *(void **)&v169[OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 24];
    v166 = *(void **)&v169[OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 32];
    *(_OWORD *)v161 = v172;
    *((void *)v161 + 2) = v160;
    *(_OWORD *)(v161 + 24) = v174;
    sub_10007972C(v162, v163, v164, v165, v166);
    return;
  }

LABEL_41:
  __break(1u);
}

  __break(1u);
  return result;
}

void sub_100077C54()
{
  uint64_t v1 = v0;
  id v2 = &v0[OBJC_IVAR___TVFaceTimeContainerViewController_sidebar];
  uint64_t v3 = *(void **)&v0[OBJC_IVAR___TVFaceTimeContainerViewController_sidebar];
  if (v3)
  {
    id v4 = (void *)*((void *)v2 + 3);
    uint64_t v5 = (void *)*((void *)v2 + 4);
    uint64_t v6 = (void *)*((void *)v2 + 1);
    id v7 = (void *)*((void *)v2 + 2);
    id v19 = v5;
    id v8 = v3;
    sub_1000796D8(v3, v6, v7, v4, v5);
    [v7 removeFromSuperview];
    objc_msgSend(v1, "bs_removeChildViewController:", v8);

    id v9 = [v1 view];
    if (v9)
    {
      id v10 = v9;
      id v11 = sub_100075800();
      [v10 removeLayoutGuide:v11];

      id v12 = [v1 view];
      if (v12)
      {
        uint64_t v13 = v12;
        [v12 removeLayoutGuide:*(void *)&v1[OBJC_IVAR___TVFaceTimeContainerViewController_sidebarFocusGuide]];

        uint64_t v14 = *(void **)v2;
        id v15 = (void *)*((void *)v2 + 1);
        uint64_t v16 = (void *)*((void *)v2 + 2);
        uint64_t v17 = (void *)*((void *)v2 + 3);
        id v18 = (void *)*((void *)v2 + 4);
        *(_OWORD *)id v2 = 0u;
        *((_OWORD *)v2 + 1) = 0u;
        *((void *)v2 + 4) = 0LL;
        sub_10007972C(v14, v15, v16, v17, v18);

        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

void sub_100077DDC(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v48.receiver = v3;
  v48.super_class = (Class)type metadata accessor for ContainerViewController((uint64_t)a1, a2);
  objc_msgSendSuper2(&v48, "didUpdateFocusInContext:withAnimationCoordinator:", a1, a2);
  id v6 = [a1 nextFocusedView];
  if (v6)
  {
    id v7 = v6;
    id v8 = &v3[OBJC_IVAR___TVFaceTimeContainerViewController_sidebar];
    id v9 = *(void **)&v3[OBJC_IVAR___TVFaceTimeContainerViewController_sidebar];
    if (!v9)
    {
LABEL_12:

      return;
    }

    id v11 = (void *)*((void *)v8 + 3);
    id v10 = (void *)*((void *)v8 + 4);
    uint64_t v13 = (void *)*((void *)v8 + 1);
    id v12 = (void *)*((void *)v8 + 2);
    id v47 = v10;
    id v14 = v9;
    id v15 = v13;
    id v16 = v12;
    sub_1000796D8(v9, v13, v12, v11, v10);
    id v17 = v10;
    id v18 = v11;
    id v19 = [v14 view];
    if (v19)
    {
      __n128 v20 = v19;

      unsigned int v21 = [v7 isDescendantOfView:v20];
      if (!v21)
      {
        id v32 = sub_100075EF4(v22, v23);
        id v33 = [v32 view];

        if (v33)
        {
          unsigned int v34 = [v7 isDescendantOfView:v33];

          if (!v34)
          {

            id v7 = v14;
            goto LABEL_12;
          }

          id v35 = sub_100075800();
          uint64_t v36 = sub_100018A04(&qword_1001142B0);
          uint64_t v37 = swift_allocObject(v36, 40LL, 7LL);
          *(_OWORD *)(v37 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FD0;
          id v38 = v47;
          id v39 = v14;
          id v40 = v15;
          id v41 = v16;
          id v42 = v18;
          id v43 = [v39 view];
          if (v43)
          {
            id v44 = v43;

            *(void *)(v37 + 32) = v44;
            specialized Array._endMutation()(v45);
            sub_100018A04(&qword_100112990);
            Class isa = Array._bridgeToObjectiveC()().super.isa;
            objc_msgSend(v35, "setPreferredFocusEnvironments:", isa, swift_bridgeObjectRelease(v37).n128_f64[0]);

            goto LABEL_12;
          }

BOOL sub_1000781D4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void sub_1000781E8(char a1, char a2)
{
  uint64_t v3 = v2;
  id v6 = (void (*)(__n128))off_1000FA8C8[a1];
  uint64_t v7 = swift_allocObject(&unk_1000FA7C0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v7 + 16, v3);
  uint64_t v8 = swift_allocObject(&unk_1000FA7C0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v8 + 16, v3);
  uint64_t v10 = swift_allocObject(&unk_1000FA838, 32LL, 7LL);
  *(_BYTE *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v10 + 24) = v8;
  if ((a2 & 1) != 0)
  {
    id v11 = (void *)objc_opt_self(&OBJC_CLASS___UIView, v9);
    unsigned int v21 = (void (*)())v6;
    uint64_t v22 = v7;
    id v17 = _NSConcreteStackBlock;
    uint64_t v18 = 1107296256LL;
    id v19 = sub_100027654;
    __n128 v20 = &unk_1000FA850;
    id v12 = _Block_copy(&v17);
    uint64_t v13 = v22;
    swift_retain(v7);
    swift_release(v13);
    unsigned int v21 = sub_1000795C8;
    uint64_t v22 = v10;
    id v17 = _NSConcreteStackBlock;
    uint64_t v18 = 1107296256LL;
    id v19 = sub_1000B7A5C;
    __n128 v20 = &unk_1000FA878;
    id v14 = _Block_copy(&v17);
    uint64_t v15 = v22;
    swift_retain(v10);
    swift_release(v15);
    [v11 animateWithDuration:v12 animations:v14 completion:0.25];
    swift_release(v10);
    swift_release(v7);
    _Block_release(v14);
    _Block_release(v12);
  }

  else
  {
    __n128 v16 = swift_retain(v8);
    v6(v16);
    sub_1000795D4(a1, v8);
    swift_release(v10);
    swift_release(v8);
    swift_release(v7);
  }

void sub_1000783D4(uint64_t a1)
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    id v4 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar);
    uint64_t v5 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 8);
    uint64_t v7 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 16);
    id v6 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 24);
    uint64_t v8 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 32);
    sub_1000796D8(v4, v5, v7, v6, v8);

    if (v4)
    {
      id v9 = v7;
      sub_10007972C(v4, v5, v7, v6, v8);
      [v9 setAlpha:0.0];
    }
  }

  swift_beginAccess(a1, v29, 0LL, 0LL);
  uint64_t v10 = swift_unknownObjectWeakLoadStrong(a1);
  if (v10)
  {
    id v11 = (void *)v10;
    id v12 = *(void **)(v10 + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar);
    uint64_t v13 = *(void **)(v10 + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 8);
    id v14 = *(void **)(v10 + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 16);
    uint64_t v15 = *(void **)(v10 + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 24);
    __n128 v16 = *(void **)(v10 + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 32);
    sub_1000796D8(v12, v13, v14, v15, v16);

    if (v12)
    {
      id v17 = [v12 view];
      if (!v17)
      {
        __break(1u);
        return;
      }

      uint64_t v18 = v17;

      [v18 setAlpha:0.0];
    }
  }

  swift_beginAccess(a1, v28, 0LL, 0LL);
  uint64_t v19 = swift_unknownObjectWeakLoadStrong(a1);
  if (v19)
  {
    unsigned int v21 = (void *)v19;
    uint64_t v22 = sub_100075EF4(v19, v20);

    v22[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController_isHiding] = 1;
    id v23 = sub_100037144();
    [v23 setAlpha:0.0];
  }

  swift_beginAccess(a1, &v27, 0LL, 0LL);
  uint64_t v24 = swift_unknownObjectWeakLoadStrong(a1);
  if (v24)
  {
    uint64_t v25 = (void *)v24;
    id v26 = sub_100075858();

    [v26 setAlpha:0.0];
  }

void sub_1000785F0(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v30, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    id v4 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar);
    uint64_t v5 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 8);
    uint64_t v7 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 16);
    id v6 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 24);
    uint64_t v8 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 32);
    sub_1000796D8(v4, v5, v7, v6, v8);

    if (v4)
    {
      id v9 = v7;
      sub_10007972C(v4, v5, v7, v6, v8);
      [v9 setAlpha:1.0];
    }
  }

  swift_beginAccess(v1, v29, 0LL, 0LL);
  uint64_t v10 = swift_unknownObjectWeakLoadStrong(v1);
  if (v10)
  {
    id v11 = (void *)v10;
    id v12 = *(void **)(v10 + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar);
    uint64_t v13 = *(void **)(v10 + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 8);
    id v14 = *(void **)(v10 + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 16);
    uint64_t v15 = *(void **)(v10 + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 24);
    __n128 v16 = *(void **)(v10 + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 32);
    sub_1000796D8(v12, v13, v14, v15, v16);

    if (v12)
    {
      id v17 = [v12 view];
      if (!v17)
      {
        __break(1u);
        return;
      }

      uint64_t v18 = v17;

      [v18 setAlpha:1.0];
    }
  }

  swift_beginAccess(v1, v28, 0LL, 0LL);
  uint64_t v19 = swift_unknownObjectWeakLoadStrong(v1);
  if (v19)
  {
    unsigned int v21 = (void *)v19;
    uint64_t v22 = sub_100075EF4(v19, v20);

    v22[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController_isHiding] = 0;
    id v23 = sub_100037144();
    [v23 setAlpha:1.0];
  }

  swift_beginAccess(v1, &v27, 0LL, 0LL);
  uint64_t v24 = swift_unknownObjectWeakLoadStrong(v1);
  if (v24)
  {
    uint64_t v25 = (void *)v24;
    id v26 = sub_100075858();

    [v26 setAlpha:0.0];
  }

void sub_10007880C(uint64_t a1, double a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v32, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    id v6 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar);
    uint64_t v7 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 8);
    id v9 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 16);
    uint64_t v8 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 24);
    uint64_t v10 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 32);
    sub_1000796D8(v6, v7, v9, v8, v10);

    if (v6)
    {
      id v11 = v9;
      sub_10007972C(v6, v7, v9, v8, v10);
      [v11 setAlpha:0.0];
    }
  }

  swift_beginAccess(v3, v31, 0LL, 0LL);
  uint64_t v12 = swift_unknownObjectWeakLoadStrong(v3);
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    id v14 = *(void **)(v12 + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar);
    uint64_t v15 = *(void **)(v12 + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 8);
    __n128 v16 = *(void **)(v12 + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 16);
    id v17 = *(void **)(v12 + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 24);
    uint64_t v18 = *(void **)(v12 + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 32);
    sub_1000796D8(v14, v15, v16, v17, v18);

    if (v14)
    {
      id v19 = [v14 view];
      if (!v19)
      {
        __break(1u);
        return;
      }

      uint64_t v20 = v19;

      [v20 setAlpha:0.0];
    }
  }

  swift_beginAccess(v3, v30, 0LL, 0LL);
  uint64_t v21 = swift_unknownObjectWeakLoadStrong(v3);
  if (v21)
  {
    id v23 = (void *)v21;
    uint64_t v24 = sub_100075EF4(v21, v22);

    v24[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController_isHiding] = 1;
    id v25 = sub_100037144();
    [v25 setAlpha:0.0];
  }

  swift_beginAccess(v3, &v29, 0LL, 0LL);
  uint64_t v26 = swift_unknownObjectWeakLoadStrong(v3);
  if (v26)
  {
    uint64_t v27 = (void *)v26;
    id v28 = sub_100075858();

    [v28 setAlpha:a2];
  }

id sub_100078A38(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = &v3[OBJC_IVAR___TVFaceTimeContainerViewController_sidebar];
  *(_OWORD *)id v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((void *)v6 + 4) = 0LL;
  *(void *)&v3[OBJC_IVAR___TVFaceTimeContainerViewController____lazy_storage___monogramView] = 0LL;
  *(void *)&v3[OBJC_IVAR___TVFaceTimeContainerViewController____lazy_storage___cameraEffectsControlsViewController] = 0LL;
  uint64_t v7 = OBJC_IVAR___TVFaceTimeContainerViewController_captureDeviceManager;
  uint64_t v8 = qword_100112398;
  id v9 = v3;
  if (v8 != -1) {
    swift_once(&qword_100112398, sub_1000874A0);
  }
  uint64_t v10 = (void *)qword_10011A300;
  *(void *)&v3[v7] = qword_10011A300;
  *(void *)&v9[OBJC_IVAR___TVFaceTimeContainerViewController_observerCancellables] = _swiftEmptyArrayStorage;
  uint64_t v11 = OBJC_IVAR___TVFaceTimeContainerViewController_sidebarFocusGuide;
  id v12 = objc_allocWithZone(&OBJC_CLASS___UIFocusGuide);
  id v13 = v10;
  *(void *)&v9[v11] = [v12 init];
  v9[OBJC_IVAR___TVFaceTimeContainerViewController_state] = 2;

  if (a2)
  {
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v16 = 0LL;
  }

  v19.receiver = v9;
  v19.super_class = (Class)type metadata accessor for ContainerViewController(v14, v15);
  id v17 = objc_msgSendSuper2(&v19, "initWithNibName:bundle:", v16, a3);

  return v17;
}

id sub_100078BF8(void *a1)
{
  uint64_t v3 = &v1[OBJC_IVAR___TVFaceTimeContainerViewController_sidebar];
  *(_OWORD *)uint64_t v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((void *)v3 + 4) = 0LL;
  *(void *)&v1[OBJC_IVAR___TVFaceTimeContainerViewController____lazy_storage___monogramView] = 0LL;
  *(void *)&v1[OBJC_IVAR___TVFaceTimeContainerViewController____lazy_storage___cameraEffectsControlsViewController] = 0LL;
  uint64_t v4 = OBJC_IVAR___TVFaceTimeContainerViewController_captureDeviceManager;
  uint64_t v5 = qword_100112398;
  id v6 = v1;
  if (v5 != -1) {
    swift_once(&qword_100112398, sub_1000874A0);
  }
  uint64_t v7 = (void *)qword_10011A300;
  *(void *)&v6[v4] = qword_10011A300;
  *(void *)&v6[OBJC_IVAR___TVFaceTimeContainerViewController_observerCancellables] = _swiftEmptyArrayStorage;
  uint64_t v8 = OBJC_IVAR___TVFaceTimeContainerViewController_sidebarFocusGuide;
  id v9 = objc_allocWithZone(&OBJC_CLASS___UIFocusGuide);
  id v10 = v7;
  *(void *)&v6[v8] = [v9 init];
  v6[OBJC_IVAR___TVFaceTimeContainerViewController_state] = 2;

  v15.receiver = v6;
  v15.super_class = (Class)type metadata accessor for ContainerViewController(v11, v12);
  id v13 = objc_msgSendSuper2(&v15, "initWithCoder:", a1);

  return v13;
}

id sub_100078D44(uint64_t a1, uint64_t a2)
{
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for ContainerViewController(a1, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for ContainerViewController(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS___TVFaceTimeContainerViewController, a2);
}

uint64_t getEnumTagSinglePayload for ContainerViewController.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t storeEnumTagSinglePayload for ContainerViewController.State( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100078EF4 + 4 * byte_1000C5FD5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100078F28 + 4 * byte_1000C5FD0[v4]))();
}

uint64_t sub_100078F28(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100078F30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100078F38LL);
  }
  return result;
}

uint64_t sub_100078F44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100078F4CLL);
  }
  *(_BYTE *)id result = a2 + 2;
  return result;
}

uint64_t sub_100078F50(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100078F58(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100078F64(_BYTE *result, char a2)
{
  *id result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ContainerViewController.State()
{
  return &type metadata for ContainerViewController.State;
}

void destroy for ContainerViewController.Sidebar(id *a1)
{
}

void *initializeWithCopy for ContainerViewController.Sidebar(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  unsigned int v6 = *(void **)(a2 + 24);
  a1[2] = v5;
  a1[3] = v6;
  BOOL v7 = *(void **)(a2 + 32);
  a1[4] = v7;
  id v8 = v3;
  id v9 = v4;
  id v10 = v5;
  id v11 = v6;
  id v12 = v7;
  return a1;
}

uint64_t assignWithCopy for ContainerViewController.Sidebar(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  BOOL v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
  id v9 = v7;

  id v10 = *(void **)(a2 + 16);
  id v11 = *(void **)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  id v12 = v10;

  id v13 = *(void **)(a1 + 24);
  uint64_t v14 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v14;
  id v15 = v14;

  NSString v16 = *(void **)(a1 + 32);
  id v17 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v17;
  id v18 = v17;

  return a1;
}

uint64_t assignWithTake for ContainerViewController.Sidebar(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);

  id v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  return a1;
}

ValueMetadata *type metadata accessor for ContainerViewController.Sidebar()
{
  return &type metadata for ContainerViewController.Sidebar;
}

unint64_t sub_100079120()
{
  unint64_t result = qword_100114EC0;
  if (!qword_100114EC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000C6048, &type metadata for ContainerViewController.State);
    atomic_store(result, (unint64_t *)&qword_100114EC0);
  }

  return result;
}

void sub_100079164(char a1)
{
  uint64_t v2 = v1;
  int v3 = (void *)(v1 + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar);
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar);
  if (v4)
  {
    BOOL v7 = (void *)v3[3];
    id v6 = (void *)v3[4];
    id v8 = (void *)v3[1];
    id v9 = (void *)v3[2];
    id v27 = v4;
    id v28 = v8;
    id v29 = v9;
    id v30 = v7;
    id v31 = v6;
    if ((a1 & 1) != 0) {
      double v10 = 1112.0;
    }
    else {
      double v10 = 490.0;
    }
    id v11 = v6;
    id v12 = v4;
    id v13 = v8;
    id v14 = v9;
    id v15 = v7;
    id v16 = sub_100075774();
    [v16 constant];
    double v18 = v17;

    if (v10 == v18)
    {
    }

    else
    {
      id v19 = sub_100075774();
      [v19 setConstant:v10];

      id v20 = objc_msgSend( objc_allocWithZone(UISpringTimingParameters),  "initWithMass:stiffness:damping:initialVelocity:",  1.0,  200.0,  25.0,  0.0,  0.0);
      id v21 = [objc_allocWithZone(UIViewPropertyAnimator) initWithDuration:v20 timingParameters:1.0];

      uint64_t v22 = swift_allocObject(&unk_1000FA7C0, 24LL, 7LL);
      swift_unknownObjectWeakInit(v22 + 16, v2);
      uint64_t v23 = swift_allocObject(&unk_1000FA7E8, 25LL, 7LL);
      *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v22;
      *(_BYTE *)(v23 + 24) = a1 & 1;
      aBlock[4] = sub_100079564;
      uint64_t v26 = v23;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_100027654;
      void aBlock[3] = &unk_1000FA800;
      uint64_t v24 = _Block_copy(aBlock);
      objc_msgSend(v21, "addAnimations:", v24, swift_release(v26).n128_f64[0]);
      _Block_release(v24);
      [v21 startAnimation];
    }
  }

uint64_t sub_1000793E0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100079404(uint64_t a1, char a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v16, 0LL, 0LL);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    uint64_t v5 = Strong;
    id v6 = [Strong view];

    if (!v6)
    {
      __break(1u);
      return;
    }

    [v6 layoutIfNeeded];
  }

  if ((a2 & 1) != 0)
  {
    swift_beginAccess(v3, v15, 0LL, 0LL);
    uint64_t v7 = swift_unknownObjectWeakLoadStrong(v3);
    if (!v7) {
      return;
    }
    id v9 = (void *)v7;
    double v10 = sub_100075EF4(v7, v8);

    v10[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController_isHiding] = 1;
    id v11 = sub_100037144();
    [v11 setAlpha:0.0];
  }

  else
  {
    swift_beginAccess(v3, v15, 0LL, 0LL);
    uint64_t v12 = swift_unknownObjectWeakLoadStrong(v3);
    if (!v12) {
      return;
    }
    id v14 = (void *)v12;
    double v10 = sub_100075EF4(v12, v13);

    v10[OBJC_IVAR____TtC8FaceTime35CameraEffectsControlsViewController_isHiding] = 0;
    id v11 = sub_100037144();
    [v11 setAlpha:1.0];
  }
}

uint64_t sub_100079540()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

void sub_100079564()
{
}

uint64_t sub_100079570(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100079580(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_100079588()
{
}

uint64_t sub_1000795A4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000795C8()
{
}

void sub_1000795D4(char a1, uint64_t a2)
{
  if (a1 != 2)
  {
    uint64_t v14 = v2;
    uint64_t v15 = v3;
    uint64_t v4 = a2 + 16;
    swift_beginAccess(a2 + 16, v13, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v4);
    if (Strong)
    {
      id v6 = (void *)Strong;
      uint64_t v8 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar);
      uint64_t v7 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 8);
      id v9 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 16);
      double v10 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 24);
      id v11 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 32);
      sub_1000796D8(v8, v7, v9, v10, v11);

      if (v8)
      {
        id v12 = v8;
        sub_10007972C(v8, v7, v9, v10, v11);
      }
    }
  }

void sub_1000796B4()
{
}

void sub_1000796BC()
{
}

id sub_1000796D8(id result, void *a2, void *a3, void *a4, void *a5)
{
  if (result)
  {
    uint64_t v7 = result;
    id v8 = a5;
    id v9 = v7;
    id v10 = a2;
    id v11 = a3;
    return a4;
  }

  return result;
}

void sub_10007972C(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  if (a1)
  {
  }

void sub_100079780(char a1, uint64_t a2)
{
  if (a1 != 2)
  {
    uint64_t v14 = v2;
    uint64_t v15 = v3;
    swift_beginAccess(a2, v13, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(a2);
    if (Strong)
    {
      id v6 = (void *)Strong;
      uint64_t v7 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar);
      id v8 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 8);
      id v9 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 16);
      id v10 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 24);
      id v11 = *(void **)(Strong + OBJC_IVAR___TVFaceTimeContainerViewController_sidebar + 32);
      sub_1000796D8(v7, v8, v9, v10, v11);

      if (v7)
      {
        id v12 = v7;
        sub_10007972C(v7, v8, v9, v10, v11);
      }
    }
  }

unint64_t sub_100079860()
{
  unint64_t result = qword_100112E70;
  if (!qword_100112E70)
  {
    uint64_t v1 = type metadata accessor for UUID(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_100112E70);
  }

  return result;
}

uint64_t sub_1000798A8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000798CC(uint64_t a1)
{
}

uint64_t sub_1000798E4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!a2) {
    return swift_continuation_throwingResume(*(void *)(a1 + 32));
  }
  uint64_t v4 = sub_100018A04(&qword_1001141F0);
  uint64_t v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0LL, 0LL);
  void *v6 = a2;
  id v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

void sub_100079958(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_100112368 != -1) {
    swift_once(&qword_100112368, sub_100079B34);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10001C270(v6, (uint64_t)qword_100114EE8);
  uint64_t v7 = swift_bridgeObjectRetain_n(a2, 2LL);
  id v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    id v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v11;
    *(_DWORD *)id v10 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v14 = sub_1000850E4(a1, a2, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "exitDiscoverySession with reason: %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  id v12 = *(void **)(v3 + OBJC_IVAR____TtC8FaceTime20RemoteDisplayManager_remoteDisplayDiscovery);
  NSString v13 = String._bridgeToObjectiveC()();
  [v12 exitDiscoverySessionWithReason:v13];
}

uint64_t sub_100079B34()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_100114EE8);
  sub_10001C270(v0, (uint64_t)qword_100114EE8);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0xD000000000000014LL,  0x80000001000C6060LL);
}

id sub_100079BAC(uint64_t a1, uint64_t a2)
{
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RemoteDisplayManager(a1, a2)), "init");
  qword_10011A2E8 = (uint64_t)result;
  return result;
}

uint64_t sub_100079BD8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC8FaceTime20RemoteDisplayManager_queue_peerDeviceIdentifier);
  uint64_t v2 = *(void *)(a1 + OBJC_IVAR____TtC8FaceTime20RemoteDisplayManager_queue_peerDeviceIdentifier + 8);
  *a2 = v3;
  a2[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

char *sub_100079C00()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  uint64_t v2 = sub_100018A04(&qword_100114970);
  __chkstk_darwin(v2);
  objc_super v48 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v8);
  id v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v11);
  NSString v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = OBJC_IVAR____TtC8FaceTime20RemoteDisplayManager_queue;
  sub_100039D4C(0LL, v14);
  uint64_t v15 = v1;
  static DispatchQoS.unspecified.getter(v15);
  id aBlock = (void **)_swiftEmptyArrayStorage;
  unint64_t v16 = sub_10004BB0C();
  uint64_t v17 = sub_100018A04((uint64_t *)&unk_100112DC0);
  unint64_t v18 = sub_10007A61C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v17, v18, v8, v16);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v4);
  uint64_t v19 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000029LL,  0x80000001000DB830LL,  v13,  v10,  v7,  0LL);
  *(void *)(v45 + v46) = v19;
  uint64_t v20 = OBJC_IVAR____TtC8FaceTime20RemoteDisplayManager_remoteDisplayDiscovery;
  *(void *)&v15[v20] = [objc_allocWithZone(RPRemoteDisplayDiscovery) init];
  id v21 = &v15[OBJC_IVAR____TtC8FaceTime20RemoteDisplayManager_queue_peerDeviceIdentifier];
  *(void *)id v21 = 0LL;
  *((void *)v21 + 1) = 0LL;

  v55.receiver = v15;
  v55.super_class = ObjectType;
  uint64_t v22 = (char *)objc_msgSendSuper2(&v55, "init");
  uint64_t v23 = OBJC_IVAR____TtC8FaceTime20RemoteDisplayManager_remoteDisplayDiscovery;
  uint64_t v24 = *(void **)&v22[OBJC_IVAR____TtC8FaceTime20RemoteDisplayManager_remoteDisplayDiscovery];
  id v25 = v22;
  [v24 setDiscoveryFlags:3];
  [v24 setDispatchQueue:*(void *)&v25[OBJC_IVAR____TtC8FaceTime20RemoteDisplayManager_queue]];
  uint64_t v26 = swift_allocObject(&unk_1000FA930, 24LL, 7LL);
  swift_unknownObjectWeakInit(v26 + 16, v25);
  uint64_t v53 = sub_10007A68C;
  uint64_t v54 = v26;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v50 = 1107296256LL;
  id v51 = sub_10007A108;
  id v52 = &unk_1000FA948;
  id v27 = _Block_copy(&aBlock);
  uint64_t v28 = v54;
  id v29 = v24;
  swift_release(v28);
  [v29 setDiscoverySessionStateChangedHandler:v27];
  _Block_release(v27);

  id v30 = *(void **)&v22[v23];
  uint64_t v31 = swift_allocObject(&unk_1000FA930, 24LL, 7LL);
  swift_unknownObjectWeakInit(v31 + 16, v25);
  uint64_t v53 = sub_10007A6AC;
  uint64_t v54 = v31;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v50 = 1107296256LL;
  id v51 = sub_100027654;
  id v52 = &unk_1000FA970;
  id v32 = _Block_copy(&aBlock);
  uint64_t v33 = v54;
  id v34 = v30;
  swift_release(v33);
  [v34 setInterruptionHandler:v32];
  _Block_release(v32);

  id v35 = *(void **)&v22[v23];
  uint64_t v36 = swift_allocObject(&unk_1000FA930, 24LL, 7LL);
  swift_unknownObjectWeakInit(v36 + 16, v25);
  uint64_t v53 = sub_10007A6AC;
  uint64_t v54 = v36;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v50 = 1107296256LL;
  id v51 = sub_100027654;
  id v52 = &unk_1000FA998;
  uint64_t v37 = _Block_copy(&aBlock);
  uint64_t v38 = v54;
  id v39 = v35;
  swift_release(v38);
  [v39 setInvalidationHandler:v37];
  _Block_release(v37);

  uint64_t v40 = type metadata accessor for TaskPriority(0LL);
  uint64_t v41 = (uint64_t)v48;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56LL))(v48, 1LL, 1LL, v40);
  id v42 = (void *)swift_allocObject(&unk_1000FA9D0, 40LL, 7LL);
  v42[2] = 0LL;
  v42[3] = 0LL;
  v42[4] = v25;
  uint64_t v43 = sub_10008033C(v41, (uint64_t)&unk_100114F48, (uint64_t)v42);
  swift_release(v43);
  return v25;
}

void sub_10007A09C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4 + 16;
  swift_beginAccess(a4 + 16, v9, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v6);
  if (Strong)
  {
    uint64_t v8 = (void *)Strong;
    sub_10007A750(a2, a3);
  }

uint64_t sub_10007A108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (a3)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    uint64_t v8 = v7;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v8 = 0LL;
  }

  swift_retain(v4);
  v5(a2, v6, v8);
  swift_release(v4);
  return swift_bridgeObjectRelease(v8);
}

char *sub_10007A17C(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0LL, 0LL);
  id result = (char *)swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = &result[OBJC_IVAR____TtC8FaceTime20RemoteDisplayManager_queue_peerDeviceIdentifier];
    uint64_t v4 = *(void *)&result[OBJC_IVAR____TtC8FaceTime20RemoteDisplayManager_queue_peerDeviceIdentifier + 8];
    *(void *)uint64_t v3 = 0LL;
    *((void *)v3 + 1) = 0LL;

    return (char *)swift_bridgeObjectRelease(v4);
  }

  return result;
}

uint64_t sub_10007A1E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = a4;
  return swift_task_switch(sub_10007A1F8, 0LL, 0LL);
}

uint64_t sub_10007A1F8()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = *(void **)(v0[15] + OBJC_IVAR____TtC8FaceTime20RemoteDisplayManager_remoteDisplayDiscovery);
  v0[2] = v0;
  v0[3] = sub_10007A290;
  uint64_t v3 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v4 = v0 + 10;
  v4[1] = 0x40000000LL;
  void v4[2] = sub_1000798E4;
  v4[3] = &unk_1000FA9E8;
  v4[4] = v3;
  [v2 activateWithCompletion:v4];
  return swift_continuation_await(v1);
}

uint64_t sub_10007A290()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 128LL) = v1;
  if (v1) {
    uint64_t v2 = sub_10007A2F8;
  }
  else {
    uint64_t v2 = sub_10007A2F0;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10007A2F0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007A2F8(uint64_t a1)
{
  if (qword_100112368 != -1) {
    swift_once(&qword_100112368, sub_100079B34);
  }
  uint64_t v2 = *(void *)(v1 + 128);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10001C270(v3, (uint64_t)qword_100114EE8);
  swift_errorRetain(v2);
  uint64_t v4 = swift_errorRetain(v2);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v1 + 128);
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v10 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v9 = 138412290;
    swift_errorRetain(v8);
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(void *)(v1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88, v9 + 4, v9 + 12);
    *id v10 = v11;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Could not activate discovery: %@", v9, 0xCu);
    uint64_t v12 = sub_100018A04((uint64_t *)&unk_100112E20);
    swift_arrayDestroy(v10, 1LL, v12);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    swift_errorRelease(v8);
  }

  else
  {
    swift_errorRelease(*(void *)(v1 + 128));
    swift_errorRelease(v8);
    swift_errorRelease(v8);
  }

  return (*(uint64_t (**)(void))(v1 + 8))();
}

id sub_10007A4EC()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  [*(id *)&v0[OBJC_IVAR____TtC8FaceTime20RemoteDisplayManager_remoteDisplayDiscovery] invalidate];
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for RemoteDisplayManager(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime20RemoteDisplayManager, a2);
}

unint64_t sub_10007A61C()
{
  unint64_t result = qword_100113140;
  if (!qword_100113140)
  {
    uint64_t v1 = sub_10001C334((uint64_t *)&unk_100112DC0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100113140);
  }

  return result;
}

uint64_t sub_10007A668()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10007A68C(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

uint64_t sub_10007A694(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007A6A4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

char *sub_10007A6AC()
{
  return sub_10007A17C(v0);
}

uint64_t sub_10007A6C4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10007A6F0()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_100114F44);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10001C158;
  v3[15] = v2;
  return swift_task_switch(sub_10007A1F8, 0LL, 0LL);
}

double sub_10007A750(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v10 = *(void **)(v3 + OBJC_IVAR____TtC8FaceTime20RemoteDisplayManager_queue);
  void *v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) != 0)
  {
    if (qword_100112368 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100112368, sub_100079B34);
LABEL_3:
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_10001C270(v12, (uint64_t)qword_100114EE8);
  uint64_t v13 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    unint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    uint64_t v26 = v24;
    *(_DWORD *)unint64_t v16 = 136315138;
    if (a2) {
      uint64_t v17 = a1;
    }
    else {
      uint64_t v17 = 0x3E6C696E3CLL;
    }
    if (a2) {
      unint64_t v18 = a2;
    }
    else {
      unint64_t v18 = 0xE500000000000000LL;
    }
    swift_bridgeObjectRetain(a2);
    uint64_t v25 = sub_1000850E4(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Updated discovery session: %s", v16, 0xCu);
    uint64_t v19 = v24;
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  uint64_t v20 = (uint64_t *)(v3 + OBJC_IVAR____TtC8FaceTime20RemoteDisplayManager_queue_peerDeviceIdentifier);
  uint64_t v21 = *(void *)(v3 + OBJC_IVAR____TtC8FaceTime20RemoteDisplayManager_queue_peerDeviceIdentifier + 8);
  *uint64_t v20 = a1;
  v20[1] = a2;
  swift_bridgeObjectRetain(a2);
  *(void *)&double result = swift_bridgeObjectRelease(v21).n128_u64[0];
  return result;
}

void *initializeBufferWithCopyOfBuffer for SplashScreenView(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  id v4 = v3;
  return a1;
}

void *assignWithCopy for SplashScreenView(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)a2[1];
  id v4 = (void *)a1[1];
  a1[1] = v3;
  id v5 = v3;

  return a1;
}

void *assignWithTake for SplashScreenView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  id v4 = (void *)a1[1];
  *a1 = *a2;
  a1[1] = v3;

  return a1;
}

ValueMetadata *type metadata accessor for SplashScreenView()
{
  return &type metadata for SplashScreenView;
}

uint64_t sub_10007AA88(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E8780, 1LL);
}

void sub_10007AA98(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    unint64_t v5 = sub_10007EFA4(0LL, v4);
    uint64_t v6 = sub_10001949C( (unint64_t *)&unk_100112FF0,  (uint64_t (*)(uint64_t))sub_10007EFA4,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v7 = Set.Iterator.init(_cocoa:)(v40, v3, v5, v6);
    uint64_t v1 = v40[0];
    uint64_t v37 = v40[1];
    uint64_t v8 = v40[2];
    uint64_t v9 = v40[3];
    unint64_t v10 = v40[4];
  }

  else
  {
    uint64_t v11 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v37 = a1 + 56;
    uint64_t v12 = ~v11;
    uint64_t v13 = -v11;
    if (v13 < 64) {
      uint64_t v14 = ~(-1LL << v13);
    }
    else {
      uint64_t v14 = -1LL;
    }
    unint64_t v10 = v14 & *(void *)(a1 + 56);
    uint64_t v7 = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v8 = v12;
    uint64_t v9 = 0LL;
  }

  uint64_t v35 = v8;
  int64_t v36 = (unint64_t)(v8 + 64) >> 6;
  uint64_t v38 = UIWindowSceneSessionRoleApplication;
  if ((v1 & 0x8000000000000000LL) == 0) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v15 = __CocoaSet.Iterator.next()(v7);
  if (!v15) {
    goto LABEL_39;
  }
  uint64_t v17 = v15;
  uint64_t v39 = v15;
  unint64_t v18 = sub_10007EFA4(0LL, v16);
  swift_unknownObjectRetain(v17);
  swift_dynamicCast(&v41, &v39, (char *)&type metadata for Swift.AnyObject + 8, v18, 7LL);
  id v19 = v41;
  swift_unknownObjectRelease(v17);
  uint64_t v20 = v9;
  uint64_t v21 = v10;
  if (!v19) {
    goto LABEL_39;
  }
  while (1)
  {
    id v26 = objc_msgSend(v19, "session", v35);
    id v27 = [v26 role];

    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    uint64_t v30 = v29;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    uint64_t v33 = v31;
    if (v28 == v32 && v30 == v31)
    {

      swift_bridgeObjectRelease_n(v30, 2LL);
      goto LABEL_39;
    }

    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v32, v31, 0LL);

    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v33);
    if ((v34 & 1) != 0) {
      goto LABEL_39;
    }

    uint64_t v9 = v20;
    unint64_t v10 = v21;
    if (v1 < 0) {
      goto LABEL_11;
    }
LABEL_14:
    if (!v10) {
      break;
    }
    uint64_t v21 = (v10 - 1) & v10;
    unint64_t v22 = __clz(__rbit64(v10)) | (v9 << 6);
    uint64_t v20 = v9;
LABEL_32:
    id v19 = *(id *)(*(void *)(v1 + 48) + 8 * v22);
    if (!v19) {
      goto LABEL_39;
    }
  }

  int64_t v23 = v9 + 1;
  if (__OFADD__(v9, 1LL))
  {
    __break(1u);
    return;
  }

  if (v23 >= v36) {
    goto LABEL_39;
  }
  unint64_t v24 = *(void *)(v37 + 8 * v23);
  uint64_t v20 = v9 + 1;
  if (v24) {
    goto LABEL_31;
  }
  uint64_t v20 = v9 + 2;
  if (v9 + 2 >= v36) {
    goto LABEL_39;
  }
  unint64_t v24 = *(void *)(v37 + 8 * v20);
  if (v24) {
    goto LABEL_31;
  }
  uint64_t v20 = v9 + 3;
  if (v9 + 3 >= v36) {
    goto LABEL_39;
  }
  unint64_t v24 = *(void *)(v37 + 8 * v20);
  if (v24) {
    goto LABEL_31;
  }
  uint64_t v20 = v9 + 4;
  if (v9 + 4 >= v36) {
    goto LABEL_39;
  }
  unint64_t v24 = *(void *)(v37 + 8 * v20);
  if (v24) {
    goto LABEL_31;
  }
  uint64_t v20 = v9 + 5;
  if (v9 + 5 >= v36) {
    goto LABEL_39;
  }
  unint64_t v24 = *(void *)(v37 + 8 * v20);
  if (v24)
  {
LABEL_31:
    uint64_t v21 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v20 << 6);
    goto LABEL_32;
  }

  uint64_t v25 = v9 + 6;
  while (v36 != v25)
  {
    unint64_t v24 = *(void *)(v37 + 8 * v25++);
    if (v24)
    {
      uint64_t v20 = v25 - 1;
      goto LABEL_31;
    }
  }

uint64_t sub_10007AE2C@<X0>( void (*a1)(void, void, void)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v60 = a3;
  uint64_t v5 = sub_100018A04(&qword_100114F50);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100018A04(&qword_100114F58);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100018A04(&qword_100114F60);
  uint64_t v52 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100018A04(&qword_100114F68);
  uint64_t v57 = *(void *)(v14 - 8);
  uint64_t v58 = v14;
  __chkstk_darwin(v14);
  uint64_t v53 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = sub_100018A04(&qword_100114F70);
  __chkstk_darwin(v55);
  uint64_t v54 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v59 = sub_100018A04(&qword_100114F78);
  uint64_t v17 = __chkstk_darwin(v59);
  uint64_t v56 = (uint64_t)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)uint64_t v7 = static VerticalAlignment.top.getter(v17);
  *((void *)v7 + 1) = 0x4067C00000000000LL;
  v7[16] = 0;
  uint64_t v19 = sub_100018A04(&qword_100114F80);
  uint64_t v20 = sub_10007B2D4(a1, a2, &v7[*(int *)(v19 + 44)]);
  uint64_t v21 = static SafeAreaRegions.all.getter(v20);
  char v22 = static Edge.Set.all.getter();
  sub_10001C3B8((uint64_t)v7, (uint64_t)v10, &qword_100114F50);
  int64_t v23 = &v10[*(int *)(v8 + 36)];
  *(void *)int64_t v23 = v21;
  v23[8] = v22;
  sub_10001C608((uint64_t)v7, &qword_100114F50);
  uint64_t KeyPath = swift_getKeyPath(&unk_1000C6148);
  uint64_t v25 = swift_getKeyPath(&unk_1000C6170);
  id v26 = a2;
  static Published.subscript.getter(v61, v26, KeyPath, v25);

  swift_release(KeyPath);
  swift_release(v25);
  if (LOBYTE(v61[0])) {
    double v27 = 0.0;
  }
  else {
    double v27 = 1.0;
  }
  sub_10001C3B8((uint64_t)v10, (uint64_t)v13, &qword_100114F58);
  *(double *)&v13[*(int *)(v11 + 36)] = v27;
  sub_10001C608((uint64_t)v10, &qword_100114F58);
  uint64_t v28 = type metadata accessor for SplashScreenViewModel(0LL);
  uint64_t v29 = sub_10001949C( (unint64_t *)&unk_1001148F0,  type metadata accessor for SplashScreenViewModel,  (uint64_t)&unk_1000C69C8);
  uint64_t v30 = (void *)ObservedObject.projectedValue.getter(a1, v26, v28, v29);
  uint64_t v31 = swift_getKeyPath(&unk_1000C6190);
  ObservedObject.Wrapper.subscript.getter(v61, v31, v30, v29);
  swift_release(v31);

  uint64_t v32 = v61[0];
  uint64_t v33 = v61[1];
  uint64_t v34 = v62;
  uint64_t v35 = swift_allocObject(&unk_1000FAA90, 32LL, 7LL);
  *(void *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v35 + 24) = v26;
  uint64_t v36 = sub_100080110(&qword_100114F88, &qword_100114F60, (void (*)(void))sub_10007EC6C);
  id v37 = v26;
  uint64_t v38 = v53;
  View.continuityDevicePicker(isPresented:onDidConnect:)(v32, v33, v34, sub_10007EC64, v35, v52, v36);
  swift_release(v33);
  swift_release(v35);
  swift_release(v32);
  sub_10001C608((uint64_t)v13, &qword_100114F60);
  uint64_t v39 = swift_allocObject(&unk_1000FAAB8, 32LL, 7LL);
  *(void *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v39 + 24) = v37;
  uint64_t v41 = v57;
  uint64_t v40 = v58;
  uint64_t v42 = (uint64_t)v54;
  (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v54, v38, v58);
  uint64_t v43 = (uint64_t (**)())(v42 + *(int *)(v55 + 36));
  void *v43 = sub_10007ECF0;
  v43[1] = (uint64_t (*)())v39;
  v43[2] = 0LL;
  v43[3] = 0LL;
  id v44 = *(uint64_t (**)(char *, uint64_t))(v41 + 8);
  id v45 = v37;
  uint64_t v46 = v44(v38, v40);
  uint64_t v47 = static Color.primary.getter(v46);
  uint64_t v48 = swift_getKeyPath(&unk_1000C61B8);
  uint64_t v49 = v56;
  sub_10001C3B8(v42, v56, &qword_100114F70);
  uint64_t v50 = (uint64_t *)(v49 + *(int *)(v59 + 36));
  *uint64_t v50 = v48;
  v50[1] = v47;
  sub_10001C608(v42, &qword_100114F70);
  return sub_100052900(v49, v60, &qword_100114F78);
}

uint64_t sub_10007B2D4@<X0>(void (*a1)(void, void, void)@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_100018A04(&qword_100114FA0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v25[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100018A04(&qword_100114FA8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v25[-1] - v14;
  uint64_t v16 = static HorizontalAlignment.center.getter(v13);
  sub_10007B838(a2, (uint64_t)v30);
  v31[520] = 0;
  memcpy(&v31[7], v30, 0x201uLL);
  uint64_t v26 = v16;
  uint64_t v27 = 0LL;
  char v28 = 0;
  uint64_t v17 = memcpy(v29, v31, sizeof(v29));
  uint64_t v18 = static Alignment.top.getter(v17);
  sub_10007C228(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v25, 0.0, 1, INFINITY, 0, v18, v19);
  uint64_t v20 = sub_10007EFE0((uint64_t)v30);
  *(void *)uint64_t v8 = static HorizontalAlignment.leading.getter(v20);
  *((void *)v8 + 1) = 0x402C000000000000LL;
  v8[16] = 0;
  uint64_t v21 = sub_100018A04(&qword_100114FB0);
  sub_10007C780(a1, a2, (uint64_t)&v8[*(int *)(v21 + 44)]);
  sub_10001C3B8((uint64_t)v8, (uint64_t)v12, &qword_100114FA0);
  *(_OWORD *)&v12[*(int *)(v9 + 36)] = xmmword_1000C60A0;
  sub_10001C608((uint64_t)v8, &qword_100114FA0);
  sub_100052900((uint64_t)v12, (uint64_t)v15, &qword_100114FA8);
  sub_10001C3B8((uint64_t)v15, (uint64_t)v12, &qword_100114FA8);
  memcpy(v32, v25, 0x290uLL);
  __int128 v24 = xmmword_1000C60B0;
  v32[41] = xmmword_1000C60B0;
  memcpy(a3, v32, 0x2A0uLL);
  uint64_t v22 = sub_100018A04(&qword_100114FB8);
  sub_10001C3B8((uint64_t)v12, (uint64_t)a3 + *(int *)(v22 + 48), &qword_100114FA8);
  sub_10007F794((uint64_t)v32);
  sub_10001C608((uint64_t)v15, &qword_100114FA8);
  sub_10001C608((uint64_t)v12, &qword_100114FA8);
  memcpy(v33, v25, sizeof(v33));
  __int128 v34 = v24;
  return sub_10007F0B8((uint64_t)v33);
}

uint64_t sub_10007B580@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10007EABC(a1, (uint64_t)&unk_1000C6190, (uint64_t)&unk_1000C6278, a2);
}

uint64_t sub_10007B594(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10007EB6C(a1, a2, a3, a4, (uint64_t)&unk_1000C6190, (uint64_t)&unk_1000C6278);
}

void sub_10007B5A8(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a1)
  {
    v21[5] = v3;
    v21[6] = v4;
    uint64_t KeyPath = swift_getKeyPath(&unk_1000C6230);
    uint64_t v7 = swift_getKeyPath(&unk_1000C6258);
    id v8 = a3;
    static Published.subscript.getter(v21, v8, KeyPath, v7);

    swift_release(KeyPath);
    swift_release(v7);
    uint64_t v9 = *(void *)(v21[0] + 16LL);
    swift_bridgeObjectRelease(v21[0]);
    if (v9)
    {
      uint64_t v11 = swift_getKeyPath(&unk_1000C6148);
      uint64_t v12 = swift_getKeyPath(&unk_1000C6170);
      LOBYTE(v21[0]) = 0;
      static Published.subscript.setter(v21, v8, v11, v12);
    }

    else
    {
      id v13 = objc_msgSend((id)objc_opt_self(UIApplication, v10), "sharedApplication");
      id v14 = [v13 connectedScenes];
      unint64_t v16 = sub_10007EFA4(0LL, v15);
      uint64_t v17 = sub_10001949C( (unint64_t *)&unk_100112FF0,  (uint64_t (*)(uint64_t))sub_10007EFA4,  (uint64_t)&protocol conformance descriptor for NSObject);
      uint64_t v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v14, v16, v17);

      sub_10007AA98(v18);
      uint64_t v20 = v19;
      swift_bridgeObjectRelease(v18);
      if (v20)
      {
        UIScene.dismissScene()();
      }

      else
      {
      }
    }
  }

uint64_t sub_10007B724(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100018A04(&qword_100115790);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  id v8 = (char *)&v14 - v7;
  id v9 = a2;
  sub_10008EA20(1);

  uint64_t v10 = type metadata accessor for NearbyConversationViewModel(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v8, 1LL, 1LL, v10);
  uint64_t KeyPath = swift_getKeyPath(&unk_1000C61E8);
  uint64_t v12 = swift_getKeyPath(&unk_1000C6210);
  sub_10001C3B8((uint64_t)v8, (uint64_t)v6, &qword_100115790);
  static Published.subscript.setter(v6, v9, KeyPath, v12);
  return sub_10001C608((uint64_t)v8, &qword_100115790);
}

uint64_t sub_10007B838@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Image.ResizingMode(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = Image.init(_:bundle:)(0xD000000000000014LL, 0x80000001000DB900LL, 0LL);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
  uint64_t v154 = Image.resizable(capInsets:resizingMode:)(v7, v8, 0.0, 0.0, 0.0, 0.0);
  swift_release(v8);
  uint64_t v9 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v10 = static Alignment.center.getter(v9);
  uint64_t v12 = _FrameLayout.init(width:height:alignment:)( &v226,  0x4077200000000000LL,  0LL,  0x406BC00000000000LL,  0LL,  v10,  v11);
  uint64_t v152 = v228;
  uint64_t v153 = v226;
  int v144 = v229;
  int v145 = v227;
  uint64_t v150 = v231;
  uint64_t v151 = v230;
  uint64_t v13 = static Alignment.center.getter(v12);
  _FrameLayout.init(width:height:alignment:)(&v232, 0LL, 1LL, 0x404E000000000000LL, 0LL, v13, v14);
  uint64_t v148 = v234;
  uint64_t v149 = v232;
  int v142 = v235;
  int v143 = v233;
  uint64_t v146 = v237;
  uint64_t v147 = v236;
  uint64_t KeyPath = swift_getKeyPath(&unk_1000C6230);
  uint64_t v16 = swift_getKeyPath(&unk_1000C6258);
  id v17 = a1;
  static Published.subscript.getter(&v214, v17, KeyPath, v16);

  swift_release(KeyPath);
  swift_release(v16);
  uint64_t v18 = *(void *)(v214._countAndFlagsBits + 16);
  swift_bridgeObjectRelease(v214._countAndFlagsBits);
  uint64_t v20 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v19), "mainBundle");
  if (v18)
  {
    unint64_t v21 = 0xD000000000000028LL;
    unint64_t v129 = 0xEB00000000656C62LL;
    uint64_t v22 = "SplashScreenWithNearbyConversationsTitle";
  }

  else
  {
    unint64_t v21 = 0xD00000000000002BLL;
    unint64_t v129 = 0xEB00000000656C62LL;
    uint64_t v22 = "SplashScreenWithoutNearbyConversationsTitle";
  }

  unint64_t v23 = (unint64_t)(v22 - 32) | 0x8000000000000000LL;
  v24._uint64_t countAndFlagsBits = 0LL;
  v24._object = (void *)0xE000000000000000LL;
  uint64_t v25 = 0x617A696C61636F4CLL;
  Swift::String v26 = NSLocalizedString(_:tableName:bundle:value:comment:)( *(Swift::String *)&v21,  (Swift::String_optional)0,  v20,  v24,  *(Swift::String *)(&v129 - 1));

  Swift::String v214 = v26;
  unint64_t v135 = sub_10001BB20();
  uint64_t v27 = Text.init<A>(_:)(&v214, &type metadata for String, v135);
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32 & 1;
  uint64_t v34 = static Font.title3.getter();
  uint64_t v35 = Text.font(_:)(v34, v27, v29, v33, v31);
  uint64_t v37 = v36;
  char v39 = v38;
  uint64_t v141 = v40;
  swift_release(v34);
  uint64_t v41 = v39 & 1;
  sub_10007F098(v27, v29, v33);
  __n128 v42 = swift_bridgeObjectRelease(v31);
  uint64_t v43 = v141;
  uint64_t v44 = Text.bold()(v35, v37, v41, v141, v42);
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v50 = v49 & 1;
  sub_10007F098(v35, v37, v41);
  __n128 v51 = swift_bridgeObjectRelease(v43);
  uint64_t v52 = static Color.secondary.getter(v51);
  uint64_t v141 = Text.foregroundColor(_:)(v52, v44, v46, v50, v48);
  uint64_t v54 = v53;
  LOBYTE(v43) = v55;
  uint64_t v57 = v56;
  swift_release(v52);
  sub_10007F098(v44, v46, v50);
  swift_bridgeObjectRelease(v48);
  uint64_t v59 = static Alignment.center.getter(v58);
  uint64_t v60 = v57;
  uint64_t v130 = v57;
  uint64_t v61 = v141;
  sub_10007C3D4(0.0, 1, 0.0, 1, 760.0, 0, 0.0, 1, (uint64_t)v225, 0.0, 1, 0.0, 1, v59, v62, v141, v54, v43 & 1, v130);
  sub_10007F098(v61, v54, v43 & 1);
  swift_bridgeObjectRelease(v60);
  __int128 v170 = v225[6];
  __int128 v171 = v225[7];
  __int128 v172 = v225[8];
  __int128 v166 = v225[2];
  __int128 v167 = v225[3];
  __int128 v168 = v225[4];
  __int128 v169 = v225[5];
  Swift::String v164 = (Swift::String)v225[0];
  __int128 v165 = v225[1];
  uint64_t v134 = swift_getKeyPath(&unk_1000C6298);
  uint64_t v63 = static Alignment.center.getter(v134);
  _FrameLayout.init(width:height:alignment:)(&v238, 0LL, 1LL, 0x4036000000000000LL, 0LL, v63, v64);
  uint64_t v140 = v240;
  uint64_t v141 = v238;
  int v136 = v241;
  int v137 = v239;
  uint64_t v138 = v243;
  uint64_t v139 = v242;
  id v66 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v65), "mainBundle");
  v67._uint64_t countAndFlagsBits = 0xD000000000000026LL;
  v244._object = (void *)0xEB00000000656C62LL;
  v67._object = (void *)0x80000001000DB950LL;
  v68._uint64_t countAndFlagsBits = 0LL;
  v68._object = (void *)0xE000000000000000LL;
  v244._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  Swift::String v69 = NSLocalizedString(_:tableName:bundle:value:comment:)(v67, (Swift::String_optional)0, v66, v68, v244);

  Swift::String v214 = v69;
  uint64_t v70 = Text.init<A>(_:)(&v214, &type metadata for String, v135);
  uint64_t v72 = v71;
  uint64_t v74 = v73;
  uint64_t v76 = v75 & 1;
  uint64_t v77 = static Font.body.getter();
  uint64_t v78 = Text.font(_:)(v77, v70, v72, v76, v74);
  uint64_t v80 = v79;
  LOBYTE(v46) = v81;
  uint64_t v133 = v82;
  swift_release(v77);
  uint64_t v83 = v46 & 1;
  sub_10007F098(v70, v72, v76);
  __n128 v84 = swift_bridgeObjectRelease(v74);
  uint64_t v85 = static Color.secondary.getter(v84);
  uint64_t v86 = v133;
  unint64_t v135 = Text.foregroundColor(_:)(v85, v78, v80, v83, v133);
  uint64_t v88 = v87;
  LOBYTE(v76) = v89;
  uint64_t v91 = v90;
  swift_release(v85);
  sub_10007F098(v78, v80, v83);
  swift_bridgeObjectRelease(v86);
  uint64_t v93 = static Alignment.center.getter(v92);
  uint64_t v94 = v91;
  uint64_t v131 = v91;
  uint64_t v95 = v135;
  sub_10007C3D4(0.0, 1, 0.0, 1, 760.0, 0, 0.0, 1, (uint64_t)&v214, 0.0, 1, 0.0, 1, v93, v96, v135, v88, v76 & 1, v131);
  sub_10007F098(v95, v88, v76 & 1);
  swift_bridgeObjectRelease(v94);
  __int128 v161 = v220;
  __int128 v162 = v221;
  __int128 v163 = v222;
  __int128 v157 = v216;
  __int128 v158 = v217;
  __int128 v159 = v218;
  __int128 v160 = v219;
  Swift::String v155 = v214;
  __int128 v156 = v215;
  uint64_t v97 = swift_getKeyPath(&unk_1000C6298);
  __int128 v179 = v170;
  __int128 v180 = v171;
  v181[0] = v172;
  __int128 v175 = v166;
  __int128 v176 = v167;
  __int128 v177 = v168;
  __int128 v178 = v169;
  Swift::String v173 = v164;
  __int128 v174 = v165;
  uint64_t v98 = v134;
  *(void *)&v181[1] = v134;
  BYTE8(v181[1]) = 1;
  __int128 v99 = v161;
  __int128 v100 = v162;
  __int128 v188 = v161;
  __int128 v189 = v162;
  __int128 v101 = v163;
  *(_OWORD *)v190 = v163;
  __int128 v102 = v157;
  __int128 v103 = v158;
  __int128 v184 = v157;
  __int128 v185 = v158;
  __int128 v105 = v159;
  __int128 v104 = v160;
  __int128 v186 = v159;
  __int128 v187 = v160;
  Swift::String v107 = v155;
  __int128 v106 = v156;
  Swift::String v182 = v155;
  __int128 v183 = v156;
  *(void *)&v190[16] = v97;
  v190[24] = 1;
  __int128 v108 = v171;
  *(_OWORD *)(a2 + 232) = v170;
  *(_OWORD *)(a2 + 24_Block_object_dispose(va, 8) = v108;
  *(_OWORD *)(a2 + 264) = v181[0];
  *(_OWORD *)(a2 + 273) = *(_OWORD *)((char *)v181 + 9);
  __int128 v109 = v176;
  *(_OWORD *)(a2 + 16_Block_object_dispose(va, 8) = v175;
  *(_OWORD *)(a2 + 184) = v109;
  __int128 v110 = v178;
  *(_OWORD *)(a2 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v177;
  *(_OWORD *)(a2 + 2swift_unknownObjectWeakDestroy(v0 + 16) = v110;
  __int128 v111 = v174;
  *(Swift::String *)(a2 + 136) = v173;
  *(_OWORD *)(a2 + 152) = v111;
  __int128 v112 = v189;
  *(_OWORD *)(a2 + 456) = v188;
  *(_OWORD *)(a2 + 472) = v112;
  *(_OWORD *)(a2 + 48_Block_object_dispose(va, 8) = *(_OWORD *)v190;
  *(_OWORD *)(a2 + 497) = *(_OWORD *)&v190[9];
  __int128 v113 = v185;
  *(_OWORD *)(a2 + 392) = v184;
  *(_OWORD *)(a2 + 40_Block_object_dispose(va, 8) = v113;
  __int128 v114 = v187;
  *(_OWORD *)(a2 + 424) = v186;
  *(_OWORD *)(a2 + 44_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v114;
  __int128 v115 = v183;
  *(Swift::String *)(a2 + 36_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v182;
  *(_OWORD *)(a2 + 376) = v115;
  v211[6] = v99;
  v211[7] = v100;
  v211[8] = v101;
  v211[2] = v102;
  v211[3] = v103;
  v211[4] = v105;
  v211[5] = v104;
  char v210 = 1;
  char v207 = v145;
  char v205 = v144;
  char v203 = 1;
  char v201 = v143;
  char v199 = v142;
  char v196 = 1;
  char v194 = v137;
  char v192 = v136;
  *(_DWORD *)(a2 + 1_Block_object_dispose(va, 8) = v208;
  *(_WORD *)(a2 + 22) = v209;
  char v116 = v207;
  *(_DWORD *)(a2 + 33) = *(_DWORD *)v206;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)&v206[3];
  char v117 = v205;
  *(_DWORD *)(a2 + 49) = *(_DWORD *)v204;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)&v204[3];
  char v118 = v203;
  int v119 = *(_DWORD *)v202;
  *(_DWORD *)(a2 + 84) = *(_DWORD *)&v202[3];
  *(_DWORD *)(a2 + 81) = v119;
  LOBYTE(v119) = v201;
  *(_DWORD *)(a2 + 97) = *(_DWORD *)v200;
  *(_DWORD *)(a2 + 10_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = *(_DWORD *)&v200[3];
  char v120 = v199;
  *(_DWORD *)(a2 + 113) = *(_DWORD *)v198;
  *(_DWORD *)(a2 + 1swift_unknownObjectWeakDestroy(v0 + 16) = *(_DWORD *)&v198[3];
  *(_DWORD *)(a2 + 289) = *(_DWORD *)v197;
  *(_DWORD *)(a2 + 292) = *(_DWORD *)&v197[3];
  char v121 = v196;
  int v122 = *(_DWORD *)v195;
  *(_DWORD *)(a2 + 30_Block_object_dispose(va, 8) = *(_DWORD *)&v195[3];
  *(_DWORD *)(a2 + 305) = v122;
  LOBYTE(v122) = v194;
  *(_DWORD *)(a2 + 324) = *(_DWORD *)&v193[3];
  *(_DWORD *)(a2 + 321) = *(_DWORD *)v193;
  char v123 = v192;
  *(_DWORD *)(a2 + 34_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = *(_DWORD *)&v191[3];
  *(_DWORD *)(a2 + 337) = *(_DWORD *)v191;
  uint64_t v124 = v154;
  *(void *)a2 = v154;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  *(_WORD *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
  *(void *)(a2 + 24) = v153;
  *(_BYTE *)(a2 + 32) = v116;
  *(void *)(a2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v152;
  *(_BYTE *)(a2 + 4_Block_object_dispose(va, 8) = v117;
  uint64_t v125 = v150;
  *(void *)(a2 + 56) = v151;
  *(void *)(a2 + 64) = v125;
  *(void *)(a2 + 72) = 0LL;
  *(_BYTE *)(a2 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v118;
  *(void *)(a2 + 8_Block_object_dispose(va, 8) = v149;
  *(_BYTE *)(a2 + 96) = v119;
  *(void *)(a2 + 104) = v148;
  *(_BYTE *)(a2 + 112) = v120;
  uint64_t v126 = v146;
  *(void *)(a2 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v147;
  *(void *)(a2 + 12_Block_object_dispose(va, 8) = v126;
  *(void *)(a2 + 296) = 0LL;
  *(_BYTE *)(a2 + 304) = v121;
  *(void *)(a2 + 312) = v141;
  *(_BYTE *)(a2 + 32_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v122;
  *(void *)(a2 + 32_Block_object_dispose(va, 8) = v140;
  *(_BYTE *)(a2 + 336) = v123;
  uint64_t v127 = v138;
  *(void *)(a2 + 344) = v139;
  *(void *)(a2 + 352) = v127;
  v211[0] = v107;
  v211[1] = v106;
  uint64_t v212 = v97;
  char v213 = 1;
  swift_retain(v124);
  sub_10007F84C((uint64_t)&v173);
  sub_10007F84C((uint64_t)&v182);
  sub_10007F89C((uint64_t)v211);
  __int128 v220 = v170;
  __int128 v221 = v171;
  __int128 v222 = v172;
  __int128 v216 = v166;
  __int128 v217 = v167;
  __int128 v219 = v169;
  __int128 v218 = v168;
  __int128 v215 = v165;
  Swift::String v214 = v164;
  uint64_t v223 = v98;
  char v224 = 1;
  sub_10007F89C((uint64_t)&v214);
  return swift_release(v124);
}

uint64_t sub_10007C228@<X0>( double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16 = v15;
  uint64_t v18 = a15;
  double v19 = a12;
  double v20 = a10;
  uint64_t v21 = a2 & 1;
  double v22 = a1;
  if ((_DWORD)v21) {
    double v22 = -INFINITY;
  }
  uint64_t v23 = a4 & 1;
  double v24 = a3;
  if ((a4 & 1) != 0) {
    double v24 = v22;
  }
  uint64_t v25 = a6 & 1;
  uint64_t v26 = a8 & 1;
  double v27 = a5;
  if ((a6 & 1) != 0) {
    double v27 = v24;
  }
  if (v22 > v24 || v24 > v27) {
    goto LABEL_22;
  }
  double v29 = a7;
  if ((a8 & 1) != 0) {
    double v29 = -INFINITY;
  }
  double v30 = a10;
  if ((a11 & 1) != 0) {
    double v30 = v29;
  }
  double v31 = a12;
  if ((a13 & 1) != 0) {
    double v31 = v30;
  }
  if (v29 > v30 || v30 > v31)
  {
LABEL_22:
    double v42 = a5;
    double v43 = a7;
    double v41 = a3;
    double v40 = a1;
    unsigned int v39 = v21;
    uint64_t v33 = static os_log_type_t.fault.getter();
    uint64_t v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)( v33,  &_mh_execute_header,  v34,  "Contradictory frame constraints specified.",  42LL,  2LL,  _swiftEmptyArrayStorage);

    uint64_t v18 = a15;
    uint64_t v21 = v39;
    double v20 = a10;
    a1 = v40;
    a3 = v41;
    double v19 = a12;
    a5 = v42;
    a7 = v43;
  }

  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)( v44,  *(void *)&a1,  v21,  *(void *)&a3,  v23,  *(void *)&a5,  v25,  *(void *)&a7,  v26,  *(void *)&v20,  a11 & 1,  *(void *)&v19,  a13 & 1,  a14,  v18);
  memcpy(a9, v16, 0x219uLL);
  __int128 v35 = v44[5];
  a9[38] = v44[4];
  a9[39] = v35;
  a9[40] = v44[6];
  __int128 v36 = v44[1];
  a9[34] = v44[0];
  a9[35] = v36;
  __int128 v37 = v44[3];
  a9[36] = v44[2];
  a9[37] = v37;
  return sub_10007F794((uint64_t)v16);
}

uint64_t sub_10007C3D4@<X0>( double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  uint64_t v20 = a19;
  char v21 = a18;
  uint64_t v22 = a17;
  uint64_t v24 = a14;
  uint64_t v23 = a15;
  double v25 = a12;
  double v26 = a10;
  uint64_t v27 = a2 & 1;
  double v28 = a1;
  if ((_DWORD)v27) {
    double v28 = -INFINITY;
  }
  uint64_t v29 = a4 & 1;
  double v30 = a3;
  if ((_DWORD)v29) {
    double v30 = v28;
  }
  uint64_t v31 = a6 & 1;
  uint64_t v32 = a8 & 1;
  char v33 = a13 & 1;
  double v34 = a5;
  if ((a6 & 1) != 0) {
    double v34 = v30;
  }
  if (v28 > v30 || v30 > v34) {
    goto LABEL_22;
  }
  double v36 = a7;
  if ((a8 & 1) != 0) {
    double v36 = -INFINITY;
  }
  double v37 = a10;
  if ((a11 & 1) != 0) {
    double v37 = v36;
  }
  double v38 = a12;
  if ((a13 & 1) != 0) {
    double v38 = v37;
  }
  if (v36 > v37 || v37 > v38)
  {
LABEL_22:
    double v50 = a7;
    double v51 = a5;
    double v48 = a1;
    double v49 = a3;
    unsigned int v47 = v27;
    unsigned int v46 = v29;
    uint64_t v40 = static os_log_type_t.fault.getter();
    double v41 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)( v40,  &_mh_execute_header,  v41,  "Contradictory frame constraints specified.",  42LL,  2LL,  _swiftEmptyArrayStorage);

    char v33 = a13 & 1;
    uint64_t v29 = v46;
    uint64_t v24 = a14;
    uint64_t v23 = a15;
    uint64_t v27 = v47;
    double v26 = a10;
    double v25 = a12;
    a1 = v48;
    a3 = v49;
    a7 = v50;
    a5 = v51;
    char v21 = a18;
    uint64_t v20 = a19;
    uint64_t v22 = a17;
  }

  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)( v52,  *(void *)&a1,  v27,  *(void *)&a3,  v29,  *(void *)&a5,  v31,  *(void *)&a7,  v32,  *(void *)&v26,  a11 & 1,  *(void *)&v25,  v33,  v24,  v23);
  *(void *)a9 = a16;
  *(void *)(a9 + _Block_object_dispose(va, 8) = v22;
  *(_BYTE *)(a9 + swift_unknownObjectWeakDestroy(v0 + 16) = v21 & 1;
  *(void *)(a9 + 24) = v20;
  __int128 v42 = v52[5];
  *(_OWORD *)(a9 + 96) = v52[4];
  *(_OWORD *)(a9 + 112) = v42;
  *(_OWORD *)(a9 + 12_Block_object_dispose(va, 8) = v52[6];
  __int128 v43 = v52[1];
  *(_OWORD *)(a9 + 32) = v52[0];
  *(_OWORD *)(a9 + 4_Block_object_dispose(va, 8) = v43;
  __int128 v44 = v52[3];
  *(_OWORD *)(a9 + 64) = v52[2];
  *(_OWORD *)(a9 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v44;
  sub_10007F0A8(a16, v22, v21 & 1);
  return swift_bridgeObjectRetain(v20);
}

__n128 sub_10007C5B4@<Q0>( double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v18 = v17;
  uint64_t v19 = a9;
  uint64_t v20 = a17;
  uint64_t v22 = a14;
  uint64_t v21 = a15;
  double v23 = a12;
  double v24 = a10;
  uint64_t v25 = a2 & 1;
  double v26 = a1;
  if ((_DWORD)v25) {
    double v26 = -INFINITY;
  }
  uint64_t v27 = a4 & 1;
  double v28 = a3;
  if ((_DWORD)v27) {
    double v28 = v26;
  }
  uint64_t v29 = a6 & 1;
  uint64_t v30 = a8 & 1;
  double v31 = a5;
  if ((a6 & 1) != 0) {
    double v31 = v28;
  }
  if (v26 > v28 || v28 > v31) {
    goto LABEL_22;
  }
  double v33 = a7;
  if ((a8 & 1) != 0) {
    double v33 = -INFINITY;
  }
  double v34 = a10;
  if ((a11 & 1) != 0) {
    double v34 = v33;
  }
  double v35 = a12;
  if ((a13 & 1) != 0) {
    double v35 = v34;
  }
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    double v49 = a5;
    double v50 = a7;
    double v47 = a3;
    double v48 = a1;
    unsigned int v46 = v25;
    unsigned int v45 = v27;
    uint64_t v38 = static os_log_type_t.fault.getter();
    unsigned int v39 = (void *)static Log.runtimeIssuesLog.getter();
    uint64_t v40 = v38;
    uint64_t v19 = a9;
    os_log(_:dso:log:_:_:)( v40,  &_mh_execute_header,  v39,  "Contradictory frame constraints specified.",  42LL,  2LL,  _swiftEmptyArrayStorage);

    uint64_t v27 = v45;
    uint64_t v22 = a14;
    uint64_t v21 = a15;
    uint64_t v25 = v46;
    double v24 = a10;
    double v23 = a12;
    a3 = v47;
    a1 = v48;
    a5 = v49;
    a7 = v50;
    uint64_t v20 = a17;
  }

  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)( v51,  *(void *)&a1,  v25,  *(void *)&a3,  v27,  *(void *)&a5,  v29,  *(void *)&a7,  v30,  *(void *)&v24,  a11 & 1,  *(void *)&v23,  a13 & 1,  v22,  v21);
  sub_10001C3B8(v18, v19, a16);
  uint64_t v41 = v19 + *(int *)(sub_100018A04(v20) + 36);
  __int128 v42 = v51[5];
  *(_OWORD *)(v41 + 64) = v51[4];
  *(_OWORD *)(v41 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v42;
  *(_OWORD *)(v41 + 96) = v51[6];
  __int128 v43 = v51[1];
  *(_OWORD *)uint64_t v41 = v51[0];
  *(_OWORD *)(v41 + swift_unknownObjectWeakDestroy(v0 + 16) = v43;
  __n128 result = (__n128)v51[3];
  *(_OWORD *)(v41 + 32) = v51[2];
  *(__n128 *)(v41 + 4_Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_10007C780@<X0>( void (*a1)(void, void, void)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v174 = a1;
  uint64_t v181 = a3;
  uint64_t v167 = sub_100018A04(&qword_100114FC0);
  __chkstk_darwin(v167);
  __int128 v157 = (uint64_t *)((char *)&v156 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v163 = sub_100018A04(&qword_100114FC8);
  __chkstk_darwin(v163);
  uint64_t v166 = (uint64_t)&v156 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v165 = sub_100018A04(&qword_100114FD0);
  __chkstk_darwin(v165);
  __int128 v158 = (uint64_t *)((char *)&v156 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v182 = sub_100018A04(&qword_100114FD8);
  uint64_t v172 = *(void *)(v182 - 8);
  uint64_t v7 = __chkstk_darwin(v182);
  Swift::String v173 = (char *)&v156 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  __int128 v175 = (char *)&v156 - v9;
  uint64_t v171 = sub_100018A04(&qword_100114FE0);
  uint64_t v169 = *(void *)(v171 - 8);
  uint64_t v10 = __chkstk_darwin(v171);
  __int128 v168 = (char *)&v156 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  __int128 v170 = (char *)&v156 - v12;
  uint64_t v176 = sub_100018A04(&qword_100114FE8);
  __chkstk_darwin(v176);
  uint64_t v180 = (uint64_t)&v156 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v178 = sub_100018A04(&qword_100114FF0);
  uint64_t v160 = *(void *)(v178 - 8);
  __chkstk_darwin(v178);
  uint64_t v15 = (char *)&v156 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v179 = sub_100018A04(&qword_100114FF8);
  uint64_t v162 = *(void *)(v179 - 8);
  uint64_t v16 = __chkstk_darwin(v179);
  uint64_t v159 = (uint64_t)&v156 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  __int128 v161 = (char *)&v156 - v18;
  uint64_t v177 = sub_100018A04(&qword_100115000);
  __chkstk_darwin(v177);
  Swift::String v164 = (char *)&v156 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100018A04(&qword_100115790);
  __chkstk_darwin(v20);
  uint64_t v22 = (uint64_t *)((char *)&v156 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v23 = type metadata accessor for NearbyConversationViewModel(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(void *)(v24 + 64);
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v156 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v156 - v28;
  uint64_t KeyPath = swift_getKeyPath(&unk_1000C61E8);
  uint64_t v31 = swift_getKeyPath(&unk_1000C6210);
  id v32 = a2;
  static Published.subscript.getter(v22, v32, KeyPath, v31);

  swift_release(KeyPath);
  swift_release(v31);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23) == 1)
  {
    sub_10001C608((uint64_t)v22, &qword_100115790);
    uint64_t v33 = swift_getKeyPath(&unk_1000C6230);
    uint64_t v34 = swift_getKeyPath(&unk_1000C6258);
    id v35 = v32;
    static Published.subscript.getter(&v183, v35, v33, v34);

    swift_release(v33);
    swift_release(v34);
    uint64_t v36 = *(void *)(v183._countAndFlagsBits + 16);
    swift_bridgeObjectRelease(v183._countAndFlagsBits);
    if (v36)
    {
      unsigned int v39 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v38), "mainBundle");
      v193._char object = (void *)0xEB00000000656C62LL;
      v40._char object = (void *)0x80000001000DB880LL;
      v40._uint64_t countAndFlagsBits = 0xD000000000000029LL;
      v41._uint64_t countAndFlagsBits = 0LL;
      v41._char object = (void *)0xE000000000000000LL;
      v193._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
      Swift::String v42 = NSLocalizedString(_:tableName:bundle:value:comment:)(v40, (Swift::String_optional)0, v39, v41, v193);

      Swift::String v183 = v42;
      unint64_t v43 = sub_10001BB20();
      uint64_t v44 = Text.init<A>(_:)(&v183, &type metadata for String, v43);
      uint64_t v46 = v45;
      uint64_t v48 = v47;
      uint64_t v50 = v49 & 1;
      uint64_t v51 = static Font.body.getter(v44);
      uint64_t v52 = Text.font(_:)(v51, v44, v46, v50, v48);
      uint64_t v54 = v53;
      char v56 = v55;
      uint64_t v58 = v57;
      swift_release(v51);
      LOBYTE(v51) = v56 & 1;
      sub_10007F098(v44, v46, v50);
      __n128 v59 = swift_bridgeObjectRelease(v48);
      double v60 = static Font.Weight.bold.getter(v59);
      uint64_t v61 = Text.fontWeight(_:)(*(void *)&v60, 0LL, v52, v54, v56 & 1, v58);
      uint64_t v63 = v62;
      uint64_t v65 = v64;
      uint64_t v67 = v66 & 1;
      sub_10007F098(v52, v54, v51);
      __n128 v68 = swift_bridgeObjectRelease(v58);
      uint64_t v69 = static Color.secondary.getter(v68);
      uint64_t v159 = Text.foregroundColor(_:)(v69, v61, v63, v67, v65);
      __int128 v157 = v70;
      LOBYTE(v52) = v71;
      uint64_t v162 = v72;
      swift_release(v69);
      LODWORD(v161) = v52 & 1;
      sub_10007F098(v61, v63, v67);
      swift_bridgeObjectRelease(v65);
      uint64_t v160 = swift_getKeyPath(&unk_1000C6298);
      uint64_t v73 = swift_getKeyPath(&unk_1000C6230);
      uint64_t v74 = swift_getKeyPath(&unk_1000C6258);
      id v75 = v35;
      static Published.subscript.getter(&v183, v75, v73, v74);

      swift_release(v73);
      swift_release(v74);
      uint64_t v76 = swift_getKeyPath(&unk_1000C62C8);
      uint64_t v77 = swift_allocObject(&unk_1000FAAE0, 32LL, 7LL);
      uint64_t v78 = v174;
      *(void *)(v77 + swift_unknownObjectWeakDestroy(v0 + 16) = v174;
      *(void *)(v77 + 24) = v75;
      id v79 = v75;
      uint64_t v80 = sub_100018A04(&qword_100115008);
      uint64_t v81 = sub_100018A04(&qword_100115010);
      uint64_t v82 = sub_100022750(&qword_100115018, &qword_100115008, (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v83 = sub_10001949C( &qword_1001136D0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      unint64_t v84 = sub_10007F1C4();
      uint64_t v85 = v170;
      ForEach<>.init(_:id:content:)(&v183, v76, sub_10007F1BC, v77, v80, v81, v82, v83, v84);
      uint64_t v86 = v175;
      sub_10007D97C((uint64_t)v78, v79);
      uint64_t v87 = *(void (**)(char *, char *, uint64_t))(v169 + 16);
      uint64_t v88 = v168;
      uint64_t v89 = v171;
      v87(v168, v85, v171);
      __int128 v174 = *(void (**)(void, void, void))(v172 + 16);
      uint64_t v90 = v173;
      v174(v173, v86, v182);
      uint64_t v91 = (uint64_t)v158;
      uint64_t v92 = v159;
      uint64_t v93 = (uint64_t)v157;
      *__int128 v158 = v159;
      *(void *)(v91 + _Block_object_dispose(va, 8) = v93;
      LOBYTE(v8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = (_BYTE)v161;
      *(_BYTE *)(v91 + swift_unknownObjectWeakDestroy(v0 + 16) = (_BYTE)v161;
      uint64_t v94 = v162;
      uint64_t v95 = v160;
      *(void *)(v91 + 24) = v162;
      *(void *)(v91 + 32) = v95;
      *(_BYTE *)(v91 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = 0;
      uint64_t v96 = sub_100018A04(&qword_100115030);
      v87((char *)(v91 + *(int *)(v96 + 48)), v88, v89);
      uint64_t v97 = v182;
      v174(v91 + *(int *)(v96 + 64), v90, v182);
      sub_10007F0A8(v92, v93, v80);
      uint64_t v98 = v94;
      swift_bridgeObjectRetain(v94);
      uint64_t v99 = v160;
      swift_retain(v160);
      uint64_t v100 = v92;
      uint64_t v101 = v92;
      uint64_t v102 = v93;
      sub_10007F0A8(v100, v93, v80);
      __int128 v103 = *(void (**)(char *, uint64_t, __n128))(v172 + 8);
      swift_bridgeObjectRetain(v98);
      __n128 v104 = swift_retain(v99);
      v103(v173, v97, v104);
      __int128 v105 = *(void (**)(char *, uint64_t))(v169 + 8);
      uint64_t v106 = v171;
      v105(v168, v171);
      sub_10007F098(v101, v102, v80);
      uint64_t v107 = v99;
      swift_release(v99);
      swift_bridgeObjectRelease(v98);
      uint64_t v108 = v166;
      sub_10001C3B8(v91, v166, &qword_100114FD0);
      swift_storeEnumTagMultiPayload(v108, v163, 0LL);
      uint64_t v109 = sub_100022750( &qword_100115038,  &qword_100114FD0,  (uint64_t)&protocol conformance descriptor for TupleView<A>);
      uint64_t v110 = sub_100022750( &qword_100115040,  &qword_100114FC0,  (uint64_t)&protocol conformance descriptor for TupleView<A>);
      uint64_t v111 = (uint64_t)v164;
      _ConditionalContent<>.init(storage:)(v108, v165, v167, v109, v110);
      sub_10001C608(v91, &qword_100114FD0);
      ((void (*)(char *, uint64_t))v103)(v175, v182);
      v105(v170, v106);
      sub_10007F098(v159, v102, (char)v161);
      swift_release(v107);
      swift_bridgeObjectRelease(v162);
    }

    else
    {
      uint64_t v131 = static Alignment.center.getter(v37);
      _FrameLayout.init(width:height:alignment:)(&v183, 0LL, 1LL, 0x4049000000000000LL, 0LL, v131, v132);
      uint64_t countAndFlagsBits = v183._countAndFlagsBits;
      char object = (char)v183._object;
      uint64_t v171 = v184;
      char v135 = v185;
      uint64_t v136 = v186;
      uint64_t v137 = v187;
      uint64_t v138 = v175;
      sub_10007D97C((uint64_t)v174, v35);
      uint64_t v139 = v172;
      uint64_t v140 = *(void (**)(char *, char *, uint64_t))(v172 + 16);
      uint64_t v141 = v173;
      uint64_t v142 = v182;
      v140(v173, v138, v182);
      uint64_t v143 = (uint64_t)v157;
      void *v157 = 0LL;
      *(_BYTE *)(v143 + _Block_object_dispose(va, 8) = 1;
      *(void *)(v143 + swift_unknownObjectWeakDestroy(v0 + 16) = countAndFlagsBits;
      *(_BYTE *)(v143 + 24) = object;
      *(void *)(v143 + 32) = v171;
      *(_BYTE *)(v143 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v135;
      *(void *)(v143 + 4_Block_object_dispose(va, 8) = v136;
      *(void *)(v143 + 56) = v137;
      uint64_t v144 = sub_100018A04(&qword_100115068);
      v140((char *)(v143 + *(int *)(v144 + 48)), v141, v142);
      int v145 = *(void (**)(char *, uint64_t))(v139 + 8);
      v145(v141, v142);
      uint64_t v146 = v166;
      sub_10001C3B8(v143, v166, &qword_100114FC0);
      swift_storeEnumTagMultiPayload(v146, v163, 1LL);
      uint64_t v147 = sub_100022750( &qword_100115038,  &qword_100114FD0,  (uint64_t)&protocol conformance descriptor for TupleView<A>);
      uint64_t v148 = sub_100022750( &qword_100115040,  &qword_100114FC0,  (uint64_t)&protocol conformance descriptor for TupleView<A>);
      uint64_t v111 = (uint64_t)v164;
      _ConditionalContent<>.init(storage:)(v146, v165, v167, v147, v148);
      sub_10001C608(v143, &qword_100114FC0);
      v145(v175, v142);
    }

    uint64_t v149 = v180;
    sub_10001C3B8(v111, v180, &qword_100115000);
    swift_storeEnumTagMultiPayload(v149, v176, 1LL);
    uint64_t v150 = v111;
    uint64_t v151 = sub_10001C334(&qword_100115048);
    uint64_t v152 = sub_100080110(&qword_100115050, &qword_100115048, (void (*)(void))sub_10007F284);
    __int128 v188 = (void *)v151;
    uint64_t v189 = v152;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2( &v188,  &opaque type descriptor for <<opaque return type of View.focusable(_:)>>,  1LL);
    __int128 v188 = (void *)v178;
    uint64_t v189 = OpaqueTypeConformance2;
    uint64_t v154 = swift_getOpaqueTypeConformance2( &v188,  &opaque type descriptor for <<opaque return type of View.onExitCommand(perform:)>>,  1LL);
    unint64_t v155 = sub_10007F2C8();
    _ConditionalContent<>.init(storage:)(v149, v179, v177, v154, v155);
    return sub_10001C608(v150, &qword_100115000);
  }

  else
  {
    sub_10007F750((uint64_t)v22, (uint64_t)v29, type metadata accessor for NearbyConversationViewModel);
    id v112 = *(id *)&v29[*(int *)(v23 + 20)];
    uint64_t v113 = static Alignment.center.getter(v112);
    _FrameLayout.init(width:height:alignment:)(&v188, 0x4080900000000000LL, 0LL, 0x4081F80000000000LL, 0LL, v113, v114);
    v183._uint64_t countAndFlagsBits = (uint64_t)v112;
    v183._char object = v188;
    LOBYTE(v184) = v189;
    uint64_t v185 = v190;
    LOBYTE(v186) = v191;
    __int128 v187 = v192;
    uint64_t v115 = sub_100018A04(&qword_100115048);
    char v116 = (void *)sub_100080110(&qword_100115050, &qword_100115048, (void (*)(void))sub_10007F284);
    View.focusable(_:)(1LL, v115, v116);

    sub_1000606A8((uint64_t)v29, (uint64_t)v27, type metadata accessor for NearbyConversationViewModel);
    uint64_t v117 = *(unsigned __int8 *)(v24 + 80);
    uint64_t v118 = (v117 + 32) & ~v117;
    uint64_t v119 = swift_allocObject(&unk_1000FAB08, v118 + v25, v117 | 7);
    *(void *)(v119 + swift_unknownObjectWeakDestroy(v0 + 16) = v174;
    *(void *)(v119 + 24) = v32;
    sub_10007F750((uint64_t)v27, v119 + v118, type metadata accessor for NearbyConversationViewModel);
    id v120 = v32;
    v183._uint64_t countAndFlagsBits = v115;
    v183._char object = v116;
    char v121 = (void *)swift_getOpaqueTypeConformance2( &v183,  &opaque type descriptor for <<opaque return type of View.focusable(_:)>>,  1LL);
    uint64_t v122 = v159;
    uint64_t v123 = v178;
    View.onExitCommand(perform:)(sub_10007F370, v119, v178, v121);
    swift_release(v119);
    (*(void (**)(char *, uint64_t))(v160 + 8))(v15, v123);
    uint64_t v124 = v162;
    uint64_t v125 = v161;
    uint64_t v126 = v179;
    (*(void (**)(char *, uint64_t, uint64_t))(v162 + 32))(v161, v122, v179);
    uint64_t v127 = v180;
    (*(void (**)(uint64_t, char *, uint64_t))(v124 + 16))(v180, v125, v126);
    swift_storeEnumTagMultiPayload(v127, v176, 0LL);
    v183._uint64_t countAndFlagsBits = v123;
    v183._char object = v121;
    uint64_t v128 = swift_getOpaqueTypeConformance2( &v183,  &opaque type descriptor for <<opaque return type of View.onExitCommand(perform:)>>,  1LL);
    unint64_t v129 = sub_10007F2C8();
    _ConditionalContent<>.init(storage:)(v127, v126, v177, v128, v129);
    (*(void (**)(char *, uint64_t))(v124 + 8))(v125, v126);
    return sub_10001C644((uint64_t)v29, type metadata accessor for NearbyConversationViewModel);
  }

uint64_t sub_10007D668@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v53 = a3;
  uint64_t v55 = a2;
  uint64_t v56 = a4;
  uint64_t v5 = (int *)type metadata accessor for NearbyConversationViewModel(0LL);
  uint64_t v6 = *(void *)(*((void *)v5 - 1) + 64LL);
  uint64_t v51 = *((void *)v5 - 1);
  uint64_t v52 = v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = type metadata accessor for PersonSubtitledButton(0LL);
  __chkstk_darwin(v54);
  uint64_t v10 = (uint64_t *)((char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = type metadata accessor for SplashScreenMonogramView(0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (uint64_t *)((char *)&v47 - v16);
  uint64_t v18 = *(void **)(a1 + v5[9]);
  uint64_t v19 = a1 + v5[8];
  uint64_t v20 = (char *)&v47 + *(int *)(v15 + 20) - v16;
  uint64_t v21 = type metadata accessor for PersonNameComponents(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16LL))(v20, v19, v21);
  *uint64_t v17 = v18;
  uint64_t v22 = *(void **)(a1 + v5[5]);
  id v23 = v18;
  id v24 = [v22 deviceModel];
  if (v24 == (id)2) {
    uint64_t v25 = 1684107369LL;
  }
  else {
    uint64_t v25 = 0x656E6F687069LL;
  }
  unint64_t v26 = 0xE600000000000000LL;
  if (v24 == (id)2) {
    unint64_t v26 = 0xE400000000000000LL;
  }
  unint64_t v49 = v26;
  uint64_t v50 = v25;
  uint64_t v27 = (uint64_t *)(a1 + v5[7]);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  uint64_t v30 = (uint64_t *)(a1 + v5[6]);
  uint64_t v31 = v30[1];
  uint64_t v48 = *v30;
  sub_1000606A8((uint64_t)v17, (uint64_t)v14, type metadata accessor for SplashScreenMonogramView);
  uint64_t v32 = (uint64_t)v8;
  sub_1000606A8(a1, (uint64_t)v8, type metadata accessor for NearbyConversationViewModel);
  uint64_t v33 = *(unsigned __int8 *)(v51 + 80);
  uint64_t v34 = (v33 + 32) & ~v33;
  uint64_t v35 = swift_allocObject(&unk_1000FAB58, v34 + v52, v33 | 7);
  uint64_t v36 = v53;
  *(void *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = v55;
  *(void *)(v35 + 24) = v36;
  sub_10007F750(v32, v35 + v34, type metadata accessor for NearbyConversationViewModel);
  *uint64_t v10 = v29;
  v10[1] = v28;
  v10[2] = v48;
  v10[3] = v31;
  uint64_t v37 = v54;
  sub_10007F750((uint64_t)v14, (uint64_t)v10 + *(int *)(v54 + 24), type metadata accessor for SplashScreenMonogramView);
  uint64_t v38 = (void *)((char *)v10 + *(int *)(v37 + 28));
  unint64_t v39 = v49;
  *uint64_t v38 = v50;
  v38[1] = v39;
  Swift::String v40 = (void (**)())((char *)v10 + *(int *)(v37 + 32));
  *Swift::String v40 = sub_10007F6E4;
  v40[1] = (void (*)())v35;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v31);
  uint64_t v41 = static Alignment.center.getter(v36);
  _FrameLayout.init(width:height:alignment:)(v57, 0x4080900000000000LL, 0LL, 0x405C800000000000LL, 0LL, v41, v42);
  uint64_t v43 = v56;
  sub_1000606A8((uint64_t)v10, v56, type metadata accessor for PersonSubtitledButton);
  uint64_t v44 = (_OWORD *)(v43 + *(int *)(sub_100018A04(&qword_100115010) + 36));
  __int128 v45 = v57[1];
  *uint64_t v44 = v57[0];
  v44[1] = v45;
  v44[2] = v57[2];
  sub_10001C644((uint64_t)v10, type metadata accessor for PersonSubtitledButton);
  return sub_10001C644((uint64_t)v17, type metadata accessor for SplashScreenMonogramView);
}

uint64_t sub_10007D97C(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100018A04(&qword_100115070);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100018A04(&qword_100115078);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = swift_allocObject(&unk_1000FAB30, 32LL, 7LL);
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  id v12 = a2;
  uint64_t v13 = sub_100018A04(&qword_100115080);
  uint64_t v14 = sub_10001C334(&qword_100115088);
  uint64_t v15 = sub_100080110(&qword_100115090, &qword_100115088, (void (*)(void))sub_10007F384);
  unint64_t v16 = sub_10007F4A4();
  *(void *)&__int128 v32 = v14;
  *((void *)&v32 + 1) = &type metadata for CompactLabel;
  *(void *)&__int128 v33 = v15;
  *((void *)&v33 + 1) = v16;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2( &v32,  &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>,  1LL);
  uint64_t v18 = Button.init(action:label:)(sub_10007F37C, v11, sub_10007DC84, 0LL, v13, OpaqueTypeConformance2);
  uint64_t v19 = static Alignment.center.getter(v18);
  _FrameLayout.init(width:height:alignment:)(&v32, 0x4080900000000000LL, 0LL, 0x4050800000000000LL, 0LL, v19, v20);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v10, v7, v4);
  uint64_t v21 = &v10[*(int *)(v8 + 36)];
  __int128 v22 = v33;
  *(_OWORD *)uint64_t v21 = v32;
  *((_OWORD *)v21 + 1) = v22;
  *((_OWORD *)v21 + 2) = v34;
  uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v24 = static Color.green.getter(v23);
  uint64_t v25 = Color.opacity(_:)(0.7);
  uint64_t v26 = swift_release(v24);
  uint64_t v27 = static Color.green.getter(v26);
  v31[0] = v25;
  v31[1] = v27;
  unint64_t v28 = sub_10007F4E8();
  unint64_t v29 = sub_10007F56C();
  View.buttonStyle<A>(_:)(v31, v8, &type metadata for SplashScreenButtonStyle, v28, v29);
  swift_release(v27);
  swift_release(v25);
  return sub_10001C608((uint64_t)v10, &qword_100115078);
}

uint64_t sub_10007DBDC(uint64_t a1, void *a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1000C6148);
  uint64_t v4 = swift_getKeyPath(&unk_1000C6170);
  char v10 = 1;
  id v5 = a2;
  static Published.subscript.setter(&v10, v5, KeyPath, v4);
  uint64_t v6 = swift_getKeyPath(&unk_1000C6190);
  uint64_t v7 = swift_getKeyPath(&unk_1000C6278);
  char v9 = 1;
  return static Published.subscript.setter(&v9, v5, v6, v7);
}

uint64_t sub_10007DC84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v1 = sub_100018A04(&qword_1001150C0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100018A04(&qword_1001150B0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_100018A04(&qword_1001150A0);
  __chkstk_darwin(v31);
  char v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = sub_100018A04(&qword_100115088);
  __chkstk_darwin(v32);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v12), "mainBundle");
  v35._char object = (void *)0xEB00000000656C62LL;
  v14._char object = (void *)0x80000001000DB8B0LL;
  v14._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v15._uint64_t countAndFlagsBits = 0LL;
  v15._char object = (void *)0xE000000000000000LL;
  v35._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  Swift::String v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, v13, v15, v35);

  Swift::String v34 = v16;
  unint64_t v17 = sub_10001BB20();
  uint64_t v18 = Label<>.init<A>(_:systemImage:)( &v34,  0x69662E6F65646976LL,  0xEA00000000006C6CLL,  &type metadata for String,  v17);
  uint64_t v19 = static Font.body.getter(v18);
  uint64_t KeyPath = swift_getKeyPath(&unk_1000C62E8);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v7, v4, v1);
  uint64_t v21 = (uint64_t *)&v7[*(int *)(v5 + 36)];
  uint64_t *v21 = KeyPath;
  v21[1] = v19;
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v23 = static Color.white.getter(v22);
  sub_10001C3B8((uint64_t)v7, (uint64_t)v9, &qword_1001150B0);
  *(void *)&v9[*(int *)(v31 + 36)] = v23;
  uint64_t v24 = sub_10001C608((uint64_t)v7, &qword_1001150B0);
  uint64_t v25 = static Alignment.center.getter(v24);
  sub_10007C5B4( 0.0,  1,  0.0,  1,  INFINITY,  0,  0.0,  1,  (uint64_t)v11,  0.0,  1,  INFINITY,  0,  v25,  v26,  &qword_1001150A0,  &qword_100115088);
  sub_10001C608((uint64_t)v9, &qword_1001150A0);
  v34._uint64_t countAndFlagsBits = 0x4018000000000000LL;
  uint64_t v27 = sub_100080110(&qword_100115090, &qword_100115088, (void (*)(void))sub_10007F384);
  unint64_t v28 = sub_10007F4A4();
  View.labelStyle<A>(_:)(&v34, v32, &type metadata for CompactLabel, v27, v28);
  return sub_10001C608((uint64_t)v11, &qword_100115088);
}

uint64_t sub_10007DFCC@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AE2C(*(void (**)(void, void, void))v1, *(void **)(v1 + 8), a1);
}

uint64_t sub_10007DFD4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100018A04(&qword_1001151F0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100018A04(&qword_1001151E0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)uint64_t v6 = static VerticalAlignment.center.getter(v8);
  *((void *)v6 + 1) = 0x4031000000000000LL;
  v6[16] = 0;
  uint64_t v11 = sub_100018A04(&qword_1001151F8);
  uint64_t v12 = sub_10007E140(a1, (uint64_t)&v6[*(int *)(v11 + 44)]);
  uint64_t v13 = static Alignment.leading.getter(v12);
  sub_10007C5B4( 0.0,  1,  0.0,  1,  INFINITY,  0,  0.0,  1,  (uint64_t)v10,  0.0,  1,  0.0,  1,  v13,  v14,  &qword_1001151F0,  &qword_1001151E0);
  sub_10001C608((uint64_t)v6, &qword_1001151F0);
  sub_10001C3B8((uint64_t)v10, a2, &qword_1001151E0);
  *(_OWORD *)(a2 + *(int *)(sub_100018A04(&qword_1001151C8) + 36)) = xmmword_1000C60C0;
  return sub_10001C608((uint64_t)v10, &qword_1001151E0);
}

uint64_t sub_10007E140@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100018A04(&qword_100115200);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v26 - v8;
  uint64_t v10 = sub_100018A04(&qword_100115208);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  Swift::String v15 = (char *)v26 - v14;
  uint64_t v16 = type metadata accessor for PersonSubtitledButton(0LL);
  uint64_t v17 = (uint64_t)a1 + *(int *)(v16 + 24);
  uint64_t v18 = static Alignment.center.getter(v16);
  _FrameLayout.init(width:height:alignment:)(v26, 0x4054000000000000LL, 0LL, 0x4054000000000000LL, 0LL, v18, v19);
  uint64_t v20 = sub_1000606A8(v17, (uint64_t)v15, type metadata accessor for SplashScreenMonogramView);
  uint64_t v21 = &v15[*(int *)(v10 + 36)];
  __int128 v22 = v26[1];
  *(_OWORD *)uint64_t v21 = v26[0];
  *((_OWORD *)v21 + 1) = v22;
  *((_OWORD *)v21 + 2) = v26[2];
  *(void *)uint64_t v9 = static HorizontalAlignment.leading.getter(v20);
  *((void *)v9 + 1) = 0x4000000000000000LL;
  v9[16] = 0;
  uint64_t v23 = sub_100018A04(&qword_100115210);
  sub_10007E348(a1, (uint64_t *)&v9[*(int *)(v23 + 44)]);
  sub_10001C3B8((uint64_t)v15, (uint64_t)v13, &qword_100115208);
  sub_10001C3B8((uint64_t)v9, (uint64_t)v7, &qword_100115200);
  sub_10001C3B8((uint64_t)v13, a2, &qword_100115208);
  uint64_t v24 = sub_100018A04(&qword_100115218);
  sub_10001C3B8((uint64_t)v7, a2 + *(int *)(v24 + 48), &qword_100115200);
  sub_10001C608((uint64_t)v9, &qword_100115200);
  sub_10001C608((uint64_t)v15, &qword_100115208);
  sub_10001C608((uint64_t)v7, &qword_100115200);
  return sub_10001C608((uint64_t)v13, &qword_100115208);
}

double sub_10007E348@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v83 = a2;
  uint64_t v79 = sub_100018A04(&qword_1001150C0);
  uint64_t v76 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v70 = (char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v73 = sub_100018A04(&qword_1001150B0);
  __chkstk_darwin(v73);
  char v71 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100018A04(&qword_100115220);
  __chkstk_darwin(v77);
  uint64_t v72 = (uint64_t)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100018A04(&qword_100115228);
  uint64_t v81 = *(void *)(v6 - 8);
  uint64_t v82 = v6;
  __chkstk_darwin(v6);
  id v75 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v80 = sub_100018A04(&qword_100115230);
  uint64_t v8 = __chkstk_darwin(v80);
  uint64_t v74 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v78 = (uint64_t)&v67 - v10;
  uint64_t v11 = a1[1];
  uint64_t v84 = *a1;
  uint64_t v85 = v11;
  unint64_t v12 = sub_10001BB20();
  unint64_t v68 = v12;
  swift_bridgeObjectRetain(v11);
  uint64_t v13 = Text.init<A>(_:)(&v84, &type metadata for String, v12);
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18 & 1;
  uint64_t v20 = static Font.body.getter(v13);
  uint64_t v21 = Text.font(_:)(v20, v13, v15, v19, v17);
  uint64_t v23 = v22;
  LOBYTE(v12) = v24;
  uint64_t v26 = v25;
  swift_release(v20);
  unint64_t v27 = v12 & 1;
  sub_10007F098(v13, v15, v19);
  swift_bridgeObjectRelease(v17);
  uint64_t v29 = static Color.primary.getter(v28);
  uint64_t v30 = Text.foregroundColor(_:)(v29, v21, v23, v27, v26);
  uint64_t v32 = v31;
  LOBYTE(v13) = v33;
  uint64_t v69 = v34;
  swift_release(v29);
  LOBYTE(v13) = v13 & 1;
  sub_10007F098(v21, v23, v27);
  swift_bridgeObjectRelease(v26);
  uint64_t v35 = a1[3];
  uint64_t v84 = a1[2];
  uint64_t v85 = v35;
  uint64_t v36 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for PersonSubtitledButton(0LL) + 28));
  uint64_t v37 = *v36;
  uint64_t v38 = v36[1];
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v38);
  unint64_t v39 = v70;
  uint64_t v40 = Label<>.init<A>(_:systemImage:)(&v84, v37, v38, &type metadata for String, v68);
  uint64_t v41 = static Font.caption2.getter(v40);
  uint64_t KeyPath = swift_getKeyPath(&unk_1000C62E8);
  uint64_t v43 = v76;
  uint64_t v44 = v71;
  uint64_t v45 = v79;
  (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v71, v39, v79);
  uint64_t v46 = (uint64_t *)&v44[*(int *)(v73 + 36)];
  uint64_t v47 = (uint64_t)v44;
  *uint64_t v46 = KeyPath;
  v46[1] = v41;
  v48.n128_f64[0] = (*(double (**)(char *, uint64_t))(v43 + 8))(v39, v45);
  uint64_t v49 = static Color.secondary.getter(v48);
  uint64_t v50 = swift_getKeyPath(&unk_1000C63E8);
  uint64_t v51 = (uint64_t)v44;
  uint64_t v52 = v72;
  sub_10001C3B8(v51, v72, &qword_1001150B0);
  uint64_t v53 = v77;
  uint64_t v54 = (uint64_t *)(v52 + *(int *)(v77 + 36));
  *uint64_t v54 = v50;
  v54[1] = v49;
  sub_10001C608(v47, &qword_1001150B0);
  uint64_t v84 = 0x4010000000000000LL;
  unint64_t v55 = sub_10008024C();
  unint64_t v56 = sub_10007F4A4();
  uint64_t v57 = v75;
  View.labelStyle<A>(_:)(&v84, v53, &type metadata for CompactLabel, v55, v56);
  sub_10001C608(v52, &qword_100115220);
  uint64_t v59 = v81;
  uint64_t v58 = v82;
  uint64_t v60 = (uint64_t)v74;
  (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v74, v57, v82);
  *(_OWORD *)(v60 + *(int *)(v80 + 36)) = xmmword_1000C60D0;
  (*(void (**)(char *, uint64_t))(v59 + 8))(v57, v58);
  uint64_t v61 = v78;
  sub_100052900(v60, v78, &qword_100115230);
  sub_10001C3B8(v61, v60, &qword_100115230);
  uint64_t v62 = v83;
  *uint64_t v83 = v30;
  v62[1] = v32;
  *((_BYTE *)v62 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  uint64_t v63 = v69;
  v62[3] = v69;
  uint64_t v64 = v62;
  uint64_t v65 = sub_100018A04(&qword_100115240);
  sub_10001C3B8(v60, (uint64_t)v64 + *(int *)(v65 + 48), &qword_100115230);
  sub_10007F0A8(v30, v32, v13);
  swift_bridgeObjectRetain(v63);
  sub_10001C608(v61, &qword_100115230);
  sub_10001C608(v60, &qword_100115230);
  sub_10007F098(v30, v32, v13);
  *(void *)&double result = swift_bridgeObjectRelease(v63).n128_u64[0];
  return result;
}

uint64_t sub_10007E810(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 32));
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  swift_retain(v4);
  uint64_t v5 = sub_100018A04(&qword_1001151C8);
  uint64_t v6 = sub_100080110(&qword_1001151D0, &qword_1001151C8, (void (*)(void))sub_100080178);
  return Button.init(action:label:)(v3, v4, sub_100080108, &v8, v5, v6);
}

uint64_t sub_10007E8B4@<X0>(char *a1@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v1 = type metadata accessor for LabelStyleConfiguration.Title(0LL);
  uint64_t v24 = *(void *)(v1 - 8);
  uint64_t v2 = v24;
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v24 - v6;
  uint64_t v8 = type metadata accessor for LabelStyleConfiguration.Icon(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v16 = LabelStyleConfiguration.icon.getter(v13);
  LabelStyleConfiguration.title.getter(v16);
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v17(v12, v15, v8);
  char v18 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v18(v5, v7, v1);
  uint64_t v19 = v25;
  v17(v25, v12, v8);
  uint64_t v20 = sub_100018A04(&qword_100115250);
  v18(&v19[*(int *)(v20 + 48)], v5, v1);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v24 + 8);
  v21(v7, v1);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v15, v8);
  v21(v5, v1);
  return ((uint64_t (*)(char *, uint64_t))v22)(v12, v8);
}

uint64_t sub_10007EA54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  *(void *)a2 = static VerticalAlignment.center.getter(a1);
  *(void *)(a2 + _Block_object_dispose(va, 8) = v4;
  *(_BYTE *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  uint64_t v5 = sub_100018A04(&qword_100115248);
  return sub_10007E8B4((char *)(a2 + *(int *)(v5 + 44)));
}

uint64_t sub_10007EAA8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10007EABC(a1, (uint64_t)&unk_1000C6148, (uint64_t)&unk_1000C6170, a2);
}

uint64_t sub_10007EABC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t KeyPath = swift_getKeyPath(a2);
  uint64_t v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(KeyPath);
  uint64_t result = swift_release(v8);
  *a4 = v10;
  return result;
}

uint64_t sub_10007EB34@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10007EABC(a1, (uint64_t)&unk_1000C6148, (uint64_t)&unk_1000C6170, a2);
}

uint64_t sub_10007EB58(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10007EB6C(a1, a2, a3, a4, (uint64_t)&unk_1000C6148, (uint64_t)&unk_1000C6170);
}

uint64_t sub_10007EB6C(char *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7 = *a1;
  uint64_t v8 = *a2;
  uint64_t KeyPath = swift_getKeyPath(a5);
  uint64_t v10 = swift_getKeyPath(a6);
  char v12 = v7;
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

uint64_t sub_10007EBD4(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10007EB6C(a1, a2, a3, a4, (uint64_t)&unk_1000C6148, (uint64_t)&unk_1000C6170);
}

uint64_t sub_10007EBF8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10007EABC(a1, (uint64_t)&unk_1000C6190, (uint64_t)&unk_1000C6278, a2);
}

uint64_t sub_10007EC1C(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10007EB6C(a1, a2, a3, a4, (uint64_t)&unk_1000C6190, (uint64_t)&unk_1000C6278);
}

uint64_t sub_10007EC40()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10007EC64(uint64_t a1)
{
}

unint64_t sub_10007EC6C()
{
  unint64_t result = qword_100114F90;
  if (!qword_100114F90)
  {
    uint64_t v1 = sub_10001C334(&qword_100114F58);
    sub_100022750(&qword_100114F98, &qword_100114F50, (uint64_t)&protocol conformance descriptor for HStack<A>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114F90);
  }

  return result;
}

uint64_t sub_10007ECF0()
{
  return sub_10007B724(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10007ECF8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1000C6230);
  uint64_t v5 = swift_getKeyPath(&unk_1000C6258);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  uint64_t result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10007ED74(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1000C6230);
  uint64_t v5 = swift_getKeyPath(&unk_1000C6258);
  uint64_t v7 = v2;
  swift_bridgeObjectRetain(v2);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_10007EDE8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1000C61E8);
  uint64_t v5 = swift_getKeyPath(&unk_1000C6210);
  static Published.subscript.getter(a2, v3, KeyPath, v5);
  swift_release(KeyPath);
  return swift_release(v5);
}

uint64_t sub_10007EE50(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_100018A04(&qword_100115790);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v14 - v8;
  sub_10001C3B8(a1, (uint64_t)&v14 - v8, &qword_100115790);
  uint64_t v10 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1000C61E8);
  uint64_t v12 = swift_getKeyPath(&unk_1000C6210);
  sub_10001C3B8((uint64_t)v9, (uint64_t)v7, &qword_100115790);
  static Published.subscript.setter(v7, v10, KeyPath, v12);
  return sub_10001C608((uint64_t)v9, &qword_100115790);
}

uint64_t sub_10007EF44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.accentColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10007EF6C(void *a1)
{
  uint64_t v1 = swift_retain(*a1);
  return EnvironmentValues.accentColor.setter(v1);
}

unint64_t sub_10007EFA4(uint64_t a1, uint64_t a2)
{
  unint64_t result = qword_100112FE8;
  if (!qword_100112FE8)
  {
    uint64_t v3 = objc_opt_self(&OBJC_CLASS___UIScene, a2);
    unint64_t result = swift_getObjCClassMetadata(v3);
    atomic_store(result, (unint64_t *)&qword_100112FE8);
  }

  return result;
}

uint64_t sub_10007EFE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v3 = *(void *)(a1 + 144);
  char v4 = *(_BYTE *)(a1 + 152);
  uint64_t v5 = *(void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 280);
  uint64_t v7 = *(void *)(a1 + 360);
  uint64_t v8 = *(void *)(a1 + 368);
  char v9 = *(_BYTE *)(a1 + 376);
  uint64_t v12 = *(void *)(a1 + 384);
  uint64_t v10 = *(void *)(a1 + 504);
  swift_release(*(void *)a1);
  sub_10007F098(v2, v3, v4);
  swift_release(v6);
  swift_bridgeObjectRelease(v5);
  sub_10007F098(v7, v8, v9);
  swift_release(v10);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_10007F098(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_release(a1);
  }
  else {
    return swift_bridgeObjectRelease(a2);
  }
}

uint64_t sub_10007F0A8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_retain(a1);
  }
  else {
    return swift_bridgeObjectRetain(a2);
  }
}

uint64_t sub_10007F0B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 160);
  uint64_t v3 = *(void *)(a1 + 168);
  char v4 = *(_BYTE *)(a1 + 176);
  uint64_t v5 = *(void *)(a1 + 184);
  uint64_t v6 = *(void *)(a1 + 304);
  uint64_t v7 = *(void *)(a1 + 384);
  uint64_t v8 = *(void *)(a1 + 392);
  char v9 = *(_BYTE *)(a1 + 400);
  uint64_t v12 = *(void *)(a1 + 408);
  uint64_t v10 = *(void *)(a1 + 528);
  swift_release(*(void *)(a1 + 24));
  sub_10007F098(v2, v3, v4);
  swift_release(v6);
  swift_bridgeObjectRelease(v5);
  sub_10007F098(v7, v8, v9);
  swift_release(v10);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_10007F170@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10007F198(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_10007F1BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007D668(a1, *(void *)(v2 + 16), *(void **)(v2 + 24), a2);
}

unint64_t sub_10007F1C4()
{
  unint64_t result = qword_100115020;
  if (!qword_100115020)
  {
    uint64_t v1 = sub_10001C334(&qword_100115010);
    sub_10001949C(&qword_100115028, type metadata accessor for PersonSubtitledButton, (uint64_t)&unk_1000C6398);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100115020);
  }

  return result;
}

uint64_t type metadata accessor for PersonSubtitledButton(uint64_t a1)
{
  uint64_t result = qword_100115160;
  if (!qword_100115160) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PersonSubtitledButton);
  }
  return result;
}

unint64_t sub_10007F284()
{
  unint64_t result = qword_100115058;
  if (!qword_100115058)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000C6CD8, &type metadata for SplashScreenWaitView);
    atomic_store(result, (unint64_t *)&qword_100115058);
  }

  return result;
}

unint64_t sub_10007F2C8()
{
  unint64_t result = qword_100115060;
  if (!qword_100115060)
  {
    uint64_t v1 = sub_10001C334(&qword_100115000);
    sub_100022750(&qword_100115038, &qword_100114FD0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    sub_100022750(&qword_100115040, &qword_100114FC0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100115060);
  }

  return result;
}

void sub_10007F370()
{
}

uint64_t sub_10007F37C()
{
  return sub_10007DBDC(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t sub_10007F384()
{
  unint64_t result = qword_100115098;
  if (!qword_100115098)
  {
    uint64_t v1 = sub_10001C334(&qword_1001150A0);
    sub_10007F408();
    sub_100022750( &qword_1001150D8,  &qword_1001150E0,  (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100115098);
  }

  return result;
}

unint64_t sub_10007F408()
{
  unint64_t result = qword_1001150A8;
  if (!qword_1001150A8)
  {
    uint64_t v1 = sub_10001C334(&qword_1001150B0);
    sub_100022750(&qword_1001150B8, &qword_1001150C0, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    sub_100022750( &qword_1001150C8,  &qword_1001150D0,  (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001150A8);
  }

  return result;
}

unint64_t sub_10007F4A4()
{
  unint64_t result = qword_1001150E8;
  if (!qword_1001150E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000C6360, &type metadata for CompactLabel);
    atomic_store(result, (unint64_t *)&qword_1001150E8);
  }

  return result;
}

unint64_t sub_10007F4E8()
{
  unint64_t result = qword_1001150F0;
  if (!qword_1001150F0)
  {
    uint64_t v1 = sub_10001C334(&qword_100115078);
    sub_100022750(&qword_1001150F8, &qword_100115070, (uint64_t)&protocol conformance descriptor for Button<A>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001150F0);
  }

  return result;
}

unint64_t sub_10007F56C()
{
  unint64_t result = qword_100115100;
  if (!qword_100115100)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000C5888, &type metadata for SplashScreenButtonStyle);
    atomic_store(result, (unint64_t *)&qword_100115100);
  }

  return result;
}

uint64_t sub_10007F5B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10007F5D8(void *a1)
{
  uint64_t v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_10007F604()
{
  uint64_t v1 = (int *)type metadata accessor for NearbyConversationViewModel(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  uint64_t v7 = v0 + v4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);

  swift_bridgeObjectRelease(*(void *)(v7 + v1[6] + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + v1[7] + 8));
  uint64_t v9 = v7 + v1[8];
  uint64_t v10 = type metadata accessor for PersonNameComponents(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);

  return swift_deallocObject(v0, v5, v6);
}

void sub_10007F6E4()
{
}

void sub_10007F6F0(void (*a1)(uint64_t))
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for NearbyConversationViewModel(0LL) - 8) + 80LL);
  uint64_t v4 = *(void **)(v1 + 24);
  uint64_t v5 = v1 + ((v3 + 32) & ~v3);
  id v6 = v4;
  a1(v5);
}

uint64_t sub_10007F750(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10007F794(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 160);
  uint64_t v3 = *(void *)(a1 + 168);
  char v4 = *(_BYTE *)(a1 + 176);
  uint64_t v5 = *(void *)(a1 + 184);
  uint64_t v6 = *(void *)(a1 + 304);
  uint64_t v7 = *(void *)(a1 + 384);
  uint64_t v8 = *(void *)(a1 + 392);
  char v9 = *(_BYTE *)(a1 + 400);
  uint64_t v10 = *(void *)(a1 + 408);
  uint64_t v12 = *(void *)(a1 + 528);
  swift_retain(*(void *)(a1 + 24));
  sub_10007F0A8(v2, v3, v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  sub_10007F0A8(v7, v8, v9);
  swift_bridgeObjectRetain(v10);
  swift_retain(v12);
  return a1;
}

uint64_t sub_10007F84C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 144);
  sub_10007F0A8(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return a1;
}

uint64_t sub_10007F89C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 144);
  sub_10007F098(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

ValueMetadata *type metadata accessor for CompactLabel()
{
  return &type metadata for CompactLabel;
}

uint64_t *sub_10007F8FC(uint64_t *a1, uint64_t *a2, int *a3)
{
  char v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *a1 = *a2;
    char v4 = (uint64_t *)(v26 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = (uint64_t)v12;
    uint64_t v13 = *(int *)(type metadata accessor for SplashScreenMonogramView(0LL) + 20);
    uint64_t v14 = &v10[v13];
    uint64_t v15 = &v11[v13];
    uint64_t v16 = type metadata accessor for PersonNameComponents(0LL);
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    id v18 = v12;
    v17(v14, v15, v16);
    uint64_t v19 = a3[7];
    uint64_t v20 = a3[8];
    uint64_t v21 = (uint64_t *)((char *)v4 + v19);
    uint64_t v22 = (uint64_t *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    void *v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = (uint64_t *)((char *)v4 + v20);
    uint64_t v25 = (uint64_t *)((char *)a2 + v20);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    swift_bridgeObjectRetain(v23);
  }

  swift_retain(v26);
  return v4;
}

uint64_t sub_10007FA0C(uint64_t a1, int *a2)
{
  char v4 = (id *)(a1 + a2[6]);

  int v5 = (char *)v4 + *(int *)(type metadata accessor for SplashScreenMonogramView(0LL) + 20);
  uint64_t v6 = type metadata accessor for PersonNameComponents(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[7] + 8));
  return swift_release(*(void *)(a1 + a2[8] + 8));
}

void *sub_10007FA9C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = *(void **)((char *)a2 + v8);
  *(void *)((char *)a1 + v_Block_object_dispose(va, 8) = v11;
  uint64_t v12 = *(int *)(type metadata accessor for SplashScreenMonogramView(0LL) + 20);
  uint64_t v13 = &v9[v12];
  uint64_t v14 = &v10[v12];
  uint64_t v15 = type metadata accessor for PersonNameComponents(0LL);
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  id v17 = v11;
  v16(v13, v14, v15);
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = (void *)((char *)a1 + v18);
  uint64_t v21 = (void *)((char *)a2 + v18);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = (void *)((char *)a1 + v19);
  uint64_t v24 = (void *)((char *)a2 + v19);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  swift_bridgeObjectRetain(v22);
  swift_retain(v25);
  return a1;
}

void *sub_10007FB84(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = *(void **)((char *)a1 + v10);
  uint64_t v14 = *(void **)((char *)a2 + v10);
  void *v11 = v14;
  id v15 = v14;

  uint64_t v16 = *(int *)(type metadata accessor for SplashScreenMonogramView(0LL) + 20);
  id v17 = (char *)v11 + v16;
  uint64_t v18 = &v12[v16];
  uint64_t v19 = type metadata accessor for PersonNameComponents(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 24LL))(v17, v18, v19);
  uint64_t v20 = a3[7];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  void *v21 = *v22;
  uint64_t v23 = v22[1];
  uint64_t v24 = v21[1];
  v21[1] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  uint64_t v25 = a3[8];
  uint64_t v26 = (void *)((char *)a1 + v25);
  unint64_t v27 = (void *)((char *)a2 + v25);
  uint64_t v28 = v27[1];
  uint64_t v29 = v26[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  swift_retain(v28);
  swift_release(v29);
  return a1;
}

_OWORD *sub_10007FCA0(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(void *)((char *)a1 + v7) = *(void *)((char *)a2 + v7);
  uint64_t v10 = *(int *)(type metadata accessor for SplashScreenMonogramView(0LL) + 20);
  uint64_t v11 = &v8[v10];
  uint64_t v12 = &v9[v10];
  uint64_t v13 = type metadata accessor for PersonNameComponents(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
  uint64_t v14 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  return a1;
}

void *sub_10007FD3C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = *(void **)((char *)a1 + v10);
  void *v11 = *v12;

  uint64_t v14 = *(int *)(type metadata accessor for SplashScreenMonogramView(0LL) + 20);
  id v15 = (char *)v11 + v14;
  uint64_t v16 = (char *)v12 + v14;
  uint64_t v17 = type metadata accessor for PersonNameComponents(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 40LL))(v15, v16, v17);
  uint64_t v18 = a3[7];
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (void *)((char *)a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  uint64_t v23 = v19[1];
  *uint64_t v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = a3[8];
  uint64_t v25 = *(void *)((char *)a1 + v24 + 8);
  *(_OWORD *)((char *)a1 + v24) = *(_OWORD *)((char *)a2 + v24);
  swift_release(v25);
  return a1;
}

uint64_t sub_10007FE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007FE24);
}

uint64_t sub_10007FE24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for SplashScreenMonogramView(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t sub_10007FEA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007FEAC);
}

uint64_t sub_10007FEAC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for SplashScreenMonogramView(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 24),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_10007FF20(uint64_t a1)
{
  v4[0] = &unk_1000C6348;
  v4[1] = &unk_1000C6348;
  uint64_t result = type metadata accessor for SplashScreenMonogramView(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    v4[3] = &unk_1000C6348;
    v4[4] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

unint64_t sub_10007FFA8()
{
  unint64_t result = qword_1001151A8;
  if (!qword_1001151A8)
  {
    uint64_t v1 = sub_10001C334(&qword_100114F78);
    sub_10008002C();
    sub_100022750( &qword_1001151B8,  &qword_1001151C0,  (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001151A8);
  }

  return result;
}

unint64_t sub_10008002C()
{
  unint64_t result = qword_1001151B0;
  if (!qword_1001151B0)
  {
    uint64_t v1 = sub_10001C334(&qword_100114F70);
    v2[0] = sub_10001C334(&qword_100114F60);
    v2[1] = sub_100080110(&qword_100114F88, &qword_100114F60, (void (*)(void))sub_10007EC6C);
    swift_getOpaqueTypeConformance2( v2,  &opaque type descriptor for <<opaque return type of View.continuityDevicePicker(isPresented:onDidConnect:)>>,  1LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001151B0);
  }

  return result;
}

uint64_t sub_1000800E8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E87D0, 1LL);
}

uint64_t sub_1000800F8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E87A8, 1LL);
}

uint64_t sub_100080108@<X0>(uint64_t a1@<X8>)
{
  return sub_10007DFD4(*(uint64_t **)(v1 + 16), a1);
}

uint64_t sub_100080110(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_10001C334(a2);
    a3();
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100080178()
{
  unint64_t result = qword_1001151D8;
  if (!qword_1001151D8)
  {
    uint64_t v1 = sub_10001C334(&qword_1001151E0);
    sub_100022750(&qword_1001151E8, &qword_1001151F0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001151D8);
  }

  return result;
}

uint64_t sub_1000801FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100080224(void *a1)
{
  uint64_t v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

unint64_t sub_10008024C()
{
  unint64_t result = qword_100115238;
  if (!qword_100115238)
  {
    uint64_t v1 = sub_10001C334(&qword_100115220);
    sub_10007F408();
    sub_100022750( &qword_1001151B8,  &qword_1001151C0,  (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100115238);
  }

  return result;
}

uint64_t sub_1000802D0()
{
  return sub_100022750(&qword_100115258, &qword_100115260, (uint64_t)&protocol conformance descriptor for Button<A>);
}

uint64_t sub_1000802FC()
{
  return sub_100022750(&qword_100115268, &qword_100115270, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_10008033C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_10001C608(a1, &qword_100114970);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v15 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v12 = 0LL;
  uint64_t v14 = 0LL;
LABEL_6:
  uint64_t v16 = swift_allocObject(&unk_1000FAF38, 32LL, 7LL);
  *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    uint64_t v17 = v19;
    void v19[2] = v12;
    void v19[3] = v14;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_100115358, v16);
}

uint64_t sub_100080488(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04(&qword_100115310);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for CallIdentifier(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v17 - v12;
  if (a2)
  {
    uint64_t v18 = a2;
    swift_errorRetain(a2);
    uint64_t v14 = sub_100018A04(&qword_100115318);
    return CheckedContinuation.resume(throwing:)(&v18, v14);
  }

  else
  {
    sub_10001C3B8(a1, (uint64_t)v6, &qword_100115310);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
    {
      uint64_t result = sub_10001C608((uint64_t)v6, &qword_100115310);
      __break(1u);
    }

    else
    {
      sub_10007F750((uint64_t)v6, (uint64_t)v13, type metadata accessor for CallIdentifier);
      sub_1000606A8((uint64_t)v13, (uint64_t)v11, type metadata accessor for CallIdentifier);
      uint64_t v16 = sub_100018A04(&qword_100115318);
      CheckedContinuation.resume(returning:)(v11, v16);
      return sub_10001C644((uint64_t)v13, type metadata accessor for CallIdentifier);
    }
  }

  return result;
}

uint64_t sub_100080614(uint64_t a1)
{
  if (a1)
  {
    uint64_t v4 = a1;
    swift_errorRetain(a1);
    uint64_t v1 = sub_100018A04(&qword_100115308);
    return CheckedContinuation.resume(throwing:)(&v4, v1);
  }

  else
  {
    uint64_t v3 = sub_100018A04(&qword_100115308);
    return CheckedContinuation.resume(returning:)(v3, v3);
  }

unint64_t sub_100080674(char a1)
{
  unint64_t result = 0xD00000000000001FLL;
  if (a1)
  {
    if (a1 == 1) {
      return 0xD000000000000023LL;
    }
    else {
      return 0xD000000000000025LL;
    }
  }

  return result;
}

unint64_t sub_1000806D4()
{
  return sub_100080674(*v0);
}

void sub_1000806DC(uint64_t a1, uint64_t a2)
{
  qword_100115278 = v2;
}

void sub_1000806F8(uint64_t a1, uint64_t a2)
{
  id v2 = objc_msgSend((id)objc_opt_self(FTServerBag, a2), "sharedInstance");
  if (!v2)
  {
    __break(1u);
    return;
  }

  uint64_t v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 objectForKey:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v19, v5);
    swift_unknownObjectRelease(v5);
  }

  else
  {
    memset(v19, 0, sizeof(v19));
  }

  sub_100052900((uint64_t)v19, (uint64_t)v20, (uint64_t *)&unk_1001130F0);
  if (v20[3])
  {
    uint64_t v6 = sub_10001C5D0(0LL, &qword_1001148C0, &OBJC_CLASS___NSNumber_ptr);
    if ((swift_dynamicCast(&v18, v20, (char *)&type metadata for Any + 8, v6, 6LL) & 1) != 0)
    {
      uint64_t v7 = v18;
      if (qword_100112470 != -1) {
        swift_once(&qword_100112470, sub_1000B1848);
      }
      uint64_t v8 = type metadata accessor for Logger(0LL);
      sub_10001C270(v8, (uint64_t)qword_10011A3F8);
      uint64_t v9 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = swift_slowAlloc(22LL, -1LL);
        uint64_t v12 = swift_slowAlloc(32LL, -1LL);
        v20[0] = v12;
        *(_DWORD *)uint64_t v11 = 136315394;
        *(void *)&v19[0] = sub_1000850E4(0xD000000000000023LL, 0x80000001000DBAD0LL, v20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, (char *)v19 + 8, v11 + 4, v11 + 12);
        *(_WORD *)(v11 + 12) = 2048;
        *(void *)&v19[0] = 0x4020000000000000LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, (char *)v19 + 8, v11 + 14, v11 + 22);
        _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "Server bag for %s returning %f seconds",  (uint8_t *)v11,  0x16u);
        swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v12, -1LL, -1LL);
        swift_slowDealloc(v11, -1LL, -1LL);
      }

      [v7 doubleValue];
      return;
    }
  }

  else
  {
    sub_10001C608((uint64_t)v20, (uint64_t *)&unk_1001130F0);
  }

  if (qword_100112470 != -1) {
    swift_once(&qword_100112470, sub_1000B1848);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_10001C270(v13, (uint64_t)qword_10011A3F8);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc(22LL, -1LL);
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    v20[0] = v17;
    *(_DWORD *)uint64_t v16 = 136315394;
    *(void *)&v19[0] = sub_1000850E4(0xD000000000000023LL, 0x80000001000DBAD0LL, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, (char *)v19 + 8, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2048;
    *(void *)&v19[0] = 0x4020000000000000LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, (char *)v19 + 8, v16 + 14, v16 + 22);
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "Server bag does not have a value for %s, so returning the default one of %f seconds",  (uint8_t *)v16,  0x16u);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }
}

char *sub_100080AF0(uint64_t a1, uint64_t a2)
{
  id v2 = (void *)objc_opt_self(&OBJC_CLASS___TUCallCenter, a2);
  id v3 = [v2 sharedInstance];
  id v4 = [v2 sharedInstance];
  id v5 = [v4 neighborhoodActivityConduit];

  if (qword_100112218 != -1) {
    swift_once(&qword_100112218, sub_10002EB28);
  }
  uint64_t v6 = qword_10011A218;
  id v7 = objc_allocWithZone((Class)type metadata accessor for ATVCallManager(0LL));
  swift_retain(v6);
  unint64_t result = sub_100080BD0(v3, v5, v6);
  qword_10011A2F0 = (uint64_t)result;
  return result;
}

char *sub_100080BD0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v59 = a3;
  id v56 = a1;
  id v57 = a2;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v4);
  uint64_t v58 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100018A04((uint64_t *)&unk_1001148A0);
  __chkstk_darwin(v13);
  os_log_type_t v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&v3[OBJC_IVAR____TtC8FaceTime14ATVCallManager_videoPresentationStateCoordinator] = 0LL;
  uint64_t v16 = OBJC_IVAR____TtC8FaceTime14ATVCallManager_presentationManager;
  uint64_t v18 = type metadata accessor for CallPresentationManager(0LL, v17);
  swift_allocObject(v18, 72LL, 7LL);
  uint64_t v19 = v3;
  *(void *)&v3[v16] = sub_1000A651C(0LL, 0xC000000000000000LL, 0LL, 0xC000000000000000LL, 0LL, 0xC000000000000000LL);
  uint64_t v21 = OBJC_IVAR____TtC8FaceTime14ATVCallManager_displayConnectionObserver;
  if (qword_100112378 != -1) {
    swift_once(&qword_100112378, sub_1000806DC);
  }
  double v22 = *(double *)&qword_100115278;
  id v23 = objc_msgSend((id)objc_opt_self(PBSDisplayManager, v20), "sharedInstance");
  uint64_t v25 = (char *)objc_allocWithZone((Class)type metadata accessor for DisplayConnectionObserver(0LL, v24));
  *(void *)&v19[v21] = sub_100085724(v23, v25, v22);
  uint64_t v26 = &v19[OBJC_IVAR____TtC8FaceTime14ATVCallManager_lastJoinCallContext];
  uint64_t v27 = type metadata accessor for JoinCallContext(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v26, 1LL, 1LL, v27);
  uint64_t v28 = OBJC_IVAR____TtC8FaceTime14ATVCallManager_activeCallSubject;
  uint64_t v29 = type metadata accessor for ActiveCallContext(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v15, 1LL, 1LL, v29);
  uint64_t v30 = sub_100018A04((uint64_t *)&unk_100114910);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  *(void *)&v19[v28] = CurrentValueSubject.init(_:)(v15);
  id v32 = v56;
  id v31 = v57;
  *(void *)&v19[OBJC_IVAR____TtC8FaceTime14ATVCallManager_callCenter] = v56;
  *(void *)&v19[OBJC_IVAR____TtC8FaceTime14ATVCallManager_conduit] = v31;
  uint64_t v33 = v59;
  *(void *)&v19[OBJC_IVAR____TtC8FaceTime14ATVCallManager_signpostManager] = v59;
  sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))( v12,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v9);
  id v56 = v32;
  id v57 = v31;
  uint64_t v34 = swift_retain(v33);
  static DispatchQoS.unspecified.getter(v34);
  uint64_t v61 = &_swiftEmptyArrayStorage;
  uint64_t v35 = sub_10001949C( (unint64_t *)&qword_100113130,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v36 = sub_100018A04((uint64_t *)&unk_100112DC0);
  uint64_t v37 = sub_10004F2A8((unint64_t *)&qword_100113140, (uint64_t *)&unk_100112DC0);
  uint64_t v38 = v58;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v61, v36, v37, v4, v35);
  *(void *)&v19[OBJC_IVAR____TtC8FaceTime14ATVCallManager_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000020LL,  0x80000001000DBAA0LL,  v8,  v38,  v12,  0LL);

  unint64_t v39 = (objc_class *)type metadata accessor for ATVCallManager(0LL);
  v60.receiver = v19;
  v60.super_class = v39;
  uint64_t v40 = (char *)objc_msgSendSuper2(&v60, "init");
  uint64_t v41 = *(void **)&v40[OBJC_IVAR____TtC8FaceTime14ATVCallManager_callCenter];
  uint64_t v42 = v40;
  id v43 = [v41 conversationManager];
  [v43 registerWithCompletionHandler:0];

  uint64_t v45 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter, v44);
  id v46 = [v45 defaultCenter];
  [v46 addObserver:v42 selector:"callStatusChanged:" name:TUCallCenterCallStatusChangedNotification object:0];

  id v47 = [v45 defaultCenter];
  [v47 addObserver:v42 selector:"callStatusChanged:" name:TUCallCenterVideoCallStatusChangedNotification object:0];

  __n128 v48 = *(char **)&v42[OBJC_IVAR____TtC8FaceTime14ATVCallManager_displayConnectionObserver];
  uint64_t v49 = swift_allocObject(&unk_1000FACB8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v49 + 16, v42);
  uint64_t v50 = (void (**)())&v48[OBJC_IVAR____TtC8FaceTime25DisplayConnectionObserver_onDisconnectTimeout];
  uint64_t v51 = *(void *)&v48[OBJC_IVAR____TtC8FaceTime25DisplayConnectionObserver_onDisconnectTimeout];
  uint64_t v52 = *(void *)&v48[OBJC_IVAR____TtC8FaceTime25DisplayConnectionObserver_onDisconnectTimeout + 8];
  *uint64_t v50 = sub_100085858;
  v50[1] = (void (*)())v49;
  uint64_t v53 = v48;
  swift_retain(v49);
  sub_10001C08C(v51, v52);

  swift_release(v49);
  swift_release(v33);
  return v42;
}

void sub_10008111C(uint64_t a1)
{
  uint64_t v2 = sub_100018A04((uint64_t *)&unk_1001148A0);
  __chkstk_darwin(v2);
  uint64_t v4 = (id *)&v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a1 += 16LL;
  swift_beginAccess(a1, v20, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    uint64_t v6 = (char *)Strong;
    uint64_t v7 = *(void *)(Strong + OBJC_IVAR____TtC8FaceTime14ATVCallManager_activeCallSubject);
    uint64_t v8 = swift_retain(v7);
    CurrentValueSubject.value.getter(v8);
    swift_release(v7);
    uint64_t v9 = type metadata accessor for ActiveCallContext(0LL);
    if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v4, 1LL, v9) == 1)
    {
      sub_10001C608((uint64_t)v4, (uint64_t *)&unk_1001148A0);
      id v10 = v6;
    }

    else
    {
      id v11 = *v4;
      sub_10001C644((uint64_t)v4, type metadata accessor for ActiveCallContext);
      if (qword_100112470 != -1) {
        swift_once(&qword_100112470, sub_1000B1848);
      }
      uint64_t v12 = type metadata accessor for Logger(0LL);
      sub_10001C270(v12, (uint64_t)qword_10011A3F8);
      id v10 = v11;
      uint64_t v13 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        os_log_type_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v16 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)os_log_type_t v15 = 138412290;
        id v19 = v10;
        id v17 = v10;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v15 + 4, v15 + 12);
        *uint64_t v16 = v10;

        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Display lost, ending call %@", v15, 0xCu);
        uint64_t v18 = sub_100018A04((uint64_t *)&unk_100112E20);
        swift_arrayDestroy(v16, 1LL, v18);
        swift_slowDealloc(v16, -1LL, -1LL);
        swift_slowDealloc(v15, -1LL, -1LL);
      }

      else
      {

        uint64_t v13 = (os_log_s *)v10;
      }

      [*(id *)&v6[OBJC_IVAR____TtC8FaceTime14ATVCallManager_callCenter] disconnectCall:v10];
    }
  }

uint64_t sub_1000813B4(void *a1)
{
  uint64_t v3 = sub_100018A04((uint64_t *)&unk_1001148A0);
  __chkstk_darwin(v3);
  uint64_t v54 = (uint64_t)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100018A04((uint64_t *)&unk_100113110);
  __chkstk_darwin(v5);
  uint64_t v53 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100018A04(&qword_100112D10);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  os_log_type_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v50 = (char *)&v46 - v15;
  uint64_t v16 = type metadata accessor for ActiveCallContext(0LL);
  uint64_t v51 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (uint64_t *)((char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v55 = v1;
  uint64_t v19 = v1 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_lastJoinCallContext;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_lastJoinCallContext, v57, 0LL, 0LL);
  sub_10001C3B8(v19, (uint64_t)v18 + *(int *)(v16 + 20), (uint64_t *)&unk_100113110);
  *uint64_t v18 = a1;
  uint64_t v52 = v16;
  *((_BYTE *)v18 + *(int *)(v16 + sub_1000795D4(*(_BYTE *)(v0 + 16), *(void *)(v0 + 24)) = 0;
  id v20 = a1;
  id v21 = [v20 conversationID];
  if (v21)
  {
    double v22 = v21;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);

    id v23 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v23(v9, v14, v10);
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v24(v9, 0LL, 1LL, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) != 1)
    {
      uint64_t v25 = v50;
      v23(v50, v9, v10);
      uint64_t v48 = *(void *)(v55 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_signpostManager);
      uint64_t v26 = sub_100018A04(&qword_100115338);
      uint64_t v47 = type metadata accessor for Signposts.Interval(0LL);
      uint64_t v27 = *(void *)(v47 - 8);
      uint64_t v28 = *(void *)(v27 + 72);
      uint64_t v29 = *(unsigned __int8 *)(v27 + 80);
      id v49 = v20;
      uint64_t v30 = (v29 + 32) & ~v29;
      uint64_t v31 = swift_allocObject(v26, v30 + 2 * v28, v29 | 7);
      *(_OWORD *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C52F0;
      uint64_t v32 = v31 + v30;
      v24((char *)v32, 1LL, 1LL, v10);
      uint64_t v33 = (char *)(v32 + v28);
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v33, v25, v10);
      v24(v33, 0LL, 1LL, v10);
      sub_10002EC9C(v31);
      swift_setDeallocating(v31);
      uint64_t v34 = v32;
      id v20 = v49;
      swift_arrayDestroy(v34, *(void *)(v31 + 16), v47);
      swift_deallocClassInstance(v31, 32LL, 7LL);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v25, v10);
      goto LABEL_6;
    }
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1LL, 1LL, v10);
  }

  sub_10001C608((uint64_t)v9, &qword_100112D10);
LABEL_6:
  uint64_t v36 = OBJC_IVAR____TtC8FaceTime14ATVCallManager_videoPresentationStateCoordinator;
  uint64_t v37 = v55;
  if (!*(void *)(v55 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_videoPresentationStateCoordinator))
  {
    uint64_t v38 = type metadata accessor for VideoPresentationStateCoordinator(0LL, v35);
    unint64_t v39 = (void *)swift_allocObject(v38, 40LL, 7LL);
    v39[3] = 0LL;
    v39[4] = 0LL;
    void v39[2] = v20;
    *(void *)(v37 + v36) = v39;
    id v40 = v20;
  }

  uint64_t v41 = type metadata accessor for JoinCallContext(0LL);
  uint64_t v42 = (uint64_t)v53;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56LL))(v53, 1LL, 1LL, v41);
  swift_beginAccess(v19, v56, 33LL, 0LL);
  sub_100085860(v42, v19);
  swift_endAccess(v56);
  uint64_t v43 = *(void *)(v37 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_activeCallSubject);
  uint64_t v44 = v54;
  sub_1000606A8((uint64_t)v18, v54, type metadata accessor for ActiveCallContext);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v44, 0LL, 1LL, v52);
  swift_retain(v43);
  CurrentValueSubject.send(_:)(v44);
  swift_release(v43);
  sub_10001C608(v44, (uint64_t *)&unk_1001148A0);
  return sub_10001C644((uint64_t)v18, type metadata accessor for ActiveCallContext);
}

double sub_100081834(id *a1, void *a2)
{
  uint64_t v5 = sub_100018A04((uint64_t *)&unk_1001148A0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(v2 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_videoPresentationStateCoordinator);
  *(void *)(v2 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_videoPresentationStateCoordinator) = 0LL;
  swift_release(v8);
  uint64_t v9 = *(void *)(v2 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_activeCallSubject);
  uint64_t v10 = type metadata accessor for ActiveCallContext(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v7, 1LL, 1LL, v10);
  swift_retain(v9);
  CurrentValueSubject.send(_:)(v7);
  swift_release(v9);
  sub_10001C608((uint64_t)v7, (uint64_t *)&unk_1001148A0);
  if (!a2) {
    return result;
  }
  id v12 = a2;
  id v13 = [v12 callUUID];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  uint64_t v16 = v15;

  id v17 = [*a1 callUUID];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  uint64_t v20 = v19;

  if (v14 == v18 && v16 == v20)
  {
    swift_bridgeObjectRelease_n(v16, 2LL);
  }

  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v18, v20, 0LL);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v16);
    if ((v21 & 1) == 0)
    {
LABEL_9:

      return result;
    }
  }

  id v22 = [v12 errorAlertTitle];
  if (!v22) {
    goto LABEL_9;
  }
  id v23 = v22;
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v26 = v25;

  id v27 = [v12 errorAlertMessage];
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    uint64_t v31 = v30;
  }

  else
  {
    uint64_t v29 = 0LL;
    uint64_t v31 = 0LL;
  }

  sub_100084A30(v24, v26, v29, v31);
  swift_bridgeObjectRelease(v26);

  *(void *)&double result = swift_bridgeObjectRelease(v31).n128_u64[0];
  return result;
}

uint64_t sub_100081A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  void v4[5] = v3;
  void v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = sub_100018A04((uint64_t *)&unk_1001148A0);
  void v4[6] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for ActiveCallContext(0LL);
  v4[7] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[8] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v4[9] = swift_task_alloc(v8);
  v4[10] = swift_task_alloc(v8);
  uint64_t v9 = sub_100018A04(&qword_100115330);
  v4[11] = v9;
  v4[12] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100081B24, 0LL, 0LL);
}

uint64_t sub_100081B24()
{
  uint64_t v1 = *(void **)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = (uint64_t)v1 + *(int *)(*(void *)(v0 + 88) + 48LL);
  *uint64_t v1 = v3;
  sub_10001C3B8(v2, v4, (uint64_t *)&unk_1001148A0);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 64);
  if (!v3)
  {
    int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5);
    uint64_t v10 = *(void ***)(v0 + 96);
    if (v9 == 1)
    {
      sub_10001C608(*(void *)(v0 + 96), &qword_100115330);
      goto LABEL_17;
    }

    uint64_t v24 = *(id **)(v0 + 72);
    uint64_t v25 = *(void **)(v0 + 24);
    sub_10007F750(v4, (uint64_t)v24, type metadata accessor for ActiveCallContext);
    sub_100081834(v24, v25);
    sub_10001C644((uint64_t)v24, type metadata accessor for ActiveCallContext);
    uint64_t v26 = *v10;
LABEL_16:

    goto LABEL_17;
  }

  uint64_t v7 = *(void **)(v0 + 16);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) != 1)
  {
    uint64_t v11 = *(id **)(v0 + 80);
    sub_10007F750(v4, (uint64_t)v11, type metadata accessor for ActiveCallContext);
    id v12 = v7;
    id v13 = [v12 callUUID];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    uint64_t v16 = v15;

    id v17 = *v11;
    id v18 = [*v11 callUUID];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v21 = v20;

    if (v14 == v19 && v16 == v21)
    {
      swift_bridgeObjectRelease_n(v16, 2LL);
      [v12 status];
      [v17 status];
    }

    else
    {
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v19, v21, 0LL);
      swift_bridgeObjectRelease(v16);
      objc_msgSend(v12, "status", swift_bridgeObjectRelease(v21).n128_f64[0]);
      [v17 status];
      if ((v23 & 1) == 0)
      {
        sub_10001C644(*(void *)(v0 + 80), type metadata accessor for ActiveCallContext);

LABEL_15:
        uint64_t v26 = **(void ***)(v0 + 96);
        goto LABEL_16;
      }
    }

    id v27 = *(id **)(v0 + 72);
    uint64_t v28 = *(void *)(v0 + 80);
    uint64_t v29 = *(void *)(v0 + 56);
    uint64_t v30 = *(void *)(v0 + 64);
    uint64_t v32 = *(void *)(v0 + 40);
    uint64_t v31 = *(void *)(v0 + 48);
    sub_1000606A8(v28, (uint64_t)v27, type metadata accessor for ActiveCallContext);
    objc_storeStrong(v27, v7);
    uint64_t v33 = *(void *)(v32 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_activeCallSubject);
    sub_1000606A8((uint64_t)v27, v31, type metadata accessor for ActiveCallContext);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v31, 0LL, 1LL, v29);
    swift_retain(v33);
    CurrentValueSubject.send(_:)(v31);

    swift_release(v33);
    sub_10001C608(v31, (uint64_t *)&unk_1001148A0);
    sub_10001C644(v28, type metadata accessor for ActiveCallContext);
    sub_10001C644((uint64_t)v27, type metadata accessor for ActiveCallContext);
    goto LABEL_15;
  }

  id v8 = v7;
  sub_1000813B4(v8);

LABEL_17:
  uint64_t v34 = *(void *)(v0 + 72);
  uint64_t v35 = *(void *)(v0 + 80);
  uint64_t v36 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 96));
  swift_task_dealloc(v35);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100081E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[12] = a4;
  v5[13] = a5;
  uint64_t v6 = sub_100018A04((uint64_t *)&unk_1001148A0);
  v5[14] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for MainActor(0LL);
  v5[15] = static MainActor.shared.getter(v7);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v5[16] = v8;
  v5[17] = v9;
  return swift_task_switch(sub_100081EC4, v8, v9);
}

uint64_t sub_100081EC4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 96) + OBJC_IVAR____TtC8FaceTime14ATVCallManager_activeCallSubject);
  swift_retain(v1);
  CurrentValueSubject.value.getter(v2);
  swift_release(v1);
  return swift_task_switch(sub_100081F28, 0LL, 0LL);
}

uint64_t sub_100081F28()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = swift_task_alloc(32LL);
  v0[18] = v2;
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[19] = v3;
  uint64_t v4 = sub_100018A04(&qword_100115360);
  *uint64_t v3 = v0;
  v3[1] = sub_100081FD8;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 10,  0LL,  0LL,  0xD000000000000012LL,  0x80000001000DBE20LL,  sub_100086264,  v2,  v4);
}

uint64_t sub_100081FD8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 144LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 152LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100082034, 0LL, 0LL);
}

uint64_t sub_100082034()
{
  v0[20] = v0[10];
  return swift_task_switch(sub_10008204C, v0[16], v0[17]);
}

uint64_t sub_10008204C()
{
  id v1 = [*(id *)(v0 + 104) object];
  if (v1)
  {
    id v2 = v1;
    _bridgeAnyObjectToAny(_:)((void *)(v0 + 48), v1);
    swift_unknownObjectRelease(v2);
  }

  else
  {
    *(_OWORD *)(v0 + 4_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v0 + 64) = 0u;
  }

  sub_100052900(v0 + 48, v0 + 16, (uint64_t *)&unk_1001130F0);
  if (*(void *)(v0 + 40))
  {
    uint64_t v3 = sub_10001C5D0(0LL, &qword_100115368, &OBJC_CLASS___TUCall_ptr);
    else {
      uint64_t v4 = 0LL;
    }
  }

  else
  {
    sub_10001C608(v0 + 16, (uint64_t *)&unk_1001130F0);
    uint64_t v4 = 0LL;
  }

  *(void *)(v0 + 16_Block_object_dispose(va, 8) = v4;
  uint64_t v5 = (void *)swift_task_alloc(dword_1001152FC);
  *(void *)(v0 + 176) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100082170;
  return sub_100081A64(*(void *)(v0 + 160), v4, *(void *)(v0 + 112));
}

uint64_t sub_100082170()
{
  uint64_t v1 = *v0;
  id v2 = *(void **)(*v0 + 168);
  uint64_t v3 = *(void **)(*v0 + 160);
  swift_task_dealloc(*(void *)(*v0 + 176));

  return swift_task_switch(sub_1000821D0, *(void *)(v1 + 128), *(void *)(v1 + 136));
}

uint64_t sub_1000821D0()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_release(*(void *)(v0 + 120));
  sub_10001C608(v1, (uint64_t *)&unk_1001148A0);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100082320(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  __int128 v105 = a2;
  uint64_t v102 = a1;
  uint64_t v7 = sub_100018A04(&qword_100115310);
  __chkstk_darwin(v7);
  uint64_t v108 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Signposts.Interval(0LL);
  __chkstk_darwin(v9);
  uint64_t v95 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v104 = type metadata accessor for OutgoingCallType(0LL);
  uint64_t v11 = __chkstk_darwin(v104);
  uint64_t v96 = (uint64_t)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v94 = (uint64_t)&v90 - v14;
  __chkstk_darwin(v13);
  uint64_t v92 = (uint64_t)&v90 - v15;
  uint64_t v99 = type metadata accessor for CallType(0LL);
  uint64_t v101 = *(void *)(v99 - 8);
  uint64_t v16 = __chkstk_darwin(v99);
  uint64_t v97 = (char *)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v98 = (char *)&v90 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v93 = (char *)&v90 - v21;
  __chkstk_darwin(v20);
  uint64_t v91 = (char *)&v90 - v22;
  uint64_t v100 = sub_100018A04((uint64_t *)&unk_100113110);
  uint64_t v23 = __chkstk_darwin(v100);
  uint64_t v25 = (char *)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v28 = (uint64_t *)((char *)&v90 - v27);
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v90 - v29;
  uint64_t v31 = (void *)swift_allocObject(&unk_1000FAE48, 40LL, 7LL);
  uint64_t v106 = a3;
  void v31[2] = a3;
  v31[3] = a4;
  uint64_t v109 = v31;
  v31[4] = v4;
  uint64_t v32 = (uint64_t)&v4[OBJC_IVAR____TtC8FaceTime14ATVCallManager_lastJoinCallContext];
  swift_beginAccess(&v4[OBJC_IVAR____TtC8FaceTime14ATVCallManager_lastJoinCallContext], v113, 0LL, 0LL);
  uint64_t v103 = v32;
  sub_10001C3B8(v32, (uint64_t)v30, (uint64_t *)&unk_100113110);
  uint64_t v33 = type metadata accessor for JoinCallContext(0LL);
  uint64_t v34 = *(void *)(v33 - 8);
  LODWORD(v32) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48))(v30, 1LL, v33);
  uint64_t v35 = v4;
  uint64_t v107 = a4;
  swift_retain(a4);
  sub_10001C608((uint64_t)v30, (uint64_t *)&unk_100113110);
  if ((_DWORD)v32 == 1)
  {
    sub_100084528();
    if ((v102 & 0xC000000000000001LL) != 0)
    {
      if (v102 < 0) {
        uint64_t v36 = v102;
      }
      else {
        uint64_t v36 = v102 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v37 = __CocoaSet.count.getter(v36);
    }

    else
    {
      uint64_t v37 = *(void *)(v102 + 16);
    }

    uint64_t v54 = v92;
    uint64_t v55 = v91;
    sub_1000606A8((uint64_t)v105, v92, type metadata accessor for OutgoingCallType);
    if (swift_getEnumCaseMultiPayload(v54, v104) == 1)
    {
      uint64_t v56 = v101;
      uint64_t v57 = v99;
      (*(void (**)(char *, uint64_t, uint64_t))(v101 + 32))(v55, v54, v99);
    }

    else
    {
      sub_10001C644(v54, type metadata accessor for OutgoingCallType);
      uint64_t v56 = v101;
      uint64_t v57 = v99;
      (*(void (**)(char *, void, uint64_t))(v101 + 104))(v55, enum case for CallType.video(_:), v99);
    }

    *uint64_t v28 = v37;
    uint64_t v58 = type metadata accessor for OutgoingCallContext(0LL);
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
    v59((char *)v28 + *(int *)(v58 + 20), v55, v57);
    *((_BYTE *)v28 + *(int *)(v58 + sub_1000795D4(*(_BYTE *)(v0 + 16), *(void *)(v0 + 24)) = 0;
    swift_storeEnumTagMultiPayload(v28, v33, 0LL);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v34 + 56))(v28, 0LL, 1LL, v33);
    uint64_t v60 = v103;
    swift_beginAccess(v103, aBlock, 33LL, 0LL);
    sub_100085860((uint64_t)v28, v60);
    swift_endAccess(aBlock);
    uint64_t v61 = v94;
    sub_1000606A8((uint64_t)v105, v94, type metadata accessor for OutgoingCallType);
    uint64_t v62 = v56;
    if (swift_getEnumCaseMultiPayload(v61, v104) == 1)
    {
      uint64_t v63 = v93;
      v59(v93, (char *)v61, v57);
      uint64_t v64 = enum case for CallType.video(_:);
    }

    else
    {
      sub_10001C644(v61, type metadata accessor for OutgoingCallType);
      uint64_t v64 = enum case for CallType.video(_:);
      uint64_t v63 = v93;
      (*(void (**)(char *, void, uint64_t))(v62 + 104))(v93, enum case for CallType.video(_:), v57);
    }

    uint64_t v65 = v57;
    char v66 = *(uint64_t (**)(char *, uint64_t))(v62 + 88);
    int v67 = v66(v63, v57);
    int v68 = enum case for CallType.audio(_:);
    if (v67 == enum case for CallType.audio(_:) || v67 == (_DWORD)v64)
    {
      uint64_t v69 = type metadata accessor for UUID(0LL);
      uint64_t v70 = (uint64_t)v95;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56LL))(v95, 1LL, 1LL, v69);
      uint64_t v71 = sub_10002EB94(v70);
      swift_release(v71);
      sub_10001C644(v70, type metadata accessor for Signposts.Interval);
      if (qword_100112470 != -1) {
        swift_once(&qword_100112470, sub_1000B1848);
      }
      uint64_t v72 = type metadata accessor for Logger(0LL);
      uint64_t v73 = sub_10001C270(v72, (uint64_t)qword_10011A3F8);
      uint64_t v74 = (os_log_s *)Logger.logObject.getter(v73);
      os_log_type_t v75 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v74, v75))
      {
        uint64_t v76 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v76 = 0;
        _os_log_impl((void *)&_mh_execute_header, v74, v75, "Starting FaceTime conversation", v76, 2u);
        swift_slowDealloc(v76, -1LL, -1LL);
      }

      uint64_t v77 = *(void **)&v35[OBJC_IVAR____TtC8FaceTime14ATVCallManager_conduit];
      sub_10001C5D0(0LL, (unint64_t *)&qword_100113BA0, &OBJC_CLASS___TUHandle_ptr);
      sub_10001C230( (unint64_t *)&unk_100113BB0,  (unint64_t *)&qword_100113BA0,  &OBJC_CLASS___TUHandle_ptr);
      v78.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
      uint64_t v79 = v96;
      sub_1000606A8((uint64_t)v105, v96, type metadata accessor for OutgoingCallType);
      if (swift_getEnumCaseMultiPayload(v79, v104) == 1)
      {
        uint64_t v80 = v98;
        v59(v98, (char *)v79, v65);
        uint64_t v81 = v101;
      }

      else
      {
        sub_10001C644(v79, type metadata accessor for OutgoingCallType);
        uint64_t v81 = v101;
        uint64_t v80 = v98;
        (*(void (**)(char *, uint64_t, uint64_t))(v101 + 104))(v98, v64, v65);
      }

      uint64_t v82 = v97;
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v97, v80, v65);
      int v83 = v66(v82, v65);
      uint64_t v84 = *(void (**)(char *, uint64_t))(v81 + 8);
      if (v83 == v68)
      {
        uint64_t v85 = 1LL;
      }

      else
      {
        v84(v82, v65);
        uint64_t v85 = 2LL;
      }

      uint64_t v86 = v109;
      v84(v80, v65);
      uint64_t v87 = swift_allocObject(&unk_1000FAE70, 32LL, 7LL);
      *(void *)(v87 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100085FD8;
      *(void *)(v87 + 24) = v86;
      aBlock[4] = (uint64_t)sub_100086464;
      uint64_t v112 = v87;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_100082D78;
      void aBlock[3] = (uint64_t)&unk_1000FAE88;
      uint64_t v88 = _Block_copy(aBlock);
      uint64_t v89 = v112;
      swift_retain(v86);
      objc_msgSend( v77,  "startConversationWithHandles:mode:completion:",  v78.super.isa,  v85,  v88,  swift_release(v89).n128_f64[0]);
      swift_release(v86);

      _Block_release(v88);
    }

    else
    {
      _diagnoseUnexpectedEnumCase<A>(type:)(v57, v57);
      __break(1u);
    }
  }

  else
  {
    __int128 v105 = v35;
    if (qword_100112470 != -1) {
      swift_once(&qword_100112470, sub_1000B1848);
    }
    uint64_t v38 = type metadata accessor for Logger(0LL);
    sub_10001C270(v38, (uint64_t)qword_10011A3F8);
    uint64_t v39 = (uint64_t)v105;
    id v40 = v105;
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v44 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v44;
      *(_DWORD *)uint64_t v43 = 136315138;
      sub_10001C3B8(v103, (uint64_t)v25, (uint64_t *)&unk_100113110);
      uint64_t v45 = String.init<A>(describing:)(v25, v100);
      unint64_t v47 = v46;
      uint64_t v110 = sub_1000850E4(v45, v46, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, aBlock, v43 + 4, v43 + 12);
      swift_bridgeObjectRelease(v47);

      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Cannot start call while lastJoinCallContext=%s", v43, 0xCu);
      swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v48 = v44;
      uint64_t v39 = (uint64_t)v105;
      swift_slowDealloc(v48, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    else
    {
    }

    unint64_t v49 = sub_100085EE8();
    uint64_t v50 = swift_allocError(&type metadata for ATVCallManager.JoinConversationError, v49, 0LL, 0LL);
    *uint64_t v51 = 2;
    swift_willThrow(v50);
    uint64_t v52 = type metadata accessor for CallIdentifier(0LL);
    uint64_t v53 = (uint64_t)v108;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56LL))(v108, 1LL, 1LL, v52);
    swift_errorRetain(v50);
    sub_100083544(v53, v50, v106, v107, v39, (uint64_t)&unk_1000FAEC0, (uint64_t)sub_100085FA4, (uint64_t)&unk_1000FAED8);
    swift_errorRelease(v50);
    swift_release(v109);
    swift_errorRelease(v50);
    sub_10001C608(v53, &qword_100115310);
  }

uint64_t sub_100082D78(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_100018A04(&qword_100112D10);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void (**)(char *, void *))(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  if (a2)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(a2);
    uint64_t v11 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v8, 0LL, 1LL, v11);
  }

  else
  {
    uint64_t v12 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v8, 1LL, 1LL, v12);
  }

  swift_retain(v9);
  id v13 = a3;
  v10(v8, a3);
  swift_release(v9);

  return sub_10001C608((uint64_t)v8, &qword_100112D10);
}

void sub_100082E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v70 = a2;
  uint64_t v71 = a1;
  uint64_t v7 = sub_100018A04(&qword_100115310);
  __chkstk_darwin(v7);
  uint64_t v74 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CallType(0LL);
  uint64_t v67 = *(void *)(v9 - 8);
  uint64_t v68 = v9;
  __chkstk_darwin(v9);
  char v66 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Signposts.Interval(0LL);
  __chkstk_darwin(v11);
  uint64_t v65 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v69 = sub_100018A04((uint64_t *)&unk_100113110);
  uint64_t v13 = __chkstk_darwin(v69);
  uint64_t v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (uint64_t *)((char *)&v64 - v17);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v64 - v19;
  uint64_t v21 = (void *)swift_allocObject(&unk_1000FAD80, 40LL, 7LL);
  uint64_t v72 = a3;
  _OWORD v21[2] = a3;
  void v21[3] = a4;
  os_log_type_t v75 = v21;
  v21[4] = v4;
  uint64_t v22 = (uint64_t)&v4[OBJC_IVAR____TtC8FaceTime14ATVCallManager_lastJoinCallContext];
  swift_beginAccess(&v4[OBJC_IVAR____TtC8FaceTime14ATVCallManager_lastJoinCallContext], v79, 0LL, 0LL);
  sub_10001C3B8(v22, (uint64_t)v20, (uint64_t *)&unk_100113110);
  uint64_t v23 = type metadata accessor for JoinCallContext(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48))(v20, 1LL, v23);
  uint64_t v26 = v4;
  uint64_t v73 = a4;
  swift_retain(a4);
  sub_10001C608((uint64_t)v20, (uint64_t *)&unk_100113110);
  if (v25 == 1)
  {
    sub_100084528();
    uint64_t v27 = v26;
    if ((v71 & 0xC000000000000001LL) != 0)
    {
      if (v71 < 0) {
        uint64_t v28 = v71;
      }
      else {
        uint64_t v28 = v71 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v29 = __CocoaSet.count.getter(v28);
    }

    else
    {
      uint64_t v29 = *(void *)(v71 + 16);
    }

    uint64_t v47 = v70;
    uint64_t v48 = type metadata accessor for OutgoingCallContext(0LL);
    uint64_t v49 = v67;
    uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
    uint64_t v51 = v47;
    uint64_t v52 = v68;
    v50((char *)v18 + *(int *)(v48 + 20), v51, v68);
    *uint64_t v18 = v29;
    *((_BYTE *)v18 + *(int *)(v48 + sub_1000795D4(*(_BYTE *)(v0 + 16), *(void *)(v0 + 24)) = 1;
    swift_storeEnumTagMultiPayload(v18, v23, 0LL);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v24 + 56))(v18, 0LL, 1LL, v23);
    swift_beginAccess(v22, aBlock, 33LL, 0LL);
    sub_100085860((uint64_t)v18, v22);
    swift_endAccess(aBlock);
    uint64_t v53 = type metadata accessor for UUID(0LL);
    uint64_t v54 = (uint64_t)v65;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56LL))(v65, 1LL, 1LL, v53);
    uint64_t v55 = sub_10002EB94(v54);
    swift_release(v55);
    sub_10001C644(v54, type metadata accessor for Signposts.Interval);
    uint64_t v56 = *(void **)&v27[OBJC_IVAR____TtC8FaceTime14ATVCallManager_conduit];
    sub_10001C5D0(0LL, &qword_100112948, &OBJC_CLASS___TUContinuityHandleAnonym_ptr);
    sub_10001C230((unint64_t *)&unk_100112950, &qword_100112948, &OBJC_CLASS___TUContinuityHandleAnonym_ptr);
    v57.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
    uint64_t v58 = v66;
    v50(v66, v70, v52);
    if ((*(unsigned int (**)(char *, uint64_t))(v49 + 88))(v58, v52) == enum case for CallType.audio(_:))
    {
      uint64_t v59 = v75;
      uint64_t v60 = 1LL;
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v49 + 8))(v58, v52);
      uint64_t v60 = 2LL;
      uint64_t v59 = v75;
    }

    uint64_t v61 = swift_allocObject(&unk_1000FADA8, 32LL, 7LL);
    *(void *)(v61 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100085F30;
    *(void *)(v61 + 24) = v59;
    aBlock[4] = (uint64_t)sub_100085F88;
    uint64_t v78 = v61;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_100082D78;
    void aBlock[3] = (uint64_t)&unk_1000FADC0;
    uint64_t v62 = _Block_copy(aBlock);
    uint64_t v63 = v78;
    swift_retain(v59);
    swift_release(v63);
    [v56 startConversationWithAnonyms:v57.super.isa mode:v60 completion:v62];
    swift_release(v59);
    _Block_release(v62);
  }

  else
  {
    uint64_t v30 = (uint64_t)v26;
    if (qword_100112470 != -1) {
      swift_once(&qword_100112470, sub_1000B1848);
    }
    uint64_t v31 = type metadata accessor for Logger(0LL);
    sub_10001C270(v31, (uint64_t)qword_10011A3F8);
    uint64_t v32 = (uint64_t)v26;
    uint64_t v33 = v26;
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v37 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v37;
      *(_DWORD *)uint64_t v36 = 136315138;
      uint64_t v71 = (uint64_t)(v36 + 4);
      sub_10001C3B8(v22, (uint64_t)v15, (uint64_t *)&unk_100113110);
      uint64_t v38 = String.init<A>(describing:)(v15, v69);
      unint64_t v40 = v39;
      uint64_t v76 = sub_1000850E4(v38, v39, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, aBlock, v71, v36 + 12);
      swift_bridgeObjectRelease(v40);

      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Cannot start call while lastJoinCallContext=%s", v36, 0xCu);
      swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1LL, -1LL);
      uint64_t v41 = v36;
      uint64_t v32 = v30;
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
    }

    unint64_t v42 = sub_100085EE8();
    uint64_t v43 = swift_allocError(&type metadata for ATVCallManager.JoinConversationError, v42, 0LL, 0LL);
    *uint64_t v44 = 2;
    swift_willThrow(v43);
    uint64_t v45 = type metadata accessor for CallIdentifier(0LL);
    uint64_t v46 = (uint64_t)v74;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56LL))(v74, 1LL, 1LL, v45);
    swift_errorRetain(v43);
    sub_100083544(v46, v43, v72, v73, v32, (uint64_t)&unk_1000FADF8, (uint64_t)sub_100085FA4, (uint64_t)&unk_1000FAE10);
    swift_errorRelease(v43);
    swift_release(v75);
    swift_errorRelease(v43);
    sub_10001C608(v46, &qword_100115310);
  }

uint64_t sub_100083544( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v62 = a7;
  uint64_t v63 = a8;
  uint64_t v58 = a6;
  uint64_t v59 = a3;
  uint64_t v55 = a5;
  uint64_t v60 = a4;
  uint64_t v61 = a2;
  uint64_t v57 = a1;
  uint64_t v8 = sub_100018A04((uint64_t *)&unk_100113110);
  __chkstk_darwin(v8);
  uint64_t v54 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v64 = *(void *)(v13 - 8);
  uint64_t v65 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100018A04(&qword_100115310);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v21 + 104))( v23,  enum case for DispatchQoS.QoSClass.default(_:),  v20);
  uint64_t v56 = static OS_dispatch_queue.global(qos:)(v23);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  sub_10001C3B8(v57, (uint64_t)v19, &qword_100115310);
  uint64_t v24 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v25 = (v24 + 32) & ~v24;
  unint64_t v26 = (v18 + v25 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v27 = swift_allocObject(v58, v26 + 8, v24 | 7);
  uint64_t v28 = v60;
  *(void *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = v59;
  *(void *)(v27 + 24) = v28;
  sub_100052900((uint64_t)v19, v27 + v25, &qword_100115310);
  uint64_t v30 = v61;
  uint64_t v29 = v62;
  *(void *)(v27 + v26) = v61;
  v69[3] = v29;
  uint64_t v70 = v27;
  id aBlock = _NSConcreteStackBlock;
  v69[0] = 1107296256LL;
  v69[1] = sub_100027654;
  v69[2] = v63;
  uint64_t v31 = _Block_copy(&aBlock);
  swift_retain(v28);
  uint64_t v32 = swift_errorRetain(v30);
  static DispatchQoS.unspecified.getter(v32);
  uint64_t v67 = _swiftEmptyArrayStorage;
  uint64_t v33 = sub_10001949C( (unint64_t *)&qword_100112930,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v34 = sub_100018A04((uint64_t *)&unk_100112FD0);
  uint64_t v35 = sub_10004F2A8((unint64_t *)&qword_100112940, (uint64_t *)&unk_100112FD0);
  uint64_t v36 = v34;
  uint64_t v37 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v67, v36, v35, v10, v33);
  uint64_t v38 = (void *)v56;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v12, v31);
  _Block_release(v31);

  (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v15, v65);
  uint64_t result = swift_release(v70);
  if (v30)
  {
    swift_errorRetain(v30);
    if (qword_100112470 != -1) {
      swift_once(&qword_100112470, sub_1000B1848);
    }
    uint64_t v40 = type metadata accessor for Logger(0LL);
    sub_10001C270(v40, (uint64_t)qword_10011A3F8);
    swift_errorRetain(v30);
    uint64_t v41 = swift_errorRetain(v30);
    unint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v45 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v44 = 138412290;
      swift_errorRetain(v30);
      uint64_t v46 = _swift_stdlib_bridgeErrorToNSError(v30);
      id aBlock = (void **)v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v69, v44 + 4, v44 + 12);
      uint64_t *v45 = v46;
      swift_errorRelease(v30);
      swift_errorRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Failed to start call with handles due to %@", v44, 0xCu);
      uint64_t v47 = sub_100018A04((uint64_t *)&unk_100112E20);
      swift_arrayDestroy(v45, 1LL, v47);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v44, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v30);
      swift_errorRelease(v30);
    }

    id aBlock = (void **)v30;
    swift_errorRetain(v30);
    uint64_t v48 = sub_100018A04(&qword_1001141F0);
    if ((swift_dynamicCast(&v67, &aBlock, v48, &type metadata for ATVCallManager.JoinConversationError, 6LL) & 1) == 0
      || v67 != 2)
    {
      swift_errorRetain(v30);
      uint64_t v49 = v55;
      sub_100084740(v30);
      swift_errorRelease(v30);
      uint64_t v50 = type metadata accessor for JoinCallContext(0LL);
      uint64_t v51 = (uint64_t)v54;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56LL))(v54, 1LL, 1LL, v50);
      uint64_t v52 = v49 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_lastJoinCallContext;
      swift_beginAccess(v52, &aBlock, 33LL, 0LL);
      sub_100085860(v51, v52);
      swift_endAccess(&aBlock);
    }

    return swift_errorRelease(v37);
  }

  return result;
}

uint64_t sub_100083AB8(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t))
{
  uint64_t v6 = sub_100018A04(&qword_100115310);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100018A04(&qword_100112D10);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2)
  {
    uint64_t v16 = type metadata accessor for CallIdentifier(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v8, 1LL, 1LL, v16);
    swift_errorRetain(a2);
    a3(v8, a2);
    swift_errorRelease(a2);
    return sub_10001C608((uint64_t)v8, &qword_100115310);
  }

  else
  {
    sub_10001C3B8(a1, (uint64_t)v11, &qword_100112D10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
    {
      uint64_t result = sub_10001C608((uint64_t)v11, &qword_100112D10);
      __break(1u);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v8, v15, v12);
      uint64_t v18 = type metadata accessor for CallIdentifier(0LL);
      swift_storeEnumTagMultiPayload(v8, v18, 0LL);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v8, 0LL, 1LL, v18);
      a3(v8, 0LL);
      sub_10001C608((uint64_t)v8, &qword_100115310);
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }
  }

  return result;
}

uint64_t sub_100083CD4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6 = sub_100018A04((uint64_t *)&unk_100113110);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a1) {
    return a3(0LL);
  }
  swift_errorRetain(a1);
  if (qword_100112470 != -1) {
    swift_once(&qword_100112470, sub_1000B1848);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_10001C270(v9, (uint64_t)qword_10011A3F8);
  swift_errorRetain(a1);
  uint64_t v10 = swift_errorRetain(a1);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v22 = a2;
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v21 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v13 = 138412290;
    swift_errorRetain(a1);
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(a1);
    uint64_t v23 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v13 + 4, v13 + 12);
    uint64_t v15 = v21;
    uint64_t *v21 = v14;
    a2 = v22;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to join continuity conversation due to %@", v13, 0xCu);
    uint64_t v16 = sub_100018A04((uint64_t *)&unk_100112E20);
    swift_arrayDestroy(v15, 1LL, v16);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  uint64_t v18 = type metadata accessor for JoinCallContext(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v8, 1LL, 1LL, v18);
  uint64_t v19 = a2 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_lastJoinCallContext;
  swift_beginAccess(v19, &v23, 33LL, 0LL);
  sub_100085860((uint64_t)v8, v19);
  swift_endAccess(&v23);
  swift_errorRetain(a1);
  a3(a1);
  swift_errorRelease(a1);
  return swift_errorRelease(a1);
}

uint64_t sub_100083F7C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100018A04((uint64_t *)&unk_1001148A0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v20 - v8;
  uint64_t v10 = type metadata accessor for ActiveCallContext(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = OBJC_IVAR____TtC8FaceTime14ATVCallManager_activeCallSubject;
  uint64_t v15 = *(void *)(v1 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_activeCallSubject);
  swift_retain(v15);
  CurrentValueSubject.value.getter(v16);
  swift_release(v15);
  sub_10007F750((uint64_t)v9, (uint64_t)v13, type metadata accessor for ActiveCallContext);
  uint64_t v18 = *(int *)(v10 + 24);
  if (v13[v18] != (a1 & 1))
  {
    v13[v18] = a1 & 1;
    uint64_t v19 = *(void *)(v2 + v14);
    sub_1000606A8((uint64_t)v13, (uint64_t)v7, type metadata accessor for ActiveCallContext);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0LL, 1LL, v10);
    swift_retain(v19);
    CurrentValueSubject.send(_:)(v7);
    swift_release(v19);
    sub_10001C608((uint64_t)v7, (uint64_t *)&unk_1001148A0);
  }

  return sub_10001C644((uint64_t)v13, type metadata accessor for ActiveCallContext);
}

uint64_t sub_100084144(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = a1;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v28 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v26 = *(void *)(v6 - 8);
  uint64_t v27 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100018A04(&qword_100115370);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v13 = [*(id *)(a2 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_callCenter) queue];
  uint64_t v14 = swift_allocObject(&unk_1000FACB8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v14 + 16, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v25, v9);
  uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v16 = (v15 + 24) & ~v15;
  uint64_t v17 = swift_allocObject(&unk_1000FAF60, v16 + v11, v15 | 7);
  *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v17 + v16, v12, v9);
  aBlock[4] = sub_1000862E4;
  uint64_t v31 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  void aBlock[3] = &unk_1000FAF78;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain(v14);
  static DispatchQoS.unspecified.getter(v19);
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v20 = sub_10001949C( (unint64_t *)&qword_100112930,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v21 = sub_100018A04((uint64_t *)&unk_100112FD0);
  uint64_t v22 = sub_10004F2A8((unint64_t *)&qword_100112940, (uint64_t *)&unk_100112FD0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v21, v22, v3, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v5, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v27);
  swift_release(v31);
  return swift_release(v14);
}

void sub_1000843F0(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    id v4 = *(id *)(Strong + OBJC_IVAR____TtC8FaceTime14ATVCallManager_callCenter);
    id v5 = sub_1000B882C();
    id v6 = v5;
    if (v5)
    {
      id v7 = v5;
      active = (void *)TUCall.cnk_activeConversation.getter();

      if (active)
      {
        id v9 = [active localMember];

        if (v9)
        {
          unsigned int v10 = [v9 isLightweightMember];

          if (!v10)
          {
LABEL_8:
            id v13 = v6;
            uint64_t v11 = sub_100018A04(&qword_100115370);
            CheckedContinuation.resume(returning:)(&v13, v11);

            return;
          }

          id v6 = 0LL;
          id v4 = v7;
        }
      }
    }

    goto LABEL_8;
  }

  id v13 = 0LL;
  uint64_t v12 = sub_100018A04(&qword_100115370);
  CheckedContinuation.resume(returning:)(&v13, v12);
}

void sub_100084528()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_displayConnectionObserver)
                 + OBJC_IVAR____TtC8FaceTime25DisplayConnectionObserver_provider);
  swift_getObjectType(v1);
  swift_unknownObjectRetain(v1);
  BOOL v2 = sub_10002AA4C();
  swift_unknownObjectRelease(v1);
  if (v2)
  {
    id v4 = objc_msgSend((id)objc_opt_self(AVAudioSession, v3), "auxiliarySession");
    id v23 = 0LL;
    unsigned int v5 = [v4 setCategory:AVAudioSessionCategoryPlayAndRecord error:&v23];
    id v6 = v23;
    if (v5)
    {
      id v7 = v23;
    }

    else
    {
      id v11 = v23;
      uint64_t v12 = _convertNSErrorToError(_:)(v6);

      swift_willThrow(v13);
      swift_errorRelease(v12);
    }

    id v14 = [v4 availableOutputs];
    if (!v14) {
      goto LABEL_10;
    }
    uint64_t v15 = v14;
    uint64_t v16 = sub_10001C5D0(0LL, &qword_100115328, &OBJC_CLASS___AVAudioSessionPortDescription_ptr);
    uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

    if ((unint64_t)v17 >> 62)
    {
      uint64_t v22 = v17 < 0 ? v17 : v17 & 0xFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRetain(v17);
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter(v22);
      swift_bridgeObjectRelease(v17);
    }

    else
    {
      uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    swift_bridgeObjectRelease(v17);
    if (!v18)
    {
LABEL_10:
      unint64_t v19 = sub_100085EE8();
      uint64_t v20 = swift_allocError(&type metadata for ATVCallManager.JoinConversationError, v19, 0LL, 0LL);
      _BYTE *v21 = 1;
      swift_willThrow(v20);
    }
  }

  else
  {
    unint64_t v8 = sub_100085EE8();
    uint64_t v9 = swift_allocError(&type metadata for ATVCallManager.JoinConversationError, v8, 0LL, 0LL);
    *unsigned int v10 = 0;
    swift_willThrow(v9);
  }

uint64_t sub_100084740(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v24 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v6 - 8);
  uint64_t v23 = v6;
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
  uint64_t v13 = (void *)static OS_dispatch_queue.global(qos:)(v12);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v14 = swift_allocObject(&unk_1000FAD30, 32LL, 7LL);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *(void *)(v14 + 24) = a1;
  aBlock[4] = sub_100085930;
  uint64_t v27 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  void aBlock[3] = &unk_1000FAD48;
  uint64_t v15 = _Block_copy(aBlock);
  id v16 = v1;
  uint64_t v17 = swift_errorRetain(a1);
  static DispatchQoS.unspecified.getter(v17);
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_10001949C( (unint64_t *)&qword_100112930,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v19 = sub_100018A04((uint64_t *)&unk_100112FD0);
  uint64_t v20 = sub_10004F2A8((unint64_t *)&qword_100112940, (uint64_t *)&unk_100112FD0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v19, v20, v3, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v5, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v23);
  return swift_release(v27);
}

void *sub_1000849B8(uint64_t a1, unint64_t a2)
{
  if (qword_1001123A8 != -1) {
    swift_once(&qword_1001123A8, sub_100088AE0);
  }
  sub_100085A8C(a2, a2, (uint64_t)v5);
  sub_100088B38((uint64_t)v5, *(void *)(a1 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_queue));
  return sub_10002288C(v5);
}

uint64_t sub_100084A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = v4;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v28 = a1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v33 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v31 = *(void *)(v10 - 8);
  uint64_t v32 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))( v16,  enum case for DispatchQoS.QoSClass.default(_:),  v13);
  uint64_t v17 = (void *)static OS_dispatch_queue.global(qos:)(v16);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v18 = (void *)swift_allocObject(&unk_1000FACE0, 56LL, 7LL);
  uint64_t v19 = v29;
  v18[2] = v28;
  void v18[3] = v19;
  v18[4] = v30;
  v18[5] = a4;
  v18[6] = v5;
  aBlock[4] = sub_1000858DC;
  uint64_t v36 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  void aBlock[3] = &unk_1000FACF8;
  uint64_t v20 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a4);
  id v21 = v5;
  uint64_t v22 = swift_bridgeObjectRetain(v19);
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v34 = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_10001949C( (unint64_t *)&qword_100112930,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v24 = sub_100018A04((uint64_t *)&unk_100112FD0);
  uint64_t v25 = sub_10004F2A8((unint64_t *)&qword_100112940, (uint64_t *)&unk_100112FD0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v24, v25, v7, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v32);
  return swift_release(v36);
}

double sub_100084CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, a2), "mainBundle");
  v27._char object = (void *)0xEB00000000656C62LL;
  v11._uint64_t countAndFlagsBits = 19279LL;
  v11._char object = (void *)0xE200000000000000LL;
  v12._uint64_t countAndFlagsBits = 0LL;
  v12._char object = (void *)0xE000000000000000LL;
  v27._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, v10, v12, v27);

  if (qword_1001123A8 != -1) {
    swift_once(&qword_1001123A8, sub_100088AE0);
  }
  *(void *)&v18[0] = a1;
  *((void *)&v18[0] + 1) = a2;
  v18[1] = v13;
  uint64_t v19 = nullsub_1;
  uint64_t v20 = 0LL;
  *(void *)&__int128 v21 = a3;
  *((void *)&v21 + 1) = a4;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  uint64_t v26 = 0LL;
  uint64_t v17 = 0LL;
  _OWORD v16[2] = (unint64_t)nullsub_1;
  v16[3] = v21;
  memset(&v16[4], 0, 64);
  v16[0] = v18[0];
  v16[1] = v13;
  uint64_t v14 = *(void *)(a5 + OBJC_IVAR____TtC8FaceTime14ATVCallManager_queue);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(v13._object);
  swift_bridgeObjectRetain(a2);
  sub_100088B38((uint64_t)v16, v14);
  sub_10002288C(v18);
  *(void *)&double result = swift_bridgeObjectRelease(v13._object).n128_u64[0];
  return result;
}

id sub_100084E70()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ATVCallManager(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100084F54()
{
  return type metadata accessor for ATVCallManager(0LL);
}

uint64_t type metadata accessor for ATVCallManager(uint64_t a1)
{
  uint64_t result = qword_1001152E8;
  if (!qword_1001152E8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ATVCallManager);
  }
  return result;
}

void sub_100084F98(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1000268C8(319LL);
  if (v3 <= 0x3F)
  {
    void v4[6] = *(void *)(v2 - 8) + 64LL;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_updateClassMetadata2(a1, 256LL, 9LL, v4, a1 + 80);
  }

uint64_t sub_100085034(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_100085098;
  return v6(a1);
}

uint64_t sub_100085098()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000850E4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1000851B4(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10001C1A0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10001C1A0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_10001BFEC(v12);
  return v7;
}

uint64_t sub_1000851B4(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

uint64_t sub_10008536C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_100085400(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000855D8(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000855D8(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_100085400(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      unsigned int v5 = sub_100085574(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return &_swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_100085574(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_100018A04(&qword_100115300);
  unsigned int v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  void v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1000855D8(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100018A04(&qword_100115300);
    Swift::String v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    Swift::String v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

char *sub_100085724(void *a1, char *a2, double a3)
{
  unsigned int v5 = &a2[OBJC_IVAR____TtC8FaceTime25DisplayConnectionObserver_onDisconnectTimeout];
  *(void *)unsigned int v5 = 0LL;
  *((void *)v5 + 1) = 0LL;
  *(void *)&a2[OBJC_IVAR____TtC8FaceTime25DisplayConnectionObserver_disconnectTimer] = 0LL;
  unint64_t v6 = &a2[OBJC_IVAR____TtC8FaceTime25DisplayConnectionObserver_provider];
  *(void *)unint64_t v6 = a1;
  *((void *)v6 + 1) = &off_1000F8238;
  int64_t v7 = a2;
  id v8 = a1;
  BOOL v9 = (char *)[v8 displayConnection] - 1 < (char *)2;
  v7[OBJC_IVAR____TtC8FaceTime25DisplayConnectionObserver_wasLastConencted] = v9;
  *(double *)&v7[OBJC_IVAR____TtC8FaceTime25DisplayConnectionObserver_disconnectionTimeout] = a3;

  v15.receiver = v7;
  v15.super_class = (Class)type metadata accessor for DisplayConnectionObserver(0LL, v10);
  Swift::String v11 = (char *)objc_msgSendSuper2(&v15, "init");
  uint64_t v12 = *(void *)&v11[OBJC_IVAR____TtC8FaceTime25DisplayConnectionObserver_provider];
  uint64_t v13 = v11;
  [(id)swift_unknownObjectRetain(v12) addStateObserver:v13];
  swift_unknownObjectRelease(v12);

  return v13;
}

uint64_t sub_100085834()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100085858()
{
}

uint64_t sub_100085860(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04((uint64_t *)&unk_100113110);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000858A8()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

double sub_1000858DC()
{
  return sub_100084CC8(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_1000858EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000858FC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100085904()
{
  swift_errorRelease(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

void *sub_100085930()
{
  return sub_1000849B8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_100085938(unint64_t a1)
{
  int v2 = _TUIsInternalInstall();
  unint64_t result = 0LL;
  if (v2 && a1)
  {
    unint64_t v14 = a1;
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    uint64_t v4 = sub_100018A04(&qword_1001141F0);
    type metadata accessor for TUNeighborhoodActivityConduitError(0LL);
    if (swift_dynamicCast(&v16, &v14, v4, v5, 6LL))
    {
      unint64_t v6 = v16;
      unint64_t v14 = 0LL;
      unint64_t v15 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(25LL);
      swift_bridgeObjectRelease(v15);
      unint64_t v14 = 0xD000000000000017LL;
      unint64_t v15 = 0x80000001000DB3D0LL;
      v7._uint64_t countAndFlagsBits = related decl 'e' for TUNeighborhoodActivityConduitError.description.getter((uint64_t)v6);
      char object = v7._object;
      String.append(_:)(v7);

      BOOL v9 = object;
    }

    else
    {
      unint64_t v14 = 0LL;
      unint64_t v15 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(25LL);
      swift_bridgeObjectRelease(v15);
      unint64_t v14 = 0xD000000000000017LL;
      unint64_t v15 = 0x80000001000DB3D0LL;
      swift_getErrorValue(a1, v13, v12);
      v10._uint64_t countAndFlagsBits = Error.localizedDescription.getter(v12[1], v12[2]);
      Swift::String v11 = v10._object;
      String.append(_:)(v10);
      BOOL v9 = v11;
    }

    swift_bridgeObjectRelease(v9);
    swift_errorRelease(a1);
    return v14;
  }

  return result;
}

double sub_100085A8C@<D0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle, a2);
  unint64_t v6 = (NSBundle *)[v5 mainBundle];
  v47._char object = (void *)0xEB00000000656C62LL;
  v7._uint64_t countAndFlagsBits = 19279LL;
  v7._char object = (void *)0xE200000000000000LL;
  v8._uint64_t countAndFlagsBits = 0LL;
  v8._char object = (void *)0xE000000000000000LL;
  v47._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  Swift::String v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, v6, v8, v47);

  if (!a1) {
    goto LABEL_11;
  }
  unint64_t v46 = a1;
  swift_errorRetain(a1);
  uint64_t v10 = sub_100018A04(&qword_1001141F0);
  type metadata accessor for TUNeighborhoodActivityConduitError(0LL);
  uint64_t v12 = v11;
  if (!swift_dynamicCast(&v45, &v46, v10, v11, 6LL))
  {
    unint64_t v46 = a1;
    swift_errorRetain(a1);
    if (swift_dynamicCast(&v45, &v46, v10, &type metadata for ATVCallManager.JoinConversationError, 6LL)
      && v45 == 1)
    {
      Swift::String v27 = (NSBundle *)[v5 mainBundle];
      v28._uint64_t countAndFlagsBits = 0xD000000000000029LL;
      v50._char object = (void *)0xEB00000000656C62LL;
      v28._char object = (void *)0x80000001000DBD10LL;
      v29._uint64_t countAndFlagsBits = 0LL;
      v29._char object = (void *)0xE000000000000000LL;
      v50._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
      Swift::String v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, v27, v29, v50);
      uint64_t countAndFlagsBits = v30._countAndFlagsBits;
      char object = v30._object;

      uint64_t v31 = (NSBundle *)[v5 mainBundle];
      v32._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
      v51._char object = (void *)0xEB00000000656C62LL;
      v32._char object = (void *)0x80000001000DBD40LL;
      v33._uint64_t countAndFlagsBits = 0LL;
      v33._char object = (void *)0xE000000000000000LL;
      v51._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
      Swift::String v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, (Swift::String_optional)0, v31, v33, v51);
      unint64_t v25 = v34._countAndFlagsBits;
      uint64_t v26 = v34._object;

      goto LABEL_12;
    }

unint64_t sub_100085EE8()
{
  unint64_t result = qword_100115320;
  if (!qword_100115320)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000C6538, &type metadata for ATVCallManager.JoinConversationError);
    atomic_store(result, (unint64_t *)&qword_100115320);
  }

  return result;
}

uint64_t sub_100085F30(uint64_t a1, uint64_t a2)
{
  return sub_100083544( a1,  a2,  v2[2],  v2[3],  v2[4],  (uint64_t)&unk_1000FADF8,  (uint64_t)sub_100085FA4,  (uint64_t)&unk_1000FAE10);
}

uint64_t sub_100085F64()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100085F88(uint64_t a1, uint64_t a2)
{
  return sub_100083AB8(a1, a2, *(void (**)(char *, uint64_t))(v2 + 16));
}

uint64_t sub_100085FAC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100085FD8(uint64_t a1, uint64_t a2)
{
  return sub_100083544( a1,  a2,  v2[2],  v2[3],  v2[4],  (uint64_t)&unk_1000FAEC0,  (uint64_t)sub_100085FA4,  (uint64_t)&unk_1000FAED8);
}

uint64_t sub_100086010()
{
  uint64_t v1 = *(void *)(sub_100018A04(&qword_100115310) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release(*(void *)(v0 + 24));
  uint64_t v5 = type metadata accessor for CallIdentifier(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v0 + v3, 1LL, v5))
  {
    if (swift_getEnumCaseMultiPayload(v0 + v3, v5) == 1)
    {
      swift_bridgeObjectRelease(*(void *)(v0 + v3 + 8));
    }

    else
    {
      uint64_t v6 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v0 + v3, v6);
    }
  }

  unint64_t v7 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = v7 + 8;
  swift_errorRelease(*(void *)(v0 + v7));
  return swift_deallocObject(v0, v8, v2 | 7);
}

uint64_t sub_1000860F0()
{
  uint64_t v1 = *(void *)(sub_100018A04(&qword_100115310) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return (*(uint64_t (**)(unint64_t, void))(v0 + 16))( v0 + v2,  *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100086148()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10008617C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  unint64_t v8 = (void *)swift_task_alloc(dword_100115344);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *unint64_t v8 = v2;
  v8[1] = sub_10001C158;
  return sub_100081E34(a1, v4, v5, v7, v6);
}

uint64_t sub_1000861F4(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_100115354);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10001C158;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100115350 + dword_100115350))(a1, v4);
}

uint64_t sub_100086264(uint64_t a1)
{
  return sub_100084144(a1, *(void *)(v1 + 16));
}

uint64_t sub_10008626C()
{
  uint64_t v1 = sub_100018A04(&qword_100115370);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1000862E4()
{
}

uint64_t storeEnumTagSinglePayload for ATVCallManager.JoinConversationError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100086364 + 4 * byte_1000C6425[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100086398 + 4 * byte_1000C6420[v4]))();
}

uint64_t sub_100086398(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000863A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000863A8LL);
  }
  return result;
}

uint64_t sub_1000863B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000863BCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000863C0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000863C8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ATVCallManager.JoinConversationError()
{
  return &type metadata for ATVCallManager.JoinConversationError;
}

unint64_t sub_1000863E8()
{
  unint64_t result = qword_100115378;
  if (!qword_100115378)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000C6510, &type metadata for ATVCallManager.JoinConversationError);
    atomic_store(result, (unint64_t *)&qword_100115378);
  }

  return result;
}

uint64_t sub_100086468()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_100115380);
  sub_10001C270(v0, (uint64_t)qword_100115380);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0xD000000000000016LL,  0x80000001000DBF50LL);
}

void sub_1000864E4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void **)(v0 + 32);
  if (v11)
  {
    uint64_t v12 = sub_100039E60( (unint64_t *)&unk_1001148D8,  v8,  (uint64_t (*)(uint64_t))type metadata accessor for VideoPresentationStateCoordinator,  (uint64_t)&unk_1000C65C4);
    swift_retain(v1);
    id v29 = v11;
    MultiwayViewController.videoPresentationStateCoordinator.setter(v1, v12);
    uint64_t v13 = *(void **)(v1 + 24);
    if (v13)
    {
      id v14 = v13;
      MultiwayViewController.isSplitViewActive.setter(1LL);
    }
  }

  else
  {
    unint64_t v15 = *(void **)(v0 + 24);
    if (v15)
    {
      id v16 = v15;
      MultiwayViewController.isSplitViewActive.setter(0LL);
    }

    sub_100039D4C(0LL, v8);
    id v29 = (id)static OS_dispatch_queue.main.getter(v17);
    aBlock[4] = sub_100086F94;
    uint64_t v31 = v1;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_100027654;
    void aBlock[3] = &unk_1000FB0B0;
    Swift::String v18 = _Block_copy(aBlock);
    uint64_t v19 = v31;
    swift_retain(v1);
    uint64_t v20 = swift_release(v19);
    static DispatchQoS.unspecified.getter(v20);
    aBlock[0] = _swiftEmptyArrayStorage;
    uint64_t v21 = sub_100039E60( (unint64_t *)&qword_100112930,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v22 = sub_100018A04((uint64_t *)&unk_100112FD0);
    unint64_t v23 = sub_10001C2E8();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v22, v23, v2, v21);
    id v24 = v29;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v5, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    unint64_t v25 = *(void **)(v1 + 24);
    if (v25)
    {
      id v26 = v25;
      char v27 = MultiwayViewController.isPipped.getter();
      sub_1000867D4((uint64_t)v26, v27 & 1);
    }
  }

void sub_100086788(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1)
  {
    id v2 = v1;
    MultiwayViewController.registerLocalVideoLayersForFullScreenPresentation()();
  }

uint64_t sub_1000867D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MultiwayViewController.PresentationMode(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v67 = (char *)&v66 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v74 = (char *)&v66 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v66 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  Swift::String v18 = (char *)&v66 - v17;
  uint64_t v68 = a1;
  MultiwayViewController.presentationMode.getter(v16);
  if (qword_100112388 != -1) {
    swift_once(&qword_100112388, sub_100086468);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  uint64_t v20 = sub_10001C270(v19, (uint64_t)qword_100115380);
  uint64_t v21 = *(uint64_t (**)(char *, char *, uint64_t))(v5 + 16);
  uint64_t v22 = v21(v15, v18, v4);
  uint64_t v71 = v20;
  unint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.info.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v72 = v18;
  os_log_type_t v75 = v21;
  uint64_t v70 = v5;
  if (v25)
  {
    uint64_t v26 = swift_slowAlloc(22LL, -1LL);
    uint64_t v27 = swift_slowAlloc(64LL, -1LL);
    unsigned int v69 = a2;
    uint64_t v28 = v27;
    uint64_t v77 = v27;
    *(_DWORD *)uint64_t v26 = 136315394;
    LODWORD(v76) = v69;
    type metadata accessor for TUCallRemoteVideoPresentationState(0LL);
    uint64_t v30 = String.init<A>(describing:)(&v76, v29);
    uint64_t v66 = v8;
    unint64_t v32 = v31;
    uint64_t v76 = sub_1000850E4(v30, v31, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v26 + 4, v26 + 12);
    __n128 v33 = swift_bridgeObjectRelease(v32);
    *(_WORD *)(v26 + 12) = 2080;
    Swift::String v34 = v74;
    ((void (*)(char *, char *, uint64_t, __n128))v21)(v74, v15, v4, v33);
    uint64_t v35 = String.init<A>(describing:)(v34, v4);
    unint64_t v37 = v36;
    uint64_t v76 = sub_1000850E4(v35, v36, &v77);
    Swift::String v18 = v72;
    uint64_t v8 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v26 + 14, v26 + 22);
    __n128 v38 = swift_bridgeObjectRelease(v37);
    unint64_t v39 = *(void (**)(char *, uint64_t, __n128))(v70 + 8);
    v39(v15, v4, v38);
    _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "Evaluating Remote Video Presentation State %s from presentationMode: %s",  (uint8_t *)v26,  0x16u);
    swift_arrayDestroy(v28, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v40 = v28;
    a2 = v69;
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {
    unint64_t v39 = *(void (**)(char *, uint64_t, __n128))(v5 + 8);
    ((void (*)(char *, uint64_t))v39)(v15, v4);
  }

  uint64_t v41 = v73;
  Swift::String v42 = *(void **)(v73 + 32);
  if (v42)
  {
    id v43 = v42;
    uint64_t v44 = MultiwayViewController.isOnScreen.getter();
    if ((v44 & 1) != 0)
    {
      uint64_t v45 = v74;
      MultiwayViewController.presentationMode.getter(v44);
      unint64_t v46 = v67;
      (*(void (**)(char *, void, uint64_t))(v70 + 104))( v67,  enum case for MultiwayViewController.PresentationMode.fullScreen(_:),  v4);
      char v47 = static MultiwayViewController.PresentationMode.== infix(_:_:)(v45, v46);

      ((void (*)(char *, uint64_t))v39)(v46, v4);
      ((void (*)(char *, uint64_t))v39)(v45, v4);
      if ((v47 & 1) != 0) {
        goto LABEL_14;
      }
    }

    else
    {
    }
  }

  [*(id *)(v41 + 16) setRemoteVideoPresentationState:a2];
  sub_100086D28(a2);
  uint64_t v48 = v75(v8, v18, v4);
  Swift::String v49 = (void *)Logger.logObject.getter(v48);
  os_log_type_t v50 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled((os_log_t)v49, v50))
  {

    ((void (*)(char *, uint64_t))v39)(v8, v4);
LABEL_14:
    uint64_t v64 = v18;
    return ((uint64_t (*)(char *, uint64_t))v39)(v64, v4);
  }

  uint64_t v51 = swift_slowAlloc(22LL, -1LL);
  Swift::String v52 = v8;
  uint64_t v53 = swift_slowAlloc(64LL, -1LL);
  uint64_t v77 = v53;
  *(_DWORD *)uint64_t v51 = 136315394;
  LODWORD(v76) = a2;
  type metadata accessor for TUCallRemoteVideoPresentationState(0LL);
  uint64_t v55 = String.init<A>(describing:)(&v76, v54);
  unint64_t v57 = v56;
  uint64_t v76 = sub_1000850E4(v55, v56, &v77);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v51 + 4, v51 + 12);
  __n128 v58 = swift_bridgeObjectRelease(v57);
  *(_WORD *)(v51 + 12) = 2080;
  uint64_t v59 = v74;
  ((void (*)(char *, char *, uint64_t, __n128))v75)(v74, v52, v4, v58);
  uint64_t v60 = String.init<A>(describing:)(v59, v4);
  unint64_t v62 = v61;
  uint64_t v76 = sub_1000850E4(v60, v61, &v77);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v51 + 14, v51 + 22);
  __n128 v63 = swift_bridgeObjectRelease(v62);
  v39(v52, v4, v63);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v49,  v50,  "Setting Remote Video Presentation State %s from presentationMode: %s",  (uint8_t *)v51,  0x16u);
  swift_arrayDestroy(v53, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v53, -1LL, -1LL);
  swift_slowDealloc(v51, -1LL, -1LL);

  uint64_t v64 = v72;
  return ((uint64_t (*)(char *, uint64_t))v39)(v64, v4);
}

void sub_100086D28(int a1)
{
  if (a1 == 3)
  {
    id v2 = *(void **)(v1 + 32);
    if (!v2) {
      goto LABEL_5;
    }
    id v3 = [v2 view];
    if (!v3)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

    uint64_t v4 = v3;
    id v5 = [v3 window];

    if (!v5)
    {
LABEL_5:
      double v6 = 404.0;
      double v7 = 818.0;
      goto LABEL_10;
    }

uint64_t sub_100086F34()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for VideoPresentationStateCoordinator(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime33VideoPresentationStateCoordinator, a2);
}

id sub_100086F88()
{
  return *(id *)(v0 + 16);
}

void sub_100086F94()
{
}

uint64_t sub_100086F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100086FAC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id sub_100086FDC(void *a1, uint64_t a2, SEL *a3, SEL *a4)
{
  id v6 = a1;
  sub_100087040(a3, a4);
  uint64_t v8 = v7;

  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  return v9;
}

uint64_t sub_100087040(SEL *a1, SEL *a2)
{
  id v5 = [v2 contact];
  id v6 = [v5 *a1];

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  unint64_t v9 = v8;

  *(void *)&double v10 = swift_bridgeObjectRelease(v9).n128_u64[0];
  if ((v9 & 0x2000000000000000LL) != 0) {
    uint64_t v11 = HIBYTE(v9) & 0xF;
  }
  else {
    uint64_t v11 = v7 & 0xFFFFFFFFFFFFLL;
  }
  id v12 = objc_msgSend(v2, "contact", v10);
  double v13 = v12;
  if (v11)
  {
    id v14 = [v12 *a1];

LABEL_11:
    static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v24 = v23;

    goto LABEL_12;
  }

  id v15 = [v12 *a2];

  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  unint64_t v18 = v17;

  *(void *)&double v19 = swift_bridgeObjectRelease(v18).n128_u64[0];
  if ((v18 & 0x2000000000000000LL) != 0) {
    uint64_t v20 = HIBYTE(v18) & 0xF;
  }
  else {
    uint64_t v20 = v16 & 0xFFFFFFFFFFFFLL;
  }
  id v21 = objc_msgSend(v2, "contact", v19);
  uint64_t v22 = v21;
  if (v20)
  {
    id v14 = [v21 *a2];

    goto LABEL_11;
  }

  id v28 = [v21 organizationName];

  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  unint64_t v31 = v30;

  *(void *)&double v32 = swift_bridgeObjectRelease(v31).n128_u64[0];
  if ((v31 & 0x2000000000000000LL) != 0) {
    uint64_t v33 = HIBYTE(v31) & 0xF;
  }
  else {
    uint64_t v33 = v29 & 0xFFFFFFFFFFFFLL;
  }
  id v34 = objc_msgSend(v2, "contact", v32);
  uint64_t v35 = v34;
  if (v33)
  {
    id v36 = [v34 organizationName];
  }

  else
  {
    id v36 = [v34 displayName];

    if (!v36) {
      return 0LL;
    }
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
  uint64_t v24 = v37;

LABEL_12:
  unint64_t v25 = sub_10001BB20();
  uint64_t v26 = StringProtocol.capitalized.getter(&type metadata for String, v25);
  swift_bridgeObjectRelease(v24);
  return v26;
}

uint64_t sub_1000872BC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_100115448);
  sub_10001C270(v0, (uint64_t)qword_100115448);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0xD000000000000014LL,  0x80000001000DAE10LL);
}

uint64_t sub_100087334(void *a1, char a2)
{
  if (!a2)
  {
    uint64_t v11 = 0x286E65646469682ELL;
    id v2 = a1;
    id v3 = [v2 uniqueID];
    goto LABEL_5;
  }

  if (a2 == 1)
  {
    uint64_t v11 = 0x62616C696176612ELL;
    id v2 = a1;
    id v3 = [v2 uniqueID];
LABEL_5:
    id v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v7 = v6;

    v8._uint64_t countAndFlagsBits = v5;
    v8._char object = v7;
    String.append(_:)(v8);
    swift_bridgeObjectRelease(v7);
    v9._uint64_t countAndFlagsBits = 41LL;
    v9._char object = (void *)0xE100000000000000LL;
    String.append(_:)(v9);

    return v11;
  }

  return 0x6C696176616E752ELL;
}

uint64_t sub_100087440()
{
  return sub_100087334(*(void **)v0, *(_BYTE *)(v0 + 8));
}

BOOL sub_10008744C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = *((unsigned __int8 *)a2 + 8);
  if (!*(_BYTE *)(a1 + 8))
  {
    if (*((_BYTE *)a2 + 8)) {
      return 0LL;
    }
    return *(void *)a1 == v2;
  }

  if (*(_BYTE *)(a1 + 8) == 1)
  {
    if (v3 != 1) {
      return 0LL;
    }
    return *(void *)a1 == v2;
  }

  return v3 == 2 && v2 == 0;
}

id sub_1000874A0(uint64_t a1, uint64_t a2)
{
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CaptureDeviceManager(a1, a2)), "init");
  qword_10011A300 = (uint64_t)result;
  return result;
}

void sub_1000874CC(id a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_observingCaptureDevice);
  if (v2)
  {
    a1 = [v2 isHidden];
    int v3 = a1 ^ 1;
  }

  else
  {
    int v3 = 2;
  }

  CurrentValueSubject.value.getter(a1);
  if (!(_BYTE)v25)
  {

    if (v3) {
      goto LABEL_15;
    }
LABEL_9:
    if ((void *)v24 == v2)
    {

      return;
    }

char *sub_1000877F0()
{
  uint64_t v1 = OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_captureDeviceStateSubject;
  id v24 = 0LL;
  char v25 = 2;
  uint64_t v2 = sub_100018A04(&qword_100114920);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  int v3 = v0;
  *(void *)&v0[v1] = CurrentValueSubject.init(_:)(&v24);
  *(void *)&v3[OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_deviceDiscoverySessionKVOToken] = 0LL;
  uint64_t v4 = OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_deviceDiscoverySession;
  uint64_t v5 = sub_100018A04(&qword_1001154B8);
  uint64_t v6 = swift_allocObject(v5, 40LL, 7LL);
  *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FB0;
  *(void *)(v6 + 32) = AVCaptureDeviceTypeContinuityCamera;
  type metadata accessor for DeviceType(0LL);
  uint64_t v7 = AVCaptureDeviceTypeContinuityCamera;
  os_log_type_t v8 = AVMediaTypeVideo;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  id v11 =  objc_msgSend( (id)objc_opt_self(AVCaptureDeviceDiscoverySession, v10),  "discoverySessionWithDeviceTypes:mediaType:position:",  isa,  v8,  0);

  *(void *)&v3[v4] = v11;
  *(void *)&v3[OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_deviceHiddenKVOToken] = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_observingCaptureDevice] = 0LL;

  v23.receiver = v3;
  v23.super_class = (Class)type metadata accessor for CaptureDeviceManager(v12, v13);
  id v14 = (char *)objc_msgSendSuper2(&v23, "init");
  id v24 = *(id *)&v14[OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_deviceDiscoverySession];
  id v15 = v24;
  uint64_t KeyPath = swift_getKeyPath(&unk_1000C66F0);
  uint64_t v17 = swift_allocObject(&unk_1000FB218, 24LL, 7LL);
  *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
  Swift::String v18 = v14;
  id v19 = v15;
  uint64_t v20 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)( KeyPath,  5LL,  sub_100088684,  v17,  &protocol witness table for NSObject);
  swift_release(KeyPath);
  swift_release(v17);

  id v21 = *(void **)&v18[OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_deviceDiscoverySessionKVOToken];
  *(void *)&v18[OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_deviceDiscoverySessionKVOToken] = v20;

  return v18;
}

void sub_100087A0C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 devices];
  uint64_t v4 = sub_10001C5D0(0LL, &qword_100114958, &OBJC_CLASS___AVCaptureDevice_ptr);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  *a2 = v5;
}

void sub_100087A7C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_100018A04(&qword_1001154C0);
  NSKeyValueObservedChange.newValue.getter(v10, v4);
  uint64_t v5 = v10[0];
  if (v10[0])
  {
    uint64_t v6 = swift_allocObject(&unk_1000FB240, 32LL, 7LL);
    *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
    *(void *)(v6 + 24) = v5;
    void v10[4] = sub_1000886B8;
    uint64_t v11 = v6;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256LL;
    v10[2] = sub_100027654;
    v10[3] = &unk_1000FB258;
    uint64_t v7 = _Block_copy(v10);
    uint64_t v8 = v11;
    id v9 = a3;
    swift_release(v8);
    TUDispatchMainIfNecessary(v7);
    _Block_release(v7);
  }

id sub_100087B64(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v4 = *(void **)&v2[OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_deviceDiscoverySessionKVOToken];
  if (v4)
  {
    id v5 = v4;
    dispatch thunk of NSKeyValueObservation.invalidate()();
  }

  uint64_t v6 = *(void **)&v3[OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_deviceHiddenKVOToken];
  if (v6)
  {
    id v7 = v6;
    dispatch thunk of NSKeyValueObservation.invalidate()();
  }

  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for CaptureDeviceManager(a1, a2);
  return objc_msgSendSuper2(&v9, "dealloc");
}

uint64_t type metadata accessor for CaptureDeviceManager(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime20CaptureDeviceManager, a2);
}

void sub_100087C8C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (uint64_t *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  *id v7 = static OS_dispatch_queue.main.getter(v8);
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  char v9 = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v9 & 1) != 0)
  {
    if (!((unint64_t)a1 >> 62))
    {
      uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(a1);
      if (v10) {
        goto LABEL_4;
      }
LABEL_17:
      swift_bridgeObjectRelease(a1);
      uint64_t v13 = (void **)(v2 + OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_observingCaptureDevice);
      id v14 = *(void **)(v2 + OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_observingCaptureDevice);
LABEL_18:
      if (!v14) {
        return;
      }
      uint64_t v12 = 0LL;
      char v18 = 1;
      goto LABEL_20;
    }
  }

  else
  {
    __break(1u);
  }

  if (a1 < 0) {
    uint64_t v19 = a1;
  }
  else {
    uint64_t v19 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v19)) {
    goto LABEL_17;
  }
LABEL_4:
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
  }

  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      return;
    }

    id v11 = *(id *)(a1 + 32);
  }

  uint64_t v12 = v11;
  swift_bridgeObjectRelease(a1);
  uint64_t v13 = (void **)(v2 + OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_observingCaptureDevice);
  id v14 = *(void **)(v2 + OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_observingCaptureDevice);
  if (!v12) {
    goto LABEL_18;
  }
  if (!v14)
  {
    char v18 = 0;
    goto LABEL_20;
  }

  sub_10001C5D0(0LL, &qword_100114958, &OBJC_CLASS___AVCaptureDevice_ptr);
  id v15 = v14;
  id v16 = v12;
  char v17 = static NSObject.== infix(_:_:)(v16, v15);

  if ((v17 & 1) == 0)
  {
    char v18 = 0;
    id v14 = *v13;
LABEL_20:
    *uint64_t v13 = v12;
    id v20 = v12;

    sub_1000874CC(v21);
    uint64_t v22 = OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_deviceHiddenKVOToken;
    objc_super v23 = *(void **)(v2 + OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_deviceHiddenKVOToken);
    if (v23)
    {
      id v24 = v23;
      dispatch thunk of NSKeyValueObservation.invalidate()();
    }

    if ((v18 & 1) != 0)
    {
      uint64_t v25 = 0LL;
    }

    else
    {
      id v30 = v20;
      uint64_t KeyPath = swift_getKeyPath(&unk_1000C66C0);
      uint64_t v27 = swift_allocObject(&unk_1000FB1A0, 24LL, 7LL);
      swift_unknownObjectWeakInit(v27 + 16, v2);
      id v28 = v20;
      uint64_t v25 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)( KeyPath,  1LL,  sub_1000883BC,  v27,  &protocol witness table for NSObject);
      swift_release(KeyPath);
      swift_release(v27);
    }

    id v16 = *(id *)(v2 + v22);
    *(void *)(v2 + v22) = v25;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for CaptureDeviceState(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v4;
  id v5 = v3;
  return a1;
}

void destroy for CaptureDeviceState(id *a1)
{
}

uint64_t assignWithCopy for CaptureDeviceState(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v4;
  id v6 = v3;

  return a1;
}

uint64_t initializeWithTake for CaptureDeviceState(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + _Block_object_dispose(va, 8) = *((_BYTE *)a2 + 8);
  *(void *)id result = v2;
  return result;
}

uint64_t assignWithTake for CaptureDeviceState(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v3;

  return a1;
}

uint64_t getEnumTagSinglePayload for CaptureDeviceState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CaptureDeviceState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + _Block_object_dispose(va, 8) = 0;
    *(void *)id result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + _Block_object_dispose(va, 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000880A0(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1000880B8(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)id result = a2 - 2;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + _Block_object_dispose(va, 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CaptureDeviceState()
{
  return &type metadata for CaptureDeviceState;
}

const char *sub_1000880E0()
{
  return "isHidden";
}

id sub_1000880EC@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result = [*a1 isHidden];
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_10008811C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100088140(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v36 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  id v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v34 = *(void *)(v8 - 8);
  uint64_t v35 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100018A04(&qword_1001154B0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  id v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v15 = *a1;
  sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v32 = static OS_dispatch_queue.main.getter(v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  uint64_t v17 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v18 = (v17 + 24) & ~v17;
  unint64_t v19 = (v13 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = swift_allocObject(&unk_1000FB1C8, v19 + 8, v17 | 7);
  *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v20 + v18, v14, v11);
  *(void *)(v20 + v19) = v15;
  aBlock[4] = sub_1000885F0;
  uint64_t v38 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  void aBlock[3] = &unk_1000FB1E0;
  id v21 = _Block_copy(aBlock);
  uint64_t v22 = v38;
  swift_retain(a3);
  id v23 = v15;
  uint64_t v24 = swift_release(v22);
  static DispatchQoS.unspecified.getter(v24);
  aBlock[0] = _swiftEmptyArrayStorage;
  unint64_t v25 = sub_10004AD10();
  uint64_t v26 = sub_100018A04((uint64_t *)&unk_100112FD0);
  unint64_t v27 = sub_10001C2E8();
  uint64_t v28 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v26, v27, v33, v25);
  uint64_t v29 = (void *)v32;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v10, v35);
}

uint64_t sub_1000883BC(void **a1, uint64_t a2)
{
  return sub_100088140(a1, a2, v2);
}

void sub_1000883C4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a1 + 16;
  swift_beginAccess(a1 + 16, (char *)v18 + 4, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    uint64_t v6 = (char *)Strong;
    uint64_t v7 = sub_100018A04(&qword_1001154B0);
    NSKeyValueObservedChange.newValue.getter(v18, v7);
    char v8 = v18[0];
    if (LOBYTE(v18[0]) == 2)
    {
    }

    else
    {
      if (qword_100112390 != -1) {
        swift_once(&qword_100112390, sub_1000872BC);
      }
      uint64_t v9 = type metadata accessor for Logger(0LL);
      uint64_t v10 = sub_10001C270(v9, (uint64_t)qword_100115448);
      uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        int v13 = v8 & 1;
        id v14 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)id v14 = 67109120;
        LODWORD(v18[0]) = v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v18, (char *)v18 + 4, v14 + 4, v14 + 8);
        _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "capture device hidden state changed to hidden=%{BOOL}d",  v14,  8u);
        swift_slowDealloc(v14, -1LL, -1LL);
      }

      id v15 = *(void **)&v6[OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_observingCaptureDevice];
      *(void *)&v6[OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_observingCaptureDevice] = a3;
      id v16 = a3;

      sub_1000874CC(v17);
    }
  }

uint64_t sub_10008855C()
{
  uint64_t v1 = sub_100018A04(&qword_1001154B0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1000885F0()
{
  uint64_t v1 = *(void *)(sub_100018A04(&qword_1001154B0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_1000883C4(*(void *)(v0 + 16), v0 + v2, *(void **)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100088638(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100088648(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

const char *sub_100088650()
{
  return "devices";
}

uint64_t sub_100088660()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100088684(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10008868C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000886B8()
{
}

uint64_t sub_1000886E8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_1001154C8);
  sub_10001C270(v0, (uint64_t)qword_1001154C8);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0xD000000000000017LL,  0x80000001000C6720LL);
}

void *sub_100088764()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100018A04(&qword_100115588);
  uint64_t v3 = swift_allocObject(v2, 160LL, 7LL);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C52F0;
  uint64_t v4 = sub_100018A04(&qword_100115590);
  __int128 v5 = v0[1];
  __int128 v34 = *v0;
  *(_OWORD *)(v3 + 64) = v34;
  *(void *)(v3 + 56) = v4;
  *(void *)(v3 + 32) = kCFUserNotificationAlertHeaderKey;
  *(void *)(v3 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v4;
  *(void *)(v3 + 8_Block_object_dispose(va, 8) = &type metadata for String;
  *(void *)(v3 + 96) = kCFUserNotificationDefaultButtonTitleKey;
  __int128 v33 = v5;
  *(void *)(v3 + 152) = &type metadata for String;
  *(_OWORD *)(v3 + 12_Block_object_dispose(va, 8) = v5;
  sub_100088FC8(0LL, v6);
  sub_100089004((uint64_t)&v34);
  sub_100089004((uint64_t)&v33);
  uint64_t v7 = (id)kCFUserNotificationDefaultButtonTitleKey;
  char v8 = (id)kCFUserNotificationAlertHeaderKey;
  uint64_t v9 = (void *)NSDictionary.init(dictionaryLiteral:)(v3);
  sub_100052900((uint64_t)(v0 + 3), (uint64_t)v32, &qword_100114C40);
  sub_100052900((uint64_t)v32, (uint64_t)v35, &qword_100114C40);
  if (v35[1])
  {
    uint64_t v10 = (id)kCFUserNotificationAlertMessageKey;
    NSString v11 = String._bridgeToObjectiveC()();
    v37[0] = kCFUserNotificationAlertMessageKey;
    os_log_type_t v12 = v10;
    uint64_t v13 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v37, v4);
    objc_msgSend(v9, "__swift_setObject:forKeyedSubscript:", v11, v13);

    swift_unknownObjectRelease(v13);
  }

  sub_100052900((uint64_t)(v1 + 4), (uint64_t)v31, &qword_100115580);
  sub_100052900((uint64_t)v31, (uint64_t)v36, &qword_100115580);
  if (v36[1])
  {
    id v14 = (id)kCFUserNotificationAlternateButtonTitleKey;
    NSString v15 = String._bridgeToObjectiveC()();
    v37[0] = kCFUserNotificationAlternateButtonTitleKey;
    id v16 = v14;
    uint64_t v17 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v37, v4);
    objc_msgSend(v9, "__swift_setObject:forKeyedSubscript:", v15, v17);

    swift_unknownObjectRelease(v17);
  }

  sub_100052900((uint64_t)(v1 + 6), (uint64_t)v30, &qword_100115580);
  sub_100052900((uint64_t)v30, (uint64_t)v37, &qword_100115580);
  if (v37[1])
  {
    uint64_t v18 = (id)kCFUserNotificationOtherButtonTitleKey;
    NSString v19 = String._bridgeToObjectiveC()();
    v28[0] = kCFUserNotificationOtherButtonTitleKey;
    uint64_t v20 = v18;
    uint64_t v21 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v28, v4);
    objc_msgSend(v9, "__swift_setObject:forKeyedSubscript:", v19, v21);

    swift_unknownObjectRelease(v21);
  }

  sub_100052900((uint64_t)(v1 + 8), (uint64_t)v29, (uint64_t *)&unk_1001155A0);
  sub_100052900((uint64_t)v29, (uint64_t)&v38, (uint64_t *)&unk_1001155A0);
  if (v38)
  {
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(PBSUserNotificationWaitViewDictionaryKey);
    uint64_t v24 = v23;
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v28[0] = v22;
    v28[1] = v24;
    swift_bridgeObjectRetain(v24);
    uint64_t v26 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v28, &type metadata for String);
    objc_msgSend(v9, "__swift_setObject:forKeyedSubscript:", isa, v26);
    swift_bridgeObjectRelease(v24);

    swift_unknownObjectRelease(v26);
  }

  return v9;
}

uint64_t sub_100088AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for UserNotificationManager(a1, a2);
  uint64_t result = swift_initStaticObject(v2, &unk_100112498);
  qword_10011A308 = result;
  return result;
}

uint64_t sub_100088B08()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t type metadata accessor for UserNotificationManager(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime23UserNotificationManager, a2);
}

void sub_100088B38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  NSString v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  SInt32 error = 0;
  os_log_type_t v12 = (const __CFDictionary *)sub_100088764();
  uint64_t v13 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 0LL, &error, v12);

  if (!v13)
  {
    if (qword_1001123A0 != -1) {
      swift_once(&qword_1001123A0, sub_1000886E8);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = sub_10001C270(v20, (uint64_t)qword_1001154C8);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v23 = 67109120;
      swift_beginAccess(&error, aBlock, 0LL, 0LL);
      SInt32 v42 = error;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v23 + 4, v23 + 8);
      _os_log_impl((void *)&_mh_execute_header, v13, v22, "Failed to create user notification with error: %d", v23, 8u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    goto LABEL_22;
  }

  CFOptionFlags responseFlags = 0LL;
  if (!CFUserNotificationReceiveResponse(v13, 0.0, &responseFlags))
  {
    switch(responseFlags)
    {
      case 2uLL:
        uint64_t v26 = a1 + 96;
        break;
      case 1uLL:
        uint64_t v26 = a1 + 64;
        break;
      case 0uLL:
        uint64_t v33 = a2;
        uint64_t v24 = (uint64_t *)(a1 + 40);
        uint64_t v25 = *(void *)(a1 + 32);
LABEL_21:
        uint64_t v34 = v25;
        uint64_t v27 = *v24;
        swift_retain(*v24);
        aBlock[4] = v25;
        uint64_t v40 = v27;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_100027654;
        void aBlock[3] = &unk_1000FB2B0;
        uint64_t v35 = _Block_copy(aBlock);
        uint64_t v28 = swift_retain_n(v27, 2LL);
        static DispatchQoS.unspecified.getter(v28);
        uint64_t v36 = _swiftEmptyArrayStorage;
        unint64_t v29 = sub_10004AD10();
        uint64_t v30 = sub_100018A04((uint64_t *)&unk_100112FD0);
        unint64_t v31 = sub_10001C2E8();
        dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v30, v31, v4, v29);
        uint64_t v32 = v35;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v7, v35);
        _Block_release(v32);

        swift_release(v27);
        sub_10001C08C(v34, v27);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        swift_release(v40);
        return;
      default:
        goto LABEL_22;
    }

    sub_100052900(v26, (uint64_t)v41, &qword_100115580);
    sub_100052900((uint64_t)v41, (uint64_t)&v42, &qword_100115580);
    if (*(void *)&v43[4])
    {
      uint64_t v33 = a2;
      uint64_t v25 = v44;
      uint64_t v24 = &v45;
      goto LABEL_21;
    }

uint64_t sub_100088FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100088FC0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_100088FC8(uint64_t a1, uint64_t a2)
{
  unint64_t result = qword_100115598;
  if (!qword_100115598)
  {
    uint64_t v3 = objc_opt_self(&OBJC_CLASS___NSMutableDictionary, a2);
    unint64_t result = swift_getObjCClassMetadata(v3);
    atomic_store(result, (unint64_t *)&qword_100115598);
  }

  return result;
}

uint64_t sub_100089004(uint64_t a1)
{
  return a1;
}

uint64_t destroy for UserNotification(void *a1)
{
  uint64_t v2 = a1[9];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_release(a1[11]);
  }

  uint64_t v3 = a1[13];
  if (v3)
  {
    swift_bridgeObjectRelease(v3);
    swift_release(a1[15]);
  }

  return swift_bridgeObjectRelease(a1[16]);
}

uint64_t initializeWithCopy for UserNotification(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  __int128 v16 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v16;
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v6;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v5;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v16);
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  if (!v8)
  {
    __int128 v12 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v12;
    uint64_t v10 = *(void *)(a2 + 104);
    if (v10) {
      goto LABEL_3;
    }
LABEL_5:
    __int128 v13 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v13;
    goto LABEL_6;
  }

  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = *(void *)(a2 + 80);
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = v9;
  swift_bridgeObjectRetain(v8);
  swift_retain(v9);
  uint64_t v10 = *(void *)(a2 + 104);
  if (!v10) {
    goto LABEL_5;
  }
LABEL_3:
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v10;
  uint64_t v11 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v11;
  swift_bridgeObjectRetain(v10);
  swift_retain(v11);
LABEL_6:
  uint64_t v14 = *(void *)(a2 + 128);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = v14;
  swift_bridgeObjectRetain(v14);
  return a1;
}

void *assignWithCopy for UserNotification(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_retain(v8);
  swift_release(v9);
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  __int128 v12 = a1 + 8;
  __int128 v13 = a2 + 8;
  uint64_t v14 = a1[9];
  uint64_t v15 = a2[9];
  if (v14)
  {
    if (v15)
    {
      a1[8] = a2[8];
      uint64_t v16 = a2[9];
      a1[9] = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v14);
      uint64_t v17 = a2[11];
      uint64_t v18 = a1[11];
      a1[10] = a2[10];
      a1[11] = v17;
      swift_retain(v17);
      swift_release(v18);
    }

    else
    {
      sub_100089394((uint64_t)(a1 + 8));
      __int128 v21 = *((_OWORD *)a2 + 5);
      *__int128 v12 = *v13;
      *((_OWORD *)a1 + 5) = v21;
    }
  }

  else if (v15)
  {
    a1[8] = a2[8];
    uint64_t v19 = a2[9];
    a1[9] = v19;
    uint64_t v20 = a2[11];
    a1[10] = a2[10];
    a1[11] = v20;
    swift_bridgeObjectRetain(v19);
    swift_retain(v20);
  }

  else
  {
    __int128 v22 = *((_OWORD *)a2 + 5);
    *__int128 v12 = *v13;
    *((_OWORD *)a1 + 5) = v22;
  }

  uint64_t v23 = a1 + 12;
  uint64_t v24 = a2 + 12;
  uint64_t v25 = a1[13];
  uint64_t v26 = a2[13];
  if (v25)
  {
    if (v26)
    {
      a1[12] = a2[12];
      uint64_t v27 = a2[13];
      a1[13] = v27;
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRelease(v25);
      uint64_t v28 = a2[15];
      uint64_t v29 = a1[15];
      a1[14] = a2[14];
      a1[15] = v28;
      swift_retain(v28);
      swift_release(v29);
    }

    else
    {
      sub_100089394((uint64_t)(a1 + 12));
      __int128 v32 = *((_OWORD *)a2 + 7);
      *uint64_t v23 = *v24;
      *((_OWORD *)a1 + 7) = v32;
    }
  }

  else if (v26)
  {
    a1[12] = a2[12];
    uint64_t v30 = a2[13];
    a1[13] = v30;
    uint64_t v31 = a2[15];
    a1[14] = a2[14];
    a1[15] = v31;
    swift_bridgeObjectRetain(v30);
    swift_retain(v31);
  }

  else
  {
    __int128 v33 = *((_OWORD *)a2 + 7);
    *uint64_t v23 = *v24;
    *((_OWORD *)a1 + 7) = v33;
  }

  uint64_t v34 = a1[16];
  uint64_t v35 = a2[16];
  a1[16] = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v34);
  return a1;
}

uint64_t sub_100089394(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for UserNotification(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = result;
  return result;
}

uint64_t assignWithTake for UserNotification(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release(v8);
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a1 + 72);
  if (v11)
  {
    uint64_t v12 = *(void *)(a2 + 72);
    if (v12)
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v12;
      swift_bridgeObjectRelease(v11);
      uint64_t v13 = *(void *)(a1 + 88);
      *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = *(_OWORD *)(a2 + 80);
      swift_release(v13);
      goto LABEL_6;
    }

    sub_100089394(a1 + 64);
  }

  __int128 v14 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v14;
LABEL_6:
  uint64_t v15 = *(void *)(a1 + 104);
  if (!v15)
  {
LABEL_10:
    __int128 v18 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v18;
    goto LABEL_11;
  }

  uint64_t v16 = *(void *)(a2 + 104);
  if (!v16)
  {
    sub_100089394(a1 + 96);
    goto LABEL_10;
  }

  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v16;
  swift_bridgeObjectRelease(v15);
  uint64_t v17 = *(void *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_release(v17);
LABEL_11:
  uint64_t v19 = *(void *)(a1 + 128);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease(v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for UserNotification(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserNotification(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(result + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 136) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for UserNotification()
{
  return &type metadata for UserNotification;
}

uint64_t destroy for UserNotification.Button(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 24));
}

uint64_t initializeWithCopy for UserNotification.Button(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  __int128 v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain(v4);
  swift_retain(v3);
  return a1;
}

void *assignWithCopy for UserNotification.Button(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v7 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v8 = a1[3];
  a1[2] = v7;
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v8);
  return a1;
}

void *assignWithTake for UserNotification.Button(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  uint64_t v5 = a1[3];
  a1[3] = v4;
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for UserNotification.Button(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserNotification.Button(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for UserNotification.Button()
{
  return &type metadata for UserNotification.Button;
}

void *sub_100089774(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001LL) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v7 = sub_10002FCC8((uint64_t)a1);
      if ((v8 & 1) != 0)
      {
        uint64_t v6 = *(void **)(*(void *)(a2 + 56) + 8 * v7);
        id v9 = v6;
        return v6;
      }
    }

    return 0LL;
  }

  id v3 = a1;
  uint64_t v4 = __CocoaDictionary.lookup(_:)();

  if (!v4) {
    return 0LL;
  }
  uint64_t v11 = v4;
  uint64_t v5 = sub_10001C5D0(0LL, &qword_100115640, &OBJC_CLASS___CNContact_ptr);
  swift_unknownObjectRetain(v4);
  swift_dynamicCast(&v12, &v11, (char *)&type metadata for Swift.AnyObject + 8, v5, 7LL);
  uint64_t v6 = v12;
  swift_unknownObjectRelease(v4);
  return v6;
}

uint64_t sub_100089848(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v6 = sub_100018A04(&qword_100112D10);
  __chkstk_darwin(v6);
  char v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1LL, v9) == 1)
  {
    sub_10001C608(a1, &qword_100112D10);
    sub_100065DA4(a2, (uint64_t)v8);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
    return sub_10001C608((uint64_t)v8, &qword_100112D10);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v18 = *v3;
    *id v3 = 0x8000000000000000LL;
    sub_1000689F4((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    uint64_t v15 = *v3;
    *id v3 = v18;
    __n128 v16 = swift_bridgeObjectRelease(v15);
    return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v10 + 8))(a2, v9, v16);
  }

uint64_t sub_1000899BC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_1001155B0);
  sub_10001C270(v0, (uint64_t)qword_1001155B0);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0xD000000000000015LL,  0x80000001000C6790LL);
}

uint64_t sub_100089A38()
{
  if (qword_1001123C8 != -1) {
    swift_once(&qword_1001123C8, sub_10008CEB8);
  }
  sub_10001C580((uint64_t)&qword_10011A330, (uint64_t)v27);
  uint64_t v1 = (void *)objc_opt_self(&OBJC_CLASS___TUCallCenter, v0);
  id v2 = [v1 sharedInstance];
  id v3 = [v2 conversationManager];

  id v4 = [v1 sharedInstance];
  id v5 = [v4 neighborhoodActivityConduit];

  id v7 =  objc_msgSend( (id)objc_opt_self(FBSDisplayLayoutMonitorConfiguration, v6),  "configurationForDefaultMainDisplayMonitor");
  id v9 = objc_msgSend((id)objc_opt_self(FBSDisplayLayoutMonitor, v8), "monitorWithConfiguration:", v7);

  uint64_t v10 = sub_100021734((uint64_t)v27, v27[3]);
  __chkstk_darwin(v10);
  uint64_t v12 = (void *)((char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  uint64_t v14 = *v12;
  uint64_t v25 = type metadata accessor for PineBoardBulletinManager(0LL, v15);
  uint64_t v26 = &off_1000FA160;
  v24[0] = v14;
  uint64_t v17 = (char *)objc_allocWithZone((Class)type metadata accessor for LaunchActivityManager(v25, v16));
  uint64_t v18 = sub_100021734((uint64_t)v24, v25);
  __chkstk_darwin(v18);
  uint64_t v20 = (void *)((char *)v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  __int128 v22 = sub_10008BEDC(*v20, v3, v5, v9, v17);

  sub_10001BFEC(v24);
  uint64_t result = sub_10001BFEC(v27);
  qword_10011A310 = (uint64_t)v22;
  return result;
}

id sub_100089C88()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  id v3 = &v0[OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_displayLayoutMonitor];
  uint64_t v4 = *(void *)&v0[OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_displayLayoutMonitor];
  uint64_t v5 = *((void *)v3 + 1);
  uint64_t v6 = swift_getObjectType(v4);
  id v7 = *(void (**)(uint64_t, uint64_t))(v5 + 16);
  swift_unknownObjectRetain(v4);
  v7(v6, v5);
  swift_unknownObjectRelease(v4);
  v9.receiver = v1;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, "dealloc");
}

void sub_100089E24(void *a1, void *a2)
{
  id v3 = v2;
  uint64_t v6 = sub_100018A04((uint64_t *)&unk_100113480);
  __chkstk_darwin(v6);
  uint64_t v101 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (os_log_s *)sub_100018A04((uint64_t *)&unk_100112E30);
  uint64_t v103 = *((void *)v8 - 1);
  os_log_t v104 = v8;
  __chkstk_darwin(v8);
  uint64_t v102 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100018A04(&qword_100112D10);
  __chkstk_darwin(v10);
  uint64_t v100 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v97 = sub_100018A04(&qword_100114AF0);
  __chkstk_darwin(v97);
  uint64_t v96 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v107 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v107 - 8);
  uint64_t v14 = __chkstk_darwin(v107);
  uint64_t v99 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v91 - v16;
  uint64_t v18 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (uint64_t *)((char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __int128 v22 = *(void **)((char *)v3 + OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_queue);
  void *v21 = v22;
  (*(void (**)(void *, void, uint64_t))(v19 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v18);
  id v98 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v21);
  (*(void (**)(void *, uint64_t))(v19 + 8))(v21, v18);
  if ((v22 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }

  sub_10008A838(a1, a2, (uint64_t)v111);
  sub_100041B34((uint64_t)v111, (uint64_t)v112);
  uint64_t v106 = v13;
  if (*((void *)&v112[0] + 1))
  {
    uint64_t v21 = v3;
    v114[2] = v112[2];
    v114[3] = v112[3];
    v115[0] = v113[0];
    *(_OWORD *)((char *)v115 + 9) = *(_OWORD *)((char *)v113 + 9);
    v114[0] = v112[0];
    v114[1] = v112[1];
    if (qword_1001123B0 == -1)
    {
LABEL_4:
      uint64_t v23 = type metadata accessor for Logger(0LL);
      sub_10001C270(v23, (uint64_t)qword_1001155B0);
      id v105 = a1;
      uint64_t v24 = (os_log_s *)Logger.logObject.getter(v105);
      os_log_type_t v25 = static os_log_type_t.default.getter();
      BOOL v26 = os_log_type_enabled(v24, v25);
      uint64_t v95 = v21;
      if (v26)
      {
        uint64_t v27 = v17;
        uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v93 = swift_slowAlloc(32LL, -1LL);
        uint64_t v109 = v93;
        *(_DWORD *)uint64_t v28 = 136315138;
        uint64_t v92 = v28 + 4;
        id v29 = v105;
        id v30 = [v105 UUID];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v30);

        uint64_t v31 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v32 = v107;
        uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter(v107, v31);
        unint64_t v35 = v34;
        (*(void (**)(char *, uint64_t))(v106 + 8))(v27, v32);
        id v108 = (id)sub_1000850E4(v33, v35, &v109);
        uint64_t v21 = v95;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v92, v28 + 12);

        swift_bridgeObjectRelease(v35);
        _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Requesting presentation of launch app bulletin for activity session %s.",  v28,  0xCu);
        uint64_t v36 = v93;
        swift_arrayDestroy(v93, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1LL, -1LL);
        uint64_t v37 = v28;
        uint64_t v17 = v27;
        uint64_t v13 = v106;
        swift_slowDealloc(v37, -1LL, -1LL);
      }

      else
      {

        id v62 = v105;
      }

      uint64_t v94 = v17;
      __n128 v63 = sub_10001C3FC( (void *)((char *)v21 + OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_bulletinManager),  *(void *)((char *)v21 + OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_bulletinManager + 24));
      uint64_t v64 = v21;
      __chkstk_darwin(v63);
      *(&v91 - 2) = (uint64_t)v114;
      *(&v91 - 1) = v65;
      uint64_t v67 = v96;
      uint64_t v66 = v97;
      OS_dispatch_queue.sync<A>(execute:)(sub_100022558);
      uint64_t v97 = *(void *)&v67[*(int *)(v66 + 48)];
      uint64_t v68 = v97;
      uint64_t v69 = v107;
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v67, v107);
      id v70 = v105;
      id v71 = [v105 UUID];
      uint64_t v72 = (uint64_t)v99;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v71);

      uint64_t v73 = (uint64_t)v100;
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v100, v17, v69);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v73, 0LL, 1LL, v69);
      swift_beginAccess( (char *)v64 + OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_sessionsToLaunchAppBulletinUUIDs,  &v109,  33LL,  0LL);
      sub_100089848(v73, v72);
      __n128 v74 = swift_endAccess(&v109);
      os_log_type_t v75 = v98;
      id v108 = v98;
      uint64_t v109 = v68;
      uint64_t v76 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL, v74);
      uint64_t v77 = v70;
      uint64_t v78 = (uint64_t)v101;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56LL))(v101, 1LL, 1LL, v76);
      id v79 = v75;
      uint64_t v80 = sub_100018A04(&qword_100112E40);
      uint64_t v81 = sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      uint64_t v82 = sub_100022750( &qword_100112E48,  &qword_100112E40,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
      uint64_t v83 = sub_100022510( (unint64_t *)&qword_100112E50,  (unint64_t *)&qword_100112DB0,  &OBJC_CLASS___OS_dispatch_queue_ptr,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
      uint64_t v84 = v102;
      Publisher.receive<A>(on:options:)(&v108, v78, v80, v81, v82, v83);
      sub_10001C608(v78, (uint64_t *)&unk_100113480);

      uint64_t v85 = swift_allocObject(&unk_1000FB400, 24LL, 7LL);
      swift_unknownObjectWeakInit(v85 + 16, v95);
      uint64_t v86 = swift_allocObject(&unk_1000FB428, 32LL, 7LL);
      *(void *)(v86 + swift_unknownObjectWeakDestroy(v0 + 16) = v77;
      *(void *)(v86 + 24) = v85;
      uint64_t v87 = swift_allocObject(&unk_1000FB450, 24LL, 7LL);
      *(void *)(v87 + swift_unknownObjectWeakDestroy(v0 + 16) = v77;
      uint64_t v88 = sub_100022750( (unint64_t *)&unk_100113B90,  (uint64_t *)&unk_100112E30,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      id v89 = v77;
      os_log_t v90 = v104;
      Publisher.sinkOnce(_:onError:)(sub_10008C9C8, v86, sub_10008C9F4, v87, v104, v88);
      swift_release(v97);
      swift_release(v86);
      swift_release(v87);
      sub_100041BA4((uint64_t)v111);
      (*(void (**)(char *, os_log_t))(v103 + 8))(v84, v90);
      (*(void (**)(char *, uint64_t))(v106 + 8))(v94, v107);
      return;
    }

void sub_10008A838(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_100018A04((uint64_t *)&unk_100115630);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for PersonNameComponents(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v14 = [a1 activity];
  id v15 = [v14 originator];
  if (!v15)
  {

    goto LABEL_21;
  }

  uint64_t v110 = v9;
  uint64_t v111 = v13;
  id v16 = v15;
  id v17 = [a2 localMember];
  if (!v17)
  {
LABEL_7:
    id v21 = [a2 remoteMembers];
    uint64_t v22 = sub_10001C5D0(0LL, &qword_100113008, &OBJC_CLASS___TUConversationMember_ptr);
    uint64_t v23 = sub_100022510( (unint64_t *)&unk_100113010,  &qword_100113008,  &OBJC_CLASS___TUConversationMember_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v24 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v21, v22, v23);

    id v25 = v16;
    sub_10008BBB8(v24, (uint64_t)v25);
    uint64_t v18 = v26;
    swift_bridgeObjectRelease(v24);

    if (v18) {
      goto LABEL_8;
    }

LABEL_21:
    uint64_t v88 = 0LL;
    uint64_t v90 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    unint64_t v99 = 0LL;
    char v98 = 0;
    int64x2_t v97 = 0uLL;
    goto LABEL_22;
  }

  uint64_t v18 = v17;
  id v19 = [v17 handle];
  unsigned int v20 = [v19 isEquivalentToHandle:v16];

  if (!v20)
  {

    goto LABEL_7;
  }

LABEL_8:
  id v27 = [v18 association];
  id v113 = v18;
  if (v27)
  {
    uint64_t v28 = v27;
    if (([v27 isPrimary] & 1) == 0)
    {
      id v29 = [v28 handle];

      uint64_t v28 = v16;
      id v16 = v29;
    }
  }

  id v114 = v14;
  id v30 =  [*(id *)(v3 + OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_neighborhoodActivityConduit) knownContacts];
  uint64_t v31 = sub_10001C5D0(0LL, (unint64_t *)&qword_100113BA0, &OBJC_CLASS___TUHandle_ptr);
  uint64_t v32 = sub_10001C5D0(0LL, &qword_100115640, &OBJC_CLASS___CNContact_ptr);
  uint64_t v33 = sub_100022510( (unint64_t *)&unk_100113BB0,  (unint64_t *)&qword_100113BA0,  &OBJC_CLASS___TUHandle_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
  uint64_t v34 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v30, v31, v32, v33);

  id v35 = v16;
  uint64_t v36 = sub_100089774(v35, v34);

  *(void *)&double v38 = swift_bridgeObjectRelease(v34).n128_u64[0];
  id v112 = v35;
  if (v36)
  {
    id v109 = (id)objc_opt_self(&OBJC_CLASS___NSPersonNameComponentsFormatter, v37);
    id v39 = [v36 namePrefix];
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    uint64_t v107 = v41;
    uint64_t v108 = v40;

    id v42 = [v36 givenName];
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    uint64_t v105 = v44;
    uint64_t v106 = v43;

    id v45 = [v36 middleName];
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    uint64_t v103 = v47;
    uint64_t v104 = v46;

    id v48 = [v36 familyName];
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    uint64_t v102 = v50;

    id v51 = [v36 nameSuffix];
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    uint64_t v54 = v53;

    id v55 = [v36 nickname];
    uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    uint64_t v57 = v10;
    uint64_t v59 = v58;

    os_log_t v60 = v110;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v110, 1LL, 1LL, v57);
    uint64_t v100 = v60;
    id v61 = v111;
    PersonNameComponents.init(namePrefix:givenName:middleName:familyName:nameSuffix:nickname:phoneticRepresentation:)( v108,  v107,  v106,  v105,  v104,  v103,  v49,  v102,  v52,  v54,  v56,  v59,  v100);
    Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v61, v57);
    id v63 = [v109 localizedStringFromPersonNameComponents:isa style:2 options:0];

    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    uint64_t v66 = v65;
  }

  else
  {
    id v67 = objc_msgSend(v35, "value", v38);
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
    uint64_t v66 = v68;
  }

  id v69 = [v114 metadata];
  if (v69 && (id v70 = v69, v71 = [v69 title], v70, v71))
  {
    uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
    uint64_t v74 = v73;

    uint64_t v75 = sub_100018A04((uint64_t *)&unk_100112980);
    uint64_t v76 = swift_allocObject(v75, 112LL, 7LL);
    *(_OWORD *)(v76 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C52F0;
    *(void *)(v76 + 56) = &type metadata for String;
    unint64_t v77 = sub_1000224B4();
    *(void *)(v76 + 32) = v64;
    *(void *)(v76 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v66;
    *(void *)(v76 + 96) = &type metadata for String;
    *(void *)(v76 + 104) = v77;
    *(void *)(v76 + 64) = v77;
    *(void *)(v76 + 72) = v72;
    *(void *)(v76 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v74;
    id v79 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v78), "mainBundle");
    unint64_t v80 = 0xD00000000000001CLL;
    unint64_t v101 = 0xEB00000000656C62LL;
    uint64_t v81 = "LaunchAppBulletinTitleFormat";
  }

  else
  {
    uint64_t v82 = sub_100018A04((uint64_t *)&unk_100112980);
    uint64_t v76 = swift_allocObject(v82, 72LL, 7LL);
    *(_OWORD *)(v76 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FB0;
    *(void *)(v76 + 56) = &type metadata for String;
    *(void *)(v76 + 64) = sub_1000224B4();
    *(void *)(v76 + 32) = v64;
    *(void *)(v76 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v66;
    id v79 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v83), "mainBundle");
    unint64_t v80 = 0xD00000000000002ALL;
    unint64_t v101 = 0xEB00000000656C62LL;
    uint64_t v81 = "LaunchAppBulletinUnknownContentTitleFormat";
  }

  unint64_t v84 = (unint64_t)(v81 - 32) | 0x8000000000000000LL;
  v85._uint64_t countAndFlagsBits = 0LL;
  v85._char object = (void *)0xE000000000000000LL;
  uint64_t v86 = 0x617A696C61636F4CLL;
  Swift::String v87 = NSLocalizedString(_:tableName:bundle:value:comment:)( *(Swift::String *)&v80,  (Swift::String_optional)0,  v79,  v85,  *(Swift::String *)(&v101 - 1));

  uint64_t v88 = static String.localizedStringWithFormat(_:_:)(v87._countAndFlagsBits, v87._object, v76);
  uint64_t v90 = v89;
  swift_bridgeObjectRelease(v76);
  swift_bridgeObjectRelease(v87._object);
  uint64_t v92 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v91), "mainBundle");
  v115._char object = (void *)0xEB00000000656C62LL;
  v93._char object = (void *)0x80000001000DC180LL;
  v93._uint64_t countAndFlagsBits = 0xD000000000000018LL;
  v94._uint64_t countAndFlagsBits = 0LL;
  v94._char object = (void *)0xE000000000000000LL;
  v115._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  Swift::String v95 = NSLocalizedString(_:tableName:bundle:value:comment:)(v93, (Swift::String_optional)0, v92, v94, v115);
  uint64_t countAndFlagsBits = v95._countAndFlagsBits;

  int64x2_t v97 = vdupq_n_s64(2uLL);
  v97.i64[0] = (uint64_t)v95._object;
  char v98 = 1;
  unint64_t v99 = 0xF000000000000000LL;
LABEL_22:
  *(void *)a3 = v88;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v90;
  *(void *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  *(void *)(a3 + 24) = 0LL;
  *(void *)(a3 + 32) = countAndFlagsBits;
  *(int64x2_t *)(a3 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v97;
  *(void *)(a3 + 56) = 0LL;
  *(void *)(a3 + 64) = 0LL;
  *(void *)(a3 + 72) = v99;
  *(void *)(a3 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = 0LL;
  *(_BYTE *)(a3 + 8_Block_object_dispose(va, 8) = v98;
}

id sub_10008AFFC(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100018A04(&qword_100112D10);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v50 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v49 = *a1;
  if (qword_1001123B0 != -1) {
    swift_once(&qword_1001123B0, sub_1000899BC);
  }
  uint64_t v16 = sub_10001C270(v12, (uint64_t)qword_1001155B0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v16, v12);
  id v17 = a2;
  uint64_t v18 = v13;
  id v19 = (os_log_s *)Logger.logObject.getter(v17);
  int v47 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v19, (os_log_type_t)v47);
  id v48 = v17;
  if (v20)
  {
    uint64_t v41 = v18;
    uint64_t v42 = a3;
    id v45 = v8;
    uint64_t v21 = swift_slowAlloc(22LL, -1LL);
    uint64_t v40 = swift_slowAlloc(64LL, -1LL);
    v54[0] = v40;
    *(_DWORD *)uint64_t v21 = 136315394;
    uint64_t v46 = v21 + 4;
    id v22 = [v17 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

    uint64_t v23 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v9, v23);
    unint64_t v26 = v25;
    id v27 = *(void (**)(char *, uint64_t))(v50 + 8);
    uint64_t v43 = v11;
    uint64_t v44 = v9;
    v27(v11, v9);
    uint64_t v52 = sub_1000850E4(v24, v26, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v46, v21 + 12);

    swift_bridgeObjectRelease(v26);
    *(_WORD *)(v21 + 12) = 2080;
    id result = (id)PBSBulletinDismissalReasonDescription(v49);
    if (!result)
    {
      __break(1u);
      return result;
    }

    id v29 = result;
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    unint64_t v32 = v31;

    uint64_t v52 = sub_1000850E4(v30, v32, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease(v32);
    _os_log_impl( (void *)&_mh_execute_header,  v19,  (os_log_type_t)v47,  "Launch app bulletin for activity session %s was dismissed with reason %s.",  (uint8_t *)v21,  0x16u);
    uint64_t v33 = v40;
    swift_arrayDestroy(v40, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v41 + 8))(v15, v12);
    uint64_t v9 = v44;
    uint64_t v8 = v45;
    a3 = v42;
    uint64_t v11 = v43;
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v12);
  }

  if (v49 == 1)
  {
    swift_beginAccess(a3 + 16, v51, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(a3 + 16);
    if (Strong)
    {
      id v35 = (void *)Strong;
      sub_10008B488(v48);
    }
  }

  swift_beginAccess(a3 + 16, v54, 0LL, 0LL);
  uint64_t v36 = swift_unknownObjectWeakLoadStrong(a3 + 16);
  if (v36)
  {
    uint64_t v37 = (char *)v36;
    id v38 = [v48 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v38);

    swift_beginAccess( &v37[OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_sessionsToLaunchAppBulletinUUIDs],  &v52,  33LL,  0LL);
    sub_100065DA4((uint64_t)v11, (uint64_t)v8);
    swift_endAccess(&v52);

    (*(void (**)(char *, uint64_t))(v50 + 8))(v11, v9);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v8, 1LL, 1LL, v9);
  }

  return (id)sub_10001C608((uint64_t)v8, &qword_100112D10);
}

id sub_10008B488(void *a1)
{
  uint64_t v2 = v1;
  if (qword_1001123B0 != -1) {
    swift_once(&qword_1001123B0, sub_1000899BC);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10001C270(v4, (uint64_t)qword_1001155B0);
  id v5 = a1;
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    id v13 = v5;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v8 + 4, v8 + 12);
    void *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Launching app for activity session %@", v8, 0xCu);
    uint64_t v11 = sub_100018A04((uint64_t *)&unk_100112E20);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
  }

  return [*(id *)(v2 + OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_conversationManager) launchApplicationForActivitySession:v5 completionHandler:0];
}

void sub_10008B640(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001123B0 != -1) {
    swift_once(&qword_1001123B0, sub_1000899BC);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10001C270(v7, (uint64_t)qword_1001155B0);
  id v23 = a2;
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc(22LL, -1LL);
    uint64_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v25 = v22;
    *(_DWORD *)uint64_t v10 = 136315394;
    id v12 = [v23 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

    uint64_t v13 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter(v3, v13);
    unint64_t v16 = v15;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v24 = sub_1000850E4(v14, v16, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v10 + 4, v10 + 12);

    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v10 + 12) = 2112;
    unint64_t v17 = sub_100022848();
    uint64_t v18 = swift_allocError(&type metadata for BulletinManagerError, v17, 0LL, 0LL);
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError(v18);
    uint64_t v24 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v10 + 14, v10 + 22);
    uint64_t *v11 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Failed to present launch app bulletin for activity session %s due to %@.",  (uint8_t *)v10,  0x16u);
    uint64_t v20 = sub_100018A04((uint64_t *)&unk_100112E20);
    swift_arrayDestroy(v11, 1LL, v20);
    swift_slowDealloc(v11, -1LL, -1LL);
    uint64_t v21 = v22;
    swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
  }

double sub_10008B92C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100018A04(&qword_100112D10);
  __chkstk_darwin(v4);
  uint64_t v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v11 = (uint64_t *)(v1 + OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_sessionsToLaunchAppBulletinUUIDs);
  __n128 v12 = swift_beginAccess(v11, v18, 32LL, 0LL);
  uint64_t v13 = *v11;
  if (*(void *)(v13 + 16) && (unint64_t v14 = sub_10002FC2C(a1), (v15 & 1) != 0))
  {
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v8 + 16))( v6,  *(void *)(v13 + 56) + *(void *)(v8 + 72) * v14,  v7);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0LL, 1LL, v7);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) != 1)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v6, v7);
      swift_endAccess(v18);
      sub_10001C3FC( (void *)(v2 + OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_bulletinManager),  *(void *)(v2 + OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_bulletinManager + 24));
      sub_100064720((uint64_t)v10);
      (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
      return result;
    }
  }

  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56))(v6, 1LL, 1LL, v7, v12);
  }

  sub_10001C608((uint64_t)v6, &qword_100112D10);
  *(void *)&double result = swift_endAccess(v18).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for LaunchActivityManager(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime21LaunchActivityManager, a2);
}

void sub_10008BBB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v3 = a1;
    }
    else {
      uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = __CocoaSet.makeIterator()(v3);
    uint64_t v5 = sub_10001C5D0(0LL, &qword_100113008, &OBJC_CLASS___TUConversationMember_ptr);
    uint64_t v6 = sub_100022510( (unint64_t *)&unk_100113010,  &qword_100113008,  &OBJC_CLASS___TUConversationMember_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v7 = Set.Iterator.init(_cocoa:)(v32, v4, v5, v6);
    uint64_t v2 = v32[0];
    uint64_t v29 = v32[1];
    uint64_t v8 = v32[2];
    uint64_t v9 = v32[3];
    unint64_t v10 = v32[4];
  }

  else
  {
    uint64_t v11 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v29 = a1 + 56;
    uint64_t v12 = ~v11;
    uint64_t v13 = -v11;
    if (v13 < 64) {
      uint64_t v14 = ~(-1LL << v13);
    }
    else {
      uint64_t v14 = -1LL;
    }
    unint64_t v10 = v14 & *(void *)(a1 + 56);
    uint64_t v7 = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v8 = v12;
    uint64_t v9 = 0LL;
  }

  uint64_t v27 = v8;
  int64_t v28 = (unint64_t)(v8 + 64) >> 6;
  if (v2 < 0) {
    goto LABEL_13;
  }
LABEL_11:
  if (v10)
  {
    uint64_t v15 = (v10 - 1) & v10;
    unint64_t v16 = __clz(__rbit64(v10)) | (v9 << 6);
    uint64_t v17 = v9;
    goto LABEL_32;
  }

  int64_t v22 = v9 + 1;
  if (!__OFADD__(v9, 1LL))
  {
    if (v22 < v28)
    {
      unint64_t v23 = *(void *)(v29 + 8 * v22);
      uint64_t v17 = v9 + 1;
      if (v23) {
        goto LABEL_31;
      }
      uint64_t v17 = v9 + 2;
      if (v9 + 2 >= v28) {
        goto LABEL_36;
      }
      unint64_t v23 = *(void *)(v29 + 8 * v17);
      if (v23) {
        goto LABEL_31;
      }
      uint64_t v17 = v9 + 3;
      if (v9 + 3 >= v28) {
        goto LABEL_36;
      }
      unint64_t v23 = *(void *)(v29 + 8 * v17);
      if (v23) {
        goto LABEL_31;
      }
      uint64_t v17 = v9 + 4;
      if (v9 + 4 >= v28) {
        goto LABEL_36;
      }
      unint64_t v23 = *(void *)(v29 + 8 * v17);
      if (v23)
      {
LABEL_31:
        uint64_t v15 = (v23 - 1) & v23;
        unint64_t v16 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_32:
        for (i = *(id *)(*(void *)(v2 + 48) + 8 * v16); i; uint64_t v15 = v10)
        {
          id v25 = objc_msgSend(i, "handle", v27);
          unsigned int v26 = [v25 isEquivalentToHandle:a2];

          if (v26) {
            break;
          }

          uint64_t v9 = v17;
          unint64_t v10 = v15;
          if ((v2 & 0x8000000000000000LL) == 0) {
            goto LABEL_11;
          }
LABEL_13:
          uint64_t v18 = __CocoaSet.Iterator.next()(v7);
          if (!v18) {
            break;
          }
          uint64_t v19 = v18;
          uint64_t v31 = v18;
          uint64_t v20 = sub_10001C5D0(0LL, &qword_100113008, &OBJC_CLASS___TUConversationMember_ptr);
          swift_unknownObjectRetain(v19);
          swift_dynamicCast(&v33, &v31, (char *)&type metadata for Swift.AnyObject + 8, v20, 7LL);
          id i = v33;
          swift_unknownObjectRelease(v19);
          uint64_t v17 = v9;
        }

        goto LABEL_36;
      }

      uint64_t v17 = v9 + 5;
      if (v9 + 5 < v28)
      {
        unint64_t v23 = *(void *)(v29 + 8 * v17);
        if (!v23)
        {
          uint64_t v24 = v9 + 6;
          while (v28 != v24)
          {
            unint64_t v23 = *(void *)(v29 + 8 * v24++);
            if (v23)
            {
              uint64_t v17 = v24 - 1;
              goto LABEL_31;
            }
          }

          goto LABEL_36;
        }

        goto LABEL_31;
      }
    }

char *sub_10008BEDC(uint64_t a1, void *a2, void *a3, void *a4, char *a5)
{
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  id v38 = a2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a5);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v36 = *(void *)(v7 - 8);
  uint64_t v37 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v44[3] = type metadata accessor for PineBoardBulletinManager(0LL, v16);
  v44[4] = &off_1000FA160;
  v44[0] = a1;
  uint64_t v35 = OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_queue;
  sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v17 = a5;
  static DispatchQoS.unspecified.getter(v17);
  uint64_t v43 = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_10001949C( (unint64_t *)&qword_100113130,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v19 = sub_100018A04((uint64_t *)&unk_100112DC0);
  uint64_t v20 = sub_100022750( (unint64_t *)&qword_100113140,  (uint64_t *)&unk_100112DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v19, v20, v10, v18);
  (*(void (**)(char *, void, uint64_t))(v36 + 104))( v9,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v37);
  uint64_t v21 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002ALL,  0x80000001000DC1C0LL,  v15,  v12,  v9,  0LL);
  *(void *)&a5[v35] = v21;
  *(void *)&v17[OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_sessionsToLaunchAppBulletinUUIDs] = &_swiftEmptyDictionarySingleton;
  sub_10001C580((uint64_t)v44, (uint64_t)&v17[OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_bulletinManager]);
  int64_t v22 = v38;
  unint64_t v23 = v39;
  *(void *)&v17[OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_conversationManager] = v38;
  *(void *)&v17[OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_neighborhoodActivityConduit] = v23;
  uint64_t v24 = &v17[OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_displayLayoutMonitor];
  id v25 = v40;
  *(void *)uint64_t v24 = v40;
  *((void *)v24 + 1) = &off_1000F84A0;
  id v26 = v22;
  id v27 = v23;
  id v28 = v25;

  v42.receiver = v17;
  v42.super_class = ObjectType;
  uint64_t v29 = (char *)objc_msgSendSuper2(&v42, "init");
  uint64_t v30 = *(void **)&v29[OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_conversationManager];
  uint64_t v31 = *(void *)&v29[OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_queue];
  unint64_t v32 = v29;
  [v30 addDelegate:v32 queue:v31];
  [v30 registerWithCompletionHandler:0];

  sub_10001BFEC(v44);
  return v32;
}

void sub_10008C1D8(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  id v83 = a3;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = *(void **)(v4 + OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_queue);
  void *v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_30:
    swift_once(&qword_1001123B0, sub_1000899BC);
    goto LABEL_9;
  }

  if ([a1 state] == (id)3)
  {
    id v17 = v83;
    id v18 = [v83 activity];
    unsigned __int8 v19 = [v18 isScreenSharingActivity];

    if ((v19 & 1) != 0)
    {
      if (qword_1001123B0 != -1) {
        swift_once(&qword_1001123B0, sub_1000899BC);
      }
      uint64_t v20 = type metadata accessor for Logger(0LL);
      uint64_t v21 = sub_10001C270(v20, (uint64_t)qword_1001155B0);
      int64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v22, v23)) {
        goto LABEL_28;
      }
      uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "Ignoring launch state change for Screen Sharing activity -- to be handled by FaceTime.app",  v24,  2u);
      id v25 = v24;
    }

    else
    {
      uint64_t v82 = v7;
      if (qword_1001123B0 != -1) {
        swift_once(&qword_1001123B0, sub_1000899BC);
      }
      uint64_t v42 = type metadata accessor for Logger(0LL);
      uint64_t v81 = sub_10001C270(v42, (uint64_t)qword_1001155B0);
      uint64_t v43 = (os_log_s *)Logger.logObject.getter(v81);
      os_log_type_t v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = swift_slowAlloc(12LL, -1LL);
        id v79 = (uint8_t *)v10;
        uint64_t v46 = v8;
        int v47 = (uint8_t *)v45;
        uint64_t v48 = swift_slowAlloc(32LL, -1LL);
        uint64_t v80 = v4;
        uint64_t v49 = v48;
        uint64_t v84 = v48;
        *(_DWORD *)int v47 = 136315138;
        uint64_t v78 = v47 + 4;
        uint64_t v86 = a2;
        type metadata accessor for TUConversationActivitySessionApplicationState(0LL);
        uint64_t v51 = String.init<A>(describing:)(&v86, v50);
        unint64_t v53 = v52;
        uint64_t v86 = sub_1000850E4(v51, v52, &v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v78, v47 + 12);
        unint64_t v54 = v53;
        id v17 = v83;
        swift_bridgeObjectRelease(v54);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Launch state changed. New state: %s", v47, 0xCu);
        swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v55 = v49;
        uint64_t v4 = v80;
        swift_slowDealloc(v55, -1LL, -1LL);
        uint64_t v56 = v47;
        uint64_t v8 = v46;
        uint64_t v10 = (char *)v79;
        swift_slowDealloc(v56, -1LL, -1LL);
      }

      uint64_t v57 = v82;
      if (a2 != 1)
      {
        id v71 = [v17 UUID];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v71);

        v72.n128_f64[0] = sub_10008B92C((uint64_t)v10);
        (*(void (**)(char *, uint64_t, __n128))(v8 + 8))(v10, v57, v72);
        return;
      }

      uint64_t v58 = *(void *)(v4 + OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_displayLayoutMonitor + 8);
      uint64_t ObjectType = swift_getObjectType(*(void *)(v4
                                                 + OBJC_IVAR____TtC8FaceTime21LaunchActivityManager_displayLayoutMonitor));
      if (((*(uint64_t (**)(id, uint64_t, uint64_t))(v58 + 8))(v17, ObjectType, v58) & 1) == 0)
      {
        sub_100089E24(v17, a1);
        return;
      }

      id v60 = v17;
      int64_t v22 = (os_log_s *)Logger.logObject.getter(v60);
      os_log_type_t v61 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v22, v61))
      {

        return;
      }

      id v62 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v63 = swift_slowAlloc(32LL, -1LL);
      uint64_t v86 = v63;
      *(_DWORD *)id v62 = 136315138;
      id v64 = [v60 activity];
      id v65 = [v64 bundleIdentifier];

      if (v65)
      {
        uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
        uint64_t v68 = v67;
      }

      else
      {
        uint64_t v66 = 0LL;
        uint64_t v68 = 0LL;
      }

      uint64_t v84 = v66;
      uint64_t v85 = v68;
      uint64_t v73 = sub_100018A04(&qword_100114C40);
      uint64_t v74 = String.init<A>(describing:)(&v84, v73);
      unint64_t v76 = v75;
      uint64_t v84 = sub_1000850E4(v74, v75, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v62 + 4, v62 + 12);

      swift_bridgeObjectRelease(v76);
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v61,  "Suppressing .needsLaunch banner for %s because it is already active",  v62,  0xCu);
      swift_arrayDestroy(v63, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1LL, -1LL);
      id v25 = v62;
    }

    swift_slowDealloc(v25, -1LL, -1LL);
LABEL_28:

    return;
  }

  uint64_t v81 = v8;
  if (qword_1001123B0 != -1) {
    goto LABEL_30;
  }
LABEL_9:
  uint64_t v26 = type metadata accessor for Logger(0LL);
  sub_10001C270(v26, (uint64_t)qword_1001155B0);
  id v27 = a1;
  id v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.error.getter();
  uint64_t v30 = &selRef__setGradientMaskLengths_;
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v32 = swift_slowAlloc(32LL, -1LL);
    uint64_t v82 = v7;
    uint64_t v33 = v32;
    uint64_t v84 = v32;
    uint64_t v80 = v4;
    *(_DWORD *)uint64_t v31 = 136315138;
    id v79 = v31 + 4;
    id v34 = [v27 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v34);

    uint64_t v35 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(v82, v35);
    unint64_t v38 = v37;
    uint64_t v39 = v81;
    (*(void (**)(char *, uint64_t))(v81 + 8))(v10, v82);
    uint64_t v86 = sub_1000850E4(v36, v38, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v79, v31 + 12);

    unint64_t v40 = v38;
    uint64_t v30 = &selRef__setGradientMaskLengths_;
    swift_bridgeObjectRelease(v40);
    _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "Received launch state change notification for non-joined conversation: %s",  v31,  0xCu);
    swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v41 = v33;
    uint64_t v7 = v82;
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {

    uint64_t v39 = v81;
  }

  id v69 = [v83 v30[39]];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v69);

  v70.n128_f64[0] = sub_10008B92C((uint64_t)v10);
  (*(void (**)(char *, uint64_t, __n128))(v39 + 8))(v10, v7, v70);
}

uint64_t sub_10008C978()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10008C99C()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

id sub_10008C9C8(uint64_t *a1)
{
  return sub_10008AFFC(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10008C9D0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10008C9F4(uint64_t a1)
{
}

uint64_t sub_10008C9FC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C378(v0, qword_10011A318);
  sub_10001C270(v0, (uint64_t)qword_10011A318);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x80000001000D8590LL,  0x6E6974656C6C7542LL,  0xEF726567616E614DLL);
}

unint64_t sub_10008CA7C()
{
  return 0xD000000000000024LL;
}

unint64_t sub_10008CA98()
{
  v25._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  v25._char object = (void *)0x80000001000DC210LL;
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[1];
  swift_bridgeObjectRetain(v2);
  v3._uint64_t countAndFlagsBits = v1;
  v3._char object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  sub_100052900((uint64_t)(v0 + 2), (uint64_t)v23, &qword_100114C40);
  sub_100052900((uint64_t)v23, (uint64_t)&v24, &qword_100114C40);
  char object = v24._object;
  if (v24._object)
  {
    uint64_t countAndFlagsBits = v24._countAndFlagsBits;
    v25._uint64_t countAndFlagsBits = 0x6567617373656D20LL;
    v25._char object = (void *)0xE90000000000003DLL;
    String.append(_:)(*(Swift::String *)(&object - 1));
    uint64_t v6 = v25._object;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(v6);
  }

  sub_100052900((uint64_t)(v0 + 4), (uint64_t)v22, &qword_100114C40);
  sub_100052900((uint64_t)v22, (uint64_t)&v25, &qword_100114C40);
  uint64_t v7 = v25._object;
  if (v25._object)
  {
    uint64_t v8 = v25._countAndFlagsBits;
    String.append(_:)(*(Swift::String *)(&v7 - 1));
    v9._uint64_t countAndFlagsBits = 0x3D7265746F6F6620LL;
    v9._char object = (void *)0xE800000000000000LL;
    String.append(_:)(v9);
    swift_bridgeObjectRelease(0xE800000000000000LL);
  }

  sub_100052900((uint64_t)(v0 + 6), (uint64_t)v21, &qword_100114B00);
  sub_100052900((uint64_t)v21, (uint64_t)&v26, &qword_100114B00);
  if ((v27 & 1) == 0)
  {
    uint64_t v10 = v26;
    _StringGuts.grow(_:)(20LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    uint64_t v28 = v10;
    v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
    uint64_t v12 = v11._object;
    String.append(_:)(v11);
    swift_bridgeObjectRelease(v12);
    v13._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    v13._char object = (void *)0x80000001000DC230LL;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(0x80000001000DC230LL);
  }

  unint64_t v14 = v0[9];
  if (v14 >> 60 != 15)
  {
    sub_10004FE18(v0[8], v14);
    _StringGuts.grow(_:)(17LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    __asm { BR              X10 }
  }

  sub_100052900((uint64_t)(v0 + 10), (uint64_t)v20, (uint64_t *)&unk_100114B08);
  sub_100052900((uint64_t)v20, (uint64_t)&v28, (uint64_t *)&unk_100114B08);
  if ((v29 & 1) == 0)
  {
    v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    id v16 = v15._object;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v16);
    v17._uint64_t countAndFlagsBits = 0x74756F656D697420LL;
    v17._char object = (void *)0xE90000000000003DLL;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(0xE90000000000003DLL);
  }

  v18._uint64_t countAndFlagsBits = 62LL;
  v18._char object = (void *)0xE100000000000000LL;
  String.append(_:)(v18);
  return 0xD000000000000010LL;
}

unint64_t sub_10008CE70()
{
  return sub_10008CA98();
}

id sub_10008CEB8(uint64_t a1, uint64_t a2)
{
  if (qword_1001122C0 != -1) {
    swift_once(&qword_1001122C0, sub_100061F88);
  }
  id v3 = (id)qword_10011A2D8;
  qword_10011A348 = type metadata accessor for PineBoardBulletinManager(0LL, a2);
  unk_10011A350 = &off_1000FA160;
  qword_10011A330 = (uint64_t)v3;
  return v3;
}

uint64_t type metadata accessor for BulletinManager(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime15BulletinManager, a2);
}

void destroy for Bulletin(void *a1)
{
  unint64_t v2 = a1[9];
  if (v2 >> 60 != 15) {
    sub_100022804(a1[8], v2);
  }
}

uint64_t initializeWithCopy for Bulletin(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v6;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v7 = (uint64_t *)(a2 + 64);
  unint64_t v8 = *(void *)(a2 + 72);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v7;
  }

  else
  {
    uint64_t v9 = *v7;
    sub_10004FE18(*v7, v8);
    *(void *)(a1 + 64) = v9;
    *(void *)(a1 + 72) = v8;
  }

  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 88);
  return a1;
}

uint64_t assignWithCopy for Bulletin(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v10;
  Swift::String v11 = (uint64_t *)(a2 + 64);
  unint64_t v12 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72) >> 60 != 15LL)
  {
    if (v12 >> 60 != 15)
    {
      uint64_t v14 = *v11;
      sub_10004FE18(*v11, *(void *)(a2 + 72));
      uint64_t v15 = *(void *)(a1 + 64);
      unint64_t v16 = *(void *)(a1 + 72);
      *(void *)(a1 + 64) = v14;
      *(void *)(a1 + 72) = v12;
      sub_100022804(v15, v16);
      goto LABEL_8;
    }

    sub_10008D184(a1 + 64);
    goto LABEL_6;
  }

  if (v12 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v11;
    goto LABEL_8;
  }

  uint64_t v13 = *v11;
  sub_10004FE18(*v11, *(void *)(a2 + 72));
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v12;
LABEL_8:
  uint64_t v17 = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v17;
  return a1;
}

uint64_t sub_10008D184(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for Bulletin(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for Bulletin(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v8;
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v10 = (void *)(a2 + 64);
  unint64_t v11 = *(void *)(a1 + 72);
  if (v11 >> 60 != 15)
  {
    unint64_t v12 = *(void *)(a2 + 72);
    if (v12 >> 60 != 15)
    {
      uint64_t v13 = *(void *)(a1 + 64);
      *(void *)(a1 + 64) = *v10;
      *(void *)(a1 + 72) = v12;
      sub_100022804(v13, v11);
      goto LABEL_6;
    }

    sub_10008D184(a1 + 64);
  }

  *(_OWORD *)(a1 + 64) = *(_OWORD *)v10;
LABEL_6:
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for Bulletin(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 89)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Bulletin(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(_BYTE *)(result + 8_Block_object_dispose(va, 8) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 89) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 89) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Bulletin()
{
  return &type metadata for Bulletin;
}

uint64_t storeEnumTagSinglePayload for BulletinManagerError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10008D394 + 4 * byte_1000C67E0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10008D3B4 + 4 * byte_1000C67E5[v4]))();
  }
}

_BYTE *sub_10008D394(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

_BYTE *sub_10008D3B4(_BYTE *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_10008D3BC(_DWORD *result, int a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_10008D3C4(_WORD *result, __int16 a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_10008D3CC(_WORD *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_10008D3D4(_DWORD *result)
{
  *__n128 result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BulletinManagerError()
{
  return &type metadata for BulletinManagerError;
}

unint64_t sub_10008D3F4()
{
  unint64_t result = qword_1001156E0;
  if (!qword_1001156E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000C68B0, &type metadata for BulletinManagerError);
    atomic_store(result, (unint64_t *)&qword_1001156E0);
  }

  return result;
}

void sub_10008D438(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void (**)(void *, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v8 = a2;
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

void sub_10008D4AC(uint64_t a1)
{
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    if (__CocoaSet.count.getter(a1)) {
      goto LABEL_5;
    }
LABEL_11:
    BOOL v5 = 1;
    goto LABEL_14;
  }

  if (!*(void *)(a1 + 16)) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel_nearbyConversationInfos);
  if ((v2 & 0xC000000000000001LL) != 0)
  {
    if (v2 < 0) {
      uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel_nearbyConversationInfos);
    }
    else {
      uint64_t v3 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(v1 + OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel_nearbyConversationInfos));
    uint64_t v4 = __CocoaSet.count.getter(v3);
    swift_bridgeObjectRelease(v2);
  }

  else
  {
    uint64_t v4 = *(void *)(v2 + 16);
  }

  BOOL v5 = v4 == 0;
LABEL_14:
  sub_10008EA20(v5);
}

uint64_t sub_10008D544()
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1000C6A00);
  uint64_t v2 = swift_getKeyPath(&unk_1000C6A28);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10008D5B4()
{
  return sub_10008D5DC((uint64_t)&unk_1000C6A48, (uint64_t)&unk_1000C6A70);
}

uint64_t sub_10008D5C8()
{
  return sub_10008D5DC((uint64_t)&unk_1000C6A90, (uint64_t)&unk_1000C6AB8);
}

uint64_t sub_10008D5DC(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(a1);
  uint64_t v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_10008D644@<X0>(void *a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1000C6AD8);
  uint64_t v4 = swift_getKeyPath(&unk_1000C6B00);
  static Published.subscript.getter(a1, v1, KeyPath, v4);
  swift_release(KeyPath);
  return swift_release(v4);
}

char *sub_10008D6A8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v55 = a1;
  uint64_t v56 = a3;
  uint64_t v51 = a2;
  uint64_t v4 = sub_100018A04((uint64_t *)&unk_100115870);
  uint64_t v53 = *(void *)(v4 - 8);
  uint64_t v54 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v52 = sub_100018A04(&qword_100115790);
  uint64_t v7 = __chkstk_darwin(v52);
  uint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v51 - v10;
  uint64_t v12 = sub_100018A04(&qword_100115860);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel_nearbyConversationInfos;
  *(void *)&v3[OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel_nearbyConversationInfos] = &_swiftEmptySetSingleton;
  uint64_t v17 = &v3[OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel__nearbyConversationViewModels];
  uint64_t v59 = _swiftEmptyArrayStorage;
  Swift::String v18 = v3;
  uint64_t v19 = sub_100018A04(&qword_100115008);
  Published.init(initialValue:)(&v59, v19);
  uint64_t v20 = v15;
  uint64_t v21 = v51;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v20, v12);
  int64_t v22 = &v18[OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel__connectingConversationViewModel];
  uint64_t v23 = type metadata accessor for NearbyConversationViewModel(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v11, 1LL, 1LL, v23);
  sub_100091FC8((uint64_t)v11, (uint64_t)v9);
  Published.init(initialValue:)(v9, v52);
  sub_10001C608((uint64_t)v11, &qword_100115790);
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v22, v6, v54);
  uint64_t v24 = OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel_profilePictureService;
  *(void *)&v18[v24] = [objc_allocWithZone(TVSUIUserProfilePictureService) initWithProfilePictureDiameter:80.0];
  *(void *)&v18[OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel_profilePictureObservers] = &_swiftEmptyDictionarySingleton;
  Swift::String v25 = v55;
  uint64_t v26 = v56;
  *(void *)&v18[OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel_neighborhoodActivityConduit] = v55;
  char v27 = &v18[OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel_captureDeviceManager];
  *(void *)char v27 = v21;
  *((void *)v27 + 1) = v26;
  id v28 = v25;
  swift_unknownObjectRetain(v21);
  id v29 = [v28 nearbyConversationInfos];
  uint64_t v30 = sub_10001C5D0(0LL, (unint64_t *)&unk_100112DE0, &OBJC_CLASS___TUNearbyConversationInfo_ptr);
  unint64_t v31 = sub_100090988();
  uint64_t v32 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v29, v30, v31);

  uint64_t v33 = *(void *)&v3[v16];
  *(void *)&v3[v16] = v32;
  swift_bridgeObjectRelease(v33);
  uint64_t v34 = *(void *)&v3[v16];
  if ((v34 & 0xC000000000000001LL) != 0)
  {
    if (v34 < 0) {
      uint64_t v35 = *(void *)&v3[v16];
    }
    else {
      uint64_t v35 = v34 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v34);
    uint64_t v36 = __CocoaSet.count.getter(v35);
    swift_bridgeObjectRelease(v34);
    if (v36) {
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v38 = *(void *)(v21 + OBJC_IVAR____TtC8FaceTime20CaptureDeviceManager_captureDeviceStateSubject);
    swift_retain(v38);
    CurrentValueSubject.value.getter(v39);
    swift_release(v38);
    char v37 = 1;
    if (v60)
    {
      if (v60 != 1) {
        goto LABEL_12;
      }
      char v37 = 0;
    }

    goto LABEL_12;
  }

  if (!*(void *)(v34 + 16)) {
    goto LABEL_8;
  }
LABEL_6:
  char v37 = 0;
LABEL_12:
  swift_beginAccess(&v18[OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel__isContinuityPickerVisible], &v59, 33LL, 0LL);
  char v58 = v37;
  Published.init(initialValue:)(&v58, &type metadata for Bool);
  swift_endAccess(&v59);
  swift_beginAccess(&v18[OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel__hideSplashScreenContent], &v59, 33LL, 0LL);
  char v58 = v37;
  Published.init(initialValue:)(&v58, &type metadata for Bool);
  swift_endAccess(&v59);

  unint64_t v40 = (objc_class *)type metadata accessor for SplashScreenViewModel(0LL);
  v57.receiver = v18;
  v57.super_class = v40;
  uint64_t v41 = (char *)objc_msgSendSuper2(&v57, "init");
  uint64_t v42 = *(void **)&v41[OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel_neighborhoodActivityConduit];
  sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v43 = v41;
  id v44 = v42;
  uint64_t v46 = (void *)static OS_dispatch_queue.main.getter(v45);
  [v44 addDelegate:v43 queue:v46];

  id v48 = objc_msgSend((id)objc_opt_self(NSNotificationCenter, v47), "defaultCenter");
  uint64_t v49 = v43;
  [v48 addObserver:v49 selector:"willEnterForegroundNotification:" name:UIApplicationWillEnterForegroundNotification object:0];

  swift_unknownObjectRelease(v21);
  return v49;
}

id sub_10008DB7C()
{
  id v2 = objc_msgSend((id)objc_opt_self(NSNotificationCenter, v1), "defaultCenter");
  [v2 removeObserver:v0];

  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for SplashScreenViewModel(0LL);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_10008DDB4()
{
  return type metadata accessor for SplashScreenViewModel(0LL);
}

uint64_t type metadata accessor for SplashScreenViewModel(uint64_t a1)
{
  return sub_100020F70(a1, (uint64_t *)&unk_100115760, (uint64_t)&nominal type descriptor for SplashScreenViewModel);
}

uint64_t sub_10008DDD0(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = sub_100018A04(&qword_100115790);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v55 = (uint64_t)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v48 - v7;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v48 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v16((char *)&v48 - v14, a1, v9);
  uint64_t v53 = type metadata accessor for NearbyConversationViewModel(0LL);
  uint64_t v54 = a1;
  uint64_t v17 = *(void **)(a1 + *(int *)(v53 + 20));
  if (qword_100112248 != -1) {
    swift_once(&qword_100112248, sub_100043000);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  sub_10001C270(v18, (uint64_t)qword_10011A230);
  v16(v13, (uint64_t)v15, v9);
  id v56 = v17;
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v56);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  int v21 = v20;
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v22 = swift_slowAlloc(22LL, -1LL);
    int v50 = v21;
    uint64_t v23 = v22;
    uint64_t v49 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v51 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v51;
    *(_DWORD *)uint64_t v23 = 136315394;
    uint64_t v24 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    os_log_t v48 = v19;
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v9, v24);
    unint64_t v27 = v26;
    uint64_t v57 = sub_1000850E4(v25, v26, aBlock);
    uint64_t v52 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, aBlock, v23 + 4, v23 + 12);
    __n128 v28 = swift_bridgeObjectRelease(v27);
    id v29 = *(void (**)(char *, uint64_t, __n128))(v10 + 8);
    v29(v13, v9, v28);
    *(_WORD *)(v23 + 12) = 2112;
    id v30 = v56;
    uint64_t v57 = (uint64_t)v56;
    id v31 = v56;
    uint64_t v8 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, aBlock, v23 + 14, v23 + 22);
    uint64_t v32 = v49;
    *uint64_t v49 = v30;

    os_log_t v33 = v48;
    _os_log_impl( (void *)&_mh_execute_header,  v48,  (os_log_type_t)v50,  "User initiated pull from FaceTime app for %s from %@",  (uint8_t *)v23,  0x16u);
    uint64_t v34 = sub_100018A04((uint64_t *)&unk_100112E20);
    swift_arrayDestroy(v32, 1LL, v34);
    swift_slowDealloc(v32, -1LL, -1LL);
    uint64_t v35 = v51;
    swift_arrayDestroy(v51, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {
    id v29 = *(void (**)(char *, uint64_t, __n128))(v10 + 8);
    ((void (*)(char *, uint64_t))v29)(v13, v9);

    id v36 = v56;
  }

  sub_100091EC0(v54, (uint64_t)v8);
  (*(void (**)(char *, void, uint64_t))(*(void *)(v53 - 8) + 56LL))(v8, 0LL, 1LL);
  uint64_t KeyPath = swift_getKeyPath(&unk_1000C6AD8);
  uint64_t v38 = swift_getKeyPath(&unk_1000C6B00);
  uint64_t v39 = v55;
  sub_100091FC8((uint64_t)v8, v55);
  unint64_t v40 = v2;
  static Published.subscript.setter(v39, v40, KeyPath, v38);
  sub_10001C608((uint64_t)v8, &qword_100115790);
  uint64_t v41 = *(void **)&v40[OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel_neighborhoodActivityConduit];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v43 = swift_allocObject(&unk_1000FB658, 24LL, 7LL);
  *(void *)(v43 + swift_unknownObjectWeakDestroy(v0 + 16) = v40;
  aBlock[4] = (uint64_t)sub_100092034;
  uint64_t v59 = v43;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_10008D438;
  void aBlock[3] = (uint64_t)&unk_1000FB670;
  id v44 = _Block_copy(aBlock);
  uint64_t v45 = v59;
  uint64_t v46 = v40;
  swift_release(v45);
  [v41 joinConversation:isa onDevice:v56 withContext:5 completion:v44];
  _Block_release(v44);

  return ((uint64_t (*)(char *, uint64_t))v29)(v15, v9);
}

uint64_t sub_10008E278(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v23 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001C5D0(0LL, (unint64_t *)&qword_100112DB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v12 = (void *)static OS_dispatch_queue.main.getter(v11);
  uint64_t v13 = swift_allocObject(&unk_1000FB6A8, 32LL, 7LL);
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  aBlock[4] = sub_100092068;
  uint64_t v25 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027654;
  void aBlock[3] = &unk_1000FB6C0;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = v25;
  swift_errorRetain(a2);
  id v16 = a3;
  uint64_t v17 = swift_release(v15);
  static DispatchQoS.unspecified.getter(v17);
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_10001949C( (unint64_t *)&qword_100112930,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v19 = sub_100018A04((uint64_t *)&unk_100112FD0);
  unint64_t v20 = sub_10001C2E8();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v5, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v22);
}

uint64_t sub_10008E480(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100018A04(&qword_100115790);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v24 - v9;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_100112248 != -1) {
      swift_once(&qword_100112248, sub_100043000);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_10001C270(v11, (uint64_t)qword_10011A230);
    swift_errorRetain(a1);
    uint64_t v12 = swift_errorRetain(a1);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc(12LL, -1LL);
      uint64_t v24 = a2;
      id v16 = (uint8_t *)v15;
      uint64_t v17 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v16 = 138412290;
      swift_errorRetain(a1);
      uint64_t v18 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v25 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v16 + 4, v16 + 12);
      *uint64_t v17 = v18;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Error joining conversation: %@. updating splash screen",  v16,  0xCu);
      uint64_t v19 = sub_100018A04((uint64_t *)&unk_100112E20);
      swift_arrayDestroy(v17, 1LL, v19);
      swift_slowDealloc(v17, -1LL, -1LL);
      unint64_t v20 = v16;
      a2 = v24;
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    uint64_t v21 = type metadata accessor for NearbyConversationViewModel(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v10, 1LL, 1LL, v21);
    uint64_t KeyPath = swift_getKeyPath(&unk_1000C6AD8);
    uint64_t v23 = swift_getKeyPath(&unk_1000C6B00);
    sub_100091FC8((uint64_t)v10, (uint64_t)v7);
    static Published.subscript.setter(v7, a2, KeyPath, v23);
    sub_10001C608((uint64_t)v10, &qword_100115790);
    return swift_errorRelease(a1);
  }

  return result;
}

id sub_10008E714(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = sub_100018A04(&qword_100115790);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v34 - v8;
  uint64_t v10 = type metadata accessor for NearbyConversationViewModel(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100112248 != -1) {
    swift_once(&qword_100112248, sub_100043000);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  sub_10001C270(v14, (uint64_t)qword_10011A230);
  uint64_t v15 = sub_100091EC0(a1, (uint64_t)v13);
  id v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc(12LL, -1LL);
    uint64_t v37 = v10;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    uint64_t v39 = v35;
    uint64_t v36 = v11;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v34 = v19 + 4;
    unint64_t v20 = v7;
    uint64_t v21 = v2;
    uint64_t v22 = type metadata accessor for UUID(0LL);
    uint64_t v23 = sub_10001949C( &qword_1001134A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v24 = v22;
    id v2 = v21;
    uint64_t v7 = v20;
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v24, v23);
    unint64_t v27 = v26;
    uint64_t v38 = sub_1000850E4(v25, v26, &v39);
    uint64_t v11 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v34, v19 + 12);
    swift_bridgeObjectRelease(v27);
    sub_100091F48((uint64_t)v13);
    _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "User initiated cancel pull request of %s from FaceTime app",  v19,  0xCu);
    uint64_t v28 = v35;
    swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    id v29 = v19;
    uint64_t v10 = v37;
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {
    sub_100091F48((uint64_t)v13);
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1LL, 1LL, v10);
  uint64_t KeyPath = swift_getKeyPath(&unk_1000C6AD8);
  uint64_t v31 = swift_getKeyPath(&unk_1000C6B00);
  sub_100091FC8((uint64_t)v9, (uint64_t)v7);
  uint64_t v32 = v2;
  static Published.subscript.setter(v7, v32, KeyPath, v31);
  sub_10001C608((uint64_t)v9, &qword_100115790);
  return [*(id *)&v32[OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel_neighborhoodActivityConduit] cancelPendingJoinRequest];
}

void sub_10008EA20(int a1)
{
  int v164 = a1;
  uint64_t v155 = type metadata accessor for UUID(0LL);
  uint64_t v154 = *(void *)(v155 - 8);
  __chkstk_darwin(v155);
  uint64_t v159 = (char *)&v149 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v153 = type metadata accessor for NearbyConversationViewModel(0LL);
  uint64_t v152 = *(void *)(v153 - 8);
  uint64_t v3 = __chkstk_darwin(v153);
  uint64_t v158 = (uint64_t)&v149 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v157 = (uint64_t)&v149 - v5;
  uint64_t v6 = sub_100018A04((uint64_t *)&unk_100115630);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v149 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v170 = type metadata accessor for PersonNameComponents(0LL);
  uint64_t v169 = *(void *)(v170 - 8);
  uint64_t v9 = __chkstk_darwin(v170);
  uint64_t v156 = (char *)&v149 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v163 = (char *)&v149 - v12;
  __chkstk_darwin(v11);
  uint64_t v160 = (char *)&v149 - v13;
  id v15 = objc_msgSend((id)objc_opt_self(PBSUserProfileManager, v14), "sharedInstance");
  id v16 = [v15 userProfilesSnapshot];

  id v17 = [v16 userProfiles];
  uint64_t v18 = sub_10001C5D0(0LL, &qword_100115850, &OBJC_CLASS___PBSUserProfile_ptr);
  uint64_t v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v17,  &type metadata for String,  v18,  &protocol witness table for String);

  uint64_t v20 = *(void *)&v1[OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel_nearbyConversationInfos];
  if ((v20 & 0xC000000000000001LL) != 0)
  {
    if (v20 < 0) {
      uint64_t v21 = *(void *)&v1[OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel_nearbyConversationInfos];
    }
    else {
      uint64_t v21 = v20 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)&v1[OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel_nearbyConversationInfos]);
    uint64_t v22 = __CocoaSet.makeIterator()(v21);
    uint64_t v23 = sub_10001C5D0(0LL, (unint64_t *)&unk_100112DE0, &OBJC_CLASS___TUNearbyConversationInfo_ptr);
    unint64_t v24 = sub_100090988();
    uint64_t v25 = Set.Iterator.init(_cocoa:)(v185, v22, v23, v24);
    uint64_t v20 = v185[0];
    uint64_t v176 = v185[1];
    uint64_t v26 = v185[2];
    unint64_t v27 = (char *)v185[3];
    unint64_t v28 = v185[4];
  }

  else
  {
    uint64_t v29 = -1LL << *(_BYTE *)(v20 + 32);
    uint64_t v30 = *(void *)(v20 + 56);
    uint64_t v176 = v20 + 56;
    uint64_t v26 = ~v29;
    uint64_t v31 = -v29;
    if (v31 < 64) {
      uint64_t v32 = ~(-1LL << v31);
    }
    else {
      uint64_t v32 = -1LL;
    }
    unint64_t v28 = v32 & v30;
    uint64_t v25 = (void *)swift_bridgeObjectRetain(v20);
    unint64_t v27 = 0LL;
  }

  __int128 v168 = v8;
  uint64_t v166 = v1;
  uint64_t v174 = v20 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v165 = v26;
  os_log_t v33 = (void **)_swiftEmptyArrayStorage;
  int64_t v175 = (unint64_t)(v26 + 64) >> 6;
  Swift::String v173 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v177 = v20;
LABEL_11:
  id v34 = v27;
  unint64_t v35 = v28;
  uint64_t v178 = v33;
  while (v20 < 0)
  {
    uint64_t v39 = __CocoaSet.Iterator.next()(v25);
    if (!v39) {
      goto LABEL_69;
    }
    uint64_t v40 = v39;
    uint64_t v180 = v39;
    uint64_t v41 = sub_10001C5D0(0LL, (unint64_t *)&unk_100112DE0, &OBJC_CLASS___TUNearbyConversationInfo_ptr);
    swift_unknownObjectRetain(v40);
    swift_dynamicCast(&aBlock, &v180, v173, v41, 7LL);
    uint64_t v42 = aBlock;
    swift_unknownObjectRelease(v40);
    uint64_t v38 = (char *)v34;
    uint64_t v36 = v35;
    if (!v42) {
      goto LABEL_69;
    }
LABEL_36:
    if (v33[2] == (void *)6)
    {
      sub_100022550(v20);
      swift_bridgeObjectRelease(v19);

      goto LABEL_70;
    }

    unint64_t v179 = v36;
    id v46 = [v42 userProfileIdentifier];
    NSString v47 = v46;
    if (!v46)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v49 = v48;
      NSString v47 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v49);
    }

    uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
    uint64_t v52 = v51;
    id v53 = [v42 deviceHandle];
    id v54 = [v53 name];

    if (!v54)
    {
      swift_bridgeObjectRelease(v52);
      goto LABEL_47;
    }

    uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
    uint64_t v57 = v56;

    if (!*(void *)(v19 + 16))
    {
      swift_bridgeObjectRelease(v52);

      swift_bridgeObjectRelease(v57);
      goto LABEL_13;
    }

    swift_bridgeObjectRetain(v52);
    unint64_t v58 = sub_10002FB98(v50, v52);
    if ((v59 & 1) == 0)
    {

      swift_bridgeObjectRelease(v57);
      uint64_t v25 = (void *)swift_bridgeObjectRelease_n(v52, 2LL);
      goto LABEL_13;
    }

    uint64_t v167 = v50;
    id v60 = *(id *)(*(void *)(v19 + 56) + 8 * v58);
    swift_bridgeObjectRelease(v52);
    id v61 = [objc_allocWithZone(PBSUserProfileAccountInfo) initWithUserProfile:v60];
    id v62 = [v61 formattedFullName];
    if (!v62)
    {
      swift_bridgeObjectRelease(v57);
      swift_bridgeObjectRelease(v52);

LABEL_47:
LABEL_13:
      id v34 = v38;
      goto LABEL_14;
    }

    uint64_t v63 = v62;
    uint64_t v171 = v38;
    uint64_t v161 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    uint64_t v172 = v64;

    id v65 = [v61 personNameComponents];
    if (v65)
    {
      uint64_t v66 = v65;
      uint64_t v151 = v55;
      id v162 = v61;
      uint64_t v67 = v163;
      static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v68 = v57;
      id v69 = v60;
      uint64_t v70 = v19;
      uint64_t v71 = v169;
      __n128 v72 = *(void (**)(char *, char *, uint64_t))(v169 + 32);
      uint64_t v73 = (uint64_t)v168;
      uint64_t v74 = v67;
      uint64_t v75 = v170;
      v72(v168, v74, v170);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v71 + 56))(v73, 0LL, 1LL, v75);
      unint64_t v76 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
      uint64_t v19 = v70;
      id v60 = v69;
      uint64_t v57 = v68;
      uint64_t v77 = v75;
      id v61 = v162;
      if (v76(v73, 1LL, v77) != 1)
      {
        uint64_t v150 = (void (*)(uint64_t, char *, uint64_t))v72;
        v72(v160, (char *)v73, v170);
        uint64_t v78 = &v166[OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel_profilePictureObservers];
        unint64_t v79 = swift_beginAccess( &v166[OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel_profilePictureObservers],  v184,  0LL,  0LL).n128_u64[0];
        uint64_t v80 = *(void *)v78;
        if (*(void *)(v80 + 16))
        {
          swift_bridgeObjectRetain(v52);
          swift_bridgeObjectRetain(v80);
          sub_10002FB98(v167, v52);
          if ((v81 & 1) != 0)
          {

            swift_bridgeObjectRelease(v52);
            *(void *)&double v82 = swift_bridgeObjectRelease(v80).n128_u64[0];
            id v83 = v166;
            goto LABEL_57;
          }

          swift_bridgeObjectRelease(v52);
          unint64_t v79 = swift_bridgeObjectRelease(v80).n128_u64[0];
        }

        id v83 = v166;
        id v84 =  objc_msgSend( *(id *)&v166[OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel_profilePictureService],  "profilePictureForUserWithIdentifier:",  v47,  *(double *)&v79);

        uint64_t v85 = swift_allocObject(&unk_1000FB608, 24LL, 7LL);
        swift_unknownObjectWeakInit(v85 + 16, v83);
        v182[3] = sub_100090A9C;
        uint64_t v183 = v85;
        id aBlock = _NSConcreteStackBlock;
        v182[0] = 1107296256LL;
        v182[1] = sub_10008FD2C;
        v182[2] = &unk_1000FB620;
        uint64_t v86 = _Block_copy(&aBlock);
        swift_release(v183);
        [v84 setImageUpdatedHandler:v86];
        _Block_release(v86);
        uint64_t v87 = (uint64_t *)&v83[OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel_profilePictureObservers];
        swift_beginAccess( &v83[OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel_profilePictureObservers],  &aBlock,  33LL,  0LL);
        swift_bridgeObjectRetain(v52);
        id v88 = v84;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v87);
        uint64_t v180 = *v87;
        *uint64_t v87 = 0x8000000000000000LL;
        sub_100068B70((uint64_t)v88, v167, v52, isUniquelyReferenced_nonNull_native);
        uint64_t v90 = *v87;
        *uint64_t v87 = v180;
        swift_bridgeObjectRelease(v52);
        swift_bridgeObjectRelease(v90);
        swift_endAccess(&aBlock);

LABEL_57:
        id v91 = objc_msgSend(v42, "conversationUUID", v82);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v91);

        id v92 = [v42 deviceHandle];
        (*(void (**)(char *, char *, uint64_t))(v169 + 16))(v156, v160, v170);
        uint64_t v93 = *(void *)&v83[OBJC_IVAR____TtC8FaceTime21SplashScreenViewModel_profilePictureObservers];
        unint64_t v27 = v171;
        if (*(void *)(v93 + 16))
        {
          swift_bridgeObjectRetain(v93);
          unint64_t v94 = sub_10002FB98(v167, v52);
          Swift::String v95 = v150;
          if ((v96 & 1) == 0)
          {
            swift_bridgeObjectRelease(v52);
            swift_bridgeObjectRelease(v93);
            id v99 = 0LL;
            goto LABEL_63;
          }

          id v97 = *(id *)(*(void *)(v93 + 56) + 8 * v94);
          swift_bridgeObjectRelease(v52);
          unint64_t v98 = swift_bridgeObjectRelease(v93).n128_u64[0];
        }

        else
        {
          unint64_t v98 = swift_bridgeObjectRelease(v52).n128_u64[0];
          id v97 = 0LL;
          Swift::String v95 = v150;
        }

        id v99 = objc_msgSend(v97, "profileImage", *(double *)&v98);

LABEL_63:
        uint64_t v100 = v157;
        (*(void (**)(uint64_t, char *, uint64_t))(v154 + 32))(v157, v159, v155);
        unint64_t v101 = (int *)v153;
        *(void *)(v100 + *(int *)(v153 + 20)) = v92;
        uint64_t v102 = (uint64_t *)(v100 + v101[6]);
        *uint64_t v102 = v151;
        v102[1] = v57;
        uint64_t v103 = (uint64_t *)(v100 + v101[7]);
        uint64_t v104 = v172;
        *uint64_t v103 = v161;
        v103[1] = v104;
        v95(v100 + v101[8], v156, v170);
        *(void *)(v100 + v101[9]) = v99;
        sub_100091EC0(v100, v158);
        os_log_t v33 = v178;
        if ((swift_isUniquelyReferenced_nonNull_native(v178) & 1) == 0) {
          os_log_t v33 = (void **)sub_100019CFC(0, (int64_t)v33[2] + 1, 1, (unint64_t)v33);
        }
        uint64_t v20 = v177;
        unint64_t v28 = v179;
        unint64_t v106 = (unint64_t)v33[2];
        unint64_t v105 = (unint64_t)v33[3];
        if (v106 >= v105 >> 1) {
          os_log_t v33 = (void **)sub_100019CFC(v105 > 1, v106 + 1, 1, (unint64_t)v33);
        }
        _OWORD v33[2] = (void *)(v106 + 1);
        sub_100091F04( v158,  (uint64_t)v33 + ((*(unsigned __int8 *)(v152 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v152 + 80))
        + *(void *)(v152 + 72) * v106);

        sub_100091F48(v157);
        uint64_t v25 = (void *)(*(uint64_t (**)(char *, uint64_t))(v169 + 8))(v160, v170);
        goto LABEL_11;
      }
    }

    else
    {
      uint64_t v73 = (uint64_t)v168;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v169 + 56))(v168, 1LL, 1LL, v170);
    }

    swift_bridgeObjectRelease(v57);

    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v172);

    uint64_t v25 = (void *)sub_10001C608(v73, (uint64_t *)&unk_100115630);
    id v34 = v171;
LABEL_14:
    os_log_t v33 = v178;
    unint64_t v35 = v179;
    uint64_t v20 = v177;
  }

  if (v35)
  {
    uint64_t v36 = (v35 - 1) & v35;
    unint64_t v37 = __clz(__rbit64(v35)) | ((void)v34 << 6);
    uint64_t v38 = (char *)v34;
    goto LABEL_35;
  }

  int64_t v43 = (int64_t)v34 + 1;
  if (__OFADD__(v34, 1LL))
  {
    __break(1u);
    goto LABEL_90;
  }

  if (v43 >= v175) {
    goto LABEL_69;
  }
  unint64_t v44 = *(void *)(v176 + 8 * v43);
  uint64_t v38 = (char *)v34 + 1;
  if (v44) {
    goto LABEL_34;
  }
  uint64_t v38 = (char *)v34 + 2;
  unint64_t v44 = *(void *)(v176 + 8LL * (void)v38);
  if (v44) {
    goto LABEL_34;
  }
  uint64_t v38 = (char *)v34 + 3;
  unint64_t v44 = *(void *)(v176 + 8LL * (void)v38);
  if (v44) {
    goto LABEL_34;
  }
  uint64_t v38 = (char *)v34 + 4;
  unint64_t v44 = *(void *)(v176 + 8LL * (void)v38);
  if (v44)
  {
LABEL_34:
    uint64_t v36 = (v44 - 1) & v44;
    unint64_t v37 = __clz(__rbit64(v44)) + ((void)v38 << 6);
LABEL_35:
    uint64_t v42 = (void **)*(id *)(*(void *)(v20 + 48) + 8 * v37);
    if (!v42) {
      goto LABEL_69;
    }
    goto LABEL_36;
  }

  uint64_t v45 = (char *)v34 + 5;
  while ((char *)v175 != v45)
  {
    unint64_t v44 = *(void *)(v176 + 8LL * (void)v45++);
    if (v44)
    {
      uint64_t v38 = v45 - 1;
      goto LABEL_34;
    }
  }

LABEL_69:
  sub_100022550(v20);
  swift_bridgeObjectRelease(v19);
LABEL_70:
  id aBlock = v33;
  swift_bridgeObjectRetain_n(v33, 2LL);
  sub_1000909E0(&aBlock);
  uint64_t v107 = v166;
  swift_bridgeObjectRelease_n(v33, 2LL);
  uint64_t v108 = aBlock;
  uint64_t KeyPath = swift_getKeyPath(&unk_1000C6A00);
  uint64_t v110 = swift_getKeyPath(&unk_1000C6A28);
  id aBlock = v108;
  id v34 = v107;
  static Published.subscript.setter(&aBlock, v34, KeyPath, v110);
  if ((v164 & 1) != 0)
  {
    uint64_t v111 = swift_getKeyPath(&unk_1000C6A00);
    uint64_t v112 = swift_getKeyPath(&unk_1000C6A28);
    static Published.subscript.getter(&aBlock, v34, v111, v112);
    swift_release(v111);
    swift_release(v112);
    id v113 = aBlock[2];
    swift_bridgeObjectRelease(aBlock);
    if (v113)
    {
      char v114 = 0;
      goto LABEL_81;
    }

    swift_retain(v133);
    CurrentValueSubject.value.getter(v134);
    swift_release(v133);
    char v114 = 1;
    if (LOBYTE(v182[0]))
    {
      if (LOBYTE(v182[0]) == 1)
      {
        char v114 = 0;
        goto LABEL_80;
      }
    }

    else
    {
LABEL_80:
    }

LABEL_81:
    uint64_t v135 = swift_getKeyPath(&unk_1000C6A90);
    uint64_t v136 = swift_getKeyPath(&unk_1000C6AB8);
    LOBYTE(aBlock) = v114;
    id v137 = v34;
    static Published.subscript.setter(&aBlock, v137, v135, v136);
    uint64_t v138 = swift_getKeyPath(&unk_1000C6A48);
    uint64_t v139 = swift_getKeyPath(&unk_1000C6A70);
    LOBYTE(aBlock) = v114;
    id v140 = v137;
    static Published.subscript.setter(&aBlock, v140, v138, v139);
    if (qword_100112248 != -1) {
      swift_once(&qword_100112248, sub_100043000);
    }
    uint64_t v141 = type metadata accessor for Logger(0LL);
    sub_10001C270(v141, (uint64_t)qword_10011A230);
    id v116 = v140;
    uint64_t v117 = (os_log_s *)Logger.logObject.getter(v116);
    os_log_type_t v142 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v117, v142))
    {
      uint64_t v119 = swift_slowAlloc(18LL, -1LL);
      *(_DWORD *)uint64_t v119 = 134218240;
      uint64_t v143 = swift_getKeyPath(&unk_1000C6A00);
      uint64_t v144 = swift_getKeyPath(&unk_1000C6A28);
      static Published.subscript.getter(&aBlock, v116, v143, v144);
      swift_release(v143);
      swift_release(v144);
      int v145 = aBlock;
      uint64_t v146 = (void **)aBlock[2];

      swift_bridgeObjectRelease(v145);
      id aBlock = v146;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v182, v119 + 4, v119 + 12);

      *(_WORD *)(v119 + 12) = 1024;
      uint64_t v147 = swift_getKeyPath(&unk_1000C6A48);
      uint64_t v148 = swift_getKeyPath(&unk_1000C6A70);
      static Published.subscript.getter(&aBlock, v116, v147, v148);

      swift_release(v147);
      swift_release(v148);
      LODWORD(aBlock) = aBlock;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v119 + 14, v119 + 18);

      uint64_t v128 = "Updated nearby conversations to display: %ld, updating isContinuityPickerVisible = %{BOOL}d";
      unint64_t v129 = v117;
      os_log_type_t v130 = v142;
      uint64_t v131 = (uint8_t *)v119;
      uint32_t v132 = 18;
      goto LABEL_85;
    }

    goto LABEL_87;
  }

  if (qword_100112248 != -1) {
LABEL_90:
  }
    swift_once(&qword_100112248, sub_100043000);
  uint64_t v115 = type metadata accessor for Logger(0LL);
  sub_10001C270(v115, (uint64_t)qword_10011A230);
  id v116 = v34;
  uint64_t v117 = (os_log_s *)Logger.logObject.getter(v116);
  os_log_type_t v118 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v117, v118))
  {
    uint64_t v119 = swift_slowAlloc(24LL, -1LL);
    *(_DWORD *)uint64_t v119 = 134218496;
    uint64_t v120 = swift_getKeyPath(&unk_1000C6A00);
    uint64_t v121 = swift_getKeyPath(&unk_1000C6A28);
    static Published.subscript.getter(&aBlock, v116, v120, v121);
    swift_release(v120);
    swift_release(v121);
    uint64_t v122 = aBlock;
    uint64_t v123 = (void **)aBlock[2];

    swift_bridgeObjectRelease(v122);
    id aBlock = v123;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v182, v119 + 4, v119 + 12);

    *(_WORD *)(v119 + 12) = 1024;
    uint64_t v124 = swift_getKeyPath(&unk_1000C6A48);
    uint64_t v125 = swift_getKeyPath(&unk_1000C6A70);
    static Published.subscript.getter(&aBlock, v116, v124, v125);

    swift_release(v124);
    swift_release(v125);
    LODWORD(aBlock) = aBlock;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v119 + 14, v119 + 18);

    *(_WORD *)(v119 + 1_Block_object_dispose(va, 8) = 1024;
    uint64_t v126 = swift_getKeyPath(&unk_1000C6A90);
    uint64_t v127 = swift_getKeyPath(&unk_1000C6AB8);
    static Published.subscript.getter(&aBlock, v116, v126, v127);

    swift_release(v126);
    swift_release(v127);
    LODWORD(aBlock) = aBlock;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v119 + 20, v119 + 24);

    uint64_t v128 = "Updated nearby conversations to display: %ld isContinuityPickerVisible = %{BOOL}d hideSplashScreenContent = %{BOOL}d";
    unint64_t v129 = v117;
    os_log_type_t v130 = v118;
    uint64_t v131 = (uint8_t *)v119;
    uint32_t v132 = 24;
LABEL_85:
    _os_log_impl((void *)&_mh_execute_header, v129, v130, v128, v131, v132);
    swift_slowDealloc(v119, -1LL, -1LL);
    goto LABEL_88;
  }

LABEL_87:
  uint64_t v117 = (os_log_s *)v116;
LABEL_88:
}

void sub_10008FCD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    sub_10008EA20(0LL);
  }

void sub_10008FD2C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void *))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4(a2);
  swift_release(v3);
}

uint64_t sub_10008FD80(void *a1)
{
  uint64_t v2 = sub_100018A04(&qword_100115790);
  uint64_t v3 = __chkstk_darwin(v2);
  id v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)v12 - v6;
  sub_10008EA20(1);
  uint64_t v8 = type metadata accessor for NearbyConversationViewModel(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  uint64_t KeyPath = swift_getKeyPath(&unk_1000C6AD8);
  uint64_t v10 = swift_getKeyPath(&unk_1000C6B00);
  sub_100091FC8((uint64_t)v7, (uint64_t)v5);
  static Published.subscript.setter(v5, a1, KeyPath, v10);
  return sub_10001C608((uint64_t)v7, &qword_100115790);
}

void sub_10008FFA4(uint64_t a1)
{
  v8[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_1000900E8(319LL, (unint64_t *)&unk_100115770, &qword_100115008);
  if (v3 <= 0x3F)
  {
    v8[1] = *(void *)(v2 - 8) + 64LL;
    sub_100090094();
    if (v5 <= 0x3F)
    {
      uint64_t v9 = *(void *)(v4 - 8) + 64LL;
      uint64_t v10 = v9;
      sub_1000900E8(319LL, &qword_100115788, &qword_100115790);
      if (v7 <= 0x3F)
      {
        uint64_t v11 = *(void *)(v6 - 8) + 64LL;
        uint64_t v12 = (char *)&value witness table for Builtin.UnknownObject + 64;
        uint64_t v13 = &unk_1000C6978;
        uint64_t v14 = (char *)&value witness table for Builtin.UnknownObject + 64;
        id v15 = (char *)&value witness table for Builtin.BridgeObject + 64;
        swift_updateClassMetadata2(a1, 256LL, 9LL, v8, a1 + 80);
      }
    }
  }

void sub_100090094()
{
  if (!qword_100115780)
  {
    unint64_t v0 = type metadata accessor for Published(0LL, &type metadata for Bool);
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100115780);
    }
  }

void sub_1000900E8(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    uint64_t v5 = sub_10001C334(a3);
    unint64_t v6 = type metadata accessor for Published(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

uint64_t sub_100090134@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SplashScreenViewModel(0LL);
  uint64_t result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t *sub_10009022C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v27 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v27 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v27);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v_Block_object_dispose(va, 8) = (uint64_t)v10;
    uint64_t v11 = (uint64_t *)((char *)a1 + v9);
    uint64_t v12 = (uint64_t *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    void *v11 = *v12;
    v11[1] = v13;
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    id v16 = (uint64_t *)((char *)a1 + v14);
    id v17 = (uint64_t *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    *id v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = (char *)a1 + v15;
    uint64_t v20 = (char *)a2 + v15;
    uint64_t v21 = type metadata accessor for PersonNameComponents(0LL);
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16LL);
    id v23 = v10;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v18);
    v22(v19, v20, v21);
    uint64_t v24 = a3[9];
    uint64_t v25 = *(void **)((char *)a2 + v24);
    *(uint64_t *)((char *)a1 + v24) = (uint64_t)v25;
    id v26 = v25;
  }

  return a1;
}

void sub_100090340(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);

  swift_bridgeObjectRelease(*(void *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[7] + 8));
  uint64_t v5 = a1 + a2[8];
  uint64_t v6 = type metadata accessor for PersonNameComponents(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
}

uint64_t sub_1000903DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  uint64_t v10 = (void *)(a1 + v8);
  uint64_t v11 = (void *)(a2 + v8);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = (void *)(a1 + v13);
  id v16 = (void *)(a2 + v13);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = a1 + v14;
  uint64_t v19 = a2 + v14;
  uint64_t v20 = type metadata accessor for PersonNameComponents(0LL);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16LL);
  id v22 = v9;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v17);
  v21(v18, v19, v20);
  uint64_t v23 = a3[9];
  uint64_t v24 = *(void **)(a2 + v23);
  *(void *)(a1 + v23) = v24;
  id v25 = v24;
  return a1;
}

uint64_t sub_1000904C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *uint64_t v12 = *v13;
  uint64_t v14 = v13[1];
  uint64_t v15 = v12[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  *uint64_t v17 = *v18;
  uint64_t v19 = v18[1];
  uint64_t v20 = v17[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = a3[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = type metadata accessor for PersonNameComponents(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 24LL))(v22, v23, v24);
  uint64_t v25 = a3[9];
  id v26 = *(void **)(a1 + v25);
  uint64_t v27 = *(void **)(a2 + v25);
  *(void *)(a1 + v25) = v27;
  id v28 = v27;

  return a1;
}

uint64_t sub_1000905D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for PersonNameComponents(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10009067C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (uint64_t *)(a2 + v9);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  uint64_t v14 = v10[1];
  *uint64_t v10 = v13;
  v10[1] = v12;
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  uint64_t v20 = v16[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = a3[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = type metadata accessor for PersonNameComponents(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 40LL))(v22, v23, v24);
  uint64_t v25 = a3[9];
  id v26 = *(void **)(a1 + v25);
  *(void *)(a1 + v25) = *(void *)(a2 + v25);

  return a1;
}

uint64_t sub_100090760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009076C);
}

uint64_t sub_10009076C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = type metadata accessor for PersonNameComponents(0LL);
    uint64_t v10 = a1 + *(int *)(a3 + 32);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
    return v9(v10, a2, v8);
  }

  unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  return (v11 + 1);
}

uint64_t sub_100090814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100090820);
}

uint64_t sub_100090820(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return result;
    }

    uint64_t v10 = type metadata accessor for PersonNameComponents(0LL);
    uint64_t v12 = a1 + *(int *)(a4 + 32);
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for NearbyConversationViewModel(uint64_t a1)
{
  return sub_100020F70(a1, qword_1001157F0, (uint64_t)&nominal type descriptor for NearbyConversationViewModel);
}

uint64_t sub_1000908D8(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v5[2] = &unk_1000C6978;
    v5[3] = &unk_1000C6978;
    uint64_t result = type metadata accessor for PersonNameComponents(319LL);
    if (v4 <= 0x3F)
    {
      void v5[4] = *(void *)(result - 8) + 64LL;
      v5[5] = "\b";
      swift_initStructMetadata(a1, 256LL, 6LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

void *sub_10009097C()
{
  return &protocol witness table for ObservableObjectPublisher;
}

unint64_t sub_100090988()
{
  unint64_t result = qword_100115840;
  if (!qword_100115840)
  {
    uint64_t v1 = sub_10001C5D0(255LL, (unint64_t *)&unk_100112DE0, &OBJC_CLASS___TUNearbyConversationInfo_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100115840);
  }

  return result;
}

void sub_1000909E0(void *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for NearbyConversationViewModel(0LL) - 8);
  unint64_t v3 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    unint64_t v3 = (void *)sub_100091FAC(v3);
  }
  uint64_t v4 = v3[2];
  v5[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_100090ABC(v5);
  *a1 = v3;
}

uint64_t sub_100090A78()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100090A9C(uint64_t a1)
{
}

uint64_t sub_100090AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100090AB4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_100090ABC(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v159 = type metadata accessor for NearbyConversationViewModel(0LL);
  uint64_t v155 = *(void *)(v159 - 8);
  uint64_t v4 = __chkstk_darwin(v159);
  uint64_t v150 = (uint64_t)&v142 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v160 = (uint64_t)&v142 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v142 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v142 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v153 = (uint64_t)&v142 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v152 = (uint64_t)&v142 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v147 = (uint64_t)&v142 - v19;
  __chkstk_darwin(v18);
  uint64_t v146 = (uint64_t)&v142 - v20;
  id v162 = a1;
  Swift::Int v21 = a1[1];
  Swift::Int v22 = _minimumMergeRunLength(_:)(v21);
  if (v22 >= v21)
  {
    if (v21 < 0) {
      goto LABEL_159;
    }
    if (v21) {
      sub_1000914FC(0LL, v21, 1LL, v162);
    }
    return;
  }

  if (v21 >= 0) {
    uint64_t v23 = v21;
  }
  else {
    uint64_t v23 = v21 + 1;
  }
  if (v21 < -1) {
    goto LABEL_167;
  }
  Swift::Int v24 = v22;
  uint64_t v156 = v13;
  if (v21 < 2)
  {
    id v28 = (char *)_swiftEmptyArrayStorage;
    unint64_t v154 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v155 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80));
    uint64_t v144 = _swiftEmptyArrayStorage;
    if (v21 != 1)
    {
      unint64_t v30 = _swiftEmptyArrayStorage[2];
LABEL_122:
      if (v30 >= 2)
      {
        uint64_t v134 = *v162;
        do
        {
          unint64_t v135 = v30 - 2;
          if (v30 < 2) {
            goto LABEL_154;
          }
          if (!v134) {
            goto LABEL_166;
          }
          uint64_t v128 = v28;
          uint64_t v136 = *(void *)&v28[16 * v135 + 32];
          uint64_t v137 = *(void *)&v28[16 * v30 + 24];
          sub_100091730( v134 + *(void *)(v155 + 72) * v136,  v134 + *(void *)(v155 + 72) * *(void *)&v28[16 * v30 + 16],  v134 + *(void *)(v155 + 72) * v137,  v154);
          if (v2) {
            goto LABEL_134;
          }
          if (v137 < v136) {
            goto LABEL_155;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0) {
            uint64_t v128 = sub_100091EAC((uint64_t)v28);
          }
          if (v135 >= *((void *)v128 + 2)) {
            goto LABEL_156;
          }
          uint64_t v138 = &v128[16 * v135 + 32];
          *(void *)uint64_t v138 = v136;
          *((void *)v138 + 1) = v137;
          unint64_t v139 = *((void *)v128 + 2);
          if (v30 > v139) {
            goto LABEL_157;
          }
          memmove(&v128[16 * v30 + 16], &v128[16 * v30 + 32], 16 * (v139 - v30));
          *((void *)v128 + 2) = v139 - 1;
          unint64_t v30 = v139 - 1;
          id v28 = v128;
        }

        while (v139 > 2);
      }

      id v140 = v28;
LABEL_136:
      swift_bridgeObjectRelease(v140);
      uint64_t v141 = v144;
      v144[2] = 0LL;
      swift_bridgeObjectRelease(v141);
      return;
    }
  }

  else
  {
    uint64_t v25 = v23 >> 1;
    uint64_t v26 = static Array._allocateBufferUninitialized(minimumCapacity:)(v23 >> 1, v159);
    *(void *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = v25;
    uint64_t v27 = *(unsigned __int8 *)(v155 + 80);
    uint64_t v144 = (void *)v26;
    unint64_t v154 = v26 + ((v27 + 32) & ~v27);
  }

  uint64_t v29 = 0LL;
  id v28 = (char *)_swiftEmptyArrayStorage;
  uint64_t v158 = v10;
  Swift::Int v145 = v24;
  while (1)
  {
    uint64_t v31 = v29 + 1;
    Swift::Int v149 = v21;
    uint64_t v151 = v29;
    if (v29 + 1 >= v21)
    {
      uint64_t v44 = v29 + 1;
    }

    else
    {
      uint64_t v32 = *v162;
      uint64_t v33 = *(void *)(v155 + 72);
      uint64_t v34 = v146;
      sub_100091EC0(*v162 + v33 * v31, v146);
      uint64_t v148 = v32;
      uint64_t v157 = v33;
      uint64_t v35 = v32 + v33 * v29;
      uint64_t v36 = v147;
      sub_100091EC0(v35, v147);
      uint64_t v37 = *(int *)(v159 + 28);
      uint64_t v38 = *(void *)(v34 + v37);
      uint64_t v39 = *(void *)(v34 + v37 + 8);
      uint64_t v40 = (void *)(v36 + v37);
      uint64_t v41 = v40[1];
      if (v38 == *v40 && v39 == v41) {
        int v43 = 0;
      }
      else {
        int v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, *v40, v41, 1LL);
      }
      uint64_t v45 = v149;
      sub_100091F48(v147);
      sub_100091F48(v146);
      uint64_t v161 = v151 + 2;
      if (v151 + 2 < v45)
      {
        uint64_t v46 = v157 * v31;
        uint64_t v47 = v148;
        uint64_t v48 = v157 * (v151 + 2);
        while (1)
        {
          uint64_t v49 = v152;
          sub_100091EC0(v47 + v48, v152);
          uint64_t v50 = v153;
          sub_100091EC0(v47 + v46, v153);
          uint64_t v51 = *(int *)(v159 + 28);
          uint64_t v52 = *(void *)(v49 + v51);
          uint64_t v53 = *(void *)(v49 + v51 + 8);
          id v54 = (void *)(v50 + v51);
          uint64_t v55 = v54[1];
          BOOL v56 = v52 == *v54 && v53 == v55;
          int v57 = v56 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)(v52, v53, *v54, v55, 1LL);
          sub_100091F48(v153);
          sub_100091F48(v152);
          if (((v43 ^ v57) & 1) != 0) {
            break;
          }
          uint64_t v10 = v158;
          v47 += v157;
          if (v45 == ++v161)
          {
            uint64_t v161 = v45;
            goto LABEL_35;
          }
        }

        uint64_t v10 = v158;
LABEL_35:
        Swift::Int v24 = v145;
      }

      if ((v43 & 1) == 0)
      {
        uint64_t v44 = v161;
LABEL_51:
        uint64_t v29 = v151;
        goto LABEL_52;
      }

      uint64_t v44 = v161;
      uint64_t v29 = v151;
      if (v161 < v151) {
        goto LABEL_160;
      }
      if (v151 < v161)
      {
        uint64_t v143 = v28;
        uint64_t v58 = v2;
        uint64_t v59 = 0LL;
        uint64_t v60 = v157 * (v161 - 1);
        uint64_t v61 = v161 * v157;
        uint64_t v62 = v151 * v157;
        do
        {
          if (v29 != v44 + v59 - 1)
          {
            uint64_t v63 = v148;
            if (!v148) {
              goto LABEL_165;
            }
            unint64_t v64 = v148 + v62;
            sub_100091F04(v148 + v62, v150);
            if (v62 < v60 || v64 >= v63 + v61)
            {
              swift_arrayInitWithTakeFrontToBack(v63 + v62, v63 + v60, 1LL, v159);
            }

            else if (v62 != v60)
            {
              swift_arrayInitWithTakeBackToFront(v63 + v62);
            }

            sub_100091F04(v150, v63 + v60);
            uint64_t v10 = v158;
            uint64_t v44 = v161;
          }

          ++v29;
          --v59;
          v60 -= v157;
          v61 -= v157;
          v62 += v157;
        }

        while (v29 < v44 + v59);
        uint64_t v2 = v58;
        id v28 = v143;
        Swift::Int v24 = v145;
        goto LABEL_51;
      }
    }

LABEL_52:
    if (v44 >= v149) {
      goto LABEL_74;
    }
    if (__OFSUB__(v44, v29)) {
      goto LABEL_158;
    }
    if (v44 - v29 >= v24) {
      goto LABEL_74;
    }
    if (__OFADD__(v29, v24)) {
      goto LABEL_161;
    }
    uint64_t v65 = v149;
    if (v29 + v24 < v149) {
      uint64_t v65 = v29 + v24;
    }
    if (v65 < v29) {
      break;
    }
    if (v44 != v65)
    {
      uint64_t v143 = v28;
      uint64_t v148 = v2;
      Swift::Int v149 = v65;
      uint64_t v66 = *(void *)(v155 + 72);
      uint64_t v161 = v66 * (v44 - 1);
      uint64_t v157 = v66;
      uint64_t v67 = v44 * v66;
      do
      {
        uint64_t v68 = 0LL;
        while (1)
        {
          uint64_t v69 = v44;
          uint64_t v70 = *v162;
          uint64_t v71 = (uint64_t)v156;
          sub_100091EC0(v67 + v68 + *v162, (uint64_t)v156);
          sub_100091EC0(v161 + v68 + v70, (uint64_t)v10);
          uint64_t v72 = *(int *)(v159 + 28);
          uint64_t v73 = *(void *)(v71 + v72);
          uint64_t v74 = *(void *)(v71 + v72 + 8);
          uint64_t v75 = &v10[v72];
          uint64_t v76 = *((void *)v75 + 1);
          if (v73 == *(void *)v75 && v74 == v76) {
            break;
          }
          char v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v73, v74, *(void *)v75, v76, 1LL);
          sub_100091F48((uint64_t)v10);
          sub_100091F48(v71);
          if ((v78 & 1) == 0) {
            goto LABEL_62;
          }
          uint64_t v79 = *v162;
          if (!*v162) {
            goto LABEL_163;
          }
          uint64_t v80 = v79 + v67 + v68;
          uint64_t v81 = v79 + v161 + v68;
          sub_100091F04(v80, v160);
          swift_arrayInitWithTakeFrontToBack(v80, v81, 1LL, v159);
          sub_100091F04(v160, v81);
          uint64_t v10 = v158;
          v68 -= v157;
          ++v29;
          uint64_t v44 = v69;
          if (v69 == v29) {
            goto LABEL_63;
          }
        }

        sub_100091F48((uint64_t)v10);
        sub_100091F48(v71);
LABEL_62:
        uint64_t v44 = v69;
LABEL_63:
        ++v44;
        v161 += v157;
        v67 += v157;
        uint64_t v29 = v151;
      }

      while (v44 != v149);
      uint64_t v44 = v149;
      uint64_t v2 = v148;
      id v28 = v143;
    }

LABEL_74:
    if (v44 < v29) {
      goto LABEL_153;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v28);
    uint64_t v161 = v44;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      id v28 = sub_100091C00(0LL, *((void *)v28 + 2) + 1LL, 1, v28);
    }
    unint64_t v84 = *((void *)v28 + 2);
    unint64_t v83 = *((void *)v28 + 3);
    unint64_t v30 = v84 + 1;
    if (v84 >= v83 >> 1) {
      id v28 = sub_100091C00((char *)(v83 > 1), v84 + 1, 1, v28);
    }
    *((void *)v28 + 2) = v30;
    uint64_t v85 = v28 + 32;
    uint64_t v86 = &v28[16 * v84 + 32];
    uint64_t v87 = v161;
    *(void *)uint64_t v86 = v29;
    *((void *)v86 + 1) = v87;
    if (v84)
    {
      while (1)
      {
        unint64_t v88 = v30 - 1;
        if (v30 >= 4)
        {
          uint64_t v93 = &v85[16 * v30];
          uint64_t v94 = *((void *)v93 - 8);
          uint64_t v95 = *((void *)v93 - 7);
          BOOL v99 = __OFSUB__(v95, v94);
          uint64_t v96 = v95 - v94;
          if (v99) {
            goto LABEL_142;
          }
          uint64_t v98 = *((void *)v93 - 6);
          uint64_t v97 = *((void *)v93 - 5);
          BOOL v99 = __OFSUB__(v97, v98);
          uint64_t v91 = v97 - v98;
          char v92 = v99;
          if (v99) {
            goto LABEL_143;
          }
          unint64_t v100 = v30 - 2;
          unint64_t v101 = &v85[16 * v30 - 32];
          uint64_t v103 = *(void *)v101;
          uint64_t v102 = *((void *)v101 + 1);
          BOOL v99 = __OFSUB__(v102, v103);
          uint64_t v104 = v102 - v103;
          if (v99) {
            goto LABEL_145;
          }
          BOOL v99 = __OFADD__(v91, v104);
          uint64_t v105 = v91 + v104;
          if (v99) {
            goto LABEL_148;
          }
          if (v105 >= v96)
          {
            uint64_t v123 = &v85[16 * v88];
            uint64_t v125 = *(void *)v123;
            uint64_t v124 = *((void *)v123 + 1);
            BOOL v99 = __OFSUB__(v124, v125);
            uint64_t v126 = v124 - v125;
            if (v99) {
              goto LABEL_152;
            }
            BOOL v116 = v91 < v126;
            goto LABEL_111;
          }
        }

        else
        {
          if (v30 != 3)
          {
            uint64_t v117 = *((void *)v28 + 4);
            uint64_t v118 = *((void *)v28 + 5);
            BOOL v99 = __OFSUB__(v118, v117);
            uint64_t v110 = v118 - v117;
            char v111 = v99;
            goto LABEL_105;
          }

          uint64_t v90 = *((void *)v28 + 4);
          uint64_t v89 = *((void *)v28 + 5);
          BOOL v99 = __OFSUB__(v89, v90);
          uint64_t v91 = v89 - v90;
          char v92 = v99;
        }

        if ((v92 & 1) != 0) {
          goto LABEL_144;
        }
        unint64_t v100 = v30 - 2;
        unint64_t v106 = &v85[16 * v30 - 32];
        uint64_t v108 = *(void *)v106;
        uint64_t v107 = *((void *)v106 + 1);
        BOOL v109 = __OFSUB__(v107, v108);
        uint64_t v110 = v107 - v108;
        char v111 = v109;
        if (v109) {
          goto LABEL_147;
        }
        uint64_t v112 = &v85[16 * v88];
        uint64_t v114 = *(void *)v112;
        uint64_t v113 = *((void *)v112 + 1);
        BOOL v99 = __OFSUB__(v113, v114);
        uint64_t v115 = v113 - v114;
        if (v99) {
          goto LABEL_150;
        }
        if (__OFADD__(v110, v115)) {
          goto LABEL_151;
        }
        if (v110 + v115 >= v91)
        {
          BOOL v116 = v91 < v115;
LABEL_111:
          if (v116) {
            unint64_t v88 = v100;
          }
          goto LABEL_113;
        }

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

LABEL_105:
        if ((v111 & 1) != 0) {
          goto LABEL_146;
        }
        uint64_t v119 = &v85[16 * v88];
        uint64_t v121 = *(void *)v119;
        uint64_t v120 = *((void *)v119 + 1);
        BOOL v99 = __OFSUB__(v120, v121);
        uint64_t v122 = v120 - v121;
        if (v99) {
          goto LABEL_149;
        }
        if (v122 < v110) {
          goto LABEL_14;
        }
LABEL_113:
        unint64_t v127 = v88 - 1;
        if (v88 - 1 >= v30)
        {
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
          goto LABEL_162;
        }

        if (!*v162) {
          goto LABEL_164;
        }
        uint64_t v128 = v28;
        unint64_t v129 = &v85[16 * v127];
        uint64_t v130 = *(void *)v129;
        uint64_t v131 = &v85[16 * v88];
        uint64_t v132 = *((void *)v131 + 1);
        sub_100091730( *v162 + *(void *)(v155 + 72) * *(void *)v129,  *v162 + *(void *)(v155 + 72) * *(void *)v131,  *v162 + *(void *)(v155 + 72) * v132,  v154);
        if (v2)
        {
LABEL_134:
          id v140 = v128;
          goto LABEL_136;
        }

        if (v132 < v130) {
          goto LABEL_139;
        }
        if (v88 > *((void *)v128 + 2)) {
          goto LABEL_140;
        }
        *(void *)unint64_t v129 = v130;
        *(void *)&v85[16 * v127 + 8] = v132;
        unint64_t v133 = *((void *)v128 + 2);
        if (v88 >= v133) {
          goto LABEL_141;
        }
        id v28 = v128;
        unint64_t v30 = v133 - 1;
        memmove(&v85[16 * v88], v131 + 16, 16 * (v133 - 1 - v88));
        *((void *)v128 + 2) = v133 - 1;
        uint64_t v10 = v158;
        if (v133 <= 2) {
          goto LABEL_14;
        }
      }
    }

    unint64_t v30 = 1LL;
LABEL_14:
    Swift::Int v21 = v162[1];
    uint64_t v29 = v161;
    Swift::Int v24 = v145;
    if (v161 >= v21) {
      goto LABEL_122;
    }
  }

LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
LABEL_167:
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
}

uint64_t sub_1000914FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v32 = a1;
  uint64_t v35 = type metadata accessor for NearbyConversationViewModel(0LL);
  uint64_t v7 = __chkstk_darwin(v35);
  uint64_t v36 = (uint64_t)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t v34 = a3;
  uint64_t v31 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v38 = v16 * (v34 - 1);
    uint64_t v33 = v16;
    uint64_t v37 = v16 * v34;
LABEL_6:
    uint64_t v17 = 0LL;
    uint64_t v18 = v32;
    while (1)
    {
      uint64_t v19 = *a4;
      sub_100091EC0(v37 + v17 + *a4, (uint64_t)v15);
      sub_100091EC0(v38 + v17 + v19, (uint64_t)v11);
      uint64_t v20 = *(int *)(v35 + 28);
      uint64_t v21 = *(void *)&v15[v20];
      uint64_t v22 = *(void *)&v15[v20 + 8];
      uint64_t v23 = &v11[v20];
      uint64_t v24 = *((void *)v23 + 1);
      if (v21 == *(void *)v23 && v22 == v24)
      {
        sub_100091F48((uint64_t)v11);
        uint64_t result = sub_100091F48((uint64_t)v15);
LABEL_5:
        v38 += v33;
        v37 += v33;
        if (++v34 == v31) {
          return result;
        }
        goto LABEL_6;
      }

      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, *(void *)v23, v24, 1LL);
      sub_100091F48((uint64_t)v11);
      uint64_t result = sub_100091F48((uint64_t)v15);
      if ((v26 & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v27 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v28 = v27 + v37 + v17;
      uint64_t v29 = v27 + v38 + v17;
      sub_100091F04(v28, v36);
      swift_arrayInitWithTakeFrontToBack(v28, v29, 1LL, v35);
      uint64_t result = sub_100091F04(v36, v29);
      v17 -= v33;
      if (v34 == ++v18) {
        goto LABEL_5;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_100091730(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v56 = type metadata accessor for NearbyConversationViewModel(0LL);
  uint64_t v8 = __chkstk_darwin(v56);
  uint64_t v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v54 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v54 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v54 - v17;
  uint64_t v20 = *(void *)(v19 + 72);
  if (!v20)
  {
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }

  unint64_t v21 = a1;
  if (a2 - a1 == 0x8000000000000000LL && v20 == -1) {
    goto LABEL_72;
  }
  int64_t v22 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v20 == -1) {
    goto LABEL_73;
  }
  uint64_t v23 = (uint64_t)(a2 - a1) / v20;
  unint64_t v59 = a1;
  unint64_t v58 = a4;
  uint64_t v24 = v22 / v20;
  if (v23 >= v22 / v20)
  {
    if ((v24 & 0x8000000000000000LL) == 0)
    {
      unint64_t v55 = a1;
      uint64_t v26 = v24 * v20;
      if (a4 < a2 || a2 + v26 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v24, v56);
      }

      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4);
      }

      unint64_t v39 = a4 + v26;
      unint64_t v57 = a4 + v26;
      unint64_t v59 = a2;
      if (v26 >= 1 && v55 < a2)
      {
        uint64_t v41 = -v20;
        do
        {
          sub_100091EC0(v39 + v41, (uint64_t)v13);
          unint64_t v42 = a2 + v41;
          sub_100091EC0(a2 + v41, (uint64_t)v10);
          uint64_t v43 = *(int *)(v56 + 28);
          uint64_t v44 = *(void *)&v13[v43];
          uint64_t v45 = *(void *)&v13[v43 + 8];
          uint64_t v46 = &v10[v43];
          uint64_t v47 = *((void *)v46 + 1);
          if (v44 == *(void *)v46 && v45 == v47) {
            char v49 = 0;
          }
          else {
            char v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v45, *(void *)v46, v47, 1LL);
          }
          unint64_t v50 = a3 + v41;
          sub_100091F48((uint64_t)v10);
          sub_100091F48((uint64_t)v13);
          if ((v49 & 1) != 0)
          {
            if (a3 < a2 || v50 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v41, a2 + v41, 1LL, v56);
            }

            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront(a3 + v41);
            }

            v59 += v41;
          }

          else
          {
            unint64_t v51 = v57;
            unint64_t v52 = v57 + v41;
            v57 += v41;
            if (a3 < v51 || v50 >= v51)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v41, v52, 1LL, v56);
            }

            else if (a3 != v51)
            {
              swift_arrayInitWithTakeBackToFront(a3 + v41);
            }

            unint64_t v42 = a2;
          }

          unint64_t v39 = v57;
          if (v57 <= a4) {
            break;
          }
          a2 = v42;
          a3 += v41;
        }

        while (v42 > v55);
      }

LABEL_70:
      sub_100091DA0(&v59, &v58, (uint64_t *)&v57);
      return 1LL;
    }
  }

  else if ((v23 & 0x8000000000000000LL) == 0)
  {
    uint64_t v25 = v23 * v20;
    if (a4 < v21 || v21 + v25 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, v21, v23, v56);
    }

    else if (a4 != v21)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }

    unint64_t v27 = a4 + v25;
    unint64_t v57 = a4 + v25;
    if (v25 >= 1 && a2 < a3)
    {
      while (1)
      {
        sub_100091EC0(a2, (uint64_t)v18);
        sub_100091EC0(a4, (uint64_t)v16);
        uint64_t v29 = *(int *)(v56 + 28);
        uint64_t v30 = *(void *)&v18[v29];
        uint64_t v31 = *(void *)&v18[v29 + 8];
        uint64_t v32 = &v16[v29];
        uint64_t v33 = *((void *)v32 + 1);
        if (v30 == *(void *)v32 && v31 == v33) {
          break;
        }
        char v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, *(void *)v32, v33, 1LL);
        sub_100091F48((uint64_t)v16);
        sub_100091F48((uint64_t)v18);
        if ((v35 & 1) == 0) {
          goto LABEL_32;
        }
        unint64_t v36 = v59;
        unint64_t v37 = a2 + v20;
        if (v59 < a2 || v59 >= v37)
        {
          swift_arrayInitWithTakeFrontToBack(v59, a2, 1LL, v56);
        }

        else if (v59 == a2)
        {
          unint64_t v36 = a2;
        }

        else
        {
          swift_arrayInitWithTakeBackToFront(v59);
        }

LABEL_38:
        unint64_t v59 = v36 + v20;
        a4 = v58;
        if (v58 < v27)
        {
          a2 = v37;
          if (v37 < a3) {
            continue;
          }
        }

        goto LABEL_70;
      }

      sub_100091F48((uint64_t)v16);
      sub_100091F48((uint64_t)v18);
LABEL_32:
      unint64_t v36 = v59;
      unint64_t v38 = v58 + v20;
      if (v59 < v58 || v59 >= v38)
      {
        swift_arrayInitWithTakeFrontToBack(v59, v58, 1LL, v56);
      }

      else if (v59 != v58)
      {
        swift_arrayInitWithTakeBackToFront(v59);
      }

      unint64_t v58 = v38;
      unint64_t v37 = a2;
      goto LABEL_38;
    }

    goto LABEL_70;
  }

  __break(1u);
  return result;
}

        if (v26 < 0) {
          unint64_t v51 = v26;
        }
        else {
          unint64_t v51 = v26 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v26);
        unint64_t v52 = _CocoaArrayWrapper.endIndex.getter(v51);

        swift_bridgeObjectRelease(v26);
        if (v52 < 2) {
          goto LABEL_30;
        }
LABEL_22:
        if (v24
          && (unint64_t v42 = sub_100099150(),
              uint64_t v43 = v42[OBJC_IVAR____TtC8FaceTime9Snowglobe_mode],
              v42,
              v43 != 3))
        {
          uint64_t v46 = sub_100099150();
          uint64_t v47 = 3;
          uint64_t v48 = 3;
        }

        else
        {
          uint64_t v44 = sub_100099150();
          uint64_t v45 = v44[OBJC_IVAR____TtC8FaceTime9Snowglobe_mode];

          uint64_t v46 = sub_100099150();
          uint64_t v47 = 2;
          uint64_t v48 = 2;
        }

        sub_10009D74C(v48);

        sub_10009A978(v47);
LABEL_30:

        return;
      }
    }

    else
    {
      uint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t v29 = v28 - 1;
      if (!__OFSUB__(v28, 1LL)) {
        goto LABEL_9;
      }
    }

    __break(1u);
    goto LABEL_38;
  }

char *sub_100091C00(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100018A04(&qword_100115858);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 16 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100091CF8(void **a1, const void **a2, void *a3)
{
  unint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    char v9 = 2;
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v9,  1046LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7]) {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }

  return result;
}

uint64_t sub_100091DA0(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = type metadata accessor for NearbyConversationViewModel(0LL);
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72LL);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000LL && v7 == -1) {
    goto LABEL_14;
  }
  uint64_t v10 = v8 / v7;
  if (v8 / v7 < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
    __break(1u);
    return result;
  }

  if (v3 < v4 || v3 >= v4 + v10 * v7) {
    return swift_arrayInitWithTakeFrontToBack(v3, v4, v10, result);
  }
  if (v3 != v4) {
    return swift_arrayInitWithTakeBackToFront(v3);
  }
  return result;
}

char *sub_100091EAC(uint64_t a1)
{
  return sub_100091C00(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100091EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NearbyConversationViewModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100091F04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NearbyConversationViewModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100091F48(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NearbyConversationViewModel(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100091F84(uint64_t a1)
{
  return sub_1000ABC84(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100091F98(uint64_t a1)
{
  return sub_1000AC23C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100091FAC(void *a1)
{
  return sub_1000AC3A4(0, a1[2], 0, a1);
}

uint64_t sub_100091FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04(&qword_100115790);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100092010()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100092034(uint64_t a1, uint64_t a2)
{
  return sub_10008E278(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_10009203C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100092068()
{
  return sub_10008E480(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100092070()
{
  return sub_10008FD80(*(void **)(v0 + 16));
}

void *sub_100092098(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    uint64_t result = &_swiftEmptyArrayStorage;
    if (!v7) {
      break;
    }
    uint64_t v18 = &_swiftEmptyArrayStorage;
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)(v7);
    if (v7 < 0)
    {
      __break(1u);
      return result;
    }

    uint64_t v9 = 0LL;
    while (v7 != v9)
    {
      if ((a3 & 0xC000000000000001LL) != 0) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, a3);
      }
      else {
        id v10 = *(id *)(a3 + 8 * v9 + 32);
      }
      uint64_t v11 = v10;
      id v16 = v10;
      a1(&v17, &v16);

      if (v4) {
        return (void *)swift_release(v18);
      }
      ++v9;
      uint64_t v12 = v17;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v13 = v18[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      uint64_t v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v12);
      specialized ContiguousArray._endMutation()(v14);
      if (v7 == v9) {
        return v18;
      }
    }

    __break(1u);
LABEL_16:
    if (a3 < 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease(a3);
  }

  return result;
}

void sub_100092200(void *a1)
{
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, v3);
  uint64_t v5 = sub_100018A04(&qword_1001142B0);
  uint64_t v6 = swift_allocObject(v5, 64LL, 7LL);
  *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C4CE0;
  id v7 = [a1 leadingAnchor];
  id v8 = [v1 leadingAnchor];
  id v9 = [v7 constraintEqualToAnchor:v8];

  *(void *)(v6 + 32) = v9;
  id v10 = [a1 trailingAnchor];
  id v11 = [v1 trailingAnchor];
  id v12 = [v10 constraintEqualToAnchor:v11];

  *(void *)(v6 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v12;
  id v13 = [a1 topAnchor];
  id v14 = [v1 topAnchor];
  id v15 = [v13 constraintEqualToAnchor:v14];

  *(void *)(v6 + 4_Block_object_dispose(va, 8) = v15;
  id v16 = [a1 bottomAnchor];
  id v17 = [v1 bottomAnchor];
  id v18 = [v16 constraintEqualToAnchor:v17];

  *(void *)(v6 + 56) = v18;
  specialized Array._endMutation()();
  sub_10001C5D0(0LL, (unint64_t *)&qword_100113120, &OBJC_CLASS___NSLayoutConstraint_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  [v4 activateConstraints:isa];
}

id sub_1000924AC(uint64_t a1, uint64_t a2, double a3, double a4)
{
  v14.receiver = v4;
  v14.super_class = (Class)type metadata accessor for AvatarView(a1, a2);
  id v7 = objc_msgSendSuper2(&v14, "initWithFrame:", 0.0, 0.0, a3, a4);
  [v7 setContentMode:2];
  [v7 setClipsToBounds:1];
  id v8 = [v7 layer];
  [v8 setCornerCurve:kCACornerCurveCircular];

  id v9 = [v7 layer];
  [v7 frame];
  [v9 setCornerRadius:v10 * 0.5];

  id v12 = objc_msgSend((id)objc_opt_self(UIColor, v11), "lightGrayColor");
  [v7 setBackgroundColor:v12];

  return v7;
}

id sub_1000926CC(uint64_t a1)
{
  return sub_100095514(a1, (uint64_t (*)(void))type metadata accessor for AvatarView);
}

uint64_t type metadata accessor for AvatarView(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime10AvatarView, a2);
}

id sub_1000926F8(uint64_t a1, uint64_t a2)
{
  id result = objc_msgSend((id)objc_opt_self(UIColor, a2), "whiteColor");
  qword_100115880 = (uint64_t)result;
  return result;
}

int64x2_t sub_100092730()
{
  int64x2_t result = vdupq_n_s64(0x404F000000000000uLL);
  xmmword_100115888 = (__int128)result;
  return result;
}

id sub_100092748(uint64_t a1, uint64_t a2)
{
  id result =  objc_msgSend( (id)objc_opt_self(UIFont, a2),  "systemFontOfSize:weight:",  30.0,  UIFontWeightMedium);
  qword_100115898 = (uint64_t)result;
  return result;
}

id sub_100092790()
{
  id v0 = [objc_allocWithZone(_UIFloatingContentView) init];
  [v0 setHighlightStyle:1];
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___UIColor, v1);
  id v3 = [v2 clearColor];
  [v0 setBackgroundColor:v3 forState:0];

  id v4 = [v2 clearColor];
  [v0 setBackgroundColor:v4 forState:8];

  id v5 = [v2 clearColor];
  [v0 setBackgroundColor:v5 forState:1];

  [v0 setFocusedSizeIncrease:20.0];
  objc_msgSend(v0, "setContentMotionRotation:translation:", 0.02, 0.02, 2.0, 5.0);
  [v0 setShadowRadius:20.0];
  [v0 setShadowVerticalOffset:30.0];
  [v0 setShadowOpacity:35.0];
  [v0 setVisualEffectContainerViewScaleFactor:0.988];
  [v0 setCornerRadius:18.0];
  static String._unconditionallyBridgeFromObjectiveC(_:)(kCACornerCurveContinuous);
  uint64_t v7 = v6;
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  [v0 setCornerCurve:v8];

  id result = [v0 contentView];
  if (result)
  {
    double v10 = result;
    [result setClipsToBounds:0];

    [v0 setClipsToBounds:0];
    return v0;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_1000929B8(uint64_t a1, uint64_t a2)
{
  if (qword_1001123E0 != -1) {
    swift_once(&qword_1001123E0, sub_100092748);
  }
  id v2 =  objc_msgSend( (id)objc_opt_self(UIImageSymbolConfiguration, a2),  "configurationWithFont:",  qword_100115898);
  NSString v3 = String._bridgeToObjectiveC()();
  id v5 = objc_msgSend((id)objc_opt_self(UIImage, v4), "systemImageNamed:withConfiguration:", v3, v2);

  if (v5)
  {
    id v6 = [v5 imageWithRenderingMode:2];
  }

  else
  {
    id v6 = 0LL;
  }

  id v7 = [objc_allocWithZone(UIImageView) initWithImage:v6];

  [v7 setContentMode:2];
  id v9 = objc_msgSend((id)objc_opt_self(UIColor, v8), "whiteColor");
  [v7 setTintColor:v9];

  [v7 setClipsToBounds:1];
  return v7;
}

void sub_100092B38()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_trailingIconView];
  if (v0[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_isUserSelected] == 1)
  {
    if (qword_1001123D0 != -1) {
      swift_once(&qword_1001123D0, sub_1000926F8);
    }
    [v1 setTintColor:qword_100115880];
    if (qword_1001123E0 == -1) {
      goto LABEL_9;
    }
LABEL_13:
    swift_once(&qword_1001123E0, sub_100092748);
    goto LABEL_9;
  }

  unsigned int v3 = [v0 isFocused];
  id v5 = (void *)objc_opt_self(&OBJC_CLASS___UIColor, v4);
  id v6 = &selRef_blackColor;
  if (!v3) {
    id v6 = &selRef_whiteColor;
  }
  id v7 = [v5 *v6];
  [v1 setTintColor:v7];

  if (qword_1001123E0 != -1) {
    goto LABEL_13;
  }
LABEL_9:
  id v8 =  objc_msgSend( (id)objc_opt_self(UIImageSymbolConfiguration, v2),  "configurationWithFont:",  qword_100115898);
  NSString v9 = String._bridgeToObjectiveC()();
  id v11 = objc_msgSend((id)objc_opt_self(UIImage, v10), "systemImageNamed:withConfiguration:", v9, v8);

  if (v11)
  {
    id v12 = [v11 imageWithRenderingMode:2];
  }

  else
  {
    id v12 = 0LL;
  }

  [v1 setImage:v12];
}

id sub_100092DB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC8FaceTime20ContactPickerControl_avatarView;
  uint64_t v3 = qword_1001123D8;
  uint64_t v4 = v1;
  id v6 = v4;
  if (v3 != -1) {
    swift_once(&qword_1001123D8, sub_100092730);
  }
  __int128 v7 = xmmword_100115888;
  id v8 = objc_allocWithZone((Class)type metadata accessor for AvatarView((uint64_t)v4, v5));
  *(void *)&v1[v2] = sub_1000924AC((uint64_t)v8, v9, *(double *)&v7, *((double *)&v7 + 1));
  uint64_t v10 = OBJC_IVAR____TtC8FaceTime20ContactPickerControl_floatingContentView;
  *(void *)&v6[v10] = sub_100092790();
  uint64_t v11 = OBJC_IVAR____TtC8FaceTime20ContactPickerControl_backgroundMaterialView;
  id v12 = [objc_allocWithZone(UIView) init];
  id v14 = objc_msgSend((id)objc_opt_self(UIColor, v13), "whiteColor");
  [v12 setBackgroundColor:v14];

  [v12 setAlpha:0.17];
  id v15 = [v12 layer];
  [v15 setCompositingFilter:kCAFilterPlusL];

  *(void *)&v6[v11] = v12;
  uint64_t v16 = OBJC_IVAR____TtC8FaceTime20ContactPickerControl_highlightView;
  id v17 = [objc_allocWithZone(UIView) init];
  id v18 = [objc_allocWithZone(UIColor) initWithWhite:1.0 alpha:1.0];
  [v17 setBackgroundColor:v18];

  *(void *)&v6[v16] = v17;
  uint64_t v19 = OBJC_IVAR____TtC8FaceTime20ContactPickerControl_titleLabel;
  id v20 = [objc_allocWithZone(UILabel) init];
  if (qword_1001123E0 != -1) {
    swift_once(&qword_1001123E0, sub_100092748);
  }
  id v21 = [v20 setFont:qword_100115898];
  *(void *)&v6[v19] = v20;
  uint64_t v22 = OBJC_IVAR____TtC8FaceTime20ContactPickerControl_trailingIconView;
  *(void *)&v6[v22] = sub_1000929B8((uint64_t)v21, v23);
  uint64_t v24 = &v6[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_menuProvider];
  *(void *)uint64_t v24 = 0LL;
  *((void *)v24 + 1) = 0LL;
  v6[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_isUserSelected] = 0;
  *(void *)&v6[OBJC_IVAR____TtC8FaceTime20ContactPickerControl____lazy_storage___allowedPressTypes] = 0LL;

  v29.receiver = v6;
  v29.super_class = (Class)type metadata accessor for ContactPickerControl(v25, v26);
  id v27 = objc_msgSendSuper2(&v29, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  sub_10009308C();

  return v27;
}

void sub_10009308C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_floatingContentView];
  [v0 addSubview:v2];
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_highlightView];
  [v3 setAlpha:0.0];
  id v4 = [v2 contentView];
  if (!v4)
  {
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v5 = v4;
  id v6 = *(void **)&v0[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_backgroundMaterialView];
  [v4 addSubview:*(void *)&v1[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_backgroundMaterialView]];

  id v7 = [v2 contentView];
  if (!v7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  id v8 = v7;
  [v7 addSubview:v3];

  [v6 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v9 = [v2 contentView];
  if (!v9)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v10 = v9;
  sub_100092200(v6);

  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v11 = [v2 contentView];
  if (!v11)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  id v12 = v11;
  sub_100092200(v3);

  id v13 = [v2 contentView];
  if (!v13)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  id v14 = v13;
  id v15 = *(void **)&v1[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_avatarView];
  [v13 addSubview:v15];

  [v15 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v16 = [v2 contentView];
  if (!v16)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  id v17 = v16;
  id v18 = *(void **)&v1[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_titleLabel];
  [v16 addSubview:v18];

  [v18 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v18 setMarqueeEnabled:1];
  id v19 = [v2 contentView];
  if (!v19)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  id v20 = v19;
  id v21 = *(void **)&v1[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_trailingIconView];
  [v19 addSubview:v21];

  [v21 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v22 = [v2 contentView];
  if (!v22)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v23 = v22;
  NSString v24 = String._bridgeToObjectiveC()();
  [v23 setAccessibilityIdentifier:v24];

  uint64_t v25 = sub_100018A04(&qword_1001142B0);
  uint64_t v26 = swift_allocObject(v25, 104LL, 7LL);
  *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C6B20;
  id v27 = [v15 centerYAnchor];
  id v28 = [v2 contentView];
  if (!v28)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  objc_super v29 = v28;
  id v30 = [v28 centerYAnchor];

  id v31 = [v27 constraintEqualToAnchor:v30];
  *(void *)(v26 + 32) = v31;
  id v32 = [v15 leadingAnchor];
  id v33 = [v2 contentView];
  if (!v33)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v34 = v33;
  id v35 = [v33 leadingAnchor];

  id v36 = [v32 constraintEqualToAnchor:v35 constant:10.0];
  *(void *)(v26 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v36;
  id v37 = [v15 widthAnchor];
  if (qword_1001123D8 != -1) {
    swift_once(&qword_1001123D8, sub_100092730);
  }
  id v38 = [v37 constraintEqualToConstant:*(double *)&xmmword_100115888];

  *(void *)(v26 + 4_Block_object_dispose(va, 8) = v38;
  id v39 = [v15 heightAnchor];
  id v40 = objc_retainAutoreleasedReturnValue(objc_msgSend(v39, "constraintEqualToConstant:", *((double *)&xmmword_100115888
                                                                                           + 1)));

  *(void *)(v26 + 56) = v40;
  id v41 = [v18 centerYAnchor];
  id v42 = [v15 centerYAnchor];
  id v43 = [v41 constraintEqualToAnchor:v42];

  *(void *)(v26 + 64) = v43;
  id v44 = [v18 leadingAnchor];
  id v45 = [v15 trailingAnchor];
  id v46 = [v44 constraintEqualToAnchor:v45 constant:10.0];

  *(void *)(v26 + 72) = v46;
  id v47 = [v18 trailingAnchor];
  id v48 = [v21 leadingAnchor];
  id v49 = [v47 constraintLessThanOrEqualToAnchor:v48 constant:-10.0];

  *(void *)(v26 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v49;
  id v50 = [v21 centerYAnchor];
  id v51 = [v15 centerYAnchor];
  id v52 = [v50 constraintEqualToAnchor:v51];

  *(void *)(v26 + 8_Block_object_dispose(va, 8) = v52;
  id v53 = [v21 trailingAnchor];
  id v54 = [v2 contentView];
  if (v54)
  {
    uint64_t v56 = v54;
    unint64_t v57 = (void *)objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, v55);
    id v58 = [v56 trailingAnchor];

    id v59 = [v53 constraintEqualToAnchor:v58 constant:-20.0];
    *(void *)(v26 + 96) = v59;
    specialized Array._endMutation()(v60);
    sub_10001C5D0(0LL, (unint64_t *)&qword_100113120, &OBJC_CLASS___NSLayoutConstraint_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v57, "activateConstraints:", isa, swift_bridgeObjectRelease(v26).n128_f64[0]);

    return;
  }

id sub_10009388C(void *a1, uint64_t a2, SEL *a3)
{
  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for ContactPickerControl((uint64_t)a1, a2);
  return objc_msgSendSuper2(&v5, *a3);
}

void sub_1000938D4(void *a1, uint64_t a2, uint64_t a3, const char **a4)
{
  v8.receiver = a1;
  v8.super_class = (Class)type metadata accessor for ContactPickerControl((uint64_t)a1, a2);
  id v6 = *a4;
  id v7 = v8.receiver;
  objc_msgSendSuper2(&v8, v6, a3);
  sub_100093938();
}

id sub_100093938()
{
  else {
    uint64_t v1 = 0LL;
  }
  uint64_t v2 = v1 | [v0 isHighlighted];
  else {
    uint64_t v3 = v2;
  }
  return [*(id *)&v0[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_floatingContentView] setControlState:v3 animated:1];
}

uint64_t sub_1000939B8()
{
  uint64_t v1 = OBJC_IVAR____TtC8FaceTime20ContactPickerControl____lazy_storage___allowedPressTypes;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC8FaceTime20ContactPickerControl____lazy_storage___allowedPressTypes);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC8FaceTime20ContactPickerControl____lazy_storage___allowedPressTypes);
  }

  else
  {
    uint64_t v3 = sub_1000B17A8((uint64_t)&off_1000F70E0);
    uint64_t v4 = *(void *)(v0 + v1);
    *(void *)(v0 + v1) = v3;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRelease(v4);
    uint64_t v2 = 0LL;
  }

  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_100093A20(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v2 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v3 = __CocoaSet.count.getter(a1);
  }

  else
  {
    uint64_t v3 = *(void *)(a1 + 16);
  }

  uint64_t v4 = _swiftEmptyArrayStorage;
  if (!v3)
  {
LABEL_29:
    uint64_t v30 = v4[2];
    if (v30)
    {
      swift_bridgeObjectRetain(v4);
      for (uint64_t i = 0LL; i != v30; ++i)
      {
        Swift::UInt v32 = v4[i + 4];
        uint64_t v33 = sub_1000939B8();
        uint64_t v34 = v33;
        if (*(void *)(v33 + 16))
        {
          Hasher.init(_seed:)(v41, *(void *)(v33 + 40));
          Hasher._combine(_:)(v32);
          Swift::Int v35 = Hasher._finalize()();
          uint64_t v36 = -1LL << *(_BYTE *)(v34 + 32);
          unint64_t v37 = v35 & ~v36;
          if (((*(void *)(v34 + 56 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v37) & 1) != 0)
          {
            uint64_t v38 = *(void *)(v34 + 48);
            if (*(void *)(v38 + 8 * v37) == v32)
            {
LABEL_38:
              swift_bridgeObjectRelease(v4);
              swift_bridgeObjectRelease(v34);
              swift_bridgeObjectRelease(v4);
              return 1LL;
            }

            uint64_t v39 = ~v36;
            while (1)
            {
              unint64_t v37 = (v37 + 1) & v39;
              if (((*(void *)(v34 + 56 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v37) & 1) == 0) {
                break;
              }
              if (*(void *)(v38 + 8 * v37) == v32) {
                goto LABEL_38;
              }
            }
          }
        }

        swift_bridgeObjectRelease(v34);
      }

      swift_bridgeObjectRelease_n(v4, 2LL);
    }

    else
    {
      swift_bridgeObjectRelease(v4);
    }

    return 0LL;
  }

  id v45 = _swiftEmptyArrayStorage;
  sub_1000ABC3C(0, v3 & ~(v3 >> 63), 0);
  if (v2)
  {
    if (v1 < 0) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t result = __CocoaSet.startIndex.getter(v5);
    char v8 = 1;
  }

  else
  {
    uint64_t result = sub_1000967E0(v1);
    char v8 = v9 & 1;
  }

  uint64_t v42 = result;
  uint64_t v43 = v7;
  char v44 = v8;
  if ((v3 & 0x8000000000000000LL) == 0)
  {
    uint64_t v10 = v1 & 0xFFFFFFFFFFFFFF8LL;
    if (v1 < 0) {
      uint64_t v10 = v1;
    }
    uint64_t v40 = v10;
    do
    {
      while (1)
      {
        int64_t v17 = v42;
        uint64_t v16 = v43;
        char v18 = v44;
        sub_1000AF754(v42, v43, v44, v1);
        id v20 = v19;
        id v21 = [v19 type];

        id v22 = v45;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native(v45);
        if ((result & 1) == 0)
        {
          uint64_t result = sub_1000ABC3C(0, v22[2] + 1LL, 1);
          id v22 = v45;
        }

        unint64_t v24 = v22[2];
        unint64_t v23 = v22[3];
        if (v24 >= v23 >> 1)
        {
          uint64_t result = sub_1000ABC3C(v23 > 1, v24 + 1, 1);
          id v22 = v45;
        }

        void v22[2] = v24 + 1;
        v22[v24 + 4] = v21;
        if (v2) {
          break;
        }
        int64_t v11 = sub_1000966F8(v17, v16, v18, v1);
        uint64_t v13 = v12;
        char v15 = v14;
        sub_100042B84(v17, v16, v18);
        uint64_t v42 = v11;
        uint64_t v43 = v13;
        char v44 = v15 & 1;
        if (!--v3) {
          goto LABEL_28;
        }
      }

      if ((v18 & 1) == 0) {
        goto LABEL_43;
      }
      uint64_t v25 = __CocoaSet.Index.handleBitPattern.getter(v17, v16);
      if (v25) {
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
      }
      else {
        uint64_t isUniquelyReferenced_nonNull_native = 1LL;
      }
      uint64_t v27 = sub_100018A04(&qword_100115990);
      id v28 = (void (*)(void *, void))Set.Index._asCocoa.modify(v41, v27);
      __CocoaSet.formIndex(after:isUnique:)(v29, isUniquelyReferenced_nonNull_native, v40);
      v28(v41, 0LL);
      --v3;
    }

    while (v3);
LABEL_28:
    sub_100042B84(v42, v43, v44);
    uint64_t v4 = v45;
    goto LABEL_29;
  }

  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

void sub_100093DA0(void *a1, uint64_t a2, uint64_t a3, void *a4, char a5, SEL *a6)
{
  uint64_t v11 = sub_10001C5D0(0LL, &qword_100115998, &OBJC_CLASS___UIPress_ptr);
  uint64_t v12 = sub_10001C230(&qword_1001159A0, &qword_100115998, &OBJC_CLASS___UIPress_ptr);
  uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)(a3, v11, v12);
  id v14 = a4;
  id v15 = a1;
  if ((sub_100093A20(v13) & 1) != 0)
  {
    [v15 setHighlighted:a5 & 1];

    swift_bridgeObjectRelease(v13);
  }

  else
  {
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    v18.receiver = v15;
    v18.super_class = (Class)type metadata accessor for ContactPickerControl((uint64_t)isa, v17);
    objc_msgSendSuper2(&v18, *a6, isa, v14);

    swift_bridgeObjectRelease(v13);
  }
}

void sub_100093FFC(uint64_t a1, void *a2)
{
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for ContactPickerControl(a1, (uint64_t)a2);
  objc_msgSendSuper2(&v8, "didUpdateFocusInContext:withAnimationCoordinator:", a1, a2);
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = v5 | [v2 isHighlighted];
  else {
    uint64_t v7 = v6;
  }
  sub_10009410C(v7, a2);
}

void sub_10009410C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)&v2[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_floatingContentView];
  if (a2)
  {
    [v4 setControlState:a1 withAnimationCoordinator:a2];
    if ((a1 & 8) != 0)
    {
      uint64_t v10 = swift_allocObject(&unk_1000FB8A8, 24LL, 7LL);
      *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
      uint64_t v17 = sub_100096CF4;
      uint64_t v18 = v10;
      uint64_t v13 = _NSConcreteStackBlock;
      uint64_t v14 = 1107296256LL;
      id v15 = sub_10004511C;
      uint64_t v16 = &unk_1000FB8C0;
      uint64_t v7 = _Block_copy(&v13);
      uint64_t v11 = v18;
      uint64_t v12 = v2;
      swift_release(v11);
      [a2 addCoordinatedFocusingAnimations:v7 completion:0];
    }

    else
    {
      uint64_t v6 = swift_allocObject(&unk_1000FB858, 24LL, 7LL);
      *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
      uint64_t v17 = sub_100096CD4;
      uint64_t v18 = v6;
      uint64_t v13 = _NSConcreteStackBlock;
      uint64_t v14 = 1107296256LL;
      id v15 = sub_10004511C;
      uint64_t v16 = &unk_1000FB870;
      uint64_t v7 = _Block_copy(&v13);
      uint64_t v8 = v18;
      char v9 = v2;
      swift_release(v8);
      [a2 addCoordinatedUnfocusingAnimations:v7 completion:0];
    }

    _Block_release(v7);
  }

  else
  {
    [v4 setControlState:a1 animated:1];
  }

id sub_10009428C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + OBJC_IVAR____TtC8FaceTime20ContactPickerControl_titleLabel);
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___UIColor, a2);
  id v5 = [v4 blackColor];
  [v3 setTextColor:v5];

  uint64_t v6 = *(void **)(a2 + OBJC_IVAR____TtC8FaceTime20ContactPickerControl_trailingIconView);
  id v7 = [v4 blackColor];
  [v6 setTintColor:v7];

  return [*(id *)(a2 + OBJC_IVAR____TtC8FaceTime20ContactPickerControl_highlightView) setAlpha:1.0];
}

void sub_100094358(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + OBJC_IVAR____TtC8FaceTime20ContactPickerControl_titleLabel);
  id v5 = (void *)objc_opt_self(&OBJC_CLASS___UIColor, v4);
  id v6 = [v5 whiteColor];
  [v3 setTextColor:v6];

  id v7 = *(void **)(a2 + OBJC_IVAR____TtC8FaceTime20ContactPickerControl_trailingIconView);
  if (*(_BYTE *)(a2 + OBJC_IVAR____TtC8FaceTime20ContactPickerControl_isUserSelected) == 1)
  {
    if (qword_1001123D0 != -1) {
      swift_once(&qword_1001123D0, sub_1000926F8);
    }
    id v8 = (id)qword_100115880;
  }

  else
  {
    id v8 = [v5 whiteColor];
  }

  id v9 = v8;
  objc_msgSend(v7, "setTintColor:");
}

void sub_10009448C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

id sub_1000944B4(uint64_t a1)
{
  return sub_100095514(a1, (uint64_t (*)(void))type metadata accessor for ContactPickerControl);
}

uint64_t type metadata accessor for ContactPickerControl(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime20ContactPickerControl, a2);
}

char *sub_100094584(double a1, double a2, double a3, double a4)
{
  v4[OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_isUserSelected] = 0;
  id v9 = &v4[OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_item];
  uint64_t v10 = sub_100018A04(&qword_1001128F8);
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v12 = &v4[OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_selectionHandler];
  *uint64_t v12 = 0LL;
  v12[1] = 0LL;
  uint64_t v13 = OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_contactPickerControl;
  id v15 = objc_allocWithZone((Class)type metadata accessor for ContactPickerControl(v11, v14));
  uint64_t v16 = v4;
  *(void *)&v4[v13] = [v15 init];
  *(void *)&v16[OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_imageFetchTask] = 0LL;

  v21.receiver = v16;
  v21.super_class = (Class)type metadata accessor for CreateCallCollectionViewCell(0LL);
  uint64_t v17 = (char *)objc_msgSendSuper2(&v21, "initWithFrame:", a1, a2, a3, a4);
  id v18 = [v17 contentView];
  id v19 = *(id *)&v17[OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_contactPickerControl];
  [v18 addSubview:v19];

  return v17;
}

id sub_100094804()
{
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for CreateCallCollectionViewCell(0LL);
  objc_msgSendSuper2(&v3, "prepareForReuse");
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_imageFetchTask];
  if (v1)
  {
    swift_retain(*(void *)&v0[OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_imageFetchTask]);
    sub_100018A04(&qword_1001141F0);
    Task.cancel()();
    swift_release(v1);
  }

  return [*(id *)(*(void *)&v0[OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_contactPickerControl] + OBJC_IVAR____TtC8FaceTime20ContactPickerControl_avatarView) setImage:0];
}

void sub_1000948E8()
{
  uint64_t v1 = sub_100018A04(&qword_1001128F0);
  __chkstk_darwin(v1);
  objc_super v3 = (void **)((char *)&v97 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v4 = sub_100018A04(&qword_1001128F8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v4);
  id v8 = (void (**)(void))((char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v7);
  uint64_t v10 = (void (**)(void))((char *)&v97 - v9);
  uint64_t v11 = v0 + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_item;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_item, v104, 0LL, 0LL);
  sub_100095C04(v11, (uint64_t)v3);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v5 + 48))(v3, 1LL, v4) == 1)
  {
    uint64_t v12 = &qword_1001128F0;
    uint64_t v13 = (uint64_t)v3;
LABEL_28:
    sub_10001C608(v13, v12);
    return;
  }

  uint64_t v101 = v5;
  uint64_t v102 = v10;
  uint64_t v14 = *(int *)(v4 + 48);
  id v15 = (char *)v10 + v14;
  uint64_t v16 = (char *)v3 + v14;
  uint64_t v17 = *v3;
  id v18 = v3[1];
  *uint64_t v10 = v17;
  v10[1] = v18;
  uint64_t v19 = type metadata accessor for IndexPath(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v15, v16, v19);
  int v21 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_isUserSelected);
  uint64_t v103 = v0;
  if (v21 == 1)
  {
    uint64_t v100 = sub_10001C5D0(0LL, (unint64_t *)&unk_1001128E0, &OBJC_CLASS___UIAction_ptr);
    id v22 = v18;
    id v23 = v17;
    NSString v99 = String._bridgeToObjectiveC()();
    uint64_t v24 = swift_allocObject(&unk_1000FB768, 24LL, 7LL);
    swift_unknownObjectWeakInit(v24 + 16, v0);
    uint64_t v25 = (char *)v8 + *(int *)(v4 + 48);
    *id v8 = v23;
    v8[1] = v18;
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v25, v15, v19);
    uint64_t v26 = *(unsigned __int8 *)(v101 + 80);
    uint64_t v27 = (v26 + 24) & ~v26;
    uint64_t v28 = swift_allocObject(&unk_1000FB7E0, v27 + v6, v26 | 7);
    *(void *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = v24;
    sub_100095CE8((uint64_t)v8, v28 + v27);
    uint64_t v30 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)( 0LL,  0xE000000000000000LL,  0LL,  0LL,  0LL,  0LL,  v99,  0LL,  v29,  0LL,  0LL,  0LL,  sub_100095DF8,  v28);
    uint64_t v31 = OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_contactPickerControl;
    uint64_t v32 = v103;
    uint64_t v33 = *(char **)(v103 + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_contactPickerControl);
    uint64_t v34 = (uint64_t *)&v33[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_menuProvider];
    uint64_t v35 = *(void *)&v33[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_menuProvider];
    uint64_t v36 = *(void *)&v33[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_menuProvider + 8];
    *uint64_t v34 = 0LL;
    v34[1] = 0LL;
    unint64_t v37 = v33;
    sub_10001C08C(v35, v36);
    uint64_t v38 = *v34;
    uint64_t v39 = v34[1];
    uint64_t v40 = v32;
    if (v38)
    {
      uint64_t v41 = swift_allocObject(&unk_1000FB808, 32LL, 7LL);
      *(void *)(v41 + swift_unknownObjectWeakDestroy(v0 + 16) = v38;
      *(void *)(v41 + 24) = v39;
      uint64_t v42 = sub_100096CFC;
    }

    else
    {
      uint64_t v42 = 0LL;
      uint64_t v41 = 0LL;
    }

    sub_10002AE44(v38, v39);
    sub_10001C08C((uint64_t)v42, v41);
    [v37 setShowsMenuAsPrimaryAction:v38 != 0];
    [v37 setContextMenuInteractionEnabled:v38 != 0];

    [*(id *)(v40 + v31) addAction:v30 forControlEvents:0x2000];
LABEL_19:

    uint64_t v77 = (uint64_t)v102;
LABEL_27:
    uint64_t v12 = &qword_1001128F8;
    uint64_t v13 = v77;
    goto LABEL_28;
  }

  uint64_t v43 = (char *)v8 + *(int *)(v4 + 48);
  uint64_t v98 = v15;
  NSString v99 = v43;
  *id v8 = v17;
  v8[1] = v18;
  uint64_t v44 = v20;
  uint64_t v97 = *(void (**)(void))(v20 + 16);
  v97();
  uint64_t v100 = (uint64_t)v18;
  id v45 = v18;
  id v46 = v17;
  id v47 = [v46 anonyms];
  uint64_t v48 = sub_10001C5D0(0LL, &qword_100112948, &OBJC_CLASS___TUContinuityHandleAnonym_ptr);
  uint64_t v49 = sub_10001C230((unint64_t *)&unk_100112950, &qword_100112948, &OBJC_CLASS___TUContinuityHandleAnonym_ptr);
  uint64_t v50 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v47, v48, v49);

  uint64_t v51 = (uint64_t)sub_100095A0C(v50);
  swift_bridgeObjectRelease(v50);
  (*(void (**)(NSString, uint64_t))(v44 + 8))(v99, v19);
  if ((v51 & 0x8000000000000000LL) == 0 && (v51 & 0x4000000000000000LL) == 0)
  {
    uint64_t v52 = v103;
    if (*(void *)(v51 + 16) == 1LL)
    {
      id v53 = v46;
      swift_retain(v51);
      uint64_t v54 = v100;
      goto LABEL_10;
    }

LABEL_10:
  if ((v51 & 0xC000000000000001LL) != 0)
  {
    id v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v51);
    goto LABEL_13;
  }

  if (*(void *)(v51 + 16))
  {
    id v55 = *(id *)(v51 + 32);
LABEL_13:
    uint64_t v56 = v55;
    swift_release_n(v51, 2LL);
    uint64_t v100 = sub_10001C5D0(0LL, (unint64_t *)&unk_1001128E0, &OBJC_CLASS___UIAction_ptr);
    NSString v57 = String._bridgeToObjectiveC()();
    uint64_t v58 = swift_allocObject(&unk_1000FB768, 24LL, 7LL);
    uint64_t v59 = v103;
    swift_unknownObjectWeakInit(v58 + 16, v103);
    uint64_t v60 = (char *)v8 + *(int *)(v4 + 48);
    *id v8 = v53;
    v8[1] = v54;
    ((void (*)(char *, char *, uint64_t))v97)(v60, v98, v19);
    uint64_t v61 = *(unsigned __int8 *)(v101 + 80);
    uint64_t v62 = (v61 + 32) & ~v61;
    uint64_t v63 = swift_allocObject(&unk_1000FB790, v62 + v6, v61 | 7);
    *(void *)(v63 + swift_unknownObjectWeakDestroy(v0 + 16) = v58;
    *(void *)(v63 + 24) = v56;
    sub_100095CE8((uint64_t)v8, v63 + v62);
    uint64_t v64 = v59;
    id v65 = v56;
    uint64_t v30 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)( 0LL,  0xE000000000000000LL,  0LL,  0LL,  0LL,  0LL,  v57,  0LL,  v66,  0LL,  0LL,  0LL,  sub_100095D30,  v63);
    uint64_t v67 = OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_contactPickerControl;
    uint64_t v68 = *(char **)(v59 + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_contactPickerControl);
    uint64_t v69 = (uint64_t *)&v68[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_menuProvider];
    uint64_t v70 = *(void *)&v68[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_menuProvider];
    uint64_t v71 = *(void *)&v68[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_menuProvider + 8];
    *uint64_t v69 = 0LL;
    v69[1] = 0LL;
    uint64_t v72 = v68;
    sub_10001C08C(v70, v71);
    uint64_t v73 = *v69;
    uint64_t v74 = v69[1];
    if (v73)
    {
      uint64_t v75 = swift_allocObject(&unk_1000FB7B8, 32LL, 7LL);
      *(void *)(v75 + swift_unknownObjectWeakDestroy(v0 + 16) = v73;
      *(void *)(v75 + 24) = v74;
      uint64_t v76 = sub_100096CFC;
    }

    else
    {
      uint64_t v76 = 0LL;
      uint64_t v75 = 0LL;
    }

    sub_10002AE44(v73, v74);
    sub_10001C08C((uint64_t)v76, v75);
    [v72 setShowsMenuAsPrimaryAction:v73 != 0];
    [v72 setContextMenuInteractionEnabled:v73 != 0];

    [*(id *)(v64 + v67) addAction:v30 forControlEvents:0x2000];
    goto LABEL_19;
  }

  __break(1u);
}

  swift_bridgeObjectRelease_n(v3, 2LL);
  return 0LL;
}

      sub_1000AF768(v4, v6, v2 != 0, a1, &qword_1001134A8, &OBJC_CLASS___TUConversationActivitySession_ptr);
      uint64_t v10 = v14;
      sub_100042B84(v4, v6, v2 != 0);
      return v10;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

void sub_10009510C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    uint64_t v6 = (void *)Strong;
    id v8 = *(void (**)(void, uint64_t))(Strong
                                                + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_selectionHandler);
    uint64_t v7 = *(void *)(Strong + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_selectionHandler + 8);
    sub_10002AE44((uint64_t)v8, v7);

    if (v8)
    {
      uint64_t v9 = sub_100018A04(&qword_1001128F8);
      v8(0LL, a3 + *(int *)(v9 + 48));
      sub_10001C08C((uint64_t)v8, v7);
    }
  }

uint64_t sub_1000951AC@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v33 = a4;
  uint64_t v7 = sub_100018A04(&qword_1001128F8);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = *a1;
  uint64_t v32 = sub_10001C5D0(0LL, (unint64_t *)&unk_1001128E0, &OBJC_CLASS___UIAction_ptr);
  id v12 = [v11 localizedDisplayName];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v30 = v14;
  uint64_t v31 = v13;

  uint64_t v15 = swift_allocObject(&unk_1000FB768, 24LL, 7LL);
  swift_unknownObjectWeakInit(v15 + 16, a2);
  uint64_t v16 = *(int *)(v7 + 48);
  uint64_t v17 = (char *)v10 + v16;
  uint64_t v18 = a3 + v16;
  uint64_t v19 = *(void **)a3;
  uint64_t v20 = *(void **)(a3 + 8);
  *uint64_t v10 = v19;
  v10[1] = v20;
  uint64_t v21 = type metadata accessor for IndexPath(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16LL))(v17, v18, v21);
  uint64_t v22 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v23 = (v22 + 32) & ~v22;
  uint64_t v24 = swift_allocObject(&unk_1000FB830, v23 + v9, v22 | 7);
  *(void *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
  *(void *)(v24 + 24) = v11;
  sub_100095CE8((uint64_t)v10, v24 + v23);
  id v25 = v20;
  id v26 = v11;
  id v27 = v19;
  uint64_t result = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)( v31,  v30,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  v28,  0LL,  0LL,  0LL,  sub_100095D30,  v24);
  *uint64_t v33 = result;
  return result;
}

void sub_100095364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a2 + 16;
  swift_beginAccess(a2 + 16, v12, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v6);
  if (Strong)
  {
    uint64_t v8 = (void *)Strong;
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(Strong
                                                 + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_selectionHandler);
    uint64_t v10 = *(void *)(Strong + OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_selectionHandler + 8);
    sub_10002AE44((uint64_t)v9, v10);

    if (v9)
    {
      uint64_t v11 = sub_100018A04(&qword_1001128F8);
      v9(a3, a4 + *(int *)(v11 + 48));
      sub_10001C08C((uint64_t)v9, v10);
    }
  }

uint64_t sub_100095414(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v6 = sub_10001C5D0(0LL, &qword_100115980, &OBJC_CLASS___UIMenuElement_ptr);
    swift_bridgeObjectRetain(v2);
    uint64_t v7 = _bridgeCocoaArray<A>(_:)(v5, v6);
    swift_bridgeObjectRelease(v2);
    uint64_t v2 = v7;
  }

  else
  {
    uint64_t v3 = swift_bridgeObjectRetain(a2);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v3);
    sub_10001C5D0(0LL, &qword_100115980, &OBJC_CLASS___UIMenuElement_ptr);
  }

  sub_10001C5D0(0LL, &qword_100115988, &OBJC_CLASS___UIMenu_ptr);
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)( 0LL,  0xE000000000000000LL,  0LL,  0LL,  0LL,  0LL,  0LL,  -1LL,  v2);
}

id sub_100095504()
{
  return sub_100095514(0LL, (uint64_t (*)(void))type metadata accessor for CreateCallCollectionViewCell);
}

id sub_100095514(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_1000955A8()
{
  return type metadata accessor for CreateCallCollectionViewCell(0LL);
}

uint64_t type metadata accessor for CreateCallCollectionViewCell(uint64_t a1)
{
  uint64_t result = qword_100115968;
  if (!qword_100115968) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CreateCallCollectionViewCell);
  }
  return result;
}

void sub_1000955EC(uint64_t a1)
{
  v4[0] = &unk_1000C6BA0;
  sub_100095684(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    void v4[2] = &unk_1000C6BB8;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = &unk_1000C6BD0;
    swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
  }

void sub_100095684(uint64_t a1)
{
  if (!qword_100115978)
  {
    uint64_t v2 = sub_10001C334(&qword_1001128F8);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100115978);
    }
  }

id sub_1000956DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, __n128))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v5 = sub_10001C5D0(0LL, &qword_100115980, &OBJC_CLASS___UIMenuElement_ptr);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  __n128 v7 = swift_retain(v3);
  uint64_t v8 = (void *)v4(v6, v7);
  swift_release(v3);
  swift_bridgeObjectRelease(v6);
  return v8;
}

int64_t *sub_100095754(int64_t *result, int64_t a2)
{
  uint64_t v2 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }

  else
  {
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
    int64_t v4 = (int64_t)result;
    if (v2 <= 0)
    {
      uint64_t v6 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v5 = sub_100018A04(&qword_1001159A8);
      uint64_t v6 = (int64_t *)swift_allocObject(v5, 8 * v2 + 32, 7LL);
      int64_t v7 = j__malloc_size(v6);
      uint64_t v8 = v7 - 32;
      if (v7 < 32) {
        uint64_t v8 = v7 - 25;
      }
      v6[2] = v2;
      v6[3] = 2 * (v8 >> 3);
    }

    uint64_t result = sub_100095F30(v9, v6 + 4, v2, v4, a2);
  }

  __break(1u);
  return result;
}

void *sub_100095818(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100018A04(&qword_1001159A8);
  int64_t v4 = (void *)swift_allocObject(v3, 8 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 25;
  }
  void v4[2] = v1;
  v4[3] = 2 * (v6 >> 3);
  int64_t v7 = sub_100096070(&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_100022550(v8);
  if (v7 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

uint64_t **sub_1000958FC(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2) {
      goto LABEL_5;
    }
    return (uint64_t **)_swiftEmptyArrayStorage;
  }

  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v2 = __CocoaSet.count.getter(a1);
  if (!v2) {
    return (uint64_t **)_swiftEmptyArrayStorage;
  }
LABEL_5:
  if (v2 <= 0)
  {
    int64_t v4 = (uint64_t **)_swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v3 = sub_100018A04(&qword_1001142B0);
    int64_t v4 = (uint64_t **)swift_allocObject(v3, 8 * v2 + 32, 7LL);
    int64_t v5 = j__malloc_size(v4);
    uint64_t v6 = v5 - 32;
    if (v5 < 32) {
      uint64_t v6 = v5 - 25;
    }
    void v4[2] = (uint64_t *)v2;
    v4[3] = (uint64_t *)((2 * (v6 >> 3)) | 1);
  }

  swift_bridgeObjectRetain(v1);
  int64_t v7 = sub_100096204( &v9,  v4 + 4,  v2,  v1,  &qword_100112910,  &OBJC_CLASS___TUContinuitySessionContact_ptr,  &qword_100112918);
  uint64_t result = (uint64_t **)sub_100022550(v9);
  __break(1u);
  return result;
}

uint64_t **sub_100095A0C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2) {
      goto LABEL_5;
    }
    return (uint64_t **)_swiftEmptyArrayStorage;
  }

  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v2 = __CocoaSet.count.getter(a1);
  if (!v2) {
    return (uint64_t **)_swiftEmptyArrayStorage;
  }
LABEL_5:
  if (v2 <= 0)
  {
    int64_t v4 = (uint64_t **)_swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v3 = sub_100018A04(&qword_1001142B0);
    int64_t v4 = (uint64_t **)swift_allocObject(v3, 8 * v2 + 32, 7LL);
    int64_t v5 = j__malloc_size(v4);
    uint64_t v6 = v5 - 32;
    if (v5 < 32) {
      uint64_t v6 = v5 - 25;
    }
    void v4[2] = (uint64_t *)v2;
    v4[3] = (uint64_t *)((2 * (v6 >> 3)) | 1);
  }

  swift_bridgeObjectRetain(v1);
  int64_t v7 = sub_100096204( &v9,  v4 + 4,  v2,  v1,  &qword_100112948,  &OBJC_CLASS___TUContinuityHandleAnonym_ptr,  (unint64_t *)&unk_100112950);
  uint64_t result = (uint64_t **)sub_100022550(v9);
  __break(1u);
  return result;
}

void *sub_100095B1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100018A04(&qword_1001142B0);
  int64_t v4 = (void *)swift_allocObject(v3, 8 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 25;
  }
  void v4[2] = v1;
  v4[3] = (2 * (v6 >> 3)) | 1;
  int64_t v7 = sub_1000964FC(&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_100022550(v8);
  if (v7 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

uint64_t sub_100095C04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04(&qword_1001128F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100095C4C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000951AC(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_100095C68()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100095C8C(uint64_t a1)
{
  return sub_100095414(a1, *(void *)(v1 + 16));
}

uint64_t sub_100095C94@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100095CC0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100095CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04(&qword_1001128F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100095D34()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100095D58()
{
  uint64_t v1 = sub_100018A04(&qword_1001128F8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  int64_t v7 = (id *)(v0 + v4);

  uint64_t v8 = (char *)v7 + *(int *)(v1 + 48);
  uint64_t v9 = type metadata accessor for IndexPath(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100095DF8(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(sub_100018A04(&qword_1001128F8) - 8) + 80LL);
  sub_10009510C(a1, *(void *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_100095E40()
{
  uint64_t v1 = sub_100018A04(&qword_1001128F8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));

  int64_t v7 = (id *)(v0 + v4);
  uint64_t v8 = (char *)v7 + *(int *)(v1 + 48);
  uint64_t v9 = type metadata accessor for IndexPath(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100095EE8(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(sub_100018A04(&qword_1001128F8) - 8) + 80LL);
  sub_100095364(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

int64_t *sub_100095F30( int64_t *result, int64_t *a2, uint64_t a3, int64_t a4, int64_t a5)
{
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    int64_t v5 = a4;
LABEL_7:
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = v5;
    return (int64_t *)a3;
  }

  if (a3 < 0) {
    goto LABEL_31;
  }
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0LL;
    goto LABEL_6;
  }

  if (a5 < a4) {
    goto LABEL_32;
  }
  int64_t v6 = a5 - a4;
  if (a5 > a4)
  {
    int64_t v5 = a4 + 1;
    *a2 = a4;
    if (a3 == 1) {
      goto LABEL_7;
    }
    if (v5 == a5)
    {
      a3 = 1LL;
      int64_t v5 = a5;
      goto LABEL_7;
    }

    unint64_t v7 = v6 - 2;
    if (v7 >= ~a4 + a5) {
      unint64_t v7 = ~a4 + a5;
    }
    unint64_t v8 = v7 + 1;
    if (v8 >= 5)
    {
      uint64_t v11 = v8 & 3;
      if ((v8 & 3) == 0) {
        uint64_t v11 = 4LL;
      }
      unint64_t v12 = v8 - v11;
      int64_t v13 = v5 + v8 - v11;
      uint64_t v10 = &a2[v8 - v11];
      uint64_t v9 = v12 + 2;
      int64x2_t v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_1000C6B30);
      uint64_t v15 = (int64x2_t *)(a2 + 3);
      int64x2_t v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        *uint64_t v15 = vaddq_s64(v14, v16);
        int64x2_t v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4LL;
      }

      while (v12);
      int64_t v5 = v13;
    }

    else
    {
      uint64_t v9 = 2LL;
      uint64_t v10 = a2;
    }

    uint64_t v17 = v10 + 1;
    while (v5 < a5)
    {
      int64_t v18 = v5 + 1;
      *uint64_t v17 = v5;
      if (a3 == v9)
      {
        ++v5;
        goto LABEL_7;
      }

      ++v9;
      ++v17;
      ++v5;
      if (a5 == v18)
      {
        int64_t v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
    }

    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }

  __break(1u);
  return result;
}

void *sub_100096070(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1LL;
  uint64_t v6 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0LL;
    a3 = 0LL;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }

  if (!a3)
  {
    int64_t v8 = 0LL;
    goto LABEL_35;
  }

  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  int64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }

  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_37;
  }

  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2LL;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13;
    goto LABEL_34;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }

  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }

  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0LL;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0LL;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }

    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }

uint64_t *sub_100096204( uint64_t *result, uint64_t **a2, uint64_t a3, uint64_t a4, unint64_t *a5, void *a6, unint64_t *a7)
{
  uint64_t v7 = a4;
  uint64_t v9 = a2;
  unint64_t v37 = result;
  if ((a4 & 0xC000000000000001LL) != 0)
  {
    if (a4 < 0) {
      uint64_t v13 = a4;
    }
    else {
      uint64_t v13 = a4 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v14 = __CocoaSet.makeIterator()(v13);
    uint64_t v15 = sub_10001C5D0(0LL, a5, a6);
    uint64_t v16 = sub_10001C230(a7, a5, a6);
    uint64_t result = Set.Iterator.init(_cocoa:)(v43, v14, v15, v16);
    uint64_t v7 = v43[0];
    uint64_t v17 = v43[1];
    uint64_t v18 = v43[2];
    int64_t v19 = v43[3];
    unint64_t v20 = v43[4];
    if (v9) {
      goto LABEL_6;
    }
LABEL_39:
    uint64_t v21 = 0LL;
    goto LABEL_41;
  }

  int64_t v19 = 0LL;
  uint64_t v32 = -1LL << *(_BYTE *)(a4 + 32);
  uint64_t v17 = a4 + 56;
  uint64_t v18 = ~v32;
  uint64_t v33 = -v32;
  if (v33 < 64) {
    uint64_t v34 = ~(-1LL << v33);
  }
  else {
    uint64_t v34 = -1LL;
  }
  unint64_t v20 = v34 & *(void *)(a4 + 56);
  if (!a2) {
    goto LABEL_39;
  }
LABEL_6:
  if (!a3)
  {
    uint64_t v21 = 0LL;
LABEL_41:
    uint64_t v35 = v37;
LABEL_44:
    *uint64_t v35 = v7;
    v35[1] = v17;
    void v35[2] = v18;
    void v35[3] = v19;
    v35[4] = v20;
    return (uint64_t *)v21;
  }

  if (a3 < 0) {
    goto LABEL_51;
  }
  uint64_t v21 = 0LL;
  int64_t v38 = (unint64_t)(v18 + 64) >> 6;
  uint64_t v36 = v18;
  while (1)
  {
    if (v7 < 0)
    {
      uint64_t v28 = __CocoaSet.Iterator.next()(result);
      if (!v28) {
        goto LABEL_43;
      }
      uint64_t v29 = v28;
      uint64_t v41 = v28;
      uint64_t v30 = sub_10001C5D0(0LL, a5, a6);
      swift_unknownObjectRetain(v29);
      swift_dynamicCast(&v42, &v41, (char *)&type metadata for Swift.AnyObject + 8, v30, 7LL);
      uint64_t v24 = v42;
      uint64_t result = (uint64_t *)swift_unknownObjectRelease(v29);
      if (!v24) {
        goto LABEL_43;
      }
      goto LABEL_11;
    }

    if (v20)
    {
      unint64_t v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v23 = v22 | (v19 << 6);
      goto LABEL_10;
    }

    int64_t v25 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v25 >= v38)
    {
      unint64_t v20 = 0LL;
      goto LABEL_43;
    }

    unint64_t v26 = *(void *)(v17 + 8 * v25);
    if (v26) {
      goto LABEL_26;
    }
    int64_t v27 = v19 + 2;
    if (v19 + 2 >= v38)
    {
      unint64_t v20 = 0LL;
      ++v19;
      goto LABEL_43;
    }

    unint64_t v26 = *(void *)(v17 + 8 * v27);
    if (!v26)
    {
      if (v19 + 3 >= v38) {
        goto LABEL_47;
      }
      unint64_t v26 = *(void *)(v17 + 8 * (v19 + 3));
      if (v26)
      {
        int64_t v25 = v19 + 3;
        goto LABEL_26;
      }

      int64_t v27 = v19 + 4;
      if (v19 + 4 >= v38)
      {
        unint64_t v20 = 0LL;
        v19 += 3LL;
        goto LABEL_43;
      }

      unint64_t v26 = *(void *)(v17 + 8 * v27);
      if (!v26)
      {
        int64_t v25 = v19 + 5;
        if (v19 + 5 >= v38)
        {
LABEL_47:
          unint64_t v20 = 0LL;
          int64_t v19 = v27;
          goto LABEL_43;
        }

        unint64_t v26 = *(void *)(v17 + 8 * v25);
        if (!v26)
        {
          int64_t v31 = v19 + 6;
          while (v38 != v31)
          {
            unint64_t v26 = *(void *)(v17 + 8 * v31++);
            if (v26)
            {
              int64_t v25 = v31 - 1;
              goto LABEL_26;
            }
          }

          unint64_t v20 = 0LL;
          int64_t v19 = v38 - 1;
          goto LABEL_43;
        }

        goto LABEL_26;
      }
    }

    int64_t v25 = v27;
LABEL_26:
    unint64_t v20 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v25 << 6);
    int64_t v19 = v25;
LABEL_10:
    uint64_t result = (uint64_t *)*(id *)(*(void *)(v7 + 48) + 8 * v23);
    uint64_t v24 = result;
    if (!result) {
      goto LABEL_43;
    }
LABEL_11:
    ++v21;
    *v9++ = v24;
    if (v21 == a3)
    {
      uint64_t v21 = a3;
LABEL_43:
      uint64_t v18 = v36;
      uint64_t v35 = v37;
      goto LABEL_44;
    }
  }

  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

void *sub_1000964FC(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    void v5[4] = v9;
    return (void *)v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  unint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = *(void **)(*(void *)(a4 + 56) + 8 * v16);
    void *v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }

    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

int64_t sub_1000966F8(int64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1LL << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7 & (-2LL << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }

  return result;
}

uint64_t sub_1000967E0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  unint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

void sub_100096868(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = OBJC_IVAR____TtC8FaceTime20ContactPickerControl_avatarView;
  if (qword_1001123D8 != -1) {
    swift_once(&qword_1001123D8, sub_100092730);
  }
  __int128 v5 = xmmword_100115888;
  id v6 = objc_allocWithZone((Class)type metadata accessor for AvatarView(a1, a2));
  *(void *)&v2[v4] = sub_1000924AC((uint64_t)v6, v7, *(double *)&v5, *((double *)&v5 + 1));
  uint64_t v8 = OBJC_IVAR____TtC8FaceTime20ContactPickerControl_floatingContentView;
  *(void *)&v3[v8] = sub_100092790();
  uint64_t v9 = OBJC_IVAR____TtC8FaceTime20ContactPickerControl_backgroundMaterialView;
  id v10 = [objc_allocWithZone(UIView) init];
  id v12 = objc_msgSend((id)objc_opt_self(UIColor, v11), "whiteColor");
  [v10 setBackgroundColor:v12];

  [v10 setAlpha:0.17];
  id v13 = [v10 layer];
  [v13 setCompositingFilter:kCAFilterPlusL];

  *(void *)&v3[v9] = v10;
  uint64_t v14 = OBJC_IVAR____TtC8FaceTime20ContactPickerControl_highlightView;
  id v15 = [objc_allocWithZone(UIView) init];
  id v16 = [objc_allocWithZone(UIColor) initWithWhite:1.0 alpha:1.0];
  [v15 setBackgroundColor:v16];

  *(void *)&v3[v14] = v15;
  uint64_t v17 = OBJC_IVAR____TtC8FaceTime20ContactPickerControl_titleLabel;
  id v18 = [objc_allocWithZone(UILabel) init];
  if (qword_1001123E0 != -1) {
    *(void *)&double v19 = swift_once(&qword_1001123E0, sub_100092748).n128_u64[0];
  }
  id v20 = objc_msgSend(v18, "setFont:", qword_100115898, v19);
  *(void *)&v3[v17] = v18;
  uint64_t v21 = OBJC_IVAR____TtC8FaceTime20ContactPickerControl_trailingIconView;
  *(void *)&v3[v21] = sub_1000929B8((uint64_t)v20, v22);
  unint64_t v23 = &v3[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_menuProvider];
  *unint64_t v23 = 0LL;
  v23[1] = 0LL;
  v3[OBJC_IVAR____TtC8FaceTime20ContactPickerControl_isUserSelected] = 0;
  *(void *)&v3[OBJC_IVAR____TtC8FaceTime20ContactPickerControl____lazy_storage___allowedPressTypes] = 0LL;

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/CreateCallCollectionViewCell.swift",  43LL,  2LL,  154LL,  0);
  __break(1u);
}

id sub_100096AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC8FaceTime20ContactPickerControl_menuProvider);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC8FaceTime20ContactPickerControl_menuProvider + 8);
  __int128 v5 = (void *)objc_opt_self(&OBJC_CLASS___UIContextMenuConfiguration, a2);
  void v10[4] = v3;
  uint64_t v11 = v4;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256LL;
  v10[2] = sub_1000956DC;
  v10[3] = &unk_1000FB8E8;
  id v6 = _Block_copy(v10);
  uint64_t v7 = v11;
  swift_retain_n(v4, 2LL);
  swift_release(v7);
  id v8 = [v5 configurationWithIdentifier:0 previewProvider:0 actionProvider:v6];
  sub_10001C08C(v3, v4);
  _Block_release(v6);
  return v8;
}

void sub_100096BD4()
{
  v0[OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_isUserSelected] = 0;
  unint64_t v1 = &v0[OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_item];
  uint64_t v2 = sub_100018A04(&qword_1001128F8);
  uint64_t v3 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  uint64_t v4 = &v0[OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_selectionHandler];
  void *v4 = 0LL;
  v4[1] = 0LL;
  uint64_t v5 = OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_contactPickerControl;
  *(void *)&v0[v5] = objc_msgSend( objc_allocWithZone((Class)type metadata accessor for ContactPickerControl(v3, v6)),  "init");
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime28CreateCallCollectionViewCell_imageFetchTask] = 0LL;

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001CLL,  0x80000001000DA760LL,  "FaceTime/CreateCallCollectionViewCell.swift",  43LL,  2LL,  326LL,  0);
  __break(1u);
}

uint64_t sub_100096CB0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100096CD4(uint64_t a1)
{
}

uint64_t sub_100096CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100096CEC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id sub_100096CF4(uint64_t a1)
{
  return sub_10009428C(a1, *(void *)(v1 + 16));
}

uint64_t related decl 'e' for TUNeighborhoodActivityConduitError.description.getter(uint64_t a1)
{
  v13[0] = 0LL;
  v13[1] = 0xE000000000000000LL;
  type metadata accessor for TUNeighborhoodActivityConduitError(0LL);
  uint64_t v3 = v2;
  uint64_t v4 = sub_100096E0C(&qword_100112848, (uint64_t)&unk_1000C4444);
  _BridgedStoredNSError.code.getter(&v12, v3, v4);
  uint64_t v11 = v12;
  type metadata accessor for Code(0LL);
  _print_unlocked<A, B>(_:_:)( &v11,  v13,  v5,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v6._uint64_t countAndFlagsBits = 539828265LL;
  v6._char object = (void *)0xE400000000000000LL;
  String.append(_:)(v6);
  uint64_t v12 = a1;
  uint64_t v7 = sub_100096E0C(&qword_100112838, (uint64_t)&unk_1000C4404);
  v8._uint64_t countAndFlagsBits = Error.localizedDescription.getter(v3, v7);
  char object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  return v13[0];
}

uint64_t sub_100096E0C(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TUNeighborhoodActivityConduitError(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100096E4C()
{
  return related decl 'e' for TUNeighborhoodActivityConduitError.description.getter(*v0);
}

id sub_100096E54()
{
  id result = [objc_allocWithZone(UIColor) initWithWhite:0.15 alpha:0.95];
  qword_1001159B0 = (uint64_t)result;
  return result;
}

id sub_100096E9C()
{
  if (qword_1001123E8 != -1) {
    swift_once(&qword_1001123E8, sub_100096E54);
  }
  qword_1001159B8 = qword_1001159B0;
  return (id)qword_1001159B0;
}

id sub_100096EE4()
{
  id result = [objc_allocWithZone(UIColor) initWithWhite:1.0 alpha:0.8];
  qword_1001159C0 = (uint64_t)result;
  return result;
}

id sub_100096F20(uint64_t a1)
{
  return sub_100096F6C(a1, (SEL *)&selRef_whiteColor, &qword_1001159C8);
}

void sub_100096F34()
{
  qword_1001159D0 = 0x4034000000000000LL;
}

id sub_100096F44(uint64_t a1)
{
  return sub_100096F6C(a1, (SEL *)&selRef_whiteColor, &qword_1001159D8);
}

id sub_100096F58(uint64_t a1)
{
  return sub_100096F6C(a1, (SEL *)&selRef_blackColor, &qword_1001159E0);
}

id sub_100096F6C(uint64_t a1, SEL *a2, void *a3)
{
  id result = objc_msgSend((id)objc_opt_self(UIColor, a2), *a2);
  *a3 = result;
  return result;
}

void sub_100096FAC()
{
  uint64_t v1 = sub_10001C5D0(0LL, &qword_100115A28, &OBJC_CLASS____UIFloatingContentView_ptr);
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v1);
  uint64_t v3 = sub_100018A04(&qword_100115A90);
  uint64_t v4 = swift_allocObject(v3, 40LL, 7LL);
  v15[1] = (id)2;
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FB0;
  *(void *)(v4 + 32) = v0;
  sub_100018A04(&qword_100115A98);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v6 =  objc_msgSend( ObjCClassFromMetadata,  "appearanceWhenContainedInInstancesOfClasses:",  isa,  swift_bridgeObjectRelease(v4).n128_f64[0]);

  if (qword_1001123E8 != -1) {
    swift_once(&qword_1001123E8, sub_100096E54);
  }
  objc_msgSend(v6, "setBackgroundColor:forState:", qword_1001159B0, 0, 1);

  uint64_t v7 = swift_allocObject(v3, 40LL, 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)v15;
  *(void *)(v7 + 32) = v0;
  Class v8 = Array._bridgeToObjectiveC()().super.isa;
  id v9 =  objc_msgSend( ObjCClassFromMetadata,  "appearanceWhenContainedInInstancesOfClasses:",  v8,  swift_bridgeObjectRelease(v7).n128_f64[0]);

  if (qword_1001123F0 != -1) {
    swift_once(&qword_1001123F0, sub_100096E9C);
  }
  [v9 setBackgroundColor:qword_1001159B8 forState:8];

  uint64_t v10 = swift_allocObject(v3, 40LL, 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)v15;
  *(void *)(v10 + 32) = v0;
  Class v11 = Array._bridgeToObjectiveC()().super.isa;
  id v12 =  objc_msgSend( ObjCClassFromMetadata,  "appearanceWhenContainedInInstancesOfClasses:",  v11,  swift_bridgeObjectRelease(v10).n128_f64[0]);

  if (qword_1001123F8 != -1) {
    swift_once(&qword_1001123F8, sub_100096EE4);
  }
  [v12 setBackgroundColor:qword_1001159C0 forState:4];

  uint64_t v13 = swift_allocObject(v3, 40LL, 7LL);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)v15;
  *(void *)(v13 + 32) = v0;
  Class v14 = Array._bridgeToObjectiveC()().super.isa;
  id v16 =  objc_msgSend( ObjCClassFromMetadata,  "appearanceWhenContainedInInstancesOfClasses:",  v14,  swift_bridgeObjectRelease(v13).n128_f64[0]);

  if (qword_100112408 != -1) {
    swift_once(&qword_100112408, sub_100096F34);
  }
  objc_msgSend(v16, "setFocusedSizeIncrease:", *(double *)&qword_1001159D0, v16);
}

id sub_1000972DC(void *a1, uint64_t a2, SEL *a3)
{
  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for ControlButton((uint64_t)a1, a2);
  return objc_msgSendSuper2(&v5, *a3);
}

void sub_100097324(void *a1, uint64_t a2, uint64_t a3, const char **a4)
{
  v8.receiver = a1;
  v8.super_class = (Class)type metadata accessor for ControlButton((uint64_t)a1, a2);
  id v6 = *a4;
  id v7 = v8.receiver;
  objc_msgSendSuper2(&v8, v6, a3);
  sub_100097B1C();
}

uint64_t sub_100097388()
{
  id v1 = [v0 subviews];
  uint64_t v2 = sub_10001C5D0(0LL, &qword_100112970, &OBJC_CLASS___UIView_ptr);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v3);
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    uint64_t v5 = 4LL;
    while (1)
    {
      id v6 = (v3 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v3)
         : *(id *)(v3 + 8 * v5);
      objc_super v8 = v6;
      uint64_t v9 = v5 - 3;
      if (__OFADD__(v5 - 4, 1LL)) {
        break;
      }
      uint64_t v10 = objc_opt_self(&OBJC_CLASS____UIFloatingContentView, v7);
      uint64_t v11 = swift_dynamicCastObjCClass(v8, v10);
      if (v11)
      {
        uint64_t v12 = v11;
        swift_bridgeObjectRelease_n(v3, 2LL);
        return v12;
      }

      ++v5;
      if (v9 == v4) {
        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_14:
    if (v3 < 0) {
      uint64_t v14 = v3;
    }
    else {
      uint64_t v14 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v3);
  }

id sub_1000974D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v11 = sub_100018A04(&qword_100115AA0);
  __chkstk_darwin(v11);
  uint64_t v60 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100018A04(&qword_100115AA8);
  __chkstk_darwin(v13);
  id v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for UIButton.Configuration.CornerStyle(0LL);
  uint64_t v56 = *(void *)(v16 - 8);
  uint64_t v57 = v16;
  __chkstk_darwin(v16);
  id v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for UIButton.Configuration(0LL);
  uint64_t v58 = *(void *)(v19 - 8);
  uint64_t v59 = v19;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = v5;
  sub_100096FAC();
  unint64_t v23 = &v22[OBJC_IVAR____TtC8FaceTime13ControlButton_symbolName];
  *(void *)unint64_t v23 = a1;
  *((void *)v23 + 1) = a2;
  uint64_t v24 = &v22[OBJC_IVAR____TtC8FaceTime13ControlButton_selectedSymbolName];
  *(void *)uint64_t v24 = a3;
  *((void *)v24 + 1) = a4;
  swift_bridgeObjectRetain(a2);

  int64_t v27 = (objc_class *)type metadata accessor for ControlButton(v25, v26);
  v62.receiver = v22;
  v62.super_class = v27;
  id v28 = objc_msgSendSuper2(&v62, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  static UIButton.Configuration.plain()();
  id v30 = objc_msgSend((id)objc_opt_self(UIColor, v29), "clearColor");
  int64_t v31 = (void (*)(void *, void))UIButton.Configuration.background.modify(v61);
  UIBackgroundConfiguration.backgroundColor.setter(v30);
  v31(v61, 0LL);
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v34 = objc_msgSend((id)objc_opt_self(UIImage, v33), "_systemImageNamed:", v32);

  UIButton.Configuration.image.setter(v34);
  (*(void (**)(char *, void, uint64_t))(v56 + 104))( v18,  enum case for UIButton.Configuration.CornerStyle.capsule(_:),  v57);
  UIButton.Configuration.cornerStyle.setter(v18);
  UIConfigurationColorTransformer.init(_:)(sub_10009798C, 0LL);
  uint64_t v35 = type metadata accessor for UIConfigurationColorTransformer(0LL);
  uint64_t v36 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL);
  v36(v15, 0LL, 1LL, v35);
  unint64_t v37 = (void (*)(void *, void))UIButton.Configuration.background.modify(v61);
  UIBackgroundConfiguration.backgroundColorTransformer.setter(v15);
  v37(v61, 0LL);
  uint64_t v38 = swift_allocObject(&unk_1000FB930, 24LL, 7LL);
  swift_unknownObjectWeakInit(v38 + 16, v28);
  UIConfigurationColorTransformer.init(_:)(sub_1000980C0, v38);
  v36(v15, 0LL, 1LL, v35);
  UIButton.Configuration.imageColorTransformer.setter(v15);
  uint64_t v40 = v58;
  uint64_t v39 = v59;
  uint64_t v41 = v60;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v60, v21, v59);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v41, 0LL, 1LL, v39);
  id v42 = v28;
  UIButton.configuration.setter(v41);

  [v42 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v44 = (void *)objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, v43);
  uint64_t v45 = sub_100018A04(&qword_1001142B0);
  uint64_t v46 = swift_allocObject(v45, 48LL, 7LL);
  *(_OWORD *)(v46 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FC0;
  id v47 = [v42 widthAnchor];
  id v48 = [v47 constraintEqualToConstant:a5];

  *(void *)(v46 + 32) = v48;
  id v49 = [v42 heightAnchor];
  id v50 = [v49 constraintEqualToConstant:a5];

  *(void *)(v46 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v50;
  v61[0] = v46;
  specialized Array._endMutation()(v51);
  uint64_t v52 = v61[0];
  sub_10001C5D0(0LL, (unint64_t *)&qword_100113120, &OBJC_CLASS___NSLayoutConstraint_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v44, "activateConstraints:", isa, swift_bridgeObjectRelease(v52).n128_f64[0]);

  (*(void (**)(char *, uint64_t))(v40 + 8))(v21, v39);
  return v42;
}

id sub_10009798C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend((id)objc_opt_self(UIColor, a2), "clearColor");
}

id sub_1000979B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0LL, 0LL);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    uint64_t v4 = Strong;
    if ([Strong isSelected])
    {
      if (qword_100112418 != -1) {
        swift_once(&qword_100112418, sub_100096F58);
      }
      uint64_t v5 = (void *)qword_1001159E0;
    }

    else
    {
      if (qword_100112410 != -1) {
        swift_once(&qword_100112410, sub_100096F44);
      }
      uint64_t v5 = (void *)qword_1001159D8;
    }

    id v7 = v5;

    return v7;
  }

  else
  {
    if (qword_100112410 != -1) {
      swift_once(&qword_100112410, sub_100096F44);
    }
    return (id)qword_1001159D8;
  }

void sub_100097B1C()
{
  unsigned int v1 = [v0 isSelected];
  [v0 isHighlighted];
  [v0 isFocused];
  uint64_t v2 = sub_100097388();
  uint64_t v4 = (void *)v2;
  if (v1)
  {
    if (v2)
    {
      if (qword_100112400 != -1) {
        swift_once(&qword_100112400, sub_100096F20);
      }
      [v4 setBackgroundColor:qword_1001159C8 forState:8];
    }

    uint64_t v5 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v3), "mainBundle");
    unint64_t v11 = 0xEB00000000656C62LL;
    uint64_t v6 = 20047LL;
    unint64_t v7 = 0xE200000000000000LL;
  }

  else
  {
    if (v2)
    {
      if (qword_1001123F0 != -1) {
        swift_once(&qword_1001123F0, sub_100096E9C);
      }
      [v4 setBackgroundColor:qword_1001159B8 forState:8];
    }

    uint64_t v5 = (NSBundle *)objc_msgSend((id)objc_opt_self(NSBundle, v3), "mainBundle");
    unint64_t v11 = 0xEB00000000656C62LL;
    uint64_t v6 = 4605519LL;
    unint64_t v7 = 0xE300000000000000LL;
  }

  v8._uint64_t countAndFlagsBits = 0LL;
  v8._char object = (void *)0xE000000000000000LL;
  uint64_t v9 = 0x617A696C61636F4CLL;
  char object = NSLocalizedString(_:tableName:bundle:value:comment:)( *(Swift::String *)&v6,  (Swift::String_optional)0,  v5,  v8,  *(Swift::String *)(&v11 + -8))._object;

  id v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setAccessibilityValue:", v12, swift_bridgeObjectRelease(object).n128_f64[0]);
}

uint64_t sub_100097D00()
{
  uint64_t v1 = sub_100018A04(&qword_100115AA0);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  unint64_t v7 = (char *)&v17 - v6;
  uint64_t v9 = (objc_class *)type metadata accessor for ControlButton(v5, v8);
  v17.receiver = v0;
  v17.super_class = v9;
  objc_msgSendSuper2(&v17, "updateConfiguration");
  uint64_t v10 = *(void *)&v0[OBJC_IVAR____TtC8FaceTime13ControlButton_selectedSymbolName + 8];
  uint64_t v11 = swift_bridgeObjectRetain(v10);
  UIButton.configuration.getter(v11);
  uint64_t v12 = type metadata accessor for UIButton.Configuration(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v7, 1LL, v12))
  {
    swift_bridgeObjectRelease(v10);
    sub_100098014((uint64_t)v7, (uint64_t)v4);
    UIButton.configuration.setter(v4);
    return sub_10009805C((uint64_t)v7);
  }

  else
  {
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10);
    id v16 = objc_msgSend((id)objc_opt_self(UIImage, v15), "_systemImageNamed:", v14);

    UIButton.Configuration.image.setter(v16);
    return UIButton.configuration.setter(v7);
  }

id sub_100097F84(uint64_t a1, uint64_t a2)
{
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for ControlButton(a1, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for ControlButton(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8FaceTime13ControlButton, a2);
}

uint64_t sub_100098014(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100018A04(&qword_100115AA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009805C(uint64_t a1)
{
  uint64_t v2 = sub_100018A04(&qword_100115AA0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10009809C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id sub_1000980C0(uint64_t a1)
{
  return sub_1000979B8(a1, v1);
}

ValueMetadata *type metadata accessor for SplashScreenWaitView()
{
  return &type metadata for SplashScreenWaitView;
}

uint64_t sub_1000980DC(int a1, id a2)
{
  id v3 = [a2 deviceModel];
  id v4 = [a2 name];
  if (v4)
  {
    uint64_t v6 = v4;
    unint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v9 = v8;
  }

  else
  {
    unint64_t v7 = 0LL;
    uint64_t v9 = 0LL;
  }

  BOOL v10 = v3 == (id)2;
  if (v3 == (id)2) {
    uint64_t v11 = (void *)0x80000001000DC760LL;
  }
  else {
    uint64_t v11 = (void *)0x80000001000DC740LL;
  }
  if (v10) {
    uint64_t v12 = 0xD000000000000018LL;
  }
  else {
    uint64_t v12 = 0xD00000000000001ALL;
  }
  id v13 = objc_allocWithZone((Class)type metadata accessor for SplashScreenConfirmView(0LL, v5));
  return sub_10003A104(v12, v11, v7, v9);
}

uint64_t sub_1000981B0(int a1)
{
  return sub_1000980DC(a1, *v1);
}

uint64_t sub_1000981B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10009827C();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100098208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10009827C();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100098258(uint64_t a1)
{
  unint64_t v2 = sub_10009827C();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_10009827C()
{
  unint64_t result = qword_100115AB0;
  if (!qword_100115AB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000C6C48, &type metadata for SplashScreenWaitView);
    atomic_store(result, (unint64_t *)&qword_100115AB0);
  }

  return result;
}

uint64_t sub_1000982C0(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t v8 = 0LL;
  if (v7)
  {
    while (1)
    {
      if ((a3 & 0xC000000000000001LL) != 0)
      {
        uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a3);
      }

      else
      {
        uint64_t v9 = *(void *)(a3 + 8 * v8 + 32);
        swift_retain(v9);
      }

      uint64_t v14 = v9;
      char v10 = a1(&v14);
      swift_release(v9);
      if (v4 || (v10 & 1) != 0) {
        break;
      }
      uint64_t v11 = v8 + 1;
      if (__OFADD__(v8, 1LL))
      {
        __break(1u);
LABEL_14:
        if (a3 < 0) {
          uint64_t v12 = a3;
        }
        else {
          uint64_t v12 = a3 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(a3);
        uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v12);
        swift_bridgeObjectRelease(a3);
        uint64_t v8 = 0LL;
        if (!v7) {
          return v8;
        }
      }

      else
      {
        ++v8;
        if (v11 == v7) {
          return 0LL;
        }
      }
    }
  }

  return v8;
}

uint64_t sub_1000983DC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000983FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_10009841C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v5 = v3;
    uint64_t v7 = a2;
    uint64_t v9 = sub_100099150();
    uint64_t v10 = (uint64_t)sub_10009EE20(a1, v7, a3);
    LOBYTE(v7) = v11;

    if ((v7 & 1) != 0) {
      goto LABEL_21;
    }
    unint64_t v12 = v10 - 1;
    if (__OFSUB__(v10, 1LL))
    {
      __break(1u);
    }

    else
    {
      uint64_t v9 = sub_100099150();
      uint64_t v4 = &unk_100115000;
      id v13 = (uint64_t *)&v9[OBJC_IVAR____TtC8FaceTime9Snowglobe_bubbles];
      swift_beginAccess(&v9[OBJC_IVAR____TtC8FaceTime9Snowglobe_bubbles], v36, 0LL, 0LL);
      a1 = *v13;
      if (!((unint64_t)a1 >> 62))
      {
        uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);

        if (v10 < v14)
        {
LABEL_6:
          unint64_t v12 = *(void *)&v5[OBJC_IVAR____TtC8FaceTime13SnowglobeView_globeFocusGuide];
          uint64_t v15 = sub_100018A04(&qword_1001142B0);
          uint64_t v16 = swift_allocObject(v15, 40LL, 7LL);
          *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FD0;
          objc_super v17 = sub_100099150();
          id v18 = &v17[v4[364]];
          swift_beginAccess(v18, v35, 0LL, 0LL);
          uint64_t v19 = *(void *)v18;
          swift_bridgeObjectRetain(v19);

          if ((v19 & 0xC000000000000001LL) != 0)
          {
            uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v19);
            goto LABEL_10;
          }

          if (v10 < 0)
          {
            __break(1u);
          }

          else if ((unint64_t)v10 < *(void *)((v19 & 0xFFFFFFFFFFFFF8LL) + 0x10))
          {
            uint64_t v20 = *(void *)(v19 + 8 * v10 + 32);
            swift_retain(v20);
LABEL_10:
            swift_bridgeObjectRelease(v19);
            id v21 = *(id *)(v20 + OBJC_IVAR____TtC8FaceTime6Bubble_focus);
            uint64_t v22 = swift_release(v20);
            *(void *)(v16 + 32) = v21;
            specialized Array._endMutation()(v22);
            sub_100018A04(&qword_100112990);
            Class isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v16);
            [(id)v12 setPreferredFocusEnvironments:isa];

LABEL_22:
            sub_10009BA04();
            uint64_t v33 = sub_100099150();
            char v34 = v33[OBJC_IVAR____TtC8FaceTime9Snowglobe_mode];

            sub_10009A978(v34);
            [v5 setNeedsFocusUpdate];
            return;
          }

          __break(1u);
          goto LABEL_27;
        }

        goto LABEL_16;
      }
    }

    if (a1 < 0) {
      uint64_t v24 = a1;
    }
    else {
      uint64_t v24 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter(v24);

    swift_bridgeObjectRelease(a1);
    if (v10 < v25) {
      goto LABEL_6;
    }
LABEL_16:
    if ((v12 & 0x8000000000000000LL) == 0)
    {
      uint64_t v10 = *(void *)&v5[OBJC_IVAR____TtC8FaceTime13SnowglobeView_globeFocusGuide];
      uint64_t v26 = sub_100018A04(&qword_1001142B0);
      uint64_t v16 = swift_allocObject(v26, 40LL, 7LL);
      *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FD0;
      int64_t v27 = sub_100099150();
      id v28 = &v27[v4[364]];
      swift_beginAccess(v28, v35, 0LL, 0LL);
      uint64_t v19 = *(void *)v28;
      swift_bridgeObjectRetain(v19);

      if ((v19 & 0xC000000000000001LL) == 0)
      {
        if (v12 >= *(void *)((v19 & 0xFFFFFFFFFFFFF8LL) + 0x10))
        {
          __break(1u);
          return;
        }

        uint64_t v29 = *(void *)(v19 + 8 * v12 + 32);
        swift_retain(v29);
        goto LABEL_20;
      }

void sub_1000987B8(uint64_t a1, void *a2, double a3)
{
  unint64_t v6 = *(void (**)(double))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v7 = a2;
  v6(a3);
  swift_release(v5);
}

objc_super *sub_100098818(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OBJC_IVAR____TtC8FaceTime13SnowglobeView____lazy_storage___facetimeButton;
  uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC8FaceTime13SnowglobeView____lazy_storage___facetimeButton);
  if (v4)
  {
    uint64_t v5 = *(objc_super **)(v2 + OBJC_IVAR____TtC8FaceTime13SnowglobeView____lazy_storage___facetimeButton);
  }

  else
  {
    unint64_t v6 = sub_100098878(v2, a2);
    id v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    uint64_t v5 = v6;

    uint64_t v4 = 0LL;
  }

  id v8 = v4;
  return v5;
}

objc_super *sub_100098878(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC8FaceTime13SnowglobeView_isAddingParticipants) == 1)
  {
    sub_100045934(a1 + OBJC_IVAR____TtC8FaceTime13SnowglobeView_callType, &v20._countAndFlagsBits);
    uint64_t v3 = (objc_class *)type metadata accessor for FaceTimeButton(0LL, v2);
    uint64_t v4 = objc_allocWithZone(v3);
    *(void *)&v4[OBJC_IVAR____TtC8FaceTime14FaceTimeButton____lazy_storage___activityIndicator] = 0LL;
    *(_OWORD *)&v4[OBJC_IVAR____TtC8FaceTime14FaceTimeButton_size] = xmmword_1000C3F80;
    v4[OBJC_IVAR____TtC8FaceTime14FaceTimeButton_isWaitingForCallToStart] = 0;
    uint64_t v5 = &v4[OBJC_IVAR____TtC8FaceTime14FaceTimeButton_viewModel];
    *((void *)v5 + 6) = v23;
    __int128 v6 = v22;
    __int128 v7 = v21;
    *(Swift::String *)uint64_t v5 = v20;
    *((_OWORD *)v5 + 1) = v7;
    *((_OWORD *)v5 + 2) = v6;
    id v18 = v4;
    id v8 = (objc_super *)&v18;
  }

  else
  {
    sub_1000456B8(a2, &v20);
    uint64_t v3 = (objc_class *)type metadata accessor for FaceTimeButton(0LL, v9);
    uint64_t v10 = objc_allocWithZone(v3);
    *(void *)&v10[OBJC_IVAR____TtC8FaceTime14FaceTimeButton____lazy_storage___activityIndicator] = 0LL;
    *(_OWORD *)&v10[OBJC_IVAR____TtC8FaceTime14FaceTimeButton_size] = xmmword_1000C3F80;
    v10[OBJC_IVAR____TtC8FaceTime14FaceTimeButton_isWaitingForCallToStart] = 0;
    char v11 = &v10[OBJC_IVAR____TtC8FaceTime14FaceTimeButton_viewModel];
    *((void *)v11 + 6) = v23;
    __int128 v12 = v22;
    __int128 v13 = v21;
    *(Swift::String *)char v11 = v20;
    *((_OWORD *)v11 + 1) = v13;
    *((_OWORD *)v11 + 2) = v12;
    v19.receiver = v10;
    id v8 = &v19;
  }

  v8->super_class = v3;
  uint64_t v14 = -[objc_super initWithFrame:](v8, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  -[objc_super setEnabled:](v14, "setEnabled:", 0LL);
  uint64_t v15 = v14;
  NSString v16 = String._bridgeToObjectiveC()();
  -[objc_super setAccessibilityIdentifier:](v15, "setAccessibilityIdentifier:", v16);

  return v15;
}

id sub_100098A38()
{
  return sub_10009CB6C( &OBJC_IVAR____TtC8FaceTime13SnowglobeView____lazy_storage___facetimeAudioButton,  (uint64_t (*)(void))sub_100098A4C);
}

id sub_100098A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (objc_class *)type metadata accessor for FaceTimeButton(0LL, v2);
  uint64_t v4 = objc_allocWithZone(v3);
  *(void *)&v4[OBJC_IVAR____TtC8FaceTime14FaceTimeButton____lazy_storage___activityIndicator] = 0LL;
  *(_OWORD *)&v4[OBJC_IVAR____TtC8FaceTime14FaceTimeButton_size] = xmmword_1000C3F80;
  v4[OBJC_IVAR____TtC8FaceTime14FaceTimeButton_isWaitingForCallToStart] = 0;
  uint64_t v5 = (Swift::String *)&v4[OBJC_IVAR____TtC8FaceTime14FaceTimeButton_viewModel];
  v5[3]._uint64_t countAndFlagsBits = v14;
  Swift::String v6 = v13[2];
  Swift::String v7 = v13[1];
  *uint64_t v5 = v13[0];
  v5[1] = v7;
  uint64_t v5[2] = v6;
  v12.receiver = v4;
  v12.super_class = v3;
  id v8 = objc_msgSendSuper2(&v12, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  [v8 setEnabled:0];
  [v8 setHidden:1];
  id v9 = v8;
  NSString v10 = String._bridgeToObjectiveC()();
  [v9 setAccessibilityIdentifier:v10];

  return v9;
}

id sub_100098B78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OBJC_IVAR____TtC8FaceTime13SnowglobeView____lazy_storage___vibrancyEffectView;
  uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC8FaceTime13SnowglobeView____lazy_storage___vibrancyEffectView);
  if (v4)
  {
    id v5 = *(id *)(v2 + OBJC_IVAR____TtC8FaceTime13SnowglobeView____lazy_storage___vibrancyEffectView);
  }

  else
  {
    id v6 = objc_msgSend((id)objc_opt_self(UIBlurEffect, a2), "effectWithStyle:", 4015);
    id v8 = objc_msgSend((id)objc_opt_self(UIVibrancyEffect, v7), "effectForBlurEffect:", v6);
    id v9 = [objc_allocWithZone(UIVisualEffectView) initWithEffect:v8];

    NSString v10 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v9;
    id v5 = v9;

    uint64_t v4 = 0LL;
  }

  id v11 = v4;
  return v5;
}

id sub_100098C50()
{
  id v0 = [objc_allocWithZone(UILabel) init];
  id v2 = objc_msgSend((id)objc_opt_self(UIFont, v1), "systemFontOfSize:weight:", 27.0, UIFontWeightMedium);
  [v0 setFont:v2];

  [v0 setTextAlignment:1];
  [v0 setNumberOfLines:3];
  id v4 = objc_msgSend((id)objc_opt_self(UIColor, v3), "secondaryLabelColor");
  [v0 setTextColor:v4];

  id v5 = [v0 layer];
  [v5 setCompositingFilter:kCAFilterPlusD];

  return v0;
}

id sub_100098DC4()
{
  uint64_t v1 = sub_100099150();
  int v2 = v1[OBJC_IVAR____TtC8FaceTime9Snowglobe_mode];

  if (v2 == 3)
  {
    id result =  [*(id *)(v0 + OBJC_IVAR____TtC8FaceTime13SnowglobeView_globeFocusGuide) preferredFocusEnvironments];
    if (result)
    {
      id v4 = result;
      uint64_t v5 = sub_100018A04(&qword_100112990);
      uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

      return (id)v6;
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    uint64_t v7 = sub_100018A04(&qword_1001142B0);
    uint64_t v8 = swift_allocObject(v7, 40LL, 7LL);
    *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FD0;
    NSString v10 = sub_100098818(v8, v9);
    *(void *)(v8 + 32) = v10;
    specialized Array._endMutation()(v10);
    return (id)v8;
  }

  return result;
}

id sub_100098E94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OBJC_IVAR____TtC8FaceTime13SnowglobeView____lazy_storage___verticalButtonConstraint;
  id v4 = *(void **)(v2 + OBJC_IVAR____TtC8FaceTime13SnowglobeView____lazy_storage___verticalButtonConstraint);
  if (v4)
  {
    id v5 = *(id *)(v2 + OBJC_IVAR____TtC8FaceTime13SnowglobeView____lazy_storage___verticalButtonConstraint);
  }

  else
  {
    uint64_t v6 = sub_100098818(a1, a2);
    id v7 = -[objc_super topAnchor](v6, "topAnchor");

    id v8 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v2
                                                               + OBJC_IVAR____TtC8FaceTime13SnowglobeView_contentView), "centerYAnchor"));
    id v9 = [v7 constraintEqualToAnchor:v8 constant:0.0];

    NSString v10 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v9;
    id v5 = v9;

    id v4 = 0LL;
  }

  id v11 = v4;
  return v5;
}

id sub_100098F68()
{
  uint64_t v1 = OBJC_IVAR____TtC8FaceTime13SnowglobeView____lazy_storage___horizontalCenteringConstraint;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC8FaceTime13SnowglobeView____lazy_storage___horizontalCenteringConstraint];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR____TtC8FaceTime13SnowglobeView____lazy_storage___horizontalCenteringConstraint];
  }

  else
  {
    id v4 = [*(id *)&v0[OBJC_IVAR____TtC8FaceTime13SnowglobeView_contentView] centerXAnchor];
    id v5 = [v0 centerXAnchor];
    id v6 = [v4 constraintEqualToAnchor:v5];

    id v7 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v6;
    id v3 = v6;

    uint64_t v2 = 0LL;
  }

  id v8 = v2;
  return v3;
}

void sub_10009902C()
{
  uint64_t v1 = OBJC_IVAR____TtC8FaceTime13SnowglobeView_verticalCenteringConstraint;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC8FaceTime13SnowglobeView_verticalCenteringConstraint];
  if (v2)
  {
    id v3 = v2;
    [v3 setActive:0];
    [*(id *)&v0[OBJC_IVAR____TtC8FaceTime13SnowglobeView_contentView] removeConstraint:v3];
  }

  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(&v0[OBJC_IVAR____TtC8FaceTime13SnowglobeView_verticalCenteringView]);
  if (!Strong) {
    uint64_t Strong = v0;
  }
  id v5 = [*(id *)&v0[OBJC_IVAR____TtC8FaceTime13SnowglobeView_contentView] centerYAnchor];
  id v6 = [Strong centerYAnchor];
  id v7 = [v5 constraintEqualToAnchor:v6];

  [v7 setActive:1];
  id v8 = *(id *)&v0[v1];
  *(void *)&v0[v1] = v7;
}

char *sub_100099150()
{
  uint64_t v1 = OBJC_IVAR____TtC8FaceTime13SnowglobeView____lazy_storage___snowglobe;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC8FaceTime13SnowglobeView____lazy_storage___snowglobe];
  if (v2)
  {
    id v3 = *(char **)&v0[OBJC_IVAR____TtC8FaceTime13SnowglobeView____lazy_storage___snowglobe];
  }

  else
  {
    id v4 = v0;
    [v0 bounds];
    double v6 = v5;
    double v8 = v7;
    id v9 = objc_allocWithZone((Class)type metadata accessor for Snowglobe(0LL));
    NSString v10 = sub_10009D408(v6, v8);
    swift_unknownObjectWeakAssign(&v10[OBJC_IVAR____TtC8FaceTime9Snowglobe_parent], v4);
    id v11 = *(void **)&v4[v1];
    *(void *)&v4[v1] = v10;
    id v3 = v10;

    uint64_t v2 = 0LL;
  }

  id v12 = v2;
  return v3;
}

void sub_100099224()
{
  uint64_t v1 = v0;
  [v0 setClipsToBounds:0];
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 setAccessibilityIdentifier:v2];

  id v3 = *(void **)&v1[OBJC_IVAR____TtC8FaceTime13SnowglobeView_contentView];
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v1 addSubview:v3];
  id v4 = sub_100099150();
  id v5 = *(id *)&v4[OBJC_IVAR____TtC8FaceTime9Snowglobe_skView];

  [v3 addSubview:v5];
  double v6 = sub_100099150();
  id v7 = *(id *)&v6[OBJC_IVAR____TtC8FaceTime9Snowglobe_maskedView];

  double v8 = sub_100099150();
  id v9 = *(id *)&v8[OBJC_IVAR____TtC8FaceTime9Snowglobe_globeView];

  [v7 addSubview:v9];
  NSString v10 = sub_100099150();
  id v11 = *(id *)&v10[OBJC_IVAR____TtC8FaceTime9Snowglobe_maskedView];

  [v3 addSubview:v11];
  id v14 = sub_100098B78(v12, v13);
  [v14 setUserInteractionEnabled:0];

  id v17 = sub_100098B78(v15, v16);
  [v3 addSubview:v17];

  id v20 = sub_100098B78(v18, v19);
  sub_100092200(v20);

  uint64_t v23 = sub_100098818(v21, v22);
  -[objc_super setTranslatesAutoresizingMaskIntoConstraints:](v23, "setTranslatesAutoresizingMaskIntoConstraints:", 0LL);

  uint64_t v26 = sub_100098818(v24, v25);
  [v3 addSubview:v26];

  id v27 = sub_100098A38();
  [v27 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v28 = sub_100098A38();
  [v3 addSubview:v28];

  id v31 = sub_100098B78(v29, v30);
  id v32 = [v31 contentView];

  uint64_t v33 = *(void **)&v1[OBJC_IVAR____TtC8FaceTime13SnowglobeView_userNamesLabel];
  [v32 addSubview:v33];

  id v36 = sub_100098B78(v34, v35);
  [v36 setUserInteractionEnabled:0];

  [v33 setTranslatesAutoresizingMaskIntoConstraints:0];
  unint64_t v37 = *(void **)&v1[OBJC_IVAR____TtC8FaceTime13SnowglobeView_noUserLabel];
  [v3 addSubview:v37];
  [v37 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v38 = *(void **)&v1[OBJC_IVAR____TtC8FaceTime13SnowglobeView_leadingFocusGuide];
  uint64_t v39 = sub_100018A04(&qword_1001142B0);
  uint64_t v40 = swift_allocObject(v39, 48LL, 7LL);
  *(_OWORD *)(v40 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C3FC0;
  *(void *)(v40 + 32) = sub_100098818(v40, v41);
  *(void *)(v40 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = sub_100098A38();
  specialized Array._endMutation()();
  uint64_t v42 = v40;
  sub_100018A04(&qword_100112990);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v42);
  [v38 setPreferredFocusEnvironments:isa];

  [v1 addLayoutGuide:v38];
  [v1 addLayoutGuide:*(void *)&v1[OBJC_IVAR____TtC8FaceTime13SnowglobeView_globeFocusGuide]];
  sub_1000995DC();
}

void sub_1000995DC()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC8FaceTime13SnowglobeView_contentView];
  id v2 = [v1 centerYAnchor];
  id v3 = [v0 centerYAnchor];
  id v4 = [v2 constraintEqualToAnchor:v3];

  id v5 = *(void **)&v0[OBJC_IVAR____TtC8FaceTime13SnowglobeView_verticalCenteringConstraint];
  *(void *)&v0[OBJC_IVAR____TtC8FaceTime13SnowglobeView_verticalCenteringConstraint] = v4;
  id v6 = v4;

  id v7 = sub_100099150();
  id v8 = *(id *)&v7[OBJC_IVAR____TtC8FaceTime9Snowglobe_skView];

  id v9 = sub_100099150();
  id v134 = *(id *)&v9[OBJC_IVAR____TtC8FaceTime9Snowglobe_maskedView];

  NSString v10 = sub_100099150();
  id v133 = *(id *)&v10[OBJC_IVAR____TtC8FaceTime9Snowglobe_globeView];

  uint64_t v131 = (void *)objc_opt_self(&OBJC_CLASS___NSLayoutConstraint, v11);
  uint64_t v12 = sub_100018A04(&qword_1001142B0);
  uint64_t v13 = swift_allocObject(v12, 320LL, 7LL);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000C6D30;
  id v14 = [v1 widthAnchor];
  id v15 = [v0 widthAnchor];
  id v16 = [v14 constraintEqualToAnchor:v15];

  *(void *)(v13 + 32) = v16;
  id v17 = [v1 heightAnchor];
  id v18 = [v0 heightAnchor];
  id v19 = [v17 constraintEqualToAnchor:v18];

  *(void *)(v13 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v19;
  *(void *)(v13 + 4_Block_object_dispose(va, 8) = sub_100098F68();
  *(void *)(v13 + 56) = v6;
  id v130 = v6;
  id v20 = [v8 leadingAnchor];
  id v21 = [v1 leadingAnchor];
  id v22 = [v20 constraintEqualToAnchor:v21];

  *(void *)(v13 + 64) = v22;
  id v23 = [v8 topAnchor];
  id v24 = [v1 topAnchor];
  id v25 = [v23 constraintEqualToAnchor:v24];

  *(void *)(v13 + 72) = v25;
  id v26 = [v8 trailingAnchor];
  id v27 = [v1 trailingAnchor];
  id v28 = [v26 constraintEqualToAnchor:v27];

  *(void *)(v13 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v28;
  id v29 = [v8 bottomAnchor];
  id v30 = [v1 bottomAnchor];
  id v31 = [v29 constraintEqualToAnchor:v30];

  *(void *)(v13 + 8_Block_object_dispose(va, 8) = v31;
  id v32 = [v134 leadingAnchor];
  id v33 = [v1 leadingAnchor];
  id v34 = [v32 constraintEqualToAnchor:v33 constant:-20.0];

  *(void *)(v13 + 96) = v34;
  id v35 = [v134 topAnchor];
  id v36 = [v1 topAnchor];
  id v37 = [v35 constraintEqualToAnchor:v36];

  *(void *)(v13 + 104) = v37;
  id v38 = [v134 trailingAnchor];
  id v39 = [v1 trailingAnchor];
  id v40 = [v38 constraintEqualToAnchor:v39 constant:25.0];

  *(void *)(v13 + 112) = v40;
  id v41 = [v134 bottomAnchor];
  id v42 = [v1 bottomAnchor];
  id v43 = [v41 constraintEqualToAnchor:v42];

  *(void *)(v13 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v43;
  id v44 = [v133 leadingAnchor];
  id v45 = [v1 leadingAnchor];
  id v46 = [v44 constraintEqualToAnchor:v45];

  *(void *)(v13 + 12_Block_object_dispose(va, 8) = v46;
  id v47 = [v133 topAnchor];
  id v48 = [v1 topAnchor];
  id v49 = [v47 constraintEqualToAnchor:v48];

  *(void *)(v13 + 136) = v49;
  id v50 = [v133 trailingAnchor];
  id v51 = [v1 trailingAnchor];
  id v52 = [v50 constraintEqualToAnchor:v51];

  *(void *)(v13 + 144) = v52;
  id v53 = [v133 bottomAnchor];
  id v54 = [v1 bottomAnchor];
  id v55 = [v53 constraintEqualToAnchor:v54];

  *(void *)(v13 + 152) = v55;
  uint64_t v58 = sub_100098818(v56, v57);
  id v59 = -[objc_super centerXAnchor](v58, "centerXAnchor");

  id v60 = [v1 centerXAnchor];
  id v61 = [v59 constraintEqualToAnchor:v60];

  *(void *)(v13 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v61;
  id v64 = sub_100098E94(v62, v63);
  *(void *)(v13 + 16_Block_object_dispose(va, 8) = v64;
  __n128 v66 = sub_100098818((uint64_t)v64, v65);
  id v67 = -[objc_super heightAnchor](v66, "heightAnchor");

  id v68 = [v67 constraintEqualToConstant:82.0];
  *(void *)(v13 + 176) = v68;
  id v69 = sub_100098A38();
  id v70 = [v69 centerXAnchor];

  id v71 = [v1 centerXAnchor];
  id v72 = [v70 constraintEqualToAnchor:v71];

  *(void *)(v13 + 184) = v72;
  id v73 = sub_100098A38();
  id v74 = [v73 heightAnchor];

  id v75 = [v74 constraintEqualToConstant:82.0];
  *(void *)(v13 + 192) = v75;
  id v76 = sub_100098A38();
  id v77 = [v76 topAnchor];

  uint64_t v80 = sub_100098818(v78, v79);
  id v81 = -[objc_super bottomAnchor](v80, "bottomAnchor");

  id v82 = [v77 constraintEqualToAnchor:v81 constant:14.0];
  *(void *)(v13 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v82;
  uint64_t v83 = *(void **)&v0[OBJC_IVAR____TtC8FaceTime13SnowglobeView_noUserLabel];
  id v84 = [v83 centerXAnchor];
  id v85 = [v1 centerXAnchor];
  id v86 = [v84 constraintEqualToAnchor:v85];

  *(void *)(v13 + 20_Block_object_dispose(va, 8) = v86;
  id v87 = [v83 bottomAnchor];
  uint64_t v89 = sub_100098818((uint64_t)v87, v88);
  id v90 = -[objc_super topAnchor](v89, "topAnchor");

  id v91 = [v87 constraintEqualToAnchor:v90 constant:-35.0];
  *(void *)(v13 + 2swift_unknownObjectWeakDestroy(v0 + 16) = v91;
  id v92 = [v83 widthAnchor];
  id v93 = [v92 constraintEqualToConstant:375.0];

  *(void *)(v13 + 224) = v93;
  uint64_t v94 = *(void **)&v0[OBJC_IVAR____TtC8FaceTime13SnowglobeView_userNamesLabel];
  id v95 = [v94 bottomAnchor];
  uint64_t v97 = sub_100098818((uint64_t)v95, v96);
  id v98 = -[objc_super topAnchor](v97, "topAnchor");

  id v99 = [v95 constraintEqualToAnchor:v98 constant:-35.0];
  *(void *)(v13 + 232) = v99;
  id v100 = [v94 centerXAnchor];
  id v101 = [v1 centerXAnchor];
  id v102 = [v100 constraintEqualToAnchor:v101];

  *(void *)(v13 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v102;
  id v103 = [v94 widthAnchor];
  id v104 = [v103 constraintEqualToConstant:480.0];

  *(void *)(v13 + 24_Block_object_dispose(va, 8) = v104;
  uint64_t v105 = *(void **)&v0[OBJC_IVAR____TtC8FaceTime13SnowglobeView_leadingFocusGuide];
  id v106 = [v105 leadingAnchor];
  id v107 = [v0 leadingAnchor];
  id v108 = [v106 constraintEqualToAnchor:v107];

  *(void *)(v13 + 256) = v108;
  id v109 = [v105 widthAnchor];
  id v110 = [v109 constraintEqualToConstant:1.0];

  *(void *)(v13 + 264) = v110;
  id v111 = [v105 topAnchor];
  id v112 = [v0 topAnchor];
  id v113 = [v111 constraintEqualToAnchor:v112];

  *(void *)(v13 + 272) = v113;
  id v114 = [v105 bottomAnchor];
  id v115 = [v0 bottomAnchor];
  id v116 = [v114 constraintEqualToAnchor:v115];

  *(void *)(v13 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x80000001000D8750LL,  "FaceTime/SplashScreenViewController.swift",  41LL,  2LL,  34LL, 0) = v116;
  uint64_t v117 = *(void **)&v0[OBJC_IVAR____TtC8FaceTime13SnowglobeView_globeFocusGuide];
  id v118 = [v117 widthAnchor];
  id v119 = [v118 constraintEqualToConstant:500.0];

  *(void *)(v13 + 28_Block_object_dispose(va, 8) = v119;
  id v120 = [v117 centerXAnchor];
  id v121 = [v1 centerXAnchor];
  id v122 = [v120 constraintEqualToAnchor:v121];

  *(void *)(v13 + 296) = v122;
  id v123 = [v117 bottomAnchor];
  uint64_t v125 = sub_100098818((uint64_t)v123, v124);
  id v126 = -[objc_super topAnchor](v125, "topAnchor");

  id v127 = [v123 constraintEqualToAnchor:v126 constant:-10.0];
  *(void *)(v13 + 304) = v127;
  id v128 = [v117 heightAnchor];
  id v129 = [v128 constraintEqualToConstant:5.0];

  *(void *)(v13 + 312) = v129;
  specialized Array._endMutation()();
  sub_10001C5D0(0LL, (unint64_t *)&qword_100113120, &OBJC_CLASS___NSLayoutConstraint_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v13);
  [v131 activateConstraints:isa];
}